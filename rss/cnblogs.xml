<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>vue UI库iview源码解析（2） - 核桃大号</title>
<link>http://www.cnblogs.com/hetaojs/p/9019896.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hetaojs/p/9019896.html</guid>
<description>&lt;h2 id=&quot;上篇问题&quot;&gt;上篇问题&lt;/h2&gt;
&lt;p&gt;在上篇&lt;a href=&quot;http://www.cnblogs.com/hetaojs/p/9009965.html&quot;&gt;《iview源码解析（1）》&lt;/a&gt;中的index.js 入口文件的源码中有一段代码有点疑惑：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 在浏览器环境下默认加载组件&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// auto install&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; window &lt;span class=&quot;op&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'undefined'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;install&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在引用 iview 组件的时候需要&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;use&lt;/span&gt;(iView&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; locale &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注册组件，即使不执行 use 也把组件注册了，这两段代码不是有重复功能？这么处理的目的是为什么呢？是处理兼容性问题么？有木有大神指点下。&lt;/p&gt;
&lt;h2 id=&quot;button-组件&quot;&gt;button 组件&lt;/h2&gt;
&lt;p&gt;button的核心样式代码是在mixins中，mixins的意思是混入在vue官网上对混入的解释是这样解释&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;混入 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。&lt;/p&gt;
&lt;p&gt;也就是组件下在细分共享对象来混入。&lt;/p&gt;
&lt;h4 id=&quot;问题&quot;&gt;问题&lt;/h4&gt;
&lt;p&gt;那在样式当中其他组件的样式也有可能混入到按钮里面的样式函数？但个人感觉应该是很少在其他组件当中用到吧？可能是我对整个iview的库整体不熟悉，有木有大神指点下。&lt;/p&gt;&lt;p&gt;我们在来看下 mixins 目录下 button.less的源码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;64&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;
&lt;span class=&quot;co&quot;&gt;/**函数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 设置按钮的内边距、字体大小、边框曲线&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @param  @padding&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @param  @font-size&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @param  @border-radius&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;.button-size&lt;/span&gt;(@padding; @font-size; @border-radius) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; @padding&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;font-size:&lt;/span&gt; @font-size&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-radius:&lt;/span&gt; @border-radius&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/**函数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 设置按钮的跟颜色有关的属性：字体颜色、背景颜色、边框颜色、以及子a标签的颜色&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @param  @color&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @param  @background&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @param  @border&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;.button-color&lt;/span&gt;(@color; @background; @border) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; @color&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; @background&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-color:&lt;/span&gt; @border&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;Chrome&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;http:&lt;/span&gt;//stackoverflow&lt;span class=&quot;dt&quot;&gt;.&lt;/span&gt;com/a/&lt;span class=&quot;dt&quot;&gt;17253457&lt;/span&gt;
    &amp;gt; a:only-child {
        color: currentColor&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;&amp;amp;:after&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;content:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    }
}
&lt;span class=&quot;co&quot;&gt;/**函数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 设置按钮的跟颜色有关的属性包括hover、active、disabled颜色变动&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @param  @color&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @param  @background&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @param  @border&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;.button-variant&lt;/span&gt;(@color; @background; @border) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;.button-color(@color;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@background;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@border);&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;//按钮伪类颜色设置&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;&amp;amp;:hover&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;//&amp;amp;:focus&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;.button-color(tint(@color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;20%);&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;tint(@background,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;20%);&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;tint(@border,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;20%));&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &amp;amp;&lt;span class=&quot;dv&quot;&gt;:active&lt;/span&gt;,
    &amp;amp;&lt;span class=&quot;fl&quot;&gt;.active&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;.button-color(shade(@color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;5%);&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;shade(@background,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;5%);&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;shade(@background,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;5%));&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    //禁用按钮的颜色设置
    &amp;amp;&lt;span class=&quot;fl&quot;&gt;.disabled&lt;/span&gt;,
    &amp;amp;&lt;span class=&quot;ch&quot;&gt;[disabled]&lt;/span&gt;,
    fieldset&lt;span class=&quot;ch&quot;&gt;[disabled]&lt;/span&gt; &amp;amp; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;&amp;amp;,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;&amp;amp;:hover,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;&amp;amp;:focus,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;&amp;amp;:active,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;&amp;amp;.active&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;er&quot;&gt;.button-color(@btn-disable-color;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-disable-bg;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-disable-border);&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    }
}
&lt;span class=&quot;co&quot;&gt;/**函数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 按钮主样式&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;.btn&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;margin-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;font-weight:&lt;/span&gt; @btn-font-weight&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;text-align:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;vertical-align:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *用于指定某个给定的区域是否允许用户操作，以及如何响应用户操作&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *auto:当触控事件发生在元素上时，由浏览器来决定进行哪些操作，比如对viewport进行平滑、缩放等。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *none:当触控事件发生在元素上时，不进行任何操作。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;touch-action:&lt;/span&gt; manipulation&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;cursor:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;background-image:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;white-space:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;nowrap&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;line-height:&lt;/span&gt; @line-height-base&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;user-select:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;.button-size(@btn-padding-base;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-font-size;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-border-radius);&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; translate3d(&lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; all @transition-time linear&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; color @transition-time linear, background-color @transition-time linear, border @transition-time linear, box-shadow @transition-time linear&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;er&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;.@{css-prefix-iconfont&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;line-height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    //按钮的伪类样式
    &amp;amp;,
    &amp;amp;&lt;span class=&quot;dv&quot;&gt;:active&lt;/span&gt;,
    &amp;amp;&lt;span class=&quot;dv&quot;&gt;:focus&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;outline:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

    &amp;amp;&lt;span class=&quot;dv&quot;&gt;:not&lt;/span&gt;(&lt;span class=&quot;ch&quot;&gt;[disabled]&lt;/span&gt;)&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;text-decoration:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

    &amp;amp;&lt;span class=&quot;dv&quot;&gt;:not&lt;/span&gt;(&lt;span class=&quot;ch&quot;&gt;[disabled]&lt;/span&gt;)&lt;span class=&quot;dv&quot;&gt;:active&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;outline:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;transition:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;er&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;如果不注释此行，那么active会和focus同时触发，此时focus的开始动画transition会无效&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    //禁用按钮样式
    &amp;amp;&lt;span class=&quot;fl&quot;&gt;.disabled&lt;/span&gt;,
    &amp;amp;&lt;span class=&quot;ch&quot;&gt;[disabled]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;cursor:&lt;/span&gt; @cursor-disabled&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;pointer-events:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    }
    //设置大按钮
    &amp;amp;-large &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;.button-size(@btn-padding-large;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-font-size-large;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-border-radius);&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    //设置小按钮
    &amp;amp;-small &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;.button-size(@btn-padding-small;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-font-size;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-border-radius-small);&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
}
&lt;span class=&quot;co&quot;&gt;/** 不同类型按钮函数控制颜色&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *  默认按钮、主按键、幽灵按钮、虚线按钮、文字按钮&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
// Default
&lt;span class=&quot;fl&quot;&gt;.btn-default&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;.button-variant(@btn-default-color;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-default-bg;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-default-border);&lt;/span&gt;

    &lt;span class=&quot;er&quot;&gt;&amp;amp;:hover&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;//&amp;amp;:focus&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;.button-color(tint(@primary-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;20%);&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;white;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;tint(@primary-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;20%));&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &amp;amp;&lt;span class=&quot;dv&quot;&gt;:active&lt;/span&gt;,
    &amp;amp;&lt;span class=&quot;fl&quot;&gt;.active&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;.button-color(shade(@primary-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;5%);&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;white;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;shade(@primary-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;5%));&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;fl&quot;&gt;.active-btn-color&lt;/span&gt;(@primary-color);
}

// Primary
&lt;span class=&quot;fl&quot;&gt;.btn-primary&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;.button-variant(@btn-primary-color;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-primary-bg;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@primary-color);&lt;/span&gt;

    &lt;span class=&quot;er&quot;&gt;&amp;amp;:hover,&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;//&amp;amp;:focus,&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;&amp;amp;:active,&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;&amp;amp;.active&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; @btn-primary-color&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;fl&quot;&gt;.active-btn-color&lt;/span&gt;(@primary-color);
}

// Ghost
&lt;span class=&quot;fl&quot;&gt;.btn-ghost&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;.button-variant(@btn-ghost-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-ghost-bg,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-ghost-border);&lt;/span&gt;

    &lt;span class=&quot;er&quot;&gt;&amp;amp;:hover&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;//&amp;amp;:focus&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;.button-color(tint(@primary-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;20%);&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-ghost-bg;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;tint(@primary-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;20%));&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &amp;amp;&lt;span class=&quot;dv&quot;&gt;:active&lt;/span&gt;,
    &amp;amp;&lt;span class=&quot;fl&quot;&gt;.active&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;.button-color(shade(@primary-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;5%);&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-ghost-bg;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;shade(@primary-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;5%));&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;fl&quot;&gt;.active-btn-color&lt;/span&gt;(@primary-color);
}

// Dashed
&lt;span class=&quot;fl&quot;&gt;.btn-dashed&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;.button-variant(@btn-ghost-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-ghost-bg,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-ghost-border);&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-style:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;dashed&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;er&quot;&gt;&amp;amp;:hover&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;//&amp;amp;:focus&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;.button-color(tint(@primary-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;20%);&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-ghost-bg;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;tint(@primary-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;20%));&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &amp;amp;&lt;span class=&quot;dv&quot;&gt;:active&lt;/span&gt;,
    &amp;amp;&lt;span class=&quot;fl&quot;&gt;.active&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;.button-color(shade(@primary-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;5%);&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-ghost-bg;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;shade(@primary-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;5%));&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;fl&quot;&gt;.active-btn-color&lt;/span&gt;(@primary-color);
}

// Text
&lt;span class=&quot;fl&quot;&gt;.btn-text&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;.button-variant(@btn-ghost-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-ghost-bg,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;transparent);&lt;/span&gt;

    &lt;span class=&quot;er&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;disabled&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;&amp;amp;.disabled,&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;&amp;amp;[disabled],&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;fieldset[disabled]&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;&amp;amp;,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;&amp;amp;:hover,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;&amp;amp;:focus,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;&amp;amp;:active,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;&amp;amp;.active&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;er&quot;&gt;.button-color(@btn-disable-color;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-ghost-bg;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;transparent);&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    }

    &amp;amp;&lt;span class=&quot;dv&quot;&gt;:hover&lt;/span&gt;
        //&amp;amp;&lt;span class=&quot;dv&quot;&gt;:focus&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;.button-color(tint(@primary-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;20%);&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-ghost-bg;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;transparent);&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &amp;amp;&lt;span class=&quot;dv&quot;&gt;:active&lt;/span&gt;,
    &amp;amp;&lt;span class=&quot;fl&quot;&gt;.active&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;.button-color(shade(@primary-color,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;5%);&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@btn-ghost-bg;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;transparent);&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;fl&quot;&gt;.active-btn-color&lt;/span&gt;(@primary-color);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;知识点这里面列出来的知识点是我自己不是很熟悉的列出来&quot;&gt;知识点（这里面列出来的知识点是我自己不是很熟悉的列出来）&lt;/h3&gt;
&lt;h4 id=&quot;color-currentcolor&quot;&gt;1. color: currentColor&lt;br/&gt;&lt;/h4&gt;
&lt;p&gt;css3的扩展关键字，currentColor是 color 属性的值，具体意思是指：currentColor关键字的使用值是 color 属性值的计算值。&lt;br/&gt;如果currentColor关键字被应用在 color 属性自身，则相当于是 color: inherit。&lt;br/&gt;&lt;/p&gt;
&lt;h4 id=&quot;background-transparent&quot;&gt;2. background: transparent&lt;br/&gt;&lt;/h4&gt;
&lt;p&gt;设置背透明&lt;/p&gt;
&lt;h4 id=&quot;tintcolorweight&quot;&gt;3. tint(color,weight)&lt;br/&gt;&lt;/h4&gt;
&lt;p&gt;less中的方法,它用于混合颜色与白色,它有以下参数：&lt;/p&gt;&lt;p&gt;color ：它代表一个颜色对象。&lt;/p&gt;&lt;p&gt;weight ：这是一个可选参数，通过在颜色和白色之间提供百分比平衡点来指定元素的权重。&lt;/p&gt;
&lt;h4 id=&quot;shadecolorweight&quot;&gt;4. shade(color,weight)&lt;br/&gt;&lt;/h4&gt;
&lt;p&gt;less中的方法,它用于混合颜色与黑色,它有以下参数：&lt;/p&gt;&lt;p&gt;color ：它代表一个颜色对象。&lt;/p&gt;&lt;p&gt;weight ：这是一个可选参数，通过在颜色和白色之间提供百分比平衡点来指定元素的权重。&lt;/p&gt;
&lt;h4 id=&quot;touch-action-manipulation&quot;&gt;5. touch-action: manipulation&lt;br/&gt;&lt;/h4&gt;
&lt;p&gt;用于指定某个给定的区域是否允许用户操作，以及如何响应用户操作&lt;/p&gt;&lt;p&gt;auto:当触控事件发生在元素上时，由浏览器来决定进行哪些操作，比如对viewport进行平滑、缩放等。&lt;/p&gt;&lt;p&gt;none:当触控事件发生在元素上时，不进行任何操作。&lt;/p&gt;
&lt;h4 id=&quot;user-select-none&quot;&gt;6. user-select: none&lt;br/&gt;&lt;/h4&gt;
&lt;p&gt;css3新增属性，值:&lt;/p&gt;&lt;p&gt;none：文本不能被选择。&lt;/p&gt;&lt;p&gt;text：可以选择文本。&lt;/p&gt;&lt;p&gt;all：当所有内容作为一个整体时可以被选择。如果双击或者在上下文上点击子元素，那么被选择的部分将是以该子元素向上回溯的最高祖先元素。&lt;/p&gt;&lt;p&gt;element：可以选择文本，但选择范围受元素边界的约束。&lt;br/&gt;&lt;/p&gt;
&lt;h4 id=&quot;outline-0&quot;&gt;7. outline: 0&lt;br/&gt;&lt;/h4&gt;
&lt;p&gt;outline （轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。在谷歌浏览器中激活状态默认有轮廓线，这个可以去除那个轮廓线。&lt;/p&gt;
&lt;h4 id=&quot;pointer-events-none&quot;&gt;8. pointer-events: none;&lt;br/&gt;&lt;/h4&gt;
&lt;p&gt;css3新增属性，值&lt;/p&gt;&lt;p&gt;auto：与pointer-events属性未指定时的表现效果相同。在svg内容上与visiblepainted值相同。&lt;/p&gt;&lt;p&gt;none：元素永远不会成为鼠标事件的target。但是，当其后代元素的pointer-events属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶触发父元素的事件侦听器。&lt;br/&gt;&lt;/p&gt;
&lt;h4 id=&quot;less中把很多通用的属性值赋值到一个变量中&quot;&gt;9. less中把很多通用的属性值赋值到一个变量中。&lt;/h4&gt;
&lt;p&gt;在custom.less中如：按钮的基础变量&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;// Button
@btn-font-weight        &lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; normal;
@btn-padding-base       &lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; 6px 15px;
@btn-padding-large      &lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; 6px 15px 7px 15px;
@btn-padding-small      &lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; 2px 7px;
@btn-font-size          &lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; 12px;
@btn-font-size-large    &lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; 14px;
@btn-border-radius      &lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; 4px;
@btn-border-radius-small&lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; 3px;
@btn-group-border       &lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; shade(@primary-color, 5%);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;里面将样式安装功能拆分成函数相互调用&quot;&gt;10. 里面将样式安装功能拆分成函数相互调用。&lt;/h4&gt;
&lt;h4 id=&quot;代表的上一层选择器的名字&quot;&gt;11. &amp;amp;代表的上一层选择器的名字。&lt;/h4&gt;
</description>
<pubDate>Thu, 10 May 2018 07:28:00 +0000</pubDate>
<dc:creator>核桃大号</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hetaojs/p/9019896.html</dc:identifier>
</item>
<item>
<title>解决iframe在移动端(主要iPhone)上的问题 - PC.aaron</title>
<link>http://www.cnblogs.com/aaron-pan/p/9019718.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aaron-pan/p/9019718.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;　　才发现已经有一段时间没有写博客了，就简单的说了最近干了啥吧。前段时间忙了杂七杂八的事情，首先弄了个个人的小程序，对的，老早就写了篇从&lt;a href=&quot;http://www.cnblogs.com/aaron-pan/p/7374454.html&quot; target=&quot;_blank&quot;&gt;零入手微信小程序开发&lt;/a&gt;，然后到前段时间才弄了个简单的个人小程序，主要是关于菜式方面制作的，原因么，就在我另外一件事情上有说到了，就是然后又弄了个个人的公众号《前端美食汇》（附：&lt;a href=&quot;https://mp.weixin.qq.com/s/SrO5kRlquzTs6x4PQlCvrw&quot; target=&quot;_blank&quot;&gt;个人介绍&lt;/a&gt;链接）。大概之前就干了这两事。不过老实说也不用多少时间。搞得好像用了我很多时间似的，哈哈，还是懒~~~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1141454/201805/1141454-20180510142606050-120749080.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　重点补充下，以为博客的文章的侧重点会在解决项目上遇到的实际问题，而在公众号上会侧重于技术提升方面的分享，喜欢的可以关注下我的公众号喔~~~&lt;/p&gt;
&lt;p&gt;　　小程序二维码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1141454/201805/1141454-20180510142106462-1085463134.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;正文&lt;/h2&gt;
&lt;p&gt;　　好了说了这么多，正式如题。&lt;/p&gt;
&lt;p&gt;　　iframe我觉得应该是用得不多了吧，由于对性能影响比较大，所以应该没啥特殊情况的话不会用的吧，好巧不巧，我们项目用到了，也好巧不巧，还是应用到移动端上了，头大了。当然，iframe的引用可以不影响本身页面的布局这点还是不错的。&lt;/p&gt;
&lt;p&gt;　　这次主要说的就是iframe在移动端上使用存在的问题。&lt;/p&gt;
&lt;p&gt;　　主要问题：&lt;/p&gt;
&lt;p&gt;　　1.iframe在iPhone上滚动条失效&lt;/p&gt;
&lt;p&gt;　　2.iframe在移动端上显示时不能全部展示完全&lt;/p&gt;
&lt;p&gt;　　3.iframe在iPhone上宽度被撑开&lt;/p&gt;
&lt;p&gt;　　ok，这些问题就是我在项目上应用iframe时发现的。开始来一一解决。&lt;/p&gt;
&lt;h3&gt;iframe在iPhone上滚动条失效&lt;/h3&gt;
&lt;p&gt;　　主要原因是由于iframe设定了一定的高度之后，由于iframe内容的足够长超过了iframe的设定高度时，在iPhone上滚动条没效。&lt;/p&gt;
&lt;p&gt;　　而解决办法也比较简单，就是给iframe设定一个外层div，并设定外层div的样式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
-webkit-overflow-scrolling: touch; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 当手指从触摸屏上移开，会保持一段时间的滚动 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
 overflow&lt;/span&gt;-y: scroll;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样就可以实现iframe在iPhone上的滚动了。&lt;/p&gt;
&lt;h3&gt;iframe在移动端上显示时不能全部展示完全&lt;/h3&gt;
&lt;p&gt;　　如果不想以滚动条的形式显示，而是把iframe内容全部展示的话，OK，通过设定iframe高度height=&quot;100%&quot;，实际一般标签确实这样就实现了内容展开。但是，问题又来了。发现并没有，还是只显示一部分，于是，只能通过js的手段进行高度的动态设置，见代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; setIframeHeight(id){
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; iframe =&lt;span&gt; document.getElementById(id);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(iframe.attachEvent){
                iframe.attachEvent(&lt;/span&gt;&quot;onload&quot;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    iframe.height &lt;/span&gt;=&lt;span&gt;  iframe.contentWindow.document.documentElement.scrollHeight;
                });
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                iframe.onload &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    iframe.height &lt;/span&gt;=&lt;span&gt; iframe.contentDocument.body.scrollHeight;

                };
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(e){
            console.warn(&lt;/span&gt;'setIframeHeight Error'&lt;span&gt;);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过这样，就能实现完全的展开iframe内容了。好了，以为完美的解决问题了，一上正式服，纳尼，测试服上没有，正式服上iPhone浏览竟然发现内容被撑开，出现了左右的滚动条，原因get不到，有知道的大神可以留言，先谢过了。&lt;/p&gt;
&lt;h3&gt;iframe在iPhone上宽度被撑开&lt;/h3&gt;
&lt;p&gt;　　于是就开始头大怎么解决这个问题了，当然，按照上面设定高度的方法设置宽度发现无效...。于是，经过一轮纠结，决定直接获取iframe内的内容进行填充。于是这个是我想到的唯一解决在iPhone上宽度被撑开的问题。由于本来项目的原因还是得加载iframe，所以还是得从iframe加载完然后动态获取内容再加载进设定的div内，见代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; setIframeContent(id){
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; iframe =&lt;span&gt; document.getElementById(id);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(iframe.attachEvent){
                iframe.attachEvent(&lt;/span&gt;&quot;onload&quot;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){                   console.log(iframe.contentWindow.document.body.innerHTML);
                    document.getElementById(&lt;/span&gt;&quot;iframeInner&quot;).innerHTML=&lt;span&gt;iframe.contentWindow.document.body.innerHTML;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                iframe.onload &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;(){                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(iframe.contentDocument.body.innerHTML);&lt;/span&gt;
                    document.getElementById(&quot;iframeInner&quot;).innerHTML=&lt;span&gt;iframe.contentDocument.body.innerHTML;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(e){
            console.warn(&lt;/span&gt;'setIframeHeight Error'&lt;span&gt;);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　ok，这样就能获取到iframe的内容了。&lt;/p&gt;
&lt;p&gt;　　当然，问题1到3就是我遇到加载iframe在移动端上的存在的问题的解决路上遇到的问题，并且一路解过来时发现的各种问题。并且一一解决各问题最后决定应用的方式。也一一列举出来，看获取你只需要实现某一步即可。&lt;/p&gt;
&lt;h2&gt;写到最后&lt;/h2&gt;
&lt;p&gt;　　iframe在移动端上的使用出现的问题可能不止这些，或者不止这些方法，要是你有更好的方法可以留言让更多的需要的看到喔。&lt;/p&gt;
&lt;p&gt;　　最后，也希望大家可以关注下我的个人公众号《前端美食汇》。&lt;/p&gt;





</description>
<pubDate>Thu, 10 May 2018 07:04:00 +0000</pubDate>
<dc:creator>PC.aaron</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aaron-pan/p/9019718.html</dc:identifier>
</item>
<item>
<title>Dubbo学习-源码学习 - 哼着歌啦啦啦</title>
<link>http://www.cnblogs.com/liwutao/p/8809469.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liwutao/p/8809469.html</guid>
<description>&lt;p&gt;dubbo框架提供多协议远程调用，服务提供方可以是分布式部署。dubbo框架可以很简单的帮我们实现微服务。&lt;/p&gt;
&lt;p&gt;此处援引官网上图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/647160/201804/647160-20180412174148059-956120353.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;dubbo分为客户端和服务提供方&lt;/p&gt;
&lt;p&gt;服务方将服务注册到注册中心&lt;/p&gt;
&lt;p&gt;客户端从注册中心获取已注册服务访问方式&lt;/p&gt;
&lt;p&gt;客户端通过指定协议访问服务提供方&lt;/p&gt;

&lt;p&gt;根据dubbo架构，源码分析我们主要切入点是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;dubbo配置如何生效&lt;/li&gt;
&lt;li&gt;客户端如何调用服务&lt;/li&gt;
&lt;li&gt;注册的服务如何保证被调用到&lt;/li&gt;
&lt;li&gt;dubbo远程调用的协议如何工作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;针对以上我们来分析Dubbo源码：&lt;/p&gt;
&lt;p&gt;Dubbo源码是maven管理，工程主要由dubbo-config，dubbo-container，dubbo-filter，dubbo-monitor，dubbo-registry，dubbo-remoting，dubbo-rpc，dubbo-serialization组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/647160/201804/647160-20180412215320591-409823500.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;dubbo-config ：dubbo配置文件相关模块&lt;/li&gt;
&lt;li&gt;dubbo-container ：dubbo依赖的上下文&lt;/li&gt;
&lt;li&gt;dubbo-filter ： dubbo支持的请求过滤器&lt;/li&gt;
&lt;li&gt;dubbo-monitor ： dubbo监控管理模块&lt;/li&gt;
&lt;li&gt;dubbo-registry ： dubbo使用注册中心相关的模块&lt;/li&gt;
&lt;li&gt;dubbo-remoting ： dubbo整个远程交互框架，如何将通道、序列化、通信载体有机整合&lt;/li&gt;
&lt;li&gt;dubbo-rpc ： dubbo远程调用协议实现。&lt;/li&gt;
&lt;li&gt;dubbo-serialization ： 远程通信中序列化实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;      dubbo配置是以松耦合的方式嵌入到spring里面，因此说到dubbo配置加载就必然和spring扯不开关系。&lt;/p&gt;
&lt;p&gt;      从dubbo配置文件的命名空间说起，我们通常在配置dubbo服务时要在spring配置基础上添加dubbo的命名空间（xmlns）和模板：&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;
        xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
xmlns:dubbo的值指定了dubbo配置命名空间。&lt;br/&gt;spring中不同的命名空间对应不同的配置解析器，那么dubbo的命名空间http://code.alibabatech.com/schema/dubbo也就对应着自己的解析器。&lt;br/&gt;spring维护着命名空间和对应解析器的关系，这些对应关系包括spring内置的和第三方定制关系&lt;/pre&gt;
&lt;h2 class=&quot;brush:java;gutter:true;&quot;&gt;  spring命名空间&lt;/h2&gt;
&lt;p&gt;   spring启动中解析dubbo xml文件时首先获取跟节点中的所有xmlns值，根据配置的命名空间从命名空间管理器中获取该空间对应的解析器对象&lt;/p&gt;
&lt;p&gt;   命名空间管理器会从classpath下META-INF/下加载并解析所有的所有spring.handlers命名的文件，该文件以键值对配置了命名空间和对应解析器。&lt;/p&gt;
&lt;p&gt;   dubbo的命名spring.handler配置如下：&lt;/p&gt;
&lt;p&gt;          http\://code.alibabatech.com/schema/dubbo=com.alibaba.dubbo.config.spring.schema.DubboNamespaceHandler&lt;/p&gt;
&lt;p&gt;          路径：META-INF/dubbo/spring.handler&lt;/p&gt;
&lt;p&gt;   如此，spring在加载dubbo配置时会调用dubbo命名空间解析器DubboNamespaceHandler来解析配置文件，dubbo的入口也就是DubboNamespaceHandler。&lt;/p&gt;

&lt;h2&gt;   dubbo配置解析处理器（DubboNamespaceHandler）&lt;/h2&gt;
&lt;p&gt;     dubbo配置解析处理器就是命名空间配置的com.alibaba.dubbo.config.spring.schema.DubboNamespaceHandler，该处理器作为dubbo对spring的扩展完成dubbo自定义的配置解析工作。spring的命名空间处理器扩展点是：org.springframework.beans.factory.xml.NamespaceHandlerSupport，DubboNamespaceHandler完成dubbo内部所有解析器初始和加载。解析器包括application节点解析、module节点解析、registry、monitor、provider、consumer、protocol、service、reference、annotation。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/647160/201805/647160-20180504161719885-363586948.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;    这些解析器初始化代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; init() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         registerBeanDefinitionParser(&quot;application&quot;, &lt;span&gt;new&lt;/span&gt; DubboBeanDefinitionParser(ApplicationConfig.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         registerBeanDefinitionParser(&quot;module&quot;, &lt;span&gt;new&lt;/span&gt; DubboBeanDefinitionParser(ModuleConfig.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         registerBeanDefinitionParser(&quot;registry&quot;, &lt;span&gt;new&lt;/span&gt; DubboBeanDefinitionParser(RegistryConfig.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         registerBeanDefinitionParser(&quot;monitor&quot;, &lt;span&gt;new&lt;/span&gt; DubboBeanDefinitionParser(MonitorConfig.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         registerBeanDefinitionParser(&quot;provider&quot;, &lt;span&gt;new&lt;/span&gt; DubboBeanDefinitionParser(ProviderConfig.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         registerBeanDefinitionParser(&quot;consumer&quot;, &lt;span&gt;new&lt;/span&gt; DubboBeanDefinitionParser(ConsumerConfig.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         registerBeanDefinitionParser(&quot;protocol&quot;, &lt;span&gt;new&lt;/span&gt; DubboBeanDefinitionParser(ProtocolConfig.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         registerBeanDefinitionParser(&quot;service&quot;, &lt;span&gt;new&lt;/span&gt; DubboBeanDefinitionParser(ServiceBean.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         registerBeanDefinitionParser(&quot;reference&quot;, &lt;span&gt;new&lt;/span&gt; DubboBeanDefinitionParser(ReferenceBean.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         registerBeanDefinitionParser(&quot;annotation&quot;, &lt;span&gt;new&lt;/span&gt; DubboBeanDefinitionParser(AnnotationBean.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;    DubboNamespaceHandler做了什么&lt;/h3&gt;
&lt;p&gt;      spring加载配置文件过程中，读取到一个xml节点时，会将节点信息传递给DubboNamespaceHandler，handler获取节点的LocalName(在一个命名空间下去掉前缀剩下的节点名          称)，根据名称从DubboNamespaceHandler获取对应的Parser，如：LocalName是application，就会获取到Handler初始化时注册的application对应的                                                    DubboBeanDefinitionParser对象，并调用该解析器的parse方法将节点转换成spring的RootBeanDefinition对象，对象保存了创建一个bean对象所需的所有信 息。&lt;/p&gt;

&lt;h3&gt;    Dubbo服务（ServiceBean）&lt;/h3&gt;

&lt;pre&gt;
通过registerBeanDefinitionParser(&quot;service&quot;, new DubboBeanDefinitionParser(ServiceBean.class, true&lt;span&gt;));注册的DubboBeanDefinitionParser&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;   创建出的RootBeanDefinition最终被spring实例化成ServiceBean，ServiceBean即Dubbo实际的服务实例。实例化结束后，ServiceBean会从spring容器中获取配置的Provider信         息、application、module、registry、monitor、protocol等配置信息并设置到ServiceBean，设置完成后将服务自身暴露出去，如果本次暴露失败或者没有暴露，则在spring容器启       动完成后会再进行一次暴露。&lt;/p&gt;


&lt;p&gt;       服务暴露通过调用ServiceBean的export方法，通过注册中心，最终将服务实例以指定的协议暴露给调用方。&lt;/p&gt;
&lt;h2&gt;    准备暴露路径&lt;/h2&gt;
&lt;p&gt;       服务暴露前需要组织自己的访问路径和协议信息，只有有了这些信息，才能确定以何种协议被访问，以及通过什么路径被访问。组织访问信息的方法是服务自身的doExportUrls&lt;/p&gt;
&lt;p&gt;       ServiceConfig.doExportUrls()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doExportUrls() {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         List&amp;lt;URL&amp;gt; registryURLs = loadRegistries(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (ProtocolConfig protocolConfig : protocols) {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;            doExportUrlsFor1Protocol(protocolConfig, registryURLs);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       该方法调用了doExportUrlsFor1Protocol方法将协议和注册路径具体的组装起来，形成dubbo的访问路径，将访问路径包装秤可悲远程调用的调用器invoker。&lt;/p&gt;
&lt;p&gt;       invoker的生成代码如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果配置不是local则暴露为远程服务.(配置为local，则表示只暴露本地服务)&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt; Constants.SCOPE_LOCAL.toString().equalsIgnoreCase(scope) ){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (logger.isInfoEnabled()) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                     logger.info(&quot;Export dubbo service &quot; + interfaceClass.getName() + &quot; to url &quot; +&lt;span&gt; url);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (registryURLs != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; registryURLs.size() &amp;gt; 0
&lt;span&gt; 7&lt;/span&gt;                         &amp;amp;&amp;amp; url.getParameter(&quot;register&quot;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (URL registryURL : registryURLs) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                         url = url.addParameterIfAbsent(&quot;dynamic&quot;, registryURL.getParameter(&quot;dynamic&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                         URL monitorUrl =&lt;span&gt; loadMonitor(registryURL);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (monitorUrl != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                             url =&lt;span&gt; url.addParameterAndEncoded(Constants.MONITOR_KEY, monitorUrl.toFullString());
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (logger.isInfoEnabled()) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                             logger.info(&quot;Register dubbo service &quot; + interfaceClass.getName() + &quot; url &quot; + url + &quot; to registry &quot; +&lt;span&gt; registryURL);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                         Invoker&amp;lt;?&amp;gt; invoker =&lt;span&gt; proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;                         Exporter&amp;lt;?&amp;gt; exporter =&lt;span&gt; protocol.export(invoker);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                        exporters.add(exporter);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     Invoker&amp;lt;?&amp;gt; invoker =&lt;span&gt; proxyFactory.getInvoker(ref, (Class) interfaceClass, url);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;                     Exporter&amp;lt;?&amp;gt; exporter =&lt;span&gt; protocol.export(invoker);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                    exporters.add(exporter);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             }
&lt;/pre&gt;&lt;/div&gt;


&lt;pre&gt;
Invoker&amp;lt;?&amp;gt; invoker =&lt;span&gt; proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));&lt;/span&gt;&lt;br/&gt;参数ref指向的是dubbo:service配置中ref中指定的服务对象，interfaceClass是该服务的接口，第三个参数则是该服务的访问路径。
&lt;/pre&gt;
&lt;pre&gt;
Exporter&amp;lt;?&amp;gt; exporter =&lt;span&gt; protocol.export(invoker);   // 最终将invoker暴露&lt;br/&gt;&lt;/span&gt;&lt;/pre&gt;</description>
<pubDate>Thu, 10 May 2018 03:59:00 +0000</pubDate>
<dc:creator>哼着歌啦啦啦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liwutao/p/8809469.html</dc:identifier>
</item>
<item>
<title>Jenkins踩坑系列--你试过linux主机ssh登录windows，启动java进程吗，来试试吧 - 三国梦回</title>
<link>http://www.cnblogs.com/grey-wolf/p/9015779.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/grey-wolf/p/9015779.html</guid>
<description>&lt;p&gt;在一个多月前，组长让我研究下持续集成。我很自然地选择了jenkins。当时，（包括现在也是），部分服务器用的是windows主机。&lt;/p&gt;
&lt;p&gt;我当时想了想，如果我把jenkins装在windows上，在windows上打好包后，要怎么把war包或jar包（针对spring boot项目）传到remote windows主机上呢？&lt;/p&gt;
&lt;p&gt;传过去之后，要怎么把这个包运行起来呢（比如war包丢tomcat，重启tomcat；比如怎么用java运行spring boot项目），运行肯定是用脚本（bat），但是我怎么&lt;/p&gt;
&lt;p&gt;调用这个脚本呢？&lt;/p&gt;
&lt;p&gt;想了想，很头疼。但是我知道linux主机之间，是可以ssh登录的，并且可以ssh远程登录后执行shell的。&lt;/p&gt;
&lt;p&gt;所以，最终选择了centos作为持续集成服务jenkins的操作系统。&lt;/p&gt;

&lt;p&gt;研究jenkins以来，作为一个小菜鸟，找了相关的jenkins QQ群加入，群里气氛很好，大家提问题很多，回答问题的也很多。我就把上述问题在群里问了一下，得到群管理的回复，&lt;/p&gt;
&lt;p&gt;针对数据传输部分，回复如下，共4种方案。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1。1 在win上装sshd，在linux上用scp，sftp传文件到win。
1。2在linux上装samba客户端，映射win共享磁盘符到linux。然后cp。
1。3 在linux上装powershell，然后装一个第三方模块。然后在win上开启。winrm，数据走的是winrm协议端口，即powershell服务器的端口。
1。4 在win上装ftpd，和道理1。3一样。数据走的是ftp协议。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;今天我就找时间，自己试了下第一种。整整折腾了一天，本来以为搞不出来了，不过还是勉强解决了。&lt;/p&gt;
&lt;p&gt;这边做下记录。&lt;/p&gt;


&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://winscp.net/eng/docs/guide_windows_openssh_server&quot; target=&quot;_blank&quot;&gt;https://winscp.net/eng/docs/guide_windows_openssh_server&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1.下载openssh&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/PowerShell/Win32-OpenSSH/releases&quot; target=&quot;_blank&quot;&gt;https://github.com/PowerShell/Win32-OpenSSH/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这边按照自己的机器，选一个版本吧，我看了下，貌似都是beta版，但我感觉还是很稳定的。我选择的是下图箭头所示的64位版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180509173634912-1726489564.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.安装&lt;/h2&gt;
&lt;p&gt;先解压缩，不一定非要解压缩到下图的地方，自己开心就好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180509173810933-1466777231.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在解压的目录下，按住shift，同时鼠标右键，打开cmd或者powershell。&lt;/p&gt;
&lt;p&gt;执行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;继续右键打开powershell（在我这，cmd不行，但是在powershell窗口可以成功），&lt;/p&gt;
&lt;p&gt;执行：（这句意思是加防火墙规则，放行22端口）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果提示New-NetFirewallRule不被认识，找个powershell吧，或者查一下，或者&lt;span&gt;手动添加入站规则&lt;/span&gt;。&lt;/p&gt;

&lt;p&gt;接下来，去到计算机管理-服务里面，找到sshd服务，配置为开机启动，然后点下面的启动，将服务启动起来。&lt;/p&gt;
&lt;h2&gt;3、测试一下&lt;/h2&gt;
&lt;p&gt;1.在自己机器上telnet一下，看看ssh服务的22端口是否是通的。&lt;/p&gt;
&lt;p&gt;cmd执行：telnet ip 22&lt;/p&gt;

&lt;p&gt;2.shell远程工具测试下，是否可以登录。&lt;/p&gt;
&lt;p&gt;我这边用的是secureCRT，XShell或者putty都行。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用户名密码就是：远程桌面用的用户名密码。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt; 4、注意点&lt;/h2&gt;
&lt;p&gt;ssh进去后，主工作目录在C:\Users\Administrator：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180509174953092-309774990.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;1、jenkins配置ssh主机&lt;/h2&gt;
&lt;p&gt;在jenkins上，在我观察，Publish Over SSH算是一个比较流行的ssh工具，可以传输文件，也可以执行命令（针对linux，可以执行命令和shel；针对windows，cmd里能够进行的操作都可以）。&lt;/p&gt;
&lt;p&gt; 在Jenkins管理界面中，依次打开：系统管理--》系统设置--》Publish over SSH部分，按照下图进行配置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510093204488-103218340.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;填写完成后，可以点击下面的按钮，测试下连接是否成功。&lt;/p&gt;
&lt;h2&gt;2、填写注意点&lt;/h2&gt;
&lt;p&gt;Name随便填，Hostname是ip或者主机名，用户名同远程桌面 用的用户名，点击高级后，填写密码部分。&lt;/p&gt;
&lt;p&gt;其中的&lt;span&gt;Remote Directory需要重点关注，该参数表示的是：ssh文件上传后，文件在远端服务器上的保存路径，路径需要预先建立好。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同时，如果上传了文件后，需要执行命令的话，这也是bat、shell等命令的工作目录。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;针对windows类型的ssh服务器，这边的填写只能写相对路径，（base 路径为C:\Users\Administrator，如果作为非管理员登录，可能会稍微不一样，可以自己用SecureCRT之类的登进去试试，看看在哪个路径下）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果不填，就是在base路径；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果填写内容为“\”，（不含双引号），则路径会是c盘根路径；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果填&quot;target&quot;,则路径会是C:\Users\Administrator\target。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我这边简单起见，先不填。因为其作为后续命令执行的工作路径的原因，会有一些坑。后边我再补充。&lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;&lt;span&gt;1、job中，配置构建操作&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;先展示下我的构建操作，很简单，maven编译，打包&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510095048624-149492238.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;在jenkins的服务器上，找到jenkins的home路径，其下的workspace目录中，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510095348225-820870569.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;我这边拿来举例的job是test-deploy。&lt;/p&gt;
&lt;p&gt;编译完成后，我这边的目录结构是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510095544746-688469349.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt; 2、配置构建后操作--ssh发布&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510100018843-1552662230.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cmd /c call C:\Users\Administrator\deploy.bat
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上配置，可以和上一步的构建后文件目录结构，仔细对照下就知道怎么填写了。&lt;/p&gt;
&lt;p&gt;我这边也不是最佳实践，可以留言讨论。&lt;/p&gt;

&lt;h2&gt;3、远端windows ssh服务器&lt;/h2&gt;
&lt;p&gt;在C:\Users\Administrator\下的目录文件结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510101520885-1528033353.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; deploy.bat的内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt;&lt;span&gt; hello

java -version

&lt;span&gt;javaw&lt;/span&gt; -Xms512m -Xmx512m -Xmn512m -jar target&lt;/span&gt;\bdmp-backstage-rest.jar &lt;span&gt;echo&lt;/span&gt;&lt;span&gt; bye
&lt;/span&gt;&lt;span&gt;:end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重点关注的是上面标红的地方：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里，必须是javaw。不信可以多试试。最终是怎么选定这个方案的，后面说。只关注结果的话，复制上面的就可以。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我这边因为bat水平有限，只写了启动程序的部分。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;按理说，是需要上传后，拷贝jar或war到别的目录，先杀掉以前的进程，（避免端口冲突而启动失败），再开启新进程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这块留作todo吧，有兴趣的朋友可以跟我交流。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;4、终于ok了，测试一下&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在job页面，点“立即构建“。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;运行过程如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510103327445-1134280732.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;我们在远程ssh主机上，看看我们的服务启动了没，我这边通过看端口的方式：&lt;/p&gt;
&lt;p&gt;netstat -ano|findstr &quot;18083&quot;&lt;/p&gt;
&lt;p&gt;其中18083是我这边的spring boot应用的服务端口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510103421457-64878772.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不放心的话，可以看看任务管理器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510103555599-250181821.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;好了。启动起来了。&lt;/p&gt;
&lt;p&gt;我们再看看jenkins中，job运行完了没？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510103651115-444186386.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;运行完了，但是是超时退出的，我这边还没想到好办法。如果你有好的解决办法，欢迎分享。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;我最开始只打算做linux主机之间的持续集成，所以只弄了shell。基于懒，因此看看能不能通过在windows上安装shell环境来执行shell。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1、准备shell&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;准备shell环境，我是通过安装了一个git。然后将git的cmd和bin，配置到了path中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我瞎搞的，不知道运维界的最佳实践是啥。（我只是个java开发。。。）&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;2、windows上手动运行&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;这边我把shell共享下（我也是在前人基础上改的，本身shell水平堪忧）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510104332185-1809143080.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;bdmp-backstage-rest.sh：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('45d35db9-d6e1-479e-9f0a-33bfdeefaa8a')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_45d35db9-d6e1-479e-9f0a-33bfdeefaa8a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_45d35db9-d6e1-479e-9f0a-33bfdeefaa8a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('45d35db9-d6e1-479e-9f0a-33bfdeefaa8a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_45d35db9-d6e1-479e-9f0a-33bfdeefaa8a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
#!/bin/&lt;span&gt;bash
source &lt;/span&gt;/etc/&lt;span&gt;profile

export SERVICE_NAME&lt;/span&gt;=bdmp-backstage-&lt;span&gt;rest
export JAR_ARTIFACT_NAME&lt;/span&gt;=./target/bdmp-backstage-&lt;span&gt;rest.jar
export DEBUG_PORT&lt;/span&gt;=&lt;span&gt;2222&lt;/span&gt;&lt;span&gt;

export JAVA_OPTS&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-Xms1024m -Xmx1024m -Xmn512m&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;


cd `&lt;/span&gt;&lt;span&gt;dirname&lt;/span&gt; $&lt;span&gt;0&lt;/span&gt;&lt;span&gt;`
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CURRENT DIRECTORY:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;`&lt;span&gt;pwd&lt;/span&gt;&lt;span&gt;`

export SCRIPT_NAME&lt;/span&gt;=$&lt;span&gt;0&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SCRIPT_NAME:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$SCRIPT_NAME&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; parameters:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$@

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Invoke _server.sh now!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
.&lt;/span&gt;/_server.&lt;span&gt;sh&lt;/span&gt; $@
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;_server.sh：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b0309437-0699-42da-bbf8-029e8eb92cc2')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_b0309437-0699-42da-bbf8-029e8eb92cc2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b0309437-0699-42da-bbf8-029e8eb92cc2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b0309437-0699-42da-bbf8-029e8eb92cc2',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b0309437-0699-42da-bbf8-029e8eb92cc2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
#!/bin/&lt;span&gt;bash

#&lt;/span&gt;&lt;span&gt;date&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt;&lt;span&gt;
#author caokunliang
#version &lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;
#desc：

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_server.sh is called! paramters is &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$@
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JAR_ARTIFACT_NAME:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$JAR_ARTIFACT_NAME
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SERVICE_NAME:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$SERVICE_NAME
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JAVA_OPTS:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$JAVA_OPTS

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ -z &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$JAR_ARTIFACT_NAME&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请不要直接调用本脚本，并确保调用脚本中设置了JAVA_MAIN_CLASS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    exit &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;fi&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; [ -z &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$SERVICE_NAME&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请在调用脚本中设置SERVICE_NAME&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    exit &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt;fi&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; [ -z &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$JAVA_OPTS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
    JAVA_OPTS&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-Xms1024m -Xmx1024m -Xmn512m&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;

#服务进程的pid
pids&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
#调试模式下的参数
DEBUG_OPTS&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;

#&lt;/span&gt;==============================================================================&lt;span&gt;
#根据启动类类名搜索服务进程的pid
#&lt;/span&gt;==============================================================================
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; get_pids() {
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(${FUNCNAME[@]})&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

    #默认使用JDK自带的jps
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jps -l:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    jps &lt;/span&gt;-&lt;span&gt;l
    JPS_STATUS&lt;/span&gt;=$?
    &lt;span&gt;if&lt;/span&gt; [ $JPS_STATUS -ne &lt;span&gt;0&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
        pids&lt;/span&gt;=`&lt;span&gt;ps&lt;/span&gt; -e -o pid -o command | &lt;span&gt;grep&lt;/span&gt; -&lt;span&gt;vi&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt; grep &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; | &lt;span&gt;grep&lt;/span&gt; -i &lt;span&gt;'&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; | &lt;span&gt;grep&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$JAR_ARTIFACT_NAME&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; | &lt;span&gt;awk&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{print $1}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;`
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        pids&lt;/span&gt;=`jps -l|&lt;span&gt;grep&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$JAR_ARTIFACT_NAME&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; | &lt;span&gt;awk&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{print $1}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;`
    &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;

    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; [ -z &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$pids&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
        &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;the process of &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$JAR_ARTIFACT_NAME &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; is not found&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
}

#&lt;/span&gt;==============================================================================&lt;span&gt;
#终止服务进程
#&lt;/span&gt;==============================================================================
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; svr_stop() {
    get_pids
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ -n &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$pids&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; $pids
        &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;
            &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;kill -9 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$p
            &lt;/span&gt;&lt;span&gt;kill&lt;/span&gt; -&lt;span&gt;9&lt;/span&gt;&lt;span&gt; $p
        &lt;/span&gt;&lt;span&gt;done&lt;/span&gt;
        &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;the process are stopped&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
}

#&lt;/span&gt;==============================================================================&lt;span&gt;
#启动服务前进行环境准备
#&lt;/span&gt;==============================================================================
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; svr_test() {
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    java &lt;/span&gt;-version &amp;gt; /dev/&lt;span&gt;null&lt;/span&gt;&lt;span&gt;
    JAVA_STATUS&lt;/span&gt;=$?
    &lt;span&gt;if&lt;/span&gt; [ $JAVA_STATUS -ne &lt;span&gt;0&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
        &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java not found under the path,please make sure jdk is installed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        exit &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
    &lt;span&gt;fi&lt;/span&gt;&lt;span&gt;

    cd `&lt;/span&gt;&lt;span&gt;dirname&lt;/span&gt; $&lt;span&gt;0&lt;/span&gt;&lt;span&gt;`

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
        DEBUG_OPTS&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$DEBUG_PORT&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;fi&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt; [ -n &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$SERVICE_NAME&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
        &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SERVICE_NAME    = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$SERVICE_NAME
    &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JAR_ARTIFACT_NAME = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$JAR_ARTIFACT_NAME
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JAVA_OPTS       = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$JAVA_OPTS
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DEBUG_OPTS      = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$DEBUG_OPTS
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CUSTOM_PARAM    = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$@
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HOME_DIR        = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;`&lt;span&gt;pwd&lt;/span&gt;&lt;span&gt;`
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LAUNCH_COMMAND  = nohup java  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$JAVA_OPTS&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;$DEBUG_OPTS&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;-jar&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;$JAR_ARTIFACT_NAME&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
}

#&lt;/span&gt;==============================================================================&lt;span&gt;
#启动服务
#&lt;/span&gt;==============================================================================
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; svr_start() {
    #nohup java  $JAVA_OPTS $DEBUG_OPTS &lt;/span&gt;-jar $JAR_ARTIFACT_NAME  &amp;gt; nohup.out &amp;amp;&lt;span&gt;
    nohup java  $JAVA_OPTS $DEBUG_OPTS &lt;/span&gt;-jar $JAR_ARTIFACT_NAME  &amp;gt;/dev/&lt;span&gt;null&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&amp;gt;&amp;amp;&lt;span&gt;1&lt;/span&gt; &amp;amp;&lt;span&gt;
}


#&lt;/span&gt;==============================================================================&lt;span&gt;
#根据参数调用对应的服务
#&lt;/span&gt;==============================================================================
&lt;span&gt;if&lt;/span&gt; [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stop&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
    svr_stop
&lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
    svr_test $@
    svr_start $@
&lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;restart&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
    svr_stop
    &lt;/span&gt;&lt;span&gt;sleep&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
    svr_test $@
    svr_start $@
&lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
    svr_stop
    &lt;/span&gt;&lt;span&gt;sleep&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
    svr_test $@
    svr_start $@
&lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
    svr_test $@
    get_pids
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ -n &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$pids&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; $pids
        &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;
            &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;当前服务进程PID = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$p
        &lt;/span&gt;&lt;span&gt;done&lt;/span&gt;
    &lt;span&gt;fi&lt;/span&gt;
&lt;span&gt;elif&lt;/span&gt; [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dump&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
    get_pids
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ -n &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$pids&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; $pids
        &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;
            &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;当前服务进程PID = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$p
            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
            &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jinfo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$p&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &amp;gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$SERVICE_NAME&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$p&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.jinfo.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            jinfo $p &lt;/span&gt;&amp;gt;&lt;span&gt; $SERVICE_NAME.$p.jinfo.log
            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
            &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jstack &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$p&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &amp;gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$SERVICE_NAME&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$p&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.jstack.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            jstack $p &lt;/span&gt;&amp;gt;&lt;span&gt; $SERVICE_NAME.$p.jstack.log
            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
            &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jmap -heap &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$p&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &amp;gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$SERVICE_NAME&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$p&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.heap.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            jmap &lt;/span&gt;-heap $p &amp;gt;&lt;span&gt; $SERVICE_NAME.$p.heap.log
            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
            &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jmap -histo &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$p&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &amp;gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$SERVICE_NAME&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$p&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.histo.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            jmap &lt;/span&gt;-histo $p &amp;gt;&lt;span&gt; $SERVICE_NAME.$p.histo.log
            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
            &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jmap -dump:format=b,file=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$SERVICE_NAME&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$p&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.dump &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$p
            jmap &lt;/span&gt;-dump:format=b,&lt;span&gt;file&lt;/span&gt;=&lt;span&gt;$SERVICE_NAME.$p.dump $p
            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
            TAR_NAME&lt;/span&gt;=$SERVICE_NAME&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.dump.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$p&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;`&lt;span&gt;date&lt;/span&gt; +%Y%m%d.%H%M`&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.tar.gz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tar --remove-files --exclude=\&quot;*.gz\&quot; -zcvf &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$TAR_NAME&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;$SERVICE_NAME&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$p&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;tar&lt;/span&gt; --remove-files --exclude=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*.gz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -zcvf $TAR_NAME $SERVICE_NAME.$p.*
            &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
            &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;生成打包文件 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;`&lt;span&gt;du&lt;/span&gt; -h $TAR_NAME | &lt;span&gt;awk&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{print $1}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;`
            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; `&lt;span&gt;pwd&lt;/span&gt;`&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$TAR_NAME
        &lt;/span&gt;&lt;span&gt;done&lt;/span&gt;
    &lt;span&gt;fi&lt;/span&gt;
&lt;span&gt;else&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用法: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;$SCRIPT_NAME&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; [参数]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  start      正常启动服务，服务器首次启动时使用，绑定端口时如果端口已经被占用&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;             会直接报错退出&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  stop       使用直接终止进程的方式关闭服务&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  restart    重启服务，先将原来的服务进程关闭，然后启动服务&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  debug      关闭当前的服务并用debug模式重启，用于远程调试&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  dump       保存服务进程的内存堆栈等信息，用于排查问题&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  test       查看服务启动配置信息，不会启动服务&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;fi&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;我通过远程桌面，在服务器里，手动执行bdmp-backstage-rest.sh文件，服务（端口18083）是可以启动起来的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510105006259-1803845709.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3、jenkins ssh启动shell：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;job配置：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510111040052-616121647.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;job的状态是success，日志如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510111148333-1017908325.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 但是实际上，服务并没有启动（或者是启动了，但是ssh退出登录时又关闭了）。&lt;/p&gt;

&lt;h2&gt;4、shell脚本-修改脚本睡眠时间1：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510110048938-2030187250.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;运行：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510110104612-722837740.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;应该是卡在sleep那一句了。此时，看看windows主机上，进程是否启动。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510111454086-247517047.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 进程是启动的。&lt;/p&gt;
&lt;p&gt;后续不出所料的，jenkins那边，job超时，标记为unstable。然后我继续查看windows主机，发现进程还在。这有点出乎我的意料。&lt;/p&gt;
&lt;p&gt;我想是不是因为睡眠的时间太长，可能睡眠结束，这个进程也就被kill了。&lt;/p&gt;


&lt;h2&gt;5、shell脚本-修改脚本睡眠时间2：&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510112310847-115898396.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;job日志显示，20s后，job结束：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510112357811-731587882.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;windows上，进程还在：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510112456572-1268208141.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;顺便看看我的日志吧：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510112551307-2090417763.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;6、shell脚本-修改脚本睡眠时间3：&lt;/h2&gt;
&lt;p&gt;接下来，修改为3s，我的程序启动大概要10多秒，这边如果设为小于程序启动并绑定端口的时间的话，会怎样？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510112807194-134968408.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 这边不截图了，效果和第五步一样。&lt;/p&gt;
&lt;h2&gt;7、疑惑&lt;/h2&gt;
&lt;p&gt;但是，为啥一定要sleep呢？昨天我用shell方案的时候，没想到这茬，因此在多次尝试无果后，转向了bat。&lt;/p&gt;
&lt;p&gt; 有知道的，麻烦解惑。&lt;/p&gt;




&lt;h2&gt;&lt;span&gt; 1、方案1&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510113811122-1297716384.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2、方案2&lt;/h2&gt;
&lt;p&gt;这个是最开始的版本。网上都是这样写的。在远程桌面进去，手动执行，没问题的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
start javaw -Xms512m -Xmx512m -Xmn512m -jar target\bdmp-backstage-rest.jar 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510114059502-1305863759.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 但是，用在我这里，（ssh登录进来执行bat的方式），却不行。&lt;/p&gt;
&lt;p&gt;后来，我在javaw后，加了pause。&lt;/p&gt;
&lt;p&gt;这时，可以查到进程了。但是一旦jenkins那边，ssh退出了。就查不到了。估计是被kill了。&lt;/p&gt;
&lt;p&gt;所以我开始查找，windows要怎么忽略nohup信号（像linux那样）&lt;/p&gt;
&lt;h2&gt;3、结论&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows&quot; target=&quot;_blank&quot;&gt;https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仔细看了这个问题下的每个回答，我总算知道了原因。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510114421726-1554787888.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 在ssh到windows的情况下，只要ssh退出，ssh启动的任务都会被kill掉。唯一可行的办法，就是使用javaw。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;所以，linux通过ssh远程到windows上，执行sh或者bat，去启动java子进程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;目前我只知道这两种方式，一种shell，（需要加sleep，具体原因未明），一种就是bat，必须使用javaw&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;欢迎探讨。最后，感谢群管理@北京-酒精发子。也欢迎加入jenkins交流群。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201805/519126-20180510114959503-1334223765.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 10 May 2018 03:51:00 +0000</pubDate>
<dc:creator>三国梦回</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/grey-wolf/p/9015779.html</dc:identifier>
</item>
<item>
<title>MariaDB/MySQL备份和恢复(三)：xtrabackup用法和原理详述 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/9018716.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/9018716.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;MariaDB/MySQL备份恢复系列：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9013458.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;备份和恢复(一)：mysqldump工具用法详述&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9013643.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;备份和恢复(二)：导入、导出表数据&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;备份和恢复(三)：xtrabackup用法和原理详述&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;a&gt;&lt;span&gt;本文目录：&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog1&quot;&gt;&lt;span&gt;1.安装xtrabackup&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog2&quot;&gt;&lt;span&gt;2.备份锁&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog3&quot;&gt;&lt;span&gt;3.xtrabackup备份原理说明&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog3.1&quot;&gt;&lt;span&gt;3.1 备份过程(backup阶段)&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog3.2&quot;&gt;&lt;span&gt;3.2 准备过程(preparing阶段)&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog3.3&quot;&gt;&lt;span&gt;3.3 恢复过程(copy back阶段)&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog4&quot;&gt;&lt;span&gt;4.准备实验环境&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog5&quot;&gt;&lt;span&gt;5.innobackupex工具&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog5.1&quot;&gt;&lt;span&gt;5.1 innobackupex实现全备份和恢复的过程&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog5.2&quot;&gt;&lt;span&gt;5.2 innobackupex实现增量备份和恢复的过程&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog5.3&quot;&gt;&lt;span&gt;5.3 innobackupex实现导出和导入单张表的过程&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog5.4&quot;&gt;&lt;span&gt;5.4 innobackupex实现部分备份和恢复的过程&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog5.5&quot;&gt;&lt;span&gt;5.5 innobackupex实现定时点恢复&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog5.6&quot;&gt;&lt;span&gt;5.6 流备份和远程备份&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog5.7&quot;&gt;&lt;span&gt;5.7 加速备份&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog6&quot;&gt;&lt;span&gt;6.xtrabackup工具&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog6.1&quot;&gt;&lt;span&gt;6.1 xtrabackup实现全备&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog6.2&quot;&gt;&lt;span&gt;6.2 xtrabackup实现增备&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html#blog6.3&quot;&gt;&lt;span&gt;6.3 xtrabackup实现部分备份&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;xtrabackup是percona团队研发的备份工具，比MySQL官方的ibbackup的功能还要多。支持myisam温全备、innodb热全备和温增备，还可以实现innodb的定时点恢复，而且备份和恢复的速度都较快。在目前MySQL的备份实现上，考虑价格、速度、安全、一致性等角度，xtrabackup是非常合适的工具。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;MariaDB也可以使用percona xtrabackup进行备份，不过MariaDB基于percona xtrabackup开发了它自己的备份工具：MariaDB Backup。它基于xtrabackup开发，所以所用方法基本和xtrabackup相同，只是有些自己的特性。详细内容见MariaDB Backup官方手册：&lt;span&gt;&lt;a href=&quot;https://mariadb.com/kb/en/library/mariadb-backup/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://mariadb.com/kb/en/library/mariadb-backup/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;xtrabackup官方手册：&lt;span&gt;&lt;a href=&quot;https://www.percona.com/doc/percona-xtrabackup/LATEST/index.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://www.percona.com/doc/percona-xtrabackup/LATEST/index.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p class=&quot;01&quot;&gt;下载地址：&lt;span&gt;&lt;a href=&quot;https://www.percona.com/downloads/XtraBackup/LATEST/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://www.percona.com/downloads/XtraBackup/LATEST/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;rpm仓库(实际上是percona的仓库)：&lt;span&gt;&lt;a href=&quot;http://repo.percona.com/release/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://repo.percona.com/release/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;清华大学percona源：&lt;span&gt;&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/percona/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://mirrors.tuna.tsinghua.edu.cn/percona/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;因为只是一个备份工具，所以没必要编译安装，直接下载它的rpm包即可。但是该rpm包依赖于libev.so.4，该依赖包可以在epel源中找到。&lt;/p&gt;
&lt;p&gt;这里安装的是目前最新版的xtrabackup-24-2.4.11。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cat&lt;/span&gt; &amp;lt;&amp;lt;eof&amp;gt;&amp;gt;/etc/&lt;span&gt;yum&lt;/span&gt;.repos.d/&lt;span&gt;percona.repo
[percona]
name &lt;/span&gt;=&lt;span&gt; Percona
baseurl &lt;/span&gt;= https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.tuna.tsinghua.edu.cn/percona/release/\$releasever/RPMS/\$basearch&lt;/span&gt;
enabled = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
gpgcheck &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

[epel]
name&lt;/span&gt;=&lt;span&gt;epelrepo
baseurl&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/epel/\$releasever/\$basearch&lt;/span&gt;
gpgcheck=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
enable&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
eof&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@node1 ~]# &lt;span&gt;yum&lt;/span&gt; list all| &lt;span&gt;grep&lt;/span&gt; xtraback -&lt;span&gt;i
Repository epel is listed &lt;/span&gt;&lt;span&gt;more&lt;/span&gt; than once &lt;span&gt;in&lt;/span&gt;&lt;span&gt; the configuration
holland&lt;/span&gt;-xtrabackup.noarch                      &lt;span&gt;1.0&lt;/span&gt;.&lt;span&gt;14&lt;/span&gt;-&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.el6                 epel
percona&lt;/span&gt;-xtrabackup.x86_64                      &lt;span&gt;2.3&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el6                 percona
percona&lt;/span&gt;-xtrabackup-&lt;span&gt;20&lt;/span&gt;.x86_64                   &lt;span&gt;2.0&lt;/span&gt;.&lt;span&gt;8&lt;/span&gt;-&lt;span&gt;587&lt;/span&gt;&lt;span&gt;.rhel6              percona
percona&lt;/span&gt;-xtrabackup-&lt;span&gt;20&lt;/span&gt;-debuginfo.x86_64         &lt;span&gt;2.0&lt;/span&gt;.&lt;span&gt;8&lt;/span&gt;-&lt;span&gt;587&lt;/span&gt;&lt;span&gt;.rhel6              percona
percona&lt;/span&gt;-xtrabackup-&lt;span&gt;20&lt;/span&gt;-test.x86_64              &lt;span&gt;2.0&lt;/span&gt;.&lt;span&gt;8&lt;/span&gt;-&lt;span&gt;587&lt;/span&gt;&lt;span&gt;.rhel6              percona
percona&lt;/span&gt;-xtrabackup-&lt;span&gt;21&lt;/span&gt;.x86_64                   &lt;span&gt;2.1&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;746&lt;/span&gt;&lt;span&gt;.rhel6              percona
percona&lt;/span&gt;-xtrabackup-&lt;span&gt;21&lt;/span&gt;-debuginfo.x86_64         &lt;span&gt;2.1&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;746&lt;/span&gt;&lt;span&gt;.rhel6              percona
percona&lt;/span&gt;-xtrabackup-&lt;span&gt;22&lt;/span&gt;.x86_64                   &lt;span&gt;2.2&lt;/span&gt;.&lt;span&gt;13&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el6                 percona
percona&lt;/span&gt;-xtrabackup-&lt;span&gt;22&lt;/span&gt;-debuginfo.x86_64         &lt;span&gt;2.2&lt;/span&gt;.&lt;span&gt;13&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el6                 percona
percona&lt;/span&gt;-xtrabackup-&lt;span&gt;24&lt;/span&gt;.x86_64                   &lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;11&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el6                 percona
percona&lt;/span&gt;-xtrabackup-&lt;span&gt;24&lt;/span&gt;-debuginfo.x86_64         &lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;11&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el6                 percona
percona&lt;/span&gt;-xtrabackup-debuginfo.x86_64            &lt;span&gt;2.3&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el6                 percona
percona&lt;/span&gt;-xtrabackup-test.x86_64                 &lt;span&gt;2.3&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el6                 percona
percona&lt;/span&gt;-xtrabackup-test-&lt;span&gt;21&lt;/span&gt;.x86_64              &lt;span&gt;2.1&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;-&lt;span&gt;746&lt;/span&gt;&lt;span&gt;.rhel6              percona
percona&lt;/span&gt;-xtrabackup-test-&lt;span&gt;22&lt;/span&gt;.x86_64              &lt;span&gt;2.2&lt;/span&gt;.&lt;span&gt;13&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el6                 percona
percona&lt;/span&gt;-xtrabackup-test-&lt;span&gt;24&lt;/span&gt;.x86_64              &lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;11&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.el6                 percona

[root@node1 &lt;/span&gt;~]# &lt;span&gt;yum&lt;/span&gt; -y &lt;span&gt;install&lt;/span&gt; percona-xtrabackup-&lt;span&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;装完xtrabackup后，生成以下几个工具。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@node1 ~]# rpm -ql percona-xtrabackup-&lt;span&gt;24&lt;/span&gt; | &lt;span&gt;grep&lt;/span&gt; bin | &lt;span&gt;xargs&lt;/span&gt; &lt;span&gt;ls&lt;/span&gt; -&lt;span&gt;hl
lrwxrwxrwx &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; root root   &lt;span&gt;10&lt;/span&gt; May  &lt;span&gt;8&lt;/span&gt; &lt;span&gt;19&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt; /usr/bin/innobackupex -&amp;gt;&lt;span&gt; xtrabackup
&lt;/span&gt;-rwxr-xr-x &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;3.5M&lt;/span&gt; Apr &lt;span&gt;19&lt;/span&gt; &lt;span&gt;01&lt;/span&gt;:&lt;span&gt;11&lt;/span&gt; /usr/bin/&lt;span&gt;xbcloud
&lt;/span&gt;-rwxr-xr-x &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;3&lt;/span&gt;.0K Apr &lt;span&gt;19&lt;/span&gt; &lt;span&gt;01&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt; /usr/bin/&lt;span&gt;xbcloud_osenv
&lt;/span&gt;-rwxr-xr-x &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;3.5M&lt;/span&gt; Apr &lt;span&gt;19&lt;/span&gt; &lt;span&gt;01&lt;/span&gt;:&lt;span&gt;11&lt;/span&gt; /usr/bin/&lt;span&gt;xbcrypt
&lt;/span&gt;-rwxr-xr-x &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;3.5M&lt;/span&gt; Apr &lt;span&gt;19&lt;/span&gt; &lt;span&gt;01&lt;/span&gt;:&lt;span&gt;11&lt;/span&gt; /usr/bin/&lt;span&gt;xbstream
&lt;/span&gt;-rwxr-xr-x &lt;span&gt;1&lt;/span&gt; root root  21M Apr &lt;span&gt;19&lt;/span&gt; &lt;span&gt;01&lt;/span&gt;:&lt;span&gt;11&lt;/span&gt; /usr/bin/xtrabackup
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li class=&quot;01&quot;&gt;xbcloud和xbcloud_osenv是xtrabackup新的高级特性：云备份；&lt;/li&gt;
&lt;li class=&quot;01&quot;&gt;xbcrypt也是新的特性，加密备份集；&lt;/li&gt;
&lt;li class=&quot;01&quot;&gt;xbstream是xtrabackup的流数据功能，通过流数据功能，可将备份内容打包并传给管道后的压缩工具进行压缩；&lt;/li&gt;
&lt;li class=&quot;01&quot;&gt;xtrabackup是主程序；&lt;/li&gt;
&lt;li class=&quot;01&quot;&gt;innobackupex在以前是一个perl脚本，会调用xtrabackup这个二进制工具，从xtrabackup 2.3开始，该工具使用C语言进行了重写，当前它是xtabackup二进制工具的一个软连接，但是实际的使用方法却不同，并且在以后的版本中会删除该工具。&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;01&quot;&gt;在本文中，会分别对两个主程序innobackupex和xtrabackup的备份恢复方法进行详细的说明，还会在说明过程中尽可能的解释它们是如何工作的，另外还会介绍它们的一些特殊功能的选项，如流备份选项。&lt;/p&gt;


&lt;p class=&quot;01&quot;&gt;一篇不错的介绍xtrabackup锁的文章：&lt;span&gt;&lt;a href=&quot;https://www.percona.com/blog/2014/03/11/introducing-backup-locks-percona-server-2/&quot;&gt;&lt;span&gt;https://www.percona.com/blog/2014/03/11/introducing-backup-locks-percona-server-2/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;percona Server 5.6+ &lt;span&gt;&lt;strong&gt;支持一种新锁——backup lock(备份锁)&lt;/strong&gt;&lt;/span&gt;，这种锁是percona对MySQL的补充，专门为备份而设计。这种锁在percona Server 5.6+ 有，MariaDB中也有，但是Oracle的MySQL中没有，至少MySQL 5.7中没有。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;这种锁用在备份的时候替代 &lt;span class=&quot;cnblogs_code&quot;&gt;flush tables with read lock&lt;/span&gt; 获取全局锁，是一种轻量级的全局锁。它有两种类型的锁：备份表锁和二进制日志锁。为此新增了3种语法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
lock tables for backup   # 申请备份表锁
lock binlog for backup   # 申请二进制日志锁
unlock binlog            # 释放二进制日志锁
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;&lt;span&gt;&lt;strong&gt;备份表锁在全局范围内只对非innodb&lt;/strong&gt;&lt;strong&gt;表加锁，所以持有该锁后无法修改非innodb&lt;/strong&gt;&lt;strong&gt;表，但却不影响innodb&lt;/strong&gt;&lt;strong&gt;表的DML。当然，因为是全局锁，所以也会阻塞DDL&lt;/strong&gt;&lt;strong&gt;操作。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;&lt;span&gt;&lt;strong&gt;二进制日志锁在全局范围内锁定二进制日志，所以会阻塞其他会话修改二进制日志。这样可以保证能够获取到二进制日志中一致性的位置坐标。&lt;/strong&gt;&lt;/span&gt; &lt;/p&gt;


&lt;p&gt;不管是使用innobackupex还是xtrabackup工具进行备份和恢复，都有3个步骤：&lt;strong&gt;&lt;span&gt;备份(backup)、准备(prepare)、恢复(copy back)。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意，xtrabackup备份过程中，先备份innodb表，再备份非innodb表。&lt;/p&gt;

&lt;h2&gt;3.1 备份过程(backup阶段)&lt;/h2&gt;
&lt;p class=&quot;01&quot;&gt;(1).在启动xtrabackup时记下LSN并将redo log拷贝到备份目标目录下的xtrabackup_logfile文件中。由于拷贝需要一定时间，如果在拷贝时间段内有日志写入，将导致拷贝的日志和MySQL的redo log不一致，所以xtrabackup还有一个后台进程监控着mysql的redo log，每秒监控一次，当MySQL的redo log有变化，该监控进程会立即将变化的内容写入到xtrabackup_logfile文件，这样就能保证拷贝走的redo log中记录了一切变化。但是这也是有风险的，因为redo是轮训式循环写入的，如果某一时刻有非常大量的日志写到redo log中，使得还没开始复制的日志就被新日志覆盖了，这样会日志丢失，并报错。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;(2).拷贝完初始版的redo log后，xtrabackup开始拷贝innodb表的数据文件(即表空间文件.ibd文件和ibdata1)。注意，此时不拷贝innodb的frm文件。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;(3).当innodb相关表的数据文件拷贝完成后，xtrabackup开始准备拷贝非innodb的文件。但在拷贝它们之前，要先对非innodb表进行加锁防止拷贝时有语句修改这些类型的表数据。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;&lt;span&gt;&lt;strong&gt;对于不支持backup lock&lt;/strong&gt;&lt;strong&gt;的版本，只能通过flush tables with read lock&lt;/strong&gt;&lt;strong&gt;来获取全局读锁，但这样也同样会锁住innodb&lt;/strong&gt;&lt;strong&gt;表，杀伤力太大。所以使用xtrabackup&lt;/strong&gt;&lt;strong&gt;备份Oracle&lt;/strong&gt;&lt;strong&gt;的MySQL&lt;/strong&gt;&lt;strong&gt;，实质上只能实现innodb&lt;/strong&gt;&lt;strong&gt;表的部分时间热备、部分时间温备。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;&lt;span&gt;&lt;strong&gt;对于支持backup lock&lt;/strong&gt;&lt;strong&gt;的版本，xtrabackup&lt;/strong&gt;&lt;strong&gt;通过lock tables for backup&lt;/strong&gt;&lt;strong&gt;获取轻量级的backup locks&lt;/strong&gt;&lt;strong&gt;来替代flush tables with read lock&lt;/strong&gt;&lt;strong&gt;，因为它只锁定非innodb&lt;/strong&gt;&lt;strong&gt;表，所以由此实现了innodb&lt;/strong&gt;&lt;strong&gt;表的真正热备。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;(4).当获取到非innodb表的锁以后，开始拷贝非innodb表的数据和.frm文件。当这些拷贝完成之后，继续拷贝其他存储引擎类型的文件。(实际上，拷贝非innodb表的数据是在获取backup locks(如果支持)后自动进行的，它们属于同一个过程)&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;(5).当拷贝阶段完成后，就到了备份的收尾阶段。包括获取二进制日志中一致性位置的坐标点、结束redo log的监控和拷贝、释放锁等。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;对于不支持backup lock的版本，收尾阶段的过程是这样的：获取二进制日志的一致性坐标点、结束redo log的监控和拷贝、释放锁。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;对于支持backup lock的版本，收尾阶段的过程是这样的：先通过lock binlog for bakcup来获取二进制日志锁，然后结束redo log的监控和拷贝，再unlock tables释放表锁，随后获取二进制日志的一致性位置坐标点，最后unlock binlog释放二进制日志锁。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;(6).如果一切都OK，xtrabackup将以状态码0退出。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;所以，对是否支持backup lock的版本，xtrabackup备份的时的行为是不一样的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733013/201805/733013-20180510102403446-1107826881.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;backup阶段的过程具体如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733013/201805/733013-20180510102456050-132525664.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;FTWRL：flush table with read lock;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733013/201805/733013-20180510102813873-234877385.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3.2 准备过程(prepare阶段)&lt;/h2&gt;
&lt;p class=&quot;01&quot;&gt;由于备份的时候拷贝走的数据文件可能是不一致的，比如监控着MySQL的redo log中在拷贝过程完成后又新的事务提交了，而拷贝走的数据是未提交状态的，那么就需要对该事务前滚；如果监控到的日志中有事务未提交，那么该事务就需要回滚。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;但是如果只备份了myisam表或其他非事务表数据，因为备份阶段直接锁定了这些表，所以不会有不一致的状态。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;xtrabackup有一个&quot;准备&quot;的阶段。这个阶段的实质就是对备份的innodb数据应用redo log，该回滚的回滚，该前滚的前滚，最终保证xtrabackup_logfile中记录的redo log已经全部应用到备份数据页上，并且实现了一致性。当应用结束后，会重写&quot;xtrabackup_logfile&quot;再次保证该redo log和备份的数据是对应的。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;准备过程不需要连接数据库，该过程可以在任意装了xtrabackup软件的机器上进行，之所能实现是因为xtrabackup软件的内部嵌入了一个简化的innodb存储引擎，可以通过它完成日志的应用。&lt;/p&gt;

&lt;h2&gt;3.3 恢复过程(copy back阶段)&lt;/h2&gt;
&lt;p class=&quot;01&quot;&gt;xtrabackup的恢复过程实质是将备份的数据文件和结构定义等文件拷贝回MySQL的datadir。同样可以拷贝到任意机器上。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;要求恢复之前MySQL必须是停止运行状态，且datadir是空目录，除非恢复的操作是导入表的操作。具体见后文对应的内容。&lt;/p&gt;


&lt;p class=&quot;01&quot;&gt;创建测试数据库backuptest，并创建myisam表和innodb表，此处简单的使用数值辅助表并分别插入1亿条数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;DROP DATABASE IF EXISTS backuptest;
CREATE DATABASE backuptest;
USE backuptest;

# 创建myisam类型的数值辅助表和对应插入数据的存储过程
CREATE TABLE num_isam(n INT NOT NULL PRIMARY KEY)ENGINE&lt;/span&gt;=&lt;span&gt;MYISAM;
DELIMITER $$
DROP PROCEDURE IF EXISTS proc_num1$$
CREATE PROCEDURE proc_num1(num INT) 
BEGIN
    DECLARE rn INT DEFAULT &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    TRUNCATE TABLE backuptest.num_isam;
    INSERT INTO backuptest.num_isam VALUES(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;dd&lt;/span&gt;: WHILE rn*&lt;span&gt;2&lt;/span&gt; &amp;lt;&lt;span&gt; num DO
        BEGIN
            INSERT INTO backuptest.num_isam SELECT rn&lt;/span&gt;+&lt;span&gt;n FROM backuptest.num_isam;
            SET rn &lt;/span&gt;= rn*&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
        END;
    END WHILE &lt;/span&gt;&lt;span&gt;dd&lt;/span&gt;&lt;span&gt;;
    INSERT INTO backuptest.num_isam SELECT n&lt;/span&gt;+rn FROM num_isam WHERE n+rn &amp;lt;=&lt;span&gt;num;
END;$$
DELIMITER ;

# 创建innodb类型的数值辅助表和对应插入数据的存储过程
CREATE TABLE num_innodb(n INT NOT NULL PRIMARY KEY)ENGINE&lt;/span&gt;=&lt;span&gt;INNODB;
DELIMITER $$
DROP PROCEDURE IF EXISTS proc_num2$$
CREATE PROCEDURE proc_num2(num INT) 
BEGIN
    DECLARE rn INT DEFAULT &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    TRUNCATE TABLE backuptest.num_innodb;
    INSERT INTO backuptest.num_innodb VALUES(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;dd&lt;/span&gt;: WHILE rn*&lt;span&gt;2&lt;/span&gt; &amp;lt;&lt;span&gt; num DO
        BEGIN
            INSERT INTO backuptest.num_innodb SELECT rn&lt;/span&gt;+&lt;span&gt;n FROM backuptest.num_innodb;
            SET rn &lt;/span&gt;= rn*&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
        END;
    END WHILE &lt;/span&gt;&lt;span&gt;dd&lt;/span&gt;&lt;span&gt;;
    INSERT INTO backuptest.num_innodb SELECT n&lt;/span&gt;+rn FROM backuptest.num_innodb WHERE n+rn &amp;lt;=&lt;span&gt;num;
END;$$
DELIMITER ;

# 分别向两个数值辅助表中插入1亿条数据，
CALL proc_num1(&lt;/span&gt;&lt;span&gt;100000000&lt;/span&gt;&lt;span&gt;);
CALL proc_num2(&lt;/span&gt;&lt;span&gt;100000000&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;



&lt;h2&gt;5.1 innobackupex实现全备份和恢复的过程&lt;/h2&gt;
&lt;p class=&quot;1&quot;&gt;&lt;strong&gt;(1). 全备&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;除了给定连接MySQL服务器的连接参数，只需再给定一个目录即可，该目录是备份的目标位置。默认xtrabackup连接数据库的时候从配置文件中去读取和备份相关的配置，可以使用选项--defaluts-file指定连接时的参数配置文件，但如果指定该选项，该选项只能放在第一个选项位置。&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
innobackupex --user=root --password=&lt;span&gt;123456&lt;/span&gt; /bakdir/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;默认备份的路径是指定路径/bakdir下的一个以时间为时间戳的目录。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@xuexi bakdir]# &lt;span&gt;du&lt;/span&gt; -&lt;span&gt;sh&lt;/span&gt; /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_07-&lt;span&gt;09&lt;/span&gt;-&lt;span&gt;47&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
4.0K    /bakdir/2017-04-02_07-09-47/backup-my.cnf
4.0G    /bakdir/2017-04-02_07-09-47/backuptest
589M    /bakdir/2017-04-02_07-09-47/ibdata1
1.8M    /bakdir/2017-04-02_07-09-47/mysql
8.0K    /bakdir/2017-04-02_07-09-47/Performance
636K    /bakdir/2017-04-02_07-09-47/performance_schema
1008K   /bakdir/2017-04-02_07-09-47/world
4.0K    /bakdir/2017-04-02_07-09-47/xtrabackup_binlog_info
4.0K    /bakdir/2017-04-02_07-09-47/xtrabackup_checkpoints
4.0K    /bakdir/2017-04-02_07-09-47/xtrabackup_info
4.0K    /bakdir/2017-04-02_07-09-47/xtrabackup_logfile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;查看该文件目录中文件和大小，可以看出xtrabackup的行为就是复制了目标数据库的相关文件，并新建了几个文件。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;其中：&lt;/p&gt;
&lt;ul readability=&quot;7.5&quot;&gt;&lt;li&gt;backup-my.cnf是拷贝过来的配置文件。里面只包含[mysqld]配置片段和备份有关的选项。&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;xtrabackup_binlog_info中记录的是当前使用的二进制日志文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-variable&quot;&gt;@xuexi&lt;/span&gt; bakdir]
mysql-bin.&lt;span class=&quot;hljs-number&quot;&gt;000001&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;120&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;xtrabackup_checkpoints中记录了备份的类型是全备还是增备，还有备份的起始、终止LSN号。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@xuexi bakdir]
&lt;span class=&quot;hljs-constant&quot;&gt;backup_type&lt;/span&gt; =&lt;span&gt;&lt;strong&gt; full-backuped&lt;/strong&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-constant&quot;&gt;from_lsn&lt;/span&gt; = 0
&lt;span class=&quot;hljs-constant&quot;&gt;to_lsn&lt;/span&gt; = 7533359841
&lt;span class=&quot;hljs-constant&quot;&gt;last_lsn&lt;/span&gt; = 7533359841
&lt;span class=&quot;hljs-constant&quot;&gt;compact&lt;/span&gt; = 0
&lt;span class=&quot;hljs-constant&quot;&gt;recover_binlog_info&lt;/span&gt; = 0
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;xtrabackup_info中记录的是备份过程中的一些信息。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@xuexi bakdir]
&lt;span class=&quot;hljs-constant&quot;&gt;uuid&lt;/span&gt; = 66f34974-1730-11e7-9d09-000c299af3f3
&lt;span class=&quot;hljs-constant&quot;&gt;name&lt;/span&gt; = 
&lt;span class=&quot;hljs-constant&quot;&gt;tool_name&lt;/span&gt; = innobackupex
&lt;span class=&quot;hljs-constant&quot;&gt;tool_command&lt;/span&gt; = --user=root --password=...  /bakdir/
&lt;span class=&quot;hljs-constant&quot;&gt;tool_version&lt;/span&gt; = 2.4.6
&lt;span class=&quot;hljs-constant&quot;&gt;ibbackup_version&lt;/span&gt; = 2.4.6
&lt;span class=&quot;hljs-constant&quot;&gt;server_version&lt;/span&gt; = 5.6.35-log
&lt;span class=&quot;hljs-constant&quot;&gt;start_time&lt;/span&gt; = 2017-04-02 07:09:47
&lt;span class=&quot;hljs-constant&quot;&gt;end_time&lt;/span&gt; = 2017-04-02 07:10:31
&lt;span class=&quot;hljs-constant&quot;&gt;lock_time&lt;/span&gt; = 0
&lt;span class=&quot;hljs-constant&quot;&gt;binlog_pos&lt;/span&gt; = filename 'mysql-bin.000001', position '120'
&lt;span class=&quot;hljs-constant&quot;&gt;innodb_from_lsn&lt;/span&gt; = 0
&lt;span class=&quot;hljs-constant&quot;&gt;innodb_to_lsn&lt;/span&gt; = 7533359841
&lt;span class=&quot;hljs-constant&quot;&gt;partial&lt;/span&gt; = N          # N表示未启用该方面的功能，如此处表示不是备份部分数据库或表
&lt;span class=&quot;hljs-constant&quot;&gt;incremental&lt;/span&gt; = N
&lt;span class=&quot;hljs-constant&quot;&gt;format&lt;/span&gt; = file
&lt;span class=&quot;hljs-constant&quot;&gt;compact&lt;/span&gt; = N
&lt;span class=&quot;hljs-constant&quot;&gt;compressed&lt;/span&gt; = N
&lt;span class=&quot;hljs-constant&quot;&gt;encrypted&lt;/span&gt; = N
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;xtrabackup_logfile是复制和监控后写的redo日志。该日志是备份后下一个操作&quot;准备&quot;的关键。只有通过它才能实现数据一致性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;1&quot;&gt;&lt;strong&gt;(2). 全备的准备过程&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;在全备份完成之后，备份的数据中如果有innodb数据，则还不能用来恢复。因为从xtrabackup开始备份的时候就监控着MySQL的redo log，在拷贝的innodb数据文件中很可能还有未提交的事务，并且拷贝完innodb数据之后还可能提交了事务或者开启了新的事务等等。总之，全备之后的状态不一定是一致的。但是如果只备份了myisam表或其他非事务表数据，因为备份阶段直接锁定了这些表，所以不会有不一致的状态。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;xtrabackup有一个&quot;准备&quot;的阶段。这个阶段的实质就是对备份的innodb数据应用redo log，该回滚的回滚，该前滚的前滚，最终保证xtrabackup_logfile中记录的redo log已经全部应用到备份数据页上，并且实现了一致性。当应用结束后，会重写&quot;xtrabackup_logfile&quot;再次保证该redo log和备份的数据是对应的。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;例如，备份的innodb数据文件中存在未提交的事务，但是在监控到的日志中进行了提交，那么就需要对该事务前滚；如果监控到的日志中有事务未提交，那么该事务就需要回滚。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;准备阶段使用的模式选项是&quot;--apply-log&quot;。准备阶段不会连接MySQL，所以不用指定连接选项如--user等。&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@xuexi bakdir]# innobackupex --apply-log /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_07-&lt;span&gt;09&lt;/span&gt;-&lt;span&gt;47&lt;/span&gt;/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;在准备成功时，会在频幕上输出如下提示内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;InnoDB: FTS optimize thread exiting.
InnoDB: Starting shutdown...
InnoDB: Shutdown completed; log sequence number &lt;/span&gt;&lt;span&gt;7533367063&lt;/span&gt;
&lt;span&gt;170402&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;11&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt; completed OK!
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;在准备阶段，有一个内存使用量选项&quot;--use-memory&quot;，该选项默认值为100M，值越大准备的过程越快。当然，将该值加大的前提是服务器内存够用。&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;&lt;strong&gt;(3). 全备份的恢复过程&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;恢复的阶段就是向MySQL的datadir拷贝。全备份的恢复要求MySQL必须处于stop状态，并且datadir必须为空哪怕是和MySQL无关的文件也不能存在，它不会去覆盖datadir中已存在的内容。否则会提示如下错误：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
innobackupex version &lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;6&lt;/span&gt; based on MySQL server &lt;span&gt;5.7&lt;/span&gt;.&lt;span&gt;13&lt;/span&gt; Linux (x86_64) (revision &lt;span&gt;id&lt;/span&gt;&lt;span&gt;: 8ec05b7)
Original data directory &lt;/span&gt;/mydata/data is not empty!
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;停止mysql并清空datadir。&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;service mysqld stop
&lt;/span&gt;&lt;span&gt;rm&lt;/span&gt; -rf /mydata/data&lt;span&gt;/*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;恢复时使用的模式是&quot;--copy-back&quot;，选项后指定要恢复的源备份目录。恢复时因为不需要连接数据库，所以不用指定连接选项，如--user等。&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@xuexi bakdir]# innobackupex --copy-back /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_07-&lt;span&gt;09&lt;/span&gt;-&lt;span&gt;47&lt;/span&gt;/
&lt;span&gt;170402&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;36&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt; completed OK!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;&lt;span&gt;&lt;strong&gt;拷贝完成后，MySQL的datadir的文件的所有者和属组是innobackupex的调用者，所以需要改回mysql.mysql。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@xuexi bakdir]# ll /mydata/data/&lt;span&gt;
total &lt;/span&gt;&lt;span&gt;712736&lt;/span&gt;&lt;span&gt;
drwxr&lt;/span&gt;-x--- &lt;span&gt;2&lt;/span&gt; root root      &lt;span&gt;4096&lt;/span&gt; Apr  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;36&lt;/span&gt;&lt;span&gt; backuptest
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;616562688&lt;/span&gt; Apr  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;35&lt;/span&gt;&lt;span&gt; ibdata1
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;50331648&lt;/span&gt; Apr  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;35&lt;/span&gt;&lt;span&gt; ib_logfile0
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;50331648&lt;/span&gt; Apr  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;35&lt;/span&gt;&lt;span&gt; ib_logfile1
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;12582912&lt;/span&gt; Apr  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;36&lt;/span&gt;&lt;span&gt; ibtmp1
drwxr&lt;/span&gt;-x--- &lt;span&gt;2&lt;/span&gt; root root      &lt;span&gt;4096&lt;/span&gt; Apr  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;36&lt;/span&gt;&lt;span&gt; mysql
drwxr&lt;/span&gt;-x--- &lt;span&gt;2&lt;/span&gt; root root      &lt;span&gt;4096&lt;/span&gt; Apr  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;35&lt;/span&gt;&lt;span&gt; Performance
drwxr&lt;/span&gt;-x--- &lt;span&gt;2&lt;/span&gt; root root      &lt;span&gt;4096&lt;/span&gt; Apr  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;36&lt;/span&gt;&lt;span&gt; performance_schema
drwxr&lt;/span&gt;-x--- &lt;span&gt;2&lt;/span&gt; root root      &lt;span&gt;4096&lt;/span&gt; Apr  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;35&lt;/span&gt;&lt;span&gt; world
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root        &lt;span&gt;23&lt;/span&gt; Apr  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;35&lt;/span&gt;&lt;span&gt; xtrabackup_binlog_pos_innodb
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root       &lt;span&gt;494&lt;/span&gt; Apr  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;35&lt;/span&gt;&lt;span&gt; xtrabackup_info

[root@xuexi bakdir]# &lt;/span&gt;&lt;span&gt;chown&lt;/span&gt; -R mysql.mysql /mydata/data&lt;span&gt;/*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;完成这些之后，就可以启动MySQL服务器了。可以进入mysql测试backuptest数据库中的数据是否完整。&lt;/p&gt;

&lt;h2&gt;5.2 innobackupex实现增量备份和恢复的过程&lt;/h2&gt;
&lt;p class=&quot;01&quot;&gt;增量备份依赖于全备份。xtrabackup实现增量备份的原理是通过比较全备份的终点LSN和当前的LSN，增备时将从终点LSN开始一直备份到当前的LSN。在备份时也有redo log的监控线程，对于增备过程中导致LSN增长的操作也会写入到日志中。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;增备的实现依赖于LSN，所以只对innodb有效，对myisam表使用增备时，背后进行的是全备。&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;(1). 要进行增备，首先要有全备文件。这里重新进行一次全备。&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
innobackupex --user=root --password=&lt;span&gt;123456&lt;/span&gt; /bakdir/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;全备完成后，在/bakdir目录下生成的全备目录是2017-04-02_13-26-35。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@xuexi ~]# &lt;span&gt;ls&lt;/span&gt; /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_13-&lt;span&gt;26&lt;/span&gt;-&lt;span&gt;35&lt;/span&gt;/&lt;span&gt;
backup&lt;/span&gt;-&lt;span&gt;my.cnf  ibdata1  Performance         secure_dir  xtrabackup_binlog_info  xtrabackup_info
backuptest     mysql    performance_schema  world       xtrabackup_checkpoints  xtrabackup_logfile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;查看xtrabackup_checkpoints可以得知相关的LSN。&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@xuexi ~]# &lt;span&gt;cat&lt;/span&gt; /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_13-&lt;span&gt;26&lt;/span&gt;-&lt;span&gt;35&lt;/span&gt;/&lt;span&gt;xtrabackup_checkpoints
backup_type &lt;/span&gt;= full-&lt;span&gt;backuped
from_lsn &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
to_lsn &lt;/span&gt;= &lt;span&gt;7533367093&lt;/span&gt;&lt;span&gt;
last_lsn &lt;/span&gt;= &lt;span&gt;7533367093&lt;/span&gt;&lt;span&gt;
compact &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
recover_binlog_info &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;注意：要实现增备，这一次的全备一定不能进行&quot;准备&quot;操作，原因稍后给出。&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;&lt;strong&gt;(2). 进行第一次增备。&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;假设对示例数据可backuptest中的num_innodb表进行了truncate操作。&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; truncate backuptest.num_innodb;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;然后再增备。增备时使用&quot;--incremental&quot;选项表示增量备份，增量备份时需要通过&quot;--incremental-basedir=fullback_PATH&quot;指定基于哪个备份集备份，因为是第一次增备，所以要基于完全备份增量集。&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@xuexi ~]# innobackupex --user=root --password=&lt;span&gt;123456&lt;/span&gt; --incremental /bakdir/ --incremental-basedir=/bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_13-&lt;span&gt;26&lt;/span&gt;-&lt;span&gt;35&lt;/span&gt;/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;增备完成后，生成的增备集为/bakdir/2017-04-02_13-39-05/，查看其中的xtrabackup_checkpoints，可以看到备份的起始LSN是上次全备完成后的LSN。&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@xuexi ~]# &lt;span&gt;cat&lt;/span&gt; /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_13-&lt;span&gt;39&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;/&lt;span&gt;xtrabackup_checkpoints
backup_type &lt;/span&gt;=&lt;span&gt;&lt;span&gt;&lt;strong&gt; incremental&lt;/strong&gt;&lt;/span&gt;
from_lsn &lt;/span&gt;= &lt;span&gt;7533367093&lt;/span&gt;&lt;span&gt;
to_lsn &lt;/span&gt;= &lt;span&gt;7533372535&lt;/span&gt;&lt;span&gt;
last_lsn &lt;/span&gt;= &lt;span&gt;7533372535&lt;/span&gt;&lt;span&gt;
compact &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
recover_binlog_info &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;默认情况下，增备的起始LSN是自动获取的，但是在某些情况下无法获取，还有些情况下无法获取到将要增备的basedir。xtrabackup提供的选项&quot;--incremental-lsn=N&quot;可以显式指定增备的起始LSN，显式指定LSN时，可以无需提供增备的basedir。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;例如，如果获取到了上次全备的终止LSN为7533367093，可以如下方式增备：&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
innobackupex --user=root --password=&lt;span&gt;123456&lt;/span&gt; --incremental /bakdir/ --incremental-lsn=&lt;span&gt;7533367093&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;这样增备后也在/bakdir中生成一个时间戳目录/bakdir/2017-04-02_13-50-33。查看LSN信息：&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@xuexi ~]# &lt;span&gt;cat&lt;/span&gt; /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_13-&lt;span&gt;50&lt;/span&gt;-&lt;span&gt;33&lt;/span&gt;/&lt;span&gt;xtrabackup_checkpoints
backup_type &lt;/span&gt;=&lt;span&gt; incremental
from_lsn &lt;/span&gt;= &lt;span&gt;7533367093&lt;/span&gt;&lt;span&gt;
to_lsn &lt;/span&gt;= &lt;span&gt;7533372535&lt;/span&gt;&lt;span&gt;
last_lsn &lt;/span&gt;= &lt;span&gt;7533372535&lt;/span&gt;&lt;span&gt;
compact &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
recover_binlog_info &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;由此可知和指定--incremental-basedir进行增备是一样的。&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;&lt;strong&gt;(3). 进行第二次增备。&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;假设在第一次增备后，向上次truncate的表backuptest.num_innodb表中插入的100W条记录。&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; call backuptest.proc_num2(&lt;span&gt;1000000&lt;/span&gt;&lt;span&gt;);      
mysql&lt;/span&gt;&amp;gt; &lt;span&gt;select&lt;/span&gt; count(*&lt;span&gt;) from backuptest.num_innodb;
&lt;/span&gt;+----------+
| count(*) |
+----------+
|  &lt;span&gt;1000000&lt;/span&gt; |
+----------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;然后进行增备。这次增备是基于第一次增备的（当然也可以基于全备进行备份，这样实现的是差异备份）。&lt;/p&gt;
&lt;div readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@xuexi ~]# innobackupex --user=root --password=&lt;span&gt;123456&lt;/span&gt; --incremental /bakdir/ --incremental-basedir=/bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_13-&lt;span&gt;39&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;/
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;022&quot;&gt;这次增备完成后生成的备份集为/bakdir/2017-04-02_14-03-51/。查看LSN信息：&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@xuexi ~]# &lt;span&gt;cat&lt;/span&gt; /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_14-&lt;span&gt;03&lt;/span&gt;-&lt;span&gt;51&lt;/span&gt;/&lt;span&gt;xtrabackup_checkpoints
backup_type &lt;/span&gt;=&lt;span&gt; incremental
from_lsn &lt;/span&gt;= &lt;span&gt;7533372535&lt;/span&gt;&lt;span&gt;
to_lsn &lt;/span&gt;= &lt;span&gt;7585150275&lt;/span&gt;&lt;span&gt;
last_lsn &lt;/span&gt;= &lt;span&gt;7585150275&lt;/span&gt;&lt;span&gt;
compact &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
recover_binlog_info &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;1&quot;&gt;&lt;strong&gt;(4). 增备的准备过程&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;增备的准备过程和全备的准备过程有点不一样，不到最后恢复的时候不能进行任何&quot;准备&quot;过程。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;增备过程中的每一次备份行为都会监控MySQL的redo log，写入到xtrabackup_logfile的日志中可能会有未提交的事务，但是到后面增备的时候进行了提交，也就是说提交过程记录到了增备时监控的日志xtrabackup_logfile中。如果在增备前进行了&quot;准备&quot;，那么该事务就会被回滚，后面增备中的提交就丢失了，由此会造成数据丢失。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;要保证将所有的备份集进行整合，需要使用在每个备份集的&quot;准备&quot;过程中使用&quot;--redo-only&quot;选项，这样应用日志时会&quot;直线向前&quot;直到最后一个备份集。它的本质是向全备集中不断的追加应用增备中的日志。但是，最后一个增备集需要作为备份集整合的终点，所以它不能使用&quot;--redo-only&quot;选项。整合完成之后，原来的全备就已经完整了，这时再对追加完成的全备集进行一次&quot;准备&quot;即可用于后面的恢复。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;所以，如果全备为A，3次增备分别为B/C/D，如果只想恢复到C，那么从A开始整合到C结束即可。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;因为在每一个增备的&quot;准备&quot;过程中都需要向整合的开始备份集中追加应用日志，所以每一次增备的&quot;准备&quot;都需要指定整合的开始备份集目录作为basedir。例如指定全备份作为整合的初始备份集。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;从以上实验过程中，得到的全备集是2017-04-02_13-26-35，第一次和第二次增备集分别是2017-04-02_13-26-35、2017-04-02_14-03-51。下面是它们的&quot;准备&quot;过程。&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
# 对整合的开始备份集——全备集应用日志，并指定&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--redo-only&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;表示开始进入日志追加
innobackupex &lt;/span&gt;--apply-log --redo-only /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_13-&lt;span&gt;26&lt;/span&gt;-&lt;span&gt;35&lt;/span&gt;&lt;span&gt;

# 对第一个增备集进行&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;准备&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;，将其追加到全备集中
innobackupex &lt;/span&gt;--apply-log --redo-only /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_13-&lt;span&gt;26&lt;/span&gt;-&lt;span&gt;35&lt;/span&gt; --incremental-&lt;span&gt;dir&lt;/span&gt;=/bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_13-&lt;span&gt;39&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;&lt;span&gt;

# 对第二个增备集进行&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;准备&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;，将其追加到全备集中，但是不再应用&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--redo-only&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;，表示整合的结束点
innobackupex &lt;/span&gt;--apply-log /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_13-&lt;span&gt;26&lt;/span&gt;-&lt;span&gt;35&lt;/span&gt; --incremental-&lt;span&gt;dir&lt;/span&gt;=/bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_14-&lt;span&gt;03&lt;/span&gt;-&lt;span&gt;51&lt;/span&gt;&lt;span&gt;

# 对整合完成的全备集进行一次整体的&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;准备&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
innobackupex &lt;/span&gt;--apply-log /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_13-&lt;span&gt;26&lt;/span&gt;-&lt;span&gt;35&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;当所有的备份集整合完毕后，就像是一个完整的全备集，全备中的LSN会更新到整合的结束点。如下：&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@xuexi data]# &lt;span&gt;cat&lt;/span&gt; /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_13-&lt;span&gt;26&lt;/span&gt;-&lt;span&gt;35&lt;/span&gt;/&lt;span&gt;xtrabackup_checkpoints
backup_type &lt;/span&gt;= full-&lt;span&gt;prepared
from_lsn &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
to_lsn &lt;/span&gt;= &lt;span&gt;7585150275&lt;/span&gt;&lt;span&gt;  #整合完成后全备中的LSN
last_lsn &lt;/span&gt;= &lt;span&gt;7585150275&lt;/span&gt;&lt;span&gt;
compact &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
recover_binlog_info &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

[root@xuexi data]# &lt;/span&gt;&lt;span&gt;cat&lt;/span&gt; /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_14-&lt;span&gt;03&lt;/span&gt;-&lt;span&gt;51&lt;/span&gt;/&lt;span&gt;xtrabackup_checkpoints
backup_type &lt;/span&gt;=&lt;span&gt; incremental
from_lsn &lt;/span&gt;= &lt;span&gt;7533372535&lt;/span&gt;&lt;span&gt;
to_lsn &lt;/span&gt;= &lt;span&gt;7585150275&lt;/span&gt;&lt;span&gt;       #整合的结束备份集中的LSN
last_lsn &lt;/span&gt;= &lt;span&gt;7585150275&lt;/span&gt;&lt;span&gt;
compact &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
recover_binlog_info &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;如果不小心整合的顺序错误了，那么整合的备份集将是无效的，需要重新整合。&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;&lt;strong&gt;(5). 增备的恢复过程&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;因为整合结束后就等价于一个全备集，所以可以直接进行恢复。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;恢复过程同样需要保证MySQL的datadir是空的，且MySQL服务器是stop的。&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;service mysqld stop
&lt;/span&gt;&lt;span&gt;rm&lt;/span&gt; -rf /mydata/data&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
innobackupex --copy-back /bakdir/2017-04-02_13-26-35
chown -R mysql.mysql /mydata/data/*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;然后重启MySQL，进入查看可知num_innodb的数据为100W行记录，即恢复成功。&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; &lt;span&gt;select&lt;/span&gt; count(*&lt;span&gt;) from backuptest.num_innodb;
&lt;/span&gt;+----------+
| count(*) |
+----------+
|  &lt;span&gt;1000000&lt;/span&gt; |
+----------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;5.3 innobackupex实现导出和导入单张表的过程&lt;/h2&gt;
&lt;p class=&quot;01&quot;&gt;默认情况下，InnoDB表不能通过直接复制表文件的方式在mysql服务器之间进行移植，即便使用了innodb_file_per_table选项。而使用Xtrabackup工具可以实现此种功能，不过只能&quot;导出&quot;具有.ibd文件的表，也就是说导出表的mysql服务器启用了innodb_file_per_table选项，而且要导出的表还是在启用该选项之后才创建的。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;导入表的是，要求导入表的服务器版本是MySQL 5.6+，且启用了innodb_file_per_table选项。&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;&lt;strong&gt;(1). 导出表&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;导出表是在&quot;准备&quot;的过程中进行的，不是在备份的时候导出。对于一个已经备份好的备份集，使用&quot;--apply-log&quot;和&quot;--export&quot;选项即可导出备份集中的表。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;假如以全备份集/bakdir/2017-04-02_17-41-38为例，要导出其中的表。&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
innobackupex --apply-log --export /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_17-&lt;span&gt;41&lt;/span&gt;-&lt;span&gt;38&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;在导出过程中，会看到如下信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
xtrabackup: export metadata of table 'backuptest/num_innodb' to file `./backuptest/num_innodb.exp` (1 indexes)
xtrabackup:     name=PRIMARY, id.low=144, page=3
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;它说明了创建了一个.exp文件。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;查看备份集目录下的backuptest目录，会发现多出了2个文件：.cfg和.exp，再加上.ibd文件，这3个文件是后续导入表时所需的文件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
-rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;349&lt;/span&gt; Apr  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;18&lt;/span&gt;:&lt;span&gt;15&lt;/span&gt;&lt;span&gt; num_innodb.cfg
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root  16K Apr  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;18&lt;/span&gt;:&lt;span&gt;15&lt;/span&gt;&lt;span&gt; num_innodb.exp
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;8&lt;/span&gt;.4K Apr  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;17&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;&lt;span&gt; num_innodb.frm
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root  31M Apr  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;17&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt; num_innodb.ibd
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;其中.cfg文件是一种特殊的innodb数据字典文件，它和exp文件的作用是差不多的，只不过后者还支持在xtradb中导入，严格地讲，要将导出的表导入到MySQL5.6或者percona server 5.6中，&quot;.cfg&quot;文件完全可以不需要，但是如果有该文件的话，会进行架构验证。&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;&lt;strong&gt;(2). 导出表&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;要在mysql服务器上导入来自于其它服务器的某innodb表，需要先在当前服务器上创建一个跟原表表结构一致的表，而后才能实现将表导入：&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; CREATE TABLE tabletest (...)  ENGINE=InnoDB;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;然后将此表的表空间：&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; ALTER TABLE mydatabase.tabletest  DISCARD TABLESPACE;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;接下来，将来自于&quot;导出&quot;表的的.ibd和.exp文件复制到当前服务器的数据目录，如果导入目标服务器是MySQL 5.6+，也可以复制.cfg文件。然后使用如下命令将其“导入”：&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; ALTER TABLE mydatabase.tabletest IMPORT TABLESPACE;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;5.4 innobackupex实现部分备份和恢复的过程&lt;/h2&gt;
&lt;p class=&quot;01&quot;&gt;xtrabackup支持部分备份，意味着可以指定备份哪个数据库或者哪个表。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;部分备份只有一点需要注意：在恢复的时候不要通过&quot;--copy-back&quot;的方式拷贝回datadir，而是应该使用导入表的方式。尽管使用拷贝的方式有时候是可行的，但是很多情况下会出现数据库不一致的状态。&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;&lt;strong&gt;(1). 备份&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;创建部分备份有三种方式：&lt;/p&gt;
&lt;ol&gt;&lt;li class=&quot;a&quot;&gt; 通过&quot;--include&quot;选项可以指定正则来匹配要备份的表，这种方式要使用完整对象引用格式，即db_name.tab_name的方式。&lt;/li&gt;
&lt;li class=&quot;a&quot;&gt;将要备份的表分行枚举到一个文件中，通过&quot;--tables-file&quot;指定该文件。&lt;/li&gt;
&lt;li class=&quot;a&quot;&gt;或者使用&quot;--databases&quot;指定要备份的数据库或表，指定备份的表时要使用完整对象引用格式，多个元素使用空格分开。&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;01&quot;&gt;使用前两种部分备份方式，只能备份innodb表，不会备份任何myisam，即使指定了也不会备份。而且要备份的表必须有独立的表空间文件，也就是说必须开启了innodb_file_per_table，更精确的说，要备份的表是在开启了innodb_file_per_table选项之后才创建的。第三种备份方式可以备份myisam表。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;例如 &lt;span class=&quot;cnblogs_code&quot;&gt;--include=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^back.*[.]num_*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt; ，将备份back字母开头的数据库中num开头的表，其中&quot;[.]&quot;的中括号不能少，因为正则中&quot;.&quot;有特殊意义，所以使用中括号来枚举以实现对象的完整引用。&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
innobackupex --user=root --password=&lt;span&gt;123456&lt;/span&gt; --include=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^back*[.]num_*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; /bakdir/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;使用&quot;--include&quot;和&quot;--tables-file&quot;备份后，会生成一个时间戳目录，目录中只有和要备份的表有关的文件。&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@xuexi data]# &lt;span&gt;ls&lt;/span&gt; /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_17-&lt;span&gt;35&lt;/span&gt;-&lt;span&gt;46&lt;/span&gt;/&lt;span&gt;
backup&lt;/span&gt;-my.cnf  ibdata1  xtrabackup_binlog_info  xtrabackup_checkpoints  xtrabackup_info  xtrabackup_logfile
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;如果使用的是--databases选项，则会生成一个时间戳目录，里面有备份的数据库代表的目录，如果只备份了某个表，则该数据库目录中只有该表相关的文件。&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
innobackupex --user=root --password=&lt;span&gt;123456&lt;/span&gt; --databases=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql.user backuptest&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; /bakdir/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;上面只备份mysql.user表和backuptest数据库，在生成的时间戳目录中将有两个mysql目录和backuptest目录。&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@xuexi data]# &lt;span&gt;ls&lt;/span&gt; /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_17-&lt;span&gt;41&lt;/span&gt;-&lt;span&gt;38&lt;/span&gt;/&lt;span&gt;
backup&lt;/span&gt;-&lt;span&gt;my.cnf  backuptest  ibdata1  mysql  xtrabackup_binlog_info  xtrabackup_checkpoints  xtrabackup_info  xtrabackup_logfile

[root@xuexi data]# &lt;/span&gt;&lt;span&gt;ls&lt;/span&gt; /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_17-&lt;span&gt;41&lt;/span&gt;-&lt;span&gt;38&lt;/span&gt;/backuptest/&lt;span&gt;
db.opt  num_innodb.frm  num_innodb.ibd  num_isam.frm  num_isam.MYD  num_isam.MYI

[root@xuexi data]# &lt;/span&gt;&lt;span&gt;ls&lt;/span&gt; /bakdir/&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-02_17-&lt;span&gt;41&lt;/span&gt;-&lt;span&gt;38&lt;/span&gt;/mysql/&lt;span&gt;
user.frm  user.MYD  user.MYI&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;1&quot;&gt;&lt;strong&gt;(2). 部分备份的准备和恢复过程&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;部分备份的准备和恢复过程分别是导出表和导入表的过程。见上文。 &lt;/p&gt;

&lt;h2&gt;5.5 innobackupex实现定时点恢复&lt;/h2&gt;
&lt;p class=&quot;01&quot;&gt;xtrabackup本身无法实现定时点恢复，只能通过恢复备份后通过二进制日志实现。实现方法和一般定时点恢复是一样的。见：&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9001061.html#blog5.6&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;二进制日志定点还原数据库&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;。&lt;/p&gt;

&lt;h2&gt;5.6 流备份和远程备份&lt;/h2&gt;
&lt;p class=&quot;01&quot;&gt;xtrabackup支持备份流，当前可用的流类型只有tar和xtrabackup自带的xbstream，通过流可以将它们传递给其他程序进行相关的操作，如压缩。但是不建议在备份的同时进行压缩，因为压缩会占用极大的cpu资源，使得备份时间延长很多，温备的过程也就延长了。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;另外，MySQL的数据文件压缩比非常大，所以建议备份后在空闲的时候进行压缩。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;xtrabackup还支持远程备份，只需使用&quot;--remote-host&quot;指定远程的主机名即可，指定方式和ssh指定的方式一样。如--remote-host=root@192.168.100.18。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;使用流备份的方法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 使用tar流
innobackupex &lt;/span&gt;--user=root --password=&lt;span&gt;123456&lt;/span&gt; --stream=&lt;span&gt;tar&lt;/span&gt; /bakdir/ &amp;gt;/tmp/a.&lt;span&gt;tar&lt;/span&gt;&lt;span&gt;
# 使用tar流的同时交给gzip压缩
innobackupex &lt;/span&gt;--user=root --password=&lt;span&gt;123456&lt;/span&gt; --stream=&lt;span&gt;tar&lt;/span&gt; /bakdir/ | &lt;span&gt;gzip&lt;/span&gt; &amp;gt;/tmp/a.&lt;span&gt;tar&lt;/span&gt;&lt;span&gt;.gz
# 使用tar流备份到远程主机中并归档
innobackupex &lt;/span&gt;--user=root --password=&lt;span&gt;123456&lt;/span&gt; --stream=&lt;span&gt;tar&lt;/span&gt; /bakdir/ | &lt;span&gt;ssh&lt;/span&gt; root@&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;100.10&lt;/span&gt;  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cat -  &amp;gt; /tmp/`date +%F_%H-%M-%S`.tar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
# 使用tar流备份到原远程主机中并解包
innobackupex &lt;/span&gt;--user=root --password=&lt;span&gt;123456&lt;/span&gt; --stream=&lt;span&gt;tar&lt;/span&gt; /bakdir/ | &lt;span&gt;ssh&lt;/span&gt; root@&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;100.10&lt;/span&gt;  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cat -  | tar -x -C /tmp/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

# 使用xtrabackup自带的xbstream流
innobackupex &lt;/span&gt;--user=root --password=&lt;span&gt;123456&lt;/span&gt; --stream=xbstream /bakdir/ &amp;gt;/tmp/&lt;span&gt;b.xbs
# 解压xbstream流
innobackupex &lt;/span&gt;--user=root --password=&lt;span&gt;123456&lt;/span&gt; --stream=xbstream /bakdir/ | &lt;span&gt;ssh&lt;/span&gt; root@&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;100.10&lt;/span&gt;  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cat -  | xbstream -x -C /tmp/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
# 使用xbstream流的同时进行压缩，使用&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--compress&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;选项
innobackupex &lt;/span&gt;--user=root --password=&lt;span&gt;123456&lt;/span&gt; --stream=xbstream --compress /bakdir/ &amp;gt; /bakdir/backup.xbs
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;注意，如果在解压备份的.tar.gz时出错，可能在解压的时候需要使用-i选项。如tar -xif /tmp/b.tar/gz。&lt;/p&gt;

&lt;h2&gt;5.7 加速备份&lt;/h2&gt;
&lt;p class=&quot;01&quot;&gt;当备份到本地的时候，可以使用&quot;--rsync&quot;选项，该选项用于在flush tables with read lock后调用rsync替代cp进程复制非Innodb数据和.frm文件，加快复制速度。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;但要注意，因为支持备份锁的版本在获取到backup locks的时候会自动复制非Innodb数据和.frm文件，所以&quot;--rsync&quot;选项是无效的。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;另外，该选项不能和&quot;--stream&quot;选项和&quot;--remote-host&quot;选项同时使用。 &lt;/p&gt;


&lt;p class=&quot;01&quot;&gt;xtrabackup工具是C语言编写的工具，在innobackupex使用C重写之后，innobackupex是该工具的一个软链接。但是它不能实现innobackupex的所有功能，例如xtrabackup工具没有恢复功能，而innobackupex有&quot;--copy-back&quot;选项来恢复。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;xtrabackup工具有两种常用运行模式：&quot;--backup&quot;和&quot;--prepare&quot;。还有两个比较少用的模式：&quot;--stats&quot;和&quot;--print-param&quot;。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;由于前文对innobackupex的介绍非常详细，xtrabackup在功能实现上和它是一样的。所以下面将简单介绍。&lt;/p&gt;

&lt;h2&gt;6.1 xtrabackup实现全备 &lt;/h2&gt;
&lt;p class=&quot;a&quot;&gt;&lt;strong&gt;(1).备份过程&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;和innobackupex备份过程不同的是，xtrabackup的备份路径是由&quot;--target-dir&quot;选项严格指定的，如果指定的目录不存在，它备份的时候不会在target-dir目录中再创建时间戳子目录。&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@xuexi data]# xtrabackup --backup --user=root --password=&lt;span&gt;123456&lt;/span&gt; --datadir=/mydata/data --target-&lt;span&gt;dir&lt;/span&gt;=/bakdir/&lt;span&gt;fullback

[root@xuexi data]# &lt;/span&gt;&lt;span&gt;ls&lt;/span&gt; /bakdir/&lt;span&gt;fullback
backup&lt;/span&gt;-&lt;span&gt;my.cnf  ibdata1  Performance         secure_dir  xtrabackup_binlog_info  xtrabackup_info
backuptest     mysql    performance_schema  world       xtrabackup_checkpoints  xtrabackup_logfile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;a&quot;&gt;&lt;strong&gt;(2).准备过程&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
xtrabackup --prepare --target-&lt;span&gt;dir&lt;/span&gt;=/bakdir/fullback
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;a&quot;&gt;&lt;strong&gt;(3).恢复过程&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;xtrabackup自身不能恢复，只能通过拷贝备份集的方式来恢复。例如使用rsync或者cp等。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;另外，恢复时也一样要求MySQL是stop状态，datadir是空目录。并且拷贝完成后要修改datadir中文件的所有者和属组为mysql用户和组。&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;service mysqld stop
&lt;/span&gt;&lt;span&gt;rm&lt;/span&gt; -rf /mydata/data&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
rsync -azP /bakdir/fullback/* /mydata/data
chown -R mysql.mysql /mydata/data/*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;6.2 xtrabackup实现增备&lt;/h2&gt;
&lt;p class=&quot;01&quot;&gt;&lt;strong&gt;(1).&lt;/strong&gt;&lt;strong&gt;首先进行全备&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
xtrabackup --backup --user=root --password=&lt;span&gt;123456&lt;/span&gt; --datadir=/mydata/data --target-&lt;span&gt;dir&lt;/span&gt;=/bakdir/base_full
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;&lt;strong&gt;(2).&lt;/strong&gt;&lt;strong&gt;进行第一次增备&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
xtrabackup --backup --user=root --password=&lt;span&gt;123456&lt;/span&gt; --target-&lt;span&gt;dir&lt;/span&gt;=/bakdir/incr_bak1 --incremental-basedir=/bakdir/base_full --datadir=/mydata/data/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;同样也可以在增备时使用&quot;--incremental-lsn&quot;来指定从哪个lsn开始增量备份，这和innobackupex是一样的。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;&lt;strong&gt;(3).&lt;/strong&gt;&lt;strong&gt;进行第二次增备&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
xtrabackup --backup --user=root --password=&lt;span&gt;123456&lt;/span&gt; --target-&lt;span&gt;dir&lt;/span&gt;=/bakdir/incr_bak2 --incremental-basedir=/bakdir/incr_bak1 --datadir=/mydata/data/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;&lt;strong&gt;(4).&lt;/strong&gt;&lt;strong&gt;准备过程&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;准备过程和innobackupex是一样的，使用&quot;--apply-log-only&quot;来直线向前地应用redo log，同样，在最后一个增备集的准备过程中不能使用&quot;--apply-log-only&quot;选项。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
xtrabackup --prepare --apply-log-only --target-&lt;span&gt;dir&lt;/span&gt;=/bakdir/&lt;span&gt;base_full
xtrabackup &lt;/span&gt;--prepare --apply-log-only --target-&lt;span&gt;dir&lt;/span&gt;=/bakdir/base_full --incremental-&lt;span&gt;dir&lt;/span&gt;=/bakdir/&lt;span&gt;incr_bak1
xtrabackup &lt;/span&gt;--prepare --target-&lt;span&gt;dir&lt;/span&gt;=/bakdir/base_full --incremental-&lt;span&gt;dir&lt;/span&gt;=/bakdir/incr_bak2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;01&quot;&gt;&lt;strong&gt;(5).&lt;/strong&gt;&lt;strong&gt;恢复阶段&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;恢复阶段即拷贝阶段，和前面全备的恢复阶段是一样的，要求MySQL停止运行，datadir是空目录，拷贝全备目录到datadir，修改datadir的所有者和属组。&lt;/p&gt;

&lt;h2&gt;6.3 xtrabackup实现部分备份&lt;/h2&gt;
&lt;p class=&quot;01&quot;&gt;xtrabackup部分备份和innobackupex不太一样，innobackupex的部分备份实质上是在已经备份好的备份集上导出导入表，而xtrabackup直接在备份过程中筛选要备份的目标，它不建立在已有的备份集上。&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;&lt;strong&gt;(1).&lt;/strong&gt;&lt;strong&gt;备份过程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li class=&quot;a&quot;&gt;xtrabackup使用&quot;--tables&quot;选项对应innobackupex的&quot;--include&quot;选项，它们是一样的，都是正则匹配完整对象引用名称。&lt;/li&gt;
&lt;li class=&quot;a&quot;&gt;使用&quot;--tables-file&quot;选项指定枚举要备份表的列表，每行一个表，表名需要使用完整对象引用名称。和innobackupex一样的。&lt;/li&gt;
&lt;li class=&quot;a&quot;&gt;使用&quot;--databases&quot;和&quot;--databases-file&quot;指定要单独备份的数据库或表，后者可以枚举出要备份的列表。这两个选项不能使用通配符和正则匹配。&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;01&quot;&gt;例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
xtrabackup --backup --user=root --password=&lt;span&gt;123456&lt;/span&gt; --target-&lt;span&gt;dir&lt;/span&gt;=/bakdir/part_bak1 --datadir=/mydata/data/ --tables=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^back*[.]num_*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;022&quot;&gt;&lt;strong&gt;(2).&lt;/strong&gt;&lt;strong&gt;准备过程&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;01&quot;&gt;xtrabackup的部分备份的准备要比innobackupex方便的多，直接对备份集进行&quot;--prepare&quot;即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
xtrabackup --prepare --target-&lt;span&gt;dir&lt;/span&gt;=/bakdir/part_bak1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7048359.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到Linux系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7048359.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7576137.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到网站架构系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7576137.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7586194.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到数据库系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7586194.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/9018716.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;转载请注明出处：http://www.cnblogs.com/f-ck-need-u/p/9018716.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;注：若您觉得这篇文章还不错请点击右下角推荐，您的支持能激发作者更大的写作热情，非常感谢！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 10 May 2018 03:22:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/9018716.html</dc:identifier>
</item>
<item>
<title>【python进阶】深入理解系统进程2 - Angel_Kitty</title>
<link>http://www.cnblogs.com/ECJTUACM-873284962/p/9018650.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ECJTUACM-873284962/p/9018650.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;在上一篇&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/ECJTUACM-873284962/p/9014716.html&quot;&gt;【python进阶】深入理解系统进程1&lt;/a&gt;中，我们讲述了多任务的一些概念，多进程的创建，fork等一些问题，这一节我们继续接着讲述系统进程的一些方法及注意点&lt;/p&gt;
&lt;h2&gt;multiprocessing&lt;/h2&gt;
&lt;p&gt;如果你打算编写多进程的服务程序，Unix/Linux⽆疑是正确的选择。由于 Windows没有fork调⽤，难道在Windows上⽆法⽤Python编写多进程的程 序？&lt;br/&gt;由于Python是跨平台的，⾃然也应该提供⼀个跨平台的多进程⽀持。 multiprocessing模块就是跨平台版本的多进程模块。&lt;br/&gt;multiprocessing模块提供了⼀个Process类来代表⼀个进程对象，下⾯的例⼦ 演示了启动⼀个⼦进程并等待其结束：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 子进程要执行的代码&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; run_proc(name):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;子进程运行中，name= %s ,pid=%d...&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (name, os.getpid()))

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt;==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;父进程 %d.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; os.getpid())
    p &lt;/span&gt;= Process(target=run_proc, args=(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,))
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;子进程将要执行&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    p.start()
    p.join()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;子进程已结束&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201805/1100338-20180510104514757-1608843286.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start()方法启动，这样创建进程比fork()还要简单。&lt;/li&gt;
&lt;li&gt;join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;process语法结构如下：&quot;&gt;Process语法结构如下：&lt;/h3&gt;
&lt;p&gt;Process([group [, target [, name [, args [, kwargs]]]]])&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;target：表示这个进程实例所调用对象；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;args：表示调用对象的位置参数元组；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;kwargs：表示调用对象的关键字参数字典；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;name：为当前进程实例的别名；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;group：大多数情况下用不到；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Process类常用方法：&lt;/p&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;is_alive()：判断进程实例是否还在执行；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;join([timeout])：是否等待进程实例执行结束，或等待多少秒；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;start()：启动进程实例（创建子进程）；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;run()：如果没有给定target参数，对这个对象调用start()方法时，就将执行对象中的run()方法；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;terminate()：不管任务是否完成，立即终止；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Process类常用属性：&lt;/p&gt;
&lt;p id=&quot;实例1&quot;&gt;&lt;strong&gt;实例1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; time &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sleep

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 子进程要执行的代码&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt; run_proc(name, age, **&lt;span&gt;kwargs):
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10&lt;span&gt;):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;子进程运行中，name= %s,age=%d ,pid=%d...&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (name, age,os.getpid()))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(kwargs)
        sleep(&lt;/span&gt;0.5&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt;==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;父进程 %d.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; os.getpid())
    p &lt;/span&gt;= Process(target=run_proc, args=(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,18), kwargs={&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:20&lt;span&gt;})
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;子进程将要执行&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    p.start()
    sleep(&lt;/span&gt;1&lt;span&gt;)
    p.terminate()
    p.join()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;子进程已结束&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201805/1100338-20180510105101017-173549026.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p id=&quot;实例2&quot;&gt;&lt;strong&gt;实例2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;两个子进程将会调用的两个方法&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt;  worker_1(interval):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;worker_1,父进程(%s),当前进程(%s)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(os.getppid(),os.getpid()))
    t_start &lt;/span&gt;=&lt;span&gt; time.time()
    time.sleep(interval) &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;程序将会被挂起interval秒&lt;/span&gt;
    t_end =&lt;span&gt; time.time()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;worker_1,执行时间为'%0.2f'秒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%(t_end -&lt;span&gt; t_start))

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt;  worker_2(interval):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;worker_2,父进程(%s),当前进程(%s)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(os.getppid(),os.getpid()))
    t_start &lt;/span&gt;=&lt;span&gt; time.time()
    time.sleep(interval)
    t_end &lt;/span&gt;=&lt;span&gt; time.time()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;worker_2,执行时间为'%0.2f'秒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%(t_end -&lt;span&gt; t_start))

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出当前程序的ID&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;进程ID：%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;os.getpid())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建两个进程对象，target指向这个进程对象要执行的对象名称，&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;args后面的元组中，是要传递给worker_1方法的参数，&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;因为worker_1方法就一个interval参数，这里传递一个整数2给它，&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;如果不指定name参数，默认的进程对象名称为Process-N，N为一个递增的整数&lt;/span&gt;
p1=Process(target=worker_1,args=(2&lt;span&gt;,))
p2&lt;/span&gt;=Process(target=worker_2,name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dongGe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,args=(1&lt;span&gt;,))

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用&quot;进程对象名称.start()&quot;来创建并执行一个子进程，&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;这两个进程对象在start后，就会分别去执行worker_1和worker_2方法中的内容&lt;/span&gt;
&lt;span&gt;p1.start()
p2.start()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;同时父进程仍然往下执行，如果p2进程还在执行，将会返回True&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;p2.is_alive=%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;p2.is_alive())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出p1和p2进程的别名和pid&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;p1.name=%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;p1.name)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;p1.pid=%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;p1.pid)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;p2.name=%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;p2.name)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;p2.pid=%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;p2.pid)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;join括号中不携带参数，表示父进程在这个位置要等待p1进程执行完成后，&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;再继续执行下面的语句，一般用于进程间的数据同步，如果不写这一句，&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;下面的is_alive判断将会是True，在shell（cmd）里面调用这个程序时&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;可以完整的看到这个过程，大家可以尝试着将下面的这条语句改成p1.join(1)，&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;因为p2需要2秒以上才可能执行完成，父进程等待1秒很可能不能让p1完全执行完成，&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;所以下面的print会输出True，即p1仍然在执行&lt;/span&gt;
&lt;span&gt;p1.join()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;p1.is_alive=%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%p1.is_alive())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201805/1100338-20180510105650915-423017209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;进程的创建process子类&quot;&gt;进程的创建-Process子类&lt;/h2&gt;
&lt;p&gt;创建新的进程还能够使用类的方式，可以自定义一个类，继承Process类，每次实例化这个类的时候，就等同于实例化一个进程对象，请看下面的实例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;继承Process类&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Process_Class(Process):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;因为Process类本身也有__init__方法，这个子类相当于重写了这个方法，&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;但这样就会带来一个问题，我们并没有完全的初始化一个Process类，所以就不能使用从这个类继承的一些方法和属性，&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;最好的方法就是将继承类本身传递给Process.__init__方法，完成这些初始化操作&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,interval):
        Process.&lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self)
        self.interval &lt;/span&gt;=&lt;span&gt; interval

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;重写了Process类的run()方法&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;子进程(%s) 开始执行，父进程为（%s）&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(os.getpid(),os.getppid()))
        t_start &lt;/span&gt;=&lt;span&gt; time.time()
        time.sleep(self.interval)
        t_stop &lt;/span&gt;=&lt;span&gt; time.time()
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(%s)执行结束，耗时%0.2f秒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%(os.getpid(),t_stop-&lt;span&gt;t_start))

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt;==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
    t_start &lt;/span&gt;=&lt;span&gt; time.time()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;当前程序进程(%s)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;os.getpid())        
    p1 &lt;/span&gt;= Process_Class(2&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;对一个不包含target属性的Process类执行start()方法，就会运行这个类中的run()方法，所以这里会执行p1.run()&lt;/span&gt;
&lt;span&gt;    p1.start()
    p1.join()
    t_stop &lt;/span&gt;=&lt;span&gt; time.time()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(%s)执行结束，耗时%0.2f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%(os.getpid(),t_stop-t_start))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201805/1100338-20180510110134205-1571278506.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;进程池pool&quot;&gt;进程池Pool&lt;/h2&gt;
&lt;p&gt;当需要创建的子进程数量不多时，可以直接利用multiprocessing中的Process动态成生多个进程，但如果是上百甚至上千个目标，手动的去创建进程的工作量巨大，此时就可以用到multiprocessing模块提供的Pool方法。&lt;/p&gt;
&lt;p&gt;初始化Pool时，可以指定一个最大进程数，当有新的请求提交到Pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到指定的最大值，那么该请求就会等待，直到池中有进程结束，才会创建新的进程来执行，请看下面的实例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Pool
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os,time,random

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; worker(msg):
    t_start &lt;/span&gt;=&lt;span&gt; time.time()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s开始执行,进程号为%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(msg,os.getpid()))
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;random.random()随机生成0~1之间的浮点数&lt;/span&gt;
    time.sleep(random.random()*2&lt;span&gt;) 
    t_stop &lt;/span&gt;=&lt;span&gt; time.time()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(msg,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;执行完毕，耗时%0.2f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%(t_stop-&lt;span&gt;t_start))

po&lt;/span&gt;=Pool(3) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义一个进程池，最大进程数3&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(0,10&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;Pool.apply_async(要调用的目标,(传递给目标的参数元祖,))&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;每次循环将会用空闲出来的子进程去调用目标&lt;/span&gt;
&lt;span&gt;    po.apply_async(worker,(i,))

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;----start----&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
po.close() &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;关闭进程池，关闭后po不再接收新的请求&lt;/span&gt;
po.join() &lt;span&gt;#&lt;/span&gt;&lt;span&gt;等待po中所有子进程执行完成，必须放在close语句之后&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-----end-----&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201805/1100338-20180510110352565-45978554.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;multiprocessing.Pool常用函数解析：&lt;/p&gt;
&lt;ul readability=&quot;5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;apply_async(func[, args[, kwds]]) ：使用非阻塞方式调用func（并行执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数列表；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;apply(func[, args[, kwds]])：使用阻塞方式调用func&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;close()：关闭Pool，使其不再接受新的任务；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;terminate()：不管任务是否完成，立即终止；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;join()：主进程阻塞，等待子进程的退出， 必须在close或terminate之后使用；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;apply堵塞式&quot;&gt;apply堵塞式&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Pool
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os,time,random

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; worker(msg):
    t_start &lt;/span&gt;=&lt;span&gt; time.time()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s开始执行,进程号为%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(msg,os.getpid()))
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;random.random()随机生成0~1之间的浮点数&lt;/span&gt;
    time.sleep(random.random()*2&lt;span&gt;) 
    t_stop &lt;/span&gt;=&lt;span&gt; time.time()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(msg,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;执行完毕，耗时%0.2f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%(t_stop-&lt;span&gt;t_start))

po&lt;/span&gt;=Pool(3) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义一个进程池，最大进程数3&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(0,10&lt;span&gt;):
    po.apply(worker,(i,))

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;----start----&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
po.close() &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;关闭进程池，关闭后po不再接收新的请求&lt;/span&gt;
po.join() &lt;span&gt;#&lt;/span&gt;&lt;span&gt;等待po中所有子进程执行完成，必须放在close语句之后&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-----end-----&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201805/1100338-20180510110528317-395478916.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;进程间通信queue&quot;&gt;进程间通信-Queue&lt;/h2&gt;
&lt;p&gt;Process之间有时需要通信，操作系统提供了很多机制来实现进程间的通信。&lt;/p&gt;
&lt;h3 id=&quot;1-queue的使用&quot;&gt;1. Queue的使用&lt;/h3&gt;
&lt;p&gt;可以使用multiprocessing模块的Queue实现多进程之间的数据传递，Queue本身是一个消息列队程序，首先用一个小实例来演示一下Queue的工作原理：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Queue
q&lt;/span&gt;=Queue(3) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;初始化一个Queue对象，最多可接收三条put消息&lt;/span&gt;
q.put(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;消息1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) 
q.put(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;消息2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(q.full())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;False&lt;/span&gt;
q.put(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;消息3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(q.full()) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;因为消息列队已满下面的try都会抛出异常，第一个try会等待2秒后再抛出异常，第二个Try会立刻抛出异常&lt;/span&gt;
&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
    q.put(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;消息4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,True,2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;消息列队已满，现有消息数量:%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;q.qsize())

&lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
    q.put_nowait(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;消息4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;消息列队已满，现有消息数量:%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;q.qsize())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;推荐的方式，先判断消息列队是否已满，再写入&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; q.full():
    q.put_nowait(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;消息4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;读取消息时，先判断消息列队是否为空，再读取&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; q.empty():
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(q.qsize()):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(q.get_nowait())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201805/1100338-20180510110651219-1701300274.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;说明&quot;&gt;说明&lt;/h4&gt;
&lt;p&gt;初始化Queue()对象时（例如：q=Queue()），若括号中没有指定最大可接收的消息数量，或数量为负值，那么就代表可接受的消息数量没有上限（直到内存的尽头）；&lt;/p&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Queue.qsize()：返回当前队列包含的消息数量；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Queue.empty()：如果队列为空，返回True，反之False ；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Queue.full()：如果队列满了，返回True,反之False；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Queue.get([block[, timeout]])：获取队列中的一条消息，然后将其从列队中移除，block默认值为True；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;1）如果block使用默认值，且没有设置timeout（单位秒），消息列队如果为空，此时程序将被阻塞（停在读取状态），直到从消息列队读到消息为止，如果设置了timeout，则会等待timeout秒，若还没读取到任何消息，则抛出&quot;Queue.Empty&quot;异常；&lt;/p&gt;
&lt;p&gt;2）如果block值为False，消息列队如果为空，则会立刻抛出&quot;Queue.Empty&quot;异常；&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Queue.get_nowait()：相当Queue.get(False)；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Queue.put(item,[block[, timeout]])：将item消息写入队列，block默认值为True；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;1）如果block使用默认值，且没有设置timeout（单位秒），消息列队如果已经没有空间可写入，此时程序将被阻塞（停在写入状态），直到从消息列队腾出空间为止，如果设置了timeout，则会等待timeout秒，若还没空间，则抛出&quot;Queue.Full&quot;异常；&lt;/p&gt;
&lt;p&gt;2）如果block值为False，消息列队如果没有空间可写入，则会立刻抛出&quot;Queue.Full&quot;异常；&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Queue.put_nowait(item)：相当Queue.put(item, False)；&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;2-queue实例&quot;&gt;2. Queue实例&lt;/h3&gt;
&lt;p&gt;我们以Queue为例，在父进程中创建两个子进程，一个往Queue里写数据，一个从Queue里读数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process, Queue
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os, time, random

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 写数据进程执行的代码:&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; write(q):
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; value &lt;span&gt;in&lt;/span&gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Put %s to queue...&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; value)
        q.put(value)
        time.sleep(random.random())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读数据进程执行的代码:&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; read(q):
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; q.empty():
            value &lt;/span&gt;=&lt;span&gt; q.get(True)
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Get %s from queue.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; value)
            time.sleep(random.random())
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt;==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 父进程创建Queue，并传给各个子进程：&lt;/span&gt;
    q =&lt;span&gt; Queue()
    pw &lt;/span&gt;= Process(target=write, args=&lt;span&gt;(q,))
    pr &lt;/span&gt;= Process(target=read, args=&lt;span&gt;(q,))
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 启动子进程pw，写入:&lt;/span&gt;
&lt;span&gt;    pw.start()    
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 等待pw结束:&lt;/span&gt;
&lt;span&gt;    pw.join()
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 启动子进程pr，读取:&lt;/span&gt;
&lt;span&gt;    pr.start()
    pr.join()
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; pr进程里是死循环，无法等待其结束，只能强行终止:&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;所有数据都写入并且读完&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201805/1100338-20180510110931138-212105968.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-进程池中的queue&quot;&gt;3. 进程池中的Queue&lt;/h3&gt;
&lt;p&gt;如果要使用Pool创建进程，就需要使用multiprocessing.Manager()中的Queue()，而不是multiprocessing.Queue()，否则会得到一条如下的错误信息：&lt;/p&gt;
&lt;p&gt;RuntimeError: Queue objects should only be shared between processes through inheritance.&lt;/p&gt;
&lt;p&gt;下面的实例演示了进程池中的进程如何通信：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;修改import中的Queue为Manager&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Manager,Pool
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os,time,random

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; reader(q):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;reader启动(%s),父进程为(%s)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(os.getpid(),os.getppid()))
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(q.qsize()):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;reader从Queue获取到消息：%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;q.get(True))

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; writer(q):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;writer启动(%s),父进程为(%s)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(os.getpid(),os.getppid()))
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dongGe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
        q.put(i)

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt;==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(%s) start&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;os.getpid())
    q&lt;/span&gt;=Manager().Queue() &lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用Manager中的Queue来初始化&lt;/span&gt;
    po=&lt;span&gt;Pool()
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用阻塞模式创建进程，这样就不需要在reader中使用死循环了，可以让writer完全执行完成后，再用reader去读取&lt;/span&gt;
&lt;span&gt;    po.apply(writer,(q,))
    po.apply(reader,(q,))
    po.close()
    po.join()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(%s) End&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%os.getpid())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201805/1100338-20180510111117806-110217532.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 10 May 2018 03:13:00 +0000</pubDate>
<dc:creator>Angel_Kitty</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ECJTUACM-873284962/p/9018650.html</dc:identifier>
</item>
<item>
<title>Linux 系统化学习系列文章总目录（持续更新中） - 阿龙along</title>
<link>http://www.cnblogs.com/along21/p/9006829.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/along21/p/9006829.html</guid>
<description>&lt;pre&gt;
我将尽量写出整个体系的内容，初学的朋友可以视之为学习资料，如同看书一样。虽然网上培训视频比较好入门，大方向上的知识点也还算完整，我个人也是这么入门的(基本上看完了某哥和某孩共两整期的视频课程)，但看完后入门了，在回炉深造的时候，却发现这些视频课程真的缺少很多内容，甚至说，看完视频会遗漏很多非常重要的知识点，但可能自己根本就不知道遗漏了(就像学习了1+&lt;span&gt;1和1×1等知识，却不知道它们是算数运算)，这就容易造成知识点不衔接、知识体系到处是漏洞的问题(我刚看完视频连bash中文手册都看不懂，不是它有多难，而是因为知识点散乱不衔接)。我在写作的时候，尽量让整个知识体系完整，如果阅读过程中发现了不知道的知识点、术语或名词，在前面的文章中一定能翻到。对单篇文章而言，为了让文章看上去更流畅更完整，即使是很多细节或偏僻知识点也花了大量时间去描述。除了本页第一篇文章(因为太基础)和服务类文章，其余绝大多数文章都可以从入门到深入掌握。

总之，我希望能帮助初学者，让这些朋友能获取到尽量完整的知识以及尽量多的原理，以补充看视频而导致的知识点缺失。同时，我也希望能对那些毫无基础的朋友产生一些鼓励，因为我也是非科班出身，也是毫无计算机基础(很长一段时间都不知道什么叫做服务)，也很愚笨(即使学了服务，很长一段时间还是不知道为什么称之为服务)，但只要坚持三点就够了：坚持学习、坚持记笔记、坚持动手测试。

本人是重度强迫症患者(死脑筋)，喜欢研究所谓的实现机制和原理，发现涉及到实现机制的时候，或出现疑惑的地方，总要想办法让自己脑袋通畅(但太浪费时间，也不值得。曾记得研究xargs时，翻遍网上都只有最基本用法，一狠心自己摸索测试，整整花了一个多星期，到最后才发现能用到xargs的地方也都只用它最基本的功能，真是极度心塞)。因此在很多文章中，加入了我自己的理解和推理，也许各位会发现一些技巧，或解开曾经的疑惑，或发现新大陆。若各位看了之后能忍不住说一声&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我靠，原来如此&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;，对我个人肯定是一个绝大的鼓励和肯定。还请帮忙点击下&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;点赞&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;，各位的支持，能激发和鼓励更大的写作热情。在此先行谢过！
&lt;/pre&gt;</description>
<pubDate>Thu, 10 May 2018 02:57:00 +0000</pubDate>
<dc:creator>阿龙along</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/along21/p/9006829.html</dc:identifier>
</item>
<item>
<title>前端开发浏览器兼容问题 - 阿龙丶along</title>
<link>http://www.cnblogs.com/alongup/p/9018396.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/alongup/p/9018396.html</guid>
<description>&lt;p&gt;嘿，大家好~ 既然点击来了，不妨就继续看下去把~    作者：along&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;csshack&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
我很少使用hacker的，可能是个人习惯吧，我不喜欢写的代码IE不兼容，然后用hack来解决。不过hacker还是非常好用的。使用hacker我可以把浏览器分为3类：IE6 ；IE7和遨游；其他（IE8 chrome&lt;br/&gt;ff safari opera等）
◆IE6认识的hacker 是下划线_ 和星号 *
◆IE7 遨游认识的hacker是星号 *
比如这样一个CSS设置：
1.height:300px;*height:200px;_height:100px; 
IE6浏览器在读到height:300px的时候会认为高时300px；继续往下读，他也认识*heihgt， 所以当IE6读到*height:200px的时候会覆盖掉前一条的相冲突设置，认为高度是200px。继续往下读，IE6&lt;br/&gt;还认识_height,所以他又会覆盖掉200px高&lt;br/&gt;的设置，把高度设置为100px；
IE7和遨游也是一样的从高度300px的设置往下读。当它们读到*height200px的时候就停下了，因为它们不认识_height。所以它们会把高度解析为200px，剩下的浏览器只认识第一个height:300px;所&lt;br/&gt;以他们会把高度解析为300px。因为优先级相&lt;br/&gt;同且想冲突的属性设置后一个会覆盖掉前一个，所以书写的次序是很重要的。
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;1.HTML对象获取问题　&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
FireFox：document.getElementById(&quot;idName&quot;);
ie:document.idname或者document.getElementById(&quot;idName&quot;).
解决办法：统一使用document.getElementById(&quot;idName&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. const问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
说明:Firefox下,可以使用const关键字或var关键字来定义常量;
IE下,只能使用var关键字来定义常量. 
解决方法：统一使用var关键字来定义常量.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3. event.x&lt;span&gt;与&lt;/span&gt;&lt;span&gt;event.y&lt;/span&gt;&lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
说明:IE下,event对象有x,y属性,但是没有pageX,pageY属性;
Firefox下,event对象有pageX,pageY属性,但是没有x,y属性. 
解决方法：使用mX(mX   =   event.x   ?   event.x   :   event.pageX;)来代替IE下的event.x或者Firefox下的event.pageX. 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4. window.location.href&lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
说明:IE或者Firefox2.0.x下,可以使用window.location或window.location.href;
Firefox1.5.x下,只能使用window.location. 
解决方法：使用window.location来代替window.location.href.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5. frame&lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
以下面的frame为例：
&amp;lt;frame   src=&quot;xxx.html&quot;   id=&quot;frameId&quot;   name=&quot;frameName&quot;   /&amp;gt;
(1)访问frame对象:
IE:使用window.frameId或者window.frameName来访问这个frame对象.   frameId和frameName可以同名。
Firefox:只能使用window.frameName来访问这个frame对象.
另外，在IE和Firefox中都可以使用window.document.getElementById(&quot;frameId&quot;)来访问这个frame对象.
(2)切换frame内容:
在 IE和Firefox中都可以使用window.document.getElementById(&quot;testFrame&quot;).src   =   &quot;xxx.html&quot;或window.frameName.location   =   &quot;xxx.html&quot;来切换frame的内容.
如果需要将frame中的参数传回父窗口(注意不是opener,而是parent   frame)，可以在frame中使用parent来访问父窗口。例如：parent.document.form1.filename.value=&quot;Aqing&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;6. &lt;span&gt;模态和非模态窗口问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
说明:IE下,可以通过showModalDialog和showModelessDialog打开模态和非模态窗口;Firefox下则不能. 
解决方法：直接使用window.open(pageURL,name,parameters)方式打开新窗口。
如果需要将子窗口中的参数传递回父窗口,可以在子窗口中使用window.opener来访问父窗口. 
例如：var   parWin   =   window.opener;   parWin.document.getElementById(&quot;Aqing&quot;).value   =   &quot;Aqing&quot;; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;7. firefox&lt;span&gt;与&lt;/span&gt;&lt;span&gt;IE&lt;/span&gt;&lt;span&gt;的父元素&lt;/span&gt;&lt;span&gt;(parentElement)&lt;/span&gt;&lt;span&gt;的区别&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
IE：obj.parentElement
firefox：obj.parentNode
解决方法:   因为firefox与IE都支持DOM,因此使用obj.parentNode是不错选择.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;8. document.formName.item(”itemName”) &lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
问题说明：IE下，可以使用document.formName.item(”itemName”) 或document.formName.elements [&quot;elementName&quot;]；Firefox 下，只能使用document.formName.elements[&quot;elementName&quot;]。
解决方法：统一使用document.formName.elements[&quot;elementName&quot;]。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;9. &lt;span&gt;集合类对象问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
问题说明：IE下，可以使用 () 或 [] 获取集合类对象；Firefox下，只能使用 [ ]获取集合类对象。
解决方法：统一使用 [] 获取集合类对象。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;10. &lt;span&gt;自定义属性问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
问题说明：IE下，可以使用获取常规属性的方法来获取自定义属性，也可以使用getAttribute() 获取自定义属性；Firefox下，只能使用getAttribute() 获取自定义属性。
解决方法：统一通过getAttribute() 获取自定义属性。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;11. input.type&lt;span&gt;属性问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
问题说明：IE下input.type属性为只读；但是Firefox下input.type属性为读写。
解决办法：不修改input.type属性。如果必须要修改，可以先隐藏原来的input，然后在同样的位置再插入一个新的input元素。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;12. event.srcElement&lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
问题说明：IE下，even对象有srcElement属性，但是没有target属性；Firefox下，even对象有target属性，但是没有srcElement属性。
解决方法：使用srcObj = event.srcElement ?event.srcElement : event.target;
如果考虑第8条问题，就改用myEvent代替event即可。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;13. body&lt;span&gt;载入问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
问题说明：Firefox的body对象在body标签没有被浏览器完全读入之前就存在；而IE的body对象则必须在body标签被浏览器完全读入之后才存在。
[注] 这个问题尚未实际验证，待验证后再来修改。
[注] 经验证，IE6、Opera9以及FireFox2中不存在上述问题，单纯的JS脚本可以访问在脚本之前已经载入的所有对象和元素，即使这个元素还没有载入完成。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;14. &lt;span&gt;事件委托方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
问题说明：IE下，使用document.body.onload = inject; 其中function inject()在这之前已被实现；在Firefox下，使用document.body.onload = inject();
解决方法：统一使用document.body.onload=new Function(’inject()’); 或者document.body.onload = function(){}
[注意] Function和function的区别。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;15. Table&lt;span&gt;操作问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
问题说明：ie、firefox以及其它浏览器对于 table 标签的操作都各不相同，在ie中不允许对table和tr的innerHTML赋值，使用js增加一个tr时，使用appendChild方法也不管用。
解决方法：//向table追加一个空行：
var row = otable.insertRow(-1);var cell = document.createElement(&quot;td&quot;);cell.innerHTML = &quot;&quot;;cell.className = &quot;XXXX&quot;;row.appendChild(cell);[注] 由于俺很少使用JS直接操作表格，这个问题没有遇见过。建议使用JS框架集来操作table，如JQuery。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;16. &lt;span&gt;对象宽高赋值问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
问题说明：FireFox中类似obj.style.height = imgObj.height的语句无效
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;17. innerText&lt;span&gt;在&lt;/span&gt;&lt;span&gt;IE&lt;/span&gt;&lt;span&gt;中能正常工作，但在&lt;/span&gt;&lt;span&gt;FireFox&lt;/span&gt;&lt;span&gt;中却不行&lt;/span&gt;&lt;span&gt;.   &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
需用textContent。
解决方法:
if(navigator.appName.indexOf(&quot;Explorer&quot;)   &amp;gt;   -1){
        document.getElementById('element').innerText   =   &quot;my   text&quot;;
}   else{
        document.getElementById('element').textContent   =   &quot;my   text&quot;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;18. CSS&lt;span&gt;透明&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
IE：filter:progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=60)。
FF：opacity:0.6。
opacity 透明，子元素会继承透明属性。解决方式：1、使用 background:rgba(0,0,0,.6) //IE8及以下无效果。 2、使用定位，背景色与子元素处于同级关系。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;19. css&lt;span&gt;中的&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;padding&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
在IE7和FF中width宽度不包括padding，在Ie6中包括padding.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;20. FF&lt;span&gt;和&lt;/span&gt;&lt;span&gt;IEBOX&lt;/span&gt;&lt;span&gt;模型解释不一致导致相差&lt;/span&gt;&lt;span&gt;2px&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
box.style{width:100;border 1px;} 
ie理解为box.width = 100 
ff理解为box.width = 100 + 1*2 = 102  //加上边框2px 

解决方法：div{margin:30px!important;margin:28px;}
注意这两个margin的顺序一定不能写反， IE不能识别!important这个属性，但别的浏览器可以识别。所以在IE下其实解释成这样：div{maring:30px;margin:28px}
重复定义的话按照最后一个来执行，所以不可以只写margin:XXpx!important;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;21. IE5 &lt;span&gt;和&lt;/span&gt;&lt;span&gt;IE6&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;BOX&lt;/span&gt;&lt;span&gt;解释不一致&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
IE5下div{width:300px;margin:0 10px 0 10px;}
div 的宽度会被解释为300px-10px(右填充)-10px(左填充)，最终div的宽度为280px，而在IE6和其他浏览器上宽度则是以 300px+10px(右填充)+10px(左填充)=320px来计算的。这时我们可以做如下修改 div{width:300px!important;width :340px;margin:0 10px 0 10px}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;22. ul&lt;span&gt;和&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;列表缩进问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
消除ul、ol等列表的缩进时，样式应写成：list-style:none;margin:0px;padding:0px;
经验证，在IE中，设置margin:0px可以去除列表的上下左右缩进、空白以及列表编号或圆点，设置padding对样式没有影响；在 Firefox 中，设置margin:0px仅仅可以去除上下的空白，设置padding:0px后仅仅可以去掉左右缩进，还必须设置list- style:none才能去除列表编号或圆点。也就是说，在IE中仅仅设置margin:0px即可达到最终效果，而在Firefox中必须同时设置margin:0px、 padding:0px以及list-style:none三项才能达到最终效果。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;23. &lt;span&gt;元素水平居中问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
FF: margin:0 auto;

IE: 父级{ text-align:center; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;24. Div&lt;span&gt;的垂直居中问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
vertical-align:middle; 将行距增加到和整个DIV一样高：line-height:200px; 然后插入文字，就垂直居中了。缺点是要控制内容不要换行。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;25. margin&lt;span&gt;加倍的问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
设置为float的div在ie下设置的margin会加倍。这是一个ie6都存在的bug。解决方案是在这个div里面加上display:inline; 

例如：

&amp;lt;div id=”imfloat”&amp;gt;
相应的css为
#imfloat{ 
float:left; 
margin:5px; 
display:inline;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;26. IE&lt;span&gt;与宽度和高度的问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
IE不认得min-这个定义，但实际上它把正常的width和height当作有min的情况来使。这样问题就大了，如果只用宽度和高度，正常的浏览器里这两个值就不会变，如果只用min-width和min-height的话，IE下面根本等于没有设置宽度和高度。

比如要设置背景图片，这个宽度是比较重要的。要解决这个问题，可以这样：

#box{ width: 80px; height: 35px;}html&amp;gt;body #box{ width: auto; height: auto; min-width: 80px; min-height: 35px;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;27. &lt;span&gt;页面的最小宽度&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
如上一个问题，IE不识别min，要实现最小宽度，可用下面的方法：

#container{ min-width: 600px; width:expression(document.body.clientWidth＜ 600? &quot;600px&quot;: &quot;auto&quot; );} 

第一个min-width是正常的；但第2行的width使用了Javascript，这只有IE才认得，这也会让你的HTML文档不太正规。它实际上通过Javascript的判断来实现最小宽度。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;28. DIV&lt;span&gt;浮动&lt;/span&gt;&lt;span&gt;IE&lt;/span&gt;&lt;span&gt;文本产生&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;象素的&lt;/span&gt;&lt;span&gt;bug&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
左边对象浮动，右边采用外补丁的左边距来定位，右边对象内的文本会离左边有3px的间距. 

#box{ float:left; width:800px;} 
#left{ float:left; width:50%;} 
#right{ width:50%;} 
*html #left{ margin-right:-3px; //这句是关键} 
&amp;lt;div id=&quot;box&quot;&amp;gt;
&amp;lt;div id=&quot;left&quot;&amp;gt;＜/div&amp;gt;
&amp;lt;div id=&quot;right&quot;&amp;gt;＜/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;29. IE&lt;span&gt;捉迷藏的问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
当div应用复杂的时候每个栏中又有一些链接，DIV等这个时候容易发生捉迷藏的问题。

有些内容显示不出来，当鼠标选择这个区域是发现内容确实在页面。

解决办法：对#layout使用line-height属性或者给#layout使用固定高和宽。页面结构尽量简单。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;30. float&lt;span&gt;的&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;闭合&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;清除浮动&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;自适应高度&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;50&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
① 例如：＜div id=”floatA”&amp;gt;＜div id=”floatB”&amp;gt;＜div id=”NOTfloatC”&amp;gt;

这里的NOTfloatC并不希望继续平移，而是希望往下排。(其中floatA、floatB的属性已经设置为float:left;) 

这段代码在IE中毫无问题，问题出在FF。原因是NOTfloatC并非float标签，必须将float标签闭合。在＜div class=”floatB”&amp;gt;＜div class=”NOTfloatC”&amp;gt;之间加上＜div class=”clear”&amp;gt;这个div一定要注意位置，而且必须与两个具有float属性的div同级，之间不能存在嵌套关系，否则会产生异常。并且将clear这种样式定义为为如下即可：.clear{clear:both;}

②作为外部 wrapper 的 div 不要定死高度,为了让高度能自适应，要在wrapper里面加上overflow:hidden; 当包含float的box的时候，高度自适应在IE下无效，这时候应该触发IE的layout私有属性(万恶的IE啊！)用zoom:1;可以做到，这样就达到了兼容。
例如某一个wrapper如下定义：

.colwrapper{overflow:hidden; zoom:1; margin:5px auto;}

③对于排版,我们用得最多的css描述可能就是float:left.有的时候我们需要在n栏的float div后面做一个统一的背景,譬如: 

&amp;lt;div id=”page”&amp;gt;

&amp;lt;div id=”left”&amp;gt;＜/div&amp;gt;
&amp;lt;div id=”center”&amp;gt;＜/div&amp;gt;
&amp;lt;div id=”right”&amp;gt;＜/div&amp;gt;

&amp;lt;/div&amp;gt;

比如我们要将page的背景设置成蓝色,以达到所有三栏的背景颜色是蓝色的目的,但是我们会发现随着left center right的向下拉长,而page居然保存高度不变,问题来了,原因在于page不是float属性,而我们的page由于要居中,不能设置成float,所以我们应该这样解决：

&amp;lt;div id=”page”&amp;gt;

&amp;lt;div id=”bg” style=”float:left;width:100%”&amp;gt;

&amp;lt;div id=”left”&amp;gt;＜/div&amp;gt;
&amp;lt;div id=”center”&amp;gt;＜/div&amp;gt;
&amp;lt;div id=”right”&amp;gt;＜/div&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;

再嵌入一个float left而宽度是100%的DIV解决之。

或者另一种方法：用选择器（：after）在page之后插入一个空标签,并清除浮动

.page:after {  content: &quot;&quot;; display: table; clear: both; }

④万能float 闭合(非常重要!) 

关于 clear float 的原理可参见 [How To Clear Floats Without Structural Markup],将以下代码加入Global CSS 中,给需要闭合的div加上class=&quot;clearfix&quot; 即可,屡试不爽。


.clearfix:after { content:&quot;.&quot;; display:block; height:0; clear:both; visibility:hidden; } 
.clearfix { display:inline-block; } 

.clearfix {display:block;} 



或者这样设置：.hackbox{ display:table; //将对象作为块元素级的表格显示}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;31. &lt;span&gt;高度不适应&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
高度不适应是当内层对象的高度发生变化时外层高度不能自动进行调节，特别是当内层对象使用margin 或padding时。

例：

#box {background-color:#eee; } 
#box p {margin-top: 20px;margin-bottom: 20px; text-align:center; } 
&amp;lt;div id=&quot;box&quot;&amp;gt;
&amp;lt;p&amp;gt;p对象中的内容＜/p&amp;gt;
&amp;lt;/div&amp;gt;

解决技巧：在P对象上下各加2个空的div对象CSS代码{height:0px;overflow:hidden;}或者为DIV加上border属性。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;32. IE6&lt;span&gt;下图片下有空隙产生&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
解决这个BUG的技巧有很多,可以是改变html的排版,或者设置img为display:block或者设置vertical-align属性为vertical-align:top/bottom/middle/text-bottom 都可以解决.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;33. &lt;span&gt;对齐文本与文本输入框&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
加上vertical-align:middle; 

&amp;lt;style type=&quot;text/css&quot;&amp;gt;
&amp;lt;!--
input { 
width:200px; 
height:30px; 
border:1px solid red; 
vertical-align:middle; 
} 
--&amp;gt;
&amp;lt;/style&amp;gt;

经验证，在IE下任一版本都不适用，而ff、opera、safari、chrome均OK！
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;34. LI&lt;span&gt;中内容超过长度后以省略号显示&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
此技巧适用与IE、Opera、safari、chrom浏览器，FF暂不支持。

&amp;lt;style type=&quot;text/css&quot;&amp;gt;
&amp;lt;!--
li { 
width:200px; 
white-space:nowrap; 
text-overflow:ellipsis; 
-o-text-overflow:ellipsis; 
overflow: hidden; 
}

--&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;35. &lt;span&gt;为什么&lt;/span&gt;&lt;span&gt;web&lt;/span&gt;&lt;span&gt;标准中&lt;/span&gt;&lt;span&gt;IE&lt;/span&gt;&lt;span&gt;无法设置滚动条颜色了&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
解决办法是将body换成html 

&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&amp;gt;
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb2312&quot; /&amp;gt;
&amp;lt;style type=&quot;text/css&quot;&amp;gt;
&amp;lt;!-- 
html { 
scrollbar-face-color:#f6f6f6; 
scrollbar-highlight-color:#fff; 
scrollbar-shadow-color:#eeeeee; 
scrollbar-3dlight-color:#eeeeee; 
scrollbar-arrow-color:#000; 
scrollbar-track-color:#fff; 
scrollbar-darkshadow-color:#fff; 
} 
--&amp;gt;
＜/style&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;36. &lt;span&gt;为什么无法定义&lt;/span&gt;&lt;span&gt;1px&lt;/span&gt;&lt;span&gt;左右高度的容器&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
IE6下这个问题是因为默认的行高造成的,解决的技巧也有很多：

例如:overflow:hidden　 zoom:0.08 　 line-height:1px
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;37. &lt;span&gt;链接&lt;/span&gt;&lt;span&gt;(a&lt;/span&gt;&lt;span&gt;标签&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;的边框与背景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
a链接加边框和背景色，需设置 display: block, 同时设置 float: left 保证不换行。参照menubar, 给 a 和menubar设置高度是为了避免底边显示错位, 若不设 height, 可以在menubar中插入一个空格。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;38. &lt;span&gt;超链接访问过后&lt;/span&gt;&lt;span&gt;hover&lt;/span&gt;&lt;span&gt;样式就不出现的问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
被点击访问过的超链接样式不在具有hover和active了,很多人应该都遇到过这个问题,解决技巧是改变CSS属性的排列顺序: L-V-H-A 

Code: 

&amp;lt;style type=&quot;text/css&quot;&amp;gt;
&amp;lt;!--
a:link {} 
a:visited {} 
a:hover {} 
a:active {} 
--&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;39. FORM&lt;span&gt;标签&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
这个标签在IE中,将会自动margin一些边距,而在FF中margin则是0,因此,如果想显示一致,所以最好在css中指定margin和 padding,针对上面两个问题,我的css中一般首先都使用这样的样式ul,form{margin:0;padding:0;}。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;40. &lt;span&gt;属性选择器&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;这个不能算是兼容&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;是隐藏&lt;/span&gt;&lt;span&gt;css&lt;/span&gt;&lt;span&gt;的一个&lt;/span&gt;&lt;span&gt;bug)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
p[id]{}div[id]{} 

这个对于IE6.0和IE6.0以下的版本都隐藏,FF和OPera作用.属性选择器和子选择器还是有区别的,子选择器的范围从形式来说缩小了,属性选择器的范围比较大,如p[id]中,所有p标签中有id的都是同样式的.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;41. &lt;span&gt;为什么&lt;/span&gt;&lt;span&gt;FF&lt;/span&gt;&lt;span&gt;下文本无法撑开容器的高度&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
标准浏览器中固定高度值的容器是不会象IE6里那样被撑开的,那我又想固定高度,又想能被撑开需要怎样设置呢？办法就是去掉height设置min-height:200px; 这里为了照顾不认识min-height的IE6 可以这样定义:

{ 
height:auto!important; 
height:200px; 
min-height:200px; 
} 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　看到这里不容易，感谢浏览，记得点个赞~   &lt;/p&gt;
&lt;h3&gt; &lt;/h3&gt;
</description>
<pubDate>Thu, 10 May 2018 02:37:00 +0000</pubDate>
<dc:creator>阿龙丶along</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/alongup/p/9018396.html</dc:identifier>
</item>
<item>
<title>博客园美化大全 - zhang_derek</title>
<link>http://www.cnblogs.com/derek1184405959/p/9018285.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/derek1184405959/p/9018285.html</guid>
<description>&lt;h3&gt;&lt;span&gt;&lt;span&gt;1.1、自动生成目录&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;首先得有js权限&lt;/p&gt;
&lt;p&gt;（1）页脚js代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
    功能：生成博客目录的JS工具
    测试：IE8，火狐，google测试通过
    zhang_derek
    2018-01-03
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; BlogDirectory =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
        获取元素位置，距浏览器左边界的距离（left）和距浏览器上边界的距离（top）
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    getElementPosition:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (ele) {        
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; topPosition = 0&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; leftPosition = 0&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (ele){              
            topPosition &lt;/span&gt;+=&lt;span&gt; ele.offsetTop;
            leftPosition &lt;/span&gt;+=&lt;span&gt; ele.offsetLeft;        
            ele &lt;/span&gt;=&lt;span&gt; ele.offsetParent;     
        }  
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {top:topPosition, left:leftPosition}; 
    },

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
    获取滚动条当前位置
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    getScrollBarPosition:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; scrollBarPosition = document.body.scrollTop ||&lt;span&gt; document.documentElement.scrollTop;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;  scrollBarPosition;
    },
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
    移动滚动条，finalPos 为目的位置，internal 为移动速度
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    moveScrollBar:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(finalpos, interval) {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;若不支持此方法，则退出&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;window.scrollTo) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;窗体滚动时，禁用鼠标滚轮&lt;/span&gt;
        window.onmousewheel = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        };
          
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清除计时&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (document.body.movement) { 
            clearTimeout(document.body.movement); 
        } 

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; currentpos =BlogDirectory.getScrollBarPosition();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取滚动条当前位置&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt; dist = 0&lt;span&gt;; 
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (currentpos == finalpos) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;到达预定位置，则解禁鼠标滚轮，并退出&lt;/span&gt;
            window.onmousewheel = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;; 
        } 
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (currentpos &amp;lt; finalpos) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;未到达，则计算下一步所要移动的距离&lt;/span&gt;
            dist = Math.ceil((finalpos - currentpos)/10); 
            currentpos +=&lt;span&gt; dist; 
        } 
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (currentpos &amp;gt;&lt;span&gt; finalpos) { 
            dist &lt;/span&gt;= Math.ceil((currentpos - finalpos)/10); 
            currentpos -=&lt;span&gt; dist; 
        }
        
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; scrTop = BlogDirectory.getScrollBarPosition();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取滚动条当前位置&lt;/span&gt;
        window.scrollTo(0, currentpos);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;移动窗口&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(BlogDirectory.getScrollBarPosition() == scrTop)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;若已到底部，则解禁鼠标滚轮，并退出&lt;/span&gt;
&lt;span&gt;        {
            window.onmousewheel &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进行下一步移动&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; repeat = &quot;BlogDirectory.moveScrollBar(&quot; + finalpos + &quot;,&quot; + interval + &quot;)&quot;&lt;span&gt;; 
        document.body.movement &lt;/span&gt;=&lt;span&gt; setTimeout(repeat, interval); 
    },
    
    htmlDecode:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (text){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; temp = document.createElement(&quot;div&quot;&lt;span&gt;);
        temp.innerHTML &lt;/span&gt;=&lt;span&gt; text;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; output = temp.innerText ||&lt;span&gt; temp.textContent;
        temp &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; output;
    },

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
    创建博客目录，
    id表示包含博文正文的 div 容器的 id，
    mt 和 st 分别表示主标题和次级标题的标签名称（如 H2、H3，大写或小写都可以！），
    interval 表示移动的速度
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    createBlogDirectory:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (id, mt, st, interval){
         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取博文正文div容器&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; elem =&lt;span&gt; document.getElementById(id);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!elem) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取div中所有元素结点&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; nodes = elem.getElementsByTagName(&quot;*&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建博客目录的div容器&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; divSideBar = document.createElement('DIV'&lt;span&gt;);
        divSideBar.className &lt;/span&gt;= 'uprightsideBar'&lt;span&gt;;
        divSideBar.setAttribute(&lt;/span&gt;'id', 'uprightsideBar'&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; divSideBarTab = document.createElement('DIV'&lt;span&gt;);
        divSideBarTab.setAttribute(&lt;/span&gt;'id', 'sideBarTab'&lt;span&gt;);
        divSideBar.appendChild(divSideBarTab);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; h2 = document.createElement('H2'&lt;span&gt;);
        divSideBarTab.appendChild(h2);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; txt = document.createTextNode('目录导航'&lt;span&gt;);
        h2.appendChild(txt);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; divSideBarContents = document.createElement('DIV'&lt;span&gt;);
        divSideBarContents.style.display &lt;/span&gt;= 'none'&lt;span&gt;;
        divSideBarContents.setAttribute(&lt;/span&gt;'id', 'sideBarContents'&lt;span&gt;);
        divSideBar.appendChild(divSideBarContents);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建自定义列表&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; dlist = document.createElement(&quot;dl&quot;&lt;span&gt;);
        divSideBarContents.appendChild(dlist);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; num = 0;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;统计找到的mt和st&lt;/span&gt;
        mt = mt.toUpperCase();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转化成大写&lt;/span&gt;
        st = st.toUpperCase();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转化成大写&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历所有元素结点&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0; i&amp;lt;nodes.length; i++&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(nodes[i].nodeName == mt|| nodes[i].nodeName ==&lt;span&gt; st)    
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取标题文本&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; nodetext = nodes[i].innerHTML.replace(/&amp;lt;\/?[^&amp;gt;]+&amp;gt;/g,&quot;&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;innerHTML里面的内容可能有HTML标签，所以用正则表达式去除HTML的标签&lt;/span&gt;
                nodetext = nodetext.replace(/ /ig, &quot;&quot;);//替换掉所有的 
                nodetext =&lt;span&gt; BlogDirectory.htmlDecode(nodetext);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;插入锚        &lt;/span&gt;
                nodes[i].setAttribute(&quot;id&quot;, &quot;blogTitle&quot; +&lt;span&gt; num);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; item;
                &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt;(nodes[i].nodeName)
                {
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mt:    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;若为主标题 &lt;/span&gt;
                        item = document.createElement(&quot;dt&quot;&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; st:    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;若为子标题&lt;/span&gt;
                        item = document.createElement(&quot;dd&quot;&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建锚链接&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; itemtext =&lt;span&gt; document.createTextNode(nodetext);
                item.appendChild(itemtext);
                item.setAttribute(&lt;/span&gt;&quot;name&quot;&lt;span&gt;, num);
                item.onclick &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;(){        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加鼠标点击触发函数&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; pos = BlogDirectory.getElementPosition(document.getElementById(&quot;blogTitle&quot; + &lt;span&gt;this&lt;/span&gt;.getAttribute(&quot;name&quot;&lt;span&gt;)));
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!BlogDirectory.moveScrollBar(pos.top, interval)) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                };            
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将自定义表项加入自定义列表中&lt;/span&gt;
&lt;span&gt;                dlist.appendChild(item);
                num&lt;/span&gt;++&lt;span&gt;;
            }
        }
        
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(num == 0) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;; 
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;鼠标进入时的事件处理&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        divSideBarTab.onmouseenter &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            divSideBarContents.style.display &lt;/span&gt;= 'block'&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;鼠标离开时的事件处理&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        divSideBar.onmouseleave &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
            divSideBarContents.style.display &lt;/span&gt;= 'none'&lt;span&gt;;
        }

        document.body.appendChild(divSideBar);
    }
    
};

window.onload&lt;/span&gt;=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;页面加载完成之后生成博客目录&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    BlogDirectory.createBlogDirectory(&lt;/span&gt;&quot;cnblogs_post_body&quot;,&quot;h2&quot;,&quot;h3&quot;,20&lt;span&gt;);
}
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）页面定制css代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;生成博客目录的CSS&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
#uprightsideBar&lt;/span&gt;{&lt;span&gt;
    font-size&lt;/span&gt;:&lt;span&gt;14px&lt;/span&gt;;&lt;span&gt;
    font-family&lt;/span&gt;:&lt;span&gt;Arial, Helvetica, sans-serif&lt;/span&gt;;&lt;span&gt;
    text-align&lt;/span&gt;:&lt;span&gt;left&lt;/span&gt;;&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt;fixed&lt;/span&gt;;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将div的位置固定到距离top:50px，right:0px的位置，这样div就会处在最右边的位置，距离顶部50px&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    top&lt;/span&gt;:&lt;span&gt;400px&lt;/span&gt;;&lt;span&gt;
    right&lt;/span&gt;:&lt;span&gt;53px&lt;/span&gt;;&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt; auto&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; auto&lt;/span&gt;; 
    
    
}&lt;span&gt;
#sideBarTab&lt;/span&gt;{&lt;span&gt;
    float&lt;/span&gt;:&lt;span&gt;left&lt;/span&gt;;&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt;30px&lt;/span&gt;;&lt;span&gt; 
    border&lt;/span&gt;:&lt;span&gt;1px solid #e5e5e5&lt;/span&gt;;&lt;span&gt;
    border-right&lt;/span&gt;:&lt;span&gt;none&lt;/span&gt;;&lt;span&gt;
    text-align&lt;/span&gt;:&lt;span&gt;center&lt;/span&gt;;&lt;span&gt;
    background&lt;/span&gt;:&lt;span&gt;rgb(238, 130, 238)&lt;/span&gt;;
}&lt;span&gt;

#sideBarContents&lt;/span&gt;{&lt;span&gt;
    float&lt;/span&gt;:&lt;span&gt;left&lt;/span&gt;;&lt;span&gt;
    overflow&lt;/span&gt;:&lt;span&gt;auto&lt;/span&gt;;&lt;span&gt; 
    overflow-x&lt;/span&gt;:&lt;span&gt;hidden&lt;/span&gt;;&lt;span&gt;!important;
    width&lt;/span&gt;:&lt;span&gt;200px&lt;/span&gt;;&lt;span&gt;
    min-height&lt;/span&gt;:&lt;span&gt;108px&lt;/span&gt;;&lt;span&gt;
    max-height&lt;/span&gt;:&lt;span&gt;460px&lt;/span&gt;;&lt;span&gt;
    border&lt;/span&gt;:&lt;span&gt;1px solid #e5e5e5&lt;/span&gt;;&lt;span&gt;
    border-right&lt;/span&gt;:&lt;span&gt;none&lt;/span&gt;;&lt;span&gt; 
    background&lt;/span&gt;:&lt;span&gt;#ffffff&lt;/span&gt;;
}&lt;span&gt;
#sideBarContents dl&lt;/span&gt;{&lt;span&gt;
    margin&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;
    padding&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;;
}&lt;span&gt;

#sideBarContents dt&lt;/span&gt;{&lt;span&gt;
    margin-top&lt;/span&gt;:&lt;span&gt;5px&lt;/span&gt;;&lt;span&gt;
    margin-left&lt;/span&gt;:&lt;span&gt;5px&lt;/span&gt;;
}&lt;span&gt;

#sideBarContents dd, dt &lt;/span&gt;{&lt;span&gt;
    cursor&lt;/span&gt;:&lt;span&gt; pointer&lt;/span&gt;;
}&lt;span&gt;

#sideBarContents dd:hover, dt:hover &lt;/span&gt;{&lt;span&gt;
    color&lt;/span&gt;:&lt;span&gt;#A7995A&lt;/span&gt;;
}&lt;span&gt;
#sideBarContents dd&lt;/span&gt;{&lt;span&gt;
    margin-left&lt;/span&gt;:&lt;span&gt;20px&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2.增加返回顶部按钮&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）页面定制css代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#back-to-top &lt;/span&gt;{&lt;span&gt;
    background-color&lt;/span&gt;:&lt;span&gt; #00CD00&lt;/span&gt;;&lt;span&gt;
    bottom&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
    box-shadow&lt;/span&gt;:&lt;span&gt; 0 0 6px #00CD00&lt;/span&gt;;&lt;span&gt;
    color&lt;/span&gt;:&lt;span&gt; #444444&lt;/span&gt;;&lt;span&gt;
    padding&lt;/span&gt;:&lt;span&gt; 10px 10px&lt;/span&gt;;&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt; fixed&lt;/span&gt;;&lt;span&gt;
    right&lt;/span&gt;:&lt;span&gt; 50px&lt;/span&gt;;&lt;span&gt;
    cursor&lt;/span&gt;:&lt;span&gt; pointer&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）页首html代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;span id=&quot;back-to-top&quot;&amp;gt;&amp;lt;a href=&quot;#top&quot;&amp;gt;返回顶部&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.3.爱心特效（鼠标点击页面）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;把下面代码复制到公告栏里面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- 爱心特效 --&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;span&gt;

(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(window,document,undefined){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; hearts =&lt;span&gt; [];
        window.requestAnimationFrame &lt;/span&gt;= (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; window.requestAnimationFrame ||&lt;span&gt; 
                           window.webkitRequestAnimationFrame &lt;/span&gt;||&lt;span&gt;
                           window.mozRequestAnimationFrame &lt;/span&gt;||&lt;span&gt;
                           window.oRequestAnimationFrame &lt;/span&gt;||&lt;span&gt;
                           window.msRequestAnimationFrame &lt;/span&gt;||
                           &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (callback){
                                   setTimeout(callback,&lt;/span&gt;1000/60);
&lt;span&gt;                           }
        })();
        init();
        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; init(){
                css(&lt;/span&gt;&quot;.heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;}.heart:after{top: -5px;}.heart:before{left: -5px;}&quot;&lt;span&gt;);
                attachEvent();
                gameloop();
        }
        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; gameloop(){
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;hearts.length;i++&lt;span&gt;){
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(hearts[i].alpha &amp;lt;=0&lt;span&gt;){
                            document.body.removeChild(hearts[i].el);
                            hearts.splice(i,&lt;/span&gt;1&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                    }
                    hearts[i].y&lt;/span&gt;--&lt;span&gt;;
                    hearts[i].scale &lt;/span&gt;+= 0.004&lt;span&gt;;
                    hearts[i].alpha &lt;/span&gt;-= 0.013&lt;span&gt;;
                    hearts[i].el.style.cssText &lt;/span&gt;= &quot;left:&quot;+hearts[i].x+&quot;px;top:&quot;+hearts[i].y+&quot;px;opacity:&quot;+hearts[i].alpha+&quot;;transform:scale(&quot;+hearts[i].scale+&quot;,&quot;+hearts[i].scale+&quot;) rotate(45deg);background:&quot;+&lt;span&gt;hearts[i].color;
            }
            requestAnimationFrame(gameloop);
        }
        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; attachEvent(){
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; old = &lt;span&gt;typeof&lt;/span&gt; window.onclick===&quot;function&quot; &amp;amp;&amp;amp;&lt;span&gt; window.onclick;
                window.onclick &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event){
                        old &lt;/span&gt;&amp;amp;&amp;amp;&lt;span&gt; old();
                        createHeart(event);
                }
        }
        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; createHeart(event){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; d = document.createElement(&quot;div&quot;&lt;span&gt;);
            d.className &lt;/span&gt;= &quot;heart&quot;&lt;span&gt;;
            hearts.push({
                    el : d,
                    x : event.clientX &lt;/span&gt;- 5&lt;span&gt;,
                    y : event.clientY &lt;/span&gt;- 5&lt;span&gt;,
                    scale : &lt;/span&gt;1&lt;span&gt;,
                    alpha : &lt;/span&gt;1&lt;span&gt;,
                    color : randomColor()
            });
            document.body.appendChild(d);
    }
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; css(css){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; style = document.createElement(&quot;style&quot;&lt;span&gt;);
                style.type&lt;/span&gt;=&quot;text/css&quot;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                    style.appendChild(document.createTextNode(css));
                }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(ex){
                    style.styleSheet.cssText &lt;/span&gt;=&lt;span&gt; css;
                }
                document.getElementsByTagName(&lt;/span&gt;'head')[0&lt;span&gt;].appendChild(style);
    }
        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; randomColor(){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;rgb(&quot;+(~~(Math.random()*255))+&quot;,&quot;+(~~(Math.random()*255))+&quot;,&quot;+(~~(Math.random()*255))+&quot;)&quot;&lt;span&gt;;
        }
})(window,document);

&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.4.公告栏时钟&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;公告里面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;lt;div id=&quot;myTime&quot;&amp;gt;
        &amp;lt;object classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot; codebase=&quot;http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=8,0,0,0&quot; width=&quot;160&quot; height=&quot;70&quot; id=&quot;honehoneclock&quot; align=&quot;middle&quot;&amp;gt;
            &amp;lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;&amp;gt;
            &amp;lt;param name=&quot;movie&quot; value=&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_wh.swf&quot;&amp;gt;
            &amp;lt;param name=&quot;quality&quot; value=&quot;high&quot;&amp;gt;
            &amp;lt;param name=&quot;bgcolor&quot; value=&quot;#ffffff&quot;&amp;gt;
            &amp;lt;param name=&quot;wmode&quot; value=&quot;transparent&quot;&amp;gt;
            &amp;lt;embed wmode=&quot;transparent&quot; src=&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_wh.swf&quot; quality=&quot;high&quot; bgcolor=&quot;#ffffff&quot; width=&quot;160&quot; height=&quot;70&quot; name=&quot;honehoneclock&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot;&amp;gt;
        &amp;lt;/object&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.5.公告栏里面添加信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;公告里面&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;图片路径：可以把图片上传到你的博客相册里面，然后把图片地址复制过来就可以&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;gonggao&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;amp;nbsp&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;color: blue;font-weight: bold;&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;http://www.cnblogs.com/derek1184405959/p/8579428.html&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;我的博客文章（目录）&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;qq&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;写自己想要的一些信息&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;color:red;&quot;&lt;/span&gt;&lt;span&gt; title&lt;/span&gt;&lt;span&gt;=&quot;点此进入Django2.0官方文档&quot;&lt;/span&gt;&lt;span&gt; target&lt;/span&gt;&lt;span&gt;=&quot;_Blank&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;https://docs.djangoproject.com/en/2.0/&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;http://images.cnblogs.com/cnblogs_com/derek1184405959/1210823/t_django.jpg&quot;&lt;/span&gt;&lt;span&gt; alt&lt;/span&gt;&lt;span&gt;=&quot;zzx&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;img_avatar&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;170px&quot;&lt;/span&gt;&lt;span&gt; height&lt;/span&gt;&lt;span&gt;=&quot;80px&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;border-radius:0%&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; css代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.qq&lt;/span&gt;{&lt;span&gt;
    color&lt;/span&gt;:&lt;span&gt;red&lt;/span&gt;;&lt;span&gt;
    font-size&lt;/span&gt;:&lt;span&gt;15px&lt;/span&gt;;&lt;span&gt;
    margin&lt;/span&gt;:&lt;span&gt;8px&lt;/span&gt;;&lt;span&gt;
   font-weight&lt;/span&gt;:&lt;span&gt; 500&lt;/span&gt;;
}&lt;span&gt;
.gonggao&lt;/span&gt;{&lt;span&gt;
    margin&lt;/span&gt;:&lt;span&gt;8px&lt;/span&gt;;&lt;span&gt;
 font-size&lt;/span&gt;:&lt;span&gt;16px&lt;/span&gt;;&lt;span&gt;
    color&lt;/span&gt;:&lt;span&gt;blue&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.6.添加github图标&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;页首html代码&lt;/p&gt;
&lt;p&gt;只要把a标签里面的地址换成你自己的就可以&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;176&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;https://github.com/derek-zhang123/&quot;&lt;/span&gt;&lt;span&gt; title&lt;/span&gt;&lt;span&gt;=&quot;我的github地址&quot;&lt;/span&gt;&lt;span&gt; target&lt;/span&gt;&lt;span&gt;=&quot;_Blank&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;github-corner&quot;&lt;/span&gt;&lt;span&gt; aria-label&lt;/span&gt;&lt;span&gt;=&quot;View source on Github&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;svg &lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;=&quot;80&quot;&lt;/span&gt;&lt;span&gt; height&lt;/span&gt;&lt;span&gt;=&quot;80&quot;&lt;/span&gt;&lt;span&gt; viewBox&lt;/span&gt;&lt;span&gt;=&quot;0 0 250 250&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;fill:#FD6C6C; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot;&lt;/span&gt;&lt;span&gt; aria-hidden&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;path &lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;=&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;path &lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;=&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;&lt;/span&gt;&lt;span&gt; fill&lt;/span&gt;&lt;span&gt;=&quot;currentColor&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;transform-origin: 130px 106px;&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;octo-arm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;path &lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;=&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;&lt;/span&gt;&lt;span&gt; fill&lt;/span&gt;&lt;span&gt;=&quot;currentColor&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;octo-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;svg&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;.github-corner:hover .octo-arm&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;animation&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;octocat-wave 560ms ease-in-out&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;@keyframes octocat-wave&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;0%,100%{transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(0)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;20%,60%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(-25deg)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;40%,80%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(10deg)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;}@media (max-width:500px)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;.github-corner&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;hover .octo-arm{animation:none&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;.github-corner .octo-arm&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;animation&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;octocat-wave 560ms ease-in-out&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;



&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;http://www.cnblogs.com/derek1184405959/&quot;&lt;/span&gt;&lt;span&gt; title&lt;/span&gt;&lt;span&gt;=&quot;我的博客主页&quot;&lt;/span&gt;&lt;span&gt; target&lt;/span&gt;&lt;span&gt;=&quot;_Blank&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;github-corner&quot;&lt;/span&gt;&lt;span&gt; aria-label&lt;/span&gt;&lt;span&gt;=&quot;View source on Github&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;svg &lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;=&quot;80&quot;&lt;/span&gt;&lt;span&gt; height&lt;/span&gt;&lt;span&gt;=&quot;80&quot;&lt;/span&gt;&lt;span&gt; viewBox&lt;/span&gt;&lt;span&gt;=&quot;0 0 250 250&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;fill:#64CEAA; color:#fff; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);&quot;&lt;/span&gt;&lt;span&gt; aria-hidden&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;path &lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;=&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;path &lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;=&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;&lt;/span&gt;&lt;span&gt; fill&lt;/span&gt;&lt;span&gt;=&quot;currentColor&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;transform-origin: 130px 106px;&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;octo-arm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;path &lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;=&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;&lt;/span&gt;&lt;span&gt; fill&lt;/span&gt;&lt;span&gt;=&quot;currentColor&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;octo-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;svg&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;.github-corner:hover .octo-arm&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;animation&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;octocat-wave 560ms ease-in-out&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;@keyframes octocat-wave&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;0%,100%{transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(0)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;20%,60%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(-25deg)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;40%,80%&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rotate(10deg)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;}@media (max-width:500px)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;.github-corner&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;hover .octo-arm{animation:none&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;.github-corner .octo-arm&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;animation&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;octocat-wave 560ms ease-in-out&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.7.扩大和缩小功能&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）页首html代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;divExpandViewArea&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;$('#main_container').css({'margin-left':'-200px'});$('#leftmenu').css({'display':'none'});&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;扩大&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;divCollapseViewArea&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;$('#main_container').css({'margin-left':'0px'});$('#leftmenu').css({'display':'block'});&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;缩小&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）页面定制css样式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#divExpandViewArea{
    position: fixed;
    color: white;
   
    padding: 10px 10px;
    left: 0px;
    top: 579px;
    cursor: pointer;
    opacity: 0.9;
    background-color: #68228B;
}
 
#divCollapseViewArea{
    position: fixed;
    color: white;
    
    padding: 10px 10px;
    left: 0px;
    top: 618px;
    cursor: pointer;
    opacity: 0.9;
    background-color: #68228B;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.8.设置签名格式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;页面定制css样式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/* 设置签名格式 */
#MySignature {
    display: none;
    background-color: #B2E866;
    border-radius: 10px;
    box-shadow: 1px 1px 1px #6B6B6B;
    padding: 10px;
    line-height: 1.5;
    text-shadow: 1px 1px 1px #FFF;
    font-size: 16px;
    font-family: 'Microsoft Yahei';
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.9.设置随笔分类间距&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;左侧随笔分类之间间距&lt;/p&gt;
&lt;p&gt;页面定制css样式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/* 左侧最新随笔 */
#CatList_LinkList_0_Link_0{
    
}
#CatList_LinkList_0_Link_1{
   
margin-top:10px;
}
#CatList_LinkList_0_Link_2{
   
    margin-top:10px;
}
#CatList_LinkList_0_Link_3{
 
margin-top:10px;

}
#CatList_LinkList_0_Link_4{
    
margin-top:10px;

}
#CatList_LinkList_0_Link_5{
    
margin-top:10px;

}
#CatList_LinkList_0_Link_6{
    
margin-top:10px;

}
#CatList_LinkList_0_Link_7{
    
margin-top:10px;

}
#CatList_LinkList_0_Link_8{
    
margin-top:10px;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;1.10.添加分享功能&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;公告栏里面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&amp;lt;script&amp;gt;window._bd_share_config={&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;common&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bdSnsKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bdText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bdMini&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bdMiniList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:false,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bdPic&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bdStyle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bdSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;slide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;slide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bdImg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bdPos&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;right&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bdTop&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;400&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;viewList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qzone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tsina&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tqq&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;renren&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;weixin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;viewText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;分享到：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;viewSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}};with(document)0[(getElementsByTagName(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0]||body).appendChild(createElement(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)).src=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+~(-new Date()/36e5)];&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.11.走马灯&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; &lt;strong&gt;页首html代码&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&amp;lt;div id=&quot;i1&quot; style=&quot;color:red;font-size:13px;padding:5px;&quot;&amp;gt;大江东去，浪淘尽，千古风流人物。故垒西边，人道是，三国周郎赤壁。乱石穿空，惊涛拍岸，卷起千堆雪。江山如画，一时多少豪杰。遥想公瑾当年，小乔初嫁了，雄姿英发。羽扇纶巾，谈笑间，樯橹灰飞烟灭。故国神游，多情应笑我，早生华发。人生如梦，一尊还酹江月。&amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
       &lt;span&gt;function&lt;/span&gt;&lt;span&gt; func(){
           &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tag = document.getElementById('i1'&lt;span&gt;);
           &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; content =&lt;span&gt; tag.innerText;
           &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; f = content.charAt(0&lt;span&gt;);
           &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; l = content.substring(1&lt;span&gt;,content.length);
           &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; new_content = l +&lt;span&gt; f;
           tag.innerText &lt;/span&gt;=&lt;span&gt; new_content;
       }
       setInterval(&lt;/span&gt;'func()',1600&lt;span&gt;);
    &lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.12.推荐和反对&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;页面定制css&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;推荐和反对&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
#div_digg {
    padding: 10px;
    position: fixed;
    _position: absolute;
    z&lt;/span&gt;-index: 1000&lt;span&gt;;
    bottom: 20px;
    right: &lt;/span&gt;0&lt;span&gt;;
    _right: 17px;
    border: 1px solid #D9DBE1;
    background&lt;/span&gt;-&lt;span&gt;color: #FFFFFF;
    filter: alpha(Opacity&lt;/span&gt;=80&lt;span&gt;);
    &lt;/span&gt;-moz-opacity: 1&lt;span&gt;;
    opacity: &lt;/span&gt;1&lt;span&gt;;
}

.icon_favorite {
    background: transparent url(&lt;/span&gt;'http://files.cnblogs.com/files/jackson0714/kj.gif') no-repeat 0 0&lt;span&gt;;
    padding&lt;/span&gt;-&lt;span&gt;left: 16px;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;如果对你有帮助，右下角点个“&lt;span&gt;推荐&lt;/span&gt;”，谢谢！&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 10 May 2018 02:26:00 +0000</pubDate>
<dc:creator>zhang_derek</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/derek1184405959/p/9018285.html</dc:identifier>
</item>
<item>
<title>NSURLSession 所有的都在这里(二) - Zxiao..旭</title>
<link>http://www.cnblogs.com/taoxu/p/9003457.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/taoxu/p/9003457.html</guid>
<description>
&lt;p&gt;前面一篇我们说了什么？&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      这是这个关于NSURLSession的第二篇文章，第一篇再加上这篇文章，就大概的把NSURLSession的API以及一些简单使用我们也就说的差不多了，这篇文章总结哪些点呢？相信看顾哦第一篇文章的小伙伴都知道，在开始写这篇文章之前我们说说上一篇文章我们写了些什么。&lt;/p&gt;
&lt;p&gt;      1、&lt;strong&gt;NSURLRequest&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;      2、&lt;strong&gt;NSURLSession&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;      &lt;strong&gt;3、NSURLSessionTask 以及它的三个子类：NSURLSessionDataTask/NSURLSessionDownloadTask/NSURLSessionStreamTask&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      第一篇文章的飞机票在这里 &lt;a id=&quot;link_post_title&quot; class=&quot;link-post-title&quot; href=&quot;http://www.cnblogs.com/taoxu/p/8962778.html&quot;&gt;NSURLSession 所有的都在这里(一)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;   &lt;/strong&gt;   拿着一篇我们说的大概是下面这些内容了：&lt;/p&gt;
&lt;p&gt;      1、NSURLSessionTaskDelegate&lt;/p&gt;
&lt;p&gt;      2、NSURLSessionDataDelegate&lt;/p&gt;
&lt;p&gt;      3、NSURLSessionDownloadDelegate&lt;/p&gt;
&lt;p&gt;      4、NSURLSessionStreamDelegate&lt;/p&gt;
&lt;p&gt;      5、NSURLSessionTaskTransactionMetrics&lt;/p&gt;
&lt;p&gt;      6、NSURLSessionTaskMetrics&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;开始这篇的内容  -- delegate&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;      在说明之前我们先通过一张图看看这几个代理之间的关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/739006/201805/739006-20180509113600924-327280652.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     &lt;/strong&gt; 这些代理全都是遵循了NSURLSessionDelegate，再说上面我们提到的那些代理的API之前我们得先说说NSURLSessionDelegate这个代理，看下面它的API： &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;48&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
/*
 * Messages related to the URL session as a whole
 @protocol NSURLSessionDelegate &amp;lt;NSObject&amp;gt;
 @optional
 */

/* The last message a session receives.  A session will only become
 * invalid because of a systemic error or when it has been
 * explicitly（明显） invalidated, in which case the error parameter will be nil.
 会话失效
 通知URL会话该会话已失效。
 如果通过调用finishTasksAndInvalidate方法使会话失效，则会话将一直等待，直到会话中的最终任务完成或失败，然后再调用此委托方法。如果您调用invalidateAndCancel方法，
 会话将立即调用此委托方法。
 对于每一个完成的后台Task调用该Session的Delegate中的URLSession:downloadTask:didFinishDownloadingToURL:（成功的话）
 和URLSession:task:didCompleteWithError:（成功或者失败都会调用）方法做处理，以上的回调代码块可以在这里调用
 - (void)URLSession:(NSURLSession *)session didBecomeInvalidWithError:(nullable NSError *)error;

 */

/* If implemented, when a connection level authentication challenge
 * has occurred, this delegate will be given the opportunity to
 * provide authentication credentials to the underlying
 * connection. Some types of authentication will apply to more than
 * one request on a given connection to a server (SSL Server Trust
 * challenges).  If this delegate message is not implemented, the
 * behavior will be to use the default handling, which may involve user
 * interaction.
 
  如果服务器要求验证客户端身份或向客户端提供其证书用于验证时，则会调用
  在苹果开发者文档中有这样的说明
  If the initial handshake with the server requires a connection-level challenge (such as an SSL client certificate), NSURLSession calls either the URLSession:task:didReceiveChallenge:completionHandler: or URLSession:didReceiveChallenge:completionHandler: delegate method.
 
 响应来自远程服务器的会话级别认证请求，从代理请求凭据。
 这种方法在两种情况下被调用：
 1、远程服务器请求客户端证书或Windows NT LAN Manager（NTLM）身份验证时，允许您的应用程序提供适当的凭据
 2、当会话首先建立与使用SSL或TLS的远程服务器的连接时，允许您的应用程序验证服务器的证书链
 如果您未实现此方法，则会话会调用其委托的URLSession：task：didReceiveChallenge：completionHandler：方法。
 注：此方法仅处理NSURLAuthenticationMethodNTLM，NSURLAuthenticationMethodNegotiate，NSURLAuthenticationMethodClientCertificate和NSURLAuthenticationMethodServerTrust身份验证类型。对于所有其他认证方案，会话仅调用URLSession：task：didReceiveChallenge：completionHandler：方法。
 
  - (void)URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge
  completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential * _Nullable credential))completionHandler;

 */

/* If an application has received an
 * -application:handleEventsForBackgroundURLSession:completionHandler:
 * message, the session delegate will receive this message to indicate
 * that all messages previously enqueued for this session have been
 * delivered.  At this time it is safe to invoke the previously stored
 * completion handler, or to begin any internal updates that will
 * result in invoking the completion handler.
 
 如果一个应用程序收到了
 -application:handleEventsForBackgroundURLSession:completionHandler:
 消息,session委托将收到此消息指示所有消息之前进行入队这个会话交付。这个时候是安全调用先前存储完成处理器,或开始任何内部更新将导致调用完成处理器。
 
 告诉委托所有session里的消息都已发送。
 这个方法在我们写后台下载的Demo中我们是会遇到的。
 - (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession *)session API_AVAILABLE(ios(7.0), watchos(2.0), tvos(9.0)) API_UNAVAILABLE(macos);
*/

/*
 下面是Task解析
 NSURLSessionTask是一个抽象子类，它有三个子类：NSURLSessionDataTask，NSURLSessionUploadTask和NSURLSessionDownloadTask。这三个类封装了现代应用程序的三个基本网络任务：获取数据，比如JSON或XML，以及上传和下载文件。
*/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;      上面我们说了NSURLSessionDelegate这个代理，接下来就是我们的NSURLSessionTaskDelegate，看到Task就知道接下来的还有我们常见的三个Task代理：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     &lt;/strong&gt; 我们先看看这个：NSURLSessionTaskDelegate，然后在一个个的说明那三个Task（data,download,stream）代理。关于uploadTask由于是继承dataTask的。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;59&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
/*
 * Sent when the system is ready to begin work for a task with a delayed start
 * time set (using the earliestBeginDate property). The completionHandler must
 * be invoked in order for loading to proceed. The disposition provided to the
 * completion handler continues the load with the original request provided to
 * the task, replaces the request with the specified task, or cancels the task.
 * If this delegate is not implemented, loading will proceed with the original
 * request.
 *
 * Recommendation: only implement this delegate if tasks that have the
 * earliestBeginDate property set may become stale and require alteration prior
 * to starting the network load.
 *
 * If a new request is specified, the allowsCellularAccess property from the
 * new request will not be used; the allowsCellularAccess property from the
 * original request will continue to be used.
 *
 * Canceling the task is equivalent to calling the task's cancel method; the
 * URLSession:task:didCompleteWithError: task delegate will be called with error
 * NSURLErrorCancelled.
 
 告诉代理现在将开始加载延迟的URL会话任务。
 当具有延迟开始时间的后台会话任务（由earliestBeginDate属性设置）准备就绪时，将调用此方法。只有在等待网络负载时请求可能变陈旧并需要被新请求替换时，才应实现此委托方法。
 为了继续加载，委托人必须调用完成处理程序，并传递一个处理方式来指示任务应该如何进行。传递NSURLSessionDelayedRequestCancel处置等效于直接调用任务的取消。
 
   - (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task
   willBeginDelayedRequest:(NSURLRequest *)request
   completionHandler:(void (^)(NSURLSessionDelayedRequestDisposition disposition, NSURLRequest * _Nullable newRequest))completionHandler
   API_AVAILABLE(macos(10.13), ios(11.0), watchos(4.0), tvos(11.0));
 */

/* 告诉代理，在开始网络加载之前，任务正在等待，直到合适的连接可用。
 如果NSURLSessionConfiguration的waitsForConnectivity属性为true并且没有足够的连接，则调用此方法。 代表可以利用这个机会来更新用户界面;
 例如通过呈现离线模式或仅限蜂窝模式。
 此方法最多只能在每个任务中调用一次，并且仅在连接最初不可用时调用。 它永远不会被调用后台会话，因为这些会话会忽略waitsForConnectivity。

 * Sent when a task cannot start the network loading process because the current
 * network connectivity is not available or sufficient for the task's request.
 *
 * This delegate will be called at most one time per task, and is only called if
 * the waitsForConnectivity property in the NSURLSessionConfiguration has been
 * set to YES.
 *
 * This delegate callback will never be called for background sessions, because
 * the waitForConnectivity property is ignored by those sessions.
 
 - (void)URLSession:(NSURLSession *)session taskIsWaitingForConnectivity:(NSURLSessionTask *)task
 API_AVAILABLE(macos(10.13), ios(11.0), watchos(4.0), tvos(11.0));
 
 告诉委托远程服务器请求HTTP重定向。
 此方法仅适用于默认和临时会话中的任务。 后台会话中的任务会自动遵循重定向。
 * An HTTP request is attempting to perform a redirection to a different
 * URL. You must invoke the completion routine to allow the
 * redirection, allow the redirection with a modified request, or
 * pass nil to the completionHandler to cause the body of the redirection
 * response to be delivered as the payload of this request. The default
 * is to follow redirections.
 *
 * For tasks in background sessions, redirections will always be followed and this method will not be called.
 
  - (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task
  willPerformHTTPRedirection:(NSHTTPURLResponse *)response
        newRequest:(NSURLRequest *)request
  completionHandler:(void (^)(NSURLRequest * _Nullable))completionHandler;

 
 响应来自远程服务器的认证请求，从代理请求凭证。
 该方法处理任务级别的身份验证挑战。 NSURLSessionDelegate协议还提供了会话级别的身份验证委托方法。所调用的方法取决于身份验证挑战的类型：
 对于会话级挑战-NSURLAuthenticationMethodNTLM，NSURLAuthenticationMethodNegotiate，NSURLAuthenticationMethodClientCertificate或NSURLAuthenticationMethodServerTrust - NSURLSession对象调用会话委托的URLSession：didReceiveChallenge：completionHandler：方法。如果您的应用程序未提供会话委托方法，则NSURLSession对象会调用任务委托人的URLSession：task：didReceiveChallenge：completionHandler：方法来处理该挑战。
 对于非会话级挑战（所有其他挑战），NSURLSession对象调用会话委托的URLSession：task：didReceiveChallenge：completionHandler：方法来处理挑战。如果您的应用程序提供会话委托，并且您需要处理身份验证，那么您必须在任务级别处理身份验证，或者提供明确调用每会话处理程序的任务级别处理程序。会话委托的URLSession：didReceiveChallenge：completionHandler：方法不针对非会话级别的挑战进行调用。
 
 * The task has received a request specific authentication challenge.
 * If this delegate is not implemented, the session specific authentication challenge
 * will *NOT* be called and the behavior will be the same as using the default handling
 * disposition.
 
 - (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task
 didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge
 completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential * _Nullable credential))completionHandler;
 
 NOTE:注意区分上面的方法 这个是NSURLSessionDelegate代理方法
 - (void)URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge
 completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential * _Nullable credential))completionHandler;

 当任务需要新的请求主体流发送到远程服务器时，告诉委托。
 这种委托方法在两种情况下被调用：
 1、如果使用uploadTaskWithStreamedRequest创建任务，则提供初始请求正文流：
 2、如果任务因身份验证质询或其他可恢复的服务器错误需要重新发送包含正文流的请求，则提供替换请求正文流。
 注：如果代码使用文件URL或NSData对象提供请求主体，则不需要实现此功能。

 * Sent if a task requires a new, unopened body stream.  This may be
 * necessary when authentication has failed for any request that
 * involves a body stream.

 - (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task
 needNewBodyStream:(void (^)(NSInputStream * _Nullable bodyStream))completionHandler;

 
 定期通知代理向服务器发送主体内容的进度。(上传进度)
 * Sent periodically to notify the delegate of upload progress.  This
 * information is also available as properties of the task.
 
  - (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task
    didSendBodyData:(int64_t)bytesSent
    totalBytesSent:(int64_t)totalBytesSent
    totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;

 告诉代理该会话完成了该任务的收集指标
 * Sent when complete statistics information has been collected for the task.
 
  - (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task
    didFinishCollectingMetrics:(NSURLSessionTaskMetrics *)metrics
    API_AVAILABLE(macosx(10.12), ios(10.0), watchos(3.0), tvos(10.0));

 告诉代理该任务完成传输数据
 * Sent as the last message related to a specific task.  Error may be
 * nil, which implies that no error occurred and this task is complete.
 
 - (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task
    didCompleteWithError:(nullable NSError *)error;&lt;br/&gt;*/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;      下面我们一个一个的梳理这四个代理，它们和前面我们说的NSURLSessionTaskDelegate是有直接关系的，这个在看API的时候要随时留意一点，特别是uploadTask的代理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      &lt;/strong&gt;我们再说说这个NSURLSessionDataDelegate，他就是遵守了上面的Task代理，以及后面的download都会是遵循了上面的Task代理的。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
/*
 @protocol NSURLSessionDataDelegate &amp;lt;NSURLSessionTaskDelegate&amp;gt;
 @optional
 * This method will not be called for background upload tasks (which cannot be converted to download tasks).
 
- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask
 didReceiveResponse:(NSURLResponse *)response
 completionHandler:(void (^)(NSURLSessionResponseDisposition disposition))completionHandler;

 
 告诉代理数据任务已更改为下载任务。
 当委托的URLSession：dataTask：didReceiveResponse：completionHandler：方法决定将数据请求的处置更改为下载时，会话将调用此委托方法为你提供新的下载任务。 在此调用之后，会话委托不会收到与原始数据任务相关的其他委托方法调用。
 * Notification that a data task has become a download task.  No
 * future messages will be sent to the data task.
 
- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask
 didBecomeDownloadTask:(NSURLSessionDownloadTask *)downloadTask;

 告诉委托数据任务已更改为流任务
 当委托的URLSession：dataTask：didReceiveResponse：completionHandler：方法决定将处置从数据请求更改为流时，会话将调用此委托方法为你提供新的流任务。 在此调用之后，会话委托不会收到与原始数据任务相关的其他委托方法调用。
 
 对于pipelined的请求，流任务将只允许读取，并且对象将立即发送委托消息URLSession：writeClosedForStreamTask :. 通过在其NSURLSessionConfiguration对象上设置HTTPShouldUsePipelining属性，或通过在NSURLRequest对象上设置HTTPShouldUsePipelining属性来为各个请求设置会话中的所有请求，可以禁用管道传输。

- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask
  didBecomeStreamTask:(NSURLSessionStreamTask *)streamTask;

 
 告诉代理该数据任务已经收到了一些预期的数据。
 由于NSData对象通常是由许多不同的数据对象拼凑而成的，因此尽可能使用NSData的enumerateByteRangesUsingBlock：方法遍历数据，而不是使用bytes方法（将NSData对象平化为单个内存块）。
 此委托方法可能被多次调用，并且每次调用仅提供自上次调用后收到的数据。 如果需要，该应用负责积累这些数据。
- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask
    didReceiveData:(NSData *)data;

 询问委托数据（或上传）任务是否应将响应存储在缓存中。
 会话在任务完成接收所有预期数据后调用此委托方法。如果未实现此方法，则默认行为是使用会话配置对象中指定的缓存策略。
 此方法的主要目的是防止特定URL的缓存或修改与URL响应关联的userInfo字典。
 只有在处理请求的NSURLProtocol决定缓存响应时才调用此方法。通常，只有满足以下所有条件时才会缓存响应：
 1、请求是针对HTTP或HTTPS URL（或你自己的支持缓存的自定义网络协议）。
 2、请求成功（状态码在200-299范围内）。
 3、提供的响应来自服务器，而不是缓存。
 4、会话配置的缓存策略允许缓存。
 5、提供的NSURLRequest对象的缓存策略（如果适用）允许缓存。
 6、服务器响应中的缓存相关头（如果存在）允许缓存。
 7、响应大小足够小，可以合理地放入缓存中。 （例如，如果您提供磁盘缓存，则响应不得超过磁盘缓存大小的5％。）
 注：如果委托实现此方法，则它必须调用completionHandler完成处理程序;否则，应用程序会泄漏内存。

 - (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask
 willCacheResponse:(NSCachedURLResponse *)proposedResponse
 completionHandler:(void (^)(NSCachedURLResponse * _Nullable cachedResponse))completionHandler;
*/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;      接下来就是下载代理：NSURLSessionDownloadDelegate，它的代理方法就三个，但确实是我们使用比较多的，我们也看看这三个代理方法的含义&lt;/p&gt;
&lt;p&gt;      在我们的Demo中，我们写后台下载的时候使用的也肯定是NSURLSessionDownloadDelegate，这个在Demo中有说：&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
/* 下载代理
 * Messages related to the operation of a task that writes data to a
 * file and notifies the delegate upon completion.
   @protocol NSURLSessionDownloadDelegate &amp;lt;NSURLSessionTaskDelegate&amp;gt;


 下载完成
- (void)URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTask
didFinishDownloadingToURL:(NSURL *)location;

 
@optional
下载进度
Sent periodically to notify the delegate of download progress.
- (void)URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTask
        didWriteData:(int64_t)bytesWritten
        totalBytesWritten:(int64_t)totalBytesWritten
        totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;

 
 下载任务已经恢复下载。
 
 参数：filrOffest:
 如果文件的缓存策略或上次修改日期阻止重新使用现有内容，则该值为零。否则，该值是一个整数，表示磁盘上不需要再次检索的字节数。
 如果可恢复的下载任务被取消或失败，可以请求resumeData对象，该对象将提供足够的信息以重新开始下载。
 稍后，你可以调用downloadTaskWithResumeData：或downloadTaskWithResumeData：completionHandler：使用该数据。
 当你调用这些方法时，你会得到一个新的下载任务。只要恢复该任务，会话就会使用该新任务调用其委托的
 URLSession：downloadTask：didResumeAtOffset：expectedTotalBytes：方法，以指示恢复下载。
- (void)URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTask
        didResumeAtOffset:(int64_t)fileOffset
        expectedTotalBytes:(int64_t)expectedTotalBytes;

*/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;      接下来就是NSURLSessionStreamDelegate，这样我们的几个代理方法我们也就都说完了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
/*
 @protocol NSURLSessionStreamDelegate &amp;lt;NSURLSessionTaskDelegate&amp;gt;
 @optional

 告诉委托底层Socket的读取面已经关闭。
 即使当前过程没有读取，也可以调用此方法。 此方法并不表示流达到end-of-file（EOF），
 从而不能读取更多数据。
- (void)URLSession:(NSURLSession *)session readClosedForStreamTask:(NSURLSessionStreamTask *)streamTask;

 上面读这个就是写的说明
 告诉委托底层套接字的写入端已关闭。
 即使当前过程没有写入，也可以调用此方法。
- (void)URLSession:(NSURLSession *)session writeClosedForStreamTask:(NSURLSessionStreamTask *)streamTask;

 
 告诉委托流已经检测到通往主机更好的路由  下面的例子是WiFi可用了
- (void)URLSession:(NSURLSession *)session betterRouteDiscoveredForStreamTask:(NSURLSessionStreamTask *)streamTask;

 告诉委托，流任务已完成，由于流任务调用captureStreams方法。
 此委托方法仅在流任务的所有入队读取和写入操作完成后才会调用。
- (void)URLSession:(NSURLSession *)session streamTask:(NSURLSessionStreamTask *)streamTask
        didBecomeInputStream:(NSInputStream *)inputStream
        outputStream:(NSOutputStream *)outputStream;
*/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NSURLSessionTaskTransactionMetrics和NSURLSessionTaskMetrics&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;p&gt;     &lt;strong&gt;NSURLSessionTaskTransactionMetrics&lt;/strong&gt; 主要使用这个API获取每个阶段的网络请求时常，等数据，来分析对应的网络请求。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;102&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
/*
   This class defines the performance（性能） metrics collected for a request/response transaction     during the task execution.执行
主要使用这个API获取每个阶段的网络请求时常，等数据，来分析对应的网络请求。
   API_AVAILABLE(macosx(10.12), ios(10.0), watchos(3.0), tvos(10.0))
   @interface NSURLSessionTaskTransactionMetrics : NSObject
*/

/*
    presents 礼物复数  表现
    Represents 代表 the transaction request.
    @property (copy, readonly) NSURLRequest *request;
 */

/*
   如果发生错误并且没有生成响应，则可以为nil
   @property (nullable, copy, readonly) NSURLResponse *response;
 */

/*
 * fetchStartDate returns the time when the user agent started fetching the resource, whether or not the resource was retrieved from the server or local resources.
 * 用户代理开始获取资源的时间，无论是否从服务器或本地资源中检索资源。
 * The following metrics will be set to nil, if a persistent connection was used or the resource was retrieved from local resources:

 *   domainLookupStartDate
 *   domainLookupEndDate
 *   connectStartDate
 *   connectEndDate
 *   secureConnectionStartDate
 *   secureConnectionEndDate
     @property (nullable, copy, readonly) NSDate *fetchStartDate;
 */

/* 用户代理启动资源名称查找之前的时间。
    domainLookupStartDate returns the time immediately before the user agent started the name lookup for the resource.
   @property (nullable, copy, readonly) NSDate *domainLookupStartDate;
 */

/* 名称查询完成后的时间。
 * domainLookupEndDate returns the time after the name lookup was completed.
   @property (nullable, copy, readonly) NSDate *domainLookupEndDate;
 */

/* 用户代理开始建立到服务器的连接之前的时间。
    connectStartDate is the time immediately before the user agent started establishing the connection to the server.
  
    For example, this would correspond to the time immediately before the user agent started trying to establish the TCP connection.
   @property (nullable, copy, readonly) NSDate *connectStartDate;
*/

/* 如果使用加密连接，则secureConnectionStartDate是用户代理刚刚开始安全握手以保护当前连接之前的时间。如果未使用加密连接，则此属性设置为零。
   If an encrypted 加密 connection was used, secureConnectionStartDate is the time immediately before the user agent 代理 started the
   security 安全 handshake to secure the current connection.
   For example, this would correspond to the time immediately before the user agent started the TLS handshake.
   If an encrypted connection was not used, this attribute is set to nil.
   @property (nullable, copy, readonly) NSDate *secureConnectionStartDate;
 */

/* 如果使用加密连接，则secureConnectionEndDate是安全握手完成后的时间。如果未使用加密连接，则此属性设置为零
 * If an encrypted connection was used, secureConnectionEndDate is the time immediately after the security handshake completed.
 *
 * If an encrypted connection was not used, this attribute is set to nil.
   @property (nullable, copy, readonly) NSDate *secureConnectionEndDate;
 */

/* 用户代理完成与服务器建立连接后的时间，包括完成与安全相关的握手和其他握手
 * connectEndDate is the time immediately after the user agent finished establishing the connection to the server, including completion of security-related and other handshakes.
   @property (nullable, copy, readonly) NSDate *connectEndDate;
 */

/* 用户代理开始请求源之前的时间，无论是从服务器还是从本地资源中检索资源。
    requestStartDate is the time immediately before the user agent started requesting the source, regardless of whether the resource was retrieved from the server or local resources.
    For example, this would correspond to the time immediately before the user agent sent an HTTP GET request.
   @property (nullable, copy, readonly) NSDate *requestStartDate;
 */

/* 用户代理完成请求源后的时间，无论资源是从服务器还是从本地资源中检索
    requestEndDate is the time immediately after the user agent finished requesting the source, regardless of whether the resource was retrieved from the server or local resources.
    For example, this would correspond to the time immediately after the user agent finished sending the last byte of the request.
   @property (nullable, copy, readonly) NSDate *requestEndDate;
 */

/* 用户代理刚收到服务器或本地资源响应的第一个字节后的时间。
   responseStartDate is the time immediately after the user agent received the first byte of the response from the server or from local resources.
  
   For example, this would correspond to the time immediately after the user agent received the first byte of an HTTP response.
   @property (nullable, copy, readonly) NSDate *responseStartDate;
 */

/* 用户代理收到资源的最后一个字节后的时间。
   responseEndDate is the time immediately after the user agent received the last byte of the resource.
   @property (nullable, copy, readonly) NSDate *responseEndDate;
 */

/* 用于获取资源的网络协议，由ALPN协议ID标识序列[RFC7301]标识。如果配置了代理并建立了隧道连接，则此属性将返回隧道协议的值。
 * The network protocol used to fetch the resource, as identified by the ALPN Protocol ID Identification Sequence [RFC7301].
 * E.g., h2, http/1.1, spdy/3.1.
 *
 * When a proxy is configured AND a tunnel connection is established, then this attribute returns the value for the tunneled protocol.
 *
 * For example:
 * If no proxy were used, and HTTP/2 was negotiated, then h2 would be returned.
 * If HTTP/1.1 were used to the proxy, and the tunneled connection was HTTP/2, then h2 would be returned.
 * If HTTP/1.1 were used to the proxy, and there were no tunnel, then http/1.1 would be returned.
 
   @property (nullable, copy, readonly) NSString *networkProtocolName;
 *
 */

/* 如果使用代理连接来获取资源，则此属性设置为YES。
 * This property is set to YES if a proxy connection was used to fetch the resource.
 
   @property (assign, readonly, getter=isProxyConnection) BOOL proxyConnection;
 */

/* 如果使用持续连接来获取资源，则此属性设置为YES
    This property is set to YES if a persistent connection was used to fetch the resource.
    @property (assign, readonly, getter=isReusedConnection) BOOL reusedConnection;
 */

/* 指示资源是否已从本地缓存中加载，推送或检索。
    Indicates whether the resource was loaded, pushed or retrieved from the local cache.
    @property (assign, readonly) NSURLSessionTaskMetricsResourceFetchType resourceFetchType;
 */

/* API_AVAILABLE(macosx(10.12), ios(10.0), watchos(3.0), tvos(10.0))
    @interface NSURLSessionTaskMetrics : NSObject
 */

/* 包含为在任务执行期间创建的每个请求/响应事务收集的度量标准。
    transactionMetrics array contains the metrics collected for every request/response transaction created during the task execution.
    @property (copy, readonly) NSArray&amp;lt;NSURLSessionTaskTransactionMetrics *&amp;gt;       transactionMetrics;
 */

/* 从任务创建时间到任务完成时间的时间间隔。
   @property (copy, readonly) NSDateInterval *taskInterval;

 */

/* 记录的重定向的数量。
    redirectCount is the number of redirects that were recorded.
    @property (assign, readonly) NSUInteger redirectCount;
 */
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;最后小 demo&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;p&gt;      最后是一个断点下载和后台下载的一个Demo，具体的Demo代码我就不再具体的讲解了，因为在Demo中加了很多的注释。&lt;/p&gt;
&lt;p&gt;      由于这个Demo是写在以前的关于AVFoundation的Demo里面，具体的Demo是在NSURLSession文件中。&lt;/p&gt;
&lt;p&gt;      还有前面关于API的注释也是在写URLSessionManager.h文件中，需要的可以翻翻去看看，关于NSURLSession暂时就先说这么多，有问题可以加我QQ 1872684219  &lt;/p&gt;
&lt;p&gt;      &lt;a href=&quot;https://github.com/geniusZhangXu/AVFoundation&quot; target=&quot;_blank&quot;&gt;Demo 点击这里下载&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 10 May 2018 02:22:00 +0000</pubDate>
<dc:creator>Zxiao..旭</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/taoxu/p/9003457.html</dc:identifier>
</item>
</channel>
</rss>