<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>codeforces 982D Shark - qrfkickit</title>
<link>http://www.cnblogs.com/kickit/p/9062168.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kickit/p/9062168.html</guid>
<description>&lt;p&gt;题意：&lt;/p&gt;
&lt;p&gt;给出一个数组，删除大于等于k的数字，使得其满足以下条件：&lt;/p&gt;
&lt;p&gt;1.剩余的连续的段，每一段的长度相等；&lt;/p&gt;
&lt;p&gt;2.在满足第一个条件的情况下，段数尽可能多；&lt;/p&gt;
&lt;p&gt;3.在满足前两个条件的情况下，k取最小的。&lt;/p&gt;
&lt;p&gt;求k。&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;p&gt;一开始整个数组可以看成完整的一段，这是对应的k是最大的数字 + 1。&lt;/p&gt;
&lt;p&gt;用一个set sd维护删除的数字。&lt;/p&gt;
&lt;p&gt;从大到小枚举删除的数字，每次删除一个数字，都可以看成是删除一个长的段，然后添加两个小的段，在sd中找出这个数字的位置cur的前驱pre和后继sub，要删除的段就是前驱到后继这一段，然后新添加两段就是cur到pre 以及 sub到cur。把cur添加到删除数字的集合中。&lt;/p&gt;
&lt;p&gt;用一个map维护&amp;lt;线段长度，数量&amp;gt;来表示现在段数的情况，容易知道当map的size为1时，表明所有线段的长度相同，就可以更新答案了。&lt;/p&gt;
&lt;p&gt;更新答案的时候，首先考虑线段数量是否更多，再考虑k是否可以变小。&lt;/p&gt;
&lt;p&gt;假设当前删除的数字是tmp，那么是不是满足条件之后就直接把答案更新为tmp呢？&lt;/p&gt;
&lt;p&gt;不是，假设当前数字是x，比它小的第一个数字是y，显然y + 1这个数字也可以满足条件，而且y + 1 &amp;lt;= x是显然的，所以答案应该更新为y + 1。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;感谢mzjj教我！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include &amp;lt;algorithm&amp;gt;
&lt;span&gt; 4&lt;/span&gt; #include &amp;lt;map&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include &amp;lt;&lt;span&gt;set&lt;/span&gt;&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; typedef &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; ll;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; typedef pair&amp;lt;&lt;span&gt;int&lt;/span&gt;,&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; pii;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; map&amp;lt;&lt;span&gt;int&lt;/span&gt;,&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; mmp;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&amp;lt;pii&amp;gt;&lt;span&gt; s;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; sd;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;n);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;;i &amp;lt;= n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;&lt;span&gt; x;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;x);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        s.insert(pii(x,i));
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     sd.insert(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     sd.insert(n+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     mmp[n]++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; ans = s.rbegin() -&amp;gt; first + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; cnt = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i &amp;lt; n - &lt;span&gt;1&lt;/span&gt;;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         auto it =&lt;span&gt; s.rbegin();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; cur = it -&amp;gt;&lt;span&gt; second;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         s.erase(*&lt;span&gt;it);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; pre = *(--&lt;span&gt;sd.lower_bound(cur));
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; sub = *&lt;span&gt;(sd.upper_bound(cur));
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;printf(&quot;%d %d %d\n&quot;,pre,sub,cur);&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (sub-pre-&lt;span&gt;1&lt;/span&gt; &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             mmp[sub-pre-&lt;span&gt;1&lt;/span&gt;]--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (mmp[sub-pre-&lt;span&gt;1&lt;/span&gt;] == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                 mmp.erase(sub-pre-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        } 
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        sd.insert(cur);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (cur-pre-&lt;span&gt;1&lt;/span&gt; &amp;gt; &lt;span&gt;0&lt;/span&gt;) mmp[cur-pre-&lt;span&gt;1&lt;/span&gt;]++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (sub-cur-&lt;span&gt;1&lt;/span&gt; &amp;gt; &lt;span&gt;0&lt;/span&gt;) mmp[sub-cur-&lt;span&gt;1&lt;/span&gt;]++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (mmp.size() == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;int len = mmp.begin() -&amp;gt; first;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; num = mmp.begin() -&amp;gt;&lt;span&gt; second;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;printf(&quot;%d *\n&quot;,len);&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (num &amp;gt;=&lt;span&gt; cnt)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                 cnt =&lt;span&gt; num;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                 ans = s.rbegin() -&amp;gt; first + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,ans);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 19 May 2018 15:54:00 +0000</pubDate>
<dc:creator>qrfkickit</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kickit/p/9062168.html</dc:identifier>
</item>
<item>
<title>Flask开发微电影网站(二) - renpingsheng</title>
<link>http://www.cnblogs.com/renpingsheng/p/9062166.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/renpingsheng/p/9062166.html</guid>
<description>&lt;h2 id=&quot;安装数据库连接依赖包&quot;&gt;1.安装数据库连接依赖包&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;pip install flask-sqlalchemy&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;创建movie数据库&quot;&gt;2.创建movie数据库&lt;/h2&gt;
&lt;p&gt;在CentOS虚拟机，&lt;code&gt;进入MaridDB数据库提示符，创建movie数据库&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;create database movie&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;定义mariddb数据库连接&quot;&gt;3.定义MaridDB数据库连接&lt;/h2&gt;
&lt;p&gt;在app目录下的&lt;code&gt;__init__.py文件&lt;/code&gt;中添加以下内容&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# _*_coding:utf-8_*_

from flask import Flask, render_template
from flask_sqlalchemy import SQLAlchemy
import pymysql

# 实例化Flask类得到app对象
app = Flask(__name__)

# 定义连接的数据库
app.config['SQLALCHEMY_DATABASE_URI'] = &quot;mysql+pymysql://root:root1234@192.168.81.10:3306/movie&quot;

# 如果设置成True(默认情况),Flask-SQLAlchemy将会追踪对象的修改并且发送信号
# 这需要额外的内存，如果不必要的可以禁用
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True

# 定义secret_key
app.config['SECRET_KEY'] = &quot;6bd749587aad49399f674b202a07d56f&quot;

db = SQLAlchemy(app)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;定义数据模型类&quot;&gt;4.定义数据模型类&lt;/h2&gt;
&lt;p&gt;在app目录下创建models.py文件，文件内容为&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# _*_coding:utf-8_*_

from datetime import datetime
from app import db&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义会员数据模型&quot;&gt;4.1 定义会员数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 会员
class User(db.Model):
    __tablename__ = 'user'      # 定义用户表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)    # 用户编号
    name = db.Column(db.String(100), unique=True)   # 呢称
    pwd = db.Column(db.String(100))     # 密码
    email = db.Column(db.String(100), unique=True)  # 邮箱
    phone = db.Column(db.String(11), unique=True)   # 用户手机号码
    info = db.Column(db.Text)           # 个性简介
    face = db.Column(db.String(255), unique=True)   # 头像
    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 注册时间
    uuid = db.Column(db.String(255), unique=True)   # 唯一标识
    userlogs = db.relationship(&quot;Userlog&quot;, backref='user')       # 会员登录日志外键关系关联
    comments = db.relationship('Comment', backref='user')       # 评论外键关系关联
    moviecols = db.relationship('Moviecol', backref='user')     # 电影收藏外键关系关联

    # 返回定义类型
    def __repr__(self):
        return &quot;&amp;lt;User %r&amp;gt;&quot; % self.name

    # 检测密码，判断用户输入的密码是否与数据库中保存的用户的密码相同
    def check_pwd(self,pwd):
        from werkzeug.security import check_password_hash
        return check_password_hash(self.pwd,pwd)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义会员登录日志数据模型&quot;&gt;4.2 定义会员登录日志数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 会员登录日志
class Userlog(db.Model):
    __tablename__ = 'userlog'        # 定义用户日志表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)    # 编号
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))  # 所属会员编号
    ip = db.Column(db.String(100))                  # 最近登录IP地址
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 最近登录时间

    def __repr__(self):
        return &quot;&amp;lt;Userlog %r&amp;gt;&quot; % self.id&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义标签数据模型&quot;&gt;4.3 定义标签数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 电影标签
class Tag(db.Model):
    __tablename__ = 'tag'              # 定义电影标签表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 电影编号
    name = db.Column(db.String(100), unique=True)  # 标题
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 电影添加时间
    movies = db.relationship(&quot;Movie&quot;, backref='tag')  # 电影外键的键值

    def __repr__(self):
        return &quot;&amp;lt;Tag %r&amp;gt;&quot; % self.name
        &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义电影数据模型&quot;&gt;4.4 定义电影数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 电影
class Movie(db.Model):
    __tablename__ = 'movie'              # 定义电影表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    title = db.Column(db.String(255), unique=True)  # 标题
    url = db.Column(db.String(255), unique=True)  # 地址
    info = db.Column(db.Text)  # 简介
    logo = db.Column(db.String(255), unique=True)  # 封面
    star = db.Column(db.SmallInteger)  # 星级
    playnum = db.Column(db.BigInteger)  # 播放量
    commentnum = db.Column(db.BigInteger)  # 评论量
    tag_id = db.Column(db.Integer, db.ForeignKey('tag.id'))  # 所属标签
    area = db.Column(db.String(255))  # 上映地区
    release_time = db.Column(db.Date)  # 上映时间
    length = db.Column(db.String(100))  # 播放时间
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 添加时间
    comments = db.relationship('Comment', backref='movie')  # 评论外键关系关联
    moviecols = db.relationship('Moviecol', backref='movie')  # 收藏外键关系关联

    def __repr__(self):
        return &quot;&amp;lt;Movie %r&amp;gt;&quot; % self.title&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义上映预告数据模型&quot;&gt;4.5 定义上映预告数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 上映预告
class Preview(db.Model):
    __tablename__ = 'preview'              # 定义电影上映预告表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    title = db.Column(db.String(255), unique=True)  # 标题
    logo = db.Column(db.String(255), unique=True)  # 封面
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 添加时间

    def __repr__(self):
        return &quot;&amp;lt;Preview %r&amp;gt;&quot; % self.title
        &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义电影评论数据模型&quot;&gt;4.6 定义电影评论数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 电影评论
class Comment(db.Model):
    __tablename__ = 'comment'              # 定义电影评论表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    content = db.Column(db.Text)  # 评论内容
    movie_id = db.Column(db.Integer, db.ForeignKey('movie.id'))  # 所属电影
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))  # 所属用户
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 添加时间

    def __repr__(self):
        return '&amp;lt;Comment %r&amp;gt;' % self.id
        &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义电影收藏数据模型&quot;&gt;4.7 定义电影收藏数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 电影收藏
class Moviecol(db.Model):
    __tablename__ = 'moviecol'              # 定义电影收藏表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    movie_id = db.Column(db.Integer, db.ForeignKey('movie.id'))  # 电影编号
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))  # 用户编号
    addtime = db.Column(db.DateTime, index=True, default=datetime)  # 添加收藏时间

    def __repr__(self):
        return &quot;&amp;lt;Moviecol %r&amp;gt;&quot; % self.id
    &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义权限数据模型&quot;&gt;4.8 定义权限数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 权限
class Auth(db.Model):
    __tablename__ = 'auth'              # 定义用户权限表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    name = db.Column(db.String(100), unique=True)  # 权限名称
    url = db.Column(db.String(100), unique=True)  # 地址
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 添加时间

    def __repr__(self):
        return &quot;&amp;lt;Auth %r&amp;gt;&quot; % self.name
    &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义角色数据模型&quot;&gt;4.9 定义角色数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 角色
class Role(db.Model):
    __tablename__ = 'role'              # 定义用户角色表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    name = db.Column(db.String(128), unique=True)  # 角色名称
    auths = db.Column(db.String(512))
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 添加时间
    admins = db.relationship(&quot;Admin&quot;, backref='role')  # 管理员外键关系关联

    def __repr__(self):
        return &quot;&amp;lt;Role %r&amp;gt;&quot; % self.name
    &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义管理员数据模型&quot;&gt;4.10 定义管理员数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 管理员
class Admin(db.Model):
    __tablename__ = 'admin'              # 定义管理员表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    name = db.Column(db.String(100), unique=True)  # 管理员账号
    pwd = db.Column(db.String(100))  # 管理员密码
    is_super = db.Column(db.SmallInteger)  # 是否为超级管理员，0为超级管理员
    role_id = db.Column(db.Integer, db.ForeignKey('role.id'))  # 所属角色
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)
    adminlogs = db.relationship('Adminlog', backref='admin')  # 管理员登录日志外键关系关联
    oplogs = db.relationship('Oplog', backref='admin')  # 管理员操作日志外键关系关联

    def __repr__(self):
        return &quot;&amp;lt;Admin %r&amp;gt;&quot; % self.name

    def check_pwd(self, pwd):
        from werkzeug.security import check_password_hash
        return check_password_hash(self.pwd, pwd)
    &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义管理员登录日志数据模型&quot;&gt;4.11 定义管理员登录日志数据模型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 管理员登录日志
class Adminlog(db.Model):
    __tablename__ = 'adminlog'              # 定义管理员日志表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    admin_id = db.Column(db.Integer, db.ForeignKey('admin.id'))  # 所属管理员
    ip = db.Column(db.String(100))  # 登录IP
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 登录时间

    def __repr__(self):
        return &quot;&amp;lt;Adminlog %r&amp;gt;&quot; % self.id
        &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义用户操作日志&quot;&gt;4.12 定义用户操作日志&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 操作日志
class Oplog(db.Model):
    __tablename__ = 'oplog'              # 定义操作日志表在数据库中的名称
    id = db.Column(db.Integer, primary_key=True)  # 编号
    admin_id = db.Column(db.Integer, db.ForeignKey('admin.id'))  # 所属管理员
    ip = db.Column(db.String(100))  # 登录IP
    reason = db.Column(db.String(600))  # 操作原因
    addtime = db.Column(db.DateTime, index=True, default=datetime.now)  # 登录时间

    def __repr__(self):
        return &quot;&amp;lt;Oplog %r&amp;gt;&quot; % self.id&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;在models.py文件保存所有的模型类&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建数据库&quot;&gt;5. 创建数据库&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;models.py文件&lt;/code&gt;中，&lt;code&gt;定义main函数，在MariaDB数据库中生成前面定义的模型表&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if __name__ == '__main__':
    db.create_all()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;单独执行models.py文件，在MariaDB数据库的movie数据库中创建数据表&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;数据库创建完成，进入&lt;code&gt;MariaDB数据库提示符&lt;/code&gt;，查看创建的数据表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1133627/201805/1133627-20180519235528875-760376203.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 19 May 2018 15:53:00 +0000</pubDate>
<dc:creator>renpingsheng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/renpingsheng/p/9062166.html</dc:identifier>
</item>
<item>
<title>Spring Boot 2.0 教程 - 深入SpringAplication - NNS</title>
<link>http://www.cnblogs.com/hitandrew/p/9062124.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hitandrew/p/9062124.html</guid>
<description>&lt;p&gt;原文连接：&lt;a href=&quot;https://www.codemore.top/cates/Backend/post/2018-05-20/spring-boot-SpringApplication&quot; target=&quot;_blank&quot;&gt;https://www.codemore.top/cates/Backend/post/2018-05-20/spring-boot-SpringApplication&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以通过SpringApplication.run() 方法轻松的启动一个Spring应用，例如&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Java hljs&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;main&lt;span class=&quot;hljs-params&quot;&gt;(String[] args) {
        SpringApplication.run(MySpringConfiguration.class, args);
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Java hljs&quot;&gt;  .   ____          _            __ _ _
 /\\ / ___&lt;span class=&quot;hljs-string&quot;&gt;'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | &lt;span class=&quot;hljs-string&quot;&gt;'_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  &lt;span class=&quot;hljs-string&quot;&gt;'  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::   v2.0.1.RELEASE

2013-07-31 00:08:16.117  INFO 56603 --- [           main] o.s.b.s.app.SampleApplication            : Starting SampleApplication v0.1.0 on mycomputer with PID 56603 (/apps/myapp.jar started by pwebb)
2013-07-31 00:08:16.166  INFO 56603 --- [           main] ationConfigServletWebServerApplicationContext : Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6e5a8246: startup date [Wed Jul 31 00:08:16 PDT 2013]; root of context hierarchy
2014-03-04 13:09:54.912  INFO 41370 --- [           main] .t.TomcatServletWebServerFactory : Server initialized with port: 8080
2014-03-04 13:09:56.501  INFO 41370 --- [           main] o.s.b.s.app.SampleApplication            : Started SampleApplication in 2.992 seconds (JVM running for 3.658)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;默认的Log级别是INFO级别.&lt;/p&gt;
&lt;h5&gt;定制banner&lt;/h5&gt;
&lt;p&gt;banner是在Spring应用启动的时候打印的，如果需要定制banner，可以添加banner.txt到classpath中，或者设置&lt;code&gt;spring.banner.location&lt;/code&gt;属性设置banner的路径。banner默认编码方式是UTF-8，如果不使用UTF-8，可以设置&lt;code&gt;spring.banner.charset&lt;/code&gt;属性设置其编码方式。除了文本文件，也可以使用，banner.gif,banner.jpeg,banner.png等图片文件作为banner，或者设置&lt;code&gt;spring.banner.image.location&lt;/code&gt;属性设置图片banner。图片有Spring转为ASCII输出。 banner.txt 中添加如下占位符&lt;/p&gt;
&lt;p&gt;也可以实现&lt;code&gt;org.springframework.boot.Banner&lt;/code&gt;接口的&lt;code&gt;printBanner()&lt;/code&gt;方法定制Banner，使用SpringApplication.setBanner()设置banner。 配置&lt;code&gt;spring.main.banner-mode&lt;/code&gt;设置是否在控制台显示banner&lt;/p&gt;
&lt;h5&gt;定制SpringApplication&lt;/h5&gt;
&lt;p&gt;可以通过创建自定义的SpringApplication示例来定制SpringApplication，例如&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Java hljs&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;main&lt;span class=&quot;hljs-params&quot;&gt;(String[] args) {
        SpringApplication app = &lt;span class=&quot;hljs-keyword&quot;&gt;new SpringApplication(MySpringConfiguration.class);
        app.setBannerMode(Banner.Mode.OFF);
        app.run(args);
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用builder定制SpringApplication&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Java hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new SpringApplicationBuilder()
                .sources(Parent.class)
                .child(Application.class)
                .bannerMode(Banner.Mode.OFF)
                .run(args);&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h5&gt;应用事件和监听器&lt;/h5&gt;
&lt;p&gt;除了通常的Spring Framework的事件，例如&lt;code&gt;ContextRefreshedEvent&lt;/code&gt;等，&lt;code&gt;SpringApplication&lt;/code&gt;还会发送一些其他的应用时间。 由于一些事件是在ApplicationContext创建之前触发的，因此无法通过@Bean的方式注册这些事件的监听器。可以使用SpringApplication.addListeners() 犯法或者SpringApplicationBuilder.listeners()方法注册监听器。 也可以通过添加&lt;code&gt;META-INF/spring.factories&lt;/code&gt;文件到项目中，自动注册监听器，例如&lt;code&gt;org.springframework.context.ApplicationListener=come.example.project.MyListener&lt;/code&gt; 应用启动后，应用时间按照如下的顺序触发 1. 应用开始运行时触发&lt;code&gt;ApplicationStartingEvent&lt;/code&gt;事件 2. 在ApplicationContext创建之前，Environment可用时触发&lt;code&gt;ApplicationEnvironmentPreparedEvent&lt;/code&gt;事件。 3. bean定义加载后，刷新之前触发&lt;code&gt;ApplicationPreparedEvent&lt;/code&gt;事件 4. context刷新后，command-line runner运行前，触发&lt;code&gt;ApplicationStartedEvent&lt;/code&gt; 5. command-lie runner运行后，触发&lt;code&gt;ApplicationReadyEvent&lt;/code&gt;表示应用可以接受请求了 6. 如果发生异常，触发&lt;code&gt;ApplicationFailedEvent&lt;/code&gt; 应用事件时通过Spring Framework的事件发布机制发送的，这种机制保证了发送给子context的事件同样也会发送给其祖先context。因此如果ApplicationContext时有层次的，可能会收到多个相同的事件，为了区分这些事件，需要应用注入自己的ApplicationContext，当接收事件时判断是否时本层事件再做处理，可以用过继承&lt;code&gt;ApplicationContextAware&lt;/code&gt;注入ApplicationContext，或者如果监听器时一个bean也可以用过@Autowired注入ApplicationContext。&lt;/p&gt;
&lt;h5&gt;Web环境&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;SpringApplication&lt;/code&gt;可以根据配置创建正确的&lt;code&gt;ApplicationContext&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同样也可以使用setApplication(...)完全自己设置ApplicationContext。&lt;/p&gt;
&lt;h5&gt;访问应用参数&lt;/h5&gt;
&lt;p&gt;如果需要访问SpringApplication.run(...)中的args参数，可以通过注入&lt;code&gt;org.springframework.boot.ApplicationArguments&lt;/code&gt; bean访问。接口&lt;code&gt;ApplicationArguments&lt;/code&gt;不仅提供了访问原生参数的String[] ,同样也提供了 option和non-option参数例如&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Java hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.boot.*
&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.beans.factory.annotation.*
&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.stereotype.*

&lt;span class=&quot;hljs-meta&quot;&gt;@Component
&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;MyBean {

        &lt;span class=&quot;hljs-meta&quot;&gt;@Autowired
        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-title&quot;&gt;MyBean&lt;span class=&quot;hljs-params&quot;&gt;(ApplicationArguments args) {
                &lt;span class=&quot;hljs-keyword&quot;&gt;boolean debug = args.containsOption(&lt;span class=&quot;hljs-string&quot;&gt;&quot;debug&quot;);
                List&amp;lt;String&amp;gt; files = args.getNonOptionArgs();
                &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h6&gt;使用ApplicationRunner和CommandLineRunner&lt;/h6&gt;
&lt;p&gt;如果在运行完SpringApplication.run()之后需要运行其他代码，可以通过实现&lt;code&gt;ApplicationRunner&lt;/code&gt;或者&lt;code&gt;CommandLineRunner&lt;/code&gt;接口，这俩接口作用相同，都提供一个run（）的方法，等调用完SpringApplication.run()之后调用，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Java hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.boot.*
&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.stereotype.*

&lt;span class=&quot;hljs-meta&quot;&gt;@Component
&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;MyBean &lt;span class=&quot;hljs-keyword&quot;&gt;implements &lt;span class=&quot;hljs-title&quot;&gt;CommandLineRunner {

        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;run&lt;span class=&quot;hljs-params&quot;&gt;(String... args) {
                &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果定义了多个CommandLineRunner或者ApplicationRunner，则可以通过接口&lt;code&gt;org.springframework.core.Ordered&lt;/code&gt;或者&lt;code&gt;org.springframework.core.annotation.Order&lt;/code&gt;注解提供顺序。&lt;/p&gt;
&lt;h5&gt;应用退出&lt;/h5&gt;
&lt;p&gt;每一个SpringApplication都会注册一个JVM退出的钩子，保证ApplicationContext可以优雅关闭。另外bean可以实现&lt;code&gt;org.springfamework.boot.ExitCodeGenerator&lt;/code&gt;接口当调用SpringApplication.exit()时返回一个特定的返回码，这个返回码可以传递给System.exit()例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Java hljs&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@SpringBootApplication
&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;ExitCodeApplication {

        &lt;span class=&quot;hljs-meta&quot;&gt;@Bean
        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public ExitCodeGenerator &lt;span class=&quot;hljs-title&quot;&gt;exitCodeGenerator&lt;span class=&quot;hljs-params&quot;&gt;() {
                &lt;span class=&quot;hljs-keyword&quot;&gt;return () -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;42;
        }

        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;main&lt;span class=&quot;hljs-params&quot;&gt;(String[] args) {
                System.exit(SpringApplication
                                .exit(SpringApplication.run(ExitCodeApplication.class, args)));
        }

}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</description>
<pubDate>Sat, 19 May 2018 15:40:00 +0000</pubDate>
<dc:creator>NNS</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hitandrew/p/9062124.html</dc:identifier>
</item>
<item>
<title>手把手教你使用 netlify 实现前端的 自动部署 + HTTPS - 大雄的学习人生</title>
<link>http://www.cnblogs.com/codernie/p/9062104.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/codernie/p/9062104.html</guid>
<description>&lt;p&gt;随着开源工具越来越多，特别是nodejs构建微服务器之快，实现前端自动化部署越来越简单了，有可能【10行js代码+10行sh脚本+设置github的webhook】就能实现，但是如果你和我一样，就是“懒”（此处为褒义😆），连这些都不想自己做，那该怎么办呢？这个时候我发现了这款好工具—netlify，下面我就来讲讲它究竟有多好用吧^_^&lt;/p&gt;

&lt;p&gt;一、&lt;strong&gt;使用github或者gitlab登陆netlify&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，打开netlify网站(https://app.netlify.com/)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5AsjqSEuwwLuTiaw2nWZMlG11hZlno61Hujt1o1dTbsPyu7HXLmt21tw/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.53125&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后使用github或者gitlab账号登录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5MlxAVE5Wqeu6WFuib05vS96mmcljApFe6ktGP1lDyyI3xI0cam0TYnA/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.496875&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;二、&lt;strong&gt;根据github/gitlab仓库创建网站&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;点击New site from Git按钮：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5Iy1qiayjXeMJ2CmHDBRibmyB6Uv0UWTOrphKTe7SOJicATjkXicJRVCh5w/640?wx_fmt=png&quot; alt=&quot;&quot; width=&quot;100%&quot; data-ratio=&quot;0.3&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;根据你的仓库所在平台选择，以下三选一：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5vuuAialPKeaqJ6rrzMRtibkG5REj0cUoJcgLjjMgyuhePXZrjwKOAvyg/640?wx_fmt=png&quot; alt=&quot;&quot; width=&quot;100%&quot; data-ratio=&quot;0.11875&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择你需要部署的仓库：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5fabMxMqp4uLichvhVdjpvX8m0D5A77D28ffUcYdG9B5uz1FqyNOpK8g/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.5421875&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;设置部署选项，包括三点：&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;4&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;部署分支（对应下图中 Branch to deploy）:&lt;/p&gt;
&lt;p&gt;顾名思义就是你的git仓库的分支，默认选择为master分支&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;打包命令（对应下图中 Build command）：&lt;/p&gt;
&lt;p&gt;就是你的打包命令，诸如 npm run build，gulp build 之类；如果本身已是静态文件，不需打包编译，这一栏则不填&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;打包后目录（对应下图中 Publish directory）：&lt;/p&gt;
&lt;p&gt;即执行完打包命令之后静态文件所在目录，诸如 dist，_site 之类；如果本身已是静态文件，这一栏则不填&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5MoMoWM6l8r95W2Q0FSfCDZMibSJJVmmJsDP3bQmgjMoAJRxY1sdrBlQ/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;1.2109375&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完成之后点击途中 deploy site 按钮&lt;/p&gt;

&lt;p&gt;三、&lt;strong&gt;设置域名，绑定域名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进行完第二步，我们可以看到自动化部署已经开始运行了，而且过不多久，我们的网站就已经可以利用netlify域名就行访问了，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5SiaWJbSTJqA801PqhvQzKhWh79eGqy4wug1OjLmNK3M7BYpMD2MeSyA/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.528125&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到netlify为我们随机生成了一个netlify下的域名，这里我们可以更改其前缀，并绑定到我们自己的域名下：&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt; 更改netlify域名前缀：&lt;/p&gt;
&lt;p&gt;首先，点击上图中 Site settings 按钮，然后在下方点击 Change site name 按钮，然后在弹出框中输入自己需要更改的前缀名，点击保存即可，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm53OBuIYyK11ibyE6c5eBXK9rCtgdkytMPz6UQic9MzQQslSJYY083w2uw/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.8265625&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt; 绑定到自己的域名下：&lt;/p&gt;
&lt;p&gt;首先，点击上上图中 Domain settings 按钮，然后在下方点击 Add custom domain 按钮，然后在弹出框中输入自己需要绑定的完整域名，点击保存，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5tL9CRwYyOH5DDk2iaaNkbgSCsC6b0JibEpB0TYx0qB9TBoyDQYDGTlOg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.584375&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个时候会显示 ！Check DNS configuration，因为我们还没有设置域名解析到netlify服务器，所以这个时候需要到你自己域名的相应服务商网站登录之后在需要绑定的域名下添加一条CNAME解析，解析的主机记录即对应的netlify域名值（这里即 codernie.netlify.com）&lt;/p&gt;
&lt;p&gt;ok，过一会儿就可以使用自己的域名访问自己的网站啦&lt;/p&gt;

&lt;p&gt;四、&lt;strong&gt;生成HTTPS证书，实现HTTPS访问&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第四部中的Domain settings 中往下拉，可以看到 HTTPS 几个大字母：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5c1iaGicpxZAlqyxFqoGxK36iaUM2aiavZHFo2jur16lj0ShqVBGlReCUibg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.765625&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击 Verify DNS configuration 按钮，待它变成下方绿色按钮之后，再点击：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5d8ynozib1aVfDZVWWtZhbIIPCAwMrdLdeg04RHtjOaLjWevVaNicnjSg/640?wx_fmt=png&quot; alt=&quot;&quot; width=&quot;100%&quot; data-ratio=&quot;0.285124&quot; data-w=&quot;484&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后在弹出框中点击确认，过一会儿之后就可以使用https访问你的小站啦：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5upwiakwa0v7BdND2N2WMN56pQlEcLrMrmFmxAvVFv6pTnkpnYRpVSQQ/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.1168831&quot; data-w=&quot;462&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看到自己的小站前面可以有绿色的安全字样，是不是很酷炫，而且很放心，再也不用担心运营商在自己的网站上挂广告啦，哈哈哈。。。等等，是不是还差了点什么：&lt;/p&gt;
&lt;p&gt;对啊，还没有强制跳转https，OK，继续&lt;/p&gt;

&lt;p&gt;五、&lt;strong&gt;强制HTTP跳转HTTPS访问&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在第四步 Domain settings 再往下翻一点，可以看到 Force HTTPS，只需点击 Force HTTPS 即可实现，是不是很方便，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rZd1wPibx7PemGDbBG4t2OFxn8VuFvxm5baJlA9RpASX7MqZKSFd3Wnxps63Ip1HKYMibNWQKXRZziaPugDNxmeKA/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.784375&quot; data-w=&quot;640&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这里，你的网站即使用户使用http访问，也将强制跳转至https访问啦，这下可以彻底不用担下运营商给你的用户“发红包”啦！&lt;/p&gt;

&lt;p&gt;六、设置redirect&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;利用netlify实现自动化部署和HTTPS就写到这里了，喜欢就点个赞啦。&lt;/p&gt;

</description>
<pubDate>Sat, 19 May 2018 15:31:00 +0000</pubDate>
<dc:creator>大雄的学习人生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/codernie/p/9062104.html</dc:identifier>
</item>
<item>
<title>超越Ctrl+S保存页面所有资源 - JerremyZhang</title>
<link>http://www.cnblogs.com/Johnzhang/p/9061998.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Johnzhang/p/9061998.html</guid>
<description>&lt;h2 id=&quot;基本需求&quot;&gt;基本需求&lt;/h2&gt;
&lt;p&gt;抓取页面所有内容主要包括一下内容：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;页面内元素&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;页面元素包含服务端直接返回的元素，动态构建的元素&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;页面内所有资源&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;页面所有资源包含本页面所在域资源以及第三方域资源，同主域的资源也认为第三方域资源，这种资源一般是以绝对路径的方式标识，同域下资源主要有三种表现方式 （以https://www.baidu.com举例）&lt;/p&gt;
&lt;p&gt;a). 相对路径&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;image&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./image/logo.png&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;b). 绝对路径&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;image&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;https://www.baidu.com/image/logo.png&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;c). 绝对路径2&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;image&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;//www.baidu.com/image/logo.png&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种表示方式会自动根据浏览器打开该页面的协议请求时加入协议（protocol），本地保存后，基于file协议打开同样会加入file:前缀。&lt;/p&gt;
&lt;h2 id=&quot;当前实现方案&quot;&gt;当前实现方案&lt;/h2&gt;
&lt;h3 id=&quot;基本流程&quot;&gt;基本流程&lt;/h3&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li&gt;
&lt;p&gt;服务端http get 页面&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;根据服务端响应的html，遍历需要加载的其它资源，比如javascript、image、css、font、media等资源&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;处理html、javascript、css 等文件，进行资源路径替换，保证页面本地化后能正常打开&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;不足之处&quot;&gt;不足之处&lt;/h3&gt;
&lt;ol readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;http get 只能拿到原始内容，需要依赖后期再浏览器中加载之后的再渲染（比如依赖本地化的js再次请求数据进行页面构建 或者 直接生成dom进行页面构建）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;请求后得到的资源文件依赖原本相对路径，如果处理有较高的技术难度，比如使用AMD、CMD等模式加载的文件。由于当前方案抓取资源时对当前资源目录层次全部铺平了（纵向目录已经不存在了，相对路径也会变化），所以需要动态修改（拿应用了AMD加载模式的页面举例）require.config.js 文件的内容，否则会导致页面js 无法正常加载，页面无法正常渲染。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;对非html页面直接获取的资源，获取的难度较大，这种非html页面直接获取的资源包括，css 文件中引入的字体资源文件以及图片资源文件，js资源文件中引入的资源文件，比如上述2 中描述的AMD、CMD模式实现的按需加载。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;新的实现方案&quot;&gt;新的实现方案&lt;/h2&gt;
&lt;p&gt;puppeteer是操作chromnium的上层node api，当浏览器打开一个页面是，可以简单理解细分为如下过程：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通知浏览器发起请求&lt;/li&gt;
&lt;li&gt;浏览器发起请求&lt;/li&gt;
&lt;li&gt;浏览器获取响应内容&lt;/li&gt;
&lt;li&gt;浏览器把响应内容交给上层渲染引擎&lt;/li&gt;
&lt;li&gt;渲染引擎处理&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在整个过程中，puppeteer提供了一种机制让我们有机会拦截到2和3这两个阶段，基于这点，我们可以做更多的事情，比如我们可以拦截页面的所有请求，可以截获所有的响应，而不用关注请求的去向，因为只要请求发出去了，就能受我们的控制，另外，由于是使用浏览器本身，所以跟直接http get 页面最大的区别在于前者是渲染后的，后者是原始的，前者对SPA或者依靠脚本构建的应用比较友好。&lt;/p&gt;
&lt;p&gt;使用puppeteer实现完全能处理原始方案的不足，新的实现思路如下：&lt;/p&gt;
&lt;ol readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;拦截所有网络请求，对资源请求以及构建dom相关请求进行处理&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;对同域名下资源进行相对路径处理，在本地创建对应的相对路径&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;对不同域名下资源（第三方资源）以第三方域名为名建立新的目录，用来存储第三方资源&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;资源处理，处理html资源，css资源以及javascript文件中绝对路径为相对路径（这里绝对路径是指直接引入的cdn等模式路径，相对路径是指对cdn域名本地化目录后的路径）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;核心代码说明&quot;&gt;核心代码说明&lt;/h2&gt;
&lt;p&gt;基于上述新的方案，实现的核心代码如下，代码中加入了详细的注释，不再做过多解释，有疑问欢迎留言讨论&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;53&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; puppeteer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'puppeteer'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; URL &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'url'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; md5 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'md5'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'fs'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; util &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'util'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'path'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; shell &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'shelljs'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;//资源保存目录&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; BASEDIR &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./asserts/'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; start &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;async&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;//初始化删除清理资源目录，仅测试阶段，因为当前目录为时间戳生成&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;shell&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exec&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'rm -rf asserts/'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//因为所有网络请求都会拦截，处理请求和页面资源以及dom构建无关可忽略&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//下面的域名是比较常见的前端采集域名 (有很多没有列出来的)&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; blackList &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
        &lt;span class=&quot;st&quot;&gt;'collect.ptengine.cn'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;st&quot;&gt;'collect.ptengine.jp'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'js.ptengine.cn'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'js.ptengine.jp'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'hm.baidu.com'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'api.growingio.com'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'www.google-analytics.com'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'script.hotjar.com'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'vars.hotjar.com'&lt;/span&gt;
    ]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//用来缓存第三方资源（包括css、javascript），在请求没有结束之前，无法获取完整的第三方资源列，无法保证css、javascript中内容替换完整，所以先缓存，请求结束后再统一替换&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; resourceBufferMap &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Map&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//第三方资源服务（域名）列表&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; thirdPartyList &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{};&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; browser &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; await &lt;span class=&quot;va&quot;&gt;puppeteer&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;launch&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; await &lt;span class=&quot;va&quot;&gt;browser&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;newPage&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//启用请求拦截&lt;/span&gt;
        await &lt;span class=&quot;va&quot;&gt;page&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setRequestInterception&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;co&quot;&gt;//以博客园为例子进行页面抓取&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;https://www.cnblogs.com&quot;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; docUrl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;parse&lt;/span&gt;(url)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//获取请求地址的域名，用来确定资源是否来自第三方&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; originUrl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;docUrl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;//&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;docUrl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hostname&lt;/span&gt;)
        &lt;span class=&quot;co&quot;&gt;//@fixme 每次抓取生成的内容目录名称&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; md5_prefix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;md5&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;now&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;va&quot;&gt;page&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'request'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;async&lt;/span&gt; (req) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; whitelist &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'image'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'script'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'stylesheet'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'document'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'font'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//如果请求的是第三方域名，只考虑和页面构建相关的资源&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;url&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;indexOf&lt;/span&gt;(originUrl) &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;whitelist&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resourceType&lt;/span&gt;())) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;abort&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//采集黑名单中的内容不处理&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;blackList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;url&lt;/span&gt;()).&lt;span class=&quot;at&quot;&gt;host&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;abort&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;continue&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;


        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;va&quot;&gt;page&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'response'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; async res &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; request &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;request&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                resourceUrl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;request&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;url&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                urlObj &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;parse&lt;/span&gt;(resourceUrl)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                filePath &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;urlObj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//文件路径&lt;/span&gt;
                dirPath &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dirname&lt;/span&gt;(filePath)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//目录路径&lt;/span&gt;
                requestMethod &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;request&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;method&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;toUpperCase&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//请求方法&lt;/span&gt;
                isSameOrigin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;resourceUrl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;includes&lt;/span&gt;(originUrl)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//是否是同域名请求&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//只考虑get请求资源，其它http verb 对文件资源请求较少&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (requestMethod &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'GET'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//如果是同一个域名下的资源，则直接构建目录，下载文件&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//创建路径的方式依据请求本身path结构，保证和原资源网站目录结构完整统一，这样即使有CMD、AMD规范的代码再次执行，require相对路径也不会出现问题。&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; dirPathCreatedIfNotExists&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    filePathCreatedIfNotExists&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; hostname &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;urlObj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (isSameOrigin) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//构建同域名path&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//同域名的资源 有时会以//www.xxx.com/images/logo.png 这种方式使用，所以，对这种资源需要特殊处理&lt;/span&gt;
                    thirdPartyList[&lt;span class=&quot;vs&quot;&gt;`//&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;hostname&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    dirPathCreatedIfNotExists &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;join&lt;/span&gt;(BASEDIR&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; md5_prefix&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; dirPath)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    filePathCreatedIfNotExists &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;join&lt;/span&gt;(BASEDIR&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; md5_prefix&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; filePath)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//第三方资源构建正则表达式，替换http、https、// 三种模式路径为本地目录路径&lt;/span&gt;
                    thirdPartyList[&lt;span class=&quot;vs&quot;&gt;`(https?:)?//&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;hostname&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;hostname&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    dirPathCreatedIfNotExists &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;join&lt;/span&gt;(BASEDIR&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; md5_prefix&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; hostname&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; dirPath)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    filePathCreatedIfNotExists &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;join&lt;/span&gt;(BASEDIR&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; md5_prefix&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; hostname&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; filePath)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//获取扩展名 如果获取不到 则认为不是资源文件&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extname&lt;/span&gt;(filePathCreatedIfNotExists)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//路径不存在，直接创建多级目录&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;existsSync&lt;/span&gt;(dirPathCreatedIfNotExists)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;shell&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exec&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`mkdir -p &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;dirPathCreatedIfNotExists&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'create dir'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ok&lt;/span&gt;()) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; ((isSameOrigin &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; dirPath &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'/'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;isSameOrigin) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; needReplace &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'stylesheet'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'script'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;co&quot;&gt;//@fixme toString 可能会有编码问题&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fileContent &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (await &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;buffer&lt;/span&gt;()).&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;co&quot;&gt;//第三方域名还获取，先缓存再处理&lt;/span&gt;
                            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;needReplace&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;request&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resourceType&lt;/span&gt;())) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;co&quot;&gt;//js css 文件中可能包含需要替换的内容，需要处理&lt;/span&gt;
                                &lt;span class=&quot;co&quot;&gt;//所以暂时缓存不写入文件&lt;/span&gt;
                                &lt;span class=&quot;va&quot;&gt;resourceBufferMap&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;set&lt;/span&gt;(filePathCreatedIfNotExists&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; fileContent)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

                                &lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;writeFileSync&lt;/span&gt;(filePathCreatedIfNotExists&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; await &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;buffer&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        await &lt;span class=&quot;va&quot;&gt;page&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;goto&lt;/span&gt;(url&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'networkidle0'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; content &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; await &lt;span class=&quot;va&quot;&gt;page&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;content&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//对css javascript文件 进行替换处理&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;resourceBufferMap&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;((value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; key) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            value &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;applyReplace&lt;/span&gt;(value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; thirdPartyList)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;writeFileSync&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; value)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

        &lt;span class=&quot;co&quot;&gt;// html 内容处理&lt;/span&gt;
        content &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;applyReplace&lt;/span&gt;(content&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; thirdPartyList)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;writeFileSync&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`./asserts/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;md5_prefix&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;/index.html`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; content)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        await &lt;span class=&quot;va&quot;&gt;page&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;close&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        await &lt;span class=&quot;va&quot;&gt;browser&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;close&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;catch&lt;/span&gt; (error) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(error)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;applyReplace&lt;/span&gt;(origin&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; regList) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; prop &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; regList) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//进行正则全局替换&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; reg &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;RegExp&lt;/span&gt;(prop&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'g'&lt;/span&gt;)
        origin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;origin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;replace&lt;/span&gt;(reg&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; regList[prop])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; origin&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;at&quot;&gt;start&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;上述方案能解决几乎所有原始方案无法解决的问题，但是也并非十全十美，首选，相比原始方案，增加了渲染的步骤，所以性能有所下降；其次如果用户网站比较特殊，比如https://www.xxx.com/admin 这个路径下资源，比如某css文件中有如下写法：'background:url('./xxx.bg.png')' ，这时路径会找不到，因为在资源路径替换阶段，会替换为hostname，即查找资源是会去根目录去找，导致路径not found，不过这有其它改进的方案，比如可以把同域名的路径做的更灵活一点，可以让接口消费者修改。&lt;/p&gt;
</description>
<pubDate>Sat, 19 May 2018 14:59:00 +0000</pubDate>
<dc:creator>JerremyZhang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Johnzhang/p/9061998.html</dc:identifier>
</item>
<item>
<title>特征工程之特征表达 - 刘建平Pinard</title>
<link>http://www.cnblogs.com/pinard/p/9061549.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pinard/p/9061549.html</guid>
<description>&lt;p&gt;          在&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/pinard/p/9032759.html&quot;&gt;特征工程之特征选择&lt;/a&gt;中，我们讲到了特征选择的一些要点。本篇我们继续讨论特征工程，不过会重点关注于特征表达部分，即如果对某一个特征的具体表现形式做处理。主要包括缺失值处理，特殊的特征处理比如时间和地理位置处理，离散特征的连续化和离散化处理，连续特征的离散化处理几个方面。&lt;/p&gt;

&lt;p&gt;          特征有缺失值是非常常见的，大部分机器学习模型在拟合前需要所有的特征都有值，不能是空或者NULL。那么如果有缺失值我们需要怎么处理呢？&lt;/p&gt;
&lt;p&gt;　　   首先我们会看是该特征是连续值还是离散值。如果是连续值，那么一般有两种选择，一是选择所有有该特征值的样本，然后取平均值，来填充缺失值，另一种是取中位数来填充缺失值。如果是离散值，则一般会选择所有有该特征值的样本中最频繁出现的类别值，来填充缺失值。在sklearn中，可以使用preprocessing.Imputer来选择这三种不同的处理逻辑做预处理。&lt;/p&gt;

&lt;p&gt; 　　有些特征的默认取值比较特殊，一般需要做了处理后才能用于算法。比如日期时间，比如显示20180519，这样的值一般没办法直接使用。那么一般需要如何变换呢？&lt;/p&gt;
&lt;p&gt;        对于时间原始特征，处理方法有很多，这里只举例几种有代表性的方法。　第一种是使用连续的时间差值法，即计算出所有样本的时间到某一个未来时间之间的数值差距，这样这个差距是UTC的时间差，从而将时间特征转化为连续值。第二种方法是根据时间所在的年，月，日，星期几，小时数，将一个时间特征转化为若干个离散特征，这种方法在分析具有明显时间趋势的问题比较好用。第三种是权重法，即根据时间的新旧得到一个权重值。比如对于商品，三个月前购买的设置一个较低的权重，最近三天购买的设置一个中等的权重，在三个月内但是三天前的设置一个较大的权重。当然，还有其他的设置权重的方法，这个要根据要解决的问题来灵活确定。&lt;/p&gt;
&lt;p&gt;       对地理特征，比如“广州市天河区XX街道XX号”，这样的特征我们应该如何使用呢？处理成离散值和连续值都是可以的。如果是处理成离散值，则需要转化为多个离散特征，比如城市名特征，区县特征，街道特征等。但是如果我们需要判断用户分布区域，则一般处理成连续值会比较好，这时可以将地址处理成经度和纬度的连续特征。&lt;/p&gt;

&lt;p&gt;　　  有很多机器学习算法只能处理连续值特征，不能处理离散值特征，比如线性回归，逻辑回归等。那么想使用逻辑回归，线性回归时这些值只能丢弃吗？当然不是。我们可以将离散特征连续化处理。&lt;/p&gt;
&lt;p&gt;　　 最常见的离散特征连续化的处理方法是独热编码one-hot encoding。处理方法其实比较简单，比如某特征的取值是高，中和低，那么我们就可以创建三个取值为0或者1的特征，将高编码为1,0,0这样三个特征，中编码为0,1,0这样三个特征，低编码为0,0,1这样三个特征。也就是说，之前的一个特征被我们转化为了三个特征。sklearn的OneHotEncoder可以帮我们做这个处理。&lt;/p&gt;
&lt;p&gt;　　 第二个方法是特征嵌入embedding。这个一般用于深度学习中。比如对于用户的ID这个特征，如果要使用独热编码，则维度会爆炸，如果使用特征嵌入就维度低很多了。对于每个要嵌入的特征，我们会有一个特征嵌入矩阵，这个矩阵的行很大，对应我们该特征的数目。比如用户ID，如果有100万个，那么嵌入的特征矩阵的行就是100万。但是列一般比较小，比如可以取20。这样每个用户ID就转化为了一个20维的特征向量。进而参与深度学习模型。在tensorflow中，我们可以先随机初始化一个特征嵌入矩阵，对于每个用户，可以用tf.nn.embedding_lookup找到该用户的特征嵌入向量。特征嵌入矩阵会在反向传播的迭代中优化。&lt;/p&gt;
&lt;p&gt;　　 此外，在自然语言处理中，我们也可以用word2vec将词转化为词向量，进而可以进行一些连续值的后继处理。&lt;/p&gt;

&lt;p&gt;　　 离散特征有时间也不能直接使用，需要先进行转化。比如最常见的，如果特征的取值是高，中和低，那么就算你需要的是离散值，也是没法直接使用的。&lt;/p&gt;
&lt;p&gt;　　 对于原始的离散值特征，最常用的方法也是独热编码，方法在第三节已经讲到。&lt;/p&gt;
&lt;p&gt;　　 第二种方法是虚拟编码dummy coding，它和独热编码类似，但是它的特点是，如果我们的特征有N个取值，它只需要N-1个新的0,1特征来代替，而独热编码会用N个新特征代替。比如一个特征的取值是高，中和低，那么我们只需要两位编码，比如只编码中和低，如果是1，0则是中，0,1则是低。0,0则是高了。目前虚拟编码使用的没有独热编码广，因此一般有需要的话还是使用独热编码比较好。&lt;/p&gt;
&lt;p&gt;　　 此外，有时候我们可以对特征进行研究后做一个更好的处理。比如，我们研究商品的销量对应的特征。里面有一个原始特征是季节春夏秋冬。我们可以将其转化为淡季和旺季这样的二值特征，方便建模。当然有时候转化为三值特征或者四值特征也是可以的。&lt;/p&gt;
&lt;p&gt;　　 对于分类问题的特征输出，我们一般需要用sklearn的LabelEncoder将其转化为0,1,2，...这样的类别标签值。&lt;/p&gt;

&lt;p&gt;　　 对于连续特征，有时候我们也可以将其做离散化处理。这样特征变得高维稀疏，方便一些算法的处理。&lt;/p&gt;
&lt;p&gt;　　 对常用的方法是根据阈值进行分组，比如我们根据连续值特征的分位数，将该特征分为高，中和低三个特征。将分位数从0-0.3的设置为高，0.3-0.7的设置为中，0.7-1的设置为高。&lt;/p&gt;
&lt;p&gt;　　 当然还有高级一些的方法。比如使用GBDT。在LR+GBDT的经典模型中，就是使用GDBT来先将连续值转化为离散值。那么如何转化呢？比如我们用训练集的所有连续值和标签输出来训练GBDT，最后得到的GBDT模型有两颗决策树，第一颗决策树有三个叶子节点，第二颗决策树有4个叶子节点。如果某一个样本在第一颗决策树会落在第二个叶子节点，在第二颗决策树落在第4颗叶子节点，那么它的编码就是0,1,0,0,0,0,1，一共七个离散特征，其中会有两个取值为1的位置，分别对应每颗决策树中样本落点的位置。在sklearn中，我们可以用GradientBoostingClassifier的 apply方法很方便的得到样本离散化后的特征，然后使用独热编码即可。 &lt;/p&gt;
&lt;p&gt;         具体的一个示例代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; sklearn.datasets &lt;span&gt;import&lt;/span&gt;&lt;span&gt; make_classification
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.model_selection &lt;span&gt;import&lt;/span&gt;&lt;span&gt; train_test_split
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.ensemble &lt;span&gt;import&lt;/span&gt;&lt;span&gt; GradientBoostingClassifier
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; OneHotEncoder
X, y &lt;/span&gt;= make_classification(n_samples=10&lt;span&gt;)  
X_train, X_test, y_train, y_test &lt;/span&gt;= train_test_split(X, y, test_size=0.5&lt;span&gt;)
gbc &lt;/span&gt;= GradientBoostingClassifier(n_estimators=2&lt;span&gt;)
one_hot &lt;/span&gt;=&lt;span&gt; OneHotEncoder()
gbc.fit(X_train, y_train)
X_train_new &lt;/span&gt;=&lt;span&gt; one_hot.fit_transform(gbc.apply(X_train)[:, :, 0])
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (X_train_new.todense())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       输出是：&lt;/p&gt;
&lt;pre&gt;
[[0. 1. 1. 0.]
 [1. 0. 0. 1.]
 [1. 0. 0. 1.]
 [1. 0. 0. 1.]
 [0. 1. 1. 0.]]
&lt;/pre&gt;

&lt;p&gt;       本文总结了特征表达的一些具体方法， 但是特征表达的方法便不止于上文中的方法，毕竟这是工程实践。但是上文中的方法是比较普遍的，希望可以给大家一些帮助和启发。 下一篇我们讨论特征预处理和分类类别不平衡的问题处理。&lt;/p&gt;

&lt;p&gt;（欢迎转载，转载请注明出处。欢迎沟通交流： liujianping-ok@163.com）      　　　　　　　&lt;/p&gt;
</description>
<pubDate>Sat, 19 May 2018 14:39:00 +0000</pubDate>
<dc:creator>刘建平Pinard</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pinard/p/9061549.html</dc:identifier>
</item>
<item>
<title>springMVC引入Validation详解 - 倒骑的驴</title>
<link>http://www.cnblogs.com/daoqidelv/p/9061862.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/daoqidelv/p/9061862.html</guid>
<description>&lt;p&gt;本文简单介绍如何引入validation的步骤，如何通过自定义validation减少代码量，提高生产力。特别提及：非基本类型属性的valid，GET方法的处理，validation错误信息的统一resolve。&lt;/p&gt;
&lt;p&gt;本文中validation的实际实现委托给Hibernate validation处理&lt;/p&gt;
&lt;h2&gt;基本配置&lt;/h2&gt;
&lt;h3&gt;pom引入maven依赖&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- validation begin --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;javax.validation&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;validation-api&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.1.0.Final&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;hibernate-validator&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.4.0.Final&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- validation end --&amp;gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3&gt;增加validation配置&lt;/h3&gt;
&lt;p&gt;在spring-mvc-servlet.xml中增加如下配置:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;pre&gt;
&amp;lt;mvc:annotation-driven validator=&quot;validator&quot;&amp;gt;

&amp;lt;bean id=&quot;validator&quot; class=&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;&amp;gt;
    &amp;lt;property name=&quot;providerClass&quot; value=&quot;org.hibernate.validator.HibernateValidator&quot; /&amp;gt;
    &amp;lt;property name=&quot;validationMessageSource&quot; ref=&quot;messageSource&quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
 
//messageSource 为i18n资源管理bean，见applicationContext.xml配置
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3&gt;自定义exceptionHandler&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;个性化处理validation错误信息,返回给调用方的信息更加友好，&lt;/span&gt;在applicationContext.xml中增加如下配置:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;pre&gt;
&amp;lt;!--  加载i18n消息资源文件 --&amp;gt;
&amp;lt;bean id=&quot;messageSource&quot;  class=&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;&amp;gt;
    &amp;lt;property name=&quot;basenames&quot;&amp;gt;
        &amp;lt;list&amp;gt;
            &amp;lt;value&amp;gt;errormsg&amp;lt;/value&amp;gt;
            &amp;lt;value&amp;gt;validation_error&amp;lt;/value&amp;gt;
        &amp;lt;/list&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean id=&quot;validationExceptionResolver&quot; class=&quot;com.*.exception.ValidationExceptionResovler&quot;/&amp;gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;在项目类路径上增加：validation_error_zh_CN.properties资源文件：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;pre&gt;
#the error msg for input validation&lt;br/&gt;#common
field.can.not.be.null={field}不能为空
field.can.not.be.empty={field}不能为空或者空字符串
field.must.be.greater.than.min={field}不能小于{value}
field.must.be.letter.than.max={field}不能大于{value}
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;pre&gt;
ValidationExceptionResovler实现：
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3509fe04-5f91-4052-adff-c5c04af82686')&quot; readability=&quot;41.5&quot;&gt;&lt;img id=&quot;code_img_closed_3509fe04-5f91-4052-adff-c5c04af82686&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3509fe04-5f91-4052-adff-c5c04af82686&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3509fe04-5f91-4052-adff-c5c04af82686',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3509fe04-5f91-4052-adff-c5c04af82686&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Slf4j
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ValidationExceptionResovler &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractHandlerExceptionResolver {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ValidationExceptionResovler() {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置order，在DefaultHandlerExceptionResolver之前执行&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.setOrder(0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;     * Handle the case where an argument annotated with {&lt;/span&gt;&lt;span&gt;@code&lt;/span&gt;&lt;span&gt; @Valid} such as
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;     * an {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; } or {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; } argument fails validation.
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;     * &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;     * 自定义ValidationException 异常处理器
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;     * 获取到具体的validation 错误信息，并组装CommonResponse，返回给调用方。
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; request  current HTTP request
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; response current HTTP response
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; handler  the executed handler
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; an empty ModelAndView indicating the exception was handled
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IOException potentially thrown from response.sendError()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; ModelAndView handleMethodArgumentNotValidException(BindingResult bindingResult,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                                                                 HttpServletRequest request,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                                                                 HttpServletResponse response,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                                                                 Object handler)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;         List&amp;lt;ObjectError&amp;gt; errors =&lt;span&gt; bindingResult.getAllErrors();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         StringBuffer errmsgBF = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (ObjectError error : errors) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             String massage =&lt;span&gt; error.getDefaultMessage();
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            errmsgBF.append(massage);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             errmsgBF.append(&quot;||&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         String errmsgString =&lt;span&gt; errmsgBF.toString();
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         errmsgString = errmsgString.length() &amp;gt; 2 ? errmsgString.substring(0, errmsgString.length() - 2&lt;span&gt;) : errmsgString;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         log.error(&quot;Validation failed! {} &quot;&lt;span&gt;, errmsgString);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;         Map&amp;lt;String, Object&amp;gt; map = &lt;span&gt;new&lt;/span&gt; TreeMap&amp;lt;String, Object&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         map.put(&quot;success&quot;, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         map.put(&quot;errorCode&quot;, &quot;9999&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         map.put(&quot;errorMsg&quot;&lt;span&gt;, errmsgString);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;         ModelAndView mav = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelAndView();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         MappingJackson2JsonView view = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MappingJackson2JsonView();
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        view.setAttributesMap(map);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        mav.setView(view);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; mav;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; ModelAndView doResolveException(HttpServletRequest request,
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;                                              HttpServletResponse response, Object handler,
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;                                              Exception ex) {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         BindingResult bindingResult = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (ex &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; MethodArgumentNotValidException) {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;             bindingResult =&lt;span&gt; ((MethodArgumentNotValidException) ex).getBindingResult();
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(ex &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; BindException) {
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;             bindingResult =&lt;span&gt; ((BindException) ex).getBindingResult();
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;other exception , ignore&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; 
&lt;span&gt;65&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(bindingResult != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; handleMethodArgumentNotValidException(bindingResult, request, response, handler);
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;                 log.error(&quot;doResolveException: &quot;&lt;span&gt;, e);
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; 
&lt;span&gt;73&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ValidationExceptionResovler.java&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;在controller中增加@Valid&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
@RequestMapping(&quot;/buy&quot;&lt;span&gt;)
@ResponseBody
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; BaseResponse buy(@RequestBody @Valid BuyFlowerRequest request) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;......&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在request bean上为需要validation的属性增加validation注解&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@Setter
@Getter
public class BuyFlowerRequest {

    @NotEmpty(message = &quot;{name.can.not.be.null}&quot;) &lt;br/&gt;private String name;&lt;br/&gt;} 
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;二级对象的validation&lt;/h2&gt;
&lt;p&gt;上面的写法，只能对BuyFlowerRequest在基本类型属性上做校验,但是没有办法对对象属性的属性进行validation,如果需要对二级对象的属性进行validation,则需要在二级对象及二级对象属性上同时添加@Valid 和 具体的validation注解.&lt;/p&gt;
&lt;p&gt;如下写法:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1c8117cd-a740-45d8-a9d5-ed51c288afdb')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_1c8117cd-a740-45d8-a9d5-ed51c288afdb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1c8117cd-a740-45d8-a9d5-ed51c288afdb&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1c8117cd-a740-45d8-a9d5-ed51c288afdb',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1c8117cd-a740-45d8-a9d5-ed51c288afdb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Setter
@Getter
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BuyFlowerRequest {

    @NotEmpty(field &lt;/span&gt;= &quot;花名&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;

    @Min(field &lt;/span&gt;= &quot;价格&quot;, value = 1&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; price;

    @NotNull
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;PayType&amp;gt;&lt;span&gt; payTypeList;

} 

@Setter
@Getter
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PayType {

    @Valid
    @Min(value &lt;/span&gt;= 1&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; payType;

    @Valid
    @Min(value &lt;/span&gt;= 1&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; payAmount;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt; &lt;/div&gt;
&lt;h2&gt;进一步减少编码量&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;为了减少编码工作量,通过自定义Validation注解,尝试将validation作用的filed名称传递到 错误信息的资源文件中,从而避免为每个域编写不同的message模版.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下面以重写的@NotNull为例讲解:&lt;/p&gt;
&lt;p&gt;1、定义Validation注解,注意相比原生注解增加了field(),用于传递被validated的filed名字&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('26503447-25f3-4ea6-9690-8c3da66a5ee5')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_26503447-25f3-4ea6-9690-8c3da66a5ee5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_26503447-25f3-4ea6-9690-8c3da66a5ee5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('26503447-25f3-4ea6-9690-8c3da66a5ee5',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_26503447-25f3-4ea6-9690-8c3da66a5ee5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Target( { ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER })
@Constraint(validatedBy &lt;/span&gt;= { NotNullValidator.&lt;span&gt;class&lt;/span&gt;&lt;span&gt; })
@Retention(RetentionPolicy.RUNTIME)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; NotNull {

    String field() &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &quot;&quot;&lt;span&gt;;

    String message() &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &quot;{field.can.not.be.null}&quot;&lt;span&gt;;

    Class&lt;/span&gt;&amp;lt;?&amp;gt;[] groups() &lt;span&gt;default&lt;/span&gt;&lt;span&gt; {};

    Class&lt;/span&gt;&amp;lt;? &lt;span&gt;extends&lt;/span&gt; Payload&amp;gt;[] payload() &lt;span&gt;default&lt;/span&gt;&lt;span&gt; {};
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;NotNull.java&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;2、定义Validator,所有的Validator均实现ConstraintValidator接口:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8652f8e4-81e7-4a3c-af44-907316e83127')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_8652f8e4-81e7-4a3c-af44-907316e83127&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8652f8e4-81e7-4a3c-af44-907316e83127&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8652f8e4-81e7-4a3c-af44-907316e83127',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8652f8e4-81e7-4a3c-af44-907316e83127&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NotNullValidator &lt;span&gt;implements&lt;/span&gt; ConstraintValidator&amp;lt;NotNull, Object&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initialize(NotNull annotation) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isValid(Object str, ConstraintValidatorContext constraintValidatorContext) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; str != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;NotNullValidator.java&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;3、在filed上加入Validation注解,注意指定filed值,message如果没有个性化需求，可以不用指明，validation组件会自行填充default message。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8e46a364-07c2-4ba9-b142-54956c4ec3c0')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_8e46a364-07c2-4ba9-b142-54956c4ec3c0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8e46a364-07c2-4ba9-b142-54956c4ec3c0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8e46a364-07c2-4ba9-b142-54956c4ec3c0',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8e46a364-07c2-4ba9-b142-54956c4ec3c0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Setter
@Getter
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BuyFlowerRequest {

    @NotEmpty(field &lt;/span&gt;= &quot;花名&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;

    @Min(field &lt;/span&gt;= &quot;价格&quot;, value = 1&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; price;

} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;BuyFlowerRequest.java&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;注：@NotNull注解已经支持对list的特殊校验，对于List类型节点，如果list==null || list.size() == 0都会返回false，validation失败。目前已按照此思路自定义实现了@NotNull、@NotEmpty、@Min、@Max注解,在goods工程中可以找到.&lt;/p&gt;
&lt;h2&gt;支持GET请求&lt;/h2&gt;
&lt;p&gt;上面的示例都是POST请求，@RequestBody可以 resolve POST请求，但是不支持GET请求，阅读spring的文档和源码，发现@ModelAttribute可以将GET请求resolve成Bean，且支持Validation。具体可以翻阅spring源码：ModelAttributeMethodProcessor.resolveArgument()方法。&lt;/p&gt;
&lt;p&gt;使用示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e5f849b2-cdcf-4609-9bc5-001e89d35f82')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_e5f849b2-cdcf-4609-9bc5-001e89d35f82&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e5f849b2-cdcf-4609-9bc5-001e89d35f82&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e5f849b2-cdcf-4609-9bc5-001e89d35f82',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e5f849b2-cdcf-4609-9bc5-001e89d35f82&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
@RequestMapping(value = &quot;/buy&quot;, method =&lt;span&gt; RequestMethod.GET)
@ResponseBody
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; BaseResponse detail(@Valid @ModelAttribute DetailFlowerRequest request) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {

    DetailFlowerResponse response &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DetailFlowerResponse();
    response.setName(request.getName());

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ResultFactory.success(response, BaseResponse.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;TODO&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1、根据业务场景扩展validation,如:日期格式、金额等&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、支持多个field关系校验的validation&lt;/p&gt;
&lt;h2&gt; 附：spring validation实现关键代码&lt;/h2&gt;
&lt;p&gt;@RequestBody&lt;/p&gt;
&lt;p&gt;实现类：RequestResponseBodyMethodProcessor.java&lt;/p&gt;
&lt;blockquote readability=&quot;21&quot;&gt;
&lt;pre readability=&quot;7&quot;&gt;
public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {&lt;br/&gt;Object arg = this.readWithMessageConverters(webRequest, parameter, parameter.getGenericParameterType());&lt;br/&gt;String name = Conventions.getVariableNameForParameter(parameter);&lt;br/&gt;WebDataBinder binder = binderFactory.createBinder(webRequest, arg, name);&lt;br/&gt;if (arg != null) {&lt;br/&gt;&lt;strong&gt;this.validateIfApplicable(binder, parameter);&lt;/strong&gt;&lt;br/&gt;if (binder.getBindingResult().hasErrors() &amp;amp;&amp;amp; this.isBindExceptionRequired(binder, parameter)) {&lt;br/&gt;throw new MethodArgumentNotValidException(parameter, binder.getBindingResult());&lt;br/&gt;}&lt;br/&gt;}&lt;p&gt;mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());&lt;br/&gt;return arg;&lt;br/&gt;}
&lt;/p&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;@ModelAttibute&lt;/p&gt;
&lt;p&gt;实现类：ModelAttributeMethodProcessor.java&lt;/p&gt;
&lt;blockquote readability=&quot;31.5&quot;&gt;
&lt;pre readability=&quot;22&quot;&gt;
public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {&lt;br/&gt;String name = ModelFactory.getNameForParameter(parameter);&lt;br/&gt;Object attribute = mavContainer.containsAttribute(name) ? mavContainer.getModel().get(name) : this.createAttribute(name, parameter, binderFactory, webRequest);&lt;br/&gt;if (!mavContainer.isBindingDisabled(name)) {&lt;br/&gt;ModelAttribute ann = (ModelAttribute)parameter.getParameterAnnotation(ModelAttribute.class);&lt;br/&gt;if (ann != null &amp;amp;&amp;amp; !ann.binding()) {&lt;br/&gt;mavContainer.setBindingDisabled(name);&lt;br/&gt;}&lt;br/&gt;}&lt;p&gt;WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);&lt;br/&gt;if (binder.getTarget() != null) {&lt;br/&gt;if (!mavContainer.isBindingDisabled(name)) {&lt;br/&gt;this.bindRequestParameters(binder, webRequest);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;strong&gt; this.validateIfApplicable(binder, parameter);&lt;/strong&gt;&lt;br/&gt;if (binder.getBindingResult().hasErrors() &amp;amp;&amp;amp; this.isBindExceptionRequired(binder, parameter)) {&lt;br/&gt;throw new BindException(binder.getBindingResult());&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;Map&amp;lt;String, Object&amp;gt; bindingResultModel = binder.getBindingResult().getModel();&lt;br/&gt;mavContainer.removeAttributes(bindingResultModel);&lt;br/&gt;mavContainer.addAllAttributes(bindingResultModel);&lt;br/&gt;return binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);&lt;br/&gt;}
&lt;/p&gt;&lt;/pre&gt;&lt;/blockquote&gt;

</description>
<pubDate>Sat, 19 May 2018 14:33:00 +0000</pubDate>
<dc:creator>倒骑的驴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/daoqidelv/p/9061862.html</dc:identifier>
</item>
<item>
<title>一次数组越界的bug经历 - Andrew_qian</title>
<link>http://www.cnblogs.com/qsyll0916/p/9061841.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qsyll0916/p/9061841.html</guid>
<description>&lt;p&gt;数组和指针都是C里面的好东西，但是一旦使用不当，真的会让人抓狂。&lt;/p&gt;
&lt;p&gt;下面是写程序时遇到的一次数组越界的经历，感觉对以后写程序有点启发，所以记录下来。&lt;/p&gt;

&lt;h2&gt;起因：&lt;/h2&gt;
&lt;p&gt;我想用OLED动态显示一组浮点数，而且浮点数的长度是不定的。&lt;/p&gt;
&lt;h3&gt;1、如果只是单纯的显示，没有消隐的话，上一次的长数的据残留会影响下一次短长度数据的显示。&lt;/h3&gt;
&lt;h3&gt;2、如果显示一次就清空一次显示区域的话，数据会一直抖动，一开始以为是我刷新频率不够，故把刷新频率由100HZ改为1000HZ，但是效果还是和之前一样！&lt;/h3&gt;
&lt;h3&gt;后来想想也是，不管我把刷新频率改为多少，清空后的空白和显示的数据都是相同的频率。1000hz显示数据，那么也是1000hz的空白。所以会抖动严重。&lt;/h3&gt;
&lt;h3&gt;3、把数据的每一位都取出来单独显示，但是这样就又带来了数据对齐的问题。不爽，不好看，弃之。&lt;/h3&gt;
&lt;h3&gt;4、使用sprintf格式化需要显示的数据为字符串。然后用OLED的显示字符串的方式显示。&lt;/h3&gt;

&lt;p&gt;于是有了下面这样的程序：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
    sprintf((&lt;span&gt;char&lt;/span&gt; *)weight_string,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%.1f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,weight);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;格式化为字符串&lt;/span&gt;
    Clear_Left_Num(money_string);                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;消除残余&lt;/span&gt;
    OLED_Show_String(&lt;span&gt;42&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,weight_string);

    sprintf((&lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *)price_string,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,price);
    Clear_Left_Num(money_string);
    OLED_Show_String(&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,price_string);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段程序在定时器中断函数中调用。weight 和 price 就是我想显示的浮点数。&lt;/p&gt;
&lt;p&gt;先格式化为字符串，然后显示。OLED_Show_String() 的前两个参数是字符的起始显示坐标。&lt;/p&gt;
&lt;p&gt;Clear_Left_Num 函数如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; Clear_Left_Num(unsigned &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;num_string)
{
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(*num_string != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        num_string&lt;/span&gt;++&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一位小数点后面的数据用空格刷新&lt;/span&gt;
    *(num_string+&lt;span&gt;2&lt;/span&gt;) = &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;*(num_string+&lt;span&gt;3&lt;/span&gt;) = &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;*(num_string+&lt;span&gt;4&lt;/span&gt;) = &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;思路就是把小数点后一位后面的残余数据用空格刷新。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是实验现象是在显示完第一行数据之后，本来应该在第二行显示第二个数据，但是他 在第一行数据的后面又显示了第二行的数据！！也就是说第二行数据显示了两次。&lt;/p&gt;
&lt;p&gt;为什么会显示两次呢？我程序中就写了一次啊、、、&lt;/p&gt;

&lt;h2&gt;分析：&lt;/h2&gt;
&lt;p&gt;既然是显示的问题，那就先看看这个显示函数！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;----------------------------------
**函数名称：OLED_Show_String
**功能描述：光标处显示字符串，字符串可以用数组表示，unsigned char string_2[] = {&quot;THIS IS A TEST  &quot;};
**参数说明：X,Y为坐标
            * chr：字符串首地址
**作者：Andrew
**日期：2018.1.24
-----------------------------------&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; OLED_Show_String(u8 x, u8 y, u8 *&lt;span&gt;chr)
{
    u8 j&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (chr[j]!=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    {
        OLED_ShowChar(x,y,chr[j]);

        x&lt;/span&gt;+= &lt;span&gt;8&lt;/span&gt;&lt;span&gt; ;

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(x&amp;gt;&lt;span&gt;120&lt;/span&gt;){x=&lt;span&gt;0&lt;/span&gt;;y+=&lt;span&gt;2&lt;/span&gt;;}  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;自动换行写&lt;/span&gt;
&lt;span&gt;
        j&lt;/span&gt;++&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;原来这个函数会在数组结束之前，显示数组的全部内容。因为数组的最后一个结尾标志是  &lt;span&gt;&lt;strong&gt;'\0’&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么，上面第一行一直在显示，&lt;strong&gt;说明他可能没有遇到数组结束标识符。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;查看数组定义的大小：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
unsigned &lt;span&gt;char&lt;/span&gt; weight_string[&lt;span&gt;7&lt;/span&gt;] = {&lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; price_string[&lt;span&gt;3&lt;/span&gt;] = {&lt;span&gt;0&lt;/span&gt;};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;原来 weight_string 数组的最后一个结束标志被我赋值成了空格。那么他就会一直读取存储在这个数组后面的内存数据，并且给显示出来。也就是所谓的“数组越界”。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;幸好我们只是读取显示，并没有改写这个数据！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;既然他显示的是第二行的数据，说明第二行的数据就是存储在在这个数组后面的内存中。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;查看编译器生成的map文件：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1083998/201805/1083998-20180519220338786-270080841.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;果然，第二个数组紧邻着第一个数组存储。&lt;/h3&gt;
&lt;p&gt;第一个数组读取越界之后，读到了第二个数组。&lt;/p&gt;
&lt;p&gt;到此，问题解决。&lt;/p&gt;

&lt;h2&gt;总结：&lt;/h2&gt;
&lt;p&gt;一定要看到程序的内在联系。分析内存虽然困难，但是却是找到烦人bug 的捷径。&lt;/p&gt;

</description>
<pubDate>Sat, 19 May 2018 14:10:00 +0000</pubDate>
<dc:creator>Andrew_qian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qsyll0916/p/9061841.html</dc:identifier>
</item>
<item>
<title>2.Spring构建REST Web Service - 星云博客园</title>
<link>http://www.cnblogs.com/xingyunblog/p/9060596.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xingyunblog/p/9060596.html</guid>
<description>&lt;p&gt;上篇文章我们已经对Spring 已经有了一个初步的认识，接下来本篇文章我们将继续一起在官网学习新技术。 原文地址：&lt;a href=&quot;https://spring.io/guides/gs/rest-service/&quot; target=&quot;_blank&quot;&gt;https://spring.io/guides/gs/rest-service/&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;本指南指导您使用Spring创建一个“Hello World”REST Web Service 的过程。&lt;/p&gt;

&lt;p&gt;Tips: 上面已经提到，我们将使用Spring创建一个“Hello World”REST Web服务的过程，但是最终的效果是什么样呢？&lt;/p&gt;
&lt;p&gt;我们将构建一个接受HTTP GET请求的服务：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:8080/greeting&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们发出上面的Http Get 请求后，会响应返回下面的JSON 内容。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
{&quot;id&quot;:1,&quot;content&quot;:&quot;Hello, World!&quot;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们也可以带一个参数进行请求&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:8080/greeting?name=User&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;strong&gt;Name&lt;/strong&gt;参数值重写“Word”的默认值，并反映在响应中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
{&quot;id&quot;:1,&quot;content&quot;:&quot;Hello, User!&quot;}
&lt;/pre&gt;&lt;/div&gt;

&lt;ul readability=&quot;0&quot;&gt;&lt;li&gt;
&lt;p&gt;大约十五分钟&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;一个喜欢的文本编辑器或者IDE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;JDK 1.8&lt;/a&gt; or later&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.24&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.gradle.org/downloads&quot;&gt;Gradle 4+&lt;/a&gt; or &lt;a href=&quot;https://maven.apache.org/download.cgi&quot;&gt;Maven 3.2+&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.6&quot;&gt;
&lt;p&gt;You can also import the code straight into your IDE:&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;像大多数Spriing 入门指南一样，你可以从头开始，完成每一步，或者你可以绕过已经熟悉的基本设置步骤。不管怎样，你最终都会得到工作代码&lt;/p&gt;
&lt;h2&gt;3.1 获取工作代码&lt;/h2&gt;
&lt;p&gt;  a.使用Maven构建&lt;/p&gt;
&lt;p&gt;  b. 使用Gradle构建&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;c. 使用IDE构建&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  d.  &lt;a href=&quot;https://github.com/spring-guides/gs-rest-service/archive/master.zip&quot; target=&quot;_blank&quot;&gt;点击下载&lt;/a&gt; 然后 解压仓库源码&lt;/p&gt;
&lt;p&gt;  e. 使用git 克隆&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
git clone https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/spring-guides/gs-rest-service.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面有五种方法，但是由于之后我们会经常使用IDE来完成这些操作，所以这里我们使用IDE 来构建入门指南项目&lt;/p&gt;
&lt;h3&gt;3.1.1 用STS开始入门指南&lt;/h3&gt;
&lt;p&gt;本指南引导您&lt;a href=&quot;https://spring.io/guides/gs/sts/&quot; target=&quot;_blank&quot;&gt;使用Spring工具套件（STS）构建一个入门指南&lt;/a&gt;。&lt;/p&gt;
&lt;h4&gt;3.1.1.1 你将会构建什么？&lt;/h4&gt;
&lt;p&gt;您将选择Spring指南并将其导入Spring Tool Suite。然后你可以阅读指南，处理代码，运行项目。&lt;/p&gt;
&lt;h4&gt;3.1.1.2 你需要什么？&lt;/h4&gt;
&lt;h4&gt;3.1.1.3 安装STS&lt;/h4&gt;
&lt;p&gt;   如果你还没有安装STS，请访问上面的链接。从那里，您可以下载一个副本为您的平台。要安装它，只需解压缩下载的存档文件。&lt;/p&gt;
&lt;p&gt;   当你完成后，继续登陆 STS&lt;/p&gt;
&lt;h4&gt;3.1.1.4 导入入门指南&lt;/h4&gt;
&lt;p&gt;   使用STS启动并运行，从文件菜单打开Import Spring Getting Started Content 向导。&lt;/p&gt;
&lt;p&gt; 点击File ——&amp;gt; New ————&amp;gt; Import Spring Geting Started Content&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519164627701-174218420.png&quot; alt=&quot;&quot; width=&quot;524&quot; height=&quot;450&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后会弹出来一个窗口向导，将为您提供从Spring网站搜索和挑选任何已发布指南的机会。&lt;/p&gt;
&lt;p&gt;你可以浏览列表，或者输入搜索词来立即过滤选项。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;当提供即时搜索结果时，该标准适用于标题和描述。支持通配符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入rest ，选择 Rest Service ,点击Finish &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519212411941-1107593705.png&quot; alt=&quot;&quot; width=&quot;486&quot; height=&quot;592&quot;/&gt;&lt;/p&gt;

&lt;p&gt;您可以选择Maven或Gradle作为构建系统来使用。&lt;/p&gt;
&lt;p&gt;您还可以决定是否抓取初始代码集、完成代码集，或两者兼而有之。&lt;/p&gt;
&lt;p&gt;对于大多数项目，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;（initial）初始代码集是一个空的项目，使得您可以通过指南复制和粘贴您的方式&lt;/li&gt;
&lt;li&gt;  (Complete)完整的代码集是来自已经进入的指南的所有代码。如果你抓住这两个，你可以比较你的工作与指南的差异。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最后，你可以让STS向网站上的指南打开浏览器标签。这会让你在不离开STS的情况下通过向导工作。&lt;/p&gt;
&lt;p&gt; STS将在您的工作区中创建两个新项目，导入消耗REST代码库（初始和完整），并在STS中打开浏览器选项卡，如下所示：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519212620858-905180767.png&quot; alt=&quot;&quot; width=&quot;536&quot; height=&quot;453&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Tips: &lt;/p&gt;
&lt;p&gt;gs-rest-service-complete 是完成后的项目&lt;a href=&quot;https://spring.io/guides/gs/consuming-rest/&quot; target=&quot;_blank&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gs-rest-service-initial 是初始化一个空的项目&lt;/p&gt;
&lt;h3&gt;3.1.2 用Intellij Idea 开始入门指南&lt;/h3&gt;
&lt;p&gt; 本指南指导您使用Intellij Idea 构建一个入门指南。&lt;/p&gt;
&lt;h4&gt;3.1.2.1 你将会构建什么？&lt;/h4&gt;
&lt;p&gt;你会选择一个Spring指南并导入到iTeliJ的想法中。然后你可以阅读指南，处理代码，运行项目。&lt;/p&gt;
&lt;h4&gt;3.1.2.2 你需要准备什么？&lt;/h4&gt;
&lt;h4&gt;3.1.2.3 安装 IntelliJ IDEA&lt;/h4&gt;
&lt;p&gt;如果你还没有安装 IntelliJ IDEA (Ultimate Edition) ，请访问上面的链接。从那里，您可以下载一个副本为您的平台。要安装它，只需解压缩下载的存档文件。&lt;/p&gt;
&lt;p&gt; 当你完成后，继续启动Intellij IDEA&lt;/p&gt;
&lt;h4&gt;3.1.2.4 导入入门指南&lt;/h4&gt;
&lt;p&gt;要导入现有的项目，需要一些代码，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/spring-guides/gs-rest-service/archive/master.zip&quot; target=&quot;_blank&quot;&gt;点击下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或者使用Git 克隆或复制其中一个入门指南，例如REST服务指南：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
git clone https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/spring-guides/gs-rest-service.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下载解压后如图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519172647242-349165433.png&quot; alt=&quot;&quot; width=&quot;470&quot; height=&quot;416&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用Intellij IDEA 启动和运行，点击欢迎屏幕上的导入项目，或在主菜单上打开文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519172336334-1134965268.png&quot; alt=&quot;&quot; width=&quot;486&quot; height=&quot;476&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 在弹出对话框中，确保在完整文件夹下选择Maven的POM.xml或Gradle的build.gradle文件：&lt;/p&gt;
&lt;p&gt;这里我们选择build.gradle&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519172609545-1665903101.png&quot; alt=&quot;&quot; width=&quot;497&quot; height=&quot;691&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Intellij IDEA 将创建一个项目，所有的代码从指南准备运行。&lt;/p&gt;
&lt;p&gt;保持默认，点击OK&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519173050828-2131533873.png&quot; alt=&quot;&quot; width=&quot;498&quot; height=&quot;292&quot;/&gt;&lt;/p&gt;
&lt;p&gt;构建完成后如图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519173810440-121996162.png&quot; alt=&quot;&quot; width=&quot;446&quot; height=&quot;632&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.2 创建资源表示类&lt;/h2&gt;
&lt;p&gt; 既然已经建立了项目并建立了系统，就可以创建Web服务。&lt;/p&gt;
&lt;p&gt; 通过考虑服务交互来开始这个过程。&lt;/p&gt;
&lt;p&gt;服务将处理查询t /greeting  GET 请求，可选地在查询字符串中使用name参数。GET请求应该返回一个200 OK响应，其中JSON在表示greetin的主体中。它应该看起来像这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &lt;/span&gt;&quot;id&quot;: 1&lt;span&gt;,
    &lt;/span&gt;&quot;content&quot;: &quot;Hello, World!&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ID字段是问候语的唯一标识符，content是问候语的文本表示。&lt;/p&gt;
&lt;p&gt; 为了建模问候语表示，您创建一个资源表示类。提供一个字段，构造函数普通java对象，并为ID和content数据访问：&lt;/p&gt;
&lt;p&gt;src/main/java/hello/Greeting.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; hello;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Greeting {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String content;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Greeting(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; id, String content) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.content =&lt;span&gt; content;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getContent() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; content;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt; 正如您在下面的步骤中看到的，Spring使用Jackson JSON库自动将问候类型的实例封送到JSON中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 接下来，创建将为这些问候服务的资源控制器。&lt;/p&gt;
&lt;h2&gt;3.3 创建资源Controller&lt;/h2&gt;
&lt;p&gt;在Spring构建REST Web服务的方法中，HTTP请求由控制器处理。这些组件很容易被@ RESTController注释标识，下面的GreetingController通过返回Greeting 类的新实例来处理GET请求/greeting：&lt;/p&gt;
&lt;p&gt; src/main/java/hello/GreetingController.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; hello;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.atomic.AtomicLong;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestParam;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;

@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GreetingController {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String template = &quot;Hello, %s!&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; AtomicLong counter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AtomicLong();

    @RequestMapping(&lt;/span&gt;&quot;/greeting&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Greeting greeting(@RequestParam(value=&quot;name&quot;, defaultValue=&quot;World&quot;&lt;span&gt;) String name) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Greeting(counter.incrementAndGet(),
                            String.format(template, name));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个控制器简洁明了，但引擎盖下还有很多事情要做。让我们一步一步地打破它。&lt;/p&gt;
&lt;p&gt; @RequestMapping  注解 确保将HTTP请求 /greeting映射到 greeting()方法。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;上面的示例不指定GET、PUT、POST等等，因为@RequestMapping 默认映射所有HTTP操作。使用@RequestMapping（Method= GET）来缩小此映射。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@RequestParam将查询字符串参数name 的值绑定到greeting（）方法的name参数中。 如果请求中缺少name参数，则使用“World”的默认值。&lt;/p&gt;
&lt;p&gt;方法体的实现基于计数器的下一个值创建并返回一个带有id和content属性的新Greeting对象，并使用问候template 格式化给定name。&lt;/p&gt;

&lt;p&gt;传统的MVC控制器和上面的RESTful Web服务控制器之间的一个主要区别在于HTTP响应主体的创建方式。&lt;/p&gt;
&lt;p&gt;这个RESTful Web服务控制器只需填充并返回一个Greeting对象，而不是依赖视图技术将问候数据的服务器端呈现呈现给HTML。&lt;/p&gt;
&lt;p&gt;对象数据将作为JSON直接写入HTTP响应。&lt;/p&gt;
&lt;p&gt;此代码使用Spring 4的新的@RestController注释，该注释将类标记为控制器，其中每个方法都返回一个域对象而不是视图。 它是@Controller和@ResponseBody的缩写。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;@RestController = = @Controller + @ResponseBody &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Greeting对象必须转换为JSON。 由于Spring的HTTP消息转换器支持，您不需要手动执行此转换。&lt;/p&gt;
&lt;p&gt;由于Jackson 2位于classpath中，因此会自动选择Spring的MappingJackson2HttpMessageConverter将Greeting实例转换为JSON。&lt;/p&gt;
&lt;h2&gt;3.4 使应用程序可执行&lt;/h2&gt;
&lt;p&gt;虽然可以将此服务作为传统WAR文件打包以部署到外部应用程序服务器，但下面演示的更简单的方法会创建独立应用程序。&lt;/p&gt;
&lt;p&gt;您将所有内容打包到一个单独的，可执行的JAR文件中，由一个良好的旧Java main（）方法驱动。&lt;/p&gt;
&lt;p&gt;一路上，您使用Spring的支持将Tomcat servlet容器作为HTTP运行时嵌入，而不是部署到外部实例。&lt;/p&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;11.5&quot;&gt;
&lt;p&gt;&lt;code&gt;src/main/java/hello/Application.java&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; hello;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.SpringApplication;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Application {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(Application.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;&lt;code&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SpringBootApplication是一个方便的注解，它增加了以下所有内容：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;@Configuration将类标记为应用程序上下文的bean定义的来源。&lt;/li&gt;
&lt;li&gt;@EnableAutoConfiguration通知Spring Boot根据类路径设置，其他bean和各种属性设置开始添加bean。&lt;/li&gt;
&lt;li&gt;通常你会为Spring MVC应用程序添加@EnableWebMvc，但Spring Boot在类路径中看到spring-webmvc时会自动添加。 这将该应用程序标记为Web应用程序并激活关键行为，例如设置DispatcherServlet。&lt;/li&gt;
&lt;li&gt;@ComponentScan告诉Spring在hello包中查找其他组件，配置和服务，以便找到控制器。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;main（）方法使用Spring Boot的SpringApplication.run（）方法启动应用程序。你有没有注意到没有一行XML？ 没有web.xml文件。这个Web应用程序是100％纯Java，您不必处理配置任何管道或基础设施。&lt;/p&gt;
&lt;h2&gt;3.5 构建一个可执行的JAR&lt;/h2&gt;
&lt;p&gt;您可以使用Gradle或Maven从命令行运行应用程序。 或者您可以构建一个包含所有必需的依赖项，类和资源的可执行JAR文件，并运行该文件。 这使得在整个开发生命周期内跨越不同环境等，将服务作为应用程序发布，版本化和部署变得非常容易。&lt;/p&gt;
&lt;p&gt;如果您正在使用Gradle，则可以使用./gradlew bootRun运行该应用程序。 或者您可以使用./gradlew构建构建JAR文件。 然后你可以运行JAR文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
java -jar build/libs/gs-rest-service-0.1.0.jar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果您使用的是Maven，则可以使用./mvnw spring-boot：run来运行该应用程序。 或者，您可以使用./mvnw clean包构建JAR文件。 然后你可以运行JAR文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
java -jar target/gs-rest-service-0.1.0.jar
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;上述过程将创建一个可运行的JAR。 您也可以选择构建经典的WAR文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记录输出显示。 该服务应该在几秒钟内启动并运行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519214059131-2005798961.png&quot; alt=&quot;&quot; width=&quot;540&quot; height=&quot;264&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.6 测试 service&lt;/h2&gt;
&lt;p&gt; 现在这个service已经启动，我们访问 &lt;a href=&quot;http://127.0.0.1:8080/greeting&quot; target=&quot;_blank&quot;&gt;http://127.0.0.1:8080/greeting&lt;/a&gt; 你将会看到这样的结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
{&quot;id&quot;:1,&quot;content&quot;:&quot;Hello, World!&quot;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提供一个name参数进行查询，访问 &lt;a href=&quot;http://localhost:8080/greeting?name=User&quot; target=&quot;_blank&quot;&gt;http://localhost:8080/greeting?name=User&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
{&quot;id&quot;:2,&quot;content&quot;:&quot;Hello, User!&quot;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意content 文本内容已经从 &quot;Hello ,World!&quot; 变成了&quot; Hello, User!&quot;&lt;/p&gt;
&lt;p&gt;此更改演示了GreetingController中的@RequestParam排列按预期工作。 name参数已被赋予默认值“World”，但始终可以通过查询字符串显式覆盖。&lt;/p&gt;
&lt;p&gt;还要注意id属性如何从1更改为2.这证明您正在针对多个请求中的同一个GreetingController实例工作，并且它的计数器字段按照预期在每次调用时递增。&lt;/p&gt;
&lt;p&gt;恭喜！ 您刚刚用Spring开发了一个RESTful Web Service。&lt;/p&gt;
&lt;p&gt;源码下载：&lt;a href=&quot;https://github.com/geekxingyun/JavaEE-Framework-Sample/tree/master/Spring-RESTful-Web-Service-Sample&quot; target=&quot;_blank&quot;&gt;https://github.com/geekxingyun/JavaEE-Framework-Sample/tree/master/Spring-RESTful-Web-Service-Sample&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 19 May 2018 13:52:00 +0000</pubDate>
<dc:creator>星云博客园</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xingyunblog/p/9060596.html</dc:identifier>
</item>
<item>
<title>第十一章——训练深度神经网络 - royhoo</title>
<link>http://www.cnblogs.com/royhoo/p/Training-Deep-Neural-Nets.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/royhoo/p/Training-Deep-Neural-Nets.html</guid>
<description>&lt;p&gt;上一章我们训练了一个浅层神经网络，只要两个隐层。但如果处理复杂的问题，例如从高分辨率图像中识别上百种类的物品，这就需要训练一个深度DNN。也行包含十层，每层上百个神经元，几十万个连接。这绝不是闹着玩的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首先，需要面对梯度消失（或者相对的梯度爆炸）问题，这会导致浅层很难被训练。&lt;/li&gt;
&lt;li&gt;其次，这么大一个网络，训练速度很慢。&lt;/li&gt;
&lt;li&gt;最后，一个包含上百万参数的模型，存在很大过拟合的风险。&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;11.1 梯度消失（爆炸）问题&lt;/h2&gt;
&lt;p&gt;反向传播算法会计算损失函数关于每一个参数的偏导数，然后使用梯度下降更新参数。不幸的是，反向传播时，梯度经常会逐层越来越小，导致底层权重基本保持不变，从而不能得到好的训练结果。这就是所谓的梯度消失问题。而有时候还可能发生相反的情况：很多层的权重每次修改量很大，导致不能收敛。这就是梯度爆炸问题，主要发生在RNN。更普遍的问题是，深度神经网络往往梯度不稳定，不同的层学习速度差别很大。&lt;/p&gt;
&lt;p&gt;这一问题知道2010才有了突破性的进展。在Xavier Glorot和Yoshua Bengio的论文&lt;a href=&quot;http://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf&quot; target=&quot;_blank&quot;&gt;Understanding the Difficulty of Training Deep Feedforward Neural Networks&lt;/a&gt;中，作者发现了一些造成这一问题的可能因素，包括logistic sigmoid激活函数和当时流行的随机初始化方式（使用使用均值为0标准差为1的正态分布进行初始化）。他们表明，这一激活函数加上这种初始化方式，使得每一层输出的方差远大于输入。这一情况在使用均值是0.5的logistic函数时变得更为糟糕（双曲正切函数的均值是0，从而在深度网络中表现优于logistic函数）。&lt;/p&gt;
&lt;p&gt;观察图11-1的激活函数，随着输入值的绝对值变大，函数值趋近于1和0，此时导数趋近于0。因此在方向传播时，几乎没有导数传回去。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/934105/201805/934105-20180510194245898-2135757874.png&quot; alt=&quot;&quot; width=&quot;397&quot; height=&quot;256&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图11-1 Logistic激活函数&lt;/p&gt;
&lt;h3&gt;11.1.1 Xavier and He Initialization&lt;/h3&gt;
&lt;p&gt;在其论文中，Glorot and Bengio提供了一种可以显著改善该问题的建议。我们需要信号在两个方向都可以正常的流动：在前向做出预测和反向传播梯度时。我们不希望信号消失，也不希望它保障或者饱和（也就是趋近于某一个值）。为了使信号正常流动，作者主张每一层输入和输出的方差相等，并且在反向传播时梯度的方差保持不变（如果对其中的数学细节感兴趣，可以研究一下论文）。我们无法同时满足这连个条件，不过作者提供了更为宽松的约束条件，并且在实践中表现还不错，各个连接的权重必须按照如下方式初始化：&lt;/p&gt;
&lt;p&gt;正态分布均值0，标准差$\sigma = \sqrt{\frac{2}{n_{\mbox{input}} + n_{\mbox{output}}}}$&lt;/p&gt;
&lt;p&gt;或者，$-r$到$+r$之间的均匀分布，并且$r = \sqrt{\frac{6}{n_{\mbox{input}} + n_{\mbox{output}}}}$&lt;/p&gt;
&lt;p&gt;其中，$n_{\mbox{input}}$和$n_{\mbox{output}}$是改成输入和输出数量。这一初始化策略称为Xavier初始化，或者Glorot初始化。&lt;/p&gt;
&lt;p&gt;如果输入和输出数量大致相等，公式可以简化为$\sigma = 1/\sqrt{n_{\mbox{input}}}$，$\sigma = \sqrt{3} / \sqrt{n_{\mbox{input}}}$，这正是我们在&lt;a href=&quot;http://www.cnblogs.com/royhoo/p/Introduction-to-Artificial-Neural-Networks.html&quot; target=&quot;_blank&quot;&gt;第十章&lt;/a&gt;使用的。&lt;/p&gt;
&lt;p&gt;使用Xavier初始化策略可以使训练速度得到显著提升，这正是为当今深度学习带来成果的一个技术手段。一些&lt;a href=&quot;https://arxiv.org/pdf/1502.01852v1.pdf&quot; target=&quot;_blank&quot;&gt;不久前的论文&lt;/a&gt;提供了类似的，针对其他激活函数的初始化策略，如表11-1所示。所有这些初始化策略有时被称作He（这是中国姓氏，但不知道是何，贺，还是和）初始化。&lt;/p&gt;
&lt;p&gt;表11-1. 针对不同激活函数的初始化策略&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/934105/201805/934105-20180511143646947-1224159618.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;11.1.2 不饱和（Nonsaturating）激活函数&lt;/h3&gt;
&lt;p&gt;$f$是不饱和函数当且仅当$\mathop{\lim}\limits_{z \to \infty} |f(z)| = +\infty$&lt;/p&gt;
&lt;p&gt;Glorot和Bengio在其2010年的论文中认为，带来梯度消失（爆炸）问题的重要原因是可供选择的激活函数太少。最初人们倾向于选择sigmoid激活函数，但事实上在神经网络中其他激活函数表现更好，尤其是ReLU。很重要的原因是ReLU对正值具有不饱和性（也就是没有上限）。&lt;/p&gt;
&lt;p&gt;不过ReLU也并不完美，会遇到被称作dying ReLUs的问题：在训练期间，有些神经元事实上死掉了，除了0之外什么也不会输出（这里的输出，应该指的是反向传播时，高层对底层输出的梯度）。有时候一半的神经元都是死的，尤其是学习率较大的情况下。一旦出现这一情况，基本上就不能恢复过来了，因为当ReLU的输入是负数时，其梯度是0。&lt;/p&gt;
&lt;p&gt;为了解决这一问题，可以使用ReLU的变体，比如leaky ReLU（如图11-2）。$\mbox{LeakyReLU}_{\alpha}(z) = max(\alpha z, z)$。其中，超参数$\alpha$定义了输入为负值时的倾斜度，一般设置为0.01。这个小斜坡保证了leaky ReLU不会死掉，不过也就可能进入长期的昏迷。毕竟还活着，长期昏迷后还是有可能苏醒过来的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/934105/201805/934105-20180511154739739-163869998.png&quot; alt=&quot;&quot; width=&quot;379&quot; height=&quot;244&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图11-2 Leaky ReLU&lt;/p&gt;
&lt;p&gt;Djork-Arné Clevert等人在其&lt;a href=&quot;https://arxiv.org/pdf/1511.07289v5.pdf&quot; target=&quot;_blank&quot;&gt;2015年的一篇论文&lt;/a&gt;中提出了一种称为exponential linear unit (ELU)的新的激活函数，表现好过ReLU的所有变体。&lt;/p&gt;
&lt;p&gt;\begin{align*}&lt;br/&gt;\mbox{ELU}_{\alpha}(z) = \left\{\begin{matrix}&lt;br/&gt;\alpha(\exp(z) - 1) &amp;amp;\mbox{if} &amp;amp;z &amp;lt; 0 \\&lt;br/&gt;z &amp;amp;\mbox{if} &amp;amp; z \geq 0&lt;br/&gt;\end{matrix}\right.&lt;br/&gt;\end{align*}&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/934105/201805/934105-20180511163827492-871948132.png&quot; alt=&quot;&quot; width=&quot;392&quot; height=&quot;251&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图11-3 ELU激活函数&lt;/p&gt;
&lt;p&gt;选择激活函数时，一般ELU &amp;gt; leaky ReLU (及其变种) &amp;gt; ReLU &amp;gt; tanh &amp;gt; logistic。如果你更关心运行时表现，leaky ReLU要优于ELU。&lt;/p&gt;
&lt;h3&gt;11.1.3 Batch Normalization&lt;/h3&gt;
&lt;p&gt;尽管He initialization搭配ELU可以缓解训练初期的梯度消失（爆炸）问题，但是并不能保证在整个训练周期都不会出现这一问题。Sergey Ioffe和Christian Szegedy在其&lt;a href=&quot;https://arxiv.org/pdf/1502.03167v3.pdf&quot; target=&quot;_blank&quot;&gt;2015年的论文&lt;/a&gt;中提出了一种被称作Batch Normalization (BN)的解决方案。比梯度消失（爆炸）更一般的问题是，由于前层参数的变化，造成后层输入数据分布变化的问题（他们称为Internal Covariate Shift问题）。&lt;/p&gt;
&lt;p&gt;该技术就是在每一层应用激活函数之前，增加一些操作。首先对数据进行简单的zero-centering和normalizing（其实就是转换成均值为0，标准差为1的数据），然后使用两个参数对数据进行scaling和shifting（缩放和平移）操作。换句话说，这两步就是让模型学习每层输入最优的scale（规模）和均值。&lt;/p&gt;
&lt;p&gt;批规范化算法（Batch Normalization algorithm）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/934105/201805/934105-20180519132543508-737060804.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;$\mu_B$是经验均值，在整个mini-batch上进行评估。&lt;/li&gt;
&lt;li&gt;$\sigma_B$是经验标准差，也是在整个mini-batch上评估的。&lt;/li&gt;
&lt;li&gt;$m_B$是mini-batch的实例数。&lt;/li&gt;
&lt;li&gt;$\hat{X}^{(i)}$是zero-centered和normalized后的输入数据。&lt;/li&gt;
&lt;li&gt;$\gamma$是该层的scaling参数。&lt;/li&gt;
&lt;li&gt;$\beta$是该层的shifting参数。&lt;/li&gt;
&lt;li&gt;$\epsilon$是为了避免除零的，通常为$10^{-3}$，也被称为平滑系数。&lt;/li&gt;
&lt;li&gt;$Z^{(i)}$是BN操作的输出。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在测试阶段，不存在mini-batch来计算经验均值和标准差，简单地使用整个训练集的均值和标准差即可。 These are typically efficiently computed during training using a moving average.（这句话没看懂。moving average是一种快速计算均值和标准差的技术？）所以，每个batch-normalized层需要学习四个参数：$\gamma$(scale)，$\beta$(offset)，$\mu$(mean)和$\sigma_B$(standard deviation)。&lt;/p&gt;
&lt;p&gt;作者宣称，该技术提升了他们实验所采用的所有深度学习网络。梯度消失问题得到了明显的环境，以至于可以使用饱和激活函数，比如tanh，甚至是logistic激活函数。网络对权重初始值的敏感度也明显降低。他们也可以提到学习率来加快训练速度。此外，Batch Normalization也充当了正则化的角色，减少其他正则化技术的使用（比如后面章节将会介绍的dropout）。&lt;/p&gt;
&lt;p&gt;当然，该技术有利也有弊——其增加了模型复杂度，这是一种运行时惩罚：额外的计算导致预测缓慢。所以，如果更在意预测效率的话，最好还是选择ELU + He initialization。&lt;/p&gt;
&lt;p&gt;然后是Batch Normalization的TensorFlow实现，代码可参考作者的GitHub。&lt;/p&gt;
&lt;h3&gt;11.1.4 Gradient Clipping&lt;/h3&gt;
&lt;p&gt;减轻梯度爆炸的一项技术是使反向传播的梯度不超过某个阈值（这在训练rnn时比较有用）。 这一技术称为&lt;a href=&quot;http://proceedings.mlr.press/v28/pascanu13.pdf&quot; target=&quot;_blank&quot;&gt;Gradient Clipping&lt;/a&gt;。现在人们更喜欢Batch Normalization，不过了解一下Gradient Clipping还是有帮助的。&lt;/p&gt;
&lt;h2&gt;11.2 Reusing Pretrained Layers&lt;/h2&gt;
&lt;p&gt;如果训练一个大型的DNN，一般都不会从零开始，而是找到一个已经训练好的，与你的任务相似的模型。复用旧模型的底层，这称为transfer learning。这不仅会加快训练速度，而且需要更少的训练数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/934105/201805/934105-20180519152650381-991953039.png&quot; alt=&quot;&quot; width=&quot;457&quot; height=&quot;354&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图11-4 Reusing pretrained layers&lt;/p&gt;
&lt;p&gt;在上图中，如果新旧模型训练数据的结构不一致，那就需要增加一步预处理，将数据的格式转换为就模型需要的。一般情况下，transfer learning在输入值具有相似的低级别特征时表现良好。&lt;/p&gt;
&lt;h3&gt;11.2.1 Reusing a TensorFlow Model&lt;/h3&gt;
&lt;p&gt;讲解在原始模型使用TensorFlow时，新的模型如何复用。&lt;/p&gt;
&lt;h3&gt;11.2.2 Reusing Models from Other Frameworks&lt;/h3&gt;
&lt;p&gt;讲解如果模型是其他框架实现的，在TensorFlow中如何复用。&lt;/p&gt;
&lt;h3&gt;11.2.3 Freezing the Lower Layers&lt;/h3&gt;
&lt;p&gt;就是冷冻住低层级的参数，使其在反向传播时不被更新。&lt;/p&gt;
&lt;h3&gt;11.2.4 Caching the Frozen Layers&lt;/h3&gt;
&lt;p&gt;如果使用了11.2.3的技术，由于前面几层的参数是不变的，可以将最高冷冻层的输出值缓存起来，不用每次前向传播都去计算。这可以提高训练速度。&lt;/p&gt;
&lt;h3&gt;11.2.5 Tweaking, Dropping, or Replacing the Upper Layers&lt;/h3&gt;
&lt;p&gt;原始模型的输出层会被替换掉，因为它一本对新任务来讲是没用的，甚至与新任务输出值的个数都不匹配。类似的，原始模型的高级隐层对新任务的用处较小。我们需要找到适合复用的层数。&lt;/p&gt;
&lt;p&gt;首先复用所有层，训练模型并评估其表现。然后解冻一个或两个隐层，训练之后观察其表现是否提升。训练数据越多，就解冻越多的层。&lt;/p&gt;
&lt;h3&gt;11.2.6 Model Zoos&lt;/h3&gt;
&lt;p&gt;这就是模型仓库，可以找到别人训练好的模型。&lt;/p&gt;
&lt;p&gt;TensorFlow的model zoo位于&lt;a href=&quot;https://github.com/tensorflow/models&quot; target=&quot;_blank&quot;&gt;https://github.com/tensorflow/models&lt;/a&gt;。包含目前最先进的图像分类网络，比如VGG, Inception, and ResNet。&lt;/p&gt;
&lt;p&gt;另一个是Caffe’s Model Zoo：&lt;a href=&quot;https://github.com/BVLC/caffe/wiki/Model-Zoo&quot; target=&quot;_blank&quot;&gt;https://github.com/BVLC/caffe/wiki/Model-Zoo&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;11.2.7 Unsupervised Pretraining&lt;/h3&gt;
&lt;p&gt;假设你要处理一个复杂的任务，并且没有足够带标签的训练数据。并且的是，也找不到针对类似任务训练好的模型。不要绝望！首先，你当然应该收集更多的带标签数据，如果这很困难或者很昂贵，仍然可以使用unsupervised pretraining完成任务（如图11-5）。这就是说，如果你有大量的无标签数据，那就可以一层层地训练，使用无监督特征检测（feature detector）算法，比如Restricted Boltzmann Machines或者autoencoders。等到所有层都训练完成，就可以使用监督学习对网络进行微调。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/934105/201805/934105-20180519165254913-1318409057.png&quot; alt=&quot;&quot; width=&quot;624&quot; height=&quot;412&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图11-5 Unsupervised pretraining&lt;/p&gt;
&lt;p&gt;这是一个漫长乏味的过程，但是往往表现良好。事实上，这一技术正是Geoffrey Hinton及其团队在2016年使用并带来了神经网络的复兴以及深度学习的成功。&lt;/p&gt;
&lt;h3&gt;11.2.8 Pretraining on an Auxiliary Task&lt;/h3&gt;
&lt;p&gt;另外一个选择是，首先训练一个辅助的模型，该模型的标签数据可以轻易生成，然后复用底层来训练模型实现真正的任务。&lt;/p&gt;
&lt;p&gt;比如，你想建立一个人脸识别系统，并且没有太多的带标签数据。不过你可以在网络随机搜集一些照片，并训练一个模型来识别不同的照片中是否是同一个人。第一个模型会学习到识别人脸的优秀特征，这可以在第二个模型中复用，并减少第二个模型所需的训练数据。&lt;/p&gt;
&lt;h2&gt;11.3 Faster Optimizers&lt;/h2&gt;
&lt;p&gt;这一小节的结论是，用AdamOptimizer替换掉GradientDescentOptimizer就行了。我先跳过了，后面有时间再补上这几个优化算法。&lt;/p&gt;
&lt;h2&gt;11.4 Avoiding Overfitting Through Regularization&lt;/h2&gt;
&lt;p&gt;神经网络往往参数很多，自由度很大，太容易过拟合，所以应该使用一些正则化技术防止过拟合。&lt;/p&gt;
&lt;h3&gt;11.4.1 Early Stopping&lt;/h3&gt;
&lt;p&gt;这在第四章介绍过，就是在校验集表现最好时终止训练。&lt;/p&gt;
&lt;h3&gt;11.4.2 $l_i$和$l_2$正则&lt;/h3&gt;
&lt;p&gt;这个也和第四章的意义，跟传统机器模型的方式一样。&lt;/p&gt;
&lt;h3&gt;11.4.3 Dropout&lt;/h3&gt;
&lt;p&gt;当前深度神经网络最受欢迎的正则化技术大概就是dropout了。它首先由G. E. Hinton在2012年&lt;a href=&quot;https://arxiv.org/pdf/1207.0580.pdf&quot; target=&quot;_blank&quot;&gt;提出&lt;/a&gt;，并由Nitish Srivastava在其&lt;a href=&quot;http://jmlr.org/papers/volume15/srivastava14a/srivastava14a.pdf&quot; target=&quot;_blank&quot;&gt;论文&lt;/a&gt;中完善。该技术取得了巨大成功。&lt;/p&gt;
&lt;p&gt;这是一个很简单的算法：在每一步训练，所有神经元（包括输入神经元但不包括输出神经元）都有一个可能“dropped out”的概率$p$，意味着本次训练它可能会被忽视，但在下次训练有可能会被激活。超参数$p$被称作dropout rate，一般被设置为50%。训练结束后，神经元不再被忽视。&lt;/p&gt;
&lt;p&gt;起初可能觉得吃惊，这一蛮横的算法居然表现良好。我们现在假设，一家公司通过抛硬币决定每个员工是否上班。很明显这家公司要改编其组织架构。任何工作都不能依赖于单独一个人，所以专业技术需要传授给很多人。雇员必须学着与同事合作。如果某员工退出，影响不会太大。虽然不知道这一思想是否适用于公司运营，但其确实适用于神经网络的训练。神经元将对输入值的轻微变化不再敏感，最终会得到一个更加鲁棒，更容易一般化的神经网络。&lt;/p&gt;
&lt;p&gt;理解dropout巨大威力的另一个途径就是理解，每一步训练其实都在生成一个不同的神经网络。由于每个神经元都可能出席或者缺席，总共有$2^N$（其中，$N$是可忽视神经元总数）种可能的网络。如果训练10000步，本质上就是训练了10000个神经元。最终的神经元可以看成是这些单独神经元的一个averaging ensemble。&lt;/p&gt;
&lt;p&gt;还有一个技术细节。假设$p = 50%$，在这种情况下测试阶段的神经元数量是训练阶段的两倍。为了弥补这一问题，我们需要在训练结束后对连接权重乘以0.5。更一般的，我们需要在训练结束后对连接权重乘以keep probability (1 – p)。&lt;/p&gt;
&lt;p&gt;如果观察到模型过拟合，可以增大dropout rate。欠拟合就减小dropout rate。&lt;/p&gt;
&lt;p&gt;Dropout会显著地降低收敛速度，但通常会得到一个更好的模型。多花费一些训练时间也是值得的。&lt;/p&gt;
&lt;h3&gt;11.4.4 Max-Norm Regularization&lt;/h3&gt;
&lt;p&gt;另外一种比较受欢迎的神经网络正则化方法是max-norm正则。对于每一个连接权重$w$，都使其满足$\left \| w \right \|_2 \leq \gamma $，其中$\gamma$是max-norm超参数。&lt;/p&gt;
&lt;p&gt;算法实现时，一般会先计算$\left \| w \right \|_2$，如果需要的话就对其进行修剪（$w \leftarrow w\frac{r}{\left \| w \right \|_2}$）。&lt;/p&gt;
&lt;p&gt;降低$\gamma$就可以减少过拟合的可能性。max-norm正则也可以缓解梯度消失（爆炸）问题（如果没使用Batch Normalization）。&lt;/p&gt;
&lt;p&gt;TensorFlow并不提供现成的max-norm正则，不过作者自己实现了一个。&lt;/p&gt;
&lt;h3&gt;11.4.5 Data Augmentation&lt;/h3&gt;
&lt;p&gt;该正则化技术就是通过已经存在的训练集来生成新的训练实例。这一技巧就是生成逼真的训练数据。理想情况下，人无法区分该实例是否自动生成。简单的增加white noise并没有帮助，因为改变必须是可学习的（white noise不能被学习）。例如，根据一个图片，生成各种不同的图片，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/934105/201805/934105-20180519212055242-285907378.png&quot; alt=&quot;&quot; width=&quot;682&quot; height=&quot;420&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 图11-10 使用现有训练样本生成新的实例&lt;/p&gt;
&lt;h2&gt;11.5 实用的指导方针&lt;/h2&gt;
&lt;p&gt;DNN默认配置：&lt;/p&gt;
&lt;p&gt;Initialization：He initialization&lt;br/&gt;Activation function： ELU&lt;br/&gt;Normalization： Batch Normalization&lt;br/&gt;Regularization： Dropout&lt;br/&gt;Optimizer： Adam&lt;br/&gt;Learning rate schedule： None&lt;/p&gt;
&lt;p&gt;默认的配置可能需要调整：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果找不到一个合适的学习率（收敛太慢，增大学习率。然后收敛加快了，但是最终的模型不是最优的），那就可以尝试增加一个learning schedule，比如exponential decay。&lt;/li&gt;
&lt;li&gt;如果训练集太小，可以实现data augmentation&lt;/li&gt;
&lt;li&gt;如果想要一个稀疏的模型，可以增加$l_1$正则。需要更加稀疏的话，尝试使用FTRL代替Adam优化，并配合$l_1$正则。&lt;/li&gt;
&lt;li&gt;如果需要一个能够快速预测的模型，那也许就需要放弃Batch Normalization，改为ELU激活函数。稀疏的模型也能加快预测时间。&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Sat, 19 May 2018 13:39:00 +0000</pubDate>
<dc:creator>royhoo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/royhoo/p/Training-Deep-Neural-Nets.html</dc:identifier>
</item>
</channel>
</rss>