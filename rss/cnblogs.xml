<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>springMvc(一) - 江南小俊</title>
<link>http://www.cnblogs.com/jnxj/p/8613639.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jnxj/p/8613639.html</guid>
<description>&lt;h2&gt;1.1作用：负责拦截请求并分派给相应的处理器处理&lt;/h2&gt;
&lt;h2&gt;1.2配置DispatcherServlet（web.xml）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180320232753120-2143556781.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180320232810116-1634233607.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2.1实现Controller接口，对应上面配置的第一种适配器&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180320232819078-1046989468.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.2实现HttpRequestHandler接口，对应上面配置的第二种适配器&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180320232826491-177458477.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;4.1 spring3.1之前的映射器和适配器的配置类&lt;/h2&gt;
&lt;p&gt;（1）映射器org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping&lt;/p&gt;
&lt;p&gt;（2）适配器org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&lt;/p&gt;
&lt;h2&gt;4.2 spring3.1之后的映射器和适配器的配置类&lt;/h2&gt;
&lt;p&gt;（1）映射器org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&lt;/p&gt;
&lt;p&gt;（2）适配器org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&lt;/p&gt;
&lt;p&gt;（3）使用&amp;lt;mvc:annotation-driven&amp;gt;&amp;lt;/mvc:annotation-driven&amp;gt;可以替代上面两个&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180320232842805-1675592623.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.3 扫描Handler类，开启组件扫描，方便快捷，只要配置包名&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180320232851117-743059097.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.4 编写Handler类&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180320232859452-1387049139.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（1）      在类名上使用@Controller注解类&lt;/p&gt;
&lt;p&gt;（2）      使用@RequestMapping()配置映射url&lt;/p&gt;
&lt;h2&gt;5.配置等相关文件&lt;/h2&gt;
&lt;h2&gt;5.1pom.xml&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_29f348ac-2638-48d8-9b10-50cab543a2a9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_29f348ac-2638-48d8-9b10-50cab543a2a9&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_29f348ac-2638-48d8-9b10-50cab543a2a9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt;         
&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; log4j日志包版本号 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;slf4j.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.7.18&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;slf4j.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;log4j.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.17&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;log4j.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;     
&lt;span&gt; 13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 添加fastjson &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;fastjson&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.1.41&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 添加日志相关jar包 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${log4j.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.slf4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;slf4j-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${slf4j.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.slf4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;slf4j-log4j12&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${slf4j.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt; 
&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; log end &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 映入JSON &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.codehaus.jackson&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jackson-mapper-asl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.9.13&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jackson-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.8.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jackson-databind&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.8.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt; 
&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-fileupload&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-fileupload&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-io&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-io&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt; 
&lt;span&gt; 70&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-codec&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-codec&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.9&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;     
&lt;span&gt; 76&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 添加jstl依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jstl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jstl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.8.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/org.springframework/spring-webmvc &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-webmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.14.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax.servlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax.servlet-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.1.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;provided&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt; 
&lt;span&gt;102&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pom.xml&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;5.2log4j.properties&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_1c4f8a52-6d17-4936-aab0-6bdf52da9b67&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1c4f8a52-6d17-4936-aab0-6bdf52da9b67&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1c4f8a52-6d17-4936-aab0-6bdf52da9b67&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;# \u65E5\u5FD7\u6536\u96C6\u5668\u7684\u64CD\u4F5C
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;log4j.rootLogger=DEBUG, stdout, file
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;# \u5C06\u65E5\u5FD7\u4FE1\u606F\u5B9A\u5411\u5230\u63A7\u5236\u53F0
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;log4j.appender.stdout=org.apache.log4j.ConsoleAppender
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;log4j.appender.stdout.Target=System.out
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;log4j.appender.stdout.layout.ConversionPattern=%d&lt;/span&gt;{&lt;span&gt;yyyy-MM-dd HH&lt;/span&gt;:&lt;span&gt;mm:ss&lt;/span&gt;}&lt;span&gt; %-5p %c&lt;/span&gt;{&lt;span&gt;1&lt;/span&gt;}&lt;span&gt;:%L - %m%n
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;# \u5C06\u65E5\u5FD7\u4FE1\u606F\u5B9A\u5411\u5230\u6587\u4EF6\u4E2D
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;log4j.appender.file=org.apache.log4j.RollingFileAppender
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;log4j.appender.file.File=D:/log/springmvc-01/log4j-application.log
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;log4j.appender.file.MaxFileSize=5MB
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;log4j.appender.file.MaxBackupIndex=10
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;log4j.appender.file.layout=org.apache.log4j.PatternLayout
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;log4j.appender.file.layout.ConversionPattern=%d&lt;/span&gt;{&lt;span&gt;yyyy-MM-dd HH&lt;/span&gt;:&lt;span&gt;mm:ss&lt;/span&gt;}&lt;span&gt; %-5p %c&lt;/span&gt;{&lt;span&gt;1&lt;/span&gt;}&lt;span&gt;:%L - %m%n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;log4j&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;5.3springmvc.xml&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_4b2a60cb-8661-46ea-9366-3aab7ec608ec&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4b2a60cb-8661-46ea-9366-3aab7ec608ec&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4b2a60cb-8661-46ea-9366-3aab7ec608ec&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xmlns:mvc&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        http://www.springframework.org/schema/beans 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        http://www.springframework.org/schema/beans/spring-beans.xsd
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        http://www.springframework.org/schema/mvc 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        http://www.springframework.org/schema/mvc/spring-mvc.xsd    
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        http://www.springframework.org/schema/context 
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        http://www.springframework.org/schema/context/spring-context.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;userController&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;/home&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.jnxj.springmvc.controller.UserController&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;userController2&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.jnxj.springmvc.controller.UserController2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;com.jnxj.springmvc.controller.UserController3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 开启组件扫描，不用一个一个配置handler &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.jnxj.springmvc.controller&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context:component-scan&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 处理器映射器  通过bean的name去处理url&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 另一种非注解处理器映射器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;mappings&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;prop &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;/home1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;userController&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;prop &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;/home2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;userController2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;            
&lt;span&gt;29&lt;/span&gt;            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注解的映射器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注解适配器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 使用下面这个可以代替上面两个注解映射器和适配器 
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            默认加载很多方法，比如json的视图解析器
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  &amp;lt;mvc:annotation-driven&amp;gt;&amp;lt;/mvc:annotation-driven&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 处理器适配器 ,实现HandlerAdapter接口&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 另一种处理器适配器 ,实现HttpRequestHandler接口&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;        
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 视图解释器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;springmvc.xml&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 20 Mar 2018 15:34:00 +0000</pubDate>
<dc:creator>江南小俊</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jnxj/p/8613639.html</dc:identifier>
</item>
<item>
<title>微信小程序调接口常见问题解决方法 - DFrain</title>
<link>http://www.cnblogs.com/wenrain/p/8613634.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wenrain/p/8613634.html</guid>
<description>&lt;p&gt;第一次调接口时遇见的bug。&lt;/p&gt;
&lt;p&gt;注意：接口的域名不能使用 IP 地址或 localhost，且不能带端口号；&lt;/p&gt;
&lt;p&gt;微信小程序如何调接口？&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;wx.request({
  url: &lt;/span&gt;'http://miniapp/system/user/test'&lt;span&gt;, 
  method: &lt;/span&gt;&quot;POST&quot;&lt;span&gt;,
  header: {
    &lt;/span&gt;'content-type': 'application/json'&lt;span&gt;
  },
  success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (res) {
    console.log(res)
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果微信开发者工具报错。合法域名校验出错，不在一下request合法域名列表中，请参考。。。。如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/698403/201803/698403-20180320232203671-258722031.png&quot; alt=&quot;&quot; width=&quot;1039&quot; height=&quot;134&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查了一堆古籍，都是说在微信公众平台改配置。对于刚开发，学习，测试阶段的同学们来说，太复杂。&lt;/p&gt;
&lt;p&gt;最简单的解决方法：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;打开微信开发者工具，左上角点击“&lt;strong&gt;设置&lt;/strong&gt;“&lt;/li&gt;
&lt;li&gt;点击最下面一行”&lt;strong&gt;项目设置&lt;/strong&gt;“，（此时左边会弹出一个弹框）&lt;/li&gt;
&lt;li&gt;勾选上弹框上最后一行”&lt;strong&gt;不校验安全域名、TLS 版本以及 HTTPS 证书&lt;/strong&gt;“&lt;/li&gt;
&lt;li&gt;完美解决。&lt;/li&gt;
&lt;/ol&gt;
</description>
<pubDate>Tue, 20 Mar 2018 15:32:00 +0000</pubDate>
<dc:creator>DFrain</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wenrain/p/8613634.html</dc:identifier>
</item>
<item>
<title>消息队列的使用 RabbitMQ - 张居斜</title>
<link>http://www.cnblogs.com/yaolin1228/p/8610471.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yaolin1228/p/8610471.html</guid>
<description>&lt;p&gt;RabbitMQ 是一款开源且比较流行的消息中间件。但用起来还是比较麻烦，有人封装了一层， 这就是 EasyNetQ 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、安装&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、安装 Erlang: &lt;a href=&quot;http://www.erlang.org/download.html&quot; rel=&quot;nofollow&quot;&gt;http://www.erlang.org/download.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、安装 RabbitMQ server : &lt;a href=&quot;http://www.rabbitmq.com/download.html&quot; rel=&quot;nofollow&quot;&gt;http://www.rabbitmq.com/download.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、安装 RabbitMQ management API tool : &lt;a href=&quot;http://www.rabbitmq.com/management.html&quot; rel=&quot;nofollow&quot;&gt;http://www.rabbitmq.com/management.html&lt;/a&gt; (web 页面管理工具)&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;找到 rabbitmq-plugins 所在文件夹(一般在 sbin 文件夹下）&lt;/li&gt;
&lt;li&gt;在文件夹下运行 cmd&lt;/li&gt;
&lt;li&gt;在 cmd 中运行 rabbitmq-plugins &lt;span class=&quot;hljs-built_in&quot;&gt;enable rabbitmq_management&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;4、 重启 RabbitMq 服务&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、集群 (Cluster)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此处指的是负载均衡集群：将任务分配给有资源的服务器处理。&lt;/p&gt;
&lt;p&gt;此处有三种模型&lt;/p&gt;
&lt;p&gt;模式  1、最基础的集群（无需负载均衡功能）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; bus = RabbitHutch.CreateBus(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host=myhost.svj.com ,sechost.svj.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建连接时，指定多主机地址完成集群&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在连接的主机域名处，添加多个域名，域名之间以逗号分隔， 当连接首个域名失败，则会尝试连接后面的域名，若失败继续向后连接，依次寻找可连接主机。&lt;/p&gt;

&lt;p&gt;模式 2、随机选择域名 （具备基础的负载均衡功能， 适用于多个服务调用 RabbitMQ 服务）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; bus = RabbitHutch.CreateBus(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host=myfirsthost,mysecondhost&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, x =&amp;gt; x.Register&amp;lt;IClusterHostSelectionStrategy&amp;lt;ConnectionFactoryInfo&amp;gt;, RandomClusterHostSelectionStrategy&amp;lt;ConnectionFactoryInfo&amp;gt;&amp;gt;());
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;模式 3、使用专业的负载均衡器&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、镜像队列(Mirror Queue)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用镜像队列的前提条件是完成了集群。&lt;/p&gt;
&lt;p&gt;将 queue 镜像到集群中的其他节点的队列上， 防止单点队列失效，以及 Message 丢失 。&lt;/p&gt;
&lt;p&gt;镜像队列的设置可以在  web 页面中设置&lt;/p&gt;
&lt;p&gt;Policies &amp;gt; Add / update a policy. 完成，队列的更新。 &lt;/p&gt;
&lt;p&gt;如果需要查看其节点以及镜像 ，可以点击此处查看&lt;strong&gt;&lt;span&gt; https://www.rabbitmq.com/ha.html#how-to-check-i-a-queue-is-mirrored&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; 注意： 使用了队列镜像后， 在发布确认时，必须所有镜像队列都同步了消息，才能返回 isComplete 为 true 算是发布完成&lt;/p&gt;
&lt;p&gt;以上皆为参考 &lt;a href=&quot;https://github.com/EasyNetQ/EasyNetQ/wiki/Quick-Start&quot; target=&quot;_blank&quot;&gt;https://github.com/EasyNetQ/EasyNetQ/wiki/Quick-Start&lt;/a&gt; &lt;/p&gt;
</description>
<pubDate>Tue, 20 Mar 2018 15:31:00 +0000</pubDate>
<dc:creator>张居斜</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yaolin1228/p/8610471.html</dc:identifier>
</item>
<item>
<title>云计算---openstack实例共享80、443端口 - 姚红</title>
<link>http://www.cnblogs.com/yaohong/p/8608777.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yaohong/p/8608777.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;因为openstack使用的是apache，所以不能共享80端口，但创建的许多云主机，虽然可以通过rinetd进行跳转，但有时需要直接访问80端口，所以这里我们选择包含了nginx的openrety。&lt;/p&gt;
&lt;h2&gt;1.1. &lt;strong&gt;&lt;span&gt;安装&lt;/span&gt;openresty&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;1.&lt;span&gt;向&lt;/span&gt;&lt;span&gt;centos&lt;/span&gt;&lt;span&gt;系统中添加&lt;/span&gt;&lt;span&gt;openresty&lt;/span&gt;&lt;span&gt;仓库&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
#yum install yum-utils

#yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2.&lt;span&gt;安装软件包&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
#yum install openresty
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3.&lt;span&gt;安装命令行工具&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
#yum install openresty-resty
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;1.2. &lt;strong&gt;&lt;span&gt;配置&lt;/span&gt;openresty&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;1.&lt;span&gt;进入&lt;/span&gt;&lt;span&gt;nginx&lt;/span&gt;&lt;span&gt;目录&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
#cd /usr/local/openresty/nginx/conf/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2.&lt;span&gt;编辑&lt;/span&gt;&lt;span&gt;nginx&lt;/span&gt;&lt;span&gt;配置文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;#vi nginx.conf&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
user  root;

worker_processes  12;

 

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;&lt;br/&gt;#pid        logs/nginx.pid;

events {
    worker_connections  10240;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '

                      '$status $body_bytes_sent &quot;$http_referer&quot; '

                      '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';&lt;br/&gt;access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    include conf.d/*;

    server {
        listen       80;&lt;br/&gt;#
        server_name &lt;span&gt;域名&lt;/span&gt;;&lt;br/&gt;#指定日志路径
        access_log  logs/access.log  main;
        error_log  logs/error.log;

        # 
        location / {
            proxy_pass http://172.17.17.113;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.&lt;span&gt;在当前目录下创建&lt;/span&gt;&lt;span&gt;conf.d&lt;/span&gt;&lt;span&gt;文件夹&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
#mkdir /usr/local/openresty/nginx/conf/conf.d&lt;p&gt;#cd conf.d
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.&lt;span&gt;创建要被读取的文件，目前定义为每台机器创建一台，这里定义添加一台&lt;/span&gt;&lt;span&gt;aa&lt;/span&gt;&lt;span&gt;机器，则创建&lt;/span&gt;&lt;span&gt;aa.conf&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;#vi aa.conf&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
server {
    listen       80;
#绑定https
    include /usr/local/openresty/nginx/https/https.conf;
#绑定域名
    server_name  &lt;span&gt;域名;&lt;/span&gt;
#指定日志路径
    access_log  logs/ope.access.log  main;
    error_log  logs/ope.error.log;

#指定通过域名跳转端口
    location / {

        proxy_pass http://172.17.17.136:8081;

    }

}
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;&lt;br/&gt;1.3. &lt;/span&gt;&lt;strong&gt;&lt;span&gt;使用&lt;/span&gt;openresty&lt;/strong&gt; &lt;/h2&gt;
&lt;p&gt;1.&lt;span&gt;检测&lt;/span&gt;&lt;span&gt;nginx&lt;/span&gt;&lt;span&gt;是否配置正确&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
#openresty -t

nginx: the configuration file /usr/local/openresty/nginx/conf/nginx.conf syntax is ok

nginx: configuration file /usr/local/openresty/nginx/conf/nginx.conf test is successful
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;2.&lt;span&gt;重载&lt;/span&gt;&lt;span&gt;openresty&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
#openresty -s reload
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3.验证&lt;/p&gt;
&lt;p&gt;在浏览器上输入绑定的域名即可直接访问80或者所需端口。&lt;/p&gt;

</description>
<pubDate>Tue, 20 Mar 2018 15:13:00 +0000</pubDate>
<dc:creator>姚红</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yaohong/p/8608777.html</dc:identifier>
</item>
<item>
<title>十倍效能提升——Web 基础研发体系的建立 - 侯振宇</title>
<link>http://www.cnblogs.com/sskyy/p/8613393.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sskyy/p/8613393.html</guid>
<description>&lt;h2&gt;1 导读&lt;/h2&gt;
&lt;p&gt;web 基础研发体系指的是， web 研发中一线工程师所直接操作的技术、工具，以及所属组织架构的总和。在过去提升企业研发效能的讨论中，围绕的主题基本都是——”通过云计算、云存储等方式将底层核心技术封装成基础设施“。而我们在实践中发现，在&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;互联网渗入到各行各业，业务爆发&lt;/li&gt;
&lt;li&gt;企业竞争白热化，对速度和品质要求越来越高&lt;/li&gt;
&lt;li&gt;一线工程师队伍越来越庞大，管理成本增高&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这样的多重背景下，除了底层核心技术外，一线 web 研发效能的问题也逐渐成为决胜战场的重要因素。&lt;/p&gt;
&lt;p&gt;然而在现实中我们看到，因为一线的研发工作可替换性强，所以并没有受到足够的重视，同时也缺少更统一、更有深度的规划和管理。实际上，将一线工程师所直接接触到的应用框架、测试、部署、监控等领域作为一个完整的体系来思考，并打造成一体化的基础设施，能为企业的业务研发带来巨大的效能提升。&lt;/p&gt;
&lt;p&gt;在《月相》一章中，我们将介绍Web 基础研发体系有哪些构成部分，并且将深入到关键性的技术和问题中。《潮汐》一章将介绍如何配合这套研发体系，在组织结构上做出一些调整，通过管理手段进一步挖掘团队潜力，打造更高效的组织。&lt;/p&gt;
&lt;p&gt;另外，希望这些内容也能为一线工程师提供一些职业规划上的引导。&lt;/p&gt;
&lt;h2&gt;2 月相&lt;/h2&gt;
&lt;p&gt;我们将要讨论的研发体系，涵盖了”研发流程“和”系统“两个维度。可以用一张大图来描绘：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/zohnkBUNTDTAAbVFuSLC.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，将这些内容作为一个整体，符合目前互联网公司”核心技术“ + ”web 研发能力“ 的模式，能快速产出应用。其中，”用户“、”权限“、”流程“可以说是绝大部分系统的铁三角，因此我们也划入到了基础研发体系中。&lt;/p&gt;
&lt;p&gt;接下来看每个部分。从流程的角度来说，提升效能的关键在于”工具化“和”自动化“，我们就以这两点来切入。&lt;/p&gt;
&lt;h3&gt;2.1 设计&lt;/h3&gt;
&lt;p&gt;首先是设计，设计与编码的结合是目前业界想象空间最大，但也是最不成熟的领域。对于自动化的实现，目前的尝试大致可以归纳成两类：&lt;/p&gt;
&lt;p&gt;第一类，与设计师约定规则，按规则转化设计稿。这种方式的关键在于，“既要规则简单易于被设计师接受，又要保证视觉上的关系能完整转化成程序中的关系“。我们举个例子来说明”视觉上的关系“和”常见的程序中的关系“: 网页上这样一个场景：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/dZMEFHouRPlZzQTQAbSW.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以很容易地理解为一个 Tab 组件里面嵌着一个按钮，他们是”嵌套关系“，在程序中用 html 可能这样写:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot; lang=&quot;html&quot;&gt;&amp;lt;Tabs&amp;gt;
  &amp;lt;Tabs.Pane title=&quot;tab1&quot;&amp;gt;        
        &amp;lt;Button/&amp;gt;
  &amp;lt;/Tabs.Pane&amp;gt;
  &amp;lt;Tabs.Pane title=&quot;tab2&quot; /&amp;gt;
&amp;lt;/Tab&amp;gt;    
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是在现代的设计工具中，图层信息表示的仅仅是视觉上的前后关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/ZCDWDNmnxkcRQTeKUmyZ.png&quot; alt=&quot;&quot; width=&quot;781&quot; height=&quot;348&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这就出现了一种不匹配，设计师可以通过一万种方式来表达同样的视觉效果。因此，要保证正确识别关系，必须和设计师约定只能以某种方式来创建图层。但问题是这种约定本身对设计师来说没有实际意义，对他来说只是约束。除了嵌套关系以外，位置关系也是同样的问题——目前设计工具产出的设计稿只是某一种具体尺寸的视觉效果，而我们实际产品的尺寸会因设备不同而不同的，甚至可以随着浏览器窗口的缩放等功能动态变化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/RKrfxAzZPrJsYHpulxhg.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;怎么来表示这种变化对设计师来说也是额外的约束。乐观的是，从技术角度来说，总归是可实施的。&lt;/p&gt;
&lt;p&gt;第二类尝试，像游戏一样做专用的设计工具，则从根本上解决了上述问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/rSuwQORzqSMuTBBUAkuZ.png&quot; alt=&quot;&quot; width=&quot;900&quot; height=&quot;900&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a href=&quot;https://reactstudio.com/&quot;&gt;React Studio&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;思路很简单，既然设计师能有多种方式来表达，那么我们从工具角度来约束，是不是就不会有问题了？虽然同样有约束，但是对设计师来说负担要小多了，不需要额外记忆，按照工具的指引使用即可。我们甚至还可以提供一些高级功能防止出现一些人为错误，以此来吸引设计师。这种方式唯一的缺点是有一次性的学习成本。&lt;/p&gt;
&lt;p&gt;虽然目前的自动化方案，都还只是从“视觉稿”到“程序静态视图”的自动化，并不包括交互逻辑的自动化，但已经有了巨大的意义。在前端程序员工作的统计中发现，他们有一半以上的时间都是在”调整大小、调整位置、对像素、对色值“，而且越是好的前端，这个时间比例越大。因为写逻辑是可以通过提升自身素质实现量级缩小的，而写样式这个工作本身很难实现量级的时间缩短。&lt;/p&gt;
&lt;p&gt;如果在研发体系中，设计稿能自动转化成可用的代码，无疑对传统的 web 页面研发会有巨大的提升。虽然做专用工具看起来应该是最终的方向，但在目前的现实环境中，可能会因为加重设计师的使用负担而被抵制，所以通过在原有设计工具上做约定的方式来过渡可能更合适。在用约定的方案里，怎样让约定即不给设计师造成太大的负担，又能解决上述的规则转化问题，就成了重点。在实践中的解法是，通过工具的高级能力来补偿设计师。这部分细节已在《&lt;a href=&quot;http://www.cnblogs.com/sskyy/p/7813943.html&quot;&gt;设计稿自动生成可用页面的展望&lt;/a&gt;》中详细描述过，这里不再赘述。&lt;/p&gt;
&lt;h3&gt;2.2 研发、测试和监控&lt;/h3&gt;
&lt;p&gt;我们将这三个环节合在一起来讨论，是因为他们存在技术决策上的上下游关系。过去在大团队中规划研发体系，常常会出现一种现象，就是研发、测试、监控都是由不同团队规划的，而每个团队都想着做平台。后来慢慢发现这个思路是有问题的，因为做平台必然要考虑到不同端的接入，要花成本将自己的服务抽象得足够底层，花成本对不同的端做适配。而在这三个环节中，研发中的&lt;strong&gt;运行时框架(应用框架)&lt;/strong&gt;是工具化和自动化的核心，只要对运行时框架多进行一点点投入，后面测试、反馈、监控的研发成本就能降到非常低！&lt;/p&gt;
&lt;p&gt;举个前端的例子。在搭建可视化页面搭建平台时，我们设计了一个将“所有组件数据都统一到一棵树”上的方案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/FWYKxWErwBlYheDQOKXM.png&quot; alt=&quot;&quot; width=&quot;929&quot; height=&quot;791&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在传统的 React 中所有组件的 state 和 props 合起来才能表达一个页面唯一的状态，state 和 props 分散在组件中，不易收集。而在这个设计中，全局的 state tree 即表达了页面的一个状态，如果将每一次变化后的state tree 都存起来，即可通过回放来展现页面动态变化的过程。更进一步的是，利用这个特性，我们在 200 行代码之内就实现了“录制即测试用例”的功能。用户无需写任何晦涩的用例代码，在调试自己写的页面时只要觉得没问题，就可以将刚才的调试过程保存成一个用例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/mRJjqeSNCIGTbQyUUEbp.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再举一个接口层的例子。我们运行时框架的接口采用了 GraphQL ，并且告别了手动写接口的形式，全部利用视图勾选生成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/AYctHHVuVqMkcFIJYKKi.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这解决了两个研发中常见的问题：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;杜绝了手工约定接口时可能出现的拼写等错误。&lt;/li&gt;
&lt;li&gt;能自动统计到所有对某一接口进行消费的页面，一旦接口进行调整，可以自动通知到下游，甚至能自动生成适配代码，不影响下游。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这也就极大地减轻了测试环节的压力。之前的思路基本都是通过扫描代码去发现接口错误，要消耗大量资源，现在看起来没必要了。&lt;/p&gt;
&lt;p&gt;这两个例子都是从研发的角度来思考所看到的收益，我们再单独从测试与监控的角度来看。&lt;/p&gt;
&lt;p&gt;测试领域有一个热点，—— UI 自动化。目前的 UI 自动化有两种方案，图片对比 与 dom 树对比。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/XUMcGlAMLtZrtZTjGMJb.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a href=&quot;https://screenster.io/&quot;&gt;Screenster&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;这两种方案都有一个共同的缺点，即“无法正确地识别变化的类型”。例如现在有个需求，视图上的两个元素需要调换一下位置，但逻辑并没有变，希望测试平台不报警。除非人工干预，否则这两种方案都很难判断出来，因为他们是以”最后渲染结果“作为判断依据的。但是如果我们的测试是针对运行时框架来设计的话，就很容易实现。以上面研发时所讲的组件树方案为例，页面到底有没有逻辑性的变化只和 state tree 有关，因为页面的状态是 state tree，而逻辑操作的也是 state tree，所以我们只要认为 state tree 没变，就可以认为页面没有发生变化，不用触发报警。&lt;/p&gt;
&lt;p&gt;除了能识别变化外，利用运行时框架的设计，我们还能实现更先进的功能，例如 B/S 架构中还原浏览器端出错现场的问题。在过去 debug 时，我们通常都要与测试交流，按照操作步骤手工还原到现场，如果能由程序自动化一次性达到出错现场，那无疑能给 debug 速度带来质的提升。要实现这种能力的关键点在于，任何表示页面状态的数据，都要能暴露到外部，也能由外部传入进行重置。一旦有一个决定页面状态的变量在函数中，不能取出，不能序列化后传给服务端，就无法做到。毫无疑问，这种能力也是需要应用框架来支持的。例子中 state tree 的设计，有一部分原因就是出于支持这种能力的考虑。&lt;/p&gt;
&lt;p&gt;再来看监控领域的热点，“无埋点”监控，和自动化测试有异曲同工之妙。“无埋点”指的是无手工在代码中的埋点，通常是使用可视化的技术来进行“标记”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/gQWHDbfoSyYymCZkQSWo.png&quot; alt=&quot;&quot; width=&quot;918&quot; height=&quot;896&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a href=&quot;https://www.growingio.com/&quot;&gt;GrowingIO&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;目前业界的一些方案中，遇到的问题同样是不能正确地识别变化。例如当页面上的元素改变了位置，埋点能不能不受影响？在可视化搭建平台这个项目里，我们同样是在应用框架这个层面设计了解决方案：&lt;/p&gt;
&lt;p&gt;我们的页面使用一种类似于模板的方式来嵌套组件，这个结构我们称为 component tree，这个结构是静态可分析的，所以可以很容易地实现可视化。用户如果想要控制组件使其产生变化，那么必须给组件取个唯一的名字，在逻辑代码中使用这个名字对它的数据进行操作来实现改变。&lt;/p&gt;
&lt;p&gt;有了这个前提，无需任何额外的投入，就已经实现了“无埋点”。因为“埋点”本身就是对逻辑功能的统计，所以埋点一定会埋在有逻辑相关的组件上，因此一定会有唯一的名字，那么无论组件怎么变化，只要没有被删除，我们的埋点信息就不会受到影响。同时，如果一个有埋点的组件出现了改名或者删除，我们还能自动提示报警。而这些功能，同样是在不到200行的代码就实现了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/UmylSoMxOmzVKJkYMmrw.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(埋点取名)&lt;/p&gt;
&lt;p&gt;综上，从测试和监控两个角度我们也可以看到，只要运行时框架提供一点点帮助，就能以极小的成本来实施。针对确定的上游研发框架来进行下游的开发，不用再考虑对各种框架的兼容问题，也可以让下游在能力上走得更远，实现更多先进的功能。&lt;/p&gt;
&lt;h3&gt;2.3 框架核心技术&lt;/h3&gt;
&lt;p&gt;我们在线下交流中发现，很多团队对框架的投入只停留在写小工具和包装开源框架上。因为看不清方向，不知道如何投入，也不知道投入后有多少收益，所以不敢深入。其实方向和具体应该投入哪些技术，都是有迹可循的。这个踪迹的源头我们在 《&lt;a href=&quot;http://www.cnblogs.com/sskyy/p/4592353.html&quot;&gt;理想的应用框架&lt;/a&gt;》中曾提到过的，就是程序的本质——&lt;strong&gt;数据和逻辑&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;2.3.1 数据&lt;/h4&gt;
&lt;p&gt;先具象一点来说数据。框架的数据就是框架运行时内部保存的对象等数据结构，只要回答好两个问题就能展现出强大的威力：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数据在哪？&lt;/li&gt;
&lt;li&gt;数据的生命周期是怎样的？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;知道数据在哪，是管理数据的基本条件。应用的任何状态，都可以看做是内部数据的一种表现。因此只有框架掌握了所有数据，才有可能实现例如还原现场之类的功能。这对我们的研发有两点指导意义：&lt;/p&gt;
&lt;p&gt;一是在使用已经有控制反转和依赖注入的 web 框架时，应该完全遵循框架的约定，将服务等对象的管理完全由框架。有的框架语法写起来比较麻烦，可以通过命令行或者IDE工具来自动生成。&lt;/p&gt;
&lt;p&gt;二是在我们改造或者创造框架时，应该把数据的统一管理作为最基本的底线，这是上下游实现自动化的基础。上一节中所提到的测试录制的能力，就是建立在统一数据源的基础上。再举个更有意思的例子，过去的前端的 ajax 请求基本都是独立调用 api，无中心的模式。这种模式可能会出现的问题是：&lt;/p&gt;
&lt;p&gt;请求A发出后，由于网络等问题，一直未返回，这时用户有重新发送一次请求 A1。结果 A1 迅速返回在回调函数中提示成功。然后请求 A 超时返回，在回调中提示失败，导致最后用户看到的是失败的信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/NnlAsoOtCaPVoVuaUvxB.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当引入 saga 之后，所有异步的操作都统一收归到通信管道中，就能进行跨请求的管理了。单个异步请求的取消、多个异步请求到底是独立、还是竞争、还是只保持最后一个，就都能很容易地实现了。基于中心化的请求管理，还能进行可视化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/rAIVUbhZHyQIpLTfsnEv.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/HVnuRNheHVwtWFLRYljb.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(kuker)&lt;/p&gt;
&lt;p&gt;继续讲到第二个问题，数据的生命周期是怎样的？生命周期通常是由外部事件来触发，或者自己运行到某一阶段自动触发的。对深度开发来说，有两个基础能力必须由框架来提供。即框架要支持：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;手动驱动生命周期&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内部数据的复制和置换&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;手动驱动生命周期对自动化测试之类的功能来说很重要，特别是在做一些基础性的测试时，有了这个能力就不用再完全模拟外部的触发条件。而内部数据的复制和置换则能为录制、还原现场、协同等高级功能提供基础。我们现在就在尝试基于这种能力，实现“用户可以将自己的出错场景一键发送给开发人员来复现”的功能。值得注意的是，有的语言中复制对象是非常昂贵的操作，这时可能就需要考虑，是否使用 immutable 的数据格式会更好？还是依靠一些约定和标记提供自身提供廉价的复制能力？限于篇幅，在此就不再展开。对框架中的数据问题感兴趣的读者可以去搜索 Single Source of Truth 和 Shared Mutable State 之类的话题，业界已经有非常多的精彩讨论。&lt;/p&gt;
&lt;h4&gt;2.3.2 逻辑&lt;/h4&gt;
&lt;p&gt;聊完数据，终于来到最有意思的逻辑部分。框架从某种意义上来说，就是提供了一种逻辑表达的方式。要在逻辑表达上提升效能，有两个发展阶段：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;提供一些模式或技术。让用户写出低耦合、易重用、易扩展的代码。在写代码时提高效能。例如 MVC、IOC 等等。&lt;/li&gt;
&lt;li&gt;针对不同场景设计更合理的 DSL，能实现代码、图等表达方式的互相转换。在研发的整条链路上实现自动化。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们看到大部分的框架都处于第一个阶段，不管是服务器端的 MVC 还是前端的 MVVM 。但也有少量第二阶段的尝试。例如 Flow Based Programming，试图完全用数据流向的角度来诠释业务中的逻辑。它的代码可以天然被分析成图，甚至能在运行时进行观察：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/iKSmHVoPSUEcoxYFaBfY.jpeg&quot; alt=&quot;&quot; width=&quot;900&quot; height=&quot;585&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a href=&quot;https://noflojs.org/&quot;&gt;noflo&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;还有《理想的应用框架》中提到的基于事件来表示业务逻辑，也是一种 DSL。但这些尝试离最终的目标仍然有差距，最终理想的状态应该是能实现业务流程图、时序图、决策树等业务领域常用的表达方式与代码的互转。虽然有差距，而且看起来要走的路还很长，但是针对一些已经比较稳定的场景，已经有一些好的经验。CMS 框架 &lt;a href=&quot;https://www.drupal.org/&quot;&gt;Drupal&lt;/a&gt; 就是一个很好的例子。它定义好了数据发布的整个流程和相应的钩子系统，让开发者用模块的方式在钩子里去修改或者增加自己的功能。曾经一度实现了一个非常繁荣的社区。更值得肯定的是，社区中很多模块都是可视化的，最终用户不需要写任何代码，按照模块的可视化指引就能完成相应的功能。这实际上就等同于 DSL 与代码的互转了。&lt;/p&gt;
&lt;p&gt;不管哪一个阶段的关键技术，都离不开分析&lt;strong&gt;语义&lt;/strong&gt;的能力。直白一点来说，就是“知道哪段代码是干什么”的能力。&lt;/p&gt;
&lt;p&gt;在第一阶段的框架中，最影响效能的因素并不是”要写代码的多少“，而是写按框架概念写出来的代码是否易于理解、易于维护。这一点在越是大型、越是多人参与的项目中，越是明显。而代码的“语义”是否清晰在某种程度上直接决定了我们是否能通过技术手段来提升可维护性。例如，在使用依赖注入的系统中，如果所有代码的注入声明都清晰地表明了注入的到底是什么的话，那我们就很容通过语言层面的支持或者简单字符串匹配得到依赖关系图。反之，如果注入的信息模糊，既可能是函数也可能是 model，没有任何明显约束的话，那就可能得通过语法树，找到注入的入口才能分析出来，这样实现的成本就成倍增加了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/ShayQXLlsZMIxwwiphfS.png&quot; alt=&quot;&quot; width=&quot;900&quot; height=&quot;506&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a href=&quot;http://rekit.js.org/&quot;&gt;Rekit Studio&lt;/a&gt; 依赖分析图)&lt;/p&gt;
&lt;p&gt;相比于依赖分析，更重要的是“&lt;strong&gt;调用关系分析&lt;/strong&gt;”，它对于帮助理解流程，特别是排查问题特别有用。举个简单的例子，在数据驱动的前端框架中，因为视图完全是数据的展现，发现视图不对了，如果能动态展示出修改了数据的业务堆栈(不是函数堆栈)，就非常有用。不需要再一步一步断点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/JYzLTXXKlbsLvlYNRrGR.png&quot; alt=&quot;&quot; width=&quot;900&quot; height=&quot;472&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然实现起来也更难。难点有两个：一是依赖分析一般是运行前的，是静态的，而调用关系一般是运行时的，是动态的；二是依赖通常是声明出来，容易读出来，而调用通常是在主动式的语句中，会遇到条件判断、循环、甚至通过变量在不同函数、类作用域中传递，比较难分析。这种难，其实也就是语义不清。在框架的设计或者我们自己的改造中，可以通过三点来尽量提供明确的语义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;尽量转主动为被动&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;尽量片段化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消除用户代码中的副作用和对外部作用域中变量的依赖&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;前两点很好理解，被动声明式的代码结构更容易被分析。虽然在实践的时候需要大量经验，来保障设计出来的声明格式即能覆盖所有场景又要容易编写，但是它带来的收益也是最可观的。GraphQL 就是一个最好的例子，在服务器端用声明的结构将数据结构和关系表达出来，在客户端用声明的结构将要获取的数据结构表达出来，后端就可以使用统一的引擎来生成调用，省去的大量写接口的时间。第二点，尽量片段化是指我们在引导用户写代码的时候，应该把生命周期等等概念拆得尽可能小，使语义更细致。写起来繁琐的问题可以通过工具或者语法糖去解决。&lt;/p&gt;
&lt;p&gt;第三点最重要，消除副作用指的是任何时候运行用户的代码片段应该都不会对外部环境产生影响。而消除对外部作用域中变量的依赖指的是对要用的数据、服务尽量都用参数的形式传入。这样做的好处有两个，对于一些复杂的，难以分析的调用的关系，可以将要观测的对象包装一下再传入，这样就能动态得到调用关系。在整体运行前，因为无副作用，也可以很容易地通过试运行这些片段来得到一些信息。虽然现在的语法树工具已经比较流行，但真的要完全通过语法分析来得到足够的语义仍然有很大的工作量。而上述的这三点，可以看做是快速、廉价的实现方式，并且实践中效果非常不错。&lt;/p&gt;
&lt;h4&gt;综合&lt;/h4&gt;
&lt;p&gt;最后值得一提的是，上面所讲到的数据和逻辑中的原则与技术并不是相互独立的。在《&lt;a href=&quot;http://www.cnblogs.com/sskyy/p/6496287.html&quot;&gt;前端服务化——页面搭建工具的死与生&lt;/a&gt;》和《&lt;a href=&quot;http://www.cnblogs.com/sskyy/p/7002404.html&quot;&gt;通天塔之石——企业级前端组件库方案&lt;/a&gt;》这两篇文章中看到，我们所使用的很多技术，其实是混合支撑着数据修改追溯、组件属性可视化等功能。他们中间有的也有着依赖关系。但相比于“数据和逻辑”这两个源头，这些并不重要。只要掌握了这两个源头面对的问题，其他都是能推导出来的。&lt;/p&gt;
&lt;p&gt;对开源框架如何使用也是同样的道理。对于严肃的企业生产来说，应该找到业务所面临场景的源头，吸收解决问题的先进的想法，但自己实现，就像编程语言各自实现语言特性一样。而不应该只是停留在包装开源框架这个层次。开源框架为了适应尽量广的场景，有更大的群众基础，给出的一定是普适性的方案，这种普适性在业务发展到一定程度，有了足够多的独特性之后就会变成巨大的包袱反噬研发效能。等到了这个时候再考虑自己研发，其迁移、适配、研发成本以及带来的风险可能会变得非常大。而我们从前文看到，掌握了框架研发的几个核心，从小的场景就开始投入，成本并不高。最重要的是长久积累形成体系后，所带来的“流程上自动化“、”降低下游实现成本”等能力能持续地帮助企业提升研发效能。&lt;/p&gt;
&lt;h3&gt;2.3 通用子系统与核心接口&lt;/h3&gt;
&lt;p&gt;从流程的角度来看，提升效能的主要是靠自动化。而从系统的角度来说，则主要是靠能力的复用。”用户“、”流程“、”权限“几乎是任何业务系统中都存在的，因此将这三者也纳入到了基础研发体系的范围。在这里我们并不打算深入到每个系统所面临的具体问题中，只讲两点：&lt;/p&gt;
&lt;p&gt;一、产品化或者子系统化，不要过早平台化，对将来系统整体打包有益。过去的互联网公司习惯将这些公用系统平台化，各个业务系统来接入。但这几年互联网业务进入的都是新领域，面临的市场、用户常常是需要隔离的。这个时候系统整体复制的能力就变得非常重要，所以一开始就将这三者以子系统或者子产品的方式来对待，能为之后的发展提供更多的灵活性。&lt;/p&gt;
&lt;p&gt;二、三者不是并列关系，不用纠结于能力解耦，制定核心系统接入规范才是最重要的。权限系统无论是 RBAC 还是 DAC 都离不开用户系统的支持。流程则是既依赖于权限也依赖于用户。如果把运行时框架看做是主板，这三者应该是主板上的补充部分，一起为核心系统的接入提供针脚。同样是为了系统整体打包的能力，应该尽早制定核心系统接入的规范。&lt;/p&gt;
&lt;h2&gt;3 潮汐&lt;/h2&gt;
&lt;p&gt;在《月相》一章我们探讨了 web 基础研发体系的构成及部分重难点。相比于具体技术本身，这套方案对组织成长和重塑的意义更大。在这一章中我们会先从大团队中两个有启发性的问题出发，逐步深入到如何打造一个更高效的研发组织方案中。虽然问题出现是在大团队的，但对小团队仍有两点借鉴意义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;小团队随着业务发展会长成大团队，也可能碰到一样的问题。&lt;/li&gt;
&lt;li&gt;问题本身萌芽于成长过程之中，予以正确的指导能更加节约人力，助力公司发展。&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;3.1 平台林立&lt;/h3&gt;
&lt;p&gt;首先注意，我们讨论的仍是 web 层的问题。这个现象在有多个不同业务的大公司中最常见。出现这种现象的原因有两个，一是公司到了万人规模，实际上就相当于上百个百人规模的小公司，必然想法很多，出现重复的自然也多。&lt;/p&gt;
&lt;p&gt;另一个更重要是，在 web 这个领域，特别是前端，&lt;strong&gt;基础设施变化太快&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;无论是浏览器底层所支持的 api，还是 javascript 语言本身变化都非常快。底层一变化，研发的各个环节必然出现基于新技术的空缺，很多框架和平台就是随着这些空缺出现的。现象本身存在即合理，但如果有更好的统一管理，是能从如下两个方面提取出巨大的效能的。&lt;/p&gt;
&lt;p&gt;一、&lt;strong&gt;如果将研发流程中的各个环节中独立的平台统一，可以极大地加速业务开发&lt;/strong&gt;。直接决定业务发展速度的是进行业务开发的工程师。他们最希望的就是只有一个平台将研发的所有流程都搞定，并且尽量自动化。平台一多，对业务开发工程师来说，学习、沟通、协作的成本就会陡增。这个成本有多大？在我们通过线下了解发现，这个成本很多时候甚至会超过业务开发本身。&lt;/p&gt;
&lt;p&gt;二、&lt;strong&gt;加大对趋势和方向的研究，预防无序的框架和平台的投入，这样能尽量防止走偏和无效劳动，也是一种提升&lt;/strong&gt;。越是大的团队，这一点越明显。“基础设施变化”这样一个滚滚巨轮这些年压碎了多少框架和平台，其中很多产生的效益都不足以覆盖其研发成本。更坏的是，出于个人利益等原因，有的平台过时了也不肯下线，阻挡了整个团队随基础设施一起进步的机遇，消耗的是更多的未来的人力。&lt;/p&gt;
&lt;p&gt;我们在《月相》中提出的研发体系就是实现这两个提升的具体手段。&lt;/p&gt;
&lt;p&gt;首先，有一个完整的体系来将研发流程当成一个整体对待，并且通过统一的平台来实现，能更好地实现流程的自动化。降低一线工程师沟通、学习成本。&lt;/p&gt;
&lt;p&gt;其次，对运行时框架的投入，本身就包含着对趋势和新技术的研究，可以缓解被基础设施带着跑的问题。并且我们看到运行时框架研究到了一定程度，能够极大的减少后续测试、监控实现的成本，也降低了基础设施变化所产生的多米诺效应。这里对管理带来的反思是，我们应该谨慎“平台化”的思考。特别是下游环节，因为“平台化”的思维，必然要考虑对各种不同的端进行适配，必然要制定各种规范，这些都是人力成本。如《月相》中所示，上游理清楚并且统一后，下游是能有针对性地、很低成本地实现的，根本不需要“平台级”的成本投入。当然，在这里所说的只是减少技术上的投入，环节本身还是非常重要的。&lt;/p&gt;
&lt;p&gt;平台林立从某一方面来说也表示着团队内部有着大量的无序的力量，这种力量在团队出现不同环节的分工时就产生了，尽早地建立研发体系就能尽早地将这些力量用起来，创造真正的价值。&lt;/p&gt;
&lt;h3&gt;3.2 资源池&lt;/h3&gt;
&lt;p&gt;很多大公司的 web 研发团队都被当成资源池来用，哪个业务需要就投入到哪里。现象的直接原因有两个：一是&lt;strong&gt;从管理的角度来说，web 层的研发工作相对来说可替换性强，具备形成资源池的可能&lt;/strong&gt;。二是 &lt;strong&gt;web 研发处于业务决策链底层，人员相对来说最紧张，因此通过资源池的方式能动态地支持业务开发，是最简单的解决方案&lt;/strong&gt;。但这个方案其实是相当低效的。我们从对工程师个人的关注来切入这个话题。&lt;/p&gt;
&lt;p&gt;首先从主观的角度出发，一个有激情，对职业未来充满憧憬的工程师与苦大仇深的工程师在效率上是有成倍差别的。除了其本身的性格外，造就这两种态度有很大一部分是职业上升渠道的问题。首先，和任何能被当成资源池来用的工作一样，因为可替换性强，所以不容易被重视。其次，目前的上升渠道不够。web 研发工程师的上升渠道要么是纵向的，当业务发展得足够好，重要性提高，成为系统负责人。要么是横向的，随着团队扩大，管理需要，成为管理者。这两者一个基于业务一个基于人力，和技术相关不大。所以有才华的工程师自然会想要造框架、造平台，努力成为公司技术中重要的一部分。但没有正确的引导，就会成为上面所说”无序的力量“，发展得不对反而会变成公司的消耗。而当他发现自己付出的努力得不到回报的时，就有可能变成苦大仇深的工程师。&lt;/p&gt;
&lt;p&gt;最终影响的不只是工程师自身，公司也会要在管理成本上为其买单。我们在与一些资深 hr 交流时，他们进一步说明了这个问题。在公司工作了四、五年的员工，是已经融入了公司，理解公司文化也了解公司问题的人，算是中流砥柱。如果得不到好的上升，可能会有两种情况：其中有想法有行动力的，多半会选择离开。既会对组织稳定性会造成影响，也会让公司付出的培养成本付诸东流，对公司来说可算是很大的损失；另一种更不好的则是既不离开，也不像以前一样努力。他们在团队内有一定的话语权，却丧失了进去的激情，不再发挥积极的作用。当公司需要快速扩张、快速发生变革的时候，他们就会成为隐性的管理成本。&lt;/p&gt;
&lt;p&gt;而解决方案，其实很简单。大公司内部通常都有”框架组“、”平台组“类似的部门，但基本都停留在”可用“阶段就完成任务了。这远远不够，如果将建立 web 基础研发体系作为目标，以产品化为衡量标准，加强重视和投入。 web 工程师的上升渠道就会得以扩张，公司内无序的力量就会进入到正确的领域。创造的价值又能进一步为研发提供能量，形成一个正循环，逐步缓解人力紧张的态势，资源池现象也就自然会消失。这很像我们身体受伤时，外部肿胀只是炎症的表现，消炎了，肿胀自然也就好了。重点是找到关键进行消炎，而不是围着外部现象思考。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gw.alipayobjects.com/zos/rmsportal/ziSawgUzzIGMBQURexZP.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;建立体系还能带来的好处是，通过提升 web 研发的效率，降低业务研发所需的人数，能帮助大公司重新回到小步快跑的节奏。张小龙有一篇演讲《&lt;a href=&quot;http://tech.qq.com/a/20161029/018612.htm&quot;&gt;警惕KPI和复杂流程&lt;/a&gt;》，讲到了小团队的重要性，随着互联网公司的竞争越来越激烈，这种重要性会变得越来越高。我们从一些互联网的新巨头上，其实已经看见了“&lt;strong&gt;核心技术+基础web研发能力&lt;/strong&gt;”来快速出产品，占领市场的趋势。对小公司来说，统一的 web 基础研发体系，是帮助实现超车的重要一环。对大公司来说，则是进一步挖掘效能，防止掉队的必修课了。&lt;/p&gt;
&lt;h2&gt;4 后记&lt;/h2&gt;
&lt;p&gt;这篇文章笔者前后重写了三次，因为面对 web 一线工程师这样一个庞大的群体，效能提升已经不仅仅是技术或管理某一方面的事情，而是要综合各个方面来寻求个人和公司发展的共赢。 web 一线研发是很多工程师进入这个领域最开始做的事情，但是笔者看到了很多有才华的人困在了低效、重复的工作里面，努力了也因为方向不对而徒劳。这对个人和公司都是损失。在技术上找到方向，在管理上予以支持，多方发力，其实能提升的效能远超十倍。当然，一篇文章不足以实现任何改变，这篇文章最主要的目还是抛砖引玉，也希望对这个方向有想法，志同道合的朋友联系我，一起交流，一起推动。&lt;/p&gt;
&lt;p&gt;邮箱: &lt;a href=&quot;mailto:ariesate@outlook.com&quot; target=&quot;_blank&quot;&gt;ariesate@outlook.com&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;5 答读者问&lt;/h2&gt;
&lt;p&gt;问：研发体系的统一规划不是破坏了竞争和创新吗？&lt;/p&gt;
&lt;p&gt;答：统一规划并不是指不要竞争，不要创新。而是防止开倒车的情况出现，是给竞争和创新指定一个方向。例如我们在文中理清上下游关系，目的是指导研发力量应该往哪里投入，在投入的过程中仍然可以采取竞争的形式。&lt;/p&gt;

&lt;p&gt;问：框架研发提升效能的趋势？&lt;/p&gt;
&lt;p&gt;答：分两个方向。一是框架本身，会朝着“增强对用户代码的理解和控制力”这个方向前进。用户按框架写的代码，能不能通过工具分析出具体的语义？人工的低级错误能不能自动检测出来并自动修正？能不能转化成某种人类习惯的表达方式，比如图？当控制力达到一定程度后，这些能力都实现后，再往下应该就是代码的自动生成。&lt;/p&gt;
&lt;p&gt;另一个值得一提的是框架能力与业务特有属性会一起沉淀到 IDE 上，会出现面向专有框架的 IDE，面向单个具体工程的 IDE。分析图，自动扫描工具都由 IDE 作为载体，就像很多游戏的专用编辑器一样。只有沉淀到 IDE 上才是最便捷、最有针对性的。对这个方向感兴趣的读者可以跟我邮件讨论，目前我们已经有一些初步的想法。&lt;/p&gt;

&lt;p&gt;问：文章中讲到的问题都是大公司的，对小团队来说，什么时候应该开始建立自己的基础研发体系？&lt;/p&gt;
&lt;p&gt;答：研发体系的建立可以分为规划和实施两个阶段。规划的话，从一开始就应该有所规划。在前期人力不够的情况下，不用强行追求打造自己的框架和工具，可以用开源的。但应该始终把开源的东西拿到自己的体系中，清楚地知道它在自己体系中的角色，也清晰地知道自己用了它的什么特性，未来还需要补充什么。什么时候开始实施其实有一个象征性的标准，也是我们前面在无序的力量中提到的——出现了不同环节的分工时。有的团队业务扩张太快，人力一直不够，那么建议按五分之一到三分之一的比例来抽出人力打造基础设施。磨刀不误砍柴工，何况投资得到的回报是电锯呢。&lt;/p&gt;
</description>
<pubDate>Tue, 20 Mar 2018 15:07:00 +0000</pubDate>
<dc:creator>侯振宇</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sskyy/p/8613393.html</dc:identifier>
</item>
<item>
<title>Linux epoll源码注释 - stonehat</title>
<link>http://www.cnblogs.com/stonehat/p/8613505.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stonehat/p/8613505.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;理解了中断、等待队列、调度，你就能懂Linux的80%。&lt;/p&gt;
&lt;p&gt;--老子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;转发的话，请注明出处哦：&lt;a href=&quot;http://www.cnblogs.com/stonehat/&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/stonehat/&lt;/a&gt;&lt;br/&gt;Linux系统内核提供了三个系统调用:&lt;/p&gt;
&lt;p&gt;include/linux/syscalls.h&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// epoll_create，创建epoll描述符
asmlinkage long sys_epoll_create(int size);
// epoll_ctl, 操作epoll描述符，增删改
asmlinkage long sys_epoll_ctl(int epfd, int op, int fd,
                struct epoll_event __user *event);
// epoll_wait, 你懂的
asmlinkage long sys_epoll_wait(int epfd, struct epoll_event __user *events,
                int maxevents, int timeout);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其函数实现在fs/eventpoll.c&lt;/p&gt;
&lt;p&gt;eventpoll 本身也是一个支持poll操作的文件，所以可以把eventpoll组成一个树形关系。&lt;/p&gt;
&lt;p&gt;下面分别按照sys_epoll_create，sys_epoll_ctl，sys_epoll_wait的顺序分析三个系统调用。&lt;/p&gt;
&lt;h2 id=&quot;重要的结构体&quot;&gt;重要的结构体&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;co&quot;&gt;// eventpoll结构体&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; eventpoll {
    &lt;span class=&quot;co&quot;&gt;/* Protect the this structure access */&lt;/span&gt;
    rwlock_t lock;

    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 同步用的内核信号量&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; rw_semaphore sem;

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 等待队列，epoll_wait()使用，将调用线程挂在这个队列上。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    wait_queue_head_t wq;

    &lt;span class=&quot;co&quot;&gt;/* 等待队列，file-&amp;gt;poll()会使用，在epoll中函数为ep_eventpoll_poll */&lt;/span&gt;
    wait_queue_head_t poll_wait;

    &lt;span class=&quot;co&quot;&gt;/* 就绪列表*/&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; list_head rdllist;

    &lt;span class=&quot;co&quot;&gt;/* 红黑树，维护了 */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; rb_root rbr;
};&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;63&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 内核中文件&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file {
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; list_head    f_list;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; dentry       *f_dentry;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; vfsmount         *f_vfsmnt;
    &lt;span class=&quot;co&quot;&gt;//文件操作指针&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file_operations  *f_op;
    atomic_t        f_count;
    &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;        f_flags;
    mode_t          f_mode;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;         f_error;
    loff_t          f_pos;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; fown_struct  f_owner;
    &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;        f_uid, f_gid;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file_ra_state    f_ra;

    &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt;       f_version;
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt;            *f_security;

    &lt;span class=&quot;co&quot;&gt;/* file中的私有自定义数据 */&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt;            *private_data;

&lt;span class=&quot;ot&quot;&gt;#ifdef CONFIG_EPOLL&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/* Used by fs/eventpoll.c to link all the hooks to this file */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; list_head    f_ep_links;
    spinlock_t      f_ep_lock;
&lt;span class=&quot;ot&quot;&gt;#endif &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;/* #ifdef CONFIG_EPOLL */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; address_space    *f_mapping;
};

&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file_operations {
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; module *owner;
    loff_t (*llseek) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, loff_t, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;);
    ssize_t (*read) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt; __user *, size_t, loff_t *);
    ssize_t (*aio_read) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; kiocb *, &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt; __user *, size_t, loff_t);
    ssize_t (*write) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt; __user *, size_t, loff_t *);
    ssize_t (*aio_write) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; kiocb *, &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt; __user *, size_t, loff_t);
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; (*readdir) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; *, filldir_t);
    &lt;span class=&quot;co&quot;&gt;// 不阻塞，检测file状态（可读、可写等），如果条件不满足，pt将会被加到等待队列中。（一般是这种逻辑，最终如何实现还是要看设备驱动）&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; (*poll) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *f, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; poll_table_struct *pt);
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; (*ioctl) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; inode *, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt;);
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; (*mmap) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; vm_area_struct *);
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; (*open) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; inode *, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *);
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; (*flush) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *);
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; (*release) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; inode *, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *);
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; (*fsync) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; dentry *, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; datasync);
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; (*aio_fsync) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; kiocb *, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; datasync);
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; (*fasync) (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;);
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; (*lock) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file_lock *);
    ssize_t (*readv) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; iovec *, &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt;, loff_t *);
    ssize_t (*writev) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; iovec *, &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt;, loff_t *);
    ssize_t (*sendfile) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, loff_t *, size_t, read_actor_t, &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; *);
    ssize_t (*sendpage) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; page *, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;, size_t, loff_t *, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;);
    &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; (*get_unmapped_area)(&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt;);
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; (*check_flags)(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;);
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; (*dir_notify)(&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *filp, &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; arg);
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; (*flock) (&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file_lock *);
};&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;概念与关系&quot;&gt;概念与关系&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;文件描述符fd：进程打开的文件的数字代表形式，是文件指针的索引。&lt;/li&gt;
&lt;li&gt;struct file：在内核中表示进程打开的文件。task.files[fd]=file&lt;/li&gt;
&lt;li&gt;struct inode：静态的文件表示。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;一.-sys_epoll_create&quot;&gt;一. sys_epoll_create&lt;/h3&gt;
&lt;p&gt;代码如下：为了方便理解原理，无关紧要的代码逻辑和异常处理删掉了&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;
asmlinkage &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; sys_epoll_create(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; size)
{
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; error, fd;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; inode *inode;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *file;
    
    .....
      
    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 创建一个新的file，inode，获得file对应的fd。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 并且将file加入到当前进程打开文件列表。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    error = ep_getfd(&amp;amp;fd, &amp;amp;inode, &amp;amp;file);
    &lt;span class=&quot;co&quot;&gt;/* 创建struct eventpoll，并挂在file的private_data指针上*/&lt;/span&gt;
    error = ep_file_init(file);
    .....
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; fd;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ep_getfd简单流程&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;

&lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ep_getfd(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; *efd, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; inode **einode, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file **efile)
{
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; qstr this;
    &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt; name[&lt;span class=&quot;dv&quot;&gt;32&lt;/span&gt;];
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; dentry *dentry;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; inode *inode;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *file;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; error, fd;

    &lt;span class=&quot;co&quot;&gt;/* Get an ready to use file */&lt;/span&gt;
    error = -ENFILE;
    file = get_empty_filp();
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!file)
        &lt;span class=&quot;kw&quot;&gt;goto&lt;/span&gt; eexit_1;

    &lt;span class=&quot;co&quot;&gt;/* Allocates an inode from the eventpoll file system */&lt;/span&gt;
    inode = ep_eventpoll_inode();
    error = PTR_ERR(inode);
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (IS_ERR(inode))
        &lt;span class=&quot;kw&quot;&gt;goto&lt;/span&gt; eexit_2;

    &lt;span class=&quot;co&quot;&gt;/* Allocates a free descriptor to plug the file onto */&lt;/span&gt;
    error = get_unused_fd();
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (error &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;goto&lt;/span&gt; eexit_3;
    fd = error;

    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Link the inode to a directory entry by creating a unique name&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * using the inode number.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    error = -ENOMEM;
    sprintf(name, &lt;span class=&quot;st&quot;&gt;&quot;[%lu]&quot;&lt;/span&gt;, inode-&amp;gt;i_ino);
    this.name = name;
    this.len = strlen(name);
    this.hash = inode-&amp;gt;i_ino;
    dentry = d_alloc(eventpoll_mnt-&amp;gt;mnt_sb-&amp;gt;s_root, &amp;amp;this);
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!dentry)
        &lt;span class=&quot;kw&quot;&gt;goto&lt;/span&gt; eexit_4;
    dentry-&amp;gt;d_op = &amp;amp;eventpollfs_dentry_operations;
    d_add(dentry, inode);
    file-&amp;gt;f_vfsmnt = mntget(eventpoll_mnt);
    file-&amp;gt;f_dentry = dentry;
    file-&amp;gt;f_mapping = inode-&amp;gt;i_mapping;

    file-&amp;gt;f_pos = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    file-&amp;gt;f_flags = O_RDONLY;
    file-&amp;gt;f_op = &amp;amp;eventpoll_fops;
    file-&amp;gt;f_mode = FMODE_READ;
    file-&amp;gt;f_version = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    file-&amp;gt;private_data = NULL;

    &lt;span class=&quot;co&quot;&gt;/* Install the new setup file into the allocated fd. */&lt;/span&gt;
    fd_install(fd, file);

    *efd = fd;
    *einode = inode;
    *efile = file;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;

eexit_4:
    put_unused_fd(fd);
eexit_3:
    iput(inode);
eexit_2:
    put_filp(file);
eexit_1:
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; error;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;查找一个没有用的文件描述符。记为fd&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;创建一个空文件file结构体。记为epfile&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在epoll的文件系统中创建一个inode&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;epfile和inode做关联。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;epfile的f_ops成员（文件操作指针）和epoll的自定义函数组eventpoll_fops做关联。比较重要的一点是eventpoll_fops有一个自定义的poll函数，这个函数很重要，是实现epoll级联模型的关键。后面可以通过比较f_ops是否等于eventpoll_fops来判断file是不是epoll file。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;   &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file_operations eventpoll_fops = {
    .release    = ep_eventpoll_close,
    .poll       = ep_eventpoll_poll
   };&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ol readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;将epfile放到进程的打开文件列表中管理，用fd做索引。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;初始化eventpoll结构，初始化等待队列和就绪队列等。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;将epfile的private_data指向eventpoll结构。方便后面取eventpoll的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;返回给调用线程fd。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;二sys_epoll_ctl&quot;&gt;二、sys_epoll_ctl&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;sys_epoll_ctl(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; epfd, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; op, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; fd, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; epoll_event __user *event)
{
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; error;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *file, *tfile;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; eventpoll *ep;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; epitem *epi;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; epoll_event epds;

    DNPRINTK(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, (KERN_INFO &lt;span class=&quot;st&quot;&gt;&quot;[%p] eventpoll: sys_epoll_ctl(%d, %d, %d, %p)&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;,
             current, epfd, op, fd, event));

    error = -EFAULT;
    &lt;span class=&quot;co&quot;&gt;// 1. 从用户空间拷贝event数据。&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (EP_OP_HASH_EVENT(op) &amp;amp;&amp;amp;
        copy_from_user(&amp;amp;epds, event, &lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; epoll_event)))
        &lt;span class=&quot;kw&quot;&gt;goto&lt;/span&gt; eexit_1;

    &lt;span class=&quot;co&quot;&gt;/* 2. 根据epollfile的文件描述符获得对应的file结构体，内核中fd和file是有一个映射关系的*/&lt;/span&gt;
    error = -EBADF;
    file = fget(epfd);
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!file)
        &lt;span class=&quot;kw&quot;&gt;goto&lt;/span&gt; eexit_1;

    &lt;span class=&quot;co&quot;&gt;/* 3. 获得要操作的描述符的file指针，例如socket描述符 */&lt;/span&gt;
    tfile = fget(fd);
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!tfile)
        &lt;span class=&quot;kw&quot;&gt;goto&lt;/span&gt; eexit_2;

    &lt;span class=&quot;co&quot;&gt;/* 4. 校验tfile是否支持poll操作，必须支持poll才能使用epoll */&lt;/span&gt;
    error = -EPERM;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!tfile-&amp;gt;f_op || !tfile-&amp;gt;f_op-&amp;gt;poll)
        &lt;span class=&quot;kw&quot;&gt;goto&lt;/span&gt; eexit_3;

    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 5. 校验是否是epoll的file指针&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    error = -EINVAL;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (file == tfile || !IS_FILE_EPOLL(file))
        &lt;span class=&quot;kw&quot;&gt;goto&lt;/span&gt; eexit_3;

    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 6. 取eventpoll，从创建时，我们知道epoll把自己的eventpoll结构体放在file-&amp;gt;private_data了里面。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    ep = file-&amp;gt;private_data;
    
    down_write(&amp;amp;ep-&amp;gt;sem);

    &lt;span class=&quot;co&quot;&gt;/* Try to lookup the file inside our hash table */&lt;/span&gt;
    epi = ep_find(ep, tfile, fd);
    &lt;span class=&quot;co&quot;&gt;// 7. 具体的逻辑操作&lt;/span&gt;
    error = -EINVAL;
    &lt;span class=&quot;kw&quot;&gt;switch&lt;/span&gt; (op) {
    &lt;span class=&quot;co&quot;&gt;// 添加&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; EPOLL_CTL_ADD:
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!epi) {
            epds.events |= POLLERR | POLLHUP;

            error = ep_insert(ep, &amp;amp;epds, tfile, fd);
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
            error = -EEXIST;
        &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
    &lt;span class=&quot;co&quot;&gt;// 删除&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; EPOLL_CTL_DEL:
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (epi)
            error = ep_remove(ep, epi);
        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
            error = -ENOENT;
        &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
    &lt;span class=&quot;co&quot;&gt;// 修改&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; EPOLL_CTL_MOD:
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (epi) {
            epds.events |= POLLERR | POLLHUP;
            error = ep_modify(ep, epi, &amp;amp;epds);
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
            error = -ENOENT;
        &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
    }

    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * The function ep_find() increments the usage count of the structure&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * so, if this is not NULL, we need to release it.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (epi)
        ep_release_epitem(epi);

    up_write(&amp;amp;ep-&amp;gt;sem);

eexit_3:
    fput(tfile);
eexit_2:
    fput(file);
eexit_1:
    DNPRINTK(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, (KERN_INFO &lt;span class=&quot;st&quot;&gt;&quot;[%p] eventpoll: sys_epoll_ctl(%d, %d, %d, %p) = %d&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;,
             current, epfd, op, fd, event, error));

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; error;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的逻辑很简单&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;验证输入有效性&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;逻辑上，只需要了解添加即可。epoll的添加是理解整个流程的关键&lt;/p&gt;
&lt;h4 id=&quot;epoll添加&quot;&gt;epoll添加&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ep_insert(&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; eventpoll *ep, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; epoll_event *event,
             &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *tfile, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; fd)
{
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; error, revents, pwake = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; flags;
    
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; epitem *epi;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; ep_pqueue epq;

    error = -ENOMEM;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!(epi = EPI_MEM_ALLOC()))
        &lt;span class=&quot;kw&quot;&gt;goto&lt;/span&gt; eexit_1;

    &lt;span class=&quot;co&quot;&gt;/* Item initialization follow here ... */&lt;/span&gt;
    EP_RB_INITNODE(&amp;amp;epi-&amp;gt;rbn);
    INIT_LIST_HEAD(&amp;amp;epi-&amp;gt;rdllink);
    INIT_LIST_HEAD(&amp;amp;epi-&amp;gt;fllink);
    INIT_LIST_HEAD(&amp;amp;epi-&amp;gt;txlink);
    INIT_LIST_HEAD(&amp;amp;epi-&amp;gt;pwqlist);
    epi-&amp;gt;ep = ep;
    EP_SET_FFD(&amp;amp;epi-&amp;gt;ffd, tfile, fd);
    epi-&amp;gt;event = *event;
    atomic_set(&amp;amp;epi-&amp;gt;usecnt, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
    epi-&amp;gt;nwait = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;

    &lt;span class=&quot;co&quot;&gt;/* 初始化polltable，当调用poll的时候，会调用ep_ptable_queue_proc函数将自身加入等待队列中 */&lt;/span&gt;
    epq.epi = epi;
    init_poll_funcptr(&amp;amp;epq.pt, ep_ptable_queue_proc);

    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 将epq.pt的结构体传入tfile进行poll，poll最终调用ep_ptable_queue_proc函数。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    revents = tfile-&amp;gt;f_op-&amp;gt;poll(tfile, &amp;amp;epq.pt);
 
    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * We have to check if something went wrong during the poll wait queue&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * install process. Namely an allocation for a wait queue failed due&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * high memory pressure.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (epi-&amp;gt;nwait &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;goto&lt;/span&gt; eexit_2;

    &lt;span class=&quot;co&quot;&gt;/* 操作tfile，把当前项加入到epoll列表中。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    spin_lock(&amp;amp;tfile-&amp;gt;f_ep_lock);
    list_add_tail(&amp;amp;epi-&amp;gt;fllink, &amp;amp;tfile-&amp;gt;f_ep_links);
    spin_unlock(&amp;amp;tfile-&amp;gt;f_ep_lock);

    &lt;span class=&quot;co&quot;&gt;/* We have to drop the new item inside our item list to keep track of it */&lt;/span&gt;
    write_lock_irqsave(&amp;amp;ep-&amp;gt;lock, flags);

    &lt;span class=&quot;co&quot;&gt;/* Add the current item to the rb-tree */&lt;/span&gt;
    ep_rbtree_insert(ep, epi);

    &lt;span class=&quot;co&quot;&gt;/* 如果已经有就绪的，就唤醒epollwait等待队列和poll等待队列 */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ((revents &amp;amp; event-&amp;gt;events) &amp;amp;&amp;amp; !EP_IS_LINKED(&amp;amp;epi-&amp;gt;rdllink)) {
        list_add_tail(&amp;amp;epi-&amp;gt;rdllink, &amp;amp;ep-&amp;gt;rdllist);

        &lt;span class=&quot;co&quot;&gt;/* Notify waiting tasks that events are available */&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (waitqueue_active(&amp;amp;ep-&amp;gt;wq))
            wake_up(&amp;amp;ep-&amp;gt;wq);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (waitqueue_active(&amp;amp;ep-&amp;gt;poll_wait))
            pwake++;
    }

    write_unlock_irqrestore(&amp;amp;ep-&amp;gt;lock, flags);

    &lt;span class=&quot;co&quot;&gt;/* We have to call this outside the lock */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (pwake)
        ep_poll_safewake(&amp;amp;psw, &amp;amp;ep-&amp;gt;poll_wait);

    DNPRINTK(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, (KERN_INFO &lt;span class=&quot;st&quot;&gt;&quot;[%p] eventpoll: ep_insert(%p, %p, %d)&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;,
             current, ep, tfile, fd));

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;

eexit_2:
    ep_unregister_pollwait(ep, epi);

    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * We need to do this because an event could have been arrived on some&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * allocated wait queue.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    write_lock_irqsave(&amp;amp;ep-&amp;gt;lock, flags);
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (EP_IS_LINKED(&amp;amp;epi-&amp;gt;rdllink))
        EP_LIST_DEL(&amp;amp;epi-&amp;gt;rdllink);
    write_unlock_irqrestore(&amp;amp;ep-&amp;gt;lock, flags);

    EPI_MEM_FREE(epi);
eexit_1:
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; error;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;整理一下，向epoll添加一个描述符主要步骤如下：&lt;/p&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;构建epitem，epitem之后会加入到eventpoll.rbr中。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;调用init_poll_funcptr，将ep_ptable_queue_proc函数指针赋值给poll_table的qproc，poll_table记为epq.pt，在file的poll函数中，可以传入poll_table作为参数，poll函数会主动调用poll_table的qproc函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;poll_table的结构体如下：&lt;/p&gt;
&lt;p&gt;```C&lt;br/&gt;/**&lt;br/&gt;&lt;a href=&quot;mailto:*@param&quot;&gt;*@param&lt;/a&gt; f:poll的file指针&lt;br/&gt;&lt;a href=&quot;mailto:*@param&quot;&gt;*@param&lt;/a&gt; whead f的等待队列&lt;br/&gt;&lt;a href=&quot;mailto:*@param&quot;&gt;*@param&lt;/a&gt; pt&lt;br/&gt;&lt;em&gt;/&lt;br/&gt;typedef void (&lt;/em&gt;poll_queue_proc)(struct file &lt;em&gt;f, wait_queue_head_t&lt;/em&gt; whead, struct poll_table_struct *pt);&lt;/p&gt;
&lt;p&gt;typedef struct poll_table_struct {&lt;br/&gt;poll_queue_proc qproc;&lt;br/&gt;} poll_table;&lt;/p&gt;
&lt;p&gt;```&lt;br/&gt;poll函数原型&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C // 当上层传入pt结构体时，驱动函数当调用poll_table_struct.qproc来实现阻塞队列的添加工作。 unsigned int (*poll) (struct file *f, struct poll_table_struct *pt);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;调用待监控的文件的poll函数，按第2步所说，poll函数规范的实现应该最终会调用到ep_ptable_queue_proc函数，ep_ptable_queue_proc主要是初始化一个等待队列项（以ep_ptable_queue_proc为回调函数），然后将等待队列项塞到驱动的等待队列中。ep_ptable_queue_proc注释如下：&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;   &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; __wait_queue {
       
    &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; flags;
   &lt;span class=&quot;ot&quot;&gt;#define WQ_FLAG_EXCLUSIVE    0x01&lt;/span&gt;
       &lt;span class=&quot;co&quot;&gt;// 线程指针，如果func为默认的执行函数，这个需要赋值。&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; task_struct * task;
       &lt;span class=&quot;co&quot;&gt;// 等待队列唤醒执行的函数&lt;/span&gt;
    wait_queue_func_t func;
       
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; list_head task_list;
   };
   &lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; __wait_queue wait_queue_t;

   &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; ep_ptable_queue_proc(&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *file, wait_queue_head_t *whead,
                 poll_table *pt)
   {
       &lt;span class=&quot;co&quot;&gt;// 这是一个特殊的宏操作，因为pt和epitem是包含在ep_queue结构体里面的，所以可以根据偏移取同级别的epitem。&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; epitem *epi = EP_ITEM_FROM_EPQUEUE(pt);
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; eppoll_entry *pwq;
    
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (epi-&amp;gt;nwait &amp;gt;= &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; (pwq = PWQ_MEM_ALLOC())) {
           &lt;span class=&quot;co&quot;&gt;// 初始化一个等待队列项，并且设置当等待队列唤醒时的执行函数为ep_poll_callback&lt;/span&gt;
           &lt;span class=&quot;co&quot;&gt;// 这个很关键。等下我们分析这个ep_poll_call&lt;/span&gt;
        init_waitqueue_func_entry(&amp;amp;pwq-&amp;gt;wait, ep_poll_callback);
        pwq-&amp;gt;whead = whead;
        pwq-&amp;gt;base = epi;
           &lt;span class=&quot;co&quot;&gt;// 把刚创建的等待队列项加入到等待队列中。&lt;/span&gt;
        add_wait_queue(whead, &amp;amp;pwq-&amp;gt;wait);
        list_add_tail(&amp;amp;pwq-&amp;gt;llink, &amp;amp;epi-&amp;gt;pwqlist);
        epi-&amp;gt;nwait++;
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;co&quot;&gt;/* We have to signal that an error occurred */&lt;/span&gt;
        epi-&amp;gt;nwait = -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    }
   }

   &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; init_waitqueue_func_entry(wait_queue_t *q,
                    wait_queue_func_t func)
   {
    q-&amp;gt;flags = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    q-&amp;gt;task = NULL;
    q-&amp;gt;func = func;
   }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;至此，添加一个文件描述符到epoll监控内的流程完成了，总的来讲，就是在对应的file中设置等待队列。等待回调ep_poll_callback，。至于对应的file用什么机制来确保文件异步就绪，epoll不管。不过一般是通过中断来实现的。&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;epoll模型的poll函数实现：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;* 
 * structures and helpers &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; f_op-&amp;gt;poll implementations
 */
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; (*poll_queue_proc)(&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *, wait_queue_head_t *, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; poll_table_struct *);

&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; poll_table_struct {
   poll_queue_proc qproc;
} poll_table;
&lt;span class=&quot;co&quot;&gt;//poll_wait函数实现，其实内部调用了poll_table.qproc成员，poll_table.qproc在epoll中对应了上面的ep_ptable_queue_proc函数&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; poll_wait(&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file * filp, wait_queue_head_t * wait_address, poll_table *p)
{
   &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (p &amp;amp;&amp;amp; wait_address)
       p-&amp;gt;qproc(filp, wait_address, p);
}
&lt;span class=&quot;co&quot;&gt;// epollevent的poll函数实现，驱动的逻辑都差不多，有参考意义&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ep_eventpoll_poll(&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *file, poll_table *wait)
{
   &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; pollflags = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
   &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; flags;
   &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; eventpoll *ep = file-&amp;gt;private_data;

   &lt;span class=&quot;co&quot;&gt;/* 1. 加入等待队列中*/&lt;/span&gt;
   poll_wait(file, &amp;amp;ep-&amp;gt;poll_wait, wait);

   &lt;span class=&quot;co&quot;&gt;/* Check our condition */&lt;/span&gt;
   read_lock_irqsave(&amp;amp;ep-&amp;gt;lock, flags);
   &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!list_empty(&amp;amp;ep-&amp;gt;rdllist))
       pollflags = POLLIN | POLLRDNORM;
   read_unlock_irqrestore(&amp;amp;ep-&amp;gt;lock, flags);

   &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; pollflags;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;sys_epoll_wait&quot;&gt;sys_epoll_wait&lt;/h3&gt;
&lt;p&gt;了解了ep_insert的话，这个其实就很容易理解了：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file_operations eventpoll_fops = {
    .release    = ep_eventpoll_close,
    .poll       = ep_eventpoll_poll
};

&lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * sys_epoll_wait实现&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
asmlinkage &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; sys_epoll_wait(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; epfd, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; epoll_event __user *events,
                   &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; maxevents, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; timeout)
{
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; error;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; file *file;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; eventpoll *ep;

    DNPRINTK(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, (KERN_INFO &lt;span class=&quot;st&quot;&gt;&quot;[%p] eventpoll: sys_epoll_wait(%d, %p, %d, %d)&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;,
             current, epfd, events, maxevents, timeout));

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 验证输入的代码忽略&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    error = -EBADF;
    &lt;span class=&quot;co&quot;&gt;// 1. 根据epfd获得对应的file&lt;/span&gt;
    file = fget(epfd);
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!file)
        &lt;span class=&quot;kw&quot;&gt;goto&lt;/span&gt; eexit_1;

    &lt;span class=&quot;co&quot;&gt;// 2. 验证是否是epoll的file，就是验证f_op是否等于eventpoll_fops&lt;/span&gt;
    error = -EINVAL;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!IS_FILE_EPOLL(file))
        &lt;span class=&quot;kw&quot;&gt;goto&lt;/span&gt; eexit_2;

    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 3. 取eventpoll结构体&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    ep = file-&amp;gt;private_data;

    &lt;span class=&quot;co&quot;&gt;/* 4. 调用ep_poll实现具体逻辑。不要被ep_poll名字忽悠了，这个不是poll实现 */&lt;/span&gt;
    error = ep_poll(ep, events, maxevents, timeout);

eexit_2:
    fput(file);
eexit_1:
    DNPRINTK(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, (KERN_INFO &lt;span class=&quot;st&quot;&gt;&quot;[%p] eventpoll: sys_epoll_wait(%d, %p, %d, %d) = %d&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;,
             current, epfd, events, maxevents, timeout, error));

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; error;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;epoll_wait最终调用ep_poll来实现核心功能。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ep_poll(&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; eventpoll *ep, &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; epoll_event __user *events,
           &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; maxevents, &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; timeout)
{
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; res, eavail;
    &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; flags;
    &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; jtimeout;
    wait_queue_t wait;

    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 1. 内核中是是用滴答数作为时间计时的，所以下面代码是转换时间为滴答数。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    jtimeout = timeout == -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; || timeout &amp;gt; (MAX_SCHEDULE_TIMEOUT - &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;) / HZ ?
        MAX_SCHEDULE_TIMEOUT: (timeout * HZ + &lt;span class=&quot;dv&quot;&gt;999&lt;/span&gt;) / &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;;

retry:
    write_lock_irqsave(&amp;amp;ep-&amp;gt;lock, flags);

    res = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;co&quot;&gt;// 1. 如果就绪队列是空的，就进行等待&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (list_empty(&amp;amp;ep-&amp;gt;rdllist)) {
        &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;         * 2. 把当前调用epoll_wait的线程加入到wq等待队列中，当ep_poll_callback()会唤醒这个线程。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;         * current是当前线程的代表，最终是从cpu中取得的。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;         */&lt;/span&gt;
        init_waitqueue_entry(&amp;amp;wait, current);
        add_wait_queue(&amp;amp;ep-&amp;gt;wq, &amp;amp;wait);
        &lt;span class=&quot;co&quot;&gt;//死循环处理。&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (;;) {
            &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;             * 3. 设置为可打断，方便处理信号。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;             */&lt;/span&gt;
            set_current_state(TASK_INTERRUPTIBLE);
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!list_empty(&amp;amp;ep-&amp;gt;rdllist) || !jtimeout)
                &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
             &lt;span class=&quot;co&quot;&gt;// 4. 处理未处理信号&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (signal_pending(current)) {
                res = -EINTR;
                &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
            }

            write_unlock_irqrestore(&amp;amp;ep-&amp;gt;lock, flags);
             &lt;span class=&quot;co&quot;&gt;// 类似于睡眠。其返回值为剩余时间。该函数会将该cpu的任务切换掉。所以下一行代码在重新调度前不会执行。&lt;/span&gt;
            jtimeout = schedule_timeout(jtimeout);
            write_lock_irqsave(&amp;amp;ep-&amp;gt;lock, flags);
        }
        &lt;span class=&quot;co&quot;&gt;//把调用线程从等待队列删除。&lt;/span&gt;
        remove_wait_queue(&amp;amp;ep-&amp;gt;wq, &amp;amp;wait);

        set_current_state(TASK_RUNNING);
    }

    eavail = !list_empty(&amp;amp;ep-&amp;gt;rdllist);

    write_unlock_irqrestore(&amp;amp;ep-&amp;gt;lock, flags);

    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 将events数据传回用户空间&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!res &amp;amp;&amp;amp; eavail &amp;amp;&amp;amp;
        !(res = ep_events_transfer(ep, events, maxevents)) &amp;amp;&amp;amp; jtimeout)
        &lt;span class=&quot;kw&quot;&gt;goto&lt;/span&gt; retry;

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; res;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ep_poll的步骤如下：&lt;/p&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;转换超时时间为cpu滴答计数。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;查询就绪队列是否就绪，如果有就绪的，就直接返回给上层。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;如果没有就绪的，就等待。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;a. 把调用线程添加到eventpoll.wq队列中。&lt;/p&gt;
&lt;p&gt;b. 设置自身为可打断状态&lt;/p&gt;
&lt;p&gt;c. 检查现在是否有就绪，有的话就直接返给上层。&lt;/p&gt;
&lt;p&gt;d. 处理信号。&lt;/p&gt;
&lt;p&gt;c. 发起调度，将自身切换为阻塞状态。等待被唤醒。唤醒的方式有：ep_poll_callback唤醒eventpoll.wq队列或者其他中断唤醒。ep_poll_callback是sys_epoll_ctl添加epoll监听的时候设置的等待队列回调。其实现为：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;
&lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ep_poll_callback(wait_queue_t *wait, &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; mode, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; sync, &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; *key)
{
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; pwake = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; flags;
     &lt;span class=&quot;co&quot;&gt;// 1. 这是一个特殊的宏操作，因为wait和epitem是包含在ep_queue结构体里面的，所以可以根据偏移取同级别的epitem。&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; epitem *epi = EP_ITEM_FROM_WAIT(wait);
    &lt;span class=&quot;co&quot;&gt;// 2. 获得对应的eventpoll&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; eventpoll *ep = epi-&amp;gt;ep;

    DNPRINTK(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, (KERN_INFO &lt;span class=&quot;st&quot;&gt;&quot;[%p] eventpoll: poll_callback(%p) epi=%p ep=%p&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;,
             current, epi-&amp;gt;file, epi, ep));

    write_lock_irqsave(&amp;amp;ep-&amp;gt;lock, flags);
    ....
    &lt;span class=&quot;co&quot;&gt;// 3. 将就绪item加入到就绪&lt;/span&gt;
    list_add_tail(&amp;amp;epi-&amp;gt;rdllink, &amp;amp;ep-&amp;gt;rdllist);

is_linked:
    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 4. 唤醒wq等待队列(就是唤醒等待epoll_wait的线程)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (waitqueue_active(&amp;amp;ep-&amp;gt;wq))
        wake_up(&amp;amp;ep-&amp;gt;wq);
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (waitqueue_active(&amp;amp;ep-&amp;gt;poll_wait))
        pwake++;

is_disabled:
    write_unlock_irqrestore(&amp;amp;ep-&amp;gt;lock, flags);

    &lt;span class=&quot;co&quot;&gt;/* We have to call this outside the lock */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (pwake)
        ep_poll_safewake(&amp;amp;psw, &amp;amp;ep-&amp;gt;poll_wait);

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 20 Mar 2018 15:06:00 +0000</pubDate>
<dc:creator>stonehat</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stonehat/p/8613505.html</dc:identifier>
</item>
<item>
<title>spring+springMVC 整合 MongoDB 实现注册登录 - 筱月</title>
<link>http://www.cnblogs.com/ainyi/p/8613468.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ainyi/p/8613468.html</guid>
<description>&lt;p&gt;发现一入手 MongoDB，便无法脱离，简要说一下，MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。&lt;/p&gt;
&lt;p&gt;也是在 Nosql 中我最喜欢的一种数据库，MongoDB 将数据存储为一个文档，数据结构由键值(key=&amp;gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。&lt;/p&gt;
&lt;p&gt;谈一下关系型数据库（RDBMS）与 MongoDB 的对应关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1344447/201803/1344447-20180320222028227-1862551724.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1344447/201803/1344447-20180320222042846-481855287.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;建立 maven 工程，需要导入与 MongoDB 相关的驱动包：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;MongoDB驱动包&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mongodb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mongo-java-driver&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.1.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;MongoDB核心包&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.data&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-data-mongodb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8.2.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;幸运的是，spring data mongodb 提供的 MongoTemplate 模板对数据库的操作变得十分简单，在 dao 层做一个接口和实现类，创建一个 MongoTemplate 对象，就可以完成数据库一些相关操作。&lt;/p&gt;
&lt;p&gt;话不多说，直接来干货：&lt;/p&gt;
&lt;p&gt;先看看目录结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1344447/201803/1344447-20180320223821854-647184028.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt; &lt;/h2&gt;
&lt;h2&gt;pom.xml&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.krry&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;krry_mongodb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;war&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;krry_mongodb Maven Webapp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://maven.apache.org&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;引入servlet &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax.servlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;servlet-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.0-alpha-1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;provided&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;引入jstl的包  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jstl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jstl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;provided&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;          &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;          
&lt;span&gt; 27&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;引入jsp的编译依赖  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax.servlet.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jsp-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;provided&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;          &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;          
&lt;span&gt; 35&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;引入log4j  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.17&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;           
&lt;span&gt; 42&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.commons&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-lang3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.3.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;         
&lt;span&gt; 48&lt;/span&gt;     
&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;MongoDB驱动包&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mongodb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mongo-java-driver&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.1.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;MongoDB核心包&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.data&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-data-mongodb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8.2.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;引入junit  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt; 
&lt;span&gt; 70&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;spring springmvc mybatis  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; spring和springmvc相关的构建  jar &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;    
&lt;span&gt; 72&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.2.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;           
&lt;span&gt; 78&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-jdbc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.2.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;                
&lt;span&gt; 84&lt;/span&gt;           &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; springmvc相关 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-webmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.2.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;           
&lt;span&gt; 91&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.commons&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-lang3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.3.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;           
&lt;span&gt; 97&lt;/span&gt; 
&lt;span&gt; 98&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt; 
&lt;span&gt;100&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;applicationContext.xml&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;       xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;       xmlns:mongo&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/data/mongo&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/context/spring-context-3.0.xsd
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/beans 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/data/mongo
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/tx 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/tx/spring-tx.xsd
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;     &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     
&lt;span&gt;16&lt;/span&gt;     
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 加载mongodb的属性配置文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:property-placeholder &lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;=&quot;classpath:mongodb.properties&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;  
&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.开启注解&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:annotation-config&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2.配置包扫描 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.krry&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;过滤掉控制层的注解  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:exclude-filter &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;annotation&quot;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;             expression&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.stereotype.Controller&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context:component-scan&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;3.服务器连接信息&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mongo:mongo-client &lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;=&quot;${mongo.host}&quot;&lt;/span&gt;&lt;span&gt; port&lt;/span&gt;&lt;span&gt;=&quot;${mongo.port}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mongo:mongo-client&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;4.创建mongoTemplate模板&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;mongoTemplate&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.data.mongodb.core.MongoTemplate&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constructor-arg &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;mongo&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 设置使用的数据库 名&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constructor-arg &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;databaseName&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${mongo.dbname}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     
&lt;span&gt;40&lt;/span&gt;     
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;mongodb.properties&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#mongoDB\u8FDE\u63A5\u914D\u7F6E
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;mongo.dbname=krry_test
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;mongo.host=127.0.0.1
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;mongo.port=27017
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#mongo.username=root
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#mongo.password=root
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#\u4E00\u4E2A\u7EBF\u7A0B\u53D8\u4E3A\u53EF\u7528\u7684\u6700\u5927\u963B\u585E\u6570
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;mongo.connectionsPerHost=8
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#\u7EBF\u7A0B\u961F\u5217\u6570,\u5B83\u4EE5\u4E0A\u9762connectionsPerHost\u503C\u76F8\u4E58\u7684\u7ED3\u679C\u5C31\u662F\u7EBF\u7A0B\u961F\u5217\u6700\u5927\u503C
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;mongo.threadsAllowedToBlockForConnectionMultiplier=4
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#\u8FDE\u63A5\u8D85\u65F6\u65F6\u95F4\uFF08\u6BEB\u79D2\uFF09
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;mongo.connectTimeout=1500
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#\u6700\u5927\u7B49\u5F85\u65F6\u95F4
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;mongo.maxWaitTime=1500
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#\u81EA\u52A8\u91CD\u8FDE
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;mongo.autoConnectRetry=true
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;#scoket\u4FDD\u6301\u6D3B\u52A8
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;mongo.socketKeepAlive= true
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;#scoket\u8D85\u65F6\u65F6\u95F4
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;mongo.socketTimeout=1500
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;#\u8BFB\u5199\u5206\u79BB
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; mongo.slaveOk=true
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;springmvc.xml&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    xmlns:util&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/util&quot;&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    xmlns:mvc&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/context 
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/context/spring-context-3.0.xsd
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/util 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/util/spring-util-3.0.xsd 
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/mvc 
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/mvc/spring-mvc.xsd
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;      &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         
&lt;span&gt;18&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 扫包 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.krry.controller&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context:component-scan&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;          
&lt;span&gt;21&lt;/span&gt;          
&lt;span&gt;22&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;以下映射器和适配器的配置可以通过注解驱动来代替  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:annotation-driven&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:annotation-driven&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;          
&lt;span&gt;25&lt;/span&gt;          
&lt;span&gt;26&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;对静态资源文件的访问  必须要设置，因为在springmvc的配置中配置了/匹配所有请求，
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        此工程所有的请求(.do ,addUser,js/image/css)都会被springmvc解析,
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        必须对所有的静态资源文件进行过滤放行 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:resources &lt;/span&gt;&lt;span&gt;mapping&lt;/span&gt;&lt;span&gt;=&quot;/resource/**&quot;&lt;/span&gt;&lt;span&gt; location&lt;/span&gt;&lt;span&gt;=&quot;/resource/&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;        
&lt;span&gt;31&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 拦截器定义 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:interceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;33&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:interceptor&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;              &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 个人中心也需要登陆  以admin开头的配置都会进行拦截&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:mapping &lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;=&quot;/admin/**&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 这个是设置不会进入拦截器的路径 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:exclude-mapping &lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;=&quot;/resource/**&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 拦截器进入的类，返回false表示不会进入输入的路径 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;com.krry.core.LoginInterceptor&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:interceptor&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:interceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;            
&lt;span&gt;43&lt;/span&gt;        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 视图渲染 jsp/freemaker/velocity&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 制定页面存放的路径 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;prefix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/WEB-INF/pages/&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 文件的后缀 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;suffix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;.jsp&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;     
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;web.xml&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;  
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;web-app &lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;=&quot;2.5&quot;&lt;/span&gt;&lt;span&gt; xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;         xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;  
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee  
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 6&lt;/span&gt;     
&lt;span&gt; 7&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;krry_mongodb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;index/index&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;   
&lt;span&gt;13&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 加载Spring IOC容器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:applicationContext.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;   
&lt;span&gt;19&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; spring上下文监听器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;   
&lt;span&gt;24&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Introspector缓存清除监听器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.util.IntrospectorCleanupListener&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;   
&lt;span&gt;29&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;   
&lt;span&gt;38&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;   
&lt;span&gt;43&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置DispatcherServlet &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;krry_mongodb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置springMVC的配置文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 如果不配置下面选项，系统默认加载classpath下面名为[servlet-name]-servlet.xml的文件 springmvc01-servlet.xml &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:springmvc.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 这里再配一次，才可以使用欢迎页 
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    标签里面一定要以/开头，与欢迎页的区别就是这里
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;   &amp;lt;url-pattern&amp;gt;/...&amp;lt;/url-pattern&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;59&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;krry_mongodb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;60&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/index/index&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;61&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt;   
&lt;span&gt;63&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 可以配*.do, *.action(了解) / (重点): 所有的请求都会被spring mvc解析，但必须对静态资源文件进行过滤放行，建议大家使用这种方式 
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;        /* : 不建议大家使用  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;krry_mongodb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt;  
&lt;span&gt;70&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;web-app&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt; 
&lt;span&gt;72&lt;/span&gt; 
&lt;span&gt;73&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;dao 层：IUserDao.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.krry.dao;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.krry.entity.User;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IUserDao {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;     * 添加
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; User
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addUser(User User);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;     * 删除
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; id
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; removeUser(String id);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;     * 保存或修改
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; User
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; saveOrUpdateUser(User User);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;     * 根据id查询单个
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; id
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User findById(String id);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;     * 根据用户名查询
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; id
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User findByUsername(String username);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;     * 查询所有
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt; findAll();
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     
&lt;span&gt;55&lt;/span&gt;     
&lt;span&gt;56&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;UserDaoImpl.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.krry.dao.impl;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.mongodb.core.MongoTemplate;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.mongodb.core.query.Criteria;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.mongodb.core.query.Query;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Repository;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.krry.dao.IUserDao;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.krry.entity.User;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;@Repository
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserDaoImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IUserDao {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; MongoTemplate mongoTemplate;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addUser(User User) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.如果没有指定集合，则默认添加到和对象名称相同的集合中，没有则创建一个
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.也可以指定集合 mongoTemplate.save(User, &quot;User_db&quot;);&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        mongoTemplate.save(User);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; removeUser(String id) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         
&lt;span&gt;31&lt;/span&gt;         User User =&lt;span&gt; findById(id);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        mongoTemplate.remove(User);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; saveOrUpdateUser(User User) {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        mongoTemplate.save(User);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User findById(String id) {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; mongoTemplate.findById(id, User.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt; findAll() {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         
&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; mongoTemplate.findAll(User.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User findByUsername(String username) {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据username查询&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;         Query sql = &lt;span&gt;new&lt;/span&gt; Query(Criteria.where(&quot;username&quot;&lt;span&gt;).is(username));
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         
&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; mongoTemplate.findOne(sql,User.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;实体类：User.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.krry.entity;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.annotation.Id;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.mongodb.core.mapping.Document;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.mongodb.core.mapping.Field;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @Document(collection = &quot;user&quot;)这个注解和Hibernate的注解Entiry非常相似，
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * 就是定义一个文档，对象MongoDB存储的Collection（表）的名称是user
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Id指该字段是主键，不能缺少
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * @Field(&quot;username&quot;)指该字段映射MongoDB的实际字段，如果一致可以省略、
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; * User
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; krry
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 1.0.0
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; @Document(collection = &quot;user&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;主键&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    @Id
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String id;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户名&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     @Field(&quot;username&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String username;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;密码&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;建时间&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String createTime;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User() {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User(String username,String password,String createTime) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.createTime =&lt;span&gt; createTime;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;      
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCreateTime() {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; createTime;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCreateTime(String createTime) {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.createTime =&lt;span&gt; createTime;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;      
&lt;span&gt;51&lt;/span&gt;     
&lt;span&gt;52&lt;/span&gt;      &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getId() {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;          &lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;     
&lt;span&gt;56&lt;/span&gt;      &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(String id) {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;          &lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;     
&lt;span&gt;60&lt;/span&gt;      &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUsername() {
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;          &lt;span&gt;return&lt;/span&gt;&lt;span&gt; username;
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;     
&lt;span&gt;64&lt;/span&gt;      &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUsername(String username) {
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;          &lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;     
&lt;span&gt;68&lt;/span&gt;      &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPassword() {
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;          &lt;span&gt;return&lt;/span&gt;&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;     
&lt;span&gt;72&lt;/span&gt;      &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPassword(String password) {
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;          &lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; 
&lt;span&gt;76&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;User [id=&quot; + id + &quot;, username=&quot; + username + &quot;, password=&quot;
&lt;span&gt;79&lt;/span&gt;                 + password + &quot;, createTime=&quot; + createTime + &quot;]&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;     
&lt;span&gt;82&lt;/span&gt;      
&lt;span&gt;83&lt;/span&gt; 
&lt;span&gt;84&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;controller 层：KrryController.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.krry.controller;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.text.SimpleDateFormat;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMethod;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.krry.dao.IUserDao;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.krry.entity.User;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.krry.util.TmStringUtils;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt; &lt;span&gt; * Controller层，作为请求转发
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt; * 页面所有路径的访问方法:控制层的命名空间+@RequestMapping的value
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; @RequestMapping(&quot;/index&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; KrryController {
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; IUserDao userDao;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;     
&lt;span&gt; 28&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;     * 进入首页
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;     @RequestMapping(&quot;/index&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String index(){
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; 
&lt;span&gt; 35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;index/index&quot;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认是转发，不会显示转发路径&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;     
&lt;span&gt; 38&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;     * 进入登录界面
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;     @RequestMapping(&quot;/login&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String login(){
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; 
&lt;span&gt; 45&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;index/login&quot;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认是转发，不会显示转发路径&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;     
&lt;span&gt; 48&lt;/span&gt;     
&lt;span&gt; 49&lt;/span&gt;     
&lt;span&gt; 50&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;     * 点击登录
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;     * com.krry.controller.login 
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;     * 方法名：login
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; krry 
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; request
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; String
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@exception&lt;/span&gt; 
&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@since&lt;/span&gt;&lt;span&gt;  1.0.0
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;     @RequestMapping(method=RequestMethod.POST,value=&quot;/logined&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String login(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取用户和密码&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;         String username = request.getParameter(&quot;username&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;         String password = request.getParameter(&quot;password&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         
&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果邮箱和密码为null,那么就返回已null标识&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(TmStringUtils.isEmpty(username)) &lt;span&gt;return&lt;/span&gt; &quot;index/allError&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(TmStringUtils.isEmpty(password)) &lt;span&gt;return&lt;/span&gt; &quot;index/allError&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         
&lt;span&gt; 70&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据邮箱或昵称查询，用户是否存在&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;         User user =&lt;span&gt; userDao.findByUsername(username);
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         
&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果存在&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(user!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;             
&lt;span&gt; 76&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(password.equals(user.getPassword())){
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果密码正确
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将用户信息放入到会话中...&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;                 request.getSession().setAttribute(&quot;user&quot;&lt;span&gt;, user);
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;                 
&lt;span&gt; 81&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里使用重定向 ,重定向到当前命名空间下@RequestMapping是index的方法&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &quot;redirect:index&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果密码错误&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;                 System.out.println(&quot;密码错误&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &quot;index/error&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果不存在，代码邮箱和密码输入有误&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;             System.out.println(&quot;用户不存在&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &quot;index/error&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;     
&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;     * 退出登录控制层
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;     * com.krry.controller.login 
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;     * 方法名：logout
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; krry 
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; request
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; String
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@exception&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@since&lt;/span&gt;&lt;span&gt;  1.0.0
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;     @RequestMapping(method=RequestMethod.GET,value=&quot;/logout&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String logout(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;         request.getSession().invalidate(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;清空session值&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;index/index&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;     
&lt;span&gt;111&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt; &lt;span&gt;     * 打开注册界面层
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;     @RequestMapping(&quot;/rege&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String rege(){
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; 
&lt;span&gt;118&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;index/resgi&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;     
&lt;span&gt;121&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt; &lt;span&gt;     * 注册控制层
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;     * com.krry.controller.login 
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;     * 方法名：resig
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; krry 
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; request
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; String
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@exception&lt;/span&gt; 
&lt;span&gt;129&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@since&lt;/span&gt;&lt;span&gt;  1.0.0
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt;     @RequestMapping(method=RequestMethod.POST,value=&quot;/resig&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String resig(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取用户和密码&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;         String username = request.getParameter(&quot;username&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;         String password = request.getParameter(&quot;password&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; 
&lt;span&gt;137&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果邮箱和密码为null,那么就返回已null标识&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(TmStringUtils.isEmpty(username) )&lt;span&gt;return&lt;/span&gt; &quot;index/allError&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(TmStringUtils.isEmail(password))&lt;span&gt;return&lt;/span&gt; &quot;index/allError&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;         
&lt;span&gt;141&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据昵称查询，用户是否存在&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt;         User user =&lt;span&gt; userDao.findByUsername(username);
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;         
&lt;span&gt;144&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;若存在&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(user != &lt;span&gt;null&lt;/span&gt;){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;昵称重复&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &quot;index/allError&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; 
&lt;span&gt;149&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;格式化时间类型&lt;/span&gt;
&lt;span&gt;150&lt;/span&gt;         SimpleDateFormat sdf = &lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;         String nowTime = sdf.format(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date());
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;         
&lt;span&gt;153&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行到这里，说明可以注册&lt;/span&gt;
&lt;span&gt;154&lt;/span&gt;         User newUser = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User(username, password, nowTime);
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用注册方法&lt;/span&gt;
&lt;span&gt;156&lt;/span&gt; &lt;span&gt;        userDao.saveOrUpdateUser(newUser);
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;         
&lt;span&gt;158&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将信息设置session作用域&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt;         request.getSession().setAttribute(&quot;user&quot;&lt;span&gt;, newUser);
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt; 
&lt;span&gt;161&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;redirect:index&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;     
&lt;span&gt;164&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的文件，关键代码均有注释。&lt;/p&gt;
&lt;p&gt;细心，总结，也不要死坑于一点，善于转化&lt;/p&gt;

</description>
<pubDate>Tue, 20 Mar 2018 15:00:00 +0000</pubDate>
<dc:creator>筱月</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ainyi/p/8613468.html</dc:identifier>
</item>
<item>
<title>SpringDataJPA入门就这么简单 - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8613326.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8613326.html</guid>
<description>&lt;p&gt;在上次学SpringBoot的时候，那时候的教程就已经涉及到了一点SpringData JPA的知识了。当时还是第一次见，觉得也没什么大不了，就是封装了Hibernate的API而已。&lt;/p&gt;
&lt;p&gt;然后在慕课网上又看到了SpringData的教程了。于是就进去学习了一番。&lt;/p&gt;
&lt;p&gt;教程地址：&lt;a href=&quot;https://www.imooc.com/learn/821&quot; class=&quot;uri&quot;&gt;https://www.imooc.com/learn/821&lt;/a&gt;&lt;br/&gt;源码下载地址:&lt;a href=&quot;https://img.mukewang.com/down/58e60b910001594b00000000.zip&quot; class=&quot;uri&quot;&gt;https://img.mukewang.com/down/58e60b910001594b00000000.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在教程中是以原始JDBC和Spring JDBC Template来进行引入SpringData的。&lt;/p&gt;
&lt;p&gt;由于原始的JDBC和Spring JDBC Template需要书写的代码量还是比较多的，于是我们就有了SpringData这么一个框架了。&lt;/p&gt;
&lt;h2 id=&quot;springdatajpa入门&quot;&gt;1.1SpringDataJPA入门&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;SpringData JPA只是SpringData中的一个子模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JPA是一套标准接口，而Hibernate是JPA的实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SpringData JPA 底层默认实现是使用Hibernate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SpringDataJPA 的首个接口就是Repository，它是一个标记接口。&lt;strong&gt;只要我们的接口实现这个接口，那么我们就相当于在使用SpringDataJPA了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只要我们实现了这个接口，我们就可以使用&quot;&lt;strong&gt;按照方法命名规则&lt;/strong&gt;&quot;来进行查询。我第一次见到他的时候觉得他贼神奇。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/1624114218fa3ec3?w=1174&amp;amp;h=486&amp;amp;f=png&amp;amp;s=87835&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;项目配置&quot;&gt;1.2项目配置&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;在pom.xml中添加相关依赖&lt;/li&gt;
&lt;li&gt;在yml或者properties文件种配置对应的属性&lt;/li&gt;
&lt;li&gt;创建实体和Repository测试&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;参考资源:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如：定义下面这么一个方法，就可以在外界使用了。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
Employee &lt;span class=&quot;fu&quot;&gt;findByName&lt;/span&gt;(String name);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也就是说，上面的方法会被解析成SQL语句：&lt;code&gt;select * from Employee where name = ?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;是不是觉得很方便！！！！&lt;/p&gt;
&lt;p&gt;如果是简单的操作的话，直接定义这么一个方法，就能够使用了。确确实实很好。&lt;/p&gt;
&lt;p&gt;简直比Mytais不知道好到哪里去了。Mybatis还要去写映射文件，专门写一个sql语句。&lt;/p&gt;
&lt;p&gt;同时，创建了实体就能够自动帮我们创建数据库表了，修改了实体字段也能够将数据表一起修改。顿时就觉得很好用了。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 雇员:  先开发实体类===&amp;gt;自动生成数据表&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Employee {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer id;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer age;

    &lt;span class=&quot;fu&quot;&gt;@GeneratedValue&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; id;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(Integer id) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; = id;
    }

    &lt;span class=&quot;fu&quot;&gt;@Column&lt;/span&gt;(length = &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; name;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(String name) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;fu&quot;&gt;getAge&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; age;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setAge&lt;/span&gt;(Integer age) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;age&lt;/span&gt; = age;
    }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然了，上面根据方法名来使用是有弊端的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;1）方法名会比较长： 约定大于配置&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2）对于一些复杂的查询，是很难实现&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;比如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;co&quot;&gt;// where name like ?% and age &amp;lt;?&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Employee&amp;gt; &lt;span class=&quot;fu&quot;&gt;findByNameStartingWithAndAgeLessThan&lt;/span&gt;(String name, Integer age);

    &lt;span class=&quot;co&quot;&gt;// where name like %? and age &amp;lt;?&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Employee&amp;gt; &lt;span class=&quot;fu&quot;&gt;findByNameEndingWithAndAgeLessThan&lt;/span&gt;(String name, Integer age);

    &lt;span class=&quot;co&quot;&gt;// where name in (?,?....) or age &amp;lt;?&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Employee&amp;gt; &lt;span class=&quot;fu&quot;&gt;findByNameInOrAgeLessThan&lt;/span&gt;(List&amp;lt;String&amp;gt; names, Integer age);

    &lt;span class=&quot;co&quot;&gt;// where name in (?,?....) and age &amp;lt;?&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Employee&amp;gt; &lt;span class=&quot;fu&quot;&gt;findByNameInAndAgeLessThan&lt;/span&gt;(List&amp;lt;String&amp;gt; names, Integer age);
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因此，对于这种情况下还是要写SQL语句简单得多。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;fu&quot;&gt;@Query&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;select o from Employee o where id=(select max(id) from Employee t1)&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Employee &lt;span class=&quot;fu&quot;&gt;getEmployeeByMaxId&lt;/span&gt;();

    &lt;span class=&quot;fu&quot;&gt;@Query&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;select o from Employee o where o.name=?1 and o.age=?2&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Employee&amp;gt; &lt;span class=&quot;fu&quot;&gt;queryParams1&lt;/span&gt;(String name, Integer age);

    &lt;span class=&quot;fu&quot;&gt;@Query&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;select o from Employee o where o.name=:name and o.age=:age&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Employee&amp;gt; &lt;span class=&quot;fu&quot;&gt;queryParams2&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@Param&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;)String name, &lt;span class=&quot;fu&quot;&gt;@Param&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;age&quot;&lt;/span&gt;)Integer age);

    &lt;span class=&quot;fu&quot;&gt;@Query&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;select o from Employee o where o.name like %?1%&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Employee&amp;gt; &lt;span class=&quot;fu&quot;&gt;queryLike1&lt;/span&gt;(String name);

    &lt;span class=&quot;fu&quot;&gt;@Query&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;select o from Employee o where o.name like %:name%&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Employee&amp;gt; &lt;span class=&quot;fu&quot;&gt;queryLike2&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@Param&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;)String name);

    &lt;span class=&quot;fu&quot;&gt;@Query&lt;/span&gt;(nativeQuery = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;, value = &lt;span class=&quot;st&quot;&gt;&quot;select count(1) from employee&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getCount&lt;/span&gt;();
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;学过Hibernate的都知道上面的不是原生的SQL语句，是HQL/JPQL语句。&lt;strong&gt;不过他用起来还是比Mybatis简洁很多&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于修改数据，需要增加Modify注解、并且一定要在事务的管理下才能修改数据&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;fu&quot;&gt;@Modifying&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Query&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;update Employee o set o.age = :age where o.id = :id&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@Param&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;)Integer id, &lt;span class=&quot;fu&quot;&gt;@Param&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;age&quot;&lt;/span&gt;)Integer age);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;repository子类接口&quot;&gt;1.3Repository子类接口&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/1624114219007dbc?w=1138&amp;amp;h=446&amp;amp;f=png&amp;amp;s=77782&quot;/&gt;&lt;/p&gt;
&lt;p&gt;CURDRepository接口的实现方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/162411421922586d?w=1138&amp;amp;h=446&amp;amp;f=png&amp;amp;s=77782&quot;/&gt;&lt;/p&gt;
&lt;p&gt;排序、分页接口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/16241142195bffa1?w=1280&amp;amp;h=720&amp;amp;f=jpeg&amp;amp;s=46246&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/162411421963c136?w=1280&amp;amp;h=720&amp;amp;f=jpeg&amp;amp;s=86053&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/162411424bafe639?w=1048&amp;amp;h=568&amp;amp;f=png&amp;amp;s=376629&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/16241142c3ab8e08?w=948&amp;amp;h=485&amp;amp;f=png&amp;amp;s=269047&quot;/&gt;&lt;/p&gt;
&lt;p&gt;增加过滤条件的接口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/16241142423b9163?w=1280&amp;amp;h=720&amp;amp;f=jpeg&amp;amp;s=34997&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/1624114242983478?w=872&amp;amp;h=428&amp;amp;f=png&amp;amp;s=153568&quot;/&gt;&lt;/p&gt;
&lt;p&gt;JPA接口:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/16241142432d97cf?w=926&amp;amp;h=536&amp;amp;f=png&amp;amp;s=91835&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JpaRepository继承PagingAndSortingRepository，PagingAndSortingRepository又继承CrudRepository，也就是说我们平时自定义的接口只要继承JpaRepository，就相当于拥有了增删查改，分页，等等功能。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;原来JPQL是JPA的一种查询语言，之前我是认为它和HQL是一样的。其实是两个概念。不过它们用起来还真是差不多。&lt;/p&gt;
&lt;p&gt;无非就是:JPA对应JPQL，而Hibernate对应HQL而已。都是面向对象的查询语言。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/162411424acf4aba?w=876&amp;amp;h=307&amp;amp;f=png&amp;amp;s=113298&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/1624114269ceeb8b?w=418&amp;amp;h=272&amp;amp;f=png&amp;amp;s=46048&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/162411426a2cae64?w=812&amp;amp;h=265&amp;amp;f=png&amp;amp;s=110306&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;criteria查询&quot;&gt;2.1 Criteria查询&lt;/h2&gt;
&lt;p&gt;这里就涵盖了很多的条件了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/162411426b5f81e3?w=790&amp;amp;h=284&amp;amp;f=png&amp;amp;s=127485&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;specification接口使用&quot;&gt;2.2 Specification接口使用&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/1624114273d71efc?w=790&amp;amp;h=284&amp;amp;f=png&amp;amp;s=127485&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其实这个接口的API就和Criteria是一样的，看懂了Criteria API，这个接口就会用了。&lt;/p&gt;
&lt;h2 id=&quot;namequery注解&quot;&gt;2.3 nameQuery注解&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/162411428ebf8a6b?w=707&amp;amp;h=127&amp;amp;f=png&amp;amp;s=57593&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/16241142939ee890?w=903&amp;amp;h=284&amp;amp;f=png&amp;amp;s=87122&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;query注解&quot;&gt;2.4query注解&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/16241142991208c1?w=857&amp;amp;h=278&amp;amp;f=png&amp;amp;s=113713&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/20/162411429a01eae4?w=775&amp;amp;h=320&amp;amp;f=png&amp;amp;s=169600&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;小总结&quot;&gt;2.5 小总结&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/53706909&quot; class=&quot;uri&quot;&gt;https://www.zhihu.com/question/53706909&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;引入知乎的一段回答：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;基本的增删改查和调用存储过程通过Spring Data JPA Repository来解决&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;稍微复杂的查询或是批量操作使用QueryDSL或Spring Data Specification的API来解决&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;特别特别复杂的查询操作可以使用Spring Data JPA Repository的注解定义native sql来解决&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;注解写在get方法上&quot;&gt;3.1 注解写在get方法上&lt;/h2&gt;
&lt;p&gt;刚开始用的时候我以为注解是写在属性上，但是遇到了很多的bug，在网上的解决方案又是很少。&lt;/p&gt;
&lt;p&gt;遇到了一个Bug，在国内的论坛几乎都找不到答案:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
org.&lt;span class=&quot;fu&quot;&gt;hibernate&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;property&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;access&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;spi&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;PropertyAccessBuildingException&lt;/span&gt;: Could not locate field nor getter method &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; property named [cn.&lt;span class=&quot;fu&quot;&gt;itheima&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;web&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;domain&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Customer&lt;/span&gt;#cust_user_id]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;搞得头都大了都没有找到合适的方法，不知道是哪里错了。&lt;/p&gt;
&lt;p&gt;后来去看了JPA的一对多、多对一的博文去参考了一下，感觉我还是没有错。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后才发现大多数的博文都是在get方法上写注解的，而我就在属性上直接写注解了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Get方法上写注解的原因是不用破坏我们的封装性，我直接在属性上写注解，而属性是private来进行修饰的。这也导致了我出现这个错误的原因。&lt;/p&gt;
&lt;h2 id=&quot;级联-.all慎用&quot;&gt;3.2级联 .ALL慎用&lt;/h2&gt;
&lt;p&gt;在保存数据的时候，我以为直接使用casecade.ALL是最方便的，但是还出现了Bug。后来找到了答案:&lt;a href=&quot;http://blog.csdn.net/csujiangyu/article/details/48223641&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/csujiangyu/article/details/48223641&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;fu&quot;&gt;@Target&lt;/span&gt;({METHOD, FIELD}) 
&lt;span class=&quot;fu&quot;&gt;@Retention&lt;/span&gt;(RUNTIME)
public&lt;span class=&quot;fu&quot;&gt;@interfaceOneToOne&lt;/span&gt; {
     Class &lt;span class=&quot;fu&quot;&gt;targetEntity&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;;
     CascadeType[]&lt;span class=&quot;fu&quot;&gt;cascade&lt;/span&gt;()&lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt;();
     FetchType &lt;span class=&quot;fu&quot;&gt;fetch&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; EAGER;
     &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;optional&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
     String &lt;span class=&quot;fu&quot;&gt;mappedBy&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1,targetEntity 属性表示默认关联的实体类型，&lt;strong&gt;默认为当前标注的实体类。&lt;/strong&gt;&lt;br/&gt;2,cascade属性表示与此实体一对一关联的实体的&lt;strong&gt;级联样式类型。&lt;/strong&gt;&lt;br/&gt;3,fetch属性是该实体的加载方式，默认为即时加载EAGER&lt;br/&gt;4,optional属性&lt;strong&gt;表示关联的该实体是否能够存在null值&lt;/strong&gt;，默认为ture，如果设置为false，则该实体不能为null，&lt;br/&gt;5, mapperBy属性:指关系被维护端&lt;/p&gt;

&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Target&lt;/span&gt;({METHOD, FIELD}) 
&lt;span class=&quot;fu&quot;&gt;@Retention&lt;/span&gt;(RUNTIME)
public&lt;span class=&quot;fu&quot;&gt;@interfaceJoinColumn&lt;/span&gt; {
    String &lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;;
    String &lt;span class=&quot;fu&quot;&gt;referencedColumnName&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;;
    &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;unique&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
    &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;nullable&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
    &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;insertable&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
    booleanupdatabledefaulttrue;
    String &lt;span class=&quot;fu&quot;&gt;columnDefinition&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;;
    String &lt;span class=&quot;fu&quot;&gt;table&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1,@JoinColumn注释是保存表与表之间关系的字段&lt;br/&gt;2,&lt;strong&gt;如果不设置name，默认name = 关联表的名称+”-“+关联表主键的字段名，在上面实例3,中，默认为“address_id”&lt;/strong&gt;&lt;br/&gt;默认情况下，关联实体的主键一般是用来做外键的，&lt;strong&gt;但如果此时不想用主键作为外键，则需要设置referencedColumnName属性，如:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; address (
    &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; auto_increament,
    ref_id &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) notn ull,
    province &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;),
    city &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;),
    postcode &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;),
    detail &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;),
    &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;)
)

&lt;span class=&quot;ot&quot;&gt;@OneToOne@JoinColumn(name=&quot;address_id&quot;, referencedColumnName=&quot;ref_id&quot;)&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; AddressEO address;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;后来我使用了SpringData JPA用于一个简单的项目，从中也遇到了不少的问题和相关的没有接触到的知识点。下面我会给出当时&lt;strong&gt;搜索到的资料和遇到的问题以及解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;遇到的问题以及解决资料&quot;&gt;4.1遇到的问题以及解决资料&lt;/h2&gt;
&lt;p&gt;SpringData JPA遇到的问题有：&lt;/p&gt;
&lt;p&gt;参考资料:&lt;/p&gt;

&lt;p&gt;总的来说，如果是单表操作的话，那么SpringData JPA是十分方便的，如果是比较复杂的业务的话，那么使用SpringData JPA就有点麻烦了，因为它返回的是&lt;code&gt;Object[]&lt;/code&gt;，返回的结果还要手动进行封装，不太方便。灵活性很低...&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章，想要获取更多的Java资源的同学，可以&lt;strong&gt;关注微信公众号:Java3y&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Tue, 20 Mar 2018 14:36:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8613326.html</dc:identifier>
</item>
<item>
<title>python select模块详解 - 听风。</title>
<link>http://www.cnblogs.com/huchong/p/8613308.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huchong/p/8613308.html</guid>
<description>&lt;p&gt;要理解select.select模块其实主要就是要理解它的参数, 以及其三个返回值。&lt;br/&gt;select()方法接收并监控3个通信列表， 第一个是所有的输入的data,就是指外部发过来的数据，第2个是监控和接收所有要发出去的data(outgoing data),第3个监控错误信息&lt;/p&gt;&lt;p&gt;在网上一直在找这个select.select的参数解释, 但实在是没有, 哎...自己硬着头皮分析了一下。&lt;br/&gt;readable, writable, exceptional = select.select(inputs, outputs, inputs)&lt;/p&gt;
&lt;p&gt;select 函数的参数其实很好理解, 前提是我们对unix 网络编程有了解. select 模型是unix 系统中的网络模型, python 将其封装了,因此我们使用起来就比较方便, 但是面试官就不会这么觉得了(最近被面试逼疯了, 考虑问题都从面试官的角度考虑), 先说下unix 系统中的select 模型吧, 参数原型:&lt;br/&gt;int select(int maxfdpl, fd_set * readset, fd_set *writeset, fd_set *exceptset, const struct timeval * tiomeout)&lt;/p&gt;
&lt;p&gt;第一个是最大的文件描述符长度&lt;br/&gt;第二个是监听的可读集合&lt;br/&gt;第三个是监听的可写集合&lt;br/&gt;第四个是监听的异常集合&lt;br/&gt;第五个是时间限制&lt;/p&gt;
&lt;p&gt;对struct fd_set结构体操作的宏&lt;br/&gt;FD_SETSIZE 容量，指定fd_array数组大小，默认为64，也可自己修改宏&lt;br/&gt;FD_ZERO(*set) 置空，使数组的元素值都为3435973836，元素个数为0.&lt;br/&gt;FD_SET(s, *set) 添加，向 struct fd_set结构体添加套接字s&lt;br/&gt;FD_ISSET(s, *set) 判断，判断s是否为 struct fd_set结构体中的一员&lt;br/&gt;FD_CLR(s, *set) 删除，从 struct fd_set结构体中删除成员s&lt;/p&gt;
&lt;p&gt;因为此模型主要是在网络中应用, 我们不考虑文件, 设备, 单从套接字来考虑, 可读条件如下:&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/971683/201709/971683-20170930125832419-858402058.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可写条件如下:&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/971683/201709/971683-20170930125844325-345875830.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我看C 示例的时候, 看的有点懵逼, 应该需要跑一遍代码就好, python 就简单了, 直接调用封装好的select , 其底层处理好了文件描述符的相关读写监听(回头再研究下), 我们在Python 中只需这么写:&lt;br/&gt;can_read, can_write, _ = select.select(inputs, outputs, None, None)&lt;/p&gt;
&lt;p&gt;第一个参数是我们需要监听可读的套接字, 第二个参数是我们需要监听可写的套接字, 第三个参数使我们需要监听异常的套接字, 第四个则是时间限制设置.&lt;/p&gt;
&lt;p&gt;如果监听的套接字满足了可读可写条件, 那么所返回的can,read 或是 can_write就会有值了, 然后我们就可以利用这些返回值进行随后的操作了。相比较unix 的select模型, 其select函数的返回值是一个整型, 用以判断是否执行成功.&lt;/p&gt;
&lt;p&gt;第一个参数就是服务器端的socket, 第二个是我们在运行过程中存储的客户端的socket, 第三个存储错误信息。&lt;br/&gt;重点是在返回值, 第一个返回的是可读的list, 第二个存储的是可写的list, 第三个存储的是错误信息的&lt;br/&gt;list。&lt;br/&gt;网上所有关于select.select的代码都是差不多的, 但是有些不能运行, 或是不全。我自己重新写了一份能运行的程序, 做了很多注释, 好好看看就能搞懂&lt;/p&gt;
&lt;p&gt;服务器端:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; coding: utf-8&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; select
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; socket
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; Queue
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; time &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sleep


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create a TCP/IP&lt;/span&gt;
server =&lt;span&gt; socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.setblocking(False)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Bind the socket to the port&lt;/span&gt;
server_address = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 8090&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;starting up on %s port %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; server_address)
server.bind(server_address)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Listen for incoming connections&lt;/span&gt;
server.listen(5&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Sockets from which we expect to read&lt;/span&gt;
inputs =&lt;span&gt; [server]

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Sockets to which we expect to write&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 处理要发送的消息&lt;/span&gt;
outputs =&lt;span&gt; []

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Outgoing message queues (socket: Queue)&lt;/span&gt;
message_queues =&lt;span&gt; {}

&lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; inputs:
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Wait for at least one of the sockets to be ready for processing&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;waiting for the next event&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 开始select 监听, 对input_list 中的服务器端server 进行监听&lt;br/&gt;# 一旦调用socket的send, recv函数，将会再次调用此模块&lt;/span&gt;
    readable, writable, exceptional =&lt;span&gt; select.select(inputs, outputs, inputs)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Handle inputs&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 循环判断是否有客户端连接进来, 当有客户端连接进来时select 将触发&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; s &lt;span&gt;in&lt;/span&gt;&lt;span&gt; readable:
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断当前触发的是不是服务端对象, 当触发的对象是服务端对象时,说明有新客户端连接进来了&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 表示有新用户来连接&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; s &lt;span&gt;is&lt;/span&gt;&lt;span&gt; server:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; A &quot;readable&quot; socket is ready to accept a connection&lt;/span&gt;
            connection, client_address =&lt;span&gt; s.accept()
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;connection from&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, client_address)
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; this is connection not server&lt;/span&gt;
&lt;span&gt;            connection.setblocking(0)
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将客户端对象也加入到监听的列表中, 当客户端发送消息时 select 将触发&lt;/span&gt;
&lt;span&gt;            inputs.append(connection)

            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Give the connection a queue for data we want to send&lt;/span&gt;
            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 为连接的客户端单独创建一个消息队列，用来保存客户端发送的消息&lt;/span&gt;
            message_queues[connection] =&lt;span&gt; Queue.Queue()
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 有老用户发消息, 处理接受&lt;/span&gt;
            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 由于客户端连接进来时服务端接收客户端连接请求，将客户端加入到了监听列表中(input_list), 客户端发送消息将触发&lt;/span&gt;
            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 所以判断是否是客户端对象触发&lt;/span&gt;
            data = s.recv(1024&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 客户端未断开&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; data != &lt;span&gt;''&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; A readable client socket has data&lt;/span&gt;
                &lt;span&gt;print&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;received &quot;%s&quot; from %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (data, s.getpeername()))
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将收到的消息放入到相对应的socket客户端的消息队列中&lt;/span&gt;
&lt;span&gt;                message_queues[s].put(data)
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Add output channel for response&lt;/span&gt;
                &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将需要进行回复操作socket放到output 列表中, 让select监听&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; s &lt;span&gt;not&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; outputs:
                    outputs.append(s)
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 客户端断开了连接, 将客户端的监听从input列表中移除&lt;/span&gt;
                &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Interpret empty result as closed connection&lt;/span&gt;
                &lt;span&gt;print&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;closing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, client_address)
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Stop listening for input on the connection&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; s &lt;span&gt;in&lt;/span&gt;&lt;span&gt; outputs:
                    outputs.remove(s)
                inputs.remove(s)
                s.close()

                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Remove message queue&lt;/span&gt;
                &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 移除对应socket客户端对象的消息队列&lt;/span&gt;
                &lt;span&gt;del&lt;/span&gt;&lt;span&gt; message_queues[s]

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Handle outputs&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果现在没有客户端请求, 也没有客户端发送消息时, 开始对发送消息列表进行处理, 是否需要发送消息&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 存储哪个客户端发送过消息&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; s &lt;span&gt;in&lt;/span&gt;&lt;span&gt; writable:
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果消息队列中有消息,从消息队列中获取要发送的消息&lt;/span&gt;
            message_queue =&lt;span&gt; message_queues.get(s)
            send_data &lt;/span&gt;= &lt;span&gt;''&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; message_queue &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; None:
                send_data &lt;/span&gt;=&lt;span&gt; message_queue.get_nowait()
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 客户端连接断开了&lt;/span&gt;
                &lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;has closed &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Queue.Empty:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 客户端连接断开了&lt;/span&gt;
            &lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (s.getpeername())
            outputs.remove(s)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print &quot;sending %s to %s &quot; % (send_data, s.getpeername)&lt;/span&gt;
            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print &quot;send something&quot;&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; message_queue &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; None:
                s.send(send_data)
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;has closed &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; del message_queues[s]&lt;/span&gt;
            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; writable.remove(s)&lt;/span&gt;
            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print &quot;Client %s disconnected&quot; % (client_address)&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; # Handle &quot;exceptional conditions&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 处理异常的情况&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; s &lt;span&gt;in&lt;/span&gt;&lt;span&gt; exceptional:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;exception condition on&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, s.getpeername())
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Stop listening for input on the connection&lt;/span&gt;
&lt;span&gt;        inputs.remove(s)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; s &lt;span&gt;in&lt;/span&gt;&lt;span&gt; outputs:
            outputs.remove(s)
        s.close()

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Remove message queue&lt;/span&gt;
        &lt;span&gt;del&lt;/span&gt;&lt;span&gt; message_queues[s]

    sleep(&lt;/span&gt;1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;客户端:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; coding: utf-8&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; socket


messages &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;This is the message &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;It will be sent &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;in parts &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, ]

server_address &lt;/span&gt;= (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 8090&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create aTCP/IP socket&lt;/span&gt;
&lt;span&gt;
socks &lt;/span&gt;=&lt;span&gt; [socket.socket(socket.AF_INET, socket.SOCK_STREAM), socket.socket(socket.AF_INET,  socket.SOCK_STREAM), ]

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Connect thesocket to the port where the server is listening&lt;/span&gt;

&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;connecting to %s port %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; server_address)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 连接到服务器&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; s &lt;span&gt;in&lt;/span&gt;&lt;span&gt; socks:
    s.connect(server_address)

&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; index, message &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(messages):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Send messages on both sockets&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; s &lt;span&gt;in&lt;/span&gt;&lt;span&gt; socks:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s: sending &quot;%s&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; % (s.getsockname(), message +&lt;span&gt; str(index)))
        s.send(bytes(message &lt;/span&gt;+ str(index)).decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Read responses on both sockets&lt;/span&gt;

&lt;span&gt;for&lt;/span&gt; s &lt;span&gt;in&lt;/span&gt;&lt;span&gt; socks:
    data &lt;/span&gt;= s.recv(1024&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s: received &quot;%s&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (s.getsockname(), data))
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; data != &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;closingsocket&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, s.getsockname())
        s.close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写代码过程中遇到了两个问题, 一是如何判断客户端已经关闭了socket连接, 后来自己分析了下, 如果关闭了客户端socket, 那么此时服务器端接收到的data就是'', 加个这个判断。二是如果服务器端关闭了socket, 一旦在调用socket的相关方法都会报错, 不管socket是不是用不同的容器存储的(意思是说list_1存储了socket1, list_2存储了socket1, 我关闭了socket1, 两者都不能在调用这个socket了)&lt;/p&gt;
&lt;p&gt;服务器端：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/971683/201709/971683-20170919194228962-1953098314.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;客户端：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/971683/201709/971683-20170919194239728-1376367781.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 20 Mar 2018 14:34:00 +0000</pubDate>
<dc:creator>听风。</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huchong/p/8613308.html</dc:identifier>
</item>
<item>
<title>Throwable.异常 - J_Feng</title>
<link>http://www.cnblogs.com/fjfsu/p/8613255.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fjfsu/p/8613255.html</guid>
<description>&lt;h2&gt;异常：&lt;/h2&gt;
&lt;p&gt;　　在运行期间发生的不正常情况。　　&lt;/p&gt;
&lt;p&gt;　　在JAVA中用类的形式对异常的情况进行了类的封装。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这些描述不正常情况的类就称为异常类。&lt;/span&gt; 异常类就是java通过面向对象的思想将问题封装成了对象。用异常类对问题进行描述，不同的问题用不同的类进行具体的描述，比如，空指针 脚标越界 等等......&lt;/p&gt;
&lt;p&gt;　　 以前将正常流程代码和处理异常的代码相结合，现在是将正常流程代码和处理异常的代码分开，这样就提高了阅读性。&lt;/p&gt;
&lt;h2&gt;体系：&lt;/h2&gt;
&lt;p&gt;　　问题很多，对应的异常类就有很多，通过对这些异常类共性的不断向上提取，就形成了异常体系。Throwable。&lt;/p&gt;
&lt;p&gt;       这个体系有个特点，就是Throwable及其子类都具有可抛性。即被throw throws抛。&lt;/p&gt;
&lt;h2&gt;Throwable:&lt;/h2&gt;
&lt;p&gt;　　分为两大类：&lt;/p&gt;
&lt;p&gt;　　　　　　Error（一般不可处理的问题）由JVM抛出的严重性问题，一般不进行针对性处理，而是直接修改程序。已经让虚拟机不正常了，这是错误。&lt;/p&gt;
&lt;p&gt;　　　　　　Exception（可处理）&lt;/p&gt;
&lt;h2&gt;异常的分类：&lt;/h2&gt;
&lt;p&gt;　　编译时被检测异常：只要是Exception及其子类，除了RuntimeException及其子类；&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　这种异常一但出现，就在编译时出现错误，希望能够得到针对性的处理。&lt;/p&gt;
&lt;p&gt;　　编译时不被检测异常（运行时异常）：RuntimeException及其子类；该类是JVM正常运行期间抛出的异常超类；&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　这种异常一但出现，无法让功能继续运行，一般是调用者导致的或者  引发了内部状态的改变导致的，&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　这种异常一般不处理，直接编译通过，在运行的时候直接让调用者调用的程序停止，让调用者对代码进行修正。&lt;/p&gt;
&lt;h2&gt;简单示例：&lt;/h2&gt;
&lt;p&gt;JAVA编译器，一般是先检查语法错误，再检查逻辑错误。&lt;/p&gt;
&lt;p&gt;这里脚标越界&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Text{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] a=&lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[3&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         A Dome=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; A();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         Dome.show(a, 3&lt;span&gt;);                                             
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; A{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; show(&lt;span&gt;int&lt;/span&gt;[] a,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; b){
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;       System.out.print(a[b]);//throw new ArrayIndexOutOfBoundsException(b);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 实际上在11行会进行对象的封装，然后把问题反馈给调用者（main）&lt;/p&gt;
&lt;p&gt;然而main并没有处理的方法他也只能把问题已同样的方法抛给JVM&lt;/p&gt;
&lt;p&gt;JVM便会把问题打印在控制台上，让调用者去处理（在以后开发的时候这些异常存储在日志中）。&lt;/p&gt;
&lt;p&gt;代码抛出了异常，该代码下面的代码将不会执行，除了finally。&lt;/p&gt;
&lt;p&gt;如果异常的代码catch处理了，那么该异常代码下面的代码会继续执行下去。　&lt;/p&gt;
&lt;h2&gt;自定义异常类：&lt;/h2&gt;
&lt;p&gt;　　自定义的异常类，要么继承Exception，要么继承RuntimeException;&lt;/p&gt;
&lt;p&gt;　　当继承Exception时，一定要声明异常，否则编译失败，（就好比你有一块变质的面包，你直接给别人，别人吃了GG，所以一定要声明，让别人有处理的办法）&lt;/p&gt;
&lt;p&gt;　　但是如果继承的是RuntimeException的话，可以编译通过。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Text{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; FuShuIndextException{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] a=&lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[3&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         Text1 Dome=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Text1();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         Dome.show(a, -1&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Text1{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; show(&lt;span&gt;int&lt;/span&gt;[] a,&lt;span&gt;int&lt;/span&gt; b) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; FuShuIndextException{
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(b&amp;lt;0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; FuShuIndextException(&quot;数组脚标不能为负&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FuShuIndextException &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Exception{
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    FuShuIndextException(String a){
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(a);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;throw new FuShuIndextException(&quot;数组脚标不能为负&quot;); 打印这句话只需要异常类里面有对应的构造函数，该构造函数调用其父类的方法。&lt;/p&gt;
&lt;p&gt;在这里我是用了声明（抛出 throws）的方法解决异常，所以异常代码后面的代码将不会不执行到，&lt;/p&gt;
&lt;p&gt;但是这个数组脚标不能为负数的异常是可以用catch的解决的，下面我会用catch的方法来处理这个的异常。&lt;/p&gt;
&lt;h2&gt;声明和捕捉：&lt;/h2&gt;
&lt;p&gt;　　处理异常的两个方法。&lt;/p&gt;
&lt;p&gt;　　声明：声明异常的目的就是为了让调用者处理异常，所以如果声明了异常，那么一定要处理。要么throws要么try catch。&lt;/p&gt;
&lt;p&gt;　　捕捉：try（需要被检测异常的代码） catch（处理异常的代码） finally（里面的代码一定会被执行到）,即对异常进行针对性的处理。&lt;/p&gt;
&lt;p&gt;　　　　　1.try catch finally&lt;/p&gt;
&lt;p&gt;　　　　　2.try catch（可以多个）没有需要释放的资源&lt;/p&gt;
&lt;p&gt;　　　　　3.try finally异常无法catch处理，但是需要释放资源&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Text{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] a=&lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[3&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         Text1 Dome=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Text1();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             Dome.show(a, -1&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(FuShuIndextException e){
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;           System.out.println(e);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;           System.out.println(e.toString());
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;           System.out.println(e.getMessage());
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;           e.printStackTrace();&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             
&lt;span&gt;14&lt;/span&gt;         }&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             System.out.println(&quot;finall中一定会被执行到的代码&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         System.out.println(&quot;解决了问题后依然会运行的代码&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         
&lt;span&gt;19&lt;/span&gt;         
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Text1{
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; show(&lt;span&gt;int&lt;/span&gt;[] a,&lt;span&gt;int&lt;/span&gt; b) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; FuShuIndextException{
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(b&amp;lt;0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; FuShuIndextException(&quot;数组脚标不能为负&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FuShuIndextException &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Exception{
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    FuShuIndextException(String a){
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(a);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第9-12行的代码是打印异常的信息即&quot;数组脚标不能为负&quot;输出为&lt;/p&gt;

&lt;p&gt;FuShuIndextException: 数组脚标不能为负&lt;/p&gt;
&lt;p&gt;FuShuIndextException: 数组脚标不能为负&lt;/p&gt;
&lt;p&gt;数组脚标不能为负&lt;/p&gt;
&lt;p&gt;FuShuIndextException: 数组脚标不能为负&lt;br/&gt;at Text1.show(Text.java:26)&lt;br/&gt;at Text.main(Text.java:6)&lt;/p&gt;
&lt;p&gt;第9行等价于第10行，它默认的是e.toString&lt;/p&gt;
&lt;p&gt;第12行，JVM默认的异常处理机制就是调用了这个方法&lt;/p&gt;
&lt;h2&gt;异常处理的原则：&lt;/h2&gt;
&lt;p&gt;　　1.函数内容如果抛出了需要检测的异常，那么函数上一定要声明或者try catch捕捉否则编译失败&lt;/p&gt;
&lt;p&gt;　　2.如果调用到了声明异常的函数，那么调用者一定要声明或者try catch捕捉否则编译失败&lt;/p&gt;
&lt;p&gt;　　3.能够处理的异常用try catch自己解决，不能处理的异常用throw告诉调用者，让调用者解决&lt;/p&gt;
&lt;p&gt;　　4.一个功能如果抛出了多个异常，那么调用时要有相对应的catch进行针对性的处理。&lt;/p&gt;
&lt;p&gt;　　　内部有几个需要被检测的异常，就要有对应的catch来解决异常&lt;/p&gt;
&lt;p&gt;　　   但是当多catch出现的时候要注意父类的catch要放在最后面，否则编译失败，因为父类catch下面的catch都变成了废话&lt;/p&gt;
&lt;h2&gt;异常的注意事项：&lt;/h2&gt;
&lt;p&gt;　　子类覆盖父类，就只能抛出父类的异常，或者子类或者子集&lt;/p&gt;
&lt;p&gt;       父类没有异常，子类绝对不能抛出异常，只能try catch&lt;/p&gt;

</description>
<pubDate>Tue, 20 Mar 2018 14:29:00 +0000</pubDate>
<dc:creator>J_Feng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fjfsu/p/8613255.html</dc:identifier>
</item>
</channel>
</rss>