<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Entity Framework Core 2.0 使用代码进行自动迁移 - 晓晨Master</title>
<link>http://www.cnblogs.com/stulzq/p/7729380.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stulzq/p/7729380.html</guid>
<description>&lt;p&gt;我们在使用EF进行开发的时候，肯定会遇到将迁移更新到生产数据库这个问题，前面写了一篇文章介绍了&lt;a href=&quot;http://www.cnblogs.com/stulzq/p/7717873.html&quot; title=&quot;Entity Framework Core 2.0的入门使用&quot;&gt;Entity Framework Core 2.0的入门使用&lt;/a&gt;，这里面介绍了使用命令生成迁移所需的SQL，然后更新到生产数据库的方法。这里还有另一种方法，就是利用EF Core自身所提供的方法来进行迁移。&lt;/p&gt;

&lt;p&gt;这些方法都是DatabaseFacade的扩展方法，我们常使用的DbContext.Database就是DatabaseFacade类型。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;GetMigrations&lt;/code&gt; 获取所有迁移&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
///     Gets all the migrations that are defined in the configured migrations assembly.
/// &amp;lt;/summary&amp;gt;
public static IEnumerable&amp;lt;string&amp;gt; GetMigrations([NotNull] this DatabaseFacade databaseFacade)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;GetPendingMigrations&lt;/code&gt; 获取待迁移列表&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
///     Gets all migrations that are defined in the assembly but haven't been applied to the target database.
/// &amp;lt;/summary&amp;gt;
public static IEnumerable&amp;lt;string&amp;gt; GetPendingMigrations([NotNull] this DatabaseFacade databaseFacade) &lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;GetAppliedMigrations&lt;/code&gt; 获取执行了迁移的列表&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
///     Gets all migrations that have been applied to the target database.
/// &amp;lt;/summary&amp;gt;
public static IEnumerable&amp;lt;string&amp;gt; GetAppliedMigrations([NotNull] this DatabaseFacade databaseFacade) &lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Migrate&lt;/code&gt; 执行迁移&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
///     &amp;lt;para&amp;gt;
///         Applies any pending migrations for the context to the database. Will create the database
///         if it does not already exist.
///     &amp;lt;/para&amp;gt;
///     &amp;lt;para&amp;gt;
///         Note that this API is mutually exclusive with DbContext.Database.EnsureCreated(). EnsureCreated does not use migrations
///         to create the database and therefore the database that is created cannot be later updated using migrations.
///     &amp;lt;/para&amp;gt;
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;databaseFacade&quot;&amp;gt; The &amp;lt;see cref=&quot;T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade&quot; /&amp;gt; for the context. &amp;lt;/param&amp;gt;
public static void Migrate([NotNull] this DatabaseFacade databaseFacade)&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;我们可以利用上面的方法，让程序在启动的时候检查是否有待迁移，如果有那么执行迁移。这里以一个.NET Core 控制台应用程序作为示例：&lt;/p&gt;
&lt;h5 id=&quot;定义一个检查迁移的方法&quot;&gt;1.定义一个检查迁移的方法&lt;/h5&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// 检查迁移
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;db&quot;&amp;gt;&amp;lt;/param&amp;gt;
static void CheckMigrations(BloggingContext db)
{
    Console.WriteLine(&quot;Check Migrations&quot;);

    //判断是否有待迁移
    if (db.Database.GetPendingMigrations().Any())
    {
        Console.WriteLine(&quot;Migrating...&quot;);
        //执行迁移
        db.Database.Migrate();
        Console.WriteLine(&quot;Migrated&quot;);
    }
    Console.WriteLine(&quot;Check Migrations Coomplete!&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.在程序启动时调用&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;static void Main(string[] args)
{
    using (var db = new BloggingContext())
    {
        //检查迁移
        CheckMigrations(db);
        ...
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/668104/201710/668104-20171025133525723-1718104168.gif&quot;/&gt;&lt;/p&gt;

&lt;p&gt;上面的方法需要我们每次在应用程序启动的时候都去检查迁移，我们也可以单独制作一个控制台程序来进行迁移的更新，这样只要在更新迁移的时候放到服务器上执行一下就行 了。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;我们在实际使用中，建议将EntityFrameWork Core单独作为一个项目&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/668104/201710/668104-20171025132551488-220546757.png&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;static void Main(string[] args)
{
    Console.WriteLine(&quot;Entity Framework Core Migrate Start !&quot;);
    Console.WriteLine(&quot;Get Pending Migrations...&quot;);

    using (var db = new BloggingContext())
    {
        //获取所有待迁移
        Console.WriteLine($&quot;Pending Migrations：\n{string.Join('\n', db.Database.GetPendingMigrations().ToArray())}&quot;);

        Console.WriteLine(&quot;Do you want to continue?(Y/N)&quot;);

        if (Console.ReadLine().Trim().ToLower() == &quot;n&quot;)
        {
            return;
        }

        Console.WriteLine(&quot;Migrating...&quot;);

        try
        {

            //执行迁移
            db.Database.Migrate();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    Console.WriteLine(&quot;Entity Framework Core Migrate Complete !&quot;);
    Console.WriteLine(&quot;Press any key to exit !&quot;);
    Console.ReadKey();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/668104/201710/668104-20171025132951348-1682774943.gif&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;本文demohttpsgithub.comstulzqentityframework-core-migrator&quot;&gt;本文Demo:&lt;a href=&quot;https://github.com/stulzq/EntityFramework-Core-Migrator&quot; class=&quot;uri&quot;&gt;https://github.com/stulzq/EntityFramework-Core-Migrator&lt;/a&gt;&lt;/h4&gt;
</description>
<pubDate>Wed, 25 Oct 2017 23:20:00 +0000</pubDate>
<dc:creator>晓晨Master</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stulzq/p/7729380.html</dc:identifier>
</item>
<item>
<title>脱壳第二讲,手动脱壳PECompact 2.x - iBinary</title>
<link>http://www.cnblogs.com/iBinary/p/7734344.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iBinary/p/7734344.html</guid>
<description>&lt;p&gt;&lt;span&gt;PS: 此博客涉及到PE格式.所以观看此博客你要熟悉PE格式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;首先,逆向inc2l这个工具,汇编中可能会用的 inc头文件转换为lib的工具&lt;/p&gt;
&lt;p&gt;但是他有壳,先查壳.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026021230441-1910855108.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现是这个壳&lt;/p&gt;
&lt;p&gt;利用Esp定律,脱掉这个壳.&lt;/p&gt;
&lt;p&gt;首先,inc2l.exe是32位的,所以要放到虚拟机中.&lt;/p&gt;
&lt;h2&gt;一丶OD打开分析&lt;/h2&gt;
&lt;h3&gt;1.OD分析 &lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026021640238-1218928624.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现,首先给eax赋值,然后压栈eax,那么eax肯定会访问,那么我们F8到push eax的下面,也就是4022EA的位置&lt;/p&gt;
&lt;h3&gt;2.查看栈数据&lt;/h3&gt;

&lt;p&gt;查看栈数据.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026021854848-1064594916.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么在栈位置12FFC0的位置,肯定会有访问,我们数据窗口 定位到ESP的位置,也就是0012FFC0&lt;/p&gt;
&lt;h3&gt;3.在数据窗口定位栈顶位置.&lt;/h3&gt;
&lt;p&gt;CTRL + G命令定位.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026022046707-679912408.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由于方便一起截图,事先已经定位过来了.&lt;/p&gt;
&lt;h3&gt; 4.针对栈内容下硬件访问断点(4个字节)&lt;/h3&gt;
&lt;p&gt;选中栈中地址的值,也就是 push 的eax的值,下硬件访问断点&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026022243629-790398960.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;5.F9运行起来,直到跟到我们的模块分析&lt;/h3&gt;
&lt;p&gt;第一次F9 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026022344676-255243852.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;依次类推,下方肯定会跳转到我们的程序里面.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026022451551-1045244828.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一直找到一个跳转到eax的位置&lt;/p&gt;
&lt;p&gt;此时EAX的值是 004022E4&lt;/p&gt;
&lt;p&gt;而JMP的位置是0040AC1E&lt;/p&gt;
&lt;p&gt;由此可以判断出,入口点的位置是4022E4&lt;/p&gt;
&lt;p&gt;为什么?&lt;/p&gt;
&lt;p&gt;因为壳一般加密之后,如果跳转到入口点,那么它是一个远跳&lt;/p&gt;
&lt;p&gt;此时看JMP的地址,和跳的位置就是一个远跳.&lt;/p&gt;
&lt;h3&gt;6.F7跟入JMP eax&lt;/h3&gt;
&lt;p&gt;此时如果F7跟进来了,那么就是下面的样子&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026022717410-756942494.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;真正的入口点&lt;/p&gt;
&lt;h3&gt;8.使用OD插件,Dump内存,脱壳.&lt;/h3&gt;
&lt;p&gt;此时我们可以使用OD插件的dump内存的插件,在入口点位置脱壳了.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026022829316-691042241.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;弹出界面:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026022855988-786936865.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击脱壳,选择位置,存储你脱壳后的文件.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026022940613-8357445.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时OD不要关闭.&lt;/p&gt;
&lt;h3&gt;9.使用导入表修复工具,修复脱壳后的IAT表&lt;/h3&gt;
&lt;p&gt;(关于IAT表请熟悉PE格式后看)&lt;/p&gt;
&lt;p&gt; 此时OD调试的进程不要关闭,也就是带壳的inc2l程序,如果关闭了,那么重新进行上面几步,只需到定位到入口点即可.&lt;/p&gt;
&lt;p&gt;现在脱壳完毕,IAT表肯定让壳给抹掉了,而OD的dump工具修复的IAT表也不全,所以使用一个IAT表格修复工具修复.&lt;/p&gt;
&lt;p&gt;我用的工具是 ImportREC1.7  具体下载可以去下载看雪大礼包.&lt;/p&gt;
&lt;p&gt;(当然我会上传,但是此工具比较老,会有Bug,一会修复完之后手工修复即可.)&lt;/p&gt;
&lt;p&gt;9.1打开工具.并选择我们OD挂起的未脱壳的inc2l的程序.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026023743332-184934765.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 9.2 OEP位置给我们的OPE的偏移&lt;/p&gt;
&lt;p&gt;OEP位置给我们的OEP的偏移,或者让它自动查找.&lt;/p&gt;
&lt;p&gt;然后点击Get Imports&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026023912379-1498604415.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;9.3 点击 Fix Dump 给我们脱壳的程序修复&lt;/p&gt;
&lt;p&gt;现在导入表已经有了,那么点击Fix Dump给我们刚才脱壳后的程序修复一下.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026024027691-1653687988.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;9.4运行我们的脱壳程序查看是否可以运行.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026024058613-1877352962.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;提示错误,Winhex打开,查看PE格式.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026024153348-556377266.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先,我们发现我们的导入表,被我们的导入表修复工具加了一个新的节, 也就是mackt的节&lt;/p&gt;
&lt;p&gt;那么我们此时我们首先定位 sizeofHead (DOS头+ NT头 + 节表的总大小)我们看下是多少.&lt;/p&gt;
&lt;p&gt;有没有自动给我们增加.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026024318644-270883565.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;并没有增加,大小还是200,那么是错的,因为加了一个分页&lt;/p&gt;
&lt;p&gt;也就是mackt的位置的大小并没有加上,也不是说没有加上,而是正好在200的位置处,也就是文件中1F0的位置.&lt;/p&gt;
&lt;p&gt;那么这个程序出BUG了,此时我们改为1000 或者你自己看下多大.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026024456973-597827696.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;保存文件,重新打开我们的壳程序试一下还会崩溃吗.&lt;/p&gt;
&lt;p&gt;为了方便,拷贝到住电脑上,然后命令行打开查看.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171026024915394-1987425180.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;成功运行,因为这个程序点开会一闪而过,所以截图不了,所以命令行打开,出来这个界面就成功了.&lt;/p&gt;


&lt;p&gt;课堂代码资料:  链接：&lt;a href=&quot;http://pan.baidu.com/s/1kVL1f6Z&quot; target=&quot;_blank&quot;&gt;http://pan.baidu.com/s/1kVL1f6Z&lt;/a&gt; 密码：2ltj&lt;/p&gt;
&lt;p&gt; 作者：IBinary&lt;br/&gt;出处：&lt;a href=&quot;http://www.cnblogs.com/iBinary/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/iBinary/&lt;/a&gt;&lt;br/&gt;版权所有，欢迎保留原文链接进行转载：)&lt;/p&gt;

</description>
<pubDate>Wed, 25 Oct 2017 18:52:00 +0000</pubDate>
<dc:creator>iBinary</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iBinary/p/7734344.html</dc:identifier>
</item>
<item>
<title>javascript 之异常处理try catch finally--05 - 风吹De麦浪</title>
<link>http://www.cnblogs.com/CandyManPing/p/7734322.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CandyManPing/p/7734322.html</guid>
<description>&lt;p&gt;try catch finally是ECMAScript-262 第三版提供异常处理机制的标准，语法结构如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;可能会发生的错误代码&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;catch(error){
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;错误处理&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; }&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;无论是否有异常都会执行&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;语法与大多数语言一样 如java .net，如果try{}代码块捕获到了异常，那么catch块会得到一个错误信息对象（Error 的实例）。&lt;/p&gt;
&lt;p&gt;我们应该把有可能发生错误的代码放在try块中，而错误处理在catch块中；在js中如果&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;代码块中发生了错误且没有进行捕获异常处理，那么当前&amp;lt;script&amp;gt;代码块后续的代码是不会执行的 ，但是不会影响到其他&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;代码块代码如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;script&amp;gt;
&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;function&lt;/span&gt;&lt;span&gt; run(){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;      console.log(age);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    run();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     console.log('可以输出吗？'&lt;span&gt;);//没有执行
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &amp;lt;script&amp;gt;
&lt;span&gt;10&lt;/span&gt;     console.log('这是第二个代码块');&lt;span&gt;//执行了，&lt;/span&gt;&lt;span&gt;这是第二个代码块&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;反之后续的代码还是会执行 如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;script&amp;gt;
&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;function&lt;/span&gt;&lt;span&gt; run(){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;       &lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;          console.log(age);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;       }&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(error){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    run();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     console.log('可以输出吗？');&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以输出吗？&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &amp;lt;script&amp;gt;
&lt;span&gt;15&lt;/span&gt;     console.log('这是第二个代码块');&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这是第二个代码块&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果存在finally代码块，那么不管什么原因里面的代码都会执行，甚至是catch 语句中有return语句 如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; say() {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            console.log(age)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (erroe) {
            console.log(erroe.message);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;age is not defined&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
           console.log(&lt;/span&gt;'finally 执行了');&lt;span&gt;//&lt;/span&gt;&lt;span&gt;finally 执行了&lt;/span&gt;
&lt;span&gt;        }
    }
    say();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;认识Error 类型&lt;/p&gt;
&lt;p&gt;当代码运行时发生错误，会创建一个Error对象，并将其抛出，这个对象包含了错误的描述信息。&lt;/p&gt;
&lt;p&gt;如在 &lt;strong&gt;try...catch（error）{...}&lt;/strong&gt; 语句中Error 是Error类型抛出的对象，该对象有三个基本的属性name 错误名称，message 错误信息，stack 错误栈信息；&lt;/p&gt;
&lt;p&gt;执行代码期间可能会发生的错误有多种类型，所以Error 又派生了几个儿子 如：&lt;/p&gt;
&lt;p&gt;Error                                  Error 类型的错误很少见，如果有也是浏览器抛出的；这个基类型的主要目的是供开发人员抛出自定义错误。&lt;br/&gt;EvalError                           创建一个error实例，表示错误的原因：与 eval() 有关。&lt;br/&gt;InternalError                      创建一个代表Javascript引擎内部错误的异常抛出的实例。 如: &quot;递归太多&quot;.&lt;br/&gt;RangeError                       创建一个error实例，表示错误的原因：数值变量或参数超出其有效范围。&lt;br/&gt;ReferenceError                 创建一个error实例，表示错误的原因：无效引用。&lt;br/&gt;SyntaxError                       创建一个error实例，表示错误的原因：eval()在解析代码的过程中发生的语法错误。&lt;br/&gt;TypeError                         创建一个error实例，表示错误的原因：变量或参数不属于有效类型。&lt;br/&gt;URIError　　　　　　      创建一个error实例，表示错误的原因：给 encodeURI()或 decodeURl()传递的参数无效。&lt;/p&gt;
&lt;p&gt;Error 是基类，其他错误类型都是继承自Error类型，所以子类也就具备了三个基本的属性name 错误名称，message 错误信息，stack 错误栈信息。&lt;/p&gt;
&lt;p&gt;有了这些错误类型我们就可以写类似这样的代码，通过判断异常的类型来特定处理某一类的异常 如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;script&amp;gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             say(&quot;hello word&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (error) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; error) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                document.writeln(error[p]);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;上面可以遍历错误&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (error &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; EvalError) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果非法调用了eval()函数，则会抛出EvalError的异常。&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;                 alert(&quot;EvalError&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (error &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; ReferenceError) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;错误的引用，此例子是执行到了本步。&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;                 alert(&quot;ReferenceError&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (error &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; RangeError) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数值超出了范围&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;                 alert(&quot;RangeError&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (error &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; SyntaxError) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;语法错误，错误发生在eval()，&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;                 alert(&quot;SyntaxError&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (error &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; TypeError) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;变量类型不是预期的&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;                 alert(&quot;TypeError&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (error &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; URIError) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;错误发生在encodeURI()或decodeURI()中&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;                 alert(&quot;URIError&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    run();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/825196/201710/825196-20171026014600723-907976492.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;语法：throw exception；&lt;/p&gt;
&lt;p&gt;exception 可以是任何类型的数据 如：&lt;/p&gt;
&lt;p&gt;throw 12345;&lt;/p&gt;
&lt;p&gt;throw 'hello';&lt;/p&gt;
&lt;p&gt;throw true;&lt;/p&gt;
&lt;p&gt;throw {name:'Joel',age:20};&lt;/p&gt;
&lt;p&gt;使用throw语句来抛出一个自定义异常 如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;script&amp;gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; see(){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Error(&quot;my eroor!&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (error) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             console.log(error.name );&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             console.log(error.message);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;my eroor!&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             console.log(error.stack);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Error: my eroor! at see (try.html:12) at try.html:22&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    see();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当执行的javascript代码中出现错误的时候，js引擎就会根据js的调用栈逐级寻找对应的catch，如果没有找到相应的catch handler或者本身又有error或者又抛出新的error，最后就会把这个error的处理交给浏览器，浏览器会用各自不同的方式（IE以黄色三角图案显示在左下角，而firefix会显示在错误控制台中）显示错误信息给用户；&lt;/p&gt;

&lt;p&gt;任何没有通过tyr-catch处理的错误都会触发window对象的error事件 如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;script&amp;gt;
&lt;span&gt; 2&lt;/span&gt;     window.onerror= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (msg,url,l)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         console.log(msg)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Uncaught ReferenceError: a is not defined&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         console.log(url)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;http://localhost:63342/person_Project/js_demo/onerror.html&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         console.log(l)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; run(){
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        console.log(a)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    run()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;window.onerror 事件接收三个参数：msg  错误消息、url  发生错误的页面的 url 、line 发生错误的代码行。&lt;/p&gt;

&lt;p&gt;有了try catch 捕获的错误对象加上window.onerror 全局监听错误事件，那么前端js代码错误监控变的太简单了。&lt;/p&gt;

</description>
<pubDate>Wed, 25 Oct 2017 18:45:00 +0000</pubDate>
<dc:creator>风吹De麦浪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CandyManPing/p/7734322.html</dc:identifier>
</item>
<item>
<title>【JAVA零基础入门系列】Day10 Java中的数组 - 弗兰克的猫</title>
<link>http://www.cnblogs.com/mfrank/p/7732294.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mfrank/p/7732294.html</guid>
<description>&lt;p&gt;　　什么是数组？顾名思义，就是数据的组合，把一些相同类型的数放到一组里去。&lt;/p&gt;
&lt;p&gt;　　那为什么要用数组呢？比如需要统计全班同学的成绩的时候，如果给班上50个同学的成绩信息都命名一个变量进行存储，显然不方便，而且在做成绩统计，如求总分，平均分，方差等的时候，遍历成绩信息又成了一大难题，这个时候，你就需要用到数组了。&lt;/p&gt;
&lt;p&gt;　　数组可以很好的解决这两个问题，数组名只有一个，只需要使用数组名加下标来访问各个元素的信息即可，遍历的时候，由于下标是连续的，所以访问起来十分方便。&lt;/p&gt;
&lt;p&gt;　　接下来，就开始正式介绍一下数组吧。&lt;/p&gt;
&lt;p&gt;　　数组是用于存储相同数据类型的集合，使用数组前需要先声明数组，声明方式为：int[] a; 这里只声明了变量，并没有真正初始化为数组。应该使用new运算符创建数组，int[] a = new int[100]; 这里声明了一个大小为100的整数型数组，也就是说，里面可以存放最多一百个整数。需要注意的是，数组的下标是从0-99，而不是1-100，所以，数组里的最后一个数是a[99]而不是a[100]，数组定义好之后，就可以用循环结构来进行赋值操作。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt;[] a = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[100&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; 100; i++&lt;span&gt;)
    a[i] &lt;/span&gt;= i;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　新建的数字数组，里面元素都会被初始化为0，如果是逻辑型数组，则都会初始化为假，对象型数组则初始化为null，当你创建一个字符串数组的时候，里面元素都是null而不是空字符串，所以如果希望初始化后为空串，则需要像上述操作那样，遍历每个元素来赋值空串。&lt;/p&gt;
&lt;p&gt;　　对于Java中的数组遍历，还有一种更简便的方法，类似于C#中的for each循环，Java也有同样的for each操作。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; element:a)
    System.out.println(element);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这段代码会依次打印a中的元素，每个元素占一行，这里的每次循环，都会将数组a中的一个元素暂存在element中，处理完之后在将下一个元素存放在element中。这样做的好处是，省略了下标处理，这样就不存在下标越界的问题了，看起来也更加简洁。当然，如果在循环中需要利用下标进行一些判断或者处理，就只能需要使用普通的for循环来处理了。两种方法各有优点，具体情况具体分析即可。&lt;/p&gt;
&lt;p&gt;　　对于数组的初始化，有几种比较常见的方式。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt;[] a={1,2,3,4,5};&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里不需要使用new&lt;/span&gt;
&lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[]{2,3,4,5,6};&lt;span&gt;//&lt;/span&gt;&lt;span&gt;匿名数组&lt;/span&gt;
a = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[]{2,3,4,5,6};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果你有学过C或者C++的话，这里的int[] a= new int[100]; 相当于C++中的int* a = new int[100];也就是说，数组变量是一个指针，所以将一个数组变量拷贝给两一个数组变量时，它们将指向同一个数组。举个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt;[] a&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;[] b = {3,4,5,6&lt;span&gt;};
a &lt;/span&gt;=&lt;span&gt; b;
a[&lt;/span&gt;2] = 10&lt;span&gt;;
System.out.println(b[&lt;/span&gt;2]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里将输出10，也就是说b指向的数组的元素被改变了。如果只想把一个数组里的元素的值拷贝到另一个数组中去的话，就要使用Arrays类的copyOf方法，这个方法有两个参数，第一个是需要拷贝的数组，第二个是需要拷贝的长度。来看一个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; pers.frank.test;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] a;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;[] b = {3,4,5,6&lt;span&gt;};
        a &lt;/span&gt;= Arrays.copyOf(b,8&lt;span&gt;);
        a[&lt;/span&gt;2] = 10&lt;span&gt;;
        System.out.println(&lt;/span&gt;&quot;==B==&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i:b)
            System.out.println(i);
        System.out.println(&lt;/span&gt;&quot;==A==&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i:a)
            System.out.println(i);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样，会循环输出数组b和数组a的各个元素。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171025222850160-560920254.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里我们将第二个参数设置成了8，而数组b的长度只有4，那结果会怎样呢？答案显而易见，会把多的长度用0填充。&lt;/p&gt;
&lt;p&gt;　　在前面的栗子里，我们经常看到Java应用程序里带有String[] args的main方法，这个参数表名，main方法接收一个字符串数组，也就是命令行参数。举个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(args[0].equals(&quot;-h&quot;&lt;span&gt;))
            System.out.print(&lt;/span&gt;&quot;Hello,&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (args[0].equals(&quot;-g&quot;&lt;span&gt;))
            System.out.print(&lt;/span&gt;&quot;Goodbye,&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = 1; i &amp;lt; args.length; i++&lt;span&gt;)
            System.out.print(&lt;/span&gt;&quot; &quot;+&lt;span&gt; args[i]);
        System.out.print(&lt;/span&gt;&quot;!&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行结果如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171025234416551-370253458.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　下面再讲讲数组排序，Arrays类中有一个sort方法，用于给数组的元素进行排序，使用的是快速排序算法，算是效率比较高的算法了。这里举个栗子进行演示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;[] numbers = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[10&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;10;i++&lt;span&gt;){
            numbers[i] &lt;/span&gt;= (&lt;span&gt;int&lt;/span&gt;)(Math.random()*10&lt;span&gt;);
        }
        System.out.println(&lt;/span&gt;&quot;Before Sort:&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt;&lt;span&gt; j:numbers){
            System.out.println(j);
        }
        Arrays.sort(numbers);
        System.out.println(&lt;/span&gt;&quot;After Sort:&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt;&lt;span&gt; j:numbers){
            System.out.println(j);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171026002204629-1585293805.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　最后再说说多维数组吧，之前的数组只能算是一维数组，二维数组就像Excel的表格那样，有着行跟列，如果有了解过矩阵的话，那对于二维数组应该就不陌生了，在Java中声明二维数组也很简单： int[][] number; 只比一维数组多了一对[]。同样也需要用new来定义数组大小。当然也可以使用类似于一维数组的初始化方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt;[][] numbers =&lt;span&gt; {
　　{&lt;/span&gt;1,2,3&lt;span&gt;},
　　{&lt;/span&gt;4,5,6&lt;span&gt;},
　　{&lt;/span&gt;7,8,9&lt;span&gt;}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　数组元素的访问同样需要使用两个方括号，如numbers[1][2]，这里的值是数字6，第一个方括号里代表行号，第二个方括号里代表列号，所以这里就是第二行，第三列的数。如果需要遍历二维数组的话，就需要使用两个for循环了，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;numbers.length;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;　　for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=0;j&amp;lt;numbers[i].length;j++&lt;span&gt;){
　　　　System.out.println(numbers[i][j]);&lt;br/&gt;　　}&lt;br/&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　至于更高维度的数组，一般不会用到，这里就不多介绍了。&lt;/p&gt;
&lt;p&gt;　　至此本篇讲解完毕，欢迎大家继续关注！&lt;/p&gt;
</description>
<pubDate>Wed, 25 Oct 2017 16:33:00 +0000</pubDate>
<dc:creator>弗兰克的猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mfrank/p/7732294.html</dc:identifier>
</item>
<item>
<title>APUE 4 - 线程 : 线程同步 - Sven7</title>
<link>http://www.cnblogs.com/Sven7/p/7724939.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Sven7/p/7724939.html</guid>
<description>&lt;p&gt;当控件的多个线程共享统一内存时，我们需要确定各个线程访问到的数据的一致性。在cpu结构中，修改操作由多个内存读写周期（memory cycle），而在这些内存周期之间， 有可能会发生其他线程的内存读操作，这样就会产生多线程之间的数据一致性问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;互斥锁 mutex&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们可以通过线程互斥锁接口（pthreads mutual-exclusion interfaces）来保证同一时间只有一个线程访问我们的数据。一个mutex变量使用pthread_mutex_t数据类型来表示。在我们使用这个变量前，我们必须使用常量PTHREAD_MUTEX_INITIALIZER或调用pthread_mutex_init对其进行初始化。如果我们动态的分配mutex(通过调用pthread_mutex_init),我们需要在释放内存前调用pthread_mutex_destroy。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; #include &amp;lt;pthread.h&amp;gt;
&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Both return 0 if OK, error number on failure &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_mutex_init(pthread_mutex_t* restrict mutex,  &lt;span&gt;const&lt;/span&gt; pthread_mutexattr_t*&lt;span&gt; restrict attr);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_mutex_destroy(pthread_mutex_t* mutex);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以通过 pthread_mutex_lock对mutex加锁，如果mutex已经被锁住，那么其他对mutex进行加锁的线程会被阻塞，直到mutex被解锁。可以通过pthread_mutex_unlock来解锁mutex。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;pthread.h&amp;gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; return 0 if OK, error number on failure &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_mutex_lock(pthread_mutex_t*&lt;span&gt; mutex);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;   &lt;span&gt;如果mutex处于unlocked状态，此方法会对mutex加锁并返回0，
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;否则返回EBUSY，不会对mutex加锁
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_mutex_trylock(pthread_mutex_t*&lt;span&gt; mutex);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; return 0 if OK, error number on failure &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_mutex_unlock(pthread_mutex_t* mutex);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;避免死锁&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个线程如果试图对同一个mutex进行连续两次加锁，那么它将处于死锁状态。而确实有那么几种明显的使用mutex会产生死锁。举例来说，当我们程序中有多个mutex的时候，如果我们让一个线程锁住第一个mutex，然后对第二个mutex进行加锁，而与此同时如果另一个线程锁住第二个mutex并试图对第一个mutex进行加锁，那么此时程序就会进入死锁状态。&lt;/p&gt;
&lt;p&gt;我们可以通过消息的控制对mutex的加锁状态来避免死锁。如果我们所有的线程对所有的mutex都保持同一种加锁顺序，那么程序中永远不会出现加锁现象。然后有些时候，由于程序的架构问题我们无法保证加锁顺序，此时我们就必须采取一些其他的措施。在这种情况下我们应该先释放掉以加锁的mutex，然后重新尝试加锁。这种情况下我们可以使用pthread_mutex_trylock，如果pthread_mutex_trylock成功我们可以继续进行其他操作，否则我们应该释放掉以加锁的mutex，清理程序，然后在重试加锁。&lt;/p&gt;
&lt;p&gt;可以使用pthread_mutex_timedlock方法绑定加锁阻塞时间，如果规定时间内没有成功对mutex加锁，它返回ETIMEOUT。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; #include &amp;lt;pthread.h&amp;gt;
&lt;span&gt;2&lt;/span&gt; #include &amp;lt;time.h&amp;gt;
&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; tspr is absolute time, Return 0 if OK, error number on failure. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_mutex_timedlock(pthread_mutex_t* restrict mutex, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; timespec* restrict tsptr);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;读写锁&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;读写锁也称为共享锁，它与mutex相似，但他们提供了对并行机制更高精度的控制。对于mutex来讲，他只有两种状态：locked和unlocked，并且，同一时间内只有一个线程可以锁住它。而对于读写锁来说，他们有三种状态：读锁状态（locked in read mode），写锁状态（locked in write mode）和解锁状态(unlocked)。同一时间只有一个线程可以让读写锁处于写锁状态，而同一时间可以有多个线程让读写锁处于读锁状态。&lt;/p&gt;
&lt;p&gt;当一个读写锁处于写锁状态时，所有尝试对其加锁的线程都会处于阻塞状态，知道读写锁的写锁状态被解除。当读写锁处于读锁状态时，所有对其进行写锁操作的线程都会被阻塞，但是对其进行读锁操作的线程不会被阻塞。通常，当有对处于读写锁进行写锁操作的线程被阻塞时，其他队此读写锁进行读操作的线程也会被阻塞。&lt;/p&gt;
&lt;p&gt;读写锁在使用前必须初始化，同样的，在释放内存钱必须销毁。也可以使用常量PTHREAD_RWLOCK_INITIALIZER初始化rwlock。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;pthread.h&amp;gt;
&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; All return 0 if OK, error number on failure &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_rwlock_init(pthread_rwlock_t* restrict rwlock, &lt;span&gt;const&lt;/span&gt; pthread_rwlockattr_t*&lt;span&gt; restrict attr);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_rwlock_destroy(pthread_rwlock_t*&lt;span&gt; rwlock);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_rwlock_rdlock(pthread_rwlock_t*&lt;span&gt; rwlock);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_rwlock_wrlock(pthread_rwlock_t*&lt;span&gt; rwlock);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; unlock any type of  rwlock &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_rwlock_unlock(pthread_rwlock_t*&lt;span&gt; rwlock);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_rwlock_tryrdlock(pthread_rwlock_t*&lt;span&gt; rwlock);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_rwlock_truwrlock(pthread_rwlock_t* rwlock);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;rwlock with timeouts&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; #include &amp;lt;pthread.h&amp;gt;
&lt;span&gt;2&lt;/span&gt; #include &amp;lt;time.h&amp;gt;
&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_rwlock_timedrdlock(pthread_rwlock_t* restrict rwlock, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; timespec*&lt;span&gt; restrict tsptr);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_rwlock_timedwrlock(pthread_rwlock_t* restrict rwlock, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; timespec* restrict tsptr);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;条件变量（Condition Variables）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;条件变量是另一种线程同步机制，他们提供了线程交互点。当与mutex一起使用时， 条件变脸可以是线下以自由竞争的方式来等待任意条件的发生。这个条件本身是被一个mutex保护的。线程在改变条件状态之前必须对这个mutex加锁，其他线程在获取到这个mutex权限前不会知道这个变化，因为mutex必须处于加锁状态才能读取到条件的值。&lt;/p&gt;
&lt;p&gt;条件变量在使用前必须进行初始化，我们可以通过常量PTHREAD_COND_INITAILIZER或者调用pthread_cond_init来初始化条件变量， 若条件变量是动态分配的，那么我么需要使用pthread_cond_destroy来释放条件变量。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; #include &amp;lt;pthread.h&amp;gt;
&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Both return 0 if OK, error number on failure &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_cond_init(pthread_cond_t* restrict cond, &lt;span&gt;const&lt;/span&gt; pthread_condattr_t*&lt;span&gt; restrict attr);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_cond_destroy(pthread_cond_t* cond);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;wait for condition to be true&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; #include &amp;lt;pthread.h&amp;gt;
&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_cond_wait(pthread_cond_t* restrict cond, pthread_mutex_t*&lt;span&gt; restrict mutex);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_cond_timedwait(pthread_cond_t* restrict cond, pthread_mutex_t* restrict mutex, constr &lt;span&gt;struct&lt;/span&gt; timespec* restict tsptr);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;mutex用于保护条件，以防止多个线程调用pthread_cond_wait的竞态条件。调用线程在调用前需要对mutex加锁，pthread_cond_wait会自动将调用线程放到此条件的等待线程列表中然后等待条件的发生并解锁mutex。当phtread_cond_wait返回时（正常情况是条件被满足时），mutex被重新置位加锁状态。在pthread_cond_wait或phread_cond_timedwait方法返回时，线程需要重新检测条件，因为其他线程在此时可能会更改了条件, 因此通常我们将等待放入循环中。&lt;/p&gt;
&lt;p&gt;有两个函数可以通知条件已满足，pthread_cond_signal可以唤醒至少一个条件等待线程，而pthread_cond_broadcast会唤醒所有的条件等待线程。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; #include &amp;lt;pthread.h&amp;gt;
&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_cond_signal(pthread_cond_t*&lt;span&gt; cond);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_cond_broadcast(pthread_cond_t* cond);
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;span&gt;自旋锁（spin locks）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;自旋锁与互斥锁相似，只不过它不是以休眠的方式阻塞进程，而是通过busy-waiting（spinning）知道获取到锁权限。自旋锁通常用于锁住状态时间较短和线程不愿遭受调度成本的情况。自旋锁通常用于实现其他类型锁的底层原型。依赖于系统结构，他们可以通过test-and-set指令高效的实现。尽管高效，他们会导致浪费CPU资源。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; #include &amp;lt;pthread.h&amp;gt;
&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_spin_init(pthread_spinlock_t* &lt;span&gt;lock&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; pshared);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_spin_destroy(pthread_spinlock_t* &lt;span&gt;lock&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_spin_lock(pthread_spinlock_t* &lt;span&gt;lock&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_spin_trylock(pthread_spinlock_t* &lt;span&gt;lock&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_spin_unlock(pthread_spinlock_t* &lt;span&gt;lock&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;Barriers&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Barriers 是一种同步机制，它可以用于并行环境下协调多线程工作。barriers允许每个线程都等待直到所有协调线程都达到某个点，然后从它阻塞的地方继续执行。pthread_jion就是一种形式的barrier——它使一个线程等待直到另一个线程退出。Barrier对象要比他更通用一些，他们允许任意数量的线程等待直到所有的线程完成执行，但线程不必退出。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; #include &amp;lt;pthread.h&amp;gt;
&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_barrier_init(pthread_barrier_t* restrict barrier, &lt;span&gt;const&lt;/span&gt; pthread_barrierattr_t* restrict attr, unsigned &lt;span&gt;int&lt;/span&gt;&lt;span&gt; count);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pthread_barrier_destroy(pthread_barrier_t* barrier);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;count参数用于指定在所有线程允许继续执行前必须达到barrier的线程数量。&lt;/p&gt;
&lt;p&gt;我们使用pthread_barrier_wait函数来指示此线程以完成他的工作并准备好等待其他线程赶上进度。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
#include &amp;lt;pthread.h&amp;gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Rturns 0 or PTHREAD_BARRIER_SERIAL_THREAD if OK, error number on failure &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; pthread_barrier_wait(pthread_barrier_t* barrier);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用pthread_barrier_wait的线程会被置于休眠状态如果如果barrier数量未达到init时设置的数量。如果调用线程是最后一个线程，即barrier数量达到了初始化是设置的数量，此时所有的线程都会被唤醒。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;线程基本同步机制有 mutex、rwlock、condlock、spin lock、barrier。mutex同一时间内只有一个线程处于locked状态；rwlock提供了对读写更精细的控制；condlock通过条件变量为多线程同步提供了线程交互点；spin lock是高效的mutex，但是浪费cpu性能，一般用户层编程用不到此类型的锁；barrier提供了一种良好的多线程协调机制；实际项目中我们应该根据几种锁的特性来合理使用，并注意要避免死锁问题。&lt;/p&gt;

</description>
<pubDate>Wed, 25 Oct 2017 16:27:00 +0000</pubDate>
<dc:creator>Sven7</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Sven7/p/7724939.html</dc:identifier>
</item>
<item>
<title>PhiloGL学习（1）——场景创建及方块欲露还羞出水面 - shoufengwei</title>
<link>http://www.cnblogs.com/shoufengwei/p/7733144.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shoufengwei/p/7733144.html</guid>
<description>&lt;p&gt;上一篇文章中介绍了我认识PhiloGL框架的机缘以及初步的探讨（见&lt;a href=&quot;http://www.cnblogs.com/shoufengwei/p/7702576.html&quot;&gt;JS前端三维地球渲染——中国各城市航空路线展示&lt;/a&gt;），在此文中仅仅对此框架进行了简单介绍并初步介绍了一些该框架的知识。首先三维这个东西本身涉及的技术和知识点就非常多，我也基本属于初次接触；其次学习也需要过程，需要一点点积累，不积跬步无以至千里。&lt;/p&gt;
&lt;p&gt;这几天天天加班，但是也利用空闲时间学习了些此框架的基础知识，本文为大家介绍如何创建一个简单的二维场景。&lt;/p&gt;

&lt;p&gt;PhiloGL采用canvas来加载三维模型，所以只有在支持HTML5的浏览器才能正常显示PhiloGL的东西。&lt;/p&gt;
&lt;h2 id=&quot;添加canvas组建&quot;&gt;1.1 添加canvas组建&lt;/h2&gt;
&lt;p&gt;在html页面的body中添加：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;canvas id&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;test1&quot;&lt;/span&gt; style&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;border: none;&quot;&lt;/span&gt; width&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;500&quot;&lt;/span&gt; height&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;500&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/canvas&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;添加philogl引用&quot;&gt;1.2 添加PhiloGL引用&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;script type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; src&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;/path/to/PhiloGL.js&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;引用自定义js文件&quot;&gt;1.3 引用自定义js文件&lt;/h2&gt;
&lt;p&gt;在此文件中我们会写创建场景逻辑等等，将此文件同样添加到html页面中。&lt;/p&gt;

&lt;p&gt;GLSL（GL Shading Language）是用来在OpenGL中着色的语言，GLSL语言在GPU上执行，PhiloGL也使用GLSL语言进行着色。具体可以查阅相关资料，这里作简单介绍。&lt;/p&gt;
&lt;p&gt;GLSL分为两部分，fragment shading（fs） 和 vertext shading（vs），分别为片段着色器和顶点着色器。&lt;/p&gt;
&lt;h2 id=&quot;fs.glsl-部分简单定义如下&quot;&gt;2.1 fs.glsl 部分简单定义如下：&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode glsl&quot;&gt;
&lt;code class=&quot;sourceCode glsl&quot;&gt;&lt;span class=&quot;ot&quot;&gt;#ifdef GL_ES&lt;/span&gt;
precision highp &lt;span class=&quot;dt&quot;&gt;float&lt;/span&gt;;
&lt;span class=&quot;ot&quot;&gt;#endif&lt;/span&gt;

&lt;span class=&quot;dt&quot;&gt;varying&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;vec4&lt;/span&gt; vColor;

&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt;) {
  &lt;span class=&quot;fu&quot;&gt;gl_FragColor&lt;/span&gt; = vColor;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;vs.glsl-部分简单定义如下&quot;&gt;2.2 vs.glsl 部分简单定义如下：&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode glsl&quot;&gt;
&lt;code class=&quot;sourceCode glsl&quot;&gt;&lt;span class=&quot;dt&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;vec3&lt;/span&gt; aVertexPosition;
&lt;span class=&quot;dt&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;vec4&lt;/span&gt; aVertexColor;

&lt;span class=&quot;dt&quot;&gt;uniform&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;mat4&lt;/span&gt; uMVMatrix;
&lt;span class=&quot;dt&quot;&gt;uniform&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;mat4&lt;/span&gt; uPMatrix;

&lt;span class=&quot;dt&quot;&gt;varying&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;vec4&lt;/span&gt; vColor;

&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt;) {
  &lt;span class=&quot;fu&quot;&gt;gl_Position&lt;/span&gt; = uPMatrix * uMVMatrix * &lt;span class=&quot;dt&quot;&gt;vec4&lt;/span&gt;(aVertexPosition, &lt;span class=&quot;fl&quot;&gt;1.0&lt;/span&gt;);
  vColor = aVertexColor;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;glsl-语法简介&quot;&gt;2.3 GLSL 语法简介&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;变量类型&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;变量的类型有 void、bool、int、float、vec2、vec3、vec4、mat4等。vec3表示三维、vec4表示4维，mat4表示4*4矩阵。&lt;/p&gt;
&lt;p&gt;attribute 表示只读的顶点数据，只用在顶点着色器中，即只存在vs中，它必须是全局范围声明的，不能在函数内部。&lt;/p&gt;
&lt;p&gt;varying 表示顶点着色器的输出数据，作为片段着色器的只读输入数据，即在vs中设置后可以在fs中为作为常量使用。例如颜色或纹理坐标，纹理在后面介绍。&lt;/p&gt;
&lt;p&gt;uniform 表示一致变量，在着色器执行期间一致变量的值是不变的，由外部初始化。一致变量在fs和vs中是共享的，多用于设置摄像头的视角和投影等。它也只能是全局变量。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;固定常量&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;片段着色器&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;gl_FragColor 输出的颜色用于随后的像素操作。可以采用上述变量的方式，也可以直接设置固定值。如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode glsl&quot;&gt;
&lt;code class=&quot;sourceCode glsl&quot;&gt;&lt;span class=&quot;fu&quot;&gt;gl_FragColor&lt;/span&gt; = &lt;span class=&quot;dt&quot;&gt;vec4&lt;/span&gt;(&lt;span class=&quot;fl&quot;&gt;0.4&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;0.6&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;0.7&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样使用此fs.glsl的对象就会被设置成此颜色。颜色值小于1为rgba。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;顶点着色器&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;gl_Position 输出属性，变换后顶点的位置，用于固定裁剪等操作，所有的顶点着色器必须设置此值。&lt;/p&gt;
&lt;p&gt;由于aVertexPosition为vec3，所以vec4(aVertexPosition, 1.0)为根据外部传入的aVertexPosition创建一个vec4变量，第四个值为1.0。&lt;/p&gt;
&lt;p&gt;还有一些其他变量及其他常量和函数等，可以自行查阅，后续用到的时候也会再做相应介绍。&lt;/p&gt;
&lt;h2 id=&quot;glsl存放位置&quot;&gt;2.4 GLSL存放位置&lt;/h2&gt;
&lt;p&gt;GLSL可以直接以javascript代码块的方式给出，也可以以文件的方式给出。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;代码块方式&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在html文件中添加如下代码块：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;script id&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;shader-fs&quot;&lt;/span&gt; type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;x-shader/x-fragment&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
  #ifdef GL_ES
  precision highp float&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  #endif

  varying vec4 vColor&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;void&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    gl_FragColor &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; vColor&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;&amp;lt;script id=&quot;shader-vs&quot; type=&quot;x-shader/x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;vertex&lt;span class=&quot;st&quot;&gt;&quot;&amp;gt;&lt;/span&gt;
  attribute vec3 aVertexPosition&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  attribute vec4 aVertexColor&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

  uniform mat4 uMVMatrix&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  uniform mat4 uPMatrix&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

  varying vec4 vColor&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;void&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    gl_Position &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; uPMatrix &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; uMVMatrix &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;vec4&lt;/span&gt;(aVertexPosition&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    vColor &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; aVertexColor&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意两段代码的type类型，分别对应fs和vs。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;文件方式&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;分别定义xxx.fs.glsl文件和xxx.vs.glsl文件，将2.1和2.2部分的内容放入其中即可。&lt;/p&gt;
&lt;p&gt;以代码块方式和文件方式在调用上会有不同，后面会具体介绍。&lt;/p&gt;

&lt;p&gt;PhiloGL采用纯javascript语言来渲染三维场景。&lt;/p&gt;
&lt;h2 id=&quot;the-least-demo&quot;&gt;3.1 the least demo&lt;/h2&gt;
&lt;p&gt;使用下面的代码即可创建一个最基本的demo：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;65&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;webGLStart&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;PhiloGL&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'test1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ids'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'shader-vs'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'shader-fs'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(e) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(e)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;onLoad&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(app) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; gl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;gl&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
          canvas &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
          program &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
          camera &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;viewport&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;height&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clearColor&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clearDepth&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;enable&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;DEPTH_TEST&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;depthFunc&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;LEQUAL&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setBuffers&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'square'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dt&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'aVertexPosition'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Float32Array&lt;/span&gt;([&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dt&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'squareColors'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dt&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'aVertexColor'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Float32Array&lt;/span&gt;([&lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dt&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clear&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;COLOR_BUFFER_BIT&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;DEPTH_BUFFER_BIT&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;camera&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;view&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;id&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;camera&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;view&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$translate&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;co&quot;&gt;//Draw Square&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;//set uniforms&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setUniform&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'uMVMatrix'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;camera&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;view&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setUniform&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'uPMatrix'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;camera&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;projection&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setBuffer&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'square'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setBuffer&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'squareColors'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;drawArrays&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;TRIANGLE_STRIP&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在html文件中添加对此js文件的引用，并在body的onload事件中调用webGLStart函数即可看到在浏览器中加载出一个四边形。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; onload=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;webGLStart();&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;canvas&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;border: none;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;500&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;500&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来介绍PhiloGL类各部分的意义。&lt;/p&gt;
&lt;h2 id=&quot;philogl&quot;&gt;3.2 PhiloGL&lt;/h2&gt;
&lt;p&gt;PhiloGL是框架的顶级类，在其中定义了三维场景的所有模块，如摄像机、场景、GLSL加载、键盘鼠标响应事件等等。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;与canvas的对应&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;PhiloGL传入的第一个参数（上文中的test1），即为html页面中的canvas定义的id，PhiloGL根据此值来找到canvas加载三维场景。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;program部分&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;program部分可以加载多个GLSL语言模块，每一个均有一个vs和一个fs组成。如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;program : [ {
  id : 'advance',
  from : 'ids',
  vs : 'shader-vs',
  fs : 'shader-fs-advance'
}]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其id是为此部分GLSL定义的id，from表示加载来源，vs为对应的vs部分，fs为对应的fs部分。&lt;/p&gt;
&lt;p&gt;from可以为ids或者uris，ids表示从script中取，uris表示从文件中取。当设置为uris的时候，需要添加一个path项，用于设置glsl文件存放路径。&lt;/p&gt;
&lt;p&gt;onLoad部分控制整个三维场景的加载。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;60&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;onLoad&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(app) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; gl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;gl&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      canvas &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      program &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      camera &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;viewport&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;height&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clearColor&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clearDepth&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;enable&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;DEPTH_TEST&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;depthFunc&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;LEQUAL&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setBuffers&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'square'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'aVertexPosition'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Float32Array&lt;/span&gt;([&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'squareColors'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'aVertexColor'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Float32Array&lt;/span&gt;([&lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clear&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;COLOR_BUFFER_BIT&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;DEPTH_BUFFER_BIT&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;camera&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;view&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;id&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;camera&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;view&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$translate&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;co&quot;&gt;//Draw Square&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;//set uniforms&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setUniform&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'uMVMatrix'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;camera&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;view&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setUniform&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'uPMatrix'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;camera&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;projection&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setBuffer&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'square'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setBuffer&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'squareColors'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;drawArrays&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;TRIANGLE_STRIP&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;app表示整个三维场景对象，gl表示philogl对象，program就是本小节第一部分设置的program即GLSL部分，所以program主要设置的是GLSL中的变量。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setBuffers&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'square'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'aVertexPosition'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Float32Array&lt;/span&gt;([&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'squareColors'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'aVertexColor'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Float32Array&lt;/span&gt;([&lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此段代码完成了aVertexPosition和aVertexColor两个attribute变量的设置。其中attribute值即为glsl中定义的attribute变量名称，vlaue表示设置的值，size表示变量的尺寸，如果变量类型是vec3则为3、vec4则为4。设置的value为new Float32Array类型，如果为3&lt;em&gt;3即9个值且size为3则表示3组值（即三个顶点），如果为4&lt;/em&gt;4即16个且size为4，则表示为4组值（四个顶点）。&lt;/p&gt;
&lt;p&gt;下面与之对应的setBuffer表示对当前对象设置此变量值，因为同一个场景中可以创建多个对象，不同的对象可以使用相同的GLSL语言进行控制，那么就要为这些对象的相同变量设置不同的值，这样就可以通过setBuffer来控制某个对象的变量值。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setBuffer&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'square'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setBuffer&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'squareColors'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过setUniform设置GLSL中的uniform变量。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setUniform&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'uMVMatrix'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;camera&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;view&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setUniform&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'uPMatrix'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;camera&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;projection&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此处设置的两个变量均与摄像机（camera）有关，所谓摄像机的概念是说假设现在有个实体场景存在这你要绘制出的对象，那么当我们将摄像机放置在不同位置的时候摄像机拍摄到的场景是不同的，所以此处的摄像机的概念同样如此，表示我们从哪个角度（点）来观察这个对象。当然采用这种方式，每一个对象均需要一个摄像机对其进行拍摄使我们能够正常看到此对象。&lt;/p&gt;
&lt;p&gt;camera.view表示摄像机视角，就是摄像机从哪个位置拍摄此物体。&lt;/p&gt;
&lt;p&gt;camera.projection表示投影矩阵，简单的说就是一个三维点如何投影在二维平面上。因为摄像机拍摄的对象最终反映到摄像机的镜头里是在一个平面上，这中间就存在投影的问题。公式为:&lt;/p&gt;

&lt;p&gt;其中x是一个三维的点，C为投影矩阵，y就是投影的结果（二维平面中的点）。&lt;/p&gt;
&lt;p&gt;从vs中我们也能看出这一点：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;gl_Position &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; uPMatrix &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; uMVMatrix &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;vec4&lt;/span&gt;(aVertexPosition&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;uPMatrix传入的就是camera.projection，相当于C矩阵，vec4(aVertexPosition, 1.0)表示三维位置，二者相乘得到物体三维点在摄像机中的投影，再乘以uMVMatrix矩阵，将其从摄像机平面再投影到我们所看的这个平面，这样我们便能看到此物体。&lt;/p&gt;
&lt;p&gt;camera.view.$translate表示此摄像机相对起点的偏移。原始位置在(0,0,0)点。&lt;/p&gt;
&lt;p&gt;当场景和对象均设置好后，即可进行绘制。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;drawArrays&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;TRIANGLES&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;drawArrays&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;gl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;TRIANGLE_STRIP&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意此处的第三个参数3和4，此值表示绘制的对象是几边形。&lt;/p&gt;
&lt;p&gt;类型有 &lt;code&gt;TRIANGLES&lt;/code&gt;, &lt;code&gt;TRIANGLE_STRIP&lt;/code&gt;, &lt;code&gt;POINTS&lt;/code&gt;, &lt;code&gt;LINES&lt;/code&gt;。&lt;br/&gt;TRIANGLES绘制三角形、TRIANGLE_STRIP绘制多边形、POINTS绘制点、LINES绘制线&lt;/p&gt;

&lt;p&gt;本文简单介绍了PhiloGL框架如何上手、GLSL语言以及简单的绘制一个方块，当然可能有很多我理解错误或者不深刻的地方欢迎各位大神批评指正！后面一篇文章为大家介绍如何将这个方块动起来。&lt;/p&gt;
</description>
<pubDate>Wed, 25 Oct 2017 15:52:00 +0000</pubDate>
<dc:creator>shoufengwei</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shoufengwei/p/7733144.html</dc:identifier>
</item>
<item>
<title>2018秋招前端总结 - Wayne-Zhu</title>
<link>http://www.cnblogs.com/zhuzhenwei918/p/7732819.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhuzhenwei918/p/7732819.html</guid>
<description>&lt;p&gt;&lt;br/&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从8月中旬实习结束就开始找工作了，一直到十一，终于尘埃落定，在博客园写文章也有一年了，写博客也真的可以获得很多，这里做一个总结。 &lt;/p&gt;
&lt;p&gt; 非科班，但自己比较喜欢前端，所以最后虽然没有拿到bat的offer，但最后也收到了自己满意的。&lt;/p&gt;
&lt;p&gt;比较后悔的时内推比较晚了，之前实习一直没有在意，实习回来内推已经不多了，我笔试也比较菜，所以前期挂到绝望。。。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;笔试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;笔试没有太多的方法，主要就是刷题，牛客网上的题、剑指offer等等，由于自身不是科班，秋招之前准备的也不是很充分，自学了计算机网络、操作系统、数据结构课程，但是算法一直都是弱项，只是把剑指offer刷了好几遍，才能勉强过一些公司的笔试。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;面试技巧&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、多看面经。多看，多总结，很多知识点都是常考的，提前看看没有坏处。&lt;/p&gt;
&lt;p&gt;2、多面。对于水平一般的同学，可以在前期多投一些公司，不管大的小的。小的公司可以帮助你积累面试经验，这样，在后面面试大公司的时候心里也就有底了。&lt;/p&gt;
&lt;p&gt;3、尽量去表现自己，表现的自信一些。 在后面的面试中，如果你都会，你就可以很自信的去回答，去拓展，这样和面试官交流起来也是非常愉快的。&lt;/p&gt;
&lt;p&gt;4、往自己擅长的方向引导。我们不可能对于所有的知识点都掌握的很好，但是可以主动说出自己的想法，主动往自己擅长的方向去引导。不会就是不会，不要说可能之类的不确定的话。 如果是‘可能’，那么就表现的对知识点的不深入，这是面试官所不希望的。我觉得比较好的方法就是直接说不会，然后可以给出自己的思路，即把你思考的过程表达出来； 也可以是我没有看XXX，是因为我觉得YYY更加更重要，优先级更高一些，但计划后期回去看XXX。&lt;/p&gt;

&lt;p&gt;之前也记了一些公司的面试，但很多都记不全了，只是把印象比较深刻的列出来。&lt;br/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;蘑菇街 （内推一面挂）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、蘑菇街是内推的，但刚刚实习回来，很多都没有复习，所以一面就挂了。&lt;/p&gt;
&lt;p&gt;2、自我介绍&lt;/p&gt;
&lt;p&gt;3、如何实现一个倒计时功能，类似于蘑菇街中的秒杀。&lt;/p&gt;
&lt;p&gt;4、怎么理解es6箭头函数中的this，它和一般函数的this指向有什么区别呢？&lt;/p&gt;
&lt;p&gt;5、一个矩形，里面一个樱桃，过樱桃做一条直线， 并且没有数据和测量工具，如果做到评分矩形呢？&lt;/p&gt;
&lt;p&gt;6、说一下同源策略&lt;/p&gt;
&lt;p&gt;7、vue中的路由时如何管理的？ 你知道他的实现方式吗？&lt;/p&gt;
&lt;p&gt;8、提到了我的博客，问我的博客相关问题。&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;猎豹（内推一面挂）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、猎豹应该是第二个面试的，当时回答的还可以，整体问的也不深，但莫名其妙的就挂了。。&lt;/p&gt;
&lt;p&gt;2、retina屏幕的了解&lt;/p&gt;
&lt;p&gt;3、说一说移动端的布局。 flexible。&lt;/p&gt;
&lt;p&gt;4、知道原理吗，怎么自己去实现一个flexible。 rem布局的实现原理。移动端的点透是什么，有没有了解&lt;/p&gt;
&lt;p&gt;5、说一说异步编程的方式有哪些。&lt;/p&gt;
&lt;p&gt;6、项目中的设计是怎么回事，说说设计方面。&lt;/p&gt;
&lt;p&gt;7、你博客里的轮播图，如果还要优化，你会怎么去优化。&lt;/p&gt;
&lt;p&gt;8、你最喜欢的es6中的特性是什么，为什么。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;商汤科技（内推一面挂）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;商汤面试还是有一定难度的，之前准备的也不太好，卒。&lt;/p&gt;
&lt;p&gt;1、为什么选择前端（不是科班，这个问题经常被问。。。）&lt;/p&gt;
&lt;p&gt;2、css布局的属性有哪些。&lt;/p&gt;
&lt;p&gt;3、有没有遇到过这样的问题： 一个有border的div，里面有一个图片，发现图片和下面的border有一定的空隙（baseline）。&lt;/p&gt;
&lt;p&gt;4、函数调用的方式有哪些。他们的区别是什么。&lt;/p&gt;
&lt;p&gt;5、说一说原型链（这个要非常清楚）。&lt;/p&gt;
&lt;p&gt;6、用过什么框架。jquery用过吗？&lt;/p&gt;
&lt;p&gt;7、你实习公司的前端leader是谁。&lt;/p&gt;
&lt;p&gt;8、给你一个项目，你使用jquery还是vue、react。为什么。（这个问题也是会被经常问到的）&lt;/p&gt;
&lt;p&gt;9、说一说异步编程。&lt;/p&gt;
&lt;p&gt;10、说一说回调地狱是什么，有什么问题。异常捕获怎么做。&lt;/p&gt;
&lt;p&gt;11、说一说promise。 一个promise有多个then，如果第一个then出错，后面的还会执行吗，如何捕获异常。 如果第一个then出错了，我还想要后面的继续执行，应该怎么做。&lt;/p&gt;
&lt;p&gt;12、你在学习js的时候，遇到过哪些js方面的坑、 你觉得js哪些知识会难一些。&lt;/p&gt;
&lt;p&gt;其实到这里就可以看出来很多问题都是重复的了。。。&lt;/p&gt;


&lt;p&gt;&lt;br/&gt;&lt;strong&gt;TP-LINK&lt;/strong&gt; &lt;strong&gt;（走完流程，莫名挂）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;tplink整体面的还是比较水的，但最后走完流程就没有消息了，应该是挂了。大概只记得下面这些了。&lt;/p&gt;
&lt;p&gt;1、你的成绩怎么样？ 为什么不学习原专业？&lt;/p&gt;
&lt;p&gt;2、登录状态怎么保持？&lt;/p&gt;
&lt;p&gt;3、为什么用本地存储，而不用session，session更加简单啊！&lt;/p&gt;
&lt;p&gt;4、http和https的区别是什么？ （http、https、http2这些都是经常被问到的）&lt;/p&gt;
&lt;p&gt;5、post和get的区别是什么？&lt;/p&gt;
&lt;p&gt;6、你会的技术有哪些？&lt;/p&gt;
&lt;p&gt;7、你在学校社团是做什么的，你是做什么的？&lt;/p&gt;
&lt;p&gt;8、为什么不愿意留在暑期实习的公司？&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;北京绿盟科技（走完流程，挂）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;绿盟是在西安分公司面的，但是投递的北京的岗位，几次面试聊的都很好，问的很多，但也都比较基础，答得不错，最后估计也是挂了。&lt;/p&gt;
&lt;p&gt;1、vue和react有什么区别？&lt;/p&gt;
&lt;p&gt;2、angular用过吗？&lt;/p&gt;
&lt;p&gt;3、说一下同源策略？ 说一个JSONP？  （同源策略和跨域的多种方式还是要很熟练的）&lt;/p&gt;
&lt;p&gt;4、304和200的区别是什么。 （状态码也是必须要掌握的，包括各种区别）&lt;/p&gt;
&lt;p&gt;5、你所知道的前端优化有哪些内容？ （常考的问题，多多总结就好了）&lt;/p&gt;
&lt;p&gt;6、linux知道吗？ 你所知道的linux命令有哪些？&lt;/p&gt;
&lt;p&gt;7、vue中v-if和v-show的区别是什么？ （这个实在是记不住了，但是说明了vue不好就是因为api太多）&lt;/p&gt;
&lt;p&gt;8、你看过哪些书? （比如计算机的几门专业课、JavaScript高级程序设计、css揭秘、你不知道的JavaScript、深入react技术栈、图解http等等）&lt;/p&gt;
&lt;p&gt;9、你会的技术包括哪些&lt;/p&gt;
&lt;p&gt;10、为什么不学习原专业，而是要转行。&lt;/p&gt;
&lt;p&gt;11、为什么选择了北京而不是西安。&lt;/p&gt;
&lt;p&gt;12、项目问题。&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;有赞 （走完流程等结果）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还是比较喜欢杭州这个城市的，但阿里、网易笔试就挂了，所以最后投了有赞，目前在等结果。&lt;/p&gt;
&lt;p&gt;有赞的前端技术应该还是不错的，问的基础和项目都不错，能学到不少知识。&lt;/p&gt;
&lt;p&gt;1、一个DOM树，其中有两个节点，找出这两个节点公共的父节点？ （视频面试）&lt;/p&gt;
&lt;p&gt;2、说一下二叉树？&lt;/p&gt;
&lt;p&gt;3、如果反转二叉树？&lt;/p&gt;
&lt;p&gt;5、简洁、对于不同的类型，如何做出对比？&lt;/p&gt;
&lt;p&gt;6、说一下vue和react中的路由实现方式？&lt;/p&gt;
&lt;p&gt;7、说一下强缓存和协商缓存？ （浏览器的缓存机制也需要很清楚）&lt;/p&gt;
&lt;p&gt;8、跨域？&lt;/p&gt;
&lt;p&gt;9、说一下设计模式？&lt;/p&gt;
&lt;p&gt;10、其中的一个项目，你究竟做了哪些优化？&lt;/p&gt;
&lt;p&gt;11、websocket聊天室如果发送失败了，你怎么解决这个问题？如何做到发送图片？ 有了文字、图片等不同的数据类型之后，你如何实现数据的存储，如何设计，前端如何获取？&lt;/p&gt;
&lt;p&gt;12、websocket聊天室有输入框，那么怎么获取的，对于使用div来模仿textarea，我说使用正则去掉div，那么用户输入的也是div呢？   如果发送失败了呢？  究竟应该是先发送，还是应该先存储到redux中，考虑用户体验（仿照微信）。&lt;/p&gt;
&lt;p&gt;13、为什么数据库使用的是mongodb而不是mysql。&lt;/p&gt;
&lt;p&gt;14、什么是xss，如何防止xss？&lt;/p&gt;
&lt;p&gt;15、边边购项目说一下？登录的整个过程是什么？ 购物车是怎么存储设计的？ 如果LocalStorage中数据的值超过了范围，你该如何去处理这个问题？ 如果商品下架了，那么你如何显示这个商品？ 登录的过程中，一个用户退出登录，另一个用户登录，那么这个购物车是否还是存在的。 说一下边边购项目的多个不同的模块。&lt;/p&gt;
&lt;p&gt;16、说一下你说的项目中遇到的问题，然后你是如何解决这个问题的？ （这个可以好好准备一下~）&lt;/p&gt;
&lt;p&gt;17、websocket的使用，底层是如何处理的。（类似于xhr的。）、&lt;/p&gt;
&lt;p&gt;18、websocket在连接的过程中， 会有新包。。balabala 一堆听不懂的词，非常尴尬，，， 我就直接说的不会。&lt;/p&gt;
&lt;div readability=&quot;36&quot;&gt;
&lt;p&gt;最后三面就简单的问了一些问题，然后就hr面了。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;腾讯（霸面挂）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还是非常喜欢腾讯的，无奈第一次霸面就挂了。。虽然面试官全程黑着脸，但是还是可以感觉出技术实力很强。&lt;/p&gt;
&lt;p&gt;1、手写代码 判断是否是浏览器环境。&lt;/p&gt;
&lt;p&gt;2、http和https https的整个过程画一下&lt;/p&gt;
&lt;p&gt;3、httPS需要多少时间 比http慢多少 怎么优化&lt;/p&gt;
&lt;p&gt;4、https有什么缺点&lt;/p&gt;
&lt;p&gt;5、手写快速排序 复杂度 最慢是多少 为什么取第一个值作为中间值 如果这个值是最大的或者最小的怎么办&lt;/p&gt;
&lt;p&gt;6、http2有哪些特性 头部压缩怎么回事&lt;/p&gt;
&lt;p&gt;7、100层 1个花瓶仍 找到n层不碎 n + 1层碎了的情况 2个花瓶呢&lt;/p&gt;
&lt;p&gt;8、node了解多少 全局对象是什么&lt;/p&gt;
&lt;p&gt;9、事件机制说一下 事件绑定说一下 手写如何把div中的a放在平级其中的事件会怎么样 冒泡会到document还是window&lt;/p&gt;
&lt;p&gt;10、推荐一下身边厉害的人，你觉得你比他厉害吗。为什么&lt;/p&gt;
&lt;p&gt;11、xss怎么防范 尖括号应该怎么过滤，一直问确定吗，最后也没说清楚&lt;/p&gt;
&lt;p&gt;12、用过哪些框架&lt;/p&gt;
&lt;p&gt;13、移动端如何真机调试&lt;/p&gt;
&lt;p&gt;14、tap是怎么回事、和click的区别。。。&lt;/p&gt;
&lt;br/&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;网宿（ offer&lt;/strong&gt; &lt;strong&gt; ）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网宿面试不难，只有一面，问的恰好都会，给了sp。 但大部分都记不清了。。&lt;/p&gt;
&lt;p&gt;1、cookie和session有什么区别&lt;/p&gt;
&lt;p&gt;2、说一下浏览器缓存问题&lt;/p&gt;
&lt;p&gt;3、动态规划是怎么回事&lt;/p&gt;
&lt;p&gt;4、进程和线程的区别是什么&lt;/p&gt;
&lt;p&gt;5、说一下restful api吧，&lt;/p&gt;
&lt;p&gt;6、说一说post和get的区别，&lt;/p&gt;
&lt;p&gt;7、说一下状态码吧&lt;/p&gt;
&lt;p&gt;8、你觉得什么样的代码是好的代码 （这个其实还挺考验实力的）&lt;/p&gt;
&lt;p&gt;9、说一下position的几个属性吧。&lt;/p&gt;
&lt;p&gt;10、typescript你用过吗？&lt;/p&gt;
&lt;p&gt;最后又聊了一下部门的情况。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;乐信（二面结束，进行中）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、说一下你做过的几个项目吧。&lt;/p&gt;
&lt;p&gt;2、框架对比一下&lt;/p&gt;
&lt;p&gt;3、cookie和session有什么区别，cookie的大小是多少。&lt;/p&gt;
&lt;p&gt;4、css3了解多少，说到了渐进增强和优雅降级&lt;/p&gt;
&lt;p&gt;5、vue接触过多长时间、react接触过多长时间、&lt;/p&gt;
&lt;p&gt;6、你对互联网公司怎么看，你想要什么样的公司、未来是怎么样的。&lt;/p&gt;
&lt;p&gt;7、乐信你了解多少，你对来深圳工作怎么看。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;美团（offer ）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;美团面试还是有深度的。&lt;/p&gt;
&lt;p&gt;1、你还转载过美团的文章？嗯 （很多面试官还是会看博客的，谢谢博客总是好的）&lt;/p&gt;
&lt;p&gt;2、cookie和localStorage区别，如何把cookie写在一个对象中，其属性就是键值对&lt;/p&gt;
&lt;p&gt;3、实现水平竖直居中的几中方法（高度和宽度不确定）&lt;/p&gt;
&lt;p&gt;4、flex是什么&lt;/p&gt;
&lt;p&gt;5、深拷贝和浅拷贝的区别，手写深拷贝 （博客里总结过，遂让手撕）&lt;/p&gt;
&lt;p&gt;6、Oject的几中方式，如何区分 （这个也是常考的）&lt;/p&gt;
&lt;p&gt;7、兼容性说一说，你做的PC端兼容性是到哪的&lt;/p&gt;
&lt;p&gt;8、如何看待最近react事件 （百度、wordpress弃用事件。可以多关注前端的一些动态）&lt;/p&gt;
&lt;p&gt;9、JQuery和三大框架的区别，react和vue的区别&lt;/p&gt;
&lt;p&gt;10、说一说CSS3中的动画，animation中可以取哪些值 （css3动画也很重要）&lt;/p&gt;
&lt;p&gt;11、flex布局是什么，默认的方向是什么，如何改变方向&lt;/p&gt;
&lt;p&gt;12、你的博客都是自己写的吗？ 你所有所学都会写成博客吗？&lt;/p&gt;
&lt;p&gt;13、说一说原型和原型链，object是最上面的吗？&lt;/p&gt;
&lt;p&gt;14、vue中的数据双向绑定是如何实现的、&lt;/p&gt;
&lt;p&gt;15、display有哪些，回答了7 8个，还是不满意&lt;/p&gt;
&lt;p&gt;16、你的node项目中有几个线程，有几个进程，如果node进程崩溃了，如何知道&lt;/p&gt;
&lt;p&gt;17、node中的process是什么&lt;/p&gt;
&lt;p&gt;18、node中如何创建子进程/19讲一讲你遇到的比较困难的事情，问了两个，最后是怎么解决的&lt;/p&gt;
&lt;p&gt;19、CSS中的单位有哪些分别说一说 （提到了ex）&lt;/p&gt;
&lt;p&gt;20、你未来的发展规划是怎么样的&lt;/p&gt;
&lt;p&gt;21、跨域，举一个例子，安全性问题到底在哪里&lt;/p&gt;
&lt;p&gt;22、100万个数据中，找出前10大数据，最快的方法是什么，堆排序怎么写&lt;/p&gt;
&lt;p&gt;23、登录状态怎么使用cookie保持，最好的方法是什么&lt;/p&gt;
&lt;p&gt;24、页面中一个video，可能格式不支持，那么前端如何判断并给出提示？&lt;/p&gt;
&lt;p&gt;25、通过比较img的onerror是一种方法， 通过服务器端也可以保存一些属性来标识哪些浏览器支持，哪些不支持&lt;/p&gt;
&lt;p&gt;26、为什么要用vue和react，而不用JQuery，给你一个项目，什么情况下使用单页面应用，什么情况下使用多页面应用。&lt;/p&gt;
&lt;p&gt;27、你所知道的前端大会有哪些，比如腾讯web前端大会，CSS conf大会，js conf大会。&lt;/p&gt;
&lt;p&gt;28、你学习的前端号有哪些，比如前端早读课，那么维护者是谁。&lt;/p&gt;
&lt;p&gt;29、前端的表单中如何设置表单的方式，如multipart, www等，对于multipart具体是如何区分其中的不同的格式的&lt;/p&gt;
&lt;p&gt;30、http2的所有特性。&lt;/p&gt;
&lt;p&gt;31、http2中的头部压缩和多路复用。&lt;/p&gt;
&lt;p&gt;三面主要是拓展，会比较难。&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;迅雷（offer）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、迅雷一面比较基础，二面会根据项目扩展，体验还是不错的，和面试官聊得很开心。&lt;/p&gt;
&lt;p&gt;2、post、put和get的区别什么&lt;/p&gt;
&lt;p&gt;3、localStorage和sessionstorage的区别是什么&lt;/p&gt;
&lt;p&gt;4、页面加载速度很慢，如何加速页面的渲染&lt;/p&gt;
&lt;p&gt;5、输入了一个URL之后发生了什么&lt;/p&gt;
&lt;p&gt;6、图片很大，如何进行优化&lt;/p&gt;
&lt;p&gt;7、手写二分查找&lt;/p&gt;
&lt;p&gt;8、画出TCP三次握手的过程&lt;/p&gt;
&lt;p&gt;9、websocket是如何实现服务器端推送的&lt;/p&gt;
&lt;p&gt;10、你对迅雷了解多少？&lt;/p&gt;
&lt;p&gt;11、websocket和http的区别是什么？websocket的优点是什么？&lt;/p&gt;
&lt;p&gt;12、为什么使用websocket？ websocket是怎么连接的，一定需要通过http协议吗？ 短轮询、commet、长轮训都介绍一下。各有什么优缺点。&lt;/p&gt;
&lt;p&gt;13、聊天室如何兼容IE8&lt;/p&gt;
&lt;p&gt;14、http1.1中的keep-alive是怎么理解的？&lt;/p&gt;
&lt;p&gt;15、setTimeout和setInterval&lt;/p&gt;
&lt;p&gt;16、原型、原型链、继承等。&lt;/p&gt;
&lt;p&gt;17、http1.0、http1.1、http2  （这三者还是要会区分的，也会经常被问到）&lt;/p&gt;
&lt;p&gt;18、css3动画相关&lt;/p&gt;
&lt;p&gt;19、html、css、js分别实现一个动画效果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;华为（走完流程，备胎）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;华为面试比较简单，就是一些开放性的问题，还有快速排序等等。&lt;br/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;CVTE（offer）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;cvte是实习转正的。&lt;/p&gt;
&lt;p&gt;其实在cvte实习的一段时间里，也是学到了很多东西的，吃住也都非常棒，办公室的环境也都很好，大家都很单纯，加班情况也并不严重，部门也会经常聚餐，至少从一个实习生的角度来说，还是非常推荐的。&lt;br/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;今日头条（offer）&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;今日头条的面试记不清了，整体是技术三面，一个上午就面完了，难度是递增的，最后还是幸运的拿到了offer。 &lt;/p&gt;



&lt;p&gt;后面还有一些面试也都拒了，秋招到此正式结束。&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;最后的话&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不抛弃，不放弃，足矣。 &lt;/p&gt;
</description>
<pubDate>Wed, 25 Oct 2017 14:27:00 +0000</pubDate>
<dc:creator>Wayne-Zhu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhuzhenwei918/p/7732819.html</dc:identifier>
</item>
<item>
<title>Nginx配置详解 - Eric zhou</title>
<link>http://www.cnblogs.com/tianqing/p/7732640.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tianqing/p/7732640.html</guid>
<description>&lt;p&gt;前两篇文章介绍了Nginx反向代理和动态路由：&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl02_DayList_TitleUrl_1&quot; class=&quot;postTitle1&quot; href=&quot;http://www.cnblogs.com/tianqing/p/7616735.html&quot;&gt;Ngnix技术研究系列1-通过应用场景看Nginx的反向代理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl02_DayList_TitleUrl_0&quot; class=&quot;postTitle1&quot; href=&quot;http://www.cnblogs.com/tianqing/p/7617358.html&quot;&gt;Ngnix技术研究系列2-基于Redis实现动态路由&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;随着研究的深入，很重要的一点就是了解Nginx各个配置和作用。整理一下分享给大家。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、先说Nginx配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nginx的配置文件是一个普通的纯文本文件，使用了Nginx自定义的一套配置语法，更接近于脚本语言，混合了Shell、Perl和C的部分特性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用#开始一个注释行&lt;/li&gt;
&lt;li&gt;配置指令以分号结束，可以接受多个参数，用空白字符分隔&lt;/li&gt;
&lt;li&gt;可以使用单引号或者双引号来定义字符串，允许用“\”转义字符&lt;/li&gt;
&lt;li&gt;配置指令和参数也可以使用引号来指定，特别是当它含有空格的时候&lt;/li&gt;
&lt;li&gt;配置块（block）的特殊的配置指令，它有一个{…}参数且无须分号结束，｛…｝里面可以包含多个配置指令，相当于C语言里的复合语句&lt;/li&gt;
&lt;li&gt;有的配置指令只能出现在指定的配置块中（即语境Context）&lt;/li&gt;
&lt;li&gt;配置块里可以再包含配置块，嵌套层次没有限制，但需符合配置块的语义&lt;/li&gt;
&lt;li&gt;可以使用include指令包含其他配置文件，支持“*”通配符，类似C语言&lt;/li&gt;
&lt;li&gt;使用$var可以引用预定义的一些变量，增加配置的灵活性&lt;/li&gt;
&lt;li&gt;不能识别或错误的配置指令会导致Nginx解析失败，无法启动&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Ngnix配置文件的默认位置在：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
/usr/local/openresty/nginx/conf/nginx.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以复制新建一个配置文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 二、进程配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进程配置指令不属于任何配置块，只能在全局域（&lt;strong&gt;main&lt;/strong&gt;）配置&lt;br/&gt;&lt;strong&gt;worker_processes number | auto;&lt;/strong&gt;&lt;br/&gt;设置Nginx能够启动的worker进程的数量，它直接影响Nginx的性能。通常当worker的数量与服务器的CPU核心数相等时，可以获取最佳的性能，这时每一个worker都会工作在一个独立的CPU核心上，完全消除CPU调度的成本。（需配合worker_cpu_affinity指令）&lt;br/&gt;Worker_processes的默认值是1. 如果不清楚服务器CPU核心数量，那么可以设置为auto参数，Nginx会尝试探测数量并设置。cat /proc/cpuinfo | grep processor&lt;br/&gt;&lt;strong&gt;master_process on | off;&lt;/strong&gt;&lt;br/&gt;决定是否启用Nginx的进程池机制，默认值是on，如果设置为off，那么Nginx不会建立master进程，只会用一个worker进程处理请求，worker_processes指令也会失效，并发处理能力大大下降。&lt;br/&gt;&lt;strong&gt;worker_cpu_affinity auto [cpumask];&lt;/strong&gt;&lt;br/&gt;指定worker进程运行在某个CPU核心上，即CPU绑定，对于多核心的CPU来说可以减少CPU切换，提高Cache命中率，让Nginx更充分地利用CPU资源&lt;br/&gt;Worker_processes 4;&lt;br/&gt;Worker_cpu_affinity 0001 0010 0100 1000;&lt;br/&gt;1.9.10之前，只能使用掩码的方式手工绑定，现在则可以用auto参数让Nginx自动绑定CPU。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;worker_directory path;&lt;/strong&gt;&lt;br/&gt;配置Nginx的工作目录，实际上仅用来存放coredump文件，在Nginx发生意外崩溃时可以用gdb调试查找原因。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、运行日志配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Nginx中运行日志分为两种，记录TCP/HTTP访问请求的access_log和记录服务器错误信息的error_log&lt;br/&gt;&lt;strong&gt;error_log file|stderr level ;&lt;/strong&gt;&lt;br/&gt;指定Nginx的运行错误日志，默认是安装目录下的logs/error.log 支持设置其他路径，或者使用标准错误输出stderr。第二个参数level是日志允许输出级别，取值是debug|info|notice|warn|error|crit|alert|emerg, 只有高于这个级别的日志才会记录下来，默认值是error&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四、Events配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nginx采用事件驱动，利用操作系统内核提供的epoll、kqueue等系统调用来高效地处理网络连接，events配置块就是用来配置Nginx的事件机制。Events配置指令不多，默认配置就饿可以工作的很好&lt;br/&gt;&lt;strong&gt;worker_connections number;&lt;/strong&gt;&lt;br/&gt;设置每个worker进程可以处理的最大连接数量，它决定了Nginx的并发能力。这个指令决定了单个进程的处理能力。Nginx的整体最大可处理的连接数再乘上worker_processes的数量。&lt;br/&gt;worker_connections的默认值是1024，可根据实际情况适当增大。&lt;/p&gt;
&lt;p&gt;五、Http配置&lt;/p&gt;
&lt;p&gt;Nginx使用http块配置HTTP相关的所有功能，包括cache、fastcgi、gzip、server、location、proxy、upsteam等。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;http {
    include       mime.types;
    default_type  application&lt;/span&gt;/octet-&lt;span&gt;stream;

    #log_format  main  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    #                  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;$status $body_bytes_sent &quot;$http_referer&quot; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    #                  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;

    #access_log  logs&lt;/span&gt;/&lt;span&gt;access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    keepalive_timeout  &lt;/span&gt;&lt;span&gt;65&lt;/span&gt;&lt;span&gt;;

    #&lt;/span&gt;&lt;span&gt;gzip&lt;/span&gt;&lt;span&gt;  on;

    server {
        listen       &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
        server_name  localhost;

        #charset koi8&lt;/span&gt;-&lt;span&gt;r;

        #access_log  logs&lt;/span&gt;/&lt;span&gt;host.access.log  main;

        location &lt;/span&gt;/&lt;span&gt; {
            root   html;
            index  index.html index.htm;
        }

        #error_page  &lt;/span&gt;&lt;span&gt;404&lt;/span&gt;              /&lt;span&gt;404&lt;/span&gt;&lt;span&gt;.html;

        # redirect server error pages to the static page &lt;/span&gt;/&lt;span&gt;50x.html
        #
        error_page   &lt;/span&gt;&lt;span&gt;500&lt;/span&gt; &lt;span&gt;502&lt;/span&gt; &lt;span&gt;503&lt;/span&gt; &lt;span&gt;504&lt;/span&gt;  /&lt;span&gt;50x.html;
        location &lt;/span&gt;= /&lt;span&gt;50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;&lt;span&gt;
        #
        #location &lt;/span&gt;~&lt;span&gt; \.php$ {
        #    proxy_pass   http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1;&lt;/span&gt;
&lt;span&gt;        #}

        # pass the PHP scripts to FastCGI server listening on &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;9000&lt;/span&gt;&lt;span&gt;
        #
        #location &lt;/span&gt;~&lt;span&gt; \.php$ {
        #    root           html;
        #    fastcgi_pass   &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;9000&lt;/span&gt;&lt;span&gt;;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  &lt;/span&gt;/&lt;span&gt;scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; Apache&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s document root&lt;/span&gt;
        # concurs with nginx&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s one&lt;/span&gt;
&lt;span&gt;        #
        #location &lt;/span&gt;~ /&lt;span&gt;\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP&lt;/span&gt;-, name-, and port-&lt;span&gt;based configuration
    #
    #server {
    #    listen       &lt;/span&gt;&lt;span&gt;8000&lt;/span&gt;&lt;span&gt;;
    #    listen       somename:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;;
    #    server_name  somename  alias  another.alias;

    #    location &lt;/span&gt;/&lt;span&gt; {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       &lt;/span&gt;&lt;span&gt;443&lt;/span&gt;&lt;span&gt; ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:&lt;/span&gt;!aNULL:!&lt;span&gt;MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location &lt;/span&gt;/&lt;span&gt; {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;resolver address … [valid=time] [ipv6=on|off]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;配置域名解析服务器，否则Nginx将无法正确解析域名的地址，无法访问后端的Web服务&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;keepalive_timeout timeout;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置keepalive的超时时间，默认75s，主要用于客户端复用Http长连接，提高服务器的性能，如果希望服务器发送数据后能主动断开连接，可以设置为0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;access_log path[format [buffer=size][flush=time][if=condition]];&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;access_log指令用于配置http的访问日志，日志的格式由log_format决定，为了优化磁盘读写，可以设置buffer和flush选项，指定写磁盘的缓冲区大小和刷新时间。 access_log /var/logs/nginx/access.log buffer=8k flush=1s;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;六、Proxy配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;proxy_connect_timeout time;&lt;/strong&gt;&lt;br/&gt;与Nginx服务器建立连接的超时时间，一般不超过75s，示例：proxy_connect_timeout 60s;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;proxy_cookie_domain off;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;proxy_cookie_domain domain replacement;&lt;/strong&gt;&lt;br/&gt;HttpHeader中，重写Set-Cookie中domain的配置，例如: proxy_cookie_domain localhost example.org;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;proxy_read_timeout time;&lt;/strong&gt;&lt;br/&gt;该指令设置与代理服务器的读超时时间。它决定了nginx会等待多长时间来获得请求的响应。这个时间不是获得整个response的时间，而是两次reading操作的时间。&lt;br/&gt;这个超时时间很重要，取决与调用方的超时配置，&lt;strong&gt;Nginx要小于等于调用方的超时配置&lt;/strong&gt;&lt;br/&gt;有个有价值的参考连接：&lt;a href=&quot;http://yunjianfei.iteye.com/blog/2265918&quot; target=&quot;_blank&quot;&gt;http://yunjianfei.iteye.com/blog/2265918&lt;/a&gt;&lt;br/&gt;当Nginx遇到报表查询、导出功能？&lt;br/&gt;&lt;a href=&quot;http://blog.chinaunix.net/uid-182114-id-4700107.html&quot; target=&quot;_blank&quot;&gt;http://blog.chinaunix.net/uid-182114-id-4700107.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;proxy_send_timeout time&lt;/strong&gt;&lt;br/&gt;该指令设置了发送请求给upstream服务器的超时时间。超时设置不是为了整个发送期间，而是在两次write操作期间。如果超时后，upstream没有收到新的数据，nginx会关闭连接。默认60s。&lt;/p&gt;

&lt;p&gt;周国庆&lt;/p&gt;
&lt;p&gt;2017/10/25&lt;/p&gt;
</description>
<pubDate>Wed, 25 Oct 2017 14:17:00 +0000</pubDate>
<dc:creator>Eric zhou</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tianqing/p/7732640.html</dc:identifier>
</item>
<item>
<title>Java集合框架体系详细梳理，含面试知识点。 - Kkky</title>
<link>http://www.cnblogs.com/kkkky/p/7732680.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kkkky/p/7732680.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;集合的由来：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　面向对象语言对事物都是以对象的形式来体现，为了方便对多个对象的操作，就需要将对象进行存储，集合就是&lt;strong&gt;存储对象&lt;/strong&gt;最常用的一种方式。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;集合特点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1，用于存储对象的容器。（容器本身就是一个对象，存在于堆内存中，&lt;span&gt;里面存的是对象的地址&lt;/span&gt;）&lt;br/&gt;2，集合的长度是可变的。&lt;br/&gt;3，集合中不可以存储基本数据类型值。 （只能存对象）&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;小问题：&lt;/strong&gt;想用集合存基本数据类型怎么办？　　&lt;/p&gt;
&lt;p&gt;　　　　&lt;em&gt;装箱、拆箱。　　例：al.add(5);　// 相当于al.add(new Integer(5));=&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;集合和数组的区别：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　数组虽然也可以存储对象，但长度是固定的，集合长度是可变的。&lt;/p&gt;
&lt;p&gt;　　数组中可以存储基本数据类型，集合只能存储对象。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;集合框架的构成及分类：（虚线为接口）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1041239/201709/1041239-20170910202212538-895040687.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;Collection子接口以及常用实现类：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Collection接口&lt;br/&gt;　　|--List接口：&lt;span&gt;有序&lt;/span&gt;(存入和取出的顺序一致),元素都有&lt;span&gt;索引(角标)&lt;/span&gt;，元素&lt;span&gt;可以重复&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　|--Vector:内部是 &lt;em&gt;&lt;strong&gt;数&lt;/strong&gt;&lt;strong&gt;组 &lt;/strong&gt;&lt;/em&gt;数据结构，是同步的。增删，查询都很慢！100%延长（几乎不用了）  &lt;br/&gt;　　　　|--ArrayList:内部是 &lt;em&gt;&lt;strong&gt;数组 &lt;/strong&gt;&lt;/em&gt;数据结构，是不同步的。&lt;span&gt;替代了Vector，查询的速度快，增删速度慢。&lt;/span&gt;50%延长。&lt;em&gt;（查询时是从容器的第一个元素往后找，由于数组的内存空间是连续的，所以查询快；增删的话所有元素内存地址都要改变，所以增删慢。）&lt;/em&gt;&lt;br/&gt;　　　　|--LinkedList:内部是 &lt;em&gt;&lt;strong&gt;链表 &lt;/strong&gt;&lt;/em&gt;数据结构，是不同步的。&lt;span&gt;增删元素的速度很快。&lt;/span&gt;&lt;em&gt;（同理，链表的内存空间是不连续的，所以查询慢；增删时只需改变单个指针的指向，所以快；）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　|--Set接口：&lt;span&gt;无序&lt;/span&gt;，元素&lt;span&gt;不能重复&lt;/span&gt;。Set接口中的方法和Collection一致。&lt;/p&gt;
&lt;p&gt;　　　　|--HashSet: 内部数据结构是&lt;em&gt;&lt;strong&gt;哈希表&lt;/strong&gt;&lt;/em&gt; ，是不同步的。&lt;br/&gt;　　　　　　|--LinkedHashSet：内部数据结构是哈希表和链表，是有顺序的HashSet。&lt;/p&gt;
&lt;p&gt;　　　　|--TreeSet：内部数据结构是有序的&lt;em&gt;&lt;strong&gt;二叉树，&lt;/strong&gt;&lt;/em&gt;它的作用是提供有序的Set集合，是不同步的。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;List接口：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　有一个最大的共性特点就是都可以操作角标，所以LinkedList也是有索引的。list集合可以完成对元素的增删改查。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;Set和List的区别：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　1. Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素 &lt;span&gt;&lt;strong&gt;&amp;lt;最本质区别&amp;gt;&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　2. Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 。&lt;/p&gt;
&lt;p&gt;　　3. List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变  。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;ArryList和Vector可变长度数组的原理：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　当默认长度的数组不够存储时，会建立一个新数组。将原来数组的内容拷贝到新的数组当中，并将新增加的元素追加到拷贝完的数组尾，如果仍然不够重复上述动作。其中,ArryList的增加是以原来50%长度进行增加，而Vector是按照100%延长。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;ArryList是线程不安全的，Vector是安全的：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;由于是否有锁的判断将影响效率，故Arrylist效率远远高于Vector。&lt;span&gt;而且只要是常用的容器就不是同步的，因为同步效率比较低。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;ArryList存取对象的一个小例子：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
        Person p1 = new Person(&quot;lisi1&quot;,21);
         
        ArrayList al = new ArrayList();
        al.add(p1);
        al.add(new Person(&quot;lisi2&quot;,22));
        al.add(new Person(&quot;lisi3&quot;,23));
        al.add(new Person(&quot;lisi4&quot;,24));
         
        Iterator it = al.iterator();
        while(it.hasNext()){
//          System.out.println(((Person) it.next()).getName()+&quot;::&quot;+((Person) it.next()).getAge());
　　　　　　　　　　　　//错误方式：不能这样取，next()一次指针会移动一次，会输出“lisi1::22 lisi3::24”
            // 正确方式：拿到一个Person对象，然后取属性。
            Person p = (Person) it.next();
            System.out.println(p.getName()+&quot;--&quot;+p.getAge());
        }　　
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;如何保证HashSet的元素唯一性呢？&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　是通过对象的hashCode和equals方法来完成对象唯一性的：&lt;br/&gt;　　　　-&amp;gt;如果对象的hashCode值不同，那么不用判断equals方法，就直接存储到哈希表中。 &lt;br/&gt;　　　　-&amp;gt;如果对象的hashCode值相同，那么要再次判断对象的equals方法是否为true:&lt;br/&gt;　　　　　　如果为true，视为相同元素，不存；如果为false，那么视为不同元素，就进行存储。&lt;/p&gt;&lt;p&gt;　　&lt;strong&gt;记住：如果对象要存储到HashSet集合中，该对象必须覆盖hashCode方法和equals方法。&lt;/strong&gt;&lt;br/&gt;　　一般情况下，如果定义的类会产生很多对象，比如人，学生，书，通常都需要覆盖equals，hashCode方法，以建立对象判断是否相同的依据。&lt;/p&gt;

&lt;p&gt;例：往HashSet集合中存储Person对象。如果姓名和年龄相同，视为同一个人，视为相同元素。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
import java.util.HashSet;
import java.util.Iterator;

class Person {

        private String name;
        private int age;

        public Person(String name, int age) {
                this.name = name;
                this.age = age;
        }

        @Override
        public int hashCode() {
                // System.out.println(this+&quot;.......hashCode&quot;);
                return name.hashCode() + age * 27; // 乘以一个任意数，防止加了年龄以后HashCode仍相同
        }

        @Override
        public boolean equals(Object obj) {
                // 健壮性判断
                if (this == obj)
                        return true;
                if (!(obj instanceof Person))
                        throw new ClassCastException(&quot;类型错误&quot;);
                // System.out.println(this+&quot;....equals.....&quot;+obj);

                Person p = (Person) obj;
                return this.name.equals(p.name) &amp;amp;&amp;amp; this.age == p.age;
        }

        public String getName() {
                return name;
        }

        public void setName(String name) {
                this.name = name;
        }

        public int getAge() {
                return age;
        }

        public void setAge(int age) {
                this.age = age;
        }

        public String toString() {
                return name + &quot;:&quot; + age;
        }
}

public class HashSetTest {

        public static void main(String[] args) {
                HashSet hs = new HashSet();
                /*
                 * HashSet集合数据结构是哈希表，所以存储元素的时候，
                 * 使用的元素的hashCode方法来确定位置，如果位置相同，在通过元素的equals来确定是否相同。
                 *
                 */
                hs.add(new Person(&quot;lisi4&quot;, 24));
                hs.add(new Person(&quot;lisi7&quot;, 27));
                hs.add(new Person(&quot;lisi1&quot;, 21));
                hs.add(new Person(&quot;lisi9&quot;, 29));
                hs.add(new Person(&quot;lisi7&quot;, 27));

                Iterator it = hs.iterator();
                while (it.hasNext()) {
                        Person p = (Person) it.next();
                        System.out.println(p);
                }
        }
}　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
lisi1:21
lisi9:29
lisi4:24
lisi7:27
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;TreeSet默认判断元素唯一性的方式：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　根据Conpare接口的比较方法conpareTo的返回结果是否是0，是0，就是相同元素，不存。 &lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;下面，我们给出两种自定义判断元素唯一性的方式：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式一：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　让元素自身具备比较功能，即根据元素中的属性来比较。采用这种方式需要元素&lt;em&gt;&lt;strong&gt;实现Comparable接口&lt;/strong&gt;&lt;/em&gt;，&lt;em&gt;&lt;strong&gt;覆盖compareTo方法&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;　　例：往TreeSet集合中存储Person对象。如果姓名和年龄相同，视为同一个人，视为相同元素。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
import java.util.Iterator;
import java.util.TreeSet;

class Person implements Comparable {

        public String name;
        public int age;

        public Person() {
                super();

        }

        public Person(String name, int age) {
                super();
                this.name = name;
                this.age = age;
        }

        public String toString() {
                return name + &quot;:&quot; + age;
        }

        @Override
        public int compareTo(Object o) {
                Person p = (Person) o;

                /* 敲黑板划重点，代码简洁方式 */
                int temp = this.age - p.age;
                return temp == 0 ? this.name.compareTo(p.name) : temp;

                // 上面这两句相当于底下这一段的简洁形式
                // if (this.age &amp;gt; p.age)
                // return 1;
                // if (this.age &amp;lt; p.age)
                // return -1;
                // else {
                // return this.name.compareTo(p.name);
                // }
        }

        public static void main(String[] args) {
                TreeSet&amp;lt;Person&amp;gt; ts = new TreeSet&amp;lt;Person&amp;gt;();
                ts.add(new Person(&quot;zhangsan&quot;, 22));
                ts.add(new Person(&quot;lisi&quot;, 27));
                ts.add(new Person(&quot;wangermazi&quot;, 21));
                ts.add(new Person(&quot;zhaosi&quot;, 25));

                Iterator it = ts.iterator();
                while (it.hasNext()) {
                        Person person = (Person) it.next();
                        System.out.println(person.toString());
                }
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
wangermazi:21
zhangsan:22
zhaosi:25
lisi:27
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可以看到，复写compareTo方法后，元素根据age这个属性进行了排序。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt; 方式二：&lt;span&gt;（开发用这个，掌握比较器的用法）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　让集合自身具备比较功能。自己写一个&lt;em&gt;&lt;strong&gt;比较器&lt;/strong&gt;&lt;/em&gt;，先定义一个类实现Comparator接口，覆盖compare方法。然后将该类对象作为参数传递给TreeSet集合的构造函数。&lt;/p&gt;
&lt;p&gt;　　不再需要元素实现Conparable接口。&lt;/p&gt;

&lt;p&gt;step1-新建比较器类ComparedByName.java，覆盖compare方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
import java.util.Comparator;

public class ComparedByName implements Comparator {

        @Override
        public int compare(Object o1, Object o2) {
                // TODO Auto-generated method stub
                Person p1 = (Person) o1;
                Person p2 = (Person) o2;
                int temp = p1.name.compareTo(p2.name);
                return temp == 0 ? p1.age - p2.age : temp;
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;step2-将比较器类类对象作为参数传递给TreeSet集合的构造函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
import java.util.Iterator;
import java.util.TreeSet;

class Person implements Comparable {

        public String name;
        public int age;

        public Person() {
                super();

        }

        public Person(String name, int age) {
                super();
                this.name = name;
                this.age = age;
        }

        public String toString() {
                return name + &quot;:&quot; + age;
        }

        @Override
        public int compareTo(Object o) {
                Person p = (Person) o;

                /* 敲黑板划重点，代码简洁方式 */
                int temp = this.age - p.age;
                return temp == 0 ? this.name.compareTo(p.name) : temp;

                // 上面这两句相当于底下这一段的简洁形式
                // if (this.age &amp;gt; p.age)
                // return 1;
                // if (this.age &amp;lt; p.age)
                // return -1;
                // else {
                // return this.name.compareTo(p.name);
                // }
        }

        public static void main(String[] args) {
                TreeSet&amp;lt;Person&amp;gt; ts = new TreeSet&amp;lt;Person&amp;gt;(new ComparedByName());
                ts.add(new Person(&quot;zhangsan&quot;, 22));
                ts.add(new Person(&quot;lisi&quot;, 27));
                ts.add(new Person(&quot;wangermazi&quot;, 21));
                ts.add(new Person(&quot;zhaosi&quot;, 25));

                Iterator it = ts.iterator();
                while (it.hasNext()) {
                        Person person = (Person) it.next();
                        System.out.println(person.toString());
                }
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
lisi:27
wangermazi:21
zhangsan:22
zhaosi:25
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这次我们的比较器是根据元素属性name进行排序的，复写的compareTo方法是根据age进行排序的。&lt;/p&gt;
&lt;p&gt;　　可以看到，当两种方法同时存在时，是按照比较器的方法来排序的。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;思考：&lt;/strong&gt;&lt;em&gt;如何通过这种方式实现先进先出和先进后出？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　让比较器直接返回1或-1即可。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　对 Collection 进行迭代的迭代器，即对所有的Collection容器进行元素取出的公共接口。&lt;/p&gt;
&lt;p&gt;　　该迭代器对象依赖于具体容器，因为每一个容器的数据结构都不同，所以该迭代器对象是在具体容器中进行内部实现的。（内部类，可以看具体容器的源码）&lt;/p&gt;
&lt;p&gt;　　对于使用容器者而言，具体的实现方法不重要，只要通过具体容器获取到该实现的迭代器的对象即可，也就是iterator()方法，而不用new。（Iterator&amp;lt;String&amp;gt; ite=list.iterator();）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1041239/201708/1041239-20170806204537709-423270612.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;小知识点：使用迭代器过程中while和for的区别&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 1 &lt;span&gt;第一种
 2 Iterator&amp;lt;String&amp;gt; ite=&lt;span&gt;list.iterator();
 3      while(ite.hasNext())//判断下一个元素之后有值
 4 &lt;span&gt;     {
 5 &lt;span&gt;         System.out.println(ite.next());
 6 &lt;span&gt;     }
 7 &lt;span&gt;第二种
 8 Iterator&amp;lt;String&amp;gt; ite=&lt;span&gt;list.iterator();
 9 for(Iterator it =&lt;span&gt; coll.iterator(); it.hasNext(); ){
10 &lt;span&gt;            System.out.println(it.next());
11         }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　第一种方法while循环结束后迭代器对象还在内存中存在，还能继续使用迭代器对象。&lt;/p&gt;
&lt;p&gt;　　第二种方法for循环结束后迭代器对象就消失了，清理了内存，开发中第二种常用。&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;h2&gt; Iterator的一个子接口&lt;/h2&gt;
&lt;p&gt;　　&lt;strong&gt;|--ListIterator接口（列表迭代器）&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;应用场景：&lt;/p&gt;
&lt;p&gt;　　顾名思义，只能用于List的迭代器。&lt;/p&gt;
&lt;p&gt;　　在使用迭代器迭代的过程中需要使用集合中的方法操作元素，出现ConcurrentModificationException异常时，具体看下面的例子。&lt;/p&gt;
&lt;p&gt;出现异常情况代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
Iterator it = list.iterator();
        while(it.hasNext()){
            
            Object obj = it.next();//java.util.ConcurrentModificationException
                            //在使用迭代器的过程中使用集合中的方法add()操作元素，出现异常。
                        //可以使用Iterator接口的子接口ListIterator来完成在迭代中对元素进行更多的操作。 
            　　　　　　　　
            if(obj.equals(&quot;abc2&quot;)){
                list.add(&quot;abc9&quot;);
            }
            else
                System.out.println(&quot;next:&quot;+obj);
        }
        System.out.println(list);　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决办法代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
public static void main(String[] args) {

        List list = new ArrayList();        
        list.add(&quot;abc1&quot;);
        list.add(&quot;abc2&quot;);
        list.add(&quot;abc3&quot;);
        
        System.out.println(&quot;list:&quot;+list);
        ListIterator it = list.listIterator();//获取列表迭代器对象
        //它可以实现在迭代过程中完成对元素的增删改查。
        //注意：只有list集合具备该迭代功能.
                
        while(it.hasNext()){            
            Object obj = it.next();            
            if(obj.equals(&quot;abc2&quot;)){
                it.add(&quot;abc9&quot;); //ListIterator提供了add方法
            }
        }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　Map接口与Set类似，可以对照着来学，比如比较器在TreeMap中也适用。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Map：&lt;/strong&gt;&lt;/span&gt;    一次添加一对元素，Collection 一次添加一个元素。&lt;/p&gt;
&lt;p&gt;　　　　Map也称为双列集合，Collection集合也称为单列集合。&lt;/p&gt;
&lt;p&gt;　　　　其实map集合中存储的就是键值对，map集合中必须保证键的唯一性。 &lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;常用方法：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1，添加&lt;br/&gt;value put(key,value):返回前一个和key关联的值，如果没有返回null.&lt;/p&gt;
&lt;p&gt;2，删除&lt;br/&gt;void clear():清空map集合。&lt;br/&gt;value remove(key):根据指定的key翻出这个键值对。&lt;/p&gt;
&lt;p&gt;3，判断&lt;br/&gt;boolean containsKey(key):是否包含该key&lt;br/&gt;boolean containsValue(value):是否包含该value&lt;br/&gt;boolean isEmpty();是否为空&lt;/p&gt;
&lt;p&gt;4，获取&lt;/p&gt;
&lt;p&gt;value get(key):通过键获取值，如果没有该键返回null。当然，可以通过是否返回null，来判断是否包含指定键。&lt;/p&gt;
&lt;p&gt;int size(): 获取键值对的个数。 &lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Map常用的子类：&lt;span&gt;（*HashMap与Hashtable的区别，面试常问*,&lt;a href=&quot;http://www.cnblogs.com/lchzls/p/6714335.html&quot; target=&quot;_blank&quot;&gt;详见这个博客。&lt;/a&gt;）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　|--Hashtable :内部结构是哈希表，是同步的。不允许null作为键，null作为值。&lt;br/&gt;　　　　|--Properties：用来存储键值对型的配置文件的信息，可以和IO技术相结合。 &lt;br/&gt;　　|--HashMap : 内部结构是哈希表，不是同步的。允许null作为键，null作为值。&lt;br/&gt;　　|--TreeMap : 内部结构是二叉树，不是同步的。可以对Map集合中的键进行排序。&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt; &lt;br/&gt;&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Map的迭代方法：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;span&gt;Map本身没有迭代器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　方法一：利用Map接口的values()方法,返回此映射中包含的值的 &lt;span&gt;&lt;a title=&quot;java.util 中的接口&quot;&gt;&lt;span&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/span&gt;&lt;/a&gt; &lt;/span&gt;（值不唯一），&lt;/p&gt;
&lt;p&gt;　　　　　　然后通过Collecion的迭代器进行迭代。（只需要Value，不需要Key的时候）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
public class MapDemo {

        public static void main(String[] args) {
                
                Map&amp;lt;Integer,String&amp;gt; map = new HashMap&amp;lt;Integer,String&amp;gt;();
                method_2(map);
        }
        
        public static void method_2(Map&amp;lt;Integer,String&amp;gt; map){
                
                map.put(8,&quot;zhaoliu&quot;);
                map.put(2,&quot;zhaoliu&quot;);
                map.put(7,&quot;xiaoqiang&quot;);
                map.put(6,&quot;wangcai&quot;);
                                
                Collection&amp;lt;String&amp;gt; values = map.values();
                
                Iterator&amp;lt;String&amp;gt; it2 = values.iterator();
                while(it2.hasNext()){
                        System.out.println(it2.next());
                }
        }
}　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　方法二：通过keySet方法获取map中所有的键所在的&lt;span&gt;Set集合&lt;/span&gt;（Key和Set的都具有唯一性），&lt;/p&gt;
&lt;p&gt;　　　　　　再通过Set的迭代器获取到每一个键，再对每一个键通过Map集合的get方法获取其对应的值即可。&lt;span&gt;&lt;strong&gt;（好用）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
            Set&amp;lt;Integer&amp;gt; keySet = map.keySet();
                Iterator&amp;lt;Integer&amp;gt; it = keySet.iterator();
                
                while(it.hasNext()){
                        Integer key = it.next();
                        String value = map.get(key);
                        System.out.println(key+&quot;:&quot;+value);              
                }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　方法三：利用Map的&lt;span&gt;内部接口Map.Entry&amp;lt;K,V&amp;gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　　　通过Map的entrySet()方法，将键和值的映射关系作为对象存储到Set集合中&lt;/p&gt;
&lt;p&gt;　　　　　　这个映射关系的类型就是Map.Entry类型(结婚证)。&lt;/p&gt;
&lt;p&gt;　　　　　　再通过Map.Entry对象的getKey和getValue获取其中的键和值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
            Set&amp;lt;Map.Entry&amp;lt;Integer, String&amp;gt;&amp;gt; entrySet = map.entrySet();
                
                Iterator&amp;lt;Map.Entry&amp;lt;Integer, String&amp;gt;&amp;gt; it = entrySet.iterator();
                
                while(it.hasNext()){
                        Map.Entry&amp;lt;Integer, String&amp;gt; me = it.next();
                        Integer key = me.getKey();
                        String value = me.getValue();
                        System.out.println(key+&quot;:&quot;+value);                      
                }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　Collections是集合框架的工具类，里面的方法都是静态的。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt; 例1：根据字符串长度的正序和倒序排序。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　用到比较器的地方都可以用Collections.reverseOrder()。&lt;/p&gt;
&lt;table summary=&quot;&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;&lt;tbody readability=&quot;5.0625&quot;&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;1.7731958762887&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;code&gt;static void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a href=&quot;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Collections.html#reverse(java.util.List)&quot;&gt;reverse&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot; href=&quot;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/List.html&quot;&gt;List&lt;/a&gt;&amp;lt;?&amp;gt; list)&lt;/code&gt; &lt;br/&gt;          反转指定列表中元素的顺序。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;4.3529411764706&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;code&gt;static&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a href=&quot;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Collections.html#reverseOrder()&quot;&gt;reverseOrder&lt;/a&gt;&lt;/strong&gt;()&lt;/code&gt; &lt;br/&gt;          返回一个比较器，它强行逆转实现了 &lt;tt&gt;Comparable&lt;/tt&gt; 接口的对象 collection 的&lt;em&gt;自然顺序&lt;/em&gt;。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.9115646258503&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;code&gt;static&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a href=&quot;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Collections.html#reverseOrder(java.util.Comparator)&quot;&gt;reverseOrder&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot; href=&quot;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Comparator.html&quot;&gt;Comparator&lt;/a&gt;&amp;lt;T&amp;gt; cmp)&lt;/code&gt; &lt;br/&gt;          返回一个比较器，它强行逆转指定比较器的顺序。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;比较器ComparatorByLength.java：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
import java.util.Comparator;

public class ComparatorByLength implements Comparator&amp;lt;String&amp;gt; {

        @Override
        public int compare(String o1, String o2) {

                int temp = o1.length() - o2.length();
                
                return temp==0?o1.compareTo(o2): temp;
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Demo：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
public static void demo_3() {

                // reverse实现原理
                /*
                 * TreeSet&amp;lt;String&amp;gt; ts = new TreeSet&amp;lt;String&amp;gt;(new Comparator&amp;lt;String&amp;gt;() {

                        @Override
                        public int compare(String o1, String o2) {

                                int temp = o2.compareTo(o1);
                                return temp;
                        }
                });
                */

                TreeSet&amp;lt;String&amp;gt; treeset = new TreeSet&amp;lt;String&amp;gt;(new ComparatorByLength());
                treeset.add(&quot;abc&quot;);
                treeset.add(&quot;hahaha&quot;);
                treeset.add(&quot;zzz&quot;);
                treeset.add(&quot;aa&quot;);
                treeset.add(&quot;cba&quot;);
                System.out.println(treeset);

                TreeSet&amp;lt;String&amp;gt; ts = new TreeSet&amp;lt;String&amp;gt;(Collections.reverseOrder(new ComparatorByLength()));//都是静态方法，直接类名调用

                ts.add(&quot;abc&quot;);
                ts.add(&quot;hahaha&quot;);
                ts.add(&quot;zzz&quot;);
                ts.add(&quot;aa&quot;);
                ts.add(&quot;cba&quot;);

                System.out.println(&quot;after reverse:\t&quot; + ts);

        }
public static void main(String[] args) {
　　　    　demo_3();
　　}&lt;em id=&quot;__mceDel&quot;&gt;&lt;br/&gt;&lt;/em&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_66e47136-1442-4be0-a3ff-bb2387f2437f&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_66e47136-1442-4be0-a3ff-bb2387f2437f&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_66e47136-1442-4be0-a3ff-bb2387f2437f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[aa, abc, cba, zzz, hahaha]
after reverse:    [hahaha, zzz, cba, abc, aa]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;运行结果&lt;/span&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt;例2：用工具类Collections.sort()进行排序：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
public static void demo_2() {
                List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;();

                list.add(&quot;abcde&quot;);
                list.add(&quot;cba&quot;);
                list.add(&quot;aa&quot;);
                list.add(&quot;zzz&quot;);
                list.add(&quot;cba&quot;);
                list.add(&quot;nbaa&quot;);
                System.out.println(list);

                Collections.sort(list);
                System.out.println(&quot;after sort:\n&quot; + list);

                Collections.sort(list, Collections.reverseOrder());
                System.out.println(&quot;after reverse sort:\n&quot; + list);

                int index = Collections.binarySearch(list, &quot;cba&quot;);
                System.out.println(&quot;index=&quot; + index);

                // 获取最大值。
                String max = Collections.max(list, new ComparatorByLength());
                System.out.println(&quot;maxLength=&quot; + max);
        }
        public static void main(String[] args) {

                demo_2();
        }　　
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;&lt;img id=&quot;code_img_closed_b0cfc210-1a08-4e97-bca0-9535e87d18a0&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b0cfc210-1a08-4e97-bca0-9535e87d18a0&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b0cfc210-1a08-4e97-bca0-9535e87d18a0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[abcde, cba, aa, zzz, cba, nbaa]
after sort:
[aa, abcde, cba, cba, nbaa, zzz]
after reverse sort:
[zzz, nbaa, cba, cba, abcde, aa]
index&lt;/span&gt;=2&lt;span&gt;
maxLength&lt;/span&gt;=abcde
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;运行结果&lt;/span&gt;&lt;/div&gt;

&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;例3：给非同步的集合加锁，方法太多就不一一列举了，自己查看API。&lt;span&gt;（掌握，面试会问到）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;table summary=&quot;&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;&lt;tbody readability=&quot;6.0764499121265&quot;&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.7037037037037&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;code&gt;static&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a href=&quot;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Collections.html#synchronizedCollection(java.util.Collection)&quot;&gt;synchronizedCollection&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot; href=&quot;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Collection.html&quot;&gt;Collection&lt;/a&gt;&amp;lt;T&amp;gt; c)&lt;/code&gt; &lt;br/&gt;          返回指定 collection 支持的同步（线程安全的）collection。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.4744525547445&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;code&gt;static&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a href=&quot;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Collections.html#synchronizedList(java.util.List)&quot;&gt;synchronizedList&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot; href=&quot;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/List.html&quot;&gt;List&lt;/a&gt;&amp;lt;T&amp;gt; list)&lt;/code&gt; &lt;br/&gt;          返回指定列表支持的同步（线程安全的）列表。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.4&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;code&gt;static&lt;/code&gt;
&lt;table summary=&quot;&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr align=&quot;right&quot; valign=&quot;&quot;&gt;&lt;td nowrap=&quot;nowrap&quot;&gt;&lt;code&gt;&amp;lt;K,V&amp;gt; &lt;a title=&quot;java.util 中的接口&quot; href=&quot;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Map.html&quot;&gt;Map&lt;/a&gt;&amp;lt;K,V&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a href=&quot;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Collections.html#synchronizedMap(java.util.Map)&quot;&gt;synchronizedMap&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot; href=&quot;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Map.html&quot;&gt;Map&lt;/a&gt;&amp;lt;K,V&amp;gt; m)&lt;/code&gt; &lt;br/&gt;          返回由指定映射支持的同步（线程安全的）映射。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.503937007874&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;code&gt;static&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a href=&quot;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Collections.html#synchronizedSet(java.util.Set)&quot;&gt;synchronizedSet&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot; href=&quot;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Set.html&quot;&gt;Set&lt;/a&gt;&amp;lt;T&amp;gt; s)&lt;/code&gt; &lt;br/&gt;          返回指定 set 支持的同步（线程安全的）set。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt; 简单说一下给集合加锁的思想。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
List list = new ArrayList();// 非同步的list。

        list=MyCollections.synList(list);// 返回一个同步的list.

class MyCollections{
                 /**
                 * 返回一个加锁的List
                 * */
                public static  List synList(List list){         
                        return new MyList(list);
                }
                // 内部类
                private class MyList implements List{
                
                private List list;
                
                private static final Object lock = new Object();
                
                MyList(List list){      
                        this.list = list;       
                }
                
                public boolean add(Object obj){
                        synchronized(lock)
                        {
                                return list.add(obj);
                        }
                }
                
                public boolean remove(Object obj){
                        synchronized(lock)
                        {
                                return list.remove(obj);
                        }
                }
        
        }
}              
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;例4：将集合转成数组，Arrays.asList()方法 &lt;span&gt;（掌握）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;应用场景：数组方法有限，需要使用集合中的方法操作数组元素时。&lt;/p&gt;
&lt;p&gt;注意1：&lt;/p&gt;
&lt;p&gt;　　数组的长度是固定的，所以对于集合的增删方法（add()和remove()）是不能使用的。&lt;/p&gt;
&lt;p&gt;Demo：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
    public static void demo_1() {

                String[] arr = { &quot;abc&quot;, &quot;haha&quot;, &quot;xixi&quot; };

                List&amp;lt;String&amp;gt; list = Arrays.asList(arr);
                boolean b1 = list.contains(&quot;xixi&quot;);
                System.out.println(&quot;list contains:&quot; + b1);
                // list.add(&quot;hiahia&quot;);//引发UnsupportedOperationException

                System.out.println(list);
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_0fb9dc43-4f13-47db-b9c3-be4ae2f410f5&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;运行结果&lt;img id=&quot;code_img_opened_0fb9dc43-4f13-47db-b9c3-be4ae2f410f5&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0fb9dc43-4f13-47db-b9c3-be4ae2f410f5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
list contains:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
[abc, haha, xixi]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;注意2：&lt;/p&gt;
&lt;p&gt;　　如果数组中的元素是对象（包装器类型），那么转成集合时，直接将数组中的元素作为集合中的元素进行集合存储。（比如上面那个Demo）&lt;/p&gt;
&lt;p&gt;　　如果数组中的元素是基本数据类型，那么会将该*数组*作为集合中的元素进行存储。（比如下面这个Demo）&lt;/p&gt;
&lt;p&gt;Demo：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
    public static void demo_2() {
                /*
                 * 如果数组中的元素是对象，那么转成集合时，直接将数组中的元素作为集合中的元素进行集合存储。
                 * 
                 * 如果数组中的元素是基本类型数值，那么会将该数组作为集合中的元素进行存储。
                 * 
                 */
                int[] arr = { 31, 11, 51, 61 };

                List&amp;lt;int[]&amp;gt; list = Arrays.asList(arr);

                System.out.println(list);
                System.out.println(&quot;数组的长度为：&quot; + list.size());
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_61ade2ac-2489-46d6-921e-15657f0a3f6e&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;运行结果&lt;img id=&quot;code_img_opened_61ade2ac-2489-46d6-921e-15657f0a3f6e&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_61ade2ac-2489-46d6-921e-15657f0a3f6e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[[I@659e0bfd]
数组的长度为：&lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;由结果可以看出，当数组中的元素时int类型时，集合中存的元素是整个数组，集合的长度为1而不是4。&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;&lt;strong&gt; 例5：将数组转成集合，List.toArray()方法&lt;/strong&gt;&lt;/p&gt;
&lt;table class=&quot;overviewSummary&quot; summary=&quot;Method Summary table, listing methods, and an explanation&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;&lt;tbody readability=&quot;2.8203592814371&quot;&gt;&lt;tr class=&quot;rowColor&quot; readability=&quot;4.04296875&quot;&gt;&lt;td class=&quot;colFirst&quot;&gt;&lt;code&gt;&lt;a title=&quot;class in java.lang&quot; href=&quot;http://tool.oschina.net/uploads/apidocs/jdk_7u4/java/lang/Object.html&quot;&gt;Object&lt;/a&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;colLast&quot; readability=&quot;5.6470588235294&quot;&gt;&lt;code&gt;&lt;strong&gt;&lt;a href=&quot;http://tool.oschina.net/uploads/apidocs/jdk_7u4/java/util/List.html#toArray()&quot;&gt;toArray&lt;/a&gt;&lt;/strong&gt;()&lt;/code&gt;
&lt;p&gt;Returns an array containing all of the elements in this list in proper sequence (from first to last element).&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;altColor&quot; readability=&quot;4.3463414634146&quot;&gt;&lt;td class=&quot;colFirst&quot;&gt;&lt;code&gt;&amp;lt;T&amp;gt; T[]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;colLast&quot; readability=&quot;5.7857142857143&quot;&gt;&lt;code&gt;&lt;strong&gt;&lt;a href=&quot;http://tool.oschina.net/uploads/apidocs/jdk_7u4/java/util/List.html#toArray(T[])&quot;&gt;toArray&lt;/a&gt;&lt;/strong&gt;(T[] a)&lt;/code&gt;
&lt;p&gt;Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt; 应用场景：对集合中的元素操作的方法进行限定，不允许对其进行增删时。&lt;/p&gt;

&lt;p&gt; 注意：toArray方法需要传入一个指定类型的数组，数组的长度如何定义呢？&lt;/p&gt;
&lt;p&gt;　　如果定义的数组长度小于集合的size，那么该方法会创建一个同类型并和集合相同size的数组。&lt;/p&gt;
&lt;p&gt;　　如果定义的数组长度大于集合的size，那么该方法就会使用指定的数组，存储集合中的元素，其他位置默认为null。&lt;/p&gt;
&lt;p&gt;　　所以，一般将数组的长度定义为集合的size。&lt;/p&gt;
&lt;p&gt;Demo：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
public class ToArray {
        public static void main(String[] args) {

                List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;();
                list.add(&quot;abc1&quot;);
                list.add(&quot;abc2&quot;);
                list.add(&quot;abc3&quot;);
                
                String[] arr = list.toArray(new String[list.size()]);           
                System.out.println(Arrays.toString(arr));                               
        }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;例6：foreach语句&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;应用场景：遍历数组或Collection单列集合。&lt;/p&gt;
&lt;p&gt;　　　　　对数组的遍历如果仅仅是获取数组中的元素用foreach可以简化代码，如果要对数组的角标进行操作建议使用传统for循环。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;　&lt;em id=&quot;__mceDel&quot;&gt;格式：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt;for(类型 变量 ：Collection集合&lt;/em&gt;&lt;em&gt;|数组)&lt;br/&gt; {&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt;}&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Demo：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;46&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
public class ForEachDemo {

        public static void main(String[] args) {
                
                // 遍历数组
                int[] arr = { 3, 1, 5, 7, 4 };
                
                for (int i : arr) {
                        System.out.println(i);
                }
                
                //遍历List
                List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;();
                list.add(&quot;abc1&quot;);
                list.add(&quot;abc2&quot;);
                list.add(&quot;abc3&quot;);

                for (String s : list) {
                        System.out.println(s);
                }

                // 遍历map 
                // 可以使用高级for遍历map集合吗？不能直接用，但是将map转成单列的set，就可以用了。
                Map&amp;lt;Integer, String&amp;gt; map = new HashMap&amp;lt;Integer, String&amp;gt;();
                map.put(3, &quot;zhagsan&quot;);
                map.put(1, &quot;wangyi&quot;);
                map.put(7, &quot;wagnwu&quot;);
                map.put(4, &quot;zhagsansan&quot;);

                for (Integer key : map.keySet()) {
                        String value = map.get(key);
                        System.out.println(key + &quot;::&quot; + value);
                }

                for (Map.Entry&amp;lt;Integer, String&amp;gt; me : map.entrySet()) {
                        Integer key = me.getKey();
                        String value = me.getValue();

                        System.out.println(key + &quot;:&quot; + value);
                }

                // 老式的迭代器写法
                Iterator&amp;lt;String&amp;gt; it = list.iterator();
                while (it.hasNext()) {
                        System.out.println(it.next());
                }
        }
}
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 25 Oct 2017 14:02:00 +0000</pubDate>
<dc:creator>Kkky</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kkkky/p/7732680.html</dc:identifier>
</item>
<item>
<title>javascript入门知识点总结(一) - 天宇之游</title>
<link>http://www.cnblogs.com/cwp-bg/p/7732486.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cwp-bg/p/7732486.html</guid>
<description>[unable to retrieve full-text content]学了几天javascript，现总结一下原生javascript的基本知识点。 一、javascript基本知识 变量 定义： 注意：js为弱类型的解释型脚本语言，使用var关键字定义一个变量，数据类型自动判断。 注意：每句代码后可以不写分号，换行即可，习惯上最好加上，增强可读性。 变量类型： nu</description>
<pubDate>Wed, 25 Oct 2017 13:41:00 +0000</pubDate>
<dc:creator>天宇之游</dc:creator>
<dc:identifier>http://www.cnblogs.com/cwp-bg/p/7732486.html</dc:identifier>
</item>
</channel>
</rss>