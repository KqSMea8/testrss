<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>架构师入门：搭建双注册中心的高可用Eureka架构（基于项目实战） - hsm_computer</title>
<link>http://www.cnblogs.com/JavaArchitect/p/8481756.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JavaArchitect/p/8481756.html</guid>
<description>&lt;p&gt;    本文的案例是基于 &lt;a href=&quot;https://www.cnblogs.com/JavaArchitect/p/8471364.html&quot;&gt;&lt;span&gt;架构师入门：搭建基本的Eureka架构（从项目里抽取&lt;/span&gt;）&lt;/a&gt; 改写的。&lt;/p&gt;
&lt;p&gt;    在上文里，我们演示Eureka客户端调用服务的整个流程，在这部分里我们将在架构上有所改进。大家可以想象下，在上文里案例中，Eureka注册中心只部署在一台机器上，这样它一旦出现问题，会导致整个服务调用系统的崩溃，如果这种情况发生在生产环境上，后果是不堪设想的。&lt;/p&gt;
&lt;p&gt;    大家别以为这是危言耸听，在高并发的场景下（比如双十一的并发环境），这种情况发生的可能性不低。针对这种场景，这里我们将部署两台Eureka注册中心，彼此相互注册，以此搭建一个可用性比较高的Eureka集群。&lt;/p&gt;

&lt;h4&gt;1 集群的示意图&lt;/h4&gt;
&lt;p&gt;    在这个集群里，我们将配置2台相互注册的Eureka服务器，这样一来，每台服务器都包含着对方的服务注册信息，相当于双机热备，同时，服务提供者只需向其中的一个注册服务。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201802/1226172-20180228064427530-57972809.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    这样，如果服务器A或B宕机，那么另一台服务器依然可以向外部提供服务列表，服务调用者依然可以据此调用服务。&lt;/p&gt;
&lt;p&gt;    在并发要求更高的环境里，我们甚至可以搭建2台以上的服务器，不过事实上，双机热备的集群能满足大多数的场景，一方面，不是每个系统的并发量都很高，所以双机热备足以满足大多数的并发需求，另一方面，毕竟两台服务器同时宕机的可能性也不大。    &lt;/p&gt;
&lt;h4&gt;&lt;span lang=&quot;EN-US&quot;&gt;2编写相互注册的服务器端代码&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;    这里为了演示方便，我们在一台机器上模拟双服务器的场景，在真实项目里，我们一般是把两个相互注册的服务器安装在两台主机上，因为如果只安装在一台上，那么该服务器发生故障的话，两个服务器都会失效。具体的实现步骤如下。&lt;/p&gt;
&lt;p&gt;    第一步，到C:\WINDOWS\system32\drivers\etc目录里，找到hosts文件，在其中加入两个机器名（其实都是指向本机），代码如下。修改后，需要重启机器。&lt;/p&gt;
&lt;p class=&quot;2&quot;&gt;          127.0.0.1       ekServer1&lt;/p&gt;
&lt;p class=&quot;2&quot;&gt;          127.0.0.1       ekServer2&lt;/p&gt;
&lt;p&gt;    第二步，创建ek-cluster-server项目，这其实是根据上文 &lt;a href=&quot;https://www.cnblogs.com/JavaArchitect/p/8471364.html&quot;&gt;架构师入门：搭建基本的Eureka架构（从项目里抽取）&lt;/a&gt; 里的EurekaBasicDemo-Server项目改写而来，和之前的项目相比，我们只改动了application.yml文件，代码如下。    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;    server:
&lt;/span&gt;2      port: 8888
3&lt;span&gt;    spring:
&lt;/span&gt;4&lt;span&gt;      application:
&lt;/span&gt;5&lt;span&gt;        name: ekServer1  
&lt;/span&gt;6&lt;span&gt;    eureka:
&lt;/span&gt;7&lt;span&gt;      instance:
&lt;/span&gt;8&lt;span&gt;        hostname: ekServer1
&lt;/span&gt;9&lt;span&gt;      client:
&lt;/span&gt;10&lt;span&gt;        serviceUrl:
&lt;/span&gt;11          defaultZone: http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ekServer2:8889/eureka/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    这里的端口号没变，依然是8888，但我们在第5行把项目名修改成ekServer1，在第8行把提供服务的主机名也修改成ekServer1，在第11行，我们指定了本服务所在的rul，这里请注意，我们把ekServer1所在的serverUrl指定到ekServer2的8889端口上，也就是说，这里我们指定ekServer1向ekServer2注册。&lt;/p&gt;
&lt;p&gt;    第三步，由于在真实项目里，我们一般会在两台主机上启动两个Eureka服务，所以这里我们再创建一个Maven类型的项目ek-cluster-server-backup，和之前的ek-cluster-server相比，它们的差别还是在application.yml，代码如下。   &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;    server:
&lt;/span&gt;2      port: 8889
3&lt;span&gt;    spring:
&lt;/span&gt;4&lt;span&gt;      application:
&lt;/span&gt;5&lt;span&gt;        name: ekServer2  
&lt;/span&gt;6&lt;span&gt;    eureka:
&lt;/span&gt;7&lt;span&gt;      instance:
&lt;/span&gt;8&lt;span&gt;        hostname: ekServer2
&lt;/span&gt;9&lt;span&gt;      client:
&lt;/span&gt;10&lt;span&gt;        serviceUrl:
&lt;/span&gt;11          defaultZone: http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ekServer1:8888/eureka/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    这里的配置信息其实和刚才的是对偶的，这里的application名和主机名都叫ekServer2，不过请注意第11行，这里的serviceUrl是注册到ekServer1的8888端口上，这里我们同样指定ekServer2向ekServer1注册。结合上文，至此我们实现了双服务器之间的相互注册。    &lt;/p&gt;
&lt;h4&gt;&lt;span lang=&quot;EN-US&quot;&gt;3 服务提供者只需向其中一台服务器注册&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;    &lt;/span&gt;虽然在集群里搭建了两台服务器，但服务提供者只需向其中的一台注册即可，否则高可用的便利性就会以牺牲代码可维护性为代价了。&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;    这里我们是在ek-cluster-ServiceProvider项目编写服务提供程序，它是根据上文&lt;a href=&quot;https://www.cnblogs.com/JavaArchitect/p/8471364.html&quot;&gt;架构师入门：搭建基本的Eureka架构（从项目里抽取）&lt;/a&gt;里的项目EurekaBasicDemo-ServerProvider改写而来，其中只修改了application.yml部分的代码。&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;    server:
&lt;/span&gt;2      port: 1111
3&lt;span&gt;    spring:
&lt;/span&gt;4&lt;span&gt;      application:
&lt;/span&gt;5&lt;span&gt;        name: sayHello
&lt;/span&gt;6&lt;span&gt;    eureka:  
&lt;/span&gt;7&lt;span&gt;      client:
&lt;/span&gt;8&lt;span&gt;        serviceUrl:
&lt;/span&gt;9          defaultZone: http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ekServer1:8888/eureka/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    我们只改动了第9行的代码，这说明本服务是向ekServer1的8888号端口注册。&lt;/p&gt;
&lt;p&gt;    由于这里两个Eureka服务器是相互注册，所以本服务提供者无需同时向两个服务器注册，因为一旦向ekServer1注册后，该服务器会自动把这个服务提供者的信息复制到ekServer2上。   &lt;/p&gt;
&lt;h4&gt;4修改服务调用者的代码&lt;/h4&gt;
&lt;p&gt;     我们把服务调用者的代码放入ek-cluster-ServiceCaller这个Maven项目里，这是根据之前里的EurekaBasicDemo-ServerCaller项目改写而来。其中我们也只修改application.yml代码。    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;    spring:
&lt;/span&gt;2&lt;span&gt;      application:
&lt;/span&gt;3&lt;span&gt;        name: callHello
&lt;/span&gt;4&lt;span&gt;    server:
&lt;/span&gt;5      port: 8080
6&lt;span&gt;    eureka: 
&lt;/span&gt;7&lt;span&gt;      client:
&lt;/span&gt;8&lt;span&gt;        serviceUrl:
&lt;/span&gt;9          defaultZone: http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ekServer1:8888/eureka/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    改动点还是在第9行上，这里是向ekServer1服务器的8888号端口注册，同理，这里无需向另外一个机器（ekServer2）注册。&lt;/p&gt;
&lt;h4&gt;&lt;span lang=&quot;EN-US&quot;&gt;5正常场景下的运行效果&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;    &lt;/span&gt;按如下次序启动四个项目的Spring Boot服务。&lt;/p&gt;
&lt;p&gt;    第一，     ek-cluster-server（第一个Eureka服务器）。&lt;/p&gt;
&lt;p&gt;    第二，     ek-cluster-server-backup（第二个Eureka服务器）。&lt;/p&gt;
&lt;p&gt;    第三，     ek-cluster-ServiceProvider（服务提供者）。&lt;/p&gt;
&lt;p&gt;    第四，     ek-cluster-ServiceCaller（服务调用者）。&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;    随后，大家能在&lt;a href=&quot;http://ekserver1:8888/&quot;&gt;http://ekserver1:8888/&lt;/a&gt;和&lt;a href=&quot;http://ekserver2:8889/%20%E8%BF%99%E4%B8%A4%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E5%9B%BE3.7&quot;&gt;http://ekserver2:8889/这两个浏览器上看到如下图&lt;/a&gt;所示的四个可用的服务。由于是相互注册，所以它们的内容是一样的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;        &lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201802/1226172-20180228065249890-1488942164.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;    虽然这里我们也可以通过&lt;a href=&quot;http://localhost:8888/&quot;&gt;http://localhost:8888/&lt;/a&gt;和&lt;a href=&quot;http://localhost:8889/&quot;&gt;http://localhost:8889/&lt;/a&gt;看到相同的效果，但不推荐。这是因为，在真实的项目里，Eureka的服务器应该是和开发机器分开的，也就是说它们应该被部署在其它机器上，只不过这里我们为了演示方便，把它们都放在本机。&lt;/p&gt;
&lt;p&gt;    当我们确认服务启动后，可以在浏览器里输入&lt;a href=&quot;http://ekserver1:8080/hello&quot;&gt;http://ekserver1:8080/hello&lt;/a&gt;来查看服务调用的效果，这里其实触发了ek-cluster-ServiceCaller中Controller里的hello方法。&lt;/p&gt;
&lt;p&gt;    和之前一样，这里的输出还是“In Caller, hello Eureka“，这说明双机热备的Eureka架构至少不会影响基本的功能。同样，这里不建议通过&lt;a href=&quot;http://localhost:8080/hello&quot;&gt;http://localhost:8080/hello&lt;/a&gt;来查看运行效果。 &lt;/p&gt;
&lt;h4&gt;&lt;span lang=&quot;EN-US&quot;&gt;6 一台服务器宕机后的运行效果&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;    这里我们可以故意关闭ek-cluster-server服务，以此来模拟一台服务器宕机的情况。&lt;/p&gt;
&lt;p&gt;    关闭后，我们在浏览器里输入&lt;a href=&quot;http://ekserver1:8080/hello&quot;&gt;http://ekserver1:8080/hello&lt;/a&gt;，虽然我们在服务提供者和服务调用者的application.yml里指定的serviceUrl.defaultZone都是&lt;a href=&quot;http://ekserver1:8888/eureka/&quot;&gt;http://ekServer1:8888/eureka/&lt;/a&gt;，但在一台Eureka服务器失效的情况下，我们依然能看到正确的结果，如下图所示。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201802/1226172-20180228065355931-2074986566.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    如果我们在刚才关闭的是ek-cluster-server-backup，让ek-cluster-server运行，这里我们还是能看到同样的效果。也就是说，在这个Eureka双服务器的集群里，一台服务器宕机后，整个服务体系依然可用，这就大大提升的系统的可用性。&lt;/p&gt;

&lt;h4&gt;&lt;span lang=&quot;EN-US&quot;&gt;7 寻求大牛帮助&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;    本人在写完&lt;span&gt;&lt;a href=&quot;http://www.broadview.com.cn/book/4843&quot;&gt;java web轻量级开发面试教程&lt;/a&gt;&lt;/span&gt;后，再想写一本Spring Cloud方面的书，请各位大神告诉我该写哪些方面的内容，或者是提些建议，谢谢了。&lt;/p&gt;
&lt;h4&gt;&lt;span lang=&quot;EN-US&quot;&gt;8 本文代码和版权声明&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;    如果大家想要本案例中代码，请给我站内留言。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;    本人保留本文中文字和代码的版权，转载请注明出处。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;    &lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 27 Feb 2018 22:57:00 +0000</pubDate>
<dc:creator>hsm_computer</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JavaArchitect/p/8481756.html</dc:identifier>
</item>
<item>
<title>定时执行 Job - 每天5分钟玩转 Docker 容器技术（135） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8476883.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8476883.html</guid>
<description>&lt;p&gt;&lt;span&gt;Linux 中有 cron 程序定时执行任务，Kubernetes 的 CronJob 提供了类似的功能，可以定时执行 Job。CronJob 配置文件示例如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201802/775365-20180227062056833-228733506.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;① &lt;/span&gt;&lt;code&gt;&lt;span&gt;batch/v2alpha1&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是当前 CronJob 的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;② 指明当前资源的类型为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;CronJob&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;③ &lt;/span&gt;&lt;code&gt;&lt;span&gt;schedule&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 指定什么时候运行 Job，其格式与 Linux cron 一致。这里 &lt;/span&gt;&lt;code&gt;&lt;span&gt;*/1 * * * *&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的含义是每一分钟启动一次。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;④ &lt;/span&gt;&lt;code&gt;&lt;span&gt;jobTemplate&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 定义 Job 的模板，格式与前面 Job 一致。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;接下来通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl apply&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 创建 CronJob。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201802/775365-20180227062113446-1570050030.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;失败了。这是因为 Kubernetes 默认没有 enable CronJob 功能，需要在 kube-apiserver 中加入这个功能。方法很简单，修改 kube-apiserver 的配置文件 /etc/kubernetes/manifests/kube-apiserver.yaml：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201802/775365-20180227062131334-1206364333.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;kube-apiserver 本身也是个 Pod，在启动参数中加上 &lt;/span&gt;&lt;code&gt;&lt;span&gt;--runtime-config=batch/v2alpha1=true&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 即可。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后重启 kubelet 服务：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;systemctl restart kubelet.service&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;kubelet 会重启 kube-apiserver Pod。通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl api-versions&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 确认 kube-apiserver 现在已经支持 &lt;/span&gt;&lt;code&gt;&lt;span&gt;batch/v2alpha1&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201802/775365-20180227062145706-525760204.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再次创建CronJob：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201802/775365-20180227062201050-900336020.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;这次成功了。通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl get cronjob&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 查看 CronJob 的状态：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201802/775365-20180227062210527-1695874427.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;等待几分钟，然后通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl get jobs&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 查看 Job 的执行情况：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201802/775365-20180227062223205-1802722793.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;可以看到每隔一分钟就会启动一个 Job。执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl logs&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 可查看某个 Job 的运行日志：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201802/775365-20180227062236472-259568615.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;运行容器化应用是 Kubernetes 最重要的核心功能。为满足不同的业务需要，Kubernetes 提供了多种 Controller，包括 Deployment、DaemonSet、Job、CronJob 等。本章我们通过实践详细学习了这些 Controller，并讨论了它们的特性和应用场景。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;书籍：&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 27 Feb 2018 21:48:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8476883.html</dc:identifier>
</item>
<item>
<title>JavaScript数据迭代方法差别 - leung_blog</title>
<link>http://www.cnblogs.com/leungUwah/p/8481681.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leungUwah/p/8481681.html</guid>
<description>&lt;p&gt;js有很多总接待方法，ES6之后又新增了几个；&lt;/p&gt;
&lt;p&gt;这里主要讨论数组迭代遍历的方法所以不会细讲for...in...&lt;/p&gt;
&lt;h3&gt;ES5、ES6数组迭代方法有：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;forEach&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;some&lt;/li&gt;
&lt;li&gt;every&lt;/li&gt;
&lt;li&gt;reduce/reduceRight&lt;/li&gt;
&lt;li&gt;find/findIndex   (ES6新增)&lt;/li&gt;
&lt;li&gt;for...of...  (ES6新增)&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;forEach&lt;/h2&gt;
&lt;p&gt;forEach对数组的每个元素执行一次提供的函数。forEach方法无法中断执行总是会将所有成员遍历完，如果希望符合某种条件时就中断的话遍历时要使用传统for循环，forEach无法 使用break,continue跳出循环，使用return时效果和在for循环中使用continue一样。最为重要的一点是可以添加第二个参数，为一个数组而且回调函数中的this会指向这个数组而如果没有第二个参数则this会指向window，严格模式下是undefined。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; arr = [1, 2, 3&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; arr.forEach(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (element, index, array) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;  console.log(element, index, array)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;})
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;output&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 1 0 [1, 2, 3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 2 1 [1, 2, 3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 3 2 [1, 2, 3]
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;map&lt;/h2&gt;
&lt;p&gt;map方法的作用就是将原数组按照一定的规则映射成一个新的数组。再将其返回，是返回一个新的数组，而不是将原数组直接改变。使用方法和参数都跟forEach相似。值得注意的是map需要有返回值，&lt;/p&gt;
&lt;p&gt;没有的话某些情况下返回数组中元素为undefined&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; data = [1, 2, 3&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; arrayOfSquares = data.map(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (element) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; element *&lt;span&gt; element;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; console.log(arrayOfSquares); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;[1, 4, 9]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;filter&lt;/h2&gt;
&lt;p&gt;filter返回过滤后的新数组。用法和参数跟map差不多。与map方法不同的是，filter方法的callback函数需要返回弱等于&lt;code&gt;true&lt;/code&gt;或&lt;code&gt;false&lt;/code&gt;的值。如果为&lt;code&gt;true&lt;/code&gt;，则通过，否则，不通过。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; arr = [0, 1, 2, 3&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; newArr = arr.filter(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (element, index, array) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt;&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;})
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; newArr2 = arr.filter(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (element, index, array) {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; e&amp;gt;=2&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;})
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; console.log(newArr); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; [1, 2, 3]&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; console.log(newArr2); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; [2, 3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;some&lt;/h2&gt;
&lt;p&gt;some方法是只要数组中的&lt;strong&gt;某个值&lt;/strong&gt;，符合你给定的判断条件就返回&lt;code&gt;true&lt;/code&gt;；否则，返回&lt;code&gt;false&lt;/code&gt;。用法和参数跟前面的方法一样。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; isBigEnough(element, index, array) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; element &amp;gt;= 4&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; passed = [1, 2, 3&lt;span&gt;].some(isBigEnough);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; passed2 = [1, 2, 3, 4&lt;span&gt;].some(isBigEnough);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; console.log(passed); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; console.log(passed2); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;every&lt;/h2&gt;
&lt;p&gt;every方法与some方法相对，every方法是数组中的&lt;strong&gt;所有值都符合&lt;/strong&gt;你给定的判断条件的时候才会返回&lt;code&gt;true&lt;/code&gt;，否则就返回&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; isBigEnough(element, index, array) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; element &amp;gt;= 3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; passed = [2, 3, 4&lt;span&gt;].every(isBigEnough);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; passed2 = [3, 4, 5&lt;span&gt;].every(isBigEnough);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; console.log(passed); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; console.log(passed2); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;reduce/reduceRight&lt;/h2&gt;
&lt;p&gt;reduce/reduceRight相对比较复杂，其接收两个参数，第一个是回调，第二个是初始值初始值不写的话默认就是回调中的第一个参数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
array.reduce(callback,[initialValue])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中&lt;code&gt;callback&lt;/code&gt;可以依次接受四个参数：&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;accumulator&lt;/code&gt;上一次调用回调返回的值，或者是提供的初始值（&lt;code&gt;initialValue&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;currentValue&lt;/code&gt;数组中正在处理的元素&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;currentIndex&lt;/code&gt;数组中正在处理的元素索引，如果提供了&lt;code&gt;initialValue&lt;/code&gt; ，从0开始；否则从1开始。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;array&lt;/code&gt;数组对象本身&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; sum = [0,1,2,3,4].reduce(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(accumulator, currentValue, currentIndex, array){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;  console.log(accumulator, currentValue, currentIndex, array)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; accumulator +&lt;span&gt; currentValue;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;console.log(sum);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; output&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 0 1 1 [0, 1, 2, 3, 4&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 1 2 2 [0, 1, 2, 3, 4&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 3 3 3 [0, 1, 2, 3, 4&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 6 4 4 [0, 1, 2, 3, 4&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;传入第二个参数的时候&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; sum = [0,1,2,3,4].reduce(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(accumulator, currentValue, currentIndex, array){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;  console.log(accumulator, currentValue, currentIndex, array)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; accumulator +&lt;span&gt; currentValue;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; }, 10&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;console.log(sum);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; output&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 10 0 0 [0, 1, 2, 3, 4&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 10 1 1 [0, 1, 2, 3, 4&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 11 2 2 [0, 1, 2, 3, 4&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 13 3 3 [0, 1, 2, 3, 4&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 16 4 4 [0, 1, 2, 3, 4&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 20
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的情况可以看出：不提供&lt;code&gt;initialValue&lt;/code&gt; ，reduce方法会从索引1的地方开始执行&lt;code&gt;callback&lt;/code&gt;方法，跳过第一个索引。提供 &lt;code&gt;initialValue&lt;/code&gt;，从索引0开始。&lt;br/&gt;同时，是否提供&lt;code&gt;initialValue&lt;/code&gt;对于回调函数第一次执行时，&lt;code&gt;accumulator&lt;/code&gt;和&lt;code&gt;currentValue&lt;/code&gt;的取值有两种情况：调用reduce时提供&lt;code&gt;initialValue&lt;/code&gt;，&lt;code&gt;accumulator&lt;/code&gt;取值为&lt;code&gt;initialValue&lt;/code&gt;，&lt;code&gt;currentValue&lt;/code&gt;取数组中的第一个值；没有提供&lt;code&gt;initialValue&lt;/code&gt; ，&lt;code&gt;accumulator&lt;/code&gt;取数组中的第一个值，&lt;code&gt;currentValue&lt;/code&gt;取数组中的第二个值。&lt;/p&gt;
&lt;p&gt;reduceRight与reduce类似，不同之处在于它是从最后一个值开始计算的。&lt;/p&gt;
&lt;h2&gt;find / findIndex&lt;/h2&gt;
&lt;p&gt;find方法用于找出第一个符合条件的数组成员。它的参数跟forEach方法是一样的；所有数组成员依次执行回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。findIndex方法和find相似；不过它返回数组中符合条件的元素的索引。如果所有成员都不符合条件，则返回-1。&lt;/p&gt;
&lt;h3&gt;find&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; value = [1, 5, 10, 15].find(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(element, index, array) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; element &amp;gt; 9&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; value2 = [1, 5, 10, 15].find(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(element, index, array) {
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; element &amp;gt; 20&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; 
&lt;span&gt;8&lt;/span&gt; console.log(value); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; console.log(value2); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;findIndex&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; value = [1, 5, 10, 15].findIndex(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(element, index, array) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; element &amp;gt; 9&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; value2 = [1, 5, 10, 15].findIndex(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(element, index, array) {
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; element &amp;gt; 20&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; 
&lt;span&gt;8&lt;/span&gt; console.log(value); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; console.log(value2); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;for...of...&lt;/h2&gt;
&lt;p&gt;for...of...是ES6新增的一个循环遍历方式用法跟for...in...差不多但是这个常用于数组操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; arr = [0, 1, 2, 3&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(let i of arr) {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     console.log(i*2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;for...of...也可以遍历字符串&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; str = &quot;string&quot;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(let s of str) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    console.log(s)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; s&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; t&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; r&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; n&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上就是常见一些数据(基本上是数组)迭代遍历的一些API，有不对的欢迎大家指正&lt;/p&gt;

</description>
<pubDate>Tue, 27 Feb 2018 16:30:00 +0000</pubDate>
<dc:creator>leung_blog</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leungUwah/p/8481681.html</dc:identifier>
</item>
<item>
<title>Android －传统蓝牙通信聊天 - demo例子集</title>
<link>http://www.cnblogs.com/demodashi/p/8481659.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/demodashi/p/8481659.html</guid>
<description>&lt;div class=&quot;content markitup-box&quot;&gt;
&lt;h4&gt;代码下载：&lt;a href=&quot;http://www.demodashi.com/demo/10676.html&quot;&gt;http://www.demodashi.com/demo/10676.html&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;p&gt;原文地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/vnanyesheshou/article/details/51554852&quot; target=&quot;_blank&quot;&gt;Android 蓝牙开发（一）蓝牙通信&lt;/a&gt; CSDN&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/7094fb22b53b&quot; target=&quot;_blank&quot;&gt;Android 蓝牙开发（一）蓝牙通信&lt;/a&gt; 简书&lt;/p&gt;
&lt;h4&gt;一、准备工作&lt;/h4&gt;

&lt;p&gt;开发环境：&lt;/p&gt;
&lt;p&gt;jdk1.8&lt;/p&gt;
&lt;p&gt;Eclipse Luna Service Release 1 (4.4.1)&lt;/p&gt;
&lt;p&gt;运行环境：&lt;/p&gt;
&lt;p&gt;华为荣耀6（Android4.4）、华为p9（Android7.0）&lt;/p&gt;
&lt;p&gt;实现功能：&lt;/p&gt;
&lt;h4&gt;二、代码结构&lt;/h4&gt;
&lt;p&gt;代码包里面，有两个部分，一个是源码，一个是V7支持包。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;1500544541436065086.png&quot; src=&quot;http://www.demodashi.com/ueditor/jsp/upload/image/20170720/1500544541436065086.png&quot; alt=&quot;屏幕快照 2017-07-20 下午5.54.54.png&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;三、程序实现-蓝牙通信&lt;/h4&gt;


&lt;p&gt;随着可穿戴设备的流行，研究蓝牙是必不可少的一门技术了。&lt;/p&gt;
&lt;p&gt;总结了下蓝牙开发使用的一些东西分享一下。&lt;/p&gt;

&lt;p&gt;蓝牙权限&lt;/p&gt;
&lt;p&gt;首先需要AndroidManifest.xml文件中添加操作蓝牙的权限。&lt;/p&gt;
&lt;pre class=&quot;brush:xml;gutter:true&quot;&gt;
&amp;lt;uses-permissionandroid:name=&quot;Android.permission.BLUETOOTH&quot; /&amp;gt;
//允许程序连接到已配对的蓝牙设备。
&amp;lt;uses-permissionandroid:name=&quot;android.permission.BLUETOOTH_ADMIN&quot; /&amp;gt;
//允许程序发现和配对蓝牙设备。
&lt;/pre&gt;

&lt;p&gt;BluetoothAdapter&lt;/p&gt;
&lt;p&gt;操作蓝牙主要用到的类 BluetoothAdapter类，使用时导包&lt;br/&gt;import android.bluetooth.BluetoothAdapter;&lt;br/&gt;源码具体位置frameworks/base/core/&lt;a class=&quot;replace_word&quot; title=&quot;Java 知识库&quot; href=&quot;http://lib.csdn.net/base/java&quot; target=&quot;_blank&quot;&gt;Java&lt;/a&gt;/android/bluetooth/BluetoothAdapter.java&lt;/p&gt;&lt;p&gt;BluetoothAdapter 代表本地设备的蓝牙适配器。该BluetoothAdapter可以执行基本的蓝牙任务，例如启&lt;br/&gt;动设备发现，查询配对的设备列表，使用已知的MAC地址实例化一个BluetoothDevice类，并创建一个&lt;br/&gt;BluetoothServerSocket监听来自其他设备的连接请求。&lt;/p&gt;
&lt;p&gt;获取蓝牙适配器&lt;/p&gt;
&lt;pre class=&quot;brush:java;gutter:true&quot;&gt;
BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
&lt;/pre&gt;
&lt;p&gt;开启蓝牙&lt;/p&gt;
&lt;pre class=&quot;brush:java;gutter:true&quot;&gt;
if(!mBluetoothAdapter.isEnabled()){  
//弹出对话框提示用户是后打开  
Intent enabler = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);  
startActivityForResult(enabler, REQUEST_ENABLE);  
      //不做提示，直接打开，不建议用下面的方法，有的手机会有问题。  
      // mBluetoothAdapter.enable();  
}
&lt;/pre&gt;

&lt;p&gt;获取本地蓝牙信息&lt;/p&gt;
&lt;pre class=&quot;brush:java;gutter:true&quot;&gt;
//获取本机蓝牙名称  
String name = mBluetoothAdapter.getName();  
//获取本机蓝牙地址  
String address = mBluetoothAdapter.getAddress();  
Log.d(TAG,&quot;bluetooth name =&quot;+name+&quot; address =&quot;+address);  
//获取已配对蓝牙设备  
Set&amp;lt;BluetoothDevice&amp;gt; devices = mBluetoothAdapter.getBondedDevices();  
Log.d(TAG, &quot;bonded device size =&quot;+devices.size());  
for(BluetoothDevice bonddevice:devices){  
    Log.d(TAG, &quot;bonded device name =&quot;+bonddevice.getName()+&quot; address&quot;+bonddevice.getAddress());  
}
&lt;/pre&gt;
&lt;p&gt;搜索设备&lt;/p&gt;
&lt;pre class=&quot;brush:java;gutter:true&quot;&gt;
mBluetoothAdapter.startDiscovery();
&lt;/pre&gt;

&lt;p&gt;停止搜索&lt;/p&gt;
&lt;pre class=&quot;brush:java;gutter:true&quot;&gt;
mBluetoothAdapter.cancelDiscovery();
&lt;/pre&gt;
&lt;p&gt;搜索蓝牙设备，该过程是异步的，通过下面注册广播接受者，可以监听是否搜到设备。&lt;/p&gt;
&lt;pre class=&quot;brush:java;gutter:true&quot;&gt;
IntentFilter filter = new IntentFilter();  
//发现设备  
filter.addAction(BluetoothDevice.ACTION_FOUND);  
//设备连接状态改变  
filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED);  
//蓝牙设备状态改变  
filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);  
registerReceiver(mBluetoothReceiver, filter);
&lt;/pre&gt;

&lt;p&gt;监听扫描结果&lt;/p&gt;
&lt;p&gt;通过广播接收者查看扫描到的蓝牙设备，每扫描到一个设备，系统都会发送此广播（BluetoothDevice.ACTION_FOUNDE）。其中参数intent可以获取蓝牙设备BluetoothDevice。&lt;/p&gt;
&lt;p&gt;该demo中是连接指定名称的蓝牙设备，BLUETOOTH_NAME为&quot;Galaxy Nexus&quot;,如果扫描不到，记得改这个蓝牙名称。&lt;/p&gt;
&lt;pre class=&quot;brush:java;gutter:true&quot;&gt;
private BroadcastReceiver mBluetoothReceiver = new BroadcastReceiver(){  
        @Override  
        public void onReceive(Context context, Intent intent) {  
            String action = intent.getAction();  
            Log.d(TAG,&quot;mBluetoothReceiver action =&quot;+action);  
            if(BluetoothDevice.ACTION_FOUND.equals(action)){//每扫描到一个设备，系统都会发送此广播。  
                //获取蓝牙设备  
                BluetoothDevice scanDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);  
                if(scanDevice == null || scanDevice.getName() == null) return;  
                Log.d(TAG, &quot;name=&quot;+scanDevice.getName()+&quot;address=&quot;+scanDevice.getAddress());  
                //蓝牙设备名称  
                String name = scanDevice.getName();  
                if(name != null &amp;amp;&amp;amp; name.equals(BLUETOOTH_NAME)){  
                    mBluetoothAdapter.cancelDiscovery();  
                    //取消扫描  
                    mProgressDialog.setTitle(getResources().getString(R.string.progress_connecting));                   //连接到设备。  
                    mBlthChatUtil.connect(scanDevice);  
                }  
            }else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)){  
  
            }
        }          
};
&lt;/pre&gt;


&lt;p&gt;设置蓝牙可见性&lt;/p&gt;
&lt;p&gt;有时候扫描不到某设备，这是因为该设备对外不可见或者距离远，需要设备该蓝牙可见，这样该才能被搜索到。&lt;/p&gt;
&lt;p&gt;可见时间默认值为120s，最多可设置300。&lt;/p&gt;

&lt;pre class=&quot;brush:java;gutter:true&quot;&gt;
if (mBluetoothAdapter.isEnabled()) {  
    if (mBluetoothAdapter.getScanMode() !=   
            BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE) {  
        Intent discoverableIntent = new Intent(  
                BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);  
        discoverableIntent.putExtra(  
                BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 120);  
        startActivity(discoverableIntent);  
    }  
}
&lt;/pre&gt;




&lt;p&gt;android 蓝牙之间可以通过SDP协议建立连接进行通信，通信方式类似于平常使用socket。&lt;/p&gt;
&lt;p&gt;首先创建BluetoothServerSocket ，BluetoothAdapter中提供了两种创建BluetoothServerSocket 方式，如下图所示为创建安全的RFCOMM Bluetooth socket，该连接是安全的需要进行配对。而通过listenUsingInsecureRfcommWithServiceRecord创建的RFCOMM Bluetooth socket是不安全的，连接时不需要进行配对。&lt;/p&gt;
&lt;p&gt;其中的uuid需要服务器端和客户端进行统一。&lt;/p&gt;
&lt;pre class=&quot;brush:java;gutter:true&quot;&gt;
private class AcceptThread extends Thread {  
        // 本地服务器套接字  
        private final BluetoothServerSocket mServerSocket;  
        public AcceptThread() {           
            BluetoothServerSocket tmp = null;  
            // 创建一个新的侦听服务器套接字  
            try {  
                tmp = mAdapter.listenUsingRfcommWithServiceRecord(  
                        SERVICE_NAME, SERVICE_UUID);  
                //tmp = mAdapter.listenUsingInsecureRfcommWithServiceRecord(SERVICE_NAME, SERVICE_UUID);  
            } catch (IOException e) {  
                Log.e(TAG, &quot;listen() failed&quot;, e);  
            }  
            mServerSocket = tmp;  
        }  
  
        public void run() {  
            BluetoothSocket socket = null;  
            // 循环，直到连接成功  
            while (mState != STATE_CONNECTED) {  
                try {  
                    // 这是一个阻塞调用 返回成功的连接  
                    // mServerSocket.close()在另一个线程中调用，可以中止该阻塞  
                    socket = mServerSocket.accept();  
                } catch (IOException e) {  
                    Log.e(TAG, &quot;accept() failed&quot;, e);  
                    break;  
                }  
                // 如果连接被接受  
                if (socket != null) {  
                    synchronized (BluetoothChatUtil.this) {  
                        switch (mState) {  
                        case STATE_LISTEN:  
                        case STATE_CONNECTING:  
                            // 正常情况。启动ConnectedThread。  
                            connected(socket, socket.getRemoteDevice());  
                            break;  
                        case STATE_NONE:  
                        case STATE_CONNECTED:  
                            // 没有准备或已连接。新连接终止。  
                            try {  
                                socket.close();  
                            } catch (IOException e) {  
                                Log.e(TAG, &quot;Could not close unwanted socket&quot;, e);  
                            }  
                            break;  
                        }  
                    }  
                }  
            }  
            if (D) Log.i(TAG, &quot;END mAcceptThread&quot;);  
        }  
  
        public void cancel() {  
            if (D) Log.d(TAG, &quot;cancel &quot; + this);  
            try {  
                mServerSocket.close();  
            } catch (IOException e) {  
                Log.e(TAG, &quot;close() of server failed&quot;, e);  
            }  
        }  
}
&lt;/pre&gt;
&lt;p&gt;mServerSocket通过accept()等待客户端的连接（阻塞），直到连接成功或失败。&lt;/p&gt;



&lt;p&gt;客户端主要用来创建RFCOMM socket，并连接服务端。&lt;/p&gt;
&lt;p&gt;先扫描周围的蓝牙设备，如果扫描到指定设备则进行连接。mBlthChatUtil.connect(scanDevice)连接到设备，&lt;/p&gt;
&lt;p&gt;连接过程主要在ConnectThread线程中进行，先创建socket，方式有两种，&lt;/p&gt;
&lt;p&gt;如下代码中是安全的（createRfcommSocketToServiceRecord）。另一种不安全连接对应的函数是createInsecureRfcommSocketToServiceRecord。&lt;/p&gt;
&lt;pre class=&quot;brush:java;gutter:true&quot;&gt;
private class ConnectThread extends Thread {  
        private BluetoothSocket mmSocket;  
        private final BluetoothDevice mmDevice;  
        public ConnectThread(BluetoothDevice device) {  
            mmDevice = device;  
            BluetoothSocket tmp = null;  
            // 得到一个bluetoothsocket  
            try {  
                mmSocket = device.createRfcommSocketToServiceRecord  
                        (SERVICE_UUID);  
            } catch (IOException e) {  
                Log.e(TAG, &quot;create() failed&quot;, e);  
                mmSocket = null;  
            }  
        }  
  
        public void run() {  
            Log.i(TAG, &quot;BEGIN mConnectThread&quot;);  
            try {   
                // socket 连接,该调用会阻塞，直到连接成功或失败  
                mmSocket.connect();  
            } catch (IOException e) {  
                connectionFailed();  
                try {//关闭这个socket  
                    mmSocket.close();  
                } catch (IOException e2) {  
                    e2.printStackTrace();  
                }  
                return;  
            }  
            // 启动连接线程  
            connected(mmSocket, mmDevice);  
        }  
  
        public void cancel() {  
            try {  
                mmSocket.close();  
            } catch (IOException e) {  
                Log.e(TAG, &quot;close() of connect socket failed&quot;, e);  
            }  
        }  
}
&lt;/pre&gt;
&lt;p&gt;接着客户端socket主动连接服务端。连接过程中会自动进行配对，需要双方同意才可以连接成功。&lt;/p&gt;


&lt;p&gt;客户端与服务端连接成功后都会调用connected(mmSocket, mmDevice)，创建一个ConnectedThread线程（）。&lt;/p&gt;
&lt;p&gt;该线程主要用来接收和发送数据。客户端和服务端处理方式一样。该线程通过socket获得输入输出流。&lt;/p&gt;

&lt;p&gt;private InputStream mmInStream = socket.getInputStream();&lt;/p&gt;
&lt;p&gt;private OutputStream mmOutStream =socket.getOutputStream();&lt;/p&gt;
&lt;p&gt;发送数据&lt;/p&gt;
&lt;pre class=&quot;brush:java;gutter:true&quot;&gt;
public void write(byte[] buffer) {  
    try {  
        mmOutStream.write(buffer);  
        // 分享发送的信息到Activity  
        mHandler.obtainMessage(MESSAGE_WRITE, -1, -1, buffer)  
                .sendToTarget();  
    } catch (IOException e) {  
        Log.e(TAG, &quot;Exception during write&quot;, e);  
    }  
}
&lt;/pre&gt;

&lt;p&gt;接收数据&lt;/p&gt;

&lt;p&gt;线程循环进行接收数据。&lt;/p&gt;
&lt;pre class=&quot;brush:java;gutter:true&quot;&gt;
public void run() {  
    // 监听输入流  
    while (true) {  
        try {  
            byte[] buffer = new byte[1024];  
            // 读取输入流  
            int bytes = mmInStream.read(buffer);  
            // 发送获得的字节的ui activity  
            Message msg = mHandler.obtainMessage(MESSAGE_READ);  
            Bundle bundle = new Bundle();  
            bundle.putByteArray(READ_MSG, buffer);  
            msg.setData(bundle);  
            mHandler.sendMessage(msg);            
        } catch (IOException e) {  
            Log.e(TAG, &quot;disconnected&quot;, e);  
                connectionLost();  
                break;  
            }  
        }  
}
&lt;/pre&gt;

&lt;h4&gt;四、运行效果&lt;/h4&gt;
&lt;p&gt;1、运行，右键项目：Run as －》Android Application （备注：Eclipse需要配置Android开发环境）&lt;/p&gt;
&lt;p&gt;2、运行效果如下：&lt;/p&gt;

&lt;p&gt;客户端&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;1500550538898087682.jpeg&quot; src=&quot;http://www.demodashi.com/ueditor/jsp/upload/image/20170720/1500550538898087682.jpeg&quot; alt=&quot;1500550538898087682.jpeg&quot; width=&quot;388&quot; height=&quot;696&quot; border=&quot;0&quot; vspace=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;服务端&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;1500550585563054399.png&quot; src=&quot;http://www.demodashi.com/ueditor/jsp/upload/image/20170720/1500550585563054399.png&quot; alt=&quot;Screenshot_2017-07-20-19-26-57.png&quot; width=&quot;386&quot; height=&quot;677&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;content markitup-box&quot;&gt;
&lt;h4&gt;代码下载：&lt;a href=&quot;http://www.demodashi.com/demo/10676.html&quot;&gt;http://www.demodashi.com/demo/10676.html&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h4&gt;注：本文著作权归作者，由demo大师发表，拒绝转载，转载需要作者授权&lt;/h4&gt;
&lt;/p&gt;
</description>
<pubDate>Tue, 27 Feb 2018 16:16:00 +0000</pubDate>
<dc:creator>demo例子集</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/demodashi/p/8481659.html</dc:identifier>
</item>
<item>
<title>EntityFramework Core 2.0执行原始查询如何防止SQL注入？ - Jeffcky</title>
<link>http://www.cnblogs.com/CreateMyself/p/8481331.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CreateMyself/p/8481331.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;接下来一段时间我们来讲讲EntityFramework Core基础，精简的内容，深入浅出，希望为想学习EntityFramework Core的童鞋提供一点帮助。&lt;/p&gt;
&lt;h2&gt;EntityFramework Core执行原始查询&lt;/h2&gt;
&lt;p&gt;在EntityFramework Core中执行原始查询我们借助FromSql来实现，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; orders =&lt;span&gt; context.Orders
                    .FromSql(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT * FROM dbo.Orders&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                    .ToList();
            }    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227223221457-1141883474.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是最简单且不带任何条件的查询方式，接下来我们看看有条件的查询我们应该如何查询，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; parameters = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlParameter[]
                {
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(){ ParameterName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@p0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Value = &lt;span&gt;1&lt;/span&gt;, SqlDbType =&lt;span&gt; System.Data.SqlDbType.Int }
                };

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; orders =&lt;span&gt; context.Orders
                    .FromSql(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT * FROM dbo.Orders WHERE Id = @p0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, parameters)
                    .ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227223741828-1137580802.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;除了以上利用参数化查询方式外，若我们还借助string.format或者C# 6.0出现的新特性字符串插值即美元符号$来查询最终生成的SQL是否仍然是以参数化查询呢，我们来看看。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; orders =&lt;span&gt; context.Orders
                    .FromSql($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT * FROM dbo.Orders WHERE Id = {1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                    .ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227224128787-269227215.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由上我们看出即使利用字符串插值最终仍然翻译成参数化SQL。接下来我们再来看看字符串拼接查询方式。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; searchString = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blogs =&lt;span&gt; context.Blogs
                    .FromSql(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT Id, Name, CreatedTime, Url, ModifiedTime FROM dbo.Blogs &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +
                    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WHERE Name = '&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + searchString + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                    .ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227224743891-1467140498.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时我们通过控制台打印能够看出最终生成的SQL语句是以字符串形式展示，在EntityFramework Core 2.0+上执行原始查询的APi即FromSql有重载方法，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IQueryable&amp;lt;TEntity&amp;gt; FromSql&amp;lt;TEntity&amp;gt;([NotNullAttribute] &lt;span&gt;this&lt;/span&gt; IQueryable&amp;lt;TEntity&amp;gt; source, [NotNullAttribute][NotParameterized] FormattableString sql) &lt;span&gt;where&lt;/span&gt; TEntity : &lt;span&gt;class&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们利用上述FromSql重载方法传递字符串参数，同时在查询字符串中添加对数据库表操作，验证EF Core是否能防止SQL注入。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; searchString = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky; DROP TABLE dbo.Blogs;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blogs =&lt;span&gt; context.Blogs
                    .FromSql(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT Id, Name, Url, CreatedTime, ModifiedTime FROM dbo.Blogs &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                    + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; WHERE Name = {0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, searchString)
                    .ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227225342266-1296989122.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;经过验证您会发现上述我们注入上述Blogs表的SQL语句，最终表将不会删除。我们看到当未利用重载方法进行字符串拼接，此时参数将以字符串形式展示，这种情况极易引起SQL注入问题。C# 6.0引入了字符串插值（String Interpolation），此特性能够允许C#表达式直接嵌入到字符串文本中，为运行时构建字符串提供了一个很好的方法。在EF Core 2.0特性中，对FromSql和ExecuteSqlCommand方法都添加了对插入字符串的特殊支持。此新特性的支持允许以安全的方式使用C＃字符串插值。即防止在运行时动态构建SQL时可能发生SQL注入问题。&lt;/p&gt;
&lt;p&gt;是不是到了这里就这样结束了呢？显然不是这样，接下来咱们再来看看另外一种情况，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; author = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky Wang&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; query = $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT * FROM Blogs WHERE Name = {author}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blogs =&lt;span&gt; context.Blogs.FromSql(query).ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227230419562-1716297346.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227230553142-494571917.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样的语法错误显而易见，我们需要用单引号将变量包含起来才能避免语法错误，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; author = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky Wang&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; query = $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT * FROM Blogs WHERE Name = &lt;span&gt;'{author}'&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blogs =&lt;span&gt; context.Blogs.FromSql(query).ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述情况下，EF Core依然将执行明文字符串而不是作为变量查询并未以参数化执行。如果变量包含恶意字符串，那么EF Core将根本无法防范并保护SQL。因此，如果我们需要通过EF Core执行原始T-SQL，则应使用参数化SQL或利用FormatttableString，FromSql有两个重载，其一为通过FormatttableString可格式化字符串参数，其二为原始字符串且可传递查询参数。所以上述错误，我们可利用FormatttableString来执行，同时在利用FromSql方法查询过后我们仍可以继续进行查询，比如如下关联查询Posts表数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; searchString = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky Wang&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                FormattableString sql &lt;/span&gt;= &lt;span&gt;$&lt;/span&gt;&lt;span&gt;&lt;span&gt;@&lt;/span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT Id, Name, Url, CreatedTime, ModifiedTime FROM dbo.Blogs WHERE Name = {searchString}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blogs =&lt;span&gt; context.Blogs
                    .FromSql&lt;/span&gt;&lt;span&gt;(sql)
                    .Include(d &lt;/span&gt;=&amp;gt;&lt;span&gt; d.Posts)
                    .ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180227232807576-425298006.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过【&lt;span&gt;$@&lt;/span&gt;】并利用FormattableString重载或者传递参数化变量来防止SQL注入问题，希望您发现EF Core 2.0中这个新特性，同时不要忘记它也用来承担更大的责任，由于SQL注入攻击，不会让我们所写代码存在漏洞。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;本节我们详细讲解了EF Core 2.0中执行原始查询如何防止SQL注入问题，精简的内容，简单的讲解，希望能帮助到您。我们明天再会。&lt;/p&gt;
</description>
<pubDate>Tue, 27 Feb 2018 15:32:00 +0000</pubDate>
<dc:creator>Jeffcky</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CreateMyself/p/8481331.html</dc:identifier>
</item>
<item>
<title>Effective Java 第三版——33. 优先考虑类型安全的异构容器 - 林本托</title>
<link>http://www.cnblogs.com/IcanFixIt/p/8481317.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/IcanFixIt/p/8481317.html</guid>
<description>&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Tips&lt;br/&gt;《Effective Java, Third Edition》一书英文版已经出版，这本书的第二版想必很多人都读过，号称Java四大名著之一，不过第二版2009年出版，到现在已经将近8年的时间，但随着Java 6，7，8，甚至9的发布，Java语言发生了深刻的变化。&lt;br/&gt;在这里第一时间翻译成中文版。供大家学习分享之用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4366140-ca5216df5c1029f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Effective Java, Third Edition&quot;/&gt;&lt;/p&gt;

&lt;p&gt;泛型的常见用法包括集合，如&lt;code&gt;Set &amp;lt;E&amp;gt;&lt;/code&gt;和&lt;code&gt;Map &amp;lt;K，V&amp;gt;&lt;/code&gt;和单个元素容器，如&lt;code&gt;ThreadLocal &amp;lt;T&amp;gt;&lt;/code&gt;和&lt;code&gt;AtomicReference &amp;lt;T&amp;gt;&lt;/code&gt;。 在所有这些用途中，它都是参数化的容器。 这限制了每个容器只能有固定数量的类型参数。 通常这正是你想要的。 一个&lt;code&gt;Set&lt;/code&gt;有单一的类型参数，表示它的元素类型; 一个&lt;code&gt;Map&lt;/code&gt;有两个，代表它的键和值的类型；等等。&lt;/p&gt;
&lt;p&gt;然而有时候，你需要更多的灵活性。 例如，数据库一行记录可以具有任意多列，并且能够以类型安全的方式访问它们是很好的。 幸运的是，有一个简单的方法可以达到这个效果。 这个想法是参数化键（key）而不是容器。 然后将参数化的键提交给容器以插入或检索值。 泛型类型系统用于保证值的类型与其键一致。&lt;/p&gt;
&lt;p&gt;作为这种方法的一个简单示例，请考虑一个Favorites类，它允许其客户端保存和检索任意多种类型的&lt;code&gt;favorite&lt;/code&gt;实例。 该类型的Class对象将扮演参数化键的一部分。其原因是这&lt;code&gt;Class&lt;/code&gt;类是泛型的。 类的类型从字面上来说不是简单的&lt;code&gt;Class&lt;/code&gt;，而是&lt;code&gt;Class &amp;lt;T&amp;gt;&lt;/code&gt;。 例如，&lt;code&gt;String.class&lt;/code&gt;的类型为&lt;code&gt;Class &amp;lt;String&amp;gt;&lt;/code&gt;，&lt;code&gt;Integer.class的&lt;/code&gt;类型为&lt;code&gt;Class &amp;lt;Integer&amp;gt;&lt;/code&gt;。 当在方法中传递字面类传递编译时和运行时类型信息时，它被称为类型令牌（type token）[Bracha04]。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Favorites&lt;/code&gt;类的API很简单。 它看起来就像一个简单Map类，除了该键是参数化的以外。 客户端在设置和获取&lt;code&gt;favorites&lt;/code&gt;实例时呈现一个Class对象。 这里是API：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Typesafe heterogeneous container pattern - API
public class Favorites {
    public &amp;lt;T&amp;gt; void putFavorite(Class&amp;lt;T&amp;gt; type, T instance);
    public &amp;lt;T&amp;gt; T getFavorite(Class&amp;lt;T&amp;gt; type);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面是一个演示&lt;code&gt;Favorites&lt;/code&gt;类，保存，检索和打印喜欢的&lt;code&gt;String&lt;/code&gt;，&lt;code&gt;Integer&lt;/code&gt;和&lt;code&gt;Class&lt;/code&gt;实例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Typesafe heterogeneous container pattern - client

public static void main(String[] args) {

    Favorites f = new Favorites();

    f.putFavorite(String.class, &quot;Java&quot;);

    f.putFavorite(Integer.class, 0xcafebabe);

    f.putFavorite(Class.class, Favorites.class);

     String favoriteString = f.getFavorite(String.class);

    int favoriteInteger = f.getFavorite(Integer.class);

    Class&amp;lt;?&amp;gt; favoriteClass = f.getFavorite(Class.class);

    System.out.printf(&quot;%s %x %s%n&quot;, favoriteString,

        favoriteInteger, favoriteClass.getName());
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;正如你所期望的，这个程序打印&lt;code&gt;Java cafebabe Favorites&lt;/code&gt;。 请注意，顺便说一下，Java的&lt;code&gt;printf&lt;/code&gt;方法与C语言的不同之处在于，应该使用&lt;code&gt;％n&lt;/code&gt;，而在C中使用&lt;code&gt;\n&lt;/code&gt;。&lt;code&gt;％n&lt;/code&gt;生成适用的特定于平台的行分隔符，该分隔符在很多但不是所有平台上都是&lt;code&gt;\n&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Favorites&lt;/code&gt;实例是类型安全的：当你请求一个字符串时它永远不会返回一个整数。 它也是异构的：与普通Map不同，所有的键都是不同的类型。 因此，我们将&lt;code&gt;Favorites&lt;/code&gt;称为类型安全异构容器（typesafe heterogeneous container.）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Favorites&lt;/code&gt;的实现非常小巧。 这是完整的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Typesafe heterogeneous container pattern - implementation
public class Favorites {
    private Map&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt; favorites = new HashMap&amp;lt;&amp;gt;();

    public &amp;lt;T&amp;gt; void putFavorite(Class&amp;lt;T&amp;gt; type, T instance) {
        favorites.put(Objects.requireNonNull(type), instance);
    }

    public &amp;lt;T&amp;gt; T getFavorite(Class&amp;lt;T&amp;gt; type) {
        return type.cast(favorites.get(type));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里有一些微妙的事情发生。 每个&lt;code&gt;Favorites&lt;/code&gt;实例都由一个名为&lt;code&gt;favorites&lt;/code&gt;私有的&lt;code&gt;Map&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt;&lt;/code&gt;来支持。 你可能认为无法将任何内容放入此Map中，因为这是无限定的通配符类型，但事实恰恰相反。 需要注意的是通配符类型是嵌套的：它不是通配符类型的Map类型，而是键的类型。 这意味着每个键都可以有不同的参数化类型：一个可以是&lt;code&gt;Class &amp;lt;String&amp;gt;&lt;/code&gt;，下一个&lt;code&gt;Class &amp;lt;Integer&amp;gt;&lt;/code&gt;等等。 这就是异构的由来。&lt;/p&gt;
&lt;p&gt;接下来要注意的是，favorites的Map的值类型只是Object。 换句话说，Map不保证键和值之间的类型关系，即每个值都是由其键表示的类型。 事实上，Java的类型系统并不足以表达这一点。 但是我们知道这是真的，并在检索一个favorite时利用了这点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;putFavorite&lt;/code&gt;实现很简单：只需将给定的Class对象映射到给定的favorites的实例即可。 如上所述，这丢弃了键和值之间的“类型联系（type linkage）”；无法知道这个值是不是键的一个实例。 但没关系，因为&lt;code&gt;getFavorites&lt;/code&gt;方法可以并且确实重新建立这种关联。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getFavorite&lt;/code&gt;的实现比&lt;code&gt;putFavorite&lt;/code&gt;更复杂。 首先，它从favorites Map中获取与给定Class对象相对应的值。 这是返回的正确对象引用，但它具有错误的编译时类型：它是Object（favorites map的值类型），我们需要返回类型&lt;code&gt;T&lt;/code&gt;。因此，&lt;code&gt;getFavorite&lt;/code&gt;实现动态地将对象引用转换为Class对象表示的类型，使用Class的&lt;code&gt;cast&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cast&lt;/code&gt;方法是Java的cast操作符的动态模拟。它只是检查它的参数是否由Class对象表示的类型的实例。如果是，它返回参数；否则会抛出&lt;code&gt;ClassCastException&lt;/code&gt;异常。我们知道，假设客户端代码能够干净地编译，&lt;code&gt;getFavorite&lt;/code&gt;中的强制转换不会抛出&lt;code&gt;ClassCastException&lt;/code&gt;异常。 也就是说，favorites map中的值始终与其键的类型相匹配。&lt;/p&gt;
&lt;p&gt;那么这个&lt;code&gt;cast&lt;/code&gt;方法为我们做了什么，因为它只是返回它的参数？ &lt;code&gt;cast&lt;/code&gt;的签名充分利用了Class类是泛型的事实。 它的返回类型是Class对象的类型参数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class Class&amp;lt;T&amp;gt; {
    T cast(Object obj);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这正是&lt;code&gt;getFavorite&lt;/code&gt;方法所需要的。 这正是确保Favorites类型安全，而不用求助一个未经检查的强制转换的&lt;code&gt;T&lt;/code&gt;类型。&lt;/p&gt;
&lt;p&gt;Favorites类有两个限制值得注意。 首先，恶意客户可以通过使用原始形式的Class对象，轻松破坏Favorites实例的类型安全。 但生成的客户端代码在编译时会生成未经检查的警告。 这与正常的集合实现（如HashSet和HashMap）没有什么不同。 通过使用原始类型HashSet（条目 26），可以轻松地将字符串放入&lt;code&gt;HashSet &amp;lt;Integer&amp;gt;&lt;/code&gt;中。 也就是说，如果你愿意为此付出一点代价，就可以拥有运行时类型安全性。 确保Favorites永远不违反类型不变的方法是，使&lt;code&gt;putFavorite&lt;/code&gt;方法检查该实例是否由type表示类型的实例，并且我们已经知道如何执行此操作。只需使用动态转换：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Achieving runtime type safety with a dynamic cast
public &amp;lt;T&amp;gt; void putFavorite(Class&amp;lt;T&amp;gt; type, T instance) {
    favorites.put(type, type.cast(instance));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;java.util.Collections&lt;/code&gt;中有一些集合包装类，可以发挥相同的诀窍。 它们被称为&lt;code&gt;checkedSet&lt;/code&gt;，&lt;code&gt;checkedList&lt;/code&gt;，&lt;code&gt;checkedMap&lt;/code&gt;等等。 他们的静态工厂除了一个集合（或Map）之外还有一个Class对象（或两个）。 静态工厂是泛型方法，确保Class对象和集合的编译时类型匹配。 包装类为它们包装的集合添加了具体化。 例如，如果有人试图将&lt;code&gt;Coin&lt;/code&gt;放入你的&lt;code&gt;Collection &amp;lt;Stamp&amp;gt;&lt;/code&gt;中，则包装类在运行时会抛出&lt;code&gt;ClassCastException&lt;/code&gt;。 这些包装类对于追踪在混合了泛型和原始类型的应用程序中添加不正确类型的元素到集合的客户端代码很有用。&lt;/p&gt;
&lt;p&gt;Favorites类的第二个限制是它不能用于不可具体化的（non-reifiable）类型（条目 28）。 换句话说，你可以保存你最喜欢的&lt;code&gt;String&lt;/code&gt;或&lt;code&gt;String []&lt;/code&gt;，但不能保存&lt;code&gt;List &amp;lt;String&amp;gt;&lt;/code&gt;。 如果你尝试保存你最喜欢的&lt;code&gt;List &amp;lt;String&amp;gt;&lt;/code&gt;，程序将不能编译。 原因是无法获取&lt;code&gt;List &amp;lt;String&amp;gt;&lt;/code&gt;的Class对象。 &lt;code&gt;List &amp;lt;String&amp;gt; .class&lt;/code&gt;是语法错误，也是一件好事。 &lt;code&gt;List &amp;lt;String&amp;gt;&lt;/code&gt;和&lt;code&gt;List &amp;lt;Integer&amp;gt;&lt;/code&gt;共享一个Class对象，即&lt;code&gt;List.class&lt;/code&gt;。 如果“字面类型（type literals）”&lt;code&gt;List &amp;lt;String&amp;gt; .class&lt;/code&gt;和&lt;code&gt;List &amp;lt;Integer&amp;gt; .class&lt;/code&gt;合法并返回相同的对象引用，那么它会对Favorites对象的内部造成严重破坏。 对于这种限制，没有完全令人满意的解决方法。&lt;/p&gt;
&lt;p&gt;Favorites使用的类型令牌( type tokens)是无限制的：&lt;code&gt;getFavorite&lt;/code&gt;和&lt;code&gt;putFavorite&lt;/code&gt;接受任何Class对象。 有时你可能需要限制可传递给方法的类型。 这可以通过一个有限定的类型令牌来实现，该令牌只是一个类型令牌，它使用限定的类型参数（条目 30）或限定的通配符（条目 31）来放置可以表示的类型的边界。&lt;/p&gt;
&lt;p&gt;注解API（条目 39）广泛使用限定类型的令牌。 例如，以下是在运行时读取注解的方法。 此方法来自&lt;code&gt;AnnotatedElement&lt;/code&gt;接口，该接口由表示类，方法，属性和其他程序元素的反射类型实现：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public &amp;lt;T extends Annotation&amp;gt;
    T getAnnotation(Class&amp;lt;T&amp;gt; annotationType);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数&lt;code&gt;annotationType&lt;/code&gt;是表示注解类型的限定类型令牌。 该方法返回该类型的元素的注解（如果它有一个）；如果没有，则返回null。 本质上，注解元素是一个类型安全的异构容器，其键是注解类型。&lt;/p&gt;
&lt;p&gt;假设有一个&lt;code&gt;Class &amp;lt;?&amp;gt;&lt;/code&gt;类型的对象，并且想要将它传递给需要限定类型令牌（如&lt;code&gt;getAnnotation&lt;/code&gt;）的方法。 可以将对象转换为&lt;code&gt;Class&amp;lt;? extends Annotation&amp;gt;&lt;/code&gt;，但是这个转换没有被检查，所以它会产生一个编译时警告（条目 27）。 幸运的是，Class类提供了一种安全（动态）执行这种类型转换的实例方法。 该方法被称为&lt;code&gt;asSubclass&lt;/code&gt;，并且它转换所调用的Class对象来表示由其参数表示的类的子类。 如果转换成功，该方法返回它的参数；如果失败，则抛出&lt;code&gt;ClassCastException&lt;/code&gt;异常。&lt;/p&gt;
&lt;p&gt;以下是如何使用&lt;code&gt;asSubclass&lt;/code&gt;方法在编译时读取类型未知的注解。 此方法编译时没有错误或警告：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Use of asSubclass to safely cast to a bounded type token
static Annotation getAnnotation(AnnotatedElement element,
                                String annotationTypeName) {
    Class&amp;lt;?&amp;gt; annotationType = null; // Unbounded type token
    try {
        annotationType = Class.forName(annotationTypeName);
    } catch (Exception ex) {
        throw new IllegalArgumentException(ex);
    }
    return element.getAnnotation(
        annotationType.asSubclass(Annotation.class));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;总之，泛型API的通常用法（以集合API为例）限制了每个容器的固定数量的类型参数。 你可以通过将类型参数放在键上而不是容器上来解决此限制。 可以使用Class对象作为此类型安全异构容器的键。 以这种方式使用的Class对象称为类型令牌。 也可以使用自定义键类型。 例如，可以有一个表示数据库行（容器）的&lt;code&gt;DatabaseRow&lt;/code&gt;类型和一个泛型类型&lt;code&gt;Column &amp;lt;T&amp;gt;&lt;/code&gt;作为其键。&lt;/p&gt;
</description>
<pubDate>Tue, 27 Feb 2018 14:22:00 +0000</pubDate>
<dc:creator>林本托</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/IcanFixIt/p/8481317.html</dc:identifier>
</item>
<item>
<title>用VSCode开发一个基于asp.net core 2.0/sql server linux(docker)/ng5/bs4的项目(1) - solenovex</title>
<link>http://www.cnblogs.com/cgzl/p/8478993.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cgzl/p/8478993.html</guid>
<description>&lt;p&gt;最近使用vscode比较多. 学习了一下如何在mac上使用vscode开发asp.netcore项目.&lt;/p&gt;
&lt;p&gt;这里是我写的关于vscode的一篇文章: &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/cgzl/p/8450179.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/cgzl/p/8450179.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/cgzl/p/8450409.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cgzl/p/8450409.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这篇文章写的是使用mac(linux)/win10开发一个基于asp.net core 2.0 web api, angular 5, bootstrap 4, sql server linux(使用到docker)的小项目.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;该文章大约分这几部分:&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;开发环境的搭建&lt;/li&gt;
&lt;li&gt;建立和配置asp.net core 2.0 web api&lt;/li&gt;
&lt;li&gt;建立和配置angular5项目&lt;/li&gt;
&lt;li&gt;开发基本的CRUD功能&lt;/li&gt;
&lt;li&gt;基于Unit Of Work和Repository等Pattern对项目重构&lt;/li&gt;
&lt;li&gt;其他业务功能的实现, 例如文件上传等&lt;/li&gt;
&lt;li&gt;授权和验证&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;该文章涉及到以下技术:&lt;/p&gt;
&lt;p&gt;asp.net core, angular 5, vscode, docker, sql server on linux, bootstrap 4.&lt;/p&gt;
&lt;p&gt;------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;开发一个电视剧管理程序, 数据表有:&lt;/p&gt;
&lt;p&gt;TvNetworks(电视台), TvShows(电视剧), TvShowSeasons(电视剧分季), Tags(分类标签), TvShowTags(电视剧到分类标签).&lt;/p&gt;
&lt;p&gt;就是对电视台, 电视剧等信息进行CRUD维护的程序.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227151354541-1672873837.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 安装.net core sdk:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;到官网下载并安装相应平台的.net core sdk: &lt;a href=&quot;https://dotnet.github.io/&quot; target=&quot;_blank&quot;&gt;https://dotnet.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装好之后, 打开命令行: 执行dotnet --version, 可以看到版本号, 这就说明安装成功了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 安装visual studio code:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;官网: &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot;&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装好之后, 可以选择把vscode添加到Path: &lt;/p&gt;
&lt;p&gt;使用command+option+p(mac)或者ctrl+shift+p(win)打开命令板, 输入path, 选择install code command in path.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227152522792-1780373170.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后打开命令行 输入 code . 如果vscode能打开当前目录, 那么说明操作成功了.&lt;/p&gt;
&lt;p&gt;我安装了如下扩展:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227153332047-209969426.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然python扩展可以不用安装...🤣&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Sql Server&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;貌似目前没有mac版本到sql server. 所以采用docker.&lt;/p&gt;
&lt;p&gt;首先安装docker: &lt;a href=&quot;https://www.docker.com/docker-mac&quot; target=&quot;_blank&quot;&gt;https://www.docker.com/docker-mac&lt;/a&gt; 这个是mac版本到下载地址, 下载后按照说明安装即可.&lt;/p&gt;
&lt;p&gt;对于windows 10版到, 首先要确保您到windows 10要高于Home版. 因为docker win 10版依赖于hyper-v, 而win10 home版没有hyper-v.&lt;/p&gt;
&lt;p&gt;安装好之后, 需要调整以下docker的设置, 至少需要4G内存(sql server需要):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227154822067-1689232696.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;docker的简介可以参考我写的这片入门级文章: &lt;a href=&quot;http://www.cnblogs.com/cgzl/p/8458926.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cgzl/p/8458926.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后下载sqlserver linux版的image (&lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-linux/&quot; target=&quot;_blank&quot;&gt;https://hub.docker.com/r/microsoft/mssql-server-linux/&lt;/a&gt;), 命令行输入:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker pull microsoft/mssql-server-linux
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个操作在国内可能会很慢, 请耐心...&lt;/p&gt;
&lt;p&gt;下载好之后, 查看本地的images, 使用命令:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
docker images
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227155252807-550137934.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来安装并运行这个image:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=一个复杂的密码' -p 1433:1433 -d microsoft/mssql-server-linux
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;成功后, 使用docker ps命令可以查看正在运行的进程:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227155539580-1487330565.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用docker ps -a 可以查看所有的进程, 包括已经停止的.&lt;/p&gt;
&lt;p&gt;然后我们使用vscode测试以下这个sqlserver, 在vscode里面添加一个xx.sql文件, 待vscode自动安装好相应的插件后, 使用cmd+opt+p打开命令板, 输入mssql, 选择mssql: connect:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160016610-1546650034.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果以前没有连接过的话, 就选择 Create Connection Profile:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160517167-111532654.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后输入server的名字localhost:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160621315-385671583.png&quot; alt=&quot;&quot;/&gt;]&lt;/p&gt;
&lt;p&gt;接下来输入数据库名, 因为还没有建立任何数据库, 所以就输入master吧:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160721179-935339807.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择登陆类型 SQL Login(如果是win10的话, 也可以选择integrated):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160750108-195154244.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用户名sa:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160835919-455856736.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;密码:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160901373-1476119570.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后选择是否保存密码, 最后给这个连接起一个名字:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227160948690-540084856.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这些操作完成后, 就会尝试连接master数据库, 连接成功的话上面会有提示框, 右下角也可以看出来:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227161143021-311810917.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;写一个sql 语句测试以下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; dbo.sysdatabases;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;点击右键(cmd+shift+e)执行sql:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227161314956-223784590.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ok, 数据库安装成功.&lt;/p&gt;
&lt;p&gt;如果docker重启后, 可以使用“docker start (容器ID的前两位)”命令启动这个sql容器.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 安装angular cli:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先安装nodejs: &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot;&gt;https://nodejs.org/en/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后执行命令安装 angular cli:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm install -g @angular-cli
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;命令行执行命令, 建立文件夹和webapi项目:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mkdir Tv &amp;amp;&amp;amp; cd Tv &amp;amp;&amp;amp; dotnet new webapi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227162955754-1900860374.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后执行dotnet run:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227163036488-101977452.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;浏览器访问http://localhost:5000/api/values:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227163133617-1843743595.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;项目建立成功了.&lt;/p&gt;
&lt;p&gt;然后在命令行输入code . 就可以用vscode打开该目录了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227163447371-867013313.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于asp.net core 2.0的简介可以参考我的文章: &lt;a href=&quot;http://www.cnblogs.com/cgzl/p/7637250.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cgzl/p/7637250.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;环境变量:&lt;/p&gt;
&lt;p&gt;运行dotnet run的时候, 可以看到这句话:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227163902652-390580865.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这表示当前的宿主环境变量为Production, 而我们可能需要用到Development或者Staging.&lt;/p&gt;
&lt;p&gt;有几种办法可以更改这个环境变量的值:&lt;/p&gt;
&lt;p&gt;1. 在执行dotnet run之前设置环境变量:&lt;/p&gt;
&lt;p&gt;mac: export ASPNETCORE_ENVIRONMENT=Development&lt;/p&gt;
&lt;p&gt;windows: set ASPNETCORE_ENVIRONMENT=&quot;Development&quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227164253105-14786734.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2. windows下可以在控制面板--系统--高级设置里面设置环境变量的值&lt;/p&gt;
&lt;p&gt;3. mac下, 进入用户的home目录, 然后执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
code .bash_profile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在该文件后面加上:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
export ASPNETCORE_ENVIRONMENT=Development
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样也可以.&lt;/p&gt;
&lt;p&gt;4. 在项目的appSettings.json文件里面设置也可以:&lt;/p&gt;
&lt;p&gt;使用visual studio 2017的话, 可以在项目的launchSettings.json设置.&lt;/p&gt;
&lt;p&gt;使用vscode的话, 可以在项目目录的launch.json进行设置.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227165440409-1355253536.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不过这就需要使用vscode来启动项目了.&lt;/p&gt;
&lt;p&gt;安装.net watch tool&lt;/p&gt;
&lt;p&gt;经常开发前端的都知道, 前端项目开发的时候一般都采用hot module replacement技术, 就是文件有变化的时候, 自动重新编译并刷新浏览器.&lt;/p&gt;
&lt;p&gt;默认情况下dotnet run没有这个功能, 所以需要添加dotnet watch tool来实现类似的功能: &lt;a href=&quot;https://github.com/aspnet/DotNetTools/blob/dev/src/dotnet-watch/README.md&quot; target=&quot;_blank&quot;&gt;https://github.com/aspnet/DotNetTools/blob/dev/src/dotnet-watch/README.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打开Tv.csproj添加此行:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DotNetCliToolReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.VisualStudio.Web.CodeGeneration.Tools&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;2.0.2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;DotNetCliToolReference Include=&quot;Microsoft.DotNet.Watcher.Tools&quot; Version=&quot;2.0.0&quot; /&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后执行命令:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
dotnet restore
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就使用下面的命令来代替dotnet run:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
dotnet watch run
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您可以随便修改一点代码, 然后就可以看到项目被重新编译并运行了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Debugging asp.net core&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参考我这篇文章: &lt;a href=&quot;http://www.cnblogs.com/cgzl/p/8450179.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cgzl/p/8450179.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;切换到Debug画面, 然后注意选择到是.net core attach, 因为我们之前运行着dotnet watch run, 所以只能附加着去调试.&lt;/p&gt;
&lt;p&gt;点击绿色到调试箭头, 或者按F5, 需要选择相应到命令:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227202109981-1063068681.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由于dotnet watch run随时会build出新到Tv.dll, 所以attach到dotnet Tv.dll即可. (dotnet watch run 和 dotnet exec是两个不同到进程).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;集成Git&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在项目目录执行git init之后, 左边到Git菜单就会起作用了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227203035798-276743092.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;常用都git命令都有对应的菜单. 不过这篇文章里, 其实并没有使用到git.&lt;/p&gt;
&lt;p&gt;-----------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;这一部分, 主要做以下几方面工作:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;建立api&lt;/li&gt;
&lt;li&gt;配置和使用entity framework core 2.0&lt;/li&gt;
&lt;li&gt;配置asp.net core&lt;/li&gt;
&lt;li&gt;使用automapper&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;建立domain models:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这里有一些快捷操作, 如果是新手的话可能不知道, 那么这一段我使用视频. &lt;/p&gt;
&lt;p&gt;视频好像发布不出来, 请看连接:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://v.qq.com/x/page/u0560t3iwef.html&quot; target=&quot;_blank&quot;&gt;http://v.qq.com/x/page/u0560t3iwef.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://v.qq.com/x/page/w05600dxo8j.html&quot; target=&quot;_blank&quot;&gt;http://v.qq.com/x/page/w05600dxo8j.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这两个model的代码如下, Models/TvNetwork.cs:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.ObjectModel;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Tv.Models
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TvNetwork
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; TvNetwork()
        {
            TvShows &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Collection&amp;lt;TvShow&amp;gt;&lt;span&gt;();
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ICollection&amp;lt;TvShow&amp;gt; TvShows { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意建立属性的快捷键是prop, 建立构造函数的快捷键是ctor.&lt;/p&gt;
&lt;p&gt;为了避免使用TvShows属性时出现NullReference Exception, 所以建议在构造函数里面初始化集合导航属性.&lt;/p&gt;

&lt;p&gt;Models/TvShow.cs:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Tv.Models
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TvShow
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; TvNetworkId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; TvNetwork TvNetwork { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;添加Entity Framework Core&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这里需要使用到dotnet ef 命令, 在项目目录下执行命令:&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227211351247-1333783041.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;没有找到这个命令, 这是因为还没有添加ef到tools到项目.&lt;/p&gt;
&lt;p&gt;参考官方文档: &lt;a href=&quot;https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;执行命令: &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet restore&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后打开Tv.csproj添加一个引用:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DotNetCliToolReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.VisualStudio.Web.CodeGeneration.Tools&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;2.0.2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DotNetCliToolReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.DotNet.Watcher.Tools&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;2.0.0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DotNetCliToolReference &lt;/span&gt;&lt;span&gt;Include&lt;/span&gt;&lt;span&gt;=&quot;Microsoft.EntityFrameworkCore.Tools.DotNet&quot;&lt;/span&gt;&lt;span&gt; Version&lt;/span&gt;&lt;span&gt;=&quot;2.0.0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ItemGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;再执行dotnet restore即可. 这时再执行dotnet ef命令, 就可以使用了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227211822116-1656134419.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;创建DbContext&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;创建一个文件夹叫做Database, 然后在里面建立一个文件TvContext.cs:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Tv.Database
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TvContext : DbContext
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; TvContext(DbContextOptions&amp;lt;TvContext&amp;gt;&lt;span&gt; options)
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options)
        {

        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;根据官方文档, 就是这样建立dbcontext的.&lt;/p&gt;
&lt;p&gt;使用dbcontext的时候, 是需要依赖注入的. 所以需要在Startup.cs的ConfigureServices把TvContext注册到容器:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
            &lt;span&gt;services.AddDbContext&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;TvContext&amp;gt;(opt =&amp;gt; opt.UseSqlServer(&quot;&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;));&lt;/span&gt;
            services.AddMvc();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://v.qq.com/x/page/f056037xm2q.html&quot; target=&quot;_blank&quot;&gt;http://v.qq.com/x/page/f056037xm2q.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通常我们是在appSettings.json里面添加数据库连接字符串:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;ConnectionStrings&quot;: {
    &quot;Default&quot;: &quot;server=localhost; database=tvdb; user id=sa; password=Bx@steel1;&quot;
  },
  &lt;/span&gt;&quot;Logging&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;IncludeScopes&quot;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&quot;Debug&quot;&lt;span&gt;: {
      &lt;/span&gt;&quot;LogLevel&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;Default&quot;: &quot;Warning&quot;&lt;span&gt;
      }
    },
    &lt;/span&gt;&quot;Console&quot;&lt;span&gt;: {
      &lt;/span&gt;&quot;LogLevel&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;Default&quot;: &quot;Warning&quot;&lt;span&gt;
      }
    }
  }
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回到Startup.cs, 可以使用这两种方式取得连接字符串: &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
            // services.AddDbContext&lt;/span&gt;&amp;lt;TvContext&amp;gt;(opt =&amp;gt; opt.UseSqlServer(&lt;span&gt;Configuration[&quot;ConnectionStrings:Default&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;]&lt;/span&gt;));
            services.AddDbContext&lt;/span&gt;&amp;lt;TvContext&amp;gt;(opt =&amp;gt; opt.UseSqlServer(&lt;span&gt;Configuration.GetConnectionString(&quot;Default&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;));
            services.AddMvc();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面, 就可以创建数据库了.&lt;/p&gt;
&lt;p&gt;创建数据库&lt;/p&gt;
&lt;p&gt;首先添加migrations:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet ef migrations add Initial
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;执行成功后, 会在项目里生成一个Migrations文件夹:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227214003747-2135354783.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到Initial Migration文件里面什么也没有, 因为我忘记把Domain Model添加到TvContext里面了.&lt;/p&gt;
&lt;p&gt;所以使用命令:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet ef migrations remove
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;来移除上一次添加并且还未更新到数据库的migration, 注意这时候需要停止dotnet watch等操作, &lt;span&gt;还要注意的是, 在ef core里千万不要手动删除迁移文件, 因为这里多出了一个Snapshot文件, 它和所有的迁移是同步的.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227214446298-713982079.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;相应的迁移文件也被删除了.&lt;/p&gt;
&lt;p&gt;修改TvContext:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Tv.Models;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Tv.Database
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TvContext : DbContext
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; TvContext(DbContextOptions&amp;lt;TvContext&amp;gt;&lt;span&gt; options)
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options)
        {

        }

        &lt;/span&gt;&lt;span&gt;public DbSet&amp;lt;TvNetwork&amp;gt; TvNetworks { get; set; }
        public DbSet&amp;lt;TvShow&amp;gt; TvShows { get; set&lt;/span&gt;&lt;span&gt;&lt;span&gt;; }&lt;/span&gt;
    }
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后重新执行dotnet ef migrations add Initial:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227214943502-1508963171.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后执行生成数据库的命令:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet ef database update
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;数据库生成成功:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201802/986268-20180227215151932-2073779258.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;今天先写到这, 过几天会继续写. &lt;/p&gt;
</description>
<pubDate>Tue, 27 Feb 2018 14:04:00 +0000</pubDate>
<dc:creator>solenovex</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cgzl/p/8478993.html</dc:identifier>
</item>
<item>
<title>刚入职的新人如何快速了解公司业务 - 资深Tester_王豆豆</title>
<link>http://www.cnblogs.com/evangline/p/8481232.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/evangline/p/8481232.html</guid>
<description>&lt;h2&gt;公司业务的重要性&lt;/h2&gt;
&lt;p&gt;公司业务的重要性对软件测试人员来说不用多说。作为软件测试人员需要对公司业务完全了解，仅仅是了解还不行，需要做到精通，熟悉公司业务流程、功能等需求，目的就是为了能够更好的进行测试活动。&lt;/p&gt;
&lt;p&gt;只有对软件测试需求完全掌握了，测试人员在测试过程中才能做到有的放矢，测试思维才能打开，测试过程中的细节才能被注意到。&lt;/p&gt;

&lt;p&gt;比如，你在测试过程中碰到一个场景，系统后台或界面给你一个错误的返回，若是你对需求完全熟悉，你一定知道这个地方的返回是有问题的，如果你对需求不熟悉，那你可能就视若无睹，白白放过这样一个bug。&lt;/p&gt;
&lt;p&gt;这种情况在测试过程中遇到的频率很高，若当时对需求不了解，可以向开发或最熟悉需求的测试人员请教，将这个点抛出来，大家一起讨论看否是一个bug，如果测试人员有意识抛出还算好，但如果根本就觉得这个返回就应该是这样呢，那埋下的隐患是不是就很大。&lt;/p&gt;

&lt;p&gt;那测试人员应该怎么做才能更好地了解业务？&lt;/p&gt;
&lt;p&gt;王豆豆去年新入职现在公司，公司业务比较复杂，虽然同属金融行业范畴，但是还是有大区别，同时公司业务根据行业规则不断变化，所以遇到不断学习，目前王豆豆也只算掌握了60%，但掌握业务的能力已被认可的，王豆豆就根据自身经验分享作为刚入职的新人如何快速去了解公司业务。&lt;/p&gt;

&lt;p&gt;刚入职的新人如何快速了解公司业务，王豆豆要从二个方面来分析如何快速掌握：&lt;/p&gt;
&lt;p&gt;第一个是业务流程；第二个业务细节&lt;/p&gt;
&lt;hr/&gt;&lt;h2&gt;1.业务流程&lt;/h2&gt;
&lt;p&gt;对刚开始入职的新人来说，刚开始一定是先从公司业务框架和业务流程学起，&lt;strong&gt;这个时间段需要做的就多看，多问，多做。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;01 多看&lt;/p&gt;
&lt;p&gt;多看指的是多看公司需求文档，需求文档包括任何一切有关公司业务的文档，可能是公司业务背景，公司框架说明，以前的测试用例，测试报告，原型图，公司系统等等。&lt;/p&gt;
&lt;p&gt;尽自己的可能多找与公司业务相关的文档、数据查看。&lt;/p&gt;

&lt;p&gt;02 多问&lt;/p&gt;
&lt;p&gt;多问就是指多向同事请教，不是不耻下问，而是不要害羞上问，其他人都可能比你懂得多。&lt;/p&gt;
&lt;p&gt;现在企业对新人，可能会安排一个老同事带你，也可能没有，直接就安排你进项目做，但前期一定会给你留一点时间熟悉公司业务，如果有同事带你，那是好运，但要明确一件事情就是别人带你，并不是他的主要工作，而是额外工作；如果没有，也不必急，学会自己去梳理，去掌握需求。&lt;/p&gt;
&lt;p&gt;向同事问问题也是一门学问，不是遇到问题就开始问，也不是逮着谁都问，能自己解决的就最好自己解决，需要多观察，通过观察确定问问题的时机。&lt;/p&gt;
&lt;p&gt;刚才王豆豆说过带你的工作是额外工作，如果项目任务很忙的时候，带你的测试人员既要完成平时的工作，又要解决你的问题，会给他造成一定的困扰，所以一定不要有问题就问。&lt;/p&gt;

&lt;p&gt;王豆豆使用的办法就是：&lt;/p&gt;
&lt;p&gt;1.先将不紧急解决的问题记录下来，然后找一个时间统一问；&lt;/p&gt;
&lt;p&gt;2.紧急问题，如果这个问题不解决就没办法继续下面的流程，那这样的问题就必须立马解决，如果带你的人在忙着测试，那你可以先找其他人解决，如果不忙，那就正好。&lt;/p&gt;
&lt;p&gt;王豆豆就是很好运的那个，王豆豆能这么快掌握公司业务，很大程度上都是因为遇到很nice的同事，每遇到的一个问题都能很好解决，解决不仅仅是告诉答案，而是从流程，从结构，从根本原因，从设计目的去分析这个问题，解答很详尽，基本问一次就相当于把一个流程或一个功能点吃透。&lt;/p&gt;

&lt;p&gt;03 多做&lt;/p&gt;
&lt;p&gt;不管你问得再多，看得再多，如果自己不动手去尝试，那都是白费。&lt;/p&gt;

&lt;p&gt;第一个做：&lt;/p&gt;
&lt;p&gt;看文档或系统时，动手画出大致地系统流程图来，也可以是系统框架，系统功能模块等。&lt;/p&gt;

&lt;p&gt;第二个做：&lt;/p&gt;
&lt;p&gt;在问问题时，记录下自己问的所有问题，避免重复问，如果你是第一次，我能给你详细的解答，但如果是第二次，那我会记得我曾经给过你解答，如果还有第三次呢？那是不是我对你的印象就不会那么好，我会觉得你对工作根本不上心。&lt;/p&gt;

&lt;p&gt;第三个做：&lt;/p&gt;
&lt;p&gt;执行---跑业务流程，分析流程的动作背后原因&lt;/p&gt;
&lt;p&gt;假设公司业务有付款的功能，那就自己动手从用户注册-〉登录-〉账户存钱-〉付款的业务场景来做，一个个完整的流程跑，一边跑一边记录页面交互点，每一个动作引起界面或任务或数据库的变化，然后修改一点再跑再记录。&lt;/p&gt;
&lt;p&gt;比如付款账户有钱或没钱的界面返回，数据库的变化，同时了解每执行一个动作，所需要的前置条件，执行所需要的数据从哪些地方取等等。&lt;/p&gt;
&lt;p&gt;关注点较多时，不一定只执行一次就全部了解，可以多次重试，但最终结果是每一个动作，你都需要掌握，这也是我们业务细节部分需要掌握的。&lt;/p&gt;

&lt;hr/&gt;&lt;h2&gt;2.业务细节&lt;/h2&gt;

&lt;p&gt;这个阶段一定是建立在你对公司系统框架，业务流程，产品类型都是相当清楚的前提下再关注的点。&lt;/p&gt;
&lt;p&gt;首先要清楚什么是业务细节？&lt;/p&gt;
&lt;p&gt;王豆豆以为业务细节就是通过表象所看不出来的，而是需要根据数据，任务，动作共同去分析的。&lt;/p&gt;

&lt;p&gt;王豆豆目前觉得应该二个办法：&lt;/p&gt;
&lt;p&gt;第一个方法是多跑业务流程&lt;/p&gt;
&lt;p&gt;前面已经讲过了，根据前面所讲的方法来分析每一次执行动作，记录执行前的前置条件和取数据的表，以及执行后的变化，包含数据库，界面，测试环境记录的日志等。&lt;/p&gt;

&lt;p&gt;第二个方法是看代码&lt;/p&gt;
&lt;p&gt;学会看代码是每一个测试人员都应该掌握到的。&lt;/p&gt;

&lt;p&gt;如果公司没有完整的需求文档，测试人员可以通过看代码分析需求，业务流程的变化，自己就能梳理出需求来。&lt;/p&gt;
&lt;p&gt;看代码可以发现测试人员在前端和业务流程上发现不到的问题，同时还能提高测试人员在某类功能点上测试的效率。&lt;/p&gt;

&lt;p&gt;以测试人员测试Mapping类业务为例，大家都知道Mapping（映射）是指各系统或子系统中相同点的不同映射。&lt;/p&gt;
&lt;p&gt;例如1在A系统中表示小学生，在B系统中表示中学生，2在A系统中表示中学生，在B系统中表示小学生，在A系统中输入1，在B系统界面需要显示小学生。&lt;/p&gt;
&lt;p&gt;如果要测试这样的业务，功能测试至少需要二条测试用例来覆盖，那如果是看代码呢，是不是直接就可以看出来了，你又可能会说不就是多二条测试用例么？那如果这样的Mapping值很多呢，功能测试就需要测试很多次，而通过看代码能很快发现AB系统的映射是否正确，是不是效率提高很多。&lt;/p&gt;
&lt;p&gt;同时看代码可以清楚更多业务设计细节和流程的跳转及条件等。&lt;/p&gt;
&lt;p&gt;以前没有看过代码，刚开始看似确实很难，但看得越多就越容易，学会看代码的前提是对相应编程语言的基础了解，知道如何使用。&lt;/p&gt;

&lt;p&gt;以上就是王豆豆熟悉业务的方法，欢迎大家和我讨论更多更有效的方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎关注王豆豆的微信公众号：资深Tester(zishentester)，了解更多好文，和王豆豆一起成长。。。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 27 Feb 2018 14:00:00 +0000</pubDate>
<dc:creator>资深Tester_王豆豆</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/evangline/p/8481232.html</dc:identifier>
</item>
<item>
<title>Dynamics 365 Online-多选域 - YOBYRON</title>
<link>http://www.cnblogs.com/yobyron/p/MultiSelect.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yobyron/p/MultiSelect.html</guid>
<description>&lt;p&gt;　参与过Dynamics CRM相关工作的朋友们都知道，Dynamics 365之前并没有多选域字段，想要实现多选域，需要自己添加WebResource定制，而这也带来了一系列需要考虑的情况，比如额外的字段消耗，逻辑上复杂的转换规则等，更有甚者，会去改变涉及多选域情况的业务逻辑。但随着Dynamics 365 V9版本的发布，多选域的问题将不再复杂（针对简单的需求），因为MS终于把多选域字段添加了进来。&lt;/p&gt;
&lt;h4&gt;　　1. 添加多选域字段&lt;/h4&gt;
&lt;p&gt;　　与新建OptionSet的方式没有区别，选择字段类型“MultiSelect Option Set”，也可以创建一个Global Multiple Select Option Set&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055981/201802/1055981-20180227170408753-535939433.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在创建完之后，我们把它Publish到Form上，来看看具体的选择效果是什么样的&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055981/201802/1055981-20180227171221685-397383455.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;支持全选/反全选&lt;/li&gt;
&lt;li&gt;支持搜索，是包含的查询结果&lt;/li&gt;
&lt;li&gt;“4 items”显示的是查询的结果数目，默认是所有&lt;/li&gt;
&lt;li&gt;可以通过点击“x”来去掉选项&lt;/li&gt;
&lt;/ol&gt;&lt;h4&gt;　　2. Advanced Find&lt;/h4&gt;
&lt;p&gt;　　既然这是一个字段，那么当然可以通过Advanced Find查询，对比以前的规则条件，多选域多了两个规则：“Contains Values”，&quot;Does Not Contains Values&quot;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055981/201802/1055981-20180227172101786-286394348.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　那么FetchXml也相应的有所改变&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;fetch &lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;=&quot;1.0&quot;&lt;/span&gt;&lt;span&gt; output-format&lt;/span&gt;&lt;span&gt;=&quot;xml-platform&quot;&lt;/span&gt;&lt;span&gt; mapping&lt;/span&gt;&lt;span&gt;=&quot;logical&quot;&lt;/span&gt;&lt;span&gt; distinct&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entity &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;account&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;primarycontactid&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;telephone1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;accountid&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;order &lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; descending&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;and&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;condition &lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;=&quot;new_multiselect&quot;&lt;/span&gt;&lt;span&gt; operator&lt;/span&gt;&lt;span&gt;=&quot;contain-values&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;100000000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;condition&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;condition &lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;=&quot;new_multiselect&quot;&lt;/span&gt;&lt;span&gt; operator&lt;/span&gt;&lt;span&gt;=&quot;not-contain-values&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;100000001&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;condition&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;condition &lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;=&quot;new_multiselect&quot;&lt;/span&gt;&lt;span&gt; operator&lt;/span&gt;&lt;span&gt;=&quot;in&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;100000000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;100000002&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;condition&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entity&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;fetch&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　3. API调用&lt;/h4&gt;
&lt;p&gt;　　如果想执行多选域相关的操作，比如查询结果，这里需要引用最新版本的dll。在V9版本之后，MS将不再像以前那样提供SDK的下载包，Assembly直接通过Nuget添加，具体的名字：Microsoft.CrmSdk.CoreAssemblies。里面包含了需要用到的Microsoft.Xrm.Sdk.dll和Microsoft.Crm.Sdk.Proxy.dll&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055981/201802/1055981-20180227213045122-551124302.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　接着我们看看多选域字段值到底是什么样的。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055981/201802/1055981-20180227213800797-332789154.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　多选域字段的值是一个集合：OptionSetValueCollection，每一个被选中的选项是一个OptionSetValue对象。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055981/201802/1055981-20180227214038471-2134227267.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　并且像OptionSet一样，FormattedValues里可以得到所有被选中选项的Label值，但是这里需要注意一点，Label值是用“;”分号隔开，而且除了第一个值之外，后续的值的前面都会有个空格，在进行数据操作前，需要把空格去掉。&lt;/p&gt;
&lt;p&gt;　　再提醒一下，这里需要用到V9版本及以后的dll，不然多选域字段的Value都是空。&lt;/p&gt;
&lt;p&gt;　　之前说到Operation有更新，那么对应于Advanced Find里面的情况，API中的Operator值分别是ConditionOperator.ContainValues和ConditionOperator.DoesNotContainValues。&lt;/p&gt;







</description>
<pubDate>Tue, 27 Feb 2018 13:52:00 +0000</pubDate>
<dc:creator>YOBYRON</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yobyron/p/MultiSelect.html</dc:identifier>
</item>
<item>
<title>图书管理系统【用户、购买、订单模块、添加权限】 - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8481080.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8481080.html</guid>
<description>&lt;p&gt;要登陆后才能购买，因此我们先写购买模块.&lt;/p&gt;
&lt;h2 id=&quot;设计实体&quot;&gt;设计实体&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String id;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String username;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String password;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String email;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String cellphone;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String address;

    &lt;span class=&quot;co&quot;&gt;//各种setter、getter&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;设计数据库表&quot;&gt;设计数据库表&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;user&lt;/span&gt; (

  &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;        &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt;,
  username  &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  cellphone &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  address   &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  email     &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;),
  &lt;span class=&quot;kw&quot;&gt;password&lt;/span&gt;  &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;

);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;编写dao&quot;&gt;编写DAO&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 用户的登录注册模块&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 1：登陆&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 2：注册&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 3：根据id查找具体的用户&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; UserDaoImpl {



    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(User user) {

        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        String sql = &lt;span class=&quot;st&quot;&gt;&quot;INSERT INTO user (id,username,cellphone,address,email,password) VALUES(?,?,?,?,?,?)&quot;&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {

            queryRunner.&lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;(sql, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{user.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;(),user.&lt;span class=&quot;fu&quot;&gt;getUsername&lt;/span&gt;(), user.&lt;span class=&quot;fu&quot;&gt;getCellphone&lt;/span&gt;(), user.&lt;span class=&quot;fu&quot;&gt;getAddress&lt;/span&gt;(), user.&lt;span class=&quot;fu&quot;&gt;getEmail&lt;/span&gt;(), user.&lt;span class=&quot;fu&quot;&gt;getPassword&lt;/span&gt;()});
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;fu&quot;&gt;login&lt;/span&gt;(String username, String password) {

        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        String sql = &lt;span class=&quot;st&quot;&gt;&quot;SELECT * FROM user WHERE username = ? AND password=?&quot;&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {

            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (User) queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{username, password}, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanHandler&lt;/span&gt;(User.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;));
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(String id) {

        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        String sql = &lt;span class=&quot;st&quot;&gt;&quot;SELECT * FROM user WHERE id=?&quot;&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {

            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (User) queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql, id, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanHandler&lt;/span&gt;(User.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;));
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;测试dao&quot;&gt;测试DAO&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; UserDemo {
    UserDaoImpl userDao = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UserDaoImpl&lt;/span&gt;();

    &lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;() {

        User user = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;User&lt;/span&gt;();
        user.&lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;);
        user.&lt;span class=&quot;fu&quot;&gt;setUsername&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;zhong&quot;&lt;/span&gt;);
        user.&lt;span class=&quot;fu&quot;&gt;setPassword&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;123&quot;&lt;/span&gt;);
        user.&lt;span class=&quot;fu&quot;&gt;setCellphone&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;10085&quot;&lt;/span&gt;);
        user.&lt;span class=&quot;fu&quot;&gt;setAddress&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;广州萝岗&quot;&lt;/span&gt;);
        user.&lt;span class=&quot;fu&quot;&gt;setEmail&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;40368324234234@QQ.com&quot;&lt;/span&gt;);

        userDao.&lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(user);
    }

    &lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;() {

        String id = &lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;;
        User user = userDao.&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(id);

        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(user.&lt;span class=&quot;fu&quot;&gt;getEmail&lt;/span&gt;());
    }

    &lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;login&lt;/span&gt;() {
        String username = &lt;span class=&quot;st&quot;&gt;&quot;zhong&quot;&lt;/span&gt;;
        String password = &lt;span class=&quot;st&quot;&gt;&quot;123&quot;&lt;/span&gt;;
        User user = userDao.&lt;span class=&quot;fu&quot;&gt;login&lt;/span&gt;(username, password);

        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(user.&lt;span class=&quot;fu&quot;&gt;getAddress&lt;/span&gt;());
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;抽取dao&quot;&gt;抽取DAO&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; UserDao {
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(User user);

    User &lt;span class=&quot;fu&quot;&gt;login&lt;/span&gt;(String username, String password);

    User &lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(String id);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;编写service&quot;&gt;编写Service&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; UserDao userDao = DaoFactory.&lt;span class=&quot;fu&quot;&gt;getInstance&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;createDao&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.dao.impl.UserDaoImpl&quot;&lt;/span&gt;, UserDao.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;registerUser&lt;/span&gt;(User user) {
        userDao.&lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(user);
    }
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;fu&quot;&gt;loginUser&lt;/span&gt;(String username,String password) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; userDao.&lt;span class=&quot;fu&quot;&gt;login&lt;/span&gt;(username, password);
    }
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;fu&quot;&gt;findUser&lt;/span&gt;(String id) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; userDao.&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(id);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;前台样式&quot;&gt;前台样式&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;User&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    用户名：&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    密码：&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;登陆&lt;span class=&quot;kw&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;register&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;注册&lt;span class=&quot;kw&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;
&lt;span class=&quot;fl&quot;&gt;#body&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;#user&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;margin-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;130px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;margin-left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1364px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170416105452440?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;实现登陆注册功能&quot;&gt;实现登陆注册功能&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;当点击登陆按钮的时候，把数据带过去给Servlet，让Servlet调用BusinessService方法，实现登陆&lt;/strong&gt;。注册同理.....因此，我们需要用到JavaScript代码&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode jsp&quot;&gt;
&lt;code class=&quot;sourceCode jsp&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${user==&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt;div&lt;span class=&quot;ot&quot;&gt; id&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;User&quot;&lt;/span&gt;&amp;gt;
    用户名：&amp;lt;input&lt;span class=&quot;ot&quot;&gt; type&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;username&quot;&lt;/span&gt;&amp;gt;
    密码：&amp;lt;input&lt;span class=&quot;ot&quot;&gt; type&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;password&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;button&lt;span class=&quot;ot&quot;&gt; name&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; onclick&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;login()&quot;&lt;/span&gt;&amp;gt;登陆&amp;lt;/button&amp;gt;
    &amp;lt;button&lt;span class=&quot;ot&quot;&gt; name&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;register&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; onclick&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;register()&quot;&lt;/span&gt;&amp;gt;注册&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${user!=&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;div&lt;span class=&quot;ot&quot;&gt; id&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;User&quot;&lt;/span&gt;&amp;gt;
        &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;欢迎您：${user.username}&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;a&lt;span class=&quot;ot&quot;&gt; href&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${pageContext.request.contextPath}&lt;span class=&quot;dt&quot;&gt;/UserServlet?method=Logout&quot;&lt;/span&gt;&amp;gt;注销&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;javaScript代码&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;script type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;login&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//得到输入框的数据&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; username &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; password &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//跳转到相对应的Servlet上&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;location&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/UserServlet?method=login&amp;amp;username=&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; username &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&amp;amp;password=&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; password&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;register&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//跳转到注册页面&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;location&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/client/register.jsp&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;UserServlet&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        String method = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;method&quot;&lt;/span&gt;);

        BussinessServiceImpl service = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BussinessServiceImpl&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (method.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;login&quot;&lt;/span&gt;)) {

            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                &lt;span class=&quot;co&quot;&gt;//得到页面传递过来的数据&lt;/span&gt;
                String username = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;);
                String password = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;);
                User user = service.&lt;span class=&quot;fu&quot;&gt;loginUser&lt;/span&gt;(username, password);

                request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;,user);
                request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/client/head.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);

            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
                request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;登陆失败了！&quot;&lt;/span&gt;);
                request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
            }

        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (method.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;register&quot;&lt;/span&gt;)) {

            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                &lt;span class=&quot;co&quot;&gt;//得到JSP传递过来的数据，封装成Bean对象&lt;/span&gt;
                User user = WebUtils.&lt;span class=&quot;fu&quot;&gt;request2Bean&lt;/span&gt;(request, User.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
                user.&lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(WebUtils.&lt;span class=&quot;fu&quot;&gt;makeId&lt;/span&gt;());

                service.&lt;span class=&quot;fu&quot;&gt;registerUser&lt;/span&gt;(user);

                request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;注册成功了！&quot;&lt;/span&gt;);

            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
                e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
                request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;注册失败了！&quot;&lt;/span&gt;);
            }
            request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (method.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Logout&quot;&lt;/span&gt;)) {

            &lt;span class=&quot;co&quot;&gt;//销毁session&lt;/span&gt;
            request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;invalidate&lt;/span&gt;();

            &lt;span class=&quot;co&quot;&gt;//回到首页&lt;/span&gt;
            request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/client/head.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);

        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在显示图书的时候，顺便添加购买的超链接&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;购买&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;设计购物车实体&quot;&gt;设计购物车实体&lt;/h2&gt;
&lt;p&gt;如果不清楚为什么这样设计，可参考我之前的博文：&lt;a href=&quot;http://blog.csdn.net/hon_3y/article/details/56481439#t5&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/hon_3y/article/details/56481439#t5&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Cart实体&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Cart {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, CartItem&amp;gt; map = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; price;


    &lt;span class=&quot;co&quot;&gt;//提供把商品添加到购物的功能&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addBook2Cart&lt;/span&gt;(Book book) {

        &lt;span class=&quot;co&quot;&gt;//得到对应的购物项&lt;/span&gt;
        CartItem cartItem = map.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(book.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;());

        &lt;span class=&quot;co&quot;&gt;//如果是null，说明购物车还没有该购物项&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (cartItem == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            cartItem = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;CartItem&lt;/span&gt;();
            cartItem.&lt;span class=&quot;fu&quot;&gt;setQuantity&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
            cartItem.&lt;span class=&quot;fu&quot;&gt;setBook&lt;/span&gt;(book);
            cartItem.&lt;span class=&quot;fu&quot;&gt;setPrice&lt;/span&gt;(book.&lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;());

            &lt;span class=&quot;co&quot;&gt;//把购物项加到购物车中&lt;/span&gt;
            map.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(book.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;(), cartItem);
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {

            &lt;span class=&quot;co&quot;&gt;//如果购物车有该购物项了，那么将购物项的数量+1&lt;/span&gt;
            cartItem.&lt;span class=&quot;fu&quot;&gt;setQuantity&lt;/span&gt;(cartItem.&lt;span class=&quot;fu&quot;&gt;getQuantity&lt;/span&gt;() + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
        }
    }


    &lt;span class=&quot;co&quot;&gt;//购物车的价钱是购物项价钱的总和&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;() {

        &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; totalPrice = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (Map.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;String, CartItem&amp;gt; me : map.&lt;span class=&quot;fu&quot;&gt;entrySet&lt;/span&gt;()) {
            CartItem cartItem = me.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;();
            totalPrice += cartItem.&lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;();
        }

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; totalPrice;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, CartItem&amp;gt; &lt;span class=&quot;fu&quot;&gt;getMap&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; map;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setMap&lt;/span&gt;(Map&amp;lt;String, CartItem&amp;gt; map) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; = map;
    }


    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setPrice&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; price) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;price&lt;/span&gt; = price;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;设计购物项实体&quot;&gt;设计购物项实体&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CartItem {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Book book;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; price;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; quantity;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;book&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;() * &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;quantity&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setPrice&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; price) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;price&lt;/span&gt; = price;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Book &lt;span class=&quot;fu&quot;&gt;getBook&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; book;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setBook&lt;/span&gt;(Book book) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;book&lt;/span&gt; = book;
    }
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getQuantity&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; quantity;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setQuantity&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; quantity) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;quantity&lt;/span&gt; = quantity;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;处理用户想要买的书籍servlet&quot;&gt;处理用户想要买的书籍Servlet&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;.contextPath}/BuyServlet?book_id=${book.id}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;购买&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;BuyServlet&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        BussinessServiceImpl service = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BussinessServiceImpl&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//先检查该用户是否登陆了。&lt;/span&gt;
        User user = (User) request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (user == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;您还没登陆，请登陆了再来购买&quot;&lt;/span&gt;);
            request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ;
        }

        &lt;span class=&quot;co&quot;&gt;//如果登陆了...&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//得到该用户的购物车&lt;/span&gt;
        Cart cart = (Cart) request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;cart&quot;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (cart == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            cart = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Cart&lt;/span&gt;();
            request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;cart&quot;&lt;/span&gt;, cart);
        }

        &lt;span class=&quot;co&quot;&gt;//得到用户想买的书籍&lt;/span&gt;
        String book_id = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;book_id&quot;&lt;/span&gt;);
        Book book = service.&lt;span class=&quot;fu&quot;&gt;findBook&lt;/span&gt;(book_id);

        &lt;span class=&quot;co&quot;&gt;//把书籍添加到购物车中&lt;/span&gt;
        service.&lt;span class=&quot;fu&quot;&gt;buyBook&lt;/span&gt;(cart, book);
        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;该商品已添加到购物车中&quot;&lt;/span&gt;);
        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request,response);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;提供显示购物车商品的servlet&quot;&gt;提供显示购物车商品的Servlet&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        &lt;span class=&quot;co&quot;&gt;//先判断该用户是否登陆了&lt;/span&gt;
        User user = (User) request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (user == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;您还没有登陆呢！&quot;&lt;/span&gt;);
            request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }

        &lt;span class=&quot;co&quot;&gt;//如果登陆了.....&lt;/span&gt;
        Cart cart = (Cart) request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;cart&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//把该用户的购物车给JSP页面显示&lt;/span&gt;
        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;cart&quot;&lt;/span&gt;, cart);
        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/client/listCart.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;显示购物车的jsp页面&quot;&gt;显示购物车的JSP页面&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode jsp&quot;&gt;
&lt;code class=&quot;sourceCode jsp&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${&lt;span class=&quot;kw&quot;&gt;empty&lt;/span&gt;(cart.map)}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    您还没有购买过任何商品哦！！！
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;


&amp;lt;table&lt;span class=&quot;ot&quot;&gt; border&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;1px&quot;&lt;/span&gt;&amp;gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${!&lt;span class=&quot;kw&quot;&gt;empty&lt;/span&gt;(cart.map)}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &amp;lt;h1&amp;gt;您购物车下有如下的商品：&amp;lt;/h1&amp;gt;&amp;lt;br&amp;gt;

        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;书名：&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;作者：&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;数量：&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;价钱：&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;c:forEach&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; items&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${cart.map}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; var&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;cartItme&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;


            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;${cartItme.value.book.name}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${cartItme.value.book.author}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${cartItme.value.quantity}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${cartItme.value.price}&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:forEach&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;
&amp;lt;/table&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;效果&quot;&gt;&lt;strong&gt;效果：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170417092028520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;在前台用户界面中，当用户要把购物车付款时，应该提供生成订单的超链接....&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170417092656216?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;设计订单实体&quot;&gt;设计订单实体&lt;/h2&gt;
&lt;p&gt;订单应该包含id,收货人信息,下单的时间，订单的总价,订单的状态【有无发货】..而不应该包含商品的信息的。商品的信息用一个专门的”订单项“来表示&lt;/p&gt;
&lt;p&gt;一个订单对应多个订单项，这是一对多的关系！&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String id;
    
    &lt;span class=&quot;co&quot;&gt;//下单的时间、日期、状态&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Date date;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; price;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; state;
    
    &lt;span class=&quot;co&quot;&gt;//一个用户可以有多个订单，把用户记住&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String user_id;

    &lt;span class=&quot;co&quot;&gt;//一个订单中有多个订单项&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Set&amp;lt;OrderItem&amp;gt; items = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;();

    &lt;span class=&quot;co&quot;&gt;//各种的setter和getter&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;设计订单项实体&quot;&gt;设计订单项实体&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String id;


    &lt;span class=&quot;co&quot;&gt;//一本书对应多个订单项，订单项一定是由书组成，记住书&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String book_id;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; price;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; quantity;

    &lt;span class=&quot;co&quot;&gt;//各种的setter和getter&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;设计数据库表-1&quot;&gt;设计数据库表&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;mysql不能创建名为”order”的表，后边加个s就可以&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; orders (
  &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;      &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt;,
  &lt;span class=&quot;dt&quot;&gt;date&lt;/span&gt;    &lt;span class=&quot;dt&quot;&gt;DATE&lt;/span&gt;        &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  user_id &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  state   &lt;span class=&quot;dt&quot;&gt;BOOLEAN&lt;/span&gt;,
  price   &lt;span class=&quot;dt&quot;&gt;DOUBLE&lt;/span&gt;,
  &lt;span class=&quot;kw&quot;&gt;CONSTRAINT&lt;/span&gt; user_id_FK &lt;span class=&quot;kw&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; (user_id) &lt;span class=&quot;kw&quot;&gt;REFERENCES&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;user&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;)
);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;订单项表：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; orderItem (
  &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;       &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt;,
  price    &lt;span class=&quot;dt&quot;&gt;DOUBLE&lt;/span&gt;,
  quantity &lt;span class=&quot;dt&quot;&gt;INT&lt;/span&gt;,
  order_id &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) ,
  book_id  &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) ,
  &lt;span class=&quot;kw&quot;&gt;CONSTRAINT&lt;/span&gt; order_id_FK &lt;span class=&quot;kw&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; (order_id) &lt;span class=&quot;kw&quot;&gt;REFERENCES&lt;/span&gt; orders (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;),
  &lt;span class=&quot;kw&quot;&gt;CONSTRAINT&lt;/span&gt; book_id_FK &lt;span class=&quot;kw&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; (book_id) &lt;span class=&quot;kw&quot;&gt;REFERENCES&lt;/span&gt; book (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;)
);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;表之间的结构：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170417125604528?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;设计dao&quot;&gt;设计Dao&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;49&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; OrderDaoImpl &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; zhongfucheng.&lt;span class=&quot;fu&quot;&gt;dao&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;OrderDao&lt;/span&gt; {

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addOrder&lt;/span&gt;(Order order) {
        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());
        String sql1 = &lt;span class=&quot;st&quot;&gt;&quot;INSERT INTO orders(id,ordertime,user_id,state,price) VALUES(?,?,?,?,?)&quot;&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;//订单的基本信息&lt;/span&gt;
            queryRunner.&lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;(sql1, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{order.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;(), order.&lt;span class=&quot;fu&quot;&gt;getOrdertime&lt;/span&gt;(), order.&lt;span class=&quot;fu&quot;&gt;getUser_id&lt;/span&gt;(), order.&lt;span class=&quot;fu&quot;&gt;isState&lt;/span&gt;(), order.&lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;()});

            &lt;span class=&quot;co&quot;&gt;//订单项的信息&lt;/span&gt;
            String sql2 = &lt;span class=&quot;st&quot;&gt;&quot;INSERT INTO orderItem(id,price,quantity,order_id,book_id) VALUES(?,?,?,?,?)&quot;&lt;/span&gt;;

            Set&amp;lt;OrderItem&amp;gt; items = order.&lt;span class=&quot;fu&quot;&gt;getItems&lt;/span&gt;();

            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (OrderItem item : items) {
                queryRunner.&lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;(sql2, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{item.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;(), item.&lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;(), item.&lt;span class=&quot;fu&quot;&gt;getQuantity&lt;/span&gt;(), item.&lt;span class=&quot;fu&quot;&gt;getOrder_id&lt;/span&gt;(), item.&lt;span class=&quot;fu&quot;&gt;getBook_id&lt;/span&gt;()});
            }
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Order &lt;span class=&quot;fu&quot;&gt;findOrder&lt;/span&gt;(String id) {
        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        Order order;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;//找出订单的基本信息&lt;/span&gt;
            String sql = &lt;span class=&quot;st&quot;&gt;&quot;SELECT * FROM orders WHERE id=?&quot;&lt;/span&gt;;
            order = (Order) queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanHandler&lt;/span&gt;(Order.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;), &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{id});

            &lt;span class=&quot;co&quot;&gt;//找出订单的所有订单项&lt;/span&gt;
            String sql2 = &lt;span class=&quot;st&quot;&gt;&quot;SELECT * FROM orderItem WHERE order_id=?&quot;&lt;/span&gt;;
            List&amp;lt;OrderItem&amp;gt; list = (List&amp;lt;OrderItem&amp;gt;) queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql2, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanListHandler&lt;/span&gt;(OrderItem.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;), &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{order.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;()});

            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;这是数据库拿到的list集合：&quot;&lt;/span&gt;+list.&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;());


            &lt;span class=&quot;co&quot;&gt;//将所有订单项装到订单里边&lt;/span&gt;
            order.&lt;span class=&quot;fu&quot;&gt;getItems&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addAll&lt;/span&gt;(list);
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;这是数据库拿到的&quot;&lt;/span&gt;+order.&lt;span class=&quot;fu&quot;&gt;getItems&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;());


            &lt;span class=&quot;co&quot;&gt;//找出该订单是属于哪一个用户的&lt;/span&gt;
            String sql3 = &lt;span class=&quot;st&quot;&gt;&quot;SELECT * FROM orders o,user u WHERE o.user_id=u.id AND o.id=? &quot;&lt;/span&gt;;
            User user = (User) queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql3, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanHandler&lt;/span&gt;(User.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;), &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{order.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;()});

            order.&lt;span class=&quot;fu&quot;&gt;setUser_id&lt;/span&gt;(user.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;());
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; order;


        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }


    &lt;span class=&quot;co&quot;&gt;//更新订单的状态&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;updateState&lt;/span&gt;(String id) {

        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        String sql = &lt;span class=&quot;st&quot;&gt;&quot;UPDATE orders SET state=? WHERE id=?&quot;&lt;/span&gt;;

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            queryRunner.&lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;(sql, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;, id});
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }

    &lt;span class=&quot;co&quot;&gt;//查看已经发货或没发货的订单信息&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Order&amp;gt; &lt;span class=&quot;fu&quot;&gt;getAllOrder&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; state) {
        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        String sql = &lt;span class=&quot;st&quot;&gt;&quot;SELECT * FROM orders WHERE state=? &quot;&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (List&amp;lt;Order&amp;gt;) queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanListHandler&lt;/span&gt;(Order.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;), &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{state});
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }

    &lt;span class=&quot;co&quot;&gt;//通过用户的id查找用户的订单，可能不止一个&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Order&amp;gt; &lt;span class=&quot;fu&quot;&gt;findUserOrder&lt;/span&gt;(String user_id) {
        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        String sql = &lt;span class=&quot;st&quot;&gt;&quot;SELECT * FROM orders WHERE user_id=? &quot;&lt;/span&gt;;

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; List&amp;lt;Order&amp;gt; queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanHandler&lt;/span&gt;(Order.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;), &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{user_id});

        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }

    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;二次更新&quot;&gt;二次更新&lt;/h2&gt;
&lt;p&gt;在编写dao的时候，尤其是Add方法。它是将所有数据都封装到Order对象上，然后取出数据，把数据插入到数据表中&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;其实，我们的Order和OrderItem的操作可以分开。OrderItem也可以另外编写一个Dao，那么我们在插入完Order对象之后，&lt;strong&gt;得到Order对象返回的主键，再调用OrderItemDao的方法来插入OrderItem的数据&lt;/strong&gt;，这样我觉得会让代码清晰一些。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在OrderItemDao中接收的是一个List&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;抽取成dao接口&quot;&gt;抽取成DAO接口&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; OrderDao {
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addOrder&lt;/span&gt;(Order order);

    Order &lt;span class=&quot;fu&quot;&gt;findOrder&lt;/span&gt;(String id);

    List&amp;lt;Order&amp;gt; &lt;span class=&quot;fu&quot;&gt;getAllOrder&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; state);

    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;updateState&lt;/span&gt;(String user_id);

    List&amp;lt;Order&amp;gt; &lt;span class=&quot;fu&quot;&gt;findUserOrder&lt;/span&gt;(String user_id);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;bussinessservice&quot;&gt;BussinessService&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; OrderDao orderDao = DaoFactory.&lt;span class=&quot;fu&quot;&gt;getInstance&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;createDao&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.dao.impl.OrderDaoImpl&quot;&lt;/span&gt;, OrderDao.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;createOrder&lt;/span&gt;(Cart cart, User user) {

        &lt;span class=&quot;co&quot;&gt;//订单的基本信息&lt;/span&gt;
        String order_id = WebUtils.&lt;span class=&quot;fu&quot;&gt;makeId&lt;/span&gt;();
        Order order = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Order&lt;/span&gt;();
        order.&lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(order_id);
        order.&lt;span class=&quot;fu&quot;&gt;setPrice&lt;/span&gt;(cart.&lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;());
        order.&lt;span class=&quot;fu&quot;&gt;setOrdertime&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Date());
        order.&lt;span class=&quot;fu&quot;&gt;setState&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
        order.&lt;span class=&quot;fu&quot;&gt;setUser_id&lt;/span&gt;(user.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;());


        &lt;span class=&quot;co&quot;&gt;//订单项的基本信息&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//得到每个购物项，购物项就作为订单项&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (Map.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;String, CartItem&amp;gt; me : cart.&lt;span class=&quot;fu&quot;&gt;getMap&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;entrySet&lt;/span&gt;()) {

            OrderItem orderItem = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;OrderItem&lt;/span&gt;();
            CartItem cartItem = me.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;();

            orderItem.&lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(WebUtils.&lt;span class=&quot;fu&quot;&gt;makeId&lt;/span&gt;());
            orderItem.&lt;span class=&quot;fu&quot;&gt;setPrice&lt;/span&gt;(cartItem.&lt;span class=&quot;fu&quot;&gt;getPrice&lt;/span&gt;());
            orderItem.&lt;span class=&quot;fu&quot;&gt;setBook_id&lt;/span&gt;(cartItem.&lt;span class=&quot;fu&quot;&gt;getBook&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;());
            orderItem.&lt;span class=&quot;fu&quot;&gt;setQuantity&lt;/span&gt;(cartItem.&lt;span class=&quot;fu&quot;&gt;getQuantity&lt;/span&gt;());
            orderItem.&lt;span class=&quot;fu&quot;&gt;setOrder_id&lt;/span&gt;(order_id);
            order.&lt;span class=&quot;fu&quot;&gt;getItems&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(orderItem);
        }

        orderDao.&lt;span class=&quot;fu&quot;&gt;addOrder&lt;/span&gt;(order);

    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Order &lt;span class=&quot;fu&quot;&gt;findOrder&lt;/span&gt;(String user_id) {

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; orderDao.&lt;span class=&quot;fu&quot;&gt;findOrder&lt;/span&gt;(user_id);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Order&amp;gt; &lt;span class=&quot;fu&quot;&gt;getAllOrder&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; state) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; orderDao.&lt;span class=&quot;fu&quot;&gt;getAllOrder&lt;/span&gt;(state);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sendOutOrder&lt;/span&gt;(String id) {

        orderDao.&lt;span class=&quot;fu&quot;&gt;updateState&lt;/span&gt;(id);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Order&amp;gt; &lt;span class=&quot;fu&quot;&gt;findUserOrder&lt;/span&gt;(String user_id) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; orderDao.&lt;span class=&quot;fu&quot;&gt;findUserOrder&lt;/span&gt;(user_id);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;生成订单的servlet&quot;&gt;生成订单的Servlet&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        BussinessServiceImpl service = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BussinessServiceImpl&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//检查该用户的购物车是否有商品&lt;/span&gt;
        Cart cart = (Cart) request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;cart&quot;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (cart == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;您购物车没有商品，无法生成订单&quot;&lt;/span&gt;);
            request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }

        &lt;span class=&quot;co&quot;&gt;//如果有商品，得到当前用户&lt;/span&gt;
        User user = (User) request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;);
        service.&lt;span class=&quot;fu&quot;&gt;createOrder&lt;/span&gt;(cart, user);
        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;订单已经生成了，准备好钱来收货把&quot;&lt;/span&gt;);
        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;用户查询自己的订单servlet&quot;&gt;用户查询自己的订单Servlet&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/LookOrder&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; target=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;查看订单&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        BussinessServiceImpl service = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BussinessServiceImpl&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//检查该用户是否登陆了&lt;/span&gt;
        User user = (User) request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (user == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;您还没登陆，等您登陆了再来看把&quot;&lt;/span&gt;);
            request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }

        &lt;span class=&quot;co&quot;&gt;//用户登陆了！&lt;/span&gt;
        Order order = service.&lt;span class=&quot;fu&quot;&gt;findUserOrder&lt;/span&gt;(user.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;());

        &lt;span class=&quot;co&quot;&gt;//交给相对应的JSP 显示&lt;/span&gt;
        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;order&quot;&lt;/span&gt;, order);
        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;,user);
        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/client/listOrder.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;显示订单数据的jsp&quot;&gt;显示订单数据的JSP&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode jsp&quot;&gt;
&lt;code class=&quot;sourceCode jsp&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${order==&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    您还没有下过任何订单！！

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${order!=&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &amp;lt;table&lt;span class=&quot;ot&quot;&gt; border&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;1px&quot;&lt;/span&gt;&amp;gt;

        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;下单人：&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;订单时间&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;订单状态&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;订单价钱&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;${user.username}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;${order.ordertime}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;${order.state==&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;?&lt;span class=&quot;st&quot;&gt;&quot;未发货&quot;&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&quot;已发货&quot;&lt;/span&gt;}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;${order.price}&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;

    &amp;lt;/table&amp;gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;效果-1&quot;&gt;&lt;strong&gt;效果：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170417184449188?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;后台查询订单的状况servlet&quot;&gt;后台查询订单的状况Servlet&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/OrderServlet?state=false&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; target=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;待处理订单&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/OrderServlet?state=true&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; target=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;已发货订单&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        BussinessServiceImpl service = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BussinessServiceImpl&lt;/span&gt;();
        String state = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;state&quot;&lt;/span&gt;);

        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (state.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;true&quot;&lt;/span&gt;)) {
            List&amp;lt;Order&amp;gt; list = service.&lt;span class=&quot;fu&quot;&gt;getAllOrder&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
            request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;list&quot;&lt;/span&gt;,list);

        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (state.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;false&quot;&lt;/span&gt;)) {
            List&amp;lt;Order&amp;gt; list = service.&lt;span class=&quot;fu&quot;&gt;getAllOrder&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
            request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;list&quot;&lt;/span&gt;, list);
        }


        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/background/listOrder.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;显示订单状况的jsp&quot;&gt;显示订单状况的JSP&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${empty(list)}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    还没有任何订单哦！

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; test=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${!empty(list)}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;table&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; border=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1px&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;下单人：&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;订单时间&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;订单状态&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;订单价钱&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;操作&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;c:forEach&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; items=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${list}&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; var=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;${order.user_id}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;${order.ordertime}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;${order.state==false?&quot;未发货&quot;:&quot;已发货&quot;}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;${order.price}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/orderItemServlet?order_id=${order.id}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;查看详细信息&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;删除&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:forEach&amp;gt;&lt;/span&gt;


    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;查看具体订单的详细信息servlet&quot;&gt;查看具体订单的详细信息Servlet&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        BussinessServiceImpl service = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BussinessServiceImpl&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//得到用户想要查看详细信息的表单&lt;/span&gt;
        String order_id = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;order_id&quot;&lt;/span&gt;);

        Order order = service.&lt;span class=&quot;fu&quot;&gt;findOrder&lt;/span&gt;(order_id);

        &lt;span class=&quot;co&quot;&gt;//将该order对象给相对应的JSP显示&lt;/span&gt;
        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;order&quot;&lt;/span&gt;, order);
        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/background/listDetail.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;查看具体订单的详细信息jsp&quot;&gt;查看具体订单的详细信息JSP&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;table&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; border=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1px&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;kw&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;书籍的编号&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;价钱&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;数量&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;操作&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;c:forEach&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; items=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${order.items}&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; var=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;item&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;${item.book_id}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;${item.price}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;${item.quantity}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/SendOutServlet?id=${order.id}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;发货&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:forEach&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;处理发货的servlet&quot;&gt;处理发货的Servlet&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        BussinessServiceImpl service = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BussinessServiceImpl&lt;/span&gt;();
        String id = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;);

        service.&lt;span class=&quot;fu&quot;&gt;sendOutOrder&lt;/span&gt;(id);
        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;已发货！&quot;&lt;/span&gt;);
        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;效果-2&quot;&gt;&lt;strong&gt;效果:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170417185813025?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;目前为止，我们已经学习了动态代理技术和注解技术了。于是我们想要为之前的bookStore项目添加权限控制.....&lt;/p&gt;
&lt;p&gt;只有用户有权限的时候，后台管理才可以进行相对应的操作.....&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;实现思路&quot;&gt;实现思路&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170425102852577?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之前我们做权限管理系统的时候，是根据用户请求的URI来判断该链接是否需要权限的。这次我们使用动态代理的技术和注解来判断：&lt;strong&gt;用户调用该方法时，检查该方法是否需要权限...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据MVC模式，我们在web层都是调用service层来实现功能的。那么我们具体的思路是这样的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;web层调用service层的时候，&lt;strong&gt;得到的并不是ServiceDao对象，而是我们的代理对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在service层中的方法添加注解，如果方法上有注解，那么说明调用该方法需要权限...&lt;/li&gt;
&lt;li&gt;当web层调用代理对象方法的时候，代理对象会判断该方法是否需要权限，再给出相对应的提示....&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h2 id=&quot;设计实体数据库表&quot;&gt;设计实体、数据库表&lt;/h2&gt;
&lt;p&gt;上次我们做的权限管理系统是引入了角色这个概念的，这次主要为了练习动态代理和注解技术，就以简单为主，不引入角色这个实体。直接是&lt;strong&gt;用户和权限之间的关系&lt;/strong&gt;了。&lt;/p&gt;
&lt;h2 id=&quot;privilege实体&quot;&gt;Privilege实体&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Privilege {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String id ;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; id;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(String id) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; = id;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; name;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(String name) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;数据库表&quot;&gt;数据库表&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;privilege表&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;privilege&lt;/span&gt; (

  &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;   &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt;,
  name &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;)

);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;privilege和user是多对多的关系，于是使用第三方表来维护他们的关系&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;user_privilege表&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; user_privilege (
  privilege_id &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;),
  user_id      &lt;span class=&quot;dt&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;),

  &lt;span class=&quot;kw&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; (privilege_id, user_id),
  &lt;span class=&quot;kw&quot;&gt;CONSTRAINT&lt;/span&gt; privilege_id_FK &lt;span class=&quot;kw&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; (privilege_id) &lt;span class=&quot;kw&quot;&gt;REFERENCES&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;privilege&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;),
  &lt;span class=&quot;kw&quot;&gt;CONSTRAINT&lt;/span&gt; user_id_FK1 &lt;span class=&quot;kw&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; (user_id) &lt;span class=&quot;kw&quot;&gt;REFERENCES&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;user&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;)

);
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h2 id=&quot;添加测试数据&quot;&gt;添加测试数据&lt;/h2&gt;
&lt;p&gt;为了方便，直接添加数据了。就不写详细的DAO了。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在数据库中添加了两个权限&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170425105424043?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;为id为1的user添加了两个权限&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170425105516226?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;编写dao-1&quot;&gt;编写DAO&lt;/h2&gt;
&lt;p&gt;后面在动态代理中，我们需要检查该用户是否有权限...那么就必须查找出&lt;strong&gt;该用户拥有的哪些权限&lt;/strong&gt;。再看看用户有没有相对应的权限&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;//查找用户的所有权限&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Privilege&amp;gt; &lt;span class=&quot;fu&quot;&gt;findUserPrivilege&lt;/span&gt;(String user_id) {
        QueryRunner queryRunner = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;QueryRunner&lt;/span&gt;(Utils2DB.&lt;span class=&quot;fu&quot;&gt;getDataSource&lt;/span&gt;());

        String sql = &lt;span class=&quot;st&quot;&gt;&quot;SELECT p.* FROM privilege p, user_privilege up WHERE p.id = up.privilege_id AND up.user_id = ?&quot;&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (List&amp;lt;Privilege&amp;gt;) queryRunner.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(sql, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[]{user_id}, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanListHandler&lt;/span&gt;(Privilege.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;));
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;抽取到接口上&quot;&gt;&lt;strong&gt;抽取到接口上&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    List&amp;lt;Privilege&amp;gt; &lt;span class=&quot;fu&quot;&gt;findUserPrivilege&lt;/span&gt;(String user_id);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h2 id=&quot;注解模块&quot;&gt;注解模块&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;编写注解&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.&lt;span class=&quot;fu&quot;&gt;RUNTIME&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;@interface&lt;/span&gt; permission {
    String &lt;span class=&quot;fu&quot;&gt;value&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;在Service层方法中需要权限的地方添加注解CategoryServiceImpl&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;fu&quot;&gt;@permission&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;添加分类&quot;&lt;/span&gt;)
    &lt;span class=&quot;co&quot;&gt;/*添加分类*/&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addCategory&lt;/span&gt;(Category category) {
        categoryDao.&lt;span class=&quot;fu&quot;&gt;addCategory&lt;/span&gt;(category);
    }


    &lt;span class=&quot;co&quot;&gt;/*查找分类*/&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;findCategory&lt;/span&gt;(String id) {
        categoryDao.&lt;span class=&quot;fu&quot;&gt;findCategory&lt;/span&gt;(id);
    }

    &lt;span class=&quot;fu&quot;&gt;@permission&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;查找分类&quot;&lt;/span&gt;)
    &lt;span class=&quot;co&quot;&gt;/*查看分类*/&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Category&amp;gt; &lt;span class=&quot;fu&quot;&gt;getAllCategory&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; categoryDao.&lt;span class=&quot;fu&quot;&gt;getAllCategory&lt;/span&gt;();
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;抽取service&quot;&gt;抽取Service&lt;/h2&gt;
&lt;p&gt;把Service的方法抽取成ServiceDao。在Servlet中，也是通过ServiceFactory来得到Service的对象【和DaoFactory是类似的】&lt;/p&gt;
&lt;h2 id=&quot;categoryservice&quot;&gt;CategoryService&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;fu&quot;&gt;@permission&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;添加分类&quot;&lt;/span&gt;)
    &lt;span class=&quot;co&quot;&gt;/*添加分类*/&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addCategory&lt;/span&gt;(Category category);

    &lt;span class=&quot;co&quot;&gt;/*查找分类*/&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;findCategory&lt;/span&gt;(String id);

    &lt;span class=&quot;fu&quot;&gt;@permission&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;查找分类&quot;&lt;/span&gt;)
    &lt;span class=&quot;co&quot;&gt;/*查看分类*/&lt;/span&gt; List&amp;lt;Category&amp;gt; &lt;span class=&quot;fu&quot;&gt;getAllCategory&lt;/span&gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;servicefactory&quot;&gt;ServiceFactory&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ServiceDaoFactory {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; ServiceDaoFactory factory = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ServiceDaoFactory&lt;/span&gt;();

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ServiceDaoFactory&lt;/span&gt;() {
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; ServiceDaoFactory &lt;span class=&quot;fu&quot;&gt;getInstance&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; factory;
    }


    &lt;span class=&quot;co&quot;&gt;//需要判断该用户是否有权限&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; T &lt;span class=&quot;fu&quot;&gt;createDao&lt;/span&gt;(String className, Class&amp;lt;T&amp;gt; clazz, &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; User user) {

        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;添加分类进来了！&quot;&lt;/span&gt;);

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;//得到该类的类型&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; T t = (T) Class.&lt;span class=&quot;fu&quot;&gt;forName&lt;/span&gt;(className).&lt;span class=&quot;fu&quot;&gt;newInstance&lt;/span&gt;();
            &lt;span class=&quot;co&quot;&gt;//返回一个动态代理对象出去&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (T) Proxy.&lt;span class=&quot;fu&quot;&gt;newProxyInstance&lt;/span&gt;(ServiceDaoFactory.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getClassLoader&lt;/span&gt;(), t.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getInterfaces&lt;/span&gt;(), &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; InvocationHandler() {

                &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(Object proxy, Method method, Object[] args) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; NoSuchMethodException, InvocationTargetException, IllegalAccessException, PrivilegeException {
                    &lt;span class=&quot;co&quot;&gt;//判断用户调用的是什么方法&lt;/span&gt;
                    String methodName = method.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(methodName);

                    &lt;span class=&quot;co&quot;&gt;//得到用户调用的真实方法，注意参数！！！&lt;/span&gt;
                    Method method1 = t.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;(methodName,method.&lt;span class=&quot;fu&quot;&gt;getParameterTypes&lt;/span&gt;());

                    &lt;span class=&quot;co&quot;&gt;//查看方法上有没有注解&lt;/span&gt;
                    permission permis = method1.&lt;span class=&quot;fu&quot;&gt;getAnnotation&lt;/span&gt;(permission.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

                    &lt;span class=&quot;co&quot;&gt;//如果注解为空，那么表示该方法并不需要权限，直接调用方法即可&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (permis == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; method.&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(t, args);
                    }

                    &lt;span class=&quot;co&quot;&gt;//如果注解不为空，得到注解上的权限&lt;/span&gt;
                    String privilege = permis.&lt;span class=&quot;fu&quot;&gt;value&lt;/span&gt;();

                    &lt;span class=&quot;co&quot;&gt;//设置权限【后面通过它来判断用户的权限有没有自己】&lt;/span&gt;
                    Privilege p = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Privilege&lt;/span&gt;();
                    p.&lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(privilege);

                    &lt;span class=&quot;co&quot;&gt;//到这里的时候，已经是需要权限了，那么判断用户是否登陆了&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (user == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {

                        &lt;span class=&quot;co&quot;&gt;//这里抛出的异常是代理对象抛出的，sun公司会自动转换成运行期异常抛出，于是在Servlet上我们根据getCause()来判断是不是该异常，从而做出相对应的提示。&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PrivilegeException&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;对不起请先登陆&quot;&lt;/span&gt;);
                    }

                    &lt;span class=&quot;co&quot;&gt;//执行到这里用户已经登陆了，判断用户有没有权限&lt;/span&gt;
                    Method m = t.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;findUserPrivilege&quot;&lt;/span&gt;, String.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
                    List&amp;lt;Privilege&amp;gt; list = (List&amp;lt;Privilege&amp;gt;) m.&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(t, user.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;());

                    &lt;span class=&quot;co&quot;&gt;//看下权限集合中有没有包含方法需要的权限。使用contains方法，在Privilege对象中需要重写hashCode和equals()&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!list.&lt;span class=&quot;fu&quot;&gt;contains&lt;/span&gt;(p)) {
                        &lt;span class=&quot;co&quot;&gt;//这里抛出的异常是代理对象抛出的，sun公司会自动转换成运行期异常抛出，于是在Servlet上我们根据getCause()来判断是不是该异常，从而做出相对应的提示。&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PrivilegeException&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;您没有权限，请联系管理员！&quot;&lt;/span&gt;);
                    }

                    &lt;span class=&quot;co&quot;&gt;//执行到这里的时候，已经有权限了，所以可以放行了&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; method.&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(t, args);
                }
            });

        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
            &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;privilegeexcetption&quot;&gt;PrivilegeExcetption&lt;/h2&gt;
&lt;p&gt;当用户没有登陆或者没有权限的时候，我们应该给用户一些友好的提示....于是我们自定义了PrivilegeException&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; PrivilegeException &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Exception {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PrivilegeException&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;();
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PrivilegeException&lt;/span&gt;(String message) {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(message);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PrivilegeException&lt;/span&gt;(String message, Throwable cause) {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(message, cause);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PrivilegeException&lt;/span&gt;(Throwable cause) {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(cause);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们继承的是Exception，通过方法名抛出去。但是我们是&lt;strong&gt;通过代理对象调用方法的，于是sun公司的策略就是把它们转换成运行期异常抛出去&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因此，我们就在&lt;strong&gt;Servlet上得到异常，再给出友好的提示&lt;/strong&gt;。。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;效果-3&quot;&gt;效果：&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;没有登陆的时候：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170425203417014?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;登陆了，但是没有相对应的权限的时候&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170425203527812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;登陆了，并且有权限&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170425203633494?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;要点总结&quot;&gt;要点总结&lt;/h2&gt;
&lt;p&gt;该权限控制是十分优雅的，&lt;strong&gt;只要我在Service层中添加一个注解...那么当web层调用该方法的时候就需要判断用户有没有该权限...&lt;/strong&gt;.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;外界调用Service层的方法是代理调用invoke()方法，我们&lt;strong&gt;在invoke()方法可以对其进行增强！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;invoke()方法内部就是在查询调用该方法上有没有注解，如果没有注解，就可以直接调用。如果有注解，那么就得到注解的信息，判断该用户有没有权限来访问这个方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在反射具体方法的时候，必须记得要给出相对应的参数！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在invoke()方法抛出的编译时期异常，java会自动转换成运行期异常进行抛出...&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用contains()方法时，就要重写该对象的hashCode()和equals()&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Tue, 27 Feb 2018 13:24:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8481080.html</dc:identifier>
</item>
</channel>
</rss>