<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>地理位置geo处理之mysql函数 - 人生不如戏</title>
<link>http://www.cnblogs.com/fu-yong/p/9896594.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fu-yong/p/9896594.html</guid>
<description>&lt;div readability=&quot;32&quot;&gt;
&lt;div readability=&quot;54.5&quot;&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;目前越来越多的业务都会基于LBS，附近的人，外卖位置，附近商家等等，现就讨论离我最近这一业务场景的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文：https://www.jianshu.com/p/455d0468f6d4&lt;/p&gt;
&lt;p&gt;目前已知解决方案有:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;mysql 自定义函数计算&lt;/li&gt;
&lt;li&gt;mysql geo索引&lt;/li&gt;
&lt;li&gt;mongodb geo索引&lt;/li&gt;
&lt;li&gt;postgresql PostGis索引&lt;/li&gt;
&lt;li&gt;redis geo&lt;/li&gt;
&lt;li&gt;ElasticSearch&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;本文测试下mysql 函数运算的性能&lt;/p&gt;
&lt;h2&gt;准备工作&lt;/h2&gt;
&lt;h3&gt;创建数据表&lt;/h3&gt;
&lt;pre class=&quot;hljs sql&quot;&gt;
&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE &lt;span class=&quot;hljs-string&quot;&gt;`driver` (
  &lt;span class=&quot;hljs-string&quot;&gt;`id` &lt;span class=&quot;hljs-built_in&quot;&gt;int(&lt;span class=&quot;hljs-number&quot;&gt;11) &lt;span class=&quot;hljs-keyword&quot;&gt;unsigned &lt;span class=&quot;hljs-keyword&quot;&gt;NOT &lt;span class=&quot;hljs-literal&quot;&gt;NULL AUTO_INCREMENT,
  &lt;span class=&quot;hljs-string&quot;&gt;`lng` &lt;span class=&quot;hljs-built_in&quot;&gt;float &lt;span class=&quot;hljs-keyword&quot;&gt;DEFAULT &lt;span class=&quot;hljs-literal&quot;&gt;NULL,
  &lt;span class=&quot;hljs-string&quot;&gt;`lat` &lt;span class=&quot;hljs-built_in&quot;&gt;float &lt;span class=&quot;hljs-keyword&quot;&gt;DEFAULT &lt;span class=&quot;hljs-literal&quot;&gt;NULL,
  PRIMARY &lt;span class=&quot;hljs-keyword&quot;&gt;KEY (&lt;span class=&quot;hljs-string&quot;&gt;`id`)
) &lt;span class=&quot;hljs-keyword&quot;&gt;ENGINE=&lt;span class=&quot;hljs-keyword&quot;&gt;InnoDB &lt;span class=&quot;hljs-keyword&quot;&gt;DEFAULT &lt;span class=&quot;hljs-keyword&quot;&gt;CHARSET=utf8;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;创建测试数据&lt;/h3&gt;
&lt;p&gt;在创建数据之前先了解下基本的地理知识:&lt;/p&gt;
&lt;ul readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;全球经纬度的取值范围为:&lt;/strong&gt; 纬度-90&lt;sub&gt;90，经度-180&lt;/sub&gt;180&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;中国的经纬度范围大约为：&lt;/strong&gt; 纬度3.86&lt;sub&gt;53.55，经度73.66&lt;/sub&gt;135.05&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;北京行政中心的纬度为39.92，经度为116.46&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;越北面的地方纬度数值越大，越东面的地方经度数值越大&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;度分转换： 将度分单位数据转换为度单位数据，公式：度=度+分/60&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;分秒转换： 将度分秒单位数据转换为度单位数据，公式：度 = 度 + 分 / 60 + 秒 / 60 / 60&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在纬度相等的情况下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;经度每隔0.00001度，距离相差约1米&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在经度相等的情况下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;纬度每隔0.00001度，距离相差约1.1米&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;mysql函数计算&lt;/h2&gt;
&lt;pre class=&quot;hljs sql&quot;&gt;
&lt;code class=&quot;sql&quot;&gt;DELIMITER //
&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE DEFINER=&lt;span class=&quot;hljs-string&quot;&gt;`root`@&lt;span class=&quot;hljs-string&quot;&gt;`localhost` &lt;span class=&quot;hljs-keyword&quot;&gt;FUNCTION &lt;span class=&quot;hljs-string&quot;&gt;`getDistance`(
    &lt;span class=&quot;hljs-string&quot;&gt;`lng1` &lt;span class=&quot;hljs-built_in&quot;&gt;float(&lt;span class=&quot;hljs-number&quot;&gt;10,&lt;span class=&quot;hljs-number&quot;&gt;7) 
    ,
    &lt;span class=&quot;hljs-string&quot;&gt;`lat1` &lt;span class=&quot;hljs-built_in&quot;&gt;float(&lt;span class=&quot;hljs-number&quot;&gt;10,&lt;span class=&quot;hljs-number&quot;&gt;7)
    ,
    &lt;span class=&quot;hljs-string&quot;&gt;`lng2` &lt;span class=&quot;hljs-built_in&quot;&gt;float(&lt;span class=&quot;hljs-number&quot;&gt;10,&lt;span class=&quot;hljs-number&quot;&gt;7) 
    ,
    &lt;span class=&quot;hljs-string&quot;&gt;`lat2` &lt;span class=&quot;hljs-built_in&quot;&gt;float(&lt;span class=&quot;hljs-number&quot;&gt;10,&lt;span class=&quot;hljs-number&quot;&gt;7)

) &lt;span class=&quot;hljs-keyword&quot;&gt;RETURNS &lt;span class=&quot;hljs-keyword&quot;&gt;double
    &lt;span class=&quot;hljs-keyword&quot;&gt;COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'计算2坐标点距离'
&lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN
    &lt;span class=&quot;hljs-keyword&quot;&gt;declare d &lt;span class=&quot;hljs-keyword&quot;&gt;double;
    &lt;span class=&quot;hljs-keyword&quot;&gt;declare radius &lt;span class=&quot;hljs-built_in&quot;&gt;int;
    &lt;span class=&quot;hljs-keyword&quot;&gt;set radius = &lt;span class=&quot;hljs-number&quot;&gt;6371000; #假设地球为正球形，直径为6371000米
    &lt;span class=&quot;hljs-keyword&quot;&gt;set d = (&lt;span class=&quot;hljs-number&quot;&gt;2*ATAN2(&lt;span class=&quot;hljs-keyword&quot;&gt;SQRT(&lt;span class=&quot;hljs-keyword&quot;&gt;SIN((lat1-lat2)*&lt;span class=&quot;hljs-keyword&quot;&gt;PI()/&lt;span class=&quot;hljs-number&quot;&gt;180/&lt;span class=&quot;hljs-number&quot;&gt;2)   
        *&lt;span class=&quot;hljs-keyword&quot;&gt;SIN((lat1-lat2)*&lt;span class=&quot;hljs-keyword&quot;&gt;PI()/&lt;span class=&quot;hljs-number&quot;&gt;180/&lt;span class=&quot;hljs-number&quot;&gt;2)+   
        &lt;span class=&quot;hljs-keyword&quot;&gt;COS(lat2*&lt;span class=&quot;hljs-keyword&quot;&gt;PI()/&lt;span class=&quot;hljs-number&quot;&gt;180)*&lt;span class=&quot;hljs-keyword&quot;&gt;COS(lat1*&lt;span class=&quot;hljs-keyword&quot;&gt;PI()/&lt;span class=&quot;hljs-number&quot;&gt;180)   
        *&lt;span class=&quot;hljs-keyword&quot;&gt;SIN((lng1-lng2)*&lt;span class=&quot;hljs-keyword&quot;&gt;PI()/&lt;span class=&quot;hljs-number&quot;&gt;180/&lt;span class=&quot;hljs-number&quot;&gt;2)   
        *&lt;span class=&quot;hljs-keyword&quot;&gt;SIN((lng1-lng2)*&lt;span class=&quot;hljs-keyword&quot;&gt;PI()/&lt;span class=&quot;hljs-number&quot;&gt;180/&lt;span class=&quot;hljs-number&quot;&gt;2)),   
        &lt;span class=&quot;hljs-keyword&quot;&gt;SQRT(&lt;span class=&quot;hljs-number&quot;&gt;1-&lt;span class=&quot;hljs-keyword&quot;&gt;SIN((lat1-lat2)*&lt;span class=&quot;hljs-keyword&quot;&gt;PI()/&lt;span class=&quot;hljs-number&quot;&gt;180/&lt;span class=&quot;hljs-number&quot;&gt;2)   
        *&lt;span class=&quot;hljs-keyword&quot;&gt;SIN((lat1-lat2)*&lt;span class=&quot;hljs-keyword&quot;&gt;PI()/&lt;span class=&quot;hljs-number&quot;&gt;180/&lt;span class=&quot;hljs-number&quot;&gt;2)   
        +&lt;span class=&quot;hljs-keyword&quot;&gt;COS(lat2*&lt;span class=&quot;hljs-keyword&quot;&gt;PI()/&lt;span class=&quot;hljs-number&quot;&gt;180)*&lt;span class=&quot;hljs-keyword&quot;&gt;COS(lat1*&lt;span class=&quot;hljs-keyword&quot;&gt;PI()/&lt;span class=&quot;hljs-number&quot;&gt;180)   
        *&lt;span class=&quot;hljs-keyword&quot;&gt;SIN((lng1-lng2)*&lt;span class=&quot;hljs-keyword&quot;&gt;PI()/&lt;span class=&quot;hljs-number&quot;&gt;180/&lt;span class=&quot;hljs-number&quot;&gt;2)   
        *&lt;span class=&quot;hljs-keyword&quot;&gt;SIN((lng1-lng2)*&lt;span class=&quot;hljs-keyword&quot;&gt;PI()/&lt;span class=&quot;hljs-number&quot;&gt;180/&lt;span class=&quot;hljs-number&quot;&gt;2))))*radius;
    return d;
&lt;span class=&quot;hljs-keyword&quot;&gt;END//
DELIMITER ;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;创建数据python脚本&lt;/h2&gt;
&lt;pre class=&quot;hljs python&quot;&gt;
&lt;code class=&quot;python&quot;/&gt;
&lt;/pre&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;823&quot; data-height=&quot;477&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4033700-dda526bdfcc5c759.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/823/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/4033700-dda526bdfcc5c759.png&quot; data-original-width=&quot;823&quot; data-original-height=&quot;477&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;170212&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;以上脚本创建10个线程，10个线程插入4万条数据。耗费150.18s执行完,总共插入40万条数据&lt;/p&gt;
&lt;h2&gt;测试&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;测试环境&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;系统：mac os&lt;/p&gt;
&lt;p&gt;内存：16G&lt;/p&gt;
&lt;p&gt;cpu: intel core i5&lt;/p&gt;
&lt;p&gt;硬盘: 500g 固态硬盘&lt;/p&gt;
&lt;p&gt;测试下查找距离(134.38753,18.56734)这个坐标点最近的10个司机&lt;/p&gt;
&lt;pre class=&quot;hljs sql&quot;&gt;
&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select *,&lt;span class=&quot;hljs-string&quot;&gt;`getDistance`(&lt;span class=&quot;hljs-number&quot;&gt;134.38753,&lt;span class=&quot;hljs-number&quot;&gt;18.56734,&lt;span class=&quot;hljs-string&quot;&gt;`lng`,&lt;span class=&quot;hljs-string&quot;&gt;`lat`) &lt;span class=&quot;hljs-keyword&quot;&gt;as dis &lt;span class=&quot;hljs-keyword&quot;&gt;from driver &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER &lt;span class=&quot;hljs-keyword&quot;&gt;BY dis &lt;span class=&quot;hljs-keyword&quot;&gt;limit &lt;span class=&quot;hljs-number&quot;&gt;10
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;耗时：18.0s&lt;/li&gt;
&lt;li&gt;explain:全表扫描&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我测试了从1万到10万间隔1万和从10万到90万每间隔10万测试的结果变化&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;1912&quot; data-height=&quot;1330&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4033700-c40f60c1ef7b3f18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/4033700-c40f60c1ef7b3f18.png&quot; data-original-width=&quot;1912&quot; data-original-height=&quot;1330&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;222529&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;image.png&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;此方案在数据量达到3万条查询耗时就会超过1秒&lt;/li&gt;
&lt;li&gt;大约每增加1万条就会增加0.4秒的耗时&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;作者：麦田348462402&lt;br/&gt;链接：https://www.jianshu.com/p/455d0468f6d4&lt;br/&gt;來源：简书&lt;br/&gt;简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。&lt;/p&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 02 Nov 2018 07:40:00 +0000</pubDate>
<dc:creator>人生不如戏</dc:creator>
<og:description>目前越来越多的业务都会基于LBS，附近的人，外卖位置，附近商家等等，现就讨论离我最近这一业务场景的解决方案。 原文：https://www.jianshu.com/p/455d0468f6d4 目前已</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fu-yong/p/9896594.html</dc:identifier>
</item>
<item>
<title>jquery插件导出与word：jquery.wordexport.js - 王延领</title>
<link>http://www.cnblogs.com/kmonkeywyl/p/9896448.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kmonkeywyl/p/9896448.html</guid>
<description>&lt;p&gt;　　今天项目中遇到一个需求把我们系统中的统计数据导出来（主要是表格）。其实实现的的方法有很多，而此次针对我的系统第一获取数据有点慢，加上前不久写了一个在线阅读pdf与word，故此这次也想用前端的方式来导出。其实网上大致是两种一种是微软那种直接排除了，选择了运用第三方插件的方式。我用的jquery.wordexport.js导出的word，顺便尝试了一下jquery.table2excel.js导出Excel。顺便我的统计中也H5图表用的是echart。&lt;/p&gt;

&lt;p&gt;此插件运用其实很简单，在这个过程当中主要遇到的就是系统中的&lt;strong&gt;样式&lt;/strong&gt;没办法运用外联的方式。合并单元格rowspan我们系统中是用的display我需要把它移除。下面说过程。&lt;/p&gt;
&lt;h2&gt;1.js引用与实现&lt;/h2&gt;
&lt;p&gt;1.1.请按下方顺序引用不然是不能正常执行的依赖。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;jqwordexport/jquery-1.11.1.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;jqwordexport/FileSaver.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;jqwordexport/jquery.wordexport.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.2.实现代码就更简单了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
 $(&quot;#showDIV&quot;).wordExport(FineName)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 一行代码就行FineName为文件名。&lt;/p&gt;
&lt;h2&gt;2.问题的解决&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688939/201811/688939-20181102142415708-449994685.png&quot; alt=&quot;&quot; width=&quot;503&quot; height=&quot;293&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先这是我页面上的内容，我需要把这个table放到showDIV中的一个div中;还要同时把这个table所在的div中不需要的删除。如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
 var htmlstr = $(&quot;#HiddenDanger&quot;).html();//table所在div
 $('#printWord').html(htmlstr);
 $('#printWord div[data-role=pager]').remove();//把分页div删除
 $('#showDIV script').remove();//div引用的js代码删除
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 然后导出，这样你会发现只有这个table，并且table为虚线，是不是也要把查询条件，导出内容加上去。&lt;/p&gt;
&lt;p&gt;我把这些内容也同时加到了showDIV 中。如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;showDIV&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        #printWord table &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border-collapse&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; collapse&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 95%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
            #printWord table tr td &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

            #printWord table tr th &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2 &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;text-align: center;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        隐患等级数量统计
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;text-align: right;margin-right: 50px; font-size: 16px;font-style: italic&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;color: blue;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;线路&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;：&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;slineName&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;color: blue;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;时间&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;：&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;stm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;printWord&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是的通过进行动态复制查询条件，然后到处即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;function&lt;/span&gt;&lt;span&gt; word() {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stm = $('#tm'&lt;span&gt;).val()
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; slineName = $(&quot;#line&quot;).data(&quot;kendoDropDownList&quot;&lt;span&gt;).text();
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; FineName = $('#line').text() + $('#tm').val() + '隐患等级数量统计'&lt;span&gt;;
        $(&lt;/span&gt;'#slineName'&lt;span&gt;).html(slineName);
        $(&lt;/span&gt;'#stm'&lt;span&gt;).html(stm);
        $(&lt;/span&gt;&quot;#showDIV&quot;&lt;span&gt;).wordExport(FineName)
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上基本的html表格就能正常到处了，不需要调用后台，代码书写也方便。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688939/201811/688939-20181102143651932-2118833121.png&quot; alt=&quot;&quot; width=&quot;697&quot; height=&quot;460&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.echart 导出&lt;/h2&gt;
&lt;p&gt;上面也说我们系统中还有图标这种方式直接到处会发现他会自动把echart生成table&lt;/p&gt;
&lt;p&gt;暂时我用的网上的建议通过保存图片的方式进行img链接的方式进行导出了。如下：&lt;/p&gt;
&lt;p&gt;3.1.先获取echart 图片流&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将charts保存为图片&lt;/span&gt;
&lt;span&gt;    function SaveChartsPic() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;var chartExportUrl = '/lang/EchartTest/Export';&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; picBase64Info = myChart.getDataURL();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取echarts图的base64编码，为png格式。&lt;/span&gt;
&lt;span&gt;        $.ajax({
            url: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/ReportForms/Export&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            data: { base64Info: picBase64Info, fileType: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; },
            type: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;async&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            dataType: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            success: function (data) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果成功，记录图片的地址&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (data.code == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
                    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#img_Charts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).attr(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, data.imgUrl);
                }
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果失败，弹出提示&lt;/span&gt;
                &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    alert(data.Message);
                }
            },
        })
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.2.c#进行保存图片&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 保存图片
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;base64Info&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;fileType&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;保存的图片类型&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ActionResult Export(&lt;span&gt;string&lt;/span&gt; base64Info, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; fileType)
        {
            Result result &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Result();
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;[] arr = base64Info.Split(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;[] { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;base64,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }, StringSplitOptions.RemoveEmptyEntries);
                &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] byteArray = Convert.FromBase64String(arr[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; path = AppDomain.CurrentDomain.BaseDirectory +&lt;span&gt; chartsPath;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;string path = Server.MapPath(&quot;/Resoucrces/File/&quot;);&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;确保图片名称的唯一性&lt;/span&gt;
                Guid chartsID =&lt;span&gt; Guid.NewGuid();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;string filename = DateTime.Now.ToFileTime() + &quot;.&quot; + fileType;&lt;/span&gt;
                &lt;span&gt;string&lt;/span&gt; filename = chartsID + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; fileType;
                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; savePath = path +&lt;span&gt; filename;

                FileStream fs &lt;/span&gt;=&lt;span&gt; System.IO.File.Create(savePath);
                fs.Write(byteArray, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, byteArray.Length);
                fs.Close();
&lt;/span&gt;
                result.code = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                result.message &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;保存图片成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
               &lt;/span&gt;
                result.imgUrl =&lt;span&gt; savePath;
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                result.code &lt;/span&gt;= -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                result.message &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;引发异常&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Json(result, JsonRequestBehavior.AllowGet);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;让后把图片对应的div放进导出div中调整样式即可进行导出&lt;/p&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/688939/201811/688939-20181102153326132-1235097396.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;420&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 02 Nov 2018 07:34:00 +0000</pubDate>
<dc:creator>王延领</dc:creator>
<og:description>前言 今天项目中遇到一个需求把我们系统中的统计数据导出来（主要是表格）。其实实现的的方法有很多，而此次针对我的系统第一获取数据有点慢，加上前不久写了一个在线阅读pdf与word，故此这次也想用前端的方</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kmonkeywyl/p/9896448.html</dc:identifier>
</item>
<item>
<title>Node.js(day1) - 风之之</title>
<link>http://www.cnblogs.com/fzz9/p/9895779.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fzz9/p/9895779.html</guid>
<description>&lt;h3 id=&quot;什么是node.js&quot;&gt;1、什么是Node.js&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://newsletter.nodejs.org/&quot;&gt;Node.js Everywhere&lt;/a&gt;&lt;br/&gt;我们可以从官网的介绍来分析：&lt;a href=&quot;https://nodejs.org/zh-cn&quot;&gt;node中文网&lt;/a&gt; | &lt;a href=&quot;https://nodejs.org/en&quot;&gt;node引文网&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;3.8571428571429&quot;&gt;
&lt;p&gt;Node.js® 是一个基于 &lt;a href=&quot;https://developers.google.com/v8/&quot;&gt;Chrome V8 引擎&lt;/a&gt; 的 JavaScript 运行时。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;浏览器引擎可以解析并执行js，google的v8引擎速度很快，所以node.js可以在脱离浏览器的情况下解析并执行js代码。&lt;/li&gt;
&lt;li&gt;我们平常所用的js为浏览器中的js，而node.js可以看做服务端的js，所以node.js不是一门新语言也非新框架，而是js运行时。&lt;/li&gt;
&lt;li&gt;可以简单的将node.js理解为使用js语言进行web服务器开发。（为了实现这些功能，node.js提供了一些特别的api）&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;node.js使用事件驱动、非阻塞I/O模型使得其轻量、高效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;node.js的包生态系统，&lt;code&gt;npm&lt;/code&gt;是世界上最大的开源库生态系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;绝大多数javascript包都存放在了npm上，以方便开发者安装使用。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;node.js能做什么&quot;&gt;2、Node.js能做什么&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Web服务器后台&lt;/li&gt;
&lt;li&gt;命令行工具（如npm、git等都属于命令行工具，对于前端开发来说使用最多的也是node.js提供的命令行工具）&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;使用命令行解析js文件&quot;&gt;3、使用命令行解析js文件&lt;/h3&gt;
&lt;p&gt;写一个简单的js文件，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var str = 'hello node';
conole.log(str);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;随意命名，比如hello.js。（注意，不能使用node.js命名，否则会打开文本而不会解析执行）&lt;br/&gt;然后在文件存放处打开命令行，使用node指令执行即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13641355-6afb4d3ccd486411.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用node构建web服务器&quot;&gt;4、使用Node构建web服务器&lt;/h3&gt;
&lt;p&gt;我们已经知道Node可以解析js文件了，而js也可以进行web服务器搭建，所以我们只需要使用Node.js提供的相关api来搭建服务器，再用命令行去解析执行即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//类似我们需要使用某些对象一样，需要使用关键字进行New，在Node.js中我们使用require()方法进行模块加载（Node中的模块就相当于具有特殊功能的对象）
//要构建一个web服务器需要使用http模块
var http = require('http');

//使用http模块创建webServer
var server = http.createServer();

//设置端口号
server.listen(8888,function(){
    console.log(&quot;端口号启用成功!&quot;);
});

//服务器request事件：请求时触发
server.on('request',function(request,response){
    console.log(&quot;已经收到请求！&quot;+'请求路径为：'+request.url);//一些请求信息
    response.write(&quot;雷好，我系~渣渣辉!&quot;);//响应
    response.end(&quot;该干嘛干嘛去&quot;);//告知浏览器响应结束，不必等待
});

console.log(&quot;webServer at localhost://88888&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后我们打开浏览器输入：localhost://8888或127.0.0.1://8888就可以访问了。&lt;br/&gt;总结一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Node.js的一些特殊功能，比如创建服务器，是普通js没有的，我们把这些具有特殊功能的对象称作模块，要使用这些模块，需要使用&lt;code&gt;require()&lt;/code&gt;方法进行裁入。&lt;/li&gt;
&lt;li&gt;http模块可以创建服务器。使用&lt;code&gt;createServer([options][, requestListener])&lt;/code&gt;方法可以创建并返回一个服务器对象，然后我们就可以进行相应设置。&lt;/li&gt;
&lt;li&gt;服务器的&lt;code&gt;listen()&lt;/code&gt;方法为服务器设置端口号。&lt;/li&gt;
&lt;li&gt;服务器对象有很多事件，比如&lt;code&gt;request事件&lt;/code&gt;在浏览器请求该服务器时触发，利用回调函数可以进行request处理和response响应。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;response.end()&lt;/code&gt;方法告知浏览器响应结束，否则浏览器会一直等待响应。&lt;/li&gt;
&lt;li&gt;响应数据只能是二进制数据或字符串。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;node.js中的javascript&quot;&gt;5、Node.js中的JavaScript&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;EcmaScript（不包含BOM、DOM）&lt;/li&gt;
&lt;li&gt;核心模块&lt;/li&gt;
&lt;li&gt;第三方模块&lt;/li&gt;
&lt;li&gt;自定义模块&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;核心模块&quot;&gt;5.1核心模块&lt;/h5&gt;
&lt;p&gt;Node.js为JavaScript提供了很多服务器级别的api，这些api绝大多数都被包装到了一个具名的核心模块中，比如：&lt;br/&gt;文件操作的&lt;code&gt;fs&lt;/code&gt;（File System）模块、&lt;code&gt;http&lt;/code&gt;服务创建的http模块、路劲操作的&lt;code&gt;path&lt;/code&gt;模块、操作系统信息的&lt;code&gt;os&lt;/code&gt;模块等。&lt;br/&gt;而我们需要使用这些核心模块就需要使用&lt;code&gt;require()&lt;/code&gt;方法进行获取。&lt;/p&gt;
&lt;h5 id=&quot;自定义模块&quot;&gt;5.2自定义模块&lt;/h5&gt;
&lt;p&gt;Node.js中的模块有三种：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;具名的核心模块&lt;/li&gt;
&lt;li&gt;第三方模块&lt;/li&gt;
&lt;li&gt;自定义模块&lt;br/&gt;其中用户自定义的模块又叫文件模块，也就是那些js文件。&lt;br/&gt;我们知道，在命令行中node指令只能编译执行一个js文件，但是我们的项目不可能只有一个js文件，同样的，js文件也是模块，所以我们需要在某个文件中使用&lt;code&gt;require()&lt;/code&gt;方法解析执行文件模块。&lt;br/&gt;比如我现在有以下三个js文件：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;//a.js文件
console.log('a start');
require('./b.js');//解析执行b.js
console.log('a end');&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;//b.js文件
console.log('b start');
require('./c.js');//解析执行c.js
console.log('b end');&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;//c.js文件
console.log('CCCCCC');&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13641355-4a30d236e4165b1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;值得注意的点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在Node.js中没有全局作用域，只有文件作用域。也就是说每个js文件的作用域都是分离的，互不影响。&lt;/li&gt;
&lt;li&gt;相对路劲必须写&lt;code&gt;./&lt;/code&gt;；文件后缀可以省略。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;既然每个文件中的变量互不影响，那么如果我们需要使用到某个文件内部的变量时又该如何获取呢？其实require()方法除了解析执行文件模块之外还能返回文件模块自带的&lt;code&gt;exports对象&lt;/code&gt;，该对象默认为空{}。&lt;br/&gt;所以我们只需要在文件模块中将需要到处的值传入exports对象中即可：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var b = require('./b');//加载b文件
console.log(b);//输出b模块导出的对象&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;var str = '雷好，我系渣渣辉';
function add(x,y){
  return x+y;
}
exports.str = str;
exports.add = add;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13641355-de35a99a6998f999.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;响应内容的类型content-type&quot;&gt;6、响应内容的类型Content-Type&lt;/h3&gt;
&lt;p&gt;上文中我们响应的中文可能在浏览器中显示是乱码，这是因为Node.js默认的响应类型是utf-8，而浏览器不知道，如果浏览器默认编码不是utf-8就会产生乱码。&lt;br/&gt;response对象在响应的时候可以设置相关参数，比如响应头，响应内容的类型，而编码方式的信息就由&lt;code&gt;Content-Type&lt;/code&gt;来设置。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//设置响应头参数。响应类型为普通文本，编码方式为utf-8
response.setHeader('Content-Type','text/plain;charset=utf-8');&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var http = require('http');
var server = http.createServer();
server.listen(8888);

//服务器request事件：请求时触发
server.on('request',function(request,response){
    var url = request.url;
    var str = '&amp;lt;h1&amp;gt;如果你看得清我，说明我没有乱码!&amp;lt;/h1&amp;gt;'
    if(url == '/plain'){
        response.setHeader('Content-Type','text/plain;charset=utf-8');//返回普通文本
    }else if(url == '/html'){
        response.setHeader('Content-Type','text/html;charset=utf-8');//返回html文本
    }else{
        str = 'please use url /plain or /html and get the response!'
    }
    response.end(str);
});

console.log(&quot;webServer running at localhost://88888&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13641355-704503869b076e67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13641355-56aca76047e0ffeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;fs核心文件&quot;&gt;7、fs核心文件&lt;/h3&gt;
&lt;p&gt;fs全称File System，用于操作文件，基本的两个功能为为读文件和写文件。&lt;/p&gt;
&lt;h5 id=&quot;使用fs读文件readfile&quot;&gt;7.1使用fs读文件:&lt;code&gt;readFile()&lt;/code&gt;&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;//使用require方法加载fs模块
var fs = require('fs');
fs.readFile('hello.js',function(error,data){
   if(error){
       console.log('文件读取失败!');
       return;
   }
   console.log(data.toString());
});&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;使用fs的readFile()方法，第一个参数为文件地址，第二个参数为回调函数。&lt;/li&gt;
&lt;li&gt;回调函数有两个参数，error和data，当文件读取成功时，error返回null,data返回文件的&lt;code&gt;二进制数据&lt;/code&gt;；当文件读取失败时，error返回包含错误信息的对象，data返回undefined。&lt;/li&gt;
&lt;li&gt;使用data.toString()方法可以讲二进制数据转化为utf-8编码字符串。&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;使用fs写文件writefile&quot;&gt;7.2使用fs写文件:&lt;code&gt;writeFile()&lt;/code&gt;&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;var fs = require('fs');
fs.writeFile('hello.txt','大噶好，I\'m 渣渣辉',function(error){
    if(!error){
        console.log(&quot;文件写入成功!&quot;);
    }else{
        console.log(&quot;文件写入失败!&quot;);
    }
});&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;使用fs.writeFile()方法写入文件。第一个参数为文件地址及文件名，第二个参数为文件的文本信息，可以是字符串，也可以是二进制数据，第三个参数为回调函数。&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;案例利用fs文件的读写操作实现文件复制&quot;&gt;7.3案例：利用fs文件的读写操作实现文件复制&lt;/h5&gt;
&lt;p&gt;逻辑很简单，将读取的文件数据写入新的文件中即可&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var fs = require('fs');

fs.readFile('jinx.jpeg',function(error,data){
    if(error){
        console.log('文件读取失败!');
    }else{
        //将读取的数据写入新的文件中
        fs.writeFile('jinx(copy).jpeg',data,function(error){
            if(!error){
                console.log(&quot;文件写入成功!&quot;);
            }else{
                console.log(&quot;文件写入失败!&quot;);
            }
        });
    }   
});&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;案例使用node加载index.html并实现简单页面跳转&quot;&gt;8、案例：使用Node加载index.html并实现简单页面跳转&lt;/h3&gt;
&lt;p&gt;由于文件过多这里不再展示，假设这是一个本地项目，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13641355-2dba46c2abcaff6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们希望使用Node.js来搭建服务器，并在服务器上运行我们的项目。&lt;br/&gt;大家服务器很简单，关键点在于我们需要根据请求路劲来加载相应的资源文件，这些上面的案例都能实现。类似这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13641355-5f2bad543775b6fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们根据&lt;code&gt;request.url&lt;/code&gt;使用&lt;code&gt;fs核心模块&lt;/code&gt;来加载文件，并设置相应的&lt;code&gt;Content-Type&lt;/code&gt;在浏览器中正确裁入文件类型。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;openfile()是我自定义的一个方法。&lt;/li&gt;
&lt;li&gt;可以发现，这种加载资源的方式并不明智，我们每发起一次资源请求，例如一张图片，我们就需要配置依次资源路径，这是很繁琐且易错的。但目前为止上文所涉及的知识只能这样解决。所以需要继续升入，出门左转。&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Fri, 02 Nov 2018 07:02:00 +0000</pubDate>
<dc:creator>风之之</dc:creator>
<og:description>1、什么是Node.js</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fzz9/p/9895779.html</dc:identifier>
</item>
<item>
<title>.Net Core 中的 DI使用 - IOC原则 - eSoftor</title>
<link>http://www.cnblogs.com/Tmc-Blog/p/9893349.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Tmc-Blog/p/9893349.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;概要：因为不知道写啥，所以随便找个东西乱说几句，嗯，就这样，就是这个目的。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;span&gt;1.IOC是啥呢？&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　IOC - Inversion of Control，即控制反转的意思，这里要搞明白的就是，它是一种思想，一种用于设计的方式（手段），（并不是前几天园子中刚出的一片说是原则），OO原则不包含它，再说下，他不是原则！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　那么，既然是控制反转，怎么反转的？对吧，说到重点了吧。很简单，通过一个容器，将对象注册到这个容器之后，由这个容器来创建对象，从而免去了手动创建对象以及创建后对象（资源）的获取。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　你可能又会问，有什么好处？我直接new不也一样的吗？对的，你说的很对，但是这样做必然导致了对象之间的耦合度增加了，既不方便测试，又不方便复用；IOC却很好的解决了这些问题，可以i很容易创建出一个松耦合的应用框架，同时更方便于测试。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　常用的 IOC工具有 Autofac,castle windsor,unit,structMap等，本人使用过的只有 autofac,unit,还有自带的mef,,,也能算一个吧，还有现在的core的 DependencyInJection。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2.Core中的DI是啥？&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;依赖注入的有三种方式：属性，构造函数，接口注入；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在core之前，我们在.net framework中使用 autofac的时候，这三种方式我们可以随意使用的，比较方便(因为重点不是在这，所以不说core之前)，但是有一点是，在web api和 web中属性注入稍微有点不同，自行扩展吧。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　core中我们使用DI(dependency injection)的时候，属性注入好像还不支持，所以跳过这个，我们使用更多的是通过自定义接口使用构造函数注入。下面会有演示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　演示前我们先弄清楚 core中的这个 dependencyInJection到底是个啥，他是有啥构成的。这是git上提供的源码：https://github.com/aspnet/DependencyInjection，但是，，那么一大陀东西你肯定不想看，想走捷径吧，所以这里简要说一下，看图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/557390/201811/557390-20181101212616021-782408543.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当我们创建了一个core 的项目之后，我们，会看到 startUp.cs的ConfigureServices使用了一个IServiceCollection的参数，这个东西，就是我们1中所说的IOC的容器，他的构成如图所示，是由一系列的ServiceDescriptor组成，是一个集合对象，而本质上而言，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ServiceDescriptor也是一个容器，其中定义了对象了类型以及生命周期，说白了控制生命周期的，也是有他决定的（生命周期：Scoped：本次完整请求的生命，Singleton：伴随整个应用程序神一样存在的声明，Transient：瞬时声明，用一下消失）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另外，我们还会见到另一个东西，IServiceProvider,这个是服务的提供器,IServiceCollection在获取一系列的ServiceDescriptor之后其实他还是并没有创建我们所需要的实现对象的，比如AssemblyFinder实现了IAssemblyFinder的接口，此时我们只是将其加入IserviceCollection，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;直接使用IAssemblyFinder获取到的一定是null对象，这里是通过BuildServiceProvider()这个方法，将这二者映射在一起的，此时这个容器才真正的创建完成，这时候我们再使用 IAssemblyFinder的时候便可以正常。这个动作好比是我们自己通过Activator 反射创建某个接口的实现类,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然其内部也是这个样的实现道理。如果需要更深入见这篇文章：https://www.cnblogs.com/cheesebar/p/7675214.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 好了，扯了这么多理论，说一千道一万不如来一个实战，下面就看怎么用。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;3.怎么用？&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　首先我们先快速创建一个项目，并创建ICustomerService接口和CustomerServiceImpl实现类，同时在startup.cs的ConfigureService中注册到services容器：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/557390/201811/557390-20181101220049825-335683484.png&quot; alt=&quot;&quot; width=&quot;247&quot; height=&quot;154&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　测试代码：　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_91e2e672-33e8-42dc-93cf-1d8ed81fd53c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_91e2e672-33e8-42dc-93cf-1d8ed81fd53c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_91e2e672-33e8-42dc-93cf-1d8ed81fd53c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ICustomerService : IDependency
    {
        Task&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; GetCustomerInfo();
    }
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerServiceImpl : ICustomerService
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; GetCustomerInfo()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; Task.FromResult(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;放了一年的牛了&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
startUp.cs的ConfigureService中注册到容器：
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
            services.AddTransient&lt;/span&gt;&amp;lt;ICustomerService, CustomerServiceImpl&amp;gt;&lt;span&gt;();
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
        }
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;controller中的注入&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ICustomerService _customerService;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ValuesController(ICustomerService customerService)
        {
            _customerService &lt;/span&gt;=&lt;span&gt; customerService;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET api/values&lt;/span&gt;
&lt;span&gt;        [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;ActionResult&amp;lt;IEnumerable&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; Get()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;[] { &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _customerService.GetCustomerInfo()};
        }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　然后我们在controller中注入并查看结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/557390/201811/557390-20181101220442414-536867970.png&quot; alt=&quot;&quot; width=&quot;327&quot; height=&quot;91&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这就实现了我们想要的效果了，这个比较简单，入门都算不上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　 可以看到我们注册到services容器中的时候，是一一对应写入的（services.AddTransient&amp;lt;ICustomerService, CustomerServiceImpl&amp;gt;();），但是实际开发会有很多个接口和接口的实现类，多个人同时改这个文件（startup.cs），那还不坏事儿了嘛，集体提交肯定出现冲突或者重复或者遗漏.&lt;/span&gt;&lt;span&gt;对吧，而且不方便测试；&lt;/span&gt;&lt;span&gt;所以：怎么优雅一点？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;4.怎么优雅的使用？&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　  实际开发过程中，我们不可能去手动一个一个的注入的，除非你项目组就你一个人。所以，需要实现按自动注入，还是就上面的测试，再加一个 IProductService和和他的实现类ProductServiceImpl,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;public interface IProductService &lt;/span&gt;&lt;br/&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Task&amp;lt;string&amp;gt; GetProductInfo();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;public class ProductServiceImpl : IProductService&lt;/span&gt;&lt;br/&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public async Task&amp;lt;string&amp;gt; GetProductInfo()&lt;/span&gt;&lt;br/&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;return await Task.FromResult(&quot;我是一个产品&quot;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同时controller中修改下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_0eeea572-147e-417c-97b2-950593ade149&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0eeea572-147e-417c-97b2-950593ade149&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_0eeea572-147e-417c-97b2-950593ade149&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ICustomerService _customerService;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IProductService _productService;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ValuesController(ICustomerService customerService, IProductService productService)
        {
            _customerService &lt;/span&gt;=&lt;span&gt; customerService;
            _productService &lt;/span&gt;=&lt;span&gt; productService;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET api/values&lt;/span&gt;
&lt;span&gt;        [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;ActionResult&amp;lt;IEnumerable&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; Get()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;[] { &lt;span&gt;await&lt;/span&gt; _customerService.GetCustomerInfo(), &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _productService.GetProductInfo() };
        }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　实现自动注入就需要有一个对象的查找的依据，也就是一个基对象，按照我们以往使用Autofac的习惯，我们会定义一个IDependency接口：好，那我们就定义一个&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;public interface IDependency&lt;/span&gt;&lt;br/&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　 然后修改 ICustomerService和IProductService的接口，都去继承这个IDependency.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　修改完成后重点来了，怎么通过Idependency获取的呢？像autofac的使用一样？当然已经有dependencyInjection的扩展插件可以支持 scan对应的依赖项并注册到IOC ，但是毕竟是人家的东西，所以我们自己搞搞。也好解决，我们获取到当前应用的依赖项，然后找到Idependecy对应的实现对象(类)，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1).使用 DependencyContext 获取当前应用的依赖项：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　该对象在Microsoft.Extensions.DependencyModel空间下，可以通过 DependencyContext.Default获取到当前应用依赖的所有对象(dll)，如下实现：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_82a14be7-05cf-4102-b24d-1e7414907760&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_82a14be7-05cf-4102-b24d-1e7414907760&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_82a14be7-05cf-4102-b24d-1e7414907760&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;DependencyContext context =&lt;span&gt; DependencyContext.Default;
&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;[] fullDllNames =&lt;span&gt; context
                .CompileLibraries
                .SelectMany(m &lt;/span&gt;=&amp;gt;&lt;span&gt; m.Assemblies)
                .Distinct().Select(m &lt;/span&gt;=&amp;gt; m.Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.dll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;))
                .ToArray();&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　因为我们下面将使用Assembly.Load(dll的名称)加载对应的dll对象，所以这里把后缀名给替换掉。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　但是这里有个问题，这样获取到的对象包含了 微软的一系列东西，不是我们注入所需要的，或者说不是我们自定义的对象，所以需要过滤掉。不必要的对象包含（我在测试时候大致列出来这几个）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_2eade8f1-cccb-49ed-8736-2bf539b63c3f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2eade8f1-cccb-49ed-8736-2bf539b63c3f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_2eade8f1-cccb-49ed-8736-2bf539b63c3f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;string&lt;/span&gt;[] 不需要的程序及对象 =&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Microsoft&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;netstandard&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dotnet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Window&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mscorlib&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Newtonsoft&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Remotion.Linq&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            };&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　所以我们再过滤掉上面这几个不需要的对象&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_bc507bf1-3266-4531-b023-6127ab7f649f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bc507bf1-3266-4531-b023-6127ab7f649f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_bc507bf1-3266-4531-b023-6127ab7f649f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;只取对象名称&lt;/span&gt;
            List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; shortNames = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
            fullDllNames.ToList().ForEach(name &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; n = name.Substring(name.LastIndexOf(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!不需要的程序及对象.Any(non =&amp;gt;&lt;span&gt; n.StartsWith(non)))
                    shortNames.Add(n);
            });&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　最后，就是使用Assembly.Load加载获取并过滤之后的程序集对象了，同时获取到IDependency的子对象的实现类集合对象（types）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_64cd0df2-2251-482b-baf8-3f7e57e6363e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_64cd0df2-2251-482b-baf8-3f7e57e6363e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_64cd0df2-2251-482b-baf8-3f7e57e6363e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;List&amp;lt;Assembly&amp;gt; assemblies = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Assembly&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; fileName &lt;span&gt;in&lt;/span&gt;&lt;span&gt; shortNames)
            {
                AssemblyName assemblyName &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AssemblyName(fileName);
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; { assemblies.Add(Assembly.Load(assemblyName)); }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; { }
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; baseType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(IDependency);
            Type[] types &lt;/span&gt;= assemblies.SelectMany(assembly =&amp;gt;&lt;span&gt; assembly.GetTypes())
                .Where(type &lt;/span&gt;=&amp;gt; type.IsClass &amp;amp;&amp;amp; baseType.IsAssignableFrom(type)).Distinct().ToArray();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;此时再看我们的使用效果：&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/557390/201811/557390-20181102094902260-1083794976.png&quot; alt=&quot;&quot; width=&quot;208&quot; height=&quot;148&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在跟目录再新增一个以来扩展类：其中的实现就是上面说的获取程序及以及注册到services容器：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里也就是上面说的 完整的代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_92afdeb9-e676-49ce-9fa3-7177410afb36&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_92afdeb9-e676-49ce-9fa3-7177410afb36&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_92afdeb9-e676-49ce-9fa3-7177410afb36&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DependencyExtensions
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IServiceCollection RegisterServices(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; IServiceCollection services)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;之前的实现，
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;services.AddTransient&amp;lt;ICustomerService, CustomerServiceImpl&amp;gt;();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;services.AddTransient&amp;lt;IProductService, ProductServiceImpl&amp;gt;();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;现在的实现&lt;/span&gt;
            Type[] types =&lt;span&gt; GetDependencyTypes();
            types&lt;/span&gt;?.ToList().ForEach(t =&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; @interface = t.GetInterfaces().Where(it =&amp;gt; it.GetType() != &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(IDependency)).FirstOrDefault();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;services.AddTransient(@interface.GetType(), t.GetType());&lt;/span&gt;
&lt;span&gt;                services.AddTransient(@interface.GetTypeInfo(),t.GetTypeInfo());
            });

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; services;
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Type[] GetDependencyTypes()
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;[] 不需要的程序及对象 =&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Microsoft&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;netstandard&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dotnet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Window&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mscorlib&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Newtonsoft&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Remotion.Linq&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            };

            DependencyContext context &lt;/span&gt;= DependencyContext.Default;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;depnedencyModel空间下,如果是 传统.netfx，可以使用 通过 Directory.GetFiles获取 AppDomain.CurrentDomain.BaseDirectory获取的目录下的dll及.exe对象;&lt;/span&gt;
            &lt;span&gt;string&lt;/span&gt;[] fullDllNames =&lt;span&gt; context
                .CompileLibraries
                .SelectMany(m &lt;/span&gt;=&amp;gt;&lt;span&gt; m.Assemblies)
                .Distinct().Select(m &lt;/span&gt;=&amp;gt; m.Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.dll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;))
                .ToArray();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;只取对象名称&lt;/span&gt;
            List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; shortNames = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
            fullDllNames.ToList().ForEach(name &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; n = name.Substring(name.LastIndexOf(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!不需要的程序及对象.Any(non =&amp;gt;&lt;span&gt; n.StartsWith(non)))
                    shortNames.Add(n);
            });

            List&lt;/span&gt;&amp;lt;Assembly&amp;gt; assemblies = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Assembly&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; fileName &lt;span&gt;in&lt;/span&gt;&lt;span&gt; shortNames)
            {
                AssemblyName assemblyName &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AssemblyName(fileName);
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; { assemblies.Add(Assembly.Load(assemblyName)); }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; { }
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; baseType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(IDependency);
            Type[] types &lt;/span&gt;= assemblies.SelectMany(assembly =&amp;gt;&lt;span&gt; assembly.GetTypes())
                .Where(type &lt;/span&gt;=&amp;gt; type.IsClass &amp;amp;&amp;amp;&lt;span&gt; baseType.IsAssignableFrom(type)).Distinct().ToArray();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; types;
        }
    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注：&lt;span&gt;获取程序集的这个实现可以单独放到一个类中实现，然后注册成为singleton对象，同时在该类中定义一个私有的 几何对象，用于存放第一次获取的对象集合(types)，以后的再访问直接从这个变量中拿出来，减少不必要的资源耗费和提升性能&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此时startup.cs中只需要一行代码就好了：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;services.RegisterServices();&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;看结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/557390/201811/557390-20181102095518060-1029037003.png&quot; alt=&quot;&quot; width=&quot;386&quot; height=&quot;64&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;过滤之后的仅有我们定义的两个对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/557390/201811/557390-20181102095756045-154265143.png&quot; alt=&quot;&quot; width=&quot;385&quot; height=&quot;74&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;5.怎么更优雅的使用？&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　以上只是获取我们开发过程中使用的一些业务或者逻辑实现对象的获取，集体开发的时候 假设没人或者每个小组开发各自模块时候，创建各自的应用程序及对象（类似模块式或插件式开发），上面那样岂不是不能满足了？每个组的每个模块都定义一次啊？不现实是吧。&lt;/span&gt;&lt;span&gt;比如：如果按照DDD的经典四层分层的话，身份验证或者授权 功能的实现应该是在基础设施曾(Infrastructure)实现的，再比如 如果按照聚合边界的划分，不同域可能是单独一个应用程序集包含独自的上下文对象，那么个开发人员开发各自模块，这时候就需要一个统一的DI注入的约束了，否则将会变得很乱很糟糕。所以我们可以将这些独立的模块可统称为Module模块，用谁就注入谁。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如下(模块的基类)：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_c006b5d5-fb09-4908-951f-1131498ca223&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c006b5d5-fb09-4908-951f-1131498ca223&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_c006b5d5-fb09-4908-951f-1131498ca223&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Module
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取 模块启动顺序，模块启动的顺序先按级别启动，同一级别内部再按此顺序启动，
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 级别默认为0，表示无依赖，需要在同级别有依赖顺序的时候，再重写为&amp;gt;0的顺序值
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Order =&amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt;&lt;span&gt; IServiceCollection RegisterModule(IServiceCollection services)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; services;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 应用模块服务
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;provider&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;服务提供者&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; UseModule(IServiceProvider provider)
        {
        }
    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　定义一个注入的使用基对象，其中包含了两个个功能：&lt;/p&gt;
&lt;p&gt;　　1).将当前模块涉及的依赖项注册到services容器的功能;&lt;/p&gt;
&lt;p&gt;　　2).在注册到容器的对象中包含部分方法需要被调用之后才能初始化的对象（资源）方法，该方法将在startUp.cs的Configure方法中使用，类似UseMvc();&lt;/p&gt;
&lt;p&gt;　　3).一个用于标记注入到services容器的先后顺序的标识。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这个Order存在的必要性？是很有必要的，比如在开发过程中，每个模块独立开发需要独立的上下文对象，那么岂不是要每个模块都创建一次数据库连接配置，蛋疼吧？所以，可以将上下文访问单独封装，比如我们惯用的仓储对象，和工作单元，用来提供统一的上下文访问入口（iuow），以及统一的领域对象的操作方法（irepository-CURD）,然后将iuow注入到各个模块以便获取上下文对象。那么这就有个先后顺序了，肯定要先注册这个仓储和工作单元所在的程序集（module）,其次是每个业务的插件模块。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　接下来就是定义这个Module的查找器，其实和上面 4 中的类似，只是需要将 basetType(IDependency替换成 Module即可)，assembly的过滤条件换成 type =&amp;gt; type.IsClass &amp;amp;&amp;amp;!type.IsAbstract &amp;amp;&amp;amp; baseType.IsAssignableFrom(type)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当然，这里的IsAssignableFrom是针对非泛型对象的，如果是泛型对象需要单独处理下，如下，源码来自O#：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_eb648f13-1fdf-4047-84b2-2743f4c1e3e5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_eb648f13-1fdf-4047-84b2-2743f4c1e3e5&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_eb648f13-1fdf-4047-84b2-2743f4c1e3e5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 判断当前泛型类型是否可由指定类型的实例填充
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;genericType&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;泛型类型&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;type&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;指定类型&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsGenericAssignableFrom(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; Type genericType, Type type)
        {
            genericType.CheckNotNull(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;genericType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            type.CheckNotNull(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;genericType.IsGenericType)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;该功能只支持泛型类型的调用，非泛型类型可使用 IsAssignableFrom 方法。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }

            List&lt;/span&gt;&amp;lt;Type&amp;gt; allOthers = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Type&amp;gt;&lt;span&gt; { type };
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (genericType.IsInterface)
            {
                allOthers.AddRange(type.GetInterfaces());
            }

            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; other &lt;span&gt;in&lt;/span&gt;&lt;span&gt; allOthers)
            {
                Type cur &lt;/span&gt;=&lt;span&gt; other;
                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (cur != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cur.IsGenericType)
                    {
                        cur &lt;/span&gt;=&lt;span&gt; cur.GetGenericTypeDefinition();
                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cur.IsSubclassOf(genericType) || cur ==&lt;span&gt; genericType)
                    {
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    }
                    cur &lt;/span&gt;=&lt;span&gt; cur.BaseType;
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这时候假设我们有 A：订单模块，B：支付模块, C:收货地址管理模块，D：（授权）验证模块 等等，每个模块中都会单独定义一个继承自Module这个抽象对象的子类，每个子对象中注册了各自的模块所需的依赖对象到容器中，这时候我们只需要在 应用层（presentation layer）的 startup.cs中将模块注入即可：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;修改 4 中获取程序及对象的方法 获取模块(Module)之后依次注入模块：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ca4b7f76-b9b1-43e1-8cf7-51f7677b6cfa&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ca4b7f76-b9b1-43e1-8cf7-51f7677b6cfa&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ca4b7f76-b9b1-43e1-8cf7-51f7677b6cfa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; moduleObjs =&lt;span&gt; 通过4 中的方法获取到的程序集对象（Module）;
modules &lt;/span&gt;=&lt;span&gt; moduleObjs
.Select(m &lt;/span&gt;=&amp;gt;&lt;span&gt; (Module.Module)Activator.CreateInstance(m))
.OrderBy(m &lt;/span&gt;=&amp;gt;&lt;span&gt; m.Order);
&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; m &lt;span&gt;in&lt;/span&gt;&lt;span&gt; modules)
{
services &lt;/span&gt;=&lt;span&gt; m.RegisterModule(services);
Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;模块:【{m.GetType().Name}】注入完成&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; services;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 　 如果运行项目的效果基本如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/557390/201811/557390-20181102145102857-1776585331.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;6.最后&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　偷懒了，篇幅有点长了，写多了耗费太多时间了，，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 02 Nov 2018 06:55:00 +0000</pubDate>
<dc:creator>eSoftor</dc:creator>
<og:description>概要：因为不知道写啥，所以随便找个东西乱说几句，嗯，就这样，就是这个目的。 1.IOC是啥呢？ IOC - Inversion of Control，即控制反转的意思，这里要搞明白的就是，它是一种思想</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Tmc-Blog/p/9893349.html</dc:identifier>
</item>
<item>
<title>设计模式之代理模式 - icanner</title>
<link>http://www.cnblogs.com/icanner/p/9896230.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/icanner/p/9896230.html</guid>
<description>&lt;h2&gt;&lt;span&gt;一 : 什么是代理(Proxy)模式？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;代理模式的定义：&lt;/strong&gt;为其他对象提供一种&lt;a href=&quot;https://baike.baidu.com/item/%E4%BB%A3%E7%90%86&quot; target=&quot;_blank&quot;&gt;代理&lt;/a&gt;以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到&lt;span&gt;&lt;strong&gt;中介&lt;/strong&gt;&lt;/span&gt;的作用。通俗讲.&lt;span&gt;&lt;strong&gt;就是真正的业务功能还是由委托类来实现，但是在实现业务之前的一些公共服务，例如在项目开发中忘记了加入缓冲、日志等的功能。后期想加入，就可以使用代理来实现而没有必要打开已经封装好的委托类。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;现实生活中的代理模式&lt;/strong&gt;:房东--&amp;gt;中介--&amp;gt;租客 中介就是代理方,负责看房,谈价格,签合同等琐事,房东只需收钱.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;二 : 为什么要有代理模式？&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;para&quot;&gt;&lt;span&gt;(1).&lt;span&gt;职责清晰:&lt;/span&gt;真实的角色就是实现实际的&lt;a href=&quot;https://baike.baidu.com/item/%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91&quot; target=&quot;_blank&quot;&gt;业务逻辑&lt;/a&gt;，不用关心其他非本职责的事务，通过后期的代理完成一件完成事务，附带的结果就是编程简洁清晰。&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;(2).代理对象可以在客户端和目标对象之间起到&lt;span&gt;中介&lt;/span&gt;的作用，客户端使用的是代理对象中的方法,这样起到了中介的作用和&lt;span&gt;保护了目标对象&lt;/span&gt;的作用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(3).高拓展性:无论被代理对象如何改变，只要代理类和被代理类都实现了统一接口，都不同修改代理类，而且即使扩展了新的被代理类，代理类也可以使用，只要创建代理类的时候传入对应的被代理类对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
&lt;h2&gt;&lt;span&gt;三 : 怎么使用代理模式？&lt;/span&gt;&lt;/h2&gt;
&lt;/p&gt;
&lt;h3 class=&quot;para&quot;&gt;&lt;span&gt;3.1 静态代理 &lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　静态代理定义 : 静态代理是由程序员创建或特定工具自动生成源代码，再对其编译。&lt;strong&gt;最大的特点就是在程序运行时代理类的.class文件就已经存在了&lt;/strong&gt;，但是这有一个很大的缺陷即&lt;strong&gt;每一个代理类只能为一个接口服务。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;&lt;strong&gt;3.1.1 静态代理示例:&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;①:定义服务接口&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.canner.proxy;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Auther: canner
 * @Date: 12:18 2018/11/02 
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ICustomer {
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; buyHosue();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;②:定义服务实现类&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.canner.proxy.ICustomer;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Auther: canner
 * @Date: 12:20 2018/11/02 
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomerImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ICustomer{

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; buyHosue() {
        System.out.println(&lt;/span&gt;&quot;顾客买了一套房&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;③:创建客户代理类&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.canner.proxy;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.canner.proxy.ICustomer;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Auther: canner
 * @Date: 12:33 2018/11/02 
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomerProxy &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ICustomer{

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ICustomer customer;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; CustomerProxy(&lt;span&gt;final&lt;/span&gt;&lt;span&gt; ICustomer customer) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.customer=&lt;span&gt; customer;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; buyHosue() {
        System.out.println(&lt;/span&gt;&quot;客户买房前做的事情&quot;&lt;span&gt;);
        customer.buyHosue();
        System.out.println(&lt;/span&gt;&quot;客户买房后做的事情&quot;&lt;span&gt;);

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;④:编写测试&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @Auther: canner
 * @Date: 12:25 2018/11/02
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProxyTest {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        ICustomer customer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomerImpl();
        CustomerProxy customerProxy &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomerProxy(customer);
        customerProxy.buyHosue();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;静态代理总结：&lt;span&gt;&lt;strong&gt;代理对象和实际对象实现的是同一个接口&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;优点：可以做到在符合开闭原则的情况下对目标对象进行功能扩展。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;缺点：1:&lt;span&gt;&lt;strong&gt;每一个代理类只能为一个接口服务&lt;/strong&gt;&lt;/span&gt;，工作量太大，不易管理。同时接口一旦发生改变，代理类也得相应修改。&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　  &lt;/strong&gt;  2:在程序运行之前静态代理的.class文件已经存在了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;           3:如果接口新增一个方法,代理类也得维护新增内容。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;3.2 动态代理&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;3.2.1 JDK动态代理&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;动态代理 : 在动态代理中我们不再需要再手动的创建代理类，我们只需要编写一个动态处理器就可以了。真正的代理对象由JDK在运行时利用&lt;span&gt;反射&lt;/span&gt;为我们&lt;span&gt;动态&lt;/span&gt;的来创建。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span class=&quot;10&quot;&gt;&lt;span class=&quot;10&quot;&gt;&lt;span class=&quot;10&quot;&gt;JDK动态代理&lt;span class=&quot;10&quot;&gt;&lt;span class=&quot;10&quot;&gt;&lt;span class=&quot;10&quot;&gt;&lt;span class=&quot;10&quot;&gt;&lt;strong&gt;&lt;span&gt;必须要求真实对象是有接口&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;JDK动态代理操作步骤 ：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;① 实现 InvocationHandler 接口，创建自己增强代码的处理器。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;② 给 Proxy 类提供 ClassLoader 对象和代理接口类型数组，创建动态代理对象。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;③ 在处理器中实现增强操作。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;&lt;span&gt;JDK动态代理类:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; TransactionManagerAdvice &lt;span&gt;implements&lt;/span&gt;&lt;span&gt;&lt;span&gt; java.lang.reflect&lt;/span&gt;.InvocationHandler {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Object target;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;真实对象(对谁做增强)&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; TransactionManager txManager;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;事务管理器(模拟)&lt;/span&gt;

    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setTxManager(TransactionManager txManager) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.txManager =&lt;span&gt; txManager;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setTarget(Object target) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.target =&lt;span&gt; target;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个代理对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &amp;lt;T&amp;gt;&lt;span&gt; T getProxyObject() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (T) Proxy.newProxyInstance(target.getClass().getClassLoader(), &lt;span&gt;//&lt;/span&gt;&lt;span&gt;类加载器,一般跟上真实对象的类加载器&lt;/span&gt;
                target.getClass().getInterfaces(), &lt;span&gt;//&lt;/span&gt;&lt;span&gt;真实对象所实现的接口(JDK动态代理必须要求真实对象有接口)&lt;/span&gt;
                &lt;span&gt;this&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如何做事务增强的对象&lt;/span&gt;
&lt;span&gt;    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如何为真实对象的方法做增强的具体操作&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; Object invoke(Object proxy, Method method, Object[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {&lt;br/&gt;　　　　 //System.out.println(proxy); &lt;strong&gt;&lt;span&gt;如果打印这行会报栈溢出
        &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (method.getName().startsWith(&quot;get&quot;) || method.getName().startsWith(&quot;list&quot;&lt;span&gt;)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; method.invoke(target, args);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;放行&lt;/span&gt;
&lt;span&gt;        }
        
        Object ret &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        txManager.begin();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;---------------------------------------------------------------&lt;/span&gt;
            ret = method.invoke(target, args);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用真实对象的方法
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;---------------------------------------------------------------&lt;/span&gt;
&lt;span&gt;            txManager.commit();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
            txManager.rollback();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;15&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意事项:&lt;span&gt;反编译字节码文件后,发现底层对hashCode(),equals(),toString()方法和真实对象中的方法做了增强,所以在invoke()方法中如果直接打印proxy,相当于调用toString()方法,因此会递归调用导致栈溢出.调用proxy.getClass()方法则不会出现问题.&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt; &lt;/p&gt;
&lt;h4&gt;3.2.2 CGLIB动态代理&lt;/h4&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;使用JDK的动态代理,只针对于目标对象有接口的情况,如果目标对象没有接口,则需要使用CGLIB的动态处理方式&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;&lt;span&gt;CGLIB动态代理类:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; TransactionManagerAdvice &lt;span&gt;implements&lt;/span&gt;&lt;span&gt;&lt;span&gt; org.springframework.cglib.proxy&lt;/span&gt;.InvocationHandler {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Object target;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;真实对象(对谁做增强)&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; TransactionManager txManager;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;事务管理器(模拟)&lt;/span&gt;

    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setTxManager(TransactionManager txManager) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.txManager =&lt;span&gt; txManager;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setTarget(Object target) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.target =&lt;span&gt; target;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个代理对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &amp;lt;T&amp;gt;&lt;span&gt; T getProxyObject() {
        Enhancer enhancer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Enhancer();
        enhancer.setSuperclass(target.getClass());&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将继承于哪一个类,去做增强&lt;/span&gt;
        enhancer.setCallback(&lt;span&gt;this&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置增强的对象&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; (T) enhancer.create();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建代理对象&lt;/span&gt;
&lt;span&gt;    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如何为真实对象的方法做增强的具体操作&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; Object invoke(Object proxy, Method method, Object[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {
        Object ret &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        txManager.begin();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;---------------------------------------------------------------&lt;/span&gt;
            ret = method.invoke(target, args);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用真实对象的方法
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;---------------------------------------------------------------&lt;/span&gt;
&lt;span&gt;            txManager.commit();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
            txManager.rollback();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 02 Nov 2018 06:52:00 +0000</pubDate>
<dc:creator>icanner</dc:creator>
<og:description>一 : 什么是代理(Proxy)模式？ 代理模式的定义：为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/icanner/p/9896230.html</dc:identifier>
</item>
<item>
<title>webpack+ES6+Sass搭建多页面应用 - 路陆</title>
<link>http://www.cnblogs.com/hess/p/9896197.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hess/p/9896197.html</guid>
<description>&lt;p&gt;webpack同之前的gulp相比，gulp属于非模块化打包工具，webpack属于模块化打包工具，两者的优劣这里不做过多分析（可自行百度）。&lt;/p&gt;
&lt;p&gt;目的：是为了分享一下使用过程中，用到的插件、loader、遇到的各种问题以及解决办法，最后会附上最终代码。&lt;/p&gt;
&lt;p&gt;在这个项目中，用&lt;span&gt;webpack打包css、scss、js、图片文件、jquery、第三方插件、字体图标，编译es6、压缩html、压缩js、压缩css&lt;/span&gt;，基本涵盖了常用的东西。&lt;/p&gt;
&lt;p&gt;代码结构如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/982312/201811/982312-20181102131736999-3385788.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面单独说几个难点&lt;/p&gt;
&lt;p&gt;1、打包多页面，使用到的插件是&lt;a href=&quot;https://www.webpackjs.com/plugins/html-webpack-plugin/&quot; target=&quot;_blank&quot;&gt;html-wepack-plugin&lt;/a&gt;，&lt;a href=&quot;https://www.webpackjs.com/loaders/html-loader/&quot; target=&quot;_blank&quot;&gt;html-loader&lt;/a&gt;，也就是你有多少个页面，就有多少个入口，也就写多少个模版文件。当然，页面过多时，可以考虑遍历处理。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入路径插件&lt;/span&gt;
const path = require('path'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入导出html插件&lt;/span&gt;
const HtmlWebpackPlugin = require('html-webpack-plugin'&lt;span&gt;);

const config &lt;/span&gt;=&lt;span&gt; {
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;入口&lt;/span&gt;
&lt;span&gt;   entry:{
    home:&lt;/span&gt;'./pages/lawSearchHomepage.js'&lt;span&gt;,
    list:&lt;/span&gt;'./pages/lawSearchList.js'&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;出口&lt;/span&gt;
&lt;span&gt;    output:{
    filename: &lt;/span&gt;'[name].bundle.js'&lt;span&gt;,
    path: path.resolve(__dirname,&lt;/span&gt;'build'&lt;span&gt;)        
    },&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;插件&lt;/span&gt;
&lt;span&gt;    plugins: [
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;html单独导出插件——首页&lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HtmlWebpackPlugin({
            filename:&lt;/span&gt;'lawSearchHomepage.html',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出后的文件名称&lt;/span&gt;
            template:'./pages/lawSearchHomepage.html',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模版页面路径&lt;/span&gt;
            favicon:'./pages/images/favicon.ico',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;页签图标&lt;/span&gt;
            chunks:['home'],&lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要引入的js文件名称&lt;/span&gt;
            inject: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            hash:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;哈希值&lt;/span&gt;
            minify: {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;压缩&lt;/span&gt;
                removeComments: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                collapseWhitespace: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            }
        }),
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;html单独导出插件——列表页&lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HtmlWebpackPlugin({
            filename:&lt;/span&gt;'lawSearchList.html'&lt;span&gt;,
            template:&lt;/span&gt;'./pages/lawSearchList.html'&lt;span&gt;,
            favicon:&lt;/span&gt;'./pages/images/favicon.ico'&lt;span&gt;,
            chunks:[&lt;/span&gt;'list'&lt;span&gt;],
            inject: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            hash:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            minify: {
                removeComments: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                collapseWhitespace: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            }
        })
  ]  
}
module.exports &lt;/span&gt;= config;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、单独打包css，使用到的插件&lt;a href=&quot;https://www.webpackjs.com/plugins/extract-text-webpack-plugin/&quot; target=&quot;_blank&quot;&gt;extract-text-webpack-plugin&lt;/a&gt;，loader有style-loader、css-loader、sass-loader、node-sass，因为每个页面要引入相对应的css文件，所以，在js入口文件里通过require('./lawSearchHomepage.scss')引如对应的scss文件，打包后css文件会单独打包，并通过link的形式引入html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入导出css插件&lt;/span&gt;
const ExtractTextPlugin = require('extract-text-webpack-plugin'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;loader&lt;/span&gt;
{&lt;span&gt;//&lt;/span&gt;&lt;span&gt;CSS&lt;/span&gt;
    test:/\.css/&lt;span&gt;,
    use:ExtractTextPlugin.extract({
       use:[&lt;/span&gt;'css-loader'&lt;span&gt;]
    })
},
{&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Sass&lt;/span&gt;
     test:/\.scss/&lt;span&gt;,
     use:ExtractTextPlugin.extract({
        fallback:&lt;/span&gt;&quot;style-loader&quot;&lt;span&gt;,
        use:[&lt;/span&gt;'css-loader','sass-loader'&lt;span&gt;]
     },)
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;将css单独打包插件&lt;/span&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ExtractTextPlugin({
     filename:&lt;/span&gt;&quot;[name].css&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;制定编译后的文件名称&lt;/span&gt;
     allChunks:&lt;span&gt;true&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把分割的块分别打包&lt;/span&gt;
}),
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、处理es6，安装babel、babel-loader@7（因为下面压缩js，其他版本报错）、babel-core、babel-preset-es2015（也是为了解决压缩js报错）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;loader&lt;/span&gt;
{&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ES6&lt;/span&gt;
      test:/\.js$/&lt;span&gt;,
      loader:&lt;/span&gt;'babel-loader'&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; exclude:__dirname+'node_modules',//不对这个进行babel转换，这里边已经打包好，这样能减少打包时间&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; include:__dirname+'src'这里的src是你要编译的js文件的目录,&lt;/span&gt;
      exclude:path.resolve(__dirname,'node_modules'&lt;span&gt;),
      include:path.resolve(__dirname,&lt;/span&gt;'pages'&lt;span&gt;),
      query:{&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;若在package.json中定义了这个presets，则这边可以删掉&lt;/span&gt;
          presets:['es2015'&lt;span&gt;]
      }
},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4、处理jquery，安装expose-loader&lt;/p&gt;
&lt;p&gt;第一种方法可以通过在js里require('expose-loader?$!jquery');引入jquery&lt;/p&gt;
&lt;p&gt;第二种通过loader&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;loader&lt;/span&gt;
{&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Jquery&lt;/span&gt;
      test: require.resolve('jquery'&lt;span&gt;),
      use: [{
          loader: &lt;/span&gt;'expose-loader'&lt;span&gt;,
          options: &lt;/span&gt;'jQuery'&lt;span&gt;
      },{
         loader: &lt;/span&gt;'expose-loader'&lt;span&gt;,
         options: &lt;/span&gt;'$'&lt;span&gt;
      }]
},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5、压缩css，使用插件optimize-css-assets-webpack-plugin，安装cssnano&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入压缩css的插件&lt;/span&gt;
const optimizeCss = require('optimize-css-assets-webpack-plugin'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入cssnano插件&lt;/span&gt;
const cssnano = require('cssnano'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;
&lt;span&gt;plugins:[
    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; optimizeCss({
          assetNameRegExp: &lt;/span&gt;/\.style\.css$/&lt;span&gt;g,
          cssProcessor: cssnano,
          cssProcessorOptions: { discardComments: { removeAll: 
              &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt; } },
          canPrint: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    }),        
],
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;压缩优化css,不写这个css还是没压缩，不知道为啥&lt;/span&gt;
&lt;span&gt;optimization: {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; minimize: true,&lt;/span&gt;
    minimizer: [&lt;span&gt;new&lt;/span&gt;&lt;span&gt; optimizeCss({})]
},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6、压缩js，一般的情况下，js默认就是压缩状态，但是在压缩完css后，js就不是压缩的了，所以还是处理一下，编译更快&lt;/p&gt;
&lt;p&gt;用的插件uglifyjs-webpack-plugin&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入js压缩插件&lt;/span&gt;
const uglifyjs = require('uglifyjs-webpack-plugin'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;
&lt;span&gt;new&lt;/span&gt; uglifyJs()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我的package.json中安装的插件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&quot;devDependencies&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;babel&quot;: &quot;^6.23.0&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;babel-core&quot;: &quot;^6.26.3&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;babel-loader&quot;: &quot;^7.1.5&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;clean-webpack-plugin&quot;: &quot;^0.1.19&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;css-loader&quot;: &quot;^1.0.0&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;cssnano&quot;: &quot;^4.1.7&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;expose-loader&quot;: &quot;^0.7.5&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;extract-text-webpack-plugin&quot;: &quot;^4.0.0-beta.0&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;file-loader&quot;: &quot;^2.0.0&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;font-awesome-webpack&quot;: &quot;^0.0.5-beta.2&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;html-loader&quot;: &quot;^0.5.5&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;jquery&quot;: &quot;^3.3.1&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;node-sass&quot;: &quot;^4.9.4&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;optimize-css-assets-webpack-plugin&quot;: &quot;^5.0.1&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;postcss-loader&quot;: &quot;^3.0.0&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;sass-loader&quot;: &quot;^7.1.0&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;style-loader&quot;: &quot;^0.23.1&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;typeahead.js&quot;: &quot;^0.11.1&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;uglifyjs-webpack-plugin&quot;: &quot;^2.0.1&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;url-loader&quot;: &quot;^1.1.2&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;webpack&quot;: &quot;^4.23.1&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;webpack-cli&quot;: &quot;^3.1.2&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;webpack-dev-server&quot;: &quot;^3.1.10&quot;&lt;span&gt;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;webpack.config.js里的代码（完整版）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;96&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入路径插件&lt;/span&gt;
const path = require('path'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入导出html插件&lt;/span&gt;
const HtmlWebpackPlugin = require('html-webpack-plugin'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入清除插件&lt;/span&gt;
const CleanWebpackPlugin = require('clean-webpack-plugin'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入导出css插件&lt;/span&gt;
const ExtractTextPlugin = require('extract-text-webpack-plugin'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入webpack&lt;/span&gt;
const webpack  = require('webpack'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入压缩css的插件&lt;/span&gt;
const optimizeCss = require('optimize-css-assets-webpack-plugin'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入cssnano插件&lt;/span&gt;
const cssnano = require('cssnano'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入js压缩插件&lt;/span&gt;
const uglifyjs = require('uglifyjs-webpack-plugin'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;webpack配置内容&lt;/span&gt;
const config =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;入口&lt;/span&gt;
&lt;span&gt;    entry:{
        home:&lt;/span&gt;'./pages/lawSearchHomepage.js'&lt;span&gt;,
        list:&lt;/span&gt;'./pages/lawSearchList.js'&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;便于调试&lt;/span&gt;
    devtool:'inline-source-map'&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务&lt;/span&gt;
&lt;span&gt;    devServer:{
        contentBase:&lt;/span&gt;'./build/lawSearchHomepage.html'&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;loader模块&lt;/span&gt;
&lt;span&gt;    module:{
        rules: [
           {&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ES6&lt;/span&gt;
            test:/\.js$/&lt;span&gt;,
            loader:&lt;/span&gt;'babel-loader'&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; exclude:__dirname+'node_modules',//不对这个进行babel转换，这里边已经打包好，这样能减少打包时间&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; include:__dirname+'src'这里的src是你要编译的js文件的目录,&lt;/span&gt;
            exclude:path.resolve(__dirname,'node_modules'&lt;span&gt;),
            include:path.resolve(__dirname,&lt;/span&gt;'pages'&lt;span&gt;),
            query:{&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;若在package.json中定义了这个presets，则这边可以删掉&lt;/span&gt;
                presets:['es2015'&lt;span&gt;]
            }
          },
          {&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Jquery&lt;/span&gt;
            test: require.resolve('jquery'&lt;span&gt;),
            use: [{
              loader: &lt;/span&gt;'expose-loader'&lt;span&gt;,
              options: &lt;/span&gt;'jQuery'&lt;span&gt;
            },{
              loader: &lt;/span&gt;'expose-loader'&lt;span&gt;,
              options: &lt;/span&gt;'$'&lt;span&gt;
            }]
          },
          {&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;CSS&lt;/span&gt;
              test:/\.css/&lt;span&gt;,
              use:ExtractTextPlugin.extract({
                  use:[&lt;/span&gt;'css-loader'&lt;span&gt;]
              })
          },
          {&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Sass&lt;/span&gt;
              test:/\.scss/&lt;span&gt;,
              use:ExtractTextPlugin.extract({
                  fallback:&lt;/span&gt;&quot;style-loader&quot;&lt;span&gt;,
                  use:[&lt;/span&gt;'css-loader','sass-loader'&lt;span&gt;]
              },)
          },
          {&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理模块html&lt;/span&gt;
            test: /\.html$/&lt;span&gt;,
            use: &lt;/span&gt;'html-loader'&lt;span&gt;
          },
          {&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;图片&lt;/span&gt;
            test: /\.(jpg|png|gif)$/&lt;span&gt;,
            use: {
                loader: &lt;/span&gt;'file-loader'&lt;span&gt;,
                options: {
                    outputPath: &lt;/span&gt;'images'&lt;span&gt;
                }
            }
          },
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;字体图标&lt;/span&gt;
&lt;span&gt;            {
            test: &lt;/span&gt;/\.(eot|svg|ttf|woff|woff2)\w*/&lt;span&gt;,
            loader: &lt;/span&gt;'file-loader'&lt;span&gt;
          }
        ]
    },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;插件&lt;/span&gt;
&lt;span&gt;    plugins: [
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清空build文件下的多余文件&lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt; CleanWebpackPlugin(['build'&lt;span&gt;]),
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将css单独打包插件&lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ExtractTextPlugin({
          filename:&lt;/span&gt;&quot;[name].css&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;制定编译后的文件名称&lt;/span&gt;
          allChunks:&lt;span&gt;true&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把分割的块分别打包&lt;/span&gt;
&lt;span&gt;        }),
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;html单独导出插件——首页&lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HtmlWebpackPlugin({
            filename:&lt;/span&gt;'lawSearchHomepage.html',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出后的文件名称&lt;/span&gt;
            template:'./pages/lawSearchHomepage.html',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模版页面路径&lt;/span&gt;
            favicon:'./pages/images/favicon.ico',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;页签图标&lt;/span&gt;
            chunks:['home'],&lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要引入的js文件名称&lt;/span&gt;
            inject: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            hash:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;哈希值&lt;/span&gt;
            minify: {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;压缩&lt;/span&gt;
                removeComments: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                collapseWhitespace: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            }
        }),
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;html单独导出插件——列表页&lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HtmlWebpackPlugin({
            filename:&lt;/span&gt;'lawSearchList.html'&lt;span&gt;,
            template:&lt;/span&gt;'./pages/lawSearchList.html'&lt;span&gt;,
            favicon:&lt;/span&gt;'./pages/images/favicon.ico'&lt;span&gt;,
            chunks:[&lt;/span&gt;'list'&lt;span&gt;],
            inject: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            hash:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            minify: {
                removeComments: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                collapseWhitespace: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            }
        }),
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;压缩css&lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt;&lt;span&gt; optimizeCss({
          assetNameRegExp: &lt;/span&gt;/\.style\.css$/&lt;span&gt;g,
          cssProcessor: cssnano,
          cssProcessorOptions: { discardComments: { removeAll: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt; } },
          canPrint: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
        }),
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;压缩js&lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt;&lt;span&gt; uglifyjs()
    ],
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;压缩优化css&lt;/span&gt;
&lt;span&gt;    optimization: {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; minimize: true,&lt;/span&gt;
        minimizer: [&lt;span&gt;new&lt;/span&gt;&lt;span&gt; optimizeCss({})]
    },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;出口&lt;/span&gt;
&lt;span&gt;    output:{
        filename: &lt;/span&gt;'[name].bundle.js'&lt;span&gt;,
        path: path.resolve(__dirname,&lt;/span&gt;'build'&lt;span&gt;)        
    }
}

module.exports &lt;/span&gt;= config;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果在打包过程中报模块没有定义错误，那就再安装一次，实在不行，直接删了node_modules文件，重新npm install一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.cnblogs.com/hess/p/1&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 02 Nov 2018 06:45:00 +0000</pubDate>
<dc:creator>路陆</dc:creator>
<og:description>webpack同之前的gulp相比，gulp属于非模块化打包工具，webpack属于模块化打包工具，两者的优劣这里不做过多分析（可自行百度）。 目的：是为了分享一下使用过程中，用到的插件、loader</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hess/p/9896197.html</dc:identifier>
</item>
<item>
<title>[十七]基础类型BigDecimal简介 - noteless</title>
<link>http://www.cnblogs.com/noteless/p/9896139.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/noteless/p/9896139.html</guid>
<description>
&lt;p&gt;&lt;span&gt;&lt;span&gt;BigDecimal是不可变的、任意精度的、有符号的、十进制数.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143334761-585008977.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_1474&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143335240-208636690.png&quot; alt=&quot;image_5bdbee29_1474&quot; width=&quot;287&quot; height=&quot;256&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;组成部分&lt;/span&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal 由&lt;span&gt;&lt;strong&gt;任意精度的整数非标度值 和 32 位的整数标度 (scale) 组成&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;BigDecimal 表示的数值是  :&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;unscaledValue × 10的-scale 次幂&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;私有成员intVal就是非标度值&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;scale就是标度&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143335869-444754502.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_6a7&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143336109-917082438.png&quot; alt=&quot;image_5bdbee29_6a7&quot; width=&quot;628&quot; height=&quot;363&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;标度&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;BigDecimal由非标度值 和 32 位的整数标度 (scale) 组成&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;BigDecimal表示的数为: unscaledValue × 10的-scale 次幂&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;显然&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;如果scale为零或正数，最终的结果中，小数点后面的位数就等于scale标度&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如: scale为1 10的-1次方,  0.1 小数点后有1位&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;如果 scale 是负数，那最终的结果将会是乘以 10的|scale| 次方&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如:  scale为-3 最终的值就是非标度值乘以 1000  (    10的(- -3)次方   )&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;精度&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;非标度值的数字个数&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;构造方法&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;几个关键概念  &lt;span&gt;&lt;strong&gt;非标度值&lt;/strong&gt;&lt;/span&gt;  &lt;span&gt;&lt;strong&gt;标度&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;运算规则&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;构造方法就是围绕这几个点展开的&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;11&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal(BigInteger val)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;将 BigInteger 转换为 BigDecimal&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6.5&quot;&gt;&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;BigDecimal(BigInteger unscaledVal,int scale)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span&gt;将 BigInteger 非标度值和 int 标度转换为 BigDecimal&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14&quot;&gt;&lt;td readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;BigDecimal(BigInteger unscaledVal,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;                   int scale,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;                   MathContext mc)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;将 BigInteger 非标度值和 int 标度转换为 BigDecimal&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（根据上下文设置进行舍入）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6.5&quot;&gt;&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;BigDecimal(BigInteger val,MathContext mc)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span&gt;将 BigInteger 转换为 BigDecimal（根据上下文设置进行舍入）&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;14.5&quot;&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal(char[] in, int offset, int len, MathContext mc)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;将 BigDecimal 的字符数组表示形式转换为 BigDecimal&lt;br/&gt;允许指定子数组&lt;br/&gt;根据上下文设置进行舍入&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal(char[] in, int offset, int len)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;上一个方法的简化默认形式&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143336755-1228068516.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_24ba&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143336961-1964514755.png&quot; alt=&quot;image_5bdbee29_24ba&quot; width=&quot;473&quot; height=&quot;67&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;BigDecimal(char[] in)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;简化形式&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143337235-970883722.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_7fe7&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143337789-1931292298.png&quot; alt=&quot;image_5bdbee29_7fe7&quot; width=&quot;352&quot; height=&quot;75&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal(char[] in, MathContext mc)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;简化形式&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143338722-2097961028.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_53df&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143338918-2010752235.png&quot; alt=&quot;image_5bdbee29_53df&quot; width=&quot;453&quot; height=&quot;66&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal(String val)&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;调用的BigDecimal(char[] in, int offset, int len)&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143339727-877362285.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_566a&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143339918-1611251500.png&quot; alt=&quot;image_5bdbee29_566a&quot; width=&quot;494&quot; height=&quot;68&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal(String val, MathContext mc)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;调用的是BigDecimal(char[] in, int offset, int len, MathContext mc)&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143340127-1445111417.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_6a0&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143340748-1298030153.png&quot; alt=&quot;image_5bdbee29_6a0&quot; width=&quot;526&quot; height=&quot;63&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;


&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;9.5&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;BigDecimal(int val)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;int 转换为 BigDecimal&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal(int val, MathContext mc)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;int 转换为 BigDecimal&lt;br/&gt;根据上下文设置进行舍入&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal(long val)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;long 转换为 BigDecimal&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal(long val, MathContext mc)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;long 转换为 BigDecimal&lt;br/&gt;根据上下文设置进行舍入&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal(double val)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;double 转换为 BigDecimal&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal(double val, MathContext mc)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;double 转换为 BigDecimal&lt;br/&gt;根据上下文设置进行舍入&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;&lt;span&gt;构造方法注意事项&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;BigDecimal(double val)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;BigDecimal(double val, MathContext mc)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;这两个构造方法具有一定的不确定性&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图所示,这是因为在二进制中无法准确地表示0.1 如同十进制无法准确表示 1/3 一样&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143340921-1546237394.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_74ea&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143341115-1799458657.png&quot; alt=&quot;image_5bdbee29_74ea&quot; width=&quot;536&quot; height=&quot;155&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;当 double 必须用作 BigDecimal 的源时&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;请注意，此构造方法public BigDecimal(double val)提供了一个准确转换；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;它&lt;span&gt;&lt;strong&gt;不等同于&lt;/strong&gt;&lt;/span&gt;下面的操作：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先使用 Double.toString(double) 方法，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后使用 BigDecimal(String) 构造方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;要获取该结果，请使用 static valueOf(double) 方法&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;&lt;span&gt;String构造方法的格式&lt;/span&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;Sign(可选) Significand Exponent opt(可选)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13&quot;&gt;&lt;td readability=&quot;19&quot;&gt;
&lt;p&gt;&lt;span&gt;Sign 符号:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;+&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Significand 有效数字至少要有整数或者小数的一位数字:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;IntegerPart .FractionPart  整数和小数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;. FractionPart   小数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;IntegerPart      整数&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;IntegerPart:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Digits&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;FractionPart:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Digits&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Exponent:  指数部分&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ExponentIndicator SignedInteger&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;ExponentIndicator: 指数符号&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;e&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;E&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;SignedInteger: 有符号数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Sign(可选的) Digits&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Digits:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Digit&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Digits Digit&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Digit:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Character.isDigit(char) 对其返回 true 的任何字符，如 0、1、2……&lt;/span&gt;&lt;/p&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;-1.23E-12&lt;br/&gt;这是一个完整的格式&lt;br/&gt;含有符号  / 含有整数部分 / 含有小数部分 /含有指数部分/指数部分含有符号&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;除非有必要&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;否则在你需要 将 float 或 double 转换为 BigDecimal时&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;首选BigDecimal(String val)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;构造方法与 Float.toString(float) 和 Double.toString(double) 返回的值兼容&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;它不会遇到 BigDecimal(double) 构造方法的不可预知问题&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;常量&lt;/span&gt;&lt;/h3&gt;
&lt;div readability=&quot;15.5&quot;&gt;
&lt;div readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;内部定义了几个public final static int的常量，用于标注舍入模式&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;与RoundingMode中是一一对应的,这几个不要再使用了&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;请使用RoundingMode中的枚举值&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;ROUND_UP&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ROUND_DOWN&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;ROUND_CEILING&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ROUND_FLOOR&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;ROUND_HALF_UP&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ROUND_HALF_DOWN&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ROUND_HALF_EVEN&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;ROUND_UNNECESSARY&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt;另外还有三个常用对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;public static final BigDecimal ZERO&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;public static final BigDecimal ONE&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;public static final BigDecimal TEN&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;常用方法&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;属性获取&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;int signum()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;返回此 BigDecimal 的正负号函数&lt;br/&gt;负、零或正时，返回 -1、0 或 1&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;int scale()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;返回此 BigDecimal 的标度&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;int precision()&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;返回此 BigDecimal 的精度。（精度是非标度值的数字个数。）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;零值的精度是 1&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;BigInteger unscaledValue()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;返回其值为此 BigDecimal 的非标度值 的 BigInteger&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143341320-177902164.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_79fb&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143341854-813881613.png&quot; alt=&quot;image_5bdbee29_79fb&quot; width=&quot;231&quot; height=&quot;33&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;&lt;span&gt;四则运算&lt;/span&gt;&lt;/h4&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;除非结果准确，每种运算都有一个表示结果的首选标度&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;这些标度是返回准确算术结果的方法使用的标度&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143342769-20495927.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_54ed&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143342986-1184062327.png&quot; alt=&quot;image_5bdbee29_54ed&quot; width=&quot;463&quot; height=&quot;239&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;30&quot;&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td&gt;&lt;span&gt;add(BigDecimal augend)&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;计算 this + augend&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;标度为:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;max(this.scale(), augend.scale())&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;&lt;span&gt;add(BigDecimal augend, MathContext mc)&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;计算 this + augend&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;根据上下文设置进行舍入&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6.5&quot;&gt;&lt;td&gt;&lt;span&gt;subtract(BigDecimal subtrahend)&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;计算 this - subtrahend&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;标度为 :&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;max(this.scale(), subtrahend.scale())&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;&lt;span&gt;subtract(BigDecimal subtrahend, MathContext mc)&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;计算 this - subtrahend&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;根据上下文设置进行舍入&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;&lt;span&gt;multiply(BigDecimal multiplicand)&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;计算 this × multiplicand&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;标度为 :&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;(this.scale() + multiplicand.scale())&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;&lt;span&gt;multiply(BigDecimal multiplicand, MathContext mc)&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;计算 this × multiplicand)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;根据上下文设置进行舍入&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td&gt;&lt;span&gt;divide(BigDecimal divisor, int scale, int roundingMode)&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;计算 this / divisor&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;指定标度&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;如果需要舍入则会使用指定的模式进行舍入&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;应该使用&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;divide(BigDecimal, int, RoundingMode)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;进行替代&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;16&quot;&gt;&lt;td readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;divide(BigDecimal divisor,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;          int scale,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;          RoundingMode roundingMode)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;11&quot;&gt;
&lt;div&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143343178-1191710159.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_37d5&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143343355-1501593911.png&quot; alt=&quot;image_5bdbee29_37d5&quot; width=&quot;478&quot; height=&quot;40&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;作为上面divide方法的替代&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;目前仍旧映射到原来的遗留方法上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将RoundingMode转换为了int&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;相对于上一个方法，应该优先使用这个方法&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;divide(BigDecimal divisor, int roundingMode)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;简化转换形式&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143343541-4561581.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_45c4&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143343747-817211279.png&quot; alt=&quot;image_5bdbee29_45c4&quot; width=&quot;588&quot; height=&quot;81&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;divide(BigDecimal divisor, RoundingMode roundingMode)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;简化转换形式&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143343985-429167566.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_768a&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143344272-735165330.png&quot; alt=&quot;image_5bdbee29_768a&quot; width=&quot;666&quot; height=&quot;66&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;divide(BigDecimal divisor)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;计算 this / divisor&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;首选标度为 (this.scale() - divisor.scale())；&lt;br/&gt;如果无法表示准确的商值（因为它有无穷的十进制扩展）&lt;br/&gt;则抛出 ArithmeticException&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;divide(BigDecimal divisor, MathContext mc)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;计算 this / divisor&lt;br/&gt;&lt;span&gt;&lt;strong&gt;根据上下文设置进行舍入&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;div readability=&quot;19&quot;&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;6.5&quot;&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;divideToIntegralValue(BigDecimal divisor)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;返回 BigDecimal&lt;br/&gt;值为向下舍入所得商值 (this / divisor) 的&lt;strong&gt;整数&lt;/strong&gt;部分&lt;br/&gt;&lt;span&gt;&lt;strong&gt;首选标度为 (this.scale() - divisor.scale())&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td&gt;&lt;span&gt;divideToIntegralValue(BigDecimal divisor, MathContext mc)&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;4&quot;&gt;&lt;span readability=&quot;2&quot;&gt;返回 BigDecimal&lt;br/&gt;其值为 (this / divisor) 的整数部分&lt;br/&gt;准确商值的整数部分与舍入模式无关&lt;br/&gt;所以舍入模式不影响此方法返回的值&lt;br/&gt;首选标度是 (this.scale() - divisor.scale())&lt;p&gt;如果准确商值的整数部分需要的位数多于 mc.precision&lt;br/&gt;则抛出 ArithmeticException&lt;/p&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;divideToIntegralValue 需要注意因为是取整数部分，所以舍入模式是不影响的&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;针对于参数MathContext 有影响的是精度&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;8.5&quot;&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal[] divideAndRemainder(BigDecimal divisor) &lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;计算商和余数&lt;br/&gt;返回由两个元素组成的 BigDecimal 数组&lt;br/&gt;该数组包含 divideToIntegralValue 的结果&lt;br/&gt;后跟对两个操作数计算所得到的 remainder&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal[] divideAndRemainder(BigDecimal divisor, MathContext mc)&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;计算商和余数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;返回由两个元素组成的 BigDecimal 数组&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;该数组包含 divideToIntegralValue 的结果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;后跟&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据上下文设置对两个操作数进行舍入计算所得到的 remainder&lt;/span&gt;&lt;/p&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;remainder(BigDecimal divisor)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143344459-903819738.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_755&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143344637-1077481788.png&quot; alt=&quot;image_5bdbee29_755&quot; width=&quot;559&quot; height=&quot;97&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;remainder(BigDecimal divisor, MathContext mc)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143344831-1587010440.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_810&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143345003-657793934.png&quot; alt=&quot;image_5bdbee29_810&quot; width=&quot;605&quot; height=&quot;96&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;注意&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;如果同时需要整数商和余数&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;则divideAndRemainder比分别使用 divideToIntegralValue 和 remainder 方法更快速，因为相除仅需执行一次&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;remainder则是依赖于divideAndRemainder ,然后返回的第二个元素&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div&gt;
&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;数学方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;9&quot;&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;BigDecimal pow(int n)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;求n次幂&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;准确计算该幂，使其具有无限精度&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数 n 必须在 0 到 999999999（包括）之间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ZERO.pow(0) 返回 ONE&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-如果 n 超出范围 抛出异常ArithmeticException&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;pow(int, MathContext)&lt;br/&gt;&lt;span&gt;&lt;strong&gt;求n次幂&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;使用的是 ANSI 标准 X3.274-1996 中定义的核心算法（根据上下文设置进行舍入)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal abs()&lt;br/&gt;&lt;span&gt;&lt;strong&gt;求绝对值&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;其标度为 this.scale() &lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal abs(MathContext mc)&lt;br/&gt;&lt;span&gt;&lt;strong&gt;求绝对值&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;根据上下文设置进行舍入&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;最大值max&lt;br/&gt;最小值min&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;借助于compareTo&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143345196-311775343.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_573c&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143345369-964261008.png&quot; alt=&quot;image_5bdbee29_573c&quot; width=&quot;454&quot; height=&quot;154&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;int &lt;strong&gt;compareTo&lt;/strong&gt;(BigDecimal val)&lt;br/&gt;值相等但具有不同标度的两个 BigDecimal 对象（如，2.0 和 2.00）被认为是相等的&lt;br/&gt;注意:与equals中的相等含义不同&lt;br/&gt;小于、等于或大于 val 时，返回 -1、0 或 1&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h4&gt;&lt;span&gt;equals&lt;/span&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;判断是否相等&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;与 compareTo 不同&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;仅当两个 BigDecimal 对象的值和标度都相等时，此方法才认为它们相等&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（因此通过此方法进行比较时，2.0 不等于 2.00）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一定要注意到compareTo方法与equals方法 对于相等的定义是不一致的&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;valueOf&lt;/span&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;public static BigDecimal valueOf(long val)&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;将 long 值转换为具有零标度的 BigDecimal&lt;br/&gt;这个方法优先于以long为参数的构造方法&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;如下图所示,这个&lt;span&gt;&lt;strong&gt;valueOf方法会进行缓存&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143345585-389185957.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee29_758c&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143345832-1405946394.png&quot; alt=&quot;image_5bdbee29_758c&quot; width=&quot;632&quot; height=&quot;439&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;public static BigDecimal valueOf(long unscaledVal, int scale)&lt;br/&gt;&lt;span&gt;&lt;strong&gt;将 long 非标度值和 int 标度转换为 BigDecimal&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;看得出来&lt;span&gt;&lt;strong&gt;这个valueOf版本也是会借助于缓存的&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;所以&lt;span&gt;&lt;strong&gt;优先于构造方法&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143346044-1868498087.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_3754&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143346258-1378254332.png&quot; alt=&quot;image_5bdbee2a_3754&quot; width=&quot;596&quot; height=&quot;593&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;valueOf(double val)&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;使用 Double.toString(double) 方法转换 double 为字符串&lt;br/&gt;并且 调用构造方法&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;此方法并&lt;span&gt;&lt;strong&gt;没有涉及到缓存&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;回头看下上面说的String参数类型的构造方法&lt;br/&gt;String参数类型的构造方法---与 Float.toString(float) 和 Double.toString(double) 返回的值兼容&lt;br/&gt;这个valueOf借助的就是toString方法&lt;br/&gt;&lt;span&gt;&lt;strong&gt;这个版本valueOf是float和double转换为BigDecimal的首选&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143346450-603735972.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_1b40&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143346733-85520804.png&quot; alt=&quot;image_5bdbee2a_1b40&quot; width=&quot;620&quot; height=&quot;146&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;&lt;span&gt;setScale&lt;/span&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;setScale 系列并不是设置BigDecimal的scale  BigDecimal是不可变得&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;setScale 是一个转换器，&lt;span&gt;&lt;strong&gt;将参数的BigDecimal转换为指定标度的值&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;值本身不会变化，变化的是形式&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;返回的是一个新的BigDecimal&lt;/strong&gt;&lt;/span&gt;，不过这个新的BigDecimal并不一定是新创建的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可能是使用缓存，新是相对于调用者来说&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143346922-444735544.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_355f&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143347134-1761346716.png&quot; alt=&quot;image_5bdbee2a_355f&quot; width=&quot;647&quot; height=&quot;214&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;方法列表:&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;9&quot;&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;&lt;span&gt;public BigDecimal setScale(int newScale, int roundingMode)&lt;br/&gt;返回一个 BigDecimal&lt;br/&gt;其标度为指定值&lt;br/&gt;其非标度值通过此 BigDecimal 的非标度值乘以或除以十的适当次幂来确定，以维护其总值&lt;br/&gt;相对于此遗留方法，&lt;span&gt;&lt;strong&gt;应优先使用新的 setScale(int, RoundingMode) 方法&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;public BigDecimal setScale(int newScale, RoundingMode roundingMode)&lt;br/&gt;setScale(int newScale, int roundingMode) 的替代形式&lt;br/&gt;使用RoundingMode枚举&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143347316-1424548064.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_52d6&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143347484-1790139.png&quot; alt=&quot;image_5bdbee2a_52d6&quot; width=&quot;639&quot; height=&quot;69&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal setScale(int newScale)&lt;br/&gt;返回一个 BigDecimal&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;其标度为指定值，其值在数值上等于此 BigDecimal 的值&lt;br/&gt;如果这不可能，则抛出 ArithmeticException&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;省略了模式，其实就是默认了模式，默认为 UNNECESSARY&lt;br/&gt;UNNECESSARY 用于断言，所以&lt;span&gt;&lt;strong&gt;如果结果需要舍入的话，,则会抛出异常&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143347682-1433921978.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_63b5&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143347867-1194295436.png&quot; alt=&quot;image_5bdbee2a_63b5&quot; width=&quot;487&quot; height=&quot;76&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;&lt;span&gt;&lt;strong&gt;negate/plus/round&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;6.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal negate()&lt;br/&gt;&lt;span&gt;&lt;strong&gt;取负数&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;返回 BigDecimal，值为 (-this)，标度为 this.scale() &lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal negate(MathContext mc)&lt;br/&gt;根据指定上下文设置取负数&lt;br/&gt;返回其值为 (-this) 的 BigDecimal（根据上下文设置进行舍入）。&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143348056-1716647397.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_7058&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143348219-2127905079.png&quot; alt=&quot;image_5bdbee2a_7058&quot; width=&quot;485&quot; height=&quot;72&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal plus()&lt;br/&gt;&lt;span&gt;&lt;strong&gt;返回本身  任何一个数前面加正号 都是它本身&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;值为 (+this)，标度为 this.scale()&lt;br/&gt;&lt;/span&gt; &lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143348399-1763453389.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_729b&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143348588-112357794.png&quot; alt=&quot;image_5bdbee2a_729b&quot; width=&quot;489&quot; height=&quot;79&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal plus(MathContext mc)&lt;br/&gt;返回其值为 (+this) 的 BigDecimal&lt;br/&gt;（根据上下文设置进行舍入）&lt;br/&gt;方法的效果与 round(MathContext) 方法的效果相同&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal round(MathContext mc)&lt;br/&gt;&lt;span&gt;&lt;strong&gt;等同于BigDecimal plus(MathContext mc)&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143348864-27941761.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_17a&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143349265-1285955927.png&quot; alt=&quot;image_5bdbee2a_17a&quot; width=&quot;487&quot; height=&quot;69&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;&lt;span&gt;xxxValue&lt;/span&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;9.5&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;intValue()&lt;br/&gt;&lt;span&gt;&lt;strong&gt;转换为 int&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;丢弃此 BigDecimal 的小数部分&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;如果生成的 &quot;BigInteger&quot; 太大而不适合用 int 表示，则仅返回 32 位低位字节&lt;br/&gt;此转换会丢失关于此 BigDecimal 值的总大小和精度的信息&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;longValue()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;转换为 long&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;丢弃此 BigDecimal 的小数部分&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果生成的 &quot;BigInteger&quot; 太大&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;仅返回 64 位低位字节&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此转换会丢失关于此 BigDecimal 值的总大小和精度的信息&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;floatValue()&lt;br/&gt;&lt;span&gt;&lt;strong&gt;转换为 float&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;如果BigDecimal 的值&lt;span&gt;&lt;strong&gt;太大而不能表示为 float&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;将其适当地转换&lt;/strong&gt;&lt;/span&gt;为 Float.NEGATIVE_INFINITY 或 Float.POSITIVE_INFINITY&lt;br/&gt;此转换也&lt;span&gt;&lt;strong&gt;可能丢失&lt;/strong&gt;&lt;/span&gt;关于 BigDecimal 值&lt;span&gt;&lt;strong&gt;精度&lt;/strong&gt;&lt;/span&gt;的信息&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;doubleValue()&lt;br/&gt;&lt;span&gt;&lt;strong&gt;转换为 double&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;如果此 BigDecimal 的数量&lt;span&gt;&lt;strong&gt;太大而不能表示为 double&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;将其适当地转换&lt;/strong&gt;&lt;/span&gt;为 Double.NEGATIVE_INFINITY 或 Double.POSITIVE_INFINITY&lt;br/&gt;转换也&lt;span&gt;&lt;strong&gt;可能丢失&lt;/strong&gt;&lt;/span&gt;关于 BigDecimal 值&lt;span&gt;&lt;strong&gt;精度&lt;/strong&gt;&lt;/span&gt;的信息&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;BigInteger toBigInteger()&lt;br/&gt;&lt;span&gt;&lt;strong&gt;转换为 BigInteger&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;丢弃此 BigDecimal 的小数部分&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;此转换会丢失关于 BigDecimal 值的精度信息&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;&lt;span&gt;XXXValueExact&lt;/span&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;7.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;byte byteValueExact()&lt;br/&gt;&lt;span&gt;&lt;strong&gt;转换为 byte&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;如果此 BigDecimal 具有非零小数部分，或者超出 byte 结果的可能范围&lt;br/&gt;则&lt;span&gt;&lt;strong&gt;抛出 ArithmeticException&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143349494-1477589985.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_295a&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143349707-949033889.png&quot; alt=&quot;image_5bdbee2a_295a&quot; width=&quot;577&quot; height=&quot;147&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;short shortValueExact()&lt;br/&gt;&lt;span&gt;&lt;strong&gt;转换为 short&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;如果此 BigDecimal 具有非零小数部分，或者超出 short 结果的可能范围&lt;br/&gt;则&lt;span&gt;&lt;strong&gt;抛出 ArithmeticException&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143349894-1222609234.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_33f5&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143350073-1433557744.png&quot; alt=&quot;image_5bdbee2a_33f5&quot; width=&quot;574&quot; height=&quot;143&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;int intValueExact()&lt;br/&gt;&lt;span&gt;&lt;strong&gt;转换为 int&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;如果此 BigDecimal 具有非零小数部分，或者超出 int 结果的可能范围&lt;br/&gt;则&lt;span&gt;&lt;strong&gt;抛出 ArithmeticException&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143350276-1707534406.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_4e60&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143350489-1886086168.png&quot; alt=&quot;image_5bdbee2a_4e60&quot; width=&quot;576&quot; height=&quot;146&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;long longValueExact()&lt;br/&gt;&lt;span&gt;&lt;strong&gt;转换为 long&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;如果此 BigDecimal 具有非零小数部分，或者超出 long 结果的可能范围&lt;br/&gt;则&lt;span&gt;&lt;strong&gt;抛出 ArithmeticException&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;BigInteger toBigIntegerExact()&lt;br/&gt;&lt;span&gt;&lt;strong&gt;转换为 BigInteger&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;如果此 BigDecimal 具有非零小数部分，则&lt;span&gt;&lt;strong&gt;抛出一个异常&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div readability=&quot;9&quot;&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;exact版本的区别就在于是否能够准确转换，否则抛出异常&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;也就是他要么返回一个准确地值要么就抛出异常&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;hashCode&lt;/span&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;int hashCode()&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;返回此 BigDecimal 的哈希码&lt;br/&gt;数值上相等但标度不同的两个 BigDecimal 对象（如，2.0 和 2.00）通常没有 相同的哈希码&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div&gt;

&lt;h4&gt;&lt;span&gt;toString&lt;/span&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;toString() 返回字符串表示形式，如果需要指数，则使用科学记数法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;toEngineeringString() 返回字符串表示形式，需要指数时，则使用工程计数法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;toPlainString()  返回不带指数字段的此 BigDecimal 的字符串表示形式&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;toString的三个方法根本逻辑是一样的,都是转换为字符串&lt;br/&gt;只不过具体的形式不同&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4&gt;&lt;span&gt;ulp&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;unit in the last place&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;两个数之间的距离，在数学中是无限的，比如1和2之间有无数个数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是在计算机中是有限的，因为计算机需要用有限个字节来表示double或者float，计算机表示不了无限的数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为没有无限内存&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假设两个数之间有10个数，那么ulp 就是1/10 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1和2之间有一个数 距离为1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.1和2.1之间有十个数  距离为0.1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这就是ulp&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;非零 BigDecimal 值的 ulp 是此值与下一个具有相同位数的较大 BigDecimal 值之间的正距离&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;零值的 ulp 在数值上等于1 和 this.scale()之间的距离&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;所以可以说所有的数的ulp为[1, this.scale()]&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143350688-1871298607.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_4d96&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143350891-1821654585.png&quot; alt=&quot;image_5bdbee2a_4d96&quot; width=&quot;619&quot; height=&quot;259&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;移动小数点&lt;/span&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;movePointLeft&lt;br/&gt;该值的小数点向左移动 n 位&lt;br/&gt;如果 n 为负数，则该调用等效于 movePointRight(-n)&lt;br/&gt;如果 n 为非负数，则调用仅将 n 添加到该标度&lt;br/&gt;返回的&lt;strong&gt;值&lt;/strong&gt;和&lt;strong&gt;标度&lt;/strong&gt;分别为:&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143351092-896351555.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_2cfe&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143351289-1495249890.png&quot; alt=&quot;image_5bdbee2a_2cfe&quot; width=&quot;190&quot; height=&quot;47&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143351459-2140608513.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_5e59&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143351674-1840410960.png&quot; alt=&quot;image_5bdbee2a_5e59&quot; width=&quot;348&quot; height=&quot;45&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;movePointRight&lt;br/&gt;小数点向右移动 n 位&lt;br/&gt;如果 n 为负，则该调用等效于 movePointLeft(-n)&lt;br/&gt;如果 n 为非负数，则该调用仅从该标度减去 n&lt;br/&gt;返回的&lt;strong&gt;值&lt;/strong&gt;和&lt;strong&gt;标度&lt;/strong&gt;分别为:&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143351840-142398784.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_6782&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143351994-1864617469.png&quot; alt=&quot;image_5bdbee2a_6782&quot; width=&quot;155&quot; height=&quot;49&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143352187-1654105499.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_1089&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143352364-20386075.png&quot; alt=&quot;image_5bdbee2a_1089&quot; width=&quot;349&quot; height=&quot;50&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal scaleByPowerOfTen(int n)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;返回其数值等于&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143352585-895059382.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_3358&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143352916-1938411539.png&quot; alt=&quot;image_5bdbee2a_3358&quot; width=&quot;156&quot; height=&quot;45&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;span&gt;的BigDecimal&lt;p&gt;该结果的标度为:&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143353745-1442602737.png&quot;&gt;&lt;span&gt;&lt;img title=&quot;image_5bdbee2a_6ef1&quot; src=&quot;https://img2018.cnblogs.com/blog/897393/201811/897393-20181102143354108-1411545214.png&quot; alt=&quot;image_5bdbee2a_6ef1&quot; width=&quot;281&quot; height=&quot;44&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;BigDecimal stripTrailingZeros()&lt;br/&gt;形式转换，数值是相等的&lt;br/&gt;转换为去掉所有尾部的0的形式的数值&lt;br/&gt;800.000去掉所有的0 就是8   准换后为8乘以10的平方&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;BigDecimal虽然有诸多特性与特别，,但是本质仍旧是浮点数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以自然提供了浮点数相关的一些操作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;作为数值的基本运算方法都具备的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;需要注意的是构造方法之间的区别&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除非特别需要，否则不要直接使用double构造&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;尽可能的使用String的形式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于valueOf方法也是具有缓存的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;BigDecimal是不可变的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;setScale的名字起的不太规范，容易让人迷惑，使用时要注意。&lt;/span&gt;&lt;/p&gt;


</description>
<pubDate>Fri, 02 Nov 2018 06:41:00 +0000</pubDate>
<dc:creator>noteless</dc:creator>
<og:description>BigDecimal简介，主要介绍了内部数据结构形式，构造方法，常量，Bigdecimal方法列表，使用注意事项。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/noteless/p/9896139.html</dc:identifier>
</item>
<item>
<title>Python数据分析--数据分析岗位最新招聘情况 - Star_Zhao</title>
<link>http://www.cnblogs.com/star-zhao/p/9873860.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/star-zhao/p/9873860.html</guid>
<description>&lt;p&gt;&lt;span&gt;本次主要围绕数据分析岗位的招聘情况, 进行一个简单的数据分析&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;win8, python3.7, pycharm, jupyter notebook&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;1. 明确分析目的&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;了解数据分析岗位的最新招聘情况, 包括地区分布, 学历要求, 经验要求, 薪资水平等.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;2. 数据收集&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;这里借助爬虫, 爬取招聘网站的招聘信息, 进而分析出相关的薪资以及招聘要求.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt; 2.1 目标站点分析&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;通过对目标站点的分析, 我们需要确定目标站点的请求方式, 以及网页结构.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt; 2.2 新建scrapy项目&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;1. 在cmd命令行窗口中任意路径下执行以下代码, 比如在&quot;D:\python\Tests&quot;目录下新建zhaopin项目.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;d:
cd D:\python\Tests
scrapy startproject zhaopin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2. 在完成了zhaopin项目创建之后, 接下来就是在zhaopin项目文件夹中新建spider爬虫主程序&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd zhaopin
scrapy genspider zhaopinSpider zhaopin.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这样就完成项目zhaopin的创建, 开始编写我们的程序吧.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;2.3 定义items&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在items.py文件中定义需要爬取的招聘信息.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; scrapy
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; scrapy.item &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Item, Field

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; zhaopinItem(Item):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; define the fields for your item here like:&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name = scrapy.Field()&lt;/span&gt;
    JobTitle = Field()                      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;职位名称&lt;/span&gt;
    CompanyName = Field()                   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;公司名称&lt;/span&gt;
    CompanyNature = Field()                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;公司性质&lt;/span&gt;
    CompanySize = Field()                   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;公司规模&lt;/span&gt;
    IndustryField = Field()                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;所属行业&lt;/span&gt;
    Salary = Field()                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;薪水&lt;/span&gt;
    Workplace = Field()                     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;工作地点&lt;/span&gt;
    Workyear = Field()                      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;要求工作经验&lt;/span&gt;
    Education = Field()                     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;要求学历&lt;/span&gt;
    RecruitNumbers = Field()                &lt;span&gt;#&lt;/span&gt;&lt;span&gt;招聘人数&lt;/span&gt;
    ReleaseTime = Field()                   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;发布时间&lt;/span&gt;
    Language = Field()                      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;要求语言&lt;/span&gt;
    Specialty = Field()                     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;要求专业&lt;/span&gt;
    PositionAdvantage = Field()             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;职位福利&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.4 编写爬虫主程序&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在zhaopinSpider.py文件中编写爬虫主程序&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;100&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; scrapy
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; scrapy.selector &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Selector
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; scrapy.spiders &lt;span&gt;import&lt;/span&gt;&lt;span&gt; CrawlSpider
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; scrapy.http &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Request
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; zhaopin.items &lt;span&gt;import&lt;/span&gt;&lt;span&gt; zhaopinItem

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; ZhaoPinSpider(scrapy.Spider):
    name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ZhaoPinSpider&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    allowed_domains &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;zhaopin.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    start_urls &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://xxxx.com/list/2,{0}.html?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(str(page)) &lt;span&gt;for&lt;/span&gt; page &lt;span&gt;in&lt;/span&gt; range(1, 217&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; parse(self, response):
        &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
        开始第一页
        :param response:
        :return:
        &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
        &lt;span&gt;yield&lt;/span&gt;&lt;span&gt; Request(
            url &lt;/span&gt;=&lt;span&gt; response.url,
            callback &lt;/span&gt;=&lt;span&gt; self.parse_job_url,
            meta&lt;/span&gt;=&lt;span&gt;{},
            dont_filter&lt;/span&gt;=&lt;span&gt; True
        )

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; parse_job_url(self, response):
        &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
        获取每页的职位详情页url
        :param response:
        :return:
        &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
        selector &lt;/span&gt;=&lt;span&gt; Selector(response)
        urls &lt;/span&gt;= selector.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//div[@class=&quot;el&quot;]/p/span&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; url &lt;span&gt;in&lt;/span&gt;&lt;span&gt; urls:
            url &lt;/span&gt;= url.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a/@href&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).extract()[0]
            &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt;&lt;span&gt; Request(
                url &lt;/span&gt;=&lt;span&gt; url,
                callback &lt;/span&gt;=&lt;span&gt; self.parse_job_info,
                meta &lt;/span&gt;=&lt;span&gt; {},
                dont_filter &lt;/span&gt;=&lt;span&gt; True
            )

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; parse_job_info(self, response):
        &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
        解析工作详情页
        :param response:
        :return:
        &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
        item &lt;/span&gt;=&lt;span&gt; Job51Item()
        selector &lt;/span&gt;=&lt;span&gt; Selector(response)
        JobTitle &lt;/span&gt;= selector.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//div[@class=&quot;cn&quot;]/h1/text()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).extract()[0].strip().replace(&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        CompanyName &lt;/span&gt;= selector.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//div[@class=&quot;cn&quot;]/p[1]/a[1]/text()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).extract()[0].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        CompanyNature &lt;/span&gt;= selector.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//div[@class=&quot;tCompany_sidebar&quot;]/div/div[2]/p[1]/text()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).extract()[0].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        CompanySize &lt;/span&gt;= selector.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//div[@class=&quot;tCompany_sidebar&quot;]/div/div[2]/p[2]/text()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).extract()[0].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        IndustryField &lt;/span&gt;= selector.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//div[@class=&quot;tCompany_sidebar&quot;]/div/div[2]/p[3]/text()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).extract()[0].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        Salary &lt;/span&gt;= selector.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//div[@class=&quot;cn&quot;]/strong/text()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).extract()[0].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        infos &lt;/span&gt;= selector.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//div[@class=&quot;cn&quot;]/p[2]/text()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).extract()
        Workplace &lt;/span&gt;= infos[0].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        Workyear &lt;/span&gt;= infos[1].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; len(infos) == 4&lt;span&gt;:
            Education &lt;/span&gt;= &lt;span&gt;''&lt;/span&gt;&lt;span&gt;
            RecruitNumbers &lt;/span&gt;= infos[2].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            ReleaseTime &lt;/span&gt;= infos[3].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            Education &lt;/span&gt;= infos[2].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            RecruitNumbers &lt;/span&gt;= infos[3].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            ReleaseTime &lt;/span&gt;= infos[4].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; len(infos) == 7&lt;span&gt;:
            Language, Specialty &lt;/span&gt;= infos[5].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;), infos[6].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; len(infos) == 6&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((&lt;span&gt;'&lt;/span&gt;&lt;span&gt;英语&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; infos[5]) &lt;span&gt;or&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;话&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; infos[5&lt;span&gt;])):
                Language, Specialty &lt;/span&gt;= infos[5].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), &lt;span&gt;''&lt;/span&gt;
            &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                Language, Specialty &lt;/span&gt;= &lt;span&gt;''&lt;/span&gt;, infos[5].strip().replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            Language, Specialty &lt;/span&gt;= &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;
        Welfare &lt;/span&gt;= selector.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//div[@class=&quot;t1&quot;]/span/text()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).extract()
        PositionAdvantage &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.join(Welfare).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        item[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;JobTitle&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt;JobTitle
        item[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CompanyName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt;CompanyName
        item[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CompanyNature&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt;CompanyNature
        item[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CompanySize&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; CompanySize
        item[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;IndustryField&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; IndustryField
        item[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Salary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt;Salary
        item[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Workplace&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; Workplace
        item[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Workyear&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt;Workyear
        item[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt;Education
        item[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;RecruitNumbers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; RecruitNumbers
        item[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ReleaseTime&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt;ReleaseTime
        item[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Language&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; Language
        item[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Specialty&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; Specialty
        item[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PositionAdvantage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; PositionAdvantage
        &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; item
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.5 保存到csv文件&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;通过pipelines项目管道保存至csv文件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Job51Pipeline(object):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; process_item(self, item, spider):
        with open(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\Data\ZhaoPin.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, encoding = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gb18030&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
            job_info &lt;/span&gt;= [item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;JobTitle&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CompanyName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CompanyNature&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CompanySize&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;IndustryField&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Salary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Workplace&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Workyear&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;RecruitNumbers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ReleaseTime&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Language&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Specialty&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],item[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PositionAdvantage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
            f.write(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.join(job_info))
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; item
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.6 配置setting&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;设置用户代理, 下载延迟0.5s, 关闭cookie追踪, 调用pipelines&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
USER_AGENT = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
DOWNLOAD_DELAY &lt;/span&gt;= 0.5&lt;span&gt;
COOKIES_ENABLED &lt;/span&gt;=&lt;span&gt; False
ITEM_PIPELINES &lt;/span&gt;=&lt;span&gt; {
   &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;job51.pipelines.Job51Pipeline&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 300&lt;span&gt;,
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.7 运行程序&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;新建main.py文件, 并执行以下代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; scrapy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cmdline
cmdline.execute(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scrapy crawl zhaopin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.split())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这样开始了数据爬取, 最终爬取到9000多条数据, 在分析这些数据之前, 先看看数据都是什么样, 进入数据概览环节.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;3. 数据概览&lt;/h2&gt;
&lt;h3&gt; 3.1 读取数据&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pandas as pd

df &lt;/span&gt;= pd.read_csv(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\aPython\Data\DataVisualization\shujufenxishiJob51.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;由于原始数据中没有字段, 需要为其添加字段&lt;/span&gt;
df.columns = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;JobTitle&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CompanyName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CompanyNature&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CompanySize&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;IndustryField&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Salary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Workplace&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Workyear&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;RecruitNumbers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ReleaseTime&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Language&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Specialty&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PositionAdvantage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
df.info()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;ansi-red-intense-fg ansi-bold&quot;&gt;抛出异常: UnicodeDecodeError: 'utf-8' codec can't decode byte 0xbd in position 0: invalid start byte&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决办法; 用Notepad++将编码转换为utf-8 bom格式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;转换之后, 再次执行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;抛出异常: &lt;span class=&quot;ansi-red-intense-fg ansi-bold&quot;&gt;ValueError: Length mismatch: Expected axis has 15 elements, new values have 14 elements&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span class=&quot;ansi-red-intense-fg ansi-bold&quot;&gt;解决办法: 在列表['JobTitle.....&lt;/span&gt;PositionAdvantage&lt;span class=&quot;ansi-red-intense-fg ansi-bold&quot;&gt;']后面追加'&lt;/span&gt;NNN&lt;span class=&quot;ansi-red-intense-fg ansi-bold&quot;&gt;', 从而补齐15个元素.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;追加之后, 再次执行, 执行结果为:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&amp;lt;class 'pandas.core.frame.DataFrame'&amp;gt;
RangeIndex: 9948 entries, 0 to 9947
Data columns (total 15 columns):
JobTitle             9948 non-null object
CompanyName          9948 non-null object
CompanyNature        9948 non-null object
CompanySize          9948 non-null object
IndustryField        9948 non-null object
Salary               9948 non-null object
Workplace            9948 non-null object
Workyear             9948 non-null object
&lt;span&gt;Education            7533 non-null object&lt;/span&gt;
RecruitNumbers       9948 non-null object
ReleaseTime          9948 non-null object
&lt;span&gt;Language             901 non-null object&lt;/span&gt;
&lt;span&gt;Specialty            814 non-null object&lt;/span&gt;
&lt;span&gt;PositionAdvantage    8288 non-null object&lt;/span&gt;
NNN                  0 non-null float64
dtypes: float64(1), object(14)
memory usage: 1.1+ MB
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;可以了解到的信息: 目前的数据维度9948行X15列,  Education, Language, Specialty, PositionAdvantage有不同程度的缺失(NNN是最后添加, 仅仅是用来补齐15元素), 14个python对象(1个浮点型)&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3.2 描述性统计&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;由于我们所需信息的数据类型都是python对象, 故使用以下代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;注意是大写的字母o&lt;/span&gt;
df.describe(include=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;O&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;从以下信息(公司名称部分我没有截图)中可以得到:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;职位名称中'数据分析师'最多, 多为民营公司, 公司规模150-500人最多, 行业领域金融/投资/证券最多, 薪资中6-8千/月最多,  大多对工作经验没有要求, 学历要求多为本科, 多数均招1人等信息.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469712/201810/1469712-20181030164815521-136567479.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;职位名称的种类就有4758种, 他们都是我们本次分析的数据分析师岗位吗, 先来确认下:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
zhaopin.JobTitle.unique()
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
array(['零基础免费培训金融外汇数据分析师', '数据分析师（周末双休+上班舒适）', '数据分析师', ...,
       '数据分析实习(J10635)', '数据分析实习(J10691)', '数据分析实习(J10713)'], dtype=object)
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;这仅仅显示了职位名称中的一部分,而且还都符合要求, 换种思路先看20个&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
JobTitle = zhaopin.groupby(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;JobTitle&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, as_index=&lt;span&gt;False).count()
JobTitle.JobTitle.head(2&lt;/span&gt;0)
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
0                             (AI)机器学习开发工程师讲师
1                           (ID67391)美资公司数据分析
2                           (ID67465)美资公司数据分析
3             (ID67674)500强法资汽车制造商数据分析专员（6个月）
4                 (ID67897)知名500强法资公司招聘数据分析专员
5                         (Senior)DataAnalyst
6                           (免费培训)数据分析师+双休+底薪
7            (实习职位）BusinessDataAnalyst/业务数据分析
8                                   (急）人力销售经理
9                               (提供食宿)银行客服+双休
10    (日语)股票数据分析员/EquityDataAnalyst-Japanese/
11     (越南语)股票数据分析员/EquityDataAnalyst-Vietnam
12                           (跨境电商)产品专员/数据分析师
13       (韩语)股票数据分析员/EquityDataAnalyst-Korean
14                                    ***数据分析
15                               -数据分析师助理/实习生
16                      -数据分析师助理/统计专员+双休五险+住宿
17                        -无销售不加班金融数据分析师月入10k
18                          -金融数据分析师助理6k-1.5w
19                             -金融数据分析师双休岗位分红
Name: JobTitle, dtype: object
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;可以看到还有机器学习开发讲师, 人力销售经理, 银行客服等其他无效数据.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在我们对数据有了大致的认识, 下来我们开始数据预处理.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;4. 数据预处理&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;4.1 数据清洗&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;数据清洗的目的是不让有错误或有问题的数据进入加工过程, 其主要内容包括: 重复值, 缺失值以及空值的处理&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;4.1.1 删除重复值&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;如果数据中存在重复记录, 而且重复数量较多时, 势必会对结果造成影响, 因此我们应当首先处理重复值.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;删除数据表中的重复记录, 并将删除后的数据表赋值给zhaopin&lt;/span&gt;
zhaopin = df.drop_duplicates(inplace =&lt;span&gt; False)
zhaopin.shape&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
(8927, 15)
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;对比之前的数据, 重复记录1021条.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;4.1.2 过滤无效数据&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;我们了解到职位名称中存在无效数据, 我们对其的处理方式是过滤掉.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;筛选名称中包含'数据'或'分析'或'Data'的职位&lt;/span&gt;
zhaopin = zhaopin[zhaopin.JobTitle.str.contains(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.*?数据.*?|.*?分析.*?|.*?Data.*?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)]&lt;br/&gt;zhaopin.shape
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
(7959, 15)
&lt;/pre&gt;
&lt;h3&gt;4.1.3 缺失值处理&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在pandas中缺失值为NaN或者NaT, 其处理方式有多种:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 利用均值等集中趋势度量填充&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 利用统计模型计算出的值填充&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3. 保留缺失值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4. 删除缺失值&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;计算每个特征中缺失值个数&lt;br/&gt;&lt;/span&gt;zhaopin.isnull().sum()
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
JobTitle                0
CompanyName             0
CompanyNature           0
CompanySize             0
IndustryField           0
Salary                  0
Workplace               0
Workyear                0
Education            1740
RecruitNumbers          0
ReleaseTime             0
Language             7227
Specialty            7244
PositionAdvantage    1364
NNN                  7959
dtype: int64
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;-- Education: 缺失值占比1740/7959 = 21.86%, 缺失很有可能是&quot;不限学历&quot;, 我们就用&quot;不限学历&quot;填充&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
zhaopin.Education.fillna(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;不限学历&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, inplace=&lt;span&gt;True)&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;-- Language: 缺失值占比7227/7959 = 90.80%, 缺失太多, 删除特征&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-- Specialty: 缺失值占比7244/7959 = 91.02%, 同样缺失很多, 删除&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
zhaopin.drop([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Specialty&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Language&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], axis=1, inplace = True)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;-- PositionAdvantage: 缺失占比1364/7959 = 17.14%, 选用众数中的第一个'五险一金'填充&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
zhaopin.PositionAdvantage.fillna(zhaopin.PositionAdvantage.mode()[0], inplace = True)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;-- NNN: 没有任何意义, 直接删除&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
zhaopin.drop([&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NNN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;], axis=1, inplace = True)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;最后, 检查缺失值是否处理完毕&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
zhaopin.isnull().sum()
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
JobTitle             0
CompanyName          0
CompanyNature        0
CompanySize          0
IndustryField        0
Salary               0
Workplace            0
Workyear             0
Education            0
RecruitNumbers       0
ReleaseTime          0
PositionAdvantage    0
dtype: int64
&lt;/pre&gt;
&lt;h2&gt;4.2 数据加工&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;由于现有的数据不能满足我们的分析需求, 因此需要对现有数据表进行分列, 计算等等操作.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;需要处理的特征有: Salary, Workplace&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. Salary&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将薪资分为最高薪资和最低薪资, 另外了解到薪资中单位有元/小时, 元/天, 万/月, 万/年, 千/月, 统一将其转化为千/月&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;93&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; re
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将5种单元进行编号&lt;/span&gt;
zhaopin[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Standard&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = np.where(zhaopin.Salary.str.contains(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;元.*?小时&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;), 0, 
                               np.where(zhaopin.Salary.str.contains(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;元.*?天&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), 1&lt;span&gt;,
                                        np.where(zhaopin.Salary.str.contains(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;千.*?月&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), 2&lt;span&gt;, 
                                                 np.where(zhaopin.Salary.str.contains(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;万.*?月&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), 3&lt;span&gt;, 
                                                          &lt;/span&gt;4&lt;span&gt;))))
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;用'-'将Salary分割为LowSalary和HighSalary&lt;/span&gt;
SalarySplit = zhaopin.Salary.str.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, expand =&lt;span&gt; True)
zhaopin[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;LowSalary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], zhaopin[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;HighSalary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = SalarySplit[0], SalarySplit[1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;Salary中包含'以上', '以下'或者两者都不包含的进行编号&lt;/span&gt;
zhaopin[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;HighOrLow&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = np.where(zhaopin.LowSalary.str.contains(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;以.*?下&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;), 0, 
                                np.where(zhaopin.LowSalary.str.contains(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;以.*?上&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), 2&lt;span&gt;, 
                                         &lt;/span&gt;1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;匹配LowSalary中的数字, 并转为浮点型&lt;/span&gt;
Lower = zhaopin.LowSalary.apply(&lt;span&gt;lambda&lt;/span&gt; x: re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(\d+\.?\d*)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, x).group(1&lt;span&gt;)).astype(float)
&lt;/span&gt;&lt;span&gt;#对LowSalary中HighOrLow为1的部分进行&lt;/span&gt;&lt;span&gt;单位换算, 全部转为'千/月'&lt;/span&gt;
zhaopin.LowSalary = np.where(((zhaopin.Standard==0)&amp;amp;(zhaopin.HighOrLow==1)), Lower*8*21/1000&lt;span&gt;,
                             np.where(((zhaopin.Standard&lt;/span&gt;==1)&amp;amp;(zhaopin.HighOrLow==1)), Lower*21/1000&lt;span&gt;,
                                      np.where(((zhaopin.Standard&lt;/span&gt;==2)&amp;amp;(zhaopin.HighOrLow==1&lt;span&gt;)), Lower,
                                               np.where(((zhaopin.Standard&lt;/span&gt;==3)&amp;amp;(zhaopin.HighOrLow==1)), Lower*10&lt;span&gt;,
                                                        np.where(((zhaopin.Standard&lt;/span&gt;==4)&amp;amp;(zhaopin.HighOrLow==1)), Lower/12*10&lt;span&gt;,
                                                                 Lower)))))

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;对HighSalary中的缺失值进行填充, 可以有效避免匹配出错.&lt;/span&gt;
zhaopin.HighSalary.fillna(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0千/月&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, inplace =&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;匹配HighSalary中的数字, 并转为浮点型&lt;/span&gt;
Higher = zhaopin.HighSalary.apply(&lt;span&gt;lambda&lt;/span&gt; x: re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(\d+\.?\d*).*?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, str(x)).group(1&lt;span&gt;)).astype(float)
&lt;/span&gt;&lt;span&gt;#对HighSalary中HighOrLow为1的部分&lt;/span&gt;&lt;span&gt;完成单位换算, 全部转为'千/月'&lt;/span&gt;
zhaopin.HighSalary = np.where(((zhaopin.Standard==0)&amp;amp;(zhaopin.HighOrLow==1)),zhaopin.LowSalary/21*26&lt;span&gt;,
                              np.where(((zhaopin.Standard&lt;/span&gt;==1)&amp;amp;(zhaopin.HighOrLow==1)),zhaopin.LowSalary/21*26&lt;span&gt;,
                                       np.where(((zhaopin.Standard&lt;/span&gt;==2)&amp;amp;(zhaopin.HighOrLow==1&lt;span&gt;)), Higher,
                                                np.where(((zhaopin.Standard&lt;/span&gt;==3)&amp;amp;(zhaopin.HighOrLow==1)), Higher*10&lt;span&gt;,
                                                         np.where(((zhaopin.Standard&lt;/span&gt;==4)&amp;amp;(zhaopin.HighOrLow==1)), Higher/12*10&lt;span&gt;,
                                                                  np.where(zhaopin.HighOrLow&lt;/span&gt;==&lt;span&gt;0, zhaopin.LowSalary, 
                                                                           zhaopin.LowSalary))))))
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;查看当HighOrLow为0时, Standard都有哪些, 输出为2, 4&lt;/span&gt;
zhaopin[zhaopin.HighOrLow==&lt;span&gt;0].Standard.unique()   
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;完成HighOrLow为0时的单位换算&lt;/span&gt;
zhaopin.loc[(zhaopin.HighOrLow==0)&amp;amp;(zhaopin.Standard==2), &lt;span&gt;'&lt;/span&gt;&lt;span&gt;LowSalary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = zhaopin[(zhaopin.HighOrLow==0)&amp;amp;(zhaopin.Standard==2)].HighSalary.apply(&lt;span&gt;lambda&lt;/span&gt; x: 0.8*&lt;span&gt;x)
zhaopin.loc[(zhaopin.HighOrLow&lt;/span&gt;==0)&amp;amp;(zhaopin.Standard==4), &lt;span&gt;'&lt;/span&gt;&lt;span&gt;HighSalary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = zhaopin[(zhaopin.HighOrLow==0)&amp;amp;(zhaopin.Standard==4)].HighSalary.apply(&lt;span&gt;lambda&lt;/span&gt; x: x/12*10&lt;span&gt;)
zhaopin.loc[(zhaopin.HighOrLow&lt;/span&gt;==0)&amp;amp;(zhaopin.Standard==4), &lt;span&gt;'&lt;/span&gt;&lt;span&gt;LowSalary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = zhaopin[(zhaopin.HighOrLow==0)&amp;amp;(zhaopin.Standard==4)].HighSalary.apply(&lt;span&gt;lambda&lt;/span&gt; x: 0.8*&lt;span&gt;x)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;查看当HighOrLow为2时, Srandard有哪些, 输出为4&lt;/span&gt;
zhaopin[zhaopin.HighOrLow==2&lt;span&gt;].Standard.unique() 
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;完成HighOrLow为2时的单位换算&lt;/span&gt;
zhaopin.loc[zhaopin.HighOrLow==2, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;LowSalary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]  = zhaopin[zhaopin.HighOrLow==2].HighSalary.apply(&lt;span&gt;lambda&lt;/span&gt; x: x/12*10&lt;span&gt;)
zhaopin.loc[zhaopin.HighOrLow&lt;/span&gt;==2, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;HighSalary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = zhaopin[zhaopin.HighOrLow==2].LowSalary.apply(&lt;span&gt;lambda&lt;/span&gt; x: 1.2*x)&lt;br/&gt;zhaopin.LowSalary , zhaopin.HighSalary = zhaopin.LowSalary.apply(lambda x: '%.1f'%x), zhaopin.HighSalary.apply(lambda x: '%.1f'%x)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2. Workplace&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对工作地区进行统一&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;查看工作地有哪些&lt;/span&gt;
&lt;span&gt;zhaopin.Workplace.unique()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;查看工作地点名字中包括省的有哪些, 结果显示全部为xx省, 且其中不会出现市级地区名&lt;/span&gt;
zhaopin[zhaopin.Workplace.str.contains(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;省&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)].Workplace.unique()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将地区统一到市级&lt;/span&gt;
zhaopin[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Workplace&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = zhaopin.Workplace.str.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, expand=True)[0]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 删除重复多余信息&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
zhaopin.drop([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Salary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Standard&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;HighOrLow&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], axis = 1, inplace =&lt;span&gt; True)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;到目前为止, 我们对数据处理完成了, 接下来就是分析了.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;5. 可视化分析&lt;/h2&gt;
&lt;h3&gt;5.1 企业类型&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib.pyplot as plt
CompanyNature_Count &lt;/span&gt;=&lt;span&gt; zhaopin.CompanyNature.value_counts()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;设置中文字体&lt;/span&gt;
font = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;family&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SimHei&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
matplotlib.rc(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;font&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, **&lt;span&gt;font)
fig &lt;/span&gt;= plt.figure(figsize = (8, 8&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;绘制饼图, 参数pctdistance表示饼图内部字体离中心距离, labeldistance则是label的距离, radius指饼图的半径&lt;/span&gt;
patches, l_text, p_text = plt.pie(CompanyNature_Count, autopct = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%.2f%%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, pctdistance = 0.6, labels = CompanyNature_Count.index, labeldistance=1.1, radius = 1&lt;span&gt;)
m , n&lt;/span&gt;= 0.02, 0.028
&lt;span&gt;for&lt;/span&gt; t &lt;span&gt;in&lt;/span&gt; l_text[7: 11&lt;span&gt;]:
    t.set_y(m)
    m &lt;/span&gt;+= 0.1
&lt;span&gt;for&lt;/span&gt; p &lt;span&gt;in&lt;/span&gt; p_text[7: 11&lt;span&gt;]:
    p.set_y(n)
    n &lt;/span&gt;+= 0.1&lt;span&gt;
plt.title(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;数据分析岗位中各类型企业所占比例&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, fontsize=24)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;可以看出招聘中主要以民营企业, 合资企业和上市公司为主.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469712/201811/1469712-20181101023911138-236299642.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;5.2 企业规模&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
CompanySize_Count =&lt;span&gt; zhaopin.CompanySize.value_counts()
index, bar_width&lt;/span&gt;= np.arange(len(CompanySize_Count)), 0.6&lt;span&gt;
fig &lt;/span&gt;= plt.figure(figsize = (8, 6&lt;span&gt;))
plt.barh(index&lt;/span&gt;*(-1)+bar_width, CompanySize_Count, tick_label = CompanySize_Count.index, height =&lt;span&gt; bar_width)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;添加数据标签&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; x,y &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(CompanySize_Count):
    plt.text(y&lt;/span&gt;+0.1, x*(-1)+bar_width, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%y, va = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.title(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;数据分析岗位各公司规模总数分布条形图&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, fontsize = 24)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;招聘数据分析岗位的公司规模主要以50-500人为主&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469712/201811/1469712-20181101150203111-1071098566.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;5.3 地区&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; pyecharts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Geo
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; collections &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Counter
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;统计各地区出现次数, 并转换为元组的形式&lt;/span&gt;
data =&lt;span&gt; Counter(place).most_common()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;生成地理坐标图&lt;/span&gt;
geo =Geo(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;数据分析岗位各地区需求量&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, title_color=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#fff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, title_pos=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, width=1200, height=600, background_color=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#404a59&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
attr, value &lt;/span&gt;=&lt;span&gt;geo.cast(data)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;添加数据点&lt;/span&gt;
geo.add(&lt;span&gt;''&lt;/span&gt;, attr, value, visual_range=[0, 100],visual_text_color=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#fff&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, symbol_size=5, is_visualmap=True, is_piecewise=&lt;span&gt;True)
geo.show_config()
geo.render()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;可以看出北上广深等经济相对发达的地区, 对于数据分析岗位的需求量大.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469712/201811/1469712-20181101185759767-792933107.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考自: https://blog.csdn.net/qq_41841569/article/details/82811153?utm_source=blogxgwz1&lt;/p&gt;
&lt;h3&gt; 5.4 学历和工作经验&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
fig, ax = plt.subplots(1, 2, figsize = (18, 8&lt;span&gt;))
Education_Count &lt;/span&gt;=&lt;span&gt; zhaopin.Education.value_counts()
Workyear_Count &lt;/span&gt;=&lt;span&gt; zhaopin.Workyear.value_counts()
patches, l_text, p_text &lt;/span&gt;= ax[0].pie(Education_Count, autopct = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%.2f%%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, labels =&lt;span&gt; Education_Count.index )
m &lt;/span&gt;= -0.01
&lt;span&gt;for&lt;/span&gt; t &lt;span&gt;in&lt;/span&gt; l_text[6&lt;span&gt;:]:
    t.set_y(m)
    m &lt;/span&gt;+= 0.1
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(t)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; p &lt;span&gt;in&lt;/span&gt; p_text[6&lt;span&gt;:]:
    p.set_y(m)
    m &lt;/span&gt;+= 0.1&lt;span&gt;
ax[0].set_title(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;数据分析岗位各学历要求所占比例&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, fontsize = 24&lt;span&gt;)
index, bar_width &lt;/span&gt;= np.arange(len(Workyear_Count)), 0.6&lt;span&gt;
ax[&lt;/span&gt;1].barh(index*(-1) + bar_width, Workyear_Count, tick_label = Workyear_Count.index, height =&lt;span&gt; bar_width)
ax[&lt;/span&gt;1].set_title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;数据分析岗位工作经验要求&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, fontsize= 24)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;学历要求多以本科,大专为主, 工作经验要求中无工作经验要求为主, 可见招聘主要面向的是应届毕业生.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469712/201811/1469712-20181101163833159-1169766680.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;5.4 薪资水平&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 薪资与岗位需求关系&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
fig = plt.figure(figsize = (9,7&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;转换类型为浮点型&lt;/span&gt;
zhaopin.LowSalary, zhaopin.HighSalary =&lt;span&gt; zhaopin.LowSalary.astype(float), zhaopin.HighSalary.astype(float)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;分别求各地区平均最高薪资, 平均最低薪资&lt;/span&gt;
Salary = zhaopin.groupby('Workplace', as_index = False)['LowSalary', 'HighSalary'].mean()&lt;span&gt;#&lt;/span&gt;&lt;span&gt;分别求各地区的数据分析岗位数量,并降序排列 &lt;/span&gt;
Workplace = zhaopin.groupby(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Workplace&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, as_index= False)[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;JobTitle&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].count().sort_values(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;JobTitle&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, ascending =&lt;span&gt; False)&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;合并数据表&lt;/span&gt;
&lt;span&gt;Workplace = pd.merge(Workplace, Salary, how = 'left', on = 'Workplace')&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;用前20名进行绘图&lt;/span&gt;
Workplace = Workplace.head(20&lt;span&gt;)
plt.bar(Workplace.Workplace, Workplace.JobTitle, width &lt;/span&gt;= 0.8, alpha = 0.8&lt;span&gt;)
plt.plot(Workplace.Workplace, Workplace.HighSalary&lt;/span&gt;*1000, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,color = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, alpha = 0.9, label=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;平均最高薪资&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.plot(Workplace.Workplace, Workplace.LowSalary&lt;/span&gt;*1000, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,color = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, alpha = 0.9, label=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;平均最低薪资&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;添加数据标签&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; x, y &lt;span&gt;in&lt;/span&gt; enumerate(Workplace.HighSalary*1000&lt;span&gt;):
    plt.text(x, y, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%.0f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%y, ha = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;left&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, va=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bottom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; x, y &lt;span&gt;in&lt;/span&gt; enumerate(Workplace.LowSalary*1000&lt;span&gt;):
    plt.text(x, y, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%.0f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%y, ha = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;right&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, va=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bottom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; x, y &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(Workplace.JobTitle):
    plt.text(x, y, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%y, ha = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, va=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bottom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.legend()
plt.title(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;数据分析岗位需求量排名前20地区的薪资水平状况&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, fontsize = 20)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;可以看出, 随着需求量的减少, 薪资水平也有所降低. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1469712/201811/1469712-20181101225550521-1918989319.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 薪资与经验关系&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;求出各工作经验对应的平均最高与平均最低薪资&lt;/span&gt;
Salary_Year = zhaopin.groupby(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Workyear&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, as_index = False)[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;LowSalary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;HighSalary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].mean()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;求平均薪资&lt;/span&gt;
Salary_Year[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Salary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = (Salary_Year.LowSalary.add(Salary_Year.HighSalary)).div(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;转换列, 得到想要的顺序&lt;/span&gt;
Salary_Year.loc[0], Salary_Year.loc[6] = Salary_Year.loc[6&lt;span&gt;], Salary_Year.loc[0]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;绘制条形图&lt;/span&gt;
plt.barh(Salary_Year.Workyear, Salary_Year.Salary, height = 0.6&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; x, y &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(Salary_Year.Salary):
    plt.text(y&lt;/span&gt;+0.1,x, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%.2f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%y, va = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.title(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;各工作经验对应的平均薪资水平(单位:千/月)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, fontsize = 20)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;工作经验越丰富, 薪资越高.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469712/201811/1469712-20181101223710941-1082297522.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 3. 薪资与学历关系&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;计算平均薪资&lt;/span&gt;
Salary_Education = zhaopin.groupby(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, as_index = False)[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;LowSalary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;HighSalary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].mean()
Salary_Education[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Salary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = Salary_Education.LowSalary.add(Salary_Education.HighSalary).div(2&lt;span&gt;)
Salary_Education &lt;/span&gt;= Salary_Education.sort_values(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Salary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, ascending =&lt;span&gt; True)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;绘制柱形图&lt;/span&gt;
plt.bar(Salary_Education.Education, Salary_Education.Salary, width = 0.6&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; x,y &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(Salary_Education.Salary):
    plt.text(x, y, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%.2f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%y, ha = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, va=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bottom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.title(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;各学历对应的平均工资水平(单位:千/月)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, fontsize = 20)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;学历越高, 对应的薪资水平越高 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1469712/201811/1469712-20181101232146943-736047012.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;1. 数据分析岗位中企业类型以民营企业, 合资企业和上市公司为主, 企业规模多为50-500人.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 数据分析岗位的学历要求以本科,大专为主, 经验中无工作经验占多数, 可见主要面向的是应届毕业生.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3. 北上广深杭等经济相对发达的地区对数据分析岗位的需求量大, 且薪资水平较高于其他地区; 学历越高, 经验越丰富对应的薪资水平也会增高.&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 02 Nov 2018 05:37:00 +0000</pubDate>
<dc:creator>Star_Zhao</dc:creator>
<og:description>本次主要围绕数据分析岗位的招聘情况, 进行一个简单的数据分析 环境 win8, python3.7, pycharm, jupyter notebook 正文 1. 明确分析目的 了解数据分析岗位的最</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/star-zhao/p/9873860.html</dc:identifier>
</item>
<item>
<title>美团大脑：知识图谱的建模方法及其应用 - 美团技术团队</title>
<link>http://www.cnblogs.com/meituantech/p/9895775.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/meituantech/p/9895775.html</guid>
<description>&lt;p&gt;作为人工智能时代最重要的知识表示方式之一，知识图谱能够打破不同场景下的数据隔离，为搜索、推荐、问答、解释与决策等应用提供基础支撑。美团大脑围绕吃喝玩乐等多种场景，构建了生活娱乐领域超大规模的知识图谱，为用户和商家建立起全方位的链接。我们美团希望能够通过对应用场景下的用户偏好和商家定位进行更为深度的理解，进而为大众提供更好的智能化服务，帮大家吃得更好，生活更好。&lt;/p&gt;
&lt;p&gt;近日，美团 AI 平台部 NLP 中心负责人、大众点评搜索智能中心负责人王仲远博士受邀在 AI 科技大本营做了一期线上分享，为大家讲解了美团大脑的设计思路、构建过程、目前面临的挑战，以及在美团点评中的具体应用与实践，其内容整理如下：&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;知识图谱的重要性&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/01.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;近年来，人工智能正在快速地改变人们的生活，可以看到各家科技公司都纷纷推出人工智能产品或者系统，比如说在 2016 年，谷歌推出的 AlphaGo ，一问世便横扫整个围棋界，完胜了人类冠军。又比如亚马逊推出的 Amazon Go 无人超市，用户只需下载一个 App，走进这家超市，就可以直接拿走商品，无需排队结账便可离开，这是人工智能时代的“新零售”体验。又比如微软推出的 Skype Translator，它能够帮助使用不同语言的人群进行实时的、无障碍的交流。再比如说苹果推出的 Siri 智能助理，它让每一个用苹果手机的用户都能够非常便捷地完成各项任务。所有这些人工智能产品的出现都依赖于背后各个领域技术突飞猛进的进展，包括机器学习、计算机视觉、语音识别、自然语言处理等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/02.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;作为全球领先的生活服务电子商务平台，美团点评在人工智能领域也在积极地进行布局。今年 2 月份，AI 平台部 NLP 中心正式成立，我们的愿景是用人工智能帮大家吃得更好，生活更好。语言是人类智慧的结晶，而自然语言处理是人工智能中最为困难的问题之一，其核心是让机器能像人类一样理解和使用语言。&lt;/p&gt;
&lt;p&gt;我们希望在不久的将来，当用户发表一条评价的时候，能够让机器阅读这条评价，充分理解用户的喜怒哀乐。当用户进入大众点评的一个商家页面时，面对成千上万条用户评论，我们希望机器能够代替用户快速地阅读这些评论，总结商家的情况，供用户进行参考。未来，当用户有任何餐饮、娱乐方面的决策需求的时候，美团点评能够提供人工智能助理服务，帮助用户快速的进行决策。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/03.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所有这一切，都依赖于人工智能背后两大技术驱动力：&lt;strong&gt;深度学习&lt;/strong&gt;和&lt;strong&gt;知识图谱&lt;/strong&gt;。我们可以将这两个技术进行一个简单的比较：&lt;/p&gt;
&lt;p&gt;我们将深度学习归纳为隐性的模型，它通常是面向某一个具体任务，比如说下围棋、识别猫、人脸识别、语音识别等等。通常而言，在很多任务上它能够取得非常优秀的结果，同时它也有非常多的局限性，比如说它需要海量的训练数据，以及非常强大的计算能力，难以进行任务上的迁移，而且可解释性比较差。&lt;/p&gt;
&lt;p&gt;另一方面，知识图谱是人工智能的另外一大技术驱动力，它能够广泛地适用于不同的任务。相比深度学习，知识图谱中的知识可以沉淀，可解释性非常强，类似于人类的思考。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/04.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以通过上面的例子，来观察深度学习技术和人类是如何识别猫的，以及它们的过程有哪些区别。&lt;/p&gt;
&lt;p&gt;2012 年，Google X 实验室宣布使用深度学习技术，让机器成功识别了图片中的猫。它们使用了 1000 台服务器，16000 个处理器，连接成一个 10 亿节点的人工智能大脑。这个系统阅读了 1000 万张从 YouTube 上抽取的图片，最终成功识别出这个图片中有没有猫。&lt;/p&gt;
&lt;p&gt;我们再来看看人类是如何做的。对于一个 3 岁的小朋友，我们只需要给他看几张猫的图片，他就能够很快识别出不同图片中的猫，而这背后其实就是大脑对于这些知识的推理。&lt;/p&gt;
&lt;p&gt;2011 年，Science 上有一篇非常出名的论文叫《How to Grow a Mind》。这篇论文的作者来自于 MIT、CMU、UC Berkeley、Stanford 等美国名校的教授。在这篇论文里，最重要的一个结论就是：&lt;strong&gt;如果我们的思维能够跳出给定的数据，那么必须有 Another Source Of Information 来 Make Up The Difference&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这里的知识语言是什么？对于人类来讲，其实就是我们从小到大接受的学校教育，报纸上、电视上看到的信息，通过社交媒体，通过与其他人交流，不断积累起来的知识。&lt;/p&gt;
&lt;p&gt;近年来，不管是学术界还是工业界都纷纷构建自家的知识图谱，有面向全领域的知识图谱，也有面向垂直领域的知识图谱。其实早在文艺复兴时期，培根就提出了“知识就是力量”，在当今人工智能时代，各大科技公司更是纷纷提出：&lt;strong&gt;知识图谱就是人工智能的基础&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/05.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;全球的互联网公司都在积极布局知识图谱。早在 2010 年微软就开始构建知识图谱，包括 Satori 和 Probase。2012 年，Google 正式发布了 Google Knowledge Graph，现在规模已经达到 700 亿左右。目前微软和 Google 拥有全世界最大的通用知识图谱，Facebook 拥有全世界最大的社交知识图谱，而阿里巴巴和亚马逊则分别构建了商品知识图谱。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/06.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果按照人类理解问题和回答问题这一过程来进行区分，我们可以将知识图谱分成两类。我们来看这样一个例子，如果用户看到这样一个问题，“Who was the U.S. President when the Angels won the World Series？”相信所有的用户都能够理解这个问题，也就是当 Angels 队赢了 World Series 的时候，谁是美国的总统？&lt;/p&gt;
&lt;p&gt;这是一个问题理解的过程，它所需要的知识通常我们称之为 Common Sense Knowledge（常识性知识）。另外一方面，很多网友可能回答不出这个问题，因为它需要另外一个百科全书式的知识。&lt;/p&gt;
&lt;p&gt;因此，我们将知识图谱分成两大类，一类叫 Common Sense Knowledge Graph（常识知识图谱），另外一类叫 Encyclopedia Knowledge Graph（百科全书知识图谱）。这两类知识图谱有很明显的区别。针对 Common Sense Knowledge Graph，通常而言，我们会挖掘这些词之间的 Linguistic Knowledge；对于 Encyclopedia Knowledge Graph，我们通常会在乎它的 Entities 和这些 Entities 之间的 Facts。&lt;/p&gt;
&lt;p&gt;对于 Common Sense Knowledge Graph，一般而言我们比较在乎的 Relation 包括 isA Relation、isPropertyOf Relation。对于 Encyclopedia Knowledge Graph，通常我们会预定义一些谓词，比如说 DayOfbirth、LocatedIn、SpouseOf 等等。&lt;/p&gt;
&lt;p&gt;对于 Common Sense Knowledge Graph 通常带有一定的概率，但是 Encyclopedia Knowledge Graph 通常就是“非黑即白”，那么构建这种知识图谱时，我们在乎的就是 Precision（准确率）。&lt;/p&gt;
&lt;p&gt;Common Sense Knowledge Graph 比较有代表性的工作包括 WordNet、KnowItAll、NELL 以及 Microsoft Concept Graph。而 Encyclopedia Knowledge Graph 则有 Freepase、Yago、Google Knowledge Graph 以及正在构建中的“美团大脑”。&lt;/p&gt;
&lt;p&gt;这里跟大家介绍两个代表性工作：1）Common Sense Knowledge Graph：Probase；2）Encyclopedia Knowledge Graph：美团大脑。&lt;/p&gt;
&lt;h2 id=&quot;-common-sense-knowledge-graph-&quot;&gt;常识性知识图谱（Common Sense Knowledge Graph）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/07.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Concept Graph 于 2016 年 11 月正式发布，但是它早在 2010 年就已经开始进行研究，是一个非常大的图谱。在这个图谱里面有上百万个 Nodes（节点），这些 Nodes 有Concepts（概念），比如说 Spanish Artists（西班牙艺术家）；有 Entities（实体），比如说 Picasso（毕加索）；有 Attributes（属性），比如 Birthday（生日）；有 Verbs（动词），有 Adjectives（形容词），比如说 Eat、Sweet。也有很多很多的边，最重要的边，是这种 isA 边，比如说 Picasso，还有 isPropertyOf 边。对于其他的 Relation，我们会统称为 Co-occurance。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/08.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是我们在微软亚洲研究院期间对 Common Sense Knowledge Graph 的 Research Roadmap（研究路线图）。当我们构建出 Common Sense Knowledge Graph 之后，重要的是在上面构建各种各样的模型。我们提出了一些模型叫 Conceptualization（概念化模型），它能够支持 Term Similarity、Short Text Similarity 以及 Head-Modifier Detection，最终支持各种应用，比如 NER、文本标注、Ads、Query Recommendation、Text Understanding 等等。&lt;/p&gt;
&lt;p&gt;到底什么是 Short Text Understanding？常识怎么用在 Text Understanding 中？下面我们可以看一些具体的例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/09.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当大家看到上面中间的文本时，相信所有人都能够认出这应该是一个日期，但是大家没办法知道这个日期代表什么含义。但如果我们再多给一些上下文信息，比如 Picasso、Spanish等等，大家对这个日期就会有一些常识性的推理。我们会猜测这个日期很可能是 Picasso 的出生日期，或者是去世日期，这就是常识。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/10.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;比如说当我们给定 China 和 India 这两个 Entity 的时候，我们的大脑就会做出一些常识性的推理，我们会认为这两个 Entity 在描述 Country。如果再多给一个 Entity：Brazil，这时候我们通常会想到 Emerging Market。如果再加上 Russia，大家可能就会想到“金砖四国”或者“金砖五国”。所有这一切就是常识性的推理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/11.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再比如，当我们看到 Engineer 和 Apple 的时候，我们会对 Apple 做一些推理，认为它就是一个 IT Company，但是如果再多给一些上下文信息，在这个句子里面由于 eating 的出现，我相信大家的大脑也会一样地做出常识推理，认为这个 Apple 不再是代表 Company，而是代表 Fruit。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/12.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以，这就是我们提出来的 Conceptualization Model，它是一个 Explicit Representation。我们希望它能够将 Text，尤其是 Short Text，映射到 Millions Concepts，这样的 Representation 能够比较容易让用户进行理解，同时能够应用到不同场景当中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/13.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这一页 PPT 中，我们展示了 Conceptualization 的结果。当输入是 Pear 和 Apple 的时候，那么我们会将这个 Apple 映射到 Fruit。但是如果是 iPad Apple 的时候，我们会将它映射到 Company，同时大家注意这并不是唯一的结果，我们实际上是会被映射到一个 Concept Vector。这个 Concept Vector 有多大？它是百万级维度的 Vector，同时也是一个非常 Sparse 的一个 Vector。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/14.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过这样的一个 Conceptualization Model，我们能够解决什么样的文本理解问题？我们可以看这样一个例子。比如说给定一个非常短的一个文本 Python，它只是一个 Single Instance，那么我们会希望将它映射到至少两大类的 Concept 上，一种可能是 Programming Language，另外一种是 Snake。当它有一些 Context，比如说 Python Tutorial 的时候，那么这个时候 Python 指的应该是 Programming Language，如果当它有其他的 Adjective、Verb，比如有 Dangerous 时，这时候我们就会将 Python 理解为 Snake。&lt;/p&gt;
&lt;p&gt;同时如果在一个文本里面包含了多个的 Entity，比如说 DNN Tool、Python，那么我们希望能够检测出在这个文本里面哪一个是比较重要的 Entity，哪一个是用来做限制的 Entity。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/15.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面我们将简单地介绍一下，具体应该怎么去做。当我们在 Google 里搜一个 Single Instance 的时候，通常在右侧会出现这个 Knowledge Panel。对于 Microsoft 这样一个 Instance，我们可以看到这个红色框所框出来的 Concept，Microsoft 指向的是 Technology Company，这背后是怎么实现的？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/16.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到，Microsoft 实际上会指向非常非常多的 Concept，比如说 Company，Software Company，Technology Leader 等等。我们将它映射到哪一个 Concept 上最合适？&lt;/p&gt;
&lt;p&gt;如果将它映射到 Company 这个 Concept 上，很显然它是对的，但是我们却没办法将 Microsoft 和 KFC、BMW 这样其他类型的产品区分开来。另外一方面，如果我们将 Microsoft 映射到 Largest Desktop OS Vendor 上，那么这是一个非常 Specific 的 Concept，这样也不太好，为什么？因为这个 Concept 太 Specific，太 Detail，它可能只包含了 Microsoft 这样一个 Entity，那么它就失去了 Concept 的这种抽象能力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/17.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以我们希望将 Microsoft 映射到一个既不是特别 General（抽象），又不是一个特别 Specific（具体）的 Concept 上。在语言学上，我们将这种映射称之为 Basic-level，我们将整个映射过程命名为 Basic-level Conceptualization。&lt;/p&gt;
&lt;p&gt;我们提出了一种计算 Basic-level Conceptualization 的方法，其实它非常简单而且非常有效。就是将两种的 Typicality 做了一些融合，同时我们也证明了它们跟 PMI 和 Commute Time 之间的一些关联。并且在一个大规模的数据集上，我们通过 Precision 和 NDCG 对它们进行了评价。最后证明，我们所提出来的 Scoring 方法，它在 NDCG 和 Precision 上都能达到比较好的结果。最重要的是，它在理论上是能够对 Basic-Level 进行很好的解释。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/18.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面我们来看一下，当 Instance 有了一些 Context 之后，我们应该怎么去进行处理。我们通过一个例子，来简单地解释一下这背后最主要的思想。&lt;/p&gt;
&lt;p&gt;比如说 iPad、Apple，其中 iPad 基本上是没有歧异的，它会映射到 Device、Product。但是对于 Apple 而言，它可能会映射到至少两类的 Concept 上，比如说 Fruit、Company。那么我们怎么用 iPad 对 Apple 做消歧呢？&lt;/p&gt;
&lt;p&gt;方法其实也挺直观的。我们会通过大量的统计去发现像 iPad 这样的 Entity，通常会跟 Company、Product 共同出现。比如说 iPad 有可能会跟三星共同出现，有可能会跟 Google 共同出现，那么我们就发现它会经常跟 Brand、Company、Product共同出现。于是我们就利用新挖掘出来的 Knowledge 对 Apple 做消歧，这就是背后最主要的思想。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/19.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;除了刚才这样一个 General Context 以外，在很多时候这些 Text 可能还会包含很多一些特殊的类型，比如说 Verb、Adjective。具体而言，我们希望在看到 Watch Harry Potter 时，能够知道 Harry Potter 是 Movie，当我们看到 Read Harry Potter 时，能够知道 Harry Potter 是 Book。同样的，Harry Potter 还有可能是一个角色名称，或者是一个游戏名称。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/20.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么我们来看一看应该怎样去解决这样一件事情。当我们看到 Watch Harry Potter 时，我们首先要知道，Harry Potter 有可能是一本 Book，也有可能是一部 Movie。我们可以算出一个先验概率，这通常要通过大规模的统计。同时我们要知道，Watch 它有可能是一个名词，同时它也有可能是一个动词，并且我们还需要去挖掘，当 Watch 作为动词的时候，它和 Movie 有非常紧密的关联。&lt;/p&gt;
&lt;p&gt;所以我们本质上是要去做一些概率上的推理，不仅要将条件概率做非常细粒度的分解，最后还要做概率计算。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/21.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过概率计算的方法，我们实际上就可以构建出一个非常大的离线知识图谱，那么我们在这个上面，就可以有很多的 Term，以及它们所属的一些 Type，以及不同 Term 之间的一些关联。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/22.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当我们用这样一个非常大的离线知识图谱来做 Text Understanding 的时候，我们可以首先将这个 Text 进行分割处理，在分割之后，我们实际上是可以从这个非常大的离线知识图谱中截取出它的一个子图。最后我们使用了 Random Walk With Restart 的模型，来对这样一个在线的 Subgraph 进行分类。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/23.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们再来看一下，如果一个文本里包含了 Multiple Entities，要怎样处理？我们需要做知识挖掘，怎么做？首先我们可以得到非常多的 Query Log，然后我们也可以去预定一些 Pattern，通过这种 Pattern 的定义，可以抽取出非常多 Entity 之间 Head 和 Modifier 这样的 Relation，那么在接下来我们可以将这些 Entity 映射到 Concept 上，之后得到一个 Pattern。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/24.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这个过程之中，我们要将 Entity 映射到 Concept 上，那么这就是前面所提到的 Conceptualization。我们希望之后的映射不能太 General，避免 Concept Pattern 冲突。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/25.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是它也不能太 Specific，因为如果太 Specific，可能就会缺少表达能力。最坏的情况，它有可能就会退化到 Entity Level，而 Entity 至少都是百万的规模，那么整个 Concept Patterns 就有可能变成百万乘以百万的级别，显然是不可用的。&lt;/p&gt;
&lt;p&gt;所以我们就用到了前面介绍的 Basic-Level Conceptualization 的方法，将它映射到一个既不是特别 General，也不是特别 Specific 的 Concept 上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/26.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;大家可以看一下我们能够挖掘出来的一些 Top 的 Concept Patterns，比如说 Game 和 Platform，就是一个 Concept 和一个 Pattern。它有什么用？举一个具体的例子，当用户在搜 Angry Birds、iOS 的时候，我们就可以知道用户想找的是 Angry Birds 这款游戏，而 iOS 是用来限制这款游戏的一个 Platform。苹果公司每年都会推出新版本的 iOS，那么我们挖掘出这样的 Concept Pattern 之后，不管苹果出到 iOS 15或者 iOS 16，那么我们只需要将它们映射到 Platform，那么我们的 Concept Patterns 就仍然有效，这样可以很容易地进行知识扩展。&lt;/p&gt;
&lt;p&gt;所以 Common Sense Knowledge Mining 以及 Conceptualization Modeling，可以用在很多的应用上，它可以用来算 Short Text Similarity，可以用来做 Classification、Clustering，也可以用来做广告的 Semantic Match、Q/A System、Chatbot 等等。&lt;/p&gt;
&lt;h2 id=&quot;-encyclopedia-knowledge-graph-&quot;&gt;美团大脑——百科全书式知识图谱（Encyclopedia Knowledge Graph）&lt;/h2&gt;
&lt;p&gt;在介绍完 Common Sense Knowledge Graph 之后，给大家介绍一下 Encyclopedia Knowledge Graph。这是美团的知识图谱项目——美团大脑。&lt;/p&gt;
&lt;p&gt;美团大脑是什么？美团大脑是我们正在构建中的一个全球最大的餐饮娱乐知识图谱。我们希望能够充分地挖掘关联美团点评各个业务场景里的公开数据，比如说我们有累计 40 亿的用户评价，超过 10 万条个性化标签，遍布全球的 3000 多万商户以及超过 1.4 亿的店菜，我们还定义了 20 级细粒度的情感分析。&lt;/p&gt;
&lt;p&gt;我们希望能够充分挖掘出这些元素之间的关联，构建出一个知识的“大脑”，用它来提供更加智能的生活服务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/27.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们简单地介绍一下美团大脑是如何进行构建的。我们会使用 Language Model（统计语言模型）、Topic Model（主题生成模型） 以及 Deep Learning Model（深度学习模型） 等各种模型，希望能够做到商家标签的挖掘，菜品标签的挖掘和情感分析的挖掘等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/28.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了挖掘商户标签，首先我们要让机器去阅读评论。我们使用了无监督和有监督的深度学习模型。&lt;/p&gt;
&lt;p&gt;无监督模型我们主要用了LDA，它的特点是成本比较低，无需标注的数据。当然，它准确性会比较不可控，同时对挖掘出来的标签我们还需要进行人工的筛选。至于有监督的深度学习模型，那么我们用了 LSTM，它的特点是需要比较大量的标注数据。&lt;/p&gt;
&lt;p&gt;通过这两种模型挖掘出来的标签，我们会再加上知识图谱里面的一些推理，最终构建出商户的标签。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/29.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果这个商户有很多的评价，都是围绕着宝宝椅、带娃吃饭、儿童套餐等话题，那么我们就可以得出很多关于这个商户的标签。比如说我们可以知道它是一个亲子餐厅，它的环境比较别致，服务也比较热情。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/30.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面介绍一下我们如何对菜品进行标签的挖掘？我们使用了 Bi-LSTM 以及 CRF 模型。比如说从这个评论里面我们就可以抽取出这样的 Entity，再通过与其他的一些菜谱网站做一些关联，我们就可以得到它的食材、烹饪方法、口味等信息，这样我们就为每一个店菜挖掘出了非常丰富的口味标签、食材标签等各种各样的标签。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/31.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面再简单介绍一下，我们如何进行评论数据的情感挖掘。我们用的是 CNN+LSTM 的模型，对于每一个用户的评价我们都能够分析出他的一些情感的倾向。同时我们也正在做细粒度的情感分析，我们希望能够通过用户短短的评价，分析出他在不同的维度，比如说交通、环境、卫生、菜品、口味等方面的不同的情感分析的结果。值得一提的是，这种细粒度的情感分析结果，目前在全世界范围内都没有很好的解决办法，但是美团大脑已经迈出了非常重要的一步。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/32.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面介绍一下我们的知识图谱是如何进行落地的。目前业界知识图谱已经有非常多的成熟应用，比如搜索、推荐、问答机器人、智能助理，包括在穿戴设备、反欺诈、临床决策上都有非常好的应用。同时业界也有很多的探索，包括智能商业模式、智能市场洞察、智能会员体系等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/33.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如何用知识图谱来改进我们的搜索？如果大家现在打开大众点评，搜索某一个菜品时，比如说麻辣小龙虾，其实我们的机器是已经帮大家提前阅读了所有的评价，然后分析出提供这道菜品的商家，我们还会根据用户评论的情感分析结果来改进这些搜索排序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/34.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此外，我们也将它用在商圈的个性化推荐。当大家打开大众点评时，如果你现在位于某一个商场或者商圈，那么大家很快就能够看到这个商场或者商圈的页面入口。当用户进入这个商场和商户页面时，通过知识图谱，我们就能够提供“千人千面”的个性化排序和个性化推荐。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/35.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这背后其实使用了一个“水波”的深度学习模型，关于这个深度学习模型更详细的介绍，大家可以参见我们在 CIKM 上的一篇论文。&lt;/p&gt;
&lt;p&gt;所有的这一切，其实还有很多的技术突破等待我们去解决。比如整个美团大脑的知识图谱在百亿的量级，这也是世界上最大的餐饮娱乐知识图谱，为了支撑这个知识图谱，我们需要去研究千亿级别的图存储和计算引擎技术。我们也正在搭建一个超大规模的 GPU 集群，来支持海量数据的深度学习算法。未来，当所有的这些技术都成熟之后，我们还希望能够为所有用户提供“智慧餐厅”和“智能助理”的体验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/AI_NLP/36.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;文章转载自 AI 科技大本营（rgznai100），部分内容有修正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;-&quot;&gt;作者简介&lt;/h2&gt;
&lt;p&gt;仲远，博士，美团点评高级研究员、高级总监，美团 AI 平台部 NLP 中心负责人、大众点评搜索智能中心负责人。加入美团点评前，担任美国 Facebook 公司 Research Scientist，负责 Facebook 产品级 NLP Service。在 Facebook 之前，担任微软亚洲研究院的主管研究员，负责微软研究院知识图谱项目和对话机器人项目。多年来专注于自然语言处理、知识图谱及其在文本理解方面的研究，在国际顶级学术会议如 VLDB、ICDE、IJCAI、CIKM 等发表论文30余篇，获得 ICDE 2015 最佳论文奖，并是 ACL 2016 Tutorial “Understanding Short Texts”的主讲人，出版学术专著3部，获得美国专利5项。在 NLP 和 KG 研究领域及实际产品系统中均有丰富经验，研究领域包括：自然语言处理、知识图谱、深度学习、数据挖掘等。&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;招聘信息&lt;/h2&gt;
&lt;p&gt;美团点评 NLP 团队招聘各类算法人才，Base 北京上海均可。NLP 中心使命是打造世界一流的自然语言处理核心技术和服务能力，依托 NLP（自然语言处理）、Deep Learning（深度学习）、Knowledge Graph（知识图谱）等技术，处理美团点评海量文本数据，打通餐饮、旅行、休闲娱乐等各个场景数据，构建美团点评知识图谱，搭建通用 NLP Service，为美团点评各项业务提供智能的文本语义理解服务。我们的团队既注重AI技术的落地，也开展中长期的NLP及知识图谱基础研究。目前项目及业务包括美团点评知识图谱、智能客服、语音语义搜索、文章评论语义理解、美团点评智能助理等。真正助力于“帮大家吃得更好，生活更好”企业使命的实现，优化用户的生活体验，改善和提升消费者的生活品质。欢迎各位朋友推荐或自荐至 hr.ai@meituan.com。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法岗&lt;/strong&gt;：&lt;a href=&quot;https://zhaopin.meituan.com/job-detail?jobId=291801448272331465&quot;&gt;NLP算法工程师/专家/研究员&lt;/a&gt; 、&lt;a href=&quot;https://zhaopin.meituan.com/job-detail?jobId=291802012322333388&quot;&gt;知识图谱算法工程师/专家/研究员&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工程岗&lt;/strong&gt;：&lt;a href=&quot;https://zhaopin.meituan.com/job-detail?jobId=295725036608130037&quot;&gt;C++/Java研发专家/工程师&lt;/a&gt; 、&lt;a href=&quot;https://zhaopin.meituan.com/job-detail?jobId=292557987555804498&quot;&gt;AI平台研发工程师/专家&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;产品岗&lt;/strong&gt;：&lt;a href=&quot;https://zhaopin.meituan.com/job-detail?jobId=291803922350539431&quot;&gt;AI产品经理/专家&lt;/a&gt;（NLP、数据方向）&lt;/p&gt;
&lt;div class=&quot;hidden-mobile&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;strong&gt;发现文章有错误、对内容有疑问，都可以关注美团技术团队微信公众号（meituantech），在后台给我们留言。我们每周会挑选出一位热心小伙伴，送上一份精美的小礼品。快来扫码关注我们吧！&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;article__footer__img&quot;&gt;&lt;img src=&quot;https://tech.meituan.com/img/meituanjishutuandui.png&quot; alt=&quot;公众号二维码&quot; width=&quot;455&quot; align=&quot;center&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 02 Nov 2018 05:35:00 +0000</pubDate>
<dc:creator>美团技术团队</dc:creator>
<og:description>近日，美团 AI 平台部 NLP 中心负责人、大众点评搜索智能中心负责人王仲远博士受邀在 AI 科技大本营做了一期线上分享，为大家讲解了美团大脑的设计思路、构建过程、目前面临的挑战，以及在美团点评中的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/meituantech/p/9895775.html</dc:identifier>
</item>
<item>
<title>【纯·技术干货】更 App 化的小程序开发 - 又拍云</title>
<link>http://www.cnblogs.com/upyun/p/9895492.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/upyun/p/9895492.html</guid>
<description>&lt;p&gt;2018 年 10 月13 日，由又拍云和知晓云联合主办的 Open Talk 丨2018 小程序开发者沙龙系列活动广州站拉开帷幕，糗事百科前端负责人宋航在沙龙上做了《更App化的小程序开发》的分享。&lt;/p&gt;
&lt;p&gt;“2018 小程序开发者沙龙”是又拍云 Open Talk 继“2018 音视频技术沙龙”后推出的重磅系列活动，与大部分偏重营销、流量的小程序活动不同，本系列活动更热衷于分享小程序开发过程的种种有趣经历和有益的经验。&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-42ef7c01d9dba757481b21de04b8cefd_hd.jpg&quot; alt=&quot;&quot; width=&quot;1080&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;824&quot; data-original=&quot;https://pic4.zhimg.com/v2-42ef7c01d9dba757481b21de04b8cefd_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-42ef7c01d9dba757481b21de04b8cefd_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;宋航目前负责糗事百科的前端、小程序、小游戏相关的开发工作，对游戏开发、App 开发、Web 前端开发都有深入研究，追求开发好玩的产品。糗事百科在小程序上除了延伸自家产品制作了“糗事百科+ ”小程序外，还在以好玩、有趣为目标的道路上制作更多优质的小程序，比如在涂鸦方面的“填色心语”等。&lt;/p&gt;
&lt;p&gt;宋航认为，小程序肩负着强化 Web 能力、简化 App 开发的重大责任，同样是使用 Javascript 开发，很多人把 “Web 页面开发“的一套东西搬到小程序开发上，因此不得其法。在分享中，宋航介绍了借鉴 App 开发来做小程序的思路和方法，内容主要包括：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;小程序开发与传统 Web 页面开发的区别；&lt;/li&gt;
&lt;li&gt;MVC 模式如何帮助优化小程序开发流程；&lt;/li&gt;
&lt;li&gt;首屏优化；&lt;/li&gt;
&lt;li&gt;硬件能力的授权等。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以下是分享整理：&lt;/p&gt;

&lt;p&gt;大家下午好，非常开心能在 Open Talk 的活动上给大家分享糗事百科团队一年多以来的小程序开发经验。我是来自糗事百科的前端开发负责人宋航，今天分享的主题是“更 App 化的小程序开发”。&lt;/p&gt;
&lt;p&gt;在小程序发布的一年多以来，糗事百科把自家的 App 产品落地到小程序，而且开发了很多比较好玩的小程序。这些小程序不一定是用户量很高的产品，但是对于大家在小程序开发探索路上会有很大的帮助。&lt;/p&gt;
&lt;p&gt;2016 年底微信发布小程序，那个时候功能相对较少。简单的说就是 H5 的“微信化”，在微信里画了一个 H5 框架。但是今天小程序有更多的硬件能力，所以我今天才会分享《更 App 化的小程序开发》的主题。我的看法是不管是目前还是未来，小程序可以替代很多 App。&lt;/p&gt;

&lt;h2&gt;小程序的意义：加强能力，简化开发&lt;/h2&gt;
&lt;p&gt;大家认为小程序的出现意味着什么呢？对于开发者来说，我觉得小程序的出现其实“加强了 Web 的能力，简化了 App 的开发”。&lt;/p&gt;
&lt;p&gt;小程序在 Android、iOS 都可以运行，但是它相比于 App 有什么不同？在开发方面，可能早上有一个想法，晚上就可以开发出一个小程序并且实现上线；而开发 App，不可能早上有一个想法，晚上就完成开发并发布到各种各样的应用商店。&lt;/p&gt;
&lt;p&gt;第一，小程序与 H5 有什么不一样？&lt;/p&gt;
&lt;p&gt;小程序比 H5 有更多的能力，兼容性更好。前端开发者都知道各种浏览器的兼容是一个痛点，小程序的出现首先解决了兼容问题，同样的运行环境可以屏蔽掉不兼容的一些错误，让我们更专心于开发业务逻辑。&lt;/p&gt;
&lt;p&gt;第二，小程序有更强的硬件能力。&lt;/p&gt;
&lt;p&gt;例如把页面上的图片保存到手机相册，普通 H5 很难做到。在小程序里面，微信为了防止小程序滥用硬件能力，引入了一个概念——授权，这个概念在 App 里面已经有了。为什么小程序要有授权呢？因为“能力越大，责任越大”，微信可以赋予小程序更强的硬件能力，但是为了避免这种能力被乱用，必须加入授权这一概念。如果 H5 能够随便修改相册、修改联系人，那是一种很恐怖的事情。通过微信和授权机制，小程序可以调用到手机的各种硬件能力，相比 H5 有更大的想象空间。比如说我们现在做的直播、录像、拍照的功能都可以用到手机摄像头、麦克风、相册等，甚至可以把文件传到小程序，这个时候，我们产品可以拥有很大的想象空间。&lt;/p&gt;
&lt;p&gt;第三，小程序背靠“微信”的用户系统、推送、支付，有利于商业运营，让开发者节省了很多开发工作。H5 没有推送功能，要重新唤回用户需要费很多工夫，比如搞活动等。简单说一下 H5 的主要逻辑，如这张图：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-834869cefd2ec288866dc07fa78ea243_hd.jpg&quot; alt=&quot;&quot; width=&quot;694&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;694&quot; data-rawheight=&quot;643&quot; data-original=&quot;https://pic4.zhimg.com/v2-834869cefd2ec288866dc07fa78ea243_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-834869cefd2ec288866dc07fa78ea243_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;△ H5 的数据逻辑&lt;/p&gt;
&lt;p&gt;H5 的主要逻辑都可以划分为这个流程，通过请求网络数据、处理数据展示到用户面前，用户做出的任何操作，比如点赞、发评论返回到网络，请求回网络之后送回内容。&lt;/p&gt;
&lt;p&gt;对比 H5，小程序上有更多的硬件能力，小程序不仅能从网络上获取数据，还可以从硬件设备获取数据。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-c07bc8429fe076c7d72a14e58325a4c4_hd.jpg&quot; alt=&quot;&quot; width=&quot;1270&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1270&quot; data-rawheight=&quot;952&quot; data-original=&quot;https://pic1.zhimg.com/v2-c07bc8429fe076c7d72a14e58325a4c4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-c07bc8429fe076c7d72a14e58325a4c4_b.jpg&quot;/&gt;△ 小程序的数据逻辑&lt;/p&gt;

&lt;h2&gt;MVC：“糗百”开发小程序的业务逻辑&lt;/h2&gt;
&lt;p&gt;糗事百科团队早期做小程序开发时，由于产品比较广泛，迭代比较快，所以没有采用第三方框架，而是采用了官方的开发文档来工作。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-a25b4fb50a4b88de9f17944604cbc1c6_hd.jpg&quot; alt=&quot;&quot; width=&quot;1268&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1268&quot; data-rawheight=&quot;891&quot; data-original=&quot;https://pic2.zhimg.com/v2-a25b4fb50a4b88de9f17944604cbc1c6_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-a25b4fb50a4b88de9f17944604cbc1c6_b.jpg&quot;/&gt;△ 糗事百科早期开发小程序的逻辑&lt;/p&gt;
&lt;p&gt;官方的小程序开发文档其实很简单，我们控制对应的 page.js，通过设置 data，渲染到页面即 wxml，让它展示 UI 显示、动画效果和操作反馈。随着开发的深入，我们渐渐发现整个程序变得非常臃肿，因为小程序的逻辑代码都放在了 page.js 里面。一些资料里面提到小程序跟 H5 有一个很大的区别就是在跳转页面的时候我们不知道怎么传递数据，因为每一个 page.js 都是孤立的。资料里面也会教你如何去传递数据，但是做起来会非常麻烦，每当你创建一个 page.js，你就需要思考这个数据在下一个页面会不会用到，这个数据改了以后上一个页面应该怎么去重新渲染，当页面很多的时候就回变得非常复杂，这样会影响到我们每一次做新页面的开发。&lt;/p&gt;
&lt;p&gt;糗事百科团队在重构代码的时候，没有采取第三方框架，在原来基础上把整个 MVC 框架套进去。小程序官方提供的 page.js 可以想象成 MVC 框架下的 Controller ，我们把需要用到的数据抽象成模型，每个模型可以在不同的 page.js 上，通过 page.js 修改 data，最后改到 UI 上。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-5d961f8c6862a7b272c0b827f3d19832_hd.jpg&quot; alt=&quot;&quot; width=&quot;1270&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1270&quot; data-rawheight=&quot;646&quot; data-original=&quot;https://pic1.zhimg.com/v2-5d961f8c6862a7b272c0b827f3d19832_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-5d961f8c6862a7b272c0b827f3d19832_b.jpg&quot;/&gt;△ 糗事百科应用 MVC 后开发小程序的逻辑&lt;/p&gt;
&lt;p&gt;我们看下每个步骤负责的内容。原来负责所有逻辑的 page.js 现在只需要负责从 Model 接收数据、响应及管理 View 的生命周期。数据模型做的事情比较简单，处理业务逻辑、提供数据给 page.js、数据持久化。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-18e4ec328afdfc2288ef3081e7901356_hd.jpg&quot; alt=&quot;&quot; width=&quot;929&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;929&quot; data-rawheight=&quot;530&quot; data-original=&quot;https://pic2.zhimg.com/v2-18e4ec328afdfc2288ef3081e7901356_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-18e4ec328afdfc2288ef3081e7901356_b.jpg&quot;/&gt;△ Model 和 Controller 的数据传输&lt;/p&gt;
&lt;p&gt;数据模型和 Controller 是通过怎么样的逻辑进行数据传输的呢？这里运用的是“观察者模型”和“发布/订阅模型”，这两个模型都可以很好地在 Controller 和 Model 之间传递数据。这二者有什么区别呢？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;观察者模型（observer）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;“观察者模型”可以把 model 的属性，比如文章的点赞功能，是否已经点赞的属性，与 Controller 中的 data 相互绑定，在修改 model 的时候，直接修改 Controller 里面的 data，然后执行 setData 方法，让 UI 上的点赞按钮被点亮。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-73f848cf50d7f5f35af412bf19ba733d_hd.jpg&quot; alt=&quot;&quot; width=&quot;614&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;614&quot; data-rawheight=&quot;591&quot; data-original=&quot;https://pic4.zhimg.com/v2-73f848cf50d7f5f35af412bf19ba733d_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-73f848cf50d7f5f35af412bf19ba733d_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;△ “点赞”动作的数据传递&lt;/p&gt;
&lt;p&gt;在 UI 上我们通过绑定事件，让点赞按钮与 page.js 的逻辑绑定，当点赞事件发生，文章的实例会改变点赞的属性，因为双方是互相绑定的，所以 page.js 里面的 data 也会改变，从而执行 setData 方法。&lt;/p&gt;
&lt;p&gt;“观察者模型”比较偏向于单个的属性变化，比如用户登陆，登陆之后有很多属性比如名字、头像、性别都发生改变，如果每一个都用“观察者模型”，每个属性变化都要执行 setData，setData 会用得非常频繁，官方文档是不建议这么频繁去调 setData 方法。所以“观察者模型”比较适用于当数据变化时不会影响到其他改变 UI 数据变化，比如点赞按钮只会影响点赞的 UI 有没有被点亮，不会影响其他数据改变，所以没改变一次，只调用一次 setData 方法，不影响整个程序的性能。要注意的一个地方是“观察者模型”需要绑定，在 Controller 的生命周期里要注意它的解绑和绑定。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;发布/订阅模型（Pub-Sub）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;“发布/订阅模型”在跨页面传递数据的时候用得比较多，比如前面说的用户登录的例子，用户登录之后可能涉及到几个页面的更新， 如果上个页面也有用户信息的展示也需要更新，如果是大型的软件可能涉及的更新数据会更多。如果按照官方的说法把整个数据 setData 一遍会显得太过繁琐，&lt;/p&gt;
&lt;p&gt;“发布/订阅模型”适用于跨越多个页面同时操作 UI 更新，让互相关联的 data，在某个时间点下一起更新，不用频繁的去 setData。比如登陆之后用户头像、性别等进行改变，我们只需要一次setDada 就可以。同样“发布/订阅模型”也要需要绑定，绑定的时候也要注意一下解绑，重复绑定。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-ad1a5e7541fe071bde08b0f034ce269f_hd.jpg&quot; alt=&quot;&quot; width=&quot;742&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;742&quot; data-rawheight=&quot;574&quot; data-original=&quot;https://pic4.zhimg.com/v2-ad1a5e7541fe071bde08b0f034ce269f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-ad1a5e7541fe071bde08b0f034ce269f_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;△ 登陆模型示意图&lt;/p&gt;
&lt;p&gt;上图是登陆模式示意图，通过绑定事件，在 Login Event 发生之后，Pub-Sub 推送到每个 page.js ，多个页面同时更新。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-5c04144e50e7e6be335c85276dc686e2_hd.jpg&quot; alt=&quot;&quot; width=&quot;666&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;666&quot; data-rawheight=&quot;432&quot; data-original=&quot;https://pic4.zhimg.com/v2-5c04144e50e7e6be335c85276dc686e2_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-5c04144e50e7e6be335c85276dc686e2_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;△ model 管理数据&lt;/p&gt;
&lt;p&gt;通过抽象的一个 model，整个程序变得很简单，小程序不仅仅能从网络获取数据，还可以从硬件设备比如说存储空间里面获取数据。前面我们说过把 page.js 里面的 data 抽象成一个 model，每次拿数据会经过上图的三个步骤：首先查内存是否有这个数据，如果没有可以从本地缓存查找，最后我们再从网络/ 硬件设备去查询，这些操作都可以封装会 model 里面，这样调 model 的时候很简单地调一个属性，它底层就已经经过三层查询，这样不仅基于我们的网络请求，还可以很很简单利用小程序提供的缓存空间和文件系统空间&lt;/p&gt;
&lt;p&gt;MVC 框架在开发上对我们有很大的帮助，让数据流脱离出 page.js，不用再去考虑各种数据的传递，微信在跳转页面的时候只允许在 URL 上携带一定的字符串，通过这样的方式传递到下一个页面，导致对象类型很难去传递了。&lt;/p&gt;

&lt;h2&gt;小程序的“首屏优化”&lt;/h2&gt;
&lt;p&gt;如何让小程序更快地展示出内容给用户？这个是在做网页的时候经常遇到的问题，网页加载慢1秒就可能损失大量的用户，做小程序也是如此。&lt;/p&gt;
&lt;p&gt;第一步把小程序代码量尽可能压缩资源。很多人刚做小程序的时候，认为可以读本地资源的图片，不用从网络加载，把本地资源的图片塞在小程序里，其实这并不是一个很明智的方法，很多图片可以放到网络上，不一定塞到小程序包里面。&lt;/p&gt;
&lt;p&gt;第二步是分包。这有点像做 H5 的时候，把 JS 包划分出来，我们可以把访问频率比较低的页面分到分包里。现在小程序是 4M 的主包加 2M 的分包，我们可以把访问频率很低的页面比如设置页面、用户须知页面，塞到分包，这样整个小程序包变得比较小，主包变小下载速度比较快。&lt;/p&gt;
&lt;p&gt;这个时候我们可以很快进入第二阶段，就执行我们的业务逻辑。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-fb552f2a9d719eeb2e401dec316a74d2_hd.jpg&quot; alt=&quot;&quot; width=&quot;1280&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;403&quot; data-original=&quot;https://pic3.zhimg.com/v2-fb552f2a9d719eeb2e401dec316a74d2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-fb552f2a9d719eeb2e401dec316a74d2_b.jpg&quot;/&gt;△ 小程序的首屏优化&lt;/p&gt;
&lt;p&gt;小程序一打开执行的业务逻辑是访问网络，并不一定要等到进到相应的 page.js 才把数据请求出来。每次访问小程序页面的时候，都在读取 model 里面的数据，model 里面数分成 3 层。我们可以把用户上一次退出小程序的状态保存到缓存，等我们再进去的时候就可以看到数据了，并不是每次进去都是一个白屏 loading。&lt;/p&gt;
&lt;p&gt;渲染内容要注意的一点是“首次渲染”可以渲染出比较简单的东西，随着页面写得越来越深入，wxml 内的逻辑层级会比较复杂，这时候可以用小程序提供的组件或者模版，把每个部分封装成组件，每个组件渲染的时候内部会进行数据的优化，不会影响整个页面的复杂度，渲染起来比较简单快捷。&lt;/p&gt;

&lt;h2&gt;善用微信赋予小程序的硬件能力&lt;/h2&gt;
&lt;p&gt;对于小程序，“能力越大，责任越大”。一个小程序拥有硬件能力时需要注意的是什么呢？微信给与了小程序调用硬件能力的授权，但是我看到很多小程序在授权上都做得很差，比如一进去点了拒绝，找不到重新授权，点了拒绝不会再出现授权了。&lt;/p&gt;
&lt;p&gt;小程序在获取一些隐私的东西的时候，比如手机号码、用户信息等，以前做 Web 端可能没有注意到这方面的安全性。微信提供的手机号码是加密的数据，很多人拿到数据后台解密，然后明文传输给前台，这种做法是不理智的，我们在数据传输上要注意加密的信息。&lt;/p&gt;
&lt;p&gt;在授权上，使用小程序给我们提供的 Api 接口来授权，一旦拒绝就不会出现提示，现在普遍的做法是使用按钮，按钮来唤醒授权，即使点拒绝了，重新用按钮点击授权还是会弹窗，所以最理想的情况是有一个页面让用户清楚知道自己在哪一方面授了权，这就是我们在拥有了这些能力之后要给用户一个明确的反馈。&lt;/p&gt;
&lt;p&gt;善用微信提供的能力，微信提供给我们有很多东西。比如我们之前做一个电商平台，写了半天用户填写信息的框架，后来发现微信已经给我们提供了一个地址选择的功能，包括卡包功能，微信都已经内置在里面。当然微信的 Api 上内容比较多，大家每次开发的时候都需要看一下，我每次看它的开发文档，它拥有的新功能是很多的。&lt;/p&gt;
&lt;p&gt;我们在小程序上还能获取到各种各样的网络状态，比如在做一些视频播放类小程序，或者大流量的应用，可以利用这些网络状态来提示用户是否选择打开一些功能。这些都是小程序赋予我们硬件能力之后，我们能够改善小程序用户体验的地方。&lt;/p&gt;

&lt;p&gt;推荐阅读（演讲视频及ppt）：&lt;a class=&quot; wrap external&quot; href=&quot;https://link.zhihu.com/?target=https%3A//opentalk.upyun.com/404.html&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;更 App 化的小程序开发 - 又拍云&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 02 Nov 2018 03:55:00 +0000</pubDate>
<dc:creator>又拍云</dc:creator>
<og:description>2018 年 10 月13 日，由又拍云和知晓云联合主办的 Open Talk 丨2018 小程序开发者沙龙系列活动广州站拉开帷幕，糗事百科前端负责人宋航在沙龙上做了《更App化的小程序开发》的分享。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/upyun/p/9895492.html</dc:identifier>
</item>
</channel>
</rss>