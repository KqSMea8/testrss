<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>JAR包数字签名与验证 - 时间足迹</title>
<link>http://www.cnblogs.com/cymiao/p/8398979.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cymiao/p/8398979.html</guid>
<description>&lt;p&gt;经签名的Jar包内包含了以下内容：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;原Jar包内的class文件和资源文件&lt;/li&gt;
&lt;li&gt;签名文件 META-INF/*.SF：这是一个文本文件，包含原Jar包内的class文件和资源文件的Hash&lt;/li&gt;
&lt;li&gt;签名block文件 META-INF/*.DSA：这是一个数据文件，包含签名者的 certificate 和数字签名。其中 certificate 包含了签名者的有关信息和 public key；数字签名是对 *.SF 文件内的 Hash 值使用 private key 加密得来使用 keytool 和 jarsigner 工具进行 Jar 包签名和验证&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;1、使用 keytool 和 jarsigner 工具进行 Jar 包签名和验证&lt;/h2&gt;
&lt;p&gt;JDK 提供了 keytool 和 jarsigner 两个工具用来进行 Jar 包签名和验证。&lt;/p&gt;
&lt;p&gt;keytool 用来生成和管理 keystore。keystore 是一个数据文件，存储了 key pair 有关的2种数据：private key 和 certificate，而 certificate 包含了 public key。整个 keystore 用一个密码进行保护，keystore 里面的每一对 key pair 单独用一个密码进行保护。每对 key pair 用一个 alias 进行指定，alias 不区分大小写。&lt;/p&gt;
&lt;p&gt;keytool 支持的算法是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果公钥算法为 DSA，则摘要算法使用 SHA-1。这是默认的&lt;/li&gt;
&lt;li&gt;如果公钥算法为 RSA，则摘要算法采用 MD5&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;jarsigner 读取 keystore，为 Jar 包进行数字签名。jarsigner 也可以对签名的 Jar 包进行验证。&lt;/p&gt;
&lt;p&gt;下面使用 keytool 和 jarsigner 对它进行签名和验证&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第1步：用 keytool 生成 keystore&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;   &lt;/strong&gt;打开CMD窗口，键入如下命令生成keystore文件，其中jamesKeyStore 为公钥秘钥数据文件，james 是alias 的 key pair，keypass 的值123456是秘钥指令，storepass 的值123456是秘钥库指令&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;keytool -genkey -alias james -keypass 123456  -validity 3650 -keystore jamesKeyStore -storepass 123456&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;   &lt;/strong&gt;具体生成过程见下图：&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2017.cnblogs.com/blog/870519/201802/870519-20180201143554468-1241643741.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第2步：用 jarsigner 对 Jar 包进行签名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;   &lt;/strong&gt; 使用如下命令可以在CMD窗口中验证签名JAR包&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;jarsigner -verify cd-vsb-protect-control-1.0-1.jar&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;2、JAVA验证JAR包签名&lt;/h2&gt;
&lt;h3&gt;（1）、JDK对JAR包数字签名验证逻辑&lt;/h3&gt;
&lt;p&gt;      JDK加载包文件提供了两个类JarFile和JarInputStream，两个类由如下构造方法，参数 boolean verify的作用是限制是否要生成JarVerifier对象，JarVerifier类的功能是提供验证JAR包签名的方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Creates a new &amp;lt;code&amp;gt;JarFile&amp;lt;/code&amp;gt; to read from the specified
     * &amp;lt;code&amp;gt;File&amp;lt;/code&amp;gt; object.
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; file the jar file to be opened for reading
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; verify whether or not to verify the jar file if
     * it is signed.
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IOException if an I/O error has occurred
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; SecurityException if access to the file is denied
     *         by the SecurityManager.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; JarFile(File file, &lt;span&gt;boolean&lt;/span&gt; verify) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;(file, verify, ZipFile.OPEN_READ);
    }


    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Creates a new &amp;lt;code&amp;gt;JarFile&amp;lt;/code&amp;gt; to read from the specified
     * &amp;lt;code&amp;gt;File&amp;lt;/code&amp;gt; object in the specified mode.  The mode argument
     * must be either &amp;lt;tt&amp;gt;OPEN_READ&amp;lt;/tt&amp;gt; or &amp;lt;tt&amp;gt;OPEN_READ | OPEN_DELETE&amp;lt;/tt&amp;gt;.
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; file the jar file to be opened for reading
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; verify whether or not to verify the jar file if
     * it is signed.
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; mode the mode in which the file is to be opened
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IOException if an I/O error has occurred
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IllegalArgumentException
     *         if the &amp;lt;tt&amp;gt;mode&amp;lt;/tt&amp;gt; argument is invalid
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; SecurityException if access to the file is denied
     *         by the SecurityManager
     * &lt;/span&gt;&lt;span&gt;@since&lt;/span&gt;&lt;span&gt; 1.3
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; JarFile(File file, &lt;span&gt;boolean&lt;/span&gt; verify, &lt;span&gt;int&lt;/span&gt; mode) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(file, mode);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.verify =&lt;span&gt; verify;
    }&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Creates a new &amp;lt;code&amp;gt;JarInputStream&amp;lt;/code&amp;gt; and reads the optional
     * manifest. If a manifest is present and verify is true, also attempts
     * to verify the signatures if the JarInputStream is signed.
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; in the actual input stream
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; verify whether or not to verify the JarInputStream if
     * it is signed.
     * &lt;/span&gt;&lt;span&gt;@exception&lt;/span&gt;&lt;span&gt; IOException if an I/O error has occurred
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; JarInputStream(InputStream in, &lt;span&gt;boolean&lt;/span&gt; verify) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(in);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.doVerify =&lt;span&gt; verify;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This implementation assumes the META-INF/MANIFEST.MF entry
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; should be either the first or the second entry (when preceded
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; by the dir META-INF/). It skips the META-INF/ and then
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;consumes&quot; the MANIFEST.MF to initialize the Manifest object.&lt;/span&gt;
        JarEntry e = (JarEntry)&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.getNextEntry();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; e.getName().equalsIgnoreCase(&quot;META-INF/&quot;&lt;span&gt;))
            e &lt;/span&gt;= (JarEntry)&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.getNextEntry();
        first &lt;/span&gt;=&lt;span&gt; checkManifest(e);
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; JarEntry checkManifest(JarEntry e)
        &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; JarFile.MANIFEST_NAME.equalsIgnoreCase(e.getName())) {
            man &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Manifest();
            &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt; bytes[] = getBytes(&lt;span&gt;new&lt;/span&gt; BufferedInputStream(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;));
            man.read(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ByteArrayInputStream(bytes));
            closeEntry();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doVerify) {
                jv &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JarVerifier(bytes);
                mev &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ManifestEntryVerifier(man);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (JarEntry)&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.getNextEntry();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; e;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如下代码所示在JarInputStream类对象调用getNextEntry方法获取JarEntry对象时，如果jv对象不为空时，要调用JarVerifier类的beginEntry方法，而此方法最总调用了ManifestEntryVerifier类的mev.setEntry(null, je)方法，&lt;/p&gt;
&lt;p&gt;ManifestEntryVerifier类用来做JAR安全证书验证。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; ZipEntry getNextEntry() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        JarEntry e;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (first == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            e &lt;/span&gt;= (JarEntry)&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.getNextEntry();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (tryManifest) {
                e &lt;/span&gt;=&lt;span&gt; checkManifest(e);
                tryManifest &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            e &lt;/span&gt;=&lt;span&gt; first;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (first.getName().equalsIgnoreCase(JarIndex.INDEX_NAME))
                tryManifest &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            first &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (jv != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; e != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; At this point, we might have parsed all the meta-inf
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; entries and have nothing to verify. If we have
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; nothing to verify, get rid of the JarVerifier object.&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (jv.nothingToVerify() == &lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
                jv &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                mev &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                jv.beginEntry(e, mev);
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; e;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * This method scans to see which entry we're parsing and
     * keeps various state information depending on what type of
     * file is being parsed.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; beginEntry(JarEntry je, ManifestEntryVerifier mev)
        &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (je == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (debug != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            debug.println(&lt;/span&gt;&quot;beginEntry &quot;+&lt;span&gt;je.getName());
        }

        String name &lt;/span&gt;=&lt;span&gt; je.getName();

        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
         * Assumptions:
         * 1. The manifest should be the first entry in the META-INF directory.
         * 2. The .SF/.DSA/.EC files follow the manifest, before any normal entries
         * 3. Any of the following will throw a SecurityException:
         *    a. digest mismatch between a manifest section and
         *       the SF section.
         *    b. digest mismatch between the actual jar entry and the manifest
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (parsingMeta) {
            String uname &lt;/span&gt;=&lt;span&gt; name.toUpperCase(Locale.ENGLISH);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((uname.startsWith(&quot;META-INF/&quot;) ||&lt;span&gt;
                 uname.startsWith(&lt;/span&gt;&quot;/META-INF/&quot;&lt;span&gt;))) {

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (je.isDirectory()) {
                    mev.setEntry(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, je);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                }

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (uname.equals(JarFile.MANIFEST_NAME) ||&lt;span&gt;
                        uname.equals(JarIndex.INDEX_NAME)) {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                }

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (SignatureFileVerifier.isBlockOrSF(uname)) {
                    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; We parse only DSA, RSA or EC PKCS7 blocks. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                    parsingBlockOrSF &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    baos.reset();
                    mev.setEntry(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, je);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                }

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If a META-INF entry is not MF or block or SF, they should
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; be normal entries. According to 2 above, no more block or
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; SF will appear. Let's doneWithMeta.&lt;/span&gt;
&lt;span&gt;            }
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (parsingMeta) {
            doneWithMeta();
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (je.isDirectory()) {
            mev.setEntry(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, je);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; be liberal in what you accept. If the name starts with ./, remove
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; it as we internally canonicalize it with out the ./.&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (name.startsWith(&quot;./&quot;&lt;span&gt;))
            name &lt;/span&gt;= name.substring(2&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; be liberal in what you accept. If the name starts with /, remove
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; it as we internally canonicalize it with out the /.&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (name.startsWith(&quot;/&quot;&lt;span&gt;))
            name &lt;/span&gt;= name.substring(1&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; only set the jev object for entries that have a signature
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; (either verified or not)&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;name.equals(JarFile.MANIFEST_NAME)) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (sigFileSigners.get(name) != &lt;span&gt;null&lt;/span&gt; ||&lt;span&gt;
                    verifiedSigners.get(name) &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                mev.setEntry(name, je);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; don't compute the digest for this entry&lt;/span&gt;
        mev.setEntry(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, je);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;（2）、使用java验证JAR包签名&lt;/h3&gt;
&lt;p&gt;看了上面JDK提供的JAR相关的工具类，我们可以使用JarInputStream类的逻辑来验证，思想是通过空读取JarEntry对象验证包文件中的每个文件数字签名是否被篡改，在获取JarInputStream类对象时设置verify参数值为true，当声明需要做签名验证时在使用jarIn.getNextJarEntry()获取JarEntry对象如果文件被篡改会跑出异常java.lang.SecurityException: SHA-256 digest error for 文件名，这个时候表明JAR签名验证不通过。&lt;/p&gt;
&lt;p&gt;，代码实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; verify(String path) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException{
        File file &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(path);
        InputStream in &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInputStream(file);
        JarInputStream jarIn &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; JarInputStream(in,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(jarIn.getNextJarEntry() != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


</description>
<pubDate>Thu, 01 Feb 2018 07:30:00 +0000</pubDate>
<dc:creator>时间足迹</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cymiao/p/8398979.html</dc:identifier>
</item>
<item>
<title>基于百度地图SDK和Elasticsearch GEO查询的地理围栏分析系统（2）-查询实现 - 扎心了老铁</title>
<link>http://www.cnblogs.com/kangoroo/p/8047851.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kangoroo/p/8047851.html</guid>
<description>
&lt;p&gt;在&lt;a href=&quot;http://www.cnblogs.com/kangoroo/p/8047586.html&quot; target=&quot;_blank&quot;&gt;上一篇博客&lt;/a&gt;中，我们准备好了数据。现在数据已经以我们需要的格式，存放在Elasticsearch中了。&lt;/p&gt;
&lt;p&gt;本文讲述如何在Elasticsearch中进行空间GEO查询和聚合查询，以及如何准备ajax接口。&lt;/p&gt;
&lt;p&gt;平台的服务端部分使用的springboot+mybatis的基本开发模式。工程结构如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1061021/201712/1061021-20171216220027952-1908850120.png&quot; alt=&quot;&quot; width=&quot;210&quot; height=&quot;194&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到本工程有三个module：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）moonlight-web是controller和service层的实现；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）moonlight-dsl封装了ES空间索引查询和聚合查询的方法；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）moonlight-dao封装了持久化地理围栏的方法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们以客户端请求的处理顺序为例进行讲解。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、controller&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在controller层中，我们实现了4个接口，分别是circle、box、polygon、heatmap，也就是圆形圈选，矩形圈选，多边形圈选和热力图。&lt;/p&gt;
&lt;p&gt;先看一下代码的具体实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;123&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@RestController
@RequestMapping(&lt;/span&gt;&quot;/moonlight&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MoonlightController {

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger logger = LoggerFactory.getLogger(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getClass());

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; MoonlightService moonlightService;

    @RequestMapping(value &lt;/span&gt;= &quot;/circle&quot;, method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ResponseEntity&amp;lt;Response&amp;gt;&lt;span&gt; circle(HttpServletRequest request, HttpServletResponse response) {
        String point &lt;/span&gt;= request.getParameter(&quot;point&quot;&lt;span&gt;);
        String radius &lt;/span&gt;= request.getParameter(&quot;radius&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            Map&lt;/span&gt;&amp;lt;String, Object&amp;gt; result =&lt;span&gt; moonlightService.circle(point, radius);
            logger.info(&lt;/span&gt;&quot;circle圈选成功, points={}, radius={}, result={}&quot;&lt;span&gt;, point, radius, result);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResponseEntity&amp;lt;&amp;gt;&lt;span&gt;(
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Response(ResultCode.SUCCESS, &quot;circle圈选成功&quot;&lt;span&gt;, result),
                    HttpStatus.OK);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            logger.error(&lt;/span&gt;&quot;circle圈选失败, points={}, radius={}, result={}&quot;, point, radius, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;, e);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResponseEntity&amp;lt;&amp;gt;&lt;span&gt;(
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Response(ResultCode.EXCEPTION, &quot;circle圈选失败&quot;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;),
                    HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value &lt;/span&gt;= &quot;/box&quot;, method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ResponseEntity&amp;lt;Response&amp;gt;&lt;span&gt; box(HttpServletRequest request, HttpServletResponse response) {
        String point1 &lt;/span&gt;= request.getParameter(&quot;point1&quot;&lt;span&gt;);
        String point2 &lt;/span&gt;= request.getParameter(&quot;point2&quot;&lt;span&gt;);
        String point3 &lt;/span&gt;= request.getParameter(&quot;point3&quot;&lt;span&gt;);
        String point4 &lt;/span&gt;= request.getParameter(&quot;point4&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            Map&lt;/span&gt;&amp;lt;String, Object&amp;gt; result =&lt;span&gt; moonlightService.boundingBox(point1, point2, point3, point4);
            logger.info(&lt;/span&gt;&quot;box圈选成功, point1={}, point2={}, point3={}, point4={}, result={}&quot;&lt;span&gt;, point1, point2, point3, point4, result);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResponseEntity&amp;lt;&amp;gt;&lt;span&gt;(
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Response(ResultCode.SUCCESS, &quot;box圈选成功&quot;&lt;span&gt;, result),
                    HttpStatus.OK);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            logger.error(&lt;/span&gt;&quot;box圈选失败, point1={}, point2={}, point3={}, point4={}, result={}&quot;, point1, point2, point3, point4, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;, e);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResponseEntity&amp;lt;&amp;gt;&lt;span&gt;(
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Response(ResultCode.EXCEPTION, &quot;box圈选失败&quot;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;),
                    HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value &lt;/span&gt;= &quot;/polygon&quot;, method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ResponseEntity&amp;lt;Response&amp;gt;&lt;span&gt; polygon(HttpServletRequest request, HttpServletResponse response) {
        List&lt;/span&gt;&amp;lt;String&amp;gt; points = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        Enumeration&lt;/span&gt;&amp;lt;String&amp;gt; paramNames =&lt;span&gt; request.getParameterNames();
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (paramNames.hasMoreElements()) {
            String paramName &lt;/span&gt;=&lt;span&gt; paramNames.nextElement();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (paramName.startsWith(&quot;point&quot;&lt;span&gt;)) {
                points.add(request.getParameter(paramName));
            }
        }
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            Map&lt;/span&gt;&amp;lt;String, Object&amp;gt; result =&lt;span&gt; moonlightService.polygon(points);
            logger.info(&lt;/span&gt;&quot;polygon圈选成功, points={}, result={}&quot;&lt;span&gt;, points, result);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResponseEntity&amp;lt;&amp;gt;&lt;span&gt;(
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Response(ResultCode.SUCCESS, &quot;polygon圈选成功&quot;&lt;span&gt;, result),
                    HttpStatus.OK);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            logger.error(&lt;/span&gt;&quot;polygon圈选失败, points={}, result={}&quot;, points, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;, e);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResponseEntity&amp;lt;&amp;gt;&lt;span&gt;(
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Response(ResultCode.EXCEPTION, &quot;polygon圈选失败&quot;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;),
                    HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value &lt;/span&gt;= &quot;/heatMap&quot;, method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ResponseEntity&amp;lt;Response&amp;gt;&lt;span&gt; heatMap(HttpServletRequest request, HttpServletResponse response) {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            List&lt;/span&gt;&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; result =&lt;span&gt; moonlightService.heatMap();
            logger.info(&lt;/span&gt;&quot;heatMap请求成功, result={}&quot;&lt;span&gt;, result);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResponseEntity&amp;lt;&amp;gt;&lt;span&gt;(
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Response(ResultCode.SUCCESS, &quot;heatMap请求成功&quot;&lt;span&gt;, result),
                    HttpStatus.OK);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            logger.error(&lt;/span&gt;&quot;heatMap请求失败, result={}&quot;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;, e);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResponseEntity&amp;lt;&amp;gt;&lt;span&gt;(
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Response(ResultCode.EXCEPTION, &quot;heatMap请求失败&quot;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;),
                    HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们以圆形圈选（circle接口）为例，circle接口传入两个参数，一个是point，也就是中心点坐标，一个是radius，也就是半径，它干的事情就是圈选出，point点周围radius长度内的所有订单数据，具体实现是调用了service层的方法，controller得到圈选的数据后就返回了。&lt;/p&gt;
&lt;p&gt;下面我们来看一下service层。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、service&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;service层是具体业务的实现。我们这里的service仍然比较简单，可以看到只是初始化了esDao的句柄，然后进行es的geo查询。&lt;/p&gt;
&lt;p&gt;先看一下具体代码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MoonlightService {

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger logger = LoggerFactory.getLogger(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getClass());

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ESDao esDao;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt;&lt;span&gt; circle(String point, String radius) {
        POI center &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; POI(point);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; esDao.circle(center, Double.parseDouble(radius));
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt;&lt;span&gt; boundingBox(String point1, String point2, String point3, String point4) {
        POI poi1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; POI(point1);
        POI poi2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; POI(point2);
        POI poi3 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; POI(point3);
        POI poi4 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; POI(point4);
        POI topLeft &lt;/span&gt;=&lt;span&gt; getTopLeft(poi1, poi2, poi3, poi4);
        POI bottomRight &lt;/span&gt;=&lt;span&gt; getBottomRight(poi1, poi2, poi3, poi4);
        logger.info(&lt;/span&gt;&quot;topLeft - lat={}, lng={}, bottomRight - lat={}, lng={}&quot;&lt;span&gt;,
                topLeft.getLat(), topLeft.getLng(), bottomRight.getLat(), bottomRight.getLng());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; esDao.boundingBox(topLeft, bottomRight);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; polygon(List&amp;lt;String&amp;gt;&lt;span&gt; points) {
        List&lt;/span&gt;&amp;lt;POI&amp;gt; poiList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String point : points) {
            POI poi &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; POI(point);
            poiList.add(poi);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; esDao.polygon(poiList);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt;&lt;span&gt; heatMap() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; esDao.heatMap();
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; POI getTopLeft(POI poi1, POI poi2, POI poi3, POI poi4) {
        POI topLeft &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; POI();
        List&lt;/span&gt;&amp;lt;Double&amp;gt; latList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        List&lt;/span&gt;&amp;lt;Double&amp;gt; lngList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        latList.add(poi1.getLat());
        latList.add(poi2.getLat());
        latList.add(poi3.getLat());
        latList.add(poi4.getLat());
        Collections.sort(latList);
        Double minLat &lt;/span&gt;= latList.get(0&lt;span&gt;);
        Double maxLat &lt;/span&gt;= latList.get(3&lt;span&gt;);

        lngList.add(poi1.getLng());
        lngList.add(poi2.getLng());
        lngList.add(poi3.getLng());
        lngList.add(poi4.getLng());
        Collections.sort(lngList);
        Double minLng &lt;/span&gt;= lngList.get(0&lt;span&gt;);
        Double maxLng &lt;/span&gt;= lngList.get(3&lt;span&gt;);

        topLeft.setLat(maxLat);
        topLeft.setLng(minLng);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; topLeft;
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; POI getBottomRight(POI poi1, POI poi2, POI poi3, POI poi4) {
        POI bottomRight &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; POI();
        List&lt;/span&gt;&amp;lt;Double&amp;gt; latList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        List&lt;/span&gt;&amp;lt;Double&amp;gt; lngList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        latList.add(poi1.getLat());
        latList.add(poi2.getLat());
        latList.add(poi3.getLat());
        latList.add(poi4.getLat());
        Collections.sort(latList);
        Double minLat &lt;/span&gt;= latList.get(0&lt;span&gt;);
        Double maxLat &lt;/span&gt;= latList.get(3&lt;span&gt;);

        lngList.add(poi1.getLng());
        lngList.add(poi2.getLng());
        lngList.add(poi3.getLng());
        lngList.add(poi4.getLng());
        Collections.sort(lngList);
        Double minLng &lt;/span&gt;= lngList.get(0&lt;span&gt;);
        Double maxLng &lt;/span&gt;= lngList.get(3&lt;span&gt;);

        bottomRight.setLat(minLat);
        bottomRight.setLng(maxLng);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bottomRight;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们仍然是以圆形圈选为例，可以看到，service代码的逻辑就是，创建出圈选需要的数据接口，然后调用Dao层进行查询就是了。&lt;/p&gt;
&lt;p&gt;circle圈选需要的是一个中心点POI类型，和一个Double半径。&lt;/p&gt;
&lt;p&gt;box矩形查询需要的是左上坐标点和右下坐标点，里面有两个函数getTopLeft、getBottomRight分别可以求出矩形的左上点和右下点。&lt;/p&gt;
&lt;p&gt;polygon多边形查询需要的是一系列点，这些点顺序的连接所绘制出来的图形就是目标多边形。&lt;/p&gt;
&lt;p&gt;heatmap热力图什么参数也不要，将返回一定精度的经纬度计数值，后面我们会详述。&lt;/p&gt;
&lt;p&gt;之后所有的service都调用了Dao层的es查询逻辑。所以最重要的一部分是esDao的实现，下面我们就来看一看。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、Dao&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dao层代码是整个项目的核心，包括es圈选部分和聚合部分。&lt;/p&gt;
&lt;p&gt;先看一下代码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;88&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ESDao {
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger logger = LoggerFactory.getLogger(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getClass());

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ESClient esClient;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt;&lt;span&gt; circle(POI center, Double radius) {

        TermsQueryBuilder termsQuery &lt;/span&gt;= termsQuery(&quot;product_id&quot;, &lt;span&gt;new&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;[]{3, 4&lt;span&gt;});

        GeoDistanceRangeQueryBuilder geoDistanceRangeQuery &lt;/span&gt;= QueryBuilders.geoDistanceRangeQuery(&quot;location&quot;&lt;span&gt;)
                .point(center.getLat(),  center.getLng())
                .from(&lt;/span&gt;&quot;0m&quot;&lt;span&gt;)
                .to(String.format(&lt;/span&gt;&quot;%fm&quot;&lt;span&gt;, radius))
                .includeLower(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
                .includeUpper(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
                .optimizeBbox(&lt;/span&gt;&quot;memory&quot;&lt;span&gt;)
                .geoDistance(GeoDistance.SLOPPY_ARC);

        QueryBuilder queryBuilder &lt;/span&gt;=&lt;span&gt; QueryBuilders.boolQuery().must(termsQuery).must(geoDistanceRangeQuery);

        SearchRequestBuilder search &lt;/span&gt;= esClient.getClient().prepareSearch(&quot;moon&quot;).setTypes(&quot;bj&quot;&lt;span&gt;)
                .setSearchType(SearchType.DFS_QUERY_AND_FETCH)
                .setQuery(queryBuilder);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; agg(search);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt;&lt;span&gt; boundingBox(POI topLeft,  POI bottomRight) {

        TermsQueryBuilder termsQuery &lt;/span&gt;= termsQuery(&quot;product_id&quot;, &lt;span&gt;new&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;[]{3, 4&lt;span&gt;});

        GeoBoundingBoxQueryBuilder geoBoundingBoxQuery &lt;/span&gt;= QueryBuilders.geoBoundingBoxQuery(&quot;location&quot;&lt;span&gt;)
                .topLeft(topLeft.getLat(), topLeft.getLng())
                .bottomRight(bottomRight.getLat(), bottomRight.getLng());

        QueryBuilder queryBuilder &lt;/span&gt;=&lt;span&gt; QueryBuilders.boolQuery().must(termsQuery).must(geoBoundingBoxQuery);

        SearchRequestBuilder search &lt;/span&gt;= esClient.getClient().prepareSearch(&quot;moon&quot;).setTypes(&quot;bj&quot;&lt;span&gt;)
                .setSearchType(SearchType.DFS_QUERY_AND_FETCH)
                .setQuery(queryBuilder);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; agg(search);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; polygon(List&amp;lt;POI&amp;gt;&lt;span&gt; poiList) {

        TermsQueryBuilder termsQuery &lt;/span&gt;= termsQuery(&quot;product_id&quot;, &lt;span&gt;new&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;[]{3, 4&lt;span&gt;});

        GeoPolygonQueryBuilder geoPolygonQuery &lt;/span&gt;= QueryBuilders.geoPolygonQuery(&quot;location&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (POI poi : poiList) {
            geoPolygonQuery.addPoint(poi.getLat(), poi.getLng());
        }

        QueryBuilder queryBuilder &lt;/span&gt;=&lt;span&gt; QueryBuilders.boolQuery().must(termsQuery).must(geoPolygonQuery);

        SearchRequestBuilder search &lt;/span&gt;= esClient.getClient().prepareSearch(&quot;moon&quot;).setTypes(&quot;bj&quot;&lt;span&gt;)
                .setSearchType(SearchType.DFS_QUERY_AND_FETCH)
                .setQuery(queryBuilder);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; agg(search);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt;&lt;span&gt; heatMap() {

        TermQueryBuilder queryBuilder &lt;/span&gt;= termQuery(&quot;date&quot;, &quot;2017-11-24&quot;&lt;span&gt;);
        SearchRequestBuilder searchRequestBuilder &lt;/span&gt;=&lt;span&gt; esClient.getClient()
                .prepareSearch(&lt;/span&gt;&quot;moon&quot;).setTypes(&quot;bj&quot;&lt;span&gt;);
        SearchResponse response &lt;/span&gt;=&lt;span&gt; searchRequestBuilder
                .setQuery(queryBuilder)
                .setFrom(&lt;/span&gt;0).setSize(10000&lt;span&gt;)
                .setExplain(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;).execute().actionGet();

        SearchHits hits &lt;/span&gt;=&lt;span&gt; response.getHits();
        Map&lt;/span&gt;&amp;lt;String, Integer&amp;gt; countMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (SearchHit hit : hits) {
            Map&lt;/span&gt;&amp;lt;String, Object&amp;gt; source =&lt;span&gt; hit.getSource();
            Map&lt;/span&gt;&amp;lt;String, Double&amp;gt; locationMap = (Map&amp;lt;String, Double&amp;gt;) source.get(&quot;location&quot;&lt;span&gt;);
            DecimalFormat df &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; DecimalFormat(&quot;#.000&quot;&lt;span&gt;);
            String lat &lt;/span&gt;= df.format(locationMap.get(&quot;lat&quot;&lt;span&gt;));
            String lon &lt;/span&gt;= df.format(locationMap.get(&quot;lon&quot;&lt;span&gt;));
            String key &lt;/span&gt;= lat+&quot;-&quot;+&lt;span&gt;lon;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (countMap.containsKey(key)) {
                countMap.put(key, countMap.get(key) &lt;/span&gt;+ 1&lt;span&gt;);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                countMap.put(key, &lt;/span&gt;1&lt;span&gt;);
            }
        }
        List&lt;/span&gt;&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; result = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, Integer&amp;gt;&lt;span&gt; entry : countMap.entrySet()) {
            String lat &lt;/span&gt;= entry.getKey().split(&quot;-&quot;)[0&lt;span&gt;];
            String lon &lt;/span&gt;= entry.getKey().split(&quot;-&quot;)[1&lt;span&gt;];
            Integer count &lt;/span&gt;=&lt;span&gt; entry.getValue();
            Map&lt;/span&gt;&amp;lt;String, Object&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
            map.put(&lt;/span&gt;&quot;lat&quot;&lt;span&gt;, Double.parseDouble(lat));
            map.put(&lt;/span&gt;&quot;lng&quot;&lt;span&gt;, Double.parseDouble(lon));
            map.put(&lt;/span&gt;&quot;count&quot;&lt;span&gt;, count);
            result.add(map);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Map&amp;lt;String, Object&amp;gt;&lt;span&gt; agg(SearchRequestBuilder search) {

        Map&lt;/span&gt;&amp;lt;String, Object&amp;gt; resultMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();

        GroupBy groupBy &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; GroupBy(search, &quot;date_group&quot;, &quot;date&quot;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        groupBy.addSumAgg(&lt;/span&gt;&quot;pre_total_fee_sum&quot;, &quot;pre_total_fee&quot;&lt;span&gt;);
        groupBy.addCountAgg(&lt;/span&gt;&quot;order_id_count&quot;, &quot;order_id&quot;&lt;span&gt;);
        groupBy.addSumAgg(&lt;/span&gt;&quot;cancel_count&quot;, &quot;type&quot;&lt;span&gt;);

        List&lt;/span&gt;&amp;lt;String&amp;gt; xAxis = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        List&lt;/span&gt;&amp;lt;String&amp;gt; profits = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        List&lt;/span&gt;&amp;lt;String&amp;gt; totals = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        List&lt;/span&gt;&amp;lt;String&amp;gt; cancelRatios = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        List&lt;/span&gt;&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; details = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();

        Map&lt;/span&gt;&amp;lt;String, Object&amp;gt; groupbyResponse =&lt;span&gt; groupBy.getGroupbyResponse();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, Object&amp;gt;&lt;span&gt; entry : groupbyResponse.entrySet()) {
            String date &lt;/span&gt;=&lt;span&gt; entry.getKey();
            xAxis.add(date);
            Map&lt;/span&gt;&amp;lt;String, String&amp;gt; subAggMap = (Map&amp;lt;String, String&amp;gt;&lt;span&gt;) entry.getValue();
            String profit &lt;/span&gt;= subAggMap.get(&quot;pre_total_fee_sum&quot;&lt;span&gt;);
            profits.add(profit);
            String total &lt;/span&gt;= subAggMap.get(&quot;order_id_count&quot;&lt;span&gt;);
            totals.add(total);
            String cancelRatioDouble &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; DecimalFormat(&quot;#.0000&quot;&lt;span&gt;).format(
                    Double.parseDouble(subAggMap.get(&lt;/span&gt;&quot;cancel_count&quot;)) / Double.parseDouble(subAggMap.get(&quot;order_id_count&quot;&lt;span&gt;))
            );
            String cancelRatio &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; DecimalFormat(&quot;0.00%&quot;&lt;span&gt;).format(
                    Double.parseDouble(subAggMap.get(&lt;/span&gt;&quot;cancel_count&quot;)) / Double.parseDouble(subAggMap.get(&quot;order_id_count&quot;&lt;span&gt;))
            );
            cancelRatios.add(cancelRatioDouble);

            Map&lt;/span&gt;&amp;lt;String, Object&amp;gt; tempMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
            tempMap.put(&lt;/span&gt;&quot;profit&quot;&lt;span&gt;, profit);
            tempMap.put(&lt;/span&gt;&quot;total&quot;&lt;span&gt;, total);
            tempMap.put(&lt;/span&gt;&quot;cancelRatio&quot;&lt;span&gt;, cancelRatio);
            tempMap.put(&lt;/span&gt;&quot;date&quot;&lt;span&gt;, date);
            details.add(tempMap);
        }

        resultMap.put(&lt;/span&gt;&quot;xAxis&quot;&lt;span&gt;, xAxis);
        resultMap.put(&lt;/span&gt;&quot;profit&quot;&lt;span&gt;, profits);
        resultMap.put(&lt;/span&gt;&quot;total&quot;&lt;span&gt;, totals);
        resultMap.put(&lt;/span&gt;&quot;cancelRatio&quot;&lt;span&gt;, cancelRatios);
        resultMap.put(&lt;/span&gt;&quot;detail&quot;&lt;span&gt;, details);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; resultMap;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;es圈选部分&lt;/p&gt;
&lt;p&gt;circle为例，我们构造了一个geoDistanceRangeQuery查询，这个查询到上一篇博客准备好的moon索引，bj type中去将数据圈选出来。&lt;/p&gt;
&lt;p&gt;类似的我们有矩形geoBoundingBoxQuery查询，多边形geoPolygonQuery查询，具体构造查询的方式可以参照代码，这个代码还是很简单的，熟悉es的同学很快可以上手并且实现这样的查询，不熟悉的话可以自行百度一下。如果还有其他的查询条件，可以通过QueryBuilders.boolQuery().must(termsQuery).must(geoDistanceRangeQuery)加入，例如我这里在圈选之外加入了一个terms查询，这个查询相当于sql中的where product_id in (3,4) and ...。&lt;/p&gt;

&lt;p&gt;es聚合部分&lt;/p&gt;
&lt;p&gt;es聚合部分做的事情是，对查询出的订单进行了聚合运算，例如求和和计数，是两个最常见的运算，这部分在这里不详细叙述了，请参见&lt;a href=&quot;http://www.cnblogs.com/kangoroo/p/8033955.html&quot; target=&quot;_blank&quot;&gt;这篇博客&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这里要额外说明的是，热力图heatmap，和圈选不一样，他是查询了最近一天type=bj分区里的所有数据，按照坐标进行了计数，可以看到的是，计数的时候，我们指定了精度，这里是小数点后三位有效数字&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
            DecimalFormat df = &lt;span&gt;new&lt;/span&gt; DecimalFormat(&quot;#.000&quot;&lt;span&gt;);
            String lat &lt;/span&gt;= df.format(locationMap.get(&quot;lat&quot;&lt;span&gt;));
            String lon &lt;/span&gt;= df.format(locationMap.get(&quot;lon&quot;&lt;span&gt;));
            String key &lt;/span&gt;= lat+&quot;-&quot;+lon;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后将计数结果返回。百度地图SDK会将计数结果绘制成热力图，这个不用我们管，我会在另一篇博客中讲述这个过程。&lt;/p&gt;

</description>
<pubDate>Thu, 01 Feb 2018 07:20:00 +0000</pubDate>
<dc:creator>扎心了老铁</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kangoroo/p/8047851.html</dc:identifier>
</item>
<item>
<title>数据库分表之Mybatis+Mysql实践（含部分关键代码） - HoperChen</title>
<link>http://www.cnblogs.com/chentaotao/p/8398943.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chentaotao/p/8398943.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;package&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;com.**.uc.utils;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;java.util.Calendar;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;org.apache.commons.lang.StringUtils;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;class&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;TableRouter {&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;            &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;             * table路由规则，获取新表名称&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;             *&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;@param&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;prefix  表明前缀&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;             *&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;@param&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;strategy 切分策略,&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;             *&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;@return&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;             */&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;static&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;String getUcCaptchaTable(String prefix,String strategy ){&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//根据切分策略进行切分，添加一定的容错，该部分主要是针对读写频繁的验证码表，故部分代码写死为主表的数据；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//切分策略为周时，返回“表名_年份周次”，也就是说一年会有52张表&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//切分策略为月时，返回“表名_年份月份”，也就是说一年会有12张表&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//该种切分策略的弊端，是在周末凌晨或者月末凌晨的几分钟，存在验证不存在的情况，在我们的系统允许范围内，故此处未做特殊处理。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;if&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(StringUtils.&lt;span&gt;&lt;em&gt;isNotBlank&lt;/em&gt;&lt;span&gt;(prefix)&amp;amp;&amp;amp;StringUtils.&lt;span&gt;&lt;em&gt;isNotBlank&lt;/em&gt;&lt;span&gt;(strategy)&amp;amp;&amp;amp;prefix.equals(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;uc_captcha&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&amp;amp;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;week&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.equals(strategy)){&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                                    Calendar c=Calendar.&lt;span&gt;&lt;em&gt;getInstance&lt;/em&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;i = c.get(Calendar.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;WEEK_OF_YEAR&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                    StringBuffer sb =&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;StringBuffer();&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;year = c.get(Calendar.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;YEAR&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                    String suffix = sb.append(year).append(i).toString();&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                    System.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;out&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.println(suffix);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;return&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;prefix+&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;_&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;+suffix;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                        }&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;else&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;if&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(StringUtils.&lt;span&gt;&lt;em&gt;isNotBlank&lt;/em&gt;&lt;span&gt;(prefix)&amp;amp;&amp;amp;StringUtils.&lt;span&gt;&lt;em&gt;isNotBlank&lt;/em&gt;&lt;span&gt;(strategy)&amp;amp;&amp;amp;prefix.equals(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;uc_captcha&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&amp;amp;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;month&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.equals(strategy)){&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                                    Calendar c=Calendar.&lt;span&gt;&lt;em&gt;getInstance&lt;/em&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;i = c.get(Calendar.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;MONTH&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                    StringBuffer sb =&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;StringBuffer();&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;year = c.get(Calendar.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;YEAR&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                    String suffix = sb.append(year).append(i).toString();&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                    System.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;out&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.println(suffix);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;return&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;prefix+&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;_&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;+suffix;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                        }&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;//获取不到分表名称，则返回主表名称&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;                        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;return&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&quot;uc_captcha&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;            }&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;            &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 01 Feb 2018 06:46:00 +0000</pubDate>
<dc:creator>HoperChen</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chentaotao/p/8398943.html</dc:identifier>
</item>
<item>
<title>基本包装类型 - 决起而飞</title>
<link>http://www.cnblogs.com/iDouble/p/8387894.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iDouble/p/8387894.html</guid>
<description>&lt;p&gt;为了方便操作基本类型值，这里有三个特殊的引用类型，Boolean，Number，String，也具有与各自的基本类型相应的特殊行为。实际上，每当读取这个类型时，后台就会创建一个对应的基本包装类型的对象。&lt;/p&gt;
&lt;p&gt;var s1=&quot;some text&quot;&lt;/p&gt;
&lt;p&gt;var s2=s1.substring(2)&lt;/p&gt;
&lt;p&gt;在读取模式中访问字符串时，后台自动完成：创建string类型的实例；在实例上调用指定的方法；销毁实例；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;引用类型和基本包装类型的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要在于对象的生命期&lt;/strong&gt;，使用new操作符创建的引用类型的实例，在离开作用域前都会保存在内存中；而基本包装类型的对象，只存在于一行代码的执行瞬间。&lt;/p&gt;
&lt;p&gt;同时，所有的基本包装类型的对象在转换为布尔类型时，都是true&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;object构造函数会根据传入值的类型返回相应基本包装类型的实例&lt;/span&gt;
       &lt;span&gt;var&lt;/span&gt; obj=&lt;span&gt;new&lt;/span&gt; Object(&quot;some text&quot;&lt;span&gt;)
       console.log(obj &lt;/span&gt;&lt;span&gt;instanceof&lt;/span&gt; String)   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;

       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用new调用基本包装类型的构造函数，与直接调用同名的转型函数是不一样的&lt;/span&gt;
       &lt;span&gt;var&lt;/span&gt; value=&quot;25&quot;
       &lt;span&gt;var&lt;/span&gt; number=&lt;span&gt;Number(value)
       console.log(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt; number)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;number&lt;/span&gt;

       &lt;span&gt;var&lt;/span&gt; obj=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Number(value)
       console.log(obj)              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Boolean类型&lt;/h3&gt;
&lt;p&gt;Boolean类型是布尔值对应的引用类型，其实例重写valueOf方法，返回基本类型值true或false；重写toString方法，返回字符串“true”或“false”；Boolean对象用处不大，容易造成误解&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
       &lt;span&gt;var&lt;/span&gt; falseObject=&lt;span&gt;new&lt;/span&gt; Boolean(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
       &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result=falseObject&amp;amp;&amp;amp;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
       console.log(result)    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true 因为任何基本包装类型转为布尔值都是true&lt;/span&gt;

       &lt;span&gt;var&lt;/span&gt; falseValue=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
       result&lt;/span&gt;=falseValue&amp;amp;&amp;amp;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
       console.log(result)    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;false 布尔运算中为false&lt;/span&gt;
&lt;span&gt;
       console.log(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt; falseObject)      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;
       console.log(&lt;span&gt;typeof&lt;/span&gt; falseValue)       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;
       console.log(falseObject &lt;span&gt;instanceof&lt;/span&gt; Boolean)   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true      instanceof 检测引用类型&lt;/span&gt;
       console.log(falseValue &lt;span&gt;instanceof&lt;/span&gt; Boolean)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Number类型&lt;/h3&gt;
&lt;p&gt;与数字值对应的引用类型，也是重写valueOf()表示基本类型的数值，toLocaleString()，toString()，返回的是字符串；不建议直接创建Number对象，和Boolean对象一样，容易混&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
       &lt;span&gt;var&lt;/span&gt; num1=10&lt;span&gt;
       console.log(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt; num1.toFixed(2))  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;toFixed()方法将数值格式转为string;适合货币的处理&lt;/span&gt;
       &lt;span&gt;var&lt;/span&gt; num2=10.005&lt;span&gt;
       console.log(num2.toFixed(&lt;/span&gt;2))         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;10.01&quot; 会四舍五入的&lt;/span&gt;
       
       &lt;span&gt;var&lt;/span&gt; num3=10&lt;span&gt;
       console.log(num1.toExponential(&lt;/span&gt;1))   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.0e+1   科学计数法&lt;/span&gt;

       &lt;span&gt;var&lt;/span&gt; num4=99&lt;span&gt;                           
       console.log(num4.toPrecision(&lt;/span&gt;1))     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;1e+2&quot;    toPrecision会自动查找适合的&lt;/span&gt;
       console.log(num4.toPrecision(2))     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;99&quot;&lt;/span&gt;
       console.log(num4.toPrecision(3))     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;99.0&quot;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;String类型&lt;/h3&gt;
&lt;p&gt;是string值得引用类型，有length，索引，许多方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、字符方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两个访问字符串中特定字符&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;charAt()和charCodeAt()&lt;/strong&gt;，都接受一个参数即基于0的索引，其中charAt()以单个字符返回该索引字符，charCodeAt()返回的是该索引字符的字符编码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
       &lt;span&gt;var&lt;/span&gt; str=&quot;hello world&quot;&lt;span&gt;
       console.log(str.charAt(&lt;/span&gt;2))          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;
       console.log(str.charCodeAt(2))      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;108 l的字符编码&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2、字符串操作方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;concat方法&lt;/span&gt;
       &lt;span&gt;var&lt;/span&gt; str1=&quot;hello&quot;   
       &lt;span&gt;var&lt;/span&gt; str2=str1.concat(&quot; world&quot;&lt;span&gt;)
       console.log(str1)        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;hello   原字符串没有影响,而是新副本，和数组的concat一样&lt;/span&gt;
       console.log(str2)        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;hello world &lt;/span&gt;
         &lt;br/&gt;//trim方法               此方法也会创建一个副本，删除前置和后缀的所有空格，对原字符串没有影响，IE9支持&lt;br/&gt;var str1=&quot;  hello world   &quot;&lt;br/&gt;var str2=str1.trim()&lt;br/&gt;console.log(str1)        //&quot;  hello world   &quot;&lt;br/&gt;console.log(str2)        //&quot;hello world&quot; &lt;br/&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;字符串截取&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; str=&quot;hello world&quot;&lt;span&gt;
        console.log(str.slice(&lt;/span&gt;3))       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;lo world&lt;/span&gt;
        console.log(str.substring(3))   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;lo world&lt;/span&gt;
        console.log(str.substr(3))      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;lo world&lt;/span&gt;
        console.log(str.slice(3,7))     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;lo w&lt;/span&gt;
        console.log(str.substring(3,7)) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;lo w             第二个参数代表截取的最终位置，不包括&lt;/span&gt;
        console.log(str.substr(3,7))    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;lo worl          第二个参数代表截取的个数&lt;/span&gt;
        
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;有负数的情况&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; str2=&quot;hello world&quot;&lt;span&gt; 
        console.log(str2.slice(&lt;/span&gt;-3))       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;rld             slice将传入的所有负值加上length&lt;/span&gt;
        console.log(str2.substring(-3))   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;hello world     substring将负的第一个参数加上length，负的第二个转换为0&lt;/span&gt;
        console.log(str2.substr(-3))      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;rld             substr将所有负值都转换为0&lt;/span&gt;
        console.log(str2.slice(3,-4))     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;lo w&lt;/span&gt;
        console.log(str2.substring(3,-4)) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;hel&lt;/span&gt;
        console.log(str2.substr(3,-4))    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3、字符串位置方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;字符串位置&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; str=&quot;hello world&quot;&lt;span&gt;
        console.log(str.indexOf(&lt;/span&gt;&quot;o&quot;))        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4   从前开始查找    当然找不到直接返回-1&lt;/span&gt;
        console.log(str.lastIndexOf(&quot;o&quot;))    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;7   从后开始查找 &lt;/span&gt;
&lt;span&gt;
        varstr2&lt;/span&gt;=&quot;hello world&quot;&lt;span&gt;
        console.log(str.indexOf(&lt;/span&gt;&quot;o&quot;,4))      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4  从位置4向后找   &lt;/span&gt;
        console.log(str.lastIndexOf(&quot;o&quot;,4))  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4  从位置4向前找&lt;/span&gt;

      
        &lt;span&gt;var&lt;/span&gt; str3=&quot;hello world for us to solve it&quot;
        &lt;span&gt;var&lt;/span&gt; position=&lt;span&gt;[]
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; pos=str3.indexOf(&quot;o&quot;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(pos&amp;gt;-1&lt;span&gt;){
             position.push(pos)
             pos&lt;/span&gt;=str3.indexOf(&quot;o&quot;,pos+1&lt;span&gt;)
        }
        console.log(position)                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4,7,13,20,23&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4、大小写的转换toLowerCase()和toUpperCase()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、字符串的匹配模式&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;match匹配，返回匹配结果数组，没有则为null;一般接受正则&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; str=&quot;hello world&quot;&lt;span&gt;
        console.log(str.match(&lt;/span&gt;&quot;9&quot;&lt;span&gt;))

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str2=&quot;cat,bat,gat,zat&quot;
        &lt;span&gt;var&lt;/span&gt; pattern=/.at/
        &lt;span&gt;var&lt;/span&gt; matches=&lt;span&gt;str2.match(pattern)
        console.log(matches)            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数组第一项为匹配到的字符&lt;/span&gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;search查找，返回查找元素的索引，找不到则为-1&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; str=&quot;hello world&quot;&lt;span&gt;
        console.log(str.search(&lt;/span&gt;&quot;e&quot;&lt;span&gt;))

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;replace替换，接受两个参数;第一个参数为正则或字符串;第二个参数为字符串或函数&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; text=&quot;cat,bat,sat,fat&quot;
        &lt;span&gt;var&lt;/span&gt; result=text.replace(&quot;at&quot;,&quot;ond&quot;&lt;span&gt;)
        console.log(text)        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;cat,bat,sat,fat&lt;/span&gt;
        console.log(result)      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;cond,bat,sat,fat&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; result=text.replace(/.at/g,&quot;ond&quot;)     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加个全局属性&lt;/span&gt;
        console.log(result)      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;cond,bond,sond,fond&lt;/span&gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二个是参数还可以使用特殊的字符序列&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; result=text.replace(/(.at)/g,&quot;word($1)&quot;&lt;span&gt;)
        console.log(result)

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二个参数是函数时&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; htmls(text){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; text.replace(/[&amp;lt;&amp;gt;&quot;&amp;amp;]/g,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(matchvalue,pos,originalText){
                      &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt;(matchvalue){
                            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &quot;&amp;lt;&quot;&lt;span&gt;:
                               &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;&amp;amp;lt;&quot;&lt;span&gt;;
                            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &quot;&amp;gt;&quot;&lt;span&gt;:
                               &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;&amp;amp;gt;&quot;&lt;span&gt;;
                            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &quot;\&quot;&quot;&lt;span&gt;:
                               &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;&amp;amp;quot;&quot;&lt;span&gt;;
                      }
                });
        }       
        
        console.log(htmls(&lt;/span&gt;&quot;&amp;lt;p calss=\&quot;greeting\&quot;&amp;gt;hello world&amp;lt;/p&amp;gt;&quot;))  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打印出实例&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;单体内置对象&lt;/h3&gt;
&lt;p&gt;所谓单体内置对象是有ES实现，不依赖宿主环境的对象，这些对象在ES程序执行之前就已经存在，我们不必再去实例化内置对象，比如array，object，string，现在介绍global和math对象&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、URI编码方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Global有2种方法对通用资源标识符进行编码&lt;/p&gt;
&lt;p&gt;encodeURI用于对整个URI，&lt;strong&gt;不会对本身属于URI的特殊字符进行编码（冒号，斜杠，问号，井号）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;encodeURIComponent用于对URI中的某一段，&lt;strong&gt;对任何非标准字符进行编码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在实践中更多是来&lt;strong&gt;查询字符串参数&lt;/strong&gt;而不是基础URI进行编码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
      &lt;span&gt;var&lt;/span&gt; uri=&quot;http://www.baidu.com/illegal value.htm#start&quot;&lt;span&gt;     
      console.log(encodeURI(uri))      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;http://www.baidu.com/illegal%20value.htm#start       只有空格被转换&lt;/span&gt;
      console.log(encodeURIComponent(uri))   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;http%3A%2F%2Fwww.baidu.com%2Fillegal%20value.htm%23start   所有非规范都被转换&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;与encodeURI和encodeURIComponent相对应有两种方法：&lt;/p&gt;
&lt;p&gt;decodeURI()和encodeURIComponent()方法，前者只能对encodeURI替换的字符进行解码；后者可以对encodeURIComponent替换的字符进行解码，即可以解码所有的字符&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
      &lt;span&gt;var&lt;/span&gt; uri=&quot;http://www.baidu.com/illegal%20value.htm#start&quot;&lt;span&gt;
      console.log(decodeURI(uri))      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;http://www.baidu.com/illegal value.htm#start  不能对井号进行解码，因为encodeURI不能对井号进行编码&lt;/span&gt;

      &lt;span&gt;var&lt;/span&gt; uri2=&quot;http%3A%2F%2Fwww.baidu.com%2Fillegal%20value.htm%23start&quot;&lt;span&gt;
      console.log(decodeURIComponent(uri2))   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;http://www.baidu.com/illegal value.htm#start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2、eval方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;js中强大的语法，充当一个js解析器作用，接受一个参数，即将要执行的js字符串&lt;/p&gt;
&lt;p&gt;通过eval方法执行的代码被认为是包含该次调用的执行环境的一部分，被执行的代码具有与该执行环境相同的作用域链；注意：&lt;strong&gt;在eval里创建的任何变量和函数都不会被提升，因为它们被包含在一个字符串中，它们只在eval执行的时候被创建。在严格模式下，外部访问不到eval中创建的任何变量和函数。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
      eval(&quot;alert('hi')&quot;)     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;hi&lt;/span&gt;
&lt;span&gt;
      eval(&lt;/span&gt;&quot;function say(){alert('world')}&quot;&lt;span&gt;)
      say()                   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;world&lt;/span&gt;

      &lt;span&gt;var&lt;/span&gt; message=&quot;hello world&quot;&lt;span&gt;
      eval(&lt;/span&gt;&quot;alert(message)&quot;)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;hello world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3、window对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;web浏览器将全局对象作为window对象的一部分来实现的，在全局作用域中声明的所有变量和函数都成为window对象的属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
      &lt;span&gt;var&lt;/span&gt; color=&quot;red&quot;
      &lt;span&gt;function&lt;/span&gt;&lt;span&gt; say(){
          console.log(window.color)
      }
      window.say()

      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; global=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;
      }()    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;立即调用的函数表达式&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Math对象&lt;/h3&gt;
&lt;p&gt;1、Math对象的属性，大多是一些数学方面的，可查找&lt;/p&gt;
&lt;p&gt;2、最大值最小值min()，max()&lt;/p&gt;
&lt;p&gt;3、四舍五入方法，ceil，floor，round&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
      &lt;span&gt;var&lt;/span&gt; value=[12,34,3432,435&lt;span&gt;]
      
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把apply的第一次参数设置为Math对象，从而正确的this值&lt;/span&gt;
      &lt;span&gt;var&lt;/span&gt; max=&lt;span&gt;Math.max.apply(Math,value)
      console.log(max)
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; min=&lt;span&gt;Math.min.apply(Math,value)
      console.log(min)

      console.log(Math.ceil(&lt;/span&gt;23.6))   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;24     向上取整&lt;/span&gt;
      console.log(Math.floor(23.6))  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;23     向下取整&lt;/span&gt;
      console.log(Math.round(23.6))  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;24     四舍五入&lt;/span&gt;
      console.log(Math.round(23.4))  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;4、random()方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Math.random方法返回一个大于等于0,小于1的随机数&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;值=Math.floor(Math.random()*可能值的总数+第一个可能的值)&lt;/span&gt;
      &lt;span&gt;var&lt;/span&gt; value=Math.floor(Math.random()*10+1&lt;span&gt;)
      console.log(value)    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1——10的随机数&lt;/span&gt;

      &lt;span&gt;var&lt;/span&gt; value2=Math.floor(Math.random()*9+2&lt;span&gt;)
      console.log(value2)   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2——10的随机数&lt;/span&gt;

      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;随机值得函数&lt;/span&gt;
      &lt;span&gt;function&lt;/span&gt;&lt;span&gt; selectFrom(lowerValue,upperValue){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; choice=upperValue-lowerValue+1
            &lt;span&gt;return&lt;/span&gt; Math.floor(Math.random()*choice+&lt;span&gt;lowerValue)
      }
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; num=selectFrom(2,10&lt;span&gt;)
      console.log(num)        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2——10的任意值&lt;/span&gt;
 

      &lt;span&gt;var&lt;/span&gt; colors=[&quot;green&quot;,&quot;blue&quot;,&quot;yellow&quot;,&quot;purple&quot;,&quot;brown&quot;,&quot;olive&quot;&lt;span&gt;]
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; colors=colors[selectFrom(0,colors.length-1&lt;span&gt;)]
      console.log(colors)     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数组中的任意个值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
      console.log(Math.abs(-1))    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1  返回num的绝对值&lt;/span&gt;
      console.log(Math.sqrt(9))    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3  返回num的平方根&lt;/span&gt;
      console.log(Math.pow(2,3))   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;8  返回num的power次幂&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 01 Feb 2018 06:44:00 +0000</pubDate>
<dc:creator>决起而飞</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iDouble/p/8387894.html</dc:identifier>
</item>
<item>
<title>阿里java开发手册中命名规约解读之DO/BO/DTO/VO/AO - 斑驳的树影</title>
<link>http://www.cnblogs.com/optblogs/p/8398813.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/optblogs/p/8398813.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;在阅读《阿里巴巴Java开发手册》时，看到命名规则中有这样一条&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/961183/201802/961183-20180201113247968-1024195583.png&quot; alt=&quot;&quot; width=&quot;622&quot; height=&quot;108&quot;/&gt;&lt;/p&gt;
&lt;p&gt;虽然知道这些是根据Java对象的角色所分配名称的后缀，但是没有弄清楚分别是什么意思，日常开发中也没有使用到。&lt;/p&gt;
&lt;p&gt;网上查找了一些资料，但是感觉大多数都是一样的，可能大家都是互相copy，篇幅过长并且不易理解。&lt;/p&gt;
&lt;p&gt;别灰心！《阿里巴巴Java开发手册》中对于上面这些在领域模型的命名使用上给出了规范，说的很清楚，分享给大家。&lt;/p&gt;
&lt;p&gt;补充一个链接，内容是《阿里巴巴Java开发手册纪念版》以及历时一年推出的代码规范插件。https://github.com/alibaba/p3c&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;领域模型命名规约&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;1.数据对象：xxx&lt;strong&gt;DO&lt;/strong&gt;，xxx即为&lt;strong&gt;数据表名&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;2.数据传输对象：xxx&lt;strong&gt;DTO&lt;/strong&gt;，xxx为&lt;strong&gt;业务领域&lt;/strong&gt;相关的名称；&lt;/p&gt;
&lt;p&gt;3.展示对象：xxx&lt;strong&gt;VO&lt;/strong&gt;，xxx一般为&lt;strong&gt;网页&lt;/strong&gt;的名称；&lt;/p&gt;
&lt;p&gt;4.&lt;strong&gt;POJO&lt;/strong&gt; 是DO/DTO/BO/VO的&lt;strong&gt;统称&lt;/strong&gt;，&lt;strong&gt;&lt;span&gt;禁止&lt;/span&gt;&lt;/strong&gt;命名成xxxPOJO。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;个人解读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;1.如果你写的web应用是一个CRUD的demo，那么一个DO就完全够用。&lt;/p&gt;
&lt;p&gt;例如，写一个用户的增删改查，数据库中有一个user表，你建立一个UserDO，类中的字段和数据库中一致，当你需要对User操作时，就用UserDO进行数据存取。&lt;/p&gt;
&lt;p&gt;那么问题来啦：&lt;/p&gt;
&lt;p&gt;首先，例如user表中有一个叫做passWord的字段，保存了登录密码，这个字段肯定是不需要返回到页面上的，但是如果像上面的操作，直接把UserDO的对象返回给前台，必然会带来安全隐患；&lt;/p&gt;
&lt;p&gt;其次，如果User中有些字段需要&lt;strong&gt;转换&lt;/strong&gt;后才能正确显示（例如显示中文，保存的是英文，或者保存的是关联表中的id），直接返回UserDO就只能在页面上用js写if...else...来区分值，很繁琐；&lt;/p&gt;
&lt;p&gt;最后，如果你的页面上显示的数据是一个很大的&lt;strong&gt;结果集&lt;/strong&gt;（调用了好几个接口的返回结果），例如除了User信息还有Account信息，一个UserDO显然就不够用了；&lt;/p&gt;
&lt;p&gt;VO的概念应运而生。&lt;/p&gt;
&lt;p&gt;2.VO中我们写的&lt;strong&gt;字段&lt;/strong&gt;都是前台所&lt;strong&gt;需要&lt;/strong&gt;的，而不是对象的所有字段值；&lt;/p&gt;
&lt;p&gt;VO中的&lt;strong&gt;字段格式&lt;/strong&gt;都是符合前台页面显示所需的，需要中文就显示中文；&lt;/p&gt;
&lt;p&gt;对于调用了好几个接口返回的&lt;strong&gt;结果集&lt;/strong&gt;，可以封装一个VO，将所有结果整合后再返回给前端页面。&lt;/p&gt;
&lt;p&gt;3.有些人肯定在想，我的DO和VO中字段大多数都是相同的，有必要再写这样一个类吗？&lt;/p&gt;
&lt;p&gt;答案是有的！如果写的是比较小的web应用，字段不多，你觉得没有这个必要。但是如果写的是大一些的系统，字段越多，分层的优势就会越明显。（博主写的web不大，但是拿出一个类也是一百多个字段，深感头疼）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;DO和VO之间的转换&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;1.两个POJO之间的属性值进行copy，最原始的方法就是手动复制，但是这样就会产生大量的set，get代码，&lt;strong&gt;业务逻辑&lt;/strong&gt;才是重点好吗？！不能喧宾夺主；&lt;/p&gt;
&lt;p&gt;2.还有种方法就是用&lt;strong&gt;Spring&lt;/strong&gt;提供的&lt;strong&gt;BeanUtils&lt;/strong&gt;，博主现在的项目中用的就是这个，感觉还可以，但是也有点小问题，例如copy日期需要先注册等；&lt;/p&gt;
&lt;p&gt;3.使用&lt;strong&gt;Dozer&lt;/strong&gt;。Dozer是一个对象转换工具，可以在两个JavaBean之间进行递归数据复制,并且这些JavaBean可以是不同的复杂的类型。有兴趣的同学可以去学习下。&lt;/p&gt;

</description>
<pubDate>Thu, 01 Feb 2018 06:20:00 +0000</pubDate>
<dc:creator>斑驳的树影</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/optblogs/p/8398813.html</dc:identifier>
</item>
<item>
<title>【bird-java】分布式服务间的事件总线EventBus - _liuxx</title>
<link>http://www.cnblogs.com/liuyh/p/8305001.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuyh/p/8305001.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;什么是EventBus&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;EventBus是对发布-订阅模式的一种实现。其以一种非常优雅的方式实现了组件间的解耦与通信，在Android开发、DDD等领域都有非常广泛的应用。&lt;br/&gt;&lt;img src=&quot;http://static.zybuluo.com/liuxx-/52l6on1ahjwpr4ddhs6i332h/image.png&quot; alt=&quot;&quot; width=&quot;918&quot; height=&quot;425&quot;/&gt;&lt;/p&gt;
&lt;p&gt;事件流大致如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Producer向EventBus发送事件。&lt;/li&gt;
&lt;li&gt;EventBus向所有监听了该事件的Consumer推送事件。&lt;/li&gt;
&lt;li&gt;监听了该事件的Consumer消费事件。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;注：一个组件即可以是Producer，也可以是Consumer。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;分布式服务间的EventBus&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;在分布式系统中，事件在服务之间的传递要比单机EventBus复杂很多。有没有一种适用于分布式服务之间的，并且事件传递就像单机一样简单的EventBus呢？在GitHub上搜索了JAVA实现的EventBus，排名前十的几乎都是用于Android或JAVA的单机事件总线。良久之后...还是自己动手吧。集群环境下的EventBus比单机版需要多考虑一些问题，比如：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt; 服务集群部署的情况下，如何保证每个集群均可订阅该事件，且每个集群只能消费一次该事件。&lt;/li&gt;
&lt;li&gt;如何实现一个服务内部多个`xxxService`订阅同一事件。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;解决方案：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;使用`kafka`实现集群间的发布订阅（基于`topic`），同一集群处于同一个kafka的consumer-group来保证每个集群只会消费一次该事件。&lt;/li&gt;
&lt;li&gt;服务在启动时可反射获得所有实现了`IEventHandler&amp;lt;TEventArg&amp;gt;`的类并缓存，服务消费消息时获取所有注册了该消息的handler并调用其`HandleEvent`方法。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/liuxx-/n4irrtlsshdlo2x9jm5zsfej/image.png&quot; alt=&quot;&quot; width=&quot;836&quot; height=&quot;667&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;部分关键源码&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、事件消息的定义&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; EventArg &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IEventArg{

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date eventTime;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; EventArg(){
        eventTime &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Date getEventTime() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; eventTime;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setEventTime(Date eventTime) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.eventTime =&lt;span&gt; eventTime;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;事件消息默认记录创建时间，可扩展其他字段，比如发送时间、标识等。&lt;/p&gt;
&lt;p&gt;2、使用spring-kafka发送消息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * kafka事件注册器，向kafka队列中push消息
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Component
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; KafkaRegister &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IEventRegister {

    @Autowired(required &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; KafkaTemplate&amp;lt;String,IEventArg&amp;gt;&lt;span&gt; kafkaTemplate;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 事件注册
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; eventArg 事件参数
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; regist(IEventArg eventArg) {
        kafkaTemplate.send(getTopic(eventArg),eventArg);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获取kafka的topic
     *
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; eventArg
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; topic
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String getTopic(IEventArg eventArg){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; eventArg.getClass().getName();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、消费kafka消息并执行当前服务中所有订阅了该消息的事件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * kafka事件监听器
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; KafkaEventArgListener &lt;span&gt;implements&lt;/span&gt; MessageListener&amp;lt;String,EventArg&amp;gt;&lt;span&gt; {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; IEventHandlerFactory eventHandlerFactory;

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onMessage(ConsumerRecord&amp;lt;String, EventArg&amp;gt;&lt;span&gt; consumerRecord) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (consumerRecord == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        EventArg value &lt;/span&gt;=&lt;span&gt; consumerRecord.value();

        Set&lt;/span&gt;&amp;lt;IEventHandler&amp;gt; handlers =&lt;span&gt; eventHandlerFactory.getHandlers(value);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (handlers == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (IEventHandler handler : handlers) {
            handler.HandleEvent(value);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;EventBus的使用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1、事件的定义。所有事件均继承于上文EventArg抽象类，示例如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; TestEventArg &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; EventArg{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String value;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getValue() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setValue(String value) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2、事件发布。示例代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
eventBus.push(&lt;span&gt;new&lt;/span&gt; TestEventArg());
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3、事件订阅。一个服务发布事件之后，任何服务中的任何`xxxServiceImpl`类均可订阅该事件，实现`IEventHandler&amp;lt;TEventArg&amp;gt;`接口即可完成事件的订阅，示例如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FormServiceImpl &lt;span&gt;extends&lt;/span&gt; AbstractServiceImpl&amp;lt;Form&amp;gt; &lt;span&gt;implements&lt;/span&gt; FormService,IEventHandler&amp;lt;TestEventArg&amp;gt;&lt;span&gt; {

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; HandleEvent(TestEventArg eventArg) {
        System.out.println(&lt;/span&gt;&quot;notify zero======&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 整体来说，使用还是很简单的，EventBus实现与使用示例收录于bird-java项目中，项目地址：&lt;a href=&quot;https://github.com/liuxx001/bird-java&quot; target=&quot;_blank&quot;&gt;https://github.com/liuxx001/bird-java&lt;/a&gt;。&lt;/p&gt;
</description>
<pubDate>Thu, 01 Feb 2018 04:53:00 +0000</pubDate>
<dc:creator>_liuxx</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuyh/p/8305001.html</dc:identifier>
</item>
<item>
<title>Android之MaterialDesign应用技术2-仿支付宝上滑搜索框缓慢消失 - CMusketeer</title>
<link>http://www.cnblogs.com/cmusketeer/p/8398426.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cmusketeer/p/8398426.html</guid>
<description>&lt;p&gt;PS：在这之前也就是上一篇介绍了MaterialDesign一些滑动删除、标题栏的悬浮效果等，如果没看过第一篇的小火鸡可以看一下，因为这篇是接着上一篇写的，有一些东西上一篇写过了这里就不在重复了（&lt;a href=&quot;http://www.cnblogs.com/cmusketeer/p/8372062.html&quot; target=&quot;_blank&quot;&gt;MaterialDesign应用技术一&lt;/a&gt;），这篇也是上一篇的升级版，在我们日常写界面的时候，都想简单并且界面美观，这就少不了动画效果，MaterialDesign我们一般用到的动画，里面都有，不用我们自己写，在这个强大的库里，他都能够做什么呢，让我们来简单看一下。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;上滑 顶部背景图片缓慢消失，标题悬浮&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在标题 上栏加入布局，放一些搜索框&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入框TextInputEditText的使用&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;&lt;strong&gt;1:上滑 顶部背景图片缓慢消失，标题悬浮&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1258190/201802/1258190-20180201105212421-1318406829.gif&quot; alt=&quot;&quot; width=&quot;301&quot; height=&quot;387&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;1.1：&lt;/strong&gt;CoordinatorLayout中设置&lt;/h3&gt;
&lt;p&gt;　　前面的添加依赖，在上一篇中已经说过，在这就不在重复了，协调者布局中这次又加入了一个新的布局CollapsingToolbarLayout（折叠工具栏布局），很明显上面的效果图中的工具栏上滑的同时把图片折叠进去了，这是一个动画效果，如果不是MaterialDesign库的强大，这都是我们自己写。我们来分析一下效果图中都用到了什么，只看带颜色的有文字，和一个苹果背景图、还有一个悬浮按钮（吸附在CollapsingToolbarLayout的右下角）。我们来分析一下主要代码&lt;/p&gt;
&lt;p&gt;最外层--&amp;gt;里层还是：CoordinatorLayout--&amp;gt;AppBarLayout--&amp;gt;CollapsingToolbarLayout。竟然折叠的部分是toolbar和背景图片，这就理所应当的把这两个空间写在CollapsingToolbarLayout中，因为上面协调者布局和appbar布局很简单，这里就不在写了，只贴出折叠布局代码（里面的注释有贴出后加的，用该代码时要注意语法）。这里可以看出我在ImageView中加入了高度180dp，这里是一定要加上的，否侧toolbar的会出现以下几种错误，1:文字不显示。2：只显示标题栏。3：图片过大充满整个屏幕。当然这些问题不是每个人都有的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;!--折叠toolbar布局--&amp;gt;
        &amp;lt;android.support.design.widget.CollapsingToolbarLayout
            android:layout_width=&quot;match_parent&quot;
            android:layout_height=&quot;wrap_content&quot;
            android:id=&quot;@+id/toolbar_layout&quot;
            app:contentScrim=&quot;@color/colorPrimary&quot;
            app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;&amp;gt;
            &amp;lt;!--这里ContentScrim是实现上滑后由什么颜色作为标题背景色--&amp;gt;
            &amp;lt;ImageView
                android:layout_width=&quot;match_parent&quot;
                android:layout_height=&quot;180dp&quot;
                android:scaleType=&quot;fitXY&quot;    //图片显示方式，铺满xy轴
                android:src=&quot;@drawable/img1&quot; /&amp;gt;
            &amp;lt;android.support.v7.widget.Toolbar
                android:id=&quot;@+id/id_toolbar&quot;
                android:layout_width=&quot;match_parent&quot;
                android:layout_height=&quot;?actionBarSize&quot; /&amp;gt;
        &amp;lt;/android.support.design.widget.CollapsingToolbarLayout&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写到这才是我们的折叠布局了，还有我们的悬浮按钮FloatingActionButton，标红的是重点。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    &amp;lt;android.support.design.widget.FloatingActionButton
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:src=&quot;@drawable/add&quot;
        &lt;span&gt;app:layout_anchor=&quot;@id/toolbar_layout&quot;//固定在哪个控件
        app:layout_anchorGravity=&quot;bottom|right&quot;//的具体位置&lt;/span&gt;
        /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 写到这里基本上完成了，代码少，效果好正是该库的强大，在Activity中的使用基本和上一篇是一样的。对于这个悬浮按钮里面也有很多属性，这里就不在一一写出了，这里只是作为一个辅助，让我们在视觉更舒服所加的。&lt;/p&gt;
&lt;h2&gt;2：&lt;strong&gt;在标题 上栏加入布局，放一些搜索框&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1258190/201802/1258190-20180201113723062-1737756702.gif&quot; alt=&quot;&quot; width=&quot;348&quot; height=&quot;557&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;2.1：布局书写&lt;/h3&gt;
&lt;p&gt;这里的布局和上面是一样的，只是把imageview换成了LinearLayout布局，在该布局中写上我们熟悉的输入框和图片按钮即可，&lt;/p&gt;
&lt;p&gt;最外层--&amp;gt;里层还是：CoordinatorLayout--&amp;gt;AppBarLayout--&amp;gt;CollapsingToolbarLayout--&amp;gt;LinearLayout。&lt;/p&gt;
&lt;h2&gt;3:&lt;strong&gt;输入框TextInputEditText的使用&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在最平常的时候，我们写输入框，要加正则表达式来判断是哪一行出现不符合要求的数据，然后用一个toast来提示用户，这就显得用户体验极差，有的用户还没看完toast就关掉了，而且具体哪一行错误也没有标红，这就很尴尬了，那么今天这个控件也是一个输入框，但是外层加一个布局（TextInputLayout），就可以达到精确到一行提示具体错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TextInputLayout是22.2.0新添加的控件， 要和EditText(或EditText的子类）结合使用，并且&lt;span&gt;只能&lt;/span&gt;包含一个EditText(或EditText的子类）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般情况下，EditText获得光标的时候hint会自动隐藏，这样不是很友好。这时候TextInputLayout则是显示错误，TextInputLayout是LinearLayout的子类，用于辅助显示提示信息。当EditText获取得光标的时候，EditText的hint会自己显示在上方，并且有动画过渡。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1258190/201802/1258190-20180201115613750-1846738234.gif&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;现在仅仅是过度效果，还没有加提示信息，用法很简单，但注意一点&lt;strong&gt;&lt;strong&gt;TextInputLayout只能包含一个&lt;/strong&gt;&lt;/strong&gt;TextInputEditText，如果写用户名和密码那就写两个&lt;strong&gt;TextInputLayout，哦，对了这个最外层布局倒和协调者布局没多大关系，随便一个线性布局即可。&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;26.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
  &amp;lt;android.support.design.widget.TextInputLayout
       &lt;span&gt; android:id=&quot;@+id/id_inputtext&quot;&lt;/span&gt;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;wrap_content&quot;&amp;gt;

        &amp;lt;android.support.design.widget.TextInputEditText
            android:layout_width=&quot;match_parent&quot;
            android:layout_height=&quot;wrap_content&quot;
            android:hint=&quot;用户名&quot; /&amp;gt;
    &amp;lt;/android.support.design.widget.TextInputLayout&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里要注意的是Id是加在 TextInputLayout上，在Activity中获取也是获取的layout，那么怎么获取edittext输入的数据呢，有方法的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
viewById.getEditText().addTextChangedListener(this);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 获取里面的text文本并且添加文本变化监听，这里要实现三个方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public void afterTextChanged(Editable s) //内容改变后调用
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这两个方法简单demo上都用不到，这里就不过多解释了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@Override
    public void beforeTextChanged(CharSequence s, int start, int count, int after) {

    }

    @Override
    public void onTextChanged(CharSequence s, int start, int before, int count) {

    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这里我们重点看afterTextChanged方法,这里只给第一个控件加上了该监听(对比)。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
 @Override
    public void afterTextChanged(Editable s) {
        if(s.length()&amp;lt;4){
            viewById.setError(&quot;必须大于4位&quot;);
            viewById.setErrorEnabled(true);
        }else {
            viewById.setErrorEnabled(false);
        }
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1258190/201802/1258190-20180201124132078-673633292.gif&quot; alt=&quot;&quot; width=&quot;363&quot; height=&quot;580&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完，&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 01 Feb 2018 04:43:00 +0000</pubDate>
<dc:creator>CMusketeer</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cmusketeer/p/8398426.html</dc:identifier>
</item>
<item>
<title>Effective Java 第三版——30. 优先使用泛型方法 - 林本托</title>
<link>http://www.cnblogs.com/IcanFixIt/p/8398370.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/IcanFixIt/p/8398370.html</guid>
<description>&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Tips&lt;br/&gt;《Effective Java, Third Edition》一书英文版已经出版，这本书的第二版想必很多人都读过，号称Java四大名著之一，不过第二版2009年出版，到现在已经将近8年的时间，但随着Java 6，7，8，甚至9的发布，Java语言发生了深刻的变化。&lt;br/&gt;在这里第一时间翻译成中文版。供大家学习分享之用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4366140-ca5216df5c1029f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Effective Java, Third Edition&quot;/&gt;&lt;/p&gt;

&lt;p&gt;正如类可以是泛型的，方法也可以是泛型的。 对参数化类型进行操作的静态工具方法通常都是泛型的。 集合中的所有“算法”方法（如&lt;code&gt;binarySearc&lt;/code&gt;h和&lt;code&gt;sort&lt;/code&gt;）都是泛型的。&lt;/p&gt;
&lt;p&gt;编写泛型方法类似于编写泛型类型。 考虑这个方法，它返回两个集合的并集：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Uses raw types - unacceptable! [Item 26]

public static Set union(Set s1, Set s2) {

    Set result = new HashSet(s1);

    result.addAll(s2);

    return result;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此方法可以编译但有两个警告：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
Union.java:5: warning: [unchecked] unchecked call to

HashSet(Collection&amp;lt;? extends E&amp;gt;) as a member of raw type HashSet

        Set result = new HashSet(s1);

                     ^

Union.java:6: warning: [unchecked] unchecked call to

addAll(Collection&amp;lt;? extends E&amp;gt;) as a member of raw type Set

        result.addAll(s2);

                     ^&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要修复这些警告并使方法类型安全，请修改其声明以声明表示三个集合（两个参数和返回值）的元素类型的类型参数，并在整个方法中使用此类型参数。 声明类型参数的类型参数列表位于方法的修饰符和返回类型之间。 在这个例子中，类型参数列表是&lt;code&gt;&amp;lt;E&amp;gt;&lt;/code&gt;，返回类型是&lt;code&gt;Set&amp;lt;E&amp;gt;&lt;/code&gt;。 类型参数的命名约定对于泛型方法和泛型类型是相同的（条目 29和68）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Generic method

public static &amp;lt;E&amp;gt; Set&amp;lt;E&amp;gt; union(Set&amp;lt;E&amp;gt; s1, Set&amp;lt;E&amp;gt; s2) {

    Set&amp;lt;E&amp;gt; result = new HashSet&amp;lt;&amp;gt;(s1);

    result.addAll(s2);

    return result;

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至少对于简单的泛型方法来说，就是这样。 此方法编译时不会生成任何警告，并提供类型安全性和易用性。 这是一个简单的程序来运行该方法。 这个程序不包含强制转换和编译时没有错误或警告：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Simple program to exercise generic method

public static void main(String[] args) {

    Set&amp;lt;String&amp;gt; guys = Set.of(&quot;Tom&quot;, &quot;Dick&quot;, &quot;Harry&quot;);

    Set&amp;lt;String&amp;gt; stooges = Set.of(&quot;Larry&quot;, &quot;Moe&quot;, &quot;Curly&quot;);

    Set&amp;lt;String&amp;gt; aflCio = union(guys, stooges);

    System.out.println(aflCio);

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当运行这个程序时，它会打印&lt;code&gt;[Moe, Tom, Harry, Larry, Curly, Dick]&lt;/code&gt;（输出中元素的顺序依赖于具体实现。）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;union&lt;/code&gt;方法的一个限制是所有三个集合（输入参数和返回值）的类型必须完全相同。 通过使用限定通配符类型（ bounded wildcard types）（条目 31），可以使该方法更加灵活。&lt;/p&gt;
&lt;p&gt;有时，需要创建一个不可改变但适用于许多不同类型的对象。 因为泛型是通过擦除来实现的（条目 28），所以可以使用单个对象进行所有必需的类型参数化，但是需要编写一个静态工厂方法来重复地为每个请求的类型参数化分配对象。 这种称为泛型单例工厂（generic singleton factory）的模式用于方法对象（ function objects）（条目 42），比如&lt;code&gt;Collections.reverseOrder&lt;/code&gt;方法，偶尔也用于&lt;code&gt;Collections.emptySet&lt;/code&gt;之类的集合。&lt;/p&gt;
&lt;p&gt;假设你想写一个恒等方法分配器（ identity function dispenser）。 类库提供了&lt;code&gt;Function.identity&lt;/code&gt;方法，所以没有理由编写你自己的实现（条目 59），但它是有启发性的。 如果每次要求的时候都去创建一个新的恒等方法对象是浪费的，因为它是无状态的。 如果Java的泛型被具体化，那么每个类型都需要一个恒等方法，但是由于它们被擦除以后，所以泛型的单例就足够了。 以下是它的实例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Generic singleton factory pattern

private static UnaryOperator&amp;lt;Object&amp;gt; IDENTITY_FN = (t) -&amp;gt; t;

@SuppressWarnings(&quot;unchecked&quot;)

public static &amp;lt;T&amp;gt; UnaryOperator&amp;lt;T&amp;gt; identityFunction() {

    return (UnaryOperator&amp;lt;T&amp;gt;) IDENTITY_FN;

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将&lt;code&gt;IDENTITY_FN&lt;/code&gt;转换为&lt;code&gt;(UnaryFunction &amp;lt;T&amp;gt;)&lt;/code&gt;会生成一个未经检查的强制转换警告，因为&lt;code&gt;UnaryOperator &amp;lt;Object&amp;gt;&lt;/code&gt;对于每个&lt;code&gt;T&lt;/code&gt;都不是一个&lt;code&gt;UnaryOperator &amp;lt;T&amp;gt;&lt;/code&gt;。但是恒等方法是特殊的：它返回未修改的参数，所以我们知道，使用它作为一个&lt;code&gt;UnaryFunction &amp;lt;T&amp;gt;&lt;/code&gt;是类型安全的，无论&lt;code&gt;T&lt;/code&gt;的值是多少。因此，我们可以放心地抑制由这个强制生成的未经检查的强制转换警告。 一旦我们完成了这些，代码编译没有错误或警告。&lt;/p&gt;
&lt;p&gt;下面是一个示例程序，它使用我们的泛型单例作为&lt;code&gt;UnaryOperator &amp;lt;String&amp;gt;&lt;/code&gt;和&lt;code&gt;UnaryOperator &amp;lt;Number&amp;gt;&lt;/code&gt;。 像往常一样，它不包含强制转化，编译时也没有错误和警告：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Sample program to exercise generic singleton

public static void main(String[] args) {

    String[] strings = { &quot;jute&quot;, &quot;hemp&quot;, &quot;nylon&quot; };

    UnaryOperator&amp;lt;String&amp;gt; sameString = identityFunction();

    for (String s : strings)

        System.out.println(sameString.apply(s));

    Number[] numbers = { 1, 2.0, 3L };

    UnaryOperator&amp;lt;Number&amp;gt; sameNumber = identityFunction();

    for (Number n : numbers)

        System.out.println(sameNumber.apply(n));

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;虽然相对较少，类型参数受涉及该类型参数本身的某种表达式限制是允许的。 这就是所谓的递归类型限制（recursive type bound）。 递归类型限制的常见用法与&lt;code&gt;Comparable&lt;/code&gt;接口有关，它定义了一个类型的自然顺序（条目 14）。 这个接口如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public interface Comparable&amp;lt;T&amp;gt; {

    int compareTo(T o);

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;类型参数&lt;code&gt;T&lt;/code&gt;定义了实现&lt;code&gt;Comparable &amp;lt;T&amp;gt;&lt;/code&gt;的类型的元素可以比较的类型。 在实际中，几乎所有类型都只能与自己类型的元素进行比较。 所以，例如，&lt;code&gt;String&lt;/code&gt;类实现了&lt;code&gt;Comparable &amp;lt;String&amp;gt;&lt;/code&gt;，&lt;code&gt;Integer&lt;/code&gt;类实现了&lt;code&gt;Comparable &amp;lt;Integer&amp;gt;&lt;/code&gt;等等。&lt;/p&gt;
&lt;p&gt;许多方法采用实现&lt;code&gt;Comparable&lt;/code&gt;的元素的集合来对其进行排序，在其中进行搜索，计算其最小值或最大值等。 要做到这一点，要求集合中的每一个元素都可以与其中的每一个元素相比，换言之，这个元素是可以相互比较的。 以下是如何表达这一约束：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Using a recursive type bound to express mutual comparability

public static &amp;lt;E extends Comparable&amp;lt;E&amp;gt;&amp;gt; E max(Collection&amp;lt;E&amp;gt; c);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;限定的类型&lt;code&gt;&amp;lt;E extends Comparable &amp;lt;E &amp;gt;&amp;gt;&lt;/code&gt;可以理解为“任何可以与自己比较的类型&lt;code&gt;E&lt;/code&gt;”，这或多或少精确地对应于相互可比性的概念。&lt;/p&gt;
&lt;p&gt;这里有一个与前面的声明相匹配的方法。它根据其元素的自然顺序来计算集合中的最大值，并编译没有错误或警告：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Returns max value in a collection - uses recursive type bound

public static &amp;lt;E extends Comparable&amp;lt;E&amp;gt;&amp;gt; E max(Collection&amp;lt;E&amp;gt; c) {

    if (c.isEmpty())

        throw new IllegalArgumentException(&quot;Empty collection&quot;);

    E result = null;

    for (E e : c)

        if (result == null || [e.compareTo(result](http://e.compareTo(result)) &amp;gt; 0)

            result = Objects.requireNonNull(e);

    return result;

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;请注意，如果列表为空，则此方法将引发&lt;code&gt;IllegalArgumentException&lt;/code&gt;异常。 更好的选择是返回一个&lt;code&gt; Optional&amp;lt;E&amp;gt;&lt;/code&gt;（条目 55）。&lt;/p&gt;
&lt;p&gt;递归类型限制可能变得复杂得多，但幸运的是他们很少这样做。 如果你理解了这个习惯用法，它的通配符变体（条目 31）和模拟的自我类型用法（条目 2），你将能够处理在实践中遇到的大多数递归类型限制。&lt;/p&gt;
&lt;p&gt;总之，像泛型类型一样，泛型方法比需要客户端对输入参数和返回值进行显式强制转换的方法更安全，更易于使用。 像类型一样，你应该确保你的方法可以不用强制转换，这通常意味着它们是泛型的。 应该泛型化现有的方法，其使用需要强制转换。 这使得新用户的使用更容易，而不会破坏现有的客户端（条目 26）。&lt;/p&gt;
</description>
<pubDate>Thu, 01 Feb 2018 04:13:00 +0000</pubDate>
<dc:creator>林本托</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/IcanFixIt/p/8398370.html</dc:identifier>
</item>
<item>
<title>腾讯工程师带你深入解析 MySQL binlog - 云加社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/8398303.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/8398303.html</guid>
<description>&lt;p&gt;欢迎大家前往&lt;a href=&quot;https://cloud.tencent.com/developer&quot; target=&quot;_blank&quot;&gt;云+社区&lt;/a&gt;，获取更多腾讯海量技术实践干货哦~&lt;/p&gt;
&lt;blockquote readability=&quot;2.5409836065574&quot;&gt;
&lt;p&gt;本文由 &lt;a href=&quot;https://cloud.tencent.com/developer/user/1002332/activities&quot; target=&quot;_blank&quot;&gt;腾讯云数据库内核团队&lt;/a&gt; 发布在云+社区&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.概述&lt;/h3&gt;
&lt;p&gt;binlog是Mysql sever层维护的一种二进制日志，与innodb引擎中的redo/undo log是完全不同的日志；其主要是用来记录对mysql数据更新或潜在发生更新的SQL语句，并以&quot;事务&quot;的形式保存在磁盘中；&lt;/p&gt;
&lt;p&gt;作用主要有：&lt;/p&gt;
&lt;ul class=&quot;ul-level-0&quot;&gt;&lt;li&gt;复制：MySQL Replication在Master端开启binlog，Master把它的二进制日志传递给slaves并回放来达到master-slave数据一致的目的&lt;/li&gt;
&lt;li&gt;数据恢复：通过mysqlbinlog工具恢复数据&lt;/li&gt;
&lt;li&gt;增量备份&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;2.binlog管理&lt;/h3&gt;
&lt;ul class=&quot;ul-level-0&quot;&gt;&lt;li&gt;开启binlogmy.cnf配置中设置：log_bin=&quot;存放binlog路径目录&quot;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;binlog信息查询binlog开启后，可以在配置文件中查看其位置信息，也可以在myslq命令行中查看：
show variables like &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%log_bin%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;+---------------------------------+-------------------------------------+
| Variable_name                   | Value                               |
+---------------------------------+-------------------------------------+
| log_bin                         | ON                                  |
| log_bin_basename                | /&lt;span&gt;var&lt;/span&gt;/lib/mysql/&lt;span&gt;3306&lt;/span&gt;/mysql-bin       |
| log_bin_index                   | /&lt;span&gt;var&lt;/span&gt;/lib/mysql/&lt;span&gt;3306&lt;/span&gt;/mysql-bin.index |
| log_bin_trust_function_creators | OFF                                 |
| log_bin_use_v1_row_events       | OFF                                 |
| sql_log_bin                     | ON                                  |
+---------------------------------+-------------------------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
binlog文件开启binlog后，会在数据目录（默认）生产host-bin.n（具体binlog信息）文件及host-&lt;span&gt;bin.index索引文件（记录binlog文件列表）。当binlog日志写满(binlog大小max_binlog_size，默认1G),或者数据库重启才会生产新文件，但是也可通过手工进行切换让其重新生成新的文件（flush logs）；另外，如果正使用大的事务，由于一个事务不能横跨两个文件，因此也可能在binlog文件未满的情况下刷新文件
mysql&lt;/span&gt;&amp;gt; show binary logs; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;查看binlog文件列表,&lt;/span&gt;
+------------------+-----------+
| Log_name         | File_size |
+------------------+-----------+
| mysql-bin.&lt;span&gt;000001&lt;/span&gt; |       &lt;span&gt;177&lt;/span&gt; |
| mysql-bin.&lt;span&gt;000002&lt;/span&gt; |       &lt;span&gt;177&lt;/span&gt; |
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; |  &lt;span&gt;10343266&lt;/span&gt; |
| mysql-bin.&lt;span&gt;000004&lt;/span&gt; |  &lt;span&gt;10485660&lt;/span&gt; |
| mysql-bin.&lt;span&gt;000005&lt;/span&gt; |     &lt;span&gt;53177&lt;/span&gt; |
| mysql-bin.&lt;span&gt;000006&lt;/span&gt; |      &lt;span&gt;2177&lt;/span&gt; |
| mysql-bin.&lt;span&gt;000007&lt;/span&gt; |      &lt;span&gt;1383&lt;/span&gt; |
+------------------+-----------+
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;查看binlog的状态：show master status可查看当前二进制日志文件的状态信息，显示正在写入的二进制文件，及当前position
 mysql&lt;/span&gt;&amp;gt;&lt;span&gt; show master status;
 &lt;/span&gt;+------------------+----------+--------------+------------------+-------------------+
 | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
 +------------------+----------+--------------+------------------+-------------------+
 | mysql-bin.&lt;span&gt;000007&lt;/span&gt; |      &lt;span&gt;120&lt;/span&gt; |              |                  |                   |
 +------------------+----------+--------------+------------------+-------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class=&quot;ul-level-0&quot;&gt;&lt;li&gt;reset master 清空binlog日志文件&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;3.binlog内容&lt;/h3&gt;
&lt;p&gt;默认情况下binlog日志是二进制格式，无法直接查看。可使用两种方式进行查看：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
    a. mysqlbinlog: /usr/bin/mysqlbinlog  mysql-bin.&lt;span&gt;000007&lt;/span&gt;
        -&lt;span&gt; mysqlbinlog是mysql官方提供的一个binlog查看工具，
        &lt;/span&gt;- 也可使用–read-&lt;span&gt;from&lt;/span&gt;-remote-&lt;span&gt;server从远程服务器读取二进制日志，
        &lt;/span&gt;- 还可使用--start-position --stop-position、--start-time= --stop-&lt;span&gt;time精确解析binlog日志
        
        截取位置1190&lt;/span&gt;-&lt;span&gt;1352&lt;/span&gt;&lt;span&gt; binlog如下：
        &lt;/span&gt;***************************************************************************************&lt;span&gt;
        # at &lt;/span&gt;&lt;span&gt;1190&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;事件的起点&lt;/span&gt;
        #&lt;span&gt;171223&lt;/span&gt; &lt;span&gt;21&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt; server id &lt;span&gt;123&lt;/span&gt;  end_log_pos &lt;span&gt;1190&lt;/span&gt; CRC32 &lt;span&gt;0xf75c94a7&lt;/span&gt;&lt;span&gt;     Intvar
        SET INSERT_ID&lt;/span&gt;=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;;
        #&lt;/span&gt;&lt;span&gt;171223&lt;/span&gt; &lt;span&gt;21&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt; server id &lt;span&gt;123&lt;/span&gt;  end_log_pos &lt;span&gt;1352&lt;/span&gt; CRC32 &lt;span&gt;0xefa42fea&lt;/span&gt;     Query    thread_id=&lt;span&gt;4&lt;/span&gt;    exec_time=&lt;span&gt;0&lt;/span&gt;    error_code=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        SET TIMESTAMP&lt;/span&gt;=&lt;span&gt;1514123786&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;;              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;开始事务的时间起点 (每个at即为一个event)&lt;/span&gt;
        insert into tb_person  &lt;span&gt;set&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name__2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, address=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;beijing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, sex=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;man&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, other=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nothing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;sql语句&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;;
        # at &lt;/span&gt;&lt;span&gt;1352&lt;/span&gt;&lt;span&gt;
        #&lt;/span&gt;&lt;span&gt;171223&lt;/span&gt; &lt;span&gt;21&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt; server id &lt;span&gt;123&lt;/span&gt;  end_log_pos &lt;span&gt;1383&lt;/span&gt; CRC32 &lt;span&gt;0x72c565d3&lt;/span&gt;     Xid = &lt;span&gt;5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行时间，及位置戳，Xid:事件指示提交的XA事务&lt;/span&gt;
        ***************************************************************************************&lt;span&gt;
    
    b.直命令行解析
        SHOW BINLOG EVENTS
            [IN &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;log_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] &lt;span&gt;//&lt;/span&gt;&lt;span&gt;要查询的binlog文件名&lt;/span&gt;
&lt;span&gt;            [FROM pos]  
            [LIMIT [offset,] row_count]  
       
        &lt;/span&gt;&lt;span&gt;1190&lt;/span&gt;-135如下：mysql&amp;gt; show binlog events &lt;span&gt;in&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql-bin.000007&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;1190&lt;/span&gt; limit &lt;span&gt;2&lt;/span&gt;&lt;span&gt;\G
        &lt;/span&gt;*************************** &lt;span&gt;13&lt;/span&gt;. row ***************************&lt;span&gt;
           Log_name: mysql&lt;/span&gt;-bin.&lt;span&gt;000007&lt;/span&gt;&lt;span&gt;
                Pos: &lt;/span&gt;&lt;span&gt;1190&lt;/span&gt;&lt;span&gt;
         Event_type: Query  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;事件类型&lt;/span&gt;
          Server_id: &lt;span&gt;123&lt;/span&gt;&lt;span&gt;
        End_log_pos: &lt;/span&gt;&lt;span&gt;1352&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;结束pose点，下个事件的起点&lt;/span&gt;
               Info: use `test`; insert into tb_person  &lt;span&gt;set&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name__2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, address=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;beijing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, sex=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;man&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, other=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nothing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        *************************** &lt;span&gt;14&lt;/span&gt;. row ***************************&lt;span&gt;
           Log_name: mysql&lt;/span&gt;-bin.&lt;span&gt;000007&lt;/span&gt;&lt;span&gt;
                Pos: &lt;/span&gt;&lt;span&gt;1352&lt;/span&gt;&lt;span&gt;
         Event_type: Xid
          Server_id: &lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;
        End_log_pos: &lt;/span&gt;&lt;span&gt;1383&lt;/span&gt;&lt;span&gt;
               Info: COMMIT &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; xid=51 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;4.binlog格式&lt;/h3&gt;
&lt;p&gt;Mysql binlog日志有ROW,Statement,MiXED三种格式；可通过my.cnf配置文件及 ==set global binlog_format='ROW/STATEMENT/MIXED'== 进行修改，命令行 ==show variables like 'binlog_format'== 命令查看binglog格式；。&lt;/p&gt;
&lt;ul class=&quot;ul-level-0&quot;&gt;&lt;li&gt;Row level: 仅保存记录被修改细节，不记录sql语句上下文相关信息优点：能非常清晰的记录下每行数据的修改细节，不需要记录上下文相关信息，因此不会发生某些特定情况下的procedure、function、及trigger的调用触发无法被正确复制的问题，任何情况都可以被复制，且能加快从库重放日志的效率，保证从库数据的一致性 缺点:由于所有的执行的语句在日志中都将以每行记录的修改细节来记录，因此，可能会产生大量的日志内容，干扰内容也较多；比如一条update语句，如修改多条记录，则binlog中每一条修改都会有记录，这样造成binlog日志量会很大，特别是当执行alter table之类的语句的时候，由于表结构修改，每条记录都发生改变，那么该表每一条记录都会记录到日志中，实际等于重建了表。 tip: - row模式生成的sql编码需要解码，不能用常规的办法去生成，需要加上相应的参数(--base64-output=decode-rows -v)才能显示出sql语句; - 新版本binlog默认为ROW level，且5.6新增了一个参数：binlog_row_image；把binlog_row_image设置为minimal以后，binlog记录的就只是影响的列，大大减少了日志内容&lt;/li&gt;
&lt;li&gt;Statement level: 每一条会修改数据的sql都会记录在binlog中优点：只需要记录执行语句的细节和上下文环境，避免了记录每一行的变化，在一些修改记录较多的情况下相比ROW level能大大减少binlog日志量，节约IO，提高性能；还可以用于实时的还原；同时主从版本可以不一样，从服务器版本可以比主服务器版本高 缺点：为了保证sql语句能在slave上正确执行，必须记录上下文信息，以保证所有语句能在slave得到和在master端执行时候相同的结果；另外，主从复制时，存在部分函数（如sleep）及存储过程在slave上会出现与master结果不一致的情况，而相比Row level记录每一行的变化细节，绝不会发生这种不一致的情况&lt;/li&gt;
&lt;li&gt;Mixedlevel level: 以上两种level的混合使用经过前面的对比，可以发现ROW level和statement level各有优势，如能根据sql语句取舍可能会有更好地性能和效果；Mixed level便是以上两种leve的结合。不过，新版本的MySQL对row level模式也被做了优化，并不是所有的修改都会以row level来记录，像遇到表结构变更的时候就会以statement模式来记录，如果sql语句确实就是update或者delete等修改数据的语句，那么还是会记录所有行的变更；因此，现在一般使用row level即可。&lt;/li&gt;
&lt;li&gt;选取规则如果是采用 INSERT，UPDATE，DELETE 直接操作表的情况，则日志格式根据 binlog_format 的设定而记录 如果是采用 GRANT，REVOKE，SET PASSWORD 等管理语句来做的话，那么无论如何都采用statement模式记录&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;5.复制&lt;/h3&gt;
&lt;p&gt;复制是mysql最重要的功能之一，mysql集群的高可用、负载均衡和读写分离都是基于复制来实现的；从5.6开始复制有两种实现方式，基于binlog和基于GTID（全局事务标示符）；本文接下来将介绍基于binlog的一主一从复制；其复制的基本过程如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    a.Master将数据改变记录到二进制日志(binary log)中
    b.Slave上面的IO进程连接上Master，并请求从指定日志文件的指定位置（或者从最开始的日志）之后的日志内容
    c.Master接收到来自Slave的IO进程的请求后，负责复制的IO进程会根据请求信息读取日志指定位置之后的日志信息，返回给Slave的IO进程。
        返回信息中除了日志所包含的信息之外，还包括本次返回的信息已经到Master端的bin&lt;/span&gt;-log文件的名称以及bin-&lt;span&gt;log的位置
    d.Slave的IO进程接收到信息后，将接收到的日志内容依次添加到Slave端的relay&lt;/span&gt;-log文件的最末端，并将读取到的Master端的 bin-&lt;span&gt;log的
        文件名和位置记录到master&lt;/span&gt;-info文件中，以便在下一次读取的时候能够清楚的告诉Master从某个bin-&lt;span&gt;log的哪个位置开始往后的日志内容
    e.Slave的Sql进程检测到relay&lt;/span&gt;-log中新增加了内容后，会马上解析relay-log的内容成为在Master端真实执行时候的那些可执行的内容，并在自身执行
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来使用实例演示基于binlog的主从复制：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    a.配置master
        主要包括设置复制账号，并授予REPLICATION SLAVE权限，具体信息会存储在于master.info文件中，及开启binlog；
        mysql&lt;/span&gt;&amp;gt; CREATE USER &lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; IDENTIFIED BY &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        mysql&lt;/span&gt;&amp;gt; GRANT REPLICATION SLAVE ON *.* TO &lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        mysql&lt;/span&gt;&amp;gt; show variables like &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;log_bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;+---------------+-------+
            | Variable_name | Value |
            +---------------+-------+
            | log_bin       | ON    |
            +---------------+-------+&lt;span&gt;
        查看master当前binlogmysql状态：mysql&lt;/span&gt;&amp;gt;&lt;span&gt; show master status;
            &lt;/span&gt;+------------------+----------+--------------+------------------+-------------------+
            | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
            +------------------+----------+--------------+------------------+-------------------+
            | mysql-bin.&lt;span&gt;000003&lt;/span&gt; |      &lt;span&gt;120&lt;/span&gt; |              |                  |                   |
            +------------------+----------+--------------+------------------+-------------------+&lt;span&gt;
        建表插入数据：
            CREATE TABLE `tb_person` (
               `id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;&lt;span&gt;) NOT NULL AUTO_INCREMENT,
               `name` varchar(&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;&lt;span&gt;) NOT NULL,                           
               `address` varchar(&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;) NOT NULL DEFAULT &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,    
               `sex` varchar(&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;) NOT NULL DEFAULT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Man&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ,
               `other` varchar(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;) NOT NULL ,
               PRIMARY KEY (`id`)
             ) ENGINE&lt;/span&gt;=InnoDB AUTO_INCREMENT=&lt;span&gt;0&lt;/span&gt; DEFAULT CHARSET=&lt;span&gt;utf8;
             
             insert into tb_person  &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, address=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;beijing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, sex=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;man&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, other=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nothing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
             insert into tb_person  &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, address=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;beijing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, sex=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;man&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, other=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nothing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
             insert into tb_person  &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, address=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;beijing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, sex=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;man&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, other=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nothing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
             insert into tb_person  &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, address=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;beijing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, sex=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;man&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, other=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nothing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    b.配置slave
        Slave的配置类似master，需额外设置relay_log参数，slave没有必要开启二进制日志，如果slave为其它slave的master，须设置bin_log
    c.连接master
        mysql&lt;/span&gt;&amp;gt;&lt;span&gt; CHANGE MASTER TO
           MASTER_HOST&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;10.108.111.14&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
           MASTER_USER&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
           MASTER_PASSWORD&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
           MASTER_LOG_FILE&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql-bin.000003&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
           MASTER_LOG_POS&lt;/span&gt;=&lt;span&gt;120&lt;/span&gt;&lt;span&gt;;
    d.show slave status;
        mysql&lt;/span&gt;&amp;gt;&lt;span&gt; show slave status\G
        &lt;/span&gt;*************************** &lt;span&gt;1&lt;/span&gt;. row ***************************&lt;span&gt;
                       Slave_IO_State:   &lt;/span&gt;----------------------------&lt;span&gt; slave io状态，表示还未启动
                          Master_Host: &lt;/span&gt;&lt;span&gt;10.108&lt;/span&gt;.&lt;span&gt;111.14&lt;/span&gt;&lt;span&gt;  
                          Master_User: test  
                          Master_Port: &lt;/span&gt;&lt;span&gt;20126&lt;/span&gt;&lt;span&gt;  
                        Connect_Retry: &lt;/span&gt;&lt;span&gt;60&lt;/span&gt;   -------------------------&lt;span&gt; master宕机或连接丢失从服务器线程重新尝试连接主服务器之前睡眠时间
                      Master_Log_File: mysql&lt;/span&gt;-bin.&lt;span&gt;000003&lt;/span&gt;  ------------&lt;span&gt; 当前读取master binlog文件
                  Read_Master_Log_Pos: &lt;/span&gt;&lt;span&gt;120&lt;/span&gt;  -------------------------&lt;span&gt; slave读取master binlog文件位置
                       Relay_Log_File: relay&lt;/span&gt;-bin.&lt;span&gt;000001&lt;/span&gt;  ------------&lt;span&gt; 回放binlog
                        Relay_Log_Pos: &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;   --------------------------&lt;span&gt; 回放relay log位置
                Relay_Master_Log_File: mysql&lt;/span&gt;-bin.&lt;span&gt;000003&lt;/span&gt;  ------------&lt;span&gt; 回放log对应maser binlog文件
                     Slave_IO_Running: No
                    Slave_SQL_Running: No
                  Exec_Master_Log_Pos: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  ---------------------------&lt;span&gt; 相对于master从库的sql线程执行到的位置
                Seconds_Behind_Master: NULL
        Slave_IO_State, Slave_IO_Running, 和Slave_SQL_Running为NO说明slave还没有开始复制过程。
    e.启动复制
        start slave
    f.再次观察slave状态
        mysql&lt;/span&gt;&amp;gt;&lt;span&gt; show slave status\G
        &lt;/span&gt;*************************** &lt;span&gt;1&lt;/span&gt;. row ***************************&lt;span&gt;
                       Slave_IO_State: Waiting &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; master to send &lt;span&gt;event&lt;/span&gt; --&lt;span&gt; 等待master新的event
                          Master_Host: &lt;/span&gt;&lt;span&gt;10.108&lt;/span&gt;.&lt;span&gt;111.14&lt;/span&gt;&lt;span&gt;
                          Master_User: test
                          Master_Port: &lt;/span&gt;&lt;span&gt;20126&lt;/span&gt;&lt;span&gt;
                        Connect_Retry: &lt;/span&gt;&lt;span&gt;60&lt;/span&gt;&lt;span&gt;
                      Master_Log_File: mysql&lt;/span&gt;-bin.&lt;span&gt;000003&lt;/span&gt;&lt;span&gt;
                  Read_Master_Log_Pos: &lt;/span&gt;&lt;span&gt;3469&lt;/span&gt;  ---------------------------- &lt;span&gt;3469&lt;/span&gt;&lt;span&gt;  等于Exec_Master_Log_Pos，已完成回放
                       Relay_Log_File: relay&lt;/span&gt;-bin.&lt;span&gt;000002&lt;/span&gt;                    ||&lt;span&gt;
                        Relay_Log_Pos: &lt;/span&gt;&lt;span&gt;1423&lt;/span&gt;                                ||&lt;span&gt;
                Relay_Master_Log_File: mysql&lt;/span&gt;-bin.&lt;span&gt;000003&lt;/span&gt;                    ||&lt;span&gt;
                     Slave_IO_Running: Yes                                 &lt;/span&gt;||&lt;span&gt;
                    Slave_SQL_Running: Yes                                 &lt;/span&gt;||&lt;span&gt;
                  Exec_Master_Log_Pos: &lt;/span&gt;&lt;span&gt;3469&lt;/span&gt;  -----------------------------&lt;span&gt;3469&lt;/span&gt;&lt;span&gt;  等于slave读取master binlog位置，已完成回放
                Seconds_Behind_Master: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        可看到slave的I&lt;/span&gt;/O和SQL线程都已经开始运行，而且Seconds_Behind_Master=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;。Relay_Log_Pos增加，意味着一些事件被获取并执行了。
        
        最后看下如何正确判断SLAVE的延迟情况，判定slave是否追上master的binlog：
        &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、首先看 Relay_Master_Log_File 和 Maser_Log_File 是否有差异；
        &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;、如果Relay_Master_Log_File 和 Master_Log_File 是一样的话，再来看Exec_Master_Log_Pos 和 Read_Master_Log_Pos 的差异，对比SQL线程比IO线程慢了多少个binlog事件；
        &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;、如果Relay_Master_Log_File 和 Master_Log_File 不一样，那说明延迟可能较大，需要从MASTER上取得binlog status，判断当前的binlog和MASTER上的差距；
        &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;、如果以上都不能发现问题，可使用pt_heartbeat工具来监控主备复制的延迟。
        
    g.查询slave数据，主从一致
        mysql&lt;/span&gt;&amp;gt; &lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt;&lt;span&gt; tb_person;
            &lt;/span&gt;+----+-------+---------+-----+---------+
            | id | name  | address | sex | other   |
            +----+-------+---------+-----+---------+
            |  &lt;span&gt;5&lt;/span&gt; | name4 | beijing | man | nothing |
            |  &lt;span&gt;6&lt;/span&gt; | name2 | beijing | man | nothing |
            |  &lt;span&gt;7&lt;/span&gt; | name1 | beijing | man | nothing |
            |  &lt;span&gt;8&lt;/span&gt; | name3 | beijing | man | nothing |
            +----+-------+---------+-----+---------+&lt;span&gt;
关于mysql复制的内容还有很多，比如不同的同步方式、复制格式情况下有什么区别，有什么特点，应该在什么情况下使用....这里不再一一介绍。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;6.恢复&lt;/h3&gt;
&lt;pre class=&quot;prism-token token language-javascript&quot;&gt;
    恢复是binlog的两大主要作用之一，接下来通过实例演示如何利用binlog恢复数据：
    
    a&lt;span class=&quot;token punctuation&quot;&gt;.首先，看下当前binlog位置
        mysql&lt;span class=&quot;token operator&quot;&gt;&amp;gt; show master status&lt;span class=&quot;token punctuation&quot;&gt;;
        &lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;-&lt;span class=&quot;token operator&quot;&gt;+
        &lt;span class=&quot;token operator&quot;&gt;| File             &lt;span class=&quot;token operator&quot;&gt;| Position &lt;span class=&quot;token operator&quot;&gt;| Binlog_Do_DB &lt;span class=&quot;token operator&quot;&gt;| Binlog_Ignore_DB &lt;span class=&quot;token operator&quot;&gt;| Executed_Gtid_Set &lt;span class=&quot;token operator&quot;&gt;|
        &lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;-&lt;span class=&quot;token operator&quot;&gt;+
        &lt;span class=&quot;token operator&quot;&gt;| mysql&lt;span class=&quot;token operator&quot;&gt;-bin&lt;span class=&quot;token number&quot;&gt;.000008 &lt;span class=&quot;token operator&quot;&gt;|     &lt;span class=&quot;token number&quot;&gt;1847 &lt;span class=&quot;token operator&quot;&gt;|              &lt;span class=&quot;token operator&quot;&gt;|                  &lt;span class=&quot;token operator&quot;&gt;|                   &lt;span class=&quot;token operator&quot;&gt;|
        &lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;-&lt;span class=&quot;token operator&quot;&gt;+
    b&lt;span class=&quot;token punctuation&quot;&gt;.向表tb_person中插入两条记录：
        insert into tb_person  &lt;span class=&quot;token keyword&quot;&gt;set name&lt;span class=&quot;token operator&quot;&gt;=&lt;span class=&quot;token string&quot;&gt;&quot;person_1&quot;&lt;span class=&quot;token punctuation&quot;&gt;, address&lt;span class=&quot;token operator&quot;&gt;=&lt;span class=&quot;token string&quot;&gt;&quot;beijing&quot;&lt;span class=&quot;token punctuation&quot;&gt;, sex&lt;span class=&quot;token operator&quot;&gt;=&lt;span class=&quot;token string&quot;&gt;&quot;man&quot;&lt;span class=&quot;token punctuation&quot;&gt;, other&lt;span class=&quot;token operator&quot;&gt;=&lt;span class=&quot;token string&quot;&gt;&quot;test-1&quot;&lt;span class=&quot;token punctuation&quot;&gt;;
        insert into tb_person  &lt;span class=&quot;token keyword&quot;&gt;set name&lt;span class=&quot;token operator&quot;&gt;=&lt;span class=&quot;token string&quot;&gt;&quot;person_2&quot;&lt;span class=&quot;token punctuation&quot;&gt;, address&lt;span class=&quot;token operator&quot;&gt;=&lt;span class=&quot;token string&quot;&gt;&quot;beijing&quot;&lt;span class=&quot;token punctuation&quot;&gt;, sex&lt;span class=&quot;token operator&quot;&gt;=&lt;span class=&quot;token string&quot;&gt;&quot;man&quot;&lt;span class=&quot;token punctuation&quot;&gt;, other&lt;span class=&quot;token operator&quot;&gt;=&lt;span class=&quot;token string&quot;&gt;&quot;test-2&quot;&lt;span class=&quot;token punctuation&quot;&gt;;
    c&lt;span class=&quot;token punctuation&quot;&gt;.记录当前binlog位置：
        mysql&lt;span class=&quot;token operator&quot;&gt;&amp;gt; show master status&lt;span class=&quot;token punctuation&quot;&gt;;
        &lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;-&lt;span class=&quot;token operator&quot;&gt;+
        &lt;span class=&quot;token operator&quot;&gt;| File             &lt;span class=&quot;token operator&quot;&gt;| Position &lt;span class=&quot;token operator&quot;&gt;| Binlog_Do_DB &lt;span class=&quot;token operator&quot;&gt;| Binlog_Ignore_DB &lt;span class=&quot;token operator&quot;&gt;| Executed_Gtid_Set &lt;span class=&quot;token operator&quot;&gt;|
        &lt;span class=&quot;token operator&quot;&gt;+&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span class=&quot;token operator&quot;&gt;--&lt;span/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;</description>
<pubDate>Thu, 01 Feb 2018 03:59:00 +0000</pubDate>
<dc:creator>云加社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/8398303.html</dc:identifier>
</item>
<item>
<title>JavaScript中的数据类型 - 就只是小茗</title>
<link>http://www.cnblogs.com/tinyTea/p/8378333.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tinyTea/p/8378333.html</guid>
<description>&lt;p&gt;在ECMAScript中，变量是松散类型的。所谓松散类型就是指变量可以用来保存任何类型的数据。 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 下面的操作是完全合法的&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; message = &quot;helloWorld&quot;&lt;span&gt;;
message &lt;/span&gt;= 100;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是在实际开发中，我并&lt;span&gt;不推荐&lt;/span&gt;大家这样使用变量。这种操作方法是会让代码变得很不安全。为了规避这样的问题，我在变量命名的时候对变量类型做了标明。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; strMessage = &quot;helloWorld&quot;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; String类型&lt;/span&gt;

&lt;span&gt;var&lt;/span&gt; nMessage = 100; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Number类型&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 如果有必要数字类型我也会进行细分&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; iMessage = 1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int类型&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; fMessage = 0.5; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; float类型&lt;/span&gt;

&lt;span&gt;var&lt;/span&gt; objMessage = &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Object类型&lt;/span&gt;

&lt;span&gt;var&lt;/span&gt; bMessage = &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Boolean类型&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;ECMAScript中有5种简单数据类型：Undefined、Null、Boolean、Number、String，还有1种复杂数据类型Object。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、Undefined类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 声明后未赋值的变量，或者未声明的变量，typeof的值都是Undefined。区别在于，未声明的变量在调用时会报错。&lt;/p&gt;
&lt;p&gt;有鉴于此，&lt;span&gt;变量声明之初初始化&lt;/span&gt;会十分有用。这样我们通过typeof测试变量类型，若变量为Undefined的话，则说明该变量是未赋值，而不是尚未初始化了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、Null类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;null值标识的是一个空指针对象，所以他的typeof值为“Object”。&lt;span&gt;所以在初始化Object类型变量的时候，使用null作为初始化的值就可以了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;undefined派生自null。所以 &lt;span class=&quot;cnblogs_code&quot;&gt;alert(&lt;span&gt;null&lt;/span&gt; == undefined); &lt;span&gt;//&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、Boolean类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Boolean类型的true或者false，并不是单纯就指1或者0。可以说不同的数据类型，都可以转换成true或者false。&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;数据类型&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;strong&gt;转换为true的值&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;strong&gt;转换为false的值&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;true&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;false&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;String&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;任何非空字符串&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&quot;&quot;（空字符串）&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;Number&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;任何非零数字值（包括无穷大）&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;0和NaN&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Object&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;任何对象&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;null&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;Undefined&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;n/a（意思是“不适用”）&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;undefine&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;





&lt;p&gt;&lt;strong&gt;4、Number类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Number类型数值字面量格式有三种：十进制（n）、八进制（0 + n）、十六进制（0x + n）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; iNum = 55; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 十进制&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; octalNum = 070; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 八进制&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; hexNum = 0xA; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 十六进制&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是，八进制字面量在严格模式下是无效的，谨慎使用。&lt;/p&gt;
&lt;p&gt;（1）浮点数&lt;/p&gt;
&lt;p&gt;由于保存浮点数的内存空间是保存整数的两倍，所以凡是可以表示为整数的浮点数都会自动转化为整数。例如 &lt;span class=&quot;cnblogs_code&quot;&gt;1.、10.0&lt;/span&gt; 等。&lt;/p&gt;
&lt;p&gt;对于极大或者极小的数值可以表示为浮点数，即科学计数法，例如 &lt;span class=&quot;cnblogs_code&quot;&gt;3.125e7 == 3.125*10&lt;sup&gt;7&lt;/sup&gt;&lt;/span&gt; 、 &lt;span class=&quot;cnblogs_code&quot;&gt;3e-7 == 3*10&lt;sup&gt;-7&lt;/sup&gt;&lt;/span&gt; 等。&lt;/p&gt;
&lt;p&gt;需要注意的是，浮点数的最高进度是17位小数，在进行计算的时候其精确度远不如整数。例如虽然 &lt;span class=&quot;cnblogs_code&quot;&gt;0.15 + 0.15 = 0.3&lt;/span&gt; ，但是 &lt;span class=&quot;cnblogs_code&quot;&gt;0.1 + 0.2 = 0.30000000000000004&lt;/span&gt; ，由此造成 &lt;span class=&quot;cnblogs_code&quot;&gt;0.1 + 0.2 == 0.3; &lt;span&gt;//&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;/span&gt; 。所以不要用浮点数做比较。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;zh-cn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;testDocument&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        html,body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        html,body,p&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        .container&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;padding-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; calc((100vw - 600px) * .5)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #006699&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        .contentContainer&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 600px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;contentContainer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;a&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;numA&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;0.05&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.05&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;0.15&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.15&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;0.1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            +
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;b&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;numB&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;0.25&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.25&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;0.15&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.15&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;0.2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            = 
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;numC&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;?&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;a + b == c ? &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;isEqual&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;numA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).addEventListener(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;change&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, plusAB, &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;numB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).addEventListener(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;change&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, plusAB, &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; plusAB() {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; objA &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;numA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; fA &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(objA.options[objA.selectedIndex].value);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; objB &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;numB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; fB &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(objB.options[objB.selectedIndex].value);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; fC &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; fA &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; fB;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;numC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; fC;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;            document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;isEqual&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (fC &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;0.3&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1003296/201801/1003296-20180130161345453-1835654935.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1003296/201801/1003296-20180130161415500-533108250.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）数值范围&lt;/p&gt;
&lt;p&gt;查询浏览器数值上限使用 &lt;span class=&quot;cnblogs_code&quot;&gt;Number.MAX_VALUE&lt;/span&gt; ，下限使用 &lt;span class=&quot;cnblogs_code&quot;&gt;Number.MIN_VALUE&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;基本上所有浏览器的上限均为 &lt;span class=&quot;cnblogs_code&quot;&gt;1.7976931348623157e+308&lt;/span&gt; ，下限均为 &lt;span class=&quot;cnblogs_code&quot;&gt;5e-324&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;超出数值范围，数值将被自动转换为特殊的Infinity（无穷）值。要想确定数值是否有穷，即是否位于数值范围内，可以使用 &lt;span class=&quot;cnblogs_code&quot;&gt;isFinite()&lt;/span&gt; 函数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; nResult = Number.MAX_VALUE +&lt;span&gt; Number.MAX_VALUE;
alert(isFinite(result)); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; false超出数值范围&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）NaN（Not a Number）&lt;/p&gt;
&lt;p&gt;首先要明确这个数值的应用。它是用于表示一个本来要返回数值的操作数未返回数值的情况。例如，任何数值除以0都会返回NaN。&lt;/p&gt;
&lt;p&gt;NaN本身有两个特点：①任何涉及NaN的操作都会返回NaN；②NaN与任何值都不相等，包括其本身NaN，即 &lt;span class=&quot;cnblogs_code&quot;&gt;NaN == NaN; &lt;span&gt;//&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;ECMAScript定义了 &lt;span class=&quot;cnblogs_code&quot;&gt;isNaN()&lt;/span&gt; 函数，用来测定参数是否为NaN。这个函数会将参数自动转为数值，然后再进行测试。对于对象，该函数会自动调用对象的 &lt;span class=&quot;cnblogs_code&quot;&gt;valueof()&lt;/span&gt; 方法进行测试，如果不能，则继续调用对象的 &lt;span class=&quot;cnblogs_code&quot;&gt;toString()&lt;/span&gt; ，进行测试。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;zh-cn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;testDocument&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        html,body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        html,body,p&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        .container&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;padding-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; calc((100vw - 600px) * .5)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #006699&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        .contentContainer&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 600px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;contentContainer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;NaN == NaN?&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;nan&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;10 == NaN?&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; （10是一个数值）&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot;10&quot; == NaN?&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;numStr&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; （可以被转换成数值10）&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot;blue&quot; == NaN?&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;str&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; （不能转换为数值）&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true == NaN?&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;boolean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; （可以被转换成数值1）&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;obj(&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;objValue&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{&quot;num1&quot;:1,&quot;num2&quot;:2}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;) == NaN?&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;obj&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;changeObjFun();&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;改变object的toString方法&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; numList &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; isNaN(NaN);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; isNaN(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;numStr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; isNaN(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;str&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; isNaN(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; isNaN(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; isNaN(numList);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; changeObjFun(){
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            numList.toString &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            }; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重写对象的toString方法，使其返回一个数值&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;objValue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;            document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; isNaN(numList); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 由于对象的toString方法返回了一个数值，所以这里变成了false&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1003296/201801/1003296-20180131143054859-1820113689.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1003296/201801/1003296-20180131143108015-1719601749.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）数值转换&lt;/p&gt;
&lt;p&gt;有三个函数可以把非数值转换为数值： &lt;span class=&quot;cnblogs_code&quot;&gt;Number()&lt;/span&gt; 、 &lt;span class=&quot;cnblogs_code&quot;&gt;parseInt()&lt;/span&gt; 、 &lt;span class=&quot;cnblogs_code&quot;&gt;parseFloat()&lt;/span&gt; 。第一个可以用于任何数据类型，而后两个专用于字符串的转换。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; parseInt()函数转换规则 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;zh-cn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;testDocument&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        html,body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        html,body,p&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        .container&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;padding-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; calc((100vw - 600px) * .5)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #006699&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        .contentContainer&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 600px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;contentContainer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot;Hello World!&quot; == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;str1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot;&quot; == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;str2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot;hello123&quot; == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;strNum&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;null == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rNull&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;undefined == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rUndefined&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;boolean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;10 == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;10.5 == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0xf == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;010 == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot;000010&quot; == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;numStr&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot; 10&quot; == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;nullNum&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot; 123blue&quot; == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;nullNumStr&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;obj == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;obj&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; numList &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        numList.toString &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;str1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 非空字符串返回NaN&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;str2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 空字符串返回NaN&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;strNum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第一个非空字符非数字返回NaN&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rNull&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; null返回NaN&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rUndefined&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(undefined); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined返回NaN&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 布尔值返回NaN&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 由此可见parseInt()只处理第一个非空字符为数字的值&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数值返回该数值&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(&lt;/span&gt;&lt;span&gt;10.5&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 浮点数返回去掉小数的整数&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(&lt;/span&gt;&lt;span&gt;0xf&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 十六进制返回十进制&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(&lt;/span&gt;&lt;span&gt;010&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 八进制返回十进制，严格模式下八进制无效，会解析为10&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;numStr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;000010&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 去掉多余的0返回数值&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nullNum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 去掉前面的空格返回数值&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nullNumStr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 123blue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第一个非空字符为数字返回数值&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(numList); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用对象的valueOf()或者toString()方法&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1003296/201801/1003296-20180131162720296-114784981.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; parseFloat()函数转换规则 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;zh-cn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;testDocument&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        html,body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        html,body,p&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        .container&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;padding-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; calc((100vw - 600px) * .5)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #006699&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        .contentContainer&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 600px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;contentContainer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot;Hello World!&quot; == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;str1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot;&quot; == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;str2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot;hello123&quot; == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;strNum&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;null == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rNull&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;undefined == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rUndefined&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;boolean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;10 == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;10.5 == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0xf == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;010 == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot;000010&quot; == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;numStr1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot;10.5.23&quot; == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;numStr2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot; 10&quot; == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;nullNum&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot; 123.23blue&quot; == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;nullNumStr&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;obj == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;obj&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; numList &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        numList.toString &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;str1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 非空字符串返回NaN&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;str2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 空字符串返回NaN&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;strNum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第一个非空字符非数字返回NaN&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rNull&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; null返回NaN&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rUndefined&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(undefined); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined返回NaN&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 布尔值返回NaN&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 由此可见parseFloat()只处理第一个非空字符为数字的值&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数值返回该数值&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(&lt;/span&gt;&lt;span&gt;10.5&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 浮点数返回去掉小数的整数&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(&lt;/span&gt;&lt;span&gt;0xf&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 十六进制返回十进制&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(&lt;/span&gt;&lt;span&gt;010&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 八进制返回十进制，严格模式下八进制无效，会解析为10&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;numStr1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;000010&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 去掉多余的0返回数值&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;numStr2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.5.23&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 多余的小数点后面的值都会去掉&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nullNum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 去掉前面的空格返回数值&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nullNumStr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 123.23blue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第一个非空字符为数字返回数值&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseFloat(numList); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用对象的valueOf()或者toString()方法&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1003296/201801/1003296-20180131163602109-1786268870.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注： &lt;span class=&quot;cnblogs_code&quot;&gt;parseInt()&lt;/span&gt; 和 &lt;span class=&quot;cnblogs_code&quot;&gt;parseFloat()&lt;/span&gt; 都是由两个参数的，第一个参数是需要转换的值，第二个参数是转换使用的基数（即多少进制），为了防止转换出现问题，使用多进制转换的时候可以制定基数，避免不必要的错误。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 5、String类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在ECMAScript中字符串用&lt;span&gt;双引号（&quot;）&lt;/span&gt;或者&lt;span&gt;单引号（'）&lt;/span&gt;都是可以的，&lt;strong&gt;但是为了做一个全方面发展的好程序员，还是区分对待比较好&lt;/strong&gt;。就目前我学过的语言来说，双引号（“）多用于合法的字符串符号。&lt;/p&gt;
&lt;p&gt;（1）字符字面量&lt;/p&gt;
&lt;p&gt;这个就是String类型所说的转义字符的，对照表网上一搜一大堆，我就不特别列举了。需要注意的是一个转义字符就表示1个字符。&lt;/p&gt;
&lt;p&gt;（2）字符串的特点&lt;/p&gt;
&lt;p&gt;字符串是不可变的，也就是说一旦创建不可改变。这就使得修改字符串成为了一个&lt;span&gt;先破后立&lt;/span&gt;的过程。&lt;/p&gt;
&lt;p&gt;（3）转换为字符串&lt;/p&gt;
&lt;p&gt;数值转换字符串都会转换成十进制，然后输出字符串。&lt;/p&gt;
&lt;p&gt;转换字符串除了以下两个传统方法以外，使用 &lt;span class=&quot;cnblogs_code&quot;&gt;value + &quot;&quot;&lt;/span&gt; 也能达到转换字符串的效果。&lt;/p&gt;
&lt;p&gt;　① &lt;span class=&quot;cnblogs_code&quot;&gt;toString()&lt;/span&gt; 方法&lt;/p&gt;
&lt;p&gt;null和undefined没有 &lt;span class=&quot;cnblogs_code&quot;&gt;toString()&lt;/span&gt; 方法，如果使用会报错。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; toString()函数转换规则 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;zh-cn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;testDocument&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        html,body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        html,body,p&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        .container&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;padding-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; calc((100vw - 600px) * .5)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #006699&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        .contentContainer&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 600px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;contentContainer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;null == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rNull&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;undefined == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rUndefined&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;boolean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;255 == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;255 == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num1_2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; （二进制）&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;255 == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num1_8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; （八进制）&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;255 == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num1_16&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; （十六进制）&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;10.5 == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0xf == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;010 == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;obj == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;obj&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; n1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;255&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; n2 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0xf&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; n3 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;010&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; n4 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;10.5&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; rNull &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; rUndefined &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; undefined;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; rBoolean &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; numList &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; document.getElementById(&quot;rNull&quot;).innerHTML = rNull.toString(); // null转字符串，没有toString()方法，所以不能用toString转换&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; document.getElementById(&quot;rUndefined&quot;).innerHTML = rUndefined.toString(); // undefined转字符串，没有toString()方法，所以不能用toString转换&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; rBoolean.toString(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Boolean转字符串&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; n1.toString(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 整数转字符串&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; toString()方法的参数是输出基数，即进制&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num1_2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; n1.toString(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 整数转字符串，二进制&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num1_8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; n1.toString(&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 整数转字符串，八进制&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num1_16&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; n1.toString(&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 整数转字符串，十六进制&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; n4.toString(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 浮点数转字符串&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; n2.toString(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 十六进制整数转字符串，会先转换成十进制&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; n3.toString(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 八进制整数转字符串，会先转换成十进制&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; numList.toString(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对象转字符串&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　显示效果：&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1003296/201802/1003296-20180201114746625-1091154899.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　② &lt;span class=&quot;cnblogs_code&quot;&gt;String()&lt;/span&gt; 方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; String()函数转换规则 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;zh-cn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;testDocument&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        html,body&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        html,body,p&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;box-sizing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; border-box&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        .container&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;padding-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; calc((100vw - 600px) * .5)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #006699&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        .contentContainer&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 600px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;contentContainer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;null == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rNull&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;undefined == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rUndefined&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;boolean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;255 == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;10.5 == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0xf == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;010 == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;num3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;obj == &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;obj&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; n1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;255&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; n2 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0xf&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; n3 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;010&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; n4 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;10.5&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; rNull &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; rUndefined &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; undefined;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; rBoolean &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; numList &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rNull&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; String(rNull); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; null转字符串&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rUndefined&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; String(rUndefined); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined转字符串&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; String(rBoolean); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Boolean转字符串&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; String(n1); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 整数转字符串&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; String(n4); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 浮点数转字符串&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; String(n2); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 十六进制整数转字符串，会先转换成十进制&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; String(n3); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 八进制整数转字符串，会先转换成十进制&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;obj&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; String(numList); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对象转字符串&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　显示效果：&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1003296/201802/1003296-20180201115425046-1172396057.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、Object类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对象其实就是一组数据和功能的集合。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; obj = &lt;span&gt;new&lt;/span&gt; Object(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可以创建一个对象&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Object的每个实例都具有一下属性和方法：&lt;/p&gt;
&lt;p&gt;① &lt;span class=&quot;cnblogs_code&quot;&gt;constructor&lt;/span&gt; ：构造函数；&lt;/p&gt;
&lt;p&gt;② &lt;span class=&quot;cnblogs_code&quot;&gt;hasOwnProperty&lt;/span&gt; ：用以检查给定属性是否存在于当前对象实例中；&lt;/p&gt;
&lt;p&gt;③ &lt;span class=&quot;cnblogs_code&quot;&gt;isPrototypeOf&lt;/span&gt; ：用以检查传入的对象是否是传入对象的原型；&lt;/p&gt;
&lt;p&gt;④ &lt;span class=&quot;cnblogs_code&quot;&gt;propertyIsEnumerable&lt;/span&gt; ：用以检查给定的属性是否能够用for-in语句来枚举；&lt;/p&gt;
&lt;p&gt;⑤ &lt;span class=&quot;cnblogs_code&quot;&gt;toLocaleString()&lt;/span&gt; ：返回对象的字符串表示，该字符串与执行环境的地区相对应；&lt;/p&gt;
&lt;p&gt;⑥ &lt;span class=&quot;cnblogs_code&quot;&gt;toString()&lt;/span&gt; ：返回对象的字符串表示；&lt;/p&gt;
&lt;p&gt;⑦ &lt;span class=&quot;cnblogs_code&quot;&gt;valueOf()&lt;/span&gt; ：返回对象的字符串、数值或布尔值表示。通常与 &lt;span class=&quot;cnblogs_code&quot;&gt;toString()&lt;/span&gt; 方法的返回值一致。&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;本文内容包含学习过程中的认识和实际应用时的经验，会不断补充更新。最新更新时间（2018-02-01 11:58:36）。&lt;/p&gt;
</description>
<pubDate>Thu, 01 Feb 2018 03:59:00 +0000</pubDate>
<dc:creator>就只是小茗</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tinyTea/p/8378333.html</dc:identifier>
</item>
</channel>
</rss>