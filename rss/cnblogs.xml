<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>揭开webRTC媒体服务器的神秘面纱——WebRTC媒体服务器&amp;开源项目介绍 - HarlanC</title>
<link>http://www.cnblogs.com/harlanc/p/9261484.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/harlanc/p/9261484.html</guid>
<description>&lt;p&gt;WebRTC生态系统是非常庞大的。当我第一次尝试理解WebRTC时，网络资源之多让人难以置信。本文针对webRTC媒体服务器和相关的开源项目（如kurento，janus，jitsi.org等）做一些介绍。并且将尝试降低理解WebRTC的业务价值所需要的技术门槛。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http:/par7be692.bkt.clouddn.com/7.2.2018_11:26:48.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;何为webrtc服务器&quot;&gt;何为WebRTC服务器？&lt;/h2&gt;
&lt;p&gt;自从WebRTC诞生之初以来，该技术的主要卖点之一是它可以进行点对点（browser-to-browser）通信，而几乎不需要服务器的干预，服务器只用来发送信令。WebRTC媒体服务器的概念同p2p相比是相反的。&lt;/p&gt;
&lt;p&gt;下面，我将试图说明为什么媒体服务器是有用的，他们通常提供什么类型的功能以及相应的可供用户使用的开源方案有哪些。&lt;/p&gt;
&lt;h2 id=&quot;视频通话中的多点用户&quot;&gt;视频通话中的多点用户&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http:/par7be692.bkt.clouddn.com/7.2.2018_11:38:37.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;尽管确实可以使用p2p通信（图1网格体系结构）来让多点用户保持视频通话，但随着用户数量的增加，此方案变的不再实际，因为需要一个用户将他/她的视频/音频流传输给其余每个用户，同时接收其余每个用户的视频/音频流。&lt;/p&gt;
&lt;p&gt;事实上，即使在最优的网络条件下，正常的mesh视频通话也不能超过5个用户。这是媒体服务器派上用场的地方，因为它可以减少客户端需要发送的流的数量，同时也能减少客户端需要接收的流的数量，其效果取决于媒体服务器性能。&lt;/p&gt;
&lt;p&gt;当一个媒体服务器充当这种中间人的角色时，它通常被称为SFU（单一转发单元 Single Forwarding Unit），这也就意味着它的主要目的是在客户端之间转发媒体流。&lt;/p&gt;
&lt;p&gt;还有一个MCU（多点会议单元 Multiponit Conferencing Unit）的概念，这样的服务器不仅仅能够转发媒体流，也能对通过它的媒体流进行处理（例如，将所有视频或音频流混合为一个）。&lt;/p&gt;
&lt;h2 id=&quot;视频录制&quot;&gt;视频录制&lt;/h2&gt;
&lt;p&gt;让所有视频流通过媒体服务器（群集）的主要好处之一是可以对媒体流进行出于任何目的的录制和存储，这在mesh架构上很难做到。&lt;/p&gt;
&lt;h2 id=&quot;同其它通信技术集成&quot;&gt;同其它通信技术集成&lt;/h2&gt;
&lt;p&gt;使用媒体服务器的另外一个优点是能够同web系统之外的其它系统进行通信，例如通过SIP中继的PSTN或者通过RTMP进行流传输的服务（像Fackbook直播或者Youtube直播流）。&lt;/p&gt;
&lt;p&gt;你可以看到之前博客的一个&lt;a href=&quot;https://webrtc.ventures/2017/02/kurento-asterisk-powerful-couple/&quot;&gt;实例&lt;/a&gt;，在此实例中Kurento媒体服务器用来在浏览器和SIP电话之间进行视频通话。&lt;/p&gt;
&lt;h2 id=&quot;媒体流的处理&quot;&gt;媒体流的处理&lt;/h2&gt;
&lt;p&gt;一些媒体服务器允许对视频和音频流做底层上的处理，比如能够在视频上运行计算机视觉模型或者将音频流发送到语音识别引引擎，例如google Speech。这些功能将webrtc提升到另外一个层次。依我看来，它提供了更加丰富和创新性的实时交互，为一个普通的通信平台增加了很多价值。&lt;/p&gt;
&lt;p&gt;我们之前讨论过此问题，Kurento媒体服务器将人脸识别模型应用到了视频流上，在人的头上戴了一顶帽子。&lt;/p&gt;
&lt;h2 id=&quot;有哪些oss开源媒体服务器可供选用&quot;&gt;有哪些OSS开源媒体服务器可供选用？？&lt;/h2&gt;
&lt;p&gt;如前所述，WebRTC生态系统非常庞大，市面上由很多开源项目。&lt;/p&gt;
&lt;p&gt;下面是最成熟和受欢迎的：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jitsi.org/jitsi-meet/&quot;&gt;Jitsi Platform&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http:/par7be692.bkt.clouddn.com/7.4.2018_7:02:31.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Jitsi不仅仅是一个WebRTC媒体服务器，而是围绕者webrtc构建了一整个平台。 Jitsi系列产品包括Jitsi Videobridge（媒体中继，SFU），Jitsi Meet（会议web客户端），Jicofo（Jitsi Conference Focus），Jigasi（Jitsi Gateway to SIP）和Jitsi SIP Phone。 Jitsi平台最吸引人的特性是它包含了在数小时内启动和运行的通信平台的所有功能。它还使用Jingle（XMPP）和功能齐全的Web interface实现了自己的信令。遗憾的是，它没有一个稳固易用的媒体录制功能实现。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.kurento.org&quot;&gt;Kurento Media Server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http:/par7be692.bkt.clouddn.com/7.4.2018_7:10:37.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是最通用的解决方案之一。它也不仅仅是一个媒体服务器，而是构建了一个工具包。&lt;br/&gt;Kurento的主要优点是通过引入媒体工作流(meidia workflow)的概念实现了多功能性，它允许在代码中定义媒体流以何种方式传输以及传到到哪里。这就允许WebRTC开发者将非常有趣的功能进行集成，例如计算机视觉（例如识别QR码，面部检测），实时媒体修正和与RTP（VoIP）服务的互操作。 Kurento还可以在单个实例中配置成SFU或MCU（或者同时使用）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://janus.conf.meetecho.com&quot;&gt;Janus WebRTC Gateway&lt;/a&gt;&lt;br/&gt;&lt;img src=&quot;http:/par7be692.bkt.clouddn.com/7.4.2018_7:20:32.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;虽然它的描述中没有提到“meidia server”，但Janus可以很容易地将SFU设置为SFU。其最显着的特征之一是其插件架构，可以增强服务的核心功能。有一个&lt;a href=&quot;https://janus.conf.meetecho.com/demos.html&quot;&gt;演示&lt;/a&gt;页面，显示了一些有趣的Janus用例，例如SIP Gateway，屏幕共享等。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mediasoup.org&quot;&gt;mediasoup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http:/par7be692.bkt.clouddn.com/7.4.2018_7:24:38.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一个相对较新且有趣的媒体服务器，它与其他媒体服务器的不同之处在于它被设计为一个Library（用于Node），允许它集成到更大的应用程序中。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://webrtc.ventures/2017/11/a-guide-to-webrtc-media-servers-open-source-options/&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 03 Jul 2018 23:29:00 +0000</pubDate>
<dc:creator>HarlanC</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/harlanc/p/9261484.html</dc:identifier>
</item>
<item>
<title>EntityFramework Core进行读写分离最佳实践方式，了解一下（二）？ - Jeffcky</title>
<link>http://www.cnblogs.com/CreateMyself/p/9261435.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CreateMyself/p/9261435.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;写过上一篇关于EF Core中读写分离最佳实践方式后，虽然在一定程度上改善了问题，但是在评论中有的指出更换到从数据库，那么接下来要进行插入此时又要切换到主数据库，同时有的指出是否可以进行底层无感知操作，这确实是个问题，本文继续进行引路，进一步改善评论中问题的指出，至于实现更复杂的逻辑可自行实现，感谢你们非常棒的评论，使得本文由此而生。&lt;/p&gt;
&lt;h2&gt;EF Core读写分离进一步完善&lt;/h2&gt;
&lt;p&gt;如评论前辈们指出在EF 6.x中我们知道有IDbCommandInterceptor接口，我们可对执行的SQL语句进行拦截，从而可自定义实现我们想要的需求，虽然在EF Core中却没有拦截器特性的实现，但是针对此特性的实现DiagnosticSource记录跟踪类来实现等效于拦截器的实现，当前DiagnosticSource使用文档尚未完善，估计还得等待一段时间，接下来我们来看看如何实现。在DiagnosticSource包中有DiagnosticListener类，我们通过此类来跟踪记录，如果执行的EF Core包，那么我们将利用DiagnosticListener进行订阅，订阅到之后我们拿到跟踪命令，从而实现无感知更换数据库，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DbCommandInterceptor : IObserver&amp;lt;KeyValuePair&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; masterConnectionString = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data source=WANGPENG;User Id=sa;Pwd=sa123;initial catalog=Demo1;integrated security=True;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; slaveConnectionString = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data source=WANGPENG;User Id=sa;Pwd=sa123;initial catalog=Demo2;integrated security=True;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnCompleted()
        {
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnError(Exception error)
        {
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; OnNext(KeyValuePair&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; value)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (value.Key ==&lt;span&gt; RelationalEventId.CommandExecuting.Name)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; command =&lt;span&gt; ((CommandEventData)value.Value).Command;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; executeMethod =&lt;span&gt; ((CommandEventData)value.Value).ExecuteMethod;

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (executeMethod ==&lt;span&gt; DbCommandMethod.ExecuteNonQuery)
                {
                    ResetConnection(command, masterConnectionString);
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (executeMethod ==&lt;span&gt; DbCommandMethod.ExecuteScalar)
                {
                    ResetConnection(command, slaveConnectionString);
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (executeMethod ==&lt;span&gt; DbCommandMethod.ExecuteReader)
                {
                    ResetConnection(command, slaveConnectionString);
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; ResetConnection(DbCommand command, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; connectionString)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (command.Connection.State ==&lt;span&gt; ConnectionState.Open)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!command.CommandText.Contains(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@@ROWCOUNT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
                {
                    command.Connection.Close();
                    command.Connection.ConnectionString &lt;/span&gt;=&lt;span&gt; connectionString;
                }
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (command.Connection.State ==&lt;span&gt; ConnectionState.Closed)
            {
                command.Connection.Open();
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里存在一个问题，上述 &lt;span class=&quot;cnblogs_code&quot;&gt;command.CommandText.Contains(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@@ROWCOUNT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&lt;/span&gt; 代码，因为在进行添加操作时，会返回主键，那么此时会进行查询，所以暂时没有更好的方式是确认主-从数据库。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CommandListener : IObserver&amp;lt;DiagnosticListener&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; DbCommandInterceptor _dbCommandInterceptor = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandInterceptor();

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnCompleted()
        {
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnError(Exception error)
        {
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnNext(DiagnosticListener listener)
        { 
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (listener.Name ==&lt;span&gt; DbLoggerCategory.Name)
            {
                listener.Subscribe(_dbCommandInterceptor);
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述 &lt;span class=&quot;cnblogs_code&quot;&gt;DbLoggerCategory.Name&lt;/span&gt; 也就是 &lt;span class=&quot;cnblogs_code&quot;&gt;Microsoft.EntityFrameworkCore&lt;/span&gt; ，通过监控的包是Microsoft.EntityFrameworkCore，则进行订阅，最后我们在startup中进行注册该监听类。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 DiagnosticListener.AllListeners.Subscribe(&lt;span&gt;new&lt;/span&gt; CommandListener());
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来我们通过动态图来看看最终实际效果，主-从复制依然是通过SQL Server发布-订阅的方式来同步数据。在控制器中，我们只利用demo1上下文来添加和查询数据，当查询时更换到从数据库，此时已是无感知（请见上一篇），如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        [HttpGet(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IActionResult Index()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blogs =&lt;span&gt; _demo1DbContext.Blogs.ToList();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(blogs);
        }

        [HttpGet(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;create&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IActionResult CreateDemo1Blog()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blog = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Blog()
            {
                Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;demoBlog1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Url &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.cnblogs.com/createmyslef&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            };
            _demo1DbContext.Blogs.Add(blog);
            _demo1DbContext.SaveChanges();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; RedirectToAction(nameof(Index));
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201807/589642-20180704020810686-738048912.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;本文只是在上一篇的基础上进一步改善了读写分离的操作，得益于github上有提出可通过跟踪记录来解决，通过跟踪记录从底层出发来完善读写分离操作，我们可拿到底层实现的命令以及其他和EF 6.x中利用拦截器等效，至于更加复杂的逻辑可自行实现。&lt;/p&gt;
</description>
<pubDate>Tue, 03 Jul 2018 18:24:00 +0000</pubDate>
<dc:creator>Jeffcky</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CreateMyself/p/9261435.html</dc:identifier>
</item>
<item>
<title>WKWebView 的使用和封装 - xiaoyouPrince</title>
<link>http://www.cnblogs.com/xiaoyouPrince/p/9261353.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoyouPrince/p/9261353.html</guid>
<description>&lt;h3 id=&quot;toc_1&quot;&gt;前言&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;项目中有个新闻资讯模块展示公司和相关行业的最新动态。&lt;br/&gt;这个部分基本是以展示网页为主，内部可能会有一些 native 和 JS 代码的交互。&lt;br/&gt;因为是新项目，所以决定采用 iOS 8 中新出的 WebKit。&lt;br/&gt;本文是对 WebKit 框架中 WKWebView 的一些学习和封装&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/xiaoyouPrince/WKWebViewDemo&quot;&gt;WKWebViewDemo 地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;toc_2&quot;&gt;UIWebView 和 WKWebView&lt;/h3&gt;
&lt;p&gt;这两者都是 iOS 中展示 web 相关的组件。前者 iOS 2.0 就有了，后者是 iOS 8.0 时候新加的。&lt;/p&gt;
&lt;p&gt;网络中关于两者的差异和性能对比分析很多，这里不再赘述。只是说明一下苹果文档中的重要提示以及自己需要功能的实现：&lt;/p&gt;
&lt;p&gt;官方文档中重要提示&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1256297-c83d9920c281f85c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Snip20180629_1.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;文档中主要说了以下几点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;iOS 8 之后，应该用 WKWebView 代替 UIWebView。并可以设置 &lt;code&gt;WKPreferences&lt;/code&gt; 的 &lt;code&gt;javaScriptEnabled&lt;/code&gt; 属性决定是否支持 web 内容执行 JavaScript 代码&lt;/li&gt;
&lt;li&gt;iOS 10 之后必须在 info.plist 文件中包含要访问数据的描述。对于图库的访问必须包含 &lt;code&gt;NSPhotoLibraryUsageDescription&lt;/code&gt; 和 &lt;code&gt;NSCameraUsageDescription&lt;/code&gt; 否则会直接 crash&lt;/li&gt;
&lt;li&gt;加载本地 HTML 文件使用： &lt;code&gt;loadHTMLString:baseURL:&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;加载网络内容使用 ： &lt;code&gt;loadRequest:&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stopLoading&lt;/code&gt; 方法用来结束加载。&lt;code&gt;loading&lt;/code&gt; 属性查看WK进程中是否加载中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;goBack&lt;/code&gt; 和 &lt;code&gt;goForward&lt;/code&gt; 方法可用于 WKWebView 的前进后退. &lt;code&gt;canGoBack&lt;/code&gt; 和 &lt;code&gt;canGoForward&lt;/code&gt; 属性来查看是否能前进后退&lt;/li&gt;
&lt;li&gt;通常WKWebView会自动识别电话号码，并把它设置成可打电话的链接。如果不用这个功能： 设置 &lt;code&gt;dataDetectorTypes&lt;/code&gt; 属性中 &lt;code&gt;UIDataDetectorTypes&lt;/code&gt; 的位字段不包含 &lt;code&gt;UIDataDetectorTypePhoneNumber&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scalesPageToFit&lt;/code&gt; 属性用于第一次加载网页内容时候设置是否可以使用手势改变网页缩放。 设置后用户就可以手势缩放网页大小&lt;/li&gt;
&lt;li&gt;记录网页加载网络内容可以设置WKWebView 的 &lt;code&gt;delegate&lt;/code&gt; 并遵守 &lt;code&gt;UIWebViewDelegate&lt;/code&gt; 协议&lt;/li&gt;
&lt;li&gt;不要在 网页中嵌入 UIScrollView 及其子类，这样会导致手势等行为混乱&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;有了基本的概念，就可以去看一下 WKWebView 的具体文档了。如果怕官方文档麻烦也可以直接看网络上别人整理好的&lt;a href=&quot;http://www.cocoachina.com/ios/20170413/18963.html&quot;&gt;网络整理&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面是我整理的 WebView 和 H5 调用逻辑图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1256297-8163bb4dd43078a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Snip20180703_2.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;特别说明一点：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-objc&quot;&gt;0. OC 执行 JS 方法
- (void)evaluateJavaScript:(NSString *)javaScriptString completionHandler:(void (^)(id, NSError *error))completionHandler;

这个方法中webView调用JS，block只是成功或失败的回调

1. JS方法中
window.webkit.messageHandlers.webViewApp.postMessage(message);
作用是JS 向之前注册的 webViewApp 发送消息。

OC 端接到消息会调用 &amp;lt;WKScriptMessageHandler&amp;gt; 中下面代理方法
- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;toc_3&quot;&gt;功能需求&lt;/h3&gt;
&lt;p&gt;对于项目而言，网页功能无需太多，主要满足以下几点&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本展示功能&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;导航栏下显示加载进度条&lt;/li&gt;
&lt;li&gt;导航栏 title 展示网页内容当前 title&lt;/li&gt;
&lt;li&gt;网页内容的刷新、前进、后退&lt;/li&gt;
&lt;li&gt;网页内容加载、刷新过程中 HUD 提示&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;JS和OC交互功能：交互的数据格式和方法名等需要和H5端具体协调&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;App内登录后，访问 web 需要对应用户token&lt;/li&gt;
&lt;li&gt;网页中点击超链接，新开页面处理，同上也需要拦截新URL请求并补全token参数&lt;/li&gt;
&lt;li&gt;跟JS交互中对JS返回值的处理&lt;/li&gt;
&lt;li&gt;简单JS代码注入，如资讯内容底部加一些赞和分享等功能&amp;lt;曾经就有接口只返回一段JS&amp;gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;以上这些基本功能中基本展示功能都比较简单，和JS交互的部分需要和 H5 端小伙伴共同定义数据结构和互调的方法名、参数等。所以需要具体问题具体分析。项目以我自己 Demo 为例说一下。&lt;/p&gt;
&lt;h3 id=&quot;toc_4&quot;&gt;功能实现&lt;/h3&gt;
&lt;p&gt;为实现功能主要封装了三个类&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-objc&quot;&gt;XYWKWebViewController  ---&amp;gt; 管理 webView 加载相关的代理方法
XYWKWebView            ---&amp;gt; 封装 webView 请求相关方法
XYScriptMessage        ---&amp;gt; 封装JS回调信息
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;XYWKWebView 核心功能&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加载本地HTML文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-objc&quot;&gt;/**
 *  加载本地HTML页面
 *
 *  @param htmlName html页面文件名称
 */
- (void)loadLocalHTMLWithFileName:(nonnull NSString *)htmlName
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实现代码&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-objc&quot;&gt;- (void)loadLocalHTMLWithFileName:(nonnull NSString *)htmlName {

    NSString *path = [[NSBundle mainBundle] bundlePath];
    NSURL *baseURL = [NSURL fileURLWithPath:path];
    NSString * htmlPath = [[NSBundle mainBundle] pathForResource:htmlName
                                                          ofType:@&quot;html&quot;];
    NSString * htmlCont = [NSString stringWithContentsOfFile:htmlPath
                                                    encoding:NSUTF8StringEncoding
                                                       error:nil];
    
    // WKWebView 的 loadHTMLString: 方法
    [self loadHTMLString:htmlCont baseURL:baseURL];
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;加载网络内容&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-objc&quot;&gt;// 加载网络内容，根据是否有参数选不同方法
- (void)loadRequestWithRelativeUrl:(nonnull NSString *)relativeUrl;

- (void)loadRequestWithRelativeUrl:(nonnull NSString *)relativeUrl params:(nullable NSDictionary *)params;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实现代码&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-objc&quot;&gt;- (void)loadRequestWithRelativeUrl:(NSString *)relativeUrl params:(NSDictionary *)params {
    
    NSURL *url = [self generateURL:relativeUrl params:params];
    
    [self loadRequest:[NSURLRequest requestWithURL:url]];
}

- (NSURL *)generateURL:(NSString*)baseURL params:(NSDictionary*)params {
    
    self.webViewRequestUrl = baseURL;
    self.webViewRequestParams = params;
    
    NSMutableDictionary *param = [NSMutableDictionary dictionaryWithDictionary:params];
    
    NSMutableArray* pairs = [NSMutableArray array];

    //可以在这里将token参数添加进去，这样就可以实现补全token功能    
    for (NSString* key in param.keyEnumerator) {
        NSString *value = [NSString stringWithFormat:@&quot;%@&quot;,[param objectForKey:key]];

        NSString* escaped_value = (__bridge_transfer NSString *)CFURLCreateStringByAddingPercentEscapes(NULL,
                                                                              (__bridge CFStringRef)value,
                                                                              NULL,
                                                                              (CFStringRef)@&quot;!*'\&quot;();:@&amp;amp;=+$,/?%#[]% &quot;,
                                                                              kCFStringEncodingUTF8);
        
        [pairs addObject:[NSString stringWithFormat:@&quot;%@=%@&quot;, key, escaped_value]];
    }
    
    NSString *query = [pairs componentsJoinedByString:@&quot;&amp;amp;&quot;];
    baseURL = [baseURL stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    
    NSString* url = @&quot;&quot;;
    if ([baseURL containsString:@&quot;?&quot;]) {
        url = [NSString stringWithFormat:@&quot;%@&amp;amp;%@&quot;,baseURL, query];
    }
    else {
        url = [NSString stringWithFormat:@&quot;%@?%@&quot;,baseURL, query];
    }
    //绝对地址
    if ([url.lowercaseString hasPrefix:@&quot;http&quot;]) {
        return [NSURL URLWithString:url];
    }
    else {
        return [NSURL URLWithString:url relativeToURL:self.baseUrl];
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;XYWKWebViewController 核心功能&lt;/p&gt;
&lt;p&gt;这是一个 Controller，建议创建新的Controller继承XYWKWebViewController 来使用，这样可以把不同的页面区分开，每个页面加载的url和相关的业务逻辑都可以单独处理，代码易读，也容易维护。如果项目后期添加功能也好处理&lt;br/&gt;XYWKWebViewController主要完成了对一些功能的封装，比如进度条、页面title以及 webView 的生命周期。&lt;/p&gt;
&lt;p&gt;进度条和title都是通过KVO实现&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-objc&quot;&gt;if (self.shouldShowProgress) {
   [self.webView addObserver:self forKeyPath:@&quot;estimatedProgress&quot; options:NSKeyValueObservingOptionNew context:NULL];
}

if (self.isUseWebPageTitle) {
   [self.webView addObserver:self forKeyPath:@&quot;title&quot; options:NSKeyValueObservingOptionNew context:NULL];
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;设置title 和 progressView 直接是自己简单写了一个 View&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&amp;lt;NSString *,id&amp;gt; *)change context:(void *)context {
    if ([keyPath isEqualToString:@&quot;estimatedProgress&quot;]) {
        
        if (object == self.webView) {
            [self showLoadingProgress:self.webView.estimatedProgress andTintColor:[UIColor colorWithRed:24/255.0 green:124/255.0 blue:244/255.0f alpha:1.0]];
        }
        else{
            [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];
        }
    }
    else if ([keyPath isEqualToString:@&quot;title&quot;]){
        if (object == self.webView) {
            if ([self isUseWebPageTitle]) {
                self.title = self.webView.title;
            }
        }
        else{
            [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];
        }
    }
    else {
        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;OC 与 JS 之间交互的处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这部分是可定制化功能最多的，遇到的问题也是最多的。WKWebView 和 JS 之间的交互需要设置 ScriptMessageHandler 如下。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-objc&quot;&gt;- (instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration *)configuration {
    self = [super initWithFrame:frame configuration:configuration];
    if (self) {
    
        if (configuration) {
            //文档中说
            //Adds a script message handler.
            //Adding a script message handler with name name causes the JavaScript function window.webkit.messageHandlers.name.postMessage(messageBody) to be defined in all frames in all web views that use the user content controller.
        
            // 这里就是设置 网页中 JS Message handler
            // 通过 “name” 注册之后，JS 内部函数 window.webkit.messageHandlers.“name”.postMessage(messageBody) 就被定义到整个用户的Web内容的控制器中。
            //后面的JS调用OC也是通过 “name” 联系的
            [configuration.userContentController addScriptMessageHandler:self name:@&quot;webViewApp&quot;];
        }
        
        //默认允许系统自带的侧滑后退
        self.allowsBackForwardNavigationGestures = YES;
    }
    return self;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后实现 WKScriptMessageHandler 代理&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-objc&quot;&gt;
// JS 调用 OC 的回调。JS 向OC 发送消息会调用这个方法
- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message {
    
    NSLog(@&quot;得到的 JS message 是 :%@&quot;,message.body);
    if ([message.body isKindOfClass:[NSDictionary class]]) {
        
        NSDictionary *body = (NSDictionary *)message.body;
        
        // 这里是对 JS 消息的一个处理，用自己定义的消息类型，封装并发送给代理去外部处理，具体格式需要工作中和H5共同制定
        
        XYScriptMessage *msg = [XYScriptMessage new];
        [msg setValuesForKeysWithDictionary:body];
        
        if (self.xy_messageHandlerDelegate &amp;amp;&amp;amp; [self.xy_messageHandlerDelegate respondsToSelector:@selector(xy_webView:didReceiveScriptMessage:)]) {
            [self.xy_messageHandlerDelegate xy_webView:self didReceiveScriptMessage:msg];
        }
    }
    
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中自定义的 XYScriptMessage 如下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-objc&quot;&gt;/**
 *  WKWebView与JS调用时参数规范实体
 */
@interface XYScriptMessage : NSObject

/**
 *  方法名
 *  用来确定Native App的执行逻辑
 */
@property (nonatomic, copy) NSString *method;

/**
 *  方法参数
 *  json字符串
 */
@property (nonatomic, copy) NSDictionary *params;

/**
 *  回调函数名
 *  Native App执行完后回调的JS方法名
 */
@property (nonatomic, copy) NSString *callback;

@end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同时提供delegate方法供XYWKWebViewController实现&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-objc&quot;&gt;/**
 *  JS调用原生方法处理，其中方法名都需要和 H5 端相互协调
 */
- (void)xy_webView:(XYWKWebView *)webView didReceiveScriptMessage:(XYScriptMessage *)message {
    
    NSLog(@&quot;webView method:%@&quot;,message.method);
    
    //返回上一页
    if ([message.method isEqualToString:@&quot;tobackpage&quot;]) {
        [self.navigationController popViewControllerAnimated:YES];
    }
    //打开新页面
    else if ([message.method isEqualToString:@&quot;openappurl&quot;]) {
        
        NSString *url = [message.params objectForKey:@&quot;url&quot;];
        if (url.length) {
            XYWKWebViewController *webViewController = [[XYWKWebViewController alloc] init];
            webViewController.url = url;
            
            [self.navigationController pushViewController:webViewController animated:YES];
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;toc_5&quot;&gt;使用方法&lt;/h3&gt;
&lt;p&gt;一个提供四类使用功能，使用方法建议直接继承 XYWKWebViewController。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-Swift&quot;&gt;class WebViewController: XYWKWebViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        
        /// #用法0： 直接加载对应的地址 &amp;lt;没有参数&amp;gt;
        //self.webView.loadRequest(withRelativeUrl: &quot;https://www.httpbin.org/&quot;)
        
        /// #用法1： 直接加载对应的地址 &amp;lt;有参数&amp;gt;
        //let params = [&quot;name&quot;:&quot;xiaoyou&quot;,
        //              &quot;password&quot; : &quot;123456#/HTTP_Methods/get_get&quot;]
        //self.webView.loadRequest(withRelativeUrl: &quot;https://www.httpbin.org/&quot;, params: params)
        
        /// #用法2： 直接加载本地HTML文件 &amp;lt;没有参数&amp;gt;
        self.webView.loadLocalHTML(withFileName: &quot;main&quot;)
        
        /// #用法3： JS 注入，添加一些方法 &amp;lt;这里的原生坐标和JS之间无法直接相对应&amp;gt;
        let margin : CGFloat = 6.0
        let padding : CGFloat = 10.0
        let width = UIScreen.main.bounds.size.width - (margin * 2.0) - (margin * 7.0 + padding)
        let btnWidth = (width - padding - 5) / 2.0
        
        let styleJS = &quot;&quot;&quot;
                    &amp;lt;style type=&quot;text/css&quot;&amp;gt;
                    #foot {
                        border:solid 10px #600;
                        padding:\(padding)px;
                        margin:\(margin)px;
                        clear:both;
                        width:\(width)px
                    }
                    #share {
                        border:solid 1px #600;
                        padding:2px;
                        margin:2px;
                        clear:both;
                        width:\(btnWidth)px;
                        heiht:150px
                    }
                    #like {
                        border:solid 1px #600;
                        padding:2px;
                        margin:2px;
                        clear:both;
                        width:\(btnWidth)px;
                        heiht:50px
                    }
                    &amp;lt;/style&amp;gt;
                    &quot;&quot;&quot;
        
        let funcJS = &quot;&quot;&quot;
                    \t\t\tfunction testFunc(text){\n
                    \t\t\t\tvar message = \&quot;点我干什么\&quot;;\n
                    \t\t\t\twindow.webkit.messageHandlers.webViewApp.postMessage(message);\n
                    \t\t\t\talert(text);\n
                    \t\t\t}\n
                    &quot;&quot;&quot;
        
        let footerJS = &quot;&quot;&quot;
                    \t&amp;lt;button onclick=\&quot;testFunc('http://www.baidu.com/')\&quot;&amp;gt;自己添加的Footer的Button一个&amp;lt;/button&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;\n
                    \t &amp;lt;div id=\&quot;foot\&quot;&amp;gt;底部说明 &amp;lt;br /&amp;gt;
                    &amp;lt;button id=\&quot;share\&quot; onclick=\&quot;testFunc('分享')\&quot;&amp;gt;分享&amp;lt;/button&amp;gt;
                    &amp;lt;button id=\&quot;like\&quot; onclick=\&quot;testFunc('点赞')\&quot;&amp;gt;点赞&amp;lt;/button&amp;gt;&amp;lt;br /&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &quot;&quot;&quot;
        self.webView.loadLocalHTML(&quot;main&quot;, withAddingStyleJS: styleJS, funcJS: funcJS, footerJS: footerJS)
        
        /// 设置导航
        self.navigationItem.leftBarButtonItem = UIBarButtonItem(title: &quot;返回&quot;, style: .plain, target: self, action: #selector(backAction));
        self.navigationItem.rightBarButtonItem = UIBarButtonItem(title: &quot;调用JS&quot;, style: .plain, target: self, action: #selector(callJS));
    }
}


/// #用法4： OC 调用JS方法。这里可以调用JS，把H5需要的参数传给他们
///  这里是JS 回调方法
extension WebViewController{
    
    @objc func backAction() {
        self.dismiss(animated: true, completion: nil)
    }
    
    @objc func callJS() {
        self.webView.callJS(&quot;call('Hello World!')&quot;) { (response) in
            print(&quot;\(String(describing: response))&quot;)
        }
    }
    
    /// 这里是重写了WebView接受到JS消息的回调，需要调用super方法才能执行内部方法，否则这里只是打印
    override func xy_webView(_ webView: XYWKWebView, didReceive message: XYScriptMessage) {
        
        // 如果完全自定义的js方法处理，无需重写父类，自行实现即可
        super.xy_webView(webView, didReceive: message)
        print(message)
    }
    
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;具体见Demo&lt;/p&gt;
&lt;h3 id=&quot;toc_6&quot;&gt;遇到的问题&lt;/h3&gt;
&lt;p&gt;HTML 中超链接，需要打开新页面的&lt;a href=&quot;https://www.jianshu.com/p/3a75d7348843&quot;&gt;&quot;_blank&quot;处理&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;toc_7&quot;&gt;小结&lt;/h3&gt;
&lt;p&gt;WebKit 的小封装能实现目前所需功能，但很多内容还需要在需要的时候去探究，希望能帮到同样学习的小伙伴。&lt;/p&gt;
&lt;p&gt;如果看完有收获，不妨点个赞，让我也更有分享的动力！&lt;/p&gt;
</description>
<pubDate>Tue, 03 Jul 2018 16:26:00 +0000</pubDate>
<dc:creator>xiaoyouPrince</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaoyouPrince/p/9261353.html</dc:identifier>
</item>
<item>
<title>性能测试day02_后端网络协议架构 - ~泪小白~</title>
<link>http://www.cnblogs.com/leixiaobai/p/9261121.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leixiaobai/p/9261121.html</guid>
<description>&lt;p&gt;　　接着第一天的尾，继续来学习性能测试，上一次说到性能要大致经历哪些阶段，那么我们也来看下行业的做法：&lt;/p&gt;
&lt;p&gt;　　行业有两种做法，一个是TPC，另一个是SPEC；&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;TPC：指定业务类型，获得该指定业务的性能指标，也就是说TPC实际上是业务实际情况的实现效果，我们做性能一般都是TPC-C这种做法，但要注意一点，就是TPC跑的好系统不一定就好，因为这只是针对指定业务。&lt;/li&gt;
&lt;li&gt;SPEC：针对硬件能力的概念，获得硬件在基本处理能力上的指标，一般SPEC越高，TPC的指标会越好（CPU和内存越大，能处理的业务越多）。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　最终可以通过TPC和SPEC的互换来做到系统性能的预估。（由于公司架构比较稳定和固化，通过单模块的性能情况预估同等配置下其它模块的性能）。仔细思考下，在我们性能测试中，我们有时候测试环境资源并不如线上资源多，那么如何在测试环境下获取生产环境的性能结果呢？实际上这里就用到了SPEC和TPC的互换。&lt;/p&gt;
&lt;p&gt;　　第一天讲解了部分性能的基本名词，其中负载也是比较容易混淆的，这里也来讲解下：负载实际上是多个客户端对服务器的请求，那么这里就会有负载用户的定义，有实际用户、在线用户、并发用户三种不同的区分；&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;实际用户：系统注册用户，有可能访问系统的用户；&lt;/li&gt;
&lt;li&gt;在线用户：系统正在访问等待或者操作的用户；&lt;/li&gt;
&lt;li&gt;并发用户：针对某个业务逻辑的具体操作用户； &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　实际用户&amp;gt;&amp;gt;在线用户&amp;gt;&amp;gt;并发用户，所以从这里我们可以知道负载量并不是简单的看用户数，而是通过业务量来计算才会更准确，为了应对现有的高业务量所以挺多同步业务转化成了异步业务（这个是架构的变化）。&lt;/p&gt;
&lt;p&gt;　　在很多公司，领导都会说你给我做一下性能压力测试，实际上外面挺多人认为性能就等同于压力测试，实际上是有很大区别的，下面来讲解下区分：&lt;/p&gt;
&lt;p&gt;　　实际上性能测试是包括负载测试和压力测试；下图就是概览图：我们平常做的性能测试实际上是负载测试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1064304/201807/1064304-20180703230230480-708366727.png&quot; alt=&quot;&quot; width=&quot;721&quot; height=&quot;489&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　在预习课程中我们接触了协议，知道性能测试基本上都是模拟客户端基于协议的测试，那么下面大概总结下部分HTTP协议内容：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1064304/201807/1064304-20180703232010286-1117173521.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　最终我们通过协议抓包是要知道业务是如何通过请求来实现与服务器的交互和验证的（当然这个比较难，基本上是自己写过才能比较清楚）。&lt;/p&gt;
&lt;p&gt;　　今天在扩展一点内容，跟下次课的知识有关，就是前端的基础知识-&amp;gt;网页的组成，稍微介绍下网页的组成以及性能的优化建议：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS（优化在于格式，可以进行压缩和减少代码中多余无用的字符，减少字节大小）&lt;/li&gt;
&lt;li&gt;JS（优化在于格式，可以进行压缩和减少代码中多余无用的字符，减少字节大小）&lt;/li&gt;
&lt;li&gt;图片（多张图片合并，然后根据位置切割，减少请求量和大小）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;好啦，今天完啦，期待下一节课关于网站前端性能分析吧！&lt;/p&gt;
</description>
<pubDate>Tue, 03 Jul 2018 15:50:00 +0000</pubDate>
<dc:creator>~泪小白~</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leixiaobai/p/9261121.html</dc:identifier>
</item>
<item>
<title>函数式编程初窥F#(二) - .NET西安社区</title>
<link>http://www.cnblogs.com/xiandnc/p/9261232.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiandnc/p/9261232.html</guid>
<description>&lt;p&gt;大量讲解函数式编程语言的书籍最终都会用Fuctor，Monad，Monoids，范畴论等各种词汇吓退命令式语言玩家，所以我试图避开这些问题，揭开这些复杂词汇带来的具有实战意义的成果。另外我会尽量使用C#语言来描述函数式编程思想，因为C#某些语法和特性来自于函数式语言的启发，但C#终究并不是正统的函数式语言，随着对话题的深入，我们不可避免要使用F#来描述某些特性。所以本文会对F#的基础语法做一些简单了解，本文并不是一个纯粹的F#教程，只会提及必要的F#语法，最终循序渐进穿插在整个文章中。&lt;/p&gt;
&lt;h2 id=&quot;函数是一等公民&quot;&gt;函数是一等公民&lt;/h2&gt;
&lt;p&gt;在函数式语言里，函数被设计为一等公民，也就是说函数跟int, bool等类型并没有什么区别，例如在命令式语言的函数定义中，参数可以是int值，那么在函数式语言里，参数也可以是一个函数。这种特性在C#其实也是工作的：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public void Convert(Func&amp;lt;int,bool&amp;gt; selector){ }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这种设计在函数式语言里会有更进一步的体现：&lt;br/&gt;在F#中声明一个简单类型用&lt;code&gt;let&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;let x = 6&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;声明一个函数：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;let f x = x + 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;或者：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;let f = fun x -&amp;gt; x + 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;无论是申明类型还是函数，都用&lt;code&gt;let&lt;/code&gt;，这并不是一个巧合，因为在语言设计者眼里，函数和其他类型都是一样的。&lt;/p&gt;
&lt;p&gt;另外需要注意，不要看到上面的代码认为F#是一门动态语言，F#毫无疑问是一门静态语言，通过&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/type-inference&quot;&gt;type inference&lt;/a&gt;来工作。它要比C#中的&lt;code&gt;var&lt;/code&gt;强大的多，只有在少数情况下需要加类型声明，考虑下面的例子：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;let stringLength x = x.Length    &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的代码并不能正常工作，仅仅通过x.Length无法推断出x的类型，此时需要显示标注类型：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;let stringLength (x:string) = x.Length     &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当然你还可以向其它语言那样，标注函数的返回值类型，虽然此时此刻这一步并不是必须的：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;let stringLength (x:string) :int = x.Length   &lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;理解unit类型&quot;&gt;理解unit类型&lt;/h2&gt;
&lt;p&gt;我们在上一篇对&lt;code&gt;数学中的函数&lt;/code&gt;做了描述，其中提到对于任意的输入总会有唯一的输出值与之对应，考虑下面的代码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;let printNumber x = printf &quot;%i&quot; x&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这段代码不论你输入什么样的x，它只是打印了一个数字（副作用），他的返回值是什么？不像C#中的&lt;code&gt;void&lt;/code&gt;，F#会返回一个真实的类型&lt;code&gt;unit&lt;/code&gt;，注意&lt;code&gt;unit&lt;/code&gt;并不是&lt;code&gt;null&lt;/code&gt;或者&lt;code&gt;void&lt;/code&gt;，他是一个类型，如&lt;code&gt;int&lt;/code&gt;一样。&lt;/p&gt;
&lt;h2 id=&quot;理解tuple类型&quot;&gt;理解tuple类型&lt;/h2&gt;
&lt;p&gt;F#里有一些常用的数据结构，例如&lt;code&gt;tuple&lt;/code&gt;，&lt;code&gt;Record types&lt;/code&gt;，&lt;code&gt;Discriminated Union&lt;/code&gt;，&lt;code&gt;Option&lt;/code&gt;，&lt;code&gt;List&lt;/code&gt;，不要担心，目前你只需要知道&lt;code&gt;tuple&lt;/code&gt;就可以了。&lt;br/&gt;除了诸如&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;等类型，如何快速的组合几个类型在一起呢？声明一个类？答案是:&lt;code&gt;No&lt;/code&gt;, 比如(&quot;hello&quot;, 1)就是有一个&lt;code&gt;string&lt;/code&gt;和&lt;code&gt;int&lt;/code&gt;组合在一起的tuple类型，他的类型为&lt;code&gt;string * int&lt;/code&gt;。例如下面的函数：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;let sum (x, y) = x + y&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它的方法签名是:&lt;code&gt;sum : x:int * y:int -&amp;gt; int&lt;/code&gt; 即函数名为&lt;code&gt;sum&lt;/code&gt;，接受&lt;code&gt;int * int&lt;/code&gt;类型的一个&lt;code&gt;tuple&lt;/code&gt;，返回&lt;code&gt;int&lt;/code&gt;类型。&lt;br/&gt;如果要接受两个&lt;code&gt;int&lt;/code&gt;类型的参数应该这样定义的：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;let sum x y = x + y&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;好了，F#的基本介绍已经完毕，下一篇将介绍&lt;code&gt;Currying&lt;/code&gt;，他是函数式编程语言中常用的模式之一，想要继续了解的朋友继续关注下一篇。&lt;/p&gt;
</description>
<pubDate>Tue, 03 Jul 2018 15:42:00 +0000</pubDate>
<dc:creator>.NET西安社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiandnc/p/9261232.html</dc:identifier>
</item>
<item>
<title>.Net Core开发日志——从搭建开发环境开始 - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/9260805.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/9260805.html</guid>
<description>&lt;p&gt;.Net Core自2016年推出1.0版本开始，到目前已是2.1版本，在其roadmap计划里明年更会推出3.0版本，发展不可不谓之迅捷。不少公司在经过一个谨慎的观望期后，也逐步开始将系统升级至最新的.Net Core平台，所以现在开始进行.Net Core开发可谓正当其时。&lt;/p&gt;
&lt;p&gt;因为.Net Core支持Windows系统以外的Linux与Mac系统，在选择开发环境时，并不需要局限在原有的Windows平台，这里我选用了Mac平台。&lt;/p&gt;
&lt;p&gt;开发硬件设备是一台14年款的Apple Macbook Air，操作系统为macOS Sierra。&lt;/p&gt;
&lt;p&gt;开发工具没有使用强大的Visual Studio IDE，一方面是硬件设备性能不足的缘故，另一方面也是想测试下另一款编辑器Visual Studio Code是否同样可以完成大部分的开发工作。&lt;/p&gt;
&lt;p&gt;搭建开发环境的第一步从安装.Net Core的SDK开始。可以自微软的官方网站找到你想要的安装包：&lt;a href=&quot;https://www.microsoft.com/net/download/macos&quot;&gt;SDK&lt;/a&gt;，当前版本为v2.1.301。&lt;/p&gt;
&lt;p&gt;完成安装后在命令行窗口(我用的是iTerm)执行&lt;code&gt;dotnet --version&lt;/code&gt;检验是否安装成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180703231126565-1459740020.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接着是下载并安装Visual Studio Code编辑器，&lt;a href=&quot;https://code.visualstudio.com/Download&quot;&gt;VSC&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;完成这两步后，便可以开始写第一个程序了。&lt;/p&gt;
&lt;p&gt;在命令行窗口执行&lt;code&gt;dotnet new console -o helloApp&lt;/code&gt;，然后用Visual Studio Code(以下简称VSC)打开新建的helloApp文件夹。基础的文件与文件夹已经通过上述命令帮你完成构建。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180703224107986-1263149006.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击Program.cs文件，会发现在VSC的右下角推荐你安装C#的扩展包，请直接点击Install按钮，这是你在开发C#程序时所必要的扩展包。&lt;/p&gt;
&lt;p&gt;所有VSC的扩展包在完成安装后都需要重新加载VSC才会生效，所以请再点击Reload按钮。&lt;/p&gt;
&lt;p&gt;重新加载后，右下角处又会出现新的提示框：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180703225021331-1902961471.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击Yes，会自动生成一个新的.vscode文件夹，其中的文件很重要，是编译与调试相关的配置。&lt;/p&gt;
&lt;p&gt;至此，又一个Hello World程序降临于世。&lt;/p&gt;
&lt;p&gt;想要运行这行程序也只需一条极简单的命令，你可以直接在VSC中通过Ctrl + ~快捷键调出命令行窗口，输入&lt;code&gt;dotnet run&lt;/code&gt;后回车即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180703225837499-258533418.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 03 Jul 2018 15:14:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/9260805.html</dc:identifier>
</item>
<item>
<title>Apollo 4 客户端 SDK 设计 - 莫那-鲁道</title>
<link>http://www.cnblogs.com/stateis0/p/9261088.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stateis0/p/9261088.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前聊了客户端的一些功能，例如融入 Spring， @value 注解的自动刷新实现，长轮询等，这次从客户端的整体设计来聊聊。&lt;/p&gt;
&lt;h2 id=&quot;设计&quot;&gt;设计&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-d5a191546f35ad20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图是 client 项目的包结构。&lt;/p&gt;
&lt;p&gt;其中，核心包就是 internals 包，包含了客户端的主要功能逻辑。主要有以下功能：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;获取 ConfigService 服务的远程配置。&lt;/li&gt;
&lt;li&gt;长轮询/定时轮询 ConfigService。&lt;/li&gt;
&lt;li&gt;监听机制——更新后，立即通知应用程序。&lt;/li&gt;
&lt;li&gt;兼容 Spring 各个版本（这个是在 spring 包中，但我认为也算重要功能 &lt;code&gt;^_^&lt;/code&gt;）。&lt;/li&gt;
&lt;/ol&gt;&lt;h5 id=&quot;首先说第一个功能获取-configservice-服务的远程配置&quot;&gt;首先说第一个功能：&lt;strong&gt;获取 ConfigService 服务的远程配置&lt;/strong&gt;：&lt;/h5&gt;
&lt;p&gt;实现此功能的类为：RemoteConfigRepository。该类有以下几个重要的方法：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-96df10239dd861a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;构造方法：该方法里包含了很多初始化的过程，虽然我觉得应该放在 init 之类的方法中&lt;/li&gt;
&lt;li&gt;getConfig() 根据 namespace 获取配置&lt;/li&gt;
&lt;li&gt;onLongPollNotified() 当收到长连接通知时触发响应&lt;/li&gt;
&lt;li&gt;addChangeListener() 添加监听器&lt;/li&gt;
&lt;li&gt;removeChangeListener() 删除监听器&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;注意：setUpstreamRepository 是空的。看注释，是个 fallback 设计。&lt;/p&gt;
&lt;p&gt;其中，getConfig 方法是获取这个 namespace 的配置，返回的是 Properties 对象（就是个 Map）。然后，从这个对象中取出对应的值，就 ok 了。&lt;/p&gt;
&lt;h5 id=&quot;第二个功能长轮询定时轮询-configservice&quot;&gt;第二个功能：长轮询/定时轮询 ConfigService。&lt;/h5&gt;
&lt;p&gt;这个功能的主要实现类是：RemoteConfigLongPollService。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-9c7d5aa0ae07d75f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该类主要的方法有 2 个，构造方法和 submit 方法。注意，这个类是单例的（由 google 的 inject 实现）。&lt;br/&gt;构造方法中，做了很多的初始化工作。而 submit 方法则是开启长轮询，轮询的方式是：携带 AppId 去请求 ConfigServcie，得到所有的 namespace 更新通知，然后通知对应的 RemoteConfigRepository 去请求真正的数据。大概的设计如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-c07a2f5cf49b663c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;每一个 namespace 在一个应用中，都对应一个 RemoteConfigRepository，所有的 RemoteConfigRepository 都归属 RemoteConfigLongPollService 长轮询服务管理，当长轮询得到通知，便通知对应的 RemoteConfigRepository 进行服务请求以便执行更新本地缓存和通知监听器操作。&lt;/p&gt;
&lt;p&gt;通知，作为 fallback 方案—— 定时轮询也充当了长轮询失效的最后屏障。&lt;/p&gt;
&lt;h5 id=&quot;第三个功能监听机制更新后立即通知应用程序&quot;&gt;第三个功能：监听机制——更新后，立即通知应用程序。&lt;/h5&gt;
&lt;p&gt;从上图可以看出，轮询之后，如果有更新响应，则立即通知 RemoteConfigRepository，然后，RemoteConfigRepository 再次从配置中心拉取配置，从而更新本地 Config 对象的内容。&lt;/p&gt;
&lt;p&gt;更新完毕后，则通知 Config 的“配置变化监听器”。也就是 ConfigChangeListener 的 onChange 方法。这个监听器是监听 Config 对象的。&lt;/p&gt;
&lt;p&gt;实际上，每个 Config 对象在初始化的时候，都会往 RemoteConfigRepository 对象里添加一个监听器，实际上就是添加自己。&lt;/p&gt;
&lt;p&gt;当 RemoteConfigRepository 发生变化的时候，触发 onRepositoryChange 方法，onRepositoryChange 又会触发 onChange 方法。大概的设计图就是下面这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-4423ed2d7c5e51a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中，紫色的 DefaultConfig 是核心，他依赖了 RemoteConfigRepository， 而 RemoteConfigRepository 反过来组合了他，同时 DefaultConfig 也聚合了用户实现的监听器 ConfigChangeListener 的子类。&lt;/p&gt;
&lt;p&gt;那么，当远程 Repository 变化的时候，就可以通知 Client 的缓存 Config 对象，而 Config 缓存对象变化的时候，就可以通知用户的程序（监听器）。实现整体的监听机制。&lt;/p&gt;
&lt;p&gt;总的来说，就是通过两层监听机制来实现的。其中 DefaultConfig 实现了两个角色，既是观察者，也是被观察者。&lt;/p&gt;
&lt;h5 id=&quot;第四个功能兼容-spring-各个版本&quot;&gt;第四个功能：兼容 Spring 各个版本&lt;/h5&gt;
&lt;p&gt;首先，如果没有这个功能，Apollo 也会能够正常运行的，不过，你只能使用 API 的方式，不能使用注解，标签等 Spring 应用熟悉的方式。&lt;/p&gt;
&lt;p&gt;如果想用 Spring 的方式使用 Apollo ，那么就得遵守 Spring 的约定，实现 Spring 的接口，将自己融入到 Spring 中。&lt;/p&gt;
&lt;p&gt;其中，主要解决的问题就是，如何在 Spring 初始化的时候，Apollo 也初始化？这点我们在之前的文章中说了，也就是 Spring 的 3 个入口。在这些入口里初始化。&lt;/p&gt;
&lt;p&gt;另外，将配置放置到 Spring 的环境中，也是一个工作，因为，如果不放到环境中，Spring 初始时需要的那些参数就无法取到了。&lt;/p&gt;
&lt;p&gt;所以，要将 Config 对象包装成 Spring 熟悉的 ConfigPropertySource 对象，算是一个适配器模式吧。&lt;/p&gt;
&lt;p&gt;在初始化配置的时候，会从远程配置中心拿到配置，包装成 ConfigPropertySource 对象，再利用 CompositePropertySource 组合属性配置（多个 namespace）聚合所有 Config 对象。&lt;/p&gt;
&lt;p&gt;CompositePropertySource 最后会添加到 ConfigurableEnvironment 环境对象中，spring 就可以从这个对象 中取出配置进行初始化。&lt;/p&gt;
&lt;p&gt;并且，在 SpringBoot 环境下，Apollo 可以优先加载指定的配置，这些配置在 SpringContext 容器初始化的时候就开始被注入到环境中，这样就可以将一些系统初始化的配置也放到配置中心了，尽量让本地少一点配置。这个功能的启用需要参数：&lt;code&gt;apollo.bootstrap.enabled=true&lt;/code&gt;，配置的namespace 则是 &lt;code&gt;apollo.bootstrap.namespaces = XXX&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;并且，该配置的优先级是最高的，Apollo 将这个配置放在了 Spring 环境对象中的第一个位置，当循环获取配置的时候，优先获取这个配置。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;好了，关于 Apollo 客户端的设计，大概就是这些，总体来讲比较简单， 4 个功能：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;获取远程配置&lt;/li&gt;
&lt;li&gt;长轮询/定时轮询&lt;/li&gt;
&lt;li&gt;配置更新监听机制。&lt;/li&gt;
&lt;li&gt;兼容 Spring。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;抛出一个问题：&lt;/p&gt;
&lt;p&gt;Apollo 似乎没有给用户留扩展接口？如果能像 Spring，Mybatis 一样，留一个或者多个切面给用户，让用户能够在加载配置的时候，做一些事情啥的，或许更好。&lt;/p&gt;
</description>
<pubDate>Tue, 03 Jul 2018 14:55:00 +0000</pubDate>
<dc:creator>莫那-鲁道</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stateis0/p/9261088.html</dc:identifier>
</item>
<item>
<title>js函数的节流与防抖 - 阿龙丶along</title>
<link>http://www.cnblogs.com/alongup/p/9261076.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/alongup/p/9261076.html</guid>
<description>&lt;h3&gt;一、防抖&amp;amp;节流&lt;/h3&gt;
&lt;p&gt;　　在前端开发中有一部分用户行为会频繁的触发事件执行，而对于DOM的操作、资源加载等耗费性能的处理，很可能会导致界面卡顿，甚至浏览器奔溃。函数的节流与防抖就是为了解决类似需求而产生的。&lt;/p&gt;
&lt;p&gt;　　1）节流&lt;/p&gt;
&lt;p&gt;　　　　概念：函数的节流就是预定一个函数只有在大于等于执行周期时才会执行，周期内调用不会执行。好像一滴水只有积攒到一定重量才会落下一样。&lt;/p&gt;
&lt;p&gt;　　　　场景：窗口调整(resize)、页面滚动(scroll)、抢购疯狂点击(movedown)&lt;/p&gt;
&lt;p&gt;　　　　故事：阿里巴巴月饼门事件，中秋来临，阿里特意做了一个活动，抢月饼，但是每个人只能抢购一盒，有五位工程师写了js脚本，类似于12306的抢票软件，直接刷了一百多盒月饼，结果被开除了四个.其实对于他们来说并不是什么坏事，不知道有多少公司对他们敞开大门~那么如何解决这种问题呢，就用到了函数的节流&lt;/p&gt;
&lt;p&gt;　　1.1）案例(限时抢购)&lt;/p&gt;
&lt;p&gt;　　　　我写了这样一个简单的事件，如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;HTML:&lt;br/&gt;1&lt;/span&gt; &amp;lt;button id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;抢购&amp;lt;/button&amp;gt;
&lt;span&gt;2&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;box&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/div&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;JS:&lt;br/&gt;1&lt;/span&gt; let oBtn=document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; let oBox=document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; oBtn.onclick=&lt;span&gt;function(){
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 　　oBox.innerText=parseInt(oBox.innerText)+&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; }  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　当我点击时，每点击一次，数量增加一，点击越快，增加越快，效果图如下：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1237383/201807/1237383-20180703213753629-1819354067.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　1.2）脚本攻击：这种简单的数量增加很容易遭到脚本的攻击，从而造成很大的损失。代码如下&lt;/p&gt;
&lt;p&gt;　　　　for(let i=0;i&amp;lt;100;i++){oBtn.click()}&lt;/p&gt;
&lt;p&gt;　　　　效果图如下：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1237383/201807/1237383-20180703214710675-1781025359.gif&quot; alt=&quot;&quot; width=&quot;959&quot; height=&quot;228&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　1.3）如何解决(节流)&lt;/p&gt;
&lt;p&gt;　　　　上面并不是我们想要的结果，我们想要的是在规定时间内只能执行一次，比如1秒内只能执行一次.无论你点击多少次.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;HTML:&lt;br/&gt;1&lt;/span&gt; &amp;lt;button id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;抢购&amp;lt;/button&amp;gt;
&lt;span&gt;2&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;box&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; JS:&lt;br/&gt;1&lt;/span&gt; let oBtn=document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     let oBox=document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        handle:buy函数
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        wait:规定在一秒钟内只能执行一次
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    function throttle (handle, wait) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         let lastTime = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; function (e) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             let nowTime = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (nowTime - lastTime &amp;gt;&lt;span&gt; wait) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                handle();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 lastTime =&lt;span&gt; nowTime;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    function buy(){
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         oBox.innerText = parseInt(oBox.innerText)+&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     oBtn.onclick = throttle(buy, &lt;span&gt;1000&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　效果图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1237383/201807/1237383-20180703220646539-1975120691.gif&quot; alt=&quot;&quot; width=&quot;890&quot; height=&quot;242&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　这样不仅可以达到想要的效果，还可以阻止恶意脚本的攻击.&lt;/p&gt;

&lt;p&gt;　　2.防抖&lt;/p&gt;
&lt;p&gt;　　　　概念：函数防抖就是函数需要频繁触发情况时，只有足够空闲的时候，才会执行一次。好像公交司机会等人都上车后才会开车一样.&lt;/p&gt;
&lt;p&gt;　　　　场景：实时搜索(keyup)、拖拽(mousemove)&lt;/p&gt;
&lt;p&gt;　　　　2.1）.案例(实时搜索)&lt;/p&gt;
&lt;p&gt;　　　　　　在之前看一下这个过程图，百度的实时搜索.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1237383/201807/1237383-20180703221815968-1080312849.gif&quot; alt=&quot;&quot; width=&quot;638&quot; height=&quot;193&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　　　在搜索nba的时候，并不是每输入一个字符，都会想服务器请求一次，而是在输入完成后发出一次请求。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;HTML:&lt;br/&gt;1&lt;/span&gt; &amp;lt;input type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ipt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;JS:&lt;br/&gt;1&lt;/span&gt; let oIpt = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ipt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;function ajax () {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     console.log(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; oIpt.oninput = ajax;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　效果图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1237383/201807/1237383-20180703222614380-1561056731.gif&quot; alt=&quot;&quot; width=&quot;787&quot; height=&quot;238&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　用户无论输入多快，都会发出请求，从而去加载服务器资源，对性能有很大的影响.&lt;/p&gt;
&lt;p&gt;　　　　2.3)解决(防抖)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; let oIpt = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ipt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     let time = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    function debounce (handle, delay) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         let time = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; function () {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             let self = &lt;span&gt;this&lt;/span&gt;,arg =&lt;span&gt; arguments;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            clearTimeout(time);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             time =&lt;span&gt; setTimeout(function () {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                handle.apply(self,arg);　　//this绑定
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            },delay)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    function ajax (e) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         console.log(e,&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     oIpt.oninput = debounce(ajax, &lt;span&gt;1000&lt;/span&gt;)  //1s后发出请求
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　效果图：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1237383/201807/1237383-20180703224816375-2005278446.gif&quot; alt=&quot;&quot; width=&quot;1020&quot; height=&quot;309&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这种方法可以解决多次请求的问题，对性能有很大的提高。&lt;/p&gt;
&lt;p&gt;　　喜欢的小伙伴点个关注哦~我会再接再厉的。&lt;/p&gt;




</description>
<pubDate>Tue, 03 Jul 2018 14:50:00 +0000</pubDate>
<dc:creator>阿龙丶along</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/alongup/p/9261076.html</dc:identifier>
</item>
<item>
<title>10分钟教你用Python做个打飞机小游戏超详细教程 - 短短的路走走停停</title>
<link>http://www.cnblogs.com/infroad/p/9260954.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/infroad/p/9260954.html</guid>
<description>&lt;img title=&quot;微信公众号&quot; src=&quot;http://upload-images.jianshu.io/upload_images/10386940-80101f05ccc77525.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;微信公众号&quot;/&gt;&lt;h3 id=&quot;h-1&quot;&gt;&lt;span&gt;我知道你们一定想先看效果如何&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;http://upload-images.jianshu.io/upload_images/10386940-7330886dc364bc0c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;/&gt;&lt;img title=&quot;image&quot; src=&quot;http://upload-images.jianshu.io/upload_images/10386940-61de76147b2067ee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot;/&gt;&lt;br/&gt;&lt;h3 id=&quot;h00&quot;&gt;&lt;span&gt;00 目录&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;整体框架&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;开始之前-精灵类Sprite&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;子弹类class Bullet&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;玩家飞机类class Player&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;敌机类class Enemy&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;游戏主体循环以及帧率设置&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;让子弹飞&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;刷出敌机 打怪&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;把飞机敌机子弹都画出来&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;处理键盘事件&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;分数显示 和 GameOver&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;最终代码&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h01&quot;&gt;&lt;span&gt;01 前言&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;这次还是用python的pygame库来做的游戏。关于这个库的内容，读者可以上网了解一下。本文只讲解用到的知识。代码参考自网上，自己也做了一点代码简化。尽量把最核心的方面用最简单的方式呈现给大家，让大家尽快掌握这个游戏的框架。至于那些华丽的功能，大家在弄懂了核心知识以后，再去添加也是非常easy的。&lt;/p&gt;
&lt;h3 id=&quot;h02&quot;&gt;&lt;span&gt;02 整体框架&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;这个游戏设计用到了面向对象的编程思想。&lt;br/&gt;游戏主体划分为三个主要的类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;子弹类class Bullet&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;玩家类class Player&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;敌机类class Enemy&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在屏幕上可见的也就是这三个东西了。自己的飞机、敌人的飞机、子弹。因此整个游戏的核心就是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;把这三个东西的图像呈现在屏幕上。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;判断和处理子弹撞击敌机和敌机撞击玩家这两种情况。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面我们会展开为大家一一讲解。&lt;/p&gt;
&lt;h3 id=&quot;h03sprite&quot;&gt;&lt;span&gt;03 开始之前-精灵类Sprite&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在下面的代码中，你们会大量见到这个pygame.sprite模块。这里就给大家介绍一下。“sprite”，中文翻译“精灵”，在游戏动画一般是指一个独立运动的画面元素，在pygame中，就可以是一个带有图像（Surface）和大小位置（Rect）的对象。 简单来说是一个会动图片。它的两个成员变量&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;self.image=要显示图片的Surface&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;self.rect = 显示Surface的区域&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;对于self.rect，常用的设置rect的方法：self.rect = self.image.get_rect()。然后设定self.rect.topleft=(0,0)来设定左上角的位置，从而设定这个精灵在屏幕上的显示位置。精灵特别适合用在OO语言中，比如Python。&lt;/p&gt;
&lt;p&gt;pygame.sprite.Sprite是pygame精灵的基类，一般来说，你总是需要写一个自己的精灵类继承一下它然后加入自己的代码。&lt;/p&gt;
&lt;p&gt;关于此类的其他函数，咱们用到的时候会详细跟大家说的。&lt;/p&gt;
&lt;h3 id=&quot;h04classbullet&quot;&gt;&lt;span&gt;04 子弹类class Bullet&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;先来看代码吧。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Bullet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(pygame.sprite.Sprite)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, bullet_img, init_pos)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;        pygame.sprite.Sprite.__init__(self)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;        self.image = bullet_img&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;        self.rect = self.image.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;        self.rect.midbottom = init_pos&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;        self.speed = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;        self.rect.top -= self.speed&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;子弹类继承于pygame.sprite.Sprite， 成员主要是子弹的图片对象和子弹刷出来的位置，当然，还有移动速度。一个方法就是移动，从发出位置直线往屏幕上方移动。&lt;/p&gt;
&lt;h3 id=&quot;h05classplayer&quot;&gt;&lt;span&gt;05 玩家飞机类class Player&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;老样子。先看代码&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(pygame.sprite.Sprite)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, plane_img, player_rect, init_pos)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;        pygame.sprite.Sprite.__init__(self)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;        self.image = []                                 &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(len(player_rect)):&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;            self.image.append(plane_img.subsurface(player_rect[i]).convert_alpha())&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;        self.rect = player_rect[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]                      &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;        self.rect.topleft = init_pos                    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;        self.speed = &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;                                  &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;        self.bullets = pygame.sprite.Group()            &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;        self.is_hit = &lt;span class=&quot;hljs-keyword&quot;&gt;False&lt;/span&gt;                             &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;shoot&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, bullet_img)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;        bullet = Bullet(bullet_img, self.rect.midtop)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;        self.bullets.add(bullet)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveUp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.top &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;            self.rect.top = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;            self.rect.top -= self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveDown&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.top &amp;gt;= SCREEN_HEIGHT - self.rect.height:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;            self.rect.top = SCREEN_HEIGHT - self.rect.height&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;            self.rect.top += self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;33&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;34&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveLeft&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;35&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.left &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;36&lt;/span&gt;            self.rect.left = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;37&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;38&lt;/span&gt;            self.rect.left -= self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;40&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;41&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveRight&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;42&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.left &amp;gt;= SCREEN_WIDTH - self.rect.width:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;43&lt;/span&gt;            self.rect.left = SCREEN_WIDTH - self.rect.width&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;44&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;45&lt;/span&gt;            self.rect.left += self.speed&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;老样子，成员变量主要还是那几个。图像对象以及矩形参数和刷出位置，当然还会有移动速度和子弹集合（用来保存飞机射出的子弹）。方法的话就是上下左右移动了，不过需要做好边界判断。这个直接看代码就能理解了。&lt;/p&gt;
&lt;h3 id=&quot;h06classenemy&quot;&gt;&lt;span&gt;06 敌机类class Enemy&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;好吧，先上代码伺候。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Enemy&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(pygame.sprite.Sprite)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, enemy_img, enemy_down_imgs, init_pos)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;       pygame.sprite.Sprite.__init__(self)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;       self.image = enemy_img   &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;       self.rect = self.image.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;       self.rect.topleft = init_pos&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;       self.down_imgs = enemy_down_imgs &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;       self.speed = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;        self.rect.top += self.speed&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要注意的时候，该类保存了两个图像对象，一个是正常情况下的敌机图像。一个是爆炸的敌机图像。以便在撞击时能把撞击效果显示出来。一个方法就是和子弹差不多的移动了，不过它是从屏幕上方往底下移动的而已。然后刷出位置的话，后面我们会用一个随机函数生成的。&lt;/p&gt;
&lt;h3 id=&quot;h07&quot;&gt;&lt;span&gt;07 游戏主体循环以及帧率设置&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;游戏主体的话，我们直接开一个死循环来不断刷新显示上面介绍的三个对象。代码设计如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;clock = pygame.time.Clock()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;running = &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; running:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;    clock.tick(&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;    ……游戏运行部分&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关于pygame.time.Clock()，贪吃蛇那篇已经介绍过了。就是用来控制游戏帧率的。只要我们的玩家飞机没有被敌机撞到，即属于存活状态时。running将一直为真。&lt;/p&gt;
&lt;h3 id=&quot;h08&quot;&gt;&lt;span&gt;08 让子弹飞&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在running循环里面，我们要做的是不断自动刷出子弹。当然，子弹是从玩家飞机上射出来的。&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;首先是发射子弹&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; player.is_hit:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; shoot_frequency % &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;        player.shoot(bullet_img)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;7&lt;/span&gt;    shoot_frequency += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;8&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; shoot_frequency &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;9&lt;/span&gt;        shoot_frequency = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;shoot_frequency变量的作用就是控制子弹发射的频率，它控制在running每循环15次发射一个子弹。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;接着是子弹移动&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; bullet &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; player.bullets:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;bullet.move()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; bullet.rect.bottom &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;    player.bullets.remove(bullet)  &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;子弹移动的话，running每循环一次，就move一下。不过要注意当子弹移动出屏幕后删除。不然可能会爆电脑内存。&lt;/p&gt;
&lt;h3 id=&quot;h09&quot;&gt;&lt;span&gt;09 刷出敌机 打怪&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;和子弹类似的，在running循环里，随机刷出敌机。&lt;/p&gt;
&lt;ul readability=&quot;9&quot;&gt;&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;先是刷怪&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; enemy_frequency % &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;    enemy1_pos = [random.randint(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, SCREEN_WIDTH - enemy1_rect.width), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;    enemy1 = Enemy(enemy1_img, enemy1_down_imgs, enemy1_pos)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;    enemies1.add(enemy1)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;7&lt;/span&gt;enemy_frequency += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; enemy_frequency &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;9&lt;/span&gt;    enemy_frequency = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;enemy_frequency变量的作用同样是控制刷怪的频率。running每循环50次就刷一个怪出来，位置是randint函数随机生成的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;接着让怪移动&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; enemy &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; enemies1:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;    enemy.move()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; enemy.rect.top &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;        enemies1.remove(enemy)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;移动的话也很简单，每running循环一次就move一次就行。但是还是注意。敌机移出屏幕后要删除，避免爆内存啊。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;然后是碰撞检测&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; pygame.sprite.collide_circle(enemy, player):&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;    enemies_down.add(enemy)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;    enemies1.remove(enemy)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;    player.is_hit = &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里介绍一下pygame.sprite.collide_circle，这个函数的作用是判断两个精灵对象有没有碰撞。如果敌机和玩家飞机装上了，那很明显GameOver了。直接把running循环给break就行了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h10&quot;&gt;&lt;span&gt;10 把飞机敌机子弹都画出来&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;前面说了这么多，最终我们还是要把这三个主要的对象画到屏幕上显示出来，然后通过每一次running循环更新它们的状态（正常？撞击？爆炸？）。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;enemies1_down = pygame.sprite.groupcollide(enemies1, player.bullets, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; enemy_down &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; enemies1_down:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;    enemies_down.add(enemy_down)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;screen.fill(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;screen.blit(background, (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; player.is_hit:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;    screen.blit(player.image[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], player.rect) &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;    screen.blit(player.image[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], player.rect) &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;    running = &lt;span class=&quot;hljs-keyword&quot;&gt;False&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; enemy_down &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; enemies_down:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;    enemies_down.remove(enemy_down)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;    score += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;    screen.blit(enemy_down.down_imgs, enemy_down.rect) &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;    player.bullets.draw(screen)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;    enemies1.draw(screen)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意的是，玩家飞机和敌机都有两种状态，一种是正常状态，另外一种是爆炸状态。在画之前要判断清楚再下手。然后再介绍一下pygame.sprite.groupcollide函数，这个函数是判断两个精灵组里面的精灵有没有相互碰撞的。它会把A组的精灵逐个和B组的精灵进行比较判断。&lt;/p&gt;
&lt;h3 id=&quot;h11&quot;&gt;&lt;span&gt;11 处理键盘事件&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;键盘事件的处理是十分重要的，我们通过键盘移动飞机，更新飞机的位置。最终再画出来。代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; event &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pygame.event.get():&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; event.type == pygame.QUIT:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;        pygame.quit()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;        exit()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;key_pressed = pygame.key.get_pressed()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_w] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_UP]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;    player.moveUp()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_s] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_DOWN]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;    player.moveDown()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_a] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_LEFT]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;    player.moveLeft()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_d] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_RIGHT]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;    player.moveRight()&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h12gameover&quot;&gt;&lt;span&gt;12 分数显示 和 GameOver&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;对于分数显示，其实很简单，用一个font对象，在render渲染到屏幕上就可以了。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;score_font = pygame.font.Font(&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;score_text = score_font.render(&lt;span class=&quot;hljs-string&quot;&gt;'score: '&lt;/span&gt;+str(score), &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;text_rect = score_text.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;text_rect.topleft = [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;screen.blit(score_text, text_rect)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不过，需要注意的是，最后我们还要将总得分在游戏结束的时候写出来。然后游戏结束的时候，我们还要把GameOver那张图片也blit出来。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;font = pygame.font.Font(&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;text = font.render(&lt;span class=&quot;hljs-string&quot;&gt;'Final Score: '&lt;/span&gt;+ str(score), &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;text_rect = text.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;text_rect.centerx = screen.get_rect().centerx&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;text_rect.centery = screen.get_rect().centery + &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;7&lt;/span&gt;screen.blit(game_over, (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;8&lt;/span&gt;screen.blit(text, text_rect)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h13&quot;&gt;&lt;span&gt;13 最终代码&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;讲了这么多，相信大家都明白了。最后再贴一个完整的代码和游戏所需的资源吧。&lt;br/&gt;顺便附上代码和资源下载地址：&lt;br/&gt;&lt;strong&gt;链接: https://pan.baidu.com/s/1rxE2XtO2T1yyh7WXn_7Vug 密码: w9my&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  2&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pygame&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  3&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sys &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; exit&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  4&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pygame.locals &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; *&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  5&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; random&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  8&lt;/span&gt;SCREEN_WIDTH = &lt;span class=&quot;hljs-number&quot;&gt;480&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  9&lt;/span&gt;SCREEN_HEIGHT = &lt;span class=&quot;hljs-number&quot;&gt;800&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 12&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Bullet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(pygame.sprite.Sprite)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 13&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, bullet_img, init_pos)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 14&lt;/span&gt;        pygame.sprite.Sprite.__init__(self)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 15&lt;/span&gt;        self.image = bullet_img&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 16&lt;/span&gt;        self.rect = self.image.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 17&lt;/span&gt;        self.rect.midbottom = init_pos&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 18&lt;/span&gt;        self.speed = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 20&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 21&lt;/span&gt;        self.rect.top -= self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 24&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(pygame.sprite.Sprite)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 25&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, plane_img, player_rect, init_pos)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 26&lt;/span&gt;        pygame.sprite.Sprite.__init__(self)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 27&lt;/span&gt;        self.image = []                                 &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 28&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(len(player_rect)):&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 29&lt;/span&gt;            self.image.append(plane_img.subsurface(player_rect[i]).convert_alpha())&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 30&lt;/span&gt;        self.rect = player_rect[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]                      &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 31&lt;/span&gt;        self.rect.topleft = init_pos                    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 32&lt;/span&gt;        self.speed = &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;                                  &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 33&lt;/span&gt;        self.bullets = pygame.sprite.Group()            &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 34&lt;/span&gt;        self.is_hit = &lt;span class=&quot;hljs-keyword&quot;&gt;False&lt;/span&gt;                             &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 36&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 37&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;shoot&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, bullet_img)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 38&lt;/span&gt;        bullet = Bullet(bullet_img, self.rect.midtop)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 39&lt;/span&gt;        self.bullets.add(bullet)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 41&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 42&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveUp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 43&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.top &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 44&lt;/span&gt;            self.rect.top = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 45&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 46&lt;/span&gt;            self.rect.top -= self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 48&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 49&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveDown&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 50&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.top &amp;gt;= SCREEN_HEIGHT - self.rect.height:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 51&lt;/span&gt;            self.rect.top = SCREEN_HEIGHT - self.rect.height&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 52&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 53&lt;/span&gt;            self.rect.top += self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 54&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 55&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 56&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveLeft&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 57&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.left &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 58&lt;/span&gt;            self.rect.left = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 59&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 60&lt;/span&gt;            self.rect.left -= self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 61&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 62&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 63&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveRight&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 64&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.left &amp;gt;= SCREEN_WIDTH - self.rect.width:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 65&lt;/span&gt;            self.rect.left = SCREEN_WIDTH - self.rect.width&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 66&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 67&lt;/span&gt;            self.rect.left += self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 68&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 69&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 70&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Enemy&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(pygame.sprite.Sprite)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 71&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, enemy_img, enemy_down_imgs, init_pos)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 72&lt;/span&gt;       pygame.sprite.Sprite.__init__(self)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 73&lt;/span&gt;       self.image = enemy_img&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 74&lt;/span&gt;       self.rect = self.image.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 75&lt;/span&gt;       self.rect.topleft = init_pos&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 76&lt;/span&gt;       self.down_imgs = enemy_down_imgs&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 77&lt;/span&gt;       self.speed = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 78&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 79&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 80&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 81&lt;/span&gt;        self.rect.top += self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 82&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 83&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 84&lt;/span&gt;pygame.init()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 85&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 86&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 87&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 88&lt;/span&gt;screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 89&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 90&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 91&lt;/span&gt;pygame.display.set_caption(&lt;span class=&quot;hljs-string&quot;&gt;'Python打飞机大战'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 92&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 93&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 94&lt;/span&gt;background = pygame.image.load(&lt;span class=&quot;hljs-string&quot;&gt;'resources/image/background.png'&lt;/span&gt;).convert()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 95&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 96&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 97&lt;/span&gt;game_over = pygame.image.load(&lt;span class=&quot;hljs-string&quot;&gt;'resources/image/gameover.png'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 98&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 99&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;100&lt;/span&gt;plane_img = pygame.image.load(&lt;span class=&quot;hljs-string&quot;&gt;'resources/image/shoot.png'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;101&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;102&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;103&lt;/span&gt;player_rect = []&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;104&lt;/span&gt;player_rect.append(pygame.Rect(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;102&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;126&lt;/span&gt;))        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;105&lt;/span&gt;player_rect.append(pygame.Rect(&lt;span class=&quot;hljs-number&quot;&gt;165&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;102&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;126&lt;/span&gt;))     &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;106&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;107&lt;/span&gt;player_pos = [&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;600&lt;/span&gt;]&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;108&lt;/span&gt;player = Player(plane_img, player_rect, player_pos)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;109&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;110&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;111&lt;/span&gt;bullet_rect = pygame.Rect(&lt;span class=&quot;hljs-number&quot;&gt;1004&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;987&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;112&lt;/span&gt;bullet_img = plane_img.subsurface(bullet_rect)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;113&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;114&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;115&lt;/span&gt;enemy1_rect = pygame.Rect(&lt;span class=&quot;hljs-number&quot;&gt;534&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;612&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;116&lt;/span&gt;enemy1_img = plane_img.subsurface(enemy1_rect)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;117&lt;/span&gt;enemy1_down_imgs = plane_img.subsurface(pygame.Rect(&lt;span class=&quot;hljs-number&quot;&gt;267&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;347&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;118&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;119&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;120&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;121&lt;/span&gt;enemies1 = pygame.sprite.Group()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;122&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;123&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;124&lt;/span&gt;enemies_down = pygame.sprite.Group()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;125&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;126&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;127&lt;/span&gt;shoot_frequency = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;128&lt;/span&gt;enemy_frequency = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;129&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;130&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;131&lt;/span&gt;score = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;132&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;133&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;134&lt;/span&gt;clock = pygame.time.Clock()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;135&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;136&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;137&lt;/span&gt;running = &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;138&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;139&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;140&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; running:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;141&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;142&lt;/span&gt;    clock.tick(&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;143&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;144&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;145&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;146&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;147&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; player.is_hit:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;148&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; shoot_frequency % &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;149&lt;/span&gt;            player.shoot(bullet_img)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;150&lt;/span&gt;        shoot_frequency += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;151&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; shoot_frequency &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;152&lt;/span&gt;            shoot_frequency = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;153&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;154&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;155&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;156&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; enemy_frequency % &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;157&lt;/span&gt;        enemy1_pos = [random.randint(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, SCREEN_WIDTH - enemy1_rect.width), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;158&lt;/span&gt;        enemy1 = Enemy(enemy1_img, enemy1_down_imgs, enemy1_pos)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;159&lt;/span&gt;        enemies1.add(enemy1)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;160&lt;/span&gt;    enemy_frequency += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;161&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; enemy_frequency &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;162&lt;/span&gt;        enemy_frequency = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;163&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;164&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; bullet &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; player.bullets:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;165&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;166&lt;/span&gt;        bullet.move()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;167&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;168&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; bullet.rect.bottom &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;169&lt;/span&gt;            player.bullets.remove(bullet)   &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;170&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;171&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; enemy &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; enemies1:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;172&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;173&lt;/span&gt;        enemy.move()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;174&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;175&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; pygame.sprite.collide_circle(enemy, player):&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;176&lt;/span&gt;            enemies_down.add(enemy)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;177&lt;/span&gt;            enemies1.remove(enemy)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;178&lt;/span&gt;            player.is_hit = &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;179&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;180&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;181&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; enemy.rect.top &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;182&lt;/span&gt;            enemies1.remove(enemy)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;183&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;184&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;185&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;186&lt;/span&gt;    enemies1_down = pygame.sprite.groupcollide(enemies1, player.bullets, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;187&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; enemy_down &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; enemies1_down:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;188&lt;/span&gt;        enemies_down.add(enemy_down)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;189&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;190&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;191&lt;/span&gt;    screen.fill(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;192&lt;/span&gt;    screen.blit(background, (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;193&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;194&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;195&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; player.is_hit:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;196&lt;/span&gt;        screen.blit(player.image[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], player.rect) &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;197&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;198&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;199&lt;/span&gt;        screen.blit(player.image[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], player.rect) &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;200&lt;/span&gt;        running = &lt;span class=&quot;hljs-keyword&quot;&gt;False&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;201&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;202&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;203&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; enemy_down &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; enemies_down:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;204&lt;/span&gt;        enemies_down.remove(enemy_down)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;205&lt;/span&gt;        score += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;206&lt;/span&gt;        screen.blit(enemy_down.down_imgs, enemy_down.rect) &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;207&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;208&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;209&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;210&lt;/span&gt;    player.bullets.draw(screen)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;211&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;212&lt;/span&gt;    enemies1.draw(screen)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;213&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;214&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;215&lt;/span&gt;    score_font = pygame.font.Font(&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;216&lt;/span&gt;    score_text = score_font.render(&lt;span class=&quot;hljs-string&quot;&gt;'score: '&lt;/span&gt;+str(score), &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;217&lt;/span&gt;    text_rect = score_text.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;218&lt;/span&gt;    text_rect.topleft = [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;219&lt;/span&gt;    screen.blit(score_text, text_rect)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;220&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;221&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;222&lt;/span&gt;    pygame.display.update()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;223&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;224&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;225&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; event &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pygame.event.get():&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;226&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; event.type == pygame.QUIT:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;227&lt;/span&gt;            pygame.quit()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;228&lt;/span&gt;            exit()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;229&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;230&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;231&lt;/span&gt;    key_pressed = pygame.key.get_pressed()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;232&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;233&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;234&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_w] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_UP]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;235&lt;/span&gt;        player.moveUp()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;236&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_s] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_DOWN]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;237&lt;/span&gt;        player.moveDown()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;238&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_a] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_LEFT]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;239&lt;/span&gt;        player.moveLeft()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;240&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_d] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_RIGHT]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;241&lt;/span&gt;        player.moveRight()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;242&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;243&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;244&lt;/span&gt;font = pygame.font.Font(&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;245&lt;/span&gt;text = font.render(&lt;span class=&quot;hljs-string&quot;&gt;'Final Score: '&lt;/span&gt;+ str(score), &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;246&lt;/span&gt;text_rect = text.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;247&lt;/span&gt;text_rect.centerx = screen.get_rect().centerx&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;248&lt;/span&gt;text_rect.centery = screen.get_rect().centery + &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;249&lt;/span&gt;screen.blit(game_over, (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;250&lt;/span&gt;screen.blit(text, text_rect)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;251&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;252&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;253&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;254&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; event &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pygame.event.get():&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;255&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; event.type == pygame.QUIT:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;256&lt;/span&gt;            pygame.quit()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;257&lt;/span&gt;            exit()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;258&lt;/span&gt;    pygame.display.update()&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 03 Jul 2018 14:15:00 +0000</pubDate>
<dc:creator>短短的路走走停停</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/infroad/p/9260954.html</dc:identifier>
</item>
<item>
<title>AC自动机学习笔记-1（怎么造一台AC自动机?） - sclbgw7</title>
<link>http://www.cnblogs.com/sclbgw7/p/9260756.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sclbgw7/p/9260756.html</guid>
<description>&lt;p&gt;月更博主又来送温暖啦QwQ&lt;/p&gt;
&lt;p&gt;今天我们学习的算法是AC自动机。AC自动机是解决字符串多模匹配问题的利器，而且代码也十分好打=w=&lt;/p&gt;
&lt;p&gt;在这一篇博客里，我将讲解AC自动机是什么，以及怎么构建一个最朴素的AC自动机。（不知道为什么我写出来的AC自动机常数就是大得要命=。=）&lt;/p&gt;
&lt;h2 id=&quot;前置知识&quot;&gt;前置知识&lt;/h2&gt;
&lt;p&gt;首先你一定要对Trie树以及KMP了如指掌，尤其是要明白KMP中失配数组(next或fail数组)的本质:利用已经匹配过的部分，跳过重复的匹配，达到快速匹配的目的。&lt;/p&gt;
&lt;h2 id=&quot;ac自动机是什么&quot;&gt;AC自动机是什么&lt;/h2&gt;
&lt;p&gt;大家都知道KMP可以用于在一个大字符串（文本串）中寻找另一个小的字符串（模式串），那么如果有n个模式串，要你把它们全部在文本串中找出来呢？当然，我们可以做n次KMP（别小瞧30分哦），但是其效率并不能差强人意。这个时候，我们可以尝试把模式串做成Trie树，似乎可以提高效率。&lt;/p&gt;
&lt;p&gt;比如说，我们有5个模式串：she,shr,say,he,her,那么它们所建出来的Trie树应该是长成这样的：（红色节点表示单词的结尾）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213144078-1801957981.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么，怎么用它来匹配呢？如果我们把文本串的每一个点都作为起点放到Tire树上匹配，它的复杂度将会是...我要你Tire树有何用(╯‵□′)╯︵┻━┻&lt;/p&gt;
&lt;p&gt;既然这样，那么如果只把文本串的第一个字符为起点，会发生什么呢？&lt;/p&gt;
&lt;p&gt;你以为会是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213230940-524045718.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;完美！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然而实际上却是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213257110-1762572679.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;问题很明显，当我们匹配完she时，he其实也被匹配到了。所以我们希望这棵Trie树上能够加点东西，让它可以达到下面的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213310383-388458083.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中，红色的箭头就是失配指针——fail指针。它表示文本串在当前节点失配后，我们应该到哪个节点去继续匹配。很显然，对于每个节点，我们要找到这个节点-代表的字符串-在树上所有的节点-表示的字符串中-能找到的最长的后缀，意思就是“我当前匹配到了这个点，我也相当于匹配到了的节点（中的深度最大的节点）。”比如说，在我举的例子中，当我们匹配到了she时，我们在树上走的路径也包含了he，he是she的一个后缀。我们在she上失配，至少说明我们已经匹配到了he，于是就可以跳到代表he的节点上继续匹配。&lt;/p&gt;
&lt;p&gt;到这里，你是不是发现fail指针和KMP中的next指针简直一毛一样？它们都被称为“失配指针”。将Trie树上的每一个点都加上fail指针，它就变成了AC自动机。AC自动机其实就是Trie+KMP，它可以用来解决在文本串中寻找很多模式串，即多模匹配问题。&lt;/p&gt;
&lt;p&gt;对于一开始的5个单词，它们所构建出的AC自动机就长这样（没有画出红色箭头的点，其fail指针都指向根节点）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213322731-1606805669.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何构建ac自动机&quot;&gt;如何构建AC自动机&lt;/h2&gt;
&lt;p&gt;显然，我们要做的就是快速地求出所有点的fail指针。我们以bfs的顺序依次求出每个节点的fail，这样，当我们要求一个节点的fail时，它的父亲的fail肯定已经求出来了。若当前节点为A，其父节点为B，B的fail为C，那么C所代表的字符串一定是B的最长的后缀。如果C有一个儿子D的字符与A的字符等同，那么显然D所代表的串（C加一个字符）就是A所代表的串（B加一个字符）的最长后缀。如果C没有一个儿子，使其字符与A的字符等同呢？很简单，只需要再访问C的fail就行了。如此反复，直到A的最长后缀找到，或者A的fail指向根节点为止。（A在Trie树中没有后缀，乖乖回到根重新匹配吧！）&lt;/p&gt;
&lt;p&gt;为了解释得更清楚，我举一个例子。下面这幅图是我根据别的地方的图重新画的（n次转载？），出处我没找到_(:з」∠)_。节点是根据bfs序标号的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213332706-1589913513.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;为了少一些特判，设置一个辅助根节点0号节点，0号节点的所有儿子都指向真正的根节点1号节点，然后将1号节点的fail指向0号节点。&lt;/li&gt;
&lt;li&gt;找到2号节点的父亲节点的fail节点0号节点，看0号节点有没有为a的子节点。有，于是2号节点的fail指向1号节点。&lt;/li&gt;
&lt;li&gt;找到3号节点的父亲节点的fail节点0号节点，看0号节点有没有为b的子节点。有，于是3号节点的fail指向1号节点。&lt;/li&gt;
&lt;li&gt;找到4号节点的父亲节点的fail节点1号节点，看1号节点有没有为b的子节点。有，于是4号节点的fail指向3号节点。&lt;/li&gt;
&lt;li&gt;同上。&lt;/li&gt;
&lt;li&gt;同上。&lt;/li&gt;
&lt;li&gt;同上。&lt;/li&gt;
&lt;li&gt;找到8号节点的父亲节点的fail节点5号节点，看5号节点有没有为b的子节点。没有，于是再找到5号节点的fail节点2号节点，看2号节点有没有为b的子节点。有，于是8号节点的fail指向4号节点。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这样，一个AC自动机就做好了。&lt;/p&gt;
&lt;p&gt;注意到由于辅助节点的存在，我们不需要做任何特判，在树上没有后缀的节点的fail指针会自动连向根节点。&lt;/p&gt;
&lt;p&gt;构建fail指针的代码：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;void build()
{
    for(int i=0;i&amp;lt;26;++i)ch[0][i]=1;
    fail[1]=0;
    queue&amp;lt;int&amp;gt;q;
    q.push(1);
    while(!q.empty())
    {
        int x=q.front();q.pop();
        for(int i=0;i&amp;lt;26;++i)
        {
            int c=ch[x][i];
            if(!c)continue;
            int fa=fail[x];
            while(fa&amp;amp;&amp;amp;!ch[fa][i])fa=fail[fa];
            fail[c]=ch[fa][i];
            q.push(c);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;如何利用ac自动机来查找&quot;&gt;如何利用AC自动机来查找&lt;/h2&gt;
&lt;p&gt;这个问题似乎显而易见，只要根据文本串的内容沿着Trie树的边往下走就行了，一失配就沿着fail边向上跳。&lt;/p&gt;
&lt;p&gt;。。。&lt;/p&gt;
&lt;p&gt;我在被大佬虐飞之前也是这么想的QwQ&lt;/p&gt;
&lt;p&gt;fail边不只是失配指针这么简单，如果你像我刚才说的那么做的话，你就可能会面临下面这样的问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213357245-1362436414.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了不让这种事情发生，我们每遇到一个fail指针就必须向上跳到顶，以保证不会漏过任何一个子串，就像这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213408820-186250902.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，这样未免也太蠢了，于是这里又有一个小优化：如果一个节点的fail指向一个结尾节点，那么这个点也成为一个（伪）结尾节点。在匹配时，如果遇到结尾节点，就进行相应的计数处理。&lt;/p&gt;
&lt;p&gt;进行匹配的代码：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;void print(int x)
{
    while(x)
    {
        if(end[x])
        {
            //计数、打印等等，视题目要求而定
        }
        x=fail[x];
    }
}

void match(char *s)
{
    int len=strlen(s),now=1;
    for(int i=0;i&amp;lt;len;++i)
    {
        int id=s[i]-'a';
        while(now&amp;amp;&amp;amp;!ch[now][id])now=fail[now];
        now=ch[now][id];
        if(end[now]||en[now])print(now);
        //en[now]即为伪结尾标记
    }
}

//记得在build中加上这句话
void build()
{
    ...
    if(end[fail[c]])en[c]=1;
    ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;一个被我们忽略的问题&quot;&gt;一个被我们忽略的问题&lt;/h2&gt;
&lt;p&gt;时间复杂度？？？&lt;/p&gt;
&lt;p&gt;设模式串平均长度为 $ l $ ，建树复杂度为 $ O(nl) $ ，构建fail指针为 $ O(nl) $ ，匹配时因为每次都要跳fail边，复杂度上界可以达到 $ O(ml) $ ，所以总复杂度为 $ O((n+m)l) $ ！&lt;/p&gt;
&lt;p&gt;这和暴力有什么区别(╯°Д°)╯︵┻━┻？？？&lt;/p&gt;
&lt;p&gt;虽然说，这个上界应该是十分松的，但是我们想要的是能跑 $ 1e6 $ 的速度！&lt;/p&gt;
&lt;p&gt;这个时候我们就需要优化了。。。然而我已经没时间写辣QwQ!这些就留到下一篇博客吧！&lt;/p&gt;
&lt;p&gt;谢谢你的资瓷啦QwQ!&lt;/p&gt;
</description>
<pubDate>Tue, 03 Jul 2018 13:49:00 +0000</pubDate>
<dc:creator>sclbgw7</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sclbgw7/p/9260756.html</dc:identifier>
</item>
</channel>
</rss>