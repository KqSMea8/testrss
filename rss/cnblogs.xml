<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Swarm 如何实现 Failover？- 每天5分钟玩转 Docker 容器技术（98） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/7898245.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/7898245.html</guid>
<description>&lt;p&gt;&lt;span&gt;故障是在所难免的，容器可能崩溃，Docker Host 可能宕机，不过幸运的是，Swarm 已经内置了 failover 策略。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;创建 service 的时候，我们没有告诉 swarm 发生故障时该如何处理，只是说明了我们期望的状态（比如运行3个副本），swarm 会尽最大的努力达成这个期望状态，无论发生什么状况。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以上一节我们部署的 Service 为例，当前 3 个副本分布在 swarm-worker1 和 swarm-worker2 上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;483.png&quot; src=&quot;https://i.imgsafe.org/69/696b392283.png&quot; alt=&quot;483.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在我们测试 swarm 的 failover 特性，关闭 swarm-worker1。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;484.png&quot; src=&quot;https://i.imgsafe.org/68/68b9d72e0d.png&quot; alt=&quot;484.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Swarm 会检测到 swarm-worker1 的故障，并标记为 &lt;/span&gt;&lt;span&gt;Down&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;487.png&quot; src=&quot;https://i.imgsafe.org/68/68c9b0550a.png&quot; alt=&quot;487.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Swarm 会将 &lt;span&gt;swarm-worker1 上的&lt;/span&gt;副本调度到其他可用节点。我们可以通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker service ps&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; 观察这个 failover 过程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;485.png&quot; src=&quot;https://i.imgsafe.org/68/68bc7c2082.png&quot; alt=&quot;485.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;可以看到，&lt;code&gt;&lt;span&gt;web_server.1&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;web_server.2&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;span&gt;已经从 swarm-worker1 迁移到了 swarm-worker2，之前运行在故障节点 swarm-worker1 上的副本状态被标记为&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;Shutdown&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;486.png&quot; src=&quot;https://i.imgsafe.org/68/68c7f23110.png&quot; alt=&quot;486.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Service 的 failover 就讨论到这里，下一节我们学习如何访问 Service。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://www.cnblogs.com/Users/wanglei/百度云同步盘/容器/images/480.png?v=1510821977521&quot; alt=&quot;&quot;/&gt;&lt;span&gt;&lt;strong&gt;书籍：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;2.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;2.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 26 Nov 2017 23:54:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/7898245.html</dc:identifier>
</item>
<item>
<title>Entity Framework Core 使用HiLo生成主键 - Sweet-Tang</title>
<link>http://www.cnblogs.com/tdfblog/p/entity-framework-core-hilo.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tdfblog/p/entity-framework-core-hilo.html</guid>
<description>&lt;p&gt;HiLo是在NHiernate中生成主键的一种方式，不过现在我们可以在Entity Framework Core中使用。所以在这篇内容中，我将向您在介绍如何在Entity Framework Core中使用HiLo生成主键。&lt;/p&gt;
&lt;h2 id=&quot;什么是hilo&quot;&gt;什么是Hilo？&lt;/h2&gt;
&lt;p&gt;HiLo是High Low的简写，翻译成中文叫高低位模式。&lt;/p&gt;
&lt;p&gt;HiLo是由“Hi”和“Lo”两部分生成主键的一种模式。“Hi”部分来自数据库，“Lo”部分在内存中生成以创建唯一值。请记住，“Lo”是一个范围数字，如0-100。因此，当“Hi”部分用完“Lo”范围时，再次进行数据库调用以获得下一个“Hi数字”。&lt;strong&gt;所以HiLo模式的优点在于您预先可以知道主键的值，而不用每次都与数库据发生交互&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;总结有以下四点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;“Hi”部分由数据库分配，两个并发请求保证得到唯一的连续值；&lt;/li&gt;
&lt;li&gt;一旦获取“Hi”部分，我们还需要知道“incrementSize”的值（“Lo”条目的数量）；&lt;br/&gt;“Lo”取的范围：[0,incrementSize];&lt;/li&gt;
&lt;li&gt;标识范围的公式是：&lt;strong&gt;(Hi - 1) * incrementSize) + 1&lt;/strong&gt; 到 &lt;strong&gt;(Hi - 1) * incrementSize) + incrementSize)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;当所有“Lo”值使用完时，需要重新从数据库中取出一个新的“Hi”值，并将“Lo”部分重置为0。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在这里演示在两个并发事务中的例子，每个事务插入多个实体：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/162090/201711/162090-20171124083541078-1042104931.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;sql-server-序列&quot;&gt;Sql Server 序列&lt;/h2&gt;
&lt;p&gt;在EF Core中使用HiLo生成主键，我们还需要了解Sql Server中一个概念&lt;strong&gt;序列（Sequence）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;序列是在SQL Server 2012中引入的（不过Oracle很早就已经实现了&lt;a href=&quot;http://docs.oracle.com/cd/B19306_01/server.102/b14200/statements_6015.htm&quot; class=&quot;uri&quot;&gt;http://docs.oracle.com/cd/B19306_01/server.102/b14200/statements_6015.htm&lt;/a&gt;）。序列是用户定义的对象，它根据创建的属性生成一系列数值。它与 &lt;em&gt;Identity&lt;/em&gt; 列相似，但它们之间有很多不同之处。例如，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;序列用于生成数据库范围的序列号；&lt;/li&gt;
&lt;li&gt;序列不与一个表相关联，您可以将其与多个表相关联；&lt;/li&gt;
&lt;li&gt;它可以用于插入语句来插入标识值，也可以在T-SQL脚本中使用。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;创建序列示例的SQL语句：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;Sequence&lt;/span&gt; [dbo].[Sequence_Test] 
&lt;span class=&quot;kw&quot;&gt;As&lt;/span&gt; [BigInt]         &lt;span class=&quot;co&quot;&gt;--整数类型&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;Start&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;With&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;        &lt;span class=&quot;co&quot;&gt;--起始值&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;Increment&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;By&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;      &lt;span class=&quot;co&quot;&gt;--增量值&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;MinValue&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;          &lt;span class=&quot;co&quot;&gt;--最小值&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;MaxValue&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;9999999&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;--最大值&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;Cycle&lt;/span&gt;               &lt;span class=&quot;co&quot;&gt;--达到最值循环 [ CYCLE | NO CYCLE ]&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;Cache&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;;           &lt;span class=&quot;co&quot;&gt;--每次取出5个值缓存使用 [ CACHE [&amp;lt;常量&amp;gt;] | NO CACHE ]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用示例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;Table&lt;/span&gt; #T(&lt;span class=&quot;kw&quot;&gt;Id&lt;/span&gt; BigInt &lt;span class=&quot;kw&quot;&gt;Primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;Key&lt;/span&gt;,[&lt;span class=&quot;dt&quot;&gt;Time&lt;/span&gt;] DateTime);

&lt;span class=&quot;kw&quot;&gt;Insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;Into&lt;/span&gt; #T
            ( &lt;span class=&quot;kw&quot;&gt;Id&lt;/span&gt; , &lt;span class=&quot;dt&quot;&gt;Time&lt;/span&gt; )
&lt;span class=&quot;kw&quot;&gt;Values&lt;/span&gt;      ( &lt;span class=&quot;kw&quot;&gt;NEXT&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;FOR&lt;/span&gt; [dbo].[Sequence_Test] , &lt;span class=&quot;co&quot;&gt;-- Id - bigint&lt;/span&gt;
              GetDate()  &lt;span class=&quot;co&quot;&gt;-- Time - datetime&lt;/span&gt;
              )
Go &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;From&lt;/span&gt; #T&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查询结果：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2017-11-23 16:46:50.613&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2017-11-23 16:46:50.643&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2017-11-23 16:46:50.667&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2017-11-23 16:46:50.677&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;2017-11-23 16:46:50.687&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;2017-11-23 16:46:50.697&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2017-11-23 16:46:50.707&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;2017-11-23 16:46:50.717&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;2017-11-23 16:46:50.730&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;2017-11-23 16:46:50.740&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;关于序列更多的内容，可以查阅如下资料：&lt;/p&gt;
&lt;h2 id=&quot;使用hilo生成主键&quot;&gt;使用HiLo生成主键&lt;/h2&gt;
&lt;p&gt;让我们看看如何使用HiLo在Entity Framework Core中生成主键。&lt;/p&gt;
&lt;p&gt;为了演示，我们创建了两个没有关系的实体。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public class Category
    {
        public int CategoryID { get; set; }
        public string CategoryName { get; set; }
    }
    
    public class Product
    {
        public int ProductID { get; set; }
        public string ProductName { get; set; }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;请记住，EF Core按惯例配置一个名为&lt;strong&gt;Id&lt;/strong&gt;或&lt;strong&gt;&amp;lt;type name&amp;gt;Id&lt;/strong&gt;作为实体的主键属性。现在我们需要创建我们的&lt;code&gt;DBContext&lt;/code&gt;，在这里我们创建&lt;code&gt;SampleDBContext.cs&lt;/code&gt;类：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class SampleDBContext : DbContext
{
    public SampleDBContext()
    {
        Database.EnsureDeleted();
        Database.EnsureCreated();
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionbuilder)
    {
            var sqlConnectionStringBuilder = new SqlConnectionStringBuilder {
                DataSource = &quot;****&quot;,
                InitialCatalog = &quot;EFSampleDB&quot;,
                UserID = &quot;sa&quot;,
                Password = &quot;***&quot;
            };
            optionsBuilder.UseSqlServer(sqlConnectionStringBuilder.ConnectionString);

    }

    protected override void OnModelCreating(ModelBuilder modelbuilder)
    {
        modelbuilder.ForSqlServerUseSequenceHiLo(&quot;DBSequenceHiLo&quot;);
    }

    public DbSet&amp;lt;Product&amp;gt; Products { get; set; }
    public DbSet&amp;lt;Category&amp;gt; Categories { get; set; }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;在&lt;code&gt;SampleDBContext&lt;/code&gt;构造函数初始化数据库，类型于EF 6中的&lt;code&gt;DropCreateDatabaseAlways&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OnConfiguring()&lt;/code&gt; 方法用于配置数据库链接字符串；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OnModelCreating&lt;/code&gt;方法用于定义实体模型。要定义HiLo序列，请使用&lt;code&gt;ForSqlServerUseSequenceHiLo&lt;/code&gt;扩展方法。您需要提供序列的名称。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;运行应用程序，您应该在创建“EFSampleDB”数据库中看到&lt;code&gt;Product&lt;/code&gt;表、&lt;code&gt;Category&lt;/code&gt;表和&lt;code&gt;DBSequenceHiLo&lt;/code&gt;序列。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/162090/201711/162090-20171123182704727-309100699.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以下是创建&lt;code&gt;DBSequenceHiLo&lt;/code&gt;的脚本。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;Sequence&lt;/span&gt; [dbo].[DBSequenceHiLo] 
 &lt;span class=&quot;kw&quot;&gt;As&lt;/span&gt; [BigInt]
 &lt;span class=&quot;kw&quot;&gt;Start&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;With&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
 &lt;span class=&quot;kw&quot;&gt;Increment&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;By&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;
 &lt;span class=&quot;kw&quot;&gt;MinValue&lt;/span&gt; -&lt;span class=&quot;dv&quot;&gt;9223372036854775808&lt;/span&gt;
 &lt;span class=&quot;kw&quot;&gt;MaxValue&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;9223372036854775807&lt;/span&gt;
 &lt;span class=&quot;kw&quot;&gt;Cache&lt;/span&gt; 
Go&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正如你所看到的，它从1开始，递增是10。&lt;/p&gt;
&lt;p&gt;现在向数据库中添加一些数据。以下代码首先添加3个&lt;code&gt;Category&lt;/code&gt;实体和调用&lt;code&gt;SaveChanges()&lt;/code&gt;，然后添加3个&lt;code&gt;Product&lt;/code&gt;实体并调用&lt;code&gt;SaveChanges()&lt;/code&gt;。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    using (var dataContext = new SampleDBContext())
    {
        dataContext.Categories.Add(new Category() { CategoryName = &quot;Clothing&quot; });
        dataContext.Categories.Add(new Category() { CategoryName = &quot;Footwear&quot; });
        dataContext.Categories.Add(new Category() { CategoryName = &quot;Accessories&quot; });
        dataContext.SaveChanges();
        dataContext.Products.Add(new Product() { ProductName = &quot;TShirts&quot; });
        dataContext.Products.Add(new Product() { ProductName = &quot;Shirts&quot; });
        dataContext.Products.Add(new Product() { ProductName = &quot;Causal Shoes&quot; });
        dataContext.SaveChanges();
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当这个代码第一次被执行，&lt;em&gt;Clothing&lt;/em&gt; 实体通过&lt;code&gt;Add&lt;/code&gt;方法增加到&lt;code&gt;DBContext&lt;/code&gt;时，就会向数据库调用获取序列的值，我们也可以通过SQL Server Profiler来验证它。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/162090/201711/162090-20171123182747883-190075438.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;次调用&lt;code&gt;dataContext.SaveChanges()&lt;/code&gt;时，3个&lt;code&gt;Category&lt;/code&gt;实体将被保存。查看执行的SQL语句。主键值已经被生成，序列值的获取也只执行了一次。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/162090/201711/162090-20171123182759211-1689933317.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;即使插入3个&lt;code&gt;Product&lt;/code&gt;实体，序列值也不会从数据库中获取。只有当插入10条记录（Lo部分耗尽）时，才会向数据库调用获得下一个（Hi部分）序列值。&lt;/p&gt;
&lt;h2 id=&quot;向hilo运用到单个实体&quot;&gt;向HiLo运用到单个实体&lt;/h2&gt;
&lt;p&gt;上面的代码两个表共用一个HiLo序列。如果您只想针对一个特定的表，那么您可以使用下面的代码。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    modelbuilder.Entity&amp;lt;Category&amp;gt;().
            Property(o =&amp;gt; o.CategoryID).ForSqlServerUseSequenceHiLo();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这段代码将创建一个默认名称为“EntityFrameworkHiLoSequence”的新序列，因为没有指定名字。您也可以定义多个HiLo序列。例如：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    protected override void OnModelCreating(ModelBuilder modelbuilder)
    {
        modelbuilder.ForSqlServerUseSequenceHiLo(&quot;DBSequenceHiLo&quot;);
        modelbuilder.Entity&amp;lt;Category&amp;gt;()
                .Property(o =&amp;gt; o.CategoryID).ForSqlServerUseSequenceHiLo();
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在数据库中，将创建两个序列。&lt;code&gt;Category&lt;/code&gt;实体将使用&lt;code&gt;EntityFrameworkHiLoSequence&lt;/code&gt;序号，所有其它实体使用&lt;code&gt;DBSequenceHiLo&lt;/code&gt;序列。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/162090/201711/162090-20171123183850774-557579470.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置hilo序列&quot;&gt;配置HiLo序列&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ForSqlServerHasSequence&lt;/code&gt;扩展方法不能更改起始值和增量值的选项。但是，有一种方法来定义这些选项。首先，使用&lt;code&gt;HasSequence&lt;/code&gt;方法定义序列的&lt;code&gt;StartAt&lt;/code&gt;和&lt;code&gt;IncrementBy&lt;/code&gt;选项，然后再使用&lt;code&gt;ForSqlServerUseSequenceHiLo()&lt;/code&gt;扩展方法，要保持序列的名称一致。例如：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    modelbuilder.HasSequence&amp;lt;int&amp;gt;(&quot;DBSequenceHiLo&quot;)
                      .StartsAt(1000).IncrementsBy(5);
    modelbuilder.ForSqlServerUseSequenceHiLo(&quot;DBSequenceHiLo&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在这种情况下，生成&lt;code&gt;DBSequenceHiLo&lt;/code&gt;的脚本如下。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;SEQUENCE&lt;/span&gt; [dbo].[DBSequenceHiLo] 
 &lt;span class=&quot;kw&quot;&gt;AS&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;]
 &lt;span class=&quot;kw&quot;&gt;START&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;
 &lt;span class=&quot;kw&quot;&gt;INCREMENT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;
 &lt;span class=&quot;kw&quot;&gt;MINVALUE&lt;/span&gt; -&lt;span class=&quot;dv&quot;&gt;2147483648&lt;/span&gt;
 &lt;span class=&quot;kw&quot;&gt;MAXVALUE&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2147483647&lt;/span&gt;
 &lt;span class=&quot;kw&quot;&gt;CACHE&lt;/span&gt; 
GO&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以当我们执行相同的代码插入3个&lt;code&gt;Category&lt;/code&gt;实体，那么主键的值将从1000开始。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/162090/201711/162090-20171123184143243-632801559.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而且由于&lt;code&gt;IncrementBy&lt;/code&gt;选项设置为“5”，所以当在上下文中添加第6个插入时，将进行数据库调用以获得下一个序列值。以下是插入3个&lt;code&gt;Category&lt;/code&gt;实体然后插入3个的&lt;code&gt;Product&lt;/code&gt;实体时SQL Server profiler的屏幕截图，您可以看到数据库调用获取序列的下一个值的次数是2次。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/162090/201711/162090-20171123184149336-1273533600.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果您对在Entity Framework Core中使用HiLo生成主键感兴趣，不防自己动手测试一下。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
</description>
<pubDate>Sun, 26 Nov 2017 23:28:00 +0000</pubDate>
<dc:creator>Sweet-Tang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tdfblog/p/entity-framework-core-hilo.html</dc:identifier>
</item>
<item>
<title>geotrellis使用（三十五）Cesium加载geotrellis TMS瓦片 - shoufengwei</title>
<link>http://www.cnblogs.com/shoufengwei/p/7901428.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shoufengwei/p/7901428.html</guid>
<description>&lt;p&gt;做任何事情都不是想象中的那么简单。好久没有更新技术博客了，跟最近瞎忙有很大关系，虽说是瞎忙也抽空研究了些技术。&lt;/p&gt;
&lt;p&gt;主要是前端渲染，像原生的WebGL和Cesium。WebGL写了几篇博客，自我感觉还可以。Cesium是一个封装好的WEB端3D Earth框架，有了WebGL的基础之后切换到Cesium按理说一切应该是顺理成章，简单的测试了几个功能之后发现确实非常好，简单的几行代码就可以实现Google Earth的功能，当然Google Earth重要的绝对不是他的渲染框架。&lt;/p&gt;
&lt;p&gt;前期做了很多Geotrellis的工作，那么我就想着能不能把Geotrellis发布的TMS加载到Cesium中来，本来这是很简单的嘛，以前是在leaft-let中显示，现在就是换一个地方显示而已，并且Cesium已经调通。说干就干，结果怎么着，&lt;strong&gt;前天晚上整到四点，昨天折腾了几个小时&lt;/strong&gt;居然一直&lt;strong&gt;不出图&lt;/strong&gt;，所以我说任何看似简单的事情其实都不简单，下面就让我娓娓道来。&lt;/p&gt;

&lt;h2 id=&quot;简介&quot;&gt;1.1 简介&lt;/h2&gt;
&lt;p&gt;介绍之前还是来简单介绍一下Cesium，当然如果后面继续对此框架进行研究的话可能也会多写几篇关于此框架的博客。&lt;/p&gt;
&lt;p&gt;官网地址：&lt;a href=&quot;https://cesiumjs.org/&quot; class=&quot;uri&quot;&gt;https://cesiumjs.org/&lt;/a&gt;，Github地址：&lt;a href=&quot;https://github.com/AnalyticalGraphicsInc/cesium&quot; class=&quot;uri&quot;&gt;https://github.com/AnalyticalGraphicsInc/cesium&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;其功能简单明了，当然也很强大，基础教程可以参考&lt;a href=&quot;http://blog.csdn.net/UmGsoil/article/category/7005304&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/UmGsoil/article/category/7005304&lt;/a&gt;，当然官方文档更好。&lt;/p&gt;
&lt;h2 id=&quot;简单使用&quot;&gt;1.2 简单使用&lt;/h2&gt;
&lt;p&gt;无需考虑这么复杂，从简单里说Cesium就是一个前端地图渲染引擎，与leaft-let、OpenLayer相同，只是Cesium做成了3D的。所以从基础功能都是相似的。&lt;/p&gt;
&lt;p&gt;首先在html页面加载Cesium，如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello 3D Earth&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;CesiumUnminified/Cesium.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;dv&quot;&gt;@import&lt;/span&gt; url(CesiumUnminified/Widgets/widgets&lt;span class=&quot;dt&quot;&gt;.&lt;/span&gt;css)&lt;span class=&quot;dv&quot;&gt;;&lt;/span&gt;
        html, body, &lt;span class=&quot;fl&quot;&gt;#cesiumContainer&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;overflow:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;cesiumContainer&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;my_js.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中CesiumUnminified存储了相关文件，从Github中下载即可。&lt;code&gt;my_js.js&lt;/code&gt;是我们自己要写的js文件。my_js.js最简单的情况只需要一句话即可：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; viewer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Viewer&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;cesiumContainer&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样浏览器就会渲染出一个3维地球并自动加载微软的影像地图。那么如何更改或者添加图层呢？&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;29&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; viewer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Viewer&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;cesiumContainer&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//是否显示动画控件(左下方那个)&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;baseLayerPicker&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//是否显示图层选择控件&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;geocoder&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//是否显示地名查找控件&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;timeline&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//是否显示时间线控件&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;sceneModePicker&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//是否显示投影方式控件&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;navigationHelpButton&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//是否显示帮助信息控件&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;infoBox&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//是否显示点击要素之后显示的信息&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;imageryProvider &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;WebMapTileServiceImageryProvider&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://t0.tianditu.com/vec_w/wmts?service=wmts&amp;amp;request=GetTile&amp;amp;version=1.0.0&amp;amp;LAYER=vec&amp;amp;tileMatrixSet=w&amp;amp;TileMatrix={TileMatrix}&amp;amp;TileRow={TileRow}&amp;amp;TileCol={TileCol}&amp;amp;style=default&amp;amp;format=tiles&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;tdtVecBasicLayer&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;image/jpeg&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;tileMatrixSetID&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;GoogleMapsCompatible&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;geocoder&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// no default bing maps&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//全球影像中文注记服务&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;viewer&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;imageryLayers&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addImageryProvider&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;WebMapTileServiceImageryProvider&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://t0.tianditu.com/cia_w/wmts?service=wmts&amp;amp;request=GetTile&amp;amp;version=1.0.0&amp;amp;LAYER=cia&amp;amp;tileMatrixSet=w&amp;amp;TileMatrix={TileMatrix}&amp;amp;TileRow={TileRow}&amp;amp;TileCol={TileCol}&amp;amp;style=default.jpg&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;tdtAnnoLayer&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;image/jpeg&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;tileMatrixSetID&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;GoogleMapsCompatible&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码就会自动在3维地球中加载天地图的线划图并添加注记。所以剩下的事情就很简单了，只需要再添加我自己的TMS即可。&lt;/p&gt;
&lt;h2 id=&quot;问题来了&quot;&gt;1.3 问题来了&lt;/h2&gt;
&lt;p&gt;在上述代码下方添加如下代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; layers &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;va&quot;&gt;viewer&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;scene&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;imageryLayers&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//所有图层(非基本图层)&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; layer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;layers&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addImageryProvider&lt;/span&gt;(
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;UrlTemplateImageryProvider&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;url &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'http://xxxx/modis/ndvi/{z}/{x}/{y}'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;image/png&quot;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//50%透明度&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;layer&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//两倍亮度&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;layer&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;brightness&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很简单的代码，获取图层对象，然后添加一层，url为我们自己的瓦片请求格式，这是我用Geotrellis发布的modis数据ndvi服务。并设置该图层透明度和增加亮度防止盖住上面的注记层。本来应该是点击一下刷新就出来效果的事情，结果足足折腾到我崩溃。&lt;/p&gt;
&lt;p&gt;无论怎么刷新就是出不来那层瓦片，其他两层数据正常显示，打开浏览器的调试模式，能够看到对ndvi瓦片的请求返回的都是200 OK，也能在调试中看到单个瓦片应有的效果。然后变换各种添加图层的格式（UrlTemplateImageryProvider、WebMapTileServiceImageryProvider、Cesium.createTileMapServiceImageryProvider这些不是本文重点，在后续文章详细介绍）均显示不出瓦片，而后又去掉其他两层瓦片只保留NDVI，最后又添加Geotrellis发布的其他TMS服务，但是无论怎么折腾，只要是我自己Geotrellis发布的TMS均无法显示，折腾到四点多，始终没有出来，在stackoverflow和github上提了问，等了半天也无人回复，只好闷闷不乐的去睡了。&lt;/p&gt;

&lt;h2 id=&quot;转角遇到答案&quot;&gt;2.1 转角遇到答案&lt;/h2&gt;
&lt;p&gt;今天中午小睡片刻，起床后收到一封邮件，赶紧打开看了一下，是Github的回复邮件，喜出望外，结果一看内容原来是告诉我不要在Issue中发布提问，告诉了我Google的提问列表（&lt;a href=&quot;https://groups.google.com/forum/#!msg/cesium-dev/RfAlZZkPBaM/xGOK01trAwAJ;context-place=forum/cesium-dev&quot; class=&quot;uri&quot;&gt;https://groups.google.com/forum/#!msg/cesium-dev/RfAlZZkPBaM/xGOK01trAwAJ;context-place=forum/cesium-dev&lt;/a&gt;），整个人当时就不好了，既然这样只有上去瞅瞅，打开简单一搜索，居然有现成的，问题描述跟我的一模一样，解决方案是添加CORS。&lt;/p&gt;
&lt;p&gt;其实我之前折腾到四点多的时候脑子里就有这个意识，一定是我发布的TMS缺少了某个东西（或者是某个东西与Cesium的要求不一致），导致Cesium无法正常显示我的瓦片，所以一看到这个我就亢奋了，程序员的直觉告诉我这肯定就是我要找的东西。&lt;/p&gt;
&lt;h2 id=&quot;解决&quot;&gt;2.2 解决&lt;/h2&gt;
&lt;p&gt;所以问题就来了，看样子我要在Geotrellis中折腾CORS了。Geotrellis采用Scala语言开发，所以我也是拿Scala写的，发布网络服务用的是Akka，Akka是开源的网络服务框架，于是就搜索了一下Akka CORS，很快就有了答案。&lt;/p&gt;
&lt;p&gt;关于CORS的介绍，看这篇文章就够了：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/04/cors.html&quot; class=&quot;uri&quot;&gt;http://www.ruanyifeng.com/blog/2016/04/cors.html&lt;/a&gt;。CORS简单来说就是跨域资源共享，当跨域进行Ajax请求的时候进行权限验证等操作。其实细细想来倒是这么回事，Cesium请求瓦片一定用的是XMLHttpRequest，而我的TMS又未使用CORS，于是怎么折腾都出不来结果，当然对这块不太熟悉是导致问题发生的直接原因。&lt;/p&gt;
&lt;p&gt;找到问题解决就很容易了，Github中有现成的解决方案。首先添加一个CorsSupport特质，如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode scala&quot;&gt;
&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; akka.&lt;span class=&quot;fu&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;scaladsl&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;HttpHeader&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; akka.&lt;span class=&quot;fu&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;scaladsl&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;HttpMethods&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;_&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; akka.&lt;span class=&quot;fu&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;scaladsl&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;HttpResponse&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; akka.&lt;span class=&quot;fu&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;scaladsl&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;headers&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;_&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; akka.&lt;span class=&quot;fu&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;scaladsl&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;headers&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Origin&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; akka.&lt;span class=&quot;fu&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;scaladsl&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Directive0&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; akka.&lt;span class=&quot;fu&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;scaladsl&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Directives&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;_&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; akka.&lt;span class=&quot;fu&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;scaladsl&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;MethodRejection&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; akka.&lt;span class=&quot;fu&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;scaladsl&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;RejectionHandler&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;trait&lt;/span&gt; CorsSupport {

  &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; corsAllowOrigins: List[String]

  &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; corsAllowedHeaders: List[String]

  &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; corsAllowCredentials: Boolean

  &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; optionsCorsHeaders: List[HttpHeader]

  &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;corsRejectionHandler&lt;/span&gt;(allowOrigin: `Access-Control-Allow-Origin`) =
    RejectionHandler
    .&lt;span class=&quot;fu&quot;&gt;newBuilder&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;handle&lt;/span&gt; {
      &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;MethodRejection&lt;/span&gt;(supported) =&amp;gt;
        &lt;span class=&quot;fu&quot;&gt;complete&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;HttpResponse&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;withHeaders&lt;/span&gt;(
          `Access-Control-Allow-Methods`(OPTIONS, supported) ::
            allowOrigin ::
            optionsCorsHeaders
        ))
    }
    .&lt;span class=&quot;fu&quot;&gt;result&lt;/span&gt;()

  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;originToAllowOrigin&lt;/span&gt;(origin: Origin): Option[`Access-Control-Allow-Origin`] =
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (corsAllowOrigins.&lt;span class=&quot;fu&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;*&quot;&lt;/span&gt;) || corsAllowOrigins.&lt;span class=&quot;fu&quot;&gt;contains&lt;/span&gt;(origin.&lt;span class=&quot;fu&quot;&gt;value&lt;/span&gt;))
      origin.&lt;span class=&quot;fu&quot;&gt;origins&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;headOption&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt;(`Access-Control-Allow-Origin`.&lt;span class=&quot;fu&quot;&gt;apply&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
      None

  &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; cors[T]: Directive0 = mapInnerRoute { route =&amp;gt; context =&amp;gt;
    ((context.&lt;span class=&quot;fu&quot;&gt;request&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;method&lt;/span&gt;, context.&lt;span class=&quot;fu&quot;&gt;request&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;header&lt;/span&gt;[Origin].&lt;span class=&quot;fu&quot;&gt;flatMap&lt;/span&gt;(originToAllowOrigin)) &lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt; {
      &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; (OPTIONS, Some(allowOrigin)) =&amp;gt;
        &lt;span class=&quot;fu&quot;&gt;handleRejections&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;corsRejectionHandler&lt;/span&gt;(allowOrigin)) {
          &lt;span class=&quot;fu&quot;&gt;respondWithHeaders&lt;/span&gt;(allowOrigin, `Access-Control-Allow-Credentials`(corsAllowCredentials)) {
            route
          }
        }
      &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; (_, Some(allowOrigin)) =&amp;gt;
        &lt;span class=&quot;fu&quot;&gt;respondWithHeaders&lt;/span&gt;(allowOrigin, `Access-Control-Allow-Credentials`(corsAllowCredentials)) {
          route
        }
      &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; (_, _) =&amp;gt;
        route
    })(context)
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;尔后在发布TMS服务的类中实现该特质：重写虚方法，并在原先发布TMS服务的地方将原结果传入cors方法：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode scala&quot;&gt;
&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span class=&quot;kw&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; corsAllowOrigins: List[String] = List(&lt;span class=&quot;st&quot;&gt;&quot;*&quot;&lt;/span&gt;)

&lt;span class=&quot;kw&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; corsAllowedHeaders: List[String] = List(&lt;span class=&quot;st&quot;&gt;&quot;Origin&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;X-Requested-With&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Accept&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Accept-Language&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Host&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Referer&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;)

&lt;span class=&quot;kw&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; corsAllowCredentials: Boolean = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; optionsCorsHeaders: List[HttpHeader] = List[HttpHeader](
`Access-Control-Allow-Headers`(corsAllowedHeaders.&lt;span class=&quot;fu&quot;&gt;mkString&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;, &quot;&lt;/span&gt;)),
`Access-Control-Max-Age`(&lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt; * &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;), &lt;span class=&quot;co&quot;&gt;// cache pre-flight response for 20 days&lt;/span&gt;
`Access-Control-Allow-Credentials`(corsAllowCredentials)
)

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; service = cors {
    &lt;span class=&quot;fu&quot;&gt;pathPrefix&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;map&quot;&lt;/span&gt;) {
        ...
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意此处的cors方法，其本身是一个无参数方法，此处传入的是Directive0的def tapply(f: L ⇒ Route): Route参数，所以返回的仍然是Route类型。&lt;/p&gt;
&lt;p&gt;上述两段代码实现的就是将TMS服务实现CORS服务。请求的域为*，即任何域都可；请求头为&quot;Origin&quot;, &quot;X-Requested-With&quot;, &quot;Content-Type&quot;, &quot;Accept&quot;, &quot;Accept-Encoding&quot;, &quot;Accept-Language&quot;, &quot;Host&quot;, &quot;Referer&quot;, &quot;User-Agent&quot;；并支持发送cookie等认证。完成上述改造后重新编译运行geotrellis程序，刷新浏览器即可看到我们想要的结果，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/704456/201711/704456-20171127005619203-135111973.jpg&quot;/&gt;&lt;/p&gt;

&lt;p&gt;本文简单记录了将Cesium和Geotrellis结合中碰到的一个小问题，只是刚开始，后续估计问题会更多，无他法，只能咬着牙往下走。结果很简单，折腾的时间却很长，但是不折腾肯定是不会有结果的，只能是想办法加快折腾的速度。当然有些东西一定会记得你的折腾，比如腰椎颈椎当然还有大脑，在折腾中你会对整体框架更加熟悉。&lt;/p&gt;
&lt;blockquote readability=&quot;2.0481927710843&quot;&gt;
&lt;p&gt;Geotrellis系列文章链接地址&lt;a href=&quot;http://www.cnblogs.com/shoufengwei/p/5619419.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/shoufengwei/p/5619419.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sun, 26 Nov 2017 16:58:00 +0000</pubDate>
<dc:creator>shoufengwei</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shoufengwei/p/7901428.html</dc:identifier>
</item>
<item>
<title>高性能分布式执行框架——Ray - Florian</title>
<link>http://www.cnblogs.com/fanzhidongyzby/p/7901139.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fanzhidongyzby/p/7901139.html</guid>
<description>&lt;p&gt;Ray是UC Berkeley RISELab新推出的高性能分布式执行框架，它使用了和传统分布式计算系统不一样的架构和对分布式计算的抽象方式，具有比Spark更优异的计算性能。&lt;/p&gt;
&lt;p&gt;Ray目前还处于实验室阶段，最新版本为&lt;a href=&quot;https://github.com/ray-project/ray/tree/ray-0.2.2&quot;&gt;0.2.2版本&lt;/a&gt;。虽然Ray自称是面向AI应用的分布式计算框架，但是它的架构具有通用的分布式计算抽象。本文对Ray进行简单的介绍，帮助大家更快地了解Ray是什么，如有描述不当的地方，欢迎不吝指正。&lt;/p&gt;
&lt;h2 id=&quot;一简单开始&quot;&gt;一、简单开始&lt;/h2&gt;
&lt;p&gt;首先来看一下最简单的Ray程序是如何编写的。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 导入ray，并初始化执行环境&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ray
ray.init()

&lt;span class=&quot;co&quot;&gt;# 定义ray remote函数&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;@ray.remote&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; hello():
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Hello world !&quot;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;# 异步执行remote函数，返回结果id&lt;/span&gt;
object_id &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; hello.remote()

&lt;span class=&quot;co&quot;&gt;# 同步获取计算结果&lt;/span&gt;
hello &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ray.get(object_id)

&lt;span class=&quot;co&quot;&gt;# 输出计算结果&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; hello&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Ray里，通过Python注解&lt;code&gt;@ray.remote&lt;/code&gt;定义remote函数。使用此注解声明的函数都会自带一个默认的方法&lt;code&gt;remote&lt;/code&gt;，通过此方法发起的函数调用都是以提交分布式任务的方式异步执行的，函数的返回值是一个对象id，使用&lt;code&gt;ray.get&lt;/code&gt;内置操作可以同步获取该id对应的对象。熟悉Java里的Future机制的话对此应该并不陌生，或许会有人疑惑这和普通的异步函数调用没什么大的区别，但是这里最大的差异是，函数hello是分布式异步执行的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;remote函数是Ray分布式计算抽象中的核心概念&lt;/strong&gt;，通过它开发者拥有了动态定制计算依赖（任务DAG）的能力。比如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;at&quot;&gt;@ray.remote&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; A():
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;A&quot;&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;@ray.remote&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; B():
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;B&quot;&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;@ray.remote&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; C(a, b):
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt;

a_id &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; A.remote()
b_id &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; B.remote()
c_id &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; C.remote(a_id, b_id)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; ray.get(c_id)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子代码中，对函数A、B的调用是完全并行执行的，但是对函数C的调用依赖于A、B函数的返回结果。Ray可以保证函数C需要等待A、B函数的结果真正计算出来后才会执行。如果将函数A、B、C类比为DAG的节点的话，那么DAG的边就是函数C参数对函数A、B计算结果的依赖，自由的函数调用方式允许Ray可以自由地定制DAG的结构和计算依赖关系。另外，提及一点的是Python的函数可以定义函数具有多个返回值，这也使得Python的函数更天然具备了DAG节点多入和多出的特点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/405877/201711/405877-20171126235604765-82501554.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;二系统架构&quot;&gt;二、系统架构&lt;/h2&gt;
&lt;p&gt;Ray是使用什么样的架构对分布式计算做出如上抽象的呢，一下给出了Ray的系统架构（来自Ray论文，参考文献1）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/405877/201711/405877-20171126235615625-1165176825.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;作为分布式计算系统，Ray仍旧遵循了典型的Master-Slave的设计：Master负责全局协调和状态维护，Slave执行分布式计算任务。不过和传统的分布式计算系统不同的是，Ray使用了&lt;strong&gt;混合任务调度&lt;/strong&gt;的思路。在集群部署模式下，Ray启动了以下关键组件：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;GlobalScheduler&lt;/strong&gt;：Master上启动了一个全局调度器，用于接收本地调度器提交的任务，并将任务分发给合适的本地任务调度器执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RedisServer&lt;/strong&gt;：Master上启动了一到多个RedisServer用于保存分布式任务的状态信息（ControlState），包括对象机器的映射、任务描述、任务debug信息等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LocalScheduler&lt;/strong&gt;：每个Slave上启动了一个本地调度器，用于提交任务到全局调度器，以及分配任务给当前机器的Worker进程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Worker&lt;/strong&gt;：每个Slave上可以启动多个Worker进程执行分布式任务，并将计算结果存储到ObjectStore。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ObjectStore&lt;/strong&gt;：每个Slave上启动了一个ObjectStore存储只读数据对象，Worker可以通过共享内存的方式访问这些对象数据，这样可以有效地减少内存拷贝和对象序列化成本。ObjectStore底层由Apache Arrow实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plasma&lt;/strong&gt;：每个Slave上的ObjectStore都由一个名为Plasma的对象管理器进行管理，它可以在Worker访问本地ObjectStore上不存在的远程数据对象时，主动拉取其它Slave上的对象数据到当前机器。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;需要说明的是，Ray的论文中提及，全局调度器可以启动一到多个，而目前Ray的实现文档里讨论的内容都是基于一个全局调度器的情况。我猜测可能是Ray尚在建设中，一些机制还未完善，后续读者可以留意此处的细节变化。&lt;/p&gt;
&lt;p&gt;Ray的任务也是通过类似Spark中Driver的概念的方式进行提交的，有所不同的是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Spark的Driver提交的是任务DAG，一旦提交则不可更改。&lt;/li&gt;
&lt;li&gt;而Ray提交的是更细粒度的remote function，任务DAG依赖关系由函数依赖关系自由定制。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;论文给出的架构图里并未画出Driver的概念，因此我在其基础上做了一些修改和扩充。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/405877/201711/405877-20171126235635515-2119278255.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Ray的Driver节点和和Slave节点启动的组件几乎相同，不过却有以下区别：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Driver上的工作进程DriverProcess一般只有一个，即用户启动的PythonShell。Slave可以根据需要创建多个WorkerProcess。&lt;/li&gt;
&lt;li&gt;Driver只能提交任务，却不能接收来自全局调度器分配的任务。Slave可以提交任务，也可以接收全局调度器分配的任务。&lt;/li&gt;
&lt;li&gt;Driver可以主动绕过全局调度器给Slave发送Actor调用任务（此处设计是否合理尚不讨论）。Slave只能接收全局调度器分配的计算任务。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;三核心操作&quot;&gt;三、核心操作&lt;/h2&gt;
&lt;p&gt;基于以上架构，我们简单讨论一下Ray中关键的操作和流程。&lt;/p&gt;
&lt;h3 id=&quot;ray.init&quot;&gt;1. ray.init()&lt;/h3&gt;
&lt;p&gt;在PythonShell中，使用&lt;code&gt;ray.init()&lt;/code&gt;可以在本地启动ray，包括Driver、HeadNode（Master）和若干Slave。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ray
ray.init()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果是直连已有的Ray集群，只需要指定RedisServer的地址即可。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;ray.init(redis_address&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&amp;lt;redis-address&amp;gt;&quot;&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本地启动Ray得到的输出如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; ray.init()
Waiting for redis server at 127.0.0.1:58807 to respond...
Waiting for redis server at 127.0.0.1:23148 to respond...
Allowing the Plasma store to use up to 13.7439GB of memory.
Starting object store with directory /tmp and huge page support disabled
Starting local scheduler with 8 CPUs, 0 GPUs

======================================================================
View the web UI at http://localhost:8888/notebooks/ray_ui62614.ipynb?token=7c253b0fd66fe41294d9f2c6739e3f002c1e76f6f59b99f5
======================================================================

{'object_store_addresses': [ObjectStoreAddress(name='/tmp/plasma_store73540254', manager_name='/tmp/plasma_manager78072648', manager_port=39874)], 'redis_address': '127.0.0.1:58807', 'local_scheduler_socket_names': ['/tmp/scheduler98624129'], 'webui_url': 'http://localhost:8888/notebooks/ray_ui62614.ipynb?token=7c253b0fd66fe41294d9f2c6739e3f002c1e76f6f59b99f5', 'node_ip_address': '127.0.0.1'}
&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;本地启动Ray时，可以看到Ray的WebUI的访问地址。&lt;/p&gt;
&lt;h3 id=&quot;ray.put&quot;&gt;2. ray.put()&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;ray.put()&lt;/code&gt;可以将Python对象存入本地ObjectStore，并且异步返回一个唯一的ObjectID。通过该ID，Ray可以访问集群中任一个节点上的对象（远程对象通过查阅Master的对象表获得）。&lt;/p&gt;
&lt;p&gt;对象一旦存入ObjectStore便不可更改，Ray的remote函数可以将直接将该对象的ID作为参数传入。使用ObjectID作为remote函数参数，可以有效地减少函数参数的写ObjectStore的次数。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;at&quot;&gt;@ray.remote&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; f(x):
    &lt;span class=&quot;cf&quot;&gt;pass&lt;/span&gt;

x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;hello&quot;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;# 对象x往ObjectStore拷贝里10次&lt;/span&gt;
[f.remote(x) &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)]

&lt;span class=&quot;co&quot;&gt;# 对象x仅往ObjectStore拷贝1次&lt;/span&gt;
x_id &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ray.put(x)
[f.remote(x_id) &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;ray.get&quot;&gt;3. ray.get()&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;ray.get()&lt;/code&gt;可以通过ObjectID获取ObjectStore内的对象并将之转换为Python对象。对于数组类型的对象，Ray使用共享内存机制减少数据的拷贝成本。而对于其它对象则需要将数据从ObjectStore拷贝到进程的堆内存中。&lt;/p&gt;
&lt;p&gt;如果调用&lt;code&gt;ray.get()&lt;/code&gt;操作时，对象尚未创建好，则get操作会阻塞，直到对象创建完成后返回。get操作的关键流程如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Driver或者Worker进程首先到ObjectStore内请求ObjectID对应的对象数据。&lt;/li&gt;
&lt;li&gt;如果本地ObjectStore没有对应的对象数据，本地对象管理器Plasma会检查Master上的对象表查看对象是否存储其它节点的ObjectStore。&lt;/li&gt;
&lt;li&gt;如果对象数据在其它节点的ObjectStore内，Plasma会发送网络请求将对象数据拉到本地ObjectStore。&lt;/li&gt;
&lt;li&gt;如果对象数据还没有创建好，Master会在对象创建完成后通知请求的Plasma读取。&lt;/li&gt;
&lt;li&gt;如果对象数据已经被所有的ObjectStore移除（被LRU策略删除），本地调度器会根据任务血缘关系执行对象的重新创建工作。&lt;/li&gt;
&lt;li&gt;一旦对象数据在本地ObjectStore可用，Driver或者Worker进程会通过共享内存的方式直接将对象内存区域映射到自己的进程地址空间中，并反序列化为Python对象。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;另外，&lt;code&gt;ray.get()&lt;/code&gt;可以一次性读取多个对象的数据：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;result_ids &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [ray.put(i) &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)]
ray.get(result_ids)  &lt;span class=&quot;co&quot;&gt;# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;ray.remote&quot;&gt;4. @ray.remote&lt;/h3&gt;
&lt;p&gt;Ray中使用注解&lt;code&gt;@ray.remote&lt;/code&gt;可以声明一个remote function。remote函数时Ray的基本任务调度单元，remote函数定义后会立即被序列化存储到RedisServer中，并且分配了一个唯一的ID，这样就保证了集群的所有节点都可以看到这个函数的定义。&lt;/p&gt;
&lt;p&gt;不过，这样对remote函数定义有了一个潜在的要求，即remote函数内如果调用了其它的用户函数，则必须提前定义，否则remote函数无法找到对应的函数定义内容。&lt;/p&gt;
&lt;p&gt;remote函数内也可以调用其它的remote函数，Driver和Slave每次调用remote函数时，其实都是向集群提交了一个计算任务，从这里也可以看到Ray的分布式计算的自由性。&lt;/p&gt;
&lt;p&gt;Ray中调用remote函数的关键流程如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;调用remote函数时，首先会创建一个任务对象，它包含了函数的ID、参数的ID或者值（Python的基本对象直接传值，复杂对象会先通过&lt;code&gt;ray.put()&lt;/code&gt;操作存入ObjectStore然后返回ObjectID）、函数返回值对象的ID。&lt;/li&gt;
&lt;li&gt;任务对象被发送到本地调度器。&lt;/li&gt;
&lt;li&gt;本地调度器决定任务对象是在本地调度还是发送给全局调度器。如果任务对象的依赖（参数）在本地的ObejctStore已经存在且本地的CPU和GPU计算资源充足，那么本地调度器将任务分配给本地的WorkerProcess执行。否则，任务对象被发送给全局调度器并存储到任务表（TaskTable）中，全局调度器根据当前的任务状态信息决定将任务发给集群中的某一个本地调度器。&lt;/li&gt;
&lt;li&gt;本地调度器收到任务对象后（来自本地的任务或者全局调度分配的任务），会将其放入一个任务队列中，等待计算资源和本地依赖满足后分配给WorkerProcess执行。&lt;/li&gt;
&lt;li&gt;Worker收到任务对象后执行该任务，并将函数返回值存入ObjectStore，并更新Master的对象表（ObjectTable）信息。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;@ray.remote&lt;/code&gt;注解有一个参数&lt;code&gt;num_return_vals&lt;/code&gt;用于声明remote函数的返回值个数，基于此实现remote函数的多返回值机制。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;at&quot;&gt;@ray.remote&lt;/span&gt;(num_return_vals&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; f():
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;

x_id, y_id &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; f.remote()
ray.get(x_id)  &lt;span class=&quot;co&quot;&gt;# 1&lt;/span&gt;
ray.get(y_id)  &lt;span class=&quot;co&quot;&gt;# 2&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;@ray.remote&lt;/code&gt;注解的另一个参数&lt;code&gt;num_gpus&lt;/code&gt;可以为任务指定GPU的资源。使用内置函数&lt;code&gt;ray.get_gpu_ids()&lt;/code&gt;可以获取当前任务可以使用的GPU信息。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;at&quot;&gt;@ray.remote&lt;/span&gt;(num_gpus&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; gpu_method():
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;This function is allowed to use GPUs {}.&quot;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(ray.get_gpu_ids())&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;ray.wait&quot;&gt;5. ray.wait()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ray.wait()&lt;/code&gt;操作支持批量的任务等待，基于此可以实现一次性获取多个ObjectID对应的数据。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 启动5个remote函数调用任务
results = [f.remote(i) for i in range(5)]
# 阻塞等待4个任务完成，超时时间为2.5s
ready_ids, remaining_ids = ray.wait(results, num_returns=4, timeout=2500)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述例子中，results包含了5个ObjectID，使用&lt;code&gt;ray.wait&lt;/code&gt;操作可以一直等待有4个任务完成后返回，并将完成的数据对象放在第一个list类型返回值内，未完成的ObjectID放在第二个list返回值内。如果设置了超时时间，那么在超时时间结束后仍未等到预期的返回值个数，则已超时完成时的返回值为准。&lt;/p&gt;
&lt;h3 id=&quot;ray.error_info&quot;&gt;6. ray.error_info()&lt;/h3&gt;
&lt;p&gt;使用ray.error_info()可以获取任务执行时产生的错误信息。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; time
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; @ray.remote
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; f():
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     time.sleep(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;cf&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;pp&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;This task failed!!&quot;&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; f.remote()
Remote function __main__.f failed &lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt;:

Traceback (most recent call last):
  File &lt;span class=&quot;st&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; f
&lt;span class=&quot;pp&quot;&gt;Exception&lt;/span&gt;: This task failed&lt;span class=&quot;op&quot;&gt;!!&lt;/span&gt;


  You can inspect errors by running

      ray.error_info()

  If this driver &lt;span class=&quot;op&quot;&gt;is&lt;/span&gt; hanging, start a new one &lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt;

      ray.init(redis_address&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;127.0.0.1:65452&quot;&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; ray.error_info()
[{&lt;span class=&quot;st&quot;&gt;'type'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'task'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'message'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'Remote function &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\x1b&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;[31m__main__.f&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\x1b&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;[39m failed with:&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;Traceback (most recent call last):&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 4, in f&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;Exception: This task failed!!&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'data'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'{&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;function_id&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;: &quot;Hm&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;xde&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;x93&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\'\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;x91&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;xce&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;x13ld&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;xf4O&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;xd7&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;xce&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;xc2&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;xe1&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;x151&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;x1e3&quot;, &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;function_name&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;: u&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;__main__.f&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;}'&lt;/span&gt;}]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;actor&quot;&gt;7. Actor&lt;/h3&gt;
&lt;p&gt;Ray的remote函数只能处理无状态的计算需求，有状态的计算需求需要使用Ray的Actor实现。在Python的class定义前使用&lt;code&gt;@ray.remote&lt;/code&gt;可以声明Actor。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;at&quot;&gt;@ray.remote&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Counter(&lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt;):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.value &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; increment(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.value &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.value&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用如下方式创建Actor对象。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Counter.remote()
a2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Counter.remote()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ray创建Actor的流程为：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Master选取一个Slave，并将Actor创建任务分发给它的本地调度器。&lt;/li&gt;
&lt;li&gt;创建Actor对象，并执行它的构造函数。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;从流程可以看出，Actor对象的创建时并行的。&lt;/p&gt;
&lt;p&gt;通过调用Actor对象的方法使用Actor。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a1.increment.remote()  &lt;span class=&quot;co&quot;&gt;# ray.get returns 1&lt;/span&gt;
a2.increment.remote()  &lt;span class=&quot;co&quot;&gt;# ray.get returns 1&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用Actor对象的方法的流程为：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先创建一个任务。&lt;/li&gt;
&lt;li&gt;该任务被Driver直接分配到创建该Actor对应的本地执行器执行，这个操作绕开了全局调度器（Worker是否也可以使用Actor直接分配任务尚存疑问）。&lt;/li&gt;
&lt;li&gt;返回Actor方法调用结果的ObjectID。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;为了保证Actor状态的一致性，对同一个Actor的方法调用是串行执行的。&lt;/p&gt;
&lt;h2 id=&quot;四安装ray&quot;&gt;四、安装Ray&lt;/h2&gt;
&lt;p&gt;如果只是使用Ray，可以使用如下命令直接安装。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;pip&lt;/span&gt; intall ray&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果需要编译Ray的最新源码进行安装，按照如下步骤进行（MaxOS）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 更新编译依赖包&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;brew&lt;/span&gt; update
&lt;span class=&quot;kw&quot;&gt;brew&lt;/span&gt; install cmake pkg-config automake autoconf libtool boost wget
&lt;span class=&quot;kw&quot;&gt;pip&lt;/span&gt; install numpy cloudpickle funcsigs click colorama psutil redis flatbuffers cython --ignore-installed six
&lt;span class=&quot;co&quot;&gt;# 下载源码编译安装&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;git&lt;/span&gt; clone https://github.com/ray-project/ray.git
&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; ray/python
&lt;span class=&quot;kw&quot;&gt;python&lt;/span&gt; setup.py install
&lt;span class=&quot;co&quot;&gt;# 测试&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;python&lt;/span&gt; test/runtest.py

&lt;span class=&quot;co&quot;&gt;# 安装WebUI需要的库［可选］&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;pip&lt;/span&gt; install jupyter ipywidgets bokeh

&lt;span class=&quot;co&quot;&gt;# 编译Ray文档［可选］&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; ray/doc
&lt;span class=&quot;kw&quot;&gt;pip&lt;/span&gt; install -r requirements-doc.txt
&lt;span class=&quot;kw&quot;&gt;make&lt;/span&gt; html
&lt;span class=&quot;kw&quot;&gt;open&lt;/span&gt; _build/html/index.html&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我在MacOS上安装jupyter时，遇到了Python的setuptools库无法升级的情况，原因是MacOS的安全性设置问题，可以使用如下方式解决：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;重启电脑，启动时按住&lt;code&gt;Command+R&lt;/code&gt;进入Mac保护模式。&lt;/li&gt;
&lt;li&gt;打开命令行，输入命令&lt;code&gt;csrutils disable&lt;/code&gt;关闭系统安全策略。&lt;/li&gt;
&lt;li&gt;重启电脑，继续安装jupyter。&lt;/li&gt;
&lt;li&gt;安装完成后，重复如上的方式执行&lt;code&gt;csrutils enable&lt;/code&gt;，再次重启即可。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;进入PythonShell，输入代码本地启动Ray：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ray
ray.init()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;浏览器内打开WebUI界面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/405877/201711/405877-20171126235654640-1767073624.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;Ray论文：&lt;a href=&quot;https://arxiv.org/abs/1703.03924&quot;&gt;Real-Time Machine Learning: The Missing Pieces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ray开发手册：&lt;a href=&quot;http://ray.readthedocs.io/en/latest/index.html&quot; class=&quot;uri&quot;&gt;http://ray.readthedocs.io/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ray源代码：&lt;a href=&quot;https://github.com/ray-project/ray&quot; class=&quot;uri&quot;&gt;https://github.com/ray-project/ray&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sun, 26 Nov 2017 15:59:00 +0000</pubDate>
<dc:creator>Florian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fanzhidongyzby/p/7901139.html</dc:identifier>
</item>
<item>
<title>css选择器总结 - 一步一步向上爬</title>
<link>http://www.cnblogs.com/z937741304/p/7901086.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/z937741304/p/7901086.html</guid>
<description>&lt;p&gt;　　最近有点忙，所以没有发表博文，现在时间空闲下来了，好好的整理一下知识，今天总结一下css里面的一些选择器。&lt;/p&gt;
&lt;p&gt;　　css里的选择器有好多种，下面我就把我了解到的写一写，如果有不全的或者有误的欢迎留言指正，万分感谢。&lt;/p&gt;
&lt;p&gt;　　一、选择器&lt;/p&gt;
&lt;p&gt;　　1、* 通配符选择器 &lt;/p&gt;
&lt;p&gt;　　　这个选择器是匹配页面中所有的元素，一般用来清除浏览器的默认样式.&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
*{margin:0; padding:0}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2、元素选择器 &lt;/p&gt;
&lt;p&gt;　　　　通过标签名来选择元素。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div{width:100px; height:100px;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3、class选择器&lt;/p&gt;
&lt;p&gt;　　　　　class选择器 / 类选择器 / 用class属性给元素命名，在页面中可以出现很多次，相当于人的名字。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.box{width:100px; height:100px;}

&amp;lt;div class=&quot;box&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;p class=&quot;box&quot;&amp;gt;&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4、 id选择器&lt;/p&gt;
&lt;p&gt;　　　　以id属性来命名，在页面中只能出现一次，具有唯一性，并且权重值最高，相当于一个人的身份证。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
#box{width:100px; height:100px;}

&amp;lt;div id=&quot;box&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　二、高级选择器 一　&lt;/p&gt;
&lt;p&gt;　　1、 E F  后代选择器&lt;/p&gt;
&lt;p&gt;　　　　匹配到E元素下面的所有的F元素（包括子、孙），空格隔开。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div ul li {width:100px; height:100px;}&lt;br/&gt;//匹配到div下面的所有ul，且ul的所有后代li

&amp;lt;div&amp;gt;
　　&amp;lt;ul&amp;gt;
　　　　&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
　　　　&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;   
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2、 E,F  多元素选择器&lt;/p&gt;
&lt;p&gt;  　　　　同时匹配到E元素和F元素，用逗号隔开。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div,#box{width:100px; height:100px; background:#000;}//同时匹配到下文中的div标签和id为box的p标签

&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;p id=&quot;box&quot;&amp;gt;&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3、E&amp;gt;F 子元素选择器&lt;/p&gt;
&lt;p&gt;　　　　选择到E元素的直接子代F，只选择子代。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot; readability=&quot;5&quot;&gt;
ul&amp;gt;li{width:100px; height:100px;}&lt;p&gt;&amp;lt;ul&amp;gt;&lt;br/&gt;　　&amp;lt;li&amp;gt;&lt;br/&gt;　&amp;lt;/li&amp;gt;&lt;br/&gt;&amp;lt;/ul&amp;gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4、E+F（毗邻选择器） 相邻兄弟选择器&lt;/p&gt;
&lt;p&gt;　　紧接在E元素后面的同级元素F，相邻兄弟选择器，有相同的父级。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div+.box{width:100px; height:100px; background:pink;}//这个只能选择到下面第二行的那个p元素  最后一个不满足紧接在div元素后面这个条件

　　&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;p class=&quot;box&quot;&amp;gt;&amp;lt;/p&amp;gt; 
    &amp;lt;p class=&quot;box&quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p class=&quot;box&quot;&amp;gt;&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div p + p{
    width:100px;
    height:100px;
    margin-top:2px;
    background:pink;
}
　　//这个可以选择到下面除了第一个p元素外其他所有的元素。
　　&amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　三、高级选择器 二       属性选择器&lt;/p&gt;
&lt;p&gt;　　1、 E[attr] 匹配具有attr属性的E元素 　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[title]{
    width:100px;
    height:100px;
    margin-top:2px;
    background:pink;
}　　//匹配到下文中的第一个和第三个div元素 因为他们含有title属性
    &amp;lt;div title=&quot;width&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div title=&quot;height&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2、E[attr=val]&lt;/p&gt;
&lt;p&gt;　　　　匹配具有attr属性且值只为val的的E元素（注意   属性值要用引号引起来，我自己试了试好像不用括号也可以。）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[title=&quot;height&quot;]{
    width:100px;
    height:100px;
    margin-top:2px;
    background:pink;&lt;br/&gt;}  //匹配到下文中的第三个div元素
    &amp;lt;div title=&quot;width&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div title=&quot;height&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3、E[attr~=val]&lt;/p&gt;
&lt;p&gt;　　　　匹配属性值为attr，并包含这个值的E元素，用于选取属性值中包含指定词汇的元素。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[class~=&quot;c1&quot;]{
    width:100px;
    height:100px;
    margin-top:2px;
    background:pink;
} //选择到下方第一个和第二个div元素

　　 &amp;lt;div class=&quot;c1&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;c1 c2&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;c2c1&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4、E[attr|=val]&lt;/p&gt;
&lt;p&gt;　　　　匹配所有属性为attr，值为val或者以 var- 开头的E元素&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[class|=&quot;c1&quot;]{
    width:100px;
    height:100px;
    margin-top:2px;
    background:pink;
}//选择到下面当中的第一个和第三个元素

　　 &amp;lt;div class=&quot;c1&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;c1cs&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;c1-c2&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　5、E[attr][attr2=val]匹配所有 有attr1属性 且有attr2属性，且attr2的值为val的E元素，这个就是写出几个属性选择器，并且都要同时满足他们的条件。　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[title=&quot;width&quot;][class]{
    width:100px;
    height:100px;
    margin-top:2px;
    background:pink;
}    //选择到下面的第一个div元素

    &amp;lt;div title=&quot;width&quot; class=&quot;box&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div title=&quot;width&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　四、a伪类选择器&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
1、 :link    匹配所有未被点击的链接
　　a:link{ color: green; }
2、：hover        匹配鼠标悬停在其上的元素
　　a:hover{ color: gold; }
3、：active       匹配鼠标按下还没有释放的元素
　　a:active{ color: blue; }
4、：visited      匹配所有已经被点击的链接
a:visited{ color: red; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　hover的使用，只是一个选择器，一定是他的后代。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.box{
    width:100px;
    height: 100px;
    color:#fff;
    background: #000;
}&lt;br/&gt;.box:hover p{
　　color:red;
}//鼠标移动div上，p字体的颜色改变

　　&amp;lt;div class=&quot;box&quot;&amp;gt;
        &amp;lt;p&amp;gt;我的字体&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2. a伪元素选择器&lt;/p&gt;
&lt;p&gt;　　　　1&amp;gt; ：before  在元素&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div:before{
    content: &quot;before插入的元素&quot;;
}
//在div所有元素的最前面插入这个
&lt;/pre&gt;
&lt;p&gt;　　&amp;lt;div&amp;gt;&lt;br/&gt;　　　　&amp;lt;p&amp;gt;这个是p&amp;lt;/p&amp;gt;&lt;br/&gt;　　　　&amp;lt;ul&amp;gt;&lt;br/&gt;　　　　　　&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;br/&gt;　　　　　　&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;br/&gt;　　　　　　&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;br/&gt;　　　　&amp;lt;/ul&amp;gt;&lt;br/&gt;　　&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;　　　　2&amp;gt;  :after 在元素后面插入内容，插到最后一个子元素的后面。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div:after{content:&quot;&quot;;}

&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　css3新增的选择器&lt;/p&gt;
&lt;p&gt;　　　五. 关联选择器&lt;/p&gt;
&lt;p&gt;　　　　E1~E2(选择E1后面的兄弟E2)&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
 div~p{
    width:100px;
    height: 100px;
    margin-top: 2px;
    background: #000;
}
　　//div后面的三个p元素都选择到了
    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　六、 属性选择器新增&lt;/p&gt;
&lt;p&gt;　　　　1. [attr^=&quot; ..&quot;] 以....开头的元素&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[class^=&quot;de&quot;]{
    width:100px;
    height: 100px;
    margin-top: 2px;
    background: #000;
}　　//选择到了前面三个div元素
    &amp;lt;div class=&quot;de1&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;de&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;dedkjsfkld&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;1fde&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　2.   [attr$=&quot;... &quot;]　以...结束的元素&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[class$=&quot;de&quot;]{
    width:100px;
    height: 100px;
    margin-top: 2px;
    background: #000;
}
　　//选择到了前三个
    &amp;lt;div class=&quot;de1de&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;de&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;dedkjsfklde&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;1f&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　3. [attr*=&quot;&quot;] 选择到包含值的元素　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[class*=&quot;de&quot;]{
    width:100px;
    height: 100px;
    margin-top: 2px;
    background: #000;
}
　　//选择到下面的  1 2 4 都包含de字母
    &amp;lt;div class=&quot;de1de&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;de&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;dld&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;1def&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　七、伪类新增的选择器  下面都用p来举例子，其他的也一样&lt;/p&gt;
&lt;p&gt;　　　下面当中就举一个例子，其他的那些自己去实验一下，可以用这个例子来实验&lt;/p&gt;
&lt;p&gt;　　　　这里是有of的是从p元素当中选p&lt;/p&gt;
&lt;p&gt;　　　1. :first-of-type&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
p:first-of-type{
    width:100px;
    height:100px;
    background: #000;
}//父级下面所有p元素的第一个 

    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2. :last-of-type &lt;/p&gt;
&lt;p&gt;　　p:last-of-type   父级下面所有p元素的最后一个&lt;/p&gt;
&lt;p&gt;　　3. only-of-type&lt;/p&gt;
&lt;p&gt;　　p:only-of-type  父级下面只有一个p元素，其他的元素不能是p，如果有其他元素那么会选不中。&lt;/p&gt;
&lt;p&gt;　　4. ：nth-of-type&lt;/p&gt;
&lt;p&gt;　　p:nth-child(n)   选中父级元素中第n个p&lt;/p&gt;
&lt;p&gt;　　5. ：nth-last-of-type(n)&lt;/p&gt;
&lt;p&gt;　　　　选择p，父级元素中倒数第n个p元素&lt;/p&gt;

&lt;p&gt;下面是没有of的是在子元素中选择&lt;/p&gt;
&lt;p&gt;　　6. :only-child   &lt;/p&gt;
&lt;p&gt;　　　p:only-child  选择p，p必须为他们各自父级的唯一一个子元素&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
p:only-child{
    width:100px;
    height: 100px;
    background: #000;
}&lt;br/&gt;　　//下面的这个只能选择到第一个div当中的p

    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　7. :last-child&lt;/p&gt;
&lt;p&gt;　　　p:last-child   选择p，p必须为父级的最后一个子元素&lt;/p&gt;
&lt;p&gt;　　8. nth-child（n）&lt;/p&gt;
&lt;p&gt;　　p:nth-child(n)   父元素的第n个元素，叫p元素&lt;/p&gt;
&lt;p&gt;　　9  nth-last-child(n)&lt;/p&gt;
&lt;p&gt;　　　p：nth-last-child(n)　选择p，也就是父级的倒数第n个元素，叫p。&lt;/p&gt;

&lt;p&gt;后面的伪类没有什么规律了，别着急，一个一个慢慢来。&lt;/p&gt;
&lt;p&gt;　　只是举例子，不要以为括号里面的内容是固定的。&lt;/p&gt;
&lt;p&gt;　　1.  ：not（.c1）   选择到class除了c1的p 括号里面的内容还可以是id等&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
p:not(.c1){
    width:100px;
    height: 100px;
    margin-top: 2px;
    background: #000;&lt;br/&gt;}//下面的元素当中除了第一个class为c1的p元素其他的都被选中了。
　　
    &amp;lt;div&amp;gt;
       &amp;lt;p class=&quot;c1&quot;&amp;gt;&amp;lt;/p&amp;gt;
       &amp;lt;p class=&quot;c2&quot;&amp;gt;&amp;lt;/p&amp;gt;
       &amp;lt;p id=&quot;box&quot;&amp;gt;&amp;lt;/p&amp;gt;
       &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
       &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
   &amp;lt;/div&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　2.  :empty　 选择倒标签内容为空的规定元素 &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
p:empty{
    width:100px;
    height: 100px;
    margin-top: 2px;
    background: #000;
}//会选择到下面的第二个p元素，因为他没有内容

    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;11&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;11&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;11&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;1&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　3.  p:target  选择倒当前被锚点激活的p&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
p:target{
    width:100px;
    height: 100px;
    margin-top: 2px;
    color:#fff;
    background: #000;
}  //点击a的内容，p标签的样式会被选中激活

    &amp;lt;a href=&quot;#a1&quot;&amp;gt;点我&amp;lt;/a&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;p id=&quot;a1&quot;&amp;gt;p标签的内容&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　4. 　　：：selection 被用户选中的p　这句话什么意思呢，来看下面的截图效果&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
p::selection{
    width:100px;
    height: 100px;
    margin-top: 2px;
    color:#fff;
    background: #000;
}

    &amp;lt;p&amp;gt;111&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;222&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;333&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;444&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;555&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1250927/201711/1250927-20171126233049250-388384141.png&quot; alt=&quot;&quot;/&gt;       &lt;img src=&quot;https://images2018.cnblogs.com/blog/1250927/201711/1250927-20171126233347312-490728450.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 5. input;disable&lt;/p&gt;
&lt;p&gt;　　选择到不能被操作的input框&lt;/p&gt;
&lt;p&gt;6. input：enable&lt;/p&gt;
&lt;p&gt;　　选择到能被cao操作的input框&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
input:enabled{
    background:yellow;
}
input:disabled{
    background:red;
}
　　//一般可以写内容的都是可以被操作的，加上disabled的属性和disabled的值的是不可以被操作的
    &amp;lt;input type=&quot;text&quot; value=&quot;&quot;&amp;gt;
    &amp;lt;input type=&quot;text&quot;&amp;gt;
    &amp;lt;input type=&quot;text&quot; disabled=&quot;diabled&quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7. input:checked &lt;/p&gt;
&lt;p&gt;　　选择到被选中的input，一般用于js&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
input:checked{
    width:40px;
    height:40px;
}//就是框被打上对勾，被选中的元素会被选中
　　　
    &amp;lt;input type=&quot;checkbox&quot; checked=&quot;&quot; value=&quot;&quot;&amp;gt;足球
    &amp;lt;input type=&quot;checkbox&quot; value=&quot;&quot;&amp;gt;篮球
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　我了解到的知识都分享给大家了，如果有不足的地方欢迎来留言指正，如果你通过这篇文章学到了，我会非常开心。&lt;/p&gt;

</description>
<pubDate>Sun, 26 Nov 2017 15:49:00 +0000</pubDate>
<dc:creator>一步一步向上爬</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/z937741304/p/7901086.html</dc:identifier>
</item>
<item>
<title>SDN第一次作业 - linzhenyuyuchen</title>
<link>http://www.cnblogs.com/linzhenyuyuchen/p/7901092.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linzhenyuyuchen/p/7901092.html</guid>
<description>&lt;p&gt;&amp;#13;
                                    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;sr-only&quot;&gt;Close&lt;/span&gt;&lt;/button&gt;&amp;#13;
                                    &lt;h4 class=&quot;modal-title&quot;&gt;&amp;#13;
                                        请完成人机识别验证&amp;#13;
                                    &lt;/h4&gt;&amp;#13;
                                &lt;/p&gt;
                                &lt;div class=&quot;modal-body&quot; readability=&quot;33&quot;&gt;
                                    
                                    &lt;p&gt;&amp;#13;
                                        &lt;span id=&quot;geetestLoading&quot;&gt; 验证码组件加载中,请稍后...&lt;/span&gt;&amp;#13;
                                    &lt;/p&gt;
                                &lt;/div&gt;
                            </description>
<pubDate>Sun, 26 Nov 2017 15:49:00 +0000</pubDate>
<dc:creator>linzhenyuyuchen</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://passport.cnblogs.com/user/signin?ReturnUrl=http%3A%2F%2Fwww.cnblogs.com%2Flinzhenyuyuchen%2Fp%2F7901092.html&amp;AspxAutoDetectCookieSupport=1</dc:identifier>
</item>
<item>
<title>linux下expect命令实现批量ssh免密 - nfcm</title>
<link>http://www.cnblogs.com/nfcm/p/7899831.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nfcm/p/7899831.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;有时候我们需要批量发送ssh命令给服务器，但是有可能有些服务器是新加入的，还没有配置ssh免密，这个时候就会提示我们输入yes/no 或者password等，expect脚本命令就是用于在提示这些的时候，自动为我们输入相应的文字&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;expect脚本&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;先看一段shell脚本，实现了ssh自动连接&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/expect &lt;/span&gt;
spawn ssh  192.168.1.241&lt;span&gt;
expect &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
send &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123456\r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
expect &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]#&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; {send &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ls -la\r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
interact&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;　&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;注意第一行使用的是&lt;/span&gt;&lt;span&gt;&lt;span&gt;#!/usr/bin/expect&lt;span&gt;而不是普通的bash脚本那样&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;spawn就是用来启动新的进程&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;expect “password&quot;  ,注意这个是expect脚本里面内部的命令，代表用来等待进程反馈，可以接受字符串和正则表达式，这段的意思就是将spawn启动的进程的输出当作expect命令的输入，如果包含password脚本，就会向着标准输出　输出123456\r&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;,注意\r代表换行，跟我们输入完一个命令换行是一个道理。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;send:发送交互值，代替我们手动输入&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;接着我们进入了241的服务器里面，　窗口会输出[root@hadoop01 ~]#  ,跟我们的]# 匹配上了，于是向控制台输出 ls -la命令并且换行。这里我们的expect后面是带了大括号，跟上面的写在两行的效果一直。可以理解为另一种写法。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;interact的作用很特殊，代表等待spawn命令结束，并且停留在241服务端进行继续交互，如果没有这个，那么有可能expect对应的刚匹配上还没执行send就已经结束了。对应的我们可以使用expect eof，替代interact代表等待spawn结束后退出（&lt;/span&gt;&lt;/span&gt;&lt;span&gt;在spawn进程结束后会向expect发送eof&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;多分支语法&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;上面的这种expect属于单一分支模式，代表就匹配这一种，如果匹配的不是，那么就要自己输入了，但是我们有可能在第一次有不同的提示，这个时候就需要使用多分支语法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; expect 只要匹配到aaa 或者password其中的一种就会输出。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/expect&lt;/span&gt;
spawn ssh  192.168.1.241&lt;span&gt;
expect {
 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaa&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; {send &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bbb\r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; { send &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nf123456\r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
}
expect &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]#&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; {send &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ls -la\r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
interact&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;expect命令行参数&lt;/h2&gt;
&lt;p&gt;上面的expect脚本功能可能都达到了，为了避免有很多expect脚本，我更推荐使用expect命令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/bin/bash&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; SERVER=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.1.241&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; PASSWD=&lt;span&gt;nf123456
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; expect -c &lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        set timeout -1;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        spawn ssh $SERVER;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        expect {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;yes/no\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; { send \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;yes\r\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ;exp_contine; }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;password:\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; { send \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$PASSWD&lt;/span&gt;\r\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        expect \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]&lt;span&gt;#&lt;/span&gt;&lt;span&gt;\&quot; { send \&quot;ls -la \r\&quot; };&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         expect \&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]#\&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; { send \&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;exit \r\&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        expect eof;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;上面的shell功能和expect脚本实现的功能一致，都是通过ssh登录进去后输入，ls -la 命令&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;set timeout -1 设置超时时间&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;expect 后面需要加上-c&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;expect 命令用“双引号包围起来的，这点要注意&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;里面如果有”需要用\&quot;转义。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;第15行代表ls -la 命令结束后发送一个退出命令，一般需要加上，防止阻塞&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;expect eof 匹配spawn结束&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;h2&gt;&lt;span&gt;ssh批量免密demo&lt;/span&gt;&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/bin/bash&lt;/span&gt;
SERVERS=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.1.241 192.168.1.242&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
PASSWD&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;function&lt;/span&gt;&lt;span&gt; sshcopyid
{
        expect &lt;/span&gt;-c &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                set timeout -1;
                spawn ssh-copy-id $1;
                expect {
                        \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;yes/no\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; { send \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;yes\r\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ;exp_contine; }
                        \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;password:\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; { send \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$PASSWD&lt;/span&gt;\r\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;exp_continue; }
                };
                expect eof;
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; server &lt;span&gt;in&lt;/span&gt; &lt;span&gt;$SERVERS&lt;/span&gt;
&lt;span&gt;do&lt;/span&gt;&lt;span&gt;
        sshcopyid &lt;/span&gt;&lt;span&gt;$server&lt;/span&gt;&lt;span&gt;

done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



</description>
<pubDate>Sun, 26 Nov 2017 15:41:00 +0000</pubDate>
<dc:creator>nfcm</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nfcm/p/7899831.html</dc:identifier>
</item>
<item>
<title>T-SQL的进阶:超越基本级别3:构建相关子查询——701小组 - 701</title>
<link>http://www.cnblogs.com/lzy35/p/7900975.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lzy35/p/7900975.html</guid>
<description>&lt;p class=&quot;tgt&quot; align=&quot;center&quot;&gt;T-SQL的进阶:超越基本级别3:构建相关子查询&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;格雷戈里·拉森,2014/03/05&lt;/p&gt;
&lt;p&gt;原文链接：&lt;/p&gt;
&lt;p&gt;http://www.sqlservercentral.com/articles/Stairway+Series/105972/&lt;/p&gt;

&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;该系列&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;这篇文章是进阶系列的一部分: t - sql的进阶:超越基础&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;从他的阶梯到T-SQL DML,Gregory Larsen涵盖了T-SQL语言的更高级的方面，如子查询。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;在这个楼梯的第二层，我讨论了如何在Transact - T-SQL语句中使用子查询。这个楼梯级别将通过讨论一种称为关联子查询的子查询类型来扩展子查询主题。我将探讨什么是相关子查询，以及它与普通子查询的区别。此外，我还将为您提供一些超越基础的Transaction- T-SQL语句示例，并使用关联子查询来帮助识别结果集中返回的行，以满足复杂的业务需求。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;什么是相关子查询&lt;/strong&gt;&lt;strong&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;在这个楼梯的第2级，我们了解到正常的子查询只是在另一个Transact - SQL语句内的一个SELECT语句，在这个语句中子查询如果独立于外部查询而返回结果。关联子查询是子查询的一种形式，它不能独立于外部查询运行，因为它包含来自外部查询的一个或多个列。相关子查询，就像普通的子查询，有时被称为内部查询。如果相关子查询(内部查询)独立于外部查询运行，则它将返回一个错误。因为内部查询的执行依赖于来自外部查询的值，因此它被称为相关子查询。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;相关子查询可以执行很多次。它将为在外部查询中选择的每个候选行运行一次。每个候选行的列值将用于为关联子查询的每次执行的内部的外部查询列提供值。包含相关子查询的语句的最终结果将基于相关子查询的每次执行的结果。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;相关子查询示例的示例数据&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;为了演示如何使用相关子查询，我需要一些测试数据。我的所有示例都将使用AdventureWorks2008R2数据库，而不是创建自己的测试数据。如果你想跟随并运行在您的环境中我的例子你可以从这里下载AdventureWorks2008R2数据库:http://msftdbprodsamples.codeplex.com/releases/view/93587&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;在&lt;/strong&gt;&lt;strong&gt;WHERE&lt;/strong&gt;&lt;strong&gt;子句中关联子查询的示例&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;为了演示在WHERE子句中使用关联子查询，我想要确定这些CustomerID在单个订单中购买了超过70个项目。为了达到这个要求，我可以运行清单1中的代码。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230323437-1431468275.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单1:在WHERE子句中关联子查询&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;当我运行清单1中的代码时，我得到了报告1中的输出。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230340109-1025932289.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;报告1:运行清单1中的代码时返回的结果&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;如果您回顾清单1中的代码，您将看到我使用相关子查询限制了我的位置。子查询是圆括号中的代码，我从清单1中提取了相关的子查询代码，并将其放入清单2中。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230353046-1890682805.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单2:清单1中的子查询代码&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;如果我运行清单2中的代码，我将发现在报告2中显示了一个错误。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230538718-1995263952.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;报告2:在清单2中运行代码时出错&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;我得到了报告2中显示的错误，因为关联子查询包含对列的引用。SalesOrderID，它是来自外部查询的一列。由于所有相关子查询从外部查询引用一个或多个列，因此不能独立地运行与它关联的外部查询。不能独立于整个Transact - SQL语句运行子查询的事实是将相关子查询与普通子查询区分开来。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;这里给出的示例是在WHERE子句中使用相关子查询的一个非常简单的例子。希望通过这样一个简单的示例，它很容易理解普通子查询和相关子查询之间的区别。通常，一个相关的子查询可能要复杂得多。此外，请记住，在不使用相关子查询的情况下，可能还有其他方法来满足您的业务需求。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;正如您所看到的，编写一个相关子查询非常类似于普通子查询，但是您不能独立地运行相关子查询。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;在&lt;/strong&gt;&lt;strong&gt;HAVING&lt;/strong&gt;&lt;strong&gt;子句中关联子查询的示例&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;有时，您可能想要从外部查询中限制一个有不同值的子句。这时，您可以在您的“有”子句中使用相关子查询。假设您必须编写一个查询，该查询将计算那些在2008年税前购买价值超过15万美元的产品的客户的回扣金额。清单3中的代码通过在HAVING子句中使用关联子查询来计算这些值客户的回扣金额。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230601531-1004753776.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单3:有子句的相关子查询&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;当我运行清单5中的代码时，我得到了报告3中的结果。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230621296-920510573.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;报告3:运行清单3的结果&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单3中的相关子查询代码在关联子查询中的外部查询中使用GROUP BY子句中的CustomerID。关联子查询将对从GROUP BY子句返回的每一行执行一次。这允许“有”子句通过对每个SalesOrderHeader记录的SubTotal列的值求和来计算销售给每个CustomerID的产品总量，其中记录与来自外部查询的CustomerID相关联。清单3中的transact - sql语句只返回了CustomerID已经购买超过15万美元的产品的一行。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;包含相关子查询的&lt;/strong&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;strong&gt;语句的示例&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;相关子查询不仅可以使用SELECT语句返回结果集。您还可以使用它们来更新SQL Server表中的数据。为了演示这一点，我首先使用清单4中的代码在tempdb表中生成一些测试数据。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230636234-2108999396.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单4:创建和填充测试表的代码&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单4中的代码创建了一个CarInventory表，然后填充了8行，表示当前库存的汽车。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;销售经理周期性地使用清单5中的查询来查看他的InvoicePriceRatio。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230647640-1175750353.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单5:InvoicePriceRatio查询&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;当经理运行此查询时，她注意到有许多类似的汽车，其发票金额相同，有不同的InvoicePriceRatio值。为了最大限度地提高她的发票价格，她要求她支持编写一个查询，以更新她所有汽车上的StickerPrice，这样每辆车都有相同的CarName值，就有相同的InvoicePriceRatio。她希望IT人员将StickerPrice设置为与CarName的最大价格相同的值。这样，所有具有相同CarName值的汽车将具有相同的StickerPrice值。为了完成CarInventory表的更新，IT人员运行清单6中的Transact - SQLl语句，其中包含一个相关子查询。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230701171-670279358.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单6:相关子查询，以更新CarInventory以最大价格&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单8中的代码使用关联子查询中的外部查询的CarName来标识每个惟一的CarName的最大StickerPrice。然后，在相关子查询中发现的最大StickerPrice值用于更新具有相同名称的每个CarInventory记录的StickerPrice值。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;相关子查询的性能考虑&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;在编写包含相关子查询的Transact - SQL语句时，应该注意一些性能方面的考虑。当外部查询包含少量行时，性能并不差。但是，当外部查询包含大量的行时，从性能的角度来看，它的伸缩性并不好。这是因为要对外部查询中的每个候选行执行相关的子查询。因此，当外部查询包含越来越多的候选行时，一个相关的子查询必须多次执行，因此Transact - SQL语句将需要更长的时间运行。如果您发现相关子查询Transact - SQL语句的性能不符合您的要求，那么您应该寻找替代解决方案，例如使用内部或外部连接操作的查询，或者从外部查询返回少量候选行的查询。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;摘要&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;关联子查询是一个内部查询，它包含来自外部查询的一个或多个列。关联子查询对外部查询的每个候选行执行一次。因为关联子查询包含来自外部查询的列，因此它不能独立于外部查询运行。相关子查询有它们的位置，尽管在外部查询中识别出大量候选行时，从性能角度看，它们的伸缩性并不好。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;问题和答案&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在本节中，您可以通过回答以下问题来回顾您如何理解相关子查询的概念。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;问题1:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在编写相关子查询时，需要有___________________。(填入空白)&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;来自内部查询的一个或多个列，用于约束相关子查询的结果。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在相关子查询的选择列表中使用的内部查询中的一个或多个列。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;来自外部查询的一个或多个列，用于约束相关子查询的结果。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在相关子查询的选择列表中使用的外部查询的一个或多个列。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;问题2:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;选择所有关于相关子查询的语句。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;随着候选行的数量增加，包含相关子查询的Transact - SQL语句的性能得到了提高。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;相关子查询将对来自外部查询的每个候选行执行一次。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;相关子查询将引用内部查询中的一个或多个列。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;当在一个拥有子句中使用相关子查询时，将对由GROUP by子句返回的每个候选行执行一次内部查询。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;问题3:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;相关子查询与普通子查询类似，而相关子查询可以独立于整个Transact - SQL语句(True或False)运行。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;真正的&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;假&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;答案:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;问题1:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;正确答案是c .相关子查询需要在相关子查询语句中使用外部查询中的一个或多个列。在执行相关子查询时，这些外部列引用将替换为每个候选行的值。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;问题2:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;正确的答案是b和d . a是不正确的，因为随着候选行数量的增加，相关子查询的执行次数增加，而Transact - SQL语句性能变得更糟。c是不正确的，因为相关子查询必须包含来自外部查询的一个或多个行，而不是内部查询。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;问题3:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;正确的答案是b .如果您尝试独立于完整的Transact - SQL语句运行相关子查询，那么相关的子查询语句将会失败。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;这篇文章是T - SQL的进阶的一部分:除了基本的楼梯&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;注册到我们的RSS频道，一旦我们在楼梯上发布一个新的级别，就会得到通知!&lt;/p&gt;
</description>
<pubDate>Sun, 26 Nov 2017 15:08:00 +0000</pubDate>
<dc:creator>701</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lzy35/p/7900975.html</dc:identifier>
</item>
<item>
<title>Sass学习 - why_not_try</title>
<link>http://www.cnblogs.com/why-not-try/p/7900509.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/why-not-try/p/7900509.html</guid>
<description>&lt;p&gt;&lt;strong&gt;1st 介绍及安装使用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sass（Syntactically Awesome StyleSheets）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sass与Less一样，也是CSS预处理器，有着变量（variables），嵌套（Nested rules），混合（mixins）等功能。使用如Compass的样式库有助于更好的组织管理文件，以及高效开发项目！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法格式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有两种写法：1.SCSS（sassy css），这种只是在css语法基础上进行扩展，以.scss格式结尾；2.缩进格式（indented sass），通常称作“sass”。使用的是ruby语法，缩进代替花括号，换行代替分号。这种格式以.sass结尾。（ruby，日本人发明的，前些年与python其名，世界上很多网站是用ruby写的，如早期的Twitter。但是国内环境不是很好，原先我也没怎么接触过这么语言。）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;推荐SCSS写法！与css无痕过渡！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用Sass：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三种方法使用Sass&lt;/strong&gt;：作为命令行工具；作为独立的Ruby模块（module）；作为Rack-enabled框架的插件（如ruby on rails与Merb）。但是无论哪种方式都需要先安装Sass gem！&lt;/p&gt;
&lt;p&gt;windows系统需要先安装ruby,&lt;a href=&quot;https://rubyinstaller.org/&quot; target=&quot;_blank&quot;&gt;点击链接跳转&lt;/a&gt;。苹果默认已经安装了，Windows系统-----╮(╯▽╰)╭&lt;/p&gt;
&lt;p&gt;&lt;span&gt;安装命令：gem install sass&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1064142/201711/1064142-20171126181942375-1358579720.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;命令行语法可通过&lt;span&gt;sass --help&lt;/span&gt;进行查看！&lt;/p&gt;
&lt;p&gt;运行sass编译文件：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;sass test.scss test.css&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;监视单个sass文件，每次修改保存时自动编译！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;sass --watch test.scss:test.css&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;监视整个文件夹：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;sass --watch app/scss:public/stylesheets&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2nd 快速入门&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1 变量（variable）：&lt;/strong&gt;使用&lt;strong&gt;$&lt;/strong&gt;符号标识（老版本用!标识）&lt;/p&gt;
&lt;p&gt;示例example.scss：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
$testColor:gold;
.test1{
    color:$testColor;
    $width:100px;    
    width: $width;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sass example.scss example.css编译后：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test1 {
  color: gold;
  width: 100px; }

/*# sourceMappingURL=example.css.map */
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意：1.$testColor变量定义在规则块之外，$width定义在规则块内部，只能在规则块内部应用！　　2.变量定义要在变量使用之前（即$width:100px;在width:$width;前面；否则报错，这与less不同）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 嵌套规则（Nested Rules）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当我们编写如下css时：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test1 p {
  border: 1px solid goldenrod; }
.test1 .test2 p {
  color: blue; }
.test1 .test2 .test3 h1 {
  background-color: gold; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　结构就显的不是特别清晰了！&lt;/p&gt;
&lt;p&gt;采用sass的嵌套规则，我们可以写成：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test1{
    p{
        border: 1px solid goldenrod;
    }
    .test2{
        p{
            color: blue;
        }
        .test3{
            h1{
                background-color: gold;
            }
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可读性增强，易于维护！&lt;/p&gt;
&lt;p&gt;编译后产生的css文件，效果是一样的！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2.1 父选择器的标识符&amp;amp;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嵌套在简单的前景下一班可行，但是如果碰到:hover的伪类，就行不通了！这时候就需要用到&amp;amp;。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test1{
    background-color: red;
    a{
        color: blue;
        :hover{
            color: goldenrod;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当编译后，注意红箭头部分！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1064142/201711/1064142-20171126190750140-1437717574.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这时候.test1 a的所有子元素在被hover后会变色，这与hover在超链接上的得到的效果不符合！&lt;/p&gt;
&lt;p&gt;注意：这里我们可以得出sass每次解开一个嵌套规则后，变化后：父元素+“空格”+子元素！！！&lt;/p&gt;
&lt;p&gt;所以scss文件编写：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1064142/201711/1064142-20171126191539921-1153084919.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 这时候运行结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test1 {
  background-color: red; }
  .test1 a {
    color: blue; }
    .test1 a:hover {
      color: goldenrod; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&amp;amp;：对父元素的引用！！！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2.2 群组选择器的嵌套：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test2, .test3{
    h1,h2,h3{
        background-color: gold;
    }
    h4,h5,h6{
        background-color: blue;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　编译后：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test2 h1, .test2 h2, .test2 h3, .test3 h1, .test3 h2, .test3 h3 {
  background-color: gold; }
.test2 h4, .test2 h5, .test2 h6, .test3 h4, .test3 h5, .test3 h6 {
  background-color: blue; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　.test2与h1、.test2与h2、 .test2与h3分别组合，然后组成一个群组选择器；后面组合规则类似。所以编译生成了我们看到的css文件！！！&lt;/p&gt;
&lt;p&gt;相比传统CSS，我们可以看出大大减少了代码量；但是sass看起来文件很小，生成的css文件可能很大，可能对网站性能造成影响！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2.3 子组合选择器和同层组合选择器：&amp;gt;、+和~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些组合选择器可以放在外层选择器后面，或者里层选择器前面。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test4 {
    ~ .test5{border:solid;}
    &amp;gt; .test6{background-color: red;}
    dl &amp;gt;{
        dt{color:blue;}
        dd{color: orange;}
    }
    .test7 + &amp;amp; {margin-top: 5px;}
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　编译后变为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test4 ~ .test5 {
  border: solid; }
.test4 &amp;gt; .test6 {
  background-color: red; }
.test4 dl &amp;gt; dt {
  color: blue; }
.test4 dl &amp;gt; dd {
  color: orange; }
.test7 + .test4 {
  margin-top: 5px; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.2.4 还支持嵌套属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
h1{
    border:{
        style:dashed;
        color: black;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意：border后面有个“:”号！&lt;/p&gt;
&lt;p&gt;编译后：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
h1 {
  border-style: dashed;
  border-color: black; }
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;　　&lt;em&gt;&lt;strong&gt;个人不建议这种写法！！！&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;3rd 导入sass文件：&lt;/strong&gt;使用sass的@import规则并不需要指定导入文件的后缀名。&lt;strong&gt;即可省略.sass或.scss后缀！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1064142/201711/1064142-20171126203440390-1081948755.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1 默认变量值：!important&lt;/strong&gt;。变量申明了值，就用申明的值；没有则用默认值！&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
$testHeight:100px;
div{
   width:$testHeight; 
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.2 嵌套导入 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果一个_blue-theme.scss的局部文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test10{
    width: 10px;
    height: 20px;
    border-color: blue;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;example.scss文件：（@import可以省略文件前面的'_'，也可省略后缀！）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test12 {@import &quot;blue-theme&quot;};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后example.css:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test12 .test10 {
  width: 10px;
  height: 20px;
  border-color: blue; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.3 原生CSS导入&lt;/strong&gt;：由于sass兼容原生的css，所以也支持css@import。会出现在以下情况：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;被导入的文件已.css结尾；&lt;/li&gt;
&lt;li&gt;被导入的文件的名字是css的url()值；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;4th 静默注释&lt;/strong&gt;：&lt;strong&gt;&lt;span&gt;//&lt;/span&gt;&lt;/strong&gt;开头的注释，不会出现在编译后的css文件中；&lt;strong&gt;&lt;span&gt;/**/&lt;/span&gt;&lt;/strong&gt;注释的内容会出现在编译后的css文件中！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5th 混合器（mixins）：&lt;/strong&gt;样式可以很好的被重用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用@mixin标识符定义；使用@include调用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
@mixin test100{
    border-style: solid;
    border-color: blue;
    border-width: 10px;
}
div{
    @include test100;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div {
  border-style: solid;
  border-color: blue;
  border-width: 10px; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;5.1 给混合器传参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
@mixin test100($x,$y,$z){
    border-style: $x;
    border-color: $y;
    border-width: $z;
}
div{
    @include test100(solid,blue,10px);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div {
  border-style: solid;
  border-color: blue;
  border-width: 10px; }
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;　　&lt;strong&gt;注意：参数可以设置默认值；使用$name:defaule-value;的形式！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;6th 选择器继承：使用@extend实现。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.a{
    color: blue;
    background-color: orange;
}
.b{
    @extend .a;
    font-size: 18px;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.a, .b {
  color: blue;
  background-color: orange; }

.b {
  font-size: 18px; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　即.b继承了所有.a的样式属性！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;同时.b不仅会继承.a自身的样式，所有与.a有关的组合选择器也会被.b以组合选择器的形式继承！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.a{
    color: blue;
    background-color: orange;
}
.a div{
    width: 100px;
}
div1.a{
    padding: 3px;
}
.b{
    @extend .a;
    font-size: 18px;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　编译后：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.a, .b {
  color: blue;
  background-color: orange; }

.a div, .b div {
  width: 100px; }

div1.a, div1.b {
  padding: 3px; }

.b {
  font-size: 18px; }
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;　　注意：1.继承仅仅是重复选择器，不会重复属性；所以使用继承往往比混合器生成的css体积更小！&lt;/p&gt;
&lt;p&gt;　　2.不要在css规则中使用后代继承器去继承css规则。不然，生成css选择器数量会很容易失控！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;最后：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更多学习可参考：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sass-lang.com/install&quot; target=&quot;_blank&quot;&gt;Sass官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sass.hk/guide/&quot; target=&quot;_blank&quot;&gt;Sass中文参考&lt;/a&gt;&lt;/p&gt;


</description>
<pubDate>Sun, 26 Nov 2017 13:23:00 +0000</pubDate>
<dc:creator>why_not_try</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/why-not-try/p/7900509.html</dc:identifier>
</item>
<item>
<title>如何用webgl(three.js)搭建一个3D库房-第一课 - 魂断蓝桥666</title>
<link>http://www.cnblogs.com/yeyunfei/p/7899613.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yeyunfei/p/7899613.html</guid>
<description>&lt;p&gt;今天我们来讨论一下如何使用当前流行的WebGL技术搭建一个库房并且实现实时有效交互&lt;/p&gt;&lt;p&gt;第一步、搭建一个3D库房首先你得知道库房长啥样，我们先来瞅瞅库房长啥样（这是我在网上找的一个库房图片，百度了“库房”一下，找不到合适的全景，我们也只能窥一斑思全豹了，就它了，特此声明：此图片归原作者所有 非本人所拍，拿来只是给读者做个案例）&lt;/p&gt;&lt;p&gt;下面是我用webgl做出来的3D效果图（当前展示没有货物时的整体模拟）：&lt;/p&gt;&lt;p&gt;        &amp;lt;script src=&quot;/js/jquery-2.2.2.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/commonFunction.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;../js/tldesign3D/tl3DLoadData.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/tldesign3D/tlcoreBSP.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/tldesign3D/tlcoretween.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/tldesign3D/sourse/Detector.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/tldesign3D/sourse/OBJLoader.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;../js/tldesign3D/sourse/ParticleEngine.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/tldesign3D/tlcoreControls.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/tldesign3D/TransformControls.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/tldesign3D/stats.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/libs/layer/layer.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/p&gt;&lt;p&gt;　　　　a、搭建场景，要想webGL 3D展示 首先要创建画布，搭建场景&lt;/p&gt;&lt;div readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     tl3dCoreObj = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; tl3DCore();
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     tl3dCoreBusiness = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TL3DCoreBusiness();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; initOption = {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;画布参数&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         antialias: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         loadSyn: &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否启用异步加载&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         showHelpGrid: &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否显示网格线&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         clearCoolr: 0x002323&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         clearColorOp: 1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; Aobjects=[];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对象列表&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     tl3dCoreObj.inittl3DCore('canvas-frame'&lt;span&gt;, initOption, Aobjects);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     tl3dCoreObj.start();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;开始吧&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;　　　　　好了 就这么简单 所有需要的3D场景、渲染器、摄像机等等基础已经搭建好了 &lt;/p&gt;&lt;p&gt;　　　　　　先创建地板，分析一下 这个地板主要是绿色地板 加上黄色标线、我们可以让美工先将地板所需要的贴图画好，也可以直接自己画用模型创建，这里我们可以自己画&lt;/p&gt;&lt;div readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Aobjects.push({
    &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&quot;uuid&quot;: &quot;&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;name&quot;: &quot;floor&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;objType&quot;: &quot;floor&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;length&quot;: 2000&lt;span&gt;,
    &lt;/span&gt;&quot;width&quot;: 1500&lt;span&gt;,
    &lt;/span&gt;&quot;height&quot;: 10&lt;span&gt;,
    &lt;/span&gt;&quot;x&quot;: 0, &quot;y&quot;: 0, &quot;z&quot;: 0&lt;span&gt;,
    &lt;/span&gt;&quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 1529655, &quot;side&quot;: 1, &quot;opacity&quot;: 1&lt;span&gt; } } },
    &lt;/span&gt;&quot;showSortNub&quot;: 4&lt;span&gt;,
    &lt;/span&gt;&quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1&lt;span&gt; },
});&lt;br/&gt;Aobjects.push({ &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;line_5&quot;, &quot;objType&quot;: &quot;line&quot;, &quot;length&quot;: 3, &quot;width&quot;: 40, &quot;height&quot;: 2, &quot;x&quot;: 601.986, &quot;y&quot;: 8.801, &quot;z&quot;: -730.723, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, }, &quot;showSortNub&quot;: 5, })&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;　　　　紧接着我来创建围墙，为了便于用户操控，库房的顶部不用画&lt;/p&gt;&lt;div readability=&quot;145&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Aobjects.push(
 { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;&lt;span&gt;: 
&lt;/span&gt;&quot;&quot;, &quot;name&quot;: &quot;wall_16&quot;&lt;span&gt;,
 &lt;/span&gt;&quot;objType&quot;: &quot;holeCube&quot;&lt;span&gt;, 
&lt;/span&gt;&quot;length&quot;: 2000, &quot;width&quot;: 10, &quot;height&quot;: 200&lt;span&gt;,
 &lt;/span&gt;&quot;rotation&quot;: { &quot;0&quot;: { &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, &quot;1&quot;: { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, &quot;2&quot;: { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 } }, &quot;x&quot;: 0, &quot;y&quot;: 100, &quot;z&quot;: -755&lt;span&gt;, 
&lt;/span&gt;&quot;style&quot;: { &quot;skinColor&quot;: 9095650, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14540253 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 14540253 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 14540253 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14610158 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14540253 } } }, &quot;childrens&quot;: [{ &quot;op&quot;: &quot;-&quot;, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;doorhole1&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 10, &quot;height&quot;: 200, &quot;length&quot;: 220, &quot;x&quot;: -500, &quot;y&quot;: 0, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 9095650&lt;span&gt; } },
 { &lt;/span&gt;&quot;op&quot;: &quot;-&quot;, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;doorhole2&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 10, &quot;height&quot;: 200, &quot;length&quot;: 220, &quot;x&quot;: 500, &quot;y&quot;: 0, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 9095650 } }, { &quot;op&quot;: &quot;-&quot;, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;winhole1&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 10, &quot;height&quot;: 120, &quot;length&quot;: 160, &quot;x&quot;: 200, &quot;y&quot;: 20, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 9095650&lt;span&gt; } }, 
{ &lt;/span&gt;&quot;op&quot;: &quot;-&quot;, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;winhole2&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 10, &quot;height&quot;: 120, &quot;length&quot;: 160, &quot;x&quot;: 0, &quot;y&quot;: 20, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 9095650&lt;span&gt; } }, 
{ &lt;/span&gt;&quot;op&quot;: &quot;-&quot;, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;winhole3&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 10, &quot;height&quot;: 120, &quot;length&quot;: 160, &quot;x&quot;: -200, &quot;y&quot;: 20, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 9095650&lt;span&gt; } },
 { &lt;/span&gt;&quot;op&quot;: &quot;-&quot;, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;winhole4&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 10, &quot;height&quot;: 120, &quot;length&quot;: 160, &quot;x&quot;: 800, &quot;y&quot;: 20, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 9095650&lt;span&gt; } }, 
{ &lt;/span&gt;&quot;op&quot;: &quot;-&quot;, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;winhole5&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 10, &quot;height&quot;: 120, &quot;length&quot;: 160, &quot;x&quot;: -800, &quot;y&quot;: 20, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 9095650 } }], &quot;showSortNub&quot;: 16, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }})
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时候有点样子了 有点感觉了，下面就是细节了 正所谓细节决定成败，即使是个演示，我们也得添加窗户 门 盆栽 窗台 门框什么的&lt;/p&gt;&lt;div readability=&quot;822&quot;&gt;
&lt;pre&gt;
{ &quot;name&quot;: &quot;pot2_3&quot;, &quot;objType&quot;: &quot;cylinder&quot;, &quot;radiusTop&quot;: 16, &quot;radiusBottom&quot;: 8, &quot;height&quot;: 40, &quot;segmentsX&quot;: 2, &quot;segmentsY&quot;: 0, &quot;openEnded&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;position&quot;: { &quot;x&quot;: -104.675, &quot;y&quot;: 41.756, &quot;z&quot;: -735 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 1.5707963267948966 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16776960, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_side&quot;: { &quot;skinColor&quot;: 16777215, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/flower.gif&quot; } } }, &quot;showSortNub&quot;: 32, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;name&quot;: &quot;pot3_3&quot;, &quot;objType&quot;: &quot;cylinder&quot;, &quot;radiusTop&quot;: 16, &quot;radiusBottom&quot;: 8, &quot;height&quot;: 40, &quot;segmentsX&quot;: 2, &quot;segmentsY&quot;: 0, &quot;openEnded&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;position&quot;: { &quot;x&quot;: -678.846, &quot;y&quot;: 41.756, &quot;z&quot;: -735 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 1.5707963267948966 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16776960, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_side&quot;: { &quot;skinColor&quot;: 16777215, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/flower.gif&quot; } } }, &quot;showSortNub&quot;: 32, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;name&quot;: &quot;pot4_3&quot;, &quot;objType&quot;: &quot;cylinder&quot;, &quot;radiusTop&quot;: 16, &quot;radiusBottom&quot;: 8, &quot;height&quot;: 40, &quot;segmentsX&quot;: 2, &quot;segmentsY&quot;: 0, &quot;openEnded&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;position&quot;: { &quot;x&quot;: 656.887, &quot;y&quot;: 41.756, &quot;z&quot;: -735 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 1.5707963267948966 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16776960, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_side&quot;: { &quot;skinColor&quot;: 16777215, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/flower.gif&quot; } } }, &quot;showSortNub&quot;: 32, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;name&quot;: &quot;pot2_2&quot;, &quot;objType&quot;: &quot;cylinder&quot;, &quot;radiusTop&quot;: 16, &quot;radiusBottom&quot;: 8, &quot;height&quot;: 40, &quot;segmentsX&quot;: 2, &quot;segmentsY&quot;: 0, &quot;openEnded&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;position&quot;: { &quot;x&quot;: -104.987, &quot;y&quot;: 41.756, &quot;z&quot;: -735 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16776960, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_side&quot;: { &quot;skinColor&quot;: 16777215, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/flower.gif&quot; } } }, &quot;showSortNub&quot;: 32, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;name&quot;: &quot;pot3_2&quot;, &quot;objType&quot;: &quot;cylinder&quot;, &quot;radiusTop&quot;: 16, &quot;radiusBottom&quot;: 8, &quot;height&quot;: 40, &quot;segmentsX&quot;: 2, &quot;segmentsY&quot;: 0, &quot;openEnded&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;position&quot;: { &quot;x&quot;: -678.595, &quot;y&quot;: 41.756, &quot;z&quot;: -735 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16776960, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_side&quot;: { &quot;skinColor&quot;: 16777215, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/flower.gif&quot; } } }, &quot;showSortNub&quot;: 32, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;name&quot;: &quot;pot4_2&quot;, &quot;objType&quot;: &quot;cylinder&quot;, &quot;radiusTop&quot;: 16, &quot;radiusBottom&quot;: 8, &quot;height&quot;: 40, &quot;segmentsX&quot;: 2, &quot;segmentsY&quot;: 0, &quot;openEnded&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;position&quot;: { &quot;x&quot;: 658.116, &quot;y&quot;: 41.756, &quot;z&quot;: -735 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16776960, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_side&quot;: { &quot;skinColor&quot;: 16777215, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/flower.gif&quot; } } }, &quot;showSortNub&quot;: 32, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;name&quot;: &quot;doorLeft_44&quot;, &quot;uuid&quot;: &quot;&quot;, &quot;actionSign&quot;: &quot;doorLeft&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;castShadow&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;width&quot;: 4, &quot;height&quot;: 190, &quot;length&quot;: 104, &quot;x&quot;: 553, &quot;y&quot;: 100, &quot;z&quot;: -755, &quot;style&quot;: { &quot;skinColor&quot;: 9095650, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_left.png&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_right.png&quot; } } }, &quot;dbclickEvents&quot;: { &quot;obj_eventParamInfo&quot;: [{ &quot;name&quot;: &quot;&quot;, &quot;remark&quot;: &quot;&quot; }], &quot;obj_event&quot;: &quot;openLeftDoor(runobj,function(){});&quot; }, &quot;showSortNub&quot;: 44, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;door_case1&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 15, &quot;width&quot;: 15, &quot;height&quot;: 190, &quot;x&quot;: 388.523, &quot;y&quot;: 100, &quot;z&quot;: -754.724, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; } } }, &quot;showSortNub&quot;: 46, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;door_case2&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 15, &quot;width&quot;: 15, &quot;height&quot;: 190, &quot;x&quot;: 612.609, &quot;y&quot;: 100, &quot;z&quot;: -754.724, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; } } }, &quot;showSortNub&quot;: 46, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;door_case3&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 240, &quot;width&quot;: 15, &quot;height&quot;: 5, &quot;x&quot;: 500, &quot;y&quot;: 197.5, &quot;z&quot;: -754.724, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; } } }, &quot;showSortNub&quot;: 46, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; }
    ,
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;castShadow&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;name&quot;: &quot;doorRight_45&quot;, &quot;actionSign&quot;: &quot;doorRight&quot;, &quot;uuid&quot;: &quot;&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 4, &quot;height&quot;: 190, &quot;length&quot;: 104, &quot;x&quot;: 448, &quot;y&quot;: 100, &quot;z&quot;: -755, &quot;style&quot;: { &quot;skinColor&quot;: 9095650, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_right.png&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_left.png&quot; } } }, &quot;dbclickEvents&quot;: { &quot;obj_eventParamInfo&quot;: [{ &quot;name&quot;: &quot;&quot;, &quot;remark&quot;: &quot;&quot; }], &quot;obj_event&quot;: &quot;openRightDoor(runobj,function(){});&quot; }, &quot;showSortNub&quot;: 45, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;door_case6&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 240, &quot;width&quot;: 15, &quot;height&quot;: 5, &quot;x&quot;: -500, &quot;y&quot;: 197.5, &quot;z&quot;: -754.724, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; } } }, &quot;showSortNub&quot;: 46, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;door_case4&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 15, &quot;width&quot;: 15, &quot;height&quot;: 190, &quot;x&quot;: -388.523, &quot;y&quot;: 100, &quot;z&quot;: -754.724, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; } } }, &quot;showSortNub&quot;: 46, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;door_case5&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 15, &quot;width&quot;: 15, &quot;height&quot;: 190, &quot;x&quot;: -612.609, &quot;y&quot;: 100, &quot;z&quot;: -754.724, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; } } }, &quot;showSortNub&quot;: 46, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;castShadow&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;name&quot;: &quot;doorRight_1&quot;, &quot;actionSign&quot;: &quot;doorRight&quot;, &quot;uuid&quot;: &quot;&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 4, &quot;height&quot;: 190, &quot;length&quot;: 104, &quot;x&quot;: -553, &quot;y&quot;: 100, &quot;z&quot;: -755, &quot;style&quot;: { &quot;skinColor&quot;: 9095650, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_right.png&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_left.png&quot; } } }, &quot;dbclickEvents&quot;: { &quot;obj_eventParamInfo&quot;: [{ &quot;name&quot;: &quot;&quot;, &quot;remark&quot;: &quot;&quot; }], &quot;obj_event&quot;: &quot;openRightDoor(runobj,function(){});&quot; }, &quot;showSortNub&quot;: 45, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;name&quot;: &quot;doorLeft_2&quot;, &quot;uuid&quot;: &quot;&quot;, &quot;actionSign&quot;: &quot;doorLeft&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;castShadow&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;width&quot;: 4, &quot;height&quot;: 190, &quot;length&quot;: 104, &quot;x&quot;: -448, &quot;y&quot;: 100, &quot;z&quot;: -755, &quot;style&quot;: { &quot;skinColor&quot;: 9095650, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_left.png&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_right.png&quot; } } }, &quot;dbclickEvents&quot;: { &quot;obj_eventParamInfo&quot;: [{ &quot;name&quot;: &quot;&quot;, &quot;remark&quot;: &quot;&quot; }], &quot;obj_event&quot;: &quot;openLeftDoor(runobj,function(){});&quot; }, &quot;showSortNub&quot;: 44, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添加36个货架之后，整个场景的帧率变成了14帧 这样的体验效果是非常不好的 &lt;/p&gt;&lt;p&gt;&lt;span&gt;　　第二课我们将详细讲解如何添加货物，货架容量管理、以及动态操作货物上下架 、厂房的温湿度 空调 通风 防火 消防定位等操作&lt;/span&gt;&lt;/p&gt;</description>
<pubDate>Sun, 26 Nov 2017 12:36:00 +0000</pubDate>
<dc:creator>魂断蓝桥666</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yeyunfei/p/7899613.html</dc:identifier>
</item>
</channel>
</rss>