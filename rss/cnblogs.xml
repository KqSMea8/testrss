<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>京东Alpha平台开发笔记系列（二） - 一韦潇湘</title>
<link>http://www.cnblogs.com/Dainelcw/p/JDAlphaTwice.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Dainelcw/p/JDAlphaTwice.html</guid>
<description>&lt;p&gt;　　&lt;span&gt;第一篇博文简单讲了一下京东Alpha平台与个人idea技能，本篇将讲解Alpha平台与个人开发需要的一些知识，下面开篇&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;——》》》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1398949/201808/1398949-20180822202259688-1508502467.png&quot; alt=&quot;&quot; width=&quot;797&quot; height=&quot;426&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上图就是&lt;a href=&quot;http://www.cnblogs.com/Dainelcw/p/京东Alpha技能平台&quot; target=&quot;_blank&quot;&gt;京东Alpha技能平台&lt;/a&gt;的首页，Skill平台（技能平台），官方介绍：&lt;/p&gt;
&lt;p&gt;　　　　Alpha技能的开发平台，提供全套的自助式开发工具；帮开发者轻松，快速地将服务集成到Alpha平台，使用户通过自然语言即可获取服务，并通过Alpha赋能智能设备或手机应用，帮开发者获得亿级智能场景用户，从移动服务向AI服务升级。&lt;/p&gt;
&lt;p&gt;　　　　说白了就是智能音箱的小应用。&lt;/p&gt;
&lt;p&gt;　　　　点击控制台即可进入控制台界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1398949/201808/1398949-20180822202824905-1264011573.png&quot; alt=&quot;&quot; width=&quot;941&quot; height=&quot;183&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　如上图进入之后就可以创建新的技能了。新创建技能后需要根据自己的需求添加意图，意图需要话术支持，话术则是由槽和槽值来实现的，所以需要自己添加槽位以及槽值，这时你也可以调用系统的槽值。系统提供的意图有：&lt;/p&gt;
&lt;p&gt;　　　　Alpha.CancelIntent：包含类似“退出”等话术的意图，用于中断正在进行的请求或服务并退出意图（为保证用户最低体验，该意图不可删除）　　&lt;/p&gt;
&lt;p&gt;　　　　Alpha.HelpIntent　：包含类似“帮助”等话术的意图，用于帮助用户了解如何使用您的技能（为保证用户最低体验，该意图不可删除）　　　　　　　　&lt;/p&gt;
&lt;p&gt;　　　　Alpha.NextIntent　：包含类似“下一条”等话术的意图，用于指向并获取下一个需要的内容　　　　　　　&lt;/p&gt;
&lt;p&gt;　　　　Alpha.RepeatIntent：包含类似“重复”等话术的意图，用于重新获取当前内容&lt;/p&gt;
&lt;p&gt;　　　　Alpha.ResumeIntent：继续\恢复&lt;/p&gt;
&lt;p&gt;　　　　Alpha.DefaultIntent：当 Alpha 接收到用户请求后，如果无法解析，则直接将该请求发送给技能，由技能自己进行分析处理&lt;/p&gt;
&lt;p&gt;　　　　Alpha.PauseIntent：暂停播放&lt;/p&gt;
&lt;p&gt;　　　　Alpha.LoopOffIntent：循环播放关&lt;/p&gt;
&lt;p&gt;　　　　Alpha.LoopOnIntent：循环播放开&lt;/p&gt;
&lt;p&gt;　　　　Alpha.PreviousIntent：上一首/曲/个&lt;/p&gt;
&lt;p&gt;　　　　Alpha.ShuffleOffIntent：随机播放关&lt;/p&gt;
&lt;p&gt;　　　　Alpha.ShuffleOnIntent：随机播放开&lt;/p&gt;
&lt;p&gt;　　　　Alpha.StartOverIntent：重新播放&lt;/p&gt;
&lt;p&gt;　　　　内置槽位：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1398949/201808/1398949-20180822210705953-2115370144.png&quot; alt=&quot;&quot; width=&quot;948&quot; height=&quot;441&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;新建意图&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;　　　&lt;span&gt;如下图，在新建意图中添加槽位，这里槽位名称需要自己填写，槽位类型可选自己自定义的类型也可选择内置类型，这里就选择了内置的日期类型和数字类型，意图话术中　就是编写一句话术，使用户在说含有这些槽值的话术时触发此意图。例：今天花了20元。此句话就触发了本话术，于是就发出意图请求。发出的请求以post方式发送，数据以json格式发送给服务器，所以实现此应用还需要搭建一台服务器（小编使用的是腾讯云服务器，然后自己搭建服务器（Xampp——Mysql+tomcat+appach），然后使用eclipse建立一个web工程，用servlet方式处理请求即可）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1398949/201808/1398949-20180822211020689-406108980.png&quot; alt=&quot;&quot; width=&quot;957&quot; height=&quot;446&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　下面分析数据协议：&lt;/p&gt;
&lt;p&gt;　　　　官方文档：http://alphadev.jd.com/Docs/skillCreate#shujuxieyi&lt;/p&gt;
&lt;p&gt;　　　　我的请求：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;44&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
//首次建立会话
{
  &quot;request&quot;: {
    &quot;dialogState&quot;: &quot;STARTED&quot;, 
    &quot;requestId&quot;: &quot;debf33c1-7fdb-4417-b015-3313568bad7e_1310_test&quot;, 
    &quot;timestamp&quot;: 1534340485603, 
    &quot;type&quot;: &quot;LaunchRequest&quot;                             //会话正式开始
  }, 
  &quot;session&quot;: {
    &quot;application&quot;: {
      &quot;applicationId&quot;: &quot;jd.alpha.skill.c570c43sxsxa158c74abcb2e673fd06d680af&quot;
    }, 
    &quot;device&quot;: {
      &quot;deviceId&quot;: &quot;deviceId_a4f5b13d80xsce46abbf73ssxa31877d1e025_dev_test&quot;
    }, 
    &quot;isNew&quot;: true, 
    &quot;sessionId&quot;: &quot;xxxxcec8xxx1960-3a35-45ce-917d-0a1d1c2x80b04&quot;, 
    &quot;user&quot;: {
      &quot;userId&quot;: &quot;jd.account.xxxx3d8axd78643xxx18eb3b0202303b09910281&quot;
    }
  }, 
  &quot;version&quot;: &quot;1.0&quot;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　带有意图的请求：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;价格查询服务&lt;/span&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;request&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;dialogState&quot;: &quot;IN_PROGRESS&quot;&lt;span&gt;, 
    &lt;/span&gt;&quot;intent&quot;&lt;span&gt;: {
      &lt;/span&gt;&quot;confirmResult&quot;: &quot;NONE&quot;&lt;span&gt;, 
      &lt;/span&gt;&quot;name&quot;: &quot;MainQuery&quot;,                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务请求名称&lt;/span&gt;
      &quot;slots&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;Date&quot;&lt;span&gt;: {
          &lt;/span&gt;&quot;confirmResult&quot;: &quot;NONE&quot;&lt;span&gt;, 
          &lt;/span&gt;&quot;matched&quot;: true&lt;span&gt;, 
          &lt;/span&gt;&quot;name&quot;: &quot;今天&quot;　　　　　　　　　　　　//符合条件的槽值&lt;span&gt;
        }, 
        &lt;/span&gt;&quot;Number&quot;&lt;span&gt;: {
          &lt;/span&gt;&quot;confirmResult&quot;: &quot;NONE&quot;&lt;span&gt;, 
          &lt;/span&gt;&quot;matched&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, 
          &lt;/span&gt;&quot;name&quot;: &quot;20&quot;&lt;span&gt;
        }&lt;/span&gt;&lt;span&gt;
      }
    }, 
    &lt;/span&gt;&quot;requestId&quot;: &quot;6e293729-56dd-47c9-a53b-abc55999ae57_1310_test&quot;&lt;span&gt;, 
    &lt;/span&gt;&quot;timestamp&quot;: 1534340380605&lt;span&gt;, 
    &lt;/span&gt;&quot;type&quot;: &quot;IntentRequest&quot;　　　　　　　　　　//请求类型&lt;span&gt;
  }, 
  &lt;/span&gt;&quot;session&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;application&quot;&lt;span&gt;: {
      &lt;/span&gt;&quot;applicationId&quot;: &quot;jd.alpha.skill.c570c431dses58c74abcb2e673fd06d680af&quot;&lt;span&gt;
    }, 
    &lt;/span&gt;&quot;contexts&quot;&lt;span&gt;: { }, 
    &lt;/span&gt;&quot;device&quot;&lt;span&gt;: {
      &lt;/span&gt;&quot;deviceId&quot;: &quot;deviceId_696caff960fa4a5f93sdde9e434c2abedad3_dev_test&quot;&lt;span&gt;
    }, 
    &lt;/span&gt;&quot;isNew&quot;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;, 
    &lt;/span&gt;&quot;sessionId&quot;: &quot;14deca02-9293-406b-9318-94dsd6949a1409&quot;&lt;span&gt;, 
    &lt;/span&gt;&quot;user&quot;&lt;span&gt;: {
      &lt;/span&gt;&quot;userId&quot;: &quot;jd.account.3d8ad7864318eb3bdfdsf0202303b09910281&quot;&lt;span&gt;
    }
  }, 
  &lt;/span&gt;&quot;version&quot;: &quot;1.0&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;　　更多话术请求json数据形式有待大家发现运用，详细仔细参考官方数据协议。&lt;/p&gt;
&lt;p&gt;　　下一篇介绍服务器端的搭建以及通讯流程及处理步骤。&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://www.cnblogs.com/Dainelcw/p/JDAlpha.html&quot; target=&quot;_blank&quot;&gt;点击这里直接跳转上一篇&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;


</description>
<pubDate>Sat, 08 Sep 2018 15:40:00 +0000</pubDate>
<dc:creator>一韦潇湘</dc:creator>
<og:description>本文继第一篇文章之后出的一篇以平台开发说明步骤为主线，阐述简易开发流程。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Dainelcw/p/JDAlphaTwice.html</dc:identifier>
</item>
<item>
<title>pytesseract库的安装和使用 - 星辰之海</title>
<link>http://www.cnblogs.com/Lvg3687/p/9611104.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Lvg3687/p/9611104.html</guid>
<description>&lt;p&gt;在写爬虫的时候总是遇到一些以图片的形式展示的信息，因此要怎么解析图片上的信息呢？在Google上查了一下，需要安装pytesseract和pillow（我用的python3.7）和Tesseract-OCR&lt;/p&gt;
&lt;p&gt;1. 安装pytesseract&lt;/p&gt;
&lt;p&gt;　　pip insatll pytesseract&lt;/p&gt;
&lt;p&gt;2. 安装pillow&lt;/p&gt;
&lt;p&gt;　　pip install pillow&lt;/p&gt;
&lt;p&gt;3. 安装Tesseract-OCR(https://github.com/tesseract-ocr/tesseract)&lt;/p&gt;
&lt;p&gt;4. 安装完后将Tesseract-OCR的安装路径添加到环境变量中PATH和Path中都要添加&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1217976/201809/1217976-20180908232322270-1279337913.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;5. 在python的安装路径下的修改安装的pytesseract库里面的pytesseract.py，将默认的改成Tesseract-OCR的安装路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1217976/201809/1217976-20180908232648078-1618228855.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7. 配置完了开始撸代码吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1217976/201809/1217976-20180908233041338-1739806015.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;运行后发现会报错&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1217976/201809/1217976-20180908233242826-1256653261.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用Google查了一下，发现是因为验证码的图片模式为RGBA，是无法分配调色盘给透明通道的。更换为RGB模式则不会出现该问题。&lt;/p&gt;
&lt;p&gt;对原先的代码修改一下，变为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1217976/201809/1217976-20180908233550136-1003635760.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;修改后就能正常使用了。&lt;/p&gt;

</description>
<pubDate>Sat, 08 Sep 2018 15:39:00 +0000</pubDate>
<dc:creator>星辰之海</dc:creator>
<og:description>在写爬虫的时候总是遇到一些以图片的形式展示的信息，因此要怎么解析图片上的信息呢？在Google上查了一下，需要安装pytesseract和pillow（我用的python3.7）和Tesseract-</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Lvg3687/p/9611104.html</dc:identifier>
</item>
<item>
<title>GitLab 社区版 11.0.2用户管理教程 - 渣渣辉</title>
<link>http://www.cnblogs.com/Dev0ps/p/9611096.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Dev0ps/p/9611096.html</guid>
<description>&lt;div class=&quot;WordSection1&quot; readability=&quot;8.5116279069767&quot;&gt;
&lt;p align=&quot;left&quot;&gt;Gitlab地址：&lt;a href=&quot;http://172.20.10.197/users/sign_in&quot;&gt;http://xx.xx.xx.xx/users/sign_in&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;登录之后，主界面&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908232621244-1498068151.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;右上角功能按钮，分别为管理区域、新建、问题、合并请求、待办事件、个人设置&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908232636733-1700331945.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;选择管理区域按钮&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908232653380-2147443497.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;WordSection2&quot; readability=&quot;24&quot;&gt;
&lt;p align=&quot;left&quot;&gt;可以根据需要选择新建项目、新建用户和新建组&lt;/p&gt;
&lt;h4&gt;一、 项目管理&lt;/h4&gt;
&lt;p&gt;a)    新建项目&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908232710441-804250349.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 项目名称，项目名称可以为字母、数字、空格、下划线、中划线和英文点号组 成，且必须以字母或数字开头，不能使用中文；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 选择命名空间（组、用户）；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3. 项目描述；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4. 可见性（库类别） ：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;私有库：只有被赋予权限的用户可见；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;内部库：登录用户可以下载；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;公开库：所有人可以下载；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;5. 其它可以自定义库；&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908232751434-516463121.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;根据实际情况填写完各项之后，点击创建项目，项目创建成功&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908232803644-2050590322.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;右上方内容即是项目地址，可发送给开发人员下载和初始化项目&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908232819183-667394372.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;b) 编辑或删除项目&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;1. 点击右上角管理区按钮，进入管理区主界面选择要删除或编辑的项目&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908232829481-1599987546.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;点击右上角编辑&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908232841249-348847478.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;2. 进入编辑主页，在下图中右下角高级设置展开选择删除项目&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908232850033-1759082522.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908232913275-1429827082.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;二、组管理&lt;/h4&gt;
&lt;p&gt;a) 新建组&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908232924009-337573344.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908232944538-1959163138.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;span&gt;1. 群组路径；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;2. 组名称，组名称可以为字母、数字、空格、下划线、中划线和英文点号组成；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;且必须以字母或数字开头，&lt;span&gt;不能使用中文；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;3. 组描述；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;b) 编辑或删除组&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;1. 点击右上角管理区按钮，进入管理区主界面选择要编辑或删除的组&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908233008748-2094246664.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;选择Groups&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908233019594-2035202146.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;选择需要删除的组确定&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908233029622-997051215.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;三、用户管理&lt;/h4&gt;
&lt;p align=&quot;left&quot;&gt;a) 新建用户&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908233043643-1444988920.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908233103083-90146999.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908233112412-976221579.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;1. 姓名（可以是中文）；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;2. 用户名（可以为字母、数字、空格、下划线、中划线和英文点号组成，且必须以字 母或数字开头，不能使用中文）；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;3. 邮箱地址（首次接收密码）；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;4. 建项目的数量限制；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;5. 是否可以创建组；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;6. 是否是管理员；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;7．选填内容（个人联系方式）；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;b)编辑或删除用户&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;点击右上角管理区按钮，进入管理区主界面&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908233127594-986125931.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;c)设置用户密码，管理区域—&amp;gt;用户—&amp;gt;编辑。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908233135010-1680310511.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908233216552-1482485918.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;四、项目权限管理&lt;/h4&gt;
&lt;p align=&quot;left&quot;&gt;a)点击左上角群组按钮，进入成员管理界面，可以添加组成员和设置相关权限&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908233228151-2066186915.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;b)项目成员权限管理&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201809/1271786-20180908233236956-625744569.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;span&gt;权限分类:&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;Guest(访客) – 阅览项目、写留言薄；&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;Reporter（报告人）- 阅览项目、写留言薄、&lt;span&gt;拉项目、下载项目、创建代码片 段；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;Developer（开发者）- 阅览项目、写留言薄、&lt;span&gt;拉项目、下载项目、创建代码 片段、创建合并请求、创建新分支、推送不受保护的分支、移除不受保护的分支 、创建标签、编写 wiki；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;Master（管理者）- 创建项目、写留言薄、&lt;span&gt;拉项目、下载项目、创建代码片 段、创建合并请求、创建新分支、推送不受保护的分支、移除不受保护的分支 、创建标签、编写 wiki、增加团队成员、推送受保护的分支、移除受保护 的分支、编辑项目、添加部署密钥、配置项目钩子；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;Owner（所有者）-  创建项目、写留言薄、&lt;span&gt;拉项目、下载项目、创建代码片段、创建合并请求、创建新分支、推送不受保护的分支、移除不受保护的分支  、创建标签、编写 wiki、增加团队成员、推送受保护的分支、移除受保护 的分支、编辑项目、添加部署密钥、配置项目钩子、开关公有模式、将项目转 移到另一个名称空间、删除项目；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;规范：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ol&gt;&lt;li&gt;各项目的管理员用户由超级管理员创建；&lt;/li&gt;
&lt;li&gt;组成员由管理员创建并赋予相应权限；&lt;/li&gt;
&lt;li&gt;各项目由项目管理员创建；&lt;/li&gt;
&lt;li&gt;每个项目创建四个分支(master，test，devp，verify);&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 08 Sep 2018 15:38:00 +0000</pubDate>
<dc:creator>渣渣辉</dc:creator>
<og:description>Gitlab地址：http://xx.xx.xx.xx/users/sign_in 登录之后，主界面 右上角功能按钮，分别为管理区域、新建、问题、合并请求、待办事件、个人设置 选择管理区域按钮 Git</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Dev0ps/p/9611096.html</dc:identifier>
</item>
<item>
<title>非阻塞 Connect - Tattoo_Welkin</title>
<link>http://www.cnblogs.com/Tattoo-Welkin/p/9611086.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Tattoo-Welkin/p/9611086.html</guid>
<description>&lt;ol&gt;&lt;li&gt;可以让三路握手的处理等同与一般数据的处理，而不是一直让 &lt;code&gt;connect&lt;/code&gt;一直尝试重连或者花费一个&lt;code&gt;RTT&lt;/code&gt;时间。而且RTT时间从几毫秒到几秒不等，万一有许多连接，不论是尝试重连还是花费一个RTT时间，都将是致命的延时。&lt;/li&gt;
&lt;li&gt;可以使用该技术同时建立多个连接。Web浏览器中常用。&lt;/li&gt;
&lt;li&gt;既然使用&lt;code&gt;select&lt;/code&gt;等待连接的建立，我们就可以质地不嗯一个时间限制，使得我们能够缩短&lt;code&gt;connect&lt;/code&gt;的超时。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol readability=&quot;-0.5&quot;&gt;&lt;li&gt;处理&lt;code&gt;connect&lt;/code&gt;立即建立的情况。（比如我们连接的是同一个主机时）&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;使用&lt;code&gt;selcet&lt;/code&gt;与非阻塞&lt;code&gt;connect&lt;/code&gt;的一些注意事项：&lt;/p&gt;
&lt;p&gt;2.1. 当连接成功建立后，描述符变为可写。&lt;br/&gt;2.2 当遇到错误时，描述符变为即可写又可读。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;非阻塞connect时间获取客户程序&quot;&gt;（1）非阻塞&lt;code&gt;connect&lt;/code&gt;:时间获取客户程序&lt;/h2&gt;
&lt;pre class=&quot;c&quot;&gt;
&lt;code&gt;int Connect_nonblock(int sockfd, const SA *saptr, socklen_t salen, int nsec) //返回 -1 失败
{
    int flags, n, error;
    socklen_t len;
    fd_set rset, wset;
    struct timeval tval;
    flags = Fcntl(sockfd, F_GETFL, 0);
    Fcntl(sockfd, F_SETFL, flags | O_NONBLOCK);

    error = 0;
    if ((n = connect(sockfd, saptr, salen)) &amp;lt; 0)
    {
        if (errno != EINPROGRESS) //表示连接已经启动但是还没有完成
            return (-1);
    }
    if (n == 0) //表示连接建立 立即完成
        goto done;

    FD_ZERO(&amp;amp;rset);
    FD_SET(sockfd, &amp;amp;rset);
    wset = rset;
    tval.tv_sec = nsec;
    tval.tv_usec = 0;
    if ((n = Select(sockfd + 1, &amp;amp;rset, &amp;amp;wset, NULL, nsec ? &amp;amp;tval : NULL)) == 0)//返回0，超时，关闭套接字
    {
        Close(sockfd);
        errno = ETIMEDOUT;
        return (-1);
    }
    if (FD_ISSET(sockfd, &amp;amp;rset) || FD_ISSET(sockfd, &amp;amp;wset))
    {
        len = sizeof(error);
        if (getsockopt(sockfd, SOL_SOCKET, SO_ERROR, &amp;amp;error, &amp;amp;len) &amp;lt; 0)
            return (-1);
    }
    else
        err_quit(&quot;selcet error :sockfd not set\n&quot;);
done: //直到建立才返回

    Fcntl(sockfd, F_SETFL, flags);

    if (error)
    {
        Close(sockfd);
        errno = error;
        return (-1);
    }
    return 0; //成功连接
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;一些说明&quot;&gt;一些说明：&lt;/h4&gt;
&lt;p&gt;  其实比较简单，就是&lt;code&gt;connect&lt;/code&gt;去连接，如果能够连上就连接即可，如果没有连上就让&lt;code&gt;select&lt;/code&gt;当作一般数据去处理即可！对于连接，&lt;code&gt;select&lt;/code&gt;有两种情况，成功就是可写，失败即可读又可写。那么问题来了？&lt;/p&gt;
&lt;p&gt;  如何去判断成功还是失败呐？emmmm，所谓的失败就是发生了错误，那么我们直接检测是否有错误即可 。使用&lt;code&gt;getsockopt&lt;/code&gt;函数 。&lt;/p&gt;
&lt;h3 id=&quot;getsockopt函数说明获取某个套接字关联的选项&quot;&gt;&amp;lt;1&amp;gt; &lt;code&gt;getsockopt&lt;/code&gt;函数说明：获取某个套接字关联的选项&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;
       int getsockopt(int socket, int level, int option_name,
           void *restrict option_value, socklen_t *restrict option_len);
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol readability=&quot;2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;getcoksopt&lt;/code&gt;和&lt;code&gt;setsockopt&lt;/code&gt;都只用于套接字&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;level&lt;/code&gt;指定系统中解释选项的代码或为通用套接字代码，或为特定于某个协议的代码 。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;option_value&lt;/code&gt;将已获取的选项当前值，存放在&lt;code&gt;*option_value&lt;/code&gt;中，&lt;code&gt;option_len&lt;/code&gt;为&lt;code&gt;*option_value&lt;/code&gt;的大小 。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;option_name&lt;/code&gt;代表选项 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h5 id=&quot;返回值&quot;&gt;返回值：&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;RETURN VALUE
       Upon  successful  completion,  getsockopt()  shall  return 0; otherwise, −1 shall be returned and errno set to indicate the
       error.
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;Berkeley&lt;/code&gt;系统中：在&lt;code&gt;*option_value&lt;/code&gt;中返回待处理错误，函数返回 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Solaris&lt;/code&gt;系统中：将&lt;code&gt;errno&lt;/code&gt;置为待处理错误，函数返回 -1&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;所以在我们的代码中，我们将这两种情况都进行处理 。&lt;/p&gt;
&lt;h3 id=&quot;测试&quot;&gt;&amp;lt;2&amp;gt;测试：&lt;/h3&gt;
&lt;pre class=&quot;c&quot;&gt;
&lt;code&gt;int main(int argc, char **argv)
{
    int sockfd, n;
    char recvline[MAXLINE + 1] = {0};
    struct sockaddr_in servaddr;

    if (argc != 2)
        err_quit(&quot;usage: a.out &amp;lt;IPaddress&amp;gt;&quot;);

    if ((sockfd = Socket(AF_INET, SOCK_STREAM, 0)) &amp;lt; 0)
        err_sys(&quot;Socket error&quot;);

    bzero(&amp;amp;servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(13); /* daytime server */
    if (inet_pton(AF_INET, argv[1], &amp;amp;servaddr.sin_addr) &amp;lt;= 0)
        err_quit(&quot;inet_pton error for %s&quot;, argv[1]);

    if (Connect_nonblock(sockfd, (SA *)&amp;amp;servaddr, sizeof(servaddr), 10) &amp;lt; 0)
        err_sys(&quot;connect error&quot;);

    while ((n = recv(sockfd, recvline, MAXLINE, 0)) &amp;gt; 0)
    {
        recvline[n] = 0; /* null terminate */
        printf(&quot;recvline ==  %s\n&quot;, recvline);
    }
    if (n &amp;lt; 0)
        err_sys(&quot;read error&quot;);
    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180908224904803?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdXNoZW5neGlfcm9vdA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;非阻塞connect-web-客户程序&quot;&gt;（2）非阻塞&lt;code&gt;Connect&lt;/code&gt; : Web 客户程序&lt;/h2&gt;
&lt;p&gt;  先获取一个主页，然后并行多个连接获取主页的其他网络资源。很显然，这样子的并行连接序列要比串行获取资源来的快。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;结构体设计&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;#define MAXFILES 20
#define SERV &quot;80&quot;
struct file
{
    char *f_name; //资源路径
    char *f_host; //主机
    int f_fd;//套接字
    int f_flags; //当前状态，有四种值，分别是 { 0, F_CONNECTING, F_READING, F_DONE }
}
file[MAXFILES];&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;大致思路：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;// 假设我们下载 10 资源
初始化 struct file files[10];

先成功建立第一个连接（获取主页）

while(xxx) {
   使用非阻塞I/O, 同时建立多个连接，每一个 f_flags = F_CONNECTING.
   select 监听套接字
   for (f in files) { // 遍历所有文件
     if (f.f_flags == F_CONNECTING) {
       // 检查连接是否成功或失败。使用我们上面用到的知识，主要是 getsockopt 函数
       如果连接成功，则发起 GET 请求，同时 f_flags = F_READING.
       如果连接失败，f_flags = F_DONE;
     }
     else if (f.f_flags == F_READING) {
       // 下载资源
       nr = read(f.f_fd, buf);
       if (nr == 0) {
         对端关闭， f.f_flags = F_DONE;
       }
     }
   }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;web.h&lt;/code&gt;文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#ifndef _WEB_H
#define _WEB_H

#include &quot;../myhead.h&quot;

#define MAXFILES 20
#define SERV &quot;80&quot;
struct file
{
    char *f_name;
    char *f_host;
    int f_fd;
    int f_flags;
}
file[MAXFILES];

#define F_CONNECTING 1
#define F_READING 2
#define F_DONE 4

#define GET_CMD &quot;GET %s HTTP/1.0\r\n\r\n&quot;

int nconn, nfiles, nlefttoconn, nlefttoread, maxfd;
fd_set rset, wset;
/*
nconn:当前打开的连接数，不超过第一个命令行参数
nlefttoread:待读取的文件数量
nlefttoconn:尚未连接的文件数
nfiles:文件数量
*/
#endif
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;web.c&lt;/code&gt;文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#include &quot;web.h&quot;

struct addrinfo *Host_serv(const char *host, const char *serv, int family, int socktype);
void home_pages(const char *host, const char *fname);
void start_connect(struct file *fptr); //非阻塞连接;
void write_get_cmd(struct file *fptr);

int Tcp_connect(const char *host, const char *serv)
{
    int sockfd, n;
    struct addrinfo hints, *res, *ressave;

    bzero(&amp;amp;hints, sizeof(struct addrinfo));
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;

    if ((n = getaddrinfo(host, serv, &amp;amp;hints, &amp;amp;res)) != 0)
        err_quit(&quot;tcp_connect error for %s ,%s,%s : %s&quot;, host, serv, gai_strerror(n));
    ressave = res;
    do
    {
        sockfd = Socket(res-&amp;gt;ai_family, res-&amp;gt;ai_socktype, res-&amp;gt;ai_protocol);
        if (sockfd &amp;lt; 0)
            continue;
        if (connect(sockfd, res-&amp;gt;ai_addr, res-&amp;gt;ai_addrlen) == 0)
            break;
        Close(sockfd);
    } while ((res = res-&amp;gt;ai_next) != NULL);
    if (res == NULL)
        err_sys(&quot;tcp_coonnect error for %s,%s&quot;, host, serv);
    freeaddrinfo(ressave);
    return (sockfd);
}

struct addrinfo *Host_serv(const char *host, const char *serv, int family, int socktype)
{
    int n;
    struct addrinfo hints, *res;
    bzero(&amp;amp;hints, sizeof(struct addrinfo));
    hints.ai_flags = AI_CANONNAME;
    hints.ai_family = family;
    hints.ai_socktype = socktype;

    if ((n = getaddrinfo(host, serv, &amp;amp;hints, &amp;amp;res)) != 0)
        err_quit(&quot;host_serv error for %s, %s: %s&quot;,
                 (host == NULL) ? &quot;(no hostname)&quot; : host,
                 (serv == NULL) ? &quot;(no service name)&quot; : serv,
                 gai_strerror(n));
    return (res);
}

void home_pages(const char *host, const char *fname)
{
    int fd, n;
    char line[MAXLINE] = {0};
    fd = Tcp_connect(host, SERV);
    n = snprintf(line, sizeof(line), GET_CMD, fname);
    Sendlen(fd, line, n, 0);
    for (;;)
    {
        if ((n = Recvlen(fd, line, MAXLINE, 0)) == 0)
            break; //serv closed
        fprintf(stderr, &quot;recv %d bytes from server \n&quot;, n);
    }
    fprintf(stderr, &quot;end-of-home-pages\n&quot;);
    Close(fd);
}
void start_connect(struct file *fptr) //非阻塞连接
{
    int fd, flags, n;
    struct addrinfo *ai;
    ai = Host_serv(fptr-&amp;gt;f_host, SERV, 0, SOCK_STREAM);
    fd = Socket(ai-&amp;gt;ai_family, ai-&amp;gt;ai_socktype, ai-&amp;gt;ai_protocol);
    fptr-&amp;gt;f_fd = fd;

    fprintf(stderr, &quot;start_connect  for %s ,fd %d \n&quot;, fptr-&amp;gt;f_name, fd);

    flags = Fcntl(fd, F_GETFL, 0);
    Fcntl(fd, F_SETFL, flags | O_NONBLOCK);

    if ((n = connect(fd, ai-&amp;gt;ai_addr, ai-&amp;gt;ai_addrlen)) &amp;lt; 0)
    {
        if (errno != EINPROGRESS) // EINPROGRESS套接字为非阻塞套接字，且连接请求没有立即完成
            err_sys(&quot;nonblocking connect error &quot;, __LINE__);
        fptr-&amp;gt;f_flags = F_CONNECTING;
        FD_SET(fd, &amp;amp;rset);
        FD_SET(fd, &amp;amp;wset);
        if (fd &amp;gt; maxfd)
            maxfd = fd;
    }
    else if (n &amp;gt;= 0)
    { /* connect is already done */
        write_get_cmd(fptr);
    }
}
void write_get_cmd(struct file *fptr)
{
    int n;
    char line[MAXLINE];
    n = snprintf(line, sizeof(line), GET_CMD, fptr-&amp;gt;f_name);

    Writen(fptr-&amp;gt;f_fd, line, n);

    fprintf(stderr, &quot;send %d bytes for %s \n\n\n&quot;, n, fptr-&amp;gt;f_name);

    fptr-&amp;gt;f_flags = F_READING; /* clears F_CONNECTING */

    FD_SET(fptr-&amp;gt;f_fd, &amp;amp;rset); /* will read server's reply */

    if (fptr-&amp;gt;f_fd &amp;gt; maxfd)
        maxfd = fptr-&amp;gt;f_fd;
}

int main(int argc, char **argv)
{
    int i, fd, n, maxconn, flags, error;
    char buf[MAXLINE] = {0};
    fd_set rs, ws;
    if (argc &amp;lt; 5)
    {
        fprintf(stderr, &quot;use :web conns hostname homepages files.....&quot;);
        return 0;
    }
    maxconn = atoi(argv[1]);
    nfiles = min(argc - 4, MAXFILES);
    for (i = 0; i &amp;lt; nfiles; i++)
    {
        file[i].f_name = argv[i + 4];
        file[i].f_host = argv[2];
        file[i].f_flags = 0;
    }

    fprintf(stderr, &quot;nfiles ==  %d \n&quot;, nfiles);

    home_pages(argv[2], argv[3]); //建立第一个连接

    FD_ZERO(&amp;amp;rset);
    FD_ZERO(&amp;amp;wset);

    maxfd = -1;
    nlefttoread = nlefttoconn = nfiles;
    nconn = 0;

    /*
nconn :当前打开的连接数，不超过第一个命令行参数
nlefttoread:待读取的文件数量
nlefttoconn:尚未连接的文件数
nfiles:文件数量
*/
    while (nlefttoread &amp;gt; 0)
    {
        while (nconn &amp;lt; maxconn &amp;amp;&amp;amp; nlefttoconn &amp;gt; 0)
        {
            /* 4find a file to read */
            for (i = 0; i &amp;lt; nfiles; i++)
                if (file[i].f_flags == 0)
                    break;
            if (i == nfiles)
                err_quit(&quot;nlefttoconn = %d but nothing found&quot;, nlefttoconn);
            start_connect(&amp;amp;file[i]);
            nconn++;
            nlefttoconn--;
        }

        rs = rset;
        ws = wset;
        n = Select(maxfd + 1, &amp;amp;rs, &amp;amp;ws, NULL, NULL);

        for (i = 0; i &amp;lt; nfiles; i++)
        {
            flags = file[i].f_flags;
            if (flags == 0 || flags &amp;amp; F_DONE)
                continue;
            fd = file[i].f_fd;
            if (flags &amp;amp; F_CONNECTING &amp;amp;&amp;amp;
                (FD_ISSET(fd, &amp;amp;rs) || FD_ISSET(fd, &amp;amp;ws)))
            {
                n = sizeof(error);
                if (getsockopt(fd, SOL_SOCKET, SO_ERROR, &amp;amp;error, &amp;amp;n) &amp;lt; 0 ||
                    error != 0)
                {
                    err_ret(&quot;nonblocking connect failed for %s&quot;,
                            file[i].f_name);
                    file[i].f_flags = F_DONE;
                }
                /* 4connection established */
                fprintf(stderr, &quot;connection established for %s\n&quot;, file[i].f_name);
                FD_CLR(fd, &amp;amp;wset);       /* no more writeability test */
                write_get_cmd(&amp;amp;file[i]); /* write() the GET command */
            }
            else if (flags &amp;amp; F_READING &amp;amp;&amp;amp; FD_ISSET(fd, &amp;amp;rs))
            {
                if ((n = read(fd, buf, sizeof(buf))) == 0)
                {
                    fprintf(stderr, &quot;end-of-file on %s\n&quot;, file[i].f_name);
                    Close(fd);
                    file[i].f_flags = F_DONE; /* clears F_READING */
                    FD_CLR(fd, &amp;amp;rset);
                    nconn--;
                    nlefttoread--;
                }
                else
                {
                    fprintf(stderr, &quot;read %d bytes from %s\n&quot;, n, file[i].f_name);
                }
            }
        }
    }
    exit(0);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;测试-1&quot;&gt;测试：&lt;/h3&gt;
&lt;p&gt;这是最大并行连接数是&lt;code&gt;3&lt;/code&gt;时的情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180908232845254?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdXNoZW5neGlfcm9vdA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;connect函数说明总结unp-connect-即可&quot;&gt;1. connect函数说明（总结unp connect 即可 ）&lt;/h2&gt;
&lt;ol readability=&quot;0.5&quot;&gt;&lt;li&gt;&lt;code&gt;connect&lt;/code&gt; 激发&lt;code&gt;TCP&lt;/code&gt;的三路握手过程，而且仅在连接建立成功或者出错后才会返回。&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;在一个非阻塞的套接字上调用 &lt;code&gt;connect&lt;/code&gt; 时，&lt;code&gt;connect&lt;/code&gt;将立即返回一个&lt;code&gt;EINPROGRESS&lt;/code&gt;错误，不过三路握手会继续进行。然后我们通过&lt;code&gt;select&lt;/code&gt;去检测该连接成功或者失败。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果&lt;code&gt;connect&lt;/code&gt;连接失败，则该套接字不能再用，&lt;strong&gt;必须关闭！&lt;/strong&gt; 不能对这样的套接字再次调用&lt;code&gt;connect&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;讨论&quot;&gt;讨论：&lt;/h2&gt;
</description>
<pubDate>Sat, 08 Sep 2018 15:30:00 +0000</pubDate>
<dc:creator>Tattoo_Welkin</dc:creator>
<og:description>1.非阻塞 有什么用？ 1. 可以让三路握手的处理等同与一般数据的处理，而不是一直让 一直尝试重连或者花费一个 时间。而且RTT时间从几毫秒到几秒不等，万一有许多连接，不论是尝试重连还是花费一个RTT</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Tattoo-Welkin/p/9611086.html</dc:identifier>
</item>
<item>
<title>一次电话Java面试的问题总结（JDK8新特性、哈希冲突、HashMap原理、线程安全、Linux查询命令、Hadoop节点） - sunwengang</title>
<link>http://www.cnblogs.com/1996swg/p/9600537.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/1996swg/p/9600537.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;面试涉及问题含有：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Java&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　JDK8新特性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　集合（哈希冲突、HashMap的原理、自动排序的集合TreeSet）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　多线程安全问题&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　String和StringBuffer&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;JVM&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　原理、运行流程、内部结构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　查询含有某字符串内容的命令grep&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　查询进程、GC状态、杀死进程&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Hadoop五种节点介绍&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;--------------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;JAVA：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、JDK8新特性：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　lambda表达式的重要特征:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　　　可选类型声明：&lt;/strong&gt;不需要声明参数类型，编译器可以统一识别参数值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　　　可选的参数圆括号：&lt;/strong&gt;一个参数无需定义圆括号，但多个参数需要定义圆括号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　　　可选的大括号：&lt;/strong&gt;如果主体包含了一个语句，就不需要使用大括号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　　　可选的返回关键字：&lt;/strong&gt;如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　Lambda的设计&lt;/span&gt;可以实现简洁而紧凑的语言结构。最简单的Lambda表达式可&lt;strong&gt;由逗号分隔的参数列表、-&amp;gt;符号和语句块&lt;/strong&gt;组成，例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
Arrays.asList( &quot;a&quot;, &quot;b&quot;, &quot;d&quot; ).forEach( e -&amp;gt;&lt;span&gt; System.out.println( e ) );

Arrays.asList( &lt;/span&gt;&quot;a&quot;, &quot;b&quot;, &quot;d&quot; ).forEach( ( String e ) -&amp;gt;&lt;span&gt; System.out.println( e ) );

Arrays.asList( &lt;/span&gt;&quot;a&quot;, &quot;b&quot;, &quot;d&quot; ).forEach( e -&amp;gt;&lt;span&gt; {
    System.out.print( e );
    System.out.print( e );
} );


String separator &lt;/span&gt;= &quot;,&quot;&lt;span&gt;;
Arrays.asList( &lt;/span&gt;&quot;a&quot;, &quot;b&quot;, &quot;d&quot;&lt;span&gt; ).forEach( 
    ( String e ) &lt;/span&gt;-&amp;gt; System.out.print( e +&lt;span&gt; separator ) );

Arrays.asList( &lt;/span&gt;&quot;a&quot;, &quot;b&quot;, &quot;d&quot; ).sort( ( e1, e2 ) -&amp;gt;&lt;span&gt; e1.compareTo( e2 ) );
等同于
Arrays.asList( &lt;/span&gt;&quot;a&quot;, &quot;b&quot;, &quot;d&quot; ).sort( ( e1, e2 ) -&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; result =&lt;span&gt; e1.compareTo( e2 );
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
} );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　方法引用通过方法的名字来指向一个方法。&lt;/p&gt;
&lt;p&gt;　　　　　　方法引用可以使语言的构造更紧凑简洁，减少冗余代码。&lt;/p&gt;
&lt;p&gt;　　　　　　方法引用使用一对冒号&lt;strong&gt; &lt;/strong&gt;&lt;span class=&quot;marked&quot;&gt;&lt;strong&gt;:: &lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Java 8使用两个新概念扩展了接口的含义：默认方法和静态方法。默认方法使得接口有点类似traits，不过要实现的目标不一样。默认方法使得开发者可以在 不破坏二进制兼容性的前提下，往现存接口中添加新的方法，即不强制那些实现了该接口的类也同时实现这个新加的方法。

默认方法和抽象方法之间的区别在于抽象方法需要实现，而默认方法不需要。接口提供的默认方法会被接口的实现类继承或者覆写，例子代码如下：

&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Defaulable {
    &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; String notRequired() { 
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Default implementation&quot;&lt;span&gt;; 
    }        
}
 
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DefaultableImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Defaulable {
}
 
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; OverridableImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Defaulable {
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String notRequired() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Overridden implementation&quot;&lt;span&gt;;
    }
}
Defaulable接口使用关键字default定义了一个默认方法notRequired()。DefaultableImpl类实现了这个接口，同时默认继承了这个接口中的默认方法；OverridableImpl类也实现了这个接口，但覆写了该接口的默认方法，并提供了一个不同的实现。

Java 8带来的另一个有趣的特性是在接口中可以定义静态方法，例子代码如下：

&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; DefaulableFactory {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Interfaces now allow static methods&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; Defaulable create( Supplier&amp;lt; Defaulable &amp;gt;&lt;span&gt; supplier ) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; supplier.get();
    }
}
下面的代码片段整合了默认方法和静态方法的使用场景：
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main( String[] args ) {
    Defaulable defaulable &lt;/span&gt;= DefaulableFactory.create( DefaultableImpl::&lt;span&gt;new&lt;/span&gt;&lt;span&gt; );
    System.out.println( defaulable.notRequired() );
 
    defaulable &lt;/span&gt;= DefaulableFactory.create( OverridableImpl::&lt;span&gt;new&lt;/span&gt;&lt;span&gt; );
    System.out.println( defaulable.notRequired() );
}
输出结果如下：
Default implementation
Overridden implementation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; DefaulableFactory {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Interfaces now allow static methods&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; Defaulable create( Supplier&amp;lt; Defaulable &amp;gt;&lt;span&gt; supplier ) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; supplier.get();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class=&quot;list&quot; readability=&quot;12.468776019983&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;新工具&lt;/strong&gt; − 新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Stream API&lt;/strong&gt; −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Date Time API&lt;/strong&gt; − 加强对日期与时间的处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Optional 类&lt;/strong&gt; − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Nashorn, JavaScript 引擎&lt;/strong&gt; − Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5.9358288770053&quot;&gt;&lt;strong&gt;重复注解：&lt;/strong&gt;
&lt;p&gt;自从Java 5中引入&lt;a href=&quot;http://www.javacodegeeks.com/2012/08/java-annotations-explored-explained.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;注解&lt;/a&gt;以来，这个特性开始变得非常流行，并在各个框架和项目中被广泛使用。不过，注解有一个很大的限制是：在同一个地方不能多次使用同一个注解。Java 8打破了这个限制，引入了重复注解的概念，允许在同一个地方多次使用同一个注解。&lt;/p&gt;
&lt;p&gt;在Java 8中使用@Repeatable注解定义重复注解，实际上，这并不是语言层面的改进，而是编译器做的一个trick，底层的技术仍然相同。可以利用下面的代码说明：&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.javacodegeeks.java8.repeatable.annotations;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.ElementType;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.Repeatable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.Retention;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.RetentionPolicy;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.Target;
 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RepeatingAnnotations {
    @Target( ElementType.TYPE )
    @Retention( RetentionPolicy.RUNTIME )
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Filters {
        Filter[] value();
    }
 
    @Target( ElementType.TYPE )
    @Retention( RetentionPolicy.RUNTIME )
    @Repeatable( Filters.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; )
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Filter {
        String value();
    };
 
    @Filter( &lt;/span&gt;&quot;filter1&quot;&lt;span&gt; )
    @Filter( &lt;/span&gt;&quot;filter2&quot;&lt;span&gt; )
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Filterable {        
    }
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( Filter filter: Filterable.&lt;span&gt;class&lt;/span&gt;.getAnnotationsByType( Filter.&lt;span&gt;class&lt;/span&gt;&lt;span&gt; ) ) {
            System.out.println( filter.value() );
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正如我们所见，这里的Filter类使用@Repeatable(Filters.class)注解修饰，而Filters是存放Filter注解的容器，编译器尽量对开发者屏蔽这些细节。这样，Filterable接口可以用两个Filter注解注释（这里并没有提到任何关于Filters的信息）。&lt;/p&gt;
&lt;p&gt;另外，反射API提供了一个新的方法：getAnnotationsByType()，可以返回某个类型的重复注解，例如&lt;code&gt;Filterable.class.getAnnoation(Filters.class)&lt;/code&gt;将返回两个Filter实例，输出到控制台的内容如下所示： &lt;span&gt;&lt;strong&gt;filter1 filter2&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、集合：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;哈希冲突：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（见博客：https://www.cnblogs.com/wuchaodzxx/p/7396599.html）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1164138/201809/1164138-20180908204441134-28712807.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果两个不同的元素，通过哈希函数得出的实际存储地址相同怎么办？也就是说，当我们对某个元素进行哈希运算，得到一个存储地址，然后要进行插入的时候，发现已经被其他元素占用了，其实这就是所谓的哈希冲突，也叫哈希碰撞。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;哈希函数的设计至关重要，好的哈希函数会尽可能地保证 计算简单和散列地址分布均匀,但是，我们需要清楚的是，数组是一块连续的固定长度的内存空间，再好的哈希函数也不能保证得到的存储地址绝对不发生冲突。那么哈希冲突如何解决呢？&lt;span&gt;&lt;strong&gt;哈希冲突的解决方案有多种:&lt;/strong&gt;开放定址法（发生冲突，继续寻找下一块未被占用的存储地址），再散列函数法，链地址法，而HashMap即是采用了链地址法，也就是数组+链表的方式。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这种方法也称再散列法，其基本思想是：当关键字&lt;span lang=&quot;EN-US&quot;&gt;key的哈希地址&lt;span lang=&quot;EN-US&quot;&gt;p=H（&lt;span lang=&quot;EN-US&quot;&gt;key）出现冲突时，以&lt;span lang=&quot;EN-US&quot;&gt;p为基础，产生另一个哈希地址&lt;span lang=&quot;EN-US&quot;&gt;p1，如果&lt;span lang=&quot;EN-US&quot;&gt;p1仍然冲突，再以&lt;span lang=&quot;EN-US&quot;&gt;p为基础，产生另一个哈希地址&lt;span lang=&quot;EN-US&quot;&gt;p2，&lt;span lang=&quot;EN-US&quot;&gt;…，直到找出一个不冲突的哈希地址&lt;span lang=&quot;EN-US&quot;&gt;pi ，将相应元素存入其中。这种方法有一个通用的再散列函数形式：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;Hi=（&lt;span lang=&quot;EN-US&quot;&gt;H（&lt;span lang=&quot;EN-US&quot;&gt;key）&lt;span lang=&quot;EN-US&quot;&gt;+d&lt;sub&gt;i&lt;/sub&gt;）&lt;span lang=&quot;EN-US&quot;&gt;% m   i=1，&lt;span lang=&quot;EN-US&quot;&gt;2，…，&lt;span lang=&quot;EN-US&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中&lt;span lang=&quot;EN-US&quot;&gt;H（&lt;span lang=&quot;EN-US&quot;&gt;key）为哈希函数，&lt;span lang=&quot;EN-US&quot;&gt;m 为表长，&lt;span lang=&quot;EN-US&quot;&gt;d&lt;sub&gt;i&lt;/sub&gt;称为增量序列。增量序列的取值方式不同，相应的再散列方式也不同。主要有以下三种：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;H1_0_1&quot;&gt;&lt;span&gt;线性探测再散列&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;d&lt;sub&gt;i&lt;/sub&gt;i=1，&lt;span lang=&quot;EN-US&quot;&gt;2，&lt;span lang=&quot;EN-US&quot;&gt;3，&lt;span lang=&quot;EN-US&quot;&gt;…，&lt;span lang=&quot;EN-US&quot;&gt;m-1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这种方法的特点是：冲突发生时，顺序查看表中下一单元，直到找出一个空单元或查遍全表。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;H1_0_2&quot;&gt;&lt;span&gt;二次探测再散列&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;d&lt;sub&gt;i&lt;/sub&gt;=1&lt;sup&gt;2&lt;/sup&gt;，&lt;span lang=&quot;EN-US&quot;&gt;-1&lt;sup&gt;2&lt;/sup&gt;，&lt;span lang=&quot;EN-US&quot;&gt;2&lt;sup&gt;2&lt;/sup&gt;，&lt;span lang=&quot;EN-US&quot;&gt;-2&lt;sup&gt;2&lt;/sup&gt;，&lt;span lang=&quot;EN-US&quot;&gt;…，&lt;span lang=&quot;EN-US&quot;&gt;k&lt;sup&gt;2&lt;/sup&gt;，&lt;span lang=&quot;EN-US&quot;&gt;-k&lt;sup&gt;2&lt;/sup&gt;    ( k&amp;lt;=m/2 )&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这种方法的特点是：冲突发生时，在表的左右进行跳跃式探测，比较灵活。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;H1_0_3&quot;&gt;&lt;span&gt;伪随机探测再散列&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;d&lt;sub&gt;i&lt;/sub&gt;=伪随机数序列。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;（2）&lt;/span&gt;&lt;span&gt;再哈希法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种方法是同时构造多个不同的哈希函数：&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;H&lt;sub&gt;i&lt;/sub&gt;=RH&lt;sub&gt;1&lt;/sub&gt;（&lt;span lang=&quot;EN-US&quot;&gt;key）&lt;span lang=&quot;EN-US&quot;&gt;  i=1，&lt;span lang=&quot;EN-US&quot;&gt;2，&lt;span lang=&quot;EN-US&quot;&gt;…，&lt;span lang=&quot;EN-US&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当哈希地址&lt;span lang=&quot;EN-US&quot;&gt;H&lt;sub&gt;i&lt;/sub&gt;=RH&lt;sub&gt;1&lt;/sub&gt;（&lt;span lang=&quot;EN-US&quot;&gt;key）发生冲突时，再计算&lt;span lang=&quot;EN-US&quot;&gt;H&lt;sub&gt;i&lt;/sub&gt;=RH&lt;sub&gt;2&lt;/sub&gt;（&lt;span lang=&quot;EN-US&quot;&gt;key）……，直到冲突不再产生。这种方法不易产生聚集，但增加了计算时间。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;这种方法的基本思想是将所有哈希地址为&lt;span lang=&quot;EN-US&quot;&gt;i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第&lt;span lang=&quot;EN-US&quot;&gt;i个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;这种方法的基本思想是：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;HashMap的底层原理：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;见博客：https://www.cnblogs.com/chengxiao/p/6059914.html&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;HashMap的主干是一个&lt;strong&gt;Entry数组&lt;/strong&gt;。Entry是HashMap的基本组成单元，每一个Entry包含一个key-value键值对。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
//HashMap的主干数组，可以看到就是一个Entry数组，初始值为空数组{}，主干数组的长度一定是2的次幂，至于为什么这么做，后面会有详细分析。
transient Entry&amp;lt;K,V&amp;gt;[] table = (Entry&amp;lt;K,V&amp;gt;[]) EMPTY_TABLE;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Entry是HashMap中的一个静态内部类。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
    static class Entry&amp;lt;K,V&amp;gt; implements Map.Entry&amp;lt;K,V&amp;gt; {
        final K key;
        V value;
        Entry&amp;lt;K,V&amp;gt; next;//存储指向下一个Entry的引用，单链表结构
        int hash;//对key的hashcode值进行hash运算后得到的值，存储在Entry，避免重复计算

        /**
         * Creates new entry.
         */
        Entry(int h, K k, V v, Entry&amp;lt;K,V&amp;gt; n) {
            value = v;
            next = n;
            key = k;
            hash = h;
        } 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;简单来说，HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即可；如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)，首先遍历链表，存在即覆盖，否则新增；对于查找操作来讲，仍需遍历链表，然后通过key对象的equals方法逐一比对查找。所以，性能考虑，HashMap中的链表出现越少，性能才会越好。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;自动排序的集合：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1164138/201809/1164138-20180908210301294-863808014.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;TreeSet(树集)是一个有序集合，可以按照任何顺序将元素插入该集合，当对该集合进行迭代时，各个值将自动以排序后的顺序出现。&lt;span&gt;TreeSet中的元素按照升序排列，缺省是按照自然顺序进行排序，意味着TreeSet中的元素要实现Comparable接口，或者有一个自定义的比较器Comparator。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;TreeSet底层使用的是TreeMap，TreeMap的底层实现是红黑树(详细见&lt;a href=&quot;http://www.cnblogs.com/xujian2014/p/4645943.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/xujian2014/p/4645943.html&lt;/a&gt;)。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 public TreeSet()
 {
        this(new TreeMap&amp;lt;E,Object&amp;gt;());
 }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;使用示例：&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
public class Test
{
    public static void main(String[] args)
    {
        TreeSet&amp;lt;String&amp;gt; treeSet=new TreeSet&amp;lt;&amp;gt;();
        treeSet.add(&quot;Bili&quot;);
        treeSet.add(&quot;Amy&quot;);
        treeSet.add(&quot;cDy&quot;);
        for (String string : treeSet)
        {
            System.out.println(string);
        }
 }
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;　　由于String类实现了Comparable接口，它的compareTo方法是按照字典顺序来对字符串进行排序，所以结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/713721/201603/713721-20160329213440113-2004080857.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;　　1、TreeSet的排列顺序必须是全局顺序，也就是说任何两个元素都是必须可比的，同时只有当他们比较相同时才返回0。&lt;/p&gt;
&lt;p&gt;　　2、如果树集包含了n个元素，那么平均需要进行log&lt;sub&gt;2&lt;/sub&gt;n次比较，才能找到新元素的正确位置。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、线程：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;多线程安全运行：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在多个线程并发执行访问同一个数据时，如果不采取相应的措施，将会是非常危险的。为避免这种情况发生，我们要将多个线程对同一数据的访问同步，确保线程安全。&lt;/p&gt;
&lt;p&gt;所谓同步(synchronization)就是指一个线程访问数据时，其它线程不得对同一个数据进行访问，即同一时刻只能有一个线程访问该数据，当这一线程访问结束时其它线程才能对这它进行访问。&lt;span&gt;同步最常见的方式就是使用锁(Lock)，也称为线程锁&lt;/span&gt;。锁是一种非强制机制，每一个线程在访问数据或资源之前，首先试图获取(Acquire)锁，并在访问结束之后释放(Release)锁。在锁被占用时试图获取锁，线程会进入等待状态，直到锁被释放再次变为可用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java里面一般用以下几种机制保证线程安全：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.互斥同步锁（悲观锁）&lt;/p&gt;
&lt;p&gt;1）Synchorized&lt;/p&gt;
&lt;p&gt;2）ReentrantLock&lt;/p&gt;
&lt;p&gt;互斥同步锁也叫做阻塞同步锁，特征是会对没有获取锁的线程进行阻塞。&lt;/p&gt;
&lt;p&gt;要理解互斥同步锁，首选要明白什么是互斥什么是同步。简单的说互斥就是非你即我，同步就是顺序访问。互斥同步锁就是以互斥的手段达到顺序访问的目的。操作系统提供了很多互斥机制比如信号量，互斥量，临界区资源等来控制在某一个时刻只能有一个或者一组线程访问同一个资源。&lt;/p&gt;
&lt;p&gt;Java里面的互斥同步锁就是Synchorized和ReentrantLock，前者是由语言级别实现的互斥同步锁，理解和写法简单但是机制笨拙，在JDK6之后性能优化大幅提升，即使在竞争激烈的情况下也能保持一个和ReentrantLock相差不多的性能，所以JDK6之后的程序选择不应该再因为性能问题而放弃synchorized。ReentrantLock是API层面的互斥同步锁，需要程序自己打开并在finally中关闭锁，和synchorized相比更加的灵活，体现在三个方面：等待可中断，公平锁以及绑定多个条件。但是如果程序猿对ReentrantLock理解不够深刻，或者忘记释放lock，那么不仅不会提升性能反而会带来额外的问题。另外synchorized是JVM实现的，可以通过监控工具来监控锁的状态，遇到异常JVM会自动释放掉锁。而ReentrantLock必须由程序主动的释放锁。&lt;/p&gt;
&lt;p&gt;互斥同步锁都是可重入锁，好处是可以保证不会死锁。但是因为涉及到核心态和用户态的切换，因此比较消耗性能。JVM开发团队在JDK5-JDK6升级过程中采用了很多锁优化机制来优化同步无竞争情况下锁的性能。比如：自旋锁和适应性自旋锁，轻量级锁，偏向锁，锁粗化和锁消除。&lt;/p&gt;
&lt;p&gt;2.非阻塞同步锁&lt;/p&gt;
&lt;p&gt;1) 原子类（CAS）&lt;/p&gt;
&lt;p&gt;非阻塞同步锁也叫乐观锁，相比悲观锁来说，它会先进行资源在工作内存中的更新，然后根据与主存中旧值的对比来确定在此期间是否有其他线程对共享资源进行了更新，如果旧值与期望值相同，就认为没有更新，可以把新值写回内存，否则就一直重试直到成功。它的实现方式依赖于处理器的机器指令：CAS（Compare And Swap）&lt;/p&gt;
&lt;p&gt;JUC中提供了几个Automic类以及每个类上的原子操作就是乐观锁机制。&lt;/p&gt;
&lt;p&gt;不激烈情况下，性能比synchronized略逊，而激烈的时候，也能维持常态。激烈的时候，Atomic的性能会优于ReentrantLock一倍左右。但是其有一个缺点，就是只能同步一个值，一段代码中只能出现一个Atomic的变量，多于一个同步无效。因为他不能在多个Atomic之间同步。 &lt;/p&gt;
&lt;p&gt;非阻塞锁是不可重入的，否则会造成死锁。&lt;/p&gt;
&lt;p&gt;3.无同步方案&lt;/p&gt;
&lt;p&gt;1）可重入代码&lt;/p&gt;
&lt;p&gt;在执行的任何时刻都可以中断-重入执行而不会产生冲突。特点就是不会依赖堆上的共享资源&lt;/p&gt;
&lt;p&gt;2）ThreadLocal/Volaitile&lt;/p&gt;
&lt;p&gt;线程本地的变量，每个线程获取一份共享变量的拷贝，单独进行处理。&lt;/p&gt;
&lt;p&gt;3)  线程本地存储&lt;/p&gt;
&lt;p&gt;如果一个共享资源一定要被多线程共享，可以尽量让一个线程完成所有的处理操作，比如生产者消费者模式中，一般会让一个消费者完成对队列上资源的消费。典型的应用是基于请求-应答模式的web服务器的设计&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4、String和StringBuffer&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（1）String:是对象不是原始类型.为不可变对象,一旦被创建,就不能修改它的值.对于已经存在的String对象的修改都是重新创建一个新的对象,然后把新的值保存进去.String 是final类,即不能被继承&lt;/p&gt;
&lt;p&gt;   String的值是不可变的，这就导致每次对String的操作都会生成新的String对象，不仅效率低下，而且大量浪费有限的内存空间。 &lt;br/&gt;   String a = &quot;a&quot;; //假设a指向地址0x0001 &lt;br/&gt;   a = &quot;b&quot;;//重新赋值后a指向地址0x0002，但0x0001地址中保存的&quot;a&quot;依旧存在，但已经不再是a所指向的,a 已经指向了其它地址。 &lt;br/&gt;   因此String的操作都是改变赋值地址而不是改变值操作。&lt;/p&gt;
&lt;p&gt;（2）StringBuffer:是一个可变对象,当对他进行修改的时候不会像String那样重新建立对象。它只能通过构造函数来建立对象被建立以后,在内存中就会分配内存空间,并初始保存一个null.向StringBuffer中赋值的时候可以通过它的&lt;span&gt;&lt;strong&gt;append方法&lt;/strong&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;StringBuffer是可变类，和线程安全的字符串操作类，任何对它指向的字符串的操作都不会产生新的对象。 每个StringBuffer对象都有一定的缓冲区容量，当字符串大小没有超过容量时，不会分配新的容量，当字符串大小超过容量时，会自动增加容量。 &lt;br/&gt;   StringBuffer buf=new StringBuffer(); //分配长16字节的字符缓冲区 &lt;br/&gt;   StringBuffer buf=new StringBuffer(512); //分配长512字节的字符缓冲区 &lt;br/&gt;   StringBuffer buf=new StringBuffer(&quot;this is a test&quot;)//在缓冲区中存放了字符串，并在后面预留了16字节的空缓冲区。 &lt;/p&gt;
&lt;p&gt;💗StringBuffer类中的方法要偏重于对字符串的变化例如追加、插入和删除等，这个也是StringBuffer和String类的主要区别。&lt;br/&gt;&lt;span&gt;1、append方法&lt;/span&gt;&lt;br/&gt;public StringBuffer append(boolean b)&lt;br/&gt;该方法的作用是追加内容到当前StringBuffer对象的末尾，类似于字符串的连接。调用该方法以后，StringBuffer对象的内容也发生改变&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、deleteCharAt方法&lt;/span&gt;&lt;br/&gt;public StringBuffer deleteCharAt(int index)&lt;br/&gt;该方法的作用是删除指定位置的字符，然后将剩余的内容形成新的字符串。例如：&lt;br/&gt;StringBuffer sb = new StringBuffer(“Test”);&lt;br/&gt;sb. deleteCharAt(1);&lt;br/&gt;该代码的作用删除字符串对象sb中索引值为1的字符，也就是删除第二个字符，剩余的内容组成一个新的字符串。所以对象sb的值变为”Tst”。&lt;br/&gt;还存在一个功能类似的delete方法：&lt;br/&gt;public StringBuffer delete(int start,int end)&lt;br/&gt;该方法的作用是删除指定区间以内的所有字符，包含start，不包含end索引值的区间。例如：&lt;br/&gt;StringBuffer sb = new StringBuffer(“TestString”);&lt;br/&gt;&lt;span&gt;sb. delete (1,4);&lt;/span&gt;&lt;br/&gt;该代码的作用是删除索引值1(包括)到索引值4(不包括)之间的所有字符，剩余的字符形成新的字符串。则对象sb的值是”TString”。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、insert方法&lt;/span&gt;&lt;br/&gt;public StringBuffer insert(int offset, String s)&lt;br/&gt;该方法的作用是在StringBuffer对象中插入内容，然后形成新的字符串。例如：&lt;br/&gt;StringBuffer sb = new StringBuffer(“TestString”);&lt;br/&gt;sb.insert(4,“false”);&lt;br/&gt;该示例代码的作用是在对象sb的索引值4的位置插入字符串false，形成新的字符串，则执行以后对象sb的值是”TestfalseString”。&lt;br/&gt;&lt;span&gt;4、reverse方法&lt;/span&gt;&lt;br/&gt;public StringBuffer reverse()&lt;br/&gt;该方法的作用是将StringBuffer对象中的内容反转，然后形成新的字符串。例如：&lt;br/&gt;StringBuffer sb = new StringBuffer(“abc”);&lt;br/&gt;sb.reverse();&lt;br/&gt;经过反转以后，对象sb中的内容将变为”cba”。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5、setCharAt方法&lt;/span&gt;&lt;br/&gt;public void setCharAt(int index, char ch)&lt;br/&gt;该方法的作用是修改对象中索引值为index位置的字符为新的字符ch。例如：&lt;br/&gt;StringBuffer sb = new StringBuffer(“abc”);&lt;br/&gt;sb.setCharAt(1,’D’);&lt;br/&gt;则对象sb的值将变成”aDc”。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6、trimToSize方法&lt;/span&gt;&lt;br/&gt;public void trimToSize()&lt;br/&gt;该方法的作用是将StringBuffer对象的中存储空间缩小到和字符串长度一样的长度，减少空间的浪费。&lt;br/&gt;&lt;span&gt;7、构造方法：&lt;/span&gt;&lt;br/&gt;StringBuffer s0=new StringBuffer();分配了长16字节的字符缓冲区&lt;br/&gt;StringBuffer s1=new StringBuffer(512);分配了512字节的字符缓冲区&lt;br/&gt;&lt;span&gt;8、获取字符串的长度: length()&lt;/span&gt;&lt;br/&gt;StringBuffer s = new StringBuffer(&quot;www&quot;);&lt;br/&gt;int i=s.length();&lt;br/&gt;m.返回字符串的一部分值&lt;br/&gt;substring(int start) //返回从start下标开始以后的字符串&lt;br/&gt;substring(int start,int end) //返回从start到 end-1字符串&lt;br/&gt;&lt;span&gt;9.替换字符串&lt;/span&gt;&lt;br/&gt;replace(int start,int end,String str)&lt;br/&gt;s.replace(0,1,&quot;qqq&quot;);&lt;br/&gt;&lt;span&gt;10.转换为不变字符串:toString()。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;StringBuffer和StringBuilder类功能基本相似，主要区别在于StringBuffer类的方法是多线程、安全的，而 StringBuilder不是线程安全的，相比而言，StringBuilder类会略微快一点。对于经常要改变值的字符串应该使用 StringBuffer和StringBuilder类。 &lt;br/&gt;&lt;strong&gt;线程安全 &lt;/strong&gt;&lt;br/&gt;StringBuffer 线程安全 &lt;br/&gt;StringBuilder 线程不安全 &lt;br/&gt;&lt;strong&gt;速度 &lt;/strong&gt;&lt;br/&gt;一般情况下,速度从快到慢:StringBuilder&amp;gt;StringBuffer&amp;gt;String,这种比较是相对的，不是绝对的。 &lt;br/&gt;&lt;strong&gt;总结 &lt;/strong&gt;&lt;br/&gt;（1）如果要操作少量的数据用 = String &lt;br/&gt;（2）单线程操作字符串缓冲区 下操作大量数据 = StringBuilder &lt;br/&gt;（3）多线程操作字符串缓冲区 下操作大量数据 = StringBuffer&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;JVM：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 1、运行流程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;java程序经过一次编译之后，将java代码编译为字节码也就是class文件，然后在不同的操作系统上依靠不同的java虚拟机进行解释，最后再转换为不同平台的机器码，最终得到执行。这样我们是不是可以推演，如果要在mac系统上运行，是不是只需要安装mac java虚拟机就行了。那么了解了这个基本原理后，我们尝试去做更深的研究，一个普通的java程序它的执行流程到底是怎样的呢？例如我们写了一段这样的代码：&lt;/p&gt;
&lt;p&gt;public class HelloWorld { public static void main(String[] args) { System.out.print(&quot;Hello world&quot;); } }&lt;/p&gt;
&lt;p&gt;这段程序从编译到运行，最终打印出“Hello world”中间经过了哪些步骤呢？我们直接上图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1164138/201809/1164138-20180908224750979-1824534141.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1164138/201809/1164138-20180908224938165-1654979812.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、内部结构&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;class文件被jvm装载以后，经过jvm的内存空间调配，最终是由执行引擎完成class文件的执行。当然这个过程还有其他角色模块的协助，这些模块协同配合才能让一个java程序成功的运行&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1164138/201809/1164138-20180908225012308-1883848962.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3、JVM内存空间包含：方法区、java堆、java栈、本地方法栈。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;方法区是各个线程共享的区域，存放类信息、常量、静态变量。&lt;/p&gt;
&lt;p&gt;java堆也是线程共享的区域，我们的类的实例就放在这个区域，可以想象你的一个系统会产生很多实例，因此java堆的空间也是最大的。如果java堆空间不足了，程序会抛出OutOfMemoryError异常。&lt;/p&gt;
&lt;p&gt;java栈是每个线程私有的区域，它的生命周期与线程相同，一个线程对应一个java栈，每执行一个方法就会往栈中压入一个元素，这个元素叫“栈帧”，而栈帧中包括了方法中的局部变量、用于存放中间状态值的操作栈，这里面有很多细节，我们以后再讲。如果java栈空间不足了，程序会抛出StackOverflowError异常，想一想什么情况下会容易产生这个错误，对，递归，递归如果深度很深，就会执行大量的方法，方法越多java栈的占用空间越大。&lt;/p&gt;
&lt;p&gt;本地方法栈角色和java栈类似，只不过它是用来表示执行本地方法的，本地方法栈存放的方法调用本地方法接口，最终调用本地方法库，实现与操作系统、硬件交互的目的。&lt;/p&gt;
&lt;p&gt;PC寄存器，说到这里我们的类已经加载了，实例对象、方法、静态变量都去了自己改去的地方，那么问题来了，程序该怎么执行，哪个方法先执行，哪个方法后执行，这些指令执行的顺序就是PC寄存器在管，它的作用就是控制程序指令的执行顺序。&lt;/p&gt;
&lt;p&gt;执行引擎当然就是根据PC寄存器调配的指令顺序，依次执行程序指令。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;LINUX：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、查找文件内容命令：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在使用linux时，经常需要进行文件查找。其中查找的命令主要有find和grep。两个命令是有区的。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;区别&lt;/strong&gt;：(1)find命令是根据&lt;strong&gt;文件的属性&lt;/strong&gt;进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间等。 &lt;/p&gt;
&lt;p&gt;               (2)grep是根据&lt;strong&gt;文件的内容进行&lt;/strong&gt;查找，会对文件的每一行按照给定的模式(patter)进行匹配查找。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一.find命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　基本格式：&lt;/strong&gt;find  path expression&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;1.按照文件名查找&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　(1)find / -name httpd.conf　　#在根目录下查找文件httpd.conf，表示在整个硬盘查找&lt;br/&gt;　　　　(2)find /etc -name httpd.conf　　#在/etc目录下文件httpd.conf&lt;br/&gt;　　　　(3)find /etc -name '*srm*'　　#使用通配符*(0或者任意多个)。表示在/etc目录下查找文件名中含有字符串‘srm’的文件&lt;br/&gt;　　　　(4)find . -name 'srm*' 　　#表示当前目录下查找文件名开头是字符串‘srm’的文件&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;2.按照文件特征查找&lt;/strong&gt; 　　　　&lt;/p&gt;
&lt;p&gt;　　　　(1)find / -amin -10 　　# 查找在系统中最后10分钟访问的文件(access time)&lt;br/&gt;　　　　(2)find / -atime -2　　 # 查找在系统中最后48小时访问的文件&lt;br/&gt;　　　　(3)find / -empty 　　# 查找在系统中为空的文件或者文件夹&lt;br/&gt;　　　　(4)find / -group cat 　　# 查找在系统中属于 group为cat的文件&lt;br/&gt;　　　　(5)find / -mmin -5 　　# 查找在系统中最后5分钟里修改过的文件(modify time)&lt;br/&gt;　　　　(6)find / -mtime -1 　　#查找在系统中最后24小时里修改过的文件&lt;br/&gt;　　　　(7)find / -user fred 　　#查找在系统中属于fred这个用户的文件&lt;br/&gt;　　　　(8)find / -size +10000c　　#查找出大于10000000字节的文件(c:字节，w:双字，k:KB，M:MB，G:GB)&lt;br/&gt;　　　　(9)find / -size -1000k 　　#查找出小于1000KB的文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　3.使用混合查找方式查找文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　参数有： ！，-and(-a)，-or(-o)。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;(1)find /tmp -size +10000c -and -mtime +2 　　#在/tmp目录下查找大于10000字节并在最后2分钟内修改的文件&lt;br/&gt;   　　    (2)find / -user fred -or -user george 　　#在/目录下查找用户是fred或者george的文件文件&lt;br/&gt;   　　    (3)find /tmp ! -user panda　　#在/tmp目录中查找所有不属于panda用户的文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、grep命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　  &lt;/strong&gt;基本格式：find  expression&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;命令：grep &lt;br/&gt;    格式：grep [option] pattern filenames &lt;br/&gt;    功能：逐行搜索所指定的文件或标准输入，并显示匹配模式的每一行。 &lt;br/&gt;    选项：-i    匹配时忽略大小写 &lt;br/&gt;  -v 找出模式失配的行 &lt;br/&gt;    例如：% grep -i 'java*' ./test/run.sh &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　　&lt;strong&gt; 1.主要参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;[options]主要参数：&lt;/strong&gt;&lt;br/&gt;　　　　－c：只输出匹配行的计数。&lt;br/&gt;　　　　－i：不区分大小写&lt;br/&gt;　　　　－h：查询多文件时不显示文件名。&lt;br/&gt;　　　　－l：查询多文件时只输出包含匹配字符的文件名。&lt;br/&gt;　　　　－n：显示匹配行及行号。&lt;br/&gt;　　　　－s：不显示不存在或无匹配文本的错误信息。&lt;br/&gt;　　　　－v：显示不包含匹配文本的所有行。&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;pattern正则表达式主要参数：&lt;/strong&gt;&lt;br/&gt;　　　　\： 忽略正则表达式中特殊字符的原有含义。&lt;br/&gt;　　　　^：匹配正则表达式的开始行。&lt;br/&gt;　　　　$: 匹配正则表达式的结束行。&lt;br/&gt;　　　　\&amp;lt;：从匹配正则表达 式的行开始。&lt;br/&gt;　　　　\&amp;gt;：到匹配正则表达式的行结束。&lt;br/&gt;　　　　[ ]：单个字符，如[A]即A符合要求 。&lt;br/&gt;　　　　[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。&lt;br/&gt;　　　　.：所有的单个字符。&lt;br/&gt;　　　　* ：有字符，长度可以为0。&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;2.实例&lt;/strong&gt;　 &lt;/p&gt;
&lt;p&gt;　　(1)grep 'test' d*　　#显示所有以d开头的文件中包含 test的行&lt;br/&gt;　　(2)grep ‘test’ aa bb cc 　　 #显示在aa，bb，cc文件中包含test的行&lt;br/&gt;　　(3)grep ‘[a-z]\{5\}’ aa 　　#显示所有包含每行字符串至少有5个连续小写字符的字符串的行&lt;br/&gt;　　(4)grep magic /usr/src　　#显示/usr/src目录下的&lt;strong&gt;文件(不含子目录)&lt;/strong&gt;包含magic的行&lt;br/&gt;　　(5)grep -r magic /usr/src　　#显示/usr/src目录下的&lt;strong&gt;文件(包含子目录)&lt;/strong&gt;包含magic的行&lt;/p&gt;
&lt;p&gt;　　(6)grep -w pattern files ：只匹配&lt;strong&gt;整个单词&lt;/strong&gt;，而不是字符串的一&lt;strong&gt;部分&lt;/strong&gt;(如匹配’magic’，而不是’magical’)，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、GC状态命令&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通常运行命令如下：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;jstat -gc 30996 3000&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;即：每3秒一次显示进程号为30996的java进程的GC情况&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;或使用命令：jstat -gcutil 30996 3000&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.查进程&lt;br/&gt;    ps命令查找与进程相关的PID号：&lt;br/&gt;    ps a 显示现行终端机下的所有程序，包括其他用户的程序。&lt;br/&gt;    ps -A 显示所有程序。&lt;/p&gt;

&lt;p&gt;2.杀进程&lt;br/&gt;   使用kill命令结束进程：kill xxx&lt;br/&gt;   常用：kill －9 324&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;大数据：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;HDFS节点、角色&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;1.Namenode名称节点&lt;/h3&gt;
&lt;p&gt;   目录的管理者，每一个集群都有一个，记录实时的数据变化，如果没有namenode，HDFS就无法工作，系统中的文件将会全部丢失，就无法将位于不同datanode上的文件快（blocks）重建文件。因此它的容错机制很有必要。&lt;/p&gt;
&lt;p&gt;它主要负责：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;接收用户的请求；&lt;/li&gt;
&lt;li&gt;维护文件系统的目录结构；&lt;/li&gt;
&lt;li&gt;管理文件与Block之间的练习；&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;2.Datanode数据节点&lt;/h3&gt;
&lt;p&gt;是文件系统的工作节点，他们根据客户端或者是namenode的调度存储和检索，并且定期向namenode发送他们所存储的块(block)的列表。&lt;/p&gt;
&lt;p&gt;集群中的每个服务器都运行一个DataNode后台程序，这个后台程序负责把HDFS数据块读写到本地的文件系统。当需要通过客户端读/写某个 数据时，先由NameNode告诉客户端去哪个DataNode进行具体的读/写操作，然后，客户端直接与这个DataNode服务器上的后台程序进行通 信，并且对相关的数据块进行读/写操作。&lt;/p&gt;
&lt;p&gt;它主要负责：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;存放数据；&lt;/li&gt;
&lt;li&gt;文件被分割以Block的形式被存储在磁盘上；&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;3.Secondarynode&lt;/h3&gt;
&lt;p&gt;SecondaryNameNode是一个用来监控HDFS状态的辅助后台程序。就想NameNode一样，每个集群都有一个SecondaryNameNode，并且部署在一个单独的服务器上。&lt;/p&gt;
&lt;p&gt;SecondaryNameNode不同于NameNode，它不接受或者记录任何实时的数据变化，但是，它会与NameNode进行通信，以便定期地保存HDFS元数据的快照。由于NameNode是单点的，通过SecondaryNameNode的快照功能，可以将NameNode的宕机时间和数据损失降低到最小。同时，如果NameNode发生问题，SecondaryNameNode可以及时地作为备用NameNode使用。&lt;/p&gt;
&lt;p&gt;它主要将namenode image（fsimage）和Edit log合并的。&lt;/p&gt;
&lt;p&gt;SecondaryNameNode的处理，是将fsimage和edites文件周期的合并，不会造成nameNode重启时造成长时间不可访问的情况。&lt;/p&gt;
&lt;h3&gt;4.Resourcemanager&lt;/h3&gt;
&lt;p&gt;（1）与客户端进行交互，处理来自于客户端的请求，如查询应用的运行情况等。&lt;/p&gt;
&lt;p&gt;（2）启动和管理各个应用的ApplicationMaster，并且为ApplicationMaster申请第一个Container用于启动和在它运行失败时将它重新启动。&lt;/p&gt;
&lt;p&gt;（3）管理NodeManager，接收来自NodeManager的资源和节点健康情况汇报，并向NodeManager下达管理资源命令，例如kill掉某个container。&lt;/p&gt;
&lt;p&gt;（4）资源管理和调度，接收来自ApplicationMaster的资源申请，并且为其进行分配。这个是它的最重要的职能。&lt;/p&gt;
&lt;h3&gt;5.Nodemanager&lt;/h3&gt;
&lt;p&gt;NM是ResourceManager在每台机器上的代理，负责容器管理，并监控它们的资源使用情况，以及向ResourceManager/Scheduler提供资源使用报告。&lt;/p&gt;
&lt;h3&gt;总结： &lt;/h3&gt;
&lt;p&gt; （1）NameNode与ResourceManager分开部署（都是老大）&lt;/p&gt;
&lt;p&gt;（2）NodeManager 也就是Resoucemanager 的“小弟”，它来做这事情，读取hdfs 上的数据，数据保存在datanode上，所以如果数据集群，datanode 与NodeManager ，一定要保存在同一个节点上&lt;/p&gt;
&lt;p&gt;（3）Resoucemanager : 占用端口：8088   进行调度资源（老大），进行任务分配的，谁来做这个事情&lt;/p&gt;
</description>
<pubDate>Sat, 08 Sep 2018 15:24:00 +0000</pubDate>
<dc:creator>sunwengang</dc:creator>
<og:description>面试涉及问题含有： Java JDK8新特性 集合（哈希冲突、HashMap的原理、自动排序的集合TreeSet） 多线程安全问题 String和StringBuffer JVM 原理、运行流程、内部</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/1996swg/p/9600537.html</dc:identifier>
</item>
<item>
<title>D11——C语言基础学PYTHON - m1racle</title>
<link>http://www.cnblogs.com/zhangkanghui/p/9609589.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangkanghui/p/9609589.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;C语言基础学习PYTHON——基础学习D11&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;20180908内容纲要：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　1、RabbitMQ消息队列&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　（1）RabbitMQ安装&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　（2）Rabbits示例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　　　模式一：fanout&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　　　模式二：direct&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　　　模式三：topic&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　　　Remote Procedure Call（RPC）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　2、Redis缓存&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　（1）连接方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　（2）连接池&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　（3）操作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　　　1、string操作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　　　2、hash操作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　　　3、list操作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　　　4、set集合操作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　　　5、其他常用操作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　（4）发布订阅&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　3、小结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　4、练习&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1 RabbitMQ消息队列&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;MQ全称为MessageQueue,消息队列（MQ）是一种应用程序对应用程序的通信方法。应用程序通过写和检索出入列队的针对应用程序的数据（消息）来通信，而无需专用连接来链接它们。消息传递指的是程序之间通过在消息中发送数据进行通信，而不是通过直接调用彼此来通信，直接调用通常是用于诸如&lt;a class=&quot;ed_inner_link&quot; href=&quot;https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=101629397&amp;amp;ss_c=ssc.citiao.link&quot; target=&quot;_blank&quot;&gt;远程过程调用&lt;/a&gt;的技术。排队指的是应用程序通过队列来通信。队列的使用除去了接收和发送应用程序同时执行的要求。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;MQ的消费-生产者模型的一个典型的代表，一端往消息队列中不断的写入消息，而另一端则可以读取或者订阅队列中的消息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;RabbitMQ的结构图如下：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1435523/201809/1435523-20180908143456508-349317412.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Broker：简单来说就是消息队列服务器实体。　　&lt;/p&gt;
&lt;p&gt;Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。　　&lt;/p&gt;
&lt;p&gt;Queue：消息队列载体，每个消息都会被投入到一个或多个队列。　　&lt;/p&gt;
&lt;p&gt;Binding：绑定，它的作用就是把exchange和queue按照路由规则绑定起来。　　&lt;/p&gt;
&lt;p&gt;Routing Key：路由关键字，&lt;/p&gt;
&lt;p&gt;exchange根据这个关键字进行消息投递。　　&lt;/p&gt;
&lt;p&gt;vhost：虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。　　&lt;/p&gt;
&lt;p&gt;producer：消息生产者，就是投递消息的程序。　　&lt;/p&gt;
&lt;p&gt;consumer：消息消费者，就是接受消息的程序。　　&lt;/p&gt;
&lt;p&gt;channel：消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。&lt;/p&gt;
&lt;p&gt;当然，也有其他消息队列，比如ZeroMQ、ActiveMQ等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）RabbitMQ的安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，因为RabbitMQ由ERLANG实现，下载ERLANG 源代码。&lt;/p&gt;
&lt;p&gt;安装 &lt;a href=&quot;http://www.rabbitmq.com/install-standalone-mac.html&quot; target=&quot;_blank&quot;&gt;http://www.rabbitmq.com/install-standalone-mac.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后，下载RabbitMQ。&lt;/p&gt;
&lt;p&gt;安装 &lt;a href=&quot;http://www.cnblogs.com/zhangkanghui/p/python%20rabbitMQ%20module&quot; target=&quot;_blank&quot;&gt;python rabbitMQ module&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装教程：&lt;a href=&quot;https://www.cnblogs.com/lykbk/p/erewererewr32434343.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/lykbk/p/erewererewr32434343.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在windows安装中可能会出现这样的问题：&lt;span&gt;RabbitMQ报错Error: unable to connect to node rabbit@xxx: nodedown&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决办法：&lt;a href=&quot;https://blog.csdn.net/u012930316/article/details/76841025&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/u012930316/article/details/76841025&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（2）RabbitMQ基本示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　a、消息分发轮询&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_198a4c71-fb71-4a4c-afb7-ae65029283f8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_198a4c71-fb71-4a4c-afb7-ae65029283f8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_198a4c71-fb71-4a4c-afb7-ae65029283f8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pika
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;建立一个简单的socket&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; connection =&lt;span&gt; pika.BlockingConnection(
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     pika.ConnectionParameters(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    )
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;声明一个管道&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; channel =&lt;span&gt; connection.channel()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;声明queue&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; channel.queue_declare(queue=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; channel.basic_publish(exchange=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                       routing_key=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,          &lt;span&gt;#&lt;/span&gt;&lt;span&gt;queue名字&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;                       body=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello world&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[x] send 'hello world' &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; connection.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;RabbitMQ_send&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_7c5fb185-1135-49f6-9114-ced6bbbe83f7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7c5fb185-1135-49f6-9114-ced6bbbe83f7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7c5fb185-1135-49f6-9114-ced6bbbe83f7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pika
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;建立一个简单的socket&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; connection = pika.BlockingConnection(pika.ConnectionParameters(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;声明一个管道&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; channel =&lt;span&gt; connection.channel()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;you may ask why declare the queue again?&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;we could avoid that if we were sure that the queue already exits.&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果接受端先启动不会报错，如果没有声明，先启动发送端在启动接受端不会出错。但是如果先启动接受端就会有问题&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; channel.queue_declare(queue=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback(ch,method,properties, body):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这个callback函数中的四个参数分别是什么呢？我们打印一下&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,ch,method,properties,body)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     time.sleep(30&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[x] Received %r &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt; body)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     ch.basic_ack(delivery_tag=&lt;span&gt;method.delivery_tag)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; channel.basic_qos(prefetch_count=1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; channel.basic_consume(callback,                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;消费消息。如果收到消息就调用callback，&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;                       queue=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                       no_ack=True)          &lt;span&gt;#&lt;/span&gt;&lt;span&gt;No acknowledgement&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果一个发送端，多个接受端呢？&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果no_ack存在，当消息正在处理的过程中接受端断开，消息就会丢失。发送端发送的数据就会删除。&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果no_ack不存在，发送端就会等待接受端处理完毕的指令。如果此时接受端1断开，那么就由2接收，如果都断开，&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;那么数据会一直存储在发送端，直至有新的接受端出现，并且发送端收到接受端数据处理完毕的指令，数据才会在发送端被删除&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[*] waiting for message .To exit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; channel.start_consuming()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;RabbitMQ_receive&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;在实现一个消费者对应一个生产者，那能不能一对多呢？&lt;/p&gt;
&lt;p&gt;在一个生产者对应多个消费者的时候，生产者发出的消息会根据启动顺序依次被消费者接收。即消息分发轮询。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果no_ack存在，当消息正在处理的过程中接受端断开，消息就会丢失。发送端发送的数据就会删除；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果no_ack不存在，发送端就会等待接受端处理完毕的指令。如果此时接受端1断开，那么就由2接收，如果都断开；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么数据会一直存储在发送端，直至有新的接受端出现，并且发送端收到接受端数据处理完毕的指令，数据才会在发送端被删除。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Message acknowledgments are turned on by default. In previous examples we explicitly turned them off via the &lt;span class=&quot;code&quot;&gt;no_ack=True flag.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span class=&quot;code&quot;&gt;消息确认在默认情况下是打开的。在前面的示例中，我们通过no_ack=True标志显式地关闭了它们。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span class=&quot;code&quot;&gt;It's time to remove this flag and send a proper acknowledgment from the worker, once we're done with a task.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span class=&quot;code&quot;&gt;当我们完成一项任务时，是时候移除此标志并从工作人员发送适当的确认信息了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span class=&quot;code&quot;&gt;如果客户端突然断开，数据则会丢失，为了防止数据丢失需要下面一段代码：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_d2f664fd-23d3-4638-901f-dbeae0da6558&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d2f664fd-23d3-4638-901f-dbeae0da6558&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d2f664fd-23d3-4638-901f-dbeae0da6558&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback(ch,method,properties, body):
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,ch,method,properties,body)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     time.sleep(30&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[x] Received %r &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt; body)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     ch.basic_ack(delivery_tag=method.delivery_tag)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ch.basic_ack(delivery_tag=method.delivery_tag)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　b、消息持久化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在RabbitMQ的安装路径下C:\Program Files\RabbitMQ Server\rabbitmq_server-3.6.5\sbin&amp;gt;在sbin文件夹中rabbit的一些指令&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如rabbitmqctl.bat list_queues可以查询存在的队列消息等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么客户端的断开会发生数据丢失，通过确认函数来保证数据不会丢失。那么如果服务器端断开呢？数据一样会丢失。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了防止服务器端断开导致数据丢失，我们需要以下两步：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、首先要进行声明。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
channel.queue_declare(queue=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, durable=True)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、虽然在这里声明，但并不能真的持久，还需这样。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
channel.queue_declare(queue=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;task_queue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, durable=True)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，即使RabbitMQ重新启动，task_queue队列也不会丢失。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_291255f5-7e76-490a-be14-a48e8fbbcd47&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_291255f5-7e76-490a-be14-a48e8fbbcd47&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_291255f5-7e76-490a-be14-a48e8fbbcd47&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; channel.basic_publish(exchange=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;                       routing_key=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;task_queue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;                       body=&lt;span&gt;message,
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                       properties=&lt;span&gt;pika.BasicProperties(
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;                          delivery_mode = 2, &lt;span&gt;#&lt;/span&gt;&lt;span&gt; make message persistent&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;                       ))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;消息持久化&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;　　c、消息公平分发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果Rabbit只管按顺序把消息发到各个消费者身上，不考虑消费者负载的话，很可能出现，一个机器配置不高的消费者那里堆积了很多消息处理不完，同时配置高的消费者却一直很轻松。那么解决办法？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1435523/201809/1435523-20180908155536369-873770194.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
channel.basic_qos(prefetch_count=1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这行代码只需加入到消费者端即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_923e9c19-0ba3-450c-b9de-bcf8b60537ef&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_923e9c19-0ba3-450c-b9de-bcf8b60537ef&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_923e9c19-0ba3-450c-b9de-bcf8b60537ef&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pika
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;建立一个简单的socket&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; connection = pika.BlockingConnection(pika.ConnectionParameters(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;声明一个管道&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; channel =&lt;span&gt; connection.channel()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;you may ask why declare the queue again?&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;we could avoid that if we were sure that the queue already exits.&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果接受端先启动不会报错，如果没有声明，先启动发送端在启动接受端不会出错。但是如果先启动接受端就会有问题&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; channel.queue_declare(queue=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback(ch,method,properties, body):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这个callback函数中的四个参数分别是什么呢？我们打印一下&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,ch,method,properties,body)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     time.sleep(30&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[x] Received %r &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt; body)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     ch.basic_ack(delivery_tag=&lt;span&gt;method.delivery_tag)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; channel.basic_qos(prefetch_count=1)         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;消息分发&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; channel.basic_consume(callback,                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;消费消息。如果收到消息就调用callback，&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;                       queue=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                       no_ack=True)          &lt;span&gt;#&lt;/span&gt;&lt;span&gt;No acknowledgement&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果一个发送端，多个接受端呢？&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果no_ack存在，当消息正在处理的过程中接受端断开，消息就会丢失。发送端发送的数据就会删除。&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果no_ack不存在，发送端就会等待接受端处理完毕的指令。如果此时接受端1断开，那么就由2接收，如果都断开，&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;那么数据会一直存储在发送端，直至有新的接受端出现，并且发送端收到接受端数据处理完毕的指令，数据才会在发送端被删除&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[*] waiting for message .To exit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; channel.start_consuming()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;持久化+消息分发&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;　　d、消息发布/订阅&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果服务器发出一条消息，是否所有的客户端都能收到消息呢？&lt;/p&gt;
&lt;p&gt;Exchange在定义的时候是有类型的，以决定到底是哪些Queue符合条件，可以接收消息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fanout: &lt;/strong&gt;所有bind到此exchange的queue都可以接收消息；&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;strong&gt;direct: &lt;/strong&gt;通过routingKey和exchange决定的那个唯一的queue可以接收消息；&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;strong&gt;topic:&lt;/strong&gt;所有符合routingKey(此时可以是一个表达式)的routingKey所bind的queue可以接收消息；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;headers:&lt;/strong&gt; 通过headers 来决定把消息发给哪些queue　　　　这个不常用。&lt;/p&gt;
&lt;p&gt;表达式符号说明：#代表一个或多个字符，*代表任何字符&lt;br data-filtered=&quot;filtered&quot;/&gt;
      例：#.a会匹配a.a，aa.a，aaa.a等&lt;br data-filtered=&quot;filtered&quot;/&gt;
          *.a会匹配a.a，b.a，c.a等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模式一：fanout广播&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1435523/201809/1435523-20180908161008472-686027587.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_70c57169-ff07-435a-bceb-71417f66f543&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_70c57169-ff07-435a-bceb-71417f66f543&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_70c57169-ff07-435a-bceb-71417f66f543&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pika
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; connection = pika.BlockingConnection(pika.ConnectionParameters(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; channel =&lt;span&gt; connection.channel()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; channel.exchange_declare(exchange=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                          type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fanout&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; message = &lt;span&gt;''&lt;/span&gt;.join(sys.argv[1:]) &lt;span&gt;or&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;info:hello world！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; channel.basic_publish(exchange=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                       routing_key=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                       body =&lt;span&gt; message)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[x] send %r &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt; message)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; connection.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;fanout_publisher&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_66a19e47-9934-4615-9833-553b2de718ce&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_66a19e47-9934-4615-9833-553b2de718ce&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_66a19e47-9934-4615-9833-553b2de718ce&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pika
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; connection =&lt;span&gt; pika.BlockingConnection(pika.ConnectionParameters(
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; channel =&lt;span&gt; connection.channel()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; channel.exchange_declare(exchange=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                          type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fanout&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; result = channel.queue_declare(exclusive=True)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;exclusive排他的，唯一的&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;在这里声明队列的原因？&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;不指定queue的名字，rabbit会随机分配一个名字，exclusive=True会使次queue的消费者断开后，自动将queue删除&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; queue_name =&lt;span&gt; result.method.queue
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(queue_name)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; channel.queue_bind(exchange=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                    queue=&lt;span&gt;queue_name)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[*] waiting for logs.to exit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback(ch,method,properties,body):
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[x] %r &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt; body)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;channel.basic_consume(callback,
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                       queue=&lt;span&gt;queue_name,
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                       no_ack=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; channel.start_consuming()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;fanout_subscriber&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;模式二：direct有选择的接收消息&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1435523/201809/1435523-20180908162347313-791710471.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_c1bebffd-9614-455d-a4a4-c6016f3be6ea&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c1bebffd-9614-455d-a4a4-c6016f3be6ea&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c1bebffd-9614-455d-a4a4-c6016f3be6ea&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pika
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; connection = pika.BlockingConnection(pika.ConnectionParameters(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; channel =&lt;span&gt; connection.channel()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; channel.exchange_declare(exchange=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                          type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;direct&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; severity = sys.argv[1:] &lt;span&gt;if&lt;/span&gt; len(sys.argv) &amp;gt; 1 &lt;span&gt;else&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; message = &lt;span&gt;''&lt;/span&gt;.join(sys.argv[2:]) &lt;span&gt;or&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;info:hello world！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; channel.basic_publish(exchange=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;direct_logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                       routing_key=&lt;span&gt;severity,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                       body =&lt;span&gt; message)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[x] send %r:%r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(severity,message))
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; connection.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;direct_publisher&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_e5b5c554-7a93-4519-b52d-3893306d6276&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e5b5c554-7a93-4519-b52d-3893306d6276&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e5b5c554-7a93-4519-b52d-3893306d6276&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pika
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; connection = pika.BlockingConnection(pika.ConnectionParameters(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; channel =&lt;span&gt; connection.channel()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; channel.exchange_declare(exchange=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;direct_logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                          type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;direct&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; result = channel.queue_declare(exclusive=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; queue_name =&lt;span&gt; result.method.queue
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; severities = sys.argv[1&lt;span&gt;:]
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; severities:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     sys.stderr.write(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;usage:%s [info] [warining] [error]\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt; sys.argv[0])
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     sys.exit(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(severities)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; severity &lt;span&gt;in&lt;/span&gt;&lt;span&gt; severities:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     channel.queue_bind(exchange=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;direct_logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                        queue=&lt;span&gt;queue_name,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                        routing_key=&lt;span&gt;severity)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;channel.basic_consume(callback,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                       queue=&lt;span&gt;queue_name,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                       no_ack=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; channel.start_consuming()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;direct_subscriber&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;模式三：topic更细致的消息过滤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1435523/201809/1435523-20180908163953807-973403.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;*.orange.*所有中间包含orange&lt;/p&gt;
&lt;p&gt;*.*.rabbit所有以rabbit结尾的&lt;/p&gt;
&lt;p&gt;lazy.#所有以lazy开头的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_59b9a0aa-b79c-4a35-ae5f-08775e9fe15b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_59b9a0aa-b79c-4a35-ae5f-08775e9fe15b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_59b9a0aa-b79c-4a35-ae5f-08775e9fe15b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pika
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; connection = pika.BlockingConnection(pika.ConnectionParameters(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; channel =&lt;span&gt; connection.channel()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; channel.exchange_declare(exchange=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;topic_logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                          type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;topic&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; routing_key = sys.argv[1] &lt;span&gt;if&lt;/span&gt; len(sys.argv) &amp;gt; 1 &lt;span&gt;else&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;anonymous info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; message = &lt;span&gt;''&lt;/span&gt;.join(sys.argv[2:]) &lt;span&gt;or&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;info:hello world！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; channel.basic_publish(exchange=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;direct_logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                       routing_key=&lt;span&gt;routing_key,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                       body =&lt;span&gt; message)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[x] send %r:%r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(routing_key,message))
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; connection.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;topic_publisher&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_27699aee-d523-4e93-a075-d2e30e1c74fb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_27699aee-d523-4e93-a075-d2e30e1c74fb&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_27699aee-d523-4e93-a075-d2e30e1c74fb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pika
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; connection = pika.BlockingConnection(pika.ConnectionParameters(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; channel =&lt;span&gt; connection.channel()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; channel.exchange_declare(exchange=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;topic_logs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                          type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;topic&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; result = channel.queue_declare(exclusive=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; queue_name =&lt;span&gt; result.method.queue
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; binding_keys = sys.argv[1&lt;span&gt;:]
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; binding_keys:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     sys.stderr.write(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Usage:%s [binding_key] ...\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;sys.argv[0])
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     sys.exit(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[*] waiting for logs .to exit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback(ch,method,propertities,body):
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[x] %r:%r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(method.routing_key,body))
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;channel.basic_consume(callback,
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                       queue=&lt;span&gt;queue_name,
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                       no_ack=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; channel.start_consuming()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;topic_subscriber&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;To receive all the logs run:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
python receive_logs_topic.py &lt;span class=&quot;s2&quot;&gt;&quot;#&quot;
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To receive all logs from the facility &quot;&lt;span class=&quot;code&quot;&gt;kern&quot;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
python receive_logs_topic.py &lt;span class=&quot;s2&quot;&gt;&quot;kern.*&quot;
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or if you want to hear only about &quot;&lt;span class=&quot;code&quot;&gt;critical&quot; logs:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
python receive_logs_topic.py &lt;span class=&quot;s2&quot;&gt;&quot;*.critical&quot;
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can create multiple bindings:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
python receive_logs_topic.py &lt;span class=&quot;s2&quot;&gt;&quot;kern.*&quot; &lt;span class=&quot;s2&quot;&gt;&quot;*.critical&quot;
&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And to emit a log with a routing key &quot;&lt;span class=&quot;code&quot;&gt;kern.critical&quot; type:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
python emit_log_topic.py &lt;span class=&quot;s2&quot;&gt;&quot;kern.critical&quot; &lt;span class=&quot;s2&quot;&gt;&quot;A critical kernel error&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;Remote procedure call (RPC)远程过程调用&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;RPC（Remote &lt;a class=&quot;ed_inner_link&quot; href=&quot;https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=303132&amp;amp;ss_c=ssc.citiao.link&quot; target=&quot;_blank&quot;&gt;Procedure&lt;/a&gt; Call Protocol）——远程过程调用协议，它是一种通过网络从远程&lt;a class=&quot;ed_inner_link&quot; href=&quot;https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=157144&amp;amp;ss_c=ssc.citiao.link&quot; target=&quot;_blank&quot;&gt;计算机程序&lt;/a&gt;上请求服务，而不需要了解底层网络技术的协议。该协议允许运行于一台计算机的程序调用另一台计算机的&lt;a class=&quot;ed_inner_link&quot; href=&quot;https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=7539248&amp;amp;ss_c=ssc.citiao.link&quot; target=&quot;_blank&quot;&gt;子程序&lt;/a&gt;，而程序员无需额外地为这个交互作用编程。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了&lt;a class=&quot;ed_inner_link&quot; href=&quot;https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=16962&amp;amp;ss_c=ssc.citiao.link&quot; target=&quot;_blank&quot;&gt;传输层&lt;/a&gt;和&lt;a class=&quot;ed_inner_link&quot; href=&quot;https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=16954&amp;amp;ss_c=ssc.citiao.link&quot; target=&quot;_blank&quot;&gt;应用层&lt;/a&gt;。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1435523/201809/1435523-20180908211200575-1074014873.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_2a137b72-9547-4188-8fbe-f8273e1ba69b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2a137b72-9547-4188-8fbe-f8273e1ba69b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2a137b72-9547-4188-8fbe-f8273e1ba69b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pika
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; connection = pika.BlockingConnection(pika.ConnectionParameters(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; channel =&lt;span&gt; connection.channel()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; channel.queue_declare(queue=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rpc_queue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; fib(n):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; n ==&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;elif&lt;/span&gt; n == 1&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; 1
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; fib(n-1) + fib(n-2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; on_request(ch,method,props,body):
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     n =&lt;span&gt; int(body)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[.] fib (%s)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;n)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     reponse =&lt;span&gt; fib(n)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     ch.basic_publish(exchange=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                      routing_key=&lt;span&gt;props.rely_to,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                      properties=pika.BasicProperties(correlation_id=&lt;span&gt;props.correlation_id),
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                      body=&lt;span&gt;str(reponse))
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     ch.basic_ack(delivery_tag=&lt;span&gt;method.delivery_tag)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; channel.basic_qos(prefetch_count=1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; channel.basic_consume(on_request,queue=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rpc_queue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[x] waiting rpc request&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; channel.start_consuming()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;rpc_server&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;&lt;img id=&quot;code_img_closed_5b968840-6903-42e2-8f3b-6b25d744a4b7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5b968840-6903-42e2-8f3b-6b25d744a4b7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5b968840-6903-42e2-8f3b-6b25d744a4b7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pika
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; uuid
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FibonacciRpcClient(object):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         self.connection = pika.BlockingConnection(pika.ConnectionParameters(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         self.channel =&lt;span&gt; self.connection.channel()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         result = self.channel.queue_declare(exclusive=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         self.callback_queue =&lt;span&gt; result.method.queue
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         self.channel.basic_consume(self.on_response,no_ack=True,queue=&lt;span&gt;self.callback_queue)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; on_response(self,ch,method,props,body):
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; self.corr_id ==&lt;span&gt; props.correlation_id:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             self.response =&lt;span&gt; body
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; call(self,n):
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         self.response =&lt;span&gt; None
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         self.corr_id =&lt;span&gt; str(uuid.uuid4())
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         self.channel.basic_publish(exchange=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                                    routing_key=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rpc_queue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                                    properties=pika.BasicProperties(reply_to=&lt;span&gt;self.callback_queue,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                                                                    correlation_id=&lt;span&gt;self.corr_id),
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                                    body=&lt;span&gt;str(n))
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; self.response &lt;span&gt;is&lt;/span&gt;&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             self.connection.process_data_events()   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;相当于非阻塞的start_consuming&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no msg...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             time.sleep(0.5&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; int(self.response)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; fibonacci_rpc =&lt;span&gt; FibonacciRpcClient()
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[x] Requesting fib (30)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; reponse = fibonacci_rpc.call(30&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[.] Got %r &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;% reponse)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;rpc_client&lt;/span&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2 Redis缓存&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis是一个Key-Value存储系统。和Memcached类似，它支持存储的value类型相对更多。&lt;/p&gt;
&lt;p&gt;包括string(字符串)、list(&lt;a href=&quot;http://baike.baidu.com/view/549479.htm&quot; target=&quot;_blank&quot;&gt;链表&lt;/a&gt;)、set(集合)、zset(sorted set --有序集合)和hash（哈希类型）。&lt;/p&gt;
&lt;p&gt;这些&lt;a href=&quot;http://baike.baidu.com/view/675645.htm&quot; target=&quot;_blank&quot;&gt;数据类型&lt;/a&gt;都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。&lt;/p&gt;
&lt;p&gt;与memcached一样，为了保证效率，数据都是缓存在内存中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;memcached 的使用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5132791.html%20&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/5132791.html &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows下安装Redis教程：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jingyan.baidu.com/article/0f5fb099045b056d8334ea97.html&quot; target=&quot;_blank&quot;&gt;https://jingyan.baidu.com/article/0f5fb099045b056d8334ea97.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（1）连接方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;redis-py提供两个类Redis和StrictRedis用于实现Redis的命令，StrictRedis用于实现大部分官方的命令，并使用官方的语法和命令.&lt;/p&gt;
&lt;p&gt;Redis是StrictRedis的子类，用于向后兼容旧版本的redis-py。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_311b60f3-2089-4ffc-b318-b1ee9a74cc62&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_311b60f3-2089-4ffc-b318-b1ee9a74cc62&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_311b60f3-2089-4ffc-b318-b1ee9a74cc62&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; redis

r &lt;/span&gt;= redis.Redis(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,port=6379&lt;span&gt;)
r.set(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
r.get(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(r.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;redis_connection&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;(2) 连接池&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;redis-py使用connection pool来管理对一个redis server的所有连接，避免每次建立、释放连接的开销。默认，每个Redis实例都会维护一个自己的连接池。&lt;/p&gt;
&lt;p&gt;可以直接建立一个连接池，然后作为参数Redis，这样就可以实现多个Redis实例共享一个连接池。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_492d35c4-5908-47f1-b3e1-ff2e4a03273f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_492d35c4-5908-47f1-b3e1-ff2e4a03273f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_492d35c4-5908-47f1-b3e1-ff2e4a03273f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; redis
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; pool = redis.ConnectionPool(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,port=6379&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; r = redis.Redis(connection_pool=&lt;span&gt;pool)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; r.set(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; r.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(r.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;redis_connection pool&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;(3) 操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　1、string操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;redis中的String在在内存中按照一个name对应一个value来存储。如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1435523/201809/1435523-20180908214226175-875107337.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;set(name, value, ex=None, px=None, nx=False, xx=False)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_7e848199-723d-4ac2-97fa-bea9a67692ca&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7e848199-723d-4ac2-97fa-bea9a67692ca&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7e848199-723d-4ac2-97fa-bea9a67692ca&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;在Redis中设置值，默认，不存在则创建，存在则修改
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;参数：
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;     ex，过期时间（秒）
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;     px，过期时间（毫秒）
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;     nx，如果设置为True，则只有name不存在时，当前set操作才执行
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;      xx，如果设置为True，则只有name存在时，岗前set操作才执行
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;set(name, value, ex=None, px=None, nx=False, xx=False)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;setnx(name, value)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_656ffe62-467c-4ec8-88fb-ee87f5d887b5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_656ffe62-467c-4ec8-88fb-ee87f5d887b5&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_656ffe62-467c-4ec8-88fb-ee87f5d887b5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 设置值，只有name不存在时，执行设置操作（添加）
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;setnx(name, value)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;setex(name, value, time)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_76732907-4bcd-4f8d-8eab-d35636b2227c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_76732907-4bcd-4f8d-8eab-d35636b2227c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_76732907-4bcd-4f8d-8eab-d35636b2227c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置值&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; time，过期时间（数字秒 或 timedelta对象）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;setex(name, value, time)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;psetex(name, time_ms, value)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_0e02794b-2b1e-4826-bc2d-a0b90b8a874a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0e02794b-2b1e-4826-bc2d-a0b90b8a874a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0e02794b-2b1e-4826-bc2d-a0b90b8a874a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置值&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; time_ms，过期时间（数字毫秒 或 timedelta对象）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;psetex(name, time_ms, value)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;mset(*args, **kwargs)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_169c1f85-43d5-4f50-a016-f655fed3c18e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_169c1f85-43d5-4f50-a016-f655fed3c18e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_169c1f85-43d5-4f50-a016-f655fed3c18e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;批量设置值
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;如：
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     mset(k1=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, k2=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    或
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     mget({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;k2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;})
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;mset(*args, **kwargs)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;get(name)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img id=&quot;code_img_closed_677868e1-9806-4074-acc1-1280fb67cb1f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_677868e1-9806-4074-acc1-1280fb67cb1f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_677868e1-9806-4074-acc1-1280fb67cb1f&quot; class=&quot;cnblogs_code_hide&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 获取值
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;get(name)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;mget(keys, *args)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_fd8af798-b77c-4c37-86eb-22ea3f541635&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fd8af798-b77c-4c37-86eb-22ea3f541635&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fd8af798-b77c-4c37-86eb-22ea3f541635&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;批量获取
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;如：
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     mget(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ylr&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wupeiqi&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    或
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     r.mget([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ylr&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wupeiqi&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;mget(keys, *args)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;getset(name, value)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_8b33f569-43fa-4839-b78e-5c32711edc36&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8b33f569-43fa-4839-b78e-5c32711edc36&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8b33f569-43fa-4839-b78e-5c32711edc36&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 设置新值并获取原来的值
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;getset(name, value)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;getrange(key, start, end)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img id=&quot;code_img_closed_dade9f26-5b96-446c-9b73-81d025944f8e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;getrange(key, start, end)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;setrange(name, offset, value)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_507bc2ef-82a6-40de-ac0a-176af35c4faf&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_507bc2ef-82a6-40de-ac0a-176af35c4faf&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_507bc2ef-82a6-40de-ac0a-176af35c4faf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; offset，字符串的索引，字节（一个汉字三个字节）&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; value，要设置的值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;setrange(name, offset, value)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;setbit(name, offset, value)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_c91218ac-e6c6-47a5-8e13-0255f07266f0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c91218ac-e6c6-47a5-8e13-0255f07266f0&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c91218ac-e6c6-47a5-8e13-0255f07266f0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 对name对应值的二进制表示的位进行操作&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name，redis的name&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; offset，位的索引（将值变换成二进制后再进行索引）&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; value，值只能是 1 或 0&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;  
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注：如果在Redis中有一个对应： n1 = &quot;foo&quot;，&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         那么字符串foo的二进制表示为：01100110 01101111 01101111
&lt;span&gt;10&lt;/span&gt;     所以，如果执行 setbit(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;n1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 7, 1&lt;span&gt;)，则就会将第7位设置为1，
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         那么最终二进制则变成 01100111 01101111 01101111，即：&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;goo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;  
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 扩展，转换二进制表示：&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;  
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; source = &quot;撒拉黑&quot;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     source = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;  
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; source:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         num =&lt;span&gt; ord(i)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt; bin(num).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;  
&lt;span&gt;22&lt;/span&gt;     特别的，如果source是汉字 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;撒拉黑&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;怎么办？
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     答：对于utf-8，每一个汉字占 3 个字节，那么 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;撒拉黑&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 则有 9个字节
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;       对于汉字，for循环时候会按照 字节 迭代，那么在迭代时，将每一个字节转换 十进制数，然后再将十进制数转换成二进制
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         11100110 10101101 10100110 11100110 10110010 10011011 11101001 10111101 10010000
&lt;span&gt;26&lt;/span&gt;         -------------------------- ----------------------------- -----------------------------
&lt;span&gt;27&lt;/span&gt;                    撒              拉                黑
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;setbit(name, offset, value)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;getbit(name, offset)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_b46c1c29-73be-416f-84ca-c6bf1e1eb38a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b46c1c29-73be-416f-84ca-c6bf1e1eb38a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b46c1c29-73be-416f-84ca-c6bf1e1eb38a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取name对应的值的二进制表示中的某位的值 （0或1）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;getbit(name, offset)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;bitcount(key, start=None, end=None)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_3d84b030-0621-4adf-b924-3f120f3daabd&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3d84b030-0621-4adf-b924-3f120f3daabd&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3d84b030-0621-4adf-b924-3f120f3daabd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取name对应的值的二进制表示中 1 的个数&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; key，Redis的name&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; start，位起始位置&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; end，位结束位置&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;bitcount(key, start=None, end=None)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;strlen(name)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_b5f032ed-5818-4ac5-902c-a1546b0db230&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b5f032ed-5818-4ac5-902c-a1546b0db230&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b5f032ed-5818-4ac5-902c-a1546b0db230&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 返回name对应值的字节长度（一个汉字3个字节）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;strlen(name)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;incr(self, name, amount=1)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_0363ff4c-62b7-4dec-b567-6a26032628a0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0363ff4c-62b7-4dec-b567-6a26032628a0&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0363ff4c-62b7-4dec-b567-6a26032628a0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name,Redis的name&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; amount,自增数（必须是整数）&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;  
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注：同incrby&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;incr(self, name, amount=1)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;incrbyfloat(self, name, amount=1.0)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_c50f2dd5-bec8-4ba7-8fee-191a3e4c9c7a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c50f2dd5-bec8-4ba7-8fee-191a3e4c9c7a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c50f2dd5-bec8-4ba7-8fee-191a3e4c9c7a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name,Redis的name&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; amount,自增数（浮点型）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;incrbyfloat(self, name, amount=1.0)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;decr(self, name, amount=1)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_08daa340-7fec-41e8-b7e1-d416583cba58&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_08daa340-7fec-41e8-b7e1-d416583cba58&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_08daa340-7fec-41e8-b7e1-d416583cba58&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name,Redis的name&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; amount,自减数（整数）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;decr(self, name, amount=1)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;append(key, value)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_433ae979-1eb5-40e9-93af-2d16496e4f33&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_433ae979-1eb5-40e9-93af-2d16496e4f33&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_433ae979-1eb5-40e9-93af-2d16496e4f33&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在redis name对应的值后面追加内容&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    key, redis的name
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     value, 要追加的字符串
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;append(key, value)&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;　　2、hash操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;hash表现形式上有些像pyhton中的dict,可以存储一组关联性较强的数据 ， redis中Hash在内存中的存储格式如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1435523/201809/1435523-20180908220016729-1542237197.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;hset(name, key, value)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_fcfdd6c0-2087-4823-916b-7b9c92c8567c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fcfdd6c0-2087-4823-916b-7b9c92c8567c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fcfdd6c0-2087-4823-916b-7b9c92c8567c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name对应的hash中设置一个键值对（不存在，则创建；否则，修改）&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name，redis的name&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; key，name对应的hash中的key&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; value，name对应的hash中的value&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;  
&lt;span&gt;8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注：&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hset(name, key, value)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;hmset(name, mapping)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_88acdb46-5cef-4e48-905e-66020e90c6d7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_88acdb46-5cef-4e48-905e-66020e90c6d7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_88acdb46-5cef-4e48-905e-66020e90c6d7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在name对应的hash中批量设置键值对&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name，redis的name&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; mapping，字典，如：{'k1':'v1', 'k2': 'v2'}&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;  
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如：&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; r.hmset('xx', {'k1':'v1', 'k2': 'v2'})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hmset(name, mapping)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;hget(name,key)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_811d29b7-a404-4569-8b8e-f23b784bfed2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_811d29b7-a404-4569-8b8e-f23b784bfed2&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_811d29b7-a404-4569-8b8e-f23b784bfed2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在name对应的hash中获取根据key获取value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hget(name,key)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;hmget(name, keys, *args)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_35a17848-4ba4-4512-98e7-395e8da8eebb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_35a17848-4ba4-4512-98e7-395e8da8eebb&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_35a17848-4ba4-4512-98e7-395e8da8eebb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在name对应的hash中获取多个key的值&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name，reids对应的name&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; keys，要获取key集合，如：['k1', 'k2', 'k3']&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; *args，要获取的key，如：k1,k2,k3&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;  
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如：&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; r.mget('xx', ['k1', 'k2'])&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 或&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print r.hmget('xx', 'k1', 'k2')&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hmget(name, keys, *args)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;hgetall(name)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_cb30707d-bfc8-43a6-acfa-dd605be0df3f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cb30707d-bfc8-43a6-acfa-dd605be0df3f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cb30707d-bfc8-43a6-acfa-dd605be0df3f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 获取name对应hash的所有键值
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hgetall(name)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;hlen(name)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_07158dc9-a158-4cea-ae4d-c9d323f59b1a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_07158dc9-a158-4cea-ae4d-c9d323f59b1a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_07158dc9-a158-4cea-ae4d-c9d323f59b1a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取name对应的hash中键值对的个数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hlen(name)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;hkeys(name)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_8c10003d-ff43-4463-a3f3-6a0e80a8a2b4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8c10003d-ff43-4463-a3f3-6a0e80a8a2b4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8c10003d-ff43-4463-a3f3-6a0e80a8a2b4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取name对应的hash中所有的key的值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hkeys(name)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;hvals(name)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_df1c7495-2623-4468-8c7d-9c57de1b75a0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_df1c7495-2623-4468-8c7d-9c57de1b75a0&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_df1c7495-2623-4468-8c7d-9c57de1b75a0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取name对应的hash中所有的value的值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hvals(name)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;hexists(name, key)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_15474dcb-4c6e-41f5-8fd0-32c8627768e4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_15474dcb-4c6e-41f5-8fd0-32c8627768e4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_15474dcb-4c6e-41f5-8fd0-32c8627768e4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 检查name对应的hash是否存在当前传入的key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hexists(name, key)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;hdel(name,*keys)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_4f8d648f-1d77-458e-ab2e-197eb0c3c91d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4f8d648f-1d77-458e-ab2e-197eb0c3c91d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4f8d648f-1d77-458e-ab2e-197eb0c3c91d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将name对应的hash中指定key的键值对删除&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hdel(name,*keys)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;hincrby(name, key, amount=1)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_6e6e82b4-8701-4794-8e81-e038875300db&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6e6e82b4-8701-4794-8e81-e038875300db&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6e6e82b4-8701-4794-8e81-e038875300db&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 自增name对应的hash中的指定key的值，不存在则创建key=amount&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name，redis中的name&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; key， hash对应的key&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; amount，自增数（整数）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hincrby(name, key, amount=1)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;hincrbyfloat(name, key, amount=1.0)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_783bfdf3-0b96-4951-b778-aaba367723ed&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_783bfdf3-0b96-4951-b778-aaba367723ed&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_783bfdf3-0b96-4951-b778-aaba367723ed&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 自增name对应的hash中的指定key的值，不存在则创建key=amount&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name，redis中的name&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; key， hash对应的key&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; amount，自增数（浮点数）&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;  
&lt;span&gt;8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 自增name对应的hash中的指定key的值，不存在则创建key=amount&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hincrbyfloat(name, key, amount=1.0)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;hscan(name, cursor=0, match=None, count=None)&lt;/p&gt;
&lt;p&gt;Start a full hash scan with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HSCAN myhash 0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Start a hash scan with fields matching a pattern with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HSCAN myhash 0 MATCH order_*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Start a hash scan with fields matching a pattern and forcing the scan command to do more scanning with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HSCAN myhash 0 MATCH order_* COUNT 1000&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_ff66f629-38c8-4fb3-8360-63cc4c329489&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ff66f629-38c8-4fb3-8360-63cc4c329489&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ff66f629-38c8-4fb3-8360-63cc4c329489&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name，redis的name&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; cursor，游标（基于游标分批取获取数据）&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; match，匹配指定key，默认None 表示所有的key&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;  
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如：&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第一次：cursor1, data1 = r.hscan('xx', cursor=0, match=None, count=None)&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第二次：cursor2, data1 = r.hscan('xx', cursor=cursor1, match=None, count=None)&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ...&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hscan(name, cursor=0, match=None, count=None)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;hscan_iter(name, match=None, count=None)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_75530e75-4bbf-440a-8c9a-f803b69bffc7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_75530e75-4bbf-440a-8c9a-f803b69bffc7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_75530e75-4bbf-440a-8c9a-f803b69bffc7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 利用yield封装hscan创建生成器，实现分批去redis中获取数据&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;   
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; match，匹配指定key，默认None 表示所有的key&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;   
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如：&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; for item in r.hscan_iter('xx'):&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     print item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hscan_iter(name, match=None, count=None)&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;　　3、list操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;List操作，redis中的List在在内存中按照一个name对应一个List来存储。如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1435523/201809/1435523-20180908221103167-424284500.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;lpush(name,values)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_0c8e1ade-876e-4062-ba02-9cbb60375f29&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0c8e1ade-876e-4062-ba02-9cbb60375f29&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0c8e1ade-876e-4062-ba02-9cbb60375f29&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在name对应的list中添加元素，每个新的元素都添加到列表的最左边&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; r.lpush('oo', 11,22,33)&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存顺序为: 33,22,11&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;  
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 扩展：&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; rpush(name, values) 表示从右向左操作&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;lpush(name,values)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;lpushx(name,value)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_5675ffcb-9bc2-4c68-b4f1-09ef59d468e6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5675ffcb-9bc2-4c68-b4f1-09ef59d468e6&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5675ffcb-9bc2-4c68-b4f1-09ef59d468e6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 更多：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; rpushx(name, value) 表示从右向左操作&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;lpushx(name,value)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;llen(name)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_0ec171b9-4050-41a1-bfb8-9437409aea00&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0ec171b9-4050-41a1-bfb8-9437409aea00&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0ec171b9-4050-41a1-bfb8-9437409aea00&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name对应的list元素的个数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;llen(name)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;linsert(name, where, refvalue, value))&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_3d42a090-7aff-43a7-8158-9b3c4176b5e2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3d42a090-7aff-43a7-8158-9b3c4176b5e2&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3d42a090-7aff-43a7-8158-9b3c4176b5e2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在name对应的列表的某一个值前或后插入一个新值&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name，redis的name&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; where，BEFORE或AFTER&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; refvalue，标杆值，即：在它前后插入数据&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; value，要插入的数据&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;linsert(name, where, refvalue, value))&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;r.lset(name, index, value)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_ba7722fc-e5a7-4f1c-9fc2-e28199071f85&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ba7722fc-e5a7-4f1c-9fc2-e28199071f85&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ba7722fc-e5a7-4f1c-9fc2-e28199071f85&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 对name对应的list中的某一个索引位置重新赋值&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name，redis的name&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; index，list的索引位置&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; value，要设置的值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;r.lset(name, index, value)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;r.lrem(name, value, num)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_4f3f749a-b33f-4d18-8145-0fdb9cd6be47&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4f3f749a-b33f-4d18-8145-0fdb9cd6be47&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4f3f749a-b33f-4d18-8145-0fdb9cd6be47&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在name对应的list中删除指定的值&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name，redis的name&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; value，要删除的值&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; num，  num=0，删除列表中所有的指定值；&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; num=2,从前到后，删除2个；&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; num=-2,从后向前，删除2个&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;r.lrem(name, value, num)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;lpop(name)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_8f2aff93-e346-43e3-96ae-786b74275169&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8f2aff93-e346-43e3-96ae-786b74275169&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8f2aff93-e346-43e3-96ae-786b74275169&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 更多：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; rpop(name) 表示从右向左操作&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;lpop(name)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;lindex(name, index)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_e1dc3998-4224-45d7-9bea-cf94b5fff96f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e1dc3998-4224-45d7-9bea-cf94b5fff96f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e1dc3998-4224-45d7-9bea-cf94b5fff96f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 在name对应的列表中根据索引获取列表元素
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;lindex(name, index)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;lrange(name, start, end)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_15797008-b579-4707-876e-b9dc6c7fcde4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_15797008-b579-4707-876e-b9dc6c7fcde4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_15797008-b579-4707-876e-b9dc6c7fcde4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在name对应的列表分片获取数据&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name，redis的name&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; start，索引的起始位置&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; end，索引结束位置&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;lrange(name, start, end)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;ltrim(name, start, end)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_fdc314a2-431e-4556-b40c-c611d1b1f4f0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fdc314a2-431e-4556-b40c-c611d1b1f4f0&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fdc314a2-431e-4556-b40c-c611d1b1f4f0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在name对应的列表中移除没有在start-end索引之间的值&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name，redis的name&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; start，索引的起始位置&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; end，索引结束位置&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ltrim(name, start, end)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;rpoplpush(src, dst)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_c1359425-471a-42f4-9907-4c2c8edd644f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c1359425-471a-42f4-9907-4c2c8edd644f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c1359425-471a-42f4-9907-4c2c8edd644f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; src，要取数据的列表的name&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; dst，要添加数据的列表的name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;rpoplpush(src, dst)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;blpop(keys, timeout)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_c437b4f5-fa9f-418d-a707-54cce77391e8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c437b4f5-fa9f-418d-a707-54cce77391e8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c437b4f5-fa9f-418d-a707-54cce77391e8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将多个列表排列，按照从左到右去pop对应列表的元素&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; keys，redis的name的集合&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;  
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 更多：&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; r.brpop(keys, timeout)，从右向左获取数据&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;blpop(keys, timeout)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;brpoplpush(src, dst, timeout=0)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_c35cf762-c622-42a7-ab36-34089e159608&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c35cf762-c622-42a7-ab36-34089e159608&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c35cf762-c622-42a7-ab36-34089e159608&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; src，取出并要移除元素的列表对应的name&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; dst，要插入元素的列表对应的name&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;brpoplpush(src, dst, timeout=0)&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;　　3、set集合操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Set操作，Set集合就是不允许重复的列表&lt;/p&gt;
&lt;p&gt;sadd(name,values)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_04426f50-af83-43e7-b240-e9ca05b7e85c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_04426f50-af83-43e7-b240-e9ca05b7e85c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_04426f50-af83-43e7-b240-e9ca05b7e85c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name对应的集合中添加元素&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;sadd(name,values)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;scard(name)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_4166b378-77e3-4f5e-8573-31b85f5eedbe&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4166b378-77e3-4f5e-8573-31b85f5eedbe&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4166b378-77e3-4f5e-8573-31b85f5eedbe&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 获取name对应的集合中元素个数
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;scard(name)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;sdiff(keys, *args)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_58e3bf58-ebce-4cb8-92cf-313a0cafb9ea&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_58e3bf58-ebce-4cb8-92cf-313a0cafb9ea&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_58e3bf58-ebce-4cb8-92cf-313a0cafb9ea&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 在第一个name对应的集合中且不在其他name对应的集合的元素集合
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;sdiff(keys, *args)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;sdiffstore(dest, keys, *args)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_909c1ea8-cffd-4339-8923-0b452e5e036b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_909c1ea8-cffd-4339-8923-0b452e5e036b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_909c1ea8-cffd-4339-8923-0b452e5e036b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;sdiffstore(dest, keys, *args)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;sinter(keys, *args)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_8b879df2-cc74-4ddb-b2d0-c968bca6e240&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8b879df2-cc74-4ddb-b2d0-c968bca6e240&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8b879df2-cc74-4ddb-b2d0-c968bca6e240&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取多一个name对应集合的并集&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;sinter(keys, *args)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;sinterstore(dest, keys, *args)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_48af8b6f-a2bc-4092-a467-2a0ce55fb2e3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_48af8b6f-a2bc-4092-a467-2a0ce55fb2e3&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_48af8b6f-a2bc-4092-a467-2a0ce55fb2e3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取多一个name对应集合的并集，再讲其加入到dest对应的集合中&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;sinterstore(dest, keys, *args)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;sismember(name, value)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_95e2502b-bee2-4a01-863e-42b19685b648&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_95e2502b-bee2-4a01-863e-42b19685b648&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_95e2502b-bee2-4a01-863e-42b19685b648&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 检查value是否是name对应的集合的成员&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;sismember(name, value)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;smembers(name)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_cc1eee68-4498-454f-a0c1-002ce48dfcd8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cc1eee68-4498-454f-a0c1-002ce48dfcd8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cc1eee68-4498-454f-a0c1-002ce48dfcd8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取name对应的集合的所有成员&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;smembers(name)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;smove(src, dst, value)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_75a9ab93-e380-46a8-bc0a-df095e5e050b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_75a9ab93-e380-46a8-bc0a-df095e5e050b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_75a9ab93-e380-46a8-bc0a-df095e5e050b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将某个成员从一个集合中移动到另外一个集合&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;smove(src, dst, value)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;spop(name)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_61ac0e88-0d98-4ac3-a702-0a30ab901bba&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_61ac0e88-0d98-4ac3-a702-0a30ab901bba&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_61ac0e88-0d98-4ac3-a702-0a30ab901bba&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从集合的右侧（尾部）移除一个成员，并将其返回&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;spop(name)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;srandmember(name, numbers)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_e007f5bf-55b0-4212-85a9-46ba3d8be45d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e007f5bf-55b0-4212-85a9-46ba3d8be45d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e007f5bf-55b0-4212-85a9-46ba3d8be45d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从name对应的集合中随机获取 numbers 个元素&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;srandmember(name, numbers)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;srem(name, values)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_2fdd923d-ff9a-4132-917e-01f01e6db49f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2fdd923d-ff9a-4132-917e-01f01e6db49f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2fdd923d-ff9a-4132-917e-01f01e6db49f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在name对应的集合中删除某些值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;srem(name, values)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;sunion(keys, *args)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_9edc886d-7902-4984-a21b-10fff8acd9fd&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9edc886d-7902-4984-a21b-10fff8acd9fd&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9edc886d-7902-4984-a21b-10fff8acd9fd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取多一个name对应的集合的并集&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;sunion(keys, *args)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;sunionstore(dest,keys, *args)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_b957336f-3ab3-41bb-8110-50ea3bf03548&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b957336f-3ab3-41bb-8110-50ea3bf03548&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b957336f-3ab3-41bb-8110-50ea3bf03548&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;sunionstore(dest,keys, *args)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;sscan(name, cursor=0, match=None, count=None)&lt;br/&gt;sscan_iter(name, match=None, count=None)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_9dfde560-bda6-4664-9eac-4487b5fb63f7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9dfde560-bda6-4664-9eac-4487b5fb63f7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9dfde560-bda6-4664-9eac-4487b5fb63f7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; sscan(name, cursor=0, match=None, count=None)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;sscan(name, cursor=0, match=None, count=None)&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;有序集合，&lt;/strong&gt;在集合的基础上，为每元素排序；元素的排序需要根据另外一个值来进行比较&lt;/p&gt;
&lt;p&gt;所以，对于有序集合，每一个元素有两个值，即：值和分数，分数专门用来做排序。&lt;/p&gt;
&lt;p&gt;zadd(name, *args, **kwargs)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_47fb893a-524f-4b1c-85b3-eef4c885fd05&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_47fb893a-524f-4b1c-85b3-eef4c885fd05&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_47fb893a-524f-4b1c-85b3-eef4c885fd05&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在name对应的有序集合中添加元素&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如：&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; zadd('zz', 'n1', 1, 'n2', 2)&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 或&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; zadd('zz', n1=11, n2=22)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;zadd(name, *args, **kwargs)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;zcard(name)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_b25f0bbe-c277-4d84-a72a-a93bed592f7d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b25f0bbe-c277-4d84-a72a-a93bed592f7d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b25f0bbe-c277-4d84-a72a-a93bed592f7d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取name对应的有序集合元素的数量&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;zcard(name)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;zcount(name, min, max)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_bb51e666-cf62-46b8-9827-ab87e000dafb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bb51e666-cf62-46b8-9827-ab87e000dafb&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bb51e666-cf62-46b8-9827-ab87e000dafb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取name对应的有序集合中分数 在 [min,max] 之间的个数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;zcount(name, min, max)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;zincrby(name, value, amount)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_9aa42d39-9a58-4fb0-b46c-5d5d87e1eb87&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9aa42d39-9a58-4fb0-b46c-5d5d87e1eb87&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9aa42d39-9a58-4fb0-b46c-5d5d87e1eb87&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 自增name对应的有序集合的 name 对应的分数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;zincrby(name, value, amount)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;r.zrange( name, start, end, desc=False, withscores=False, score_cast_func=float)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40.5&quot;&gt;&lt;img id=&quot;code_img_closed_fe19b406-0d60-4e7d-9cb8-986b597b1cb3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fe19b406-0d60-4e7d-9cb8-986b597b1cb3&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fe19b406-0d60-4e7d-9cb8-986b597b1cb3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 按照索引范围获取name对应的有序集合的元素&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数：&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; name，redis的name&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; start，有序集合索引起始位置（非分数）&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; end，有序集合索引结束位置（非分数）&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; desc，排序规则，默认按照分数从小到大排序&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; withscores，是否获取元素的分数，默认只获取元素的值&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; score_cast_func，对分数进行数据转换的函数&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;  
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 更多：&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从大到小排序&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; zrevrange(name, start, end, withscores=False, score_cast_func=float)&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;  
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 按照分数范围获取name对应的有序集合的元素&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; zrangebyscore(name, min, max, start=None, num=None, withscores=False, score_cast_func=float)&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从大到小排序&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; zrevrangebyscore(name, max, min, start=None, num=None, withscores=False, score_cast_func=float)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;r.zrange&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;zrank(name, value)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_18074fa1-4083-4552-bc86-4129bafe66b8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_18074fa1-4083-4552-bc86-4129bafe66b8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_18074fa1-4083-4552-bc86-4129bafe66b8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取某个值在 name对应的有序集合中的排行（从 0 开始）&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 更多：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; zrevrank(name, value)，从大到小排序&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;zrank(name, value)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;zrem(name, values)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_6acb5d08-9621-4147-93d2-62c84c6827e8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6acb5d08-9621-4147-93d2-62c84c6827e8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6acb5d08-9621-4147-93d2-62c84c6827e8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 删除name对应的有序集合中值是values的成员&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如：zrem('zz', ['s1', 's2'])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;zrem(name, values)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;zremrangebyrank(name, min, max)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_42d76aec-33ff-43e9-96d3-0d099e7b392c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_42d76aec-33ff-43e9-96d3-0d099e7b392c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_42d76aec-33ff-43e9-96d3-0d099e7b392c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 根据排行范围删除&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;zremrangebyrank(name, min, max)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;zremrangebyscore(name, min, max)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_b9cb0e26-c683-4471-aa62-4ebaa68ad349&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b9cb0e26-c683-4471-aa62-4ebaa68ad349&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b9cb0e26-c683-4471-aa62-4ebaa68ad349&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 根据分数范围删除&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;zremrangebyscore(name, min, max)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;zscore(name, value)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_586ad5b3-7e54-4d88-bb74-fe6cc610d026&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_586ad5b3-7e54-4d88-bb74-fe6cc610d026&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_586ad5b3-7e54-4d88-bb74-fe6cc610d026&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取name对应有序集合中 value 对应的分数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;zscore(name, value)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;zinterstore(dest, keys, aggregate=None)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_dfc8ea3d-9c9f-4f1f-91a7-efcbc3331813&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dfc8ea3d-9c9f-4f1f-91a7-efcbc3331813&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dfc8ea3d-9c9f-4f1f-91a7-efcbc3331813&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; aggregate的值为:  SUM  MIN  MAX&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;zinterstore(dest, keys, aggregate=None)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;zunionstore(dest, keys, aggregate=None)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_2e220694-be6e-4b56-9681-01c33903113a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2e220694-be6e-4b56-9681-01c33903113a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2e220694-be6e-4b56-9681-01c33903113a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; aggregate的值为:  SUM  MIN  MAX&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;zunionstore(dest, keys, aggregate=None)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;zscan(name, cursor=0, match=None, count=None, score_cast_func=float)&lt;br/&gt;zscan_iter(name, match=None, count=None,score_cast_func=float)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_5b725d41-395c-42c5-b10f-94506b8fb7b1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5b725d41-395c-42c5-b10f-94506b8fb7b1&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5b725d41-395c-42c5-b10f-94506b8fb7b1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;zscan&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;　　4、常用其他操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;delete(*names)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_6065d79c-b69a-4c1d-a6c5-d884dead061a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6065d79c-b69a-4c1d-a6c5-d884dead061a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6065d79c-b69a-4c1d-a6c5-d884dead061a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 根据删除redis中的任意数据类型&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;delete(*names)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;exists(name)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_75dac10b-c148-41bb-9605-0496ba2a577d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_75dac10b-c148-41bb-9605-0496ba2a577d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_75dac10b-c148-41bb-9605-0496ba2a577d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 检测redis的name是否存在&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;exists(name)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;keys(pattern='*')&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_f70ef420-c7f6-4ed4-94be-587c756e11ba&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f70ef420-c7f6-4ed4-94be-587c756e11ba&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f70ef420-c7f6-4ed4-94be-587c756e11ba&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 根据模型获取redis的name&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 更多：&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; KEYS * 匹配数据库中所有 key 。&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; KEYS h*llo 匹配 hllo 和 heeeeello 等。&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;keys(pattern='*')&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;expire(name ,time)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_1134d200-d1a3-4181-89d9-7cbdb1be3198&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1134d200-d1a3-4181-89d9-7cbdb1be3198&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1134d200-d1a3-4181-89d9-7cbdb1be3198&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 为某个redis的某个name设置超时时间&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;expire(name ,time)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;rename(src, dst)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_4c85a7c7-f9ba-4b63-ab91-81c3f46c6a89&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4c85a7c7-f9ba-4b63-ab91-81c3f46c6a89&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4c85a7c7-f9ba-4b63-ab91-81c3f46c6a89&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 对redis的name重命名为&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;rename(src, dst)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;move(name, db))&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_053b11bf-7481-4f16-b2e7-6b9f734b0524&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_053b11bf-7481-4f16-b2e7-6b9f734b0524&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_053b11bf-7481-4f16-b2e7-6b9f734b0524&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将redis的某个值移动到指定的db下&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;move(name, db))&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;randomkey()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_c30b5f7c-ca6d-4472-b487-60ac55528cb1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c30b5f7c-ca6d-4472-b487-60ac55528cb1&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c30b5f7c-ca6d-4472-b487-60ac55528cb1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 随机获取一个redis的name（不删除）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;randomkey()&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;type(name)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_384cfbf0-76a2-4b49-978d-7ec7d122175f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_384cfbf0-76a2-4b49-978d-7ec7d122175f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_384cfbf0-76a2-4b49-978d-7ec7d122175f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取name对应值的类型&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;type(name)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;scan(cursor=0, match=None, count=None)&lt;br/&gt;scan_iter(match=None, count=None)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_5f75c58f-5136-4db3-b170-761673121ca4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5f75c58f-5136-4db3-b170-761673121ca4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5f75c58f-5136-4db3-b170-761673121ca4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 同字符串操作，用于增量迭代获取key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;scan(cursor=0, match=None, count=None)&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;（4）发布订阅&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1435523/201809/1435523-20180908225857681-449758631.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_1be8adb6-b812-4426-a797-9db55aa5b797&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1be8adb6-b812-4426-a797-9db55aa5b797&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1be8adb6-b812-4426-a797-9db55aa5b797&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; monitor.RedisHelper &lt;span&gt;import&lt;/span&gt;&lt;span&gt; RedisHelper
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; obj =&lt;span&gt; RedisHelper()
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; redis_sub =&lt;span&gt; obj.subscribe()
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;  
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     msg=&lt;span&gt; redis_sub.parse_response()
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt; msg
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;发布者&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_3da47d73-4260-4620-a85c-3f98ce5a6500&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3da47d73-4260-4620-a85c-3f98ce5a6500&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3da47d73-4260-4620-a85c-3f98ce5a6500&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; monitor.RedisHelper &lt;span&gt;import&lt;/span&gt;&lt;span&gt; RedisHelper
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; obj =&lt;span&gt; RedisHelper()
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; obj.public(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;订阅者&lt;/span&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3 小结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;路漫漫其修远兮，吾将上下而求索~!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;真的是这样，有好多事情，你不经历过，真的是不知道有多niux！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;间歇性踌躇满志，持续性混吃等死。&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4 练习&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;题目：rpc命令端&lt;/p&gt;
&lt;p&gt;需求：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;可以异步的执行多个命令&lt;/li&gt;
&lt;li&gt;对多台机器&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;作业是真的不会做。有机会有勇气可以点进来看看：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/catepython/p/9051490.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/catepython/p/9051490.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我是尾巴~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这次推荐：如何用几个简单的命令改善你的Linux安全&lt;/p&gt;

&lt;p&gt;虽不才，才要坚持。&lt;/p&gt;
</description>
<pubDate>Sat, 08 Sep 2018 15:16:00 +0000</pubDate>
<dc:creator>m1racle</dc:creator>
<og:description>C语言基础学习PYTHON——基础学习D11 20180908内容纲要： 1、RabbitMQ消息队列 （1）RabbitMQ安装 （2）Rabbits示例 模式一：fanout 模式二：direct</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangkanghui/p/9609589.html</dc:identifier>
</item>
<item>
<title>05-数据类型和类型转换 - 极客大全</title>
<link>http://www.cnblogs.com/AIThink/p/9611000.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/AIThink/p/9611000.html</guid>
<description>&lt;p&gt;这篇文章为你搞懂2个问题&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;java 中有哪些数据类型可以用存储数据？&lt;/li&gt;
&lt;li&gt;java 中的数据类型是怎么转换的？&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在上一篇文章中我们学会了如何使用变量，像这样存储一个整数 &lt;code&gt;int age=10;&lt;/code&gt;，可以在开发工具中编写一行这样的代码 &lt;code&gt;int age=10.5;&lt;/code&gt; 就会发现开发工具报错了，是因为变量中的数据类型也是不能随便用的。&lt;/p&gt;

&lt;p&gt;咱们先来看下面一组数据&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果每天花费2小时在交通上&lt;br/&gt;1月=60小时=2.5天，&lt;br/&gt;1年=730小时=30天，&lt;br/&gt;50年=36500小时=1520天=4年&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这段数据中可以分为以下2类，java中也包含这2大类&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;数值&lt;br/&gt;&lt;code&gt;1月&lt;/code&gt; 中的 &lt;code&gt;1&lt;/code&gt;&lt;br/&gt;&lt;code&gt;60小时&lt;/code&gt; 中的 &lt;code&gt;60&lt;/code&gt;&lt;br/&gt;&lt;code&gt;2.5&lt;/code&gt; 天中 &lt;code&gt;2.5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;非数值&lt;br/&gt;&lt;code&gt;,&lt;/code&gt;&lt;br/&gt;&lt;code&gt;年&lt;/code&gt; &lt;code&gt;月&lt;/code&gt; &lt;code&gt;小时&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;数值
&lt;ul&gt;&lt;li&gt;整型
&lt;ul&gt;&lt;li&gt;byte&lt;/li&gt;
&lt;li&gt;short&lt;/li&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;long&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;浮点型
&lt;ul&gt;&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;double&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;非数值
&lt;/li&gt;
&lt;/ul&gt;&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;1字节8位&lt;/td&gt;
&lt;td&gt;-128 ~ +127&lt;/td&gt;
&lt;td&gt;字节型 这个范围可以存储普通人的年龄&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;short&lt;/td&gt;
&lt;td&gt;2字节16位&lt;/td&gt;
&lt;td&gt;-32768~+3276&lt;/td&gt;
&lt;td&gt;短整型&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;4字节32位&lt;/td&gt;
&lt;td&gt;-2147483648）~+2147483647&lt;/td&gt;
&lt;td&gt;整型 存下中国人口的数量没有问题，但是存下地球所有人的数量就不够了&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;8字节64位&lt;/td&gt;
&lt;td&gt;-2^63 ~ + 2^63-1&lt;/td&gt;
&lt;td&gt;长整型 存下地球的人数绰绰有余&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;4字节32位&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;单精度浮点数 存储小数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;8字节64位&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;双精度浮点数&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;敲一敲：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class DemoType {
    public static void main(String[] args) {
        //int类型使用
        int numa=10+1;
        System.out.println(numa);//输出11
        short numb=20;
        //使用long类型时的值需要使用L作为后缀
        long time=9223372036854775807L;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;在使用 long 类型时使用不区分大小写的 L 作为后缀标记与整型进行区分&lt;br/&gt;使用其他整数时不需加后缀符号，注意赋值的整数不超过类型范围即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;敲一敲：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class DemoFloat {
    public static void main(String[] args) {
        float money=33.6f;
        double length=55.07;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;在使用单精度浮点数时需加上 &lt;code&gt;f&lt;/code&gt; 作为后缀，这是因为任何小数都会被认为是 &lt;code&gt;double&lt;/code&gt;&lt;br/&gt;在日常使用中建议使用 &lt;code&gt;double&lt;/code&gt; 类型防止精度的丢失&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;非数值型&quot;&gt;非数值型&lt;/h2&gt;
&lt;h3 id=&quot;字符型-char&quot;&gt;字符型 char&lt;/h3&gt;
&lt;p&gt;只能存储一个字符，值需要用一对单引号引起来，且单引号中只能放一个字符&lt;/p&gt;
&lt;p&gt;敲一敲：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;char sex='男';&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;字符串型-string&quot;&gt;字符串型 String&lt;/h3&gt;
&lt;p&gt;用于存储一串字符，必须用一对双引号引起来，另外需要注意的是 String 不是基本数据类型，而是 java 中的另一个概念 &lt;code&gt;类&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;敲一敲：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;String username=&quot;极客大全&quot;;
String question=&quot;What's your name?\nHow old are you?&quot;;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;String&lt;/code&gt; 类型用于存储字符串，字符串可以拼接但不能用于数学运算&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;还可以使用一些 &lt;code&gt;转义字符&lt;/code&gt; ，这些字符可以用来表示一些特殊符号像 空格、换行&lt;br/&gt;&lt;code&gt;\n&lt;/code&gt; 可以用来表示换行，之后的内容会另起一行&lt;br/&gt;&lt;code&gt;\t&lt;/code&gt; 可以表示一个制表符(&lt;code&gt;Tab&lt;/code&gt; 键)&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;布尔型-boolean&quot;&gt;布尔型 boolean&lt;/h3&gt;
&lt;p&gt;用于存储逻辑的结果,如：大象比人大的结果是真(&lt;code&gt;true&lt;/code&gt;) 人比蚂蚁小的结果是假(&lt;code&gt;false&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;敲一敲：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;boolean isbig=(1&amp;gt;10);
System.out.println(&quot;isbig:&quot;+isbig);
boolean isequal=(100==3);
System.out.println(&quot;isequal:&quot;+isbig);
boolean flag=false;
System.out.println(&quot;flag:&quot;+flag);&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;code&gt;boolean&lt;/code&gt; 类型的变量只能存储两个值 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt;&lt;br/&gt;还可以将逻辑比较后的结果（也是 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt;）存入&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;隐式类型转换&quot;&gt;隐式类型转换&lt;/h2&gt;
&lt;p&gt;二花一个月前称的体重为97.5斤，现在比一个月前刚好增加2斤，二花现在是多少斤？这是一个比较简单的数学问题，正确结果是 99.5 斤，下面我们用代码来模拟一遍。&lt;/p&gt;
&lt;p&gt;敲一敲：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class DemoClac {
    public static void main(String[] args) {
        double weight=97.5;//一个月前的体重
        int add=2;//增加的体重
        double sum=weight+add;
        System.out.println(sum);//输出和
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;add 变量是一个整数类型，而 weight 是一个小数，两者在相加后转成了 double类型&lt;br/&gt;这时发生的就是 &lt;code&gt;隐式类型转换&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;隐式类型转换&lt;/code&gt; 就是自动类型转换，满足以下两个规则即可发生&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;如果一个操作数为double类型，则整个表达式可提升为double类型&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;像上面的这个示例就是满足这个规则&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;满足自动类型转换的条件：两种类型要兼容、目标类型大于源类型&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;例子1 ：&lt;code&gt;double a=1;&lt;/code&gt; 1属于整型，double 类型大于整型，即自动转换&lt;/p&gt;
&lt;p&gt;例子2 ：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;char chr=97;
System.out.println(chr);//输出字符 a&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;char 类型兼容 int 类型，每个整数存入char类型变量时都会映射一个字符，更多可以百度 &lt;code&gt;ASCII&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;强制类型转换&quot;&gt;强制类型转换&lt;/h2&gt;
&lt;p&gt;敲一敲：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;int sum=55.3+22;
System.out.println(sum);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们想要一个整数的和，但上面的这段代码运行时会报错：&lt;code&gt;cannot convert from double to int&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是为什么呢？根据前面学到的隐式类型转换，当表达式中有操作数为 double类型时，整个表达式提升为 double，必须进行显式强制类型转换。&lt;/p&gt;
&lt;p&gt;敲一敲：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;int sum=(int) (55.3+22);
System.out.println(sum);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这次的运行成功，运行的结果为 &lt;code&gt;77&lt;/code&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;强制类型转换往往是从宽度大的类型转换为宽度小的类型，会使数值损失精度&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;&lt;li&gt;下面运算的结果是多少？为什么？&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;int a=5;
int b=2;
int c=a/5;
System.out.println(c);&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;上一个练习中的代码如何让运算结果更精准？&lt;/li&gt;
&lt;li&gt;下面素材中生成随机小数，修改素材生成 1-10 的随机整数&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class DemoRandom {
    public static void main(String[] args) {
        double random=Math.random();
        System.out.println(random);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;鼓励你在留言中发布自己的答案，与其他人一起交流，并在百度上搜索相关问题&lt;/p&gt;
</description>
<pubDate>Sat, 08 Sep 2018 15:13:00 +0000</pubDate>
<dc:creator>极客大全</dc:creator>
<og:description>这篇文章为你搞懂2个问题 1. java 中有哪些数据类型可以用存储数据？ 2. java 中的数据类型是怎么转换的？ 在上一篇文章中我们学会了如何使用变量，像这样存储一个整数 ，可以在开发工具中编写</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/AIThink/p/9611000.html</dc:identifier>
</item>
<item>
<title>纯小白入手 vue3.0 CLI - 2.1 - 组件 ( component ) - nDos</title>
<link>http://www.cnblogs.com/ndos/p/9609683.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ndos/p/9609683.html</guid>
<description>&lt;p&gt;我的 github 地址 - &lt;a href=&quot;https://github.com/yokees/vue3.0Study&quot; target=&quot;_blank&quot;&gt;vue3.0Study&lt;/a&gt; - 阶段学习成果都会建立分支。&lt;/p&gt;
&lt;p&gt;进入 src 文件夹，这是实际都工程文件夹，其他文件夹以及文件以后在了解。&lt;/p&gt;
&lt;p&gt;3个文件夹  assets - 各类静态资源文件夹 - 比如 图片, css 文件等。  components - 组件文件夹, 组件是 vue 等 MVC 框架等核心概念，自行了解含义。 view - 视图文件夹。&lt;/p&gt;
&lt;p&gt;5个文件  app.vue、main.js - 主视图、配合 main.js 成为 vue 程序的主入口。router.js - 路由程序主入口。store.js - 路由状态管理系统。&lt;/p&gt;
&lt;p&gt;registerServiceWorker.js 暂不进行了解。&lt;/p&gt;
&lt;p&gt;介绍完工程文件夹，进入本文&lt;span&gt;主要关注点&lt;/span&gt; - 组件。&lt;/p&gt;
&lt;p&gt;*.js 和 *.vue文件都可以单独成为 组件 。我不会使用单独的 *.js 文件作为组件 ( 用 *.vue 文件作为组件方便理解和管理 )。组件可以单独用 *.vue 写出来，也可以分开同时用 *.vue 和 *.js 来完成一个或者多个组件。&lt;/p&gt;
&lt;p&gt;当前工程文件夹中存在 4 个组件：app.vue + main.js、helloworld.vue、views/home.vue、views/about.vue。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;template 标签&lt;/span&gt;：4 个组件都有，这是渲染模版，也是组件的核心，细心的读者可以发现这4个 template 中都包含有一个顶层都 div 元素。&lt;span&gt;script 标签&lt;/span&gt;：helloworld.vue 和 views/home.vue 中有，也可以用单独的 js 文件描述，比如 main.js。&lt;span&gt;style 标签&lt;/span&gt;：app.vue 和 helloworld.vue 中有，提供【组件作用域】的 css 样式，防止团队协同开发导致的 css 样式名冲突。&lt;/p&gt;
&lt;h3&gt;template - script - 问答&lt;/h3&gt;
&lt;p&gt;1、为什么要使用 *.vue 和 *.js 分开的方式写组件？&lt;/p&gt;
&lt;p&gt;答：这个初始化的项目，自然没有这个必要。在大型的项目中，有些组件的 模板 template 和 功能定义 script 都是相当规模的代码，分开管理有利于项目架构的整理。&lt;/p&gt;
&lt;p&gt;2、下面是否会介绍 style 的用法？&lt;/p&gt;
&lt;p&gt;答：显然不会，这方面内容简单，读者自行了解。&lt;/p&gt;
&lt;p&gt;3、app.vue 与其他组件中 script 的区别？&lt;/p&gt;
&lt;p&gt;答：这个区别很大！app.vue 中的 script 是定义各类功能的集中入口，当前可以看到的有 路由、路由状态管理系统、渲染 和 配置定义，因此 app 组件的 script 一般都是分开定义。由于 app.vue 是主程序入口，它并没有 data、prop 等等常规组件都有的东西。关于 app.vue 和 main.js，在以后的学习中会渐渐深入。&lt;/p&gt;
&lt;h3&gt;学习改造 helloworld.vue&lt;/h3&gt;
&lt;p&gt;export default { name: 'HelloWorld', props: { msg: String } }，这是 script 代码。export default &amp;lt;object&amp;gt;，其实这个很简单，导出一个 object 实例，这个 obj 有 name、props 属性。name - 组件名称；props - 组件属性 ( 这些属性的值只能由父组件提供 )。组件属性也是一个健值对的对象：健 - 属性名称，值 - 属性类型 ( 这玩意还有点内容，建议去官方说明中看相关介绍 )。&lt;/p&gt;
&lt;p&gt;helloworld.vue 组件在 views/home.vue 中被使用，props =&amp;gt; msg 也是在 views/home.vue 中传递过来 ( 下文中绿字部分 )：&lt;/p&gt;
&lt;p&gt;import HelloWorld from '@/components/HelloWorld.vue'    &amp;lt;HelloWorld msg=&quot;&lt;span&gt;Welcome to Your Vue.js App&lt;/span&gt;&quot;/&amp;gt;   仅有这些还不能使用 helloworld.vue 组件，还需要以下代码中绿色的部分：export default { name: 'home', &lt;span&gt;components: { HelloWorld }&lt;/span&gt; }。&lt;/p&gt;
&lt;p&gt;现在来用 helloworld.vue 试验学习组件的相关内容。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;v-for&lt;/span&gt; 的使用&lt;/h4&gt;
&lt;div readability=&quot;19.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
data: &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
　　linkPrefix: &lt;/span&gt;'https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-'&lt;span&gt;,
　　clis: [
　　　　{ link: &lt;/span&gt;&quot;babel&quot;, text: &quot;babel&quot;&lt;span&gt; },
　　　　{ link: &lt;/span&gt;&quot;pwa&quot;, text: &quot;pwa&quot;&lt;span&gt; },
　　　　{ link: &lt;/span&gt;&quot;eslint&quot;, text: &quot;eslint&quot;&lt;span&gt; },
　　　　{ link: &lt;/span&gt;&quot;unit-mocha&quot;, text: &quot;unit-mocha&quot;&lt;span&gt; },
　　　　{ link: &lt;/span&gt;&quot;e2e-nightwatch&quot;, text: &quot;e2e-nightwatch&quot;&lt;span&gt; }
　　]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;给 helloworld.vue 组件导出配置增加如上 data 属性 ( 由于组件存在，data 属性需要用 function 的方式来返回 ) 。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;ul&amp;gt;
　　&amp;lt;li v-&lt;span&gt;for&lt;/span&gt;=&quot;(cli,index) in clis&quot; :key=&quot;index&quot;&amp;gt;
　　　　&amp;lt;a :href= linkPrefix + cli.link target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;{{cli.text}}&amp;lt;/a&amp;gt;
　　&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改之后的版本已经上传我的 github 。&lt;/p&gt;
&lt;/div&gt;



</description>
<pubDate>Sat, 08 Sep 2018 14:59:00 +0000</pubDate>
<dc:creator>nDos</dc:creator>
<og:description>我的 github 地址 - vue3.0Study - 阶段学习成果都会建立分支。 进入 src 文件夹，这是实际都工程文件夹，其他文件夹以及文件以后在了解。 3个文件夹 assets -</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ndos/p/9609683.html</dc:identifier>
</item>
<item>
<title>offsetof与container_of宏分析 - zxzhang</title>
<link>http://www.cnblogs.com/ZhaoxiCheung/p/9610721.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ZhaoxiCheung/p/9610721.html</guid>
<description>&lt;p&gt;offsetof宏：结构体成员相对结构体的偏移位置&lt;br/&gt;container_of：根据结构体成员的地址来获取结构体的地址&lt;/p&gt;
&lt;h3 id=&quot;offsetof-宏&quot;&gt;offsetof 宏&lt;/h3&gt;
&lt;p&gt;原型：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#define offsetof(TYPE, MEMBER)  ((size_t)&amp;amp;((TYPE *)0)-&amp;gt;MEMBER)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;(TYPE *)0&lt;/code&gt;非常巧妙，告诉编译器有一个指向结构体 TYPE 的指针，其地址是0，然后取该指针的 MEMBER 地址 &lt;code&gt;&amp;amp;((TYPE *)0)-&amp;gt;MEMBER&lt;/code&gt;，因为基址是0，所以这时获取到的 MEMBER 的地址就是相当于在结构体 TYPE 中的偏移量了。&lt;br/&gt;Example：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stddef.h&amp;gt;

struct TYPE{
    int mem;
    int member;
};

int main()
{
    struct TYPE type;
    printf(&quot;&amp;amp;type = %p\n&quot;, &amp;amp;type);
    printf(&quot;&amp;amp;type.member = %p\n&quot;, &amp;amp;type.member);
    printf(&quot;&amp;amp;((struct type *)0)-&amp;gt;member = %lu\n&quot;, ((size_t)&amp;amp;((struct TYPE *)0)-&amp;gt;member) );
    printf(&quot;offsetof(struct TYPE member) = %zd\n&quot;, offsetof(struct TYPE, member));
    return 0;
}
/*
result：
&amp;amp;type = 0x7ffc1104a110
&amp;amp;type.member = 0x7ffc1104a114
&amp;amp;((struct type *)0)-&amp;gt;member = 4
offsetof(struct TYPE member) = 4
*/&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;container_of-宏&quot;&gt;container_of 宏&lt;/h3&gt;
&lt;p&gt;原型：linux-4.18.5&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * container_of - cast a member of a structure out to the containing structure
 * @ptr:    the pointer to the member.
 * @type:   the type of the container struct this is embedded in.
 * @member: the name of the member within the struct.
 *
 */
#define container_of(ptr, type, member) ({              \
    void *__mptr = (void *)(ptr);                   \
    BUILD_BUG_ON_MSG(!__same_type(*(ptr), ((type *)0)-&amp;gt;member) &amp;amp;&amp;amp;   \
             !__same_type(*(ptr), void),            \
             &quot;pointer type mismatch in container_of()&quot;);    \
    ((type *)(__mptr - offsetof(type, member))); })&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;网上所见更多是底下这个版本：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#define container_of(ptr, type, member) ({      \   
 const typeof( ((type *)0)-&amp;gt;member ) *__mptr = (ptr);    \  
  (type *)( (char *)__mptr - offsetof(type,member) );})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第一部分：&lt;code&gt;void *__mptr = (void *)(ptr);&lt;/code&gt;或&lt;code&gt;const typeof( ((type *)0)-&amp;gt;member ) *__mptr = (ptr);&lt;/code&gt;&lt;br/&gt;两个的差别在于 __mptr 的类型一个是 void * ，一个是 type *。&lt;br/&gt;void * 较为容易理解，下面来看看 type *：&lt;br/&gt;关于 typeof 关键字其作用是返回变量的类型，简单理解就是如下，详细可参见&lt;a href=&quot;http://deltamaster.is-programmer.com/posts/37253.html&quot;&gt;GCC typeof在kernel中的使用——C语言的“编译时多态”&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;int a;
typeof(a) b; //这等同于int b;
typeof(&amp;amp;a) c; //这等同于int* c;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因此&lt;code&gt;const typeof( ((type *)0)-&amp;gt;member ) *__mptr = (ptr);&lt;/code&gt;的作用就是通过 typeof 获取结构体成员 member 的类型，然后定义一个这个类型的指针变量 __mptr 并将其赋值为 ptr。&lt;br/&gt;第二部分：&lt;code&gt;(type *)( (char *)__mptr - offsetof(type,member) )&lt;/code&gt;，通过&lt;code&gt;offsetof&lt;/code&gt;宏计算出 member 在 type 中的偏移，然后用 member 的实际地址&lt;code&gt;__mptr&lt;/code&gt;减去偏移，得到 type 的起始地址。从上面关于&lt;code&gt;offsetof&lt;/code&gt;宏的 Example 也可以验证这一点：&lt;br/&gt;&amp;amp;type.member = 0x7ffc1104a114 - &amp;amp;((struct type *)0)-&amp;gt;member = 4 = &amp;amp;type = 0x7ffc1104a110&lt;/p&gt;
</description>
<pubDate>Sat, 08 Sep 2018 14:55:00 +0000</pubDate>
<dc:creator>zxzhang</dc:creator>
<og:description>offsetof宏：结构体成员相对结构体的偏移位置 container_of：根据结构体成员的地址来获取结构体的地址 offsetof 宏 原型： 非常巧妙，告诉编译器有一个指向结构体 TYPE 的指</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ZhaoxiCheung/p/9610721.html</dc:identifier>
</item>
<item>
<title>springboot配置读写分离 - 烦嚣的人</title>
<link>http://www.cnblogs.com/wuyoucao/p/9610882.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuyoucao/p/9610882.html</guid>
<description>&lt;p&gt;  近日工作任务较轻，有空学习学习技术，遂来研究如果实现读写分离。这里用博客记录下过程，一方面可备日后查看，同时也能分享给大家（网上的资料真的大都是抄来抄去，，还不带格式的，看的真心难受）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/FleyX/demo-project/tree/master/dxfl&quot;&gt;完整代码&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;1、背景&lt;/h2&gt;
&lt;p&gt;  一个项目中数据库最基础同时也是最主流的是单机数据库，读写都在一个库中。当用户逐渐增多，单机数据库无法满足性能要求时，就会进行读写分离改造（适用于读多写少），写操作一个库，读操作多个库，通常会做一个数据库集群，开启主从备份，一主多从，以提高读取性能。当用户更多读写分离也无法满足时，就需要分布式数据库了（可能以后会学习怎么弄）。&lt;/p&gt;
&lt;p&gt;  正常情况下读写分离的实现，首先要做一个一主多从的数据库集群，同时还需要进行数据同步。这一篇记录如何用mysql搭建一个一主多次的配置，下一篇记录代码层面如何实现读写分离。&lt;/p&gt;
&lt;h2 id=&quot;搭建一主多从数据库集群&quot;&gt;2、搭建一主多从数据库集群&lt;/h2&gt;
&lt;p&gt;  主从备份需要多台虚拟机，我是用wmware完整克隆多个实例，注意直接克隆的虚拟机会导致每个数据库的uuid相同，需要修改为不同的uuid。修改方法参考这个：&lt;a href=&quot;https://blog.csdn.net/pratise/article/details/80413198&quot;&gt;点击跳转&lt;/a&gt;。&lt;/p&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;主库配置&lt;/p&gt;
&lt;p&gt;主数据库（master）中新建一个用户用于从数据库（slave）读取主数据库二进制日志，sql语句如下：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;  mysql&amp;gt; CREATE USER 'repl'@'%' IDENTIFIED BY '123456';#创建用户
  mysql&amp;gt; GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';#分配权限
  mysql&amp;gt;flush privileges;   #刷新权限&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同时修改mysql配置文件开启二进制日志，新增部分如下：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;[mysqld]
server-id=1
log-bin=master-bin
log-bin-index=master-bin.index&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后重启数据库，使用&lt;code&gt;show master status;&lt;/code&gt;语句查看主库状态，如下所示：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/680546/201809/680546-20180908222811371-1251336275.png&quot;/&gt;&lt;/p&gt;
&lt;ul readability=&quot;5.5&quot;&gt;&lt;li readability=&quot;14&quot;&gt;
&lt;p&gt;从库配置&lt;/p&gt;
&lt;p&gt;同样先新增几行配置：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;[mysqld]
server-id=2
relay-log-index=slave-relay-bin.index
relay-log=slave-relay-bin&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后重启数据库，使用如下语句连接主库：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;CHANGE MASTER TO
         MASTER_HOST='192.168.226.5',
         MASTER_USER='root',
         MASTER_PASSWORD='123456',
         MASTER_LOG_FILE='master-bin.000003',
         MASTER_LOG_POS=154;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接着运行&lt;code&gt;start slave;&lt;/code&gt;开启备份,正常情况如下图所示：Slave_IO_Running和Slave_SQL_Running都为yes。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/680546/201809/680546-20180908222835879-1625524617.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以用这个步骤开启多个从库。&lt;/p&gt;
&lt;p&gt;  默认情况下备份是主库的全部操作都会备份到从库，实际可能需要忽略某些库，可以在主库中增加如下配置：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;# 不同步哪些数据库  
binlog-ignore-db = mysql  
binlog-ignore-db = test  
binlog-ignore-db = information_schema  
  
# 只同步哪些数据库，除此之外，其他不同步  
binlog-do-db = game  &lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;代码层面进行读写分离&quot;&gt;3、代码层面进行读写分离&lt;/h2&gt;
&lt;p&gt;  代码环境是springboot+mybatis+druib连接池。想要读写分离就需要配置多个数据源，在进行写操作是选择写的数据源，读操作时选择读的数据源。其中有两个关键点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如何切换数据源&lt;/li&gt;
&lt;li&gt;如何根据不同的方法选择正确的数据源&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;如何切换数据源&quot;&gt;1)、如何切换数据源&lt;/h3&gt;
&lt;p&gt;  通常用springboot时都是使用它的默认配置，只需要在配置文件中定义好连接属性就行了，但是现在我们需要自己来配置了，spring是支持多数据源的，多个datasource放在一个HashMap&lt;code&gt;TargetDataSource&lt;/code&gt;中，通过&lt;code&gt;dertermineCurrentLookupKey&lt;/code&gt;获取key来觉定要使用哪个数据源。因此我们的目标就很明确了，建立多个datasource放到TargetDataSource中，同时重写dertermineCurrentLookupKey方法来决定使用哪个key。&lt;/p&gt;
&lt;h3 id=&quot;如何选择数据源&quot;&gt;2)、如何选择数据源&lt;/h3&gt;
&lt;p&gt;  事务一般是注解在Service层的，因此在开始这个service方法调用时要确定数据源，有什么通用方法能够在开始执行一个方法前做操作呢？相信你已经想到了那就是&lt;strong&gt;切面&lt;/strong&gt; 。怎么切有两种办法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;注解式，定义一个只读注解，被该数据标注的方法使用读库&lt;/li&gt;
&lt;li&gt;方法名，根据方法名写切点，比如getXXX用读库，setXXX用写库&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;代码编写&quot;&gt;3)、代码编写&lt;/h3&gt;
&lt;h4 id=&quot;a编写配置文件配置两个数据源信息&quot;&gt;a、编写配置文件，配置两个数据源信息&lt;/h4&gt;
&lt;p&gt;  只有必填信息，其他都有默认设置&lt;/p&gt;
&lt;pre class=&quot;yml&quot;&gt;
&lt;code&gt;mysql:
  datasource:
    #读库数目
    num: 1
    type-aliases-package: com.example.dxfl.dao
    mapper-locations: classpath:/mapper/*.xml
    config-location: classpath:/mybatis-config.xml
    write:
      url: jdbc:mysql://192.168.226.5:3306/test?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=true
      username: root
      password: 123456
      driver-class-name: com.mysql.jdbc.Driver
    read:
      url: jdbc:mysql://192.168.226.6:3306/test?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=true
      username: root
      password: 123456
      driver-class-name: com.mysql.jdbc.Driver&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;b编写dbcontextholder类&quot;&gt;b、编写DbContextHolder类&lt;/h4&gt;
&lt;p&gt;  这个类用来设置数据库类别，其中有一个ThreadLocal用来保存每个线程的是使用读库，还是写库。代码如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * Description 这里切换读/写模式
 * 原理是利用ThreadLocal保存当前线程是否处于读模式（通过开始READ_ONLY注解在开始操作前设置模式为读模式，
 * 操作结束后清除该数据，避免内存泄漏，同时也为了后续在该线程进行写操作时任然为读模式
 * @author fxb
 * @date 2018-08-31
 */
public class DbContextHolder {

    private static Logger log = LoggerFactory.getLogger(DbContextHolder.class);
    public static final String WRITE = &quot;write&quot;;
    public static final String READ = &quot;read&quot;;

    private static ThreadLocal&amp;lt;String&amp;gt; contextHolder= new ThreadLocal&amp;lt;&amp;gt;();

    public static void setDbType(String dbType) {
        if (dbType == null) {
            log.error(&quot;dbType为空&quot;);
            throw new NullPointerException();
        }
        log.info(&quot;设置dbType为：{}&quot;,dbType);
        contextHolder.set(dbType);
    }

    public static String getDbType() {
        return contextHolder.get() == null ? WRITE : contextHolder.get();
    }

    public static void clearDbType() {
        contextHolder.remove();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;c重写determinecurrentlookupkey方法&quot;&gt;c、重写determineCurrentLookupKey方法&lt;/h4&gt;
&lt;p&gt;  spring在开始进行数据库操作时会通过这个方法来决定使用哪个数据库，因此我们在这里调用上面DbContextHolder类的&lt;code&gt;getDbType()&lt;/code&gt;方法获取当前操作类别,同时可进行读库的负载均衡，代码如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class MyAbstractRoutingDataSource extends AbstractRoutingDataSource {

    @Value(&quot;${mysql.datasource.num}&quot;)
    private int num;

    private final Logger log = LoggerFactory.getLogger(this.getClass());

    @Override
    protected Object determineCurrentLookupKey() {
        String typeKey = DbContextHolder.getDbType();
        if (typeKey == DbContextHolder.WRITE) {
            log.info(&quot;使用了写库&quot;);
            return typeKey;
        }
        //使用随机数决定使用哪个读库
        int sum = NumberUtil.getRandom(1, num);
        log.info(&quot;使用了读库{}&quot;, sum);
        return DbContextHolder.READ + sum;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;d编写配置类&quot;&gt;d、编写配置类&lt;/h4&gt;
&lt;p&gt;  由于要进行读写分离，不能再用springboot的默认配置，我们需要手动来进行配置。首先生成数据源，使用@ConfigurProperties自动生成数据源：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    /**
     * 写数据源
     *
     * @Primary 标志这个 Bean 如果在多个同类 Bean 候选时，该 Bean 优先被考虑。
     * 多数据源配置的时候注意，必须要有一个主数据源，用 @Primary 标志该 Bean
     */
    @Primary
    @Bean
    @ConfigurationProperties(prefix = &quot;mysql.datasource.write&quot;)
    public DataSource writeDataSource() {
        return new DruidDataSource();
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;读数据源类似，注意有多少个读库就要设置多少个读数据源，Bean名为read+序号。&lt;/p&gt;
&lt;p&gt;  然后设置数据源，使用的是我们之前写的MyAbstractRoutingDataSource类&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    /**
     * 设置数据源路由，通过该类中的determineCurrentLookupKey决定使用哪个数据源
     */
    @Bean
    public AbstractRoutingDataSource routingDataSource() {
        MyAbstractRoutingDataSource proxy = new MyAbstractRoutingDataSource();
        Map&amp;lt;Object, Object&amp;gt; targetDataSources = new HashMap&amp;lt;&amp;gt;(2);
        targetDataSources.put(DbContextHolder.WRITE, writeDataSource());
        targetDataSources.put(DbContextHolder.READ+&quot;1&quot;, read1());
        proxy.setDefaultTargetDataSource(writeDataSource());
        proxy.setTargetDataSources(targetDataSources);
        return proxy;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  接着需要设置sqlSessionFactory&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    /**
     * 多数据源需要自己设置sqlSessionFactory
     */
    @Bean
    public SqlSessionFactory sqlSessionFactory() throws Exception {
        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();
        bean.setDataSource(routingDataSource());
        ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();
        // 实体类对应的位置
        bean.setTypeAliasesPackage(typeAliasesPackage);
        // mybatis的XML的配置
        bean.setMapperLocations(resolver.getResources(mapperLocation));
        bean.setConfigLocation(resolver.getResource(configLocation));
        return bean.getObject();
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  最后还得配置下事务，否则事务不生效&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    /**
     * 设置事务，事务需要知道当前使用的是哪个数据源才能进行事务处理
     */
    @Bean
    public DataSourceTransactionManager dataSourceTransactionManager() {
        return new DataSourceTransactionManager(routingDataSource());
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;选择数据源&quot;&gt;4)、选择数据源&lt;/h3&gt;
&lt;p&gt;  多数据源配置好了，但是代码层面如何选择选择数据源呢？这里介绍两种办法：&lt;/p&gt;
&lt;h4 id=&quot;a注解式&quot;&gt;a、注解式&lt;/h4&gt;
&lt;p&gt;  首先定义一个只读注解，被这个注解方法使用读库，其他使用写库，如果项目是中途改造成读写分离可使用这个方法，无需修改业务代码，只要在只读的service方法上加一个注解即可。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Target({ElementType.METHOD,ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
public @interface ReadOnly {
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  然后写一个切面来切换数据使用哪种数据源，重写getOrder保证本切面优先级高于事务切面优先级，在启动类加上&lt;code&gt;@EnableTransactionManagement(order = 10)&lt;/code&gt;,为了代码如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Aspect
@Component
public class ReadOnlyInterceptor implements Ordered {
    private static final Logger log= LoggerFactory.getLogger(ReadOnlyInterceptor.class);

    @Around(&quot;@annotation(readOnly)&quot;)
    public Object setRead(ProceedingJoinPoint joinPoint,ReadOnly readOnly) throws Throwable{
        try{
            DbContextHolder.setDbType(DbContextHolder.READ);
            return joinPoint.proceed();
        }finally {
            //清楚DbType一方面为了避免内存泄漏，更重要的是避免对后续在本线程上执行的操作产生影响
            DbContextHolder.clearDbType();
            log.info(&quot;清除threadLocal&quot;);
        }
    }

    @Override
    public int getOrder() {
        return 0;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;b方法名式&quot;&gt;b、方法名式&lt;/h4&gt;
&lt;p&gt;  这种方法不许要注解，但是需要事务名称按一定规则编写，然后通过切面来设置数据库类别，比如&lt;code&gt;setXXX&lt;/code&gt;设置为写、&lt;code&gt;getXXX&lt;/code&gt;设置为读，代码我就不写了，应该都知道怎么写。&lt;/p&gt;
&lt;h3 id=&quot;测试&quot;&gt;4、测试&lt;/h3&gt;
&lt;p&gt;  编写好代码来试试结果如何，下面是运行截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/680546/201809/680546-20180908222851647-331886292.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  断断续续写了好几天终于是写完了，，，如果有帮助到你，，欢迎star哦，，这里是完整代码地址：&lt;a href=&quot;https://github.com/FleyX/demo-project/tree/master/dxfl&quot;&gt;点击跳转&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 08 Sep 2018 14:30:00 +0000</pubDate>
<dc:creator>烦嚣的人</dc:creator>
<og:description>  近日工作任务较轻，有空学习学习技术，遂来研究如果实现读写分离。这里用博客记录下过程，一方面可备日后查看，同时也能分享给大家（网上的资料真的大都是抄来抄去，，还不带格式的，看的真</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuyoucao/p/9610882.html</dc:identifier>
</item>
</channel>
</rss>