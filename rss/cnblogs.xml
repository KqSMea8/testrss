<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>71、django之Ajax续 - 布吉岛丶</title>
<link>http://www.cnblogs.com/liluning/p/7834415.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liluning/p/7834415.html</guid>
<description>&lt;p&gt;&lt;span&gt;接上篇随笔。继续介绍ajax的使用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上篇友情连接：&lt;a href=&quot;http://www.cnblogs.com/liluning/p/7831169.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/liluning/p/7831169.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;本篇导航：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、Ajax响应参数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上篇最后介绍了ajax的请求参数现在补充一个响应参数&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;dataType：  
预期服务器返回的数据类型,服务器端返回的数据会根据这个值解析后，传递给回调函数。 默认不需要显性指定这个属性，
ajax会根据服务器返回的content Type来进行转换； 比如我们的服务器响应的content Type为json格式，这时ajax
方法就会对响应的内容进行一个json格式的转换，if转换成功，我们在success的回调函数里就会得到一个json格式的对
象；转换失败就会触发error这个回调函数。如果我们明确地指定目标类型，就可以使用 data Type。dataType的可用
值：html｜xml｜json｜text｜script&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简单说就是告诉服务器需要返回什么数据类型&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、csrf 跨站请求伪造&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们之前用form表单POST提交时如果没有｛% csrf_token %｝客户端收不到数据会报错同样用ajax POST提交数据也有同样的错误那么准么解决呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、方法一&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$.ajaxSetup({
    data: {csrfmiddlewaretoken: &lt;/span&gt;'{{ csrf_token }}'&lt;span&gt; },
});

$.ajax({
   ... 
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;缺点：当js与html文件分离时，{{ csrf_token }} 无法被渲染失去作用，用方法一必须将js和html写在一起&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、方法二&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
{% csrf_token %&lt;span&gt;}

$.ajax({
    url:&lt;/span&gt;&quot;&quot;&lt;span&gt;,
    type:&lt;/span&gt;&quot;POST&quot;&lt;span&gt;,
    data:{
        csrfmiddlewaretoken:$(&lt;/span&gt;&quot;[name='csrfmiddlewaretoken']&quot;&lt;span&gt;).val(),  
    }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;缺点：html body标签中必须存在{% csrf_token %}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、方法三&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&amp;lt;script src=&quot;{% static 'js/jquery.cookie.js' %}&quot;&amp;gt;&amp;lt;/script&amp;gt; 需要下载对应文件&lt;/span&gt;
&amp;lt;script src=&quot;https://cdn.bootcss.com/jquery-cookie/1.4.1/jquery.cookie.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;
$.ajax({
    headers:{&lt;/span&gt;&quot;X-CSRFToken&quot;:$.cookie('csrftoken'&lt;span&gt;)},
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;缺点：基本通用哈哈哈&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、jQuery.serialize()&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;serialize()&lt;/code&gt;函数用于&lt;strong&gt;序列化一组表单元素，将表单内容编码为用于提交的字符串&lt;/strong&gt;。&lt;/span&gt;&lt;span&gt;&lt;code&gt;serialize()&lt;/code&gt;函数常用于将表单内容序列化，以便用于AJAX提交。&lt;/span&gt;&lt;span&gt;该函数主要根据&lt;strong&gt;用于提交&lt;/strong&gt;的&lt;strong&gt;有效&lt;/strong&gt;表单控件的name和value，将它们拼接为一个可直接用于表单提交的文本字符串，该字符串已经过标准的URL编码处理(字符集编码为UTF-8)。&lt;/span&gt;&lt;span&gt;该函数不会序列化不需要提交的表单控件，这和常规的表单提交行为是一致的。例如：不在&amp;lt;form&amp;gt;标签内的表单控件不会被提交、没有name属性的表单控件不会被提交、带有disabled属性的表单控件不会被提交、没有被选中的表单控件不会被提交。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;简单总结：就是说我们如果有很多input标签内容需要提交总不会全部写在data中罗列出来吧，这就用到&lt;code&gt;serialize()&lt;/code&gt;函数了可以帮我们一次性提交数据到客户端。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_3ed8b707-cac5-4057-b38f-cb097c0d8557&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3ed8b707-cac5-4057-b38f-cb097c0d8557&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3ed8b707-cac5-4057-b38f-cb097c0d8557&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;myForm&quot;&lt;/span&gt;&lt;span&gt; action&lt;/span&gt;&lt;span&gt;=&quot;http://www.365mini.com&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uid&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;hidden&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;张三&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;123456&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;grade&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;grade&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;一年级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;二年级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt; selected&lt;/span&gt;&lt;span&gt;=&quot;selected&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;三年级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;四年级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;五年级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;六年级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; checked&lt;/span&gt;&lt;span&gt;=&quot;checked&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;男
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;女
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hobby&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; checked&lt;/span&gt;&lt;span&gt;=&quot;checked&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;游泳
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hobby&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; checked&lt;/span&gt;&lt;span&gt;=&quot;checked&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;跑步
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hobby&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;羽毛球
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;btn&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;btn&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;点击&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;提交数据&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;对&amp;lt;form&amp;gt;元素进行序列化可以直接序列化其内部的所有表单元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;序列化所有：&lt;/span&gt;$(&quot;form&quot;).serialize()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
uid=1&lt;span&gt;&amp;amp;username&lt;/span&gt;=%E5%BC%A0%E4%B8%89&lt;span&gt;&amp;amp;password&lt;/span&gt;=123456&lt;span&gt;&amp;amp;grade&lt;/span&gt;=3&lt;span&gt;&amp;amp;sex&lt;/span&gt;=1&lt;span&gt;&amp;amp;hobby&lt;/span&gt;=1&lt;span&gt;&amp;amp;hobby&lt;/span&gt;&lt;span&gt;=2&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;部分序列化：$(&quot;:text, select, :checkbox&quot;).serialize()&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
username=%E5%BC%A0%E4%B8%89&lt;span&gt;&amp;amp;password&lt;/span&gt;=123456&lt;span&gt;&amp;amp;grade&lt;/span&gt;=3&lt;span&gt;&amp;amp;hobby&lt;/span&gt;=1&lt;span&gt;&amp;amp;hobby&lt;/span&gt;=2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;view视图函数如何取值呢？和以前的POST请求相同&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
request.POST.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)  //input中的name属性
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、上传文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、普通上传文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1）template&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;/upload/&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt; enctype&lt;/span&gt;&lt;span&gt;=&quot;multipart/form-data&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% csrf_token %}
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户名&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;头像&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;avatar&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;enctype属性不可缺少&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）view&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; upload(request):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; request.method==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, request.POST)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FILES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,request.FILES)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; FILES &amp;lt;MultiValueDict: {}&amp;gt;&lt;/span&gt;
&lt;span&gt;
        file_obj&lt;/span&gt;=request.FILES.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;avatar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(file_obj.name,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-----&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        with open(file_obj.name,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as f:
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; file_obj:
                f.write(i)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HttpResponse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;upload.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这是将上传的文件写入到本地file_obj的name方法可以取到文件名称&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、&lt;/span&gt;&lt;span&gt;Ajax(FormData)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;XMLHttpRequest Level 2添加了一个新的接口&lt;code&gt;FormData&lt;/code&gt;.利用&lt;code&gt;FormData对象&lt;/code&gt;,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的&lt;code&gt;send()&lt;/code&gt;方法来异步的提交这个&quot;表单&quot;.比起普通的ajax,使用&lt;code&gt;FormData&lt;/code&gt;的最大优点就是我们可以异步上传一个二进制文件.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1）template&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_935c10cd-e34b-49b7-bea1-10c106c1a5b0&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_935c10cd-e34b-49b7-bea1-10c106c1a5b0&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_935c10cd-e34b-49b7-bea1-10c106c1a5b0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;s1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;密码&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;头像&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;upload_avatar&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;Ajax_send&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;提交&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;login_error&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.js &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://cdn.bootcss.com/jquery-cookie/1.4.1/jquery.cookie.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; foo() {
        $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.login_error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).html(&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
    }
    $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.Ajax_send&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; formData&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; FormData();
        formData.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,$(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val());
        formData.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,$(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val());
        formData.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;avatar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,$(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#upload_avatar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].files[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]);
        $.ajax({
            url:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/get_ajax/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            type:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            headers:{&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;X-CSRFToken&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:$.cookie(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;csrftoken&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)},
            data:formData,
            contentType:&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            processData:&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            success:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; data&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;JSON.parse(data);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;data[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;flag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]){
                    $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.login_error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).html(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户名或者密码错误&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                    setTimeout(foo,&lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;)
                }
            }
        })
    })
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2）view&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_ajax(request):
    username&lt;/span&gt;=request.POST.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    password&lt;/span&gt;=request.POST.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FIFLE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,request.FILES)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,request.POST)
    response&lt;/span&gt;={&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;flag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:False}
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; username==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bjd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; password==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
        response[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;flag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]=&lt;span&gt;True
    &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; json
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HttpResponse(json.dumps(response))
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 14 Nov 2017 15:31:00 +0000</pubDate>
<dc:creator>布吉岛丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liluning/p/7834415.html</dc:identifier>
</item>
<item>
<title>redis源码分析之事务Transaction（上） - 凌风郎少</title>
<link>http://www.cnblogs.com/lfls/p/7835333.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lfls/p/7835333.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;这周学习了一下redis事务功能的实现原理，本来是想用一篇文章进行总结的，写完以后发现这块内容比较多，而且多个命令之间又互相依赖，放在一篇文章里一方面篇幅会比较大，另一方面文章组织结构会比较乱，不容易阅读。因此把事务这个模块整理成上下两篇文章进行总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://www.jianshu.com/p/acb97d620ad7&quot; class=&quot;uri&quot;&gt;http://www.jianshu.com/p/acb97d620ad7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章我们重点分析一下redis事务命令中的两个辅助命令：watch跟unwatch。&lt;/p&gt;
&lt;h3 id=&quot;一redis事务辅助命令简介&quot;&gt;一、redis事务辅助命令简介&lt;/h3&gt;
&lt;p&gt;依然从server.c文件的命令表中找到相应的命令以及它们对应的处理函数。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//watch，unwatch两个命令我们把它们叫做redis事务辅助命令
{&quot;watch&quot;,watchCommand,-2,&quot;sF&quot;,0,NULL,1,-1,1,0,0},
{&quot;unwatch&quot;,unwatchCommand,1,&quot;sF&quot;,0,NULL,0,0,0,0,0},&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;watch，用于客户端关注某个key，当这个key的值被修改时，整个事务就会执行失败（注：该命令需要在事务开启前使用）。&lt;/li&gt;
&lt;li&gt;unwatch，用于客户端取消已经watch的key。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;用法举例如下：&lt;br/&gt;clientA&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;127.0.0.1:6379&amp;gt; watch a
OK
127.0.0.1:6379&amp;gt; multi
OK
127.0.0.1:6379&amp;gt; set b b
QUEUED
//在执行前插入clientB的操作如下，事务就会执行失败
127.0.0.1:6379&amp;gt; exec
(nil)
127.0.0.1:6379&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;clientB&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;127.0.0.1:6379&amp;gt; set a aa
OK
127.0.0.1:6379&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;二redis事务辅助命令源码分析&quot;&gt;二、redis事务辅助命令源码分析&lt;/h3&gt;
&lt;p&gt;在看具体执行函数之前首先了解几个数据结构：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//每个客户端对象中有一个watched_keys链表来保存已经watch的key
typedef struct client {
    list *watched_keys;  
}
//上述链表中每个节点的数据结构
typedef struct watchedKey {
    //watch的key
    robj *key;
    //指向的DB，后面细说
    redisDb *db;
} watchedKey;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关于事务的几个命令所对应的函数都放在了multi.c文件中。&lt;br/&gt;一起看下watch命令对应处理函数的源码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void watchCommand(client *c) {
    int j;
    //如果客户端处于事务状态，则返回错误信息
    //由此可以看出，watch必须在事务开启前使用
    if (c-&amp;gt;flags &amp;amp; CLIENT_MULTI) {
        addReplyError(c,&quot;WATCH inside MULTI is not allowed&quot;);
        return;
    }
    //依次watch客户端的各个参数（这里说明watch命令可以一次watch多个key）
    //注：0表示命令本身，所以参数从1开始
    for (j = 1; j &amp;lt; c-&amp;gt;argc; j++)
        watchForKey(c,c-&amp;gt;argv[j]);
    //返回结果
    addReply(c,shared.ok);
}

//具体的watch操作，代码较长，慢慢分析
void watchForKey(client *c, robj *key) {
    list *clients = NULL;
    listIter li;
    listNode *ln;
    //上面已经提到了数据结构
    watchedKey *wk;

    //首先判断key是否已经被客户端watch
    //listRewind这个函数在发布订阅那篇文章里也有，就是把客户端的watched_keys赋值给li
    listRewind(c-&amp;gt;watched_keys,&amp;amp;li);
    while((ln = listNext(&amp;amp;li))) {
        wk = listNodeValue(ln);
        //这里一个wk节点中有db，key两个字段
        if (wk-&amp;gt;db == c-&amp;gt;db &amp;amp;&amp;amp; equalStringObjects(key,wk-&amp;gt;key))
            return; 
    }
    //开始watch指定key
    //整个watch操作保存了两套数据结构，一套是在db-&amp;gt;watched_keys中的字典结构，如下：
    clients = dictFetchValue(c-&amp;gt;db-&amp;gt;watched_keys,key);
    //如果是key第一次出现，则进行初始化
    if (!clients) {
        clients = listCreate();
        dictAdd(c-&amp;gt;db-&amp;gt;watched_keys,key,clients);
        incrRefCount(key);
    }
    //把当前客户端加到该key的watch链表中
    listAddNodeTail(clients,c);
    //另一套是在c-&amp;gt;watched_keys中的链表结构：如下
    wk = zmalloc(sizeof(*wk));
    //初始化各个字段
    wk-&amp;gt;key = key;
    wk-&amp;gt;db = c-&amp;gt;db;
    incrRefCount(key);
    //加入到链表最后
    listAddNodeTail(c-&amp;gt;watched_keys,wk);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;整个watch的数据结构比较复杂，我这里画了一张图方便理解：&lt;br/&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/11/14/15fbb11cdf6e1733?w=1015&amp;amp;h=690&amp;amp;f=png&amp;amp;s=53791&quot; alt=&quot;watch数据结构&quot;/&gt;&lt;br/&gt;简单解释一下上面的图，首先redis把每个客户端连接包装成了一个client对象，上图中db，watch_keys就是其中的两个字段（client对象里面还有很多其他字段，包括上篇文章中提到的pub/sub）。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;db字段指向给该client对象分配的储存空间，&lt;strong&gt;db对象&lt;/strong&gt;中也含有一个watched_keys字段，是字典类型（也就是哈希表），以想要watch的key做key，存储的链表则是所有watch该key的客户端。&lt;/li&gt;
&lt;li&gt;watch_keys字段则是一个链表类型，每个节点类型为watch_key，其中包含两个字段，key表示watch的key，&lt;strong&gt;db则指向了当前client对象的db字段&lt;/strong&gt;，如上图。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;看完watch命令的源码以后，再来看一下unwatch命令，如果搞明白了上面提到的两套数据结构，那么看unwatch的源码应该会比较容易，毕竟就是删除数据结构中对应的内容。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void unwatchCommand(client *c) {
    //取消watch所有key
    unwatchAllKeys(c);
    //修改客户端状态
    c-&amp;gt;flags &amp;amp;= (~CLIENT_DIRTY_CAS);
    addReply(c,shared.ok);
}

//取消watch的key
void unwatchAllKeys(client *c) {
    listIter li;
    listNode *ln;
    //如果客户端没有watch任何key，则直接返回
    if (listLength(c-&amp;gt;watched_keys) == 0) return;
    //注意这里操作的是链表字段
    listRewind(c-&amp;gt;watched_keys,&amp;amp;li);
    while((ln = listNext(&amp;amp;li))) {
        list *clients;
        watchedKey *wk;
        //遍历取出该客户端watch的key
        wk = listNodeValue(ln);
        //取出所有watch了该key的客户端，这里则是字典（即哈希表）
        clients = dictFetchValue(wk-&amp;gt;db-&amp;gt;watched_keys, wk-&amp;gt;key);
        //空指针判断
        serverAssertWithInfo(c,NULL,clients != NULL);
        //从watch列表中删除该客户端
        listDelNode(clients,listSearchKey(clients,c));
        //如果key只有一个当前客户端watch，则删除
        if (listLength(clients) == 0)
            dictDelete(wk-&amp;gt;db-&amp;gt;watched_keys, wk-&amp;gt;key);
        //从当前client的watch列表中删除该key
        listDelNode(c-&amp;gt;watched_keys,ln);
        //减少引用数
        decrRefCount(wk-&amp;gt;key);
        //释放内存
        zfree(wk);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后我们考虑一下watch机制的触发时机，现在我们已经把想要watch的key加入到了watch的数据结构中，可以想到触发watch的时机应该是修改key的内容时，通知到所有watch了该key的客户端。&lt;/p&gt;
&lt;p&gt;感兴趣的用户可以任意选一个修改命令跟踪一下源码，例如set命令，我们发现所有对key进行修改的命令最后都会调用touchWatchedKey()函数，&lt;strong&gt;而该函数源码就位于multi.c文件中&lt;/strong&gt;，该函数就是触发watch机制的关键函数，源码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//这里入参db就是客户端对象中的db，上文已经提到，不赘述
void touchWatchedKey(redisDb *db, robj *key) {
    list *clients;
    listIter li;
    listNode *ln;
    //保存watchkey的字典为空，则返回
    if (dictSize(db-&amp;gt;watched_keys) == 0) return;
    //注意这里操作的是字典（即哈希表）数据结构
    clients = dictFetchValue(db-&amp;gt;watched_keys, key);
    //如果没有客户端watch该key，则返回
    if (!clients) return;
    //把client赋值给li
    listRewind(clients,&amp;amp;li);
    //遍历watch了该key的客户端，修改他们的状态
    while((ln = listNext(&amp;amp;li))) {
        client *c = listNodeValue(ln);
        c-&amp;gt;flags |= CLIENT_DIRTY_CAS;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;跟我们猜测的一样，就是每当key的内容被修改时，则遍历所有watch了该key的客户端，设置相应的状态为CLIENT_DIRTY_CAS。&lt;/p&gt;
&lt;h3 id=&quot;三redis事务辅助命令总结&quot;&gt;三、redis事务辅助命令总结&lt;/h3&gt;
&lt;p&gt;上面就是redis事务命令中watch，unwatch的实现原理，其中最复杂的应该就是watch对应的那两套数据结构了，跟之前的pub/sub类似，都是使用链表+哈希表的结构存储，另外也是通过修改客户端的状态位FLAG来通知客户端。&lt;/p&gt;
&lt;p&gt;代码比较多，而且C++代码看上去会比较费劲，需要慢慢读，反复读。&lt;/p&gt;
</description>
<pubDate>Tue, 14 Nov 2017 15:13:00 +0000</pubDate>
<dc:creator>凌风郎少</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lfls/p/7835333.html</dc:identifier>
</item>
<item>
<title>基于HTML5的WebGL经典3D虚拟机房漫游动画 - xhload3d</title>
<link>http://www.cnblogs.com/xhload3d/p/7835276.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xhload3d/p/7835276.html</guid>
<description>&lt;p&gt;第一人称在 3D 中的用法要参考第一人称在射击游戏中的使用，&lt;a href=&quot;https://en.wikipedia.org/wiki/First-person_shooter&quot; target=&quot;_blank&quot;&gt;第一人称射击游戏（FPS&lt;/a&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/First-person_shooter&quot; target=&quot;_blank&quot;&gt;）&lt;/a&gt;是以第一人称视角为中心围绕枪和其他武器为基础的视频游戏类型 ; 也就是说，玩家通过主角的眼睛来体验动作。自从流派开始以来，先进的 3D 和伪 3D 图形已经对硬件发展提出了挑战，而多人游戏已经不可或缺。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171113175620075?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGhsb2FkM2Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Doom 的截图，这个流派的突破游戏之一，展示了第一人称射击游戏的典型视角&lt;/p&gt;

&lt;p&gt;现在博物馆或者公司也经常使用到 3D 动画做宣传片等等，3D 动画演绎最大的优势，便是在于内容与形式上给人的真实感受。它比平面作品更直观，比 2D 动画更真实，所以更能给观赏者以置身于广告环境当中的感受,大大增强广告的说服力。3D 技术的发展甚至挑战受众的分辨能力，使受众的判断游离于与虚拟和现实之间。&lt;br/&gt;而且 3D 特效的应用为创意提供了更加广阔的思维空间,并成为创意执行的可靠保证,并丰富了创意的形式和风格手段。根据广告主题的表现诉求,可以营造出梦幻般的神奇氛围来刺激打动受众,从而起到与受众沟通的目的。&lt;br/&gt;3D动画宣传片将 3D 动画、特效镜头、企业视频、照片、未来前景等内容通过后期合成、配音、解说形成一部直观、生动、喜闻乐见的高品位的企业广告宣传片，让社会不同层面的人士对企业产生正面的、积极的、良好的印象，从而建立对企业的好感与信任，并信赖该企业的产品或服务。&lt;/p&gt;
&lt;p&gt;现在 3D 发展地如此迅速也要感谢人类对于“现实”的追求，所以学好用好 3D 是未来成功必不可少的一部分。&lt;/p&gt;
&lt;p&gt;本文例子的思路是进入一个机房参观，打开门的动作是再生动不过了， 再加上适当地转弯，基本上完全模拟了人在机房中参观的效果。还有一个好处就是，如果要演示给领导看而又不用操作，这种炫酷的效果领导一定会很满意！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hightopo.com/demo/room-walkthrough/index.html&quot; target=&quot;_blank&quot;&gt;http://www.hightopo.com/demo/room-walkthrough/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171113175050600?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGhsb2FkM2Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;界面上的“reset”和“start”两个按钮是直接加在 body 体中的 button，并在这两个按钮上添加点击事件：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;html&quot;&gt;
&amp;lt;div class=&quot;button&quot; style=&quot;right: 50px;background-image: url(run.png);&quot; onclick=&quot;startAnim();&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&quot;button&quot; style=&quot;right: 100px;background-image: url(reset.png);&quot; onclick=&quot;reset();&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;整个场景由 HT 封装的 3D 组件搭建形成的，构造这么大的场景是需要一定量的代码的，为了简化，我把场景单独拿出来，并用 HT 封装的 ht.JSONSerializer 类将场景序列化为 json，代码中只引入了生成后的 json 文件，为了让大家更明确，我这边做个示例，假设已经搭建好 3D 场景了：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;javascript&quot;&gt;
dm = new ht.DataModel();
g3d = new ht.graph3d.Graph3dView(dm);
//.......构建好场景
dm.serialize();//可以填入number参数，作为空格缩进值
&lt;/pre&gt;
&lt;p&gt;既然我们已经搭建好环境，转成了 json 文件，代码中不好控制，这种情况下我们会将 DataModel 数据模型再反序列化，这个函数的功能就是将 json 格式转成对象，并将反序列化的对象传入到 DataModel 数据模型中，详情请参考 &lt;a href=&quot;http://hightopo.com/guide/guide/core/serialization/ht-serialization-guide.html&quot;&gt;HT for Web 序列化手册&lt;/a&gt;：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;javascript&quot;&gt;
 var g3d = window.g3d = new ht.graph3d.Graph3dView(),
    dataModel = g3d.dm(),
    view = g3d.getView(),
    path = null;
g3d.setMovableFunc(function(data) {
    return false;
});
g3d.setVisibleFunc(function(data) {
    if (data.getName() === &quot;path&quot;) {
        return false;
    }
    return true;
});
g3d.setEye([523, 5600, 8165]);
g3d.setFar(60000);
dataModel.deserialize(json);
&lt;/pre&gt;
&lt;p&gt;我们目前需要操作场景中的“门”、以及我们将要走的路线“path”，遍历 DataModel 数据模型，获取这两个数据：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;javascript&quot;&gt;
for (var i = 0; i &amp;lt; dataModel.size(); i++) {
    var data = dataModel.getDatas().get(i);
    if (data.getName() === &quot;门&quot;) {//json中设置的名称
       window.door = data;
    }
    if (data.getName() === &quot;path&quot;) {
        path = data;
    }
    if (window.door &amp;amp;&amp;amp; path) {//获取到door 和 path 的data之后就跳出循环
        break;
    }
}
&lt;/pre&gt;
&lt;p&gt;这个例子中简单来说就只有四个动作，“重置”回到原点、“开始动作”、“向前移动”，“停止”。点击“开始”按钮，在“开始动作”中我们只做了一个动作，“开门”动作，动作结束之后调用“forward”函数向前移动：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;javascript&quot;&gt;
function startAnim() {
    if (window.isAnimationRunning) {
        return;
    }
    reset();
    window.isAnimationRunning = true;//动画是否正在进行
    ht.Default.startAnim({
        frames: 30, // 动画帧数，默认采用`ht.Default.animFrames`。
        interval: 20, // 动画帧间隔，默认采用`ht.Default.animInterval`。   
        finishFunc: function() {// 动画结束后调用的函数。
            forward();
        }, 
        action: function(t){ // action函数必须提供，实现动画过程中的属性变化。
            door.setRotationY(-120 * Math.PI / 180 * t);
        }
    });
}
&lt;/pre&gt;
&lt;p&gt;这边的“reset”函数就是“重置”回到原点的功能，我们通过这个函数将所有变化过的都恢复初始的位置，包括“门”的位置：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;javascript&quot;&gt;
function reset() {
    if (window.isAnimationRunning) {
        return;
    }
    g3d.setCenter([0,0,0]);
    g3d.setEye([523, 5600, 8165]);
    window.forwardIndex = 0;
    door.setRotationY(0);
}
&lt;/pre&gt;

&lt;p&gt;要“移动”，肯定需要走路的“路径”，也就是我们刚刚获取到的“path”，通过 window.points = path.getPoints()._as; 获取“path”中的所有元素，初始化  window.forwardIndex = 0; 通过控制“path”中前后两点来设置 3D 场景中的 Eye 和 Center，这样就能营造一个我们是第一人的效果：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;javascript&quot;&gt;
var point1 = points[forwardIndex],
     point2 = points[forwardIndex + 1];
var distanceX = (point2.x - point1.x),
     distanceY = (point2.y - point1.y),
     distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY)-200;//两点之间的距离通过三角形勾股定理计算 怕碰墙所以-200
g3d.setEye([point1.x, 1600, point1.y]);//眼睛
g3d.setCenter([point2.x, 1600, point2.y]);//我
&lt;/pre&gt;
&lt;p&gt;HT 中 3D 组件有一个 walk(step, anim, firstPersonMode) 方法，该函数同时改变eye和center的位置，也就是eye和center在两点建立的矢量方向上同时移动相同的偏移量。step为偏移的矢量长度值。firstPersonMode参数为空时则默认采用Graph3dView#isFirstPersonMode()当前值， 如果为第一人称模式调用walk操作，该函数会考虑Graph3dView#getBoundaries()边界限制。&lt;/p&gt;


&lt;pre name=&quot;code&quot; class=&quot;javascript&quot;&gt;
g3d.walk(distance, {
    frames: 50,
    interval: 30,
    easing: function(t) {return t; },
    finishFunc: function() {
        forwardIndex += 1;
        if (points.length - 2 &amp;gt; forwardIndex) {//points.length = 5
            g3d.setCenter([point2.x, 1600, point2.y]);//把结束点变成起始点
            g3d.rotate(Math.PI / 2, 0, {
                frames: 30,
                interval: 30,
                easing: function(t) {return t;},
                finishFunc:function() { forward();}
            });
        } else {
            var lastPoint = points[points.length  - 1];//json 中path的points 的最后一个点
            g3d.setCenter([lastPoint.x, 1400, lastPoint.y]);
            g3d.rotate(-Math.PI / 2, 0, {
                frames: 30,
                interval: 30,
                finishFunc: function() {
                    window.isAnimationRunning = false;
                }
            });
        }
    }
});
&lt;/pre&gt;
&lt;p&gt;不管“path”的点有多少个，这个判断语句还是能运作，只在最后一个点是跳出 finishFunc 动画结束后调用的函数，并将 window.isAnimationRunning 值设为 false 停止 startAnim 函数。如果不是最后一个点，用户“旋转”之后，回调 forward 函数。至此，全部代码解释完毕，很短的代码量，却做出了这么大的工程！&lt;/p&gt;

</description>
<pubDate>Tue, 14 Nov 2017 14:59:00 +0000</pubDate>
<dc:creator>xhload3d</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xhload3d/p/7835276.html</dc:identifier>
</item>
<item>
<title>在ASP.NET Core Web API中为RESTful服务增加对HAL的支持 - dax.net</title>
<link>http://www.cnblogs.com/daxnet/p/7835261.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/daxnet/p/7835261.html</guid>
<description>&lt;p&gt;HAL（Hypertext Application Language，超文本应用语言）是一种RESTful API的数据格式风格，为RESTful API的设计提供了接口规范，同时也降低了客户端与服务端接口的耦合度。很多当今流行的RESTful API开发框架，包括Spring REST，也都默认支持HAL规范，当RESTful API被调用后，服务端就会返回ContentType为application/hal+json的JSON内容，例如：&lt;/p&gt;
&lt;pre class=&quot;brush: text;&quot;&gt;
{
  &quot;_links&quot;: {
    &quot;self&quot;: {
      &quot;href&quot;: &quot;http://example.com/api/book/hal-cookbook&quot;
    }
  },
  &quot;_embedded&quot;: {
    &quot;author&quot;: {
      &quot;_links&quot;: 
        &quot;self&quot;: {
          &quot;href&quot;: &quot;http://author-example.com&quot;
        }
      }, 
      &quot;id&quot;: &quot;shahadat&quot;,
      &quot;name&quot;: &quot;Shahadat Hossain Khan&quot;
    }
  },
  &quot;id&quot;: &quot;hal-cookbook&quot;,
  &quot;name&quot;: &quot;HAL Cookbook&quot;
}
&lt;/pre&gt;
&lt;p&gt;相对于仅返回一个id和一个name的结果而言，这样的JSON Response包含了更为丰富的信息，比如：当前请求的API地址、HAL Cookbook这本书的作者信息，以及访问作者信息的超文本链接。那么客户端在获取到这个服务端的响应后，就能很方便地将这些信息绑定在界面上，而无需通过多个API的调用来查找关联信息。另一方面，这种JSON Response中包含的超文本链接也可以是动态的，比如分页导航链接，这样客户端实现分页功能将变得非常方便。本文着重介绍在ASP.NET Core Web API中，如何为自己设计的RESTful API增加对HAL的支持。&lt;/p&gt;

&lt;p&gt;在ASP.NET Core Web API中为RESTful服务增加对HAL的支持，是通过&lt;a href=&quot;https://github.com/daxnet/apworks-core&quot; target=&quot;_blank&quot;&gt;Apworks框架&lt;/a&gt;以及&lt;a href=&quot;https://github.com/daxnet/hal&quot; target=&quot;_blank&quot;&gt;HAL框架&lt;/a&gt;来完成的。这两个框架都是我自己设计开发的开源框架，前者基于Apache 2.0开源，后者基于MIT开源，因此完全可以用于商业系统开发。HAL项目为超文本应用语言（Hypertext Application Language）提供了基本的数据模型和处理逻辑，它对JSON的支持基于大名鼎鼎的Newtonsoft.Json，因此性能方面是可以保证的。简便快捷的流畅接口（Fluent Interface API）编程方式，使得构建一个完整合理的HAL对象模型变得非常容易。HAL项目的设计使用了一些对象结构化模式，有兴趣的朋友可以到Github项目主页（&lt;a title=&quot;https://github.com/daxnet/hal&quot; href=&quot;https://github.com/daxnet/hal&quot;&gt;https://github.com/daxnet/hal&lt;/a&gt;）了解一下。&lt;/p&gt;
&lt;p&gt;至于Apworks框架，它的主要功能并不是仅仅为了向ASP.NET Core Web API提供HAL的支持，它更重要的是一套基于.NET Core的微服务快速开发框架，不仅提供了面向领域驱动（DDD）的基本构造元素（聚合、实体、仓储、工厂等），而且整合了消息队列、消息派发及订阅、消息处理、查询服务、事件存储等微服务架构功能模块，并基于MongoDB、Entity Framework、RabbitMQ、PostgreSQL、SQL Server等基础服务作出了实现。目前整个框架还在开发和完善阶段，读者有兴趣也可以上&lt;a href=&quot;https://github.com/daxnet/apworks-examples&quot; target=&quot;_blank&quot;&gt;Apworks Examples&lt;/a&gt;案例项目查看Apworks框架的案例代码，案例代码也在同步更新之中。等所有的案例代码开发完成后，我会对Apworks框架发布一个相对稳定的版本。&lt;/p&gt;
&lt;p&gt;值得一提的是，Apworks框架中的Apworks.Integration.AspNetCore Package提供了对ASP.NET Core Web API的开发扩展，对HAL的支持也是该Package的一个部分。OK，Apworks框架和HAL框架暂时介绍这些，它们不是本文重点。接下来，让我们看看，如何快速地在ASP.NET Core Web API中实现HAL的支持。&lt;/p&gt;

&lt;p&gt;事实上，在《&lt;a href=&quot;http://www.cnblogs.com/daxnet/p/6701119.html&quot; target=&quot;_blank&quot;&gt;在ASP.NET Core中使用Apworks开发数据服务：对HAL的支持&lt;/a&gt;》一文中，我已经介绍了如何在Apworks快速搭建数据服务的同时，提供HAL的JSON数据格式。当时的案例是需要满足数据服务开发模式的，比如需要注入仓储实例，并且Controller需要默认提供GET、POST、PUT、DELETE的操作。这对于仅需要实现某些特定功能的通用Web API Controller而言，又显得太重了。所以，我们还是从最简单的案例开始吧。&lt;/p&gt;
&lt;ol readability=&quot;1.9292149292149&quot;&gt;&lt;li&gt;打开Visual Studio 2017，新建一个ASP.NET Core Web API，.NET框架建议选择.NET Core/ASP.NET Core 2.0，项目模板选择Web API，此时会生成一个默认的ASP.NET Core 2.0 Web API应用程序。可以暂且不启用Docker支持&lt;/li&gt;
&lt;li&gt;直接启动这个ASP.NET Core Web API应用程序，将默认在浏览器中输出value1和value2两个值：&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225607843-2120327736.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225608062-872492637.png&quot; alt=&quot;image&quot; width=&quot;377&quot; height=&quot;132&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;根据《&lt;a href=&quot;http://www.cnblogs.com/daxnet/p/6661369.html&quot; target=&quot;_blank&quot;&gt;在ASP.NET Core中使用Apworks快速开发数据服务&lt;/a&gt;》一文中的介绍，将Apworks和Apworks.Integration.AspNetCore两个Package添加到项目中。注意，版本必须大于等于0.1.138（目前是开发版本）&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225608234-1549801793.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225608406-1372242229.png&quot; alt=&quot;image&quot; width=&quot;532&quot; height=&quot;411&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;添加成功后，ASP.NET Core Web API应用程序的NuGet依赖项类似如下：&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225608577-200459973.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225608718-1228730855.png&quot; alt=&quot;image&quot; width=&quot;421&quot; height=&quot;388&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;双击打开Startup.cs文件，在ConfigureServices方法中，加入以下代码：&lt;pre class=&quot;brush: csharp;&quot;&gt;
public void ConfigureServices(IServiceCollection services)
{
    services.AddMvc();

    var halBuildConfiguration = new HalBuildConfiguration(new HalBuildConfigurationItem[]
    {
        new HalBuildConfigurationItem(&quot;Values.Get&quot;, context =&amp;gt;
            new ResourceBuilder().WithState(null)
                .AddSelfLink()
                .WithLinkItem(context.HttpContext.Request.GetDisplayUrl())
                .AddEmbedded(&quot;values&quot;)
                .Resource(new ResourceBuilder().WithState(context.State)))
    });

    services.AddApworks()
        .WithHalSupport(halBuildConfiguration)
        .Configure();
}
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;双击打开ValuesController.cs文件，在Get()方法上，加上SupportsHal特性：&lt;pre class=&quot;brush: csharp; highlight: [2];&quot;&gt;
[HttpGet]
[SupportsHal]
public IEnumerable&amp;lt;string&amp;gt; Get()
{
    return new string[] { &quot;value1&quot;, &quot;value2&quot; };
}
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;再次运行，可以看到，返回结果已经是HAL的JSON格式，Content-Type为application/hal+json：&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225608906-1102072100.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225609124-2033225005.png&quot; alt=&quot;image&quot; width=&quot;913&quot; height=&quot;559&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;上面是最简单的案例，我们就只用了几行代码，花了10分钟不到，就把ASP.NET Core Web API的默认项目打造成了支持HAL JSON格式的RESTful API项目。大概介绍几个要点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先需要创建一个HalBuildConfiguration对象，这个对象可以容纳一个或者多个HalBuildConfigurationItem对象，每个HalBuildConfigurationItem对象包含了“&lt;em&gt;需要对哪个Controller的哪个Action的返回值进行HAL格式处理&lt;/em&gt;”以及“&lt;em&gt;如何处理API的返回结果并包装成HAL JSON数据格式&lt;/em&gt;”这两方面的信息&lt;/li&gt;
&lt;li&gt;构造HalBuildConfigurationItem的第一个参数，用以指定API Controller下的Action的方法签名，以便能够确定HAL处理的API。大致规则如下，但事实上要更加灵活：
&lt;ol&gt;&lt;li&gt;*.Get：表示匹配所有Controller下，参数个数为0的Get方法&lt;/li&gt;
&lt;li&gt;Values.Get：表示匹配Values Controller下，参数个数为0的Get方法&lt;/li&gt;
&lt;li&gt;Values.Get(int,string)：表示匹配Values Controller下，参数个数为2，类型分别为int和string的Get方法&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;构造HalBuildConfigurationItem的第二个参数，用以指定HAL JSON的产生方式。关于HAL ResourceBuilder的相关详细文档，请参考&lt;a title=&quot;https://github.com/daxnet/hal&quot; href=&quot;https://github.com/daxnet/hal&quot;&gt;https://github.com/daxnet/hal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在相应的Controller Action上使用SupportsHal特性，标注当前方法需要产生HAL JSON的输出。SupportsHalAttribute还可以直接使用在Controller级别，用以标注当前Controller下，所有的Action都能够支持HAL JSON的输出&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;过程非常简单，而且非常灵活，开发人员可以完全自定义所产生的HAL JSON的格式（比如在这个例子中，我们向RESTful API的结果输出了请求的URL路径（也就是上图中_links.self节点））。接下来，让我们看一个稍微复杂一点的应用场景，看看如何通过HAL JSON的RESTful API快速实现服务端分页。&lt;/p&gt;

&lt;p&gt;分页，是Web Service开发中不可避免的常见问题。来自服务端的数据量往往很大，即使可以通过查询条件来过滤掉很大一部分数据，用户数据库中的数据量仍然是无法估计的。采用服务端分页，不仅可以减少网络上的数据传输，提高服务响应度，而且还可以降低客户端数据处理的压力，为用户提供较好的使用体验。Apworks.Integration.AspNetCore程序包通过向ASP.NET Core Web API提供HAL的支持，开发人员可以非常方便地实现专业化的服务端分页功能。接下来，就让我们一起看一个简单的案例：将26个英文字母进行分页并根据用户的输入条件返回相应页的数据。&lt;/p&gt;
&lt;p&gt;我们仍旧使用上面的Web API项目：&lt;/p&gt;
&lt;ol readability=&quot;20.487492373398&quot;&gt;&lt;li readability=&quot;32&quot;&gt;将ValuesController中的Get()方法改成如下代码：&lt;pre class=&quot;brush: csharp; highlight: [2];&quot;&gt;
[HttpGet]
[SupportsHal]
public IActionResult Get(int page = 1, int size = 5)
{
    var values = new[] { &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;,
        &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;,
        &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;,
        &quot;p&quot;,&quot;q&quot;, &quot;r&quot;,&quot;s&quot;,&quot;t&quot;,
        &quot;u&quot;,&quot;v&quot;,&quot;w&quot;,&quot;x&quot;,&quot;y&quot;,
        &quot;z&quot; };
    var skip = (page - 1) * size;
    var take = size;
    var records = values.Length;
    var pages = (records + size - 1) / size;
    return Ok(new PagedResult(values.Skip(skip).Take(take), page, size, records, pages));
}
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;修改Startup.cs文件，将ConfigureServices方法改为如下代码，注意HalBuildConfigurationItem的第一个参数，已经变成Values.Get(int, int)，表示匹配ValuesController中含有两个int类型参数的Get方法：&lt;pre class=&quot;brush: csharp; highlight: [2];&quot;&gt;
public void ConfigureServices(IServiceCollection services)
{
    services.AddMvc();

    services.AddApworks()
        .WithHalSupport(new PagedResultHalBuildConfiguration(&quot;Values.Get(int, int)&quot;))
        .Configure();
}
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;Ctrl+F5直接运行Web API应用程序，在浏览器中输出如下：&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225609281-1304539951.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225609452-531460160.png&quot; alt=&quot;image&quot; width=&quot;510&quot; height=&quot;564&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;可以看到，英文字母已经通过分页形式输出，在_links节点下包含了self、first、last、next的链接，与此同时，服务端还返回了当前页码、每页数、总记录条数以及总页数的信息。&lt;/p&gt;&lt;/li&gt;
&lt;li readability=&quot;1.8095238095238&quot;&gt;在浏览器中，输入&lt;a href=&quot;http://localhost:52566/api/values?page=2&quot;&gt;http://localhost:52566/api/values?page=2&lt;/a&gt;，产生的结果如下：&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225609609-698212978.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225609765-90809357.png&quot; alt=&quot;image&quot; width=&quot;510&quot; height=&quot;589&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;此时已经显示了第二页的信息，并且分页的链接已经相应地更新了。如果你的浏览器安装了JSON格式数据查看插件，那么很有可能JSON中的超文本链接已经可以直接点击了，于是，你就可以在浏览器中直接点击这些链接来实现各页面的跳转，非常方便。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;由此可见，基于Apworks在ASP.NET Core Web API中为RESTful服务增加对HAL的支持还是非常方便的。在上面分页的案例中，分页查询是通过在URL中增加名为page的Query String来实现了，page这个Query String就对应Get方法中的第一个page参数。那么，如果我希望使用其它的Query String来作为分页的页码参数，又该如何做呢？&lt;/p&gt;
&lt;h2&gt;自定义分页参数&lt;/h2&gt;
&lt;p&gt;自定义分页参数方法非常简单，只需要在参数定义前加上PageNumberAttribute就行了。比如下面的Get方法：&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; highlight: [2];&quot;&gt;
[HttpGet]
[SupportsHal]
public IActionResult Get([PageNumber] int p = 1, int size = 5)
{
    var values = new[] { &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;,
        &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;,
        &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;,
        &quot;p&quot;,&quot;q&quot;, &quot;r&quot;,&quot;s&quot;,&quot;t&quot;,
        &quot;u&quot;,&quot;v&quot;,&quot;w&quot;,&quot;x&quot;,&quot;y&quot;,
        &quot;z&quot; };
    var skip = (p - 1) * size;
    var take = size;
    var records = values.Length;
    var pages = (records + size - 1) / size;
    return Ok(new PagedResult(values.Skip(skip).Take(take), p, size, records, pages));
}
&lt;/pre&gt;
&lt;p&gt;我们通过PageNumberAttribute来指定参数p为分页参数，那么，在访问特定页的数据时，就可以使用&lt;a href=&quot;http://localhost:52566/api/values?p=2&quot;&gt;http://localhost:52566/api/values?p=2&lt;/a&gt;这样的方式：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225609921-2097861622.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225610093-420543814.png&quot; alt=&quot;image&quot; width=&quot;510&quot; height=&quot;589&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;客户端范例&lt;/h2&gt;
&lt;p&gt;既然我们已经有了一个服务端分页的RESTful API，我们不妨快速搭建一个客户端App，来试用一下这个支持HAL JSON格式的服务端分页API是否好用。为此，我建立了一个客户端项目，开发采用Angular 4和TypeScript，主要代码如下：&lt;/p&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;
// LettersResponse.ts
export class LettersResponse {
    public first: string;
    public prev: string;
    public next: string;
    public last: string;
    public values: string[];
}

// my-letters-service.service.ts
@Injectable()
export class MyLettersServiceService {

  constructor(private http: Http) { }

  getLetters(url: string): Promise&amp;lt;LettersResponse&amp;gt; {
    return this.http.get(url)
      .toPromise()
      .then(response =&amp;gt; {
        const json = response.json();
        return {
          first: json._links.first ? json._links.first.href : null,
          last: json._links.last ? json._links.last.href : null,
          prev: json._links.prev ? json._links.prev.href : null,
          next: json._links.next ? json._links.next.href : null,
          values: json._embedded.values
        };
      });
  }
}

// app.component.ts
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  providers: [MyLettersServiceService]
})
export class AppComponent implements OnInit {

  response: LettersResponse;

  constructor(private service: MyLettersServiceService) {
  }

  ngOnInit(): void {
    this.service.getLetters(environment.serviceUrl)
      .then(res =&amp;gt; this.response = res);
  }

  onLinkClicked(url: string): void {
    console.log(url);
    this.service.getLetters(url)
    .then(res =&amp;gt; this.response = res);
  }
}

// app.component.html
&amp;lt;div *ngIf=&quot;response&quot;&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li *ngFor=&quot;let c of response.values&quot;&amp;gt;
      &amp;lt;h2&amp;gt;{{c}}&amp;lt;/h2&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;button (click)=&quot;onLinkClicked(response.first)&quot; [disabled]=&quot;!response.first&quot;&amp;gt;First Page&amp;lt;/button&amp;gt;
  &amp;lt;button (click)=&quot;onLinkClicked(response.prev)&quot; [disabled]=&quot;!response.prev&quot;&amp;gt;Previous Page&amp;lt;/button&amp;gt;
  &amp;lt;button (click)=&quot;onLinkClicked(response.next)&quot; [disabled]=&quot;!response.next&quot;&amp;gt;Next Page&amp;lt;/button&amp;gt;
  &amp;lt;button (click)=&quot;onLinkClicked(response.last)&quot; [disabled]=&quot;!response.last&quot;&amp;gt;Last Page&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;在命令行使用NgCLI启动客户端程序，然后访问&lt;a href=&quot;http://localhost:4200&quot;&gt;http://localhost:4200&lt;/a&gt;，得到的效果如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225610296-1037731190.gif&quot;&gt;&lt;img title=&quot;service&quot; src=&quot;http://images2017.cnblogs.com/blog/119825/201711/119825-20171114225610577-763505837.gif&quot; alt=&quot;service&quot; width=&quot;518&quot; height=&quot;589&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文介绍了如何使用Apworks对于ASP.NET Core的扩展，来实现为RESTful API提供HAL支持的功能。文章使用了两个案例，展示了ASP.NET Core Web API对HAL的支持是非常简单方便的，而且自定义功能很强大，第二个服务端分页案例更是引入了Angular和TypeScript，通过实现一个简单的客户端页面来更详细地展示具有HAL特性的RESTful API的便捷之处。正如上文所说，对HAL的支持仅仅是Apworks框架中对ASP.NET Core进行扩展的一个部分，Apworks框架更多地专注于为微服务的快速开发提供解决方案。在今后的文章中，我会更多地介绍Apworks对微服务支持的相关内容。&lt;/p&gt;
</description>
<pubDate>Tue, 14 Nov 2017 14:56:00 +0000</pubDate>
<dc:creator>dax.net</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/daxnet/p/7835261.html</dc:identifier>
</item>
<item>
<title>[深度学习]实现一个博弈型的AI，从五子棋开始（2） - xerwin</title>
<link>http://www.cnblogs.com/erwin/p/7835191.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/erwin/p/7835191.html</guid>
<description>&lt;p&gt;嗯，今天接着来搞五子棋，从五子棋开始给小伙伴们聊AI。&lt;/p&gt;

&lt;p&gt;昨天晚上我们已经实现了一个五子棋的逻辑部分，其实讲道理，有个规则在，可以开始搞AI了，但是考虑到不够直观，我们还是顺带先把五子棋的UI也先搞出来。所以今天咱们搞UI。&lt;/p&gt;

&lt;p&gt;逻辑部分在这里：&lt;a href=&quot;http://www.cnblogs.com/erwin/p/7828956.html&quot; target=&quot;_blank&quot;&gt;[深度学习]实现一个博弈型的AI，从五子棋开始（1）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;小伙伴：啥？再次省去吐槽一万字，说好的讲深度学习在哪儿，说好的强化学习在哪儿，今天又是五子棋……&lt;/p&gt;
&lt;p&gt;我：是五子棋，AI不能缺场景啊，没有场景谈AI就是空谈，是得先有个棋啊。再说了，虽说之前搞了个逻辑，至少搞个界面出来测一下嘛，万一场景的逻辑都没对，还AI个锤子！&lt;/p&gt;
&lt;p&gt;老罗：又关我什么事？&lt;/p&gt;

&lt;p&gt;好了，不扯了，回正题，我们一开始设计就是逻辑和UI分离，上一篇我们实现了逻辑部分，今天来实现UI部分，给咱的五子棋搞个UI。&lt;/p&gt;

&lt;p&gt;（2）五子棋下棋UI的实现&lt;/p&gt;
&lt;p&gt;Python做五子棋UI的话，咱们这里就用 PyGame 来搞，当然也有别的库，说老实话Python做UI我真没搞过多少，PyGame 的基础用法和各种知识我就不展开了，毕竟这不是重点，有兴趣的小伙伴可以自行Google，我也是边学边用呢，哈哈！&lt;/p&gt;

&lt;p&gt;既然是做UI，得有素材，我在网上找了一个棋盘：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17518/201711/17518-20171114210832952-1927177064.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;以及黑白两颗棋子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17518/201711/17518-20171114210907343-344724676.png&quot; alt=&quot;&quot;/&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/17518/201711/17518-20171114210919499-261841834.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;PS：为了UI上面好看，棋子因为是圆形的，最好是处理成PNG格式，带Alpha通道，外面透明。另外这几张图不知道上传了会不会被压缩成别的格式，我打了个包放在文章末尾了。&lt;/p&gt;

&lt;p&gt;在咱们之前的工程里建个目录“UI”，棋盘取名 chessboard.jpg 放在目录下，两颗棋子分别取名 piece_black.png、piece_white.png 也放到目录下。&lt;/p&gt;

&lt;p&gt;看看属性，棋盘是540*540像素的，棋子是32*32像素，数字记下来，然后咱们找的这个棋盘是有边缘的，量一下，边缘离第一根线大约是22像素。要做render，得用到这些数字。&lt;/p&gt;

&lt;p&gt;横竖各15根线这个不用说，15根线中间有14个格子，所以线和线的距离是总宽度减去两个边缘再除以格子数： (540 - 22 * 2) / 14 貌似除不尽，那就先这样子。&lt;/p&gt;

&lt;p&gt;好了，建一个文件 render.py ，咱们先把刚刚那些数字放进去，顺便该import的也import了，比如pygame、比如咱们昨天的定义和昨天的五棋子逻辑：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;coding:utf-8&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pygame
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; pygame.locals &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt;from&lt;/span&gt; consts &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt;from&lt;/span&gt; gobang &lt;span&gt;import&lt;/span&gt;&lt;span&gt; GoBang

&lt;/span&gt;&lt;span&gt;#IMAGE_PATH&lt;/span&gt;&lt;span&gt; = '/Users/phantom/Projects/AI/gobang/UI/'&lt;/span&gt;
IMAGE_PATH = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;UI/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

WIDTH &lt;/span&gt;= 540&lt;span&gt;
HEIGHT &lt;/span&gt;= 540&lt;span&gt;
MARGIN &lt;/span&gt;= 22&lt;span&gt;
GRID &lt;/span&gt;= (WIDTH - 2 * MARGIN) / (N - 1&lt;span&gt;)
PIECE &lt;/span&gt;= 32
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后我们定义一个新的类，GameRender，render初始化的时候我们绑定一个逻辑类，然后初始化pygame，把窗体大小设置一下，该加载的资源先加载了，代码比较简单，没有什么为什么，pygame就是这么用的，pygame有兴趣的小伙伴自己Google。&lt;/p&gt;

&lt;p&gt;render我们仍然考虑定义了一个current表示当前步，黑棋先下，所以current定义成黑色。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GameRender(object):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, gobang):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 绑定逻辑类&lt;/span&gt;
        self.&lt;span&gt;__gobang&lt;/span&gt; =&lt;span&gt; gobang
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 黑棋开局&lt;/span&gt;
        self.&lt;span&gt;__currentPieceState&lt;/span&gt; =&lt;span&gt; ChessboardState.BLACK

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化 pygame&lt;/span&gt;
&lt;span&gt;        pygame.init()
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; pygame.display.set_mode((width, height), flags, depth) &lt;/span&gt;
        self.&lt;span&gt;__screen&lt;/span&gt; = pygame.display.set_mode((WIDTH, HEIGHT), 0, 32&lt;span&gt;)
        pygame.display.set_caption(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;五子棋AI&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; UI 资源&lt;/span&gt;
        self.&lt;span&gt;__ui_chessboard&lt;/span&gt; = pygame.image.load(IMAGE_PATH + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;chessboard.jpg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).convert()
        self.&lt;/span&gt;&lt;span&gt;__ui_piece_black&lt;/span&gt; = pygame.image.load(IMAGE_PATH + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;piece_black.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).convert_alpha()
        self.&lt;/span&gt;&lt;span&gt;__ui_piece_white&lt;/span&gt; = pygame.image.load(IMAGE_PATH + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;piece_white.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).convert_alpha()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;render类嘛，各种draw了，对不对，确实是。不过这里有一个问题。&lt;/p&gt;

&lt;p&gt;之前的逻辑类里我们定义了一个二维数组chessMap还记得吗？看看逻辑类GoBang的定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GoBang(object):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
        self.&lt;/span&gt;&lt;span&gt;__chessMap&lt;/span&gt; = [[ChessboardState.EMPTY &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; range(N)] &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(N)]
        self.&lt;/span&gt;&lt;span&gt;__currentI&lt;/span&gt; = -1&lt;span&gt;
        self.&lt;/span&gt;&lt;span&gt;__currentJ&lt;/span&gt; = -1&lt;span&gt;
        self.&lt;/span&gt;&lt;span&gt;__currentState&lt;/span&gt; = ChessboardState.EMPTY
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我们先思考一个问题，chessMap里的坐标，和咱们棋盘的坐标怎么对应呢，chessMap里i，j就是0到14，0到14；咱们棋盘上，render的时候，那可是按像素来的啊，棋盘可是0到540像素呢，严格的说，是540减去两个边缘，22到518像素，得先对应吧。好，做个坐标变换，把棋子下标 i，j 变成像素 x，y。从边缘开始计算，每相邻一个棋子，加一个格子的大小GRID，那如果我们的棋子要摆上去的话，要摆到棋子中间，所以 x，y 分别再减去半个棋子的大小，代码就2行，比较清晰了：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; coordinate_transform_map2pixel(self, i, j):    
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从 chessMap 里的逻辑坐标到 UI 上的绘制坐标的转换&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; MARGIN + j * GRID - PIECE / 2, MARGIN + i * GRID - PIECE / 2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;好，这下我们可以从逻辑类里读状态出来绘制了，再考虑一下，坐标变换嘛，还需不需要反过来变。是，确实需要，下棋落子的时候，实际是在UI上给得到 x，y 对吧，我们得去set一下逻辑类里的状态吧，所以这时候又需要把 x，y 坐标变换成 i，j 的，怎么算就不详细展开了，相似的逻辑。&lt;/p&gt;
&lt;p&gt;这里咱们偷个懒的话，前一个映射函数不是有式子了么：&lt;/p&gt;
&lt;p&gt;x = MARGIN + j * GRID - PIECE / 2&lt;/p&gt;
&lt;p&gt;y = MARGIN + i * GRID - PIECE / 2&lt;/p&gt;
&lt;p&gt;做个位移，推导一下等式的两边， 把 j 用 x 来表达一下， i 用 y 来表达一下，就可以了：&lt;/p&gt;
&lt;p&gt;i = (y - MARGIN + PIECE / 2) / GRID&lt;/p&gt;
&lt;p&gt;j = (x - MARGIN + PIECE / 2) / GRID&lt;/p&gt;
&lt;p&gt;这里细心的小伙伴们发现了，i 和 j 可能不是整数哦，首先或的坐标当然是通过鼠标来，这个本来就有偏差，不会那么刚刚好，并且GRID好像也不是整数，除一下，都不知道是多少了，OK，那咱们Round一下咯。&lt;/p&gt;
&lt;p&gt;又有小伙伴说了，不是棋盘有边缘么，那个MARGIN就时刻提醒我们，有个边缘，要是我在边缘上点击，会不会出现负值，或者大于N的值。对，考虑得很好，得判断一下边界，这下应该差不多了，可以写代码了：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; coordinate_transform_pixel2map(self, x, y):    
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从 chessMap 里的逻辑坐标到 UI 上的绘制坐标的转换&lt;/span&gt;
        i , j = int(round((y - MARGIN + PIECE / 2) / GRID)), int(round((x - MARGIN + PIECE / 2) /&lt;span&gt; GRID))
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 有MAGIN, 排除边缘位置导致 i,j 越界&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; i &amp;lt; 0 &lt;span&gt;or&lt;/span&gt; i &amp;gt;= N &lt;span&gt;or&lt;/span&gt; j &amp;lt; 0 &lt;span&gt;or&lt;/span&gt; j &amp;gt;=&lt;span&gt; N:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; None, None
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; i, j
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;好了，到现在，坐标的映射也搞定了，终于可以draw、draw、draw了，好吧，那就draw，先画棋盘再画棋子，棋子是啥颜色就画啥颜色，空白的就跳过：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; draw_chess(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 棋盘&lt;/span&gt;
        self.&lt;span&gt;__screen&lt;/span&gt;.blit(self.&lt;span&gt;__ui_chessboard&lt;/span&gt;&lt;span&gt;, (0,0))
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 棋子&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(0, N):
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(0, N):
                x,y &lt;/span&gt;=&lt;span&gt; self.coordinate_transform_map2pixel(i,j)
                state &lt;/span&gt;= self.&lt;span&gt;__gobang&lt;/span&gt;&lt;span&gt;.get_chessboard_state(i,j)
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; state ==&lt;span&gt; ChessboardState.BLACK:
                    self.&lt;/span&gt;&lt;span&gt;__screen&lt;/span&gt;.blit(self.&lt;span&gt;__ui_piece_black&lt;/span&gt;&lt;span&gt;, (x,y))
                &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; state ==&lt;span&gt; ChessboardState.WHITE:
                    self.&lt;/span&gt;&lt;span&gt;__screen&lt;/span&gt;.blit(self.&lt;span&gt;__ui_piece_white&lt;/span&gt;&lt;span&gt;, (x,y))
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;: &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ChessboardState.EMPTY&lt;/span&gt;
                    &lt;span&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;为了下棋的时候体验稍微好一点呢，我们在鼠标上是不是最好也画一个棋子，这样感觉点上去就能落子，好像会好一点：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; draw_mouse(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 鼠标的坐标&lt;/span&gt;
        x, y =&lt;span&gt; pygame.mouse.get_pos()
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 棋子跟随鼠标移动&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; self.&lt;span&gt;__currentPieceState&lt;/span&gt; ==&lt;span&gt; ChessboardState.BLACK:
            self.&lt;/span&gt;&lt;span&gt;__screen&lt;/span&gt;.blit(self.&lt;span&gt;__ui_piece_black&lt;/span&gt;, (x - PIECE / 2, y - PIECE / 2&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            self.&lt;/span&gt;&lt;span&gt;__screen&lt;/span&gt;.blit(self.&lt;span&gt;__ui_piece_white&lt;/span&gt;, (x - PIECE / 2, y - PIECE / 2))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果出现连续的5颗同色棋子，要显示赢棋的结果，那就再来个draw：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; draw_result(self, result):
        font &lt;/span&gt;= pygame.font.Font(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/Library/Fonts/Songti.ttc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 50&lt;span&gt;)
        tips &lt;/span&gt;= u&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;本局结束:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; result ==&lt;span&gt; ChessboardState.BLACK :
            tips &lt;/span&gt;= tips + u&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;黑棋胜利&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;elif&lt;/span&gt; result ==&lt;span&gt; ChessboardState.WHITE:
            tips &lt;/span&gt;= tips + u&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;白棋胜利&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            tips &lt;/span&gt;= tips + u&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;平局&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        text &lt;/span&gt;= font.render(tips, True, (255&lt;span&gt;, 0, 0))
        self.&lt;/span&gt;&lt;span&gt;__screen&lt;/span&gt;.blit(text, (WIDTH / 2 - 200, HEIGHT / 2 - 50))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;想想还差啥？&lt;/p&gt;
&lt;p&gt;对，下棋的逻辑还没做吧，鼠标点击，在棋盘上放颗棋子，我们刚刚draw棋子的时候其实是读取的逻辑类里的chessMap，那下棋的时候，去set对应的状态：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; one_step(self):
        i, j &lt;/span&gt;=&lt;span&gt; None, None
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 鼠标点击&lt;/span&gt;
        mouse_button =&lt;span&gt; pygame.mouse.get_pressed()
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 左键&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; mouse_button[0]:
            x, y &lt;/span&gt;=&lt;span&gt; pygame.mouse.get_pos()
            i, j &lt;/span&gt;=&lt;span&gt; self.coordinate_transform_pixel2map(x, y)

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; i &lt;span&gt;is&lt;/span&gt; None &lt;span&gt;and&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; j &lt;span&gt;is&lt;/span&gt;&lt;span&gt; None:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 格子上已经有棋子&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; self.&lt;span&gt;__gobang&lt;/span&gt;.get_chessboard_state(i, j) !=&lt;span&gt; ChessboardState.EMPTY:
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; False
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                self.&lt;/span&gt;&lt;span&gt;__gobang&lt;/span&gt;.set_chessboard_state(i, j, self.&lt;span&gt;__currentPieceState&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; True

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; False
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在不是还没AI嘛，我们一不做二不休，先搞一个人人对弈，那就再加一个切换颜色的函数：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; change_state(self):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; self.&lt;span&gt;__currentPieceState&lt;/span&gt; ==&lt;span&gt; ChessboardState.BLACK:
            self.&lt;/span&gt;&lt;span&gt;__currentPieceState&lt;/span&gt; =&lt;span&gt; ChessboardState.WHITE
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            self.&lt;/span&gt;&lt;span&gt;__currentPieceState&lt;/span&gt; = ChessboardState.BLACK
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;好了，还差啥？好像作为render的话，感觉差不多，那就来个main函数溜一溜代码试试，新建一个 game.py，这里我们 main 函数里先给AI留个接口，至少留个框架咯 ：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pygame
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; pygame.locals &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt;from&lt;/span&gt; sys &lt;span&gt;import&lt;/span&gt;&lt;span&gt; exit
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; consts &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt;from&lt;/span&gt; gobang &lt;span&gt;import&lt;/span&gt;&lt;span&gt; GoBang
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; render &lt;span&gt;import&lt;/span&gt;&lt;span&gt; GameRender
&lt;/span&gt;&lt;span&gt;#from gobang_ai import GobangAI

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: 
    gobang &lt;/span&gt;=&lt;span&gt; GoBang()
    render &lt;/span&gt;=&lt;span&gt; GameRender(gobang)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;先给AI留个接口&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;ai = GobangAI(gobang, ChessboardState.WHITE)&lt;/span&gt;
    result =&lt;span&gt; ChessboardState.EMPTY
    enable_ai &lt;/span&gt;=&lt;span&gt; False

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 捕捉pygame事件&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; event &lt;span&gt;in&lt;/span&gt;&lt;span&gt; pygame.event.get():
            &lt;/span&gt;&lt;span&gt;# &lt;/span&gt;&lt;span&gt;退出程序&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; event.type ==&lt;span&gt; QUIT:
                exit()
            &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; event.type ==&lt;span&gt;  MOUSEBUTTONDOWN:
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 成功着棋&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;&lt;span&gt; render.one_step():
                    result &lt;/span&gt;=&lt;span&gt; gobang.get_chess_result()
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; result !=&lt;span&gt; ChessboardState.EMPTY:
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;&lt;span&gt; enable_ai:
                    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;ai.one_step()&lt;/span&gt;
                    result =&lt;span&gt; gobang.get_chess_result()
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                    render.change_state()
        
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 绘制&lt;/span&gt;
&lt;span&gt;        render.draw_chess()
        render.draw_mouse()

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; result !=&lt;span&gt; ChessboardState.EMPTY:
            render.draw_result(result)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 刷新&lt;/span&gt;
        pygame.display.update()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;好了，跑一下试试，没有AI就拉两个小伙伴来对弈，实在不行先左手和右手来一把，好像还行，逻辑没问题：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17518/201711/17518-20171114221733702-519923396.png&quot; alt=&quot;&quot; width=&quot;588&quot; height=&quot;612&quot;/&gt;&lt;/p&gt;

&lt;p&gt;整理一下完整版的 render.py ：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;85&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;coding:utf-8&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pygame
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; pygame.locals &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt;from&lt;/span&gt; consts &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt;from&lt;/span&gt; gobang &lt;span&gt;import&lt;/span&gt;&lt;span&gt; GoBang

&lt;/span&gt;&lt;span&gt;#IMAGE_PATH&lt;/span&gt;&lt;span&gt; = '/Users/phantom/Projects/AI/gobang/UI/'&lt;/span&gt;
IMAGE_PATH = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;UI/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

WIDTH &lt;/span&gt;= 540&lt;span&gt;
HEIGHT &lt;/span&gt;= 540&lt;span&gt;
MARGIN &lt;/span&gt;= 22&lt;span&gt;
GRID &lt;/span&gt;= (WIDTH - 2 * MARGIN) / (N - 1&lt;span&gt;)
PIECE &lt;/span&gt;= 32

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GameRender(object):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, gobang):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 绑定逻辑类&lt;/span&gt;
        self.&lt;span&gt;__gobang&lt;/span&gt; =&lt;span&gt; gobang
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 黑棋开局&lt;/span&gt;
        self.&lt;span&gt;__currentPieceState&lt;/span&gt; =&lt;span&gt; ChessboardState.BLACK

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化 pygame&lt;/span&gt;
&lt;span&gt;        pygame.init()
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; pygame.display.set_mode((width, height), flags, depth) &lt;/span&gt;
        self.&lt;span&gt;__screen&lt;/span&gt; = pygame.display.set_mode((WIDTH, HEIGHT), 0, 32&lt;span&gt;)
        pygame.display.set_caption(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;五子棋AI&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; UI 资源&lt;/span&gt;
        self.&lt;span&gt;__ui_chessboard&lt;/span&gt; = pygame.image.load(IMAGE_PATH + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;chessboard.jpg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).convert()
        self.&lt;/span&gt;&lt;span&gt;__ui_piece_black&lt;/span&gt; = pygame.image.load(IMAGE_PATH + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;piece_black.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).convert_alpha()
        self.&lt;/span&gt;&lt;span&gt;__ui_piece_white&lt;/span&gt; = pygame.image.load(IMAGE_PATH + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;piece_white.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).convert_alpha()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; coordinate_transform_map2pixel(self, i, j):    
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从 chessMap 里的逻辑坐标到 UI 上的绘制坐标的转换&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; MARGIN + j * GRID - PIECE / 2, MARGIN + i * GRID - PIECE / 2

    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; coordinate_transform_pixel2map(self, x, y):    
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从 chessMap 里的逻辑坐标到 UI 上的绘制坐标的转换&lt;/span&gt;
        i , j = int(round((y - MARGIN + PIECE / 2) / GRID)), int(round((x - MARGIN + PIECE / 2) /&lt;span&gt; GRID))
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 有MAGIN, 排除边缘位置导致 i,j 越界&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; i &amp;lt; 0 &lt;span&gt;or&lt;/span&gt; i &amp;gt;= N &lt;span&gt;or&lt;/span&gt; j &amp;lt; 0 &lt;span&gt;or&lt;/span&gt; j &amp;gt;=&lt;span&gt; N:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; None, None
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; i, j

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; draw_chess(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 棋盘&lt;/span&gt;
        self.&lt;span&gt;__screen&lt;/span&gt;.blit(self.&lt;span&gt;__ui_chessboard&lt;/span&gt;&lt;span&gt;, (0,0))
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 棋子&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(0, N):
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(0, N):
                x,y &lt;/span&gt;=&lt;span&gt; self.coordinate_transform_map2pixel(i,j)
                state &lt;/span&gt;= self.&lt;span&gt;__gobang&lt;/span&gt;&lt;span&gt;.get_chessboard_state(i,j)
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; state ==&lt;span&gt; ChessboardState.BLACK:
                    self.&lt;/span&gt;&lt;span&gt;__screen&lt;/span&gt;.blit(self.&lt;span&gt;__ui_piece_black&lt;/span&gt;&lt;span&gt;, (x,y))
                &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; state ==&lt;span&gt; ChessboardState.WHITE:
                    self.&lt;/span&gt;&lt;span&gt;__screen&lt;/span&gt;.blit(self.&lt;span&gt;__ui_piece_white&lt;/span&gt;&lt;span&gt;, (x,y))
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;: &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ChessboardState.EMPTY&lt;/span&gt;
                    &lt;span&gt;pass&lt;/span&gt;
                
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; draw_mouse(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 鼠标的坐标&lt;/span&gt;
        x, y =&lt;span&gt; pygame.mouse.get_pos()
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 棋子跟随鼠标移动&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; self.&lt;span&gt;__currentPieceState&lt;/span&gt; ==&lt;span&gt; ChessboardState.BLACK:
            self.&lt;/span&gt;&lt;span&gt;__screen&lt;/span&gt;.blit(self.&lt;span&gt;__ui_piece_black&lt;/span&gt;, (x - PIECE / 2, y - PIECE / 2&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            self.&lt;/span&gt;&lt;span&gt;__screen&lt;/span&gt;.blit(self.&lt;span&gt;__ui_piece_white&lt;/span&gt;, (x - PIECE / 2, y - PIECE / 2&lt;span&gt;))

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; draw_result(self, result):
        font &lt;/span&gt;= pygame.font.Font(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/Library/Fonts/Songti.ttc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 50&lt;span&gt;)
        tips &lt;/span&gt;= u&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;本局结束:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; result ==&lt;span&gt; ChessboardState.BLACK :
            tips &lt;/span&gt;= tips + u&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;黑棋胜利&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;elif&lt;/span&gt; result ==&lt;span&gt; ChessboardState.WHITE:
            tips &lt;/span&gt;= tips + u&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;白棋胜利&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            tips &lt;/span&gt;= tips + u&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;平局&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        text &lt;/span&gt;= font.render(tips, True, (255&lt;span&gt;, 0, 0))
        self.&lt;/span&gt;&lt;span&gt;__screen&lt;/span&gt;.blit(text, (WIDTH / 2 - 200, HEIGHT / 2 - 50&lt;span&gt;))

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; one_step(self):
        i, j &lt;/span&gt;=&lt;span&gt; None, None
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 鼠标点击&lt;/span&gt;
        mouse_button =&lt;span&gt; pygame.mouse.get_pressed()
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 左键&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; mouse_button[0]:
            x, y &lt;/span&gt;=&lt;span&gt; pygame.mouse.get_pos()
            i, j &lt;/span&gt;=&lt;span&gt; self.coordinate_transform_pixel2map(x, y)

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; i &lt;span&gt;is&lt;/span&gt; None &lt;span&gt;and&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; j &lt;span&gt;is&lt;/span&gt;&lt;span&gt; None:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 格子上已经有棋子&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; self.&lt;span&gt;__gobang&lt;/span&gt;.get_chessboard_state(i, j) !=&lt;span&gt; ChessboardState.EMPTY:
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; False
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                self.&lt;/span&gt;&lt;span&gt;__gobang&lt;/span&gt;.set_chessboard_state(i, j, self.&lt;span&gt;__currentPieceState&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; True

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; False
            
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; change_state(self):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; self.&lt;span&gt;__currentPieceState&lt;/span&gt; ==&lt;span&gt; ChessboardState.BLACK:
            self.&lt;/span&gt;&lt;span&gt;__currentPieceState&lt;/span&gt; =&lt;span&gt; ChessboardState.WHITE
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            self.&lt;/span&gt;&lt;span&gt;__currentPieceState&lt;/span&gt; = ChessboardState.BLACK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;好了，就这样~  &lt;/p&gt;
&lt;p&gt;UI素材我打个包放这儿了：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.cnblogs.com/files/erwin/Gobang_UI_Res.zip&quot; target=&quot;_blank&quot;&gt;点击这里下载UI素材&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;…………后记…………&lt;/p&gt;
&lt;p&gt;我：小伙伴们别吐槽了，明天一定开始搞AI了，因为五子棋咱们有啦~&lt;/p&gt;
&lt;p&gt;小伙伴：好吧，终于。&lt;/p&gt;
&lt;p&gt;我：等一下，明天？NO，我口误，下一篇一定开始搞AI了，明天不一定有时间来写博客呢 - -&lt;/p&gt;
&lt;p&gt;小伙伴：再再次省去吐槽一万字！&lt;/p&gt;
&lt;p&gt;我：反正每周至少写两篇嘛，OK？&lt;/p&gt;
&lt;p&gt;小伙伴：那我还能怎样……&lt;/p&gt;

</description>
<pubDate>Tue, 14 Nov 2017 14:43:00 +0000</pubDate>
<dc:creator>xerwin</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/erwin/p/7835191.html</dc:identifier>
</item>
<item>
<title>pgjdbc源码分析 - 非我在</title>
<link>http://www.cnblogs.com/flying-tiger/p/7812804.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/flying-tiger/p/7812804.html</guid>
<description>&lt;p&gt;今天我们讲一讲pgjdbc。pgjdbc是postgresql的JDBC接口。其网址是&lt;a href=&quot;https://jdbc.postgresql.org/&quot; class=&quot;uri&quot;&gt;https://jdbc.postgresql.org/&lt;/a&gt;.是开源软件，我们可以轻松的查看其代码，理解jdbc的工作原理。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;pgjdbc的源码结构如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/579102/201711/579102-20171114223157656-1288091758.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么我们来一一看看各个模块都是做什么的吧。&lt;/p&gt;
&lt;h2 id=&quot;core&quot;&gt;1 core&lt;/h2&gt;
&lt;p&gt;该目录是程序的核心模块目录。&lt;/p&gt;
&lt;p&gt;这里实现了大部分pgjdbc的基类和接口，例如statement query log type command connection类等等；&lt;/p&gt;
&lt;p&gt;并且在此基础上的Connection的V3协议(V2版本的协议在新版本里已删除)；&lt;/p&gt;
&lt;h2 id=&quot;data-source&quot;&gt;2 data source&lt;/h2&gt;
&lt;p&gt;该模块实现的是jdbc的数据源模块。其中：&lt;/p&gt;
&lt;p&gt;ds目录下提供基础的数据源支持；&lt;/p&gt;
&lt;p&gt;xa目录下提供支持分布式事务的数据源；&lt;/p&gt;
&lt;h2 id=&quot;common-api&quot;&gt;3 common api&lt;/h2&gt;
&lt;p&gt;jdbc&lt;br/&gt;jdbc2&lt;br/&gt;jdbc3&lt;br/&gt;Driver.java&lt;br/&gt;这些目录下提供了共通的jdbc驱动接口。&lt;/p&gt;
&lt;h2 id=&quot;extend-api&quot;&gt;4 extend api&lt;/h2&gt;
&lt;p&gt;这部分是postgresql独有的特殊命令和类型的支持。其中：&lt;/p&gt;
&lt;p&gt;copy目录下的代码支持postgresql的COPY命令；&lt;/p&gt;
&lt;p&gt;geometric目录下的代码 支持postgresql的集合类型；&lt;/p&gt;
&lt;p&gt;fastpath目录下的代码是PostgreSQL提供一种快速路径接口来向服务器发送简单的函数调用。这个接口在某种程度上已被废弃，因为我们可以通过创建一个定义该函数调用的预备语句来达到类似或者更强大的功能；&lt;/p&gt;
&lt;p&gt;largeobject目录下的代码提供对Postgresql的大对象数据类型的支持；&lt;/p&gt;
&lt;h2 id=&quot;security-api&quot;&gt;5 security api&lt;/h2&gt;
&lt;p&gt;ssl sspi gss这些很显然，这是对安全相关的认证的支持。&lt;/p&gt;
&lt;h2 id=&quot;until&quot;&gt;6 until&lt;/h2&gt;
&lt;p&gt;该目录下的代码提供一些工具库的实现。例如message类、 exception类&lt;/p&gt;
&lt;h2 id=&quot;hostchooser&quot;&gt;7 hostchooser&lt;/h2&gt;
&lt;p&gt;该目录下的代码提供了对连接字符串中targetServerType参数的支持。支持特定类型的host的选择(目前指定该参数为preferSlave有点bug)。&lt;/p&gt;
&lt;h2 id=&quot;osgi&quot;&gt;8 osgi&lt;/h2&gt;
&lt;p&gt;目录下的代码实现了OSGi(Open Service Gateway Initiative)技术是Java动态化模块化系统的一系列规范(老实说并不是太懂)。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;调用关系的话，我们大家应该还是蛮熟悉的。不多说，举例子吧。&lt;/p&gt;
&lt;p&gt;假设我们执行这样一个查询：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from hr.employees;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;pgjdbc的工作时序大概下面这个样子(在网上找的图，侵删)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/579102/201711/579102-20171110140931356-1562214540.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里面唯一神秘的就是executeQuery()执行后，客服端和database的交互细节。下面我们简单的分析下这一段的协议流吧。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;PostgreSQL的客户端与服务端通过协议消息通信，下面以pgjdbc执行一个简单的SELECT为例说明&lt;/p&gt;
&lt;p&gt;已定义以下的表。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;create table ecpg_test(tint int, name text);
insert into ecpg_test values (12,'qwe');&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行的SELECT语句&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from ecpg_test where tint =12&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;SELECT执行的流程&lt;br/&gt;我们用一个java程序去连接postgresql。为了追踪log，我们如下设置：&lt;/p&gt;
&lt;p&gt;1.客户端：连接字符串里面加上参数loggerLevel=TRACE来追踪这次连接以及查询&lt;br/&gt;2.服务端：设置参数client_min_messages和log_min_messages为debug5(这里我为了log完整起见，其实没必要设置这么高)&lt;/p&gt;
&lt;p&gt;运行完程序，log如下(为方便观察，我就摘抄了一部分，其它的我省略了)：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;.
.
.
11 14, 2017 3:26:27 午後 org.postgresql.core.v3.QueryExecutorImpl execute
FINEST:   simple execute, handler=org.postgresql.jdbc.PgStatement$StatementResultHandler@19d449fc, maxRows=0, fetchSize=0, flags=17
11 14, 2017 3:26:27 午後 org.postgresql.core.v3.QueryExecutorImpl sendParse
FINEST:  FE=&amp;gt; Parse(stmt=null,query=&quot;select * from ecpg_test where tint =12&quot;,oids={})
11 14, 2017 3:26:27 午後 org.postgresql.core.v3.QueryExecutorImpl sendBind
FINEST:  FE=&amp;gt; Bind(stmt=null,portal=null)
11 14, 2017 3:26:27 午後 org.postgresql.core.v3.QueryExecutorImpl sendDescribePortal
FINEST:  FE=&amp;gt; Describe(portal=null)
11 14, 2017 3:26:27 午後 org.postgresql.core.v3.QueryExecutorImpl sendExecute
FINEST:  FE=&amp;gt; Execute(portal=null,limit=0)
11 14, 2017 3:26:27 午後 org.postgresql.core.v3.QueryExecutorImpl sendSync
FINEST:  FE=&amp;gt; Sync
.
.
.
11 14, 2017 3:26:27 午後 org.postgresql.core.v3.QueryExecutorImpl processResults
FINEST:  &amp;lt;=BE ParseComplete [null]
11 14, 2017 3:26:27 午後 org.postgresql.core.v3.QueryExecutorImpl processResults
FINEST:  &amp;lt;=BE BindComplete [unnamed]
11 14, 2017 3:26:27 午後 org.postgresql.core.v3.QueryExecutorImpl receiveFields
FINEST:  &amp;lt;=BE RowDescription(2)
11 14, 2017 3:26:27 午後 org.postgresql.core.v3.QueryExecutorImpl receiveFields
FINEST:         Field(tint,INT4,4,T)
11 14, 2017 3:26:27 午後 org.postgresql.core.v3.QueryExecutorImpl receiveFields
FINEST:         Field(name,TEXT,65535,T)
11 14, 2017 3:26:27 午後 org.postgresql.core.v3.QueryExecutorImpl processResults
FINEST:  &amp;lt;=BE DataRow(len=5)
11 14, 2017 3:26:27 午後 org.postgresql.core.v3.QueryExecutorImpl receiveCommandStatus
FINEST:  &amp;lt;=BE CommandStatus(SELECT 1)

11 14, 2017 3:26:27 午後 org.postgresql.core.v3.QueryExecutorImpl receiveRFQ
FINEST:  &amp;lt;=BE ReadyForQuery(I)
.
.
.
11 14, 2017 3:02:20 午後 org.postgresql.core.QueryExecutorBase close
FINEST:  FE=&amp;gt; Terminate

Process finished with exit code 0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，客户端在执行execute时，依次进行了sendParse、sendBind、sendDescribePortal、sendExecute、sendSync这些操作。&lt;/p&gt;
&lt;p&gt;然后服务端对应这些操作分别对应给了处理和相应：ParseComplete、BindComplete、RowDescription、DataRow等等。&lt;/p&gt;
&lt;p&gt;这些操作写在org.postgresql.core.v3包下的QueryExecutorImpl.java中。更详细一点的说，是在函数中：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private void sendOneQuery(SimpleQuery query, SimpleParameterList params, int maxRows,
      int fetchSize, int flags) &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实这里有一个疑问，在sendOneQuery()函数里，上面所说的客户端和服务端操作是按照次序一一对应的执行的。手画一个草图比如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  client  ------------------   ---  server
   |sendParse()                        |
   |   --------------------------&amp;gt;     |
   |   &amp;lt;-------------------------      |
   |                     ParseComplete |
   |sendBind()                         |
   |   -------------------------&amp;gt;      |
   |   &amp;lt;-------------------------      |
   |                     BindComplete  |
.
.
.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也就是说，是有严格的次序关系的。可是我们看log可以发现，客户端的这些操作是一次性发到服务端，服务端也是处理完一次性发回的。那么为什么会不一致呢？&lt;/p&gt;
&lt;p&gt;请教了朋友和同事，原来是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了优化网络传输。将多次发送的数据集中到一次发送，提高效率。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好的，今天就到这里。&lt;/p&gt;
&lt;p&gt;引用:&lt;br/&gt;&lt;a href=&quot;http://blog.chinaunix.net/xmlrpc.php?r=blog/article&amp;amp;uid=20726500&amp;amp;id=4150218&quot; class=&quot;uri&quot;&gt;http://blog.chinaunix.net/xmlrpc.php?r=blog/article&amp;amp;uid=20726500&amp;amp;id=4150218&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 14 Nov 2017 14:40:00 +0000</pubDate>
<dc:creator>非我在</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/flying-tiger/p/7812804.html</dc:identifier>
</item>
<item>
<title>docker下编译mangoszero WOW60级服务端（二） - oliverCJ</title>
<link>http://www.cnblogs.com/oliverCJ/p/7835061.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/oliverCJ/p/7835061.html</guid>
<description>&lt;p&gt;开始搭建基于docker的mangoszero WOW服务端，我自己的操作系统是mac os，其他平台操作可以等价替换&lt;/p&gt;
&lt;h2&gt;1.准备工作&lt;/h2&gt;
&lt;p&gt;(1) 安装docker，参考docker官方文档，https://www.docker.com，有各种平台的安装教程，mac下可以直接 &lt;span class=&quot;cnblogs_code&quot;&gt;brew &lt;span&gt;install&lt;/span&gt; caskroom/cask/docker&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;(2) 拉取docker官方centos镜像，可使用阿里云hub，https://dev.aliyun.com/detail.html?spm=5176.1972343.2.22.otKSdx&amp;amp;repoId=1198，版本推荐6.9或latest&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;docker pull centos
或
docker pull centos:&lt;/span&gt;&lt;span&gt;6.9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(3) 建立一个文件夹专门用来保存此次搭建所用到的文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir&lt;/span&gt; -p mangos/wow60
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(4) 从github拉取mangoszero源码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir&lt;/span&gt; mangos/wow60/mangos-&lt;span&gt;zero
cd mangos&lt;/span&gt;/wow60/mangos-zero/&lt;span&gt;
git clone https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/mangoszero/server.git server -b master --recursive&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;github现在国内被墙，只有搭梯子，这个源码比较大，可能会花费非常长的时间。&lt;/p&gt;
&lt;p&gt;一个比较快捷的办法&lt;/p&gt;
&lt;p&gt;1) 先下载mangoszero源码的压缩包，https://github.com/mangoszero/server/archive/master.zip，解压缩后文件夹更名为server&lt;/p&gt;
&lt;p&gt;2) 再根据https://github.com/mangoszero/server/blob/master/.gitmodules里的子模块内容，一个一个的git clone&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre readability=&quot;4&quot;&gt;
cd mangos/wow60/mangos-zero/&lt;span&gt;server
git clone https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/mangos/mangosDeps dep -b master --recursive&lt;/span&gt;
git clone https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/mangos/realmd src/realmd -b master --recursive&lt;/span&gt;
git clone https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/elunaluaengine/eluna src/modules/Eluna -b master --recursive&lt;/span&gt;
git clone https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/mangos/ScriptDev3.git src/modules/SD3 -b master --recursive&lt;/span&gt;
git clone https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/mangostools/DbDocsEditor.git contrib/dbdocs_editor -b master --recursive&lt;/span&gt;
git clone  https:&lt;span&gt;//&lt;/span&gt;&lt;span readability=&quot;2&quot;&gt;github.com/mangos/Extractor_projects.git src/tools/Extractor_projects -b master --recursive&lt;p&gt;win的子模块如果是Linux或MAC就不需要clone了&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(5) 从github拉取database&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd mangos/&lt;span&gt;wow60
git clone http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/mangoszero/database.git database -b master --recursive&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;2.搭建之前的规划&lt;/h2&gt;
&lt;p&gt;(1) 首先基于centos构建一套通用的编译环境，这样以后不仅可方便编译mangos，也可用于编译其他软件，或者用作其他容器的母版&lt;/p&gt;
&lt;p&gt;(2) 基于构建好的编译环境编译mangoszero的服务端&lt;/p&gt;
&lt;p&gt;(3) 基于构建好的mangos服务端单独构建验证服务器&lt;/p&gt;
&lt;p&gt;(4) 基于构建好的mangos服务端单独构建世界服务器&lt;/p&gt;
&lt;p&gt;(5) 基于构建好的编译环境构建数据库服务器&lt;/p&gt;
&lt;p&gt; 这样的规划好处是分离验证服务器，世界服务器，数据库，这样某一个镜像需要变动，也不会影响其他的。&lt;/p&gt;
&lt;p&gt; 验证服务器与世界服务器分离的好处是可以一个验证服务支持多个世界服务&lt;/p&gt;
&lt;p&gt; 数据库服务器可以使用容器，也可以使用其他Mysql服务&lt;/p&gt;

&lt;h2&gt;3.开始搭建编译环境&lt;/h2&gt;
&lt;p&gt;(1) 创建一个文件夹用来保存dockerfile等&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd mangos
&lt;/span&gt;&lt;span&gt;mkdir&lt;/span&gt;&lt;span&gt; base_env
cd base_env&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(2) 编写Dockerfile&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#基于cenos的latest版本
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; centos:latest
# 个人信息
&lt;/span&gt;&lt;span&gt;MAINTAINER&lt;/span&gt; oliverCJ &amp;lt;cgjp123@163&lt;span&gt;.com&amp;gt;
#设置容器环境变量
&lt;/span&gt;&lt;span&gt;ENV&lt;/span&gt;&lt;span&gt; SRC_DIR /root/soft
#创建文件夹保存需要用到的依赖文件
&lt;/span&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;span&gt; mkdir -p ${SRC_DIR}

#更新服务器，安装wget，安装epel源
&lt;/span&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;span&gt; yum -y update \
    &amp;amp;&amp;amp; yum -y install wget \
    &amp;amp;&amp;amp; yum -y install epel-release \
    &amp;amp;&amp;amp; yum makecache

#安装依赖包
&lt;/span&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;span&gt; yum -y install \
    cmake \
    make \
    gcc \
    gcc-c++ \
    automake.noarch \
    autoconf.noarch \
    openssl \
    openssl-devel \
    bzip2-devel \
    readline-devel \
    ncurses-devel \
    boost-devel \
    libtool \
    perl-devel \
    perl-Net-Telnet.noarch

#安装必要软件
&lt;/span&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;span&gt; yum -y install \
    #centos6.9版本安装mysql,mysql-devel,mysql-server
    mariadb-devel \
    mariadb-server \
    curl \
    git \
    vim \
    openssh-server \
    openssh \
    telnet \
    net-tools \
    yum clean all 

#ACE环境
&lt;/span&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;span&gt; cd ${SRC_DIR} \
    &amp;amp;&amp;amp; wget ftp:&lt;/span&gt;//ftp.pbone.net/mirror/ftp5.gwdg.de/pub/opensuse/repositories/devel:/libraries:/ACE:/micro/CentOS_7/x86_64/ace-6.3.3-55.1.x86_64.rpm \
    &amp;amp;&amp;amp; rpm -ivh ace-6.3.3-55.1&lt;span&gt;.x86_64.rpm \
    &amp;amp;&amp;amp; rm -f ace-&lt;/span&gt;6.3.3-55.1&lt;span&gt;.x86_64.rpm \
    &amp;amp;&amp;amp; wget ftp:&lt;/span&gt;//ftp.pbone.net/mirror/ftp5.gwdg.de/pub/opensuse/repositories/devel:/libraries:/ACE:/micro:/versioned/CentOS_7/x86_64/mpc-6.3.3-42.1.x86_64.rpm \
    &amp;amp;&amp;amp; rpm -ivh mpc-6.3.3-42.1&lt;span&gt;.x86_64.rpm \
    &amp;amp;&amp;amp; rm -f mpc-&lt;/span&gt;6.3.3-42.1&lt;span&gt;.x86_64.rpm \
    &amp;amp;&amp;amp; wget ftp:&lt;/span&gt;//ftp.pbone.net/mirror/ftp5.gwdg.de/pub/opensuse/repositories/devel:/libraries:/ACE:/micro/CentOS_7/x86_64/ace-devel-6.3.3-55.1.x86_64.rpm \
    &amp;amp;&amp;amp; rpm -ivh ace-devel-6.3.3-55.1&lt;span&gt;.x86_64.rpm \
    &amp;amp;&amp;amp; rm  -f ace-devel-&lt;/span&gt;6.3.3-55.1&lt;span&gt;.x86_64.rpm

#配置时区，登录信息等
&lt;/span&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;span&gt; ln -sf /usr/share/zoneinfo/Asia/Chongqing /etc/localtime \
    &amp;amp;&amp;amp; sed -i \
        -e &lt;/span&gt;'s/^UsePAM yes/#UsePAM yes/g'&lt;span&gt; \
        -e &lt;/span&gt;'s/^#UsePAM no/UsePAM no/g'&lt;span&gt; \
        -e &lt;/span&gt;'s/#UsePrivilegeSeparation.*/UsePrivilegeSeparation no/g'&lt;span&gt; \
        -e &lt;/span&gt;'s/^#UseDNS yes/UseDNS no/g'&lt;span&gt; \
        /etc/ssh/sshd_config \
    &amp;amp;&amp;amp; echo &lt;/span&gt;&quot;root&quot;&lt;span&gt; | passwd --stdin root \
    &amp;amp;&amp;amp; ssh-keygen -q -b &lt;/span&gt;1024 -N ''&lt;span&gt; -t rsa -f /etc/ssh/ssh_host_rsa_key \
    &amp;amp;&amp;amp; ssh-keygen -q -b &lt;/span&gt;1024 -N ''&lt;span&gt; -t dsa -f /etc/ssh/ssh_host_dsa_key \
    &amp;amp;&amp;amp; echo &lt;/span&gt;&quot;NETWORKING=yes&quot;&lt;span&gt; &amp;gt; /etc/sysconfig/network

&lt;/span&gt;&lt;span&gt;RUN&lt;/span&gt; rm -rf ${SRC_DIR}/*&lt;span&gt;
RUN rm -rf /tmp/*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(3) 编写build.yml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;version: '2'
services:
  base:
    build: ./
    image: base-env:latest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(4) 执行构建命令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker-compose -f build.yml build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(5) 构建完成&lt;/p&gt;
&lt;p&gt;构建完成后可使用 &lt;span class=&quot;cnblogs_code&quot;&gt;docker images&lt;/span&gt; 查看构建好的镜像，镜像名称为base-env，版本为latest&lt;/p&gt;

&lt;h2&gt;4.备注&lt;/h2&gt;
&lt;p&gt;镜像构建完成后，如果有需要的软件忘记装，可以依赖镜像启动容器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker run -it --&lt;span&gt;rm&lt;/span&gt; --name base-&lt;span&gt;env&lt;/span&gt; base-&lt;span&gt;env&lt;/span&gt;&lt;span&gt;:latest&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动后将直接登录进容器，然后安装所需软件，安装完毕后切勿exit退出，因为启动容器时使用了--rm参数，一旦退出，所有修改都会丢失&lt;/p&gt;
&lt;p&gt;这时应当新开一个命令行窗口,执行保存修改命令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker commit base-&lt;span&gt;env&lt;/span&gt; base-&lt;span&gt;env&lt;/span&gt;:latest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时就可以回到原来的命令行exit退出容器，所有修改也保存并更新到镜像中了&lt;/p&gt;

&lt;p&gt;下次将开始编译mangoszero服务端代码&lt;/p&gt;
</description>
<pubDate>Tue, 14 Nov 2017 14:17:00 +0000</pubDate>
<dc:creator>oliverCJ</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/oliverCJ/p/7835061.html</dc:identifier>
</item>
<item>
<title>Vue.js优雅的实现列表清单的操作 - Avenstar</title>
<link>http://www.cnblogs.com/zjf-1992/p/7834797.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zjf-1992/p/7834797.html</guid>
<description>&lt;h4&gt;&lt;strong&gt;&lt;span&gt;    一、Vue.js简要说明&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Vue.js (读音 /vjuː/) 是一套构建用户界面的渐进式框架。与前端框架Angular一样， Vue.js在设计上采用MVVM模式，当View视图层发生变化时，会自动更新到ViewModel.反之亦然，View与ViewModel之间通过数据双向绑定(data-binding)建立联系，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819169/201711/819169-20171112193914544-2117333055.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Vue.js通过MVVM模式将视图与数据分成两部分(或者说视图代码与业务逻辑的解耦)，因此我们只需关心数据的操作，DOM的视图的更新等一系列事情，Vue会帮我们自动搞定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819169/201711/819169-20171113231337171-661900677.png&quot; alt=&quot;&quot; width=&quot;300&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如通过v-model指令实现数据的双向绑定，用户在输入框中输入任意的值，实时显示用户输入message的值（对应上述MVVM模式关系图不难理解）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Vue.js数据的双向绑定&amp;lt;/title&amp;gt;
    &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;
    &amp;lt;!-- 引入 Bootstrap --&amp;gt;
    &amp;lt;link href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
    &amp;lt;script src=&quot;https://unpkg.com/vue&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class=&quot;container&quot; id=&quot;app&quot;&amp;gt;
        &amp;lt;input v-model=&quot;message&quot; placeholder=&quot;请任意输入&quot; class=&quot;form-control&quot;&amp;gt;
        &amp;lt;p&amp;gt;Message is: {{ message }}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
        new Vue({  //创建Vue实例
            el:&quot;#app&quot;, //挂载创建Vue实例对象
            data: {
                message : &quot;Hello Vue.js&quot;
            },
            methods:{}
        })
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下楼主直接绕过Vue.js基础语法，对基础语法不了解的可以查阅相关资料，从通过Vue.js优雅实现任务列表操作案例说起，将Vue.js碎片化的知识点模块整合在一块。&lt;/p&gt;
&lt;p&gt;接下来一块体验一下Vue.js(读音 /vjuː/，类似于 view) 的小清新的/简洁的写法吧.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;&lt;span&gt;    二、Vue.js优雅的实现任务列表的操作预览&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Vue.js 优雅实现任务列表效果图预览， 在线体验预览效果请点击 &lt;span&gt;&lt;a href=&quot;http://jsrun.net/BsiKp/edit&quot;&gt;Vue edit&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819169/201711/819169-20171112203309481-1615652232.png&quot; alt=&quot;&quot; width=&quot;450&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;&lt;span&gt;    三、HTML骨架CSS样式代码&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;使用BootStrap前端响应式开发框架，HTML骨架及CSS样式Demo如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;!DOCTYPE html&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;html&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt; 4&lt;/span&gt;     &amp;lt;title&amp;gt;Vue.js&amp;lt;/title&amp;gt;
&lt;span&gt; 5&lt;/span&gt;     &amp;lt;meta name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;viewport&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width=device-width, initial-scale=1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;!-- 引入 Bootstrap --&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;link href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;!-- 引入 vue.js --&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://unpkg.com/vue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;10&lt;/span&gt;     &amp;lt;style type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;11&lt;/span&gt;         .list-&lt;span&gt;group button { 
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            background: none;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             border: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            color: red;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             outline: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;float&lt;/span&gt;&lt;span&gt;: right;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             font-&lt;span&gt;weight: bold;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             margin-&lt;span&gt;left: 5px;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &amp;lt;/style&amp;gt;
&lt;span&gt;21&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;22&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;23&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 
&lt;span&gt;24&lt;/span&gt;         &amp;lt;p v-show=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;remainTask.length&amp;gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;任务列表&amp;lt;/p&amp;gt;
&lt;span&gt;25&lt;/span&gt;         &amp;lt;ul &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;26&lt;/span&gt;               &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list-group-item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;27&lt;/span&gt;                   &amp;lt;span title=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;编辑任务&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Vue.js - 是一套构建用户界面的渐进式框架&amp;lt;/span&amp;gt;
&lt;span&gt;28&lt;/span&gt;                   &amp;lt;button title=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;移除任务&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;amp;#&lt;span&gt;10007&lt;/span&gt;;&amp;lt;/button&amp;gt;
&lt;span&gt;29&lt;/span&gt;                   &amp;lt;button title=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;任务完成&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;amp;#&lt;span&gt;10004&lt;/span&gt;;&amp;lt;/button&amp;gt;
&lt;span&gt;30&lt;/span&gt;               &amp;lt;/li&amp;gt;
&lt;span&gt;31&lt;/span&gt;         &amp;lt;/ul&amp;gt;
&lt;span&gt;32&lt;/span&gt;         &amp;lt;form&amp;gt;
&lt;span&gt;33&lt;/span&gt;             &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;34&lt;/span&gt;               &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;exampleInputEmail1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;任务描述&amp;lt;/label&amp;gt;
&lt;span&gt;35&lt;/span&gt;               &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入你要添加的任务&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; required&amp;gt;
&lt;span&gt;36&lt;/span&gt;             &amp;lt;/div&amp;gt;
&lt;span&gt;37&lt;/span&gt;             &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;  
&lt;span&gt;38&lt;/span&gt;                 &amp;lt;button &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn btn-primary&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;添加任务&amp;lt;/button&amp;gt;
&lt;span&gt;39&lt;/span&gt;             &amp;lt;/div&amp;gt;
&lt;span&gt;40&lt;/span&gt;         &amp;lt;/form&amp;gt;
&lt;span&gt;41&lt;/span&gt;         &amp;lt;p&amp;gt;已完成的Task&amp;lt;/p&amp;gt;
&lt;span&gt;42&lt;/span&gt;         &amp;lt;ol &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;43&lt;/span&gt;             &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list-group-item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;  
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;               JavaScript高级程序设计
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;             &amp;lt;/li&amp;gt;
&lt;span&gt;46&lt;/span&gt;         &amp;lt;/ol&amp;gt;
&lt;span&gt;47&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;48&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;49&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;strong&gt;&lt;span&gt;    四、实例化Vue及应用Vue指令Directives添加项目中&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; v-cloak&amp;gt;
&lt;span&gt; 2&lt;/span&gt;         &amp;lt;p v-show=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;remainTask.length&amp;gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;任务列表 ({{remainTask.length}})&amp;lt;/p&amp;gt;
&lt;span&gt; 3&lt;/span&gt;         &amp;lt;ul &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 4&lt;/span&gt;           &amp;lt;template v-&lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;task in remainTask&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 5&lt;/span&gt;               &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list-group-item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 6&lt;/span&gt;                   &amp;lt;span v-on:dblclick=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;editTask(task)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; title=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;编辑任务&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;{{task.text}}&amp;lt;/span&amp;gt;
&lt;span&gt; 7&lt;/span&gt;                   &amp;lt;button v-on:click=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;removeTask(task)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; title=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;移除任务&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;amp;#&lt;span&gt;10007&lt;/span&gt;;&amp;lt;/button&amp;gt;
&lt;span&gt; 8&lt;/span&gt;                   &amp;lt;button v-on:click=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;completeTask(task)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; title=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;任务完成&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;amp;#&lt;span&gt;10004&lt;/span&gt;;&amp;lt;/button&amp;gt;
&lt;span&gt; 9&lt;/span&gt;               &amp;lt;/li&amp;gt;
&lt;span&gt;10&lt;/span&gt;           &amp;lt;/template&amp;gt;
&lt;span&gt;11&lt;/span&gt;         &amp;lt;/ul&amp;gt;
&lt;span&gt;12&lt;/span&gt;         &amp;lt;form&amp;gt;
&lt;span&gt;13&lt;/span&gt;             &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;14&lt;/span&gt;               &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;exampleInputEmail1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;任务描述&amp;lt;/label&amp;gt;
&lt;span&gt;15&lt;/span&gt;               &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入你要添加的任务&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; v-model=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;newTask&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; required&amp;gt;
&lt;span&gt;16&lt;/span&gt;             &amp;lt;/div&amp;gt;
&lt;span&gt;17&lt;/span&gt;             &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;  
&lt;span&gt;18&lt;/span&gt;                 &amp;lt;button &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn btn-primary&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; v-on:click=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;addTask&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;添加任务&amp;lt;/button&amp;gt;
&lt;span&gt;19&lt;/span&gt;             &amp;lt;/div&amp;gt;
&lt;span&gt;20&lt;/span&gt;         &amp;lt;/form&amp;gt;
&lt;span&gt;21&lt;/span&gt;         &amp;lt;p&amp;gt;已完成的Task({{filterTask.length}})&amp;lt;/p&amp;gt;
&lt;span&gt;22&lt;/span&gt;         &amp;lt;ol &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;23&lt;/span&gt;             &amp;lt;template v-&lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;task in filterTask&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;24&lt;/span&gt;                 &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list-group-item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;  
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                    {{task.text}}
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 &amp;lt;/li&amp;gt;
&lt;span&gt;27&lt;/span&gt;             &amp;lt;/template&amp;gt;
&lt;span&gt;28&lt;/span&gt;         &amp;lt;/ol&amp;gt;
&lt;span&gt;29&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;30&lt;/span&gt;     &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; app = &lt;span&gt;new&lt;/span&gt; Vue({   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建Vue对象实例&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;             el:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;挂载DOM元素的ID&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            data: {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                tasks : [
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                     { text : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Vue.js - 是一套构建用户界面的渐进式框架&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, complete:&lt;span&gt;false&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                     { text : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Bootstrap 响应式布局&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, complete:&lt;span&gt;false&lt;/span&gt;&lt;span&gt; },
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                     { text : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Webpack前端资源模块化管理和打包工具&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, complete:&lt;span&gt;false&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                     { text : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Yarn 中文手册Yarn 是一个快速、可靠、安全的依赖管理工具&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, complete:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                     { text : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JavaScript语言精粹&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, complete:&lt;span&gt;false&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                     { text : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JavaScript高级程序设计&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, complete:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                ],
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                 newTask:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;程序员的修炼之道&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认值&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            methods:{
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                 addTask:function(&lt;span&gt;event&lt;/span&gt;){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加任务&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;                     &lt;span&gt;event&lt;/span&gt;&lt;span&gt;.preventDefault();
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.tasks.push({
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                         text: &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.newTask,
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                         complete: &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;                    });
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                     &lt;span&gt;this&lt;/span&gt;.newTask = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;                },
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                 editTask:function(task){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;编辑任务
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;移除当前点击task&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;                     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.removeTask(task);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;  
&lt;span&gt;57&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新vue实例中newTask值&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;                     &lt;span&gt;this&lt;/span&gt;.newTask =&lt;span&gt; task.text;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;                },
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;                 removeTask: function(task){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除任务
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指向Vue实例中的tasks&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt;                     _tasks = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.tasks;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;remove&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt; &lt;span&gt;                    _tasks.forEach(function(item, index){
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;(item.text ==&lt;span&gt; task.text){
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;                             _tasks.splice(index, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;                    })
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;                },
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;                 completeTask: function(task){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;任务完成状态&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt;                     task.complete = &lt;span&gt;true&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置任务完成的状态&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用于计算属性，属性的计算是基于它的依赖缓存(如vue实例中的tasks) 
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;只有当tasks数据变化时,才会重新取值&lt;/span&gt;
&lt;span&gt;76&lt;/span&gt; &lt;span&gt;            computed:{
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;                 remainTask:function(){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;筛选未完成的记录&lt;/span&gt;
&lt;span&gt;78&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.tasks.filter(function(task){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;filter过滤器&lt;/span&gt;
&lt;span&gt;79&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt; !&lt;span&gt;task.complete;
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;                    })
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;                },
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;                 filterTask:function(){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;筛选已完成的记录&lt;/span&gt;
&lt;span&gt;83&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.tasks.filter(function(task){
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; task.complete;
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt; &lt;span&gt;                    })
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt;     &amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:fsharp;gutter:false;&quot;&gt;
v-cloak 主要解决页面初始化慢，乱码的问题(如显示页面显示Vue取值表达式)；
v-show 指令简单的CSS属性的切换，适合频繁的切换 CSS属性从display的切换)
v-if 指令决定页面是否插入，相对v-show切换开销比较大
v-on:dblclick, v-on:click 页面事件的绑定
(如 v-on:dblclick(task) 方法名dblclick() 参数task 是的当前点击的tasks数组中的某一个对象
可以使用语法糖 v-on:click可简化成@click 如
&amp;lt;button v-on:click=&quot;removeTask(task)&quot;&amp;gt;&amp;lt;/button&amp;gt;  等价于 &amp;lt;==&amp;gt;
&amp;lt;button @click=&quot;removeTask(task)&quot;&amp;gt;&amp;lt;/button&amp;gt;
v-for 迭代指令 循环遍历数组 filter 主要用于筛选符合条件的数据/日期格式化等 
computed用于计算属性，属性的计算是基于它的依赖缓存(如vue实例中的tasks) 只有当tasks数据变化时,才会重新取值　
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 14 Nov 2017 13:53:00 +0000</pubDate>
<dc:creator>Avenstar</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zjf-1992/p/7834797.html</dc:identifier>
</item>
<item>
<title>Celery 源码解析四： 定时任务的实现 - 行者酱油君</title>
<link>http://www.cnblogs.com/makor/p/cron-task-implement-in-celery.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/makor/p/cron-task-implement-in-celery.html</guid>
<description>&lt;p&gt;在系列中的第二篇我们已经看过了 Celery 中的执行引擎是如何执行任务的，并且在第三篇中也介绍了任务的对象，但是，目前我们看到的都是被动的任务执行，也就是说目前执行的任务都是第三方调用发送过来的。可能你会有点奇怪，难道除了第三方调用发送，还有其他的调用发送方？是的，Celery 自身也会发送任务，在本文中，你将看到 Celery 如何利用自身的定时机制运行我们设置得定时任务，并且交给 Worker 执行。&lt;/p&gt;
&lt;h3 id=&quot;toc_0&quot;&gt;定时任务的定义&lt;/h3&gt;
&lt;p&gt;在开始讲解源码之前，我们不妨先看下我们平常都是怎么定义定时任务的，还是以我们习惯的 Demo 为例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171114213713687-662992817.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;定义就是这么简单，这么随意，但是，想要执行却是需要我们运行一个定时器，也就是在命令行中启动 &lt;strong&gt;Beater&lt;/strong&gt;，正常情况下你这么做就可以了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171114213713718-214019388.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;然后你就会看到一个个的定时任务被发送到 MQ 中，然后被 worker 消化。&lt;/p&gt;
&lt;h3 id=&quot;toc_1&quot;&gt;定时任务的启动&lt;/h3&gt;
&lt;p&gt;上面只是举了个如何使用的例子，但是，在 Celery 内部是如何处理这些任务才是我们需要关心的真正的点。回想一下在我们第一篇中讲 Worker 的启动流程的文章，有一个很重要的 BootStep 我们还没有讲到，那就是 Worker 的 &lt;strong&gt;Beat&lt;/strong&gt;，但是我在那里排的优先级却是 2，确实如此，我也是在讲完了所有 1 的优先级之后再讲它的，所以它可以说重要，也可以说不重要。&lt;/p&gt;
&lt;p&gt;既然都说开了，那么就不停下了，直接看看 &lt;strong&gt;Beat&lt;/strong&gt; 的实现，Beat 的实现可以说是非常简单，我们一眼就可以看完：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171114213713671-2042847892.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;核心还是在 &lt;code&gt;create&lt;/code&gt; 中咯，然后关键还是看 &lt;strong&gt;Line 199&lt;/strong&gt;，这里又牵扯到 &lt;strong&gt;celery.beat.EmbeddedService&lt;/strong&gt;，那我们基本上就可以确定在这了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171114213713671-1983813019.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;敲黑板了，注意看这里，&lt;strong&gt;Line 648&lt;/strong&gt; 就决定了是使用 &lt;strong&gt;线程&lt;/strong&gt; 还是 &lt;strong&gt;进程&lt;/strong&gt; 来运行 Beat 服务，但是我们应该清楚，无论是使用 &lt;strong&gt;线程&lt;/strong&gt; 还是 &lt;strong&gt;进程&lt;/strong&gt;，思路都是相差不远的，我们可以先找一个来看看。到这里，其实定时任务的启动工作就算是完成了，因为后面就是以独立的线程/进程执行了，主线程已经可以回去了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171114213713671-1518901945.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;h3 id=&quot;toc_2&quot;&gt;定时任务的执行&lt;/h3&gt;
&lt;p&gt;其实无论是用 &lt;strong&gt;Thread&lt;/strong&gt; 还是 &lt;strong&gt;Process&lt;/strong&gt;，这里都是构造的 &lt;code&gt;Service&lt;/code&gt; 对象，然后 &lt;code&gt;start&lt;/code&gt; 的，那么这个 &lt;code&gt;Service&lt;/code&gt; 对象具体是啥，其实也是在这个文件里面，但是我们不急着看它。在看它之前我先给大家描述一下这个文件里面几个关键的类的关系，方便大家了解：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171114213713671-80967174.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;这里就出现了 4 个类，它们之间的关系还是比较明显的，中枢部分就是 &lt;strong&gt;Scheduler&lt;/strong&gt;，然后 &lt;strong&gt;Service&lt;/strong&gt; 是驱动部分，最后的承载实体就是 &lt;strong&gt;SchedulerEntry&lt;/strong&gt; 了，明白这层关系之后，我们再来看看 &lt;strong&gt;Service&lt;/strong&gt; 是如何驱动的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171114213714156-790832683.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;这里的灵魂一句就是 &lt;strong&gt;Line 557&lt;/strong&gt; 中的这句循环了，我们知道这段代码是运行在独立的线程/进程中的，所以这里是个死循环，而循环的条件就是条件变量 &lt;strong&gt;shutdown&lt;/strong&gt; 被设置了。这里不断得尝试做一件事情，这件事情就是调用 &lt;code&gt;scheduler&lt;/code&gt; 的 &lt;code&gt;tick&lt;/code&gt; 函数，并且根据它返回的值等待片刻，然后继续执行，所以，关于这个 &lt;code&gt;tick&lt;/code&gt; 里面有什么东西，很值得我们关注，从上面的 UML 图中，我们可以看到 &lt;code&gt;tick&lt;/code&gt; 是在 Scheduler 中，所以直接可以找到它：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171114213714156-187587741.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;这段代码乍一看可能会很复杂，但是实质上很简单，其中 H 是一个最小堆，它的作用就是承载了所有我们设置得定时任务，而最小堆的特性就是堆顶的元素是最小的，在这里就是 &lt;code&gt;event&lt;/code&gt; 这个变量，那么你可能会问排序的依据是啥，排序的依据就是 &lt;strong&gt;Line 274&lt;/strong&gt; 的关键词 &lt;strong&gt;next_time_to_run&lt;/strong&gt;，celery 会先计算每个定时任务下一次执行的时间戳 - 当前时间戳，然后根据这个时间差值进行排序，毫无疑问，差值最小的就是下一次需要执行的任务了。&lt;/p&gt;
&lt;p&gt;同样在 &lt;strong&gt;Line 274&lt;/strong&gt; 这里还做了一个判断，那就是差值最小的那个任务现在应不应该执行 &lt;code&gt;is_due&lt;/code&gt;，如果应该执行，那么 &lt;strong&gt;Line 276 - Line 285&lt;/strong&gt; 就是执行的逻辑了，这里需要注意的一点就是 &lt;strong&gt;Line 277&lt;/strong&gt; 还对出堆的元素进行了判断，以防不是我们刚才要执行的元素，这里我猜测的原因是这个 H 并不是线程安全的，在我们执行定时任务的时候，还可能有其他线程/进程在修改它，所以需要进行一个判断。&lt;/p&gt;
&lt;p&gt;还有一个值得我们关注的点就是 &lt;strong&gt;Line 279&lt;/strong&gt; 中的提交定时任务，这个也可以说是我的此行的目的，但是，我们已经有了普通异步任务的经验，相信这里不会让我们太吃惊。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171114213714156-1391957503.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;正如所期待的，这里只是想将 &lt;code&gt;SchedulerEntry&lt;/code&gt; 转换为 &lt;code&gt;Task&lt;/code&gt;，然后至于 &lt;code&gt;Task&lt;/code&gt; 怎么提交的异步任务，相信看过 第三篇文章的同学已经不陌生了，可以 pass 了。&lt;/p&gt;
&lt;p&gt;那么到这里我们也算是将定时任务的执行看完了。&lt;/p&gt;
&lt;h3 id=&quot;toc_3&quot;&gt;定时任务的持久化&lt;/h3&gt;
&lt;p&gt;虽然定时任务的执行我们是看完了，但是，定时任务还有一个很重要的地方我们还没有看，那就是持久化。在 Celery 中，定时任务的执行并不会因为我们重启了 Celery 而失效，反而在重启 Celery 之后，Celery 会根据上一次关闭之前的执行状态，重新计算新的执行周期，而这里计算的前提就是能够获取旧的执行信息，而在 Scheduler 中，这些信息都是默认保存在文件中的。&lt;/p&gt;
&lt;p&gt;Celery 默认的存储是通过 Python 默认的 shelve 库实现的，shelve 是一个类似于字典对象的数据库，我们可以通过调用 &lt;code&gt;sync&lt;/code&gt; 命令在磁盘和内存中同步数据。当然，你也可以自定义存储的位置，但是目前来看这个 &lt;code&gt;store&lt;/code&gt; 存储适合 &lt;code&gt;PersistentScheduler&lt;/code&gt; 绑定的，所以我个人更建议通过自定义 &lt;code&gt;Scheduler&lt;/code&gt; 来实现，我曾经在 Github 开源了一个基于 Redis 的实现，感兴趣的同学可以看一下，地址是：&lt;a href=&quot;https://github.com/yetship/celerybeatredis&quot;&gt;celery redis beat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所以这个问题就变成了如何自定义 Scheduler，我根据自己的经验，总结了以下步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;继承 &lt;code&gt;Scheduler&lt;/code&gt; 类，实现构造函数&lt;/li&gt;
&lt;li&gt;实现 &lt;code&gt;Scheduler&lt;/code&gt; 的 &lt;code&gt;tick()&lt;/code&gt;、&lt;code&gt;should_sync()&lt;/code&gt;、&lt;code&gt;_do_sync()&lt;/code&gt;、&lt;code&gt;close()&lt;/code&gt; 等方法&lt;/li&gt;
&lt;li&gt;启动的时候指定 &lt;code&gt;Scheduler&lt;/code&gt; 类的包路径即可&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;toc_4&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;在本篇文章中，我们以 Beat 为触发点，讲解了 Celery 关于定时任务的定义、启动、执行和持久化。通过本篇文章的介绍，应该可以自己定义或者修改出更好得定时调度器了，同时我们也知道保存在当前目录下的定时文件有什么用了。&lt;/p&gt;
</description>
<pubDate>Tue, 14 Nov 2017 13:37:00 +0000</pubDate>
<dc:creator>行者酱油君</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/makor/p/cron-task-implement-in-celery.html</dc:identifier>
</item>
<item>
<title>vue 2 仿IOS 滚轮选择器 从入门到精通 （一） - zhanglearning</title>
<link>http://www.cnblogs.com/zhangkunweb/p/iosSelect.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangkunweb/p/iosSelect.html</guid>
<description>&lt;p&gt;大家好，由于最近从事的是微信公众号和APP内嵌 H5开发，避免不了开发一些和native相同的操作功能，就如接下来说的 仿IOS滚轮选择器。github源码链接 &lt;a href=&quot;https://github.com/zhangKunUserGit/vue-component&quot; target=&quot;_blank&quot;&gt;https://github.com/zhangKunUserGit/vue-component&lt;/a&gt;大家可以下载运行&lt;/p&gt;
&lt;p&gt;先来个截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/978387/201711/978387-20171114164808999-2014115187.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来具体介绍如何实现的。能力有限避免不了错误请指出，有问题QQ邮箱 1766597067@qq.com&lt;/p&gt;

&lt;p&gt;先来屡一下需求：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.移动端用户手上下滑动，内容上下移动，用户手离开数字按照惯性移动一段距离。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.当停止移动后，选中一个文字并且文字高亮，上面的值会变成你选中的文字。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.可以连续滚动。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;好了我们知道需求了，开始写吧。&lt;/p&gt;
&lt;p&gt;写之前，想来一句 “上海天真蓝，可我在写代码”。&lt;/p&gt;
&lt;p&gt;说起滚动，不得不提css3的 &lt;strong&gt; transform-style: preserve-3d;&lt;/strong&gt; 和&lt;strong&gt; backface-visibility: hidden;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）transform-style 属性规定如何在 3D 空间中呈现被嵌套的元素。值如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/978387/201711/978387-20171114170244749-2090707686.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们使用preserve-3d 是让我们的值列表呈现3d效果，他是写在列表父级；&lt;/p&gt;
&lt;p&gt;（2）backface-visivility 属性定义当元素不面向屏幕时是否可见。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/978387/201711/978387-20171114170544312-2124600348.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们使用hidden是背面不可见的，他是写在列表上&lt;/p&gt;
&lt;p&gt;不过只有他们是无法完成这个艰巨界面的。只是这两个比较少见并少用，在此记录一下。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;结合上面的知识点那我们怎么实现滚筒呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我实现的方法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;80&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    *&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    .wrapper&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    ul&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      transform-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; preserve-3d&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 34px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    li&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      backface-visibility&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; hidden&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 34px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;wrapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;transform: rotate3d(1, 0, 0, 80deg) translate3d(0, 0, 100px)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;27&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;transform: rotate3d(1, 0, 0, 60deg) translate3d(0, 0, 100px)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;28&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;transform: rotate3d(1, 0, 0, 40deg) translate3d(0, 0, 100px)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;29&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;transform: rotate3d(1, 0, 0, 20deg) translate3d(0, 0, 100px)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;30&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;transform: rotate3d(1, 0, 0, 0deg) translate3d(0, 0, 100px)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;transform: rotate3d(1, 0, 0, -20deg) translate3d(0, 0, 100px)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;transform: rotate3d(1, 0, 0, -40deg) translate3d(0, 0, 100px)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;transform: rotate3d(1, 0, 0, -60deg) translate3d(0, 0, 100px)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;transform: rotate3d(1, 0, 0, -80deg) translate3d(0, 0, 100px)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到我是用到了定位，rotate3d 和 translate3d， 可能你会问为什么要用到translate3d 并且第三个参数写100px？&lt;/p&gt;
&lt;p&gt;　　我主要是用到的定位，都定位到一起了，也就是一个黑点了，哈哈。。。 然后用 transform 的 rotate3d  统一 沿X轴旋转元素 到一定的角度，然而我们要做滚筒，滚筒需要半径，所以我用translate3d 拉伸 Z 轴 （垂直屏幕）100px,&lt;/p&gt;
&lt;p&gt;这样元素就沿着我拉伸前的原点旋转，半径是 100px; 大家可以复制代码运行一下，看看效果，如何有其他方法分享出来吧，共同学习进步。&lt;/p&gt;

&lt;p&gt;说了这么多，跟vue有什么关系呢？ 哈哈。。。你猜？&lt;/p&gt;

&lt;p&gt;滚动用什么呢？ 我之前用过 scroll  ios 需要加上  -webkit-overflow-scrolling: touch; 才能触发onscroll, 但是那种做法我试了一下，太麻烦，有滚动条，太垃圾。&lt;/p&gt;
&lt;p&gt;这里我们用 &lt;strong&gt;touchstart / touchmove / touchend&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt; mounted() {
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$el.addEventListener('touchstart', &lt;span&gt;this&lt;/span&gt;.listenerTouchStart, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$el.addEventListener('touchmove', &lt;span&gt;this&lt;/span&gt;.listenerTouchMove, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$el.addEventListener('touchend', &lt;span&gt;this&lt;/span&gt;.listenerTouchEnd, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
 },
 methods: {
　　　　listenerTouchStart(ev) {
        ev.stopPropagation();
        ev.preventDefault();
        isInertial &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.finger.startY = ev.targetTouches[0&lt;span&gt;].pageY;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.finger.prevMove = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.finger.currentMove;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.finger.startTime =&lt;span&gt; Date.now();
      },
      listenerTouchMove(ev) {
        ev.stopPropagation();
        ev.preventDefault();
        const move &lt;/span&gt;= (&lt;span&gt;this&lt;/span&gt;.finger.startY - ev.targetTouches[0].pageY) + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.finger.prevMove;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.finger.currentMove =&lt;span&gt; move;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$refs.wheel.style.transform = `rotate3d(1, 0, 0, ${(move / lineHeight) *&lt;span&gt; singleDeg}deg)`;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.updateRange(Math.round(move /&lt;span&gt; lineHeight));
      },
      listenerTouchEnd(ev) {
        ev.stopPropagation();
        ev.preventDefault();
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.finger.endY = ev.changedTouches[0&lt;span&gt;].pageY;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.finger.endTime =&lt;span&gt; Date.now();
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getInertiaDistance();
      },
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们在 start 时，缓存手触摸的的Y轴坐标 ，startTime 是为了后面touchend时，计算初速度  （一定距离 时间越短 速度越大，惯性滑动越长）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
       * 求移动速度（v = s / t），判断用户操作快慢，从而得到惯性的滑动距离
       &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
      getInertiaDistance() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 移动距离&lt;/span&gt;
        const s = &lt;span&gt;this&lt;/span&gt;.finger.startY - &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.finger.endY;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 移动时间&lt;/span&gt;
        const t = &lt;span&gt;this&lt;/span&gt;.finger.endTime - &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.finger.startTime;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 移动速度&lt;/span&gt;
        const v = s /&lt;span&gt; t;
        const absV &lt;/span&gt;=&lt;span&gt; Math.abs(v);
        isInertial &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.inertia(absV, Math.floor(absV / v), 0&lt;span&gt;);
      },
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
       * 用户结束滑动，应该慢慢放慢，最终停止。从而需要 a(加速度)
       * @param start 开始速度
       * @param position 速度方向，值: 正负1
       * @param target 结束速度
       &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
      inertia(start, position, target) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (start &amp;lt;= target || !&lt;span&gt;isInertial) {
          &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.animate.stop();
          &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.finger.prevMove = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.finger.currentMove;
          &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.updateRange(Math.round(&lt;span&gt;this&lt;/span&gt;.finger.currentMove /&lt;span&gt; lineHeight));
          &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.getSelectValue(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.finger.currentMove);
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这段时间走的位移 S = vt + 1/2at^2;&lt;/span&gt;
        const move = (position * start * (1000 / 60)) + (0.5 * a * (1000 / 60) * (1000 / 60)) + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.finger.currentMove;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据求末速度公式： v末 = v初 + at&lt;/span&gt;
        const newStart = (position * start) + (a * (1000 / 60&lt;span&gt;));
        let moveDeg &lt;/span&gt;= (move / lineHeight) *&lt;span&gt; singleDeg;
        let actualMove &lt;/span&gt;=&lt;span&gt; move;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 已经到达目标&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (newStart &amp;lt;=&lt;span&gt; target) {
          moveDeg &lt;/span&gt;= Math.round(move / lineHeight) *&lt;span&gt; singleDeg;
          actualMove &lt;/span&gt;= Math.round(move / lineHeight) *&lt;span&gt; lineHeight;
          &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$refs.wheel.style.transition = 'transform 700ms cubic-bezier(0.19, 1, 0.22, 1)'&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
          &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$refs.wheel.style.transition = ''&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.finger.currentMove =&lt;span&gt; actualMove;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$refs.wheel.style.transform = `rotate3d(1, 0, 0&lt;span&gt;, ${moveDeg}deg)`;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.updateRange(Math.round(&lt;span&gt;this&lt;/span&gt;.finger.currentMove /&lt;span&gt; lineHeight));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.animate.start(&lt;span&gt;this&lt;/span&gt;.inertia.bind(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, newStart, position, target));
      }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里动画是 requestAnimationFrame  我稍微封装了一下，里面用到的公式我已经标注；&lt;/p&gt;
&lt;p&gt;我们需要连续滚动，所以界面需要连续刷新，不断更新数字（可能有更好的方法吧）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;computed: {
      scrollValues() {
        const result &lt;/span&gt;=&lt;span&gt; [];
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (let i = &lt;span&gt;this&lt;/span&gt;.range.start; i &amp;lt;= &lt;span&gt;this&lt;/span&gt;.range.end; i += 1&lt;span&gt;) {
          result.push({
            value: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getRangeData(i),
            index: i, &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里是旋转参数&lt;/span&gt;
&lt;span&gt;          });
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
      },
      getListTop() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
          top: `${radius &lt;/span&gt;- Math.round(lineHeight / 2&lt;span&gt;)}px`,
          height: `${lineHeight}px`
        };
      },
      getWrapperHeight() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
          height: `${&lt;/span&gt;2 *&lt;span&gt; radius}px`,
        };
      },
      getCoverStyle() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
          backgroundSize: `&lt;/span&gt;100% ${radius - Math.round(lineHeight / 2&lt;span&gt;)}px`,
        };
      },
      getDividerStyle() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
          top: `${radius &lt;/span&gt;- Math.round(lineHeight / 2&lt;span&gt;)}px`,
          height: `${lineHeight &lt;/span&gt;- 2&lt;span&gt;}px`,
        };
      },
      animate() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Animate();
      }
    },&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 最后我把所有的变量提取出来，到时候能根据用户要求显示不同情况&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
　const a = -0.003; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 加速度&lt;/span&gt;
  const radius = 100; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 半径&lt;/span&gt;
  const lineHeight = 36; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文字行高&lt;/span&gt;
  let isInertial = &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否正在惯性滑动&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据三角形余弦公式&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 反余弦得到弧度再转换为度数,这个度数是单行文字所占有的。&lt;/span&gt;
  let deg = Math.round((Math.acos((((radius * radius) + (radius * radius)) - (lineHeight * lineHeight)) / (2 * radius * radius)) * 180) /&lt;span&gt; Math.PI);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; deg这个值须360能整除，因为当滚动列占满一周后可以再次均匀的覆盖在上一周文字上；滚动时不会出现错位&lt;/span&gt;
  &lt;span&gt;while&lt;/span&gt; (360 % deg !== 0 &amp;amp;&amp;amp; deg &amp;lt;= 360&lt;span&gt;) {
    deg &lt;/span&gt;+= 1&lt;span&gt;;
  }
  const singleDeg &lt;/span&gt;=&lt;span&gt; deg;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 半圆下的内容条数&lt;/span&gt;
  const space = Math.floor((360 / singleDeg) / 2);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后附上github源码链接 &lt;a href=&quot;https://github.com/zhangKunUserGit/vue-component&quot; target=&quot;_blank&quot;&gt;https://github.com/zhangKunUserGit/vue-component&lt;/a&gt;大家可以下载运行&lt;/p&gt;
</description>
<pubDate>Tue, 14 Nov 2017 13:34:00 +0000</pubDate>
<dc:creator>zhanglearning</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangkunweb/p/iosSelect.html</dc:identifier>
</item>
</channel>
</rss>