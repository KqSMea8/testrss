<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>生成器 - 张丶耀庆</title>
<link>http://www.cnblogs.com/littlesky1124/p/8922746.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/littlesky1124/p/8922746.html</guid>
<description>&lt;p&gt;   &lt;span&gt;生成器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       通过列表生成式，我的可以直接创建一个列表，但是受到内存限制，列表容量肯定是有限的，而且创建&lt;/span&gt;&lt;span&gt;一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的&lt;code&gt;[]&lt;/code&gt;改成&lt;code&gt;()&lt;/code&gt;，就创建了一个generator：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;L = [X * X for x in range(10)]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;print(l)&lt;/span&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;         &lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;9&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;16&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;25&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;36&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;49&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;64&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;81&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;生成器就创建了。&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;g = (x * x for x in range(10))&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;print(g)&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;lt;generator &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;object&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;&amp;lt;genexpr&amp;gt; at &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0x1022ef630&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;创建&lt;code&gt;L&lt;/code&gt;和&lt;code&gt;g&lt;/code&gt;的区别仅在于最外层的&lt;code&gt;[]&lt;/code&gt;和&lt;code&gt;()&lt;/code&gt;，&lt;code&gt;L&lt;/code&gt;是一个list，而&lt;code&gt;g&lt;/code&gt;是一个generator。&lt;/p&gt;
&lt;p&gt;我们可以直接打印出list的每一个元素，但我们怎么打印出generator的每一个元素呢？&lt;/p&gt;
&lt;p&gt;如果要一个一个打印出来，可以通过&lt;code&gt;next()&lt;/code&gt;函数获得generator的下一个返回值：&lt;/p&gt;
&lt;p&gt;next(g)&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;next(g)&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;next(g)&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;next(g)&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;next(g)&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;next(g)&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;next&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(g)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;Traceback (most recent call last):&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;  &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;File&lt;/code&gt; &lt;code class=&quot;python string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, line &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;in&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;&amp;lt;module&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;StopIteration&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;        generator保存的是算法，每次调用&lt;code&gt;next(g)&lt;/code&gt;，就计算出&lt;code&gt;g&lt;/code&gt;的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出&lt;code&gt;StopIteration&lt;/code&gt;的错误。&lt;/p&gt;
&lt;p&gt;       当然，上面这种不断调用&lt;code&gt;next(g)&lt;/code&gt;实在是太变态了，正确的方法是使用&lt;code&gt;for&lt;/code&gt;循环，因为generator也是可迭代对象：&lt;/p&gt;
&lt;p&gt;      g  = (x * x for x in range(10))&lt;/p&gt;
&lt;p&gt;           for n in g: &lt;/p&gt;
&lt;p&gt;                 print(n)&lt;/p&gt;
&lt;p&gt; 0 1 2 3 4 5  6  7  8 9 &lt;/p&gt;




&lt;div class=&quot;line number24 index23 alt1&quot; readability=&quot;51&quot;&gt;
&lt;p&gt;所以，我们创建了一个generator后，基本上永远不会调用&lt;code&gt;next()&lt;/code&gt;，而是通过&lt;code&gt;for&lt;/code&gt;循环来迭代它，并且不需要关心&lt;code&gt;StopIteration&lt;/code&gt;的错误。&lt;/p&gt;
&lt;p&gt;generator非常强大。如果推算的算法比较复杂，用类似列表生成式的&lt;code&gt;for&lt;/code&gt;循环无法实现的时候，还可以用函数来实现。&lt;/p&gt;
&lt;p&gt;比如，著名的斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由前两个数相加得到：&lt;/p&gt;
&lt;p&gt;1, 1, 2, 3, 5, 8, 13, 21, 34, ...&lt;/p&gt;
&lt;p&gt;斐波拉契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：&lt;/p&gt;
&lt;p&gt;   def fib(mix):&lt;/p&gt;
&lt;p&gt;        n,x,y, = 0,0,1&lt;/p&gt;
&lt;p&gt;        while n &amp;lt; mix:&lt;br/&gt;              print(b)&lt;/p&gt;
&lt;p&gt;              a,b = b, a+b&lt;/p&gt;
&lt;p&gt;              n = n+1&lt;/p&gt;
&lt;p&gt;        return 'ss'&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注意&lt;/em&gt;，赋值语句&lt;/p&gt;
&lt;p&gt;a,b = b, a+b&lt;/p&gt;
&lt;p&gt;相当于：&lt;/p&gt;
&lt;p&gt;t = (b,a+b)  t 是一个tuple&lt;/p&gt;
&lt;p&gt;a = t[0]&lt;/p&gt;
&lt;p&gt;b = t[1]&lt;/p&gt;
&lt;p&gt;但不必显式写出临时变量t就可以赋值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;    fib&lt;/code&gt;函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似generator。&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;line number24 index23 alt1&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
def fib(max):
    n,a,b = 0,0,1

    while n &amp;lt; max:
        #print(b)
        yield  b
        a,b = b,a+b

        n += 1

    return 'done' 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这就是定义generator的另一种方法。如果一个函数定义中包含&lt;code&gt;yield&lt;/code&gt;关键字，那么这个函数就不再是一个普通函数，而是一个generator：&lt;/p&gt;

&lt;p&gt;       这里，最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，遇到&lt;code&gt;return&lt;/code&gt;语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用&lt;code&gt;next()&lt;/code&gt;的时候执行，遇到&lt;code&gt;yield&lt;/code&gt;语句返回，再次执行时从上次返回的&lt;code&gt;yield&lt;/code&gt;语句处继续执行。&lt;/p&gt;
&lt;div class=&quot;line number24 index23 alt1&quot; readability=&quot;30.5&quot;&gt;     
&lt;p&gt;&lt;code&gt;  在上面fib&lt;/code&gt;的例子，我们在循环过程中不断调用&lt;code&gt;yield&lt;/code&gt;，就会不断中断。当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。&lt;/p&gt;
&lt;p&gt;     同样的，把函数改成generator后，我们基本上从来不会用&lt;code&gt;next()&lt;/code&gt;来获取下一个返回值，而是直接使用&lt;code&gt;for&lt;/code&gt;循环来迭代：&lt;/p&gt;
&lt;p&gt;     但是用&lt;code&gt;for&lt;/code&gt;循环调用generator时，发现拿不到generator的&lt;code&gt;return&lt;/code&gt;语句的返回值。如果想要拿到返回值，必须捕获&lt;code&gt;StopIteration&lt;/code&gt;错误，返回值包含在&lt;code&gt;StopIteration&lt;/code&gt;的&lt;code&gt;value&lt;/code&gt;中：&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;g &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;  &lt;code class=&quot;python plain&quot;&gt;fib(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;6&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt; &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;while&lt;/code&gt; &lt;code class=&quot;python color1&quot;&gt;True&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;     &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;try&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;         x &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;next&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(g)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;         &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;print&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'g:'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, x)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;     &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;except&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;StopIteration as e:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;         &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;print&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'Generator return value:'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, e.value)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;         &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;break&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;还可通过yield实现在单线程的情况下实现并发运算的效果&lt;/p&gt;

&lt;div class=&quot;line number8 index7 alt1&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
import time
def consumer(name):
    print(&quot;%s 准备吃包子啦!&quot; %name)
    while True:
       baozi = yield

       print(&quot;包子[%s]来了,被[%s]吃了!&quot; %(baozi,name))


def producer(name):
    c = consumer('A')
    c2 = consumer('B')
    c.__next__()
    c2.__next__()
    print(&quot;老子开始准备做包子啦!&quot;)
    for i in range(10):
        time.sleep(1)
        print(&quot;做了2个包子!&quot;)
        c.send(i)
        c2.send(i)

producer(&quot;alex&quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 23 Apr 2018 15:32:00 +0000</pubDate>
<dc:creator>张丶耀庆</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/littlesky1124/p/8922746.html</dc:identifier>
</item>
<item>
<title>一种关于缓存数据何时更新的解决思路 - 码农阿宇</title>
<link>http://www.cnblogs.com/CoderAyu/p/8922441.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CoderAyu/p/8922441.html</guid>
<description>&lt;p&gt;和大家一样，我有每天逛逛博客园的习惯，今天在博客园看到了“一只攻城狮”写的《&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; title=&quot;初遇 Asp.net MVC 数据库依赖缓存那些事儿&quot; href=&quot;http://www.cnblogs.com/MaMaNongNong/p/8904022.html&quot; target=&quot;_blank&quot;&gt;初遇 Asp.net MVC 数据库依赖缓存那些事儿&lt;/a&gt;》。该朋友利用.Net的SqlCacheDependency缓存依赖，解决了缓存数据何时更新的问题。&lt;/p&gt;
&lt;p&gt;但是该思路具有一定的局限性，如：要利用数据库的存储过程，来通知客户端更新缓存，这就离不开微软的Sql Server那套体制，如果利用别的数据库，恐怕就没有那么好实现了。且存储过程需要在数据库中执行，不利于将业务向服务程序转移。&lt;/p&gt;

&lt;p&gt;程序员比较忌讳造轮子，相信程序员写博客也是如此，因此，我还是想站在巨人的肩膀上，借用“一只攻城狮”在《&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; title=&quot;初遇 Asp.net MVC 数据库依赖缓存那些事儿&quot; href=&quot;http://www.cnblogs.com/MaMaNongNong/p/8904022.html&quot; target=&quot;_blank&quot;&gt;初遇 Asp.net MVC 数据库依赖缓存那些事儿&lt;/a&gt;》写的背景，来引出我想说的内容，如果“一只攻城狮”觉得有何不妥之处，请联系我做下架处理。&lt;/p&gt;


&lt;p&gt;--------------------------------------------------------------引用开始-----------------------------------------------&lt;/p&gt;
&lt;p&gt;最近做一个非常简单的功能，就是使用ajax请求的方式从服务端请求一段下拉表的数据。&lt;/p&gt;
&lt;p&gt;　　以前也有做过这个功能，只不过这次做这个功能的时候冒出了一个想法：&lt;/p&gt;
&lt;p&gt;　　我请求的这段数据它是一段相对比较固定的数据，也就是说它不怎么改变，也许几个月才会改变一次。由于这种数据的变化周期很长，所以以前做这种功能的时候，会使用缓存进行优化，可以直接从缓存中读取数据，避免每一次接收了ajax请求后都要向数据库要数据，减少服务器与数据库之间的交互，减轻数据库服务器的压力。但是问题来了，&lt;strong&gt;数据的变化周期再长终究是要变化的，当数据库中的数据变化的时候你就要对旧有的缓存内容进行移除（remove）操作。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;                 .......................{中间省略XXX字，中间作者大致讲诉了设置了缓存定期过期}.................................&lt;/p&gt;
&lt;p&gt;　　缓存定期过期有一个坏处：在还没到达过期时间的这段时间里，请求的数据依然是原来的缓存中数据，如果数据库数据在这期间进行了更新，那么缓存数据和数据库中的数据并不一致。&lt;/p&gt;
&lt;p&gt;　　其中设置的绝对过期时间点要根据实际的数据刷新的可容忍度来进行设定，而恰好在我的这个应用场景中的可容忍度最不能把握，它要求的是 当数据库中的数据改变以后，缓存中对应的数据在&lt;strong&gt;下一次请求结束后&lt;/strong&gt;一定要马上跟着改变，当然你也可以把过期时间尽可能的调小，调到一秒。当然，这样的话还是要频繁的向数据库进行请求，那不是背离了我们原本使用缓存优化的目的了吗？&lt;/p&gt;

&lt;p&gt;　　所以现在的问题是：&lt;strong&gt;有没有一种方法能让数据库和服务器程序建立一种联系，这种联系好比是一种“心灵感应”，当数据库表中的数据发生变化的时候，马上就能让服务器中的对应的缓存项“感应”到这个变化，从而让原来的缓存项失效呢？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;--------------------------------------------------------------引用结束------------------------------------------&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　综上所述，客户端（或浏览器）缓存数据的痛点在于，数据何时更新？如何让客户端知道，服务端数据变了？&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;分四步走。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;第一步，初次请求数据时&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1293736/201804/1293736-20180423222859593-1714383265.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;客户端在初次请求数据时，会把客户端想要的数据连同数据的版本号（数据上次的更新时间）一起发送给客户端，数据版本号时存在Redis数据库中的，我们知道，Redis中的数据存储在内存中且读取数据比关系型数据库快的不是一点点。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;客户端收到数据后，会把收到的数据和数据版本号缓存下来。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;第二步，当数据库数据更新时&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1293736/201804/1293736-20180423223420231-346262883.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当数据库数据更新时，服务端在更新关系型数据库的同时会把Redis的数据版本号更新为当前时间。&lt;/p&gt;
&lt;h2&gt;第三步，客户端用数据时：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1293736/201804/1293736-20180423223726495-21014758.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;客户端需要使用缓存数据时，会向服务端索要数据版本号（也就是数据上次的更新时间），如果该数据版本号与客户端缓存的数据版本号一致，那么，客户端缓存的数据时安全可用的，如果不一致，那么说明数据已经更新了，客户端把新的版本号缓存下来并重新获取。那么，执行第四步。&lt;/p&gt;
&lt;h2&gt;第四步，重新获取数据&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1293736/201804/1293736-20180423224107815-1458172786.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;重新获取数据时，就不用携带版本号了，客户端在第三步时已经获取并缓存下来了。&lt;/p&gt;


&lt;p&gt;好处：&lt;/p&gt;
&lt;p&gt;1.当请求的数据量交大但是变动又不频繁时，客户端与服务端不必频繁地交换大型数据，只需交换数据版本号即可。&lt;/p&gt;
&lt;p&gt;2.数据版本号存储在Redis数据库中，不仅读取速度快，而且数据量小，所以响应快，交换成本低。&lt;/p&gt;
&lt;p&gt;3.该思路通用性强，适合任何类型的关系型数据库与Nosql数据库搭配使用。&lt;/p&gt;
&lt;p&gt;弊端：&lt;/p&gt;
&lt;p&gt;1.客户端在每次使用数据前，都要与服务端进行一次通讯进行校验数据版本号。&lt;/p&gt;

&lt;p&gt;好与坏不是绝对的，适合的才是最好的，以上是我的解决思路，大家有不同观点，欢迎留言讨论，也感谢“一只攻城狮”提供讨论背景！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 23 Apr 2018 14:54:00 +0000</pubDate>
<dc:creator>码农阿宇</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CoderAyu/p/8922441.html</dc:identifier>
</item>
<item>
<title>salesforce lightning零基础学习(二) lightning 知识简单介绍----lightning事件驱动模型 - zero.zhang</title>
<link>http://www.cnblogs.com/zero-zyq/p/8733056.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zero-zyq/p/8733056.html</guid>
<description>&lt;p&gt;看此篇博客前或者后，看一下trailhead可以加深印象以及理解的更好：&lt;a href=&quot;https://trailhead.salesforce.com/modules/lex_dev_lc_basics&quot; target=&quot;_blank&quot;&gt;https://trailhead.salesforce.com/modules/lex_dev_lc_basics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;做过classic的朋友知道，前台和后台交互可以在页面上使用多种方式，比如在VF page中apex:commandButton等标签绑定action，使用actionFunction,使用ajax toolkit，使用VF Remoting或者使用action:support多种方式实现和后台的交互。如果你习惯性的使用了classic，那么你在lightning学习中可能有一点点的不适，最多的应该是没法在lightning component中使用js了，因为lightning封装了他的framework，这样的好处为后期更容易维护，不必要因为维护别人的项目各种读别人的rendered/reRender等恶心的事情，因为好多重新渲染元素的操作都在controller.js中处理了。当然，上面的都是泛泛而谈，下面细节的说一下lightning的事件驱动模型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一.Lightning模型介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lightning事件驱动模型如下图所示：&lt;/p&gt;
&lt;p&gt;1.用户在component标签上点击按钮或者触发某个自定义事件&lt;/p&gt;
&lt;p&gt;2.javascript controller中的action获取当前的事件源，处理业务逻辑，细节的对于后台的操作在helper中执行；&lt;/p&gt;
&lt;p&gt;3.javascript helper中执行和server端的交互，调用后台apex controller，并在apex controller执行结束后调用回调函数去处理后期的业务逻辑以及更新UI等操作；&lt;/p&gt;
&lt;p&gt;4.server-controller 使用apex代码处理业务逻辑以及和数据库的交互，写法和VF Remoting的后台写法类似，区别为需要在方法上添加标签@AuraEnabled。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/910966/201804/910966-20180407131635711-20298498.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上一篇内容说过一个component bundle包含了很多内容，此篇通过上面的事件驱动模型主要说一下以下三个元素：Component(.cmp) / Controller js(.js) / Helper js(.js)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二. Component介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们在Apex中经常使用Visualforce Component做一些公用组件，但是lightning中的component和刚才说的不是一个内容。一个component是一个包含了定义着的资源信息，标签，也可以包含表达式或者是其他可选的资源，比如controller属性信息，stylesheet等信息。lightning component中头标签为&lt;span class=&quot;token operator&quot;&gt;&amp;lt;aura&lt;span class=&quot;token operator&quot;&gt;:component&lt;span class=&quot;token operator&quot;&gt;&amp;gt;，所有的内容均需要在此内容中编写。一个component中也可以嵌套其他的component，父子的component引用时，父的style sheet样式会影响到子，使用时需要注意此点。针对Component更重要的是这个东西用在哪里，怎么用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&lt;em&gt;1.用在哪里：&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;Lightning Component可以用在很多的地方，如下图所示。头标签的属性实现不同的接口，则可以将此component用于不同地方。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/910966/201804/910966-20180414121822341-729106448.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;implements=&quot;force:appHostable&quot; ： 创建一个componet用于自定义的lightning tab；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;implements=&quot;flexipage:availableForAllPageTypes&quot;and access=&quot;global&quot;    创建一个component用于lightning page或者用于lightning app builder；&lt;/li&gt;
&lt;li&gt;implements=&quot;flexipage:availableForRecordHome,force:hasRecordId&quot; and access=&quot;global&quot;    创建一个component用于lightning的记录home page，此种方式可以直接应用当前记录的ID；&lt;/li&gt;
&lt;li&gt;implements=&quot;forceCommunity:availableForAllPageTypes&quot; and access=&quot;global&quot;      创建一个component用于Community Builder；&lt;/li&gt;
&lt;li&gt;&lt;em&gt;implements=&quot;force:lightningQuickAction&quot;     &lt;/em&gt; 创建一个component用于quick action。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;2.怎么用：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;1) &lt;strong&gt;创建Lightning Component&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Lightning  Component可以有多种创建的方式，使用sublime创建，使用develop console或者idea，本人常用sublime创建。在File-&amp;gt;New-&amp;gt;Lightning Component便可以新建一个lightning component。在新建的lightning component名称处右键，便可以新建出来此lightning component bundle其他的组件，比如controller.js,helper.js等组件，如下图所示。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/910966/201804/910966-20180414115159248-719009163.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2) Lightning Component 基础知识&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;和classic 中的visualforce component很相像，一个lightning component可以嵌套另外一个lightning component，如果嵌套的component含有命名空间，则引入的方式为&amp;lt;yourNamespace:yourComponent/&amp;gt;如果没有设置命名空间，则默认的命名空间为c,即&amp;lt;c:yourComponent/&amp;gt;&lt;/p&gt;
&lt;p&gt;一个Lightning Component文件中可以引入多种元素，常用的元素如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&amp;lt;aura:attribute&amp;gt;:此标签用于声明Component中需要引用的内容信息的变量。&lt;/li&gt;
&lt;li&gt;&amp;lt;aura:registerEvent&amp;gt;:此标签用于引入自定义的注册事件。&lt;/li&gt;
&lt;li&gt;&amp;lt;aura:handler&amp;gt;:此标签用于处理自定义的注册事件以及标准的事件，比如初始化（init）等handler。&lt;/li&gt;
&lt;li&gt;&amp;lt;ltng:require&amp;gt;: 此标签用于引入静态资源&lt;/li&gt;
&lt;li&gt;元素标签：lightning封装了很多元素标签，常用的可以归纳为容器(container)元素，按钮(button)元素，导航(navigation)元素，可视化(Visual)元素，字段(Field)元素以及格式化(format)元素。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&amp;lt;aura:attribute&amp;gt;:&lt;/strong&gt;做过classic的朋友都知道，一个页面，后台使用成员变量，前台VF page可以用它来渲染元素。在lightning中，Component attribute很像apex中的成员变量，他们可以使用表达式语句应用在组件元素标签中进行信息渲染。&lt;/p&gt;
&lt;p&gt;attribute必须有两个属性：name以及type， aura:attribute写法如下.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;testAttribute&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;string&quot;&lt;/span&gt;&lt;span&gt; default&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;
test for {!v.testAttribute}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的demo声明了一个类型为string的attribute，名称为testAttribute。组件如果引用相关的属性信息，引用方式为{!v. + attributeName}。lightning中，&lt;span&gt;使用&quot;v&quot;去访问attribute内容&lt;/span&gt;（v可以简单的理解成view）。如果想要在后面设置attribute的值，也可以通过&amp;lt;aura:set attribute=&quot;anotherTestAttribute&quot;&amp;gt;来更改attribute值，aura:set通常可以和&amp;lt;aura:if&amp;gt;标签一起使用，有兴趣的可以自行查看。&lt;/p&gt;
&lt;p&gt; attribute的type基本涵盖了所有的类型，type取值如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本类型：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Boolean：定义一个布尔类型attribute。eg:&amp;lt;aura:attribute name=&quot;showDetail&quot; type=&quot;Boolean&quot; /&amp;gt;&lt;/li&gt;
&lt;li&gt;Date：定义一个日期类型，不含Time，默认格式：YYYY-MM-dd。 eg: &amp;lt;aura:attribute name=&quot;startDate&quot; type=&quot;Date&quot; /&amp;gt;&lt;/li&gt;
&lt;li&gt;Datetime：定义一个日期类型，含Time。eg:&amp;lt;aura:attribute name=&quot;lastModifiedDate&quot; type=&quot;DateTime&quot; /&amp;gt;&lt;/li&gt;
&lt;li&gt;Decimal：定义一个浮点型小数，比Double类型更容易接收currency类型的数据。eg:&amp;lt;aura:attributename=&quot;totalPrice&quot; type=&quot;Decimal&quot; /&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Double&lt;/span&gt;： 定义一个double类型小数，通常可以被Decimal替代&lt;/li&gt;
&lt;li&gt;Integer：定义一个整数类型。eg:&amp;lt;aura:attribute name=&quot;numRecords&quot; type=&quot;Integer&quot; /&amp;gt;&lt;/li&gt;
&lt;li&gt;Long：定义一个长整型类型，如果Integer盛装不了，需要使用Long。eg:aura:attribute name=&quot;numRecords&quot; type=&quot;Long&quot; /&amp;gt;&lt;/li&gt;
&lt;li&gt;String：定义一个字符串类型。eg:&amp;lt;aura:attribute name=&quot;message&quot; type=&quot;String&quot; /&amp;gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;(注：上述基本类型也可以使用数组类型，eg:&amp;lt;aura:attribute name=&quot;message&quot;  type=&quot;String[]&quot; /&amp;gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;函数类型：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;与javascript类型相一致的attribute 类型。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;对象类型：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;定义一个自定义的object或者sObject类型。eg:&amp;lt;aura:attribute name=&quot;acc&quot; type=&quot;Account&quot; /&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;集合类型：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;type[](Array)：声明一个数组类型。eg:&lt;/span&gt;&lt;/span&gt;&amp;lt;aura:attribute  name=&quot;colorPalette&quot; type=&quot;String[]&quot; default=&quot;['red','green', 'blue']&quot; /&amp;gt;&lt;/li&gt;
&lt;li&gt;List：声明一个有序列表(和type[]相似，个人认为此处可以替代type[])。eg: &amp;lt;aura:attribute name=&quot;colorPalette&quot; type=&quot;List&quot; default=&quot;['red', 'green', 'blue']&quot; /&amp;gt;&lt;/li&gt;
&lt;li&gt;Map：声明一个Map类型，包含键值对。eg:&amp;lt;aura:attribute name=&quot;testMap&quot; type=&quot;Map&quot; default=&quot;{a: 'label1', b:'label2' }&quot; /&amp;gt;&lt;/li&gt;
&lt;li&gt;Set：声明一个无序列表。eg:&amp;lt;aura:attriute name=&quot;colorSet&quot; type=&quot;Set&quot; default=&quot;{'red','green','blue'}&quot; /&amp;gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;自定义Java类型：&lt;/strong&gt;如果创建Java类型，这个类必须要实现JsonSerializable接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特定的Frame-work类型（Framework-Specific）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Aura.Action：传递一个action到lightning:component中。eg: &amp;lt;aura:attribute name=&quot;onclick&quot; type=&quot;Aura.Action&quot;/&amp;gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&amp;lt;aura:registerEvent&amp;gt;:&lt;/strong&gt; 通常用于创建完自定义event后，将event注册到component中，从而通过aura:handler将event进行装载。event包含系统自带的标准事件（init/change等）以及自定义事件，aura:registerEvent用于注册自定义事件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;aura:handler&amp;gt;:&lt;/strong&gt; lightning中提供了一些标准和自定义事件，将事件装载到lightning component中需要使用aura:handler。标准的事件举例：init（lightning component初始化触发，相当于VF page中的构造函数或者action声明内容）,change（某个aura:attribute改变自动触发）。aura:handler写法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;childAttr&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:handler &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;change&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;{!v.childAttr}&quot;&lt;/span&gt;&lt;span&gt; action&lt;/span&gt;&lt;span&gt;=&quot;{!c.onChildAttrChange}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的demo声明了一个针对childAttr的change事件，当childAttr更改以后，便会执行controller.js的onChildAttrChange方法。&lt;/p&gt;
&lt;p&gt;（点击可查看event的&lt;a href=&quot;https://developer.salesforce.com/docs/atlas.en-us.212.0.lightning.meta/lightning/events_best_practices.htm&quot; target=&quot;_blank&quot;&gt;Best Practice&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;元素标签：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;aura framework提供了大量的可以直接使用的元素标签用来开发，用户也可以通过slds样式更改成需要的样式。官方提供了很多可以直接使用的标签，以ui: / lightning: aura: 开头。元素标签的样式使用slds进行渲染，如果想查看某个元素标签样式或者想要更改相关的样式，可以先查看&lt;a href=&quot;https://www.lightningdesignsystem.com/&quot; target=&quot;_blank&quot;&gt;lightning design system&lt;/a&gt;中元素的渲染方式。元素标签可以包含几大类来汇总：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器组件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/accordion/&quot; target=&quot;_blank&quot;&gt;lightning:accordion / lightning:accordionSection&lt;/a&gt; : 可折叠容器&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/cards/&quot; target=&quot;_blank&quot;&gt;lightning:card&lt;/a&gt; ：卡牌装容器，用于展示一组信息&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/utilities/grid/&quot; target=&quot;_blank&quot;&gt;lightning:layout/lightning:layoutItem&lt;/a&gt; : Grid容器&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/tabs/&quot; target=&quot;_blank&quot;&gt;lightning:tab/lightning:tabset&lt;/a&gt; : Tab标签&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/tiles/&quot; target=&quot;_blank&quot;&gt;lightning:tile&lt;/a&gt; : 瓷砖模型,用于展示一条记录的相关信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;按钮组件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/buttons/&quot; target=&quot;_blank&quot;&gt;lightning:button&lt;/a&gt;: 普通按钮&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/button-icons/&quot; target=&quot;_blank&quot;&gt;lightning:buttonIcon&lt;/a&gt;:只有一个html icon的按钮&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/button-groups/&quot; target=&quot;_blank&quot;&gt;lightning:buttonGroup&lt;/a&gt;：一组按钮&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/menus/&quot; target=&quot;_blank&quot;&gt;lightning:buttonMenu/lightning:menuItem&lt;/a&gt;: 一个drop-down 列表展示action&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;导航组件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/breadcrumbs/&quot; target=&quot;_blank&quot;&gt;lightning:breadcrumb/lightning:breadcrumbs&lt;/a&gt;: 展示当前操作记录的层级导航&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/trees/&quot; target=&quot;_blank&quot;&gt;lightning:tree&lt;/a&gt;： 树形结构&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/vertical-navigation/&quot; target=&quot;_blank&quot;&gt;lightning:verticalNavigation&lt;/a&gt;： 垂直排列的链接列表&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可视化组件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/avatar/&quot; target=&quot;_blank&quot;&gt;lightning:avatar&lt;/a&gt;: 对象的可视化表示 （一个图像）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/badges/&quot; target=&quot;_blank&quot;&gt;lightning:badge&lt;/a&gt;：包含少量信息的文本块标签 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/data-tables/&quot; target=&quot;_blank&quot;&gt;lightning:datatable&lt;/a&gt;： 显示table布局 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/dynamic-icons/&quot; target=&quot;_blank&quot;&gt;lightning:dynamicIcon&lt;/a&gt;： 动画效果icon&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/tooltips/&quot; target=&quot;_blank&quot;&gt;lightning:helptext&lt;/a&gt;： hover后提示信息效果&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/icons/&quot; target=&quot;_blank&quot;&gt;lightning:icon&lt;/a&gt;： 显示一个图标&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/pills/&quot; target=&quot;_blank&quot;&gt;lightning:pill&lt;/a&gt;： 展示一个显示X号的内容，可以显示或者不显示&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/progress-bar/&quot; target=&quot;_blank&quot;&gt;lightning:progressBar&lt;/a&gt;： 展示一项操作的进程条&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/progress-indicator/&quot; target=&quot;_blank&quot;&gt;lightning:progressIndicator&lt;/a&gt;：进程指示器，显示进程线&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/spinners/&quot; target=&quot;_blank&quot;&gt;lightning:spinner&lt;/a&gt;: 显示Loading图形&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字段组件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/checkbox/&quot; target=&quot;_blank&quot;&gt;lightning:checkboxGroup&lt;/a&gt; ：复选框 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/combobox/&quot; target=&quot;_blank&quot;&gt;lightning:combobox&lt;/a&gt; ：提供一个用户输入的并且可以autocomplete的控件 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/dueling-picklist/&quot; target=&quot;_blank&quot;&gt;lightning:dualListbox &lt;/a&gt;： 两个list间移动option。类似multi picklist效果 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/file-selector/&quot; target=&quot;_blank&quot;&gt;lightning:fileUpload&lt;/a&gt; ： 提供上传文件的框&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/files/&quot; target=&quot;_blank&quot;&gt;lightning:fileCard&lt;/a&gt; ： 展示一系列的上传的文件&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/input/&quot; target=&quot;_blank&quot;&gt;lightning:input &lt;/a&gt;： 默认展示输入框，根据type不同展示不同效果。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/radio-group/&quot; target=&quot;_blank&quot;&gt;lightning:radioGroup&lt;/a&gt;：展示一组单选按钮&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/select/&quot; target=&quot;_blank&quot;&gt;lightning:select&lt;/a&gt;：展示一个包含多个option的菜单&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/slider/&quot; target=&quot;_blank&quot;&gt;lightning:slider&lt;/a&gt; : 展示一个可以滑动效果指定范围的输入框 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/rich-text-editor/&quot; target=&quot;_blank&quot;&gt;lightning:inputRichText&lt;/a&gt;： 富文本编辑器&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/components/textarea/&quot; target=&quot;_blank&quot;&gt;lightning:textArea&lt;/a&gt;： textArea &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;格式化组件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下标签都是只读的&lt;/p&gt;
&lt;p&gt;lightning:formattedDateTime ：格式化 data &amp;amp; time&lt;/p&gt;
&lt;p&gt;lightning:formattedEmail ：格式化 email&lt;/p&gt;
&lt;p&gt;lightning:formattedLocation  ：使用经纬度格式化Location&lt;/p&gt;
&lt;p&gt;lightning:formattedNumber ：格式化数字&lt;/p&gt;
&lt;p&gt;lightning:formattedPhone：格式化电话号码&lt;/p&gt;
&lt;p&gt;lightning:formattedRichText：格式化富文本区域&lt;/p&gt;
&lt;p&gt;lightning:formattedText：格式化字符串&lt;/p&gt;
&lt;p&gt;lightning:formattedUrl：格式化URL&lt;/p&gt;
&lt;p&gt;一个元素标签包含local ID,global ID。local id 作用域为当前的component，使用aura:id 属性来创建一个local id。aura:id不支持表达式，只支持普通的字符串值作为local id.&lt;/p&gt;
&lt;p&gt;local id 理论上是唯一的，但是不强制唯一，比如一组checkbox元素标签，可以设置他们的local id是相同的。local id可以用于在javascript中通过local id获取到元素本身或者元素列表。&lt;/p&gt;
&lt;p&gt;eg:&amp;lt;lightning:input type=&quot;string&quot; aura:id = &quot;name&quot; value=&quot;testValue&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;controller或者helper中可以通过cmp.find(&quot;name&quot;)即可获取到 aura:id为name的元素（或者元素列表），如果不存在所要搜索的aura:id，则返回undefined.controller.js/helper.js中针对一个元素获取它的local id，可以通过cmp.getLocalId()方法获得。&lt;/p&gt;
&lt;p&gt;Global id 很像classic中visualforce 元素组件中的id,运行时生成，并且是唯一的。&lt;br/&gt;eg:&amp;lt;lightning:input type=&quot;string&quot; id=&quot;name&quot; value=&quot;testValue&quot; /&amp;gt;&lt;br/&gt;global id可以用来区分不同元素的组件实例化或者用于debugging操作。针对一个组件元素获取它的global id,可以通过cmp.getGlobalId()获取。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三. Controller js介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为component不允许写任何的js，即使类似onclick=&quot;alert(xxx);&quot;这种js也是被禁止的，所以controller js部分作用是至关重要的。他管理着Component中所有的事件驱动操作。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里假设我们在'showMyInfo' componet中有一个按钮名字是'Button1'，绑定了一个'onclick'事件，onclick=&quot;{!c.handlerClick}&quot;.&lt;span&gt;上面我们说过，针对元素组件引用attribute的值，使用v（v代表了view）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;当我们点击按钮或者触发了注册的事件后，会执行controller.js里面的方法，需要写{!c.functionName},其中c可以理解为 client-side controller，functionName为在controller.js中声明的方法名称。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当我们为一个component bundle新建一个Controller js时，我们会发现，每个Controller方法里面默认都有3个参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;cmp ： 代表当前操作的action所在的component，这里指的是showMyInfo&lt;/li&gt;
&lt;li&gt;event：代表当前action操作所触发的事件，通过事件可以获取到当前事件所对应的元素；&lt;/li&gt;
&lt;li&gt;helper：helper代表当前的componet对应的helper.js，当然这个参数不是必须的，helper文件可以写js内容用来和后台server controller交互。当然，如果你想把和server controller交互的代码写在当前的controller js中，也是可以的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;cmp：&lt;/strong&gt;我们通常用cmp可以获取和设置attribute值，通过cmp.get('v.attributeName')即可获取到lightning component中attribute名称为attributeName的值。&lt;em id=&quot;__mceDel&quot;&gt;通过cmp.set('v.attributeName','testAttributeValue')&lt;/em&gt;即可设置lightning componet中名称为attributeName的attribute的值为testAttributeValue.当然，cmp可不止获取设置attribute值这么简单，还可以通过cmp.getEvent('eventName')获取注册的事件等等。我们平时用的cmp比较多的功能就是这两个了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;event：&lt;/strong&gt;event代表当前操作的事件，比如当上面的用户点击了按钮，可以通过event.getSource()获取到事件源Button1以及获取到事件源自身的属性等信息；可以获取到事件源的事件操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; helper:&lt;/strong&gt;helper代表了helper.js的实例化变量，你可以通过helper.helperMethod用来处理具体的逻辑，包括和后台交互；处理结果集；功能性的方法重用等等。因为有了helper，你的代码有了更好的可读性，可维护性以及可重用性。&lt;/p&gt;

&lt;p&gt;下面通过几行简单的代码来了解cmp以及event的用法。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;var btnClicked = event.getSource();此行代码可以理解为获取到点击的button的dom element&lt;/li&gt;
&lt;li&gt;var btnMessage = btnClicked.get(''v.label&quot;); 通过element的get方法可以获取到这个元素上面的属性值，获取属性值或者获取其他的组件中的元素信息，需要使用'v.'来获取；&lt;/li&gt;
&lt;li&gt;component.set(&quot;v.message&quot;, btnMessage); 更新component中名称为message的attribute值。&lt;/li&gt;
&lt;li&gt;controller中有可能有多个方法，每个方法之间使用‘，’分隔；最后一个方法不能有‘，’。&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;({
    handleClick: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(component, event, helper) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; btnClicked = event.getSource();         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; the button&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; btnMessage = btnClicked.get(&quot;v.label&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; the button's label&lt;/span&gt;
        component.set(&quot;v.message&quot;, btnMessage);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; update our message&lt;/span&gt;
&lt;span&gt;    },&lt;br/&gt;　　 handleClick2: function(component,event,helper) {&lt;br/&gt;　　 }&lt;br/&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;四 Helper js 介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 如果是controller.js负责了component中的所有业务逻辑，那么helper js就承包了所有的业务细节处理或者公用的方法（显示隐藏loading等）。helper一般需要component这个参数，其他参数可以根据实际需要自动从controller.js获取以及传递。这里举例一个调用后台并对返回数据进行处理的例子。想要连接后台，需要准备以下的工作：&lt;/p&gt;
&lt;p&gt;1.lightning component 的controller属性设置此component后台引用的controller,用法和classic用法相同；&lt;/p&gt;
&lt;p&gt;2.controller（后台）方法需要为静态方法，并且需要添加@AuraEnabled注解。如果有classic经验的可以想一下remote action的后台要求，把@RemoteAction改成@AuraEnabled就好。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
createItem: &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(component, camping) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; action = component.get(&quot;c.saveItem&quot;&lt;span&gt;);
    action.setParams({
        &lt;/span&gt;&quot;camping&quot;&lt;span&gt;: camping
    });
    action.setCallback(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(response){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; state =&lt;span&gt; response.getState();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (state === &quot;SUCCESS&quot;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; items = component.get(&quot;v.items&quot;&lt;span&gt;);
            items.push(response.getReturnValue());
            component.set(&lt;/span&gt;&quot;v.items&quot;&lt;span&gt;, items);
        } else if(status == &quot;INCOMPLETE&quot;) {&lt;br/&gt;console.log('execute');&lt;br/&gt;} else if(status == &quot;ERROR&quot;) {&lt;br/&gt;　　　　　　　console.log('error');&lt;br/&gt;}
    });
    $A.enqueueAction(action);
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述例子功能为后台调用saveItem方法，camping作为参数传递到后台，然后异步调用。调用成功后将这个item写入到前台的camping列表中。&lt;/p&gt;
&lt;p&gt;其中有几点需要注意：&lt;/p&gt;
&lt;p&gt;1.我们通常使用component.get('v.something')来调用前台的一些属性元素等，在这里使用component.get('c.backgroundMethod')可以调用到后台的方法；&lt;/p&gt;
&lt;p&gt;2.通过setParam可以对方法设置参数,通过setCallBack可以对这个方法进行异步处理，我们通常会将这种调用后台的方法进行异步结果处理；&lt;/p&gt;
&lt;p&gt;3.response的状态主要有三种：SUCCESS/INCOMPLETE/ERROR。建议方法中将三种情况都进行处理，比如INCOMPLETE展示遮罩，ERROR/SUCCESS进行相应的业务处理以及解除遮罩等；&lt;/p&gt;
&lt;p&gt;4.需要将action放在队列里面，让他排队进行执行。$A为lightning中封装的一个global变量，除了enqueueAction方法外还有很多常用的方法，后面会有涉及，有兴趣的自行查看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;此篇只是泛泛的对lightning componet常用的进行简单的介绍，并没有系统的介绍使用功能等，也没有demo进行整体的连接。有兴趣的可以自己查看文档或者trailhead等学习资料，后期将会写一些细节的使用。有错误的地方欢迎指出，有不懂的欢迎提问。&lt;/p&gt;
</description>
<pubDate>Mon, 23 Apr 2018 14:47:00 +0000</pubDate>
<dc:creator>zero.zhang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zero-zyq/p/8733056.html</dc:identifier>
</item>
<item>
<title>图像融合之拉普拉斯融合（laplacian blending） - 一棹烟波</title>
<link>http://www.cnblogs.com/riddick/p/8922381.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/riddick/p/8922381.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; #include &amp;lt;opencv2\opencv.hpp&amp;gt;
&lt;span&gt;  2&lt;/span&gt; #include &amp;lt;iostream&amp;gt;
&lt;span&gt;  3&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;#define DEBUG&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; borderInterp(cv::Mat &amp;amp;_src, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; radius)
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; imgH =&lt;span&gt; _src.rows;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; imgW =&lt;span&gt; _src.cols;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;     &lt;span&gt;float&lt;/span&gt; *pSrc = (&lt;span&gt;float&lt;/span&gt;*&lt;span&gt;)_src.data;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = radius; i &amp;lt; imgH-radius*&lt;span&gt;2&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; &lt;span&gt;2&lt;/span&gt;; j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; srcIdx = (i*imgW + j + &lt;span&gt;3&lt;/span&gt;) * &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; dstIdx = (i*imgW + j) * &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;             pSrc[dstIdx] =&lt;span&gt; pSrc[srcIdx];
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;             pSrc[dstIdx + &lt;span&gt;1&lt;/span&gt;] = pSrc[srcIdx + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;             pSrc[dstIdx + &lt;span&gt;2&lt;/span&gt;] = pSrc[srcIdx + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = imgW - radius; j &amp;lt; imgW; j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; srcIdx = (i*imgW + j - &lt;span&gt;3&lt;/span&gt;) * &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; dstIdx = (i*imgW + j) * &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;             pSrc[dstIdx] =&lt;span&gt; pSrc[srcIdx];
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;             pSrc[dstIdx + &lt;span&gt;1&lt;/span&gt;] = pSrc[srcIdx + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;             pSrc[dstIdx + &lt;span&gt;2&lt;/span&gt;] = pSrc[srcIdx + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; 
&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; imgW; j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;2&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; srcIdx = ((i + &lt;span&gt;3&lt;/span&gt;)*imgW + j) * &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; dstIdx = (i*imgW + j) * &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;             pSrc[dstIdx] =&lt;span&gt; pSrc[srcIdx];
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;             pSrc[dstIdx + &lt;span&gt;1&lt;/span&gt;] = pSrc[srcIdx + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;             pSrc[dstIdx + &lt;span&gt;2&lt;/span&gt;] = pSrc[srcIdx + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = imgH - radius; i &amp;lt; imgH; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; srcIdx = ((i - &lt;span&gt;3&lt;/span&gt;)*imgW + j) * &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; dstIdx = (i*imgW + j) * &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;             pSrc[dstIdx] =&lt;span&gt; pSrc[srcIdx];
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             pSrc[dstIdx + &lt;span&gt;1&lt;/span&gt;] = pSrc[srcIdx + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;             pSrc[dstIdx + &lt;span&gt;2&lt;/span&gt;] = pSrc[srcIdx + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; myPyrDown(cv::Mat src, cv::Mat &amp;amp;&lt;span&gt;dst, cv::Size dSize)
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;     dSize = dSize.area() == &lt;span&gt;0&lt;/span&gt; ? cv::Size((src.cols + &lt;span&gt;1&lt;/span&gt;) / &lt;span&gt;2&lt;/span&gt;, (src.rows + &lt;span&gt;1&lt;/span&gt;) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;) : dSize;
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt;     &lt;span&gt;float&lt;/span&gt; scale = &lt;span&gt;1&lt;/span&gt;. / &lt;span&gt;16&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; imgH =&lt;span&gt; src.rows;
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; imgW =&lt;span&gt; src.cols;
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;     cv::Mat _src = cv::Mat::zeros(imgH + &lt;span&gt;4&lt;/span&gt;, imgW + &lt;span&gt;4&lt;/span&gt;&lt;span&gt;, CV_32FC3);
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; _imgH =&lt;span&gt; _src.rows;
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; _imgW =&lt;span&gt; _src.cols;
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;     src.copyTo(_src(cv::Rect(&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;, imgW, imgH)));
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;     borderInterp(_src, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; 
&lt;span&gt; 70&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;高斯卷积&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;     cv::Mat gaussImg =&lt;span&gt; cv::Mat::zeros(imgH, imgW, CV_32FC3);
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;     cv::Mat tmpRowGaussImg =&lt;span&gt; _src.clone();
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;     &lt;span&gt;float&lt;/span&gt; *pSrc = (&lt;span&gt;float&lt;/span&gt;*&lt;span&gt;)_src.data;
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;     &lt;span&gt;float&lt;/span&gt; *pRowGaussImg = (&lt;span&gt;float&lt;/span&gt;*&lt;span&gt;)tmpRowGaussImg.data;
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;行卷积&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;2&lt;/span&gt;; i &amp;lt; imgH+&lt;span&gt;2&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;2&lt;/span&gt;; j &amp;lt; imgW+&lt;span&gt;2&lt;/span&gt;; j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;             &lt;span&gt;float&lt;/span&gt; val[&lt;span&gt;3&lt;/span&gt;] = { &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; idx = i*_imgW +&lt;span&gt; j;
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; chan = &lt;span&gt;0&lt;/span&gt;; chan &amp;lt; &lt;span&gt;3&lt;/span&gt;; chan++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;                 val[chan] += pSrc[(idx - &lt;span&gt;2&lt;/span&gt;) * &lt;span&gt;3&lt;/span&gt; + chan] + pSrc[(idx + &lt;span&gt;2&lt;/span&gt;) * &lt;span&gt;3&lt;/span&gt; +&lt;span&gt; chan]
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                     + &lt;span&gt;4&lt;/span&gt; * (pSrc[(idx - &lt;span&gt;1&lt;/span&gt;) * &lt;span&gt;3&lt;/span&gt; + chan] + pSrc[(idx + &lt;span&gt;1&lt;/span&gt;) * &lt;span&gt;3&lt;/span&gt; +&lt;span&gt; chan])
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                     + &lt;span&gt;6&lt;/span&gt; * pSrc[idx * &lt;span&gt;3&lt;/span&gt; +&lt;span&gt; chan];
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;             pRowGaussImg[idx * &lt;span&gt;3&lt;/span&gt;] = val[&lt;span&gt;0&lt;/span&gt;] *&lt;span&gt; scale;
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             pRowGaussImg[idx * &lt;span&gt;3&lt;/span&gt; + &lt;span&gt;1&lt;/span&gt;] = val[&lt;span&gt;1&lt;/span&gt;] *&lt;span&gt; scale;
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;             pRowGaussImg[idx * &lt;span&gt;3&lt;/span&gt; + &lt;span&gt;2&lt;/span&gt;] = val[&lt;span&gt;2&lt;/span&gt;] *&lt;span&gt; scale;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; 
&lt;span&gt; 94&lt;/span&gt;     &lt;span&gt;float&lt;/span&gt; *pGaussImg = (&lt;span&gt;float&lt;/span&gt;*&lt;span&gt;)gaussImg.data;
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;列卷积&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; imgW; j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; imgH; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; gi = i + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; gj = j + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;             &lt;span&gt;float&lt;/span&gt; val[&lt;span&gt;3&lt;/span&gt;] = { &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; idx = gi*_imgW +&lt;span&gt; gj;
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; chan = &lt;span&gt;0&lt;/span&gt;; chan &amp;lt; &lt;span&gt;3&lt;/span&gt;; chan++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;                 val[chan] += pRowGaussImg[(idx-&lt;span&gt;2&lt;/span&gt;*_imgW) * &lt;span&gt;3&lt;/span&gt; + chan] + pRowGaussImg[(idx + &lt;span&gt;2&lt;/span&gt;*_imgW) * &lt;span&gt;3&lt;/span&gt; +&lt;span&gt; chan]
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;                     + &lt;span&gt;4&lt;/span&gt; * (pRowGaussImg[(idx - _imgW) * &lt;span&gt;3&lt;/span&gt; + chan] + pRowGaussImg[(idx + _imgW) * &lt;span&gt;3&lt;/span&gt; +&lt;span&gt; chan])
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;                     + &lt;span&gt;6&lt;/span&gt; * pRowGaussImg[idx * &lt;span&gt;3&lt;/span&gt; +&lt;span&gt; chan];
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;             
&lt;span&gt;111&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; id = (i*imgW + j) * &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;             pGaussImg[id] = val[&lt;span&gt;0&lt;/span&gt;] *&lt;span&gt; scale;
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;             pGaussImg[id + &lt;span&gt;1&lt;/span&gt;] = val[&lt;span&gt;1&lt;/span&gt;] *&lt;span&gt; scale;
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;             pGaussImg[id + &lt;span&gt;2&lt;/span&gt;] = val[&lt;span&gt;2&lt;/span&gt;] *&lt;span&gt; scale;
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; 
&lt;span&gt;118&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; downH =&lt;span&gt; dSize.height;
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; downW =&lt;span&gt; dSize.width;
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; 
&lt;span&gt;121&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (abs(downH * &lt;span&gt;2&lt;/span&gt; - imgH) &amp;gt; &lt;span&gt;2&lt;/span&gt;) downH = imgH*&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (abs(downW * &lt;span&gt;2&lt;/span&gt; - imgW) &amp;gt; &lt;span&gt;2&lt;/span&gt;) downW = imgW*&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;     downH = (downH &amp;lt; &lt;span&gt;1&lt;/span&gt;) ? &lt;span&gt;1&lt;/span&gt;&lt;span&gt; : downH;
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;     downW = (downW &amp;lt; &lt;span&gt;1&lt;/span&gt;) ? &lt;span&gt;1&lt;/span&gt;&lt;span&gt; : downW;
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; 
&lt;span&gt;126&lt;/span&gt;     dst =&lt;span&gt; cv::Mat::zeros(downH, downW, CV_32FC3);
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;     &lt;span&gt;float&lt;/span&gt; *pDst = (&lt;span&gt;float&lt;/span&gt;*&lt;span&gt;)dst.data;
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; imgH; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; imgW; j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (i % &lt;span&gt;2&lt;/span&gt; != &lt;span&gt;0&lt;/span&gt; || j % &lt;span&gt;2&lt;/span&gt; != &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; srcIdx = (i*imgW + j) * &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; y = &lt;span&gt;int&lt;/span&gt;((i+&lt;span&gt;1&lt;/span&gt;) * &lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;int&lt;/span&gt;((j+&lt;span&gt;1&lt;/span&gt;) * &lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;             y = (y &amp;gt;= downH) ? (downH - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) : y;
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;             x = (x &amp;gt;= downW) ? (downW - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) : x;
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; dstIdx = (y*downW + x) * &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;             pDst[dstIdx] =&lt;span&gt; pGaussImg[srcIdx];
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;             pDst[dstIdx + &lt;span&gt;1&lt;/span&gt;] = pGaussImg[srcIdx + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;             pDst[dstIdx + &lt;span&gt;2&lt;/span&gt;] = pGaussImg[srcIdx + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; 
&lt;span&gt;146&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; myPyrUp(cv::Mat src, cv::Mat &amp;amp;&lt;span&gt;dst, cv::Size dSize)
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;     dSize = dSize.area() == &lt;span&gt;0&lt;/span&gt; ? cv::Size(src.cols * &lt;span&gt;2&lt;/span&gt;, src.rows * &lt;span&gt;2&lt;/span&gt;&lt;span&gt;) : dSize;
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;    cv::Mat _src;
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;    src.convertTo(_src, CV_32FC3);
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; 
&lt;span&gt;152&lt;/span&gt;     &lt;span&gt;float&lt;/span&gt; scale = &lt;span&gt;1&lt;/span&gt;. / &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; 
&lt;span&gt;154&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; imgH =&lt;span&gt; src.rows;
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; imgW =&lt;span&gt; src.cols;
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; upImgH =&lt;span&gt; dSize.height;
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; upImgW =&lt;span&gt; dSize.width;
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt; 
&lt;span&gt;159&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (abs(upImgH - imgH * &lt;span&gt;2&lt;/span&gt;) &amp;gt; upImgH % &lt;span&gt;2&lt;/span&gt;) upImgH = imgH*&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (abs(upImgW - imgW * &lt;span&gt;2&lt;/span&gt;) &amp;gt; upImgW % &lt;span&gt;2&lt;/span&gt;) upImgW = imgW*&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt; 
&lt;span&gt;162&lt;/span&gt;     cv::Mat upImg =&lt;span&gt; cv::Mat::zeros(upImgH, upImgW, CV_32FC3);
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;     &lt;span&gt;float&lt;/span&gt; *pSrc = (&lt;span&gt;float&lt;/span&gt;*&lt;span&gt;)_src.data;
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt;     &lt;span&gt;float&lt;/span&gt; *pUpImg = (&lt;span&gt;float&lt;/span&gt;*&lt;span&gt;)upImg.data;
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; upImgH; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; upImgW; j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (i % &lt;span&gt;2&lt;/span&gt; != &lt;span&gt;0&lt;/span&gt; || j % &lt;span&gt;2&lt;/span&gt; != &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; dstIdx = (i*upImgW + j)*&lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; y = &lt;span&gt;int&lt;/span&gt;((i+&lt;span&gt;1&lt;/span&gt;)*&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;int&lt;/span&gt;((j+&lt;span&gt;1&lt;/span&gt;)*&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt;             y = (y &amp;gt;= imgH) ? (imgH - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) : y;
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;             x = (x &amp;gt;= imgW) ? (imgW - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) : x;
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; srcIdx = (y*imgW + x) * &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt; 
&lt;span&gt;177&lt;/span&gt;             pUpImg[dstIdx] =&lt;span&gt; pSrc[srcIdx];
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;             pUpImg[dstIdx + &lt;span&gt;1&lt;/span&gt;] = pSrc[srcIdx + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;             pUpImg[dstIdx + &lt;span&gt;2&lt;/span&gt;] = pSrc[srcIdx + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; 
&lt;span&gt;183&lt;/span&gt;     dst =&lt;span&gt; cv::Mat::zeros(dSize, CV_32FC3);
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt;     cv::Mat _upImg = cv::Mat::zeros(upImgH + &lt;span&gt;4&lt;/span&gt;, upImgW + &lt;span&gt;4&lt;/span&gt;&lt;span&gt;, CV_32FC3);
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; _imgH =&lt;span&gt; _upImg.rows;
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; _imgW =&lt;span&gt; _upImg.cols;
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt;     upImg.copyTo(_upImg(cv::Rect(&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;, upImgW, upImgH)));
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;     borderInterp(_upImg, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt; 
&lt;span&gt;190&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;高斯卷积&lt;/span&gt;
&lt;span&gt;191&lt;/span&gt;     cv::Mat tempRowGaussImg =&lt;span&gt; _upImg.clone();
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt;     &lt;span&gt;float&lt;/span&gt; *pUpData = (&lt;span&gt;float&lt;/span&gt;*&lt;span&gt;)_upImg.data;
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt;     &lt;span&gt;float&lt;/span&gt; *pRowGaussImg = (&lt;span&gt;float&lt;/span&gt;*&lt;span&gt;)tempRowGaussImg.data;
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;行卷积&lt;/span&gt;
&lt;span&gt;195&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;2&lt;/span&gt;; i &amp;lt; upImgH + &lt;span&gt;2&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;2&lt;/span&gt;; j &amp;lt; upImgW + &lt;span&gt;2&lt;/span&gt;; j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt;             &lt;span&gt;float&lt;/span&gt; val[&lt;span&gt;3&lt;/span&gt;] = { &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; idx = i*_imgW +&lt;span&gt; j;
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; chan = &lt;span&gt;0&lt;/span&gt;; chan &amp;lt; &lt;span&gt;3&lt;/span&gt;; chan++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt;                 val[chan] += pUpData[(idx - &lt;span&gt;2&lt;/span&gt;) * &lt;span&gt;3&lt;/span&gt; + chan] + pUpData[(idx + &lt;span&gt;2&lt;/span&gt;) * &lt;span&gt;3&lt;/span&gt; +&lt;span&gt; chan]
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt;                     + &lt;span&gt;4&lt;/span&gt; * (pUpData[(idx - &lt;span&gt;1&lt;/span&gt;) * &lt;span&gt;3&lt;/span&gt; + chan] + pUpData[(idx + &lt;span&gt;1&lt;/span&gt;) * &lt;span&gt;3&lt;/span&gt; +&lt;span&gt; chan])
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt;                     + &lt;span&gt;6&lt;/span&gt; * pUpData[idx * &lt;span&gt;3&lt;/span&gt; +&lt;span&gt; chan];
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt; 
&lt;span&gt;208&lt;/span&gt;             pRowGaussImg[idx * &lt;span&gt;3&lt;/span&gt;] = val[&lt;span&gt;0&lt;/span&gt;] *&lt;span&gt; scale;
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt;             pRowGaussImg[idx * &lt;span&gt;3&lt;/span&gt; + &lt;span&gt;1&lt;/span&gt;] = val[&lt;span&gt;1&lt;/span&gt;] *&lt;span&gt; scale;
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt;             pRowGaussImg[idx * &lt;span&gt;3&lt;/span&gt; + &lt;span&gt;2&lt;/span&gt;] = val[&lt;span&gt;2&lt;/span&gt;] *&lt;span&gt; scale;
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt; 
&lt;span&gt;214&lt;/span&gt; 
&lt;span&gt;215&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;列卷积&lt;/span&gt;
&lt;span&gt;216&lt;/span&gt;     &lt;span&gt;float&lt;/span&gt; *pDst = (&lt;span&gt;float&lt;/span&gt;*&lt;span&gt;)dst.data;
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; upImgW; j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; upImgH; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;221&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; gi = i + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; gj = j + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt;             &lt;span&gt;float&lt;/span&gt; val[&lt;span&gt;3&lt;/span&gt;] = { &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; idx = gi*_imgW +&lt;span&gt; gj;
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; chan = &lt;span&gt;0&lt;/span&gt;; chan &amp;lt; &lt;span&gt;3&lt;/span&gt;; chan++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt;                 val[chan] += pRowGaussImg[(idx - &lt;span&gt;2&lt;/span&gt; * _imgW) * &lt;span&gt;3&lt;/span&gt; + chan] + pRowGaussImg[(idx + &lt;span&gt;2&lt;/span&gt; * _imgW) * &lt;span&gt;3&lt;/span&gt; +&lt;span&gt; chan]
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt;                     + &lt;span&gt;4&lt;/span&gt; * (pRowGaussImg[(idx - _imgW) * &lt;span&gt;3&lt;/span&gt; + chan] + pRowGaussImg[(idx + _imgW) * &lt;span&gt;3&lt;/span&gt; +&lt;span&gt; chan])
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt;                     + &lt;span&gt;6&lt;/span&gt; * pRowGaussImg[idx * &lt;span&gt;3&lt;/span&gt; +&lt;span&gt; chan];
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt; 
&lt;span&gt;232&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; id = (i*upImgW + j) * &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt;             pDst[id] = val[&lt;span&gt;0&lt;/span&gt;] *&lt;span&gt; scale;
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt;             pDst[id + &lt;span&gt;1&lt;/span&gt;] = val[&lt;span&gt;1&lt;/span&gt;] *&lt;span&gt; scale;
&lt;/span&gt;&lt;span&gt;235&lt;/span&gt;             pDst[id + &lt;span&gt;2&lt;/span&gt;] = val[&lt;span&gt;2&lt;/span&gt;] *&lt;span&gt; scale;
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt; 
&lt;span&gt;240&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; buildLaplacianPyramid(cv::Mat srcImg, vector&amp;lt;cv::Mat&amp;gt; &amp;amp;pyramidImgs, cv::Mat &amp;amp;topLevelImg, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; levels)
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt;     cv::Mat currentImg =&lt;span&gt; srcImg;
&lt;/span&gt;&lt;span&gt;243&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;0&lt;/span&gt;; k &amp;lt; levels; k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt; &lt;span&gt;        cv::Mat downImg, upImg, lpImg;
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt; 
&lt;span&gt;247&lt;/span&gt; &lt;span&gt;#ifdef DEBUG
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt; &lt;span&gt;        cv::pyrDown(currentImg, downImg);
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt; &lt;span&gt;        cv::pyrUp(downImg, upImg, currentImg.size());
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt; &lt;span&gt;#else&lt;/span&gt;
&lt;span&gt;251&lt;/span&gt; &lt;span&gt;        myPyrDown(currentImg, downImg, cv::Size());
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt; &lt;span&gt;        myPyrUp(downImg, upImg, currentImg.size());
&lt;/span&gt;&lt;span&gt;253&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;254&lt;/span&gt; 
&lt;span&gt;255&lt;/span&gt;         lpImg = currentImg -&lt;span&gt; upImg;
&lt;/span&gt;&lt;span&gt;256&lt;/span&gt; &lt;span&gt;        pyramidImgs.push_back(lpImg);
&lt;/span&gt;&lt;span&gt;257&lt;/span&gt;         currentImg =&lt;span&gt; downImg;
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt; &lt;span&gt;    currentImg.copyTo(topLevelImg);
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;261&lt;/span&gt; 
&lt;span&gt;262&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; buildGaussPyramid(cv::Mat mask, vector&amp;lt;cv::Mat&amp;gt; &amp;amp;maskGaussPyramidImgs, vector&amp;lt;cv::Mat&amp;gt; pyramidImgs,cv::Mat topLevelImg, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; levels)
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;264&lt;/span&gt; &lt;span&gt;    cv::Mat currentMask;
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;mask转3通道&lt;/span&gt;
&lt;span&gt;266&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (mask.channels() == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;267&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;268&lt;/span&gt; &lt;span&gt;        cv::cvtColor(mask, currentMask, CV_GRAY2BGR);
&lt;/span&gt;&lt;span&gt;269&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;270&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(mask.channels()==&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;271&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;272&lt;/span&gt;         currentMask =&lt;span&gt; mask;
&lt;/span&gt;&lt;span&gt;273&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;274&lt;/span&gt;     
&lt;span&gt;275&lt;/span&gt; &lt;span&gt;    maskGaussPyramidImgs.push_back(currentMask);
&lt;/span&gt;&lt;span&gt;276&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;1&lt;/span&gt;; k &amp;lt; levels+&lt;span&gt;1&lt;/span&gt;; k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;277&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;278&lt;/span&gt; &lt;span&gt;        cv::Mat downMask;
&lt;/span&gt;&lt;span&gt;279&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (k &amp;lt;&lt;span&gt; levels)
&lt;/span&gt;&lt;span&gt;280&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;281&lt;/span&gt; &lt;span&gt;#ifdef DEBUG
&lt;/span&gt;&lt;span&gt;282&lt;/span&gt; &lt;span&gt;            cv::pyrDown(currentMask, downMask, pyramidImgs[k].size());
&lt;/span&gt;&lt;span&gt;283&lt;/span&gt; &lt;span&gt;#else&lt;/span&gt;
&lt;span&gt;284&lt;/span&gt; &lt;span&gt;            myPyrDown(currentMask, downMask, pyramidImgs[k].size());
&lt;/span&gt;&lt;span&gt;285&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;286&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;287&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;288&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;289&lt;/span&gt; &lt;span&gt;#ifdef DEBUG
&lt;/span&gt;&lt;span&gt;290&lt;/span&gt; &lt;span&gt;            cv::pyrDown(currentMask, downMask, topLevelImg.size());
&lt;/span&gt;&lt;span&gt;291&lt;/span&gt; &lt;span&gt;#else&lt;/span&gt;
&lt;span&gt;292&lt;/span&gt; &lt;span&gt;            myPyrDown(currentMask, downMask, topLevelImg.size());
&lt;/span&gt;&lt;span&gt;293&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;294&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;295&lt;/span&gt; 
&lt;span&gt;296&lt;/span&gt; &lt;span&gt;        maskGaussPyramidImgs.push_back(downMask);
&lt;/span&gt;&lt;span&gt;297&lt;/span&gt;         currentMask =&lt;span&gt; downMask;
&lt;/span&gt;&lt;span&gt;298&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;299&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;300&lt;/span&gt; 
&lt;span&gt;301&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; buildResultPyramid(vector&amp;lt;cv::Mat&amp;gt; leftPyramidImgs, vector&amp;lt;cv::Mat&amp;gt; rightPyramidImgs, vector&amp;lt;cv::Mat&amp;gt; maskPyramids, vector&amp;lt;cv::Mat&amp;gt; &amp;amp;resultPyramidImgs, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; levels)
&lt;/span&gt;&lt;span&gt;302&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;303&lt;/span&gt; 
&lt;span&gt;304&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;0&lt;/span&gt;; k &amp;lt; levels; k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;305&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;306&lt;/span&gt;         cv::Mat left =&lt;span&gt; leftPyramidImgs[k].mul(maskPyramids[k]);
&lt;/span&gt;&lt;span&gt;307&lt;/span&gt;         cv::Mat right = rightPyramidImgs[k].mul(cv::Scalar(&lt;span&gt;1.0&lt;/span&gt;,&lt;span&gt;1.0&lt;/span&gt;,&lt;span&gt;1.0&lt;/span&gt;) -&lt;span&gt; maskPyramids[k]);
&lt;/span&gt;&lt;span&gt;308&lt;/span&gt;         cv::Mat result = left +&lt;span&gt; right;
&lt;/span&gt;&lt;span&gt;309&lt;/span&gt; &lt;span&gt;        resultPyramidImgs.push_back(result);
&lt;/span&gt;&lt;span&gt;310&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;311&lt;/span&gt; 
&lt;span&gt;312&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;313&lt;/span&gt; 
&lt;span&gt;314&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; reconstruct(vector&amp;lt;cv::Mat&amp;gt; lpPyramidImgs, cv::Mat blendTopLevelImg, cv::Mat &amp;amp;blendImg, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; levels)
&lt;/span&gt;&lt;span&gt;315&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;316&lt;/span&gt;     cv::Mat currentImg =&lt;span&gt; blendTopLevelImg;
&lt;/span&gt;&lt;span&gt;317&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = levels - &lt;span&gt;1&lt;/span&gt;; k &amp;gt;= &lt;span&gt;0&lt;/span&gt;; k--&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;318&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;319&lt;/span&gt; &lt;span&gt;        cv::Mat upImg;
&lt;/span&gt;&lt;span&gt;320&lt;/span&gt; &lt;span&gt;#ifdef DEBUG
&lt;/span&gt;&lt;span&gt;321&lt;/span&gt; &lt;span&gt;        cv::pyrUp(currentImg, upImg, lpPyramidImgs[k].size());
&lt;/span&gt;&lt;span&gt;322&lt;/span&gt; &lt;span&gt;#else&lt;/span&gt;
&lt;span&gt;323&lt;/span&gt; &lt;span&gt;        myPyrUp(currentImg, upImg, lpPyramidImgs[k].size());
&lt;/span&gt;&lt;span&gt;324&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;325&lt;/span&gt;         currentImg = upImg +&lt;span&gt; lpPyramidImgs[k];
&lt;/span&gt;&lt;span&gt;326&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;327&lt;/span&gt; &lt;span&gt;    currentImg.copyTo(blendImg);
&lt;/span&gt;&lt;span&gt;328&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;329&lt;/span&gt; 
&lt;span&gt;330&lt;/span&gt; &lt;span&gt;cv::Mat laplacianBlending(cv::Mat leftImg, cv::Mat rightImg, cv::Mat mask)
&lt;/span&gt;&lt;span&gt;331&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;332&lt;/span&gt; &lt;span&gt;    cv::Mat leftImg32f, rightImg32f, mask32f;
&lt;/span&gt;&lt;span&gt;333&lt;/span&gt; &lt;span&gt;    leftImg.convertTo(leftImg32f, CV_32FC1);
&lt;/span&gt;&lt;span&gt;334&lt;/span&gt; &lt;span&gt;    rightImg.convertTo(rightImg32f, CV_32FC1);
&lt;/span&gt;&lt;span&gt;335&lt;/span&gt; &lt;span&gt;    mask.convertTo(mask32f, CV_32FC1);
&lt;/span&gt;&lt;span&gt;336&lt;/span&gt; 
&lt;span&gt;337&lt;/span&gt;     vector&amp;lt;cv::Mat&amp;gt;&lt;span&gt; leftLpPyramidImgs, rightLpPyramidImgs, resultLpPyramidImgs, gaussPyramidMaskImgs;
&lt;/span&gt;&lt;span&gt;338&lt;/span&gt; &lt;span&gt;    cv::Mat leftTopLevelImg, rightTopLevelImg;
&lt;/span&gt;&lt;span&gt;339&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; levels =&lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;340&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;拉普拉斯金字塔&lt;/span&gt;
&lt;span&gt;341&lt;/span&gt; &lt;span&gt;    buildLaplacianPyramid(leftImg32f, leftLpPyramidImgs, leftTopLevelImg, levels);
&lt;/span&gt;&lt;span&gt;342&lt;/span&gt; &lt;span&gt;    buildLaplacianPyramid(rightImg32f, rightLpPyramidImgs, rightTopLevelImg, levels);
&lt;/span&gt;&lt;span&gt;343&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;mask创建gauss金字塔&lt;/span&gt;
&lt;span&gt;344&lt;/span&gt; &lt;span&gt;    buildGaussPyramid(mask32f, gaussPyramidMaskImgs, leftLpPyramidImgs, leftTopLevelImg, levels);
&lt;/span&gt;&lt;span&gt;345&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;结合左右两图的laplacian残差图&lt;/span&gt;
&lt;span&gt;346&lt;/span&gt; &lt;span&gt;    buildResultPyramid(leftLpPyramidImgs, rightLpPyramidImgs, gaussPyramidMaskImgs, resultLpPyramidImgs, levels);
&lt;/span&gt;&lt;span&gt;347&lt;/span&gt;     &lt;span&gt;//
&lt;/span&gt;&lt;span&gt;348&lt;/span&gt;     cv::Mat blendImg =&lt;span&gt; cv::Mat::zeros(leftImg.size(), CV_32FC3);
&lt;/span&gt;&lt;span&gt;349&lt;/span&gt; 
&lt;span&gt;350&lt;/span&gt;     cv::Mat blendTopLevelImg = leftTopLevelImg.mul(gaussPyramidMaskImgs[levels]) + rightTopLevelImg.mul(cv::Scalar(&lt;span&gt;1.0&lt;/span&gt;, &lt;span&gt;1.0&lt;/span&gt;, &lt;span&gt;1.0&lt;/span&gt;) -&lt;span&gt; gaussPyramidMaskImgs[levels]);
&lt;/span&gt;&lt;span&gt;351&lt;/span&gt; &lt;span&gt;    reconstruct(resultLpPyramidImgs, blendTopLevelImg, blendImg, levels);
&lt;/span&gt;&lt;span&gt;352&lt;/span&gt; 
&lt;span&gt;353&lt;/span&gt; &lt;span&gt;    blendImg.convertTo(blendImg, CV_8UC3);
&lt;/span&gt;&lt;span&gt;354&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; blendImg;
&lt;/span&gt;&lt;span&gt;355&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;356&lt;/span&gt; 
&lt;span&gt;357&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;358&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;359&lt;/span&gt;     cv::Mat appleImg = cv::imread(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data/apple.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;360&lt;/span&gt;     cv::Mat pearImg = cv::imread(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data/orange.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;361&lt;/span&gt; 
&lt;span&gt;362&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; imgH =&lt;span&gt; appleImg.rows;
&lt;/span&gt;&lt;span&gt;363&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; imgW =&lt;span&gt; appleImg.cols;
&lt;/span&gt;&lt;span&gt;364&lt;/span&gt;     cv::Mat mask =&lt;span&gt; cv::Mat::zeros(imgH, imgW, CV_32FC1);
&lt;/span&gt;&lt;span&gt;365&lt;/span&gt;     mask(cv::Range::all(), cv::Range(&lt;span&gt;0&lt;/span&gt;, imgW*&lt;span&gt;0.5&lt;/span&gt;)) = &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;366&lt;/span&gt;     cv::Mat blendImg =&lt;span&gt; laplacianBlending(appleImg, pearImg, mask);
&lt;/span&gt;&lt;span&gt;367&lt;/span&gt;     cv::namedWindow(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blendImg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;368&lt;/span&gt;     cv::imshow(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blendImg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, blendImg);
&lt;/span&gt;&lt;span&gt;369&lt;/span&gt;     cv::imwrite(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data/blendImg.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, blendImg);
&lt;/span&gt;&lt;span&gt;370&lt;/span&gt;     cv::waitKey(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;371&lt;/span&gt; }
&lt;/pre&gt;</description>
<pubDate>Mon, 23 Apr 2018 14:43:00 +0000</pubDate>
<dc:creator>一棹烟波</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/riddick/p/8922381.html</dc:identifier>
</item>
<item>
<title>jmeter正则表达式书写 - 杭州铁锤</title>
<link>http://www.cnblogs.com/fangwei2015/p/8922382.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fangwei2015/p/8922382.html</guid>
<description>&lt;p&gt;在测试过程中，经常会有以下几种场景，如A接口的返回值，用于B接口中，而且A登陆的账户，每次登陆，这个sid值还是变化的。那么在实际工作中，如何才能A接口中提取参数到B接口中？接下来我们就可以用正则表达式来解决这个问题。&lt;/p&gt;
&lt;p&gt;场景如下，一个登陆接口，登陆后要使用该账号去购买标，买标的时候要使用A的登陆信息值。通过接口抓包，我们分析返回值如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/755964/201804/755964-20180423223001126-392062736.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们知道要提取的值巍sid。接下来我们就简单说明正则表达式的使用方法：&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;（1）引用名称：下一个请求要引用的参数名称，如填写Atask，则可用${Atask}引用它。&lt;/p&gt;
&lt;p&gt;（2）正则表达式：&lt;/p&gt;
&lt;p&gt;　　　　()：括起来的部分就是要提取的。&lt;/p&gt;
&lt;p&gt;　　　　.：匹配任何字符串。&lt;/p&gt;
&lt;p&gt;　　　　+：一次或多次。&lt;/p&gt;
&lt;p&gt;　　　　?：不要太贪婪，在找到第一个匹配项后停止。&lt;/p&gt;
&lt;p&gt;（3）模板：用$$引用起来，如果在正则表达式中有多个正则表达式，则可以是$2$$3$等等，表示解析到的第几个值给title。如：$1$表示解析到的第1个值&lt;/p&gt;
&lt;p&gt;（4）匹配数字：0代表随机取值，1代表全部取值，通常情况下填0&lt;/p&gt;
&lt;p&gt;（5）缺省值：如果参数没有取得到值，那默认给一个值让它取，我填的Error。&lt;/p&gt;
&lt;p&gt;还有一种方法，可以判断我们的正则表达式有没有错误。&lt;/p&gt;
&lt;p&gt;工具名称：RegexTester ，下载地址：百度，很多。&lt;/p&gt;
&lt;p&gt;使用方法截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/755964/201804/755964-20180423223330639-1684263467.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;jmeter中使用如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/755964/201804/755964-20180423223436433-354310101.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 补充例子：&lt;/p&gt;
&lt;p&gt;案列：&lt;/p&gt;
&lt;p&gt;通过jmeter发送一个Http请求后，如何来获取响应结果内容值？&lt;/p&gt;
&lt;p&gt;常见场景一：比如说发送一个投标的请求，返回是一串JSON串，因想判断响应结果是否正确，所以可以通过获取result的值（因result =1 时，说明投标成功），其中响应结果格式如下：{&quot;errorMsg&quot;:null,&quot;result&quot;:1,&quot;data&quot;:{&quot;result&quot;:&quot;2&quot;,&quot;msg&quot;:&quot;投标成功！&quot;}}，或者判断msg内容也可。&lt;/p&gt;
&lt;p&gt;常见场景二：&lt;/p&gt;
&lt;p&gt;有A、B两个接口，其中B接口的输入参数来源于A接口的响应结果，此时也需要提取到A接口的响应字段值&lt;/p&gt;
&lt;p&gt;言归正传，如何获取呢？通常可以使用“正则表达式提取器”、Beanshell PostProcessor等来进行，在此使用的是正则表达式来进行提取，&lt;/p&gt;

&lt;p&gt;1、新增一个Http请求，设置如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20160923160035745?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2、在该Http请求下，添加一个正则表达式提取器，具体设置如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20160923160315617?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;名词解释：&lt;/p&gt;
&lt;p&gt;Apply to：应用范围&lt;/p&gt;
&lt;p&gt;要检查的响应字段：样本数据源&lt;/p&gt;
&lt;p&gt;引用名称：其他地方引用时的变量名称，引用方法：${引用名称}&lt;/p&gt;
&lt;p&gt;正则表达式：数据提取器&lt;/p&gt;
&lt;p&gt;模板：表示使用提取到的第几个值：&lt;br/&gt;&lt;code&gt;$-1$:表示取所有值&lt;/code&gt;&lt;br/&gt;&lt;code&gt;$0$:表示随机取值&lt;/code&gt;&lt;br/&gt;&lt;code&gt;$1$:表示取第1个&lt;/code&gt;&lt;br/&gt;&lt;code&gt;$2$:表示取第二个&lt;/code&gt;&lt;br/&gt;&lt;code&gt;以此类推:$n$:表示取第n个&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt; &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;匹配数字：0 代表随机取值，1 代表全部取值&lt;br/&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;缺省值：如果正则表达式没有搜找到值，则使用此缺省值&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3、添加一个Debug Sampler ，&lt;/p&gt;
&lt;p&gt;4、执行完，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20160923160509500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;备注：正则表达式提取的结果保存在result中，&lt;/p&gt;
&lt;p&gt;result_g0 :根据匹配规则所匹配的全部内容 ；&lt;/p&gt;
&lt;p&gt;result_g1:根据匹配规则匹配出符合条件的内容；&lt;/p&gt;

&lt;p&gt;4、随后接下即可使用提取的数据，用法${result}&lt;/p&gt;

</description>
<pubDate>Mon, 23 Apr 2018 14:43:00 +0000</pubDate>
<dc:creator>杭州铁锤</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fangwei2015/p/8922382.html</dc:identifier>
</item>
<item>
<title>【原创】分布式之缓存击穿 - 孤独烟</title>
<link>http://www.cnblogs.com/rjzheng/p/8908073.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rjzheng/p/8908073.html</guid>
<description>&lt;h2 id=&quot;什么是缓存击穿&quot;&gt;什么是缓存击穿&lt;/h2&gt;
&lt;p&gt;在谈论缓存击穿之前，我们先来回忆下从缓存中加载数据的逻辑，如下图所示&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/rjzheng/1202350/o_getkeyflow.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因此，如果黑客每次故意查询一个在缓存内必然不存在的数据，导致每次请求都要去存储层去查询，这样缓存就失去了意义。如果在大流量下数据库可能挂掉。这就是&lt;span&gt;缓存击穿&lt;/span&gt;。&lt;br/&gt;场景如下图所示:&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/rjzheng/1202350/o_situation.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们正常人在登录首页的时候，都是根据userID来命中数据，然而黑客的目的是破坏你的系统，黑客可以随机生成一堆userID,然后将这些请求怼到你的服务器上，这些请求在缓存中不存在，就会穿过缓存，直接怼到数据库上,从而造成数据库连接异常。&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;在这里我们给出三套解决方案，大家根据项目中的实际情况，选择使用.&lt;/p&gt;
&lt;p&gt;讲下述三种方案前，我们先回忆下redis的setnx方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SETNX&lt;/strong&gt; &lt;strong&gt;key&lt;/strong&gt; &lt;strong&gt;value&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将 key 的值设为 value ，当且仅当 key 不存在。&lt;/p&gt;
&lt;p&gt;若给定的 key 已经存在，则 &lt;span&gt;SETNX&lt;/span&gt; 不做任何动作。&lt;/p&gt;
&lt;p&gt;SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可用版本&lt;/strong&gt;：&amp;gt;= 1.0.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时间复杂度：&lt;/strong&gt; O(1)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;返回值：&lt;/strong&gt; 设置成功，返回 1。设置失败，返回 0 。&lt;/p&gt;
&lt;p&gt;效果如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;redis&amp;gt; EXISTS job                # job 不存在
(integer) 0

redis&amp;gt; SETNX job &quot;programmer&quot;    # job 设置成功
(integer) 1

redis&amp;gt; SETNX job &quot;code-farmer&quot;   # 尝试覆盖 job ，失败
(integer) 0

redis&amp;gt; GET job                   # 没有被覆盖
&quot;programmer&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;使用互斥锁&quot;&gt;1、使用互斥锁&lt;/h3&gt;
&lt;p&gt;该方法是比较普遍的做法，即，在根据key获得的value值为空时，先锁上，再从数据库加载，加载完毕，释放锁。若其他线程发现获取锁失败，则睡眠50ms后重试。&lt;/p&gt;
&lt;p&gt;至于锁的类型，单机环境用并发包的Lock类型就行，集群环境则使用分布式锁( redis的setnx)&lt;/p&gt;
&lt;p&gt;集群环境的redis的代码如下所示:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;String get(String key) {  
   String value = redis.get(key);  
   if (value  == null) {  
    if (redis.setnx(key_mutex, &quot;1&quot;)) {  
        // 3 min timeout to avoid mutex holder crash  
        redis.expire(key_mutex, 3 * 60)  
        value = db.get(key);  
        redis.set(key, value);  
        redis.delete(key_mutex);  
    } else {  
        //其他线程休息50毫秒后重试  
        Thread.sleep(50);  
        get(key);  
    }  
  }  
}  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;优点:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;思路简单&lt;/li&gt;
&lt;li&gt;保证一致性&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;代码复杂度增大&lt;/li&gt;
&lt;li&gt;存在死锁的风险&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;异步构建缓存&quot;&gt;2、异步构建缓存&lt;/h3&gt;
&lt;p&gt;在这种方案下，构建缓存采取异步策略，会从线程池中取线程来异步构建缓存，从而不会让所有的请求直接怼到数据库上。该方案redis自己维护一个timeout，当timeout小于System.currentTimeMillis()时，则进行缓存更新，否则直接返回value值。&lt;br/&gt;集群环境的redis代码如下所示:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;String get(final String key) {  
        V v = redis.get(key);  
        String value = v.getValue();  
        long timeout = v.getTimeout();  
        if (v.timeout &amp;lt;= System.currentTimeMillis()) {  
            // 异步更新后台异常执行  
            threadPool.execute(new Runnable() {  
                public void run() {  
                    String keyMutex = &quot;mutex:&quot; + key;  
                    if (redis.setnx(keyMutex, &quot;1&quot;)) {  
                        // 3 min timeout to avoid mutex holder crash  
                        redis.expire(keyMutex, 3 * 60);  
                        String dbValue = db.get(key);  
                        redis.set(key, dbValue);  
                        redis.delete(keyMutex);  
                    }  
                }  
            });  
        }  
        return value;  
    }  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;优点:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;性价最佳，用户无需等待&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;无法保证缓存一致性&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;布隆过滤器&quot;&gt;3、布隆过滤器&lt;/h3&gt;
&lt;h4 id=&quot;原理&quot;&gt;1、原理&lt;/h4&gt;
&lt;p&gt;布隆过滤器的&lt;span&gt;巨大用处&lt;/span&gt;就是，能够迅速判断一个元素是否在一个集合中。因此他有如下三个使用场景:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;网页爬虫对URL的去重，避免爬取相同的URL地址&lt;/li&gt;
&lt;li&gt;反垃圾邮件，从数十亿个垃圾邮件列表中判断某邮箱是否垃圾邮箱（同理，垃圾短信）&lt;/li&gt;
&lt;li&gt;缓存击穿，将已存在的缓存放到布隆过滤器中，当黑客访问不存在的缓存时迅速返回避免缓存及DB挂掉。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;OK，接下来我们来谈谈布隆过滤器的原理&lt;br/&gt;其内部维护一个全为0的bit数组，需要说明的是，布隆过滤器有一个误判率的概念，误判率越低，则数组越长，所占空间越大。误判率越高则数组越小，所占的空间越小。&lt;/p&gt;
&lt;p&gt;假设，根据误判率，我们生成一个10位的bit数组，以及2个hash函数（&lt;span class=&quot;math inline&quot;&gt;\(f_1,f_2\)&lt;/span&gt;），如下图所示(生成的数组的位数和hash函数的数量，我们不用去关心是如何生成的，有数学论文进行过专业的证明)。&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/rjzheng/1202350/o_arrays1.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;假设输入集合为(&lt;span class=&quot;math inline&quot;&gt;\(N_1,N_2\)&lt;/span&gt;),经过计算&lt;span class=&quot;math inline&quot;&gt;\(f_1(N_1)\)&lt;/span&gt;得到的数值得为2，&lt;span class=&quot;math inline&quot;&gt;\(f_2(N_1)\)&lt;/span&gt;得到的数值为5，则将数组下标为2和下表为5的位置置为1，如下图所示&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/rjzheng/1202350/o_arrays2.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;同理，经过计算&lt;span class=&quot;math inline&quot;&gt;\(f_1(N_2)\)&lt;/span&gt;得到的数值得为3，&lt;span class=&quot;math inline&quot;&gt;\(f_2(N_2)\)&lt;/span&gt;得到的数值为6，则将数组下标为3和下表为6的位置置为1，如下图所示&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/rjzheng/1202350/o_arrays3.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个时候，我们有第三个数&lt;span class=&quot;math inline&quot;&gt;\(N_3\)&lt;/span&gt;，我们判断&lt;span class=&quot;math inline&quot;&gt;\(N_3\)&lt;/span&gt;在不在集合(&lt;span class=&quot;math inline&quot;&gt;\(N_1,N_2\)&lt;/span&gt;)中，就进行&lt;span class=&quot;math inline&quot;&gt;\(f_1(N_3)，f_2(N_3)\)&lt;/span&gt;的计算&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;若值恰巧都位于上图的红色位置中，我们则认为，&lt;span class=&quot;math inline&quot;&gt;\(N_3\)&lt;/span&gt;在集合(&lt;span class=&quot;math inline&quot;&gt;\(N_1,N_2\)&lt;/span&gt;)中&lt;/li&gt;
&lt;li&gt;若值有一个不位于上图的红色位置中，我们则认为，&lt;span class=&quot;math inline&quot;&gt;\(N_3\)&lt;/span&gt;不在集合(&lt;span class=&quot;math inline&quot;&gt;\(N_1,N_2\)&lt;/span&gt;)中&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;以上就是布隆过滤器的计算原理，下面我们进行性能测试，&lt;/p&gt;
&lt;h4 id=&quot;性能测试&quot;&gt;2、性能测试&lt;/h4&gt;
&lt;p&gt;代码如下:&lt;/p&gt;
&lt;h5 id=&quot;新建一个maven工程引入guava包&quot;&gt;(1)新建一个maven工程，引入guava包&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dependencies&amp;gt;  
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;22.0&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;  
    &amp;lt;/dependencies&amp;gt;  &lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;测试一个元素是否属于一个百万元素集合所需耗时&quot;&gt;(2)测试一个元素是否属于一个百万元素集合所需耗时&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;package bloomfilter;

import com.google.common.hash.BloomFilter;
import com.google.common.hash.Funnels;
import java.nio.charset.Charset;

public class Test {
    private static int size = 1000000;

    private static BloomFilter&amp;lt;Integer&amp;gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), size);

    public static void main(String[] args) {
        for (int i = 0; i &amp;lt; size; i++) {
            bloomFilter.put(i);
        }
        long startTime = System.nanoTime(); // 获取开始时间
        
        //判断这一百万个数中是否包含29999这个数
        if (bloomFilter.mightContain(29999)) {
            System.out.println(&quot;命中了&quot;);
        }
        long endTime = System.nanoTime();   // 获取结束时间

        System.out.println(&quot;程序运行时间： &quot; + (endTime - startTime) + &quot;纳秒&quot;);

    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;命中了
程序运行时间： 219386纳秒&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也就是说，判断一个数是否属于一个百万级别的集合，只要0.219ms就可以完成，性能极佳。&lt;/p&gt;
&lt;h5 id=&quot;误判率的一些概念&quot;&gt;(3)误判率的一些概念&lt;/h5&gt;
&lt;p&gt;首先，我们先不对误判率做显示的设置，进行一个测试，代码如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package bloomfilter;

import java.util.ArrayList;
import java.util.List;

import com.google.common.hash.BloomFilter;
import com.google.common.hash.Funnels;

public class Test {
    private static int size = 1000000;

    private static BloomFilter&amp;lt;Integer&amp;gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), size);

    public static void main(String[] args) {
        for (int i = 0; i &amp;lt; size; i++) {
            bloomFilter.put(i);
        }
        List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;Integer&amp;gt;(1000);  
        
        //故意取10000个不在过滤器里的值，看看有多少个会被认为在过滤器里
        for (int i = size + 10000; i &amp;lt; size + 20000; i++) {  
            if (bloomFilter.mightContain(i)) {  
                list.add(i);  
            }  
        }  
        System.out.println(&quot;误判的数量：&quot; + list.size()); 

    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;误判对数量：330&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果上述代码所示，我们故意取10000个不在过滤器里的值，却还有330个被认为在过滤器里，这说明了误判率为0.03.即，在不做任何设置的情况下，默认的误判率为0.03。&lt;br/&gt;下面上源码来证明：&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/rjzheng/1202350/o_code1.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来我们来看一下，误判率为0.03时，底层维护的bit数组的长度如下图所示&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/rjzheng/1202350/o_code2.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将bloomfilter的构造方法改为&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private static BloomFilter&amp;lt;Integer&amp;gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), size,0.01);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;即，此时误判率为0.01。在这种情况下，底层维护的bit数组的长度如下图所示&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/rjzheng/1202350/o_code3.png&quot; alt=&quot;image&quot;/&gt;&lt;br/&gt;由此可见，误判率越低，则底层维护的数组越长，占用空间越大。因此，&lt;span&gt;误判率实际取值，根据服务器所能够承受的负载来决定，不是拍脑袋瞎想的。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;实际使用&quot;&gt;3、实际使用&lt;/h4&gt;
&lt;p&gt;redis伪代码如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;String get(String key) {  
   String value = redis.get(key);  
   if (value  == null) {  
        if(!bloomfilter.mightContain(key)){
            return null;
        }else{
           value = db.get(key);  
           redis.set(key, value);  
        }
    } 
    return value；
} &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;优点:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;思路简单&lt;/li&gt;
&lt;li&gt;保证一致性&lt;/li&gt;
&lt;li&gt;性能强&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;代码复杂度增大&lt;/li&gt;
&lt;li&gt;需要另外维护一个集合来存放缓存的Key&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;在总结部分，来个漫画把。希望对大家找工作有帮助&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/rjzheng/1202350/o_title1.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 23 Apr 2018 14:39:00 +0000</pubDate>
<dc:creator>孤独烟</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rjzheng/p/8908073.html</dc:identifier>
</item>
<item>
<title>JavaScript实现简单的双向数据绑定 - laixiangran</title>
<link>http://www.cnblogs.com/laixiangran/p/8922301.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laixiangran/p/8922301.html</guid>
<description>&lt;h2 id=&quot;什么是双向数据绑定&quot;&gt;什么是双向数据绑定&lt;/h2&gt;
&lt;p&gt;双向数据绑定简单来说就是UI视图（View）与数据（Model）相互绑定在一起，当数据改变之后相应的UI视图也同步改变。反之，当UI视图改变之后相应的数据也同步改变。&lt;/p&gt;
&lt;p&gt;双向数据绑定最常见的应用场景就是表单输入和提交。一般情况下，表单中各个字段都对应着某个对象的属性，这样当我们在表单输入数据的时候相应的就改变对应的对象属性值，反之对象属性值改变之后也反映到表单中。&lt;/p&gt;
&lt;p&gt;目前流行的 MVVM 框架（Angular、Vue）都实现了双向数据绑定，这样也就实现了视图层和数据层的分离。相信使用过 jQuery 的人都知道，往往我们在获取到数据之后就直接操作 DOM ，这样数据操作和 DOM 操作就高度耦合在一起了。&lt;/p&gt;
&lt;h2 id=&quot;实现方式&quot;&gt;实现方式&lt;/h2&gt;
&lt;h3 id=&quot;发布者-订阅者模式&quot;&gt;发布者-订阅者模式&lt;/h3&gt;
&lt;p&gt;这种实现方式就是使用自定义的 data 属性在 HTML 代码中指明绑定。所有绑定起来的 JavaScript 对象以及 DOM 元素都将 “订阅” 一个发布者对象。任何时候如果 JavaScript 对象或者一个 HTML 输入字段被侦测到发生了变化，我们将代理事件到发布者-订阅者模式，这会反过来将变化广播并传播到所有绑定的对象和元素。具体实现可看这篇文章：&lt;a href=&quot;http://www.html-js.com/article/Study-of-twoway-data-binding-JavaScript-talk-about-JavaScript-every-day&quot; class=&quot;uri&quot;&gt;http://www.html-js.com/article/Study-of-twoway-data-binding-JavaScript-talk-about-JavaScript-every-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;脏值检查&quot;&gt;脏值检查&lt;/h3&gt;
&lt;p&gt;Angularjs（这里特指AngularJS 1.x.x版本，不代表AngularJS 2.x.x版本）双向数据绑定的技术实现是脏值检查。原理就是：Angularjs内部会维护一个序列，将所有需要监控的属性放在这个序列中，当发生某些特定事件时（并不是定时的而是由某些特殊事件触发的，比如：DOM事件、XHR事件等等），Angularjs会调用 $digest 方法，这个方法内部做的逻辑就是遍历所有的 watcher，对被监控的属性做对比，对比其在方法调用前后属性值有没有发生变化，如果发生变化，则调用对应的 handler。&lt;/p&gt;
&lt;p&gt;这种方式的缺点很明显，遍历轮训 watcher 是非常消耗性能的，特别是当单页的监控数量达到一个数量级的时候。&lt;/p&gt;
&lt;h3 id=&quot;访问器监听&quot;&gt;访问器监听&lt;/h3&gt;
&lt;p&gt;vue.js 实现数据双向绑定的原理就是访问器监听。它使用了 ECMAScript5.1（ECMA-262）中定义的标准属性 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&quot;&gt;Object.defineProperty&lt;/a&gt; 方法。通过 Object.defineProperty 设置各个属性的 setter，getter，在数据变动时更新UI视图。&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;实现&lt;/h2&gt;
&lt;p&gt;本文将采用 &lt;code&gt;访问器监听&lt;/code&gt; 这种方式来实现一个简单的双向数据绑定，主要实现：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;obverse：对数据进行处理，重写相应的 set 和 get 函数&lt;/li&gt;
&lt;li&gt;complie：解析指令（e-bind、e-model、e-click）等，并在这个过程中对 view 与 model 进行绑定&lt;/li&gt;
&lt;li&gt;Watcher：作为连接 &lt;code&gt;obverse&lt;/code&gt; 和 &lt;code&gt;complie&lt;/code&gt; 的桥梁，用来绑定更新函数，实现对视图的更新&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;首先看下我们的视图代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;赖祥燃, laixiangran@163.com, http://www.laixiangran.cn&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;实现简单的双向数据绑定&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;#app&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-align:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;eBind.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;EBind&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;++;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;addAge&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;++;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/head&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div id&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;form&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;input type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt; e&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;model&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;button&quot;&lt;/span&gt; e&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;click&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;increment&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;增加&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;/form&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h3 e&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;bind&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;input type=&quot;text&quot; e-model=&quot;person.age&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;button type=&quot;button&quot; e-click=&quot;addAge&quot;&amp;gt;增加&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;h3 e-bind=&quot;person.age&quot;&amp;gt;&amp;lt;/h3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从视图代码可以看出，在 &lt;code&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;&lt;/code&gt; 的子元素中我们应用了三个自定义指令&lt;br/&gt;&lt;code&gt;e-bind&lt;/code&gt;、&lt;code&gt;e-model&lt;/code&gt;、&lt;code&gt;e-click&lt;/code&gt;, 然后我们通过 &lt;code&gt;new EBind({***})&lt;/code&gt; 应用双向数据绑定。&lt;/p&gt;
&lt;h2 id=&quot;分析&quot;&gt;分析&lt;/h2&gt;
&lt;h3 id=&quot;ebind&quot;&gt;EBind&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;EBind&lt;/code&gt; 构造函数接收应用根元素、数据、方法来初始化双向数据绑定：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;EBind&lt;/span&gt;(options) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_init&lt;/span&gt;(options)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;EBind&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_init&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (options) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// options 为上面使用时传入的结构体，包括 el, data, methods&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$options&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; options&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// el 是 #app, this.$el 是 id 为 app 的 Element 元素&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$el&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;options&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;el&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// this.$data = {number: 0}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;options&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// this.$methods = {increment: function () { this.number++; }}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$methods&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;options&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// _binding 保存着 model 与 view 的映射关系，也就是我们定义的 Watcher 的实例。当 model 改变时，我们会触发其中的指令类更新，保证 view 也能实时更新&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_binding&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{};&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// 重写 this.$data 的 set 和 get 方法&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_obverse&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$data&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// 解析指令&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_complie&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$el&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;obverse&quot;&gt;obverse&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;_obverse&lt;/code&gt; 的关键是使用 Object.defineProperty 来定义传入数据对象的 getter 及 setter，通过 setter 来监听对象属性的变化从而触发 Watcher 中的更新方法。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
&lt;span class=&quot;va&quot;&gt;EBind&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_obverse&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (currentObj&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; completeKey) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; _this &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;keys&lt;/span&gt;(currentObj).&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (key) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;currentObj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hasOwnProperty&lt;/span&gt;(key)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;// 按照前面的数据，_binding = {number: _directives: [], preson: _directives: [], preson.age: _directives: []}&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; completeTempKey &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; completeKey &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; completeKey &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; key : key&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;_this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_binding&lt;/span&gt;[completeTempKey] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;_directives&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; []
            &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; currentObj[key]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;// 如果值还是对象，则遍历处理&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;_this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_obverse&lt;/span&gt;(value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; completeTempKey)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; binding &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;_this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_binding&lt;/span&gt;[completeTempKey]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;// 双向数据绑定的关键&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;defineProperty&lt;/span&gt;(currentObj&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;enumerable&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;configurable&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(key &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'获取'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(value))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; value&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (newVal) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (value &lt;span class=&quot;op&quot;&gt;!==&lt;/span&gt; newVal) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(key &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'更新'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(newVal))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        value &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; newVal&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                        &lt;span class=&quot;co&quot;&gt;// 当 number 改变时，触发 _binding[number]._directives 中的绑定的 Watcher 类的更新&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;binding&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;_directives&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (item) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;update&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;complie&quot;&gt;_complie&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;_complie&lt;/code&gt; 的关键是简析自定义指令，根据不同的自定义指令实现不同的功能。如 &lt;code&gt;e-click&lt;/code&gt; 就解析为将对应 node 绑定 onclick 事件，&lt;code&gt;e-model&lt;/code&gt; 必须绑定在 INPUT 和 TEXTAREA 上，然后监听 input 事件，更改 model 的值，&lt;code&gt;e-bind&lt;/code&gt; 就直接将绑定的变量值输出到DOM元素中。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
&lt;span class=&quot;va&quot;&gt;EBind&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_complie&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (root) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; _this &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; nodes &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;root&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;nodes&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; node &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nodes[i]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;// 对所有元素进行遍历，并进行处理&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;children&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_complie&lt;/span&gt;(node)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;// 如果有 e-click 属性，我们监听它的 onclick 事件，触发 increment 事件，即 number++&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hasAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'e-click'&lt;/span&gt;)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; attrVal &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'e-click'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;co&quot;&gt;// bind 是使 data 的作用域与 method 函数的作用域保持一致&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;_this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$methods&lt;/span&gt;[attrVal].&lt;span class=&quot;at&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;_this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$data&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;// 如果有 e-model 属性且元素是 INPUT 和 TEXTAREA，我们监听它的 input 事件，更改 model 的值&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hasAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'e-model'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;tagName&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'INPUT'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;tagName&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'TEXTAREA'&lt;/span&gt;)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (index) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; attrVal &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'e-model'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;co&quot;&gt;// 添加指令类 Watcher&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;_this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_binding&lt;/span&gt;[attrVal].&lt;span class=&quot;va&quot;&gt;_directives&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Watcher&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; node&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;eb&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; _this&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; attrVal&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'value'&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; keys &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;attrVal&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; lastKey &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; keys[&lt;span class=&quot;va&quot;&gt;keys&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; model &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;keys&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; key) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; value[key] &lt;span class=&quot;op&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; value&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; value[key]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;_this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$data&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    model[lastKey] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nodes[index].&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)(i))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;// 如果有 e-bind 属性&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hasAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'e-bind'&lt;/span&gt;)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; attrVal &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'e-bind'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;// 添加指令类 Watcher&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;_this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_binding&lt;/span&gt;[attrVal].&lt;span class=&quot;va&quot;&gt;_directives&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Watcher&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'text'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; node&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;eb&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; _this&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; attrVal&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'innerHTML'&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;watcher&quot;&gt;Watcher&lt;/h3&gt;
&lt;p&gt;作为连接 &lt;code&gt;_obverse&lt;/code&gt; 和 &lt;code&gt;_complie&lt;/code&gt; 的桥梁，用来绑定更新函数，通过 &lt;code&gt;update&lt;/code&gt; 实现对视图的更新。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Watcher&lt;/span&gt;(options) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// options 属性：&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// name 指令名称，例如文本节点，该值设为&quot;text&quot;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// el 指令对应的DOM元素&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// eb 指令所属EBind实例&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// exp 指令对应的值，本例如&quot;number&quot;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// attr 绑定的属性值，本例为&quot;innerHTML&quot;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$options&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; options&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;update&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 根据 model 更新 view&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Watcher&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; _this &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; keys &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;$options&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;exp&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// 比如 H3.innerHTML = this.data.number; 当 number 改变时，会触发这个 update 函数，保证对应的 DOM 内容进行了更新。&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;$options&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;el&lt;/span&gt;[&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;$options&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;attr&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;keys&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; key) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; value[key]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;_this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;$options&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;eb&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$data&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;这样我们就使用原生 JavaScript 实现了简单的双向数据绑定。&lt;/p&gt;
&lt;p&gt;源码：&lt;a href=&quot;https://github.com/laixiangran/e-bind&quot; class=&quot;uri&quot;&gt;https://github.com/laixiangran/e-bind&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 23 Apr 2018 14:26:00 +0000</pubDate>
<dc:creator>laixiangran</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/laixiangran/p/8922301.html</dc:identifier>
</item>
<item>
<title>用solidity语言开发代币智能合约 - 以太坊开发</title>
<link>http://www.cnblogs.com/helloworld2018/p/8922278.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/helloworld2018/p/8922278.html</guid>
<description>&lt;p&gt;智能合约开发是以太坊编程的核心之一，而代币是区块链应用的关键环节，下面我们来用solidity语言开发一个代币合约的实例，希望对大家有帮助。&lt;/p&gt;
&lt;p&gt;以太坊的应用被称为去中心化应用（DApp），DApp的开发主要包括两大部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;智能合约的开发&lt;/li&gt;
&lt;li&gt;用户界面的开发&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在本文中，我们将介绍智能合约的开发语言solidity。&lt;/p&gt;
&lt;p&gt;让我们先从一个非常基础的例子开始，不用担心你现在还一点都不了解，我们将逐步了解到更多的细节。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;contract SimpleStorage {
    &lt;/span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;span&gt; storedData;

    function &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;(&lt;span&gt;uint&lt;/span&gt;&lt;span&gt; x) {
        storedData &lt;/span&gt;=&lt;span&gt; x;
    }

    function &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;() constant returns (&lt;span&gt;uint&lt;/span&gt;&lt;span&gt; retVal) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; storedData;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Solidity中，一个合约由一组代码（合约的函数）和数据（合约的状态）组成。合约位于以太坊区块链上的一个特殊地址。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;uint storedData&lt;/em&gt;; 这行代码声明了一个状态变量，变量名为storedData，类型为 uint （256bits无符号整数）。你可以认为它就像数据库里面的一个存储单元，跟管理数据库一样，可以通过调用函数查询和修改它。在以太坊中，通常只有合约的拥有者才能这样做。在这个例子中，函数 set 和 get 分别用于修改和查询变量的值。&lt;/p&gt;
&lt;p&gt;跟很多其他语言一样，访问状态变量时，不需要在前面增加 this. 这样的前缀。&lt;/p&gt;
&lt;p&gt;这个合约还无法做很多事情（受限于以太坊的基础设施），仅仅是允许任何人储存一个数字。而且世界上任何一个人都可以来存取这个数字，缺少一个（可靠的）方式来保护你发布的数字。任何人都可以调用set方法设置一个不同的数字覆盖你发布的数字。但是你的数字将会留存在区块链的历史上。稍后我们会学习如何增加一个存取限制，使得只有你才能修改这个数字。&lt;/p&gt;
&lt;h2 id=&quot;h2_0&quot;&gt;编写代币合约&lt;/h2&gt;
&lt;p&gt;接下来的合约将实现一个形式最简单的加密货币。任何人都可以发送货币给其他人，不需要注册用户名和密码，只要有一对以太坊的公私钥即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;contract Coin {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关键字“public”使变量能从合约外部访问。&lt;/span&gt;
    address &lt;span&gt;public&lt;/span&gt;&lt;span&gt; minter;
    mapping (address &lt;/span&gt;=&amp;gt; &lt;span&gt;uint&lt;/span&gt;) &lt;span&gt;public&lt;/span&gt;&lt;span&gt; balances;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;事件让轻客户端能高效的对变化做出反应。&lt;/span&gt;
    &lt;span&gt;event&lt;/span&gt; Sent(address &lt;span&gt;from&lt;/span&gt;, address to, &lt;span&gt;uint&lt;/span&gt;&lt;span&gt; amount);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个构造函数的代码仅仅只在合约创建的时候被运行。&lt;/span&gt;
&lt;span&gt;    function Coin() {
        minter &lt;/span&gt;=&lt;span&gt; msg.sender;
    }
    function mint(address receiver, &lt;/span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;span&gt; amount) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (msg.sender != minter) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        balances[receiver] &lt;/span&gt;+=&lt;span&gt; amount;
    }
    function send(address receiver, &lt;/span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;span&gt; amount) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (balances[msg.sender] &amp;lt; amount) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        balances[msg.sender] &lt;/span&gt;-=&lt;span&gt; amount;
        balances[receiver] &lt;/span&gt;+=&lt;span&gt; amount;
        Sent(msg.sender, receiver, amount);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个合约引入了一些新的概念，让我们来逐个介绍。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
address &lt;span&gt;public&lt;/span&gt; minter;`
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这行代码声明了一个可公开访问的状态变量，类型为address。address类型的值大小为160 bits，不支持任何算术操作。适用于存储合约的地址或其他人的公私钥。public关键字会自动为其修饰的状态变量生成访问函数。没有public关键字的变量将无法被其他合约访问。另外只有本合约内的代码才能写入。自动生成的函数如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
function minter() returns (address) { &lt;span&gt;return&lt;/span&gt; minter; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然我们自己增加一个这样的访问函数是行不通的。编译器会报错，指出这个函数与一个状态变量重名。&lt;/p&gt;
&lt;p&gt;下一行代码创建了一个public的状态变量，但是其类型更加复杂：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mapping (address =&amp;gt; &lt;span&gt;uint&lt;/span&gt;) &lt;span&gt;public&lt;/span&gt; balances;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该类型将一些address映射到无符号整数。mapping可以被认为是一个哈希表，每一个可能的key对应的value被虚拟的初始化为全0.这个类比不是很严谨，对于一个mapping，无法获取一个包含其所有key或者value的链表。所以我们得自己记着添加了哪些东西到mapping中。更好的方式是维护一个这样的链表，或者使用其他更高级的数据类型。或者只在不受这个缺陷影响的场景中使用mapping，就像这个例子。在这个例子中由public关键字生成的访问函数将会更加复杂，其代码大致如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
function balances(address _account) returns (&lt;span&gt;uint&lt;/span&gt;&lt;span&gt; balance) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; balances[_account];
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以很方便的通过这个函数查询某个特定账号的余额。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;event&lt;/span&gt; Sent(address &lt;span&gt;from&lt;/span&gt;, address to, &lt;span&gt;uint&lt;/span&gt; value); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这行代码声明了一个“事件”。由send函数的最后一行代码触发。客户端（服务端应用也适用）可以以很低的开销来监听这些由区块链触发的事件。事件触发时，监听者会同时接收到from，to，value这些参数值，可以方便的用于跟踪交易。为了监听这个事件，你可以使用如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
Coin.Sent().watch({}, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;, function(error, result) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;error) {
        console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Coin transfer: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + result.args.amount +
            &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; coins were sent from &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + result.args.&lt;span&gt;from&lt;/span&gt; +
            &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; to &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + result.args.to + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Balances now:\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +
            &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Sender: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + Coin.balances.call(result.args.&lt;span&gt;from&lt;/span&gt;) +
            &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Receiver: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; Coin.balances.call(result.args.to));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意在客户端中是如何调用自动生成的 balances 函数的。&lt;/p&gt;
&lt;p&gt;这里有个比较特殊的函数 Coin。它是一个构造函数，会在合约创建的时候运行，之后就无法被调用。它会永久得存储合约创建者的地址。msg（以及tx和block）是一个神奇的全局变量，它包含了一些可以被合约代码访问的属于区块链的属性。msg.sender 总是存放着当前函数的外部调用者的地址。&lt;/p&gt;
&lt;p&gt;最后，真正被用户或者其他合约调用，用来完成本合约功能的函数是mint和send。如果合约创建者之外的其他人调用mint，什么都不会发生。而send可以被任何人（拥有一定数量的代币）调用，发送一些币给其他人。注意，当你通过该合约发送一些代币到某个地址，在区块链浏览器中查询该地址将什么也看不到。因为发送代币导致的余额变化只存储在该代币合约的数据存储中。通过事件我们可以很容易创建一个可以追踪你的新币交易和余额的“区块链浏览器”。&lt;/p&gt;

&lt;p&gt;分享个适合区块链新手的教程：&lt;a href=&quot;http://t.cn/RmeEwxJ&quot; target=&quot;_blank&quot;&gt;以太坊DApp开发实战入门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果想加入以太坊技术开发群聊交流技术可以加微信.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/845255/201804/845255-20180420231543398-958999099.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 23 Apr 2018 14:21:00 +0000</pubDate>
<dc:creator>以太坊开发</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/helloworld2018/p/8922278.html</dc:identifier>
</item>
<item>
<title>unittest测试框架详谈及实操 - 菜鸟可米</title>
<link>http://www.cnblogs.com/cnkemi/p/8920921.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cnkemi/p/8920921.html</guid>
<description>&lt;p&gt;申明：本文是基于python3.x及selenium3.x.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;unittest&lt;/strong&gt;，也可以称为PyUnit，可以用来创建全面的测试套件，可以用于单元自动化测试(模块)、功能自动化测试(UI)等等。&lt;/p&gt;
&lt;p&gt;官方文档：https://docs.python.org/3.6/library/unittest.html&lt;/p&gt;
&lt;p&gt;unittest具备创建测试用例、测试套件、测试夹具的能力，包括的组件如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Test Fixture&lt;/strong&gt;（测试夹具）：通过使用测试夹具，可以定义在单个或者多个测试执行之前的准备工作和测试执行后的清理工作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test Case&lt;/strong&gt;（测试用例）：一个测试用例是在unittest中执行测试的最小单元。它通过unittest提供的assert方法来验证一组特定的操作或输入以后得到的具体响应。unittest提供了一个名为TestCase的基础类，可以用来创建测试用例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test Suite&lt;/strong&gt;（测试套件）：一个测试套件是多个测试用例的集合，是针对被测程序的对应功能和模块创建的一组测试，一个测试套件内的测试将一起执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test Runner&lt;/strong&gt;（测试执行器）：测试执行器负责测试执行调试并且生成测试结果给用户。测试执行器可以使用图形界面、文本界面或者特定的返回值来展示测试执行结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test Report&lt;/strong&gt;（测试报告）：测试报告用来展示所有执行用例的成功或者失败状态的汇总，执行失败的测试步骤的预期结果与实际结果，还有整体运行状况及运行时间的汇总。注意，unittest本身是没有相应的内置模块来生成友好的报告，但我们可以借用unittest的扩展库HTMLTestRunner来实现，需要单独下载并放到python安装目录下。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;TestCase类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　我们可以通过继承TestCase类并且在测试类为每一个测试添加测试方法来创建单个测试或者一组测试。每个测试最重要的任务是调用assert方法来比对结果，如调用assEqual()来检验结果，调用assertTrue()来验证条件，或者调用assertRises()来验证预期的异常。&lt;/p&gt;
&lt;p&gt;　　除了添加测试，我们还要添加测试夹具——setUp()方法和tearDown()方法，用来创建或处置测试用用例所需的任何对象和条件。&lt;/p&gt;
&lt;p&gt;　　下面就边实操边说明：&lt;/p&gt;
&lt;p&gt;　　首先，我们需要先引入unittest模块，然后定义一个继承于TestCase类的子类，如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; unittest
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; selenium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; BaiduSearchTest(unittest.TestCase):
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;setUp()方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　一个测试用例是从setUp()方法开始执行的，用这个方法在每个测试执行前去执行一些初始化的任务。比如创建浏览器实例，访问URL，加载测试数据和打开日志文件等。此方法没有参数，不返回任何值。当定义一个setUp()方法，测试执行器在每次执行测试方法之前优先执行该方法。在下面的例子里，我将用setUp()方法来创建Chrome实例，并在测试开始执行之前访问到被测程序的主页。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; unittest
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; selenium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; BaiduSearchTest(unittest.TestCase):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; setUp(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;create a new Chrome session&lt;/span&gt;
        self.driver =&lt;span&gt; webdriver.Chrome()
        self.driver.implicitly_wait(&lt;/span&gt;30&lt;span&gt;)
        self.driver.maximize_window()

        self.driver.get(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;编写用例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　有了setUp()方法，现在可以写一些测试用例来验证被测程序的功能。与setUp()方法相似，test方法也是在TestCase类中实现。重点是测试方法的命名必须以test开头，这种命名约定也通知test runner哪个方法代表测试方法。对于test runner能找到的每个测试方法，都会在执行测试方法之前先执行setUp()方法。这样做有助于确保每个测试方法能够依赖相同的环境，无论类中有多少测试方法。下面将添加一个新测试方法test_search_python(),并使用简单的assertEqual()方法来验证搜索术语返回的结果和预期结果相匹配。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; unittest
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; selenium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; time &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sleep

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; BaiduSearchTest(unittest.TestCase):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; setUp(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;create a new Chrome session&lt;/span&gt;
        self.driver =&lt;span&gt; webdriver.Chrome()
        self.driver.implicitly_wait(&lt;/span&gt;30&lt;span&gt;)
        self.driver.maximize_window()

        self.driver.get(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_search_python(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;get the search textbox&lt;/span&gt;
        search_textbox = self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;kw&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        search_textbox.clear()
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;enter search keyword&lt;/span&gt;
        search_textbox.send_keys(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;python&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;get the and seacrh button and click&lt;/span&gt;
        search_button = self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;su&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        search_button.click()

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;add assert&lt;/span&gt;
        sleep(2&lt;span&gt;)
        tag &lt;/span&gt;= self.driver.find_element_by_link_text(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PyPI&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).text        
        self.assertEqual(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PyPI&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,tag)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;tearDown()方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　类似于setUp()方法在每个测试方法之前被调用，TestCase类也会在测试执行完成后调用tearDown()方法来清理所有的初始化值。一旦测试被执行，在setUp()中定义的值将不再需要，所以最好的在完成的时候清理掉。在我的例子中，在测试执行完成后，就不再需要Chrome的实例。我将在tearDown()方法中关闭浏览器，代码接上面的如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;...
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; tearDown(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;close the browser window&lt;/span&gt;
        self.driver.quit()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　为了通过命令行运行测试，我们可以在测试用例中添加调用简单的unittest.main()方法，并将传递verbosity参数以便在控制台显示详细的测试情况。代码接上面的如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;...
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    unittest.main(verbosity&lt;/span&gt;=2)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　然后将整个测试代码保存为python脚本，在这个例子里，保存为baidusearch.py。在脚本存放路径下用命令行窗口通过下面的命令在执行该测试。在测试运行结束后，unittest会把测试结果显示在控制台，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/942023/201804/942023-20180423215334798-1483460738.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　除了测试结果概要外，当一个测试用例执行失败，针对每个失败也会通过文本信息展示具体哪里有错误。如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/942023/201804/942023-20180423215636774-797405090.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上图展示了具体哪个测试方法执行失败，通过打印信息可以定位具体导致失败的代码。另外，失败自身也会以AssertionError形式显示，上面例子为预期结果与实际结果不匹配。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 添加其他测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　下面将为测试类添加其它的测试。规则很简单，新的测试方法命名也要以test开头，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;...
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_search_selenium(self):
    search_textbox &lt;/span&gt;= self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;kw&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    search_textbox.clear()
    search_textbox.send_keys(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;python&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    search_button &lt;/span&gt;= self.driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;su&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    search_button.click()

    sleep(&lt;/span&gt;2&lt;span&gt;)
    tag &lt;/span&gt;= self.driver.find_element_by_link_text(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Selenium Remote Control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).text        
    self.assertIn(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Selenium&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,tag)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行整个测试类将看到两个Chrome的实例将打开和关闭，这正是setUp()方法和tearDown()方法针对每个测试方法都要执行产生的结果，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/942023/201804/942023-20180423220737999-187361486.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;更多待续……&lt;/p&gt;
</description>
<pubDate>Mon, 23 Apr 2018 14:15:00 +0000</pubDate>
<dc:creator>菜鸟可米</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cnkemi/p/8920921.html</dc:identifier>
</item>
<item>
<title>ELK 6.2.4搭建 - Harvey2017</title>
<link>http://www.cnblogs.com/harvey2017/p/8922164.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/harvey2017/p/8922164.html</guid>
<description>&lt;p&gt;开源实时日志分析ELK平台能够完美的解决我们上述的问题，ELK由ElasticSearch、Logstash和Kiabana三个开源工具组成。&lt;/p&gt;
&lt;p&gt;官方网站：&lt;a href=&quot;https://www.elastic.co/products&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://www.elastic.co/products&lt;/a&gt;&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Logstash是一个完全开源的工具，他可以对你的日志进行收集、过滤，并将其存储供以后使用（如，搜索）。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Kibana 也是一个开源和免费的工具，它Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;ELK下载：&lt;a href=&quot;https://www.elastic.co/downloads/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://www.elastic.co/downloads/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ELK工作原理：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1163911/201804/1163911-20180423222439174-18792305.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4 id=&quot;h4_3&quot;&gt;&lt;strong&gt;ElasticSearch&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;配置ElasticSearch：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;collapse:true;;gutter:true;&quot;&gt;
unzip elasticsearch-6.2.4.zip
cd elasticsearch-6.2.4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后编辑ES的配置文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;collapse:true;;gutter:true;&quot;&gt;
vi config/elasticsearch.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改以下配置项：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;collapse:true;;gutter:true;&quot;&gt;
cluster.name=es_cluster
node.name=node0
path.data=/tmp/elasticsearch/data
path.logs=/tmp/elasticsearch/logs
#当前hostname或IP，我这里是node1
network.host=node1
network.port=9200
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他的选项保持默认，然后启动ES：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;collapse:true;;gutter:true;&quot;&gt;
nohup sh elasticsearch &amp;gt; nohup.log &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.需要添加用户elk,ES不能以root用户进行启动&lt;/p&gt;
&lt;p&gt;2.可能出现的错误：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;max file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;collapse:true;;gutter:true;&quot;&gt;
vi /etc/security/limits.conf 
elk soft nofile 819200  
elk hard nofile 819200
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;max number of threads [1024] for user [work] likely too low, increase to at least [2048]&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;collapse:true;;gutter:true;&quot;&gt;
vi /etc/security/limits.d/90-nproc.conf 
*          soft    nproc     1024
#修改为：
*          soft    nproc     2048
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;collapse:true;;gutter:true;&quot;&gt;
vi /etc/sysctl.conf 
#增加改行配置：
vm.max_map_count=655360  
#保存退出后，执行：  
sysctl -p
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;另外再配置ES的时候，threadpool.bulk.queue_size 已经变成了thread_pool.bulk.queue_size ，ES_HEAP_SIZE，ES_MAX_MEM等配置都变为ES_JAVA_OPTS这一配置项，如限制内存最大最小为1G：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;collapse:true;;gutter:true;&quot;&gt;
export ES_JAVA_OPTS=&quot;-Xms1g -Xmx1g&quot; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后可以打开页面http://node1:9200/，将会看到以下内容：(我是通过外部访问虚拟机，因此为了简单没有配置host文件，直接用ip访问)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1163911/201804/1163911-20180423213907842-1680993582.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;h4_3&quot;&gt;Logstash&lt;/h4&gt;
&lt;p&gt;配置Logstash：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;collapse:true;;gutter:true;&quot;&gt;
tar -zxvf logstash-6.2.4.tar.gz
cd logstash-6.2.4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编写配置文件(名字和位置可以随意，这里我放在config目录下，取名为log_app.conf)：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:bash;collapse:true;;gutter:true;&quot;&gt;
vi config/log_app.config 
#以下为内容
input {
        file {
                path =&amp;gt; &quot;/usr/local/software/elk/app.log&quot;
                start_position =&amp;gt; &quot;beginning&quot; #从文件开始处读写
        }
#       stdin {}  #可以从标准输入读数据
}
filter {
  #Only matched data are send to output.
}
output {
  # For detail config for elasticsearch as output,
  # See: https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html
  elasticsearch {
    action =&amp;gt; &quot;index&quot;          #The operation on ES
    hosts  =&amp;gt; &quot;node1:9200&quot;     #ElasticSearch host, can be array.
    index  =&amp;gt; &quot;applog&quot;         #The index to write data to.
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他的选项保持默认，然后启动Logstash：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;collapse:true;;gutter:true;&quot;&gt;
# -f为指定配置文件
nohup sh ./bin/logstash -f ../config/log_app.config &amp;gt; nohup.log &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;日志：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1163911/201804/1163911-20180423215232927-708950322.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4 id=&quot;h4_6&quot;&gt;&lt;strong&gt;Kibana&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;配置Kibana：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;collapse:true;;gutter:true;&quot;&gt;
tar -zxvf kibana-6.2.4-linux-x86_64.tar.gz
cd kibana-6.2.4-linux-x86_64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改以下几项（由于是单机版的，因此host的值也可以使用localhost来代替，这里仅仅作为演示）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;collapse:true;;gutter:true;&quot;&gt;
server.port: 5601
server.host: “node1”
elasticsearch.url: http://node1:9200
kibana.index: “.kibana”
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动kibana：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;collapse:true;;gutter:true;&quot;&gt;
nohup sh ./bin/kibana &amp;gt; nohup.log &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动后界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1163911/201804/1163911-20180423215907367-582334952.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后需要创建index，步骤如下：&lt;/p&gt;
&lt;p&gt;①点击左边iscover出现以下界面&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1163911/201804/1163911-20180423222043849-1834431194.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;②按照注释配置,然后点击Next step,在第二页 选择@timestamp点击create创建&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180224183643654&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;③创建完成之后,可以看到以下一个界面,红框内是 自动生成的域,也可以理解为 跟数据库中的字段类似,其中有一个message字段,就是我们想要的日志信息。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdn.net/2018022418370791&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;④再次点击Discover出现以下界面,可以看到默认搜索的是最后15分钟的日志,可以通过点击设置搜索的时间范围.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180224191522407&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;⑤可以点击右侧域的add设置需要显示的字段&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180224191538785&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;添加完成之后,日志显示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1163911/201804/1163911-20180423220911556-614247915.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://my.oschina.net/itblog/blog/547250&quot; target=&quot;_blank&quot;&gt;https://my.oschina.net/itblog/blog/547250&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　   &lt;a href=&quot;https://blog.csdn.net/abcd_d_/article/details/53018927&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/abcd_d_/article/details/53018927&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　   &lt;a href=&quot;https://blog.csdn.net/qq_34021712/article/details/79364592&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/qq_34021712/article/details/79364592&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;         &lt;a href=&quot;https://www.cnblogs.com/yincheng/p/logstash.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/yincheng/p/logstash.html&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 23 Apr 2018 14:10:00 +0000</pubDate>
<dc:creator>Harvey2017</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/harvey2017/p/8922164.html</dc:identifier>
</item>
</channel>
</rss>