<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Object Detection · RCNN论文解读 - 梦里风林</title>
<link>http://www.cnblogs.com/hellocwh/p/8431802.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hellocwh/p/8431802.html</guid>
<description>&lt;blockquote readability=&quot;3.6363636363636&quot;&gt;
&lt;p&gt;转载请注明作者：&lt;a href=&quot;https://github.com/ahangchen&quot;&gt;梦里茶&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Object Detection，顾名思义就是从图像中检测出目标对象，具体而言是找到对象的位置，常见的数据集是PASCAL VOC系列。2010年-2012年，Object Detection进展缓慢，在DPM之后没有大的进展，直到CVPR2014，RBG大神（Ross Girshick）把当时爆火的CNN结合到Detection中，将PASCAL VOC上的准确率提高到53.7%，本文为你解读RBG的CVPR2014 paper：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Rich feature hierarchies for accurate object detection and semantic segmentation&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;key-insights&quot;&gt;Key insights&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;可以用CNN对图片局部区域做识别，从而判断这个局部是不是目标对象&lt;/li&gt;
&lt;li&gt;在标记数据稀缺的情况下，可以用其他数据集预训练，再对模型进行fine tune&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;rcnn-overview&quot;&gt;RCNN Overview&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1828517-547577f8e0ff1dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;RCNN Overview&quot;/&gt;&lt;/p&gt;
&lt;ol readability=&quot;-2&quot;&gt;&lt;li&gt;输入图片&lt;/li&gt;
&lt;li readability=&quot;1.5&quot;&gt;
&lt;p&gt;通过selective search给出2k个推荐区域（region proposal）&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;检测问题的一个特点是，我们不仅需要知道一张图片中是否包含目标对象，而且需要知道目标对象所处位置，有几种方式，一种是回归图中检测框的位置[38]，但是准确率很低，一种是用滑动窗口的方法将图片切割成很多小块，再对小块做分析，但是对于CNN来说，每经过一层pooling，感受野就会变小，RCNN采用了一个五层卷积的结构，要求输入至少是195x195的尺寸，用滑窗不能保证这个输入大小。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1828517-989157bfbf3c19ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Weight learning on regions&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Selective search是一种比较好的数据筛选方式，首先对图像进行过分割切成很多很多小块，然后根据小块之间的颜色直方图、梯度直方图、面积和位置等基本特征，把相近的相邻对象进行拼接，从而选出画面中有一定语义的区域。关于Selective Search的更多信息可以查阅这篇论文：Recognition using Regions（CVPR2009）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;将每个推荐区域传入CNN提取特征&lt;/li&gt;
&lt;li&gt;为每个类训练一个SVM，用SVM判断推荐区域属于哪个类&lt;/li&gt;
&lt;li&gt;用NMS对同个类的region proposals进行合并&lt;/li&gt;
&lt;li&gt;用bounding box regressor对预测位置进行精细的修正，进一步提高精度&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;非极大值抑制（NMS）顾名思义就是抑制不是极大值的元素，搜索局部的极大值。这个局部代表的是一个邻域，邻域有两个参数可变，一是邻域的维数，二是邻域的大小。这里不讨论通用的NMS算法，而是用于在目标检测中用于提取分数最高的窗口的。例如在行人检测中，滑动窗口经提取特征，经分类器分类识别后，每个窗口都会得到一个分数。但是滑动窗口会导致很多窗口与其他窗口存在包含或者大部分交叉的情况。这时就需要用到NMS来选取那些邻域里分数最高（是行人的概率最大），并且抑制那些分数低的窗口。（转自知乎专栏：晓雷的机器学习笔记）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;训练&quot;&gt;训练&lt;/h2&gt;
&lt;p&gt;从上面的Overview可以看出，需要训练的主要有两个部分，各个类共用的CNN和各个类单独的SVM。&lt;/p&gt;
&lt;h3 id=&quot;network-structure&quot;&gt;Network Structure&lt;/h3&gt;
&lt;p&gt;RCNN试了两种CNN框架，一种是Hinton他们在NIPS2012上发表的AlexNet：ImageNet Classification with Deep Convolutional Neural Networks&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1828517-109d529bbb1f78e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;AlexNet&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是一个五层卷积+三层全连接的结构，输入是224x224的图片，输出是1000维one-hot的类别，&lt;/p&gt;
&lt;p&gt;一种是VGG16(Very Deep Convolu-&lt;br/&gt;tional Networks for Large-Scale Image Recognition)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1828517-643c409779b7eec9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;VGG16&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是两个网络的检测结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1828517-bf89754fcf348ec7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;RCNN Result with AlexNet(T) and VGG16(O)&quot;/&gt;&lt;/p&gt;
&lt;p&gt;VGG16精度更高一些，但是计算量比较大，实时性不如AlexNet，方便起见我们下面都以AlexNet为基础进行分析。&lt;/p&gt;
&lt;h3 id=&quot;supervised-pretraining&quot;&gt;Supervised Pretraining&lt;/h3&gt;
&lt;p&gt;首先用ImageNet预训练，输入图片，输出为这张图片包含的目标对象的类别，而不涉及具体位置，因为ImageNet中没有bounding box信息。训练到AlexNet能够在分类任务上达到Hinton他们的精度之后，开始用检测数据做Fine tune。&lt;/p&gt;
&lt;h3 id=&quot;domain-specific-fine-tuning&quot;&gt;Domain Specific Fine Tuning&lt;/h3&gt;
&lt;p&gt;直接用ImageNet预训练得到的CNN在PASCAL VOC上表现肯定是不如人意的，接下来，用PASCAL VOC 的检测数据进行fine tune。 因为VOC有20个分类，在ILSVR2013的检测任务中，最后有200个分类，而ImageNet有1000个分类，首先要把最后的全连接分类层替换成目标任务输出个数+1（加一个背景类）的全连接层。输入数据用的是Selective Search得到的Region Proposals对应的bounding box，&lt;/p&gt;
&lt;p&gt;在这里的Fine tune中，需要判定Region Proposal属于哪种目标分类，在VOC的训练集中，有bounding box和对应的分类标注，RBG他们是检查每个Region Proposal与训练集中bounding box的重叠率，如果Region Proposal和bounding box重叠率大于阈值（经过实验，选了0.5）,则认为这个Region Proposal的分类为bounding box对应的分类，并且用这个对应的bounding box作为Fine tune的输入。&lt;/p&gt;
&lt;p&gt;但是这些输入大小不一，需要调整到目标输入尺寸224x224，在附录A中讨论了很多的预处理方法，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1828517-e90b960783cf81a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Preprocess&quot;/&gt;&lt;/p&gt;
&lt;p&gt;A. 原图&lt;br/&gt;B. 等比例缩放，空缺部分用原图填充&lt;br/&gt;C. 等比例缩放，空缺部分填充bounding box均值&lt;br/&gt;D. 不等比例缩放到224x224&lt;br/&gt;实验结果表明B的效果最好，但实际上还有很多的预处理方法可以用，比如空缺部分用区域重复。&lt;/p&gt;
&lt;p&gt;训练时，采用0.001的初始学习率（是上一步预训练的1/10），采用mini-batch SGD，每个batch有32个正样本（各种类混在一起），96个负样本进行训练。&lt;/p&gt;
&lt;h3 id=&quot;object-category-classifiers&quot;&gt;Object category classifiers&lt;/h3&gt;
&lt;p&gt;每个类对应一个Linear SVM二分类器(恩，很简单的一个SVM，没有复杂的kernel)，输入是CNN倒数第二层的输出，是一个长度为4096的向量，SVM根据这个特征向量和标签进行学习，调整权重，学习到特征向量中哪些变量对当前这个类的区分最为有效。&lt;/p&gt;
&lt;p&gt;训练SVM的数据和Fine tuning训练CNN的数据有所不同，直接使用将PASCAL VOC训练集中的正样本，将与bounding box重叠率小于0.3的Region Proposals作为背景（负样本），这个重叠率也是调参比较出来的；另一方面，由于负样本极多，论文采用了hard mining技术筛选出了难分类负样本进行训练。不过这样的话，SVM和CNN的正负样本定义就不同了，SVM的正样本会少很多（那些重叠率大于0.5的bounding box就没用上了）。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;附录B中解释，其实一开始RBG他们是用SVM的正负样本定义来Fine tune CNN的，发现效果很差。SVM可以在小样本上就达到比较好的效果，但CNN不行，所以需要用上更多的数据来Fine tune，重叠率大于0.5的Region Proposals的数据作为正样本，可以带来30倍的数据，但是加入这些不精准的数据的代价是，检测时位置不够准确了（因为位置有些偏差的样本也被当做了正样本）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;于是会有一个很自然的想法，如果有很多的精确数据，是不是可以直接用CNN加softmax输出21个分类，不用SVM做分类？RBG他们直接在这个分类方式上fine tune，发现这样做的准确率也很高（50.9%），但是不如用SVM做分类的结果（54.2%），一方面是因为正样本不够精确，另一方面是因为负样本没有经过hard mining，但至少证明，是有可能直接通过训练CNN来达到比较好的检测效果的，可以加快训练速度，并且也更加简洁优雅。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;bounding-box-regression&quot;&gt;Bounding-box regression&lt;/h3&gt;
&lt;p&gt;这部分是在附录C展开阐述的（CVPR篇幅限制）。首先，为每个类训练一个bounding box regressor，类似DPM中的bounding box regression，每个类的regressor可以为每个图输出一个响应图，代表图中各个部分对这个类的响应度。DPM中的Regressor则是用图像的几何特征（HOG）计算的；不同于DPM，RCNN-BB中这种响应度(activation)是用CNN来计算的，输入也有所不同，DPM输入是原图，输出是响应图（从而得到bbox的位置），RCNN-BB的Regressor输入是Region Proposals的位置和原图，输出是bounding box的位置。&lt;/p&gt;
&lt;p&gt;定义一个region proposal的位置为P=(Px, Py, Pw, Ph)，x,y为region prosal的中心点，w,h为region proposal的宽高，对应的bounding box的位置为G=(Gx,Gy,Gw,Gh)，Regressor的训练目标就是学习一个P-&amp;gt;G的映射，将这个映射拆解为四个部分：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1828517-7a0ceb62fead60a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;P-&amp;gt;G&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中，dx(P)，dy(P), dw(P), dh(P)是四个线性函数，输入为P经过前面说的fine tune过的CNN后得到的pool5特征，输出为一个实数&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1828517-a36d59eacde39e75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;训练就是解一个最优化问题，求出四个w向量，使得预测的G和真实的G相差最小，用差平方之和代表距离，化简后的形式为：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1828517-418739b151a19cd6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Train Regressor&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1828517-689b2a188bcb435d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Target variable&quot;/&gt;&lt;/p&gt;
&lt;p&gt;跟前边的四个映射是对应的，&lt;br/&gt;同时加上了对w的l2正则约束，抑制过拟合&lt;/p&gt;
&lt;p&gt;训练得到四个映射关系后，测试时用这四个映射就能够对预测的Region Proposals位置做精细的修正，提升检测框的位置准确率了。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;至此，整个训练和测试过程就介绍完毕了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;玄学时间&quot;&gt;玄学时间&lt;/h3&gt;
&lt;p&gt;在论文中还打开RCNN中卷积层分析它们的功能，在AlexNet的论文中，Hinton已经用可视化的方式为我们展示了第一层卷积描述的是对象的轮廓和颜色，但后面的层因为已经不能表示成图像，所以不能直接可视化，RBG的方法是，输入一张图片的各个区域，看pool5（最后一层卷积层的max pooling输出）中每个单元的响应度，将响应程度高的区域框出来：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1828517-46008e67d22cc701.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Top regions for six pool5 units&quot;/&gt;&lt;/p&gt;
&lt;p&gt;pool5的feature map大小为6x6x256，图中每行的16张图代表一个unit响应度最高的16张图，将每张图响应度较高的区域用白色框框出来了，这里只挑了6个unit进行展示（所以只有6行）。一个unit是6x6x256的张量中的一个实数，这个数越大，意味着对输入的响应越高。&lt;/p&gt;
&lt;p&gt;可以看到不同的unit有不同的分工，第一行的unit对person响应度比较高，第二行的unit对dog和dot array（点阵）的响应度比较高，可以从这个角度出发，用每个unit充当单独的一种object detector。&lt;/p&gt;
&lt;p&gt;附录D中还有更多的可视化结果&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1828517-1823cf7e204207bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;activation&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之所以说是玄学是因为，虽然这种可视化一定程度上体现了CNN学习到的东西，但是仍然没有说明白为什么是这个单元学习到这种信息。&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;RCNN第一次把CNN结合Region proposal用到了detection任务中，取得了很好的效果，在这篇论文里，还体现了很多视觉深度学习的流行技巧，比如Pretrain，Fine tune，传统方法与深度学习结合（分割+检测，CNN+SVM，Bounding box regression），可以说是相当值得一读的好paper了。&lt;/p&gt;
</description>
<pubDate>Thu, 08 Feb 2018 07:38:00 +0000</pubDate>
<dc:creator>梦里风林</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hellocwh/p/8431802.html</dc:identifier>
</item>
<item>
<title>React 16.3来了：带着全新的Context API - 程序猿小卡</title>
<link>http://www.cnblogs.com/chyingp/p/react-context-api.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chyingp/p/react-context-api.html</guid>
<description>&lt;h2 id=&quot;文章概览&quot;&gt;文章概览&lt;/h2&gt;
&lt;p&gt;React在版本&lt;code&gt;16.3-alpha&lt;/code&gt;里引入了新的Context API，社区一片期待之声。我们先通过简单的例子，看下新的Context API长啥样，然后再简单探讨下新的API的意义。&lt;/p&gt;
&lt;p&gt;文中的完整代码示例可在笔者的GitHub上找到，&lt;a href=&quot;https://github.com/chyingp/blog/tree/master/demo/2018.02.08-react-16.3&quot;&gt;点击传送门&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;看下新的context-api&quot;&gt;看下新的Context API&lt;/h2&gt;
&lt;p&gt;需要安装&lt;code&gt;16.3-alpha&lt;/code&gt;版本的react。构建步骤非本文重点，可参考笔者&lt;a href=&quot;https://github.com/chyingp/blog/tree/master/demo/2018.02.08-react-16.3&quot;&gt;GitHub上的demo&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;npm&lt;/span&gt; install react@next react-dom@next&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面，直接来看代码，如果用过&lt;code&gt;react-redux&lt;/code&gt;应该会觉得很眼熟。&lt;/p&gt;
&lt;p&gt;首先，创建&lt;code&gt;context&lt;/code&gt;实例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 创建context实例&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; ThemeContext &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createContext&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'white'&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，定义&lt;code&gt;App&lt;/code&gt;组件，注意这里用到了&lt;code&gt;Provider&lt;/code&gt;组件，类似&lt;code&gt;react-redux&lt;/code&gt;的&lt;code&gt;Provider&lt;/code&gt;组件。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; App &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;ThemeContext&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;={{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'green'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'white'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}}&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Header /&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/ThemeContext.Provider&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，定义&lt;code&gt;Header&lt;/code&gt;、&lt;code&gt;Title&lt;/code&gt;组件。注意：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;Title&lt;/code&gt;组件用到了&lt;code&gt;Consumer&lt;/code&gt;组件，表示要消费&lt;code&gt;Provider&lt;/code&gt;传递的数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Title&lt;/code&gt;组件是&lt;code&gt;App&lt;/code&gt;的&lt;code&gt;孙&lt;/code&gt;组件，但跳过了&lt;code&gt;Header&lt;/code&gt;消费数据。&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Header &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Title&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;Hello React Context API&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/Title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;class Title extends React.Component {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  render &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    return &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      &amp;lt;ThemeContext.Consumer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        {context =&amp;gt; &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;          &amp;lt;h1 style={{background: context.background, color: context.color}}&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            {this.props.children}&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;          &amp;lt;/h1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        )&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/ThemeContext.Consumer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，常规操作&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(
  &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;App /&lt;span class=&quot;op&quot;&gt;&amp;gt;,&lt;/span&gt; 
  &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'container'&lt;/span&gt;)
)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看下程序运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/2/8/1617177569ba6fb0?w=934&amp;amp;h=296&amp;amp;f=png&amp;amp;s=47709&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么有新的context-api&quot;&gt;为什么有新的Context API&lt;/h2&gt;
&lt;p&gt;用过&lt;code&gt;redux + react-redux&lt;/code&gt;的同学，应该会觉得新的Context API很眼熟。而有看过&lt;code&gt;react-redux&lt;/code&gt;源码的同学就知道，&lt;code&gt;react-redux&lt;/code&gt;本身就是基于旧版本的Context API实现的。&lt;/p&gt;
&lt;p&gt;既然已经有了现成的解决方案，为什么还会有新的Context API呢？&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;现有Context API的实现存在一定问题：比如当父组件的&lt;code&gt;shouldComponentUpdate&lt;/code&gt;性能优化，可能会导致消费了context数据的子组件不更新。&lt;/li&gt;
&lt;li&gt;降低复杂度：类似redux全家桶这样的解决方案，给项目引入了一定的复杂度，尤其是对方案了解不足的同学，遇到问题可能一筹莫展。新Context API的引入，一定程度上可以减少不少项目对redux全家桶的依赖。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;写在后面&quot;&gt;写在后面&lt;/h2&gt;
&lt;p&gt;新的Context API，个人对于性能上的提升更加期待些。至于降低复杂度、取代redux之类的，不是我关注的重点。下一步的计划就是多构造点用例来进行对比测试。&lt;/p&gt;
&lt;p&gt;更多内容，欢迎大家关注我的公众号，后续进行更新&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.chyingp.com/wp-content/uploads/2018/02/qrcode_for_gh_7ba65667d1aa_344.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关链接&quot;&gt;相关链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chyingp/blog/tree/master/demo/2018.02.08-react-16.3&quot;&gt;本文完整代码示例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/rfcs/blob/master/text/0002-new-version-of-context.md&quot; title=&quot;https://github.com/reactjs/rfcs/blob/master/text/0002-new-version-of-context.md&quot;&gt;React新的Context API的RFC&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 08 Feb 2018 07:21:00 +0000</pubDate>
<dc:creator>程序猿小卡</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chyingp/p/react-context-api.html</dc:identifier>
</item>
<item>
<title>浅入浅出数据结构（23）——图的概念、存储方式与拓扑排序 - NSpt</title>
<link>http://www.cnblogs.com/mm93/p/8429892.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mm93/p/8429892.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　到目前为止，我们所提过的所有数据结构，不是线性表，就是树。即使是散列表、优先队列、AVL树这样看似特殊的数据结构，其实也没逃出线性表与树的范畴，那么，在数据结构方面（如果是说算法方面，那么与线性表、树相关的算法可讲不完），还有什么我们尚未探讨的情况吗？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　答案是肯定的，那就是：图。不过在进一步介绍图之前，我想先回顾一下树与线性表的关系。不难发现，其实线性表就是一棵特殊的树：“无叉树”。而树也可以看作是将线性表要求放宽后得出的数据结构：元素的后继个数不再有限制。那么，将“放宽要求”的思想再次应用于树之上，我们可以得出什么样的数据结构呢？那就是&lt;span&gt;图：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　1.元素的前驱，即父亲的个数不限&lt;/span&gt;（树中有限制）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;2.元素的后继，即孩子的个数不限&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　3.元素X可以既是Y的前驱，又是Y的后继。&lt;/span&gt;（树中有限制）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　不过需要注意的是，如果一个元素既没有前驱也没有后继，那它是一个“独立”的“集合”，换句话说就是一个无前驱也无后继的元素不属于某个已存在的图。这一点在树、线性表中也是一样的。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　下面是一个图的例子：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1127778/201802/1127778-20180208001355341-1829139950.png&quot; alt=&quot;&quot; width=&quot;384&quot; height=&quot;277&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　上例中的图，既有无前驱的元素：v0，也有无后继的元素：v5，而v3则显然是一个有多前驱、多后继的元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　上例中的图体现出了图的第1、2条特点，而下面的图则体现出了图的第3个特点：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1127778/201802/1127778-20180208004019795-923193451.png&quot; alt=&quot;&quot; width=&quot;391&quot; height=&quot;288&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在第一个例子的基础上，我们令每个元素都成为自己前驱的前驱，从而有了第二个例子。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　图的直观概念有了之后，我们接下来要谈一下和图相关的一些术语。首先，在图中，我们将元素称作“顶点”（vertex，例子中的v即其简写），而顶点间的“有箭头的线段”我们称之为“有向边”，有向边由两个顶点确定并表示：（v&lt;sub&gt;x&lt;/sub&gt;，v&lt;sub&gt;y&lt;/sub&gt;），其中v&lt;sub&gt;x&lt;/sub&gt;表示有向边的起点，v&lt;sub&gt;y&lt;/sub&gt;表示有向边的终点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　有向边（v&lt;sub&gt;x&lt;/sub&gt;，v&lt;sub&gt;y&lt;/sub&gt;）和其反向边（v&lt;sub&gt;y&lt;/sub&gt;，v&lt;sub&gt;x&lt;/sub&gt;）可以结合起来作为一条“无向边”，或者叫“双向边”，如果图中任意一条边都有反向边，或者说所有边都是无向边，那么我们称这个图是“无向图”，否则是“有向图”，显然第二个例子是一个无向图，第一个例子不是。而对于无向图，我们可以以更简单的形式将其画出，即将所有有向边与其反向边结合为一条边，并去掉箭头，比如第二个例子可以画作这样：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1127778/201802/1127778-20180208004956482-1126146040.png&quot; alt=&quot;&quot; width=&quot;366&quot; height=&quot;264&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;　　图的可能用处是显而易见的，城市间公路地图就可以用无向图来模拟，用顶点代表城市，无向边表示两个城市间的公路。而一项工程的流程则可以用有向图来模拟：可能某步骤需要先完成其他几个步骤才能做，比如组装发动机得在制造好活塞、缸体等组件后才能进行，这就是“多前驱”的情况，也可能好多个步骤都需要等某个步骤做完后才能继续，比如安装轮胎、安装座椅等工作都得在车架制造好之后才能进行，这就是“多后继”的情况。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　知道了图的概念和可能用处之后，下一个问题是：如何存储一个图？首先需要明确的是，&lt;span&gt;无向图总是可以用有向图来表示，只要将一条无向边拆成两条方向相反的有向边即可。所以我们只要关注如何存储有向图，就可以顺带解决无向图的存储问题。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　一个简单的想法是假设所有顶点用自然数从0开始逐一编号，然后构造一个二维数组：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;bool&lt;/span&gt; graph[numVertex][numVertex];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　其中graph[x][y]若为true，则表示存在有向边（x，y），否则表示不存在有向边（x，y）。而无向边[a，b]则可以拆成有向边（a，b）和（b，a），从而实现存储。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果采用这样的方式存储图，那么我们第一个例子中的有向图将会这样存储（v0-v6对应下标0-6，纵向为数组一维下标，横向为二维下标）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1127778/201802/1127778-20180208010923998-1418659531.png&quot; alt=&quot;&quot; width=&quot;274&quot; height=&quot;229&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;而第二个例子中的有向图则可以这样存储：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1127778/201802/1127778-20180208011045998-456018067.png&quot; alt=&quot;&quot; width=&quot;276&quot; height=&quot;233&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这样的存储方式我们称之为邻接矩阵（两个顶点之间存在边即这两个顶点邻接）。邻接矩阵简单、快捷，但是存在很大的浪费，对于第一个例子，可以说我们用了49个变量，却只有12个（约24.5%）真正起了作用，剩下37个（约75.5%）都是“用了真实的内存来表示不存在的东西”，即便是对于第二个例子，我们也浪费了一半的空间。所以，如果图不够“稠密”（即边的数量接近顶点数量的平方），我们一般不采用邻接矩阵来存储图，而是用邻接表来存储图。文字表达邻接表是什么非常麻烦，也不容易懂，所以我们先直接给出第一个例子用邻接表存储的抽象表示，再来解释邻接表的实现方法：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1127778/201802/1127778-20180208144355154-1588768880.png&quot; alt=&quot;&quot; width=&quot;496&quot; height=&quot;289&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　从上图可以看出，邻接表长得非常像分离链接式的散列表，首先我们依然假设顶点用数字表示，然后我们用一个数组graph来存储所有顶点（图中左侧），接着对于每一条有向边（x，y），我们创建一个“代表y的结点”，然后将该结点插入到以graph[x]为头的链表中去，抽象理解即将边（x，y）插入了进去：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&quot;&lt;/span&gt;&lt;span&gt;结点&quot;的定义&lt;/span&gt;
typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; node{
   size_t vertex;
   &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; node *&lt;span&gt;next;
}Node;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储所有顶点的数组（即图）
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;所有以顶点x作为起点的有向边的终点，均存储在以graph[x]为头的链表中&lt;/span&gt;
Node *&lt;span&gt;graph[numVertex];

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;边的定义&lt;/span&gt;
typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; edge{
   size_t start;
   size_t end;
}Edge;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;构造图的函数，假设所有边已放入数组allEdges，graph数组的大小是正确的，且graph数组每个元素都已初始化为NULL，numEdge为边的个数&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; buildGraph(Node **graph,Edge *&lt;span&gt;allEdges,size_t numEdge)
{
   size_t start;
   Node &lt;/span&gt;*&lt;span&gt;newNode;
   &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;numEdge;++&lt;span&gt;i)
   {
        start&lt;/span&gt;=&lt;span&gt;allEdges[i].start;
        newNode&lt;/span&gt;=(Node *)&lt;span&gt;malloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(Node));
        newNode&lt;/span&gt;-&amp;gt;vertex=&lt;span&gt;allEdges[i].end;
        newNode&lt;/span&gt;-&amp;gt;next=&lt;span&gt;graph[start];
        graph[start]&lt;/span&gt;=&lt;span&gt;newNode;
   }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这样一来，所有以x为起点的边（x，y）都可以通过遍历以graph[x]为头的链表来找到，不过在该链表中我们只存储了边的终点y，因为起点就是链表头的下标。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果需要令图支持动态变化，那么将graph数组转换成一个链表即可，方便起见，我们暂且用数组来存储顶点。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　接下来我们要讨论的东西是拓扑排序。但是在讨论拓扑排序前，有两个概念需要理解：路径、圈。所谓路径，就是从图中某个顶点出发，沿着边，到达另一个顶点后，经过的边的集合。举例来说，看下图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1127778/201802/1127778-20180208001355341-1829139950.png&quot; alt=&quot;&quot; width=&quot;347&quot; height=&quot;251&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这个图中，从v0到v6的路径可以是：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（v0，v3）-（v3，v6）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　简写成这样也行，只要能表达出意思即可：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　v0-v3-v6&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　显然，从一个顶点到另一个顶点的路径可能不止一条，比如上图中v0到v6还可以这样走：v0-v1-v4-v6&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　路径的长度一般用路径中边的条数表示，比如路径v0-v3-v6长度不是3，而是2。此外，v0-v0我们也认为是一条路径，其长度为0。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　那么什么是圈呢？圈就是一种特殊的路径，该路径的起点和终点是同一个顶点，而且路径长度大于0（也就是说路径v&lt;sub&gt;x&lt;/sub&gt;-v&lt;sub&gt;x&lt;/sub&gt;不算圈，我们称之为“环”）。比如下图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1127778/201802/1127778-20180208122407435-979245095.png&quot; alt=&quot;&quot; width=&quot;377&quot; height=&quot;277&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　其中路径v0-v1-v4-v3-v0就是一个圈。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　知道了什么是圈后，我们就可以开始讨论拓扑排序了。&lt;span&gt;拓扑排序就是对图中顶点进行的排序，其要求是：若存在从v&lt;sub&gt;x&lt;/sub&gt;到v&lt;sub&gt;y&lt;/sub&gt;的路径，那么排序结果中v&lt;sub&gt;x&lt;/sub&gt;必须在v&lt;sub&gt;y&lt;/sub&gt;之前。&lt;/span&gt;这个要求其实就暗含着另一个要求，那就是：进行拓扑排序的图必须是有向无圈图。在无向图中，若存在边（v&lt;sub&gt;x&lt;/sub&gt;，v&lt;sub&gt;y&lt;/sub&gt;）则必存在边（v&lt;sub&gt;y&lt;/sub&gt;，v&lt;sub&gt;x&lt;/sub&gt;），那么依拓扑排序的要求，v&lt;sub&gt;x&lt;/sub&gt;就必须在v&lt;sub&gt;y&lt;/sub&gt;的前面，同时v&lt;sub&gt;y&lt;/sub&gt;又必须在v&lt;sub&gt;x&lt;/sub&gt;前面，这显然是矛盾的，所以拓扑排序只能用于有向图。而在有向有圈图中，比如上图，其中的圈v0-v1-v4-v3-v0就暗含着两条子路径：v0-v1-v4和v4-v3-v0，依前一条路径而言，排序结果中v0必须在v4前面，而依后一条路径而言，v4又必须在v0前面，这显然也是矛盾的，所以拓扑排序只能用于有向无圈图。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　接下来对拓扑排序的讨论依照下图进行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1127778/201802/1127778-20180208001355341-1829139950.png&quot; alt=&quot;&quot; width=&quot;347&quot; height=&quot;251&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　显然上图是一个有向无圈图，那么其拓扑排序之一是这样的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　v0，v1，v4，v3，v2，v6，v5&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　注意，一个图的拓扑排序结果可能不是唯一的，比如上图的另一个拓扑排序结果是：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　v0，v1，v4，v3，v6，v2，v5&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　有了拓扑排序结果后，我们可以试着换一个角度来理解拓扑排序：&lt;span&gt;对于排序结果中的任意两个顶点v&lt;sub&gt;x&lt;/sub&gt;和v&lt;sub&gt;y&lt;/sub&gt;，若v&lt;sub&gt;y&lt;/sub&gt;在v&lt;sub&gt;x&lt;/sub&gt;之后，则图中必然没有从v&lt;sub&gt;y&lt;/sub&gt;到v&lt;sub&gt;x&lt;/sub&gt;的路径。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　可是，洋洋洒洒说了那么多，拓扑排序有什么用呢？前面我们说过，工艺流程可以用有向图来模拟，那么如果我们对一个工艺流程图进行拓扑排序，我们就能确定各个步骤按照怎样的顺序去做就绝对不会出现做完了一个步骤，却因为还有某个步骤没完成，从而不能做下一个步骤的情况。类似的，游戏中的任务系统也可以用图模拟，比如一些游戏中存在隐藏任务，可能一个隐藏任务需要完成多个普通任务才会触发，而只有完成了这个隐藏任务，你才可以去接收更多的隐藏任务，此时也可能运用到拓扑排序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　总而言之，如果我们有步骤A和B，且A需要在B之前完成，那么我们就可以将A、B视为顶点，B对A的“依赖关系”视为边（A，B），当我们知道大量的步骤和局部的依赖关系时，我们就可以将其构建成一个完整的图，然后通过拓扑排序确定整体的依赖关系。当然，拓扑排序也可以用于判断一个图有没有圈，并且后面对图的进一步讨论时我们也将利用拓扑排序实现一些改进。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　接下来的问题显然就是如何实现拓扑排序，在说明如何进行拓扑排序之前，我们先了解一下&lt;span&gt;有向无圈图的两个特点：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1.若图有向无圈，则必然存在一个入度为0的顶点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2.若图有向无圈，则去掉其入度为0的顶点及相连边（必为以该顶点为起点的有向边）后，图依然是有向无圈图。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所谓顶点的入度，即以该顶点为终点的有向边个数，比如顶点v&lt;sub&gt;y&lt;/sub&gt;的入度即边（v&lt;sub&gt;x&lt;/sub&gt;，v&lt;sub&gt;y&lt;/sub&gt;）的个数（其中x!=y）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　知道了有向无圈图的特点后，一种简单的拓扑排序思路就出来了：在用有向边表示依赖关系的图中，若一个顶点的入度为0，就说明该顶点不依赖其他顶点，所以这个顶点可以直接输出到排序结果中，而这个顶点输出了，就意味着其所代表的步骤“做完了”，所以依赖于其的顶点不再依赖于其，可将其相连边均去除，然后再找图中的下一个入度为0的顶点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　用代码来表示就是这样（蓝色字体为伪代码）：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; topSort(graph*&lt;span&gt; g,size_t numVertex,size_t topResult)
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;两个表示顶点的变量，后面用&lt;/span&gt;
&lt;span&gt;    size_t tempV,adjV;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储各顶点入度的数组，顶点x的入度为indegree[x]&lt;/span&gt;
&lt;span&gt;    size_t indegree[numVertex];
    &lt;span&gt;伪：根据图g初始化indegree数组

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;numVertex;++&lt;span&gt;i)
    {
       &lt;span&gt; 伪：从indegree中找到一个入度为0的顶点，存入tempV
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;span&gt;伪：没找到入度为0的顶点&lt;/span&gt;)
            &lt;span&gt;伪：报错、返回&lt;/span&gt;
        
        topResult[i]&lt;/span&gt;=&lt;span&gt;tempV;

        &lt;span&gt;伪：通过g[tempV]遍历tempV为起点的边的终点，存入adjV&lt;/span&gt;
            indegree[adjV]&lt;/span&gt;--&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　显然，上述拓扑排序算法还有一定的改进空间，我们在寻找入度为0的顶点时每次都要遍历整个indegree数组，这使得整个算法的时间复杂度达到了O(n&lt;sup&gt;2&lt;/sup&gt;)（n为顶点个数）。然而实际上我们可以先遍历一次indegree数组，然后将找到的所有入度为0的顶点存入一个队列中，然后通过队列出队来获取入度为0的顶点，而当我们减少某个顶点的入度时（indegree[adjV]--时）则判断一下它是否已达到入度为0，若是则将其入队。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; topSort(graph*&lt;span&gt; g,size_t numVertex,size_t topResult)
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;两个表示顶点的变量，后面用&lt;/span&gt;
&lt;span&gt;    size_t tempV,adjV;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储各顶点入度的数组，顶点x的入度为indegree[x]&lt;/span&gt;
&lt;span&gt;    size_t indegree[numVertex];
    &lt;span&gt;伪：根据图g初始化indegree数组
    伪：根据indegree数组，创建一个zeroIndegree队列，队列中的顶点入度为0&lt;/span&gt;
   
    size_t i&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(&lt;span&gt;伪：zeroIndegree不为空&lt;/span&gt;)
    {
        tempV&lt;/span&gt;=&lt;span&gt;Dequeue(zeroIndegree);
        topResult[i]&lt;/span&gt;=&lt;span&gt;tempV;

        &lt;span&gt;伪：通过g[tempV]遍历以tempV为起点的边的终点，存入adjV&lt;/span&gt;
        {
            indegree[adjV]&lt;/span&gt;--&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(indegree[adjV]==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                Inqueue(zeroIndegree,adjV);
        }   
     }&lt;br/&gt;　　　if(i!=numVertex-1)&lt;br/&gt;&lt;span&gt;伪：报错&lt;/span&gt;&lt;br/&gt;　　
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这样一来，拓扑排序的时间复杂度就降到了O(n&lt;sub&gt;v&lt;/sub&gt;+n&lt;sub&gt;e&lt;/sub&gt;)（n&lt;sub&gt;v&lt;/sub&gt;为顶点个数，n&lt;sub&gt;e&lt;/sub&gt;为边条数）。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　作为本文的结尾，我们最后来说一说一个不容忽视的问题：如果图的元素的关键字不是自然数怎么办？很直白的想法是，如果元素的关键字不是自然数（比如字符串），我们就将其转换为自然数。实现这一点的方法就是通过散列表得出元素关键字的散列值，而后用该散列值（即顶点）代表该元素。不过这样做又会带来另一个问题：如何根据顶点（即散列值），找回对应元素的关键字？这个问题的粗暴解法就是，在将元素插入到散列表中时，将元素在散列表中的内存地址存下来，比如存入一个名为inverseHash的链表中，而后在需要时通过inverseHash来找到一个顶点（散列值）所对应元素的位置。&lt;/span&gt;&lt;span&gt;此外，因为元素的散列值可能并非按自然数顺序生成的，所以存储顶点时也不该再使用graph数组，而应该将其改为其他数据结构（链表甚至树）。当然，还有其他的存储思路，但根本思想都是基于邻接表：&lt;span&gt;先存储所有顶点，再将以某顶点为起点的边存储到以该顶点为头的数据结构中&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　在介绍图的可能用处时，我们不仅提到了图可以表示工艺流程，还提到了图可以表示“本来就是图”的地图，而对于表示地图的图，一个很明显的问题就是：如何找到两个顶点间的最短路径？这个问题我们在下一篇博客介绍解决方法。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 08 Feb 2018 06:52:00 +0000</pubDate>
<dc:creator>NSpt</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mm93/p/8429892.html</dc:identifier>
</item>
<item>
<title>Storm1.1.1 对 0.10.x 版 Kafka之commit  offsets - divenswu</title>
<link>http://www.cnblogs.com/divenswu/p/8431345.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/divenswu/p/8431345.html</guid>
<description>&lt;p&gt;由于 0.10.x 版 Kafka 与 0.8.x 版有很大的变化，这种变化对下游 Storm 有非常大的影响，0.10.x 版的 Kafka 不但增加了权限管理的功能，而且还将 simple 和 high consumer 的 offsets 进行统一管理，也就意味着在 0.8.x 中 Storm 需要去负责管理 offsets，而在 0.10.x 中，Storm 不需要关心 consumer 的 offsets 的问题，这对 KafkaSpout 的设计有很大的影响，本文就是对 &lt;code&gt;Storm 对 0.10.x 版 Kafka 支持的实现&lt;/code&gt;部分的解析。&lt;/p&gt;

&lt;p&gt;社区对新版 Kafka 的支持，总体分为两种情况：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;一种是选择自动 commit 机制；&lt;/li&gt;
&lt;li&gt;另一种是非自动 commit，就是将 commit 的权利交与 Storm 来控制。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面分别对这两种情况进行分析。&lt;/p&gt;
&lt;p&gt;Kafka Consumer 的一些配置会对 Storm 的性能很大影响，下面的三个参数的设置对其性能的影响最大（默认值是根据&lt;a href=&quot;https://hortonworks.com/blog/microbenchmarking-storm-1-0-performance/&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;MICROBENCHMARKING APACHE STORM 1.0 PERFORMANCE&lt;/a&gt;测试得到）：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;fetch.min.bytes&lt;/code&gt;：默认值 1；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch.max.wait.ms&lt;/code&gt;：默认值 500（ms）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kafka Consumer instance poll timeout&lt;/code&gt;, 它可以在通过 &lt;a href=&quot;https://github.com/apache/storm/blob/1.0.x-branch/external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutConfig.java&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;KafkaSpoutConfig&lt;/a&gt; 的方法 &lt;a href=&quot;https://github.com/apache/storm/blob/1.0.x-branch/external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutConfig.java#L180-L184&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;setPollTimeoutMs&lt;/a&gt; 来配置，默认值是 200ms；&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;自动-commit-模式&quot;&gt;自动 commit 模式&lt;/h2&gt;
&lt;p&gt;自动 commit 模式就是 commit 的时机由 Consumer 来控制，本质上是异步 commit，当定时达到时，就进行 commit。而 Storm 端并没有进行任何记录，也就是这部分的容错完全由 Consumer 端来控制，而 Consumer 并不会关心数据的处理成功与否，只关心数据是否 commit，如果未 commit，就会重新发送数据，那么就有可能导致下面这个后果：&lt;/p&gt;
&lt;h3 id=&quot;造成那些已经-commit、但-Storm-端处理失败的数据丢失&quot;&gt;造成那些已经 commit、但 Storm 端处理失败的数据丢失&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;丢失的原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一些数据发送到 Spout 之后，恰好 commit 的定时到达，进行了 commit，但是这中间有某条或者几条数据处理失败，这就是说，这几条处理失败的数据已经进行 commit 了，Kafka 端也就不会重新进行发送。&lt;/p&gt;
&lt;p&gt;可能出现的这种后果也确定了自动 commit 模式不能满足我们的需求，为了保证数据不丢，需要数据在 Storm 中 ack 之后才能被 commit，因此，commit 还是应该由 Storm 端来进行控制，才能保证数据被正确处理。&lt;/p&gt;
&lt;h2 id=&quot;非自动-commit-模式&quot;&gt;非自动 commit 模式&lt;/h2&gt;
&lt;p&gt;当选用非自动的 commit 机制（实际上就是使用 Consumer 的同步 commit 机制）时，需要手动去设置 commit 的参数，有以下两项需要设置：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;offset.commit.period.ms&lt;/code&gt;：设置 spout 多久向 Kafka commit一次，在 KafkaSpoutConfig 的 &lt;a href=&quot;https://github.com/apache/storm/blob/1.0.x-branch/external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutConfig.java#L189-L193&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;setOffsetCommitPeriodMs&lt;/a&gt; 中配置；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max.uncommitted.offsets&lt;/code&gt;：控制在下一次拉取数据之前最多可以有多少数据在等待 commit，在 KafkaSpoutConfig 的 &lt;a href=&quot;https://github.com/apache/storm/blob/1.0.x-branch/external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutConfig.java#L211-L217&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;setMaxUncommittedOffsets&lt;/a&gt; 中配置；&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;spout-的处理过程&quot;&gt;spout 的处理过程&lt;/h3&gt;
&lt;p&gt;关于 Kafka 的几个 offset 的概念，可以参考&lt;a href=&quot;http://matt33.com/2017/01/16/kafka-group/#offset-%E9%82%A3%E4%BA%9B%E4%BA%8B&quot;&gt; offset的一些相关概念&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;KafkaSpout 的处理过程主要是在 &lt;code&gt;nextTuple()&lt;/code&gt; 方法，其处理过程如下：&lt;/p&gt;
&lt;table&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr readability=&quot;15&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;p&gt;15&lt;/p&gt;
&lt;p&gt;16&lt;/p&gt;
&lt;p&gt;17&lt;/p&gt;
&lt;p&gt;18&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;19&quot;&gt;
&lt;p&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public &lt;span class=&quot;keyword&quot;&gt;void &lt;span class=&quot;title&quot;&gt;nextTuple&lt;span class=&quot;params&quot;&gt;() {&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;keyword&quot;&gt;　　if (initialized) {&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;keyword&quot;&gt;　　　　if (commit()) {&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　commitOffsetsForAckedTuples();&lt;/p&gt;
&lt;p&gt;　　　　}&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;keyword&quot;&gt;　　　　if (poll()) {&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　setWaitingToEmit(pollKafkaBroker());&lt;/p&gt;

&lt;p&gt;　　　　}&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;keyword&quot;&gt;　　　　if (waitingToEmit()) {&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　emit();&lt;/p&gt;
&lt;p&gt;　　　　}&lt;/p&gt;
&lt;p&gt;　　} &lt;span class=&quot;keyword&quot;&gt;else {&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　LOG.debug(&lt;span class=&quot;string&quot;&gt;&quot;Spout not initialized. Not sending tuples until initialization completes&quot;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;上面主要分为三步：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;如果是非自动 commit，并且 commit 定时达到，那么就将所有已经 ack 的数据（&lt;strong&gt;这些数据的 offset 必须是连续的&lt;/strong&gt;，不连续的数据不会进行 commit）进行 commit；&lt;/li&gt;
&lt;li&gt;如果拉取的数据都已经发送，并且未 commit 的消息数（记录在 &lt;code&gt;numUncommittedOffsets&lt;/code&gt; 中）小于设置的最大 uncommit 数，那么就根据更新后的 offset （将 offset 重置到需要重试的 msg 的最小 offset，这样该 offset 后面的 msg 还是会被重新拉取）拉取数据，并将拉取到的数据存储到 &lt;code&gt;waitingToEmit&lt;/code&gt; 集合中；&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;waitingToEmit&lt;/code&gt; 集合中还有数据，就发送数据，但在发送数据的过程中，会进行判断，只发送没有 ack 的数据。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;KafkaSpout-如何进行容错&quot;&gt;KafkaSpout 如何进行容错&lt;/h3&gt;
&lt;p&gt;举个示例，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/567407/201802/567407-20180208142053013-1496341151.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caption&quot;&gt;consumer offset&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;图1表示一个 &lt;code&gt;nextTuple()&lt;/code&gt; 循环结束之后，offset 为14那条数据处理失败，而offset 为15-18的数据处理成功；&lt;/li&gt;
&lt;li&gt;图2表示在下次循环 Step 1 结束之后、Step 2 开始之前，Consumer 会将 the last committed offset 重置到 offset 为14的位置。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;也就是说从 offset 为14开始，后面的数据会重新发送。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有人可能会问，那样的话会不会造成数据重复发送？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Storm 是如何解决这个问题的呢？答案就是 Storm 会用一个 map 记录已经 ack 的数据（&lt;code&gt;acked&lt;/code&gt;），Storm 在进行 commit 的时候也是根据这个 map 的数据进行 commit 的，不过 commit 数据的 offset 必须是连续的，如上图所示，只能将 offset 为11-13的数据 commit，而15-18的数据由于 offset 为14的数据未处理成功而不能 commit。offset 为11-13的数据在 commit 成功后会从 map 中移除，而 offset 为15-18的数据依然在 map 中，Storm 在将从 Kafka 拉取的数据加入到 &lt;code&gt;waitingToEmit&lt;/code&gt; 集合时后，进行 emit 数据时，会先检测该数据是否存在 &lt;code&gt;acked&lt;/code&gt; 中，如果存在的话，就证明该条数据已经处理过了，不会在进行发送。&lt;/p&gt;
&lt;p&gt;这里有几点需要注意的：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;对已经 ack 的 msg 进行 commit 时，所 commit 的 msg 的 offset 必须是&lt;strong&gt;连续&lt;/strong&gt;的（该 msg 存储在一个 TreeMap 中，按 offset 排序），断续的数据会暂时接着保存在集合中，不会进行 commit，如果出现断续，那就证明中间有数据处理失败，需要重新处理；&lt;/li&gt;
&lt;li&gt;storm 处理 failed 的 msg，会保存到一个专门的集合中，在每次拉取数据时（是拉取数据，不是发送数据，发送数据时会检测该数据是否已经成功处理），会遍历该集合中包含的所有 TopicPartiion，获取该 partition 的 Last Committed Offset；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这样设计有一个副作用就是：如果有一个 msg 一直不成功，就会导致 KafkaSpout 因为这一条数据的影响而不断地重复拉取这批数据，造成整个拓扑卡在这里。&lt;/p&gt;
&lt;h3 id=&quot;Kafka-Rebalance-的影响&quot;&gt;Kafka Rebalance 的影响&lt;/h3&gt;
&lt;p&gt;Kafka Rebalance 可以参考&lt;a href=&quot;http://matt33.com/2017/01/16/kafka-group/#Consumer-Rebalance&quot;&gt;Consumer Rebalance&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;KafkaSpout 实现了一个内部类用来监控 Group Rebalance 的情况，实现了两个回调函数，一旦发现 group 的状态变为 &lt;code&gt;preparingRabalance&lt;/code&gt; 之后&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;onPartitionsRevoked&lt;/code&gt; 这个方法会在 Consumer 停止拉取数据之后、group 进行 rebalance 操作之前调用，作用是对已经 ack 的 msg 进行 commit；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onPartitionsAssigned&lt;/code&gt; 这个方法 group 已经进行 reassignment 之后，开始拉取数据之前调用，作用是清理内存中不属于这个线程的 msg、获取 partition 的 last committed offset。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;潜在的风险点&quot;&gt;潜在的风险点&lt;/h3&gt;
&lt;p&gt;这部分还是有可能导致数据重复发送的，设想下面一种情况：&lt;/p&gt;
&lt;p&gt;如果之前由于一个条消息处理失败（Partition 1），造成部分数据没有 commit 成功，在进行 rebalance 后，恰好 Partition 1 被分配到其他 spout 线程时，那么当前的 spout 就会关于 Partition 1 的相关数据删除掉，导致部分已经 commit 成功的数据（记录在 acked 中）被删除，而另外的 spout 就会重新拉取这部分数据进行处理，那么就会导致这部分已经成功处理的数据&lt;strong&gt;重复处理&lt;/strong&gt;。&lt;/p&gt;
</description>
<pubDate>Thu, 08 Feb 2018 06:33:00 +0000</pubDate>
<dc:creator>divenswu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/divenswu/p/8431345.html</dc:identifier>
</item>
<item>
<title>Lucene.net(4.8.0) 学习问题记录五: JIEba分词和Lucene的结合，以及对分词器的思考 - Shendu.cc</title>
<link>http://www.cnblogs.com/dacc123/p/8431369.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dacc123/p/8431369.html</guid>
<description>&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;目前自己在做使用Lucene.net和PanGu分词实现全文检索的工作，不过自己是把别人做好的项目进行迁移。因为项目整体要迁移到ASP.NET Core 2.0版本,而Lucene使用的版本是3.6.0 ，PanGu分词也是对应Lucene3.6.0版本的。不过好在Lucene.net 已经有了Core 2.0版本（4.8.0 bate版），而PanGu分词，目前有人正在做，貌似已经做完，只是还没有测试~，Lucene升级的改变我都会加粗表示。&lt;/p&gt;
&lt;p&gt;Lucene.net 4.8.0   &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/lucenenet&quot; target=&quot;_blank&quot;&gt;https://github.com/apache/lucenenet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PanGu分词&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/LonghronShen/Lucene.Net.Analysis.PanGu/tree/netcore2.0&quot; target=&quot;_blank&quot;&gt;https://github.com/LonghronShen/Lucene.Net.Analysis.PanGu/tree/netcore2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lucene.net 4.8.0 和之前的Lucene.net 3.6.0 改动还是相当多的，这里对自己开发过程遇到的问题，做一个记录吧，希望可以帮到和我一样需要升级Lucene.net的人。我也是第一次接触Lucene ,也希望可以帮助初学Lucene的同学。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;一，PanGu分词与JIEba分词&lt;/h2&gt;
&lt;h3&gt;1.中文分词工具&lt;/h3&gt;
&lt;p&gt;Lucene的自带分词工具对中文分词的效果很是不好。因此在做中文的搜索引擎的时候，我们需要用额外的中文分词组件。这里可以总结一下中文分词工具有哪些，在下面这个衔接中，有对很多中文分词工具的性能测试：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ysc/cws_evaluation&quot; target=&quot;_blank&quot;&gt;https://github.com/ysc/cws_evaluation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可惜我们看不到PanGu分词的性能，在PanGu分词的官网我们可以看到：&lt;strong&gt;Core Duo 1.8 GHz 下单线程 分词速度为 390K 字符每秒，2线程分词速度为 690K 字符每秒。 &lt;/strong&gt;在上面的排行榜中属于中等吧。但由于我做的是基于.net的搜索引擎，所以我只找到了IK分词器，PanGu分词器，JIEba分词器的.net core2.0 版本。&lt;/p&gt;
&lt;h4&gt;1.1 PanGu分词 .net core 版&lt;/h4&gt;
&lt;p&gt;这是PanGu分词.net core 2.0版本的迁移项目：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/LonghronShen/Lucene.Net.Analysis.PanGu/tree/netcore2.0&quot;&gt;https://github.com/LonghronShen/Lucene.Net.Analysis.PanGu/tree/netcore2.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是一个没有迁移完全的项目，在使用过程中遇到了一些问题，前面的目录中记录过。我修改了一些bug,下面的是修改过后的可以直接使用的PanGu分词.net core2.0版本：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/SilentCC/Lucene.Net.Analysis.PanGu/tree/netcore2.0&quot; target=&quot;_blank&quot;&gt;https://github.com/SilentCC/Lucene.Net.Analysis.PanGu/tree/netcore2.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我提交了一个Pull Request ,作者还没有合并。我已经用了一段时间，很稳定。&lt;/p&gt;
&lt;h4&gt;1.2 JIEba分词 .net core 版&lt;/h4&gt;
&lt;p&gt;JIEba分词的.net core 版本迁移项目：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/linezero/jieba.NET&quot;&gt;https://github.com/linezero/jieba.NET&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是这是.net core1.0的版本，拿过来也不能直接给Lucene使用，所以我升级到了2.0并且做了一个接口，让其支持Lucene，经过测试可以稳定的进行分词和高亮。当然在其中也遇到了一些问题，在下文中会详细阐述。这是改过之后的Lucene版:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/SilentCC/JIEba-netcore2.0&quot; target=&quot;_blank&quot;&gt;https://github.com/SilentCC/JIEba-netcore2.0&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;1.3 IK分词 .net core 版&lt;/h4&gt;
&lt;p&gt;在Nuget中可以搜索到（IKNetAnalyzer）&lt;/p&gt;
&lt;p&gt;在GitHub中   &lt;a href=&quot;https://github.com/stanzhai/IKAnalyzer.NET&quot; target=&quot;_blank&quot;&gt;https://github.com/stanzhai/IKAnalyzer.NET&lt;/a&gt;  显示正在开发中。由于一些原因，我并没有使用IK分词。所以也就没有细看了。&lt;/p&gt;

&lt;h3&gt;2.PanGu分词和JIEba分词的对比&lt;/h3&gt;
&lt;p&gt;Lucene和PanGu分词搭配，已经是Lucene.net 的经典搭配，但是PanGu分词已经很久没有更新，PanGu分词的字典也是很久以前维护的字典。在网上可以找到很多Lucene和PanGu分词搭配的例子。在PanGu分词和JIEba分词对比中，我选择了JIEba分词。因为我的搜索引擎一直是使用PanGu分词，然后却时常出现有些比较新的冷的词，无法被分词，导致搜索效果很差。究其原因，是PanGu分词的字典不够大，但是人工维护字典很烦。当然PanGu分词有新词录入的功能，我一直打开这个功能的开关：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
 MatchOptions m = new MatchOptions();
 m.UnknownWordIdentify = true;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 然而并没有改善。后来我使用了JIEba分词测试分词效果，发现JIEba分词使用搜索引擎模式，和PanGu分词打开多元分词功能开关时的分词效果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
测试样例：小明硕士毕业于中国科学院计算所，后在日本京都大学深造

结巴分词（搜索引擎模式）：小明/ 硕士/ 毕业/ 于/ 中国/ 科学/ 学院/ 科学院/ 中国科学院/ 计算/ 计算所/ ，/ 后/ 在/ 日本/ 京都/ 大学/ 日本京都大学/ 深造

盘古分词（开启多元分词开关）： 小  明  硕士  毕业  于  中国科学院  计算所  后  在  日本  京都  大学  深造
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 显然PanGu分词并没有细粒度分词，这是导致有些搜索召回率很低的原因。&lt;/p&gt;
&lt;p&gt;这里就不对PanGu分词，和JIEba分词的具体分词方法进行比较了。本篇博文的还是主要讲解Lucene和JIEba分词&lt;/p&gt;
&lt;h2&gt;二，JIEba分词支持Lucene&lt;/h2&gt;
&lt;p&gt;在上面的JIEba分词.net core版本中，JIEba分词只是将给到的一个字符串进行分词，然后反馈给你分词信息，分词信息也只是一个一个字符串。显然这是无法接入到Lucene中。那么如何把一个分词工具成功的接入到Lucene中呢？&lt;/p&gt;
&lt;h3&gt;1.建立Analyzer类&lt;/h3&gt;
&lt;p&gt;所有要接入Lucene中的分词工具，都要有一个继承Lucene.Net.Analyzer的类，在这个类：JIEbaAnalyzer中，必须要覆写&lt;span&gt;TokenStreamComponents函数，因为Lucene正是通过这个函数获取分词器分词之后的TokenStream（&lt;strong&gt;一些列分词信息的集合&lt;/strong&gt;）我们可以在这个函数中给tokenStream中注入我们想要得到的属性，&lt;strong&gt;在Lucene.net 4.8.0中分词的概念已经是一些列分词属性的组合&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JieBaAnalyzer
        :Analyzer
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; TokenizerMode mode;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; JieBaAnalyzer(TokenizerMode Mode)
            :&lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;()
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.mode =&lt;span&gt; Mode;
        }

        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; TokenStreamComponents CreateComponents(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; filedName,TextReader reader)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tokenizer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JieBaTokenizer(reader,mode);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tokenstream = (TokenStream)&lt;span&gt;new&lt;/span&gt;&lt;span&gt; LowerCaseFilter(Lucene.Net.Util.LuceneVersion.LUCENE_48, tokenizer);

            tokenstream.AddAttribute&lt;/span&gt;&amp;lt;ICharTermAttribute&amp;gt;&lt;span&gt;();
            tokenstream.AddAttribute&lt;/span&gt;&amp;lt;IOffsetAttribute&amp;gt;&lt;span&gt;();

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TokenStreamComponents(tokenizer, tokenstream);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里可以看到，我只使用了ICharTermAttribute 和IOffsetAttribute 也就是分词的内容属性和位置属性。这里的Mode要提一下，这是JIEba分词的特性，JIEba分词提供了三种模式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;精确模式，试图将句子最精确地切开，适合文本分析；&lt;/li&gt;
&lt;li&gt;全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；&lt;/li&gt;
&lt;li&gt;搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里的Model只有Default和Search两种，一般的，写入索引的时候使用Search模式，查询的时候使用Default模式&lt;/p&gt;
&lt;p&gt;上面的JieBaTokenizer类正是我们接下来要定义的类&lt;/p&gt;
&lt;h3&gt;1.建立Tokenizer类 &lt;/h3&gt;
&lt;p&gt;继承Lucene.Net.Tokenizer 。Tokenizer 是正真将大串文本分成一系列分词的类，在Tokenizer类中，我们必须要覆写 Reset()函数，IncrementToken（）函数，上面的Analyzer类中：&lt;/p&gt;
&lt;pre&gt;
var tokenstream = (TokenStream)new&lt;span&gt; LowerCaseFilter(Lucene.Net.Util.LuceneVersion.LUCENE_48, tokenizer);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;tokenizer是生产tokenstream。实际上Reset()函数是将文本进行分词，IncrementToken（）是遍历分词的信息，然后将分词的信息注入的tokenstream,这样就得到我们想要的分词流。在Tokenizer类中我们调用JIEba分词的Segment实例，对文本进行分词。再将获得分词包装，遍历。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JieBaTokenizer
        : Tokenizer
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; _LockObj = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; _Inited = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; System.Collections.Generic.List&amp;lt;JiebaNet.Segmenter.Token&amp;gt; _WordList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;JiebaNet.Segmenter.Token&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; _InputText;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; _OriginalResult = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ICharTermAttribute termAtt;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; IOffsetAttribute offsetAtt;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; IPositionIncrementAttribute posIncrAtt;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ITypeAttribute typeAtt;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; stopWords = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; stopUrl=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;./stopwords.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; JiebaSegmenter segmenter;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; System.Collections.Generic.IEnumerator&amp;lt;JiebaNet.Segmenter.Token&amp;gt;&lt;span&gt; iter;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; start =&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; TokenizerMode mode;



        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; JieBaTokenizer(TextReader input,TokenizerMode Mode)
            :&lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY,input)
        {
            segmenter &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JiebaSegmenter();
            mode &lt;/span&gt;=&lt;span&gt; Mode;
            StreamReader rd &lt;/span&gt;=&lt;span&gt; File.OpenText(stopUrl);
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; s = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;((s=rd.ReadLine())!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                stopWords.Add(s);
            }
           
            Init();
            
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Init()
        {
            termAtt &lt;/span&gt;= AddAttribute&amp;lt;ICharTermAttribute&amp;gt;&lt;span&gt;();
            offsetAtt &lt;/span&gt;= AddAttribute&amp;lt;IOffsetAttribute&amp;gt;&lt;span&gt;();
            posIncrAtt &lt;/span&gt;= AddAttribute&amp;lt;IPositionIncrementAttribute&amp;gt;&lt;span&gt;();
            typeAtt &lt;/span&gt;= AddAttribute&amp;lt;ITypeAttribute&amp;gt;&lt;span&gt;();
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ReadToEnd(TextReader input)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; input.ReadToEnd();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; Boolean IncrementToken()
        {
            ClearAttributes();

            Lucene.Net.Analysis.Token word &lt;/span&gt;=&lt;span&gt; Next();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(word!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buffer =&lt;span&gt; word.ToString();
                termAtt.SetEmpty().Append(buffer);
                offsetAtt.SetOffset(CorrectOffset(word.StartOffset),CorrectOffset(word.EndOffset));
                typeAtt.Type &lt;/span&gt;=&lt;span&gt; word.Type;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
            End();
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Dispose();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Lucene.Net.Analysis.Token Next()
        {
           
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; length = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; res =&lt;span&gt; iter.MoveNext();
            Lucene.Net.Analysis.Token token;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (res)
            {
                JiebaNet.Segmenter.Token word &lt;/span&gt;=&lt;span&gt; iter.Current;

                token &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Lucene.Net.Analysis.Token(word.Word, word.StartIndex,word.EndIndex);
               &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Console.WriteLine(&quot;xxxxxxxxxxxxxxxx分词：&quot;+word.Word+&quot;xxxxxxxxxxx起始位置：&quot;+word.StartIndex+&quot;xxxxxxxxxx结束位置&quot;+word.EndIndex);&lt;/span&gt;
                start +=&lt;span&gt; length;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; token;

            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;    
            
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Reset()
        {
            &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.Reset();

            _InputText &lt;/span&gt;= ReadToEnd(&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.m_input);
            RemoveStopWords(segmenter.Tokenize(_InputText,mode));


            start &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            iter &lt;/span&gt;=&lt;span&gt; _WordList.GetEnumerator();

        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; RemoveStopWords(System.Collections.Generic.IEnumerable&amp;lt;JiebaNet.Segmenter.Token&amp;gt;&lt;span&gt; words)
        {
            _WordList.Clear();
            
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(stopWords.IndexOf(x.Word)==-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
                {
                    _WordList.Add(x);
                }
            }

        }

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一开始我写的Tokenizer类并不是这样，因为遇到了一些问题，才逐渐改成上面的样子，下面就说下自己遇到的问题。&lt;/p&gt;
&lt;h3&gt;3.问题和改进&lt;/h3&gt;
&lt;h4&gt;3.1 JIEba CutForSearch &lt;/h4&gt;
&lt;p&gt;一开始在Reset函数中，我使用的是JIEba分词介绍的CutForSearch函数，CutForSearch的到是List&amp;lt;String&amp;gt; ,所以位置属性OffsetAttribute得我自己来写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Lucene.Net.Analysis.Token Next()
        {
           
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; length = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; res =&lt;span&gt; iter.MoveNext();
            Lucene.Net.Analysis.Token token;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (res)
            {
                JiebaNet.Segmenter.Token word &lt;/span&gt;=&lt;span&gt; iter.Current;

                token &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Lucene.Net.Analysis.Token(word.Word, word.StartIndex,word.EndIndex);
                start &lt;/span&gt;+=&lt;span&gt; length;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; token;

            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;    
            
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自己定义了start,根据每个分词的长度，很容易算出来每个分词的位置。但是我忘了CutForSearch是一个细粒度模式，会有“中国模式”，“中国”，“模式”同时存在，这样的写法就是错的了，如果是Cut就对了。分词的位置信息错误，带来的就是高亮的错误，因为高亮需要知道分词的正确的起始和结束位置。具体的错误就是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt; at System.String.Substring(Int32 startIndex, Int32 length)
   at Lucene.Net.Search.VectorHighlight.BaseFragmentsBuilder.MakeFragment(StringBuilder buffer, Int32[] index, Field[] values, WeightedFragInfo fragInfo, String[] preTags, String[] postTags, IEncoder encoder) &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; C:\BuildAgent\work\b1b63ca15b99dddb\src\Lucene.Net.Highlighter\VectorHighlight\BaseFragmentsBuilder.cs:line &lt;span&gt;195&lt;/span&gt;&lt;span&gt;
   at Lucene.Net.Search.VectorHighlight.BaseFragmentsBuilder.CreateFragments(IndexReader reader, Int32 docId, String fieldName, FieldFragList fieldFragList, Int32 maxNumFragments, String[] preTags, String[] postTags, IEncoder encoder) &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; C:\BuildAgent\work\b1b63ca15b99dddb\src\Lucene.Net.Highlighter\VectorHighlight\BaseFragmentsBuilder.cs:line &lt;span&gt;146&lt;/span&gt;&lt;span&gt;
   at Lucene.Net.Search.VectorHighlight.BaseFragmentsBuilder.CreateFragments(IndexReader reader, Int32 docId, String fieldName, FieldFragList fieldFragList, Int32 maxNumFragments) &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; C:\BuildAgent\work\b1b63ca15b99dddb\src\Lucene.Net.Highlighter\VectorHighlight\BaseFragmentsBuilder.cs:line &lt;span&gt;99&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当你使用Lucene的时候出现这样的错误，大多数都是你的分词位置属性出错。&lt;/p&gt;
&lt;p&gt;后来才发现JIEba分词提供了 &lt;span&gt;Tokenize（）函数，专门提供了分词以及分词的位置信息，我很欣慰的用了Tokenize（）函数，结果还是报错，一样的报错，当我尝试着加上CorrectOffset()函数的时候：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 offsetAtt.SetOffset(CorrectOffset(word.StartOffset),CorrectOffset(word.EndOffset));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;虽然不报错了，但是高亮的效果总是有偏差，总而言之换了Tokenize函数，使用CorrectOffset函数，都无法使分词的位置信息变准确。于是查看JIEba分词的源码。&lt;/p&gt;
&lt;p&gt;Tokenize函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;Token&amp;gt; Tokenize(&lt;span&gt;string&lt;/span&gt; text, TokenizerMode mode = TokenizerMode.Default, &lt;span&gt;bool&lt;/span&gt; hmm = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Token&amp;gt;&lt;span&gt;();

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; start = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (mode ==&lt;span&gt; TokenizerMode.Default)
            {
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; w &lt;span&gt;in&lt;/span&gt;&lt;span&gt; Cut(text, hmm: hmm))
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; width =&lt;span&gt; w.Length;
                    result.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Token(w, start, start +&lt;span&gt; width));
                    start &lt;/span&gt;+=&lt;span&gt; width;
                }
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; w &lt;span&gt;in&lt;/span&gt;&lt;span&gt; Cut(text, hmm: hmm))
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; width =&lt;span&gt; w.Length;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (width &amp;gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; width - &lt;span&gt;1&lt;/span&gt;; i++&lt;span&gt;)
                        {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; gram2 = w.Substring(i, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (WordDict.ContainsWord(gram2))
                            {
                                result.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Token(gram2, start + i, start + i + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;));
                            }
                        }
                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (width &amp;gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; width - &lt;span&gt;2&lt;/span&gt;; i++&lt;span&gt;)
                        {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; gram3 = w.Substring(i, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (WordDict.ContainsWord(gram3))
                            {
                                result.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Token(gram3, start + i, start + i + &lt;span&gt;3&lt;/span&gt;&lt;span&gt;));
                            }
                        }
                    }

                    result.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Token(w, start, start +&lt;span&gt; width));
                    start &lt;/span&gt;+=&lt;span&gt; width;
                }
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cut函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; Cut(&lt;span&gt;string&lt;/span&gt; text, &lt;span&gt;bool&lt;/span&gt; cutAll = &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;bool&lt;/span&gt; hmm = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; reHan =&lt;span&gt; RegexChineseDefault;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; reSkip =&lt;span&gt; RegexSkipDefault;
            Func&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;, IEnumerable&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&amp;gt; cutMethod = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cutAll)
            {
                reHan &lt;/span&gt;=&lt;span&gt; RegexChineseCutAll;
                reSkip &lt;/span&gt;=&lt;span&gt; RegexSkipCutAll;
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cutAll)
            {
                cutMethod &lt;/span&gt;=&lt;span&gt; CutAll;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (hmm)
            {
                cutMethod &lt;/span&gt;=&lt;span&gt; CutDag;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                cutMethod &lt;/span&gt;=&lt;span&gt; CutDagWithoutHmm;
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; CutIt(text, cutMethod, reHan, reSkip, cutAll);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;终于找到了关键的函数：CutIt&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;internal&lt;/span&gt; IEnumerable&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; CutIt(&lt;span&gt;string&lt;/span&gt; text, Func&amp;lt;&lt;span&gt;string&lt;/span&gt;, IEnumerable&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt; cutMethod,
                                           Regex reHan, Regex reSkip, &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; cutAll)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blocks =&lt;span&gt; reHan.Split(text);
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; blk &lt;span&gt;in&lt;/span&gt;&lt;span&gt; blocks)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrWhiteSpace(blk))
                {
                    &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                }

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (reHan.IsMatch(blk))
                {
                    &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; word &lt;span&gt;in&lt;/span&gt;&lt;span&gt; cutMethod(blk))
                    {
                        result.Add(word);
                    }
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tmp =&lt;span&gt; reSkip.Split(blk);
                    &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt;&lt;span&gt; tmp)
                    {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (reSkip.IsMatch(x))
                        {
                            result.Add(x);
                        }
                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;cutAll)
                        {
                            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; ch &lt;span&gt;in&lt;/span&gt;&lt;span&gt; x)
                            {
                                result.Add(ch.ToString());
                            }
                        }
                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                        {
                            result.Add(x);
                        }
                    }
                }
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在CutIt函数中JieBa分词都把空格省去，这样在Tokenize函数中使用start=0 start+=word.Length 显示不能得到正确的原始文本中的位置。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrWhiteSpace(blk))
                {
                    &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JIEba分词也没有考虑到会使用Lucene的高亮，越是只能自己改写了CutIt函数和Tokenize函数：&lt;/p&gt;
&lt;p&gt;在CutIt函数中，返回的值不在是一个string，而是一个包含string,startPosition的类，这样在Tokenize中就很准确的得到每个分词的位置属性了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;internal&lt;/span&gt; IEnumerable&amp;lt;WordInfo&amp;gt; CutIt2(&lt;span&gt;string&lt;/span&gt; text, Func&amp;lt;&lt;span&gt;string&lt;/span&gt;, IEnumerable&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt; cutMethod,
                                           Regex reHan, Regex reSkip, &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; cutAll)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Console.WriteLine(&quot;*********************************我开始分词了*******************&quot;);&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;new&lt;/span&gt; List&amp;lt;WordInfo&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blocks =&lt;span&gt; reHan.Split(text);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; start = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; blk &lt;span&gt;in&lt;/span&gt;&lt;span&gt; blocks)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Console.WriteLine(&quot;?????????????当前的串：&quot;+blk);&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrWhiteSpace(blk))
                {
                    start &lt;/span&gt;+=&lt;span&gt; blk.Length;
                    &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(reHan.IsMatch(blk))
                {
                    
                    &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; word &lt;span&gt;in&lt;/span&gt;&lt;span&gt; cutMethod(blk))
                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Console.WriteLine(&quot;？？？？？blk 分词：&quot; + word + &quot;????????初始位置：&quot; + start);&lt;/span&gt;
                        result.Add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; WordInfo(word,start));
                        start &lt;/span&gt;+=&lt;span&gt; word.Length;
                    }
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tmp =&lt;span&gt; reSkip.Split(blk);
                    &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt;&lt;span&gt; tmp)
                    {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(reSkip.IsMatch(x))
                        {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Console.WriteLine(&quot;？？？？？ x  reSkip 分词：&quot; + x + &quot;????????初始位置：&quot; + start);&lt;/span&gt;
                            result.Add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; WordInfo(x,start));
                            start &lt;/span&gt;+=&lt;span&gt; x.Length;
                        }
                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;cutAll)
                        {
                            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; ch &lt;span&gt;in&lt;/span&gt;&lt;span&gt; x)
                            {
                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Console.WriteLine(&quot;？？？？？ch  分词：&quot; + ch + &quot;????????初始位置：&quot; + start);&lt;/span&gt;
                                result.Add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; WordInfo(ch.ToString(),start));
                                start &lt;/span&gt;+=&lt;span&gt; ch.ToString().Length;
                            }
                        }
                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Console.WriteLine(&quot;？？？？？x  分词：&quot; + x + &quot;????????初始位置：&quot; + start);&lt;/span&gt;
                            result.Add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; WordInfo(x,start));
                            start &lt;/span&gt;+=&lt;span&gt; x.Length;
                            
                        }
                    }
                }
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
        }



 &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;Token&amp;gt; Tokenize(&lt;span&gt;string&lt;/span&gt; text, TokenizerMode mode = TokenizerMode.Default, &lt;span&gt;bool&lt;/span&gt; hmm = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Token&amp;gt;&lt;span&gt;();

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (mode ==&lt;span&gt; TokenizerMode.Default)
            {
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; w &lt;span&gt;in&lt;/span&gt;&lt;span&gt; Cut2(text, hmm: hmm))
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; width =&lt;span&gt; w.value.Length;
                    result.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Token(w.value, w.position, w.position +&lt;span&gt; width));

                }
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; xx =&lt;span&gt; Cut2(text, hmm: hmm);
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; w &lt;span&gt;in&lt;/span&gt;&lt;span&gt; Cut2(text, hmm: hmm))
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; width =&lt;span&gt; w.value.Length;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (width &amp;gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; width - &lt;span&gt;1&lt;/span&gt;; i++&lt;span&gt;)
                        {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; gram2 = w.value.Substring(i, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (WordDict.ContainsWord(gram2))
                            {
                                result.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Token(gram2, w.position + i, w.position + i + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;));
                            }
                        }
                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (width &amp;gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; width - &lt;span&gt;2&lt;/span&gt;; i++&lt;span&gt;)
                        {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; gram3 = w.value.Substring(i, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (WordDict.ContainsWord(gram3))
                            {
                                result.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Token(gram3, w.position + i, w.position + i + &lt;span&gt;3&lt;/span&gt;&lt;span&gt;));
                            }
                        }
                    }

                    result.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Token(w.value, w.position, w.position +&lt;span&gt; width));

                 }
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
        }



 &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WordInfo
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; WordInfo(&lt;span&gt;string&lt;/span&gt; value,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; position)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.position =&lt;span&gt; position;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;分词的内容&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; value { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;分词的初始位置&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; position { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样的话，终于可以正确的进行高亮了，果然搜索效果要比PanGu分词好很多。&lt;/p&gt;
&lt;h3&gt;4.停用词&lt;/h3&gt;
&lt;p&gt;是用JIEba的停用词的方法，是把停用词的文件里的内容读取出来，然后在Reset（）函数里把停用词都过滤掉：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
 StreamReader rd =&lt;span&gt; File.OpenText(stopUrl);
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; s = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;((s=rd.ReadLine())!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                stopWords.Add(s);
            }

 &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Reset()
        {
            &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.Reset();

            _InputText &lt;/span&gt;= ReadToEnd(&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.m_input);
            RemoveStopWords(segmenter.Tokenize(_InputText,mode));


            start &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            iter &lt;/span&gt;=&lt;span&gt; _WordList.GetEnumerator();

        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; RemoveStopWords(System.Collections.Generic.IEnumerable&amp;lt;JiebaNet.Segmenter.Token&amp;gt;&lt;span&gt; words)
        {
            _WordList.Clear();
            
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(stopWords.IndexOf(x.Word)==-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
                {
                    _WordList.Add(x);
                }
            }

        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;5.索引速度&lt;/h3&gt;
&lt;p&gt;使用JIEba分词之后，虽然效果很好，但是写索引的速度很慢，考虑到时细粒度分词，相比以前一篇文章多出来很多分词，所以索引速度慢了8倍左右，但是感觉这并不正常，前面的开源代码测试结果中，CutForSearch很快的，应该是自己的代码哪里出了问题。&lt;/p&gt;

&lt;h2&gt;三，Lucene的高亮&lt;/h2&gt;
&lt;p&gt;这里再对Lucene的高亮的总结一下，Lucene提供了两种高亮模式，一种是普通高亮，一种是快速高亮。&lt;/p&gt;
&lt;h3&gt;1.普通高亮&lt;/h3&gt;
&lt;p&gt;普通高亮的原理，就是将搜索之后得到的文档，使用分词器再进行分词，得到的TokenStream，再进行高亮：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
 SimpleHTMLFormatter simpleHtmlFormatter = &lt;span&gt;new&lt;/span&gt; SimpleHTMLFormatter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;span style='color:red;'&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            Lucene.Net.Search.Highlight.Highlighter highlighter &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Lucene.Net.Search.Highlight.Highlighter(simpleHtmlFormatter, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QueryScorer(query));

            highlighter.TextFragmenter &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SimpleFragmenter(&lt;span&gt;150&lt;/span&gt;&lt;span&gt;);
Analyzer analyzer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JieBaAnalyzer(TokenizerMode.Search);


            TokenStream tokenStream &lt;/span&gt;= analyzer.GetTokenStream(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; StringReader(doc.Get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)));
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; frags = highlighter.GetBestFragments(tokenStream, doc.Get(fieldName), &lt;span&gt;200&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.快速高亮&lt;/h3&gt;
&lt;p&gt;之所很快速，是因为高亮是直接根据索引储存的信息进行高亮，前面已经说过我们索引需要储存分词的位置信息，这个就是为高亮服务的，所以速度很快，当然带来的后果是你的索引文件会比较大，因为储存了位置信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
 FastVectorHighlighter fhl = &lt;span&gt;new&lt;/span&gt; FastVectorHighlighter(&lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;, simpleFragListBuilder, scoreOrderFragmentsBuilder);
            FieldQuery fieldQuery &lt;/span&gt;=&lt;span&gt; fhl.GetFieldQuery(query,_indexReader);

          highLightSetting.MaxFragNum.GetValueOrDefault(MaxFragNumDefaultValue);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; frags = fhl.GetBestFragments(fieldQuery, _indexReader, docid, fieldName, fragSize, maxFragNum);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快速高亮的关键源代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; MakeFragment(StringBuilder buffer, &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] index, Field[] values, WeightedFragInfo fragInfo,
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;[] preTags, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] postTags, IEncoder encoder)
        {
            StringBuilder fragment &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; s =&lt;span&gt; fragInfo.StartOffset;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;[] modifiedStartOffset =&lt;span&gt; { s };
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; src =&lt;span&gt; GetFragmentSourceMSO(buffer, index, values, s, fragInfo.EndOffset, modifiedStartOffset);
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; srcIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (SubInfo subInfo &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fragInfo.SubInfos)
            {
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (Toffs to &lt;span&gt;in&lt;/span&gt;&lt;span&gt; subInfo.TermsOffsets)
                {
                    
                    fragment
                        .Append(encoder.EncodeText(src.Substring(srcIndex, (to.StartOffset &lt;/span&gt;- modifiedStartOffset[&lt;span&gt;0&lt;/span&gt;]) -&lt;span&gt; srcIndex)))
                        .Append(GetPreTag(preTags, subInfo.Seqnum))
                        .Append(encoder.EncodeText(src.Substring(to.StartOffset &lt;/span&gt;- modifiedStartOffset[&lt;span&gt;0&lt;/span&gt;], (to.EndOffset - modifiedStartOffset[&lt;span&gt;0&lt;/span&gt;]) - (to.StartOffset - modifiedStartOffset[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]))))
                        .Append(GetPostTag(postTags, subInfo.Seqnum));
                    srcIndex &lt;/span&gt;= to.EndOffset - modifiedStartOffset[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
                }
            }
            fragment.Append(encoder.EncodeText(src.Substring(srcIndex)));
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; fragment.ToString();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;fragInfo储存了所有需要高亮的关键字和位置信息，src则是原始文本，而之前报的错误正是这里引起的错误，由于位置信息有误src.Substring就会报错。&lt;/p&gt;

&lt;h2&gt;四，结语&lt;/h2&gt;
&lt;p&gt;.net core2.0版的中文分词确实不多，相比较之下，java,c++,的分词工具有很多，或许可以用c++的速度快的特点，做一个单独分词服务，效果是不是会更好。&lt;/p&gt;

</description>
<pubDate>Thu, 08 Feb 2018 06:26:00 +0000</pubDate>
<dc:creator>Shendu.cc</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dacc123/p/8431369.html</dc:identifier>
</item>
<item>
<title>SDP（4）：ScalikeJDBC- JDBC-Engine：Updating - 雪川大虫</title>
<link>http://www.cnblogs.com/tiger-xc/p/8431245.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tiger-xc/p/8431245.html</guid>
<description>&lt;p&gt;&lt;span&gt;    在上一篇博文里我们把JDBC-Engine的读取操作部分分离出来进行了讨论，在这篇准备把更新Update部分功能介绍一下。当然，JDBC-Engine的功能是基于ScalikeJDBC的，所有的操作和属性都包嵌在SQL这个类型中：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * SQL abstraction.
 *
 * @param statement SQL template
 * @param rawParameters parameters
 * @param f  extractor function
 * @tparam A return type
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SQL[A, E &amp;lt;&lt;span&gt;: WithExtractor](
  val statement: String,
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;[scalikejdbc] val rawParameters: Seq[Any]
)(f: WrappedResultSet &lt;/span&gt;=&amp;gt;&lt;span&gt; A)
{...}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Update功能置于下面这几个子类中：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;82&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * SQL which execute java.sql.Statement#executeUpdate().
 *
 * @param statement SQL template
 * @param parameters parameters
 * @param before before filter
 * @param after after filter
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; SQLUpdate(val statement: String, val parameters: Seq[Any], val tags: Seq[String] =&lt;span&gt; Nil)(
    val before: (PreparedStatement) &lt;/span&gt;=&amp;gt;&lt;span&gt; Unit
)(
    val after: (PreparedStatement) &lt;/span&gt;=&amp;gt;&lt;span&gt; Unit
) {

  def apply()(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; session: DBSession): Int =&lt;span&gt; {
    val attributesSwitcher &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; DBSessionAttributesSwitcher(SQL(&lt;span&gt;&quot;&quot;&lt;/span&gt;).tags(tags: _*&lt;span&gt;))
    session match {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; AutoSession =&amp;gt;&lt;span&gt;
        DB.autoCommit(DBSessionWrapper(_, attributesSwitcher).updateWithFilters(before, after, statement, parameters: _&lt;/span&gt;*&lt;span&gt;))
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; NamedAutoSession(name, _) =&amp;gt;&lt;span&gt;
        NamedDB(name, session.settings).autoCommit(DBSessionWrapper(_, attributesSwitcher).updateWithFilters(before, after, statement, parameters: _&lt;/span&gt;*&lt;span&gt;))
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; ReadOnlyAutoSession =&amp;gt;&lt;span&gt;
        DB.readOnly(DBSessionWrapper(_, attributesSwitcher).updateWithFilters(before, after, statement, parameters: _&lt;/span&gt;*&lt;span&gt;))
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; ReadOnlyNamedAutoSession(name, _) =&amp;gt;&lt;span&gt;
        NamedDB(name, session.settings).readOnly(DBSessionWrapper(_, attributesSwitcher).updateWithFilters(before, after, statement, parameters: _&lt;/span&gt;*&lt;span&gt;))
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt;&lt;span&gt;
        DBSessionWrapper(session, attributesSwitcher).updateWithFilters(before, after, statement, parameters: _&lt;/span&gt;*&lt;span&gt;)
    }
  }

}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * SQL which execute java.sql.Statement#execute().
 *
 * @param statement SQL template
 * @param parameters parameters
 * @param before before filter
 * @param after after filter
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; SQLExecution(val statement: String, val parameters: Seq[Any], val tags: Seq[String] =&lt;span&gt; Nil)(
    val before: (PreparedStatement) &lt;/span&gt;=&amp;gt;&lt;span&gt; Unit
)(
    val after: (PreparedStatement) &lt;/span&gt;=&amp;gt;&lt;span&gt; Unit
) {

  def apply()(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; session: DBSession): Boolean =&lt;span&gt; {
    val attributesSwitcher &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; DBSessionAttributesSwitcher(SQL(&lt;span&gt;&quot;&quot;&lt;/span&gt;).tags(tags: _*&lt;span&gt;))
    val f: DBSession &lt;/span&gt;=&amp;gt; Boolean = DBSessionWrapper(_, attributesSwitcher).executeWithFilters(before, after, statement, parameters: _*&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; format: OFF&lt;/span&gt;
&lt;span&gt;    session match {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; AutoSession                       =&amp;gt;&lt;span&gt; DB.autoCommit(f)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; NamedAutoSession(name, _)         =&amp;gt;&lt;span&gt; NamedDB(name, session.settings).autoCommit(f)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; ReadOnlyAutoSession               =&amp;gt;&lt;span&gt; DB.readOnly(f)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; ReadOnlyNamedAutoSession(name, _) =&amp;gt;&lt;span&gt; NamedDB(name, session.settings).readOnly(f)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; _                                 =&amp;gt;&lt;span&gt; f(session)
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; format: ON&lt;/span&gt;
&lt;span&gt;  }

}
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * SQL which execute java.sql.Statement#executeBatch().
 *
 * @param statement SQL template
 * @param parameters parameters
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; SQLBatch(val statement: String, val parameters: Seq[Seq[Any]], val tags: Seq[String] =&lt;span&gt; Nil) {

  def apply[C[_]]()(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; session: DBSession, cbf: CanBuildFrom[Nothing, Int, C[Int]]): C[Int] =&lt;span&gt; {
    val attributesSwitcher &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; DBSessionAttributesSwitcher(SQL(&lt;span&gt;&quot;&quot;&lt;/span&gt;).tags(tags: _*&lt;span&gt;))
    val f: DBSession &lt;/span&gt;=&amp;gt; C[Int] = DBSessionWrapper(_, attributesSwitcher).batch(statement, parameters: _*&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; format: OFF&lt;/span&gt;
&lt;span&gt;    session match {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; AutoSession                       =&amp;gt;&lt;span&gt; DB.autoCommit(f)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; NamedAutoSession(name, _)         =&amp;gt;&lt;span&gt; NamedDB(name, session.settings).autoCommit(f)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; ReadOnlyAutoSession               =&amp;gt;&lt;span&gt; DB.readOnly(f)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; ReadOnlyNamedAutoSession(name, _) =&amp;gt;&lt;span&gt; NamedDB(name, session.settings).readOnly(f)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; _                                 =&amp;gt;&lt;span&gt; f(session)
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; format: ON&lt;/span&gt;
&lt;span&gt;  }

}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;按照JDBC-Engine的功能设计要求，我们大约把Update功能分成数据表构建操作DDL、批次运算Batch、和普通Update几种类型。我们是通过JDBCContext来定义具体的Update功能类型：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; JDBCContext {
    type SQLTYPE &lt;/span&gt;=&lt;span&gt; Int
    val SQL_SELECT: Int &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
    val SQL_EXEDDL&lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    val SQL_UPDATE &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
    val RETURN_GENERATED_KEYVALUE &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    val RETURN_UPDATED_COUNT &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;

  }

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JDBCContext(
                          dbName: Symbol,
                          statements: Seq[String] &lt;/span&gt;=&lt;span&gt; Nil,
                          parameters: Seq[Seq[Any]] &lt;/span&gt;=&lt;span&gt; Nil,
                          fetchSize: Int &lt;/span&gt;= &lt;span&gt;100&lt;/span&gt;&lt;span&gt;,
                          queryTimeout: Option[Int] &lt;/span&gt;=&lt;span&gt; None,
                          queryTags: Seq[String] &lt;/span&gt;=&lt;span&gt; Nil,
                          sqlType: JDBCContext.SQLTYPE &lt;/span&gt;=&lt;span&gt; JDBCContext.SQL_SELECT,
                          batch: Boolean &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                          returnGeneratedKey: Seq[Option[Any]] &lt;/span&gt;=&lt;span&gt; Nil,
                          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; no return: None, return by index: Some(1), by name: Some(&quot;id&quot;)&lt;/span&gt;
                          preAction: Option[PreparedStatement =&amp;gt; Unit] =&lt;span&gt; None,
                          postAction: Option[PreparedStatement &lt;/span&gt;=&amp;gt; Unit] =&lt;span&gt; None) {

    ctx &lt;/span&gt;=&amp;gt;

    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;helper functions&lt;/span&gt;
&lt;span&gt;
    def appendTag(tag: String): JDBCContext &lt;/span&gt;= ctx.copy(queryTags = ctx.queryTags :+&lt;span&gt; tag)

    def appendTags(tags: Seq[String]): JDBCContext &lt;/span&gt;= ctx.copy(queryTags = ctx.queryTags ++&lt;span&gt; tags)

    def setFetchSize(size: Int): JDBCContext &lt;/span&gt;= ctx.copy(fetchSize =&lt;span&gt; size)

    def setQueryTimeout(time: Option[Int]): JDBCContext &lt;/span&gt;= ctx.copy(queryTimeout =&lt;span&gt; time)

    def setPreAction(action: Option[PreparedStatement &lt;/span&gt;=&amp;gt; Unit]): JDBCContext =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType == JDBCContext.SQL_UPDATE &amp;amp;&amp;amp;
        !ctx.batch &amp;amp;&amp;amp; ctx.statements.size == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        ctx.copy(preAction &lt;/span&gt;=&lt;span&gt; action)
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: preAction not supported!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

    def setPostAction(action: Option[PreparedStatement &lt;/span&gt;=&amp;gt; Unit]): JDBCContext =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType == JDBCContext.SQL_UPDATE &amp;amp;&amp;amp;
        !ctx.batch &amp;amp;&amp;amp; ctx.statements.size == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        ctx.copy(postAction &lt;/span&gt;=&lt;span&gt; action)
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: preAction not supported!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

    def appendDDLCommand(_statement: String, _parameters: Any&lt;/span&gt;*): JDBCContext =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType ==&lt;span&gt; JDBCContext.SQL_EXEDDL) {
        ctx.copy(
          statements &lt;/span&gt;= ctx.statements ++&lt;span&gt; Seq(_statement),
          parameters &lt;/span&gt;= ctx.parameters ++&lt;span&gt; Seq(Seq(_parameters))
        )
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: option not supported!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

    def appendUpdateCommand(_returnGeneratedKey: Boolean, _statement: String, _parameters: Any&lt;/span&gt;*): JDBCContext =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType == JDBCContext.SQL_UPDATE &amp;amp;&amp;amp; !&lt;span&gt;ctx.batch) {
        ctx.copy(
          statements &lt;/span&gt;= ctx.statements ++&lt;span&gt; Seq(_statement),
          parameters &lt;/span&gt;= ctx.parameters ++&lt;span&gt; Seq(_parameters),
          returnGeneratedKey &lt;/span&gt;= ctx.returnGeneratedKey ++ (&lt;span&gt;if&lt;/span&gt; (_returnGeneratedKey) Seq(Some(&lt;span&gt;1&lt;/span&gt;)) &lt;span&gt;else&lt;/span&gt;&lt;span&gt; Seq(None))
        )
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: option not supported!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

    def appendBatchParameters(_parameters: Any&lt;/span&gt;*): JDBCContext =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType != JDBCContext.SQL_UPDATE || !&lt;span&gt;ctx.batch)
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: batch parameters only supported for SQL_UPDATE and batch = true!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; matchParams = &lt;span&gt;true&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt; (ctx.parameters !=&lt;span&gt; Nil)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.parameters.head.size !=&lt;span&gt; _parameters.size)
          matchParams &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (matchParams) {
        ctx.copy(
          parameters &lt;/span&gt;= ctx.parameters ++&lt;span&gt; Seq(_parameters)
        )
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: batch command parameters not match!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

    def setBatchReturnGeneratedKeyOption(returnKey: Boolean): JDBCContext &lt;/span&gt;=&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType != JDBCContext.SQL_UPDATE || !&lt;span&gt;ctx.batch)
         &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: only supported in batch update commands!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      ctx.copy(
        returnGeneratedKey &lt;/span&gt;= &lt;span&gt;if&lt;/span&gt; (returnKey) Seq(Some(&lt;span&gt;1&lt;/span&gt;)) &lt;span&gt;else&lt;/span&gt;&lt;span&gt; Nil
      )
    }

     def setQueryCommand(_statement: String, _parameters: Any&lt;/span&gt;*): JDBCContext =&lt;span&gt; {
        ctx.copy(
          statements &lt;/span&gt;=&lt;span&gt; Seq(_statement),
          parameters &lt;/span&gt;=&lt;span&gt; Seq(_parameters),
          sqlType &lt;/span&gt;=&lt;span&gt; JDBCContext.SQL_SELECT,
          batch &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
        )
      }

      def setDDLCommand(_statement: String, _parameters: Any&lt;/span&gt;*): JDBCContext =&lt;span&gt; {
        ctx.copy(
          statements &lt;/span&gt;=&lt;span&gt; Seq(_statement),
          parameters &lt;/span&gt;=&lt;span&gt; Seq(_parameters),
          sqlType &lt;/span&gt;=&lt;span&gt; JDBCContext.SQL_EXEDDL,
          batch &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
        )
      }

      def setUpdateCommand(_returnGeneratedKey: Boolean, _statement: String, _parameters: Any&lt;/span&gt;*): JDBCContext =&lt;span&gt; {
        ctx.copy(
          statements &lt;/span&gt;=&lt;span&gt; Seq(_statement),
          parameters &lt;/span&gt;=&lt;span&gt; Seq(_parameters),
          returnGeneratedKey &lt;/span&gt;= &lt;span&gt;if&lt;/span&gt; (_returnGeneratedKey) Seq(Some(&lt;span&gt;1&lt;/span&gt;)) &lt;span&gt;else&lt;/span&gt;&lt;span&gt; Seq(None),
          sqlType &lt;/span&gt;=&lt;span&gt; JDBCContext.SQL_UPDATE,
          batch &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
        )
      }
      def setBatchCommand(_statement: String): JDBCContext &lt;/span&gt;=&lt;span&gt; {
        ctx.copy (
          statements &lt;/span&gt;=&lt;span&gt; Seq(_statement),
          sqlType &lt;/span&gt;=&lt;span&gt; JDBCContext.SQL_UPDATE,
          batch &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
        )
      }
  }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;JDBCContext还提供了不少的Helper函数来协助构建特别功能的JDBCContext对象，如：setQueryCommand, setDDLCommand, setUpdateCommand, setBatchCommand。这些Helper函数提供Update功能定义的几个主要元素包括：SQL语句主体包括参数占位的statement、输入参数parameter、是否需要返回系统自动产生的主键returnGeneratedKey。在ScalikeJDBC中所有类型的Update功能可以用下面几类内部函数实现，包括：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  &lt;span&gt;private&lt;/span&gt;[&lt;span&gt;this&lt;/span&gt;&lt;span&gt;] def batchInternal[C[_], A](
    template: String,
    paramsList: Seq[Seq[Any]],
    execute: StatementExecutor &lt;/span&gt;=&amp;gt;&lt;span&gt; scala.Array[A]
  )(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; cbf: CanBuildFrom[Nothing, A, C[A]]): C[A] =&lt;span&gt; {
    ensureNotReadOnlySession(template)
    paramsList match {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Nil =&amp;gt;&lt;span&gt; Seq.empty[A].to[C]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt;
        &lt;span&gt;using&lt;/span&gt;&lt;span&gt;(createBatchStatementExecutor(
          conn &lt;/span&gt;=&lt;span&gt; conn,
          template &lt;/span&gt;=&lt;span&gt; template,
          returnGeneratedKeys &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
          generatedKeyName &lt;/span&gt;=&lt;span&gt; None
        )) { executor &lt;/span&gt;=&amp;gt;&lt;span&gt;
          paramsList.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;params&lt;/span&gt; =&amp;gt;&lt;span&gt;
              executor.bindParams(&lt;/span&gt;&lt;span&gt;params&lt;/span&gt;&lt;span&gt;)
              executor.addBatch()
          }
          execute(executor).to[C]
        }
    }
  }
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;[&lt;span&gt;this&lt;/span&gt;&lt;span&gt;] def updateWithFiltersInternal[A](
    returnGeneratedKeys: Boolean,
    before: (PreparedStatement) &lt;/span&gt;=&amp;gt;&lt;span&gt; Unit,
    after: (PreparedStatement) &lt;/span&gt;=&amp;gt;&lt;span&gt; Unit,
    template: String,
    execute: StatementExecutor &lt;/span&gt;=&amp;gt;&lt;span&gt; A,
    &lt;/span&gt;&lt;span&gt;params&lt;/span&gt;&lt;span&gt;: Seq[Any]
  ): A &lt;/span&gt;=&lt;span&gt; {
    ensureNotReadOnlySession(template)
    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt;(createStatementExecutor(
      conn &lt;/span&gt;=&lt;span&gt; conn,
      template &lt;/span&gt;=&lt;span&gt; template,
      &lt;/span&gt;&lt;span&gt;params&lt;/span&gt; = &lt;span&gt;params&lt;/span&gt;&lt;span&gt;,
      returnGeneratedKeys &lt;/span&gt;=&lt;span&gt; returnGeneratedKeys
    )) {
      executor &lt;/span&gt;=&amp;gt;&lt;span&gt;
        before(executor.underlying)
        val count &lt;/span&gt;=&lt;span&gt; execute(executor)
        after(executor.underlying)
        count
    }
  }
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;[&lt;span&gt;this&lt;/span&gt;&lt;span&gt;] def updateWithAutoGeneratedKeyNameAndFiltersInternal[A](
    returnGeneratedKeys: Boolean,
    generatedKeyName: String,
    before: (PreparedStatement) &lt;/span&gt;=&amp;gt;&lt;span&gt; Unit,
    after: (PreparedStatement) &lt;/span&gt;=&amp;gt;&lt;span&gt; Unit,
    template: String,
    execute: StatementExecutor &lt;/span&gt;=&amp;gt;&lt;span&gt; A,
    &lt;/span&gt;&lt;span&gt;params&lt;/span&gt;&lt;span&gt;: Seq[Any]
  ): A &lt;/span&gt;=&lt;span&gt; {
    ensureNotReadOnlySession(template)
    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt;(createStatementExecutor(
      conn &lt;/span&gt;=&lt;span&gt; conn,
      template &lt;/span&gt;=&lt;span&gt; template,
      &lt;/span&gt;&lt;span&gt;params&lt;/span&gt; = &lt;span&gt;params&lt;/span&gt;&lt;span&gt;,
      returnGeneratedKeys &lt;/span&gt;=&lt;span&gt; returnGeneratedKeys,
      generatedKeyName &lt;/span&gt;=&lt;span&gt; Option(generatedKeyName)
    )) {
      executor &lt;/span&gt;=&amp;gt;&lt;span&gt;
        before(executor.underlying)
        val count &lt;/span&gt;=&lt;span&gt; execute(executor)
        after(executor.underlying)
        count
    }
  }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;我们可以看到所有类型的Update都是通过构建StatementExecutor并按其属性进行运算来实现的：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * java.sql.Statement Executor.
 *
 * @param underlying preparedStatement
 * @param template SQL template
 * @param singleParams parameters for single execution (= not batch execution)
 * @param isBatch is batch flag
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StatementExecutor(
    underlying: PreparedStatement,
    template: String,
    connectionAttributes: DBConnectionAttributes,
    singleParams: Seq[Any] &lt;/span&gt;=&lt;span&gt; Nil,
    tags: Seq[String] &lt;/span&gt;=&lt;span&gt; Nil,
    isBatch: Boolean &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    settingsProvider: SettingsProvider &lt;/span&gt;= SettingsProvider.&lt;span&gt;default&lt;/span&gt;&lt;span&gt;
) extends LogSupport with UnixTimeInMillisConverterImplicits with AutoCloseable {...}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这个StatementExcutor类的属性和我们的JDBCContext属性很接近。好了，回到JDBC-Engine Update功能定义。首先是DDL功能：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; def jdbcExcuteDDL(ctx: JDBCContext): Try[String] =&lt;span&gt; {
       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType !=&lt;span&gt; SQL_EXEDDL) {
        Failure(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: sqlType must be 'SQL_EXEDDL'!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
      }
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        NamedDB(ctx.dbName) localTx { &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; session =&amp;gt;&lt;span&gt;
          Try {
                ctx.statements.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; { stm =&amp;gt;&lt;span&gt;
                  val ddl &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SQLExecution(statement = stm, parameters =&lt;span&gt; Nil)(
                    before &lt;/span&gt;= WrappedResultSet =&amp;gt;&lt;span&gt; {})(
                    after &lt;/span&gt;= WrappedResultSet =&amp;gt;&lt;span&gt; {})

                  ddl.apply()
              }
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SQL_EXEDDL executed succesfully.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
          }
        }
      }
    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;所有JDBC-Engine的Update功能都是一个事务处理Transaction中的多条更新语句。DDL语句不需要参数所以只需要提供statement就足够了。下面是这个函数的使用示范：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; ConfigDBsWithEnv(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dev&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).setup(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h2)&lt;/span&gt;
  ConfigDBsWithEnv(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dev&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).loadGlobalSettings()

  val dropSQL: String &lt;/span&gt;=&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;      drop table members
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;
  val createSQL: String &lt;/span&gt;=&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;    create table members (
      id serial not &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt; primary key,
      name varchar(&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;) not &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
      description varchar(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;),
      birthday date,
      created_at timestamp not &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
      picture blob
    )&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;
  &lt;span&gt;var&lt;/span&gt; ctx = JDBCContext(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h2)&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      ctx &lt;/span&gt;=&lt;span&gt; ctx.setDDLCommand(dropSQL)
        .appendDDLCommand(createSQL)
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; {
       &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; e: Exception =&amp;gt;&lt;span&gt; println(e.getMessage)
    }

  val resultCreateTable &lt;/span&gt;=&lt;span&gt; jdbcExcuteDDL(ctx)

  resultCreateTable match {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(msg) =&amp;gt;&lt;span&gt; println(msg)
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(err) =&amp;gt; println(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${err.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在这里我们修改了上次使用的members表，增加了一个blob类的picture列。这个示范在一个完整的Transaction里包括了两条DDL语句。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;批次更新batch-update是指多条输入参数在一条统一的statement上施用：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  def jdbcBatchUpdate[C[_] &amp;lt;&lt;span&gt;: TraversableOnce[_]](ctx: JDBCContext)(
      &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; cbf: CanBuildFrom[Nothing, Long, C[Long]]): Try[C[Long]] =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.statements ==&lt;span&gt; Nil)
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: statements empty!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType !=&lt;span&gt; SQL_UPDATE) {
        Failure(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: sqlType must be 'SQL_UPDATE'!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
      }
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ctx.batch) {
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (noReturnKey(ctx)) {
            val usql &lt;/span&gt;=&lt;span&gt; SQL(ctx.statements.head)
              .tags(ctx.queryTags: _&lt;/span&gt;*&lt;span&gt;)
              .batch(ctx.parameters: _&lt;/span&gt;*&lt;span&gt;)
            Try {
              NamedDB(ctx.dbName) localTx { &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; session =&amp;gt;&lt;span&gt;
                ctx.queryTimeout.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(session.queryTimeout(_))
                usql.apply[Seq]()
                Seq.empty[Long].to[C]
              }
            }
          } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            val usql &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SQLBatchWithGeneratedKey(ctx.statements.head, ctx.parameters, ctx.queryTags)(None)
            Try {
              NamedDB(ctx.dbName) localTx { &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; session =&amp;gt;&lt;span&gt;
                ctx.queryTimeout.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(session.queryTimeout(_))
                usql.apply[C]()
              }
            }
          }

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
          Failure(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: must set batch = true !&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
        }
      }
    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果batch-update是某种Insert操作的话我们可以通过cox.batch注明返回由JDBC系统自动产生的唯一键。这些主键一般在构建表时注明，包括：serial, auto_increment等。如果不返回主键则返回update语句的更新状态如更新数据条数等。在上面这个函数里SQLBatchWithGeneratedKey.apply()返回insert数据主键，所以statement必须是INSERT语句。SQLBatch.apply()则用来运算update语句并返回更新数据的条数。下面是jdbcBatchUpdate函数的使用示范：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt; val insertSQL = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;insert into members(name,birthday,description,created_at,picture) values (?, ?, ?, ?, ?)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  val dateCreated &lt;/span&gt;=&lt;span&gt; DateTime.now

  import java.io.FileInputStream

  val picfile &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; File(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/users/tiger/Nobody.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  val fis &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInputStream(picfile)

  ctx &lt;/span&gt;= JDBCContext(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h2)&lt;/span&gt;
  &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
    ctx &lt;/span&gt;=&lt;span&gt; ctx.setBatchCommand(insertSQL).appendBatchParameters(
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;John&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;new&lt;/span&gt; LocalDate(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2008-03-01&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;youngest user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,dateCreated,None).appendBatchParameters(
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;peter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, None, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no birth date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, dateCreated, fis)
      .appendBatchParameters(
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;susan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, None, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no birth date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, dateCreated, None)
      .setBatchReturnGeneratedKeyOption(JDBCContext.RETURN_GENERATED_KEYVALUE)
  }
  &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; e: Exception =&amp;gt;&lt;span&gt; println(e.getMessage)
  }

  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; resultInserts =&lt;span&gt; jdbcBatchUpdate(ctx)

  resultInserts match {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(msg) =&amp;gt;&lt;span&gt; println(msg)
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(err) =&amp;gt; println(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${err.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;上面这个例子里一个transaction批次包含了三条Insert语句，其中一条涉及存入picture字段：我们只需要把图像文件InputStream作为普通参数传人即可。我们也可以把任何类型的非batch-update语句捆绑在统一的transaction里运算，而且可以指定每条update返回类型：自动产生的主键或者更新数据条数：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def jdbcTxUpdates[C[_] &amp;lt;&lt;span&gt;: TraversableOnce[_]](ctx: JDBCContext)(
      &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; cbf: CanBuildFrom[Nothing, Long, C[Long]]): Try[C[Long]] =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.statements ==&lt;span&gt; Nil)
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: statements empty!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType !=&lt;span&gt; SQL_UPDATE) {
        Failure(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: sqlType must be 'SQL_UPDATE'!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
      }
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;ctx.batch) {
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.statements.size == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            singleTxUpdate(ctx)
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            multiTxUpdates(ctx)
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
          Failure(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: must set batch = false !&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))

      }
    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这个update函数又被细分为单条语句singleTxUpdate和多条语句multiTxUpdates。无论单条或多条update函数又被分为返回主键或更新状态类型的函数：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt; &lt;span&gt;private&lt;/span&gt; def singleTxUpdateWithReturnKey[C[_] &amp;lt;&lt;span&gt;: TraversableOnce[_]](ctx: JDBCContext)(
       &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; cbf: CanBuildFrom[Nothing, Long, C[Long]]): Try[C[Long]] =&lt;span&gt; {
       val Some(key) :: xs &lt;/span&gt;=&lt;span&gt; ctx.returnGeneratedKey
       val &lt;/span&gt;&lt;span&gt;params&lt;/span&gt;: Seq[Any] =&lt;span&gt; ctx.parameters match {
         &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Nil =&amp;gt;&lt;span&gt; Nil
         &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; p@_ =&amp;gt;&lt;span&gt; p.head
       }
       val usql &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SQLUpdateWithGeneratedKey(ctx.statements.head, &lt;span&gt;params&lt;/span&gt;&lt;span&gt;, ctx.queryTags)(key)
       Try {
         NamedDB(ctx.dbName) localTx { &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; session =&amp;gt;&lt;span&gt;
           session.fetchSize(ctx.fetchSize)
           ctx.queryTimeout.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(session.queryTimeout(_))
           val result &lt;/span&gt;=&lt;span&gt; usql.apply()
           Seq(result).to[C]
         }
       }
     }

      &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; def singleTxUpdateNoReturnKey[C[_] &amp;lt;&lt;span&gt;: TraversableOnce[_]](ctx: JDBCContext)(
        &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; cbf: CanBuildFrom[Nothing, Long, C[Long]]): Try[C[Long]] =&lt;span&gt; {
      val &lt;/span&gt;&lt;span&gt;params&lt;/span&gt;: Seq[Any] =&lt;span&gt; ctx.parameters match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Nil =&amp;gt;&lt;span&gt; Nil
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; p@_ =&amp;gt;&lt;span&gt; p.head
      }
      val before &lt;/span&gt;=&lt;span&gt; ctx.preAction match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt; pstm: PreparedStatement =&amp;gt;&lt;span&gt; {}
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(f) =&amp;gt;&lt;span&gt; f
      }
      val after &lt;/span&gt;=&lt;span&gt; ctx.postAction match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt; pstm: PreparedStatement =&amp;gt;&lt;span&gt; {}
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(f) =&amp;gt;&lt;span&gt; f
      }
      val usql &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SQLUpdate(ctx.statements.head,&lt;span&gt;params&lt;/span&gt;&lt;span&gt;,ctx.queryTags)(before)(after)
      Try {
        NamedDB(ctx.dbName) localTx {&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; session =&amp;gt;&lt;span&gt;
          session.fetchSize(ctx.fetchSize)
          ctx.queryTimeout.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(session.queryTimeout(_))
          val result &lt;/span&gt;=&lt;span&gt; usql.apply()
          Seq(result.toLong).to[C]
        }
      }

    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; def singleTxUpdate[C[_] &amp;lt;&lt;span&gt;: TraversableOnce[_]](ctx: JDBCContext)(
      &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; cbf: CanBuildFrom[Nothing, Long, C[Long]]): Try[C[Long]] =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (noReturnKey(ctx))
        singleTxUpdateNoReturnKey(ctx)
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        singleTxUpdateWithReturnKey(ctx)
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; def noReturnKey(ctx: JDBCContext): Boolean =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.returnGeneratedKey !=&lt;span&gt; Nil) {
        val k :: xs &lt;/span&gt;=&lt;span&gt; ctx.returnGeneratedKey
         k match {
          &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt; &lt;span&gt;true&lt;/span&gt;
          &lt;span&gt;case&lt;/span&gt; Some(k) =&amp;gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
        }
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    }

    def noActon: PreparedStatement&lt;/span&gt;=&amp;gt;Unit = pstm =&amp;gt;&lt;span&gt; {}

    def multiTxUpdates[C[_] &lt;/span&gt;&amp;lt;&lt;span&gt;: TraversableOnce[_]](ctx: JDBCContext)(
      &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; cbf: CanBuildFrom[Nothing, Long, C[Long]]): Try[C[Long]] =&lt;span&gt; {
        Try {
          NamedDB(ctx.dbName) localTx { &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; session =&amp;gt;&lt;span&gt;
            session.fetchSize(ctx.fetchSize)
            ctx.queryTimeout.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(session.queryTimeout(_))
            val keys: Seq[Option[Any]] &lt;/span&gt;=&lt;span&gt; ctx.returnGeneratedKey match {
              &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Nil =&amp;gt;&lt;span&gt; Seq.fill(ctx.statements.size)(None)
              &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; k@_ =&amp;gt;&lt;span&gt; k
            }
            val sqlcmd &lt;/span&gt;=&lt;span&gt; ctx.statements zip ctx.parameters zip keys
            val results &lt;/span&gt;= sqlcmd.map { &lt;span&gt;case&lt;/span&gt; ((stm, param), key) =&amp;gt;&lt;span&gt;
              key match {
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt;
                  &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SQLUpdate(stm, param, Nil)(noActon)(noActon).apply().toLong
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(k) =&amp;gt;
                  &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SQLUpdateWithGeneratedKey(stm, param, Nil)(k).apply().toLong
              }
            }
            results.to[C]
          }
        }
     }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;下面是这个函数的使用示范： &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; val updateSQL = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;update members set description = ? where id &amp;lt; ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  ctx &lt;/span&gt;= JDBCContext(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h2)&lt;/span&gt;
  &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
     ctx &lt;/span&gt;=&lt;span&gt; ctx.setUpdateCommand(JDBCContext.RETURN_GENERATED_KEYVALUE,insertSQL,
       &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;max&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, None, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no birth date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, dateCreated, None)
       .appendUpdateCommand(JDBCContext.RETURN_UPDATED_COUNT, updateSQL, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id++&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;&lt;span&gt;)
      .appendUpdateCommand(JDBCContext.RETURN_UPDATED_COUNT,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete members where id = 1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }
  &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; e: Exception =&amp;gt;&lt;span&gt; println(e.getMessage)
  }
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; resultUpdates =&lt;span&gt; jdbcTxUpdates[Vector](ctx)

  resultUpdates match {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(msg) =&amp;gt;&lt;span&gt; println(msg)
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(err) =&amp;gt; println(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${err.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在这个例子里我们把insert，update和delete混在了一个transaction里。最后，我们再把试验数据，包括blob字段读出来：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;data model&lt;/span&gt;
  &lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Member(
                     id: Long,
                     name: String,
                     description: Option[String] &lt;/span&gt;=&lt;span&gt; None,
                     birthday: Option[LocalDate] &lt;/span&gt;=&lt;span&gt; None,
                     createdAt: DateTime,
                     picture: InputStream)

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;data row converter&lt;/span&gt;
  val toMember = (rs: WrappedResultSet) =&amp;gt;&lt;span&gt; Member(
    id &lt;/span&gt;= rs.&lt;span&gt;long&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
    name &lt;/span&gt;= rs.&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
    description &lt;/span&gt;= rs.stringOpt(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
    birthday &lt;/span&gt;= rs.jodaLocalDateOpt(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;birthday&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
    createdAt &lt;/span&gt;= rs.jodaDateTime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;created_at&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
    picture &lt;/span&gt;= rs.binaryStream(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;picture&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  )

  ctx &lt;/span&gt;= JDBCContext(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h2)&lt;/span&gt;
  ctx = ctx.setQueryCommand(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).setQueryTimeout(Some(&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;))

  val vecMember: Vector[Member] &lt;/span&gt;=&lt;span&gt; jdbcQueryResult[Vector,Member](ctx,toMember)

  val buffer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Array[Byte](&lt;span&gt;1024&lt;/span&gt;&lt;span&gt;)

  vecMember.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; {row =&amp;gt;&lt;span&gt;
    println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id: ${row.id} name: ${row.name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name: ${row.name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (row.picture == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
      println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;picture empty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
      val fname &lt;/span&gt;= s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/users/tiger/pic${row.id}.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      val file &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(fname)
      val output &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileOutputStream(file)

      println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;saving picture to $fname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

      row.picture.available()
      &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (row.picture.read(buffer) &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
        output.write(buffer)
      }

      output.close()

    }
  }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;下面是本次讨论的示范源代码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;build.sbt&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;name := &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;learn-scalikeJDBC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

version :&lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

scalaVersion :&lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2.12.4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Scala 2.10, 2.11, 2.12&lt;/span&gt;
libraryDependencies ++=&lt;span&gt; Seq(
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.scalikejdbc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scalikejdbc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;       % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3.1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.scalikejdbc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scalikejdbc-test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3.1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.scalikejdbc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scalikejdbc-config&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3.1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.h2database&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  %  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;                % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.4.196&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql-connector-java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6.0.6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.postgresql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postgresql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;42.2.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;commons-dbcp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;commons-dbcp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.apache.tomcat&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tomcat-jdbc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;9.0.2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.zaxxer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HikariCP&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2.7.4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.jolbox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bonecp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.8.0.RELEASE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.typesafe.slick&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;slick&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3.2.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ch.qos.logback&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  %  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logback-classic&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.2.3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;resources/application.conf&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;# JDBC settings
test {
  db {
    h2 {
      driver &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.h2.Driver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      url &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jdbc:h2:tcp://localhost/~/slickdemo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      user &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
      password &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
      poolInitialSize &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;
      poolMaxSize &lt;/span&gt;= &lt;span&gt;7&lt;/span&gt;&lt;span&gt;
      poolConnectionTimeoutMillis &lt;/span&gt;= &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
      poolValidationQuery &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select 1 as one&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      poolFactoryName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;commons-dbcp2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
  }

  db.mysql.driver &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.mysql.cj.jdbc.Driver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  db.mysql.url &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jdbc:mysql://localhost:3306/testdb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  db.mysql.user &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  db.mysql.password &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  db.mysql.poolInitialSize &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;
  db.mysql.poolMaxSize &lt;/span&gt;= &lt;span&gt;7&lt;/span&gt;&lt;span&gt;
  db.mysql.poolConnectionTimeoutMillis &lt;/span&gt;= &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
  db.mysql.poolValidationQuery &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select 1 as one&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  db.mysql.poolFactoryName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bonecp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

  # scallikejdbc Global settings
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.enabled = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.logLevel =&lt;span&gt; info
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.warningEnabled = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.warningThresholdMillis = &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.warningLogLevel =&lt;span&gt; warn
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.singleLineMode = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.printUnprocessedStackTrace = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.stackTraceDepth = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;
}
dev {
  db {
    h2 {
      driver &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.h2.Driver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      url &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jdbc:h2:tcp://localhost/~/slickdemo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      user &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
      password &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
      poolFactoryName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hikaricp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      numThreads &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;
      maxConnections &lt;/span&gt;= &lt;span&gt;12&lt;/span&gt;&lt;span&gt;
      minConnections &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
      keepAliveConnection &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    }
    mysql {
      driver &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.mysql.cj.jdbc.Driver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      url &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jdbc:mysql://localhost:3306/testdb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      user &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      password &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      poolInitialSize &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;
      poolMaxSize &lt;/span&gt;= &lt;span&gt;7&lt;/span&gt;&lt;span&gt;
      poolConnectionTimeoutMillis &lt;/span&gt;= &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
      poolValidationQuery &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select 1 as one&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      poolFactoryName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bonecp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

    }
    postgres {
      driver &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.postgresql.Driver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      url &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jdbc:postgresql://localhost:5432/testdb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      user &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      password &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      poolFactoryName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hikaricp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      numThreads &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;
      maxConnections &lt;/span&gt;= &lt;span&gt;12&lt;/span&gt;&lt;span&gt;
      minConnections &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
      keepAliveConnection &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    }
  }
  # scallikejdbc Global settings
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.enabled = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.logLevel =&lt;span&gt; info
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.warningEnabled = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.warningThresholdMillis = &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.warningLogLevel =&lt;span&gt; warn
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.singleLineMode = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.printUnprocessedStackTrace = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
  scalikejdbc.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;.loggingSQLAndTime.stackTraceDepth = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JDBCEngine.scala&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;101&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;package jdbccontext
import java.sql.PreparedStatement

import scala.collection.generic.CanBuildFrom
import scalikejdbc._

import scala.util._
import scalikejdbc.TxBoundary.Try._

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; JDBCContext {
    type SQLTYPE &lt;/span&gt;=&lt;span&gt; Int
    val SQL_SELECT: Int &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
    val SQL_EXEDDL&lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    val SQL_UPDATE &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
    val RETURN_GENERATED_KEYVALUE &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    val RETURN_UPDATED_COUNT &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;

  }

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JDBCContext(
                          dbName: Symbol,
                          statements: Seq[String] &lt;/span&gt;=&lt;span&gt; Nil,
                          parameters: Seq[Seq[Any]] &lt;/span&gt;=&lt;span&gt; Nil,
                          fetchSize: Int &lt;/span&gt;= &lt;span&gt;100&lt;/span&gt;&lt;span&gt;,
                          queryTimeout: Option[Int] &lt;/span&gt;=&lt;span&gt; None,
                          queryTags: Seq[String] &lt;/span&gt;=&lt;span&gt; Nil,
                          sqlType: JDBCContext.SQLTYPE &lt;/span&gt;=&lt;span&gt; JDBCContext.SQL_SELECT,
                          batch: Boolean &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                          returnGeneratedKey: Seq[Option[Any]] &lt;/span&gt;=&lt;span&gt; Nil,
                          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; no return: None, return by index: Some(1), by name: Some(&quot;id&quot;)&lt;/span&gt;
                          preAction: Option[PreparedStatement =&amp;gt; Unit] =&lt;span&gt; None,
                          postAction: Option[PreparedStatement &lt;/span&gt;=&amp;gt; Unit] =&lt;span&gt; None) {

    ctx &lt;/span&gt;=&amp;gt;

    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;helper functions&lt;/span&gt;
&lt;span&gt;
    def appendTag(tag: String): JDBCContext &lt;/span&gt;= ctx.copy(queryTags = ctx.queryTags :+&lt;span&gt; tag)

    def appendTags(tags: Seq[String]): JDBCContext &lt;/span&gt;= ctx.copy(queryTags = ctx.queryTags ++&lt;span&gt; tags)

    def setFetchSize(size: Int): JDBCContext &lt;/span&gt;= ctx.copy(fetchSize =&lt;span&gt; size)

    def setQueryTimeout(time: Option[Int]): JDBCContext &lt;/span&gt;= ctx.copy(queryTimeout =&lt;span&gt; time)

    def setPreAction(action: Option[PreparedStatement &lt;/span&gt;=&amp;gt; Unit]): JDBCContext =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType == JDBCContext.SQL_UPDATE &amp;amp;&amp;amp;
        !ctx.batch &amp;amp;&amp;amp; ctx.statements.size == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        ctx.copy(preAction &lt;/span&gt;=&lt;span&gt; action)
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: preAction not supported!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

    def setPostAction(action: Option[PreparedStatement &lt;/span&gt;=&amp;gt; Unit]): JDBCContext =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType == JDBCContext.SQL_UPDATE &amp;amp;&amp;amp;
        !ctx.batch &amp;amp;&amp;amp; ctx.statements.size == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        ctx.copy(postAction &lt;/span&gt;=&lt;span&gt; action)
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: preAction not supported!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

    def appendDDLCommand(_statement: String, _parameters: Any&lt;/span&gt;*): JDBCContext =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType ==&lt;span&gt; JDBCContext.SQL_EXEDDL) {
        ctx.copy(
          statements &lt;/span&gt;= ctx.statements ++&lt;span&gt; Seq(_statement),
          parameters &lt;/span&gt;= ctx.parameters ++&lt;span&gt; Seq(Seq(_parameters))
        )
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: option not supported!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

    def appendUpdateCommand(_returnGeneratedKey: Boolean, _statement: String, _parameters: Any&lt;/span&gt;*): JDBCContext =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType == JDBCContext.SQL_UPDATE &amp;amp;&amp;amp; !&lt;span&gt;ctx.batch) {
        ctx.copy(
          statements &lt;/span&gt;= ctx.statements ++&lt;span&gt; Seq(_statement),
          parameters &lt;/span&gt;= ctx.parameters ++&lt;span&gt; Seq(_parameters),
          returnGeneratedKey &lt;/span&gt;= ctx.returnGeneratedKey ++ (&lt;span&gt;if&lt;/span&gt; (_returnGeneratedKey) Seq(Some(&lt;span&gt;1&lt;/span&gt;)) &lt;span&gt;else&lt;/span&gt;&lt;span&gt; Seq(None))
        )
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: option not supported!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

    def appendBatchParameters(_parameters: Any&lt;/span&gt;*): JDBCContext =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType != JDBCContext.SQL_UPDATE || !&lt;span&gt;ctx.batch)
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: batch parameters only supported for SQL_UPDATE and batch = true!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; matchParams = &lt;span&gt;true&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt; (ctx.parameters !=&lt;span&gt; Nil)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.parameters.head.size !=&lt;span&gt; _parameters.size)
          matchParams &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (matchParams) {
        ctx.copy(
          parameters &lt;/span&gt;= ctx.parameters ++&lt;span&gt; Seq(_parameters)
        )
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: batch command parameters not match!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

    def setBatchReturnGeneratedKeyOption(returnKey: Boolean): JDBCContext &lt;/span&gt;=&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType != JDBCContext.SQL_UPDATE || !&lt;span&gt;ctx.batch)
         &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: only supported in batch update commands!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      ctx.copy(
        returnGeneratedKey &lt;/span&gt;= &lt;span&gt;if&lt;/span&gt; (returnKey) Seq(Some(&lt;span&gt;1&lt;/span&gt;)) &lt;span&gt;else&lt;/span&gt;&lt;span&gt; Nil
      )
    }

     def setQueryCommand(_statement: String, _parameters: Any&lt;/span&gt;*): JDBCContext =&lt;span&gt; {
        ctx.copy(
          statements &lt;/span&gt;=&lt;span&gt; Seq(_statement),
          parameters &lt;/span&gt;=&lt;span&gt; Seq(_parameters),
          sqlType &lt;/span&gt;=&lt;span&gt; JDBCContext.SQL_SELECT,
          batch &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
        )
      }

      def setDDLCommand(_statement: String, _parameters: Any&lt;/span&gt;*): JDBCContext =&lt;span&gt; {
        ctx.copy(
          statements &lt;/span&gt;=&lt;span&gt; Seq(_statement),
          parameters &lt;/span&gt;=&lt;span&gt; Seq(_parameters),
          sqlType &lt;/span&gt;=&lt;span&gt; JDBCContext.SQL_EXEDDL,
          batch &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
        )
      }

      def setUpdateCommand(_returnGeneratedKey: Boolean, _statement: String, _parameters: Any&lt;/span&gt;*): JDBCContext =&lt;span&gt; {
        ctx.copy(
          statements &lt;/span&gt;=&lt;span&gt; Seq(_statement),
          parameters &lt;/span&gt;=&lt;span&gt; Seq(_parameters),
          returnGeneratedKey &lt;/span&gt;= &lt;span&gt;if&lt;/span&gt; (_returnGeneratedKey) Seq(Some(&lt;span&gt;1&lt;/span&gt;)) &lt;span&gt;else&lt;/span&gt;&lt;span&gt; Seq(None),
          sqlType &lt;/span&gt;=&lt;span&gt; JDBCContext.SQL_UPDATE,
          batch &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
        )
      }
      def setBatchCommand(_statement: String): JDBCContext &lt;/span&gt;=&lt;span&gt; {
        ctx.copy (
          statements &lt;/span&gt;=&lt;span&gt; Seq(_statement),
          sqlType &lt;/span&gt;=&lt;span&gt; JDBCContext.SQL_UPDATE,
          batch &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
        )
      }
  }

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; JDBCEngine {

    import JDBCContext._

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; def noExtractor(message: String): WrappedResultSet =&amp;gt; Nothing = { (rs: WrappedResultSet) =&amp;gt;
      &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IllegalStateException(message)
    }

    def jdbcQueryResult[C[_] &lt;/span&gt;&amp;lt;&lt;span&gt;: TraversableOnce[_], A](
         ctx: JDBCContext, rowConverter: WrappedResultSet &lt;/span&gt;=&amp;gt;&lt;span&gt; A)(
          &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; cbf: CanBuildFrom[Nothing, A, C[A]]): C[A] =&lt;span&gt; {

      ctx.sqlType match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; SQL_SELECT =&amp;gt;&lt;span&gt; {
          val &lt;/span&gt;&lt;span&gt;params&lt;/span&gt;: Seq[Any] =&lt;span&gt; ctx.parameters match {
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Nil =&amp;gt;&lt;span&gt; Nil
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; p@_ =&amp;gt;&lt;span&gt; p.head
          }
          val rawSql &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SQLToCollectionImpl[A, NoExtractor](ctx.statements.head, &lt;span&gt;params&lt;/span&gt;)(noExtractor(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;))
          ctx.queryTimeout.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(rawSql.queryTimeout(_))
          ctx.queryTags.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(rawSql.tags(_))
          rawSql.fetchSize(ctx.fetchSize)
          &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val session =&lt;span&gt; NamedAutoSession(ctx.dbName)
          val sql: SQL[A, HasExtractor] &lt;/span&gt;=&lt;span&gt; rawSql.map(rowConverter)
          sql.collection.apply[C]()
        }
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt; &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: sqlType must be 'SQL_SELECT'!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      }
    }

    def jdbcExcuteDDL(ctx: JDBCContext): Try[String] &lt;/span&gt;=&lt;span&gt; {
       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType !=&lt;span&gt; SQL_EXEDDL) {
        Failure(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: sqlType must be 'SQL_EXEDDL'!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
      }
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        NamedDB(ctx.dbName) localTx { &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; session =&amp;gt;&lt;span&gt;
          Try {
                ctx.statements.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; { stm =&amp;gt;&lt;span&gt;
                  val ddl &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SQLExecution(statement = stm, parameters =&lt;span&gt; Nil)(
                    before &lt;/span&gt;= WrappedResultSet =&amp;gt;&lt;span&gt; {})(
                    after &lt;/span&gt;= WrappedResultSet =&amp;gt;&lt;span&gt; {})

                  ddl.apply()
              }
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SQL_EXEDDL executed succesfully.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
          }
        }
      }
    }

    def jdbcBatchUpdate[C[_] &lt;/span&gt;&amp;lt;&lt;span&gt;: TraversableOnce[_]](ctx: JDBCContext)(
      &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; cbf: CanBuildFrom[Nothing, Long, C[Long]]): Try[C[Long]] =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.statements ==&lt;span&gt; Nil)
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: statements empty!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType !=&lt;span&gt; SQL_UPDATE) {
        Failure(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: sqlType must be 'SQL_UPDATE'!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
      }
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ctx.batch) {
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (noReturnKey(ctx)) {
            val usql &lt;/span&gt;=&lt;span&gt; SQL(ctx.statements.head)
              .tags(ctx.queryTags: _&lt;/span&gt;*&lt;span&gt;)
              .batch(ctx.parameters: _&lt;/span&gt;*&lt;span&gt;)
            Try {
              NamedDB(ctx.dbName) localTx { &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; session =&amp;gt;&lt;span&gt;
                ctx.queryTimeout.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(session.queryTimeout(_))
                usql.apply[Seq]()
                Seq.empty[Long].to[C]
              }
            }
          } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            val usql &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SQLBatchWithGeneratedKey(ctx.statements.head, ctx.parameters, ctx.queryTags)(None)
            Try {
              NamedDB(ctx.dbName) localTx { &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; session =&amp;gt;&lt;span&gt;
                ctx.queryTimeout.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(session.queryTimeout(_))
                usql.apply[C]()
              }
            }
          }

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
          Failure(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: must set batch = true !&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
        }
      }
    }
     &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; def singleTxUpdateWithReturnKey[C[_] &amp;lt;&lt;span&gt;: TraversableOnce[_]](ctx: JDBCContext)(
       &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; cbf: CanBuildFrom[Nothing, Long, C[Long]]): Try[C[Long]] =&lt;span&gt; {
       val Some(key) :: xs &lt;/span&gt;=&lt;span&gt; ctx.returnGeneratedKey
       val &lt;/span&gt;&lt;span&gt;params&lt;/span&gt;: Seq[Any] =&lt;span&gt; ctx.parameters match {
         &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Nil =&amp;gt;&lt;span&gt; Nil
         &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; p@_ =&amp;gt;&lt;span&gt; p.head
       }
       val usql &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SQLUpdateWithGeneratedKey(ctx.statements.head, &lt;span&gt;params&lt;/span&gt;&lt;span&gt;, ctx.queryTags)(key)
       Try {
         NamedDB(ctx.dbName) localTx { &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; session =&amp;gt;&lt;span&gt;
           session.fetchSize(ctx.fetchSize)
           ctx.queryTimeout.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(session.queryTimeout(_))
           val result &lt;/span&gt;=&lt;span&gt; usql.apply()
           Seq(result).to[C]
         }
       }
     }

      &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; def singleTxUpdateNoReturnKey[C[_] &amp;lt;&lt;span&gt;: TraversableOnce[_]](ctx: JDBCContext)(
        &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; cbf: CanBuildFrom[Nothing, Long, C[Long]]): Try[C[Long]] =&lt;span&gt; {
      val &lt;/span&gt;&lt;span&gt;params&lt;/span&gt;: Seq[Any] =&lt;span&gt; ctx.parameters match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Nil =&amp;gt;&lt;span&gt; Nil
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; p@_ =&amp;gt;&lt;span&gt; p.head
      }
      val before &lt;/span&gt;=&lt;span&gt; ctx.preAction match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt; pstm: PreparedStatement =&amp;gt;&lt;span&gt; {}
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(f) =&amp;gt;&lt;span&gt; f
      }
      val after &lt;/span&gt;=&lt;span&gt; ctx.postAction match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt; pstm: PreparedStatement =&amp;gt;&lt;span&gt; {}
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(f) =&amp;gt;&lt;span&gt; f
      }
      val usql &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SQLUpdate(ctx.statements.head,&lt;span&gt;params&lt;/span&gt;&lt;span&gt;,ctx.queryTags)(before)(after)
      Try {
        NamedDB(ctx.dbName) localTx {&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; session =&amp;gt;&lt;span&gt;
          session.fetchSize(ctx.fetchSize)
          ctx.queryTimeout.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(session.queryTimeout(_))
          val result &lt;/span&gt;=&lt;span&gt; usql.apply()
          Seq(result.toLong).to[C]
        }
      }

    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; def singleTxUpdate[C[_] &amp;lt;&lt;span&gt;: TraversableOnce[_]](ctx: JDBCContext)(
      &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; cbf: CanBuildFrom[Nothing, Long, C[Long]]): Try[C[Long]] =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (noReturnKey(ctx))
        singleTxUpdateNoReturnKey(ctx)
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        singleTxUpdateWithReturnKey(ctx)
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; def noReturnKey(ctx: JDBCContext): Boolean =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.returnGeneratedKey !=&lt;span&gt; Nil) {
        val k :: xs &lt;/span&gt;=&lt;span&gt; ctx.returnGeneratedKey
         k match {
          &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt; &lt;span&gt;true&lt;/span&gt;
          &lt;span&gt;case&lt;/span&gt; Some(k) =&amp;gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
        }
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    }

    def noActon: PreparedStatement&lt;/span&gt;=&amp;gt;Unit = pstm =&amp;gt;&lt;span&gt; {}

    def multiTxUpdates[C[_] &lt;/span&gt;&amp;lt;&lt;span&gt;: TraversableOnce[_]](ctx: JDBCContext)(
      &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; cbf: CanBuildFrom[Nothing, Long, C[Long]]): Try[C[Long]] =&lt;span&gt; {
        Try {
          NamedDB(ctx.dbName) localTx { &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; session =&amp;gt;&lt;span&gt;
            session.fetchSize(ctx.fetchSize)
            ctx.queryTimeout.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;(session.queryTimeout(_))
            val keys: Seq[Option[Any]] &lt;/span&gt;=&lt;span&gt; ctx.returnGeneratedKey match {
              &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Nil =&amp;gt;&lt;span&gt; Seq.fill(ctx.statements.size)(None)
              &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; k@_ =&amp;gt;&lt;span&gt; k
            }
            val sqlcmd &lt;/span&gt;=&lt;span&gt; ctx.statements zip ctx.parameters zip keys
            val results &lt;/span&gt;= sqlcmd.map { &lt;span&gt;case&lt;/span&gt; ((stm, param), key) =&amp;gt;&lt;span&gt;
              key match {
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt;
                  &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SQLUpdate(stm, param, Nil)(noActon)(noActon).apply().toLong
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(k) =&amp;gt;
                  &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SQLUpdateWithGeneratedKey(stm, param, Nil)(k).apply().toLong
              }
            }
            results.to[C]
          }
        }
     }


    def jdbcTxUpdates[C[_] &lt;/span&gt;&amp;lt;&lt;span&gt;: TraversableOnce[_]](ctx: JDBCContext)(
      &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; cbf: CanBuildFrom[Nothing, Long, C[Long]]): Try[C[Long]] =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.statements ==&lt;span&gt; Nil)
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: statements empty!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.sqlType !=&lt;span&gt; SQL_UPDATE) {
        Failure(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: sqlType must be 'SQL_UPDATE'!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
      }
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;ctx.batch) {
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctx.statements.size == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            singleTxUpdate(ctx)
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            multiTxUpdates(ctx)
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
          Failure(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; IllegalStateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JDBCContex setting error: must set batch = false !&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))

      }
    }

  }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JDBCEngineDemo.scala&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;82&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import java.io.File
import java.io.FileOutputStream
import java.io.InputStream
import jdbccontext._
import configdbs._
import org.joda.time._
import scala.util._
import JDBCEngine._

import scalikejdbc._
&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; CrudDemo extends App {
  ConfigDBsWithEnv(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dev&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).setup(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h2)&lt;/span&gt;
  ConfigDBsWithEnv(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dev&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).loadGlobalSettings()

  val dropSQL: String &lt;/span&gt;=&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;      drop table members
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;
  val createSQL: String &lt;/span&gt;=&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;    create table members (
      id serial not &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt; primary key,
      name varchar(&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;) not &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
      description varchar(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;),
      birthday date,
      created_at timestamp not &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
      picture blob
    )&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;
  &lt;span&gt;var&lt;/span&gt; ctx = JDBCContext(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h2)&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      ctx &lt;/span&gt;=&lt;span&gt; ctx.setDDLCommand(dropSQL)
        .appendDDLCommand(createSQL)
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; {
       &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; e: Exception =&amp;gt;&lt;span&gt; println(e.getMessage)
    }

  val resultCreateTable &lt;/span&gt;=&lt;span&gt; jdbcExcuteDDL(ctx)

  resultCreateTable match {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(msg) =&amp;gt;&lt;span&gt; println(msg)
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(err) =&amp;gt; println(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${err.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }

  val insertSQL &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;insert into members(name,birthday,description,created_at,picture) values (?, ?, ?, ?, ?)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  val dateCreated &lt;/span&gt;=&lt;span&gt; DateTime.now

  import java.io.FileInputStream

  val picfile &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; File(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/users/tiger/Nobody.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  val fis &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInputStream(picfile)

  ctx &lt;/span&gt;= JDBCContext(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h2)&lt;/span&gt;
  &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
    ctx &lt;/span&gt;=&lt;span&gt; ctx.setBatchCommand(insertSQL).appendBatchParameters(
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;John&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;new&lt;/span&gt; LocalDate(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2008-03-01&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;youngest user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,dateCreated,None).appendBatchParameters(
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;peter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, None, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no birth date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, dateCreated, fis)
      .appendBatchParameters(
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;susan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, None, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no birth date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, dateCreated, None)
      .setBatchReturnGeneratedKeyOption(JDBCContext.RETURN_GENERATED_KEYVALUE)
  }
  &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; e: Exception =&amp;gt;&lt;span&gt; println(e.getMessage)
  }

  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; resultInserts =&lt;span&gt; jdbcBatchUpdate(ctx)

  resultInserts match {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(msg) =&amp;gt;&lt;span&gt; println(msg)
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(err) =&amp;gt; println(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${err.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }


  val updateSQL &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;update members set description = ? where id &amp;lt; ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  ctx &lt;/span&gt;= JDBCContext(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h2)&lt;/span&gt;
  &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
     ctx &lt;/span&gt;=&lt;span&gt; ctx.setUpdateCommand(JDBCContext.RETURN_GENERATED_KEYVALUE,insertSQL,
       &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;max&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, None, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no birth date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, dateCreated, None)
       .appendUpdateCommand(JDBCContext.RETURN_UPDATED_COUNT, updateSQL, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id++&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;&lt;span&gt;)
      .appendUpdateCommand(JDBCContext.RETURN_UPDATED_COUNT,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete members where id = 1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }
  &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; e: Exception =&amp;gt;&lt;span&gt; println(e.getMessage)
  }
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; resultUpdates =&lt;span&gt; jdbcTxUpdates[Vector](ctx)

  resultUpdates match {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(msg) =&amp;gt;&lt;span&gt; println(msg)
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(err) =&amp;gt; println(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${err.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }


  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;data model&lt;/span&gt;
  &lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Member(
                     id: Long,
                     name: String,
                     description: Option[String] &lt;/span&gt;=&lt;span&gt; None,
                     birthday: Option[LocalDate] &lt;/span&gt;=&lt;span&gt; None,
                     createdAt: DateTime,
                     picture: InputStream)

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;data row converter&lt;/span&gt;
  val toMember = (rs: WrappedResultSet) =&amp;gt;&lt;span&gt; Member(
    id &lt;/span&gt;= rs.&lt;span&gt;long&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
    name &lt;/span&gt;= rs.&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
    description &lt;/span&gt;= rs.stringOpt(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
    birthday &lt;/span&gt;= rs.jodaLocalDateOpt(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;birthday&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
    createdAt &lt;/span&gt;= rs.jodaDateTime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;created_at&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
    picture &lt;/span&gt;= rs.binaryStream(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;picture&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  )

  ctx &lt;/span&gt;= JDBCContext(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h2)&lt;/span&gt;
  ctx = ctx.setQueryCommand(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).setQueryTimeout(Some(&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;))

  val vecMember: Vector[Member] &lt;/span&gt;=&lt;span&gt; jdbcQueryResult[Vector,Member](ctx,toMember)

  val buffer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Array[Byte](&lt;span&gt;1024&lt;/span&gt;&lt;span&gt;)

  vecMember.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; {row =&amp;gt;&lt;span&gt;
    println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id: ${row.id} name: ${row.name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name: ${row.name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (row.picture == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
      println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;picture empty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
      val fname &lt;/span&gt;= s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/users/tiger/pic${row.id}.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      val file &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(fname)
      val output &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileOutputStream(file)

      println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;saving picture to $fname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

      row.picture.available()
      &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (row.picture.read(buffer) &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
        output.write(buffer)
      }

      output.close()

    }
  }

}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;




&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 08 Feb 2018 06:12:00 +0000</pubDate>
<dc:creator>雪川大虫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tiger-xc/p/8431245.html</dc:identifier>
</item>
<item>
<title>过滤器入门看这一篇就够了 - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8431196.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8431196.html</guid>
<description>&lt;p&gt;&lt;strong&gt;过滤器是Servlet的高级特性之一，也别把它想得那么高深，只不过是实现Filter接口的Java类罢了！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，我们来看看过滤器究竟Web容器的哪处:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/0GCtmlC.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上面的图我们可以发现，&lt;strong&gt;当浏览器发送请求给服务器的时候，先执行过滤器，然后才访问Web的资源。服务器响应Response，从Web资源抵达浏览器之前，也会途径过滤器。。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们很容易发现，&lt;strong&gt;过滤器可以比喻成一张滤网&lt;/strong&gt;。我们想想现实中的滤网可以做什么：&lt;strong&gt;在泡茶的时候，过滤掉茶叶&lt;/strong&gt;。那滤网是怎么过滤茶叶的呢？&lt;strong&gt;规定大小的网孔&lt;/strong&gt;，只要网孔比茶叶小，就可以实现过滤了！&lt;/p&gt;
&lt;p&gt;引申在Web容器中，过滤器可以做：&lt;strong&gt;过滤一些敏感的字符串【规定不能出现敏感字符串】、避免中文乱码【规定Web资源都使用UTF-8编码】、权限验证【规定只有带Session或Cookie的浏览器，才能访问web资源】等等等，过滤器的作用非常大，只要发挥想象就可以有意想不到的效果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也就是说：当需要限制用户访问某些资源时、在处理请求时提前处理某些资源、服务器响应的内容对其进行处理再返回、我们就是用过滤器来完成的！&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;直接举例子来说明吧：&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;没有过滤器解决中文乱码问题&quot;&gt;没有过滤器解决中文乱码问题&lt;/h2&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果我没有用到过滤器：&lt;strong&gt;浏览器通过http请求发送数据给Servlet，如果存在中文，就必须指定编码，否则就会乱码！&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;jsp页面提交中文数据给Servlet处理&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;form&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; action=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/Demo1&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;提交&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Servlet没有指定编码的情况下，获取得到的是乱码&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/sQzdivx.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Servlet中如何解决中文乱码问题，我的其他博文中有：&lt;a href=&quot;http://blog.csdn.net/hon_3y/article/details/54632004&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/hon_3y/article/details/54632004&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也就是说：&lt;strong&gt;如果我每次接受客户端带过来的中文数据，在Serlvet中都要设定编码。这样代码的重复率太高了！！！！&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;有过滤器解决中文乱码问题&quot;&gt;有过滤器解决中文乱码问题&lt;/h2&gt;
&lt;p&gt;有过滤器的情况就不一样了：&lt;strong&gt;只要我在过滤器中指定了编码，可以使全站的Web资源都是使用该编码，并且重用性是非常理想的！&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;只要Java类实现了Filter接口就可以称为过滤器&lt;/strong&gt;！Filter接口的方法也十分简单：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/t97oIXf.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中init()和destory()方法就不用多说了，他俩跟Servlet是一样的。&lt;strong&gt;只有在Web服务器加载和销毁的时候被执行，只会被执行一次！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是doFilter()方法,&lt;strong&gt;它有三个参数（ServletRequest,ServletResponse,FilterChain），&lt;/strong&gt;从前两个参数我们可以发现：&lt;strong&gt;过滤器可以完成任何协议的过滤操作&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;那FilterChain是什么东西呢？我们看看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LsKWsWF.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FilterChain是一个接口，里面又定义了doFilter()方法。这究竟是怎么回事啊？？？？？？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们可以这样理解：过滤器不单单只有一个，那么我们怎么管理这些过滤器呢？&lt;strong&gt;在Java中就使用了链式结构&lt;/strong&gt;。&lt;strong&gt;把所有的过滤器都放在FilterChain里边，如果符合条件，就执行下一个过滤器（如果没有过滤器了，就执行目标资源）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;上面的话好像有点拗口，我们可以想象生活的例子：&lt;strong&gt;现在我想在茶杯上能过滤出石头和茶叶出来。石头在一层，茶叶在一层。所以茶杯的过滤装置应该有两层滤网。这个过滤装置就是FilterChain，过滤石头的滤网和过滤茶叶的滤网就是Filter。在石头滤网中，茶叶是属于下一层的，就把茶叶放行，让茶叶的滤网过滤茶叶。过滤完茶叶了，剩下的就是茶（茶就可以比喻成我们的目标资源）&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;写一个简单的过滤器&quot;&gt;写一个简单的过滤器&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;实现Filter接口的Java类就被称作为过滤器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; FilterDemo1 &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Filter {
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;destroy&lt;/span&gt;() {
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doFilter&lt;/span&gt;(ServletRequest req, ServletResponse resp, FilterChain chain) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; ServletException, IOException {
    
            &lt;span class=&quot;co&quot;&gt;//执行这一句，说明放行（让下一个过滤器执行，如果没有过滤器了，就执行执行目标资源）&lt;/span&gt;
            chain.&lt;span class=&quot;fu&quot;&gt;doFilter&lt;/span&gt;(req, resp);
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;init&lt;/span&gt;(FilterConfig config) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; ServletException {
            
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;filter部署&quot;&gt;filter部署&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;过滤器和Servlet是一样的，需要部署到Web服务器上的。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;第一种方式在web.xml文件中配置&quot;&gt;第一种方式：在web.xml文件中配置&lt;/h3&gt;
&lt;h4 id=&quot;filter&quot;&gt;filter&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;filter&amp;gt;&lt;/code&gt;用于注册过滤器&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;filter&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;kw&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;FilterDemo1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;kw&quot;&gt;&amp;lt;filter-class&amp;gt;&lt;/span&gt;FilterDemo1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/filter-class&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;kw&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;kw&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;word_file&lt;span class=&quot;kw&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt; 
             &lt;span class=&quot;kw&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;/WEB-INF/word.txt&lt;span class=&quot;kw&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;kw&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;&amp;lt;filter-name&amp;gt;&lt;/code&gt;用于&lt;strong&gt;为过滤器指定一个名字&lt;/strong&gt;，该元素的内容不能为空。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;filter-class&amp;gt;&lt;/code&gt;元素用于指定过滤器的&lt;strong&gt;完整的限定类名&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;init-param&amp;gt;&lt;/code&gt;元素用于为过滤器指定初始化参数，它的子元素&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;filter-mapping&quot;&gt;filter-mapping&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;filter-mapping&amp;gt;&lt;/code&gt;元素用于&lt;strong&gt;设置一个Filter 所负责拦截的资源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一个Filter拦截的资源可&lt;strong&gt;通过两种方式来指定：Servlet 名称和资源访问的请求路径&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;filter-mapping&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;FilterDemo1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;&amp;lt;filter-name&amp;gt;&lt;/code&gt;子元素用于设置filter的注册名称。&lt;strong&gt;该值必须是在&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;url-pattern&amp;gt;&lt;/code&gt;设置 filter 所拦截的请求路径(过滤器关联的URL样式)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;servlet-name&amp;gt;&lt;/code&gt;指定过滤器所拦截的Servlet名称&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;dispatcher&amp;gt;&lt;/code&gt;指定过滤器所拦截的资源被 Servlet 容器调用的方式，可以是&lt;strong&gt;REQUEST,INCLUDE,FORWARD和ERROR之一，默认REQUEST&lt;/strong&gt;。用户可以设置多个&lt;code&gt;&amp;lt;dispatcher&amp;gt;&lt;/code&gt; 子元素&lt;strong&gt;用来指定 Filter 对资源的多种调用方式进行拦截。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;dispatcher&quot;&gt;dispatcher&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;REQUEST：&lt;strong&gt;当用户直接访问页面时，Web容器将会调用过滤器&lt;/strong&gt;。如果目标资源是通过RequestDispatcher的include()或forward()方法访问时，那么该过滤器就不会被调用。&lt;/li&gt;
&lt;li&gt;INCLUDE：如果目标资源&lt;strong&gt;是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用&lt;/strong&gt;。除此之外，该过滤器不会被调用。&lt;/li&gt;
&lt;li&gt;FORWARD：如果目标资源是通过&lt;strong&gt;RequestDispatcher的forward()方法访问时，那么该过滤器将被调用&lt;/strong&gt;，除此之外，该过滤器不会被调用。&lt;/li&gt;
&lt;li&gt;ERROR：如果目标资源是&lt;strong&gt;通过声明式异常处理机制调用时，那么该过滤器将被调用&lt;/strong&gt;。除此之外，过滤器不会被调用。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;第二种方式通过注解配置&quot;&gt;第二种方式：通过注解配置&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

    &lt;span class=&quot;fu&quot;&gt;@WebFilter&lt;/span&gt;(filterName = &lt;span class=&quot;st&quot;&gt;&quot;FilterDemo1&quot;&lt;/span&gt;,urlPatterns = &lt;span class=&quot;st&quot;&gt;&quot;/*&quot;&lt;/span&gt;)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的配置是“/*”，所有的Web资源都需要途径过滤器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果想要部分的Web资源进行过滤器过滤则需要指定Web资源的名称即可！&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;上面已经说过了，过滤器的doFilter()方法是极其重要的，&lt;strong&gt;FilterChain接口是代表着所有的Filter，FilterChain中的doFilter()方法决定着是否放行下一个过滤器执行（如果没有过滤器了，就执行目标资源）&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;测试一&quot;&gt;测试一&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;首先在过滤器的doFilter()中输出一句话，并且调用chain对象的doFilter()方法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doFilter&lt;/span&gt;(ServletRequest req, ServletResponse resp, FilterChain chain) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; ServletException, IOException {

        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;我是过滤器1&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//执行这一句，说明放行（让下一个过滤器执行，或者执行目标资源）&lt;/span&gt;
        chain.&lt;span class=&quot;fu&quot;&gt;doFilter&lt;/span&gt;(req, resp);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;我们来访问一下test.jsp页面：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/GRUESdZ.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们发现test.jsp（我们的目标资源）成功访问到了，并且在服务器上也打印了字符串！&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;测试二&quot;&gt;测试二&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;我们来试试把&lt;code&gt;chain.doFilter(req, resp);&lt;/code&gt;这段代码注释了看看！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/GFHz6aR.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;test.jsp页面并没有任何的输出（也就是说，并没有访问到jsp页面）。&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;测试三&quot;&gt;测试三&lt;/h2&gt;
&lt;p&gt;直接看下面的代码。我们已经知道了”准备放行“会被打印在控制台上和test.jsp页面也能被访问得到，&lt;strong&gt;但“放行完成“会不会打印在控制台上呢？&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doFilter&lt;/span&gt;(ServletRequest req, ServletResponse resp, FilterChain chain) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; ServletException, IOException {

        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;准备放行&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//执行这一句，说明放行（让下一个过滤器执行，或者执行目标资源）&lt;/span&gt;
        chain.&lt;span class=&quot;fu&quot;&gt;doFilter&lt;/span&gt;(req, resp);

        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;放行完成&quot;&lt;/span&gt;);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;答案也非常简单，&lt;strong&gt;肯定会打印在控制台上的&lt;/strong&gt;。我们来看看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/wWHIqyV.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意，它的完整流程顺序是这样的：&lt;strong&gt;客户端发送http请求到Web服务器上，Web服务器执行过滤器，执行到”准备放行“时，就把字符串输出到控制台上，接着执行doFilter()方法，Web服务器发现没有过滤器了，就执行目标资源（也就是test.jsp）。目标资源执行完后，回到过滤器上，继续执行代码，然后输出”放行完成“&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;测试四&quot;&gt;测试四&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;我们再多加一个过滤器，看看执行顺序。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;过滤器1&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;过滤器1开始执行&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//执行这一句，说明放行（让下一个过滤器执行，或者执行目标资源）&lt;/span&gt;
        chain.&lt;span class=&quot;fu&quot;&gt;doFilter&lt;/span&gt;(req, resp);

        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;过滤器1开始完毕&quot;&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;过滤器2&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;过滤器2开始执行&quot;&lt;/span&gt;);
        chain.&lt;span class=&quot;fu&quot;&gt;doFilter&lt;/span&gt;(req, resp);
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;过滤器2开始完毕&quot;&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;我是Servlet1&quot;&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们访问Servlet1的时候，看看控制台会出现什么：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/O5iRwy9.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;执行顺序是这样的：&lt;strong&gt;先执行FilterDemo1，放行，执行FilterDemo2，放行，执行Servlet1，Servlet1执行完回到FilterDemo2上，FilterDemo2执行完毕后，回到FilterDemo1上&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;注意：过滤器之间的执行顺序看在web.xml文件中mapping的先后顺序的，如果放在前面就先执行，放在后面就后执行！如果是通过注解的方式配置，就比较urlPatterns的字符串优先级&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;&lt;li&gt;filter的三种典型应用：&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1、可以在filter中根据条件决定是否调用chain.doFilter(request, response)方法，即是否让目标资源执行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2、在让目标资源执行之前，可以对request\response作预处理，再让目标资源执行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3、在目标资源执行之后，可以捕获目标资源的执行结果，从而实现一些特殊的功能&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;禁止浏览器缓存所有动态页面&quot;&gt;禁止浏览器缓存所有动态页面&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doFilter&lt;/span&gt;(ServletRequest req, ServletResponse resp, FilterChain chain) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; ServletException, IOException {

        &lt;span class=&quot;co&quot;&gt;//让Web资源不缓存，很简单，设置http中response的请求头即可了！&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//我们使用的是http协议，ServletResponse并没有能够设置请求头的方法，所以要强转成HttpServletRequest&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//一般我们写Filter都会把他俩强转成Http类型的&lt;/span&gt;
        HttpServletRequest request = (HttpServletRequest) req;
        HttpServletResponse response = (HttpServletResponse) resp;

        response.&lt;span class=&quot;fu&quot;&gt;setDateHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Expires&quot;&lt;/span&gt;, -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
        response.&lt;span class=&quot;fu&quot;&gt;setHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;);
        response.&lt;span class=&quot;fu&quot;&gt;setHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Pragma&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//放行目标资源的response已经设置成不缓存的了&lt;/span&gt;
        chain.&lt;span class=&quot;fu&quot;&gt;doFilter&lt;/span&gt;(request, response);
    }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;没有过滤之前，响应头是这样的：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/elOTbeN.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;过滤之后，响应头是这样的：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/MsV7Edc.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;实现自动登陆&quot;&gt;实现自动登陆&lt;/h2&gt;
&lt;h3 id=&quot;开发实体集合模拟数据库dao&quot;&gt;开发实体、集合模拟数据库、Dao&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String username ;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String password;


    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;User&lt;/span&gt;() {
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;User&lt;/span&gt;(String username, String password) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;username&lt;/span&gt; = username;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;password&lt;/span&gt; = password;
    }

    &lt;span class=&quot;co&quot;&gt;//各种setter和getter&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;集合模拟数据库&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; UserDB {
    
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; List&amp;lt;User&amp;gt; users = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
    
    
    
        &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; {
            users.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;User&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;aaa&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;123&quot;&lt;/span&gt;));
            users.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;User&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;bbb&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;123&quot;&lt;/span&gt;));
            users.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;User&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ccc&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;123&quot;&lt;/span&gt;));
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; List&amp;lt;User&amp;gt; &lt;span class=&quot;fu&quot;&gt;getUsers&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; users;
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setUsers&lt;/span&gt;(List&amp;lt;User&amp;gt; users) {
            UserDB.&lt;span class=&quot;fu&quot;&gt;users&lt;/span&gt; = users;
        }
    }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(String username, String password) {

        List&amp;lt;User&amp;gt; userList = UserDB.&lt;span class=&quot;fu&quot;&gt;getUsers&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//遍历List集合，看看有没有对应的username和password&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (User user : userList) {
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (user.&lt;span class=&quot;fu&quot;&gt;getUsername&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(username) &amp;amp;&amp;amp; user.&lt;span class=&quot;fu&quot;&gt;getPassword&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(password)) {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; user;
            }
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;登陆界面&quot;&gt;登陆界面&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;form&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; action=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath}/LoginServlet&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    用户名&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
    密码&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;radio&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;10分钟
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;radio&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;30&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;30分钟
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;radio&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;60&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;1小时
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;登陆&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;处理登陆的servlet&quot;&gt;处理登陆的Servlet&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        &lt;span class=&quot;co&quot;&gt;//得到客户端发送过来的数据&lt;/span&gt;
        String username = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;);
        String password = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;);
        
        UserDao userDao = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UserDao&lt;/span&gt;();
        User user = userDao.&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(username, password);

        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (user == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;用户名或密码是错的！&quot;&lt;/span&gt;);
            request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
        }

        &lt;span class=&quot;co&quot;&gt;//如果不是为空，那么在session中保存一个属性&lt;/span&gt;
        request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;, user);
        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;恭喜你，已经登陆了！&quot;&lt;/span&gt;);
        
        &lt;span class=&quot;co&quot;&gt;//如果想要用户关闭了浏览器，还能登陆，就必须要用到Cookie技术了&lt;/span&gt;
        Cookie cookie = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Cookie&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;autoLogin&quot;&lt;/span&gt;, user.&lt;span class=&quot;fu&quot;&gt;getUsername&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;.&quot;&lt;/span&gt; + user.&lt;span class=&quot;fu&quot;&gt;getPassword&lt;/span&gt;());

        &lt;span class=&quot;co&quot;&gt;//设置Cookie的最大声明周期为用户指定的&lt;/span&gt;
        cookie.&lt;span class=&quot;fu&quot;&gt;setMaxAge&lt;/span&gt;(Integer.&lt;span class=&quot;fu&quot;&gt;parseInt&lt;/span&gt;(request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;time&quot;&lt;/span&gt;)) * &lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt;);
        
        &lt;span class=&quot;co&quot;&gt;//把Cookie返回给浏览器&lt;/span&gt;
        response.&lt;span class=&quot;fu&quot;&gt;addCookie&lt;/span&gt;(cookie);
        
        &lt;span class=&quot;co&quot;&gt;//跳转到提示页面&lt;/span&gt;
        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;过滤器&quot;&gt;过滤器&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        HttpServletResponse response = (HttpServletResponse) resp;
        HttpServletRequest request = (HttpServletRequest) req;

        &lt;span class=&quot;co&quot;&gt;//如果用户没有关闭浏览器，就不需要Cookie做拼接登陆了&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;) != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            chain.&lt;span class=&quot;fu&quot;&gt;doFilter&lt;/span&gt;(request, response);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }

        &lt;span class=&quot;co&quot;&gt;//用户关闭了浏览器，session的值就获取不到了。所以要通过Cookie来自动登陆&lt;/span&gt;
        Cookie[] cookies = request.&lt;span class=&quot;fu&quot;&gt;getCookies&lt;/span&gt;();
        String value = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; cookies != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; i &amp;lt; cookies.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;; i++) {
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (cookies[i].&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;autoLogin&quot;&lt;/span&gt;)) {
                value = cookies[i].&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;();
            }
        }

        &lt;span class=&quot;co&quot;&gt;//得到Cookie的用户名和密码&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (value != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {

            String username = value.&lt;span class=&quot;fu&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;.&quot;&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;];
            String password = value.&lt;span class=&quot;fu&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;.&quot;&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;];

            UserDao userDao = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UserDao&lt;/span&gt;();
            User user = userDao.&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(username, password);

            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (user != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;, user);
            }
        }
        
        chain.&lt;span class=&quot;fu&quot;&gt;doFilter&lt;/span&gt;(request, response);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/wgtlJ98.gif&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;改良&quot;&gt;改良&lt;/h3&gt;
&lt;p&gt;我们直接把用户名和密码都放在了Cookie中，这是明文的。懂点编程的人就会知道你的账号了。&lt;/p&gt;
&lt;p&gt;于是乎，我们要对密码进行加密！&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        Cookie cookie = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Cookie&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;autoLogin&quot;&lt;/span&gt;, user.&lt;span class=&quot;fu&quot;&gt;getUsername&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;.&quot;&lt;/span&gt; + md5.&lt;span class=&quot;fu&quot;&gt;md5&lt;/span&gt;(user.&lt;span class=&quot;fu&quot;&gt;getPassword&lt;/span&gt;()));
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;在过滤器中，加密后的密码就不是数据库中的密码的。所以，我们得&lt;strong&gt;在Dao添加一个功能【根据用户名，找到用户】&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(String username) {
        List&amp;lt;User&amp;gt; userList = UserDB.&lt;span class=&quot;fu&quot;&gt;getUsers&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//遍历List集合，看看有没有对应的username和password&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (User user : userList) {
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (user.&lt;span class=&quot;fu&quot;&gt;getUsername&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(username)) {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; user;
            }
        }

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;在过滤器中，比较Cookie带过来的md5密码和在数据库中获得的密码（也经过md5）是否相同&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        &lt;span class=&quot;co&quot;&gt;//得到Cookie的用户名和密码&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (value != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {

            String username = value.&lt;span class=&quot;fu&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;.&quot;&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;];
            String password = value.&lt;span class=&quot;fu&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;.&quot;&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;];

            &lt;span class=&quot;co&quot;&gt;//在Cookie拿到的密码是md5加密过的，不能直接与数据库中的密码比较&lt;/span&gt;
            UserDao userDao = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UserDao&lt;/span&gt;();
            User user = userDao.&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(username);

            &lt;span class=&quot;co&quot;&gt;//通过用户名获得用户信息，得到用户的密码，用户的密码也md5一把&lt;/span&gt;

            String dbPassword = md5.&lt;span class=&quot;fu&quot;&gt;md5&lt;/span&gt;(user.&lt;span class=&quot;fu&quot;&gt;getPassword&lt;/span&gt;());
            &lt;span class=&quot;co&quot;&gt;//如果两个密码匹配了，就是正确的密码了&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (password.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(dbPassword)) {
                request.&lt;span class=&quot;fu&quot;&gt;getSession&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;, user);
            }

        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章的同学，可以关注微信公众号:Java3y&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Thu, 08 Feb 2018 05:49:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8431196.html</dc:identifier>
</item>
<item>
<title>js、jQuery实现2048小游戏 - 举个丽子</title>
<link>http://www.cnblogs.com/-lizi/p/8431030.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/-lizi/p/8431030.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;strong class=&quot;d-tit&quot;&gt;一、游戏简介：&lt;/strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span class=&quot;desc&quot;&gt;2048是一款休闲益智类的数字叠加小游戏&lt;/span&gt;&lt;span class=&quot;desc&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、 游戏玩法：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在4*4的16宫格中，您可以选择上、下、左、右四个方向进行操作，数字会按方向移动，相邻的两个数字相同就会合并，组成更大的数字，每次移动或合并后会增加一个数字。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当16宫格中没有空格子，且四个方向都无法操作时，游戏结束。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、 游戏目的：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;目的是合并出2048这个数字，获得更高的分数。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、 游戏截图：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1184680/201802/1184680-20180208105526216-1372697934.png&quot; alt=&quot;&quot; width=&quot;485&quot; height=&quot;549&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1184680/201802/1184680-20180208105857013-604283446.png&quot; alt=&quot;&quot; width=&quot;486&quot; height=&quot;592&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt; 五、先来玩一下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;六、游戏实现原理：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用js、jQuery实现了PC版及手机版，实现原理是一样的，只是移动端的一些样式和上、下、左、右滑动的事件与PC端不一样&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 首先，把16宫格看成是矩阵的形式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1184680/201802/1184680-20180208110512654-622022486.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 在html中给每个格子添加类名及属性，来记录每个格子的位置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1184680/201802/1184680-20180208110731107-207970500.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;类名item是每个格子的类名，emptyItem是空格子的类名，nonEmptyItem是非空格式的类名&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 游戏开始时，随机生成两个数字，2或者4，出现在矩阵中任意位置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1184680/201802/1184680-20180208111615232-1823221305.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这部分是通过类名emptyItem及nonEmptyItem来实现的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;①. 随机生成一个数字2或者4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;②. 获取所有空元素（类名emptyItem）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③. 随机选择一个空元素    将这个数字填充到空元素中，并将类名emptyItem移除，添加类名nonEmptyItem，即非空元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;④. 重复①、②、③步，再随机生成一个数字填充一到随机的位置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. 游戏的核心在于移动&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;移动有四个方向：上、下、左、右，实现思路如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;向左移动&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　移动或合并&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　遍历所有非空元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　如果当前元素在第一个位置     则不动&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　如果当前元素不在每一个位置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　当前元素左侧是空元素    向左移动&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　当前元素左侧是非空元素    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　左侧元素和当前元素的内容不同    不动&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　左侧元素和当前元素的内容相同    向左合并&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　是否产生新元素&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所有非空元素中，有移动的    产生新元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所有非空元素中，有合并的    产生新元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;向右移动&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　移动或合并&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　遍历所有非空元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　如果当前元素在最后一个位置     则不动&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　如果当前元素不在最后一个位置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　当前元素右侧是空元素    向右移动&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　当前元素右侧是非空元素    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　右侧元素和当前元素的内容不同    不动&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　右侧元素和当前元素的内容相同    向右合并&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　是否产生新元素&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所有非空元素中，有移动的    产生新元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所有非空元素中，有合并的    产生新元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;向上移动、向下移动 。。。。思路同上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5. 判断游戏是否结束：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;获取所有元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;获取所有非空元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果所有元素的个数 == 所有非空元素的个数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　循环遍历所有非空元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　上面元素存在 &amp;amp;&amp;amp; 当前元素的内容 == 上面元素的内容   return&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　下面元素存在 &amp;amp;&amp;amp; 当前元素的内容 == 下面元素的内容   return&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　左边元素存在 &amp;amp;&amp;amp; 当前元素的内容 == 左边元素的内容   return&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　右边元素存在 &amp;amp;&amp;amp; 当前元素的内容 == 右边元素的内容   return&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　所有元素，以上条件都不满足   gameover&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;七、代码实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1. html部分&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt;&lt;span&gt; xml:lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;Content-Type&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;text/html;charset=UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2048小游戏&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;css/bootstrap.css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/jquery-2.1.1.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/bootstrap.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/game.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;main&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;《2048》一款益智休闲小游戏，听说能拼出2048的全世界不超过3%哦！&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;gameName&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2048小游戏&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;maxScore&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;最高分：
            &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;maxScore&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1345612&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;gameBody&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x0y0&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x0y1&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x0y2&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x0y3&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x1y0&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x1y1&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x1y2&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x1y3&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x2y0&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x2y1&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x2y2&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x2y3&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x3y0&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x3y1&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x3y2&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item emptyItem x3y3&quot;&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;gameRule&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;请按上、下、左、右键进行操作&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;scoreAndRefresh&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;gameScore&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;得分：&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;gameScore&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 分&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-danger refreshBtn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;glyphicon glyphicon-repeat&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;modal fade&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;gameOverModal&quot;&lt;/span&gt;&lt;span&gt; aria-labelledby&lt;/span&gt;&lt;span&gt;=&quot;myModalLabel&quot;&lt;/span&gt;&lt;span&gt; aria-hidden&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; data-backdrop&lt;/span&gt;&lt;span&gt;=&quot;static&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;modal-dialog&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;modal-content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;modal-header&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;close&quot;&lt;/span&gt;&lt;span&gt; data-dismiss&lt;/span&gt;&lt;span&gt;=&quot;modal&quot;&lt;/span&gt;&lt;span&gt; aria-hidden&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;amp;times;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4 &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;modal-tittle&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;myModalLabel&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2048小游戏&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;modal-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                        Game Over!
                    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;modal-footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-info&quot;&lt;/span&gt;&lt;span&gt; data-dismiss&lt;/span&gt;&lt;span&gt;=&quot;modal&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;关闭&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-danger refreshBtn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;再玩一次&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2. css部分&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        * &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-family&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;YouYuan&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        body &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; lavenderblush&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .container &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            margin-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .main &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1000px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; hidden&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .main .gameName &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 35px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-weight&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bold&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .main .maxScore &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .main .maxScore span &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-weight&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bold&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .main .gameBody &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-direction&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; space-between&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 15px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #999&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 8px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .main .gameBody .row &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; space-between&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .main .gameBody .row .item &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            line-height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-weight&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bold&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #666&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-family&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;microsoft yahei&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .main .gameRule &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-weight&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bold&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 15px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .main .gameScore &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-weight&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bold&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 15px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .main .gameScore span &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .main .scoreAndRefresh &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; 
            justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; space-around&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; 
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 280px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; 
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .main .scoreAndRefresh .refreshBtn &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; margin-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 22px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .modal &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            margin-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 7%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .modal .modal-header h4 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-weight&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bold&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .modal .modal-dialog &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        .modal .modal-body &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 18px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-weight&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bold&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        #resetMaxScore &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3. js部分&lt;/strong&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;92&quot;&gt;
&lt;pre&gt;
    $(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否产生新元素&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; isNewRndItme = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; gameScore = 0&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;最高分&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; maxScore = 0&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(localStorage.maxScore) {
            maxScore &lt;/span&gt;= localStorage.maxScore - 0&lt;span&gt;;
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            maxScore &lt;/span&gt;= 0&lt;span&gt;;
        }


        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;游戏初始化&lt;/span&gt;
&lt;span&gt;        gameInit();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上、下、左、右监听事件&lt;/span&gt;
        $('body').keydown(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e) {
            &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (e.keyCode) {
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 37&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;
                    console.log('left'&lt;span&gt;);
                    isNewRndItme &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                    move(&lt;/span&gt;'left'&lt;span&gt;);
                    isGameOver();
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 38&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; up&lt;/span&gt;
                    console.log('up'&lt;span&gt;);
                    isNewRndItme &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                    move(&lt;/span&gt;'up'&lt;span&gt;);
                    isGameOver();
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 39&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; right&lt;/span&gt;
                    console.log('right'&lt;span&gt;);
                    isNewRndItme &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                    move(&lt;/span&gt;'right'&lt;span&gt;);
                    isGameOver();
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 40&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; down&lt;/span&gt;
                    console.log('down'&lt;span&gt;);
                    isNewRndItme &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                    move(&lt;/span&gt;'down'&lt;span&gt;);
                    isGameOver();
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
        });


        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; refreshGame(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; items = $('.gameBody .row .item'&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; items.length; i++&lt;span&gt;) {
                items.eq(i).html(&lt;/span&gt;'').removeClass('nonEmptyItem').addClass('emptyItem'&lt;span&gt;);
            }
            gameScore &lt;/span&gt;= 0&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;分数清零&lt;/span&gt;
            $('#gameScore'&lt;span&gt;).html(gameScore);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;随机生成两个新元素&lt;/span&gt;
&lt;span&gt;            newRndItem();
            newRndItem();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;刷新颜色&lt;/span&gt;
&lt;span&gt;            refreshColor();
            $(&lt;/span&gt;'#gameOverModal').modal('hide'&lt;span&gt;);
        }


        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getSideItem(currentItem, direction) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前元素的位置&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; currentItemX = currentItem.attr('x') - 0&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; currentItemY = currentItem.attr('y') - 0&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据方向获取旁边元素的位置&lt;/span&gt;
            &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (direction) {
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 'left'&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sideItemX =&lt;span&gt; currentItemX;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sideItemY = currentItemY - 1&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 'right'&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sideItemX =&lt;span&gt; currentItemX;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sideItemY = currentItemY + 1&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 'up'&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sideItemX = currentItemX - 1&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sideItemY =&lt;span&gt; currentItemY;
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 'down'&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sideItemX = currentItemX + 1&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sideItemY =&lt;span&gt; currentItemY;
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;旁边元素&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; sideItem = $('.gameBody .row .x' + sideItemX + 'y' +&lt;span&gt; sideItemY);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sideItem;
        }


        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; itemMove(currentItem, direction) {
            
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sideItem =&lt;span&gt; getSideItem(currentItem, direction);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(sideItem.length == 0) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前元素在最边上&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;不动&lt;/span&gt;
&lt;span&gt;                
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(sideItem.html() == '') { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前元素不在最后一个且左（右、上、下）侧元素是空元素&lt;/span&gt;
                sideItem.html(currentItem.html()).removeClass('emptyItem').addClass('nonEmptyItem'&lt;span&gt;);
                currentItem.html(&lt;/span&gt;'').removeClass('nonEmptyItem').addClass('emptyItem'&lt;span&gt;);
                itemMove(sideItem, direction);
                isNewRndItme &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(sideItem.html() != currentItem.html()) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左（右、上、下）侧元素和当前元素内容不同&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;不动&lt;/span&gt;
&lt;span&gt;                
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左（右、上、下）侧元素和当前元素内容相同&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;向右合并&lt;/span&gt;
                sideItem.html((sideItem.html() - 0) * 2&lt;span&gt;);
                currentItem.html(&lt;/span&gt;'').removeClass('nonEmptyItem').addClass('emptyItem'&lt;span&gt;);
                gameScore &lt;/span&gt;+= (sideItem.text() - 0) * 10&lt;span&gt;;
                $(&lt;/span&gt;'#gameScore'&lt;span&gt;).html(gameScore);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; itemMove(sideItem, direction);&lt;/span&gt;
                maxScore = maxScore &amp;lt; gameScore ?&lt;span&gt; gameScore : maxScore;
                $(&lt;/span&gt;'#maxScore'&lt;span&gt;).html(maxScore);
                localStorage.maxScore &lt;/span&gt;=&lt;span&gt; maxScore;
                isNewRndItme &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;            
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
        }


        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; move(direction){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取所有非空元素&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; nonEmptyItems = $('.gameBody .row .nonEmptyItem'&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果按下的方向是左或上，则正向遍历非空元素&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(direction == 'left' || direction == 'up'&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; nonEmptyItems.length; i++&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; currentItem =&lt;span&gt; nonEmptyItems.eq(i);
                    itemMove(currentItem, direction);
                }
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(direction == 'right' || direction == 'down') {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果按下的方向是右或下，则反向遍历非空元素&lt;/span&gt;
                &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = nonEmptyItems.length -1; i &amp;gt;= 0; i--&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; currentItem =&lt;span&gt; nonEmptyItems.eq(i);
                    itemMove(currentItem, direction);
                }
            }        

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否产生新元素&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(isNewRndItme) {
                newRndItem();
                refreshColor();
            }
        }


        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; isGameOver(){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取所有元素&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; items = $('.gameBody .row .item'&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取所有非空元素&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; nonEmptyItems = $('.gameBody .row .nonEmptyItem'&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(items.length == nonEmptyItems.length) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;所有元素的个数 == 所有非空元素的个数  即没有空元素&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历所有非空元素&lt;/span&gt;
                &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; nonEmptyItems.length; i++&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; currentItem =&lt;span&gt; nonEmptyItems.eq(i);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(getSideItem(currentItem, 'up').length != 0 &amp;amp;&amp;amp; currentItem.html() == getSideItem(currentItem, 'up'&lt;span&gt;).html()) {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上边元素存在 且 当前元素中的内容等于上边元素中的内容&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(getSideItem(currentItem, 'down').length != 0 &amp;amp;&amp;amp; currentItem.html() == getSideItem(currentItem, 'down'&lt;span&gt;).html()) {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下边元素存在 且 当前元素中的内容等于下边元素中的内容&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(getSideItem(currentItem, 'left').length != 0 &amp;amp;&amp;amp; currentItem.html() == getSideItem(currentItem, 'left'&lt;span&gt;).html()) {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左边元素存在 且 当前元素中的内容等于左边元素中的内容&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(getSideItem(currentItem, 'right').length != 0 &amp;amp;&amp;amp; currentItem.html() == getSideItem(currentItem, 'right'&lt;span&gt;).html()) {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右边元素存在 且 当前元素中的内容等于右边元素中的内容&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                    }
                }            
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
            $(&lt;/span&gt;'#gameOverModal').modal('show'&lt;span&gt;);
        }


        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;游戏初始化&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; gameInit(){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化分数&lt;/span&gt;
            $('#gameScore'&lt;span&gt;).html(gameScore);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;最大分值&lt;/span&gt;
            $('#maxScore'&lt;span&gt;).html(maxScore);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为刷新按钮绑定事件&lt;/span&gt;
            $('.refreshBtn'&lt;span&gt;).click(refreshGame);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;随机生成两个新元素&lt;/span&gt;
&lt;span&gt;            newRndItem();
            newRndItem();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;刷新颜色&lt;/span&gt;
&lt;span&gt;            refreshColor();
        }    

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;随机生成新元素&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; newRndItem(){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;随机生成新数字&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; newRndArr = [2, 2, 4&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; newRndNum = newRndArr[getRandom(0, 2&lt;span&gt;)];
            console.log(&lt;/span&gt;'newRndNum: ' +&lt;span&gt; newRndNum);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;随机生成新数字的位置&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; emptyItems = $('.gameBody .row .emptyItem'&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; newRndSite = getRandom(0, emptyItems.length - 1&lt;span&gt;);
            emptyItems.eq(newRndSite).html(newRndNum).removeClass(&lt;/span&gt;'emptyItem').addClass('nonEmptyItem'&lt;span&gt;);
        }    

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;产生随机数，包括min、max&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; getRandom(min, max){
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; min + Math.floor(Math.random() * (max - min + 1&lt;span&gt;));
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;刷新颜色&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; refreshColor(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; items = $('.gameBody .item'&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; items.length; i++&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; console.log(items.eq(i).parent().index());&lt;/span&gt;
                &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (items.eq(i).html()) {
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; ''&lt;span&gt;: 
                        items.eq(i).css(&lt;/span&gt;'background', ''&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; '2'&lt;span&gt;: 
                        items.eq(i).css(&lt;/span&gt;'background', 'rgb(250, 225, 188)'&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; '4'&lt;span&gt;: 
                        items.eq(i).css(&lt;/span&gt;'background', 'rgb(202, 240, 240)'&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; '8'&lt;span&gt;: 
                        items.eq(i).css(&lt;/span&gt;'background', 'rgb(117, 231, 193)'&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; '16'&lt;span&gt;: 
                        items.eq(i).css(&lt;/span&gt;'background', 'rgb(240, 132, 132)'&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; '32'&lt;span&gt;: 
                        items.eq(i).css(&lt;/span&gt;'background', 'rgb(181, 240, 181)'&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; '64'&lt;span&gt;: 
                        items.eq(i).css(&lt;/span&gt;'background', 'rgb(182, 210, 246)'&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; '128'&lt;span&gt;: 
                        items.eq(i).css(&lt;/span&gt;'background', 'rgb(255, 207, 126)'&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; '256'&lt;span&gt;: 
                        items.eq(i).css(&lt;/span&gt;'background', 'rgb(250, 216, 216)'&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; '512'&lt;span&gt;: 
                        items.eq(i).css(&lt;/span&gt;'background', 'rgb(124, 183, 231)'&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; '1024'&lt;span&gt;: 
                        items.eq(i).css(&lt;/span&gt;'background', 'rgb(225, 219, 215)'&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; '2048'&lt;span&gt;: 
                        items.eq(i).css(&lt;/span&gt;'background', 'rgb(221, 160, 221)'&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; '4096'&lt;span&gt;: 
                        items.eq(i).css(&lt;/span&gt;'background', 'rgb(250, 139, 176)'&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }
            }
        }
    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;八、手机版2048&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;预览：&lt;a href=&quot;http://sandbox.runjs.cn/show/v9tribf5&quot; target=&quot;_blank&quot;&gt;http://sandbox.runjs.cn/show/v9tribf5&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;源码：&lt;a href=&quot;http://runjs.cn/code/v9tribf5&quot; target=&quot;_blank&quot;&gt;http://runjs.cn/code/v9tribf5&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;九、移动端滑动事件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;PC端2048和手机端2048的不同之处就是一些样式和上、下、左、右滑动事件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;移动端的滑动事件如下：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (){
    mobilwmtouch(document.getElementById(&lt;/span&gt;&quot;gameBody&quot;&lt;span&gt;))
    document.getElementById(&lt;/span&gt;&quot;gameBody&quot;).addEventListener('touright',&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e){
        e.preventDefault();
        alert(&lt;/span&gt;&quot;方向向右&quot;&lt;span&gt;);                        
    });
    document.getElementById(&lt;/span&gt;&quot;gameBody&quot;).addEventListener('touleft',&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e){
        alert(&lt;/span&gt;&quot;方向向左&quot;&lt;span&gt;);
    });
    document.getElementById(&lt;/span&gt;&quot;gameBody&quot;).addEventListener('toudown',&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e){
        alert(&lt;/span&gt;&quot;方向向下&quot;&lt;span&gt;);
    });
    document.getElementById(&lt;/span&gt;&quot;gameBody&quot;).addEventListener('touup',&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e){
        alert(&lt;/span&gt;&quot;方向向上&quot;&lt;span&gt;);
    });
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; mobilwmtouch(obj){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; stoux,stouy;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; etoux,etouy;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; xdire,ydire;
        obj.addEventListener(&lt;/span&gt;&quot;touchstart&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e){
            stoux&lt;/span&gt;=e.targetTouches[0&lt;span&gt;].clientX;
            stouy&lt;/span&gt;=e.targetTouches[0&lt;span&gt;].clientY;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(stoux);&lt;/span&gt;
        },&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
        obj.addEventListener(&lt;/span&gt;&quot;touchend&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e){
            etoux&lt;/span&gt;=e.changedTouches[0&lt;span&gt;].clientX;
            etouy&lt;/span&gt;=e.changedTouches[0&lt;span&gt;].clientY;
            xdire&lt;/span&gt;=etoux-&lt;span&gt;stoux;
            ydire&lt;/span&gt;=etouy-&lt;span&gt;stouy;
            chazhi&lt;/span&gt;=Math.abs(xdire)-&lt;span&gt;Math.abs(ydire);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(ydire);&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(xdire&amp;gt;0&amp;amp;&amp;amp;chazhi&amp;gt;0&lt;span&gt;){
                console.log(&lt;/span&gt;&quot;right&quot;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;alert(evenzc('touright',alerts));&lt;/span&gt;
                obj.dispatchEvent(evenzc('touright'&lt;span&gt;));
    
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(ydire&amp;gt;0&amp;amp;&amp;amp;chazhi&amp;lt;0&lt;span&gt;){
                console.log(&lt;/span&gt;&quot;down&quot;&lt;span&gt;);
                obj.dispatchEvent(evenzc(&lt;/span&gt;'toudown'&lt;span&gt;));
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(xdire&amp;lt;0&amp;amp;&amp;amp;chazhi&amp;gt;0&lt;span&gt;){
                console.log(&lt;/span&gt;&quot;left&quot;&lt;span&gt;);
                obj.dispatchEvent(evenzc(&lt;/span&gt;'touleft'&lt;span&gt;));
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(ydire&amp;lt;0&amp;amp;&amp;amp;chazhi&amp;lt;0&lt;span&gt;){
                console.log(&lt;/span&gt;&quot;up&quot;&lt;span&gt;);
                obj.dispatchEvent(evenzc(&lt;/span&gt;'touup'&lt;span&gt;));
            }
        },&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
        
        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; evenzc(eve){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; document.CustomEvent === 'function'&lt;span&gt;) {
                  
                 &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.event = &lt;span&gt;new&lt;/span&gt; document.CustomEvent(eve, {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自定义事件名称&lt;/span&gt;
                 bubbles: &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否冒泡&lt;/span&gt;
                 cancelable: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否可以停止捕获&lt;/span&gt;
&lt;span&gt;                });
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!document[&quot;evetself&quot;+&lt;span&gt;eve]){
                    document[&lt;/span&gt;&quot;evetself&quot;+eve]=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.event;
                }
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; document.createEvent === 'function'&lt;span&gt;) {
                
            
                 &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.event = document.createEvent('HTMLEvents'&lt;span&gt;);
                 &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.event.initEvent(eve, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
                 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!document[&quot;evetself&quot;+&lt;span&gt;eve]){
                    document[&lt;/span&gt;&quot;evetself&quot;+eve]=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.event;
                 }
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
             &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
            
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; document[&quot;evetself&quot;+&lt;span&gt;eve];
            
        }
    }
})()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 08 Feb 2018 04:32:00 +0000</pubDate>
<dc:creator>举个丽子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/-lizi/p/8431030.html</dc:identifier>
</item>
<item>
<title>Optaplanner - 入门介绍 - kentzhang</title>
<link>http://www.cnblogs.com/kentzhang/p/8423405.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kentzhang/p/8423405.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;OptaPlanner背景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　在上一篇里喷了不少水，这一篇准备放点干货；其实也没办法完全干，因为很多预备知道在交待一下。好了，说一下关于OptaPlanner的背景、应用兼容性及其原理。&lt;/p&gt;
&lt;p&gt;　　这一篇先说一下OptaPlanner是何方神圣，再看看它适用于哪种平台（.NET能用吗？老旧系统能用吗？），再从原理上探究一下，它是如何帮我们把一个看上去几乎不可能实现的工作，努力做到比经验丰富的老师傅更好的。下一篇我将会讲解OptaPlanner相关的基本概念,并教大家它的examples(示例)运行起来(这些examples可是好东西喔，并且非常丰富)。&lt;/p&gt;
&lt;p&gt;　　顾名思义，叫什么planner的，它肯定是用来plan东西的东东，就是把一堆东西（数据）扔进去，再教它一些规则(Drools脚本或Java写的算分程序)，然后它就运用它的数学头脑，把这些东东按要求把它初始化好，并努力找到一个相对最优的方案；如果数据不是太多，那它就能找到一个绝对最优方案了，因为它以把所有情况都篇历。例如：你有一堆任务需要确定分配到哪些机台，需要计算每个任务什么时候开始处理(也就是明细的生产计划了)；用OptaPlanner跑完之后，就会给出一个方案，这个方案包含了每个任务应该放在哪个机台，应该在什么时候开始。又例如：在医院等单位进行医护人员排班时，把各个医护人员的专长，每个人员的作息信息，每个科室需要的专业技能等信息放进去，OptaPlanner就能给你找出一个排班方案出来，可以满足各科室对特殊专业人员的需求，也可以满足各人员尽量不超时工作的方案。&lt;/p&gt;
&lt;p&gt;　　那么问题来了，OptaPlanner到底是一个什么鬼东西？它有这么牛？真能这样，我们做排产的老师傅不是要失业了吗？其实不然，它只是按我们设计的规则来找尽量好的方案，而这些规则好不好直接影响到方案的优劣，所以如果OptaPlanner成功应用了，并不是替代了老师傅们，而是把老师傅解放出来，让他们去重新思考并制定更佳的规则，并通过OptaPlanner来验证并实现这些方案。&lt;/p&gt;
&lt;p&gt;　　E文好的同学可以直接进它的官网（&lt;a href=&quot;http://www.optaplanner.org/&quot; target=&quot;_blank&quot;&gt;http://www.optaplanner.org&lt;/a&gt;）, 学成了记得分享呀。先说一下这OptaPlanner的来头，它本来是一个名叫Geoffrey De Smet的大牛自己写的，后来他就把它贡献给了JBoss基金会(这里省去了N年的曲折离奇, N &amp;gt;= 10)，并成为KIE项目组中OptaPlanner项目的负责人。所以OptaPlanner是基于Apache2.0开源协议的，对商业友好，就是说你想用就尽管用，有问题还可以在他们的讨论组上求助。关于这位超级大牛的个信息及OptaPlanner的详情，可从以下链接看到，其实这位大牛给OptaPlanner录制了很多讲解OptaPlanner的视频，只不过它只放在Youtube上，大家要看的自己想办法上去搜OptaPlanner了，提醒一下各位，Gerffrey这牛不是英美或其它以英语为母语国家的人（好像是比利时还是荷兰人），它的口语乡单比较重，听起来挺吃力的，还没字幕。而且讲的都是各个示例和一些比较高级的应用，去看视频之前最好还是打一下基础，要不然基本上看不懂（没基础就算讲中文也听不懂吧？）。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;Geoffrey De Smet&lt;/strong&gt;在GitHub上的主页：&lt;a href=&quot;https://github.com/ge0ffrey&quot; target=&quot;_blank&quot;&gt;https://github.com/ge0ffrey&lt;/a&gt;（还有StackOverflow上也有他老人家不少对OptaPlanner问题的解答，大家可以搜搜）&lt;br/&gt;OptaPlanner的背景介绍：&lt;a href=&quot;http://www.oschina.net/news/75942/a-decade-of-optaplanner&quot; target=&quot;_blank&quot;&gt;http://www.oschina.net/news/75942/a-decade-of-optaplanner&lt;/a&gt; （这是开源中国社区翻译Geoffrey老人家的文章，原著E文版在这：&lt;a href=&quot;http://www.oschina.net/news/75942/a-decade-of-optaplanner&quot; target=&quot;_blank&quot;&gt;http://www.optaplanner.org/blog/2016/08/07/ADecadeOfOptaPlanner.html&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;　　OptaPlanner其实是一个很好的排程引擎（更贴切地说它是一个规划引擎，下面就称规划引擎吧，因为它不光用于排产上），耐何在国内使用的人十分少，所以中文资料几乎没有，国内有几个比较出名的APS产品，不知道其排程核心用的是什么，不过如果是自主开发APS系统的话，OptaPlanner是一个好的引擎，毕竟并不是所有企业都能找到一堆数学专家对组合优化问题进行研究的。而OptaPlanner资料非常丰富，它的项目组还能提供很好的技术支持（免费的仅限于讨论组答疑，付费的就没试过了）,而且使用起来也方便、容易。但目前我观察的情况来看，还只有比较多国外的同行们及相关的技术网站在研究讨论。我也是奉公司之命开发生产排程方面的系统，才硬着头皮去啃它的。又耐何我的体育老师不给力，教的E文也不怎么样，虽然是把基本的东西看懂了，但很多更深层的东西其实还没有完全摸透的(到目前为止我还遇到一个Score Corruption的问题还在研究)。所以有赖大家一起学习之后的分享了。在应用OptaPlanner的过程中，我也遇到一些问题，一开始有些小白问题，后来又遇到一些跟系统实情相关的难题，我也曾经在讨论组上向Geoffrey他老人家请教，老实说，他还是一个比较有耐心，非常nice的人，一点都不嫌我这类小白烦，从原理开始给我讲解出错的原因，应该如何改，这个要猛赞一下。&lt;/p&gt;
&lt;p&gt;　　接下来我就发挥程序狗的看家本领Ctrl + C -&amp;gt; Ctrl + V, 中间还去逛了一次百度翻译（没办法，体育老师呀）.&lt;br/&gt;&lt;span&gt;&lt;em&gt;OptaPlanner是一个约束求解器。它优化了企业资源计划的使用情况，如车辆调度、员工排班、云优化、任务分配、任务调度、Bin Packing等等。每个组织都面临这样的调度难题：分配一组有限的受限资源（员工、资产、时间和金钱）来提供产品或服务。OptaPlanner提供了更有效的计划，提高服务质量并降低成本。OptaPlanner是一个轻量级的、可嵌入的规划引擎。它令普通的java程序员有效地解决优化问题。它还与其他JVM语言兼容（如 Kotlin 与 Scala）。约束适用普通的域对象,可以重用现有代码。没有必要把它们作为数学方程来输入。在引擎盖之下，OptaPlanner结合先进的优化的启发式和共通启发式演算法（如禁忌搜索、模拟退火和延迟接受）,非常高效地进行分数计算。OptaPlanner是开放源代码的软件，Apache软件许可下发布。它是用100%的纯java™，运行在任何JVM在Maven的中央存储库也可用。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　好了按上述的官方描述我们可以大概知道，它就是一个用来解一些规划问题的引擎，而规划问题几乎都可以被视作NPC问题，关于什么是NPC问题呢？这里还喷点水，让大家对NPC问题有个大概的概念，如果不是研究数据的，了解一下就可以了。大家可以看一下这位牛人写的关于NPC问题的文章（&lt;a href=&quot;http://www.matrix67.com/blog/archives/105&quot; target=&quot;_blank&quot;&gt;http://www.matrix67.com/blog/archives/105&lt;/a&gt;），概括来说，就是一些没有办法使用确定性算法来得到结果的问题，而对于这类问题，又分为NP问题和NPC问题，但都只能通过遍历的办法才能找到。对于NP问题和NPC问题，我有以下理解，也不知道对不对，大牛看到不对的帮忙指正一下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　NP问题&lt;/strong&gt;：一种无法通过确定性算法直接获得解，但对获得的解是可验证的，例如：结合上一篇文章提到的生产排程问题，如果老板只要求做出一个可行的生产计划，也就是只需要一个可以执行的生产排程就可以了。成本、效率什么的都不管；那么这就是一个NP问题。因为要做出这个计划，你也是没有直接的、确定的方法或算法来做的；更多的是靠经验、对实际情况的有限掌握、对来情况的预判和感觉。但是做出来的计划是可以验证的。也就是说车间拿着这个计划是真的可能执行的，而不会出现物料不到位、产品分配到了错误的机台上等违反硬约束问题的， 那么只要不违反这些硬性约束，就认为这是一个可行的计划。所以做一个可行计划，可以被视作是NP问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　NPC问题&lt;/strong&gt;：则是那种不旦无法通过确定性算法获得解，对所得的解，也没有一个确定的办法去验证的问题。还是上面的生产排程问题，如果老板要求做一个所有情况下除了可行，还要成本最低、效率最高的计划。那么：1. 计划员也只是靠经验、预判、对数据有有限掌握做出一个计划来，计划是否可行是可能验证的(也就是NP问题)，但这个计划是否成本最低、效率最高，那就没办法验证了，除非你把所有可能的计划都列出来(这个就不是确定性算法了，因为并不是所有情况你都能把所有情况都列出来)。事实上，现实世界遇到的问题，光靠人类，即便通过超级计算机，也是不太可能把所有情况都遍历完的，例如一个计划有1000个任务，就算忽略任务的所有其它考虑因素，就是1000个任务无任务要求，随便自由地排列，也就是1000个数的排列问题了，有多少种情况？是1000的阶乘！（有兴趣的同学自己回顾一下高中的排列公式）再考虑每个任务的各种属性，及每个属性的可能取值范围，那么组合下来，通常是天文数字了。&lt;/p&gt;
&lt;p&gt;　　所以，OptaPlanner在排程领域的作用就是帮人们对问题的可能性进行“遍历”，为什么我把&lt;strong&gt;遍历&lt;/strong&gt;引起来呢？因为如果仅仅是无序地遍历，对所有情况一个一个试，那OptaPlanner就没啥作用了，我们可以通过自己编写程序，就能设计出遍历所有组合情况的代码来（能不能跑完那是另外一回事）。OptaPlanner强大之处在于，他是有方法地去遍历的，它引入了禁忌搜索，模拟退火等算法，力求在固定的时间内，找到比傻傻地遍历更好的组合方案出来。事实上也证明它这些算法是有效的。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;OptaPlanner的作用、构架和应用兼容性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　关于OptaPlanner开源包，大家可以上官网看看，我在这里也只做个大概的介绍，毕竟我也是新手呀。其实OptaPlanner现在已经加入KIE Project Group，作为KIE的一个子项目，关于KIE可以看看Redhat的一个项目群，包括了&lt;a href=&quot;https://www.optaplanner.org/&quot; target=&quot;_blank&quot;&gt;OptaPlanner&lt;/a&gt;（就是本系列文章的主角），&lt;a href=&quot;https://www.drools.org/&quot; target=&quot;_blank&quot;&gt;Drools&lt;/a&gt;(规则引擎，国内已有很多相关的资料，我就不再熬述了，OptaPlanner是需要结合Drools来使用的，所以这个系列的文章里也会有些内容涉及Drools，但不会太深入)，另外一个就是&lt;a href=&quot;https://www.jbpm.org/&quot; target=&quot;_blank&quot;&gt;jBMP&lt;/a&gt;了，是一个流程定制的平台。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　OptaPlanner用官方的描述就是可以帮你规划出一个用更少的资源做更多更好事情的规划引擎。如下图列出它可以做的工作领域（这仅仅是OptaPalnner的Example里有的示例，其实所有关于规则的问题，属于NPC的问题，只要你能把它抽象并建模成OptaPlanner可识别的模型，你就可以用OptaPlanner来解决）：车辆调度、工作排程、设备排程，Bin Packing(就是用袋子装石头那个问题啦)及员工排班。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;构架和应用兼容性&lt;/strong&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/148283/201802/148283-20180208104926951-1332321421.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　那么应用OptaPlanner需要什么条件呢？其实作为一个轻量的、可嵌入的规则引擎，兼容性肯定是人家设计时的考虑重点之一，所以它完全是一个纯Java环境的软件，只要你的系统有Java8以上的运行环境（7.6版本要求的是Java8），遵循 &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0.html&quot;&gt;Apache Software License 2.0&lt;/a&gt;就可以使用了。在我的工作中，我把它运行于Windows, 云端的Unbuntu.凡是一般Java程序能运行的环境，只需你一个jar命令，就可以运行你内嵌了OptaPlanner的程序了。这里有一个官方关于OptaPlanner兼容性的图：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/148283/201802/148283-20180208104936091-1604965072.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　那么有人就问了，现在很多企业用的都是Microsoft平台或其它老旧平台技术（有什么办法呢.NET就是多人才），是不是OptaPlanner与我的项目就无缘了？其实不然，因为OptaPlanner本身是一个引擎，是基于Java技术的，你通过它来实现你自己的规划引擎程序的时候，必然也是需要Java写的。但这个规划程序是一个服务程序，它不像普通的Web程序，需要频繁跟用户交互，事实上它的所有运行过程中涉及的数据都是需要基于内存的，在此过程是不能进行IO的（并不是说OptaPlanner引擎不允许这么做，而是我们设计的时候就不应该这么做），至于为什么，是码农都懂，一个对CPU高度依赖的程序，你还要它去做I/O，是不是有点那个？所以通常情况下，它是一次性把需要规则及数据都装入内存，完成后再输出。基于上述原则我们就可以把写好的规划引擎程序（Java包)放在一台相对独立的服务器上去运行，再以服务的形成为其它客户端系统提供规划服务。那你的客户端系统是用Web还是 C++来写，是你自己的事了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　那么OptaPlanner是通过什么方法，高效地帮我们在尽量短的时间内，找到更佳的方案呢？还记得上一任篇老农提到，我们做排程的时候，通常有两种约束条件，分别是不可违反的硬约束，如果一个计划违反了硬约束，那这个计划就是不可行的，例如：生产计划中，把产品固定工序的加工次序调乱了，又或者把产品分配到错误的机台上生产(这些约束条件都是业务上你们自己定义的)，那么OptaPlanner就把它定义为违反了硬约束。另一类就是软约束，就是那种可以违反，但违反得越多，就会影响越大（影响包括成本、效率、质量等），所得结果方案的质量越差；违反这种约束，OptaPlanner就把它定义为违反了软约束。OptaPlanner就是对这两类约束进行打分，硬约束对应的是硬分数，软约束对应的是软分数。那么得分越高，就表示对应方案的质量越高。在计算这些约束分数的过程中，OptaPlanner会保持优先优化硬分数、然后在硬分数最优的基础上，再去优化软分数的原则，来寻找最佳方案。例如：两个方案A、B对比，方案A的硬分数比方案B的硬分数高1分，方案B的软分数比方案A的软高出10万分。那么OptaPlanner最后还是认为方案A更佳。也就相当于我们写SQL脚本时，order by子句中前后两个字段的关系了，靠前的字段排序比靠后的字段更优先。&lt;/p&gt;
&lt;p&gt;思考题：&lt;/p&gt;
&lt;p&gt;既然硬约束是不能违反的，那OptaPlanner当然要保证找出来的方案绝对是不违反硬约束的，这个大家觉得在所有情况下都成立吗？就是OptaPlanner必然给你找到一个绝对不违反硬约束的方案吗？ - 显示不是，大家自己思考一下。&lt;/p&gt;

&lt;p&gt;这一篇我们先介绍一下OptaPlanner的背景、使用情景和原理。下一篇我们就开始实质的了解它的应用。&lt;/p&gt;

</description>
<pubDate>Thu, 08 Feb 2018 03:56:00 +0000</pubDate>
<dc:creator>kentzhang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kentzhang/p/8423405.html</dc:identifier>
</item>
<item>
<title>CSS3属性详解（图文教程） - 生命壹号</title>
<link>http://www.cnblogs.com/smyhvae/p/8430898.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smyhvae/p/8430898.html</guid>
<description>&lt;blockquote readability=&quot;5.375&quot;&gt;
&lt;p&gt;本文最初发表于&lt;a href=&quot;http://www.cnblogs.com/smyhvae/p/8430898.html&quot;&gt;博客园&lt;/a&gt;，并在&lt;a href=&quot;https://github.com/smyhvae/Web&quot;&gt;GitHub&lt;/a&gt;上持续更新&lt;strong&gt;前端的系列文章&lt;/strong&gt;。欢迎在GitHub上关注我，一起入门和进阶前端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以下是正文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;我们在上一篇文章中学习了&lt;a href=&quot;http://www.cnblogs.com/smyhvae/p/8426799.html&quot;&gt;CSS3的选择器&lt;/a&gt;，本文来学一下CSS3的一些属性。&lt;/p&gt;
&lt;p&gt;本文主要内容：&lt;/p&gt;
&lt;h2 id=&quot;颜色&quot;&gt;颜色&lt;/h2&gt;
&lt;p&gt;CSS3中，有一种新的表示颜色的方式：RGBA或者HSLA。&lt;/p&gt;
&lt;p&gt;RGBA、HSLA可应用于&lt;strong&gt;所有&lt;/strong&gt;使用颜色的地方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RGBA 举例&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    background&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;color&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.3&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    border&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 30px solid &lt;span class=&quot;at&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.3&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解释：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HSLA 举例&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    background&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;color&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;hsla&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;240&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;%,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;%,&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.4&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解释：&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;H&lt;/code&gt; 色调，取值范围 0~360。0或360表示红色、120表示绿色、240表示蓝色。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;S&lt;/code&gt; 饱和度，取值范围 0%~100%。值越大，越鲜艳。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;L&lt;/code&gt; 亮度，取值范围 0%~100%。亮度最大时为白色，最小时为黑色。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;A&lt;/code&gt; 透明度，取值范围 0~1。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果不知道 H 的值该设置多少，我们不妨来看一下&lt;strong&gt;色盘&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_1545.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;推荐链接：&lt;a href=&quot;http://www.uisdc.com/how-to-create-color-palettes&quot;&gt;配色宝典&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于设置透明度的其他方式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）&lt;code&gt;opacity: 0.3;&lt;/code&gt; 会将整个盒子及子盒子设置透明度。也就是说，当盒子设置半透明的时候，会影响里面的子盒子。&lt;/p&gt;
&lt;p&gt;（2）&lt;code&gt;background: transparent;&lt;/code&gt; 可以单独设置透明度，但设置的是完全透明（不可调节透明度）。&lt;/p&gt;
&lt;h2 id=&quot;文本&quot;&gt;文本&lt;/h2&gt;
&lt;h3 id=&quot;text-shadow设置文本的阴影&quot;&gt;text-shadow：设置文本的阴影&lt;/h3&gt;
&lt;p&gt;格式举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    text&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;shadow&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 20px 27px 22px pink&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数解释：水平位移 垂直位移 模糊程度 阴影颜色。&lt;/p&gt;
&lt;p&gt;效果举例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_1600.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;举例凹凸文字效果&quot;&gt;举例：凹凸文字效果&lt;/h3&gt;
&lt;p&gt;text-shadow 可以设置多个阴影，每个阴影之间使用逗号隔开。我们来看个例子。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        body &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#666&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        div &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-size:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-align:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-weight:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-family:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Microsoft Yahei&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#666&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/* text-shadow 可以设置多个阴影，每个阴影之间使用逗号隔开*/&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.tu&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-shadow:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;-1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;-1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.ao&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-shadow:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;-1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;-1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ao&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;生命壹号&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;tu&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;生命壹号&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_1617.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中，实现凹凸文字效果的方式比较简单，给左上角放白色的阴影，右下角放黑色的阴影，就达到了凹下去的效果。&lt;/p&gt;
&lt;h2 id=&quot;盒模型中的-box-sizing-属性&quot;&gt;盒模型中的 box-sizing 属性&lt;/h2&gt;
&lt;p&gt;我们在&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/smyhvae/p/7256371.html&quot;&gt;之前的文章&lt;/a&gt;&lt;/strong&gt;中专门讲过盒子模型。&lt;/p&gt;
&lt;p&gt;CSS3 对盒模型做出了新的定义，即允许开发人员&lt;strong&gt;指定盒子宽度和高度的计算方式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这就需要用到 &lt;code&gt;box-sizing&lt;/code&gt;属性。它的属性值可以是：&lt;code&gt;content-box&lt;/code&gt;、&lt;code&gt;border-box&lt;/code&gt;。解释如下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;外加模式：&lt;/strong&gt;（css的默认方式）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    box&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;sizing&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; content&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;box&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解释：此时设置的 width 和 height 是&lt;strong&gt;内容区域&lt;/strong&gt;的宽高。&lt;code&gt;盒子的实际宽度 = 设置的 width + padding + border&lt;/code&gt;。此时改变 padding 和 border 的大小，也不会改变内容的宽高，而是盒子的总宽高发生变化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内减模式：&lt;/strong&gt;【需要注意】&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    box&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;sizing&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; border&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;box&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解释：此时设置的 width 和 height 是&lt;strong&gt;盒子&lt;/strong&gt;的总宽高。&lt;code&gt;盒子的实际宽度 = 设置的 width&lt;/code&gt;。此时改变 padding 和 border 的大小，会改变内容的宽高，盒子的总宽高不变。&lt;/p&gt;
&lt;h2 id=&quot;处理兼容性问题私有前缀&quot;&gt;处理兼容性问题：私有前缀&lt;/h2&gt;
&lt;p&gt;通过网址&lt;a href=&quot;http://caniuse.com/&quot; class=&quot;uri&quot;&gt;http://caniuse.com/&lt;/a&gt; 可以查询CSS3各特性的支持程度。&lt;/p&gt;
&lt;p&gt;处理兼容性问题的常见方法：为属性添加&lt;strong&gt;私有前缀&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如此方法不能解决，应尽量避免使用，无需刻意去处理CSS3的兼容性问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;私有前缀的举例&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;比如说，我想给指定的div设置下面这样一个属性：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;    background&lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; linear-gradient(left, green, yellow);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这个属性的作用是：添加从左到右的线性渐变，颜色从绿色变为黄色。&lt;/p&gt;
&lt;p&gt;如果直接这样写属性，是看不到效果的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_1700.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时，我们可以&lt;strong&gt;为浏览器添加不同的私有前缀&lt;/strong&gt;，属性就可以生效了。&lt;/p&gt;
&lt;p&gt;格式如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;    -webkit-: 谷歌 苹果
    -moz-:火狐
    -ms-：IE
    -o-：欧朋&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;格式举例如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;    background&lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; -webkit-linear-gradient(left, green, yellow);
    background&lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; -moz-linear-gradient(left, green, yellow);
    background&lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; -ms-linear-gradient(left, green, yellow);
    background&lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; -o-linear-gradient(left, green, yellow);
    background&lt;span class=&quot;dv&quot;&gt;:&lt;/span&gt; linear-gradient(left, green, yellow);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_1710.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;边框&quot;&gt;边框&lt;/h2&gt;
&lt;p&gt;边框的属性很多，其中&lt;strong&gt;边框圆角&lt;/strong&gt;和&lt;strong&gt;边框阴影&lt;/strong&gt;这两个属性，应用十分广泛，兼容性也相对较好，且符合&lt;strong&gt;渐进增强&lt;/strong&gt;的原则，需要重点熟悉。&lt;/p&gt;
&lt;h3 id=&quot;边框圆角border-radius-属性&quot;&gt;边框圆角：&lt;code&gt;border-radius&lt;/code&gt; 属性&lt;/h3&gt;
&lt;p&gt;边框的每个圆角，本质上是一个圆，圆有&lt;strong&gt;水平半径&lt;/strong&gt;和&lt;strong&gt;垂直半径&lt;/strong&gt;：如果二者相等，就是圆；如果二者不等， 就是椭圆。&lt;/p&gt;
&lt;p&gt;单个属性的写法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    border-top-left-radius: 60px 120px;        //参数解释：水平半径   垂直半径

    border-top-right-radius: 60px 120px;

    border-bottom-left-radius: 60px 120px;

    border-bottom-right-radius: 60px 120px;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;复合写法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    border-radius: 60px/120px;             //参数：水平半径/垂直半径

    border-radius: 20px 60px 100px 140px;  //从左上开始，顺时针赋值。如果当前角没有值，取对角的值

    border-radius: 20px 60px;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最简洁的写法：（四个角的半径都相同时）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    border-radius: 60px;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.parent&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;float:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;rgb(144&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;63)&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-align:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;line-height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-size:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;rgb(255&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;141&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;26)&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*画圆形的方式一*/&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(1) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border-radius:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*画圆形的方式二*/&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(2) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border-radius:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(3) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border-radius:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(4) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border-radius:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;/&lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(5) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border-radius:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(6) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border-radius:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;parent&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;4&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;5&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;6&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_1750.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;边框阴影box-shadow-属性&quot;&gt;边框阴影：&lt;code&gt;box-shadow&lt;/code&gt; 属性&lt;/h3&gt;
&lt;p&gt;格式举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    box&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;shadow&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 水平偏移 垂直偏移 模糊程度 阴影大小 阴影颜色

    box&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;shadow&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 15px 21px 48px &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;2px #&lt;span class=&quot;dv&quot;&gt;666&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数解释：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;水平偏移：正值向右 负值向左。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;垂直偏移：正值向下 负值向上。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;模糊程度：不能为负值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_2027.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;另外，后面还可以再加一个inset属性，表示内阴影。如果不写，则默认表示外阴影。例如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    box&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;shadow&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;3px 3px 3px 3px #&lt;span class=&quot;dv&quot;&gt;666&lt;/span&gt; inset&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;20180207_2028.png&lt;br/&gt;&lt;img src=&quot;http://img.smyhvae.com/20180206_2150.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：设置边框阴影不会改变盒子的大小，即不会影响其兄弟元素的布局。&lt;/p&gt;
&lt;p&gt;我们还可以设置多重边框阴影，实现更好的效果，增强立体感。&lt;/p&gt;
&lt;h3 id=&quot;边框图片&quot;&gt;边框图片&lt;/h3&gt;
&lt;p&gt;边框图片有以下属性：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/* 边框图片的路径*/&lt;/span&gt;
    border&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;image&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;source&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;images/border.png&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/* 图片边框的裁剪*/&lt;/span&gt;
    border&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;image&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;slice&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/*图片边框的宽度*/&lt;/span&gt;
    border&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;image&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;width&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 27px&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/*边框图片的平铺*/&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/* repeat :正常平铺 但是可能会显示不完整*/&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/*round: 平铺 但是保证 图片完整*/&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/*stretch: 拉伸显示*/&lt;/span&gt;
    border&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;image&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;repeat&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; stretch&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们也可以写成一个综合属性：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;     border&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;image&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;images/border.png&quot;&lt;/span&gt;) &lt;span class=&quot;dv&quot;&gt;27&lt;/span&gt;/20px round&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个属性要好好理解，我们假设拿下面这张图来作为边框图片：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_2045.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_2046.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这张图片将会被“切割”成&lt;strong&gt;九宫格&lt;/strong&gt;形式，然后进行平铺。四个角位置、形状保持不变，中心位置和水平垂直向两个方向平铺：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_2050.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再具体一点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_2051.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景属性&quot;&gt;背景属性&lt;/h2&gt;
&lt;p&gt;背景属性在 CSS3 中也得到很大程度的增强，比如背景图片尺寸、背景裁切区域、背景定位参照点、多重背景等。&lt;/p&gt;
&lt;h3 id=&quot;背景尺寸background-size属性&quot;&gt;背景尺寸：&lt;code&gt;background-size&lt;/code&gt;属性&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;background-size&lt;/code&gt;属性：设置背景图片的尺寸。&lt;/p&gt;
&lt;p&gt;格式举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/* 宽、高的具体数值 */&lt;/span&gt;
    background&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;size&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 500px 500px&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/* 宽高的百分比 */&lt;/span&gt;
    background&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;size&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;%;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// 如果两个属性值相同，可以简写成：background-size: 50%;&lt;/span&gt;

    background&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;size&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; auto&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//这个属性可以自己试验一下。&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/* cover：会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。 */&lt;/span&gt;
    background&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;size&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; cover&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/* contain：会自动调整缩放比例，保证图片始终完整显示在背景区域。  */&lt;/span&gt;
    background&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;size&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; contain&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里我们对属性值 &lt;code&gt;cover&lt;/code&gt; 和 &lt;code&gt;contain&lt;/code&gt;进行再次强调：&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;cover&lt;/code&gt;：会自动调整缩放比例，保证图片始终&lt;strong&gt;填充满&lt;/strong&gt;背景区域，如有&lt;strong&gt;溢出部分&lt;/strong&gt;则会被隐藏。也就是说，保证背景图片完全覆盖盒子，但不能保证完整显示。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;contain&lt;/code&gt;：会自动调整缩放比例，保证图片始终&lt;strong&gt;完整显示&lt;/strong&gt;在背景区域。也就是说，保证背景图片最大化地在盒子里，&lt;strong&gt;等比例&lt;/strong&gt;显示，但不保证能铺满盒子。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;背景原点background-origin-属性&quot;&gt;背景原点：&lt;code&gt;background-origin&lt;/code&gt; 属性&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;background-origin&lt;/code&gt; 属性：控制背景从什么地方开始显示。&lt;/p&gt;
&lt;p&gt;格式举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
    &lt;span class=&quot;co&quot;&gt;/* 从 padding-box 内边距开始显示背景图 */&lt;/span&gt;
    background&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;origin&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; padding&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;box&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;co&quot;&gt;//默认值&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/* 从 border-box 边框开始显示背景图  */&lt;/span&gt;
    background&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;origin&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; border&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;box&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/* 从 content-box 内容区域开始显示背景图  */&lt;/span&gt;
    background&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;origin&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; content&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;box&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果属性值设置成了&lt;code&gt;border-box&lt;/code&gt;，那边框部分也会显示图片哦。&lt;/p&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_2115.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;背景裁剪background-clip属性&quot;&gt;背景裁剪：&lt;code&gt;background-clip&lt;/code&gt;属性&lt;/h3&gt;
&lt;p&gt;格式举例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;background-clip: content-box;&lt;/code&gt; 超出的部分，将裁剪掉。属性值可以是：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;border-box&lt;/code&gt; 超出 border-box 的部分，将裁剪掉&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;padding-box&lt;/code&gt; 超出 padding-box 的部分，将裁剪掉&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;content-box&lt;/code&gt; 超出 content-box 的部分，将裁剪掉&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;假设现在有这样的属性设置：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    background&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;origin&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; border&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;box&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    background&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;clip&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; content&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;box&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方代码的意思是，背景图片从&lt;strong&gt;边框部分&lt;/strong&gt;开始加载，但是呢，超出&lt;strong&gt;内容区域&lt;/strong&gt;的部分将被裁减掉。&lt;/p&gt;
&lt;h3 id=&quot;同时设置多个背景&quot;&gt;同时设置多个背景&lt;/h3&gt;
&lt;p&gt;我们可以给一个盒子同时设置多个背景，用以逗号隔开即可。可用于自适应局。&lt;/p&gt;
&lt;p&gt;代码举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;416px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/* 给盒子加多个背景，按照背景语法格式书写，多个背景使用逗号隔开 */&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;url(&lt;/span&gt;images/bg1&lt;span class=&quot;dt&quot;&gt;.&lt;/span&gt;png&lt;span class=&quot;dt&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;top&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;url(&lt;/span&gt;images/bg2&lt;span class=&quot;dt&quot;&gt;.&lt;/span&gt;png&lt;span class=&quot;dt&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;top&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;url(&lt;/span&gt;images/bg3&lt;span class=&quot;dt&quot;&gt;.&lt;/span&gt;png&lt;span class=&quot;dt&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;bottom&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;url(&lt;/span&gt;images/bg4&lt;span class=&quot;dt&quot;&gt;.&lt;/span&gt;png&lt;span class=&quot;dt&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;bottom&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;url(&lt;/span&gt;images/bg5&lt;span class=&quot;dt&quot;&gt;.&lt;/span&gt;png&lt;span class=&quot;dt&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实现效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_2140.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上方代码中，我们其实给盒子设置了五张小图，拼成的一张大图。当改变浏览器窗口大小时，可以自适应布局。&lt;/p&gt;
&lt;h2 id=&quot;渐变&quot;&gt;渐变&lt;/h2&gt;
&lt;p&gt;渐变是CSS3当中比较丰富多彩的一个特性，通过渐变我们可以实现许多炫丽的效果，有效的减少图片的使用数量，并且具有很强的适应性和可扩展性。&lt;/p&gt;
&lt;p&gt;渐变分为：&lt;/p&gt;
&lt;p&gt;见下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_1140.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意，渐变属于背景图片属性&lt;code&gt;background-image&lt;/code&gt;的属性值。我们依次来看一下。&lt;/p&gt;
&lt;h3 id=&quot;线性渐变&quot;&gt;线性渐变&lt;/h3&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
    background&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;image&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; linear&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;gradient&lt;/span&gt;(方向&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; 起始颜色&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; 终止颜色)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    background&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;image&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; linear&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;gradient&lt;/span&gt;(to right&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; yellow&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; green)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数解释：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;方向可以是：&lt;code&gt;to left&lt;/code&gt;、&lt;code&gt;to right&lt;/code&gt;、&lt;code&gt;to top&lt;/code&gt;、&lt;code&gt;to bottom&lt;/code&gt;、角度&lt;code&gt;30deg&lt;/code&gt;（指的是顺时针方向30°）。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;格式举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        div &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/* 语法：&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            linear-gradient(方向，起始颜色，终止颜色);&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            方向：to left   to right  to top   to bottom 　角度　30deg&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            起始颜色&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            终止颜色&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        */&lt;/span&gt;
        div&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(1) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-image:&lt;/span&gt; linear-gradient(to &lt;span class=&quot;dt&quot;&gt;right&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;yellow&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/* 不写方向，表示默认的方向是：从上往下 */&lt;/span&gt;
        div&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(2) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-image:&lt;/span&gt; linear-gradient(&lt;span class=&quot;dt&quot;&gt;yellow&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/* 方向可以指定角度 */&lt;/span&gt;
        div&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(3) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-image:&lt;/span&gt; linear-gradient(&lt;span class=&quot;dt&quot;&gt;135deg&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;yellow&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/* 0%的位置开始出现黄色，40%的位置开始出现红色的过度。70%的位置开始出现绿色的过度，100%的位置开始出现蓝色 */&lt;/span&gt;
        div&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(4) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-image:&lt;/span&gt; linear-gradient(to &lt;span class=&quot;dt&quot;&gt;right&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;yellow&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;40%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;70%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/* 颜色之间，出现突变 */&lt;/span&gt;
        div&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(5) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-image:&lt;/span&gt; linear-gradient(&lt;span class=&quot;dt&quot;&gt;45deg&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;yellow&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;yellow&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;25%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;25%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;75%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;75%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;
            )&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        div&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(6) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-image:&lt;/span&gt; linear-gradient(to &lt;span class=&quot;dt&quot;&gt;right&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;25%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;25%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;75%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;75%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;
            )&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_2222.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;举例&lt;/strong&gt;：按钮&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;CSS3 渐变&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        html, body &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        body &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#f8fcd4&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.nav&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;800px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-align:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*设置按钮基本样式*/&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.nav&lt;/span&gt; a &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-align:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;line-height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-size:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;14px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-decoration:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#e59500&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#FFB700&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-image:&lt;/span&gt; linear-gradient(
                    to &lt;span class=&quot;dt&quot;&gt;bottom&lt;/span&gt;,
                    &lt;span class=&quot;dt&quot;&gt;#FFB700&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0%&lt;/span&gt;,
                    &lt;span class=&quot;dt&quot;&gt;#FF8C00&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;
            )&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;nav&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;javascript:;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;导航1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;javascript:;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;导航2&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;javascript:;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;导航3&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;javascript:;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;导航4&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;javascript:;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;导航5&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;javascript:;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;导航6&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_2301.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;径向渐变&quot;&gt;径向渐变&lt;/h3&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    background-image: radial-gradient(辐射的半径大小, 中心的位置, 起始颜色, 终止颜色);

    background-image: radial-gradient(100px at center,yellow ,green);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;解释：围绕中心点做渐变，半径是150px，从黄色到绿色做渐变。&lt;/p&gt;
&lt;p&gt;中心点的位置可以是：at left right center bottom top。如果以像素为单位，则中心点参照的是盒子的左上角。&lt;/p&gt;
&lt;p&gt;当然，还有其他的各种参数。格式举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        div &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;250px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;250px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;float:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            径向渐变：&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            radial-gradient（辐射的半径大小, 中心的位置，起始颜色，终止颜色）;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            中心点位置：at  left  right  center bottom  top&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        */&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*辐射半径为100px，中心点在中间*/&lt;/span&gt;
        div&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(1) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-image:&lt;/span&gt; radial-gradient(&lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; at &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;yellow&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*中心点在左上角*/&lt;/span&gt;
        div&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(3) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-image:&lt;/span&gt; radial-gradient(at &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;top&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;yellow&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        div&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(2) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-image:&lt;/span&gt; radial-gradient(at &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;yellow&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*设置不同的颜色渐变*/&lt;/span&gt;
        div&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(4) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-image:&lt;/span&gt; radial-gradient(&lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; at &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;yellow&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;60%&lt;/span&gt;,
            &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*如果辐射半径的宽高不同，那就是椭圆*/&lt;/span&gt;
        div&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(5) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-image:&lt;/span&gt; radial-gradient(&lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt; at &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;yellow&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180207_2256.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;举例：&lt;/strong&gt;利用径向渐变和边框圆角的属性，生成按钮。代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;CSS3 渐变&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;

        div&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(1) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;40px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border-radius:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; yellowgreen&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        div&lt;span class=&quot;dv&quot;&gt;:nth-child&lt;/span&gt;(2) &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;40px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border-radius:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; yellowgreen&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-image:&lt;/span&gt; radial-gradient(
                    &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt; at &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;,
                    &lt;span class=&quot;dt&quot;&gt;rgba(0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0)&lt;/span&gt;,
                    &lt;span class=&quot;dt&quot;&gt;rgba(0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;0.5)&lt;/span&gt;
            )&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180208_1133.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中，给第二个div设置的透明度是从0到0.5。如果设置的透明度是从0到0，则样式无变化，和第一个div一样。如果设置的透明度是从1到1，则盒子是全黑的。&lt;/p&gt;
&lt;p&gt;CSS3的更多属性，且听下文继续。&lt;/p&gt;
&lt;h2 id=&quot;我的公众号&quot;&gt;我的公众号&lt;/h2&gt;
&lt;p&gt;想学习&lt;span&gt;&lt;strong&gt;代码之外的软技能&lt;/strong&gt;&lt;/span&gt;？不妨关注我的微信公众号：&lt;strong&gt;生命团队&lt;/strong&gt;（id：&lt;code&gt;vitateam&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;扫一扫，你将发现另一个全新的世界，而这将是一场美丽的意外：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/2016040102.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 08 Feb 2018 03:48:00 +0000</pubDate>
<dc:creator>生命壹号</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smyhvae/p/8430898.html</dc:identifier>
</item>
</channel>
</rss>