<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>关于python的一些小的知识点-2 - 追求98</title>
<link>http://www.cnblogs.com/zhiguo98/p/9783123.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhiguo98/p/9783123.html</guid>
<description>&lt;p&gt;距离上一次写文章已经好多天了，今天，我还是继续说说我学习python的一些小的知识点&lt;/p&gt;
&lt;p&gt;python列表采用的是自动的内存管理模式&lt;/p&gt;
&lt;p&gt;注意list.clear()和del(list)区别&lt;/p&gt;
&lt;p&gt;range()在python中返回的是一个列表  在python中返回的是一个可迭代对象&lt;/p&gt;
&lt;p&gt;列表中包含的元素值的引用&lt;/p&gt;
&lt;p&gt;删去列表中重复数的方法为set()&lt;/p&gt;
&lt;p&gt;切片可以原地修改列表中的值&lt;/p&gt;
&lt;p&gt;切片返回的是里热表的浅复制&lt;/p&gt;
&lt;p&gt;enumerate函数对字符串和字典同样有效&lt;/p&gt;
&lt;p&gt;列表推导式可以解决很多的小问题 像过滤元素，求100以内的素数&lt;/p&gt;
&lt;p&gt;使用生成器的元素时，要转化为列表和元组，也可使用next()方法和__next__()方法，并且当所有元素访问结束后，如果需要重新访问其中元素，必须重新建立新的列表推导式&lt;/p&gt;
&lt;p&gt;可以用dict(zip(key,value))来生成字典&lt;/p&gt;
&lt;p&gt;可以利用get()来获得‘键‘对应的值&lt;/p&gt;
&lt;p&gt;可以直接为字典添加元素  也可以利用update()为字典添加多个元素&lt;/p&gt;
&lt;p&gt;一定要注意字典中pop()和popitem的不同点&lt;/p&gt;
&lt;p&gt;集合和字典是无序的&lt;/p&gt;
&lt;p&gt;集合的增加用add()删除用del()    clear()  pop()  remove()&lt;/p&gt;
&lt;p&gt;利用sort()函数对列表进行排序的返回值为None&lt;/p&gt;
&lt;p&gt;列表元组字符串等序列对象和range()对象均支双向索引&lt;/p&gt;

</description>
<pubDate>Sat, 13 Oct 2018 07:47:00 +0000</pubDate>
<dc:creator>追求98</dc:creator>
<og:description>距离上一次写文章已经好多天了，今天，我还是继续说说我学习python的一些小的知识点 python列表采用的是自动的内存管理模式 注意list.clear()和del(list)区别 range()在</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhiguo98/p/9783123.html</dc:identifier>
</item>
<item>
<title>python模块之urllib.request基础使用 - -零</title>
<link>http://www.cnblogs.com/-wenli/p/9783117.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/-wenli/p/9783117.html</guid>
<description>&lt;h3&gt;&lt;span&gt;urllib模块简介&lt;/span&gt;：&lt;/h3&gt;
&lt;p&gt;urllib提供了一系列用于操作URL的功能。包含urllib.request,urllib.error,urllib.parse,urllib.robotparser四个子模块&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;urllib.request打开和浏览url中内容&lt;/li&gt;
&lt;li&gt;urllib.error包含从 urllib.request发生的错误或异常&lt;/li&gt;
&lt;li&gt;urllib.parse解析url&lt;/li&gt;
&lt;li&gt;urllib.robotparser解析 robots.txt文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;urllib.request.urlopen()格式&lt;/span&gt;：&lt;br/&gt;urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)&lt;/p&gt;

&lt;p&gt;&lt;span&gt;urllib模块介绍&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;urlopen函数参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; url: 需要打开的网址&lt;/li&gt;
&lt;li&gt; data：Post提交的数据&lt;/li&gt;
&lt;li&gt; timeout：设置网站的访问超时时间&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;urlopen返回对象提供方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; read() , readline() ,readlines() , fileno() , close() ：对HTTPResponse类型数据进行操作&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;  info()：返回HTTPMessage对象，表示远程服务器返回的头信息&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;  getcode()：返回Http状态码。如果是http请求，200请求成功完成 ; 404网址未找到&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;  geturl()：返回请求的url&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;urlopen返回对象提供的属性：&lt;/p&gt;
&lt;p&gt;- status：返回Http状态码。如果是http请求，200请求成功完成 ; 404网址未找到&lt;/p&gt;
&lt;p&gt;- reason：返回数字，比如200&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;url参数的使用&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;get请求&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;例如对百度的一个URL &lt;code&gt;https://www.baidu.com/&lt;/code&gt;进行抓取：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#ｄｅｍｏｅ５.py
&lt;/pre&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
from urllib import request&lt;br/&gt;url = 'https://www.baidu.com/' 
f = request.urlopen(url)
data = f.read()
print('Status:', f.status, f.reason)
print('Data:', data)&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行程序可以得到如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
C:\Pycham\venv\Scripts\python.exe C:/Pycham/ｄｅｍｏｅ５.py
Status: 200 OK
Data: b'&amp;lt;html&amp;gt;\r\n&amp;lt;head&amp;gt;\r\n\t&amp;lt;script&amp;gt;\r\n\t\tlocation.replace(location.href.replace(&quot;https://&quot;,&quot;http://&quot;));\r\n\t&amp;lt;/script&amp;gt;\r\n&amp;lt;/head&amp;gt;\r\n&amp;lt;body&amp;gt;\r\n\t&amp;lt;noscript&amp;gt;&amp;lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://www.baidu.com/&quot;&amp;gt;&amp;lt;/noscript&amp;gt;\r\n&amp;lt;/body&amp;gt;\r\n&amp;lt;/html&amp;gt;'

Process finished with exit code 0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Data的数据格式为bytes类型，需要decode（）解码，转换成str类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们将最后一句代码改为&lt;/p&gt;
&lt;p&gt;print(&lt;span class=&quot;hljs-string&quot;&gt;'Data:', data.decode(&lt;span class=&quot;hljs-string&quot;&gt;'utf-8'))&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#ｄｅｍｏｅ５.py
&lt;/pre&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
from urllib import request
url = 'https://www.baidu.com/'
f = request.urlopen(url)
data = f.read()
print('Status:', f.status, f.reason)
print('Data:', data.decode('utf-8'))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行程序可以得到如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
C:\Pycham\venv\Scripts\python.exe C:/Pycham/ｄｅｍｏｅ５.py
Status: 200 OK
Data: &amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
        &amp;lt;script&amp;gt;
                location.replace(location.href.replace(&quot;https://&quot;,&quot;http://&quot;));
        &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
        &amp;lt;noscript&amp;gt;&amp;lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://www.baidu.com/&quot;&amp;gt;&amp;lt;/noscript&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

Process finished with exit code 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样得到的内容就可以与网页编码内容一样了&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;data参数的使用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;post请求&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;urlopen（）的data参数默认为None，当data参数不为空的时候，urlopen（）提交方式为Post&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Post的数据必须是bytes或者iterable of bytes，不能是str，如果是str需要进行encode（）编码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后作为&lt;code&gt;data&lt;/code&gt;参数传递给Request对象。编码是使用一个&lt;a href=&quot;https://docs.python.org/3.5/library/urllib.parse.html#module-urllib.parse&quot;&gt;urllib.parse库&lt;/a&gt;中的函数完成的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import urllib.parse
import urllib.request

url = 'http://www.someserver.com/cgi-bin/register.cgi'
values = {'name' : 'Michael Foord',
          'location' : 'Northampton',
          'language' : 'Python' }

data = urllib.parse.urlencode(values)
data = data.encode('ascii') # data should be bytes
req = urllib.request.Request(url, data)
with urllib.request.urlopen(req) as response:
   the_page = response.read()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果不传递&lt;code&gt;data&lt;/code&gt;参数，那urllib就会使用GET请求方式。GET方式和POST方式的其中一个区别在于POST请求经常有副作用：它们会以某种方式改变系统的状态(比如，在网上下订单，会有一英担的午餐肉罐头送到你家门口)。尽管HTTP标准明确说POST方式&lt;em&gt;总是&lt;/em&gt;会造成副作用，而GET方式&lt;em&gt;从来不会&lt;/em&gt;，但是并没有保证措施。数据也可以用GET方式传递，只要把它编码在url中。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;timeout参数的使用&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;在某些网络情况不好或者服务器端异常的情况会出现请求慢的情况，或者请求异常，所以这个时候我们需要给&lt;br/&gt;请求设置一个超时时间，而不是让程序一直在等待结果。例子如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#ｄｅｍｏｅ５.py
from urllib import request

url = 'https://www.baidu.com/' 
f = request.urlopen(url,timeout=0.1)
data = f.read()
print('Status:', f.status, f.reason)
print('Data:', data)
&lt;/pre&gt;&lt;/div&gt;



&lt;h3&gt;&lt;span&gt;使用Request包装请求&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;有很多网站为了防止程序爬虫爬网站造成网站瘫痪或者会给不同的浏览器发送不同的版本，会需要携带一些headers头部信息才能访问，最长见的有user-agent参数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;格式：&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;code class=&quot;descclassname&quot;&gt;urllib.request.&lt;/code&gt;&lt;code class=&quot;descname&quot;&gt;Request&lt;/code&gt;&lt;span class=&quot;sig-paren&quot;&gt;(url, data=None, headers={}, method=None&lt;span class=&quot;sig-paren&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;使用request（）来包装请求，再通过urlopen（）获取页面&lt;/p&gt;
&lt;p&gt;用来包装头部的数据：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;        User-Agent ：这个头部可以携带如下几条信息：浏览器名和版本号、操作系统名和版本号、默认语言&lt;/li&gt;
&lt;li&gt;        Referer：可以用来防止盗链，有一些网站图片显示来源http://***.com，就是检查Referer来鉴定的&lt;/li&gt;
&lt;li&gt;       Connection：表示连接状态，记录Session的状态。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;第一种方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import urllib.request

url = &quot;https://www.baidu.com/&quot;
#创建Request对象
request = urllib.request.Request(url)
#添加http的header
request.add_header('User-Agent','Mozilla/5.0 (compatible; MSIE 5.5; Windows NT)')
#发送请求获取结果
response2 = urllib.request.urlopen(request)
data =response2.read()
print(response2.status,response2.reason)       #打印请求的状态码
print(len(data))                               #输出网页字符串的长度
print(data.decode())                           #输出网页内容
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
C:\Pycham\venv\Scripts\python.exe C:/Pycham/ｄｅｍｏｅ５.py
200 OK
227
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
        &amp;lt;script&amp;gt;
                location.replace(location.href.replace(&quot;https://&quot;,&quot;http://&quot;));
        &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
        &amp;lt;noscript&amp;gt;&amp;lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://www.baidu.com/&quot;&amp;gt;&amp;lt;/noscript&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

Process finished with exit code 0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第二种方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import urllib.request
url= 'https://www.baidu.com/'
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '
                  'Chrome/45.0.2454.85 Safari/537.36 115Browser/6.0.3',
    'Referer': 'https://www.baidu.com/',
    'Connection': 'keep-alive'
}
request = urllib.request.Request(url, headers=headers)
response = urllib.request.urlopen(request).read()
data = response.decode('utf-8')
print(data)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;154&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&amp;lt;/script&amp;gt;

&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;var Cookie={set:function(e,t,o,i,s,n){document.cookie=e+&quot;=&quot;+(n?t:escape(t))+(s?&quot;; expires=&quot;+s.toGMTString():&quot;&quot;)+(i?&quot;; path=&quot;+i:&quot;; path=/&quot;)+(o?&quot;; domain=&quot;+o:&quot;&quot;)},get:function(e,t){var o=document.cookie.match(new RegExp(&quot;(^| )&quot;+e+&quot;=([^;]*)(;|$)&quot;));return null!=o?unescape(o[2]):t},clear:function(e,t,o){this.get(e)&amp;amp;&amp;amp;(document.cookie=e+&quot;=&quot;+(t?&quot;; path=&quot;+t:&quot;; path=/&quot;)+(o?&quot;; domain=&quot;+o:&quot;&quot;)+&quot;;expires=Fri, 02-Jan-1970 00:00:00 GMT&quot;)}};!function(){function save(e){var t=[];for(tmpName in options)options.hasOwnProperty(tmpName)&amp;amp;&amp;amp;&quot;duRobotState&quot;!==tmpName&amp;amp;&amp;amp;t.push('&quot;'+tmpName+'&quot;:&quot;'+options[tmpName]+'&quot;');
var o=&quot;{&quot;+t.join(&quot;,&quot;)+&quot;}&quot;;bds.comm.personalData?$.ajax({url:&quot;//www.baidu.com/ups/submit/addtips/?product=ps&amp;amp;tips=&quot;+encodeURIComponent(o)+&quot;&amp;amp;_r=&quot;+(new Date).getTime(),success:function(){writeCookie(),&quot;function&quot;==typeof e&amp;amp;&amp;amp;e()}}):(writeCookie(),&quot;function&quot;==typeof e&amp;amp;&amp;amp;setTimeout(e,0))}function set(e,t){options[e]=t}function get(e){return options[e]}function writeCookie(){if(options.hasOwnProperty(&quot;sugSet&quot;)){var e=&quot;0&quot;==options.sugSet?&quot;0&quot;:&quot;3&quot;;clearCookie(&quot;sug&quot;),Cookie.set(&quot;sug&quot;,e,document.domain,&quot;/&quot;,expire30y)
}if(options.hasOwnProperty(&quot;sugStoreSet&quot;)){var e=0==options.sugStoreSet?&quot;0&quot;:&quot;1&quot;;clearCookie(&quot;sugstore&quot;),Cookie.set(&quot;sugstore&quot;,e,document.domain,&quot;/&quot;,expire30y)}if(options.hasOwnProperty(&quot;isSwitch&quot;)){var t={0:&quot;2&quot;,1:&quot;0&quot;,2:&quot;1&quot;},e=t[options.isSwitch];clearCookie(&quot;ORIGIN&quot;),Cookie.set(&quot;ORIGIN&quot;,e,document.domain,&quot;/&quot;,expire30y)}if(options.hasOwnProperty(&quot;imeSwitch&quot;)){var e=options.imeSwitch;clearCookie(&quot;bdime&quot;),Cookie.set(&quot;bdime&quot;,e,document.domain,&quot;/&quot;,expire30y)}}function writeBAIDUID(){var e,t,o,i=Cookie.get(&quot;BAIDUID&quot;);
/FG=(\d+)/.test(i)&amp;amp;&amp;amp;(t=RegExp.$1),/SL=(\d+)/.test(i)&amp;amp;&amp;amp;(o=RegExp.$1),/NR=(\d+)/.test(i)&amp;amp;&amp;amp;(e=RegExp.$1),options.hasOwnProperty(&quot;resultNum&quot;)&amp;amp;&amp;amp;(e=options.resultNum),options.hasOwnProperty(&quot;resultLang&quot;)&amp;amp;&amp;amp;(o=options.resultLang),Cookie.set(&quot;BAIDUID&quot;,i.replace(/:.*$/,&quot;&quot;)+(&quot;undefined&quot;!=typeof o?&quot;:SL=&quot;+o:&quot;&quot;)+(&quot;undefined&quot;!=typeof e?&quot;:NR=&quot;+e:&quot;&quot;)+(&quot;undefined&quot;!=typeof t?&quot;:FG=&quot;+t:&quot;&quot;),&quot;.baidu.com&quot;,&quot;/&quot;,expire30y,!0)}function clearCookie(e){Cookie.clear(e,&quot;/&quot;),Cookie.clear(e,&quot;/&quot;,document.domain),Cookie.clear(e,&quot;/&quot;,&quot;.&quot;+document.domain),Cookie.clear(e,&quot;/&quot;,&quot;.baidu.com&quot;)
}function reset(e){options=defaultOptions,save(e)}var defaultOptions={sugSet:1,sugStoreSet:1,isSwitch:1,isJumpHttps:1,imeSwitch:0,resultNum:10,skinOpen:1,resultLang:0,duRobotState:&quot;000&quot;},options={},tmpName,expire30y=new Date;expire30y.setTime(expire30y.getTime()+94608e7);try{if(bds&amp;amp;&amp;amp;bds.comm&amp;amp;&amp;amp;bds.comm.personalData){if(&quot;string&quot;==typeof bds.comm.personalData&amp;amp;&amp;amp;(bds.comm.personalData=eval(&quot;(&quot;+bds.comm.personalData+&quot;)&quot;)),!bds.comm.personalData)return;for(tmpName in bds.comm.personalData)defaultOptions.hasOwnProperty(tmpName)&amp;amp;&amp;amp;bds.comm.personalData.hasOwnProperty(tmpName)&amp;amp;&amp;amp;&quot;SUCCESS&quot;==bds.comm.personalData[tmpName].ErrMsg&amp;amp;&amp;amp;(options[tmpName]=bds.comm.personalData[tmpName].value)
}try{parseInt(options.resultNum)||delete options.resultNum,parseInt(options.resultLang)||&quot;0&quot;==options.resultLang||delete options.resultLang}catch(e){}writeCookie(),&quot;sugSet&quot;in options||(options.sugSet=3!=Cookie.get(&quot;sug&quot;,3)?0:1),&quot;sugStoreSet&quot;in options||(options.sugStoreSet=Cookie.get(&quot;sugstore&quot;,0));var BAIDUID=Cookie.get(&quot;BAIDUID&quot;);&quot;resultNum&quot;in options||(options.resultNum=/NR=(\d+)/.test(BAIDUID)&amp;amp;&amp;amp;RegExp.$1?parseInt(RegExp.$1):10),&quot;resultLang&quot;in options||(options.resultLang=/SL=(\d+)/.test(BAIDUID)&amp;amp;&amp;amp;RegExp.$1?parseInt(RegExp.$1):0),&quot;isSwitch&quot;in options||(options.isSwitch=2==Cookie.get(&quot;ORIGIN&quot;,0)?0:1==Cookie.get(&quot;ORIGIN&quot;,0)?2:1),&quot;imeSwitch&quot;in options||(options.imeSwitch=Cookie.get(&quot;bdime&quot;,0))
}catch(e){}window.UPS={writeBAIDUID:writeBAIDUID,reset:reset,get:get,set:set,save:save}}(),function(){var e=&quot;https://ss1.bdstatic.com/5eN1bjq8AAUYm2zgoY3K/r/www/cache/static/protocol/https/plugins/every_cookie_4644b13.js&quot;;(&quot;Mac68K&quot;==navigator.platform||&quot;MacPPC&quot;==navigator.platform||&quot;Macintosh&quot;==navigator.platform||&quot;MacIntel&quot;==navigator.platform)&amp;amp;&amp;amp;(e=&quot;https://ss1.bdstatic.com/5eN1bjq8AAUYm2zgoY3K/r/www/cache/static/protocol/https/plugins/every_cookie_mac_82990d4.js&quot;),setTimeout(function(){$.ajax({url:e,cache:!0,dataType:&quot;script&quot;})},0);var t=navigator&amp;amp;&amp;amp;navigator.userAgent?navigator.userAgent:&quot;&quot;,o=document&amp;amp;&amp;amp;document.cookie?document.cookie:&quot;&quot;,i=!!(t.match(/(msie [2-8])/i)||t.match(/windows.*safari/i)&amp;amp;&amp;amp;!t.match(/chrome/i)||t.match(/(linux.*firefox)/i)||t.match(/Chrome\/29/i)||t.match(/mac os x.*firefox/i)||o.match(/\bISSW=1/)||0==UPS.get(&quot;isSwitch&quot;));
bds&amp;amp;&amp;amp;bds.comm&amp;amp;&amp;amp;(bds.comm.supportis=!i,bds.comm.isui=!0),window.__restart_confirm_timeout=!0,window.__confirm_timeout=8e3,window.__disable_is_guide=!0,window.__disable_swap_to_empty=!0,window.__switch_add_mask=!0;var s=&quot;https://ss1.bdstatic.com/5eN1bjq8AAUYm2zgoY3K/r/www/cache/static/protocol/https/global/js/all_async_search_7edb824.js&quot;,n=&quot;/script&quot;;document.write(&quot;&amp;lt;script src='&quot;+s+&quot;'&amp;gt;&amp;lt;&quot;+n+&quot;&amp;gt;&quot;),bds.comm.newindex&amp;amp;&amp;amp;$(window).on(&quot;index_off&quot;,function(){$('&amp;lt;div class=&quot;c-tips-container&quot; id=&quot;c-tips-container&quot;&amp;gt;&amp;lt;/div&amp;gt;').insertAfter(&quot;#wrapper&quot;),window.__sample_dynamic_tab&amp;amp;&amp;amp;$(&quot;#s_tab&quot;).remove()
}),bds.comm&amp;amp;&amp;amp;bds.comm.ishome&amp;amp;&amp;amp;Cookie.get(&quot;H_PS_PSSID&quot;)&amp;amp;&amp;amp;(bds.comm.indexSid=Cookie.get(&quot;H_PS_PSSID&quot;));var a=$(document).find(&quot;#s_tab&quot;).find(&quot;a&quot;);a&amp;amp;&amp;amp;a.length&amp;gt;0&amp;amp;&amp;amp;a.each(function(e,t){t.innerHTML&amp;amp;&amp;amp;t.innerHTML.match(/新闻/)&amp;amp;&amp;amp;(t.innerHTML=&quot;资讯&quot;,t.href=&quot;//www.baidu.com/s?rtt=1&amp;amp;bsst=1&amp;amp;cl=2&amp;amp;tn=news&amp;amp;word=&quot;,t.setAttribute(&quot;sync&quot;,!0))})}();&amp;lt;/script&amp;gt;



&amp;lt;script&amp;gt;
if(bds.comm.supportis){
    window.__restart_confirm_timeout=true;
    window.__confirm_timeout=8000;
    window.__disable_is_guide=true;
    window.__disable_swap_to_empty=true;
}
initPreload({
    'isui':true,
    'index_form':&quot;#form&quot;,
    'index_kw':&quot;#kw&quot;,
    'result_form':&quot;#form&quot;,
    'result_kw':&quot;#kw&quot;
});
&amp;lt;/script&amp;gt;

&amp;lt;script&amp;gt;
if(navigator.cookieEnabled){
        document.cookie=&quot;NOJS=;expires=Sat, 01 Jan 2000 00:00:00 GMT&quot;;
}
&amp;lt;/script&amp;gt;



&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;







Process finished with exit code 0
&lt;/pre&gt;&lt;/div&gt;



</description>
<pubDate>Sat, 13 Oct 2018 07:45:00 +0000</pubDate>
<dc:creator>-零</dc:creator>
<og:description>urllib模块 urllib模块简介： urllib提供了一系列用于操作URL的功能。包含urllib.request,urllib.error,urllib.parse,urllib.robotp</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/-wenli/p/9783117.html</dc:identifier>
</item>
<item>
<title>排序比较之归并排序与快速排序 - 不刷完题不改名</title>
<link>http://www.cnblogs.com/duheng-biu/p/9783098.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/duheng-biu/p/9783098.html</guid>
<description>&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504750/201810/1504750-20181013153529905-119031256.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;虽然在于算法的区别主要在于递归实现的时机不同，在一些细节上也有着一些区别：&lt;/h2&gt;
&lt;h3&gt;　　快速排序：&lt;/h3&gt;
&lt;p&gt;　　进行选择排序的时候，如果一轮还没有排序结束，会暂时将比中心值小的数放在紧挨着中心值的右边，并设置一个游标来控制这些数的下标，每找到一个小于的数就将游标的值加一换到下一个，直到一轮排序结束后，再将中心值和此时的游标交换位置，以达到左边的数字小于游标的值，此时再用递归的方法排序左边的值或者右边的值。&lt;/p&gt;
&lt;h3&gt;　　归并排序：&lt;/h3&gt;
&lt;p&gt;　　对于归并排序来说 会将数组先划分再排序，先会划分一小段将一小段排序，当有序后会排序下一小段，两个都为有序的时候，会将这两个归并，就是将两个有序的数组合并为一个有序的数组（注意，这种是自顶向下的排序方法）&lt;br/&gt;  而自底向上的方法则是分组后将每小组都排为有序的，再两两一排序，得到最后的整体有序&lt;/p&gt;
&lt;h4&gt;以上为个人观点，欢迎讨论批评··&lt;/h4&gt;
</description>
<pubDate>Sat, 13 Oct 2018 07:42:00 +0000</pubDate>
<dc:creator>不刷完题不改名</dc:creator>
<og:description>异同点： 虽然在于算法的区别主要在于递归实现的时机不同，在一些细节上也有着一些区别： 快速排序： 进行选择排序的时候，如果一轮还没有排序结束，会暂时将比中心值小的数放在紧挨着中心值的右边，并设置一个游</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/duheng-biu/p/9783098.html</dc:identifier>
</item>
<item>
<title>Fetch的使用及兼容ie的处理 - 巽秋</title>
<link>http://www.cnblogs.com/lhyxq/p/9779076.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lhyxq/p/9779076.html</guid>
<description>&lt;p&gt;作为一个与时俱进的前端，Fetch当然应该有所了解和涉猎。如果你没有听说过Fetch，那么ajax应该不陌生吧。Fetch相当于是一个新版本的Ajax，虽然现在我们常常使用的仍是ajax，但是fetch已经在渐渐地撼动ajax的地位。在最近的项目中，为了更新一下技术栈，所以使用了fetch。所以写一篇文章记录一下fetch相关的内容。&lt;/p&gt;

&lt;p&gt;先说一下fetch的优点吧，首先ajax最遭人诟病的就是回调地狱了，也就是比如说如果你要发送一个Ajax请求，但是请求的参数却需要上一个ajax来返回。那么这次的请求就需要放在上一次请求的回调函数中，如果只有两个请求还好，要是多个请求那么代码不仅可读性差，维护起来也十分的困难。在Es6中我们可以使用promise来解决回调地狱的问题，实际上fetch的解决方式就是类似于使用promise的ajax，它的使用方式也类似于promise，使用起来代码的可读性可维护性都变得更好了。&lt;/p&gt;

&lt;p&gt;如果不了解promise的童鞋可以去看es6的文档，或者看相关的教程，这里为了直奔主题就不讲解promise了&lt;/p&gt;
&lt;p&gt;先看一下MDN的官方文档&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467672/201810/1467672-20181013100259376-1446269787.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这是fetch的基本用法，第一个参数是url也就是你请求的地址，第二个参数接受一个配置对象，该对象的具体属性以及可以设置的值已经在上图展示。&lt;/p&gt;
&lt;p&gt;具体参数配置如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467672/201810/1467672-20181013100629785-1007976158.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一般来说使用fetch会用url加上配置对象的方式来发送请求，不过你也可以使用request构造函数实例化一个request对象作为参数传入&lt;/p&gt;

&lt;p&gt;在这里主要讲一下使用配置对象的方式来使用fetch&lt;/p&gt;

&lt;p&gt;首先要进行请求，我们需要一个后台接口，由于现如今开发模式基本上都是前后分离，所以我们的fetch请求不可避免的要涉及到跨域问题。&lt;/p&gt;

&lt;p&gt;在下面的例子中，我使用的是nodejs，和express搭建的后台。&lt;/p&gt;

&lt;p&gt;由于我使用的是项目的后台只是在app.js中加了一个测试接口所以就不贴出完整的app.js的代码了&lt;/p&gt;

&lt;p&gt;我使用的后台接口代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
app.all('/Api', &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req, res, next) {&lt;br/&gt;// 打印前端的信息
    console.log(req.body);&lt;br/&gt;　　console.log(req.cookies);&lt;br/&gt;　　console.log(req.get('Token'));&lt;br/&gt;res.header(&lt;/span&gt;&quot;Access-Control-Allow-Origin&quot;, &quot;http://localhost:63342&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置请求的来源的域&lt;/span&gt;
    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;Token,x-token,Content-Type&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置允许的自定义头部&lt;/span&gt;
    res.header(&quot;Access-Control-Allow-Methods&quot;,&quot;PUT,POST,GET,DELETE,OPTIONS&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置允许的请求的类型&lt;/span&gt;
    res.header(&quot;Access-Control-Allow-Credentials&quot;,&lt;span&gt;true&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置是否允许跨域请求携带cookie等浏览器信息&lt;/span&gt;
    res.header(&quot;X-Powered-By&quot;,'lhy'&lt;span&gt;);
    res.header(&lt;/span&gt;&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置返回的数据类型，这里设置为返回的json类型的数据&lt;/span&gt;
    res.send({meta:{token:&quot;123&quot;,code:1}}); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 发送响应信息&lt;/span&gt;
});
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;前端使用fetch代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;zh&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Fetch&amp;lt;/title&amp;gt;
    &amp;lt;meta name=&quot;Description&quot; content=&quot;&quot;/&amp;gt;
    &amp;lt;meta name=&quot;Author&quot; content=&quot;lhy&quot;/&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;script&amp;gt;&lt;span&gt;
    let options &lt;/span&gt;=&lt;span&gt; {
        method:&lt;/span&gt;&quot;post&quot;&lt;span&gt;,
        body:JSON.stringify({name:&lt;/span&gt;&quot;lhy&quot;,content:&quot;hello&quot;}), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里传入的数据类型必须和下面content-type的类型一致&lt;/span&gt;
        cache:'reload', &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 表示请求时忽略http缓存，但是请求完成后会刷新http缓存&lt;/span&gt;
        credentials:'include', &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 表示请求携带cookie等信息&lt;/span&gt;
&lt;span&gt;        headers:{
            &lt;/span&gt;'Token':&quot;lhytest&quot;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于设置请求头&lt;/span&gt;
            'content-type': 'application/json' &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置发送的数据类型&lt;/span&gt;
&lt;span&gt;        }
    };
    fetch(&lt;/span&gt;'http://localhost/Api',options).then(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (response) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; response.json()
    }).then(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
        console.log(data);
        document.getElementsByTagName(&lt;/span&gt;'p')[0].innerText =&lt;span&gt; data.meta.token;
    }).&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (error) {
        console.log(error);
    })
&lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PS：刚才在后台设置的允许跨域的源我们可以在浏览器调试窗口看到，而且如果你的html是本地环境打开Origin的值会为null，我这里是使用的webstrom打开的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467672/201810/1467672-20181013114148574-770208388.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 现在我们来看看结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467672/201810/1467672-20181013114341951-817848583.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到我们已经成功地拿到了后台地数据，我们再去看看后台是否也能拿到我传递的参数，以及cookie的信息&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467672/201810/1467672-20181013120118156-1826708755.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; PS：你设置的自定义头部在浏览器调试窗口无法看到，因为浏览器显示的头只显示它默认规定的请求头信息，如果你希望在浏览器窗口看到就需要将它暴露出去，这里不要再细说&lt;/p&gt;


&lt;p&gt;在上面我们可以看到，fetch还是十分方便强大的，所有的新的这些好用的技术往往都有一个限制那就是兼容问题&lt;/p&gt;
&lt;p&gt;我们先看一下原生的fetch的兼容性如何&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467672/201810/1467672-20181013120559293-377290414.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这么好用的东西，ie竟然完全不支持（垃圾ie毁我青春！！）&lt;/p&gt;

&lt;p&gt;没办法，这可不是低版本ie不兼容，而是ie完全不兼容，虽然现在ie的市场份额在逐年下降，但是其用户群体还是十分庞大的，而不巧的是这次的项目要求兼容到ie8&lt;/p&gt;

&lt;p&gt;这不是为难我胖虎吗？我又不想舍弃好用的fetch，没办法那就自己封装一个ie版本的fetch吧。&lt;/p&gt;

&lt;p&gt;封装一个ie版本的fetch，首先我们要了解这个fetch到底包含了些什么，作为一个精致的前端，我可不想直接调用fetch时检测一下window下有没有这个函数，没有就用ajax的粗陋的方式。&lt;/p&gt;

&lt;p&gt;所以就有了这篇文章的后半部分。&lt;/p&gt;

&lt;p&gt;我们先来看看MDN的fetch的使用模块下有些什么东西&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467672/201810/1467672-20181013121530139-1993208810.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以我们要重新封装一下 Body，Headers,Request,Response&lt;/p&gt;

&lt;p&gt;本人很菜，下面的封装方式全是我自己的看法，很有可能并不是fetch的内部实现方式，特此声明。&lt;/p&gt;

&lt;p&gt;参考文章：https://segmentfault.com/a/1190000006220369&lt;/p&gt;

&lt;p&gt;主要思路：&lt;/p&gt;

&lt;p&gt;检测浏览器版本，是ie10，11使用XMLHttpRequest进行请求&lt;/p&gt;

&lt;p&gt;ie8，9 使用XDomainRequest&lt;/p&gt;

&lt;p&gt;ie8以下使用ActiveXObject进行请求&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;189&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; webpackUniversalModuleDefinition(root, factory) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; exports === 'object' &amp;amp;&amp;amp; &lt;span&gt;typeof&lt;/span&gt; module === 'object'&lt;span&gt;)
        module.exports &lt;/span&gt;=&lt;span&gt; factory();
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; define === 'function' &amp;amp;&amp;amp;&lt;span&gt; define.amd)
        define([], factory);
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; exports === 'object'&lt;span&gt;)
        exports[&lt;/span&gt;&quot;fetch&quot;] =&lt;span&gt; factory();
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        root[&lt;/span&gt;&quot;fetch&quot;] =&lt;span&gt; factory();
})(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt; (modules) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; webpackBootstrap&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The module cache&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; installedModules =&lt;span&gt; {};

        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The require function&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; __webpack_require__(moduleId) {

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Check if module is in cache&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (installedModules[moduleId])
            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; installedModules[moduleId].exports;

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create a new module (and put it into the cache)&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; module = installedModules[moduleId] =&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;            exports: {},
                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;            id: moduleId,
                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;            loaded: &lt;span&gt;false&lt;/span&gt;
                &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            };

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Execute the module function&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Flag the module as loaded&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            module.loaded &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Return the exports of the module&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; module.exports;
            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        }


        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; expose the modules object (__webpack_modules__)&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        __webpack_require__.m &lt;/span&gt;=&lt;span&gt; modules;

        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; expose the module cache&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        __webpack_require__.c &lt;/span&gt;=&lt;span&gt; installedModules;

        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; __webpack_public_path__&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        __webpack_require__.p &lt;/span&gt;= &quot;&quot;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Load entry module and return exports&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; __webpack_require__(0&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    })
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;([
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 0 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (module, exports, __webpack_require__) {

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Request = __webpack_require__(1&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Response = __webpack_require__(5&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Headers = __webpack_require__(2&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Transport = __webpack_require__(6&lt;span&gt;)

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;[].forEach) {
                Array.prototype.forEach &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (fn, scope) {
                    &lt;/span&gt;'use strict'
                    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; i, len
                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = 0, len = &lt;span&gt;this&lt;/span&gt;.length; i &amp;lt; len; ++&lt;span&gt;i) {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (i &lt;span&gt;in&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;) {
                            fn.call(scope, &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;[i], i, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;)
                        }
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于读取响应头信息&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (!'lhy'&lt;span&gt;.trim) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/&lt;span&gt;g
                String.prototype.trim &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.replace(rtrim, ''&lt;span&gt;)
                }
            }
            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; headers(xhr) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; head = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Headers()
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (xhr.getAllResponseHeaders) {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; headerStr = xhr.getAllResponseHeaders() || ''
                    &lt;span&gt;if&lt;/span&gt; (/\S/&lt;span&gt;.test(headerStr)) {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method&lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt; headerPairs = headerStr.split('\u000d\u000a'&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; headerPairs.length; i++&lt;span&gt;) {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; headerPair =&lt;span&gt; headerPairs[i];
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 读取header的信息&lt;/span&gt;
                            &lt;span&gt;var&lt;/span&gt; index = headerPair.indexOf('\u003a\u0020'&lt;span&gt;)
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (index &amp;gt; 0&lt;span&gt;) {
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; key = headerPair.substring(0&lt;span&gt;, index).trim()
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; value = headerPair.substring(index + 2&lt;span&gt;).trim()
                                head.append(key, value)
                            }
                        }
                    }
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; head
            }

            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; fetch(input, init) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Promise(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (resolve, reject) {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; request
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!init &amp;amp;&amp;amp; (init &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; Request)) {
                        request &lt;/span&gt;=&lt;span&gt; input
                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                        request &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Request(input, init)
                    }

                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; msie = 11
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于判断是否为ie&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (window.VBArray) {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回浏览器渲染文档模式&lt;/span&gt;
                        msie = document.documentMode || (window.XMLHttpRequest ? 7 : 6&lt;span&gt;)
                    }

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (msie &amp;gt; 7&lt;span&gt;) {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; xhr = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Transport(request)

                        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; responseURL() {
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ('responseURL' &lt;span&gt;in&lt;/span&gt;&lt;span&gt; xhr) {
                                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; xhr.responseURL
                            }

                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;
                        }

                        xhr.on(&lt;/span&gt;'load', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event) {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; options =&lt;span&gt; {
                                status: event.status &lt;/span&gt;|| 200&lt;span&gt;,
                                statusText: event.statusText &lt;/span&gt;|| ''&lt;span&gt;,
                                headers: headers(event),
                                url: responseURL()
                            }
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; body = 'response' &lt;span&gt;in&lt;/span&gt; event ?&lt;span&gt; event.response : event.responseText
                            resolve(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Response(body, options))
                        })
                        xhr.on(&lt;/span&gt;'error', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                            reject(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; TypeError('Network request failed'&lt;span&gt;))
                        })
                        xhr.on(&lt;/span&gt;'timeout', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                            reject(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; TypeError('Network request timeout'&lt;span&gt;))
                        })
                        xhr.open(request.method, request.url, &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)

                        request.headers.forEach(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (value, name) {
                            xhr.setRequestHeader(name, value)
                        })
                        xhr.send(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt; request._body === 'undefined' ? &lt;span&gt;null&lt;/span&gt;&lt;span&gt; : request._body)
                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; xhr = &lt;span&gt;new&lt;/span&gt; ActiveXObject('Microsoft.XMLHTTP'&lt;span&gt;)
                        xhr.onreadystatechange &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (xhr.readyState === 4&lt;span&gt;) {
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; options =&lt;span&gt; {
                                    status: xhr.status &lt;/span&gt;|| 200&lt;span&gt;,
                                    statusText: xhr.statusText &lt;/span&gt;|| ''&lt;span&gt;,
                                    headers: headers(xhr),
                                    url: responseURL()
                                }
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; body = 'response' &lt;span&gt;in&lt;/span&gt; xhr ?&lt;span&gt; xhr.response : xhr.responseText
                                resolve(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Response(body, options))
                            }
                        }
                        xhr.open(request.method, request.url, &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
                        xhr.send(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt; request._body === 'undefined' ? &lt;span&gt;null&lt;/span&gt;&lt;span&gt; : request._body)
                    }
                })
            }

            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; notFunc(a) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; !/\scode\]\s+\}$/&lt;span&gt;.test(a)
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (notFunc(window.fetch)) {
                window.fetch &lt;/span&gt;=&lt;span&gt; fetch
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; avalon === 'function'&lt;span&gt;) {
                avalon.fetch &lt;/span&gt;=&lt;span&gt; fetch
            }
            module.exports &lt;/span&gt;=&lt;span&gt; fetch

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (module, exports, __webpack_require__) {

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Headers = __webpack_require__(2&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Body = __webpack_require__(4&lt;span&gt;)

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自定义Request函数&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Request(input, options) {
                options &lt;/span&gt;= options ||&lt;span&gt; {}
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; body =&lt;span&gt; options.body
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于判断函数接受的参数是否为自定义的Request对象 即判断input是否由Request创建&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (input &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; Request) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断body是否已被使用&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (input.bodyUsed) {
                        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; TypeError('Already read'&lt;span&gt;)
                    }
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.url =&lt;span&gt; input.url
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.credentials =&lt;span&gt; input.credentials
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;options.headers) {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; h = &lt;span&gt;this&lt;/span&gt;.headers = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Headers(input.headers)
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!h.map['x-requested-with'&lt;span&gt;]) {
                            h.set(&lt;/span&gt;'X-Requested-With', 'XMLHttpRequest'&lt;span&gt;)
                        }
                    }
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.method =&lt;span&gt; input.method
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.mode =&lt;span&gt; input.mode
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;body) {
                        body &lt;/span&gt;=&lt;span&gt; input._body
                        input.bodyUsed &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
                    }
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果input不是由Request创建的自定义Request对象 则input为url参数&lt;/span&gt;
                    &lt;span&gt;this&lt;/span&gt;.url =&lt;span&gt; input
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 优先判断option中是否设置了相关选项，再判断credentials自定义request对象的相关属性，如果都没有默认为‘omit’&lt;/span&gt;
                &lt;span&gt;this&lt;/span&gt;.credentials = options.credentials || &lt;span&gt;this&lt;/span&gt;.credentials || 'omit'
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断参数是否设置了header的相关选项&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (options.headers || !&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.headers) {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.headers = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Headers(options.headers)
                }
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.method = (options.method || &lt;span&gt;this&lt;/span&gt;.method || 'GET'&lt;span&gt;).toUpperCase()
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.mode = options.mode || &lt;span&gt;this&lt;/span&gt;.mode || &lt;span&gt;null&lt;/span&gt;
                &lt;span&gt;this&lt;/span&gt;.referrer = &lt;span&gt;null&lt;/span&gt;

                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果是head请求却携带了请求体，抛出错误&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; ( &lt;span&gt;this&lt;/span&gt;.method === 'HEAD' &amp;amp;&amp;amp;&lt;span&gt; body) {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; TypeError('Body not allowed for HEAD requests'&lt;span&gt;)
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.method === 'GET' &amp;amp;&amp;amp;&lt;span&gt; body){
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Obody =&lt;span&gt; JSON.parse(body)
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str = ''
                    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; name &lt;span&gt;in&lt;/span&gt;&lt;span&gt; Obody) {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(Obody.hasOwnProperty(name)){
                            str &lt;/span&gt;= str? str + '&amp;amp;' + name + '=' + Obody[name] : str +  name + '=' +&lt;span&gt; Obody[name]
                        }
                    }
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.url += '?' +&lt;span&gt; str
                    body &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
                }
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;._initBody(body)
            }

            Request.prototype.clone &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Request(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; F = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            }
            F.prototype &lt;/span&gt;=&lt;span&gt; Body.prototype
            Request.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; F()

            module.exports &lt;/span&gt;=&lt;span&gt; Request

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 2 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (module, exports, __webpack_require__) {

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; support = __webpack_require__(3&lt;span&gt;)

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自定义Header&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Headers(headers) {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.map =&lt;span&gt; {}
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (headers &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; Headers) {
                    headers.forEach(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (value, name) {
                        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.append(name, value)
                    }, &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)

                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (headers) {
                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; name &lt;span&gt;in&lt;/span&gt;&lt;span&gt; headers) {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (headers.hasOwnProperty(name)) {
                            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.append(name, headers[name])
                        }
                    }

                }
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向header对象中的map 添加键值对&lt;/span&gt;
            Headers.prototype.append = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (name, value) {
                name &lt;/span&gt;=&lt;span&gt; normalizeName(name)
                value &lt;/span&gt;=&lt;span&gt; normalizeValue(value)
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; list = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.map[name]
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;list) {
                    list &lt;/span&gt;=&lt;span&gt; []
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.map[name] =&lt;span&gt; list
                }
                list.push(value)
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义header上的delet方法用于删除键值对&lt;/span&gt;
            Headers.prototype['delete'] = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (name) {
                &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.map[normalizeName(name)]
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于获取header对象上的某个键的第一个值&lt;/span&gt;
            Headers.prototype.get = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (name) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; values = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.map[normalizeName(name)]
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; values ? values[0] : &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于获取header对象上某个键的所有值&lt;/span&gt;
            Headers.prototype.getAll = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (name) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.map[normalizeName(name)] ||&lt;span&gt; []
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断该header对象是否拥有某个属性&lt;/span&gt;
            Headers.prototype.has = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (name) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.map.hasOwnProperty(normalizeName(name))
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于设置该header对象上的值&lt;/span&gt;
            Headers.prototype.set = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (name, value) {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.map[normalizeName(name)] =&lt;span&gt; [normalizeValue(value)]
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 为了在低版本浏览器使用，定义forEach以遍历&lt;/span&gt;
            Headers.prototype.forEach = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (callback, thisArg) {
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; name &lt;span&gt;in&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.map) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.map.hasOwnProperty(name)) {
                        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.map[name].forEach(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (value) {
                            callback.call(thisArg, value, name, &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)
                        }, &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)
                    }
                }
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回header对象的可枚举属性及函数名&lt;/span&gt;
            Headers.prototype.keys = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; items =&lt;span&gt; []
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.forEach(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (value, name) {
                    items.push(name)
                })
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; items
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回header对象的所有可枚举的值&lt;/span&gt;
            Headers.prototype.values = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; items =&lt;span&gt; []
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.forEach(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (value) {
                    items.push(value)
                })
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; items
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  修改迭代器的方法&lt;/span&gt;
            Headers.prototype.entries = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; items =&lt;span&gt; []
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.forEach(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (value, name) {
                    items.push([name, value])
                })
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; items
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断是否支持迭代器&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (support.iterable) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果支持 则让header的iterable为上方的entries函数&lt;/span&gt;
                Headers.prototype[Symbol.iterator] =&lt;span&gt; Headers.prototype.entries
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断头名是否合法，只要不包含特殊字符就返回 头名的字符串&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; normalizeName(name) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; name !== 'string'&lt;span&gt;) {
                    name &lt;/span&gt;=&lt;span&gt; String(name)
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (/[^a-z0-9\-#$%&amp;amp;'*+.\^_`|~]/&lt;span&gt;i.test(name)) {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; TypeError('Invalid character in header field name'&lt;span&gt;)
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name.toLowerCase()
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将值转为字符串&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; normalizeValue(value) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; value !== 'string'&lt;span&gt;) {
                    value &lt;/span&gt;=&lt;span&gt; String(value)
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; value
            }

            module.exports &lt;/span&gt;=&lt;span&gt; Headers

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 3 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
         * 该函数用于判断浏览器是否支持
         * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (module, exports) {

            module.exports &lt;/span&gt;=&lt;span&gt; {
                searchParams: &lt;/span&gt;'URLSearchParams' &lt;span&gt;in&lt;/span&gt;&lt;span&gt; window,
                iterable: &lt;/span&gt;'Symbol' &lt;span&gt;in&lt;/span&gt; window &amp;amp;&amp;amp; 'iterator' &lt;span&gt;in&lt;/span&gt;&lt;span&gt; window,
                blob: &lt;/span&gt;'FileReader' &lt;span&gt;in&lt;/span&gt; window &amp;amp;&amp;amp; 'Blob' &lt;span&gt;in&lt;/span&gt; window &amp;amp;&amp;amp; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Blob()
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
                    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (e) {
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
                    }
                })(),
                formData: &lt;/span&gt;'FormData' &lt;span&gt;in&lt;/span&gt;&lt;span&gt; window,
                arrayBuffer: &lt;/span&gt;'ArrayBuffer' &lt;span&gt;in&lt;/span&gt;&lt;span&gt; window
            }


            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 4 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (module, exports, __webpack_require__) {

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; support = __webpack_require__(3&lt;span&gt;)

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于创建body对象&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Body() {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.bodyUsed = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; p =&lt;span&gt; Body.prototype

            &lt;/span&gt;'text,blob,formData,json,arrayBuffer'.replace(/\w+/g, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (method) {
                p[method] &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; consumeBody(&lt;span&gt;this&lt;/span&gt;).then(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (body) {
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; convertBody(body, method)
                    })
                }
            })

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化请求的头部&lt;/span&gt;
            p._initBody = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (body) {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;._body =&lt;span&gt; body
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;this&lt;/span&gt;.headers.get('content-type'&lt;span&gt;)) {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a =&lt;span&gt; bodyType(body)
                    &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (a) {
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 'text'&lt;span&gt;:
                            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.headers.set('content-type', 'text/plain;charset=UTF-8'&lt;span&gt;)
                            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;
                        &lt;span&gt;case&lt;/span&gt; 'blob'&lt;span&gt;:
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (body &amp;amp;&amp;amp;&lt;span&gt; body.type) {
                                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.headers.set('content-type'&lt;span&gt;, body.type)
                            }
                            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;
                        &lt;span&gt;case&lt;/span&gt; 'searchParams'&lt;span&gt;:
                            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8'&lt;span&gt;)
                            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;
                    }
                }
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断Body是否已被使用&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; consumeBody(body) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (body.bodyUsed) {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Promise.reject(&lt;span&gt;new&lt;/span&gt; TypeError('Already read'&lt;span&gt;))
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    body.bodyUsed &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;
                    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Promise.resolve(body._body)
                }
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于处理返回的response对象body的数据&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; convertBody(body, to) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; from =&lt;span&gt; bodyType(body)
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (body === &lt;span&gt;null&lt;/span&gt; || body === &lt;span&gt;void&lt;/span&gt; 0 || !from || from ===&lt;span&gt; to) {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Promise.resolve(body)
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (map[to] &amp;amp;&amp;amp;&lt;span&gt; map[to][from]) {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; map[to][from](body)
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Promise.reject(&lt;span&gt;new&lt;/span&gt; Error('Convertion from ' + from + ' to ' + to + ' not supported'&lt;span&gt;))
                }
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义对各种类型数据的处理方法&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; map =&lt;span&gt; {
                text: {
                    json: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt; (body) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;json --&amp;gt; text&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Promise.resolve(JSON.stringify(body))
                    },
                    blob: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt; (body) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;blob --&amp;gt; text&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; blob2text(body)
                    },
                    searchParams: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt; (body) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;searchParams --&amp;gt; text&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Promise.resolve(body.toString())
                    }
                },
                json: {
                    text: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt; (body) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;text --&amp;gt; json&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Promise.resolve(parseJSON(body))
                    },
                    blob: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt; (body) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;blob --&amp;gt; json&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; blob2text(body).then(parseJSON)
                    }
                },
                formData: {
                    text: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt; (body) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;text --&amp;gt; formData&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; text2formData(body)
                    }
                },
                blob: {
                    text: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt; (body) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;json --&amp;gt; blob&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt; Promise.resolve(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Blob([body]))
                    },
                    json: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt; (body) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;json --&amp;gt; blob&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt; Promise.resolve(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Blob([JSON.stringify(body)]))
                    }
                },
                arrayBuffer: {
                    blob: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (body) {
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; blob2ArrayBuffer(body)
                    }
                }
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于返回body携带的数据类型&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; bodyType(body) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; body === 'string'&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 'text'&lt;span&gt;
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (support.blob &amp;amp;&amp;amp; (body &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; Blob)) {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 'blob'&lt;span&gt;
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (support.formData &amp;amp;&amp;amp; (body &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; FormData)) {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 'formData'&lt;span&gt;
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (support.searchParams &amp;amp;&amp;amp; (body &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; URLSearchParams)) {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 'searchParams'&lt;span&gt;
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (body &amp;amp;&amp;amp; &lt;span&gt;typeof&lt;/span&gt; body === 'object'&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 'json'&lt;span&gt;
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
                }
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于低版本浏览器的reader&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; reader2Promise(reader) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Promise(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (resolve, reject) {
                    reader.onload &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                        resolve(reader.result)
                    }
                    reader.onerror &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                        reject(reader.error)
                    }
                })
            }

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
            模拟下列函数 用于处理各种类型的返回值数据
             readAsBinaryString(File|Blob)
             readAsText(File|Blob [, encoding])
             readAsDataURL(File|Blob)
             readAsArrayBuffer(File|Blob)
             &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; text2formData(body) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; form = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FormData()
                body.trim().split(&lt;/span&gt;'&amp;amp;').forEach(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (bytes) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (bytes) {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; split = bytes.split('='&lt;span&gt;)
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; name = split.shift().replace(/\+/g, ' '&lt;span&gt;)
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; value = split.join('=').replace(/\+/g, ' '&lt;span&gt;)
                        form.append(decodeURIComponent(name), decodeURIComponent(value))
                    }
                })
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Promise.resolve(form)
            }

            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; blob2ArrayBuffer(blob) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; reader = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileReader()
                reader.readAsArrayBuffer(blob)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; reader2Promise(reader)
            }

            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; blob2text(blob) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; reader = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileReader()
                reader.readAsText(blob)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; reader2Promise(reader)
            }


            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; parseJSON(body) {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; JSON.parse(body)
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ex) {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; 'Invalid JSON'&lt;span&gt;
                }
            }

            module.exports &lt;/span&gt;=&lt;span&gt; Body

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 5 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (module, exports, __webpack_require__) {

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Headers = __webpack_require__(2&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Body = __webpack_require__(4&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于返回response对象 即请求到的数据&lt;/span&gt;

            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Response(bodyInit, options) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;options) {
                    options &lt;/span&gt;=&lt;span&gt; {}
                }

                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.type = 'default'
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; status&lt;/span&gt;
                &lt;span&gt;this&lt;/span&gt;.status =&lt;span&gt; options.status
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ok&lt;/span&gt;
                &lt;span&gt;this&lt;/span&gt;.ok = &lt;span&gt;this&lt;/span&gt;.status &amp;gt;= 200 &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;.status &amp;lt; 300
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; status&lt;/span&gt;
                &lt;span&gt;this&lt;/span&gt;.statusText =&lt;span&gt; options.statusText
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.headers = options.headers &lt;span&gt;instanceof&lt;/span&gt; Headers ? options.headers : &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Headers(options.headers)
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.url = options.url || ''
                &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._initBody(bodyInit)
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; F = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            }
            F.prototype &lt;/span&gt;=&lt;span&gt; Body.prototype
            Response.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; F()

            Response.prototype.clone &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Response(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;._bodyInit, {
                    status: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.status,
                    statusText: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.statusText,
                    headers: &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Headers(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.headers),
                    url: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.url
                })
            }

            Response.error &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; response = &lt;span&gt;new&lt;/span&gt; Response(&lt;span&gt;null&lt;/span&gt;, {status: 0, statusText: ''&lt;span&gt;})
                response.type &lt;/span&gt;= 'error'
                &lt;span&gt;return&lt;/span&gt;&lt;span&gt; response
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重定向状态码&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; redirectStatuses = [301, 302, 303, 307, 308&lt;span&gt;]

            Response.redirect &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (url, status) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (redirectStatuses.indexOf(status) === -1&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RangeError('Invalid status code'&lt;span&gt;)
                }

                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Response(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, {status: status, headers: {location: url}})
            }

            module.exports &lt;/span&gt;=&lt;span&gt; Response

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 6 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (module, exports, __webpack_require__) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ajax 非低版本ie及谷歌火狐使用XMLHttpRequest&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ie 8 - 9 使用XDomainRequest&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;低版本ie 使用 ActiveXObject（'Microsoft.XMLHTTP'）&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; AXO = __webpack_require__(7&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; JSONP = __webpack_require__(8&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; XDR = __webpack_require__(9&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; XHR = __webpack_require__(10&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; msie = 0
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (window.VBArray) {
                msie &lt;/span&gt;= document.documentMode || (window.XMLHttpRequest ? 7 : 6&lt;span&gt;)
            }

            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Transport(request) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (msie === 8 || msie === 9&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.core = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XDR(request)
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (!msie || msie &amp;gt; 9&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.core = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XHR(request)
                }
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; p =&lt;span&gt; Transport.prototype

            p.on &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (type, fn) {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.core.on(type, fn)
            }


            p.setRequestHeader &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (a, b) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.core.setRequestHeader) {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.core.setRequestHeader(a, b)
                }
            }

            p.open &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (a, b, c, d, e) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.core.open) {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.core.open(a, b, c, d, e)
                }
            }

            p.send &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (a) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.core.send) {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.core.send(a)
                }
            }

            p.abort &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.core.abort) {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.core.abort()
                }
            }

            module.exports &lt;/span&gt;=&lt;span&gt; Transport

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 7 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (module, exports) {

            module.exports &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; AXO(opts) {

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; xhr = &lt;span&gt;new&lt;/span&gt; ActiveXObject('Microsoft.XMLHTTP'&lt;span&gt;)

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; xhr.onreadystatechange = function () {&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     if (xhr.readyState === 4) {&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         if (/^2\d\d|1224/.test(xhr.status)) {&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;             events['load'] &amp;amp;&amp;amp; events['load'](xhr)&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         } else {&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;             events['error'] &amp;amp;&amp;amp; events['error']()&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         }&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     }&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
                &lt;span&gt;//
&lt;/span&gt;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; var events = {}&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Object.defineProperty(xhr,on,)&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; xhr.on = function (type, fn) {&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     events[type] = fn&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;

                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; if (opts.timeout === 'number') {&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     setTimeout(function () {&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         events['timeout'] &amp;amp;&amp;amp; events['timeout']()&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         xhr.abort()&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     }, opts.timeout)&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt;&lt;span&gt; xhr
            }

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 8 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (module, exports) {


            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; JSONP(opts) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; callbackFunction = opts.jsonpCallbackFunction ||&lt;span&gt; generateCallbackFunction();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; jsonpCallback = opts.jsonpCallback || 'callback'
                &lt;span&gt;var&lt;/span&gt; xhr = document.createElement('script'&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (xhr.charset) {
                    xhr.charset &lt;/span&gt;=&lt;span&gt; opts.charset
                }
                xhr.onerror &lt;/span&gt;= xhr[useOnload ? 'onload' : 'onreadystatechange'] = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; execute = /loaded|complete|undefined/&lt;span&gt;i.test(xhr.readyState)
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e &amp;amp;&amp;amp; e.type === 'error'&lt;span&gt;) {
                        events[&lt;/span&gt;'error'] &amp;amp;&amp;amp; events['error'&lt;span&gt;]()
                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (execute) {
                        setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                            xhr.abort()
                        }, &lt;/span&gt;0&lt;span&gt;)
                    }
                }

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; events =&lt;span&gt; {}

                xhr.on &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (type, fn) {
                    events[type] &lt;/span&gt;=&lt;span&gt; fn
                }

                xhr.abort &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                    events &lt;/span&gt;=&lt;span&gt; {}
                    removeNode(xhr)
                    clearFunction(callbackFunction)
                }
                xhr.open &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (a, url) {
                    window[callbackFunction] &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (response) {
                        events[&lt;/span&gt;'load'] &amp;amp;&amp;amp; events['load'&lt;span&gt;]({
                            status: &lt;/span&gt;200&lt;span&gt;,
                            statusText: &lt;/span&gt;'ok'&lt;span&gt;,
                            response: response
                        })
                        clearFunction(callbackFunction)
                    }
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; head = document.getElementsByTagName('head')[0&lt;span&gt;]

                    url &lt;/span&gt;+= (url.indexOf('?') === -1) ? '?' : '&amp;amp;'&lt;span&gt;;
                    xhr.setAttribute(&lt;/span&gt;'src', url + jsonpCallback + '=' +&lt;span&gt; callbackFunction);
                    head.insertBefore(xhr, head.firstChild)
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; opts.timeout === 'number'&lt;span&gt;) {
                        setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                            events[&lt;/span&gt;'timeout'] &amp;amp;&amp;amp; events['timeout'&lt;span&gt;]()
                            xhr.abort()
                        }, opts.timeout)
                    }
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; xhr
            }


            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; generateCallbackFunction() {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ('jsonp' + Math.random()).replace(/0\./, ''&lt;span&gt;)
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Known issue: Will throw 'Uncaught ReferenceError: callback_*** is not defined' error if request timeout&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; clearFunction(functionName) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; IE8 throws an exception when you try to delete a property on window&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; http://stackoverflow.com/a/1824228/751089&lt;/span&gt;
                &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt; window[functionName];
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (e) {
                    window[functionName] &lt;/span&gt;=&lt;span&gt; undefined;
                }
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; f =&lt;span&gt; document.createDocumentFragment()
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; useOnload = 'textContent' &lt;span&gt;in&lt;/span&gt;&lt;span&gt; document

            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; removeNode(node) {
                f.appendChild(node)
                f.removeChild(node)
                node.onload &lt;/span&gt;= onerror = onreadystatechange = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node
            }

            module.exports &lt;/span&gt;=&lt;span&gt; JSONP

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 9 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (module, exports) {

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;https://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx&lt;/span&gt;
            module.exports = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; XDR(opts) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; xhr = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XDomainRequest()
                &lt;/span&gt;'load,error,timeout'.replace(/\w+/g, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (method) {
                    xhr[&lt;/span&gt;'on' + method] = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (events[method]) {
                            events[method](xhr)
                        }
                    }
                })
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; events =&lt;span&gt; {}
                xhr.on &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (type, fn) {
                    events[type] &lt;/span&gt;=&lt;span&gt; fn
                }
                xhr.onabort &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                    events &lt;/span&gt;=&lt;span&gt; {}
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; opts.timeout === 'number'&lt;span&gt;) {
                    xhr.timeout &lt;/span&gt;=&lt;span&gt; opts.timeout
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; xhr
            }

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 10 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (module, exports) {


            module.exports &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; XHR(opts) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; xhr = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XMLHttpRequest
                &lt;/span&gt;'load,error,timeout'.replace(/\w+/g, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (method) {
                    xhr[&lt;/span&gt;'on' + method] = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (events[method]) {
                            events[method](xhr)
                        }
                    }
                })
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; events =&lt;span&gt; {}

                xhr.on &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (type, fn) {
                    events[type] &lt;/span&gt;=&lt;span&gt; fn
                }

                xhr.onabort &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                    events &lt;/span&gt;=&lt;span&gt; {}
                }

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (opts.credentials === 'include'&lt;span&gt;) {
                    xhr.withCredentials &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
                }

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ('responseType' &lt;span&gt;in&lt;/span&gt; xhr &amp;amp;&amp;amp; ('Blob' &lt;span&gt;in&lt;/span&gt;&lt;span&gt; window)) {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; msie = document.documentMode || (window.XMLHttpRequest ? 7 : 6&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (msie !== 10 &amp;amp;&amp;amp; msie !== 11&lt;span&gt;) {
                        xhr.responseType &lt;/span&gt;= 'blob'&lt;span&gt;
                    }
                }

                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; xhr
            }

            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        }
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;])
});
;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;声明：在封装的过程中，由于考虑到项目的实际情况我封装的fetch可以在get中设置body，其本质是把body中的数据拼接到url上&lt;/p&gt;

&lt;p&gt;在使用原生fetch的时候get，head请求是不能设置body的，否则会报错&lt;/p&gt;

</description>
<pubDate>Sat, 13 Oct 2018 07:35:00 +0000</pubDate>
<dc:creator>巽秋</dc:creator>
<og:description>Fetch 作为一个与时俱进的前端，Fetch当然应该有所了解和涉猎。如果你没有听说过Fetch，那么ajax应该不陌生吧。Fetch相当于是一个新版本的Ajax，虽然现在我们常常使用的仍是ajax，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lhyxq/p/9779076.html</dc:identifier>
</item>
<item>
<title>mysql利用binlog进行数据恢复 - 陈芳志</title>
<link>http://www.cnblogs.com/chenfangzhi/p/9783064.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenfangzhi/p/9783064.html</guid>
<description>&lt;p class=&quot;toc&quot;&gt;目录&lt;/p&gt;

&lt;p&gt;最近线上误操作了一个数据，由于是直接修改的数据库，所有唯一的恢复方式就在mysql的binlog。binlog使用的是ROW模式，即受影响的每条记录都会生成一个sql。同时利用了&lt;a href=&quot;https://github.com/danfengcao/binlog2sql&quot;&gt;binlog2sql&lt;/a&gt;项目。&lt;/p&gt;
&lt;h2 id=&quot;binlog基本配置和格式&quot;&gt;binlog基本配置和格式&lt;/h2&gt;
&lt;h3 id=&quot;binlog基本配置&quot;&gt;binlog基本配置&lt;/h3&gt;
&lt;p&gt;binlog需要在mysql的配置文件的mysqld节点中进行配置：&lt;/p&gt;
&lt;pre class=&quot;php&quot;&gt;
&lt;code&gt;# 日志中的Serverid
server-id       = 1
# 日志路径
log_bin         = /var/log/mysql/mysql-bin.log
# 保存几天的日志
expire_logs_days    = 10
# 每个binlog的大小
max_binlog_size   = 1000M
#binlgo模式
binlog_format=ROW
# 默认是所有记录，可以配置哪些需要记录，哪些不记录
#binlog_do_db       = include_database_name
#binlog_ignore_db   = include_database_name&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;查看binlog状态&quot;&gt;查看binlog状态&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;SHOW BINARY LOGS; 查看binlog文件&lt;/li&gt;
&lt;li&gt;SHOW VARIABLES LIKE '%log_bin%' 查看日志状态&lt;/li&gt;
&lt;li&gt;SHOW MASTER STATUS 查看日志文件位置&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;binlog的三种格式&quot;&gt;binlog的三种格式&lt;/h3&gt;
&lt;p&gt;1.ROW&lt;br/&gt;针对行记录日志，每行修改产生一条记录。&lt;br/&gt;优点：上下文信息比较全，恢复某条误操作时可以直接在日志中查找到原文信息，对于主从复制支持好。&lt;br/&gt;缺点：输出非常大，如果是Alter语句将产生大量的记录&lt;/p&gt;
&lt;p&gt;格式如下：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;DELETE FROM `back`.`sys_user` WHERE `deptid`=27 AND `status`=1 AND `account`='admin' AND `name`='张三' AND `phone`='18200000000' AND `roleid`='1' AND `createtime`='2016-01-29 08:49:53' AND `sex`=2 AND `email`='sn93@qq.com' AND `birthday`='2017-05-05 00:00:00' AND `avatar`='girl.gif' AND `version`=25 AND `password`='ecfadcde9305f8891bcfe5a1e28c253e' AND `salt`='8pgby' AND `id`=1 LIMIT 1; #start 4 end 796 time 2018-10-12 17:03:19&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.STATEMENT&lt;br/&gt;针对sql语句的，每条语句产生一条记录&lt;br/&gt;优点：产生的日志量比较小，主从版本可以不一致&lt;br/&gt;缺点：主从有些语句不能支持，像自增主键和UUID这种类型的&lt;/p&gt;
&lt;p&gt;格式如下：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;delete from `sys_role`;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.MIX&lt;br/&gt;结合了两种的优点，一般情况下都采用STATEMENT模式，对于不支持的语句采用ROW模式&lt;/p&gt;
&lt;h2 id=&quot;转换成sql&quot;&gt;转换成sql&lt;/h2&gt;
&lt;h3 id=&quot;mysql自带的mysqlbinlog&quot;&gt;mysql自带的mysqlbinlog&lt;/h3&gt;
&lt;p&gt;由于binlog是二进制的，所以需要先转换成文本文件，一般可以采用Mysql自带的mysqlbinlog转换成文本。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;mysqlbinlog --no-defaults --base64-output='decode-rows' -d room -v mysql-bin.011012 &amp;gt; /root/binlog_2018-10-10&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;参数说明&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;--no-defaults 为了防止报错：mysqlbinlog: unknown variable 'default_character_set=utf8mb4'&lt;/li&gt;
&lt;li&gt;--base64-output='decode-rows' 和-v一起使用， 进行base64解码&lt;br/&gt;其他有很多用来限定范围的参数，比如数据库，起始时间，起始位置等等。这些参数在查找误操作的时候非常有用。&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;binlog的基本块如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# at 417750
#181007  1:50:38 server id 1630000  end_log_pos 417844 CRC32 0x9fc3e3cd     Query   thread_id=440109962 exec_time=0 error_code=0
SET TIMESTAMP=1538877038/*!*/;
BEGIN&lt;/code&gt;
&lt;/pre&gt;
&lt;ol readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1.5&quot;&gt;
&lt;p&gt;# at 417750&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;指明的当前位置相对文件开始的偏移位置，这个在mysqlbinlog命令中可以作为--start-position的参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;#181007 1:50:38 server id 1630000 end_log_pos 417844 CRC32 0x9fc3e3cd Query thread_id=440109962 exec_time=0 error_code=0&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;181007 1:50:38指明时间为18年10月7号1:50:38，serverid也就是你在配置文件中的配置的，end_log_pos 417844，这个块在417844结束。thread_id执行的线程id，exec_time执行时间，error_code错误码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;SET TIMESTAMP=1538877038/&lt;em&gt;!&lt;/em&gt;/;&lt;br/&gt;BEGIN&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;具体的执行语句&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;一行记录产生的日志如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# at 417750
#181010  9:50:38 server id 1630000  end_log_pos 417844 CRC32 0x9fc3e3cd     Query   thread_id=440109962 exec_time=0 error_code=0
SET TIMESTAMP=1539136238/*!*/;
BEGIN
/*!*/;
# at 417844
#181010  9:50:38 server id 1630000  end_log_pos 417930 CRC32 0xce36551b     Table_map: `goods`.`good_info` mapped to number 129411
# at 417930
#181010  9:50:38 server id 1630000  end_log_pos 418030 CRC32 0x5827674a     Update_rows: table id 129411 flags: STMT_END_F
### UPDATE `goods`.`good_info`
### WHERE
###   @1='2018:10:07' /* DATE meta=0 nullable=0 is_null=0 */
###   @2=9033404 /* INT meta=0 nullable=0 is_null=0 */
###   @3=1 /* INT meta=0 nullable=0 is_null=0 */
###   @4=8691108 /* INT meta=0 nullable=0 is_null=0 */
###   @5=9033404 /* INT meta=0 nullable=0 is_null=0 */
###   @6=20 /* LONGINT meta=0 nullable=0 is_null=0 */
###   @7=1538877024 /* TIMESTAMP(0) meta=0 nullable=0 is_null=0 */
### SET
###   @1='2018:10:07' /* DATE meta=0 nullable=0 is_null=0 */
###   @2=9033404 /* INT meta=0 nullable=0 is_null=0 */
###   @3=1 /* INT meta=0 nullable=0 is_null=0 */
###   @4=8691108 /* INT meta=0 nullable=0 is_null=0 */
###   @5=9033404 /* INT meta=0 nullable=0 is_null=0 */
###   @6=21 /* LONGINT meta=0 nullable=0 is_null=0 */
###   @7=1538877024 /* TIMESTAMP(0) meta=0 nullable=0 is_null=0 */
# at 418030
#181010  9:50:38 server id 1630000  end_log_pos 418061 CRC32 0x468fb30e     Xid = 212760460521
COMMIT/*!*/;
# at 418061&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一行记录产生的日志如上所示。以SET TIMESTAMP=1539136238/*!*/;开始，以COMMIT/*!*/;结尾。我们可以根据两个at指明的位置来限定范围。&lt;br/&gt;注意一条记录开始的&lt;span id=&quot;time&quot;&gt;SET TIMESTAMP&lt;/span&gt;之前的# at 417750和结尾的&lt;span id=&quot;commit&quot;&gt;COMMIT&lt;/span&gt;之后的# at 418061&lt;/p&gt;
&lt;h3 id=&quot;利用binlog2sql&quot;&gt;利用binlog2sql&lt;/h3&gt;
&lt;p&gt;binlog2sql官网介绍：从MySQL binlog解析出你要的SQL。根据不同选项，你可以得到原始SQL、回滚SQL、去除主键的INSERT SQL等。&lt;/p&gt;
&lt;p&gt;基本使用如下：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;python binlog2sql.py -hlocalhost  -P3306 -udev -p'\*' -d room -t  room_info --start-file='mysql-bin.011012' --start-position 129886892  --stop-position 130917280 &amp;gt; rollback.sql&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;具体的使用我就不讲解了github上讲解的十分清楚，主要看下很多用来筛选的条件，比如起止时间--start-datetime/--stop-datetime，表名限定-t，数据库限定-d，语句限定--sql-type，主要说说我遇到的一些问题。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;mysql的binlog模式&lt;br/&gt;这里需要设置为ROW，因为ROW模式有原来的信息，如果可以直接利用binlog2sql反向生成回滚sql，如果是STATEMENT无法生成，需要利用的mysql定时备份的文件再去做回滚&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;恢复数据的具体操作&quot;&gt;恢复数据的具体操作&lt;/h2&gt;
&lt;p&gt;因为当时线上执行的是一条update语句，没有唯一键索引的。导致有两千多条记录被更新。语句如下：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;update room_info set status=1 where status=2;&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;根据操作时间先定位对应的binlog文件&lt;br/&gt;我记得当时操作的时间大概的是上午9多左右，所以去找对应的binlog文件最后修改时间大于9点并且时间最接近的一个文件。使用linux的&lt;code&gt;ll&lt;/code&gt;命令查看文件的修改时间。&lt;/li&gt;
&lt;li&gt;筛选具体的数据库&lt;br/&gt;因为一个mysql实例的所有binlog文件是在一个文件中的，所以我们先要去除其他不想关的数据库。利用-d参数来指明数据实例。然后在利用开始时间(--start-datetime)和结束时间(--stop-datetime)来进一步筛选&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;mysqlbinlog --no-defaults -v  --base64-output='decode-rows' -d room --start-datetime='2018-10-10 9:00:00' --stop-datetime='2018-10-10 10:00:00' mysql-bin.011012&amp;gt;temp.sql&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;压缩取回文件分析&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;zip temp.zip temp.sql &amp;amp;&amp;amp; sz temp.zip &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;取回文件在本地用文本工具如vscode分析，里面有正则匹配，根据你改动过的特征，比如我有个房间号888888，这个不应该被修改，你就查看这个房间号的修改记录，ROW模式的语句是Where在前，set在后。利用正则&lt;code&gt;&lt;code&gt;room_id&lt;/code&gt;=888888.*&lt;code&gt;show_state&lt;/code&gt;=1.*AND &lt;code&gt;show_state&lt;/code&gt;=2&lt;/code&gt;很快就能匹配到。我当时的语句影响了两千多条记录，你根据找到的语句去找开始的&lt;a href=&quot;http://www.cnblogs.com/chenfangzhi/p/9783064.html#time&quot; target=&quot;_self&quot;&gt;SET TIMESTAMP=1539136238&lt;/a&gt;的位置之前的at和结尾的&lt;a href=&quot;http://www.cnblogs.com/chenfangzhi/p/9783064.html#commit&quot; target=&quot;_self&quot;&gt;COMMIT&lt;/a&gt;之后的at。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;利用binlog2sql生成回滚语句&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;python binlog2sql.py -hlocalhost -P3306 -udev -p'*' -d room -t room_info -B --start-file='mysql-bin.011012' --start-position 129886892 --stop-position 130917280 &amp;gt; rollback.sql&lt;/p&gt;
&lt;h2 id=&quot;另外&quot;&gt;另外&lt;/h2&gt;
&lt;p&gt;因为我这边是一条update影响多条的情况，如果是带唯一键的情况下，影响的只有一条记录，完全没必要这么麻烦，直接利用binlog2sql带上-d和-t参数限定数据库和表，然后利用grep来查找，直接可以得出对应的sql。mysqlbinlog少了一个限定表和限定语句的功能。比如精确到一张表的Delete语句，能减少很多的数据，能快速定位。&lt;/p&gt;
</description>
<pubDate>Sat, 13 Oct 2018 07:34:00 +0000</pubDate>
<dc:creator>陈芳志</dc:creator>
<og:description>mysql利用binlog进行数据恢复 最近线上误操作了一个数据，由于是直接修改的数据库，所有唯一的恢复方式就在mysql的binlog。binlog使用的是ROW模式，即受影响的每条记录都会生成一个</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenfangzhi/p/9783064.html</dc:identifier>
</item>
<item>
<title>Python入门基础 - SherryStarry</title>
<link>http://www.cnblogs.com/wanlei/p/9783053.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wanlei/p/9783053.html</guid>
<description>&lt;p&gt;&lt;span&gt;编程语言总体分以为机器语言、汇编语言、高级语言 三种。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;1、机器语言：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;优点是最底层，速度最快。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;缺点是最复杂，开发效率最低。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除了计算机生产厂家的专业人员外，绝大多数的程序员已经不再去学习机器语言了。（pass）&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;2、汇编语言：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;优点是比较底层，速度最快。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;缺点是复杂，开发效率最低。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;3、高级语言（编译型 和 解释型）：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;编译型语言执行速度快，不依赖语言环境运行，跨平台差。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如：C语言，运行效率高 但是开发效率低。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解释型跨平台好，一份代码，到处使用，缺点是执行速度慢，依赖解释器运行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如Python，JAVA,PHP&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Python 的解释器有CPython，JPython，PyPy，IronPython，IPython&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;运行速度从高到低&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;开发效率由低到高&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;学习难度从难到易&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Function：Variables are used to store information to be referenced and manipulated in a computer program. &lt;/h2&gt;
&lt;h2 id=&quot;声明变量&quot;&gt;1、声明变量&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
name = “Alex Li”
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1442172/201810/1442172-20181013151108542-2117563118.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;变量定义规则&quot;&gt;变量定义规则：&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;1、变量名只能是 字母、数字或下划线的任意组合&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、变量名的第一个字符不能是数字&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、以下关键字不能声明为变量名['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise', 'return', 'try', 'while', 'with', 'yield']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;定义一个变量，存储的的数据是变量值，变量名和变量值是一种绑定关系，变量名本身并无存储值的功能&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;注意变量的三个特性：&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;1、通过id查看变量在内存中的地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、变量的类型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、变量的值&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;定义方式&quot;&gt;定义方式：&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;驼峰体&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;lang-py&quot;&gt;AgeOfOldboy = 56 &lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;lang-py&quot;&gt;NumberOfStudents = 80&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下划线&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;age_of_oldboy = 56 &lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;number_of_students = 80&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;你觉得哪种更清晰，哪种就是官方推荐的，我想你肯定会先第2种,第一种AgeOfOldboy咋一看以为是AngelaBaby&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;记得多用下划线和英文去定义变量名，切勿用拼音！&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;常量：程序运行中不会改变的量     &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;lang-py&quot;&gt;AGE_OF_OLDBOY = 56&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Python中没有常量的专门的定义方式，通常用大写的变量名，仅仅只是一种提示效果。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 13 Oct 2018 07:29:00 +0000</pubDate>
<dc:creator>SherryStarry</dc:creator>
<og:description>一、什么是编程语言 编程语言总体分以为机器语言、汇编语言、高级语言 三种。 1、机器语言： 优点是最底层，速度最快。 缺点是最复杂，开发效率最低。 除了计算机生产厂家的专业人员外，绝大多数的程序员已经</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wanlei/p/9783053.html</dc:identifier>
</item>
<item>
<title>高性能数据库集群：读写分离 - 以梦为码</title>
<link>http://www.cnblogs.com/volare/p/9783041.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/volare/p/9783041.html</guid>
<description>
&lt;p&gt; 高性能数据库集群方案：读写分离。 其目的在于将访问压力分散到集群中的多个节点，减轻高并发现的访问压力，但是没有分散存储压力。&lt;/p&gt;
&lt;p&gt; 读写分离的基本架构图如下：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/623878/201810/623878-20181013145113802-2000632562.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一主对从或者一主一从，主节点负责读写操作，从节点负责读操作。&lt;/p&gt;

&lt;p&gt;主从分离的实现：&lt;/p&gt;
&lt;p&gt;　　1、数据库搭建主从集群，一主多从或者一主一从&lt;/p&gt;
&lt;p&gt;　　2、主机负责读写操作，从机负责读操作&lt;/p&gt;
&lt;p&gt;　　3、主机通过复制将数据同步到从机，从而使每一个数据库都保证数据的一致性&lt;/p&gt;
&lt;p&gt;　　主从同步的具体原理：&lt;/p&gt;
&lt;p&gt;　　　　　　将主机的数据复制到多个从机（slaves）中,同步过程中，主机将数据库的操作写到二进制日志(binary log)中，从机打开一个io线程，打开和主机的连接，并将主机的更新日志写入从机的中继日志中，&lt;/p&gt;
&lt;p&gt;　　　　从机开一个sql线程读取中继日志中的数据，进行更新，从而保证数据的主从数据的一致。&lt;/p&gt;

&lt;p&gt;我们在这里为了数据库的高性能引入了主从分离，但是往往在做架构时，会因为提高系统的高性能，高可用等，引入一些操作，会增加系统的复杂度。 主从的实现不是难点，难点在于引入主从后复杂度随之而来的解决方案。&lt;/p&gt;

&lt;p&gt;读写分离，增加了主从复制延迟 和分配机制两个负责度。&lt;/p&gt;

&lt;p&gt;1、主从复制延迟&lt;/p&gt;
&lt;p&gt;　　以 MySQL 为例，主从复制延迟可能达到 1 秒，如果有大量数据同步，延迟 1 分钟也是有可能的。主从复制延迟会带来一个问题：业务服务器将数据写入数据库主服务器立刻进行读取，但此时读操作的的访问时从机，主机还没有将数据复制到从机，所以此时查询会有问题。（比如用户刚进行注册，但是登录的时候却说无此用户）&lt;/p&gt;
&lt;p&gt;　　有以下几种解决方案：&lt;/p&gt;
&lt;p&gt;　　　　1、根据业务来区分，关键业务的读写全部指向主机，非关键业务采用读写分离&lt;/p&gt;
&lt;p&gt;　　　　2、加入redis,将redis中数据的过期时间设置为主从延迟的时间，当进行访问时，redis中有数据，则说明主从同步未完成，若redis中无数据则说明主从同步已完成。&lt;/p&gt;
&lt;p&gt;2、分配机制&lt;/p&gt;
&lt;p&gt;　　读写分离，怎么实现读写分离呢？怎么知道读哪个数据库呢？一般有两种方式：程序代码封装和中间件封装。&lt;/p&gt;
&lt;p&gt;　　1、程序代码的封装，在代码中抽象出来数据访问层，，实现读写操作分离和数据库服务器连接的管理&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/623878/201810/623878-20181013152225289-741518301.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/623878/201810/623878-20181013152329125-280170625.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;






</description>
<pubDate>Sat, 13 Oct 2018 07:26:00 +0000</pubDate>
<dc:creator>以梦为码</dc:creator>
<og:description>高性能数据库集群方案：读写分离。 其目的在于将访问压力分散到集群中的多个节点，减轻高并发现的访问压力，但是没有分散存储压力。 读写分离的基本架构图如下： 一主对从或者一主一从，主节点负责读写操作，从节</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/volare/p/9783041.html</dc:identifier>
</item>
<item>
<title>Swift几行代码解决UITableView空数据视图问题 - 紫色大番薯</title>
<link>http://www.cnblogs.com/purple-sweet-pottoes/p/Swift.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/purple-sweet-pottoes/p/Swift.html</guid>
<description>[unable to retrieve full-text content]tableView空数据问题 一般项目中tableView若数据为空时会有一个提示示意图 为了更好的管理这种提示示意图，笔者利用extension进行了简单的拓展 解决思路 利用swift面向协议的特点，使用协议来进行设置。 设计空视图协议 tableView设置空视图代理 每次重绘tableVie</description>
<pubDate>Sat, 13 Oct 2018 07:23:00 +0000</pubDate>
<dc:creator>紫色大番薯</dc:creator>
<dc:identifier>http://www.cnblogs.com/purple-sweet-pottoes/p/Swift.html</dc:identifier>
</item>
<item>
<title>【C#】判断字符串中是否包含指定字符串,contains与indexof方法效率问题 - willingtolove</title>
<link>http://www.cnblogs.com/willingtolove/p/9782533.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/willingtolove/p/9782533.html</guid>
<description>&lt;h3&gt;&lt;span&gt; #方法一：使用string.Contains方法&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　&lt;span&gt;string.Contains是大小写敏感的，如果要用该方法来判断一个string是否包含某个关键字keyword，需要把这个string和这个keyword都转成小写或大写再调用Contains方法；&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; key = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bbb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; temp = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaBBBcccDDD&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; isContains= temp.ToLower().Contains(key.ToLower());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;#方法二：使用sring.Index方法&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　&lt;span&gt;使用string.Index方法，然后通过&lt;em&gt;&lt;strong&gt;StringComparison.OrdinalIgnoreCase&lt;/strong&gt;&lt;/em&gt;指定查找过程忽略大小写；&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; key = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bbb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; temp = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaBBBcccDDD&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; isContains = temp.IndexOf(key,StringComparison.OrdinalIgnoreCase)&amp;gt;=&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt; #那什么时候使用Contains方法，什么时候使用Index方法，哪个效率高？&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;1、测试代码：&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;注：此测试针对的是拥有大量英文的情况下，并且指定的字符串为英文&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;每个方法测试1千万次，输出所用时间；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; N = &lt;span&gt;10000000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Stopwatch watch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stopwatch();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; source = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaabbbcccdddeeefffggghhhiiijjjkkklllmmmnnnooopppqqq&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; target = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AAA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;目标在开头部分时：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;不区分大小写：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             TestContains(source, target,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             TestIndexOf(source, target,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;区分大小写：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             target = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaa&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             TestContains(source, target,&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             TestIndexOf(source, target,&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            Console.WriteLine();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;目标在中部时：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;不区分大小写：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             target = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HHH&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             TestContains(source, target, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             TestIndexOf(source, target, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;区分大小写：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             target = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hhh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             TestContains(source, target, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             TestIndexOf(source, target, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            Console.WriteLine();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;目标在结尾时：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;不区分大小写：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             target = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QQQ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             TestContains(source, target,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             TestIndexOf(source, target,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;区分大小写：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             target = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qqq&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             TestContains(source, target,&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             TestIndexOf(source, target,&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;执行完毕，按任意键退出...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            Console.ReadKey();
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; TestIndexOf(&lt;span&gt;string&lt;/span&gt; source, &lt;span&gt;string&lt;/span&gt; target,&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; isIgnoreCase)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            watch.Reset();
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;            watch.Start();
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; N; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isIgnoreCase)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;                    source.IndexOf(target, StringComparison.OrdinalIgnoreCase);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;                    source.IndexOf(target);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;            watch.Stop();
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IndexOf: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + watch.ElapsedMilliseconds.ToString() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ms&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; TestContains(&lt;span&gt;string&lt;/span&gt; source, &lt;span&gt;string&lt;/span&gt; target,&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; isIgnoreCase)
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;            watch.Reset();
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;            watch.Start();
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; N; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isIgnoreCase)
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;                    source.ToLower().Contains(target.ToLower());
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;70&lt;/span&gt; &lt;span&gt;                    source.Contains(target);
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;            watch.Stop();
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Contains: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + watch.ElapsedMilliseconds.ToString() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ms&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;2、测试结果：&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720466/201810/720466-20181013151728711-1659628914.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;3、总结&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　&lt;span&gt;从测试结果（大量测试）中能明显看出，当拥有大量英文的字符串中：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　当不区分大小写时，string.IndexOf方法的效率明显高于string.Contains方法；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　当区分大小写时，string.Contains方法的效率明显高于string.IndexOf方法；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　如果判断的是中文，没有大小写之分，还是&lt;/strong&gt;string.Contains&lt;/span&gt;方法的效率高；&lt;/p&gt;
</description>
<pubDate>Sat, 13 Oct 2018 07:19:00 +0000</pubDate>
<dc:creator>willingtolove</dc:creator>
<og:description>#方法一：使用string.Contains方法 string.Contains是大小写敏感的，如果要用该方法来判断一个string是否包含某个关键字keyword，需要把这个string和这个key</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/willingtolove/p/9782533.html</dc:identifier>
</item>
<item>
<title>Keras入门（二）模型的保存、读取及加载 - jclian91</title>
<link>http://www.cnblogs.com/jclian91/p/9783009.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jclian91/p/9783009.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;本文将会介绍如何利用Keras来实现模型的保存、读取以及加载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  本文使用的模型为解决IRIS数据集的多分类问题而设计的深度神经网络（DNN）模型，模型的结构示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/9419034-ccb3c5e9f8aeee81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;DNN模型结构示意图&quot;/&gt;&lt;/p&gt;
&lt;p&gt;具体的模型参数可以参考文章：&lt;a href=&quot;https://www.jianshu.com/p/1d88a6ed707e&quot;&gt;Keras入门（一）搭建深度神经网络（DNN）解决多分类问题&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;模型保存&quot;&gt;模型保存&lt;/h3&gt;
&lt;p&gt;  Keras使用HDF5文件系统来保存模型。模型保存的方法很容易，只需要使用save()方法即可。&lt;br/&gt;  以&lt;a href=&quot;https://www.jianshu.com/p/1d88a6ed707e&quot;&gt;Keras入门（一）搭建深度神经网络（DNN）解决多分类问题&lt;/a&gt;中的DNN模型为例，整个模型的变量为model，我们设置模型共训练10次，在原先的代码中加入Python代码即可保存模型：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;    # save model
    print(&quot;Saving model to disk \n&quot;)
    mp = &quot;E://logs/iris_model.h5&quot;
    model.save(mp)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;保存的模型文件（iris_model.h5）如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/9419034-8593c69c81c266d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;iris_model.h5&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;模型读取&quot;&gt;模型读取&lt;/h3&gt;
&lt;p&gt;  保存后的iris_model.h5以HDF5文件系统的形式储存，在我们使用Python读取h5文件里面的数据之前，我们先用HDF5的可视化工具HDFView来查看里面的数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/9419034-103e7a8bd039e746.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;HDFView查看到的模型数据&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  我们感兴趣的是这个模型中的各个神经层之间的连接权重及偏重，也就是上图中的红色部分，model_weights里面包含了各个神经层之间的连接权重及偏重，分别位于dense_1,dense_2,dense_3中。蓝色部分为dense_3/dense_3/kernel:0的数据，即最后输出层的连接权重矩阵。&lt;br/&gt;  有了对模型参数的直观认识，我们要做的下一步工作就是读取各个神经层之间的连接权重及偏重。我们使用Python的h5py这个模块来这个iris_model.h5这个文件。关于h5py的快速入门指南，可以参考文章：&lt;a href=&quot;https://www.jianshu.com/p/a6328c4f4986&quot;&gt;h5py快速入门指南&lt;/a&gt;。&lt;br/&gt;  使用以下Python代码可以读取各个神经层之间的连接权重及偏重数据：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import h5py

# 模型地址
MODEL_PATH = 'E://logs/iris_model.h5'

# 获取每一层的连接权重及偏重
print(&quot;读取模型中...&quot;)
with h5py.File(MODEL_PATH, 'r') as f:
    dense_1 = f['/model_weights/dense_1/dense_1']
    dense_1_bias =  dense_1['bias:0'][:]
    dense_1_kernel = dense_1['kernel:0'][:]

    dense_2 = f['/model_weights/dense_2/dense_2']
    dense_2_bias = dense_2['bias:0'][:]
    dense_2_kernel = dense_2['kernel:0'][:]

    dense_3 = f['/model_weights/dense_3/dense_3']
    dense_3_bias = dense_3['bias:0'][:]
    dense_3_kernel = dense_3['kernel:0'][:]

print(&quot;第一层的连接权重矩阵：\n%s\n&quot;%dense_1_kernel)
print(&quot;第一层的连接偏重矩阵：\n%s\n&quot;%dense_1_bias)
print(&quot;第二层的连接权重矩阵：\n%s\n&quot;%dense_2_kernel)
print(&quot;第二层的连接偏重矩阵：\n%s\n&quot;%dense_2_bias)
print(&quot;第三层的连接权重矩阵：\n%s\n&quot;%dense_3_kernel)
print(&quot;第三层的连接偏重矩阵：\n%s\n&quot;%dense_3_bias)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出的结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;读取模型中...
第一层的连接权重矩阵：
[[ 0.04141677  0.03080632 -0.02768146  0.14334357  0.06242227]
 [-0.41209617 -0.77948487  0.5648218  -0.699587   -0.19246106]
 [ 0.6856315   0.28241938 -0.91930366 -0.07989818  0.47165248]
 [ 0.8655262   0.72175753  0.36529952 -0.53172135  0.26573092]]

第一层的连接偏重矩阵：
[-0.16441862 -0.02462054 -0.14060321  0.         -0.14293939]

第二层的连接权重矩阵：
[[ 0.39296603  0.01864707  0.12538083  0.07935872  0.27940807 -0.4565802 ]
 [-0.34312084  0.6446907  -0.92546445 -0.00538039  0.95466876 -0.32819661]
 [-0.7593299  -0.07227057  0.20751365  0.40547106  0.35726753  0.8884158 ]
 [-0.48096     0.11294878 -0.29462305 -0.410536   -0.23620337 -0.72703975]
 [ 0.7666149  -0.41720924  0.29576775 -0.6328017   0.43118536  0.6589351 ]]

第二层的连接偏重矩阵：
[-0.1899569   0.         -0.09710662 -0.12964155 -0.26443157  0.6050924 ]

第三层的连接权重矩阵：
[[-0.44450542  0.09977101  0.12196152]
 [ 0.14334357  0.18546402 -0.23861367]
 [-0.7284191   0.7859063  -0.878823  ]
 [ 0.0876545   0.51531947  0.09671918]
 [-0.7964963  -0.16435687  0.49531657]
 [ 0.8645698   0.4439873   0.24599855]]

第三层的连接偏重矩阵：
[ 0.39192322 -0.1266532  -0.29631865]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;值得注意的是，我们得到的这些矩阵的数据类型都是numpy.ndarray。&lt;br/&gt;  OK，既然我们已经得到了各个神经层之间的连接权重及偏重的数据，那我们能做什么呢？当然是去做一些有趣的事啦，那就是用我们自己的方法来实现新数据的预测向量(softmax函数作用后的向量)。so, really?&lt;br/&gt;  新的输入向量为[6.1, 3.1, 5.1, 1.1]，使用以下Python代码即可输出新数据的预测向量：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import h5py
import numpy as np

# 模型地址
MODEL_PATH = 'E://logs/iris_model.h5'

# 获取每一层的连接权重及偏重
print(&quot;读取模型中...&quot;)
with h5py.File(MODEL_PATH, 'r') as f:
    dense_1 = f['/model_weights/dense_1/dense_1']
    dense_1_bias =  dense_1['bias:0'][:]
    dense_1_kernel = dense_1['kernel:0'][:]

    dense_2 = f['/model_weights/dense_2/dense_2']
    dense_2_bias = dense_2['bias:0'][:]
    dense_2_kernel = dense_2['kernel:0'][:]

    dense_3 = f['/model_weights/dense_3/dense_3']
    dense_3_bias = dense_3['bias:0'][:]
    dense_3_kernel = dense_3['kernel:0'][:]

# 模拟每个神经层的计算，得到该层的输出
def layer_output(input, kernel, bias):
    return np.dot(input, kernel) + bias

# 实现ReLU函数
relu = np.vectorize(lambda x: x if x &amp;gt;=0 else 0)

# 实现softmax函数
def softmax_func(arr):
    exp_arr = np.exp(arr)
    arr_sum = np.sum(exp_arr)
    softmax_arr = exp_arr/arr_sum
    return softmax_arr

# 输入向量
unkown = np.array([[6.1, 3.1, 5.1, 1.1]], dtype=np.float32)

# 第一层的输出
print(&quot;模型计算中...&quot;)
output_1 = layer_output(unkown, dense_1_kernel, dense_1_bias)
output_1 = relu(output_1)

# 第二层的输出
output_2 = layer_output(output_1, dense_2_kernel, dense_2_bias)
output_2 = relu(output_2)

# 第三层的输出
output_3 = layer_output(output_2, dense_3_kernel, dense_3_bias)
output_3 = softmax_func(output_3)

# 最终的输出的softmax值
np.set_printoptions(precision=4)
print(&quot;最终的预测值向量为: %s&quot;%output_3)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其输出的结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;读取模型中...
模型计算中...
最终的预测值向量为: [[0.0242 0.6763 0.2995]]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  额，这个输出的预测值向量会是我们的DNN模型的预测值向量吗？这时候，我们就需要回过头来看看&lt;a href=&quot;https://www.jianshu.com/p/1d88a6ed707e&quot;&gt;Keras入门（一）搭建深度神经网络（DNN）解决多分类问题&lt;/a&gt;中的代码了，注意，为了保证数值的可比较性，笔者已经将DNN模型的训练次数改为10次了。让我们来看看原来代码的输出结果吧：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Using model to predict species for features: 
[[6.1 3.1 5.1 1.1]]

Predicted softmax vector is: 
[[0.0242 0.6763 0.2995]]

Predicted species is: 
Iris-versicolor&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Yes,两者的预测值向量完全一致！因此，我们用自己的方法也实现了这个DNN模型的预测功能，棒！&lt;/p&gt;
&lt;h3 id=&quot;模型加载&quot;&gt;模型加载&lt;/h3&gt;
&lt;p&gt;  当然，在实际的使用中，我们不需要再用自己的方法来实现模型的预测功能，只需使用Keras给我们提供好的模型导入功能（keras.models.load_model()）即可。使用以下Python代码即可加载模型&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;    # 模型的加载及使用
    from keras.models import load_model
    print(&quot;Using loaded model to predict...&quot;)
    load_model = load_model(&quot;E://logs/iris_model.h5&quot;)
    np.set_printoptions(precision=4)
    unknown = np.array([[6.1, 3.1, 5.1, 1.1]], dtype=np.float32)
    predicted = load_model.predict(unknown)
    print(&quot;Using model to predict species for features: &quot;)
    print(unknown)
    print(&quot;\nPredicted softmax vector is: &quot;)
    print(predicted)
    species_dict = {v: k for k, v in Class_dict.items()}
    print(&quot;\nPredicted species is: &quot;)
    print(species_dict[np.argmax(predicted)])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;Using loaded model to predict...
Using model to predict species for features: 
[[6.1 3.1 5.1 1.1]]

Predicted softmax vector is: 
[[0.0242 0.6763 0.2995]]

Predicted species is: 
Iris-versicolor&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;  本文主要介绍如何利用Keras来实现模型的保存、读取以及加载。&lt;br/&gt;  本文将不再给出完整的Python代码，如需完整的代码，请参考Github地址：&lt;a href=&quot;https://github.com/percent4/Keras_4_multiclass&quot; class=&quot;uri&quot;&gt;https://github.com/percent4/Keras_4_multiclass&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sat, 13 Oct 2018 07:18:00 +0000</pubDate>
<dc:creator>jclian91</dc:creator>
<og:description>Keras入门（二）模型的保存、读取及加载</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jclian91/p/9783009.html</dc:identifier>
</item>
</channel>
</rss>