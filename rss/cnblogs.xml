<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>简说设计模式——外观模式 - JAdam</title>
<link>http://www.cnblogs.com/adamjwh/p/9048594.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/adamjwh/p/9048594.html</guid>
<description>&lt;h2&gt;一、什么是外观模式&lt;/h2&gt;
&lt;p&gt;　　有些人可能炒过股票，但其实大部分人都不太懂，这种没有足够了解证券知识的情况下做股票是很容易亏钱的，刚开始炒股肯定都会想，如果有个懂行的帮帮手就好，其实基金就是个好帮手，支付宝里就有许多的基金，它将投资者分散的资金集中起来，交由专业的经理人进行管理，投资于股票、债券、外汇等领域，而基金投资的收益归持有者所有，管理机构收取一定比例的托管管理费用。&lt;/p&gt;
&lt;p&gt;　　其实本篇要说的这个设计模式就和这很有关系，由于当投资者自己买股票时，由于众多投资者对众多股票的联系太多，反而不利于操作，这在软件中就成为耦合性太高，而有了基金后，就变成众多用户只和基金打交道，关心基金的上涨和下跌，而实际上的操作确是基金经理人与股票和其它投资产品打交道，这就是外观模式。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;外观模式（Facade）&lt;/strong&gt;，为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。UML结构图如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1018770/201805/1018770-20180516215807111-1163114845.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　其中Facade是外观角色，也叫门面角色，客户端可以调用这个角色的方法，此角色知晓子系统的所有功能和责任，将客户端的请求代理给适当的子系统对象；Subsystem是子系统角色，可以同时拥有一个或多个子系统，每一个子系统都不是一个单独的类，而是一个类的集合，子系统并不知道门面的存在。&lt;/p&gt;
&lt;h3&gt;　　1. 外观类&lt;/h3&gt;
&lt;p&gt;　　这里我给出了四个Subsystem子系统，分别为A、B、C、D。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Facade {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;被委托的对象&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    SubSystemA a;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    SubSystemB b;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    SubSystemC c;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    SubSystemD d;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Facade() {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         a = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SubSystemA();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         b = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SubSystemB();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         c = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SubSystemC();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         d = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SubSystemD();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;提供给外部访问的方法&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; methodA() {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.a.dosomethingA();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; methodB() {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.b.dosomethingB();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; methodC() {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.c.dosomethingC();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; methodD() {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.d.dosomethingD();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     
&lt;span&gt;33&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 　　2. Subsystem子系统角色&lt;/h3&gt;
&lt;p&gt;　　这里为了不过多赘述，只放上A的代码，其余子系统类似。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SubSystemA {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; dosomethingA() {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         System.out.println(&quot;子系统方法A&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     
&lt;span&gt;7&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　3. Client客户端&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Client {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         Facade facade = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Facade();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        facade.methodA();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        facade.methodB();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     
&lt;span&gt;10&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行结果如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1018770/201805/1018770-20180516220338827-32202178.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;二、外观模式的应用&lt;/h2&gt;
&lt;h3&gt;　　1. 何时使用&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;客户端不需要知道系统内部的复杂联系，整个系统只提供一个“接待员”即可&lt;/li&gt;
&lt;li&gt;定义系统的入口&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt; 　　2. 方法&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;客户端不与系统耦合，外观类与系统耦合&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt; 　　3. 优点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;减少了系统的相互依赖&lt;/li&gt;
&lt;li&gt;提高了灵活性。不管系统内部如何变化，只要不影响到外观对象，任你自由活动&lt;/li&gt;
&lt;li&gt;提高了安全性。想让你访问子系统的哪些业务就开通哪些逻辑，不在外观上开通的方法，你就访问不到&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt; 　　4. 缺点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;不符合开不原则，修改很麻烦&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt; 　　5. 使用场景&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;为一个复杂的模块或子系统提供一个外界访问的接口&lt;/li&gt;
&lt;li&gt;子系统相对独立，外界对子系统的访问只要黑箱操作即可&lt;/li&gt;
&lt;li&gt;预防低水平人员带来的风险扩散&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt; 　　6. 应用实例&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;基金（用户只和基金打交道，实际操作为基金经理人与股票和其它投资品打交道）&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt; 三、外观模式的实现&lt;/h2&gt;
&lt;p&gt;　　我们就以开篇说的基金为例，来编写一下代码，熟悉外观模式的使用。UML图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1018770/201805/1018770-20180516222046525-864875223.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　1. 基金类（Fund）&lt;/h3&gt;
&lt;p&gt;　　基金类，基金经理人通过该类作为中间交互者，可以接受投资者的资金，统一对股票、国债、房地产进行购买和赎回操作。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Fund {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    Stock1 stock1;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    Stock2 stock2;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    Stock3 stock3;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    NationalDebt1 nationalDebt1;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    Realty1 realty1;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Fund() {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         stock1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stock1();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         stock2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stock2();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         stock3 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stock3();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         nationalDebt1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NationalDebt1();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         realty1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Realty1();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;购买基金&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; buyFund() {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        stock1.buy();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        stock2.buy();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        stock3.buy();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        nationalDebt1.buy();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        realty1.buy();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;赎回基金&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sellFund() {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        stock1.sell();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        stock2.sell();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        stock3.sell();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        nationalDebt1.sell();
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        realty1.sell();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     
&lt;span&gt;35&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 　　2. 股票、国债、房地产类&lt;/h3&gt;
&lt;p&gt;　　这里放一个股票作为示例，其余债券类似。内部由买入和卖出两种操作。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Stock1 {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;买股票&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; buy() {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         System.out.println(&quot;股票1买入&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;卖股票&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sell() {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         System.out.println(&quot;股票1卖出&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     
&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　3. Client客户端&lt;/h3&gt;
&lt;p&gt;　　用户通过该类对基金进行购买和赎回操作。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Client {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         Fund fund = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Fund();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;基金购买&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        fund.buyFund();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         System.out.println(&quot;-------------&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;基金赎回&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        fund.sellFund();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     
&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行结果如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1018770/201805/1018770-20180516222629857-976272985.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　由此可见，外观模式十分的简单，我们只需在客户端购买和赎回即可，内部的任何操作都不需要我们关注，对于面向对象有一定基础的朋友，即使没有听说过外观模式，也完全有可能在很多时候使用它，因为它完美地体现了依赖倒转原则和迪米特法则的思想，所以是非常常用的模式之一。&lt;/p&gt;
&lt;p&gt;　　我们使用外观模式的情况有很多，比如经典的MVC三层架构，可以考虑在数据访问层和业务逻辑层、业务逻辑层和表示层的层与层之间简历外观Facade，降低耦合。对于复杂难以维护的老系统，直接去修改或扩展都可能产生很多问题，可以分两个小组，一个开发Facade与老系统的交互，另一个只要了解Facade接口，直接开发新系统调用这些接口即可。&lt;/p&gt;

&lt;p&gt; 　　源码地址：&lt;a href=&quot;https://gitee.com/adamjiangwh/GoF&quot; target=&quot;_blank&quot;&gt;https://gitee.com/adamjiangwh/GoF&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 16 May 2018 14:33:00 +0000</pubDate>
<dc:creator>JAdam</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/adamjwh/p/9048594.html</dc:identifier>
</item>
<item>
<title>前端工程化（三）---Vue的开发模式 - lichking2017</title>
<link>http://www.cnblogs.com/lichking2017/p/9048557.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lichking2017/p/9048557.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/lichking2017/p/9016033.html&quot; target=&quot;_blank&quot;&gt;从0开始，构建前后端分离应用&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;导航&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/lichking2017/p/9023821.html&quot; target=&quot;_blank&quot;&gt;前端工程化（一）---工程基础目录搭建&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/lichking2017/p/9024642.html&quot; target=&quot;_blank&quot;&gt;前端工程化（二）---webpack配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/lichking2017/p/9048557.html&quot; target=&quot;_blank&quot;&gt;前端工程化（三）---Vue的开发模式&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;通过前两部分的总结，项目具备了一个可以运行的前端工程。接下来的工作就是具体的功能开发了，我选择了Vue作为前端的框架，使用iView作为UI库。&lt;/p&gt;
&lt;p&gt;建议在使用Vue开发之前一定要通读 &lt;a href=&quot;https://cn.vuejs.org/v2/guide/&quot; target=&quot;_blank&quot;&gt;Vue官网教程&lt;/a&gt; 对Vue中的基本概念及整体的思想有一个基本的认识。最好的教程莫过于官方文档了，不要上来就各种百度，从一些只言片语中摸索，这样会少走弯路。&lt;/p&gt;
&lt;p&gt;个人感觉使用Vue进行开发，首先要改变以往前端开发中形成的思维模式。对于页面元素的操作，由原有的dom操作转换为数据操作。&lt;/p&gt;
&lt;p&gt;dom操作的事情，Vue已经替我们干了，我们只需要关注数据就可以了。页面元素同数据进行了绑定（实际上是Vue模板的元素，只不过Vue的设计拥抱原生的html语法，看上去模板的元素与原生的html元素长得一样），当数据变化的时候，dom也随之变化。&lt;/p&gt;

&lt;p&gt;1、Vue的开发模式：定义一个扩展名为.vue的文件，其中包含三部分内容，模板、js、样式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;html&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
 
}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;css&quot;&lt;/span&gt;&lt;span&gt; scoped&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;实际的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39.5&quot;&gt;&lt;img id=&quot;code_img_closed_a39b1bf7-1c21-4e72-9720-da952a9a78e0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a39b1bf7-1c21-4e72-9720-da952a9a78e0&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a39b1bf7-1c21-4e72-9720-da952a9a78e0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Modal &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;showFlag&quot;&lt;/span&gt;&lt;span&gt; :width&lt;/span&gt;&lt;span&gt;=&quot;width&quot;&lt;/span&gt;&lt;span&gt; :mask-closable&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; :closable&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;=&quot;header&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;color:#f60;text-align:center&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Icon &lt;/span&gt;&lt;span&gt;:type&lt;/span&gt;&lt;span&gt;=&quot;customHeader.icon&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{customHeader.title}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;text-align:center&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;slot &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;请定义具体显示内容&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;=&quot;footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; size&lt;/span&gt;&lt;span&gt;=&quot;default&quot;&lt;/span&gt;&lt;span&gt; :loading&lt;/span&gt;&lt;span&gt;=&quot;modal_loading&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;cancel1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;取消&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;primary&quot;&lt;/span&gt;&lt;span&gt; size&lt;/span&gt;&lt;span&gt;=&quot;default&quot;&lt;/span&gt;&lt;span&gt; :loading&lt;/span&gt;&lt;span&gt;=&quot;modal_loading&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;confirm1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;确认&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Modal&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        data: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                modal_loading: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                showFlag: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                onConfirm: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;confirm&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                onCancel: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cancel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                updateFlag:&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否为新增操作&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        },
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        props: {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            customHeader: {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;标题&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                icon: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;information-circled&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            width: {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                type: Number,
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 &lt;span&gt;default&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;500&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        },
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        methods: {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            confirm1() {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$emit(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.onConfirm,&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.updateFlag)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            cancel1() {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$emit(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.onCancel)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.showFlag &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            showAdd() {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.updateFlag &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.showFlag &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;            showEdit(){
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.updateFlag &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.showFlag &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;            hide() {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.showFlag &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt; 
&lt;span&gt;63&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;scoped&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt; 
&lt;span&gt;65&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;2、定义组件之间共享的数据&lt;/p&gt;
&lt;p&gt;在根Vue中定义数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import Vue from 'vue'
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import App from './app.vue'&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;//资源
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;import Data from './assets/data/data.json'&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt; &lt;span&gt;new Vue({
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;    data:{
68       dict:Data
69     },&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;    render: h =&amp;gt; h(App)
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; }).$mount('#app')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用：在子组件中，通过this.$root.dict.fileServerPath引用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;    export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;        data() {&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;        },
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;        methods: {&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;        },
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;        watch: {
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;            defaultFiles: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (newV, oldV) {
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;                 &lt;span&gt;debugger&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt; &lt;span&gt;                newV.forEach(e &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;&lt;span&gt;                    e.url &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$root.dict.fileServerPath &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; e.url
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;                    e.status &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;finished&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt;                     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$refs.upload.fileList.push(e)
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;                })
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; &lt;span&gt;        },
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;        mounted() {
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.uploadList &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$refs.upload.fileList;
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; 
&lt;span&gt;141&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;scoped&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;178&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、定义Vue公共组件的方式&lt;/p&gt;
&lt;p&gt;方式一&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//公共组件
import wolfTotem from './components/common/WolfTotem.js'
//将组件暴露为全局的句柄
window.WT = wolfTotem&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;方式二&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
import MyLayout from './layout.vue'&lt;span&gt;

const _layout &lt;/span&gt;=&lt;span&gt; {
  install:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(Vue){
    Vue.component(&lt;/span&gt;'WtLayout'&lt;span&gt;,MyLayout)
  }
}

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; _layout
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自定义组件&lt;/span&gt;
import WtLayout from './components/layout/layout.js'

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;织入&lt;/span&gt;
Vue.use(WtLayout)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方式三&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
import HttpUtil from './assets/js/httpUtil.js'&lt;span&gt;
Vue.prototype.$http &lt;/span&gt;= HttpUtil
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 前端的开发围绕着上面的方式进行&lt;/p&gt;

</description>
<pubDate>Wed, 16 May 2018 14:24:00 +0000</pubDate>
<dc:creator>lichking2017</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lichking2017/p/9048557.html</dc:identifier>
</item>
<item>
<title>redis主从复制 - wenbochang</title>
<link>http://www.cnblogs.com/wenbochang/p/9044556.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wenbochang/p/9044556.html</guid>
<description>&lt;p&gt;最近在看付磊，张益军老师的《Redis开发与运维》。学到了很多，也遇到了很多坑，这里我想把比较重要的主从复制这一章节，我把自己的理解与实践记录下来，方便自己的学习，也为社区做一点贡献。&lt;/p&gt;
&lt;h2&gt;(1)：一主二仆&lt;/h2&gt;
&lt;h3&gt;&lt;strong&gt;概念：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;主从复制最经典的结构就是 &lt;strong&gt;&quot;一主二仆&quot;。&lt;/strong&gt;即一个master主机，两个slave从机。一个master主机负责写入数据，而两个从机slave只负责读数据，真正实现了读写分离。在高并发下减轻了一台redis的压力。                                            &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1335795/201805/1335795-20180516151335032-818092110.png&quot; alt=&quot;&quot; width=&quot;329&quot; height=&quot;222&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;部署：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;1：首先我们先开启三台redis服务器。端口分别为665，666，667&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1335795/201805/1335795-20180516151742298-1564804447.png&quot; alt=&quot;&quot; width=&quot;620&quot; height=&quot;91&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2：其次将666， 667端口的服务器挂在665 master主机上。&lt;/p&gt;
&lt;p&gt;具体可以用这个命令设置：slaveof host port (eg..   SLAVEOF 127.0.0.1 665)。最终结果如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1335795/201805/1335795-20180516152025735-1516675346.png&quot; alt=&quot;&quot; width=&quot;376&quot; height=&quot;260&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1335795/201805/1335795-20180516152048674-1307621090.png&quot; alt=&quot;&quot; width=&quot;331&quot; height=&quot;251&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1335795/201805/1335795-20180516152203746-1326611742.png&quot; alt=&quot;&quot; width=&quot;355&quot; height=&quot;257&quot;/&gt;&lt;/p&gt;









&lt;h2&gt;（2）哨兵&lt;/h2&gt;
&lt;p&gt;现在出现了一个问题啦。如果master在夜晚凌晨突然宕机了，怎么办怎么办????而我们的开发人员都还在睡觉呢？？？&lt;/p&gt;
&lt;p&gt;此时出现而哨兵可以进行巡逻，发现问题然后解决问题？？？这句话怎么这么熟悉&lt;/p&gt;
&lt;p&gt;1：首先建立一个名为 sentinel.conf 的配置文件。&lt;/p&gt;
&lt;p&gt;sentinel monitor host12581 127.0.0.1 667 1&lt;/p&gt;
&lt;p&gt;//  sentinel monitor 哨兵名字 监控ip地址 监控端口号 投票超过多少才当选为leader&lt;/p&gt;
&lt;p&gt;sentinel failover-timeout host12581 1800   //  投票失败后多少秒后进行重拾  默认30s&lt;br/&gt;sentinel auth-pass host12581 changwenbo // 密码&lt;/p&gt;
&lt;p&gt;2：其次用 redis-sentinel sentinel.conf 启动即可。&lt;/p&gt;
&lt;p&gt;启动后他就会自动巡逻监控redis端口为665master，和666，667slave的服务器&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;3：此时我突然kill掉端口为665的master主机。&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;通过查看日志，我在  12580:M 16 May 14:59:23.294 # User requested shutdown...  59分23秒的时候shutdown掉了665master机子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1335795/201805/1335795-20180516153506050-397042475.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;335&quot;/&gt;&lt;/p&gt;

&lt;p&gt;是不是可以看出来，在23秒宕机后，哨兵在30s后，即53秒立刻发现了master已经连接不上出现了问题。&lt;/p&gt;
&lt;p&gt;首先进行了投票选举，谁得到的票多，谁就成为新的老大，带领大家。可以看出来667当选了。然后他就成功当选了master，并且有了一个666的slave的小弟。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;4：&lt;strong&gt;那突然此时已经宕机的665杀回来怎么办？&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1335795/201805/1335795-20180516154051855-1372287183.png&quot; alt=&quot;&quot; width=&quot;686&quot; height=&quot;178&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通过看日志，明显可以看出来，在04分46秒我开启了665服务，在47秒哨兵侦测到。然后跟665旧的master说，不好意思，我们已经又老大了，老大是667，你去当667的小弟吧。最后665就是667的小弟了。最后的结果为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1335795/201805/1335795-20180516154427764-1397317090.png&quot; alt=&quot;&quot; width=&quot;399&quot; height=&quot;256&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最终哨兵完成了自动化部署，减轻了开发人员的压力，你好我也好。&lt;/p&gt;
&lt;h2&gt;（3）总结与问题：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;问题：&lt;/strong&gt;&lt;/span&gt;当我开启哨兵以后，master主机宕机以后，哨兵并没有起作用，日志大概就是不能发现slave，不知道确定哪个slave当选master。经过不写努力的检查，发觉配置文件里面的这一句话：&lt;/p&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;################################## NETWORK #####################################&lt;/p&gt;
&lt;p&gt;# By default, if no &quot;bind&quot; configuration directive is specified, Redis listens&lt;br/&gt;# for connections from all the network interfaces available on the server.&lt;br/&gt;# It is possible to listen to just one or multiple selected interfaces using&lt;br/&gt;# the &quot;bind&quot; configuration directive, followed by one or more IP addresses.&lt;br/&gt;#&lt;br/&gt;# Examples:&lt;br/&gt;#&lt;br/&gt;# bind 192.168.1.100 10.0.0.1&lt;br/&gt;# bind 127.0.0.1 ::1&lt;br/&gt;#&lt;br/&gt;# ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the&lt;br/&gt;# internet, binding to all the interfaces is dangerous and will expose the&lt;br/&gt;# instance to everybody on the internet. So by default we uncomment the&lt;br/&gt;# following bind directive, that will force Redis to listen only into&lt;br/&gt;# the IPv4 lookback interface address (this means Redis will be able to&lt;br/&gt;# accept connections only from clients running into the same computer it&lt;br/&gt;# is running).&lt;br/&gt;#&lt;br/&gt;# IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES&lt;br/&gt;# JUST COMMENT THE FOLLOWING LINE.&lt;br/&gt;# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;用我的渣英文翻译大概如下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;默认的,如果没有bind的配置指令,redis监听服务上的所有连接,如果你仅仅监听一个或者多个的话,bind的配置,按照如下的一个或者多个ip的方式&lt;br/&gt;警告：如果电脑上的redis直接暴露给网络,绑定所有的了地址是危险的并且将会暴露给在网路上的每一个人。所以我们默认的取消注释,强制的配置了一个IPV4的回环地址。（那就意味着在redis运行时只可以接收来自本电脑的连接）。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;但是：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我的Java客户端连接远程的redis必须要把bind注释掉，那么所有网络外网均可访问。但是这样的话，当master挂掉之后，哨兵需要连接到slave，那么必须指定为localhost，负责找不到slave。&lt;span&gt;&lt;strong&gt;亲测必须不能注销掉bind 127.0.0.1&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;众所周知，校园网是没有ip的，只有一个全局ip通过NAT分配端口，实现联网的。那么如何配置只有特定的ip可以连接redis呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这里我必须把bind注销掉才可以远程连接，但哨兵正常工作又不能注销掉bind的，惆怅啊。有大佬能给一个不错的解决方案么？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;redis是一个强大的缓存系统，有很多很不错的功能，搞得想看其中的源码了。但我一个Java程序员完全不懂C++那一套指针跑来跑去的。还有这个主从复制服务器我知道怎么配了，但客户端还不是很清楚，还需要继续学习。如何配置多端口的redis，挂掉了怎么实现客户端自动切换端口等一系列操纵。&lt;/p&gt;
</description>
<pubDate>Wed, 16 May 2018 14:24:00 +0000</pubDate>
<dc:creator>wenbochang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wenbochang/p/9044556.html</dc:identifier>
</item>
<item>
<title>Redis集群 - 不要乱摸</title>
<link>http://www.cnblogs.com/cjsblog/p/9048545.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cjsblog/p/9048545.html</guid>
<description>&lt;p&gt;&lt;span&gt;Redis集群提供一种方式自动将数据分布在多个Redis节点上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Redis Cluster provides a way to run a Redis installation where data is &lt;strong&gt;automatically sharded across multiple Redis nodes&lt;/strong&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;每个Redis集群中的节点都需要打开两个TCP连接。一个连接用于正常的给Client提供服务，比如6379，还有一个额外的端口（通过在这个端口号上加10000）作为数据端口，比如16379。第二个端口（本例中就是16379）用于集群总线，这是一个用二进制协议的点对点通信信道。这个集群总线（Cluster bus）用于节点的失败侦测、配置更新、故障转移授权，等等。客户端从来都不应该尝试和这些集群总线端口通信，它们只应该和正常的Redis命令端口进行通信。注意，确保在你的防火墙中开放着两个端口，否则，Redis集群节点之间将无法通信。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;命令端口和集群总线端口的偏移量总是10000。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意，如果想要集群按照你想的那样工作，那么集群中的每个节点应该：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;正常的客户端通信端口（通常是6379）用于和所有可到达集群的所有客户端通信&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;集群总线端口（the client port + 10000）必须对所有的其它节点是可到达的&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;也就是，要想集群正常工作，集群中的每个节点需要做到以下两点：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;正常的客户端通信端口（通常是6379）必须对所有的客户端都开放，换言之，所有的客户端都可以访问&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;集群总线端口（客户端通信端口 + 10000）必须对集群中的其它节点开放，换言之，其它任意节点都可以访问&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;如果你没有开放TCP端口，你的集群可能不会像你期望的那样工作。集群总线用一个不同的二进制协议通信，用于节点之间的数据交换&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Redis集群不同一致性哈希，它用一种不同的分片形式，在这种形式中，每个key都是一个概念性（&lt;strong&gt;hash slot&lt;/strong&gt;）的一部分。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;There are 16384 hash slots in Redis Cluster, and to compute what is the hash slot of a given key, we simply take the CRC16 of the key modulo 16384.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Redis集群中有16384个&lt;span&gt;hash slots&lt;/span&gt;，为了计算给定的key应该在哪个hash slot上，我们简单地用这个key的CRC16值来对16384取模。（即：key的CRC16  %  16384）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Every node in a Redis Cluster is responsible for a subset of the hash slots&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Redis集群中的每个节点负责一部分hash slots，假设你的集群有3个节点，那么：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;Node A contains hash slots from 0 to 5500&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Node B contains hash slots from 5501 to 11000&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Node C contains hash slots from 11001 to 16383&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;允许添加和删除集群节点。比如，如果你想增加一个新的节点D，那么久需要从A、B、C节点上删除一些hash slot给到D。同样地，如果你想从集群中删除节点A，那么会将A上面的hash slots移动到B和C，当节点A上是空的时候就可以将其从集群中完全删除。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为将hash slots从一个节点移动到另一个节点并不需要停止其它的操作，添加、删除节点以及更改节点所维护的hash slots的百分比都不需要任何停机时间。也就是说，移动hash slots是并行的，移动hash slots不会影响其它操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Redis支持多个key操作，只要这些key在一个单个命令中执行（或者一个事务，或者Lua脚本执行），那么它们就属于相同的hash slot。你也可以用hash tags俩强制多个key都在相同的hash slot中。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;In order to remain available when a subset of master nodes are failing or are not able to communicate with the majority of nodes, Redis Cluster uses a master-slave model where every hash slot has from 1 (the master itself) to N replicas (N-1 additional slaves nodes).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当部分master节点失败了，或者不能够和大多数节点通信的时候，为了保持可用，Redis集群用一个master-slave模式，这样的话每个hash slot就有1到N个副本。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在我们的例子中，集群有A、B、C三个节点，如果节点B失败了，那么5501-11000之间的hash slot将无法提供服务。然而，当我们给每个master节点添加一个slave节点以后，我们的集群最终会变成由A、B、C三个master节点和A1、B1、C1三个slave节点组成，这个时候如果B失败了，系统仍然可用。节点B1是B的副本，如果B失败了，集群会将B1提升为新的master，从而继续提供服务。然而，如果B和B1同时失败了，那么整个集群将不可用。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;Redis Cluster is not able to guarantee strong consistency&lt;/strong&gt;. In practical terms this means that under certain conditions it is possible that Redis Cluster will lose writes that were acknowledged by the system to the client.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Redis集群不能保证强一致性。换句话说，Redis集群可能会丢失一些写操作。&lt;/span&gt;&lt;span&gt;The first reason why Redis Cluster can lose writes is because it uses asynchronous replication.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Redis集群可能丢失写的第一个原因是因为它用异步复制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;写可能是这样发生的：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;客户端写到master B&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;master B回复客户端OK&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;master B将这个写操作广播给它的slaves B1、B2、B3&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;正如你看到的那样，B没有等到B1、B2、B3确认就回复客户端了，也就是说，B在回复客户端之前没有等待B1、B2、B3的确认，这对应Redis来说是一个潜在的风险。所以，如果客户端写了一些东西，B也确认了这个写操作，但是在它将这个写操作发给它的slaves之前它宕机了，随后其中一个slave（没有收到这个写命令）可能被提升为新的master，于是这个写操作就永远丢失了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这和大多数配置为每秒刷新一次数据到磁盘的情况是一样的。你可以通过强制数据库在回复客户端以前刷新数据，但是这样做的结果会导致性能很低，这就相当于同步复制了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;基本上，需要在性能和一致性之间做一个权衡。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果绝对需要的话，Redis集群也是支持同步写的，这是通过WAIT命令实现的，这使得丢失写的可能性大大降低。然而，需要注意的是，Redis集群没有实现强一致性，即使用同步复制，因为总是有更复杂的失败场景使得一个没有接受到这个写操作的slave当选为新的master。&lt;/span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;however note that Redis Cluster does not implement strong consistency even when synchronous replication is used: it is always possible under more complex failure scenarios that a slave that was not able to receive the write is elected as master.&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另一个值得注意的场景，即Redis集群将会丢失写操作，这发生在一个网络分区中，在这个分区中，客户端与少数实例(包括至少一个主机)隔离。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假设这样一个例子，有一个集群有6个节点，分别由A、B、C、A1、B1、C1组成，三个masters三个slaves，有一个客户端我们叫Z1。在分区发生以后，可能分区的一边是A、C、A1、B1、C1，另一边有B和Z1。此时，Z1仍然可用写数据到B，如果网络分区的时间很短，那么集群可能继续正常工作，而如果分区的时间足够长以至于B1在多的那一边被提升为master，那么这个时候Z1写到B上的数据就会丢失。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;什么意思呢？简单的来说就是，本来三主三从在一个网络分区中，突然网络分区发生，于是一边是A、C、A1、B1、C1，另一边是B和Z1，这时候Z1往B中写数据，于此同时另一边（即A、C、A1、B1、C1）认为B已经挂了，于是将B1提升为master，当分区回复的时候，由于B1变成了master，所以B就成了slave，于是B就要丢弃它自己原有的数据而从B1那里同步数据，于是乎先去Z1写到B的数据就丢失了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意，有一个最大窗口，这是Z1能够向B写的最大数量：如果时间足够的话，分区的多数的那一边已经选举完成，选择一个slave成为master，此时，所有在少数的那一边的master节点将停止接受写。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;也就说说，有一个最大窗口的设置项，它决定了Z1在那种情况下能够向B发送多数写操作：如果分隔的时间足够长，多数的那边已经选举slave成为新的master，此后少数那边的所有master节点将不再接受写操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在Redis集群中，这个时间数量是一个非常重要的配置指令，它被称为node timeout。在超过node timeout以后，一个master节点被认为已经失败了，并且选择它的一个副本接替master。类似地，如果在过了node timeout时间以后，没有一个master能够和其它大多数的master通信，那么整个集群都将停止接受写操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;After node timeout has elapsed, a master node is considered to be failing, and can be replaced by one of its replicas. Similarly after node timeout has elapsed without a master node to be able to sense the majority of the other master nodes, it enters an error state and stops accepting writes.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;cluster-enabled &amp;lt;yes/no&amp;gt;:&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;如果是yes，表示启用集群，否则以单例模式启动&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;cluster-config-file &amp;lt;filename&amp;gt;:&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;可选，这不是一个用户可编辑的配置文件，这个文件是Redis集群节点自动持久化每次配置的改变，为了在启动的时候重新读取它。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;cluster-node-timeout &amp;lt;milliseconds&amp;gt;:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;超时时间，集群节点不可用的最大时间。如果一个master节点不可到达超过了指定时间，则认为它失败了。注意，每一个在指定时间内不能到达大多数master节点的节点将停止接受查询请求。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;cluster-slave-validity-factor &amp;lt;factor&amp;gt;:&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;如果设置为0，则一个slave将总是尝试故障转移一个master。如果设置为一个正数，那么最大失去连接的时间是node timeout乘以这个factor。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;cluster-migration-barrier &amp;lt;count&amp;gt;:&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;一个master和slave保持连接的最小数量（即：最少与多少个slave保持连接），也就是说至少与其它多少slave保持连接的slave才有资格成为master。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;cluster-require-full-coverage &amp;lt;yes/no&amp;gt;:&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;如果设置为yes，这也是默认值，如果key space没有达到百分之多少时停止接受写请求。如果设置为no，将仍然接受查询请求，即使它只是请求部分key。 &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;为了创建集群，首先我必须有一些以集群模式（&lt;strong&gt;cluster mode&lt;/strong&gt;）运行的Redis实例。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面是一个最小的Redis集群配置文件：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; port 7000
&lt;span&gt;2&lt;/span&gt; cluster-&lt;span&gt;enabled yes
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; cluster-config-&lt;span&gt;file nodes.conf
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; cluster-node-timeout 5000
&lt;span&gt;5&lt;/span&gt; appendonly yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;正如你看到的那样，启用集群模式只需要配置cluster-enabled指令为yes即可。每个实例都包含一个文件，这个文件存储该节点的配置，模式是nodes.conf。这个文件从来不会被手动创建，它是Redis集群实例启动的时候生成的，并且每次在需要的时候自动更新。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Note that the &lt;strong&gt;minimal cluster&lt;/strong&gt; that works as expected requires to contain at least three master nodes.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;最小的集群至少需要3个master节点&lt;/strong&gt;。这里，我们为了测试，用三主三从。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir&lt;/span&gt; cluster-&lt;span&gt;test
cd cluster&lt;/span&gt;-&lt;span&gt;test
&lt;/span&gt;&lt;span&gt;mkdir&lt;/span&gt; &lt;span&gt;7000&lt;/span&gt; &lt;span&gt;7001&lt;/span&gt; &lt;span&gt;7002&lt;/span&gt; &lt;span&gt;7003&lt;/span&gt; &lt;span&gt;7004&lt;/span&gt; &lt;span&gt;7005&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
cd &lt;span&gt;7000&lt;/span&gt;
&lt;span&gt;touch&lt;/span&gt;&lt;span&gt; redis.conf
&lt;/span&gt;&lt;span&gt;cp&lt;/span&gt; &lt;span&gt;7000&lt;/span&gt;/redis.conf &lt;span&gt;7001&lt;/span&gt;/
&lt;span&gt;cp&lt;/span&gt; &lt;span&gt;7000&lt;/span&gt;/redis.conf &lt;span&gt;7002&lt;/span&gt;/
&lt;span&gt;cp&lt;/span&gt; &lt;span&gt;7000&lt;/span&gt;/redis.conf &lt;span&gt;7003&lt;/span&gt;/
&lt;span&gt;cp&lt;/span&gt; &lt;span&gt;7000&lt;/span&gt;/redis.conf &lt;span&gt;7004&lt;/span&gt;/
&lt;span&gt;cp&lt;/span&gt; &lt;span&gt;7000&lt;/span&gt;/redis.conf &lt;span&gt;7005&lt;/span&gt;/
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cp&lt;/span&gt; ../redis-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;/src/redis-server ./
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;现在的目录结构应该是这样的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516192841730-1866290334.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;修改端口，依次启动各个实例：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
cd &lt;span&gt;7000&lt;/span&gt;&lt;span&gt;
.&lt;/span&gt;/redis-server &lt;span&gt;7000&lt;/span&gt;/&lt;span&gt;redis.conf

cd &lt;/span&gt;&lt;span&gt;7001&lt;/span&gt;&lt;span&gt;
.&lt;/span&gt;/redis-server &lt;span&gt;7001&lt;/span&gt;/&lt;span&gt;redis.conf 

cd &lt;/span&gt;&lt;span&gt;7002&lt;/span&gt;&lt;span&gt;
.&lt;/span&gt;/redis-server &lt;span&gt;7002&lt;/span&gt;/&lt;span&gt;redis.conf 

cd &lt;/span&gt;&lt;span&gt;7003&lt;/span&gt;&lt;span&gt;
.&lt;/span&gt;/redis-server &lt;span&gt;7003&lt;/span&gt;/&lt;span&gt;redis.conf 

cd &lt;/span&gt;&lt;span&gt;7004&lt;/span&gt;&lt;span&gt;
.&lt;/span&gt;/redis-server &lt;span&gt;7004&lt;/span&gt;/redis.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516193118857-606058439.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516200511971-1849170381.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516193207522-1230776776.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516193519242-2092207805.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;正如你看到的那样，每个Redis实例都有一个ID，在节点的整个生命周期中这个唯一的code是不会变的，我们把它叫做&lt;strong&gt;Node ID&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;6.1、创建集群&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;最简单的实现是用redis-trib工具，它在src目录下。它是一个ruby程序，所以需要先安装ruby。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt;&lt;span&gt; ruby
&lt;/span&gt;&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt;&lt;span&gt; rubygems
gem &lt;/span&gt;&lt;span&gt;install&lt;/span&gt; redis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这个时候可能会报错，如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516200814086-1217394790.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;于是，要升级Ruby版本&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
gpg --keyserver hkp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB&lt;/span&gt;
curl -sSL https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;get.rvm.io | bash -s stable&lt;/span&gt;
source /etc/profile.d/rvm.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;
rvm list known
rvm &lt;/span&gt;&lt;span&gt;install&lt;/span&gt; &lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;接下来，创建集群&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
gem &lt;span&gt;install&lt;/span&gt;&lt;span&gt; redis
.&lt;/span&gt;/redis-trib.rb create --replicas &lt;span&gt;1&lt;/span&gt; &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt; &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt; &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt; &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7003&lt;/span&gt; &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7004&lt;/span&gt; &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7005&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516201125485-1051783809.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516201323816-767068149.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;这里，我们使用&lt;/span&gt;&lt;strong&gt;create&lt;/strong&gt;&lt;span&gt;命令来创建一个新的集群。选项--replicas 1表示我们想为每个master指定一个slave。其余参数是需要加到集群的实例地址。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516202531290-1009549203.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们可以看到，7000、7001、7002是master，7004是7000的slave，7005是7001的slave，7003是7002的slave。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cluster nodes命令的输出格式是这样的：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;Node ID&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;ip:port&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;flags: master, slave, myself, fail, ...&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;if it is a slave, the Node ID of the master&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Time of the last pending PING still waiting for a reply.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Time of the last PONG received.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Configuration epoch for this node (see the Cluster specification).&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Status of the link to this node.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Slots served...&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;接下来，设置一个key试试：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516203555799-830807121.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516203602379-56495292.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;6.2、添加一个新节点（Adding a new node）&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;添加一个新节点基本上就是添加一个空节点，然后将一些数据移动到其中，在这种情况下，它是一个新的master，或者你明确的设置它作为副本，那么这种情况下它就是一个slave。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@ecs-d6b3-&lt;span&gt;0002&lt;/span&gt; cluster-test]# &lt;span&gt;ls&lt;/span&gt;&lt;span&gt;
[root@ecs&lt;/span&gt;-d6b3-&lt;span&gt;0002&lt;/span&gt; cluster-test]# &lt;span&gt;cp&lt;/span&gt; -R &lt;span&gt;7005&lt;/span&gt; &lt;span&gt;7006&lt;/span&gt;&lt;span&gt;
[root@ecs&lt;/span&gt;-d6b3-&lt;span&gt;0002&lt;/span&gt; cluster-test]# &lt;span&gt;vi&lt;/span&gt; &lt;span&gt;7006&lt;/span&gt;/&lt;span&gt;redis.conf
[root@ecs&lt;/span&gt;-d6b3-&lt;span&gt;0002&lt;/span&gt; cluster-test]# cd &lt;span&gt;7006&lt;/span&gt;&lt;span&gt;
[root@ecs&lt;/span&gt;-d6b3-&lt;span&gt;0002&lt;/span&gt; &lt;span&gt;7006&lt;/span&gt;]# ../redis-server redis.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;现在，我们用redis-trib来添加一个节点到已存在的集群：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;./redis-trib.rb add-node &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7006&lt;/span&gt; &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;As you can see I used the &lt;strong&gt;add-node&lt;/strong&gt; command specifying the address of the new node as first argument, and the address of a random existing node in the cluster as second argument.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;正如你看到的那样，add-node命令的第一个参数是新节点的地址，第二个参数是已存在的集群中的任意节点地址。事实上，redis-trib只是发了一个cluster meet消息给这个节点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（PS：我在操作的过程中发现，不用add-node命令，直接启动7006以后它就直接加入集群了，不知道是不是因为我是同一台机器上操作，或者是因为只有一个集群，我猜测可能是因为这是一个伪集群，哈哈哈，先不管了。。。）&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;6.3、添加一个节点作为副本（Adding a new node as a replica）&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./redis-trib.rb add-node --slave &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7006&lt;/span&gt; &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516211300533-2118889236.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;6.4、删除一个节点（Removing a node）&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./redis-trib del-node &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt; `&amp;lt;node-&lt;span&gt;id&lt;/span&gt;&amp;gt;`
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./redis-trib.rb del-node &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7006&lt;/span&gt; 7c7b7f68bc56bf24cbb36b599d2e2d97b26c5540
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;6.5、重新分片（Resharding the cluster）&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./redis-trib.rb reshard &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
./redis-trib.rb reshard --from &amp;lt;node-&lt;span&gt;id&lt;/span&gt;&amp;gt; --to &amp;lt;node-&lt;span&gt;id&lt;/span&gt;&amp;gt; --slots &amp;lt;number of slots&amp;gt; --yes &amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;6.6、杀死Redis实例&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;pkill -&lt;span&gt;9&lt;/span&gt; redis&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;6.7、停止集群/删除集群&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;删除集群就是依次删除集群中的所有节点，但在此之前需要将带删除的节点上的数据迁移到其它节点上，因此需要重新分片。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;后来想想，其实也没有必要停止集群&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;6.8、用create-cluster创建集群&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;之前我们创建集群用的是redis-trib，现在我们用create-cluster来创建集群。&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;进入utils/create-cluster，可以看README&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;create-cluster start&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;create-cluster create&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516220226496-1744647659.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516220524755-859306783.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516220533085-138409158.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201805/874963-20180516220647221-1625113706.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;https://redis.io/topics/cluster-tutorial&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 16 May 2018 14:20:00 +0000</pubDate>
<dc:creator>不要乱摸</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cjsblog/p/9048545.html</dc:identifier>
</item>
<item>
<title>设计模式之策略模式（Strategy Pattern） - tosser</title>
<link>http://www.cnblogs.com/tosser/p/9043673.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tosser/p/9043673.html</guid>
<description>&lt;p&gt;　　模板方法是通过继承实现的，在父类中定义出算法的骨架，将不同点在子类中实现。而策略模式是通过接口实现的，策略中定义了完整的算法。它们有点像啊……&lt;/p&gt;

&lt;p&gt;策略模式的定义&lt;/p&gt;
&lt;p&gt;　　策略模式（Strategy Pattern），定义了一系列的算法，将每一种算法封装起来并可以互相替换使用，策略模式让算法独立于使用它的客户应用而独立变化。&lt;/p&gt;
&lt;p&gt;　　我的理解是，策略模式是透明的，对于策略的实现有时是不用关心的，我只要达到我的目的就可以了，而具体的实现可能有多种手段，而根据不同的选择可以有不同的手段。而对于模板方法来说，它的流程是基本固定的，而某个环境中的实现方式是可变的，但是整体是不变的。这是我理解的它们之间的不同，至于编码的话，模板方法使用的是继承的方式，而策略模式使用的是接口。&lt;/p&gt;

&lt;p&gt;代码示例&lt;/p&gt;
&lt;p&gt;　　仍然以吃面为主，比如程序员要吃面，程序员中午可能去便利店让店员泡面来吃，而程序员黑夜回家可能让老妈给煮面来吃。对于我们来说，我们是要吃面的，至于吃什么面，自己说一下就可以了，至于吃的这个面是怎么做的，就不关心了，做面的策略也根据不同的面有所不同。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StrategyPattern {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         Ren cxy = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ChengXuYuan();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         
&lt;span&gt; 5&lt;/span&gt;         System.out.println(&quot;程序员中午吃饭&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         
&lt;span&gt; 7&lt;/span&gt;         cxy.setIZm(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; PaoMian());
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        cxy.eat();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         
&lt;span&gt;10&lt;/span&gt;         System.out.println(&quot;程序员晚上吃饭&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         
&lt;span&gt;12&lt;/span&gt;         cxy.setIZm(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ZhuMian());
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        cxy.eat();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IZuoMian {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; zuoMian();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PaoMian &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IZuoMian {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; zuoMian() {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         System.out.println(&quot;揭开碗面的包装纸&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         System.out.println(&quot;冲开水&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         System.out.println(&quot;泡面中...&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         System.out.println(&quot;泡好了&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ZhuMian &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IZuoMian {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; zuoMian() {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         System.out.println(&quot;烧开水...&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         System.out.println(&quot;下面...&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         System.out.println(&quot;捞面...&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Ren {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; IZuoMian zm;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setIZm(IZuoMian zm) {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.zm =&lt;span&gt; zm;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; eat() {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        zm.zuoMian();
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         System.out.println(&quot;吃面&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ChengXuYuan &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Ren {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     
&lt;span&gt;53&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在Ren类中，都是要有eat()方法的，是人就要吃！但是吃什么要自己说。根据自己要吃的不同，具体做的也就不同了，这里是做面吃，当然这个做面也可以是做饭。&lt;/p&gt;
&lt;p&gt;　　在代码中实现了泡面和煮面两种方式，做面是一个接口即IZuoMian()，通过把做面的具体实现的类传递给Ren类中的接口属性，就可以通过该属性来完成具体的做面过程。&lt;/p&gt;
&lt;p&gt;　　执行输出如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/892439/201805/892439-20180516220151889-107912236.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;　　总结来自于《大话设计模式》一书中第二章“商场促销——策略模式”。&lt;/p&gt;
&lt;p&gt;1、面向对象的编程，并不是类越多越好，类的划分是为了封装，但分类的基础是抽象，具有相同属性和功能的对象的抽象集合才是类。（这里是我的理解：也就是说策略只是一个算法，可以说是有相应的功能，而没有相应的属性，因此封装为一个接口更为合适）&lt;/p&gt;
&lt;p&gt;2、策略模式（Strategy）：它定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化，不会影响到使用算法的客户；&lt;/p&gt;
&lt;p&gt;3、策略模式是一种定义一系列算法的方法，从概念上来看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合；&lt;/p&gt;
&lt;p&gt;4、策略模式的Strategy类层次为Context定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中的公共功能；&lt;/p&gt;
&lt;p&gt;5、策略模式的优点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试；&lt;/p&gt;
&lt;p&gt;6、当不同的行为堆切在一个类中时，就很难避免使用条件语句来选择合适的行为。将这些行为封装在一个个独立的Strategy类中，可以在使用这些行为的类中消除条件语句；&lt;/p&gt;
&lt;p&gt;7、策略模式就是用来封装算法的，但在实践中，我们发现可以用它来封装几乎任何类型的规则，只要在分析过程中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性；&lt;/p&gt;
&lt;p&gt;8、在基本的策略模式中，选择所用具体实现的职责由客户端对象承担，并转给策略模式的Context对象。&lt;/p&gt;
</description>
<pubDate>Wed, 16 May 2018 14:13:00 +0000</pubDate>
<dc:creator>tosser</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tosser/p/9043673.html</dc:identifier>
</item>
<item>
<title>深入理解.net - 4.你必须知道的String - Nuss</title>
<link>http://www.cnblogs.com/Nuss/p/9038859.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Nuss/p/9038859.html</guid>
<description>&lt;p&gt;为什么要单独写string，主要是它太常用了，同时又太特殊了，特殊到CLR对它的处理都和其它对象不一样。简直可以称为VIP用户啊。本文并不是一篇介绍如何使用string的文章，而是旨在阐述string的一些本质特性。&lt;/p&gt;
&lt;h3 id=&quot;引用类型&quot;&gt;引用类型&lt;/h3&gt;
&lt;p&gt;首先要明确string对象是引用类型的，具有引用类型一切特征，&lt;a href=&quot;http://www.cnblogs.com/Nuss/p/8965000.html&quot;&gt;上篇文章&lt;/a&gt;也写了关于引用类型的的一些知识，有兴趣的可以看看。&lt;strong&gt;引用类型是创建在堆上的，默认是按值传递的。&lt;/strong&gt;按这个理论来看string就有一些有意思的现象了。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static void ChangeStringValue(string tmp)
{
    tmp = &quot;bbb&quot;;
}
public static void Main(string[] args)
{
    string str = &quot;aaa&quot;;
    ChangeStringValue(str);
    Console.WriteLine(str);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面代码基本上会写程序的人都知道输入的结果是：aaa&lt;br/&gt;但是string身为一个引用类型调用ChangeStringValue方法时传递的应该是Main方法中&lt;strong&gt;str变量的值（即对象实例的引用）&lt;/strong&gt;啊，在此强调一点就是引用类型和值类型一样默认都是按值传递的。输出的结果为什么不是 bbb 呢？&lt;br/&gt;答案就是：Immutable&lt;/p&gt;
&lt;h3 id=&quot;恒定不变的immutablestring&quot;&gt;恒定不变的(Immutable)String&lt;/h3&gt;
&lt;p&gt;MSDN上是这么介绍的：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;A String object is called immutable (read-only), because its value cannot be modified after it has been created. Methods that appear to modify a String object actually return a new String object that contains the modification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大体意思就是说：string对象是不变的或只读的，因为创建之后它的值是不能修改的。表面上修改一个string对象实际上返回的是一个包含了修改内容的新的string对象。&lt;/p&gt;
&lt;p&gt;所以呢，每次修改string变量其实都是新建了一个string对象。&lt;br/&gt;将上述代码的简单内存模型所示如下：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1142573/201805/1142573-20180515233522673-144727059.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;so，当我们调用ChangeStringValue方法时，传递的确实是string对象的引用，此时变量tmp和str存储的都是&quot;aaa&quot;字符串的引用，&lt;br/&gt;但是由于string的Immutable特殊性，当我们执行&lt;strong&gt;tmp= &quot;bbb&quot;;&lt;/strong&gt; 时，CLR会先创建了一个新的字符串&quot;bbb&quot;,然后将ChangeStringValue方法的参数tmp的值修改成字符串&quot;bbb&quot;的引用了。但Main方法中的变量str的值并没有被改变还是指向字符串&quot;aaa&quot;的。所以输出的结果是：aaa&lt;/p&gt;
&lt;p&gt;通常我们使用引用类型时，对引用类型的操作是会直接影响到外部的对象的，但由于Immutable特性，string对象的值是无法修改的，为什么要这么设计呢？这又牵扯出另一个有意思的特性。&lt;/p&gt;
&lt;h3 id=&quot;字符串的驻留string-interning&quot;&gt;字符串的驻留(String Interning)&lt;/h3&gt;
&lt;p&gt;什么是驻留呢，大牛们讨论了很多我就不卖弄了，引用下Artech大神 &lt;a href=&quot;http://www.cnblogs.com/artech/archive/2007/05/31/765773.html&quot;&gt;《再说String》&lt;/a&gt;文章中的一段描述如下：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;String的驻留机制实际上是在SystemDomain中进行的。当CLR被加载之后，会在SystemDomain对应的managed heap中创建一个Hash table的数据结构，我们可以称这个Hashtable为Interning table，因为它是被用来保存被驻留的string的，Interning table的Key为string本身，Value为string对象的地址。&lt;br/&gt;当我们的托管程序（无论对于那个AppDomain）需要一个string的时候，CLR首先在这个Hashtable根据这个string的hash code试着在Interning table中找对应的Item。如果成功找到，则直接把对应的引用返回，否则就在SystemDomain对应的managed heap中创建该string，并加入到Interning table中，并把引用返回。所以我们说字符串的驻留是基于整个进程的，是可以跨AppDomain共享的，就是这个道理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;显而易见，lock一个string对象是多么恐怖的事情；大量的字符串拼接也是非常浪费性能的，推荐使用StringBuilder。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;string是个引用类型，string Immutable,String Interning，这些都是你必须要知道的。&lt;em&gt;臭不要脸的借用了下大神的书名,致敬下经典。&lt;/em&gt;&lt;br/&gt;末尾参考链接吐血推荐一波，绝对看的爽歪歪，相信你会收获到更多。&lt;/p&gt;
&lt;h3 id=&quot;参考链接&quot;&gt;参考链接&lt;/h3&gt;
</description>
<pubDate>Wed, 16 May 2018 13:45:00 +0000</pubDate>
<dc:creator>Nuss</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Nuss/p/9038859.html</dc:identifier>
</item>
<item>
<title>CSS position(定位)属性 - 郭佬</title>
<link>http://www.cnblogs.com/guolao/p/9048308.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guolao/p/9048308.html</guid>
<description>&lt;p&gt;关于CSS position，来自MDN的描述：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;CSS position属性用于指定一个元素在文档中的定位方式。top、right、bottom、left 属性则决定了该元素的最终位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后来看看什么是文档流(normal flow)，下面是 &lt;a href=&quot;https://www.w3.org/TR/CSS21/visuren.html#&quot; target=&quot;_blank&quot;&gt;www.w3.org&lt;/a&gt; 的描述：&lt;/p&gt;
&lt;blockquote readability=&quot;6.8620689655172&quot;&gt;
&lt;p&gt;&lt;strong&gt;Normal flow&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Boxes in the normal flow belong to a formatting context, which may be block or inline, but not both simultaneously. &lt;a href=&quot;https://www.w3.org/TR/CSS21/visuren.html#block-level&quot;&gt;Block-level&lt;/a&gt; boxes participate in a &lt;a href=&quot;https://www.w3.org/TR/CSS21/visuren.html#block-formatting&quot;&gt;block formatting&lt;/a&gt; context. &lt;a href=&quot;https://www.w3.org/TR/CSS21/visuren.html#inline-level&quot;&gt;Inline-level boxes&lt;/a&gt; participate in an &lt;a href=&quot;https://www.w3.org/TR/CSS21/visuren.html#inline-formatting&quot;&gt;inline formatting&lt;/a&gt; context.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;个人补充（此处参考&lt;a href=&quot;https://blog.csdn.net/fungleo&quot; target=&quot;_blank&quot;&gt;FungLeo&lt;/a&gt;的博客文章，&lt;a href=&quot;https://blog.csdn.net/fungleo/article/details/50056111&quot; target=&quot;_blank&quot;&gt;原文点此&lt;/a&gt;）：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;normal flow直译为常规流、正常流，国内不知何原因大多译为文档流；&lt;/li&gt;
&lt;li&gt;窗体自上而下分成一行一行，并在每行中按从左至右的顺序排放元素；&lt;/li&gt;
&lt;li&gt;每个非浮动块级元素都独占一行， 浮动元素则按规定浮在行的一端，若当前行容不下，则另起新行再浮动；&lt;/li&gt;
&lt;li&gt;内联元素也不会独占一行，几乎所有元素(包括块级，内联和列表元素）均可生成子行，用于摆放子元素；&lt;/li&gt;
&lt;li&gt;有三种情况将使得元素脱离normal flow而存在，分别是 float，absolute ，fixed，但是在IE6中浮动元素也存在于normal flow中。&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;一、position: static&lt;/h3&gt;
&lt;p&gt;MDN的描述：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 top、right、bottom、left 属性无效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;个人补充：static是position的默认值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;CSS-position-static&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;https://cdn.bootcss.com/normalize/8.0.0/normalize.css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        .container&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #868686&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        .content&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; yellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; static&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 这个left没有起作用 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://files.cnblogs.com/files/guolao/static.bmp&quot; alt=&quot;&quot; width=&quot;299&quot; height=&quot;174&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对 content 的 position 设定 static 后，left就失效了，而元素（content）就以正常的 normal flow 形式呈现。&lt;/p&gt;
&lt;h3&gt;二、position: relative&lt;/h3&gt;
&lt;p&gt;MDN的描述：&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 对 table-*-group, table-row, table-column, table-cell, table-caption 元素无效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;个人理解：相对于normal flow中的原位置来定位。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_e42b193a-a16f-44f4-b7b7-427ae7303270&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e42b193a-a16f-44f4-b7b7-427ae7303270&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e42b193a-a16f-44f4-b7b7-427ae7303270&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;CSS-position-relative&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;https://cdn.bootcss.com/normalize/8.0.0/normalize.css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            .container&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #868686&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            .content_0&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; yellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;               
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            .content_1&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 这里使用了relative  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;            
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            .content_2&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;               
&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;content_0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;content_1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;content_2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;   
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;position: relative&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://files.cnblogs.com/files/guolao/relative_0.bmp&quot; alt=&quot;&quot; width=&quot;235&quot; height=&quot;376&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是没有设置left、top等属性时，正常出现在normal flow中的位置。&lt;/p&gt;
&lt;p&gt;接着添加left、top：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;.content_1{
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;                background-color: red;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;                width: 100px;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;                height: 100px;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;                position: relative;/* 这里使用了relative  */
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;                left: 20px;/* 这里设置了left和top */
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;                top: 20px;            
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;             }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://files.cnblogs.com/files/guolao/relative_1.bmp&quot; alt=&quot;&quot; width=&quot;219&quot; height=&quot;376&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，元素（content_1）的位置相对于其原位置（normal flow中的正常位置）进行了移动。&lt;/p&gt;
&lt;h3&gt;三、position: absolute&lt;/h3&gt;
&lt;p&gt;MDN的描述&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margin），且不会与其他边距合并。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;个人理解：生成绝对定位的元素，其相对于 static 定位以外的第一个父元素进行定位,会脱离normal flow。&lt;strong&gt;注意：是除了static外&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_95e35d8c-8087-4670-9b60-49b595b2d793&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_95e35d8c-8087-4670-9b60-49b595b2d793&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_95e35d8c-8087-4670-9b60-49b595b2d793&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;CSS-position-static&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;https://cdn.bootcss.com/normalize/8.0.0/normalize.css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        .container&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #868686&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            margin-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        .content&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;position: absolute&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://files.cnblogs.com/files/guolao/absolute.bmp&quot; alt=&quot;&quot; width=&quot;280&quot; height=&quot;195&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为 content 的父元素 container 没有设置 position，默认为 static，所以找到的第一个父元素是 body（&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;），可以看成是元素（content）相对于 body 向下移动10px。&lt;/p&gt;
&lt;h3&gt;四、position: fixed&lt;/h3&gt;
&lt;p&gt;MDN的描述&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed属性会创建新的层叠上下文。当元素祖先的 transform 属性非 none 时，容器由视口改为该祖先。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;个人理解：fixed相对于window固定，滚动浏览器窗口并不会使其移动，会脱离normal flow。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_2bbd15fc-86c5-45a0-aceb-b5286eaa2b45&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2bbd15fc-86c5-45a0-aceb-b5286eaa2b45&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2bbd15fc-86c5-45a0-aceb-b5286eaa2b45&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;CSS-position-static&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;https://cdn.bootcss.com/normalize/8.0.0/normalize.css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        .container&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #868686&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1000px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        .content&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; yellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; fixed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 这里使用了fixed &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;position: fixed&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;这里就不上图了，看一下代码或者自己动手码一下就能理解。&lt;/p&gt;
&lt;h3&gt;五、position: sticky&lt;/h3&gt;
&lt;p&gt;MDN的描述&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table&lt;code&gt;时&lt;/code&gt;），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: sticky对 table元素的效果与 position: relative 相同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为各大浏览器对于sticky的兼容问题，而且JS也可以实现这个功能，在这里就不进行深入了，了解一下就好。&lt;/p&gt;
&lt;h3&gt;六、position: inherit&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3school.com.cn/cssref/pr_class_position.asp&quot; target=&quot;_blank&quot;&gt;w3school.com&lt;/a&gt;的 描述&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;规定应该从父元素继承 position 属性的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;inherit 继承父元素，这个用得不多，所以也不继续深入了。&lt;/p&gt;
</description>
<pubDate>Wed, 16 May 2018 13:36:00 +0000</pubDate>
<dc:creator>郭佬</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guolao/p/9048308.html</dc:identifier>
</item>
<item>
<title>爬虫值requests库 - 人生不如戏</title>
<link>http://www.cnblogs.com/fu-yong/p/9039326.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fu-yong/p/9039326.html</guid>
<description>&lt;h2&gt;&lt;span&gt;requests简介&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;简介&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;Requests是用python语言基于urllib编写的，采用的是Apache2 Licensed开源协议的HTTP库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;，使用起来比urllib简洁很多&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为是第三方库，所以使用前需要cmd安装&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;pip install requests&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;安装完成后import一下，正常则说明可以开始使用了。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;基本用法：&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;requests.get()用于请求目标网站，类型是一个HTTPresponse类型&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests

response &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;br/&gt;print(response.status_code)  # 打印状态码&lt;br/&gt;print(response.url)          # 打印请求url&lt;br/&gt;print(response.headers)      # 打印头信息&lt;br/&gt;print(response.cookies)      # 打印cookie信息
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(response.text)  #以文本形式打印网页源码&lt;/span&gt;&lt;br/&gt;&lt;span&gt;print(response.content) #以字节流形式打印&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;状态码：200&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;url：www.baidu.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;headers信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1245324/201711/1245324-20171122134110461-359500425.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt; 各种请求方式：&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests

requests.get(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
requests.post(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/post&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
requests.put(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/put&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
requests.delete(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/delete&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
requests.head(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
requests.options(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;基本的get请求&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests

response &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(response.text)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;结果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1245324/201711/1245324-20171122134009618-465552772.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;带参数的GET请求：&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;第一种直接将参数放在url内&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests

response &lt;/span&gt;= requests.get(http://httpbin.org/get?name=gemey&amp;amp;age=22&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(response.text)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;结果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1245324/201711/1245324-20171122133803524-838504475.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另一种先将参数填写在dict中，发起请求时params参数指定为dict&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests

data &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;tom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 20&lt;span&gt;
}

response &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, params=&lt;span&gt;data)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(response.text)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;结果同上&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;解析json&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests

response &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(response.text)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(response.json())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;response.json()方法同json.loads(response.text)&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(type(response.json()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;结果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1245324/201711/1245324-20171122134451555-536605552.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;简单保存一个二进制文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二进制内容为response.content&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests

response &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://img.ivsky.com/img/tupian/pre/201708/30/kekeersitao-002.jpg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
b &lt;/span&gt;=&lt;span&gt; response.content
with open(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;F://fengjing.jpg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
    f.write(b)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;为请求添加头信息&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;heads = {}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;heads['User-Agent'] = 'Mozilla/5.0 ' \&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                          '(Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 ' \&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                          '(KHTML, like Gecko) Version/5.1 Safari/534.50'&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; response &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,headers=headers)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;使用代理&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;同添加headers方法，代理参数也要是一个dict&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里使用requests库爬取了IP代理网站的IP与端口和类型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为是免费的，使用的代理地址很快就失效了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; re

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_html(url):
    proxy &lt;/span&gt;=&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;120.25.253.234:812&lt;/span&gt;&lt;span&gt;',&lt;/span&gt;
        &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;163.125.222.244:8123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    }
    heads &lt;/span&gt;=&lt;span&gt; {}
    heads[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    req &lt;/span&gt;= requests.get(url, headers=&lt;span&gt;heads,proxies=proxy)
    html &lt;/span&gt;=&lt;span&gt; req.text
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; html

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_ipport(html):
    regex &lt;/span&gt;= r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;td data-title=&quot;IP&quot;&amp;gt;(.+)&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    iplist &lt;/span&gt;=&lt;span&gt; re.findall(regex, html)
    regex2 &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;td data-title=&quot;PORT&quot;&amp;gt;(.+)&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    portlist &lt;/span&gt;=&lt;span&gt; re.findall(regex2, html)
    regex3 &lt;/span&gt;= r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;td data-title=&quot;类型&quot;&amp;gt;(.+)&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    typelist &lt;/span&gt;=&lt;span&gt; re.findall(regex3, html)
    sumray &lt;/span&gt;=&lt;span&gt; []
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; iplist:
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; portlist:
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; t &lt;span&gt;in&lt;/span&gt;&lt;span&gt; typelist:
                &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;
            &lt;span&gt;pass&lt;/span&gt;&lt;span&gt;
        a &lt;/span&gt;= t+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+i + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; p
        sumray.append(a)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;高匿代理&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(sumray)


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    url &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.kuaidaili.com/free/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    get_ipport(get_html(url))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1245324/201711/1245324-20171122194541774-1887967160.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;基本POST请求：&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests

data &lt;/span&gt;= {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;tom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}

response &lt;/span&gt;= requests.post(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/post&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, data=data)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1245324/201711/1245324-20171122210429102-116304094.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt; 获取cookie&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取cookie&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests

response &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(response.cookies)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(type(response.cookies))
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; k,v &lt;span&gt;in&lt;/span&gt;&lt;span&gt; response.cookies.items():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(k+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+v)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1245324/201711/1245324-20171122210629868-4158822.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;会话维持&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests

session &lt;/span&gt;=&lt;span&gt; requests.Session()
session.get(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/cookies/set/number/12345&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
response &lt;/span&gt;= session.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/cookies&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(response.text)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1245324/201711/1245324-20171122211010696-895794942.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;证书验证设置&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; requests.packages &lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib3

urllib3.disable_warnings()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;从urllib3中消除警告&lt;/span&gt;
response = requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.12306.cn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,verify=False)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;证书验证设为FALSE&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(response.status_code)&lt;/span&gt;&lt;p&gt;&lt;span&gt;打印结果：200&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;超时异常捕获&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; requests.exceptions &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ReadTimeout

&lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
    res &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, timeout=0.1&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res.status_code)
&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; ReadTimeout:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(timeout)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;异常处理&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在你不确定会发生什么错误时，尽量使用try...except来捕获异常&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所有的requests exception：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; requests.exceptions &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ReadTimeout,HTTPError,RequestException

&lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
    response &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,timeout=0.5&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(response.status_code)
&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; ReadTimeout:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; HTTPError:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;httperror&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; RequestException:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;reqerror&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 16 May 2018 13:17:00 +0000</pubDate>
<dc:creator>人生不如戏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fu-yong/p/9039326.html</dc:identifier>
</item>
<item>
<title>Spring Data JPA 初体验 - 无冥</title>
<link>http://www.cnblogs.com/kias2004/p/9048170.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kias2004/p/9048170.html</guid>
<description>&lt;p&gt;一,JPA相关的概念&lt;/p&gt;
&lt;ol readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;JPA概述&lt;/p&gt;
&lt;p&gt;全称是：JavaPersistence API。是SUN公司推出的一套基于ORM的规范。&lt;/p&gt;
&lt;p&gt;Hibernate框架中提供了JPA的实现。&lt;/p&gt;
&lt;p&gt;JPA通过JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;2.JPA优势&lt;/p&gt;
&lt;p&gt;标准化:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     JPA是 JCP 组织发布的 Java EE 标准之一，因此任何声称符合 JPA 标准的框架都遵循同样的架构，提供相同的访问API，这保证了基于JPA开发的企业应用能够经过少量的修改就能够在不同的JPA框架下运行。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;容器级特性的支持:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;      JPA框架中支持大数据集、事务、并发等容器级事务，这使得 JPA 超越了简单持久化框架的局限，在企业应用发挥更大的作用。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;简单方便:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     JPA的主要目标之一就是提供更加简单的编程模型：在JPA框架下创建实体和创建Java 类一样简单，没有任何的约束和限制，只需要使用javax.persistence.Entity进行注释，JPA的框架和接口也都非常简单，没有太多特别的规则和设计模式的要求，开发者可以很容易的掌握。JPA基于非侵入式原则设计，因此可以很容易的和其它框架或者容器集成。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查询能力:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     JPA的查询语言是面向对象而非面向数据库的，它以面向对象的自然语法构造查询语句，可以看成是HibernateHQL的等价物。JPA定义了独特的JPQL（Java Persistence Query Language），JPQL是EJB QL的一种扩展，它是针对实体的一种查询语言，操作对象是实体，而不是关系数据库的表，而且能够支持批量更新和修改、JOIN、GROUP BY、HAVING 等通常只有 SQL 才能够提供的高级查询特性，甚至还能够支持子查询。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;高级特性:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;          JPA中能够支持面向对象的高级特性，如类之间的继承、多态和类之间的复杂关系，这样的支持能够让开发者最大限度的使用面向对象的模型设计企业应用，而不需要自行处理这些特性在关系数据库的持久化。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.学习JPA要明确的&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;JPA是一套ORM规范，hibernate实现了JPA规范

hibernate中有自己的独立ORM操作数据库方式，也有JPA规范实现的操作数据库方式。

在数据库增删改查操作中，我们hibernate和JPA的操作都要会。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;二, JPA入门&lt;/p&gt;
&lt;p&gt;1.需求介绍&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    本章节我们实现基于JPA注解的对象关系映射，配置实体类和数据库表的对应关系.  并且使用JPA规范中的方法实现CRUD操作。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.JPA环境搭建&lt;/p&gt;
&lt;p&gt;2.1 拷贝jar包到工程中&lt;/p&gt;
&lt;p&gt;2.2 编写实体类并使用注解配置&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;使用注解代替配置文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    @Entity
     @Table(name=&quot;t_user&quot;)
     public class User {
  @Id
  @GeneratedValue(strategy=GenerationType.IDENTITY)
  @Column(name=&quot;uid&quot;)
  private Integer uid;

@Column(name=&quot;uname&quot;)
private String uname;

@Column(name=&quot;uage&quot;)
private int uage;

public Integer getUid() {
    return uid;
}
public void setUid(Integer uid) {
    this.uid = uid;
}
public String getUname() {
    return uname;
}
public void setUname(String uname) {
    this.uname = uname;
}
public int getUage() {
    return uage;
}
public void setUage(int uage) {
    this.uage = uage;
}
@Override
public String toString() {
    return &quot;User [uid=&quot; + uid + &quot;, uname=&quot; + uname + &quot;, uage=&quot; + uage + &quot;]&quot;;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2.3创建配置文件&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;要求在src下面的META-INF文件夹下面创建一个名称为persistence.xml的文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;persistence xmlns=&quot;http://java.sun.com/xml/ns/persistence&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/persistence  
  http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd&quot;
version=&quot;1.0&quot;&amp;gt;
&amp;lt;!--Name属性用于定义持久化单元的名字 (name必选,空值也合法); transaction-type 指定事务类型(可选) 取值： JTA：默认值 
    RESOURCE_LOCAL --&amp;gt;
&amp;lt;persistence-unit name=&quot;myPersistUnit&quot; transaction-type=&quot;RESOURCE_LOCAL&quot;&amp;gt;
    &amp;lt;!-- 三引入映射 --&amp;gt;
    &amp;lt;class&amp;gt;com.itheima.bean.User&amp;lt;/class&amp;gt;
    &amp;lt;properties&amp;gt;
        &amp;lt;!-- 一,连接数据库的基本项 --&amp;gt;
        &amp;lt;property name=&quot;hibernate.dialect&quot; value=&quot;org.hibernate.dialect.MySQLDialect&quot; /&amp;gt;
        &amp;lt;property name=&quot;hibernate.connection.driver_class&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&amp;gt;
        &amp;lt;property name=&quot;hibernate.connection.url&quot; value=&quot;jdbc:mysql:///jpa&quot; /&amp;gt;
        &amp;lt;property name=&quot;hibernate.connection.username&quot; value=&quot;root&quot; /&amp;gt;
        &amp;lt;property name=&quot;hibernate.connection.password&quot; value=&quot;123456&quot; /&amp;gt;
        &amp;lt;!-- 二,选配 --&amp;gt;
        &amp;lt;property name=&quot;hibernate.show_sql&quot; value=&quot;true&quot;/&amp;gt;
        &amp;lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot;/&amp;gt;
        &amp;lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;update&quot;/&amp;gt;
    &amp;lt;/properties&amp;gt;
&amp;lt;/persistence-unit&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2.4编写工具类&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;用于获取JPA的操作数据库对象EntityManager&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  public final class JPAUtil {
    //JPA的实体管理器工厂：相当于Hibernate的SessionFactory
private static EntityManagerFactory em;
//使用静态代码块赋值
static {
    //注意：该方法参数必须和persistence.xml中persistence-unit标签name属性取值一致
    em = Persistence.createEntityManagerFactory(&quot;myPersistUnit&quot;);
}
/**&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;使用管理器工厂生产一个管理器对象
&lt;ul&gt;&lt;li&gt;@return&lt;br/&gt;*/&lt;br/&gt;public static EntityManager getEntityManager() {&lt;br/&gt;return em.createEntityManager();&lt;br/&gt;}&lt;br/&gt;}&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2.5编写单元测试&lt;/p&gt;
&lt;p&gt;3.常用注解说明&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;@Entity&lt;br/&gt;作用:指定当前类是实体类。写上此注解用于在创建SessionFactory/EntityManager时，加载映射配置。&lt;/li&gt;
&lt;li&gt;@Table&lt;br/&gt;作用：指定实体类和表之间的对应关系。&lt;br/&gt;属性:&lt;br/&gt;name:指定数据库表的名称&lt;/li&gt;
&lt;li&gt;@Id&lt;br/&gt;作用：指定当前字段是主键。&lt;/li&gt;
&lt;li&gt;@GeneratedValue&lt;br/&gt;作用：指定主键的生成方式。JPA的主键生成方式详解见2.4小节的说明。&lt;br/&gt;属性：&lt;br/&gt;strategy ：指定主键生成策略。JPA支持四种生成策略，具体介绍看4小节。&lt;/li&gt;
&lt;li&gt;@Column&lt;br/&gt;作用：指定实体类属性和数据库表之间的对应关系&lt;br/&gt;属性：&lt;br/&gt;name：指定数据库表的列名称。&lt;br/&gt;unique：是否唯一&lt;br/&gt;nullable：是否可以为空&lt;br/&gt;inserttable：是否可以插入&lt;br/&gt;updateable：是否可以更新&lt;br/&gt;columnDefinition: 定义建表时创建此列的DDL&lt;br/&gt;secondaryTable: 从表名。如果此列不建在主表上（默认建在主表），该属性定义该列所在从表的名字。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;4.主键生成策略&lt;/p&gt;
&lt;p&gt;4.1JPA提供的类型&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;通过annotation（注解）来映射hibernate实体的,基于annotation的hibernate主键标识为@Id, 其生成规则由  @GeneratedValue设定的.这里的@id和@GeneratedValue都是JPA的标准用法。JPA提供的四种标准用法为TABLE,SEQUENCE,IDENTITY,AUTO。具体说明如下：&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;22.651650725085&quot;&gt;&lt;li&gt;IDENTITY：主键由数据库自动生成（主要是自动增长型）&lt;br/&gt;用法：&lt;br/&gt;@Id&lt;br/&gt;@GeneratedValue(strategy = GenerationType.IDENTITY)&lt;br/&gt;private Long uid;&lt;/li&gt;
&lt;li readability=&quot;11.293127629734&quot;&gt;
&lt;p&gt;SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。 (用在oracle)&lt;br/&gt;用法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Id  
@GeneratedValue(strategy = GenerationType.SEQUENCE,generator=&quot;payablemoney_seq&quot;)    
@SequenceGenerator(name=&quot;payablemoney_seq&quot;, sequenceName=&quot;seq_payment&quot;)  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：&lt;br/&gt;@SequenceGenerator源码中的定义&lt;br/&gt;@Target({TYPE, METHOD, FIELD})&lt;br/&gt;@Retention(RUNTIME)&lt;br/&gt;public @interface SequenceGenerator {&lt;br/&gt;String name();&lt;br/&gt;String sequenceName() default &quot;&quot;;&lt;br/&gt;int initialValue() default 0;&lt;br/&gt;int allocationSize() default 50;&lt;br/&gt;}&lt;br/&gt;name：表示该表主键生成策略的名称，&lt;a href=&quot;mailto:它被引用在@generatedvalue中设置的&quot;&gt;它被引用在@GeneratedValue中设置的&lt;/a&gt;“generator”值中。&lt;br/&gt;sequenceName：属性表示生成策略用到的数据库序列名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;AUTO：主键由程序控制. 自动创建一张表&lt;br/&gt;用法：&lt;/p&gt;
@Id&lt;br/&gt;@GeneratedValue(strategy = GenerationType.AUTO)&lt;/li&gt;
&lt;li readability=&quot;31.90341160833&quot;&gt;
&lt;p&gt;TABLE：使用一个特定的数据库表格来保存主键（了解）&lt;br/&gt;用法：&lt;/p&gt;
&lt;p&gt;@Id&lt;br/&gt;@GeneratedValue(strategy = GenerationType.TABLE, generator=&quot;payablemoney_gen&quot;)&lt;br/&gt;@TableGenerator(name = &quot;pk_gen&quot;,&lt;br/&gt;table=&quot;tb_generator&quot;,&lt;br/&gt;pkColumnName=&quot;gen_name&quot;,&lt;br/&gt;valueColumnName=&quot;gen_value&quot;,&lt;br/&gt;pkColumnValue=&quot;PAYABLEMOENY_PK&quot;,&lt;br/&gt;allocationSize=1&lt;br/&gt;)&lt;/p&gt;
&lt;p&gt;这里应用表tb_generator，定义为 ：&lt;/p&gt;
&lt;p&gt;CREATE TABLE tb_generator (&lt;br/&gt;id NUMBER NOT NULL,&lt;br/&gt;gen_name VARCHAR2(255) NOT NULL,&lt;br/&gt;gen_value NUMBER NOT NULL,&lt;br/&gt;PRIMARY KEY(id)&lt;br/&gt;)&lt;/p&gt;
&lt;p&gt;插入纪录，供生成主键使用：&lt;br/&gt;INSERT INTO tb_generator(id, gen_name, gen_value)VALUES (1,PAYABLEMOENY_PK', 1);&lt;br/&gt;在主键生成后，这条纪录的value值，按allocationSize递增。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; @TableGenerator的定义：&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;@Target({TYPE, METHOD, FIELD})&lt;br/&gt;@Retention(RUNTIME)&lt;br/&gt;public @interface TableGenerator {&lt;br/&gt;String name();&lt;br/&gt;String table() default &quot;&quot;;&lt;br/&gt;String catalog() default &quot;&quot;;&lt;br/&gt;String schema() default &quot;&quot;;&lt;br/&gt;String pkColumnName() default &quot;&quot;;&lt;br/&gt;String valueColumnName() default &quot;&quot;;&lt;br/&gt;String pkColumnValue() default &quot;&quot;;&lt;br/&gt;int initialValue() default 0;&lt;br/&gt;int allocationSize() default 50;&lt;br/&gt;UniqueConstraint[] uniqueConstraints() default {};&lt;br/&gt;}&lt;br/&gt;其中属性说明：&lt;br/&gt;name：&lt;br/&gt;表示该表主键生成策略的名称，&lt;a href=&quot;mailto:它被引用在@generatedvalue中设置的&quot;&gt;它被引用在@GeneratedValue中设置的&lt;/a&gt;“generator”值中。&lt;br/&gt;table：&lt;br/&gt;表示表生成策略所持久化的表名，例如，这里表使用的是数据库中的“tb_generator”。&lt;br/&gt;catalog和schema：&lt;br/&gt;具体指定表所在的目录名或是数据库名。&lt;br/&gt;pkColumnName：&lt;br/&gt;属性的值表示在持久化表中，该主键生成策略所对应键值的名称。例如在“tb_generator”中将“gen_name”作为主键的键值&lt;br/&gt;valueColumnName：&lt;br/&gt;属性的值表示在持久化表中，该主键当前所生成的值，它的值将会随着每次创建累加。例如，在“tb_generator”中将“gen_value”作为主键的值&lt;br/&gt;pkColumnValue：&lt;br/&gt;属性的值表示在持久化表中，该生成策略所对应的主键。例如在“tb_generator”表中，将“gen_name”的值为“CUSTOMER_PK”。&lt;br/&gt;initialValue：&lt;br/&gt;表示主键初识值，默认为0。&lt;br/&gt;allocationSize：&lt;br/&gt;表示每次主键值增加的大小，例如设置成1，则表示每次创建新记录后自动加1，默认为50。&lt;br/&gt;UniqueConstraint：&lt;br/&gt;&lt;a href=&quot;mailto:与@table标记中的用法类似&quot;&gt;与@Table标记中的用法类似&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;4.2自定义类型&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;JPA提供了四种类型,有的情况下是不能满足使用的. eg: 主键类型是字符串,需要uuid,这个时候就需要自定义类型.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5.JPA的CRUD操作&lt;/p&gt;
&lt;p&gt;三,JPA一对多配置&lt;/p&gt;
&lt;p&gt;1.注解详解&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;OneToMany&lt;br/&gt;作用：&lt;br/&gt;建立一对多的关系映射&lt;br/&gt;属性：&lt;br/&gt;targetEntityClass：指定多的多方的类的字节码&lt;br/&gt;mappedBy：指定从表实体类中引用主表对象的名称。&lt;br/&gt;cascade：指定要使用的级联操作&lt;br/&gt;fetch：指定是否采用延迟加载&lt;br/&gt;orphanRemoval：是否使用孤儿删除&lt;/li&gt;
&lt;li&gt;@ManyToOne&lt;br/&gt;作用：&lt;br/&gt;建立多对一的关系&lt;br/&gt;属性：&lt;br/&gt;targetEntityClass：指定一的一方实体类字节码&lt;br/&gt;cascade：指定要使用的级联操作&lt;br/&gt;fetch：指定是否采用延迟加载&lt;br/&gt;optional：关联是否可选。如果设置为false，则必须始终存在非空关系。&lt;/li&gt;
&lt;li&gt;@JoinColumn&lt;br/&gt;作用：&lt;br/&gt;用于定义主键字段和外键字段的对应关系。&lt;br/&gt;属性：&lt;br/&gt;name：指定外键字段的名称&lt;br/&gt;referencedColumnName：指定引用主表的主键字段名称&lt;br/&gt;unique：是否唯一。默认值不唯一&lt;br/&gt;nullable：是否允许为空。默认值允许。&lt;br/&gt;insertable：是否允许插入。默认值允许。&lt;br/&gt;updatable：是否允许更新。默认值允许。&lt;br/&gt;columnDefinition：列的定义信息。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2.使用JPA配置一对多&lt;/p&gt;
&lt;ul readability=&quot;6&quot;&gt;&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;一的一方实体(Category)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  @Entity
  @Table(name=&quot;category&quot;)
  public class Category {

@Id
@GeneratedValue(strategy=GenerationType.IDENTITY)
@Column(name=&quot;cid&quot;)
private Integer cid;

@Column(name=&quot;cname&quot;)
private String cname;

//在一的一方,用一个集合表示和product的关系
@OneToMany(targetEntity=Product.class,mappedBy=&quot;category&quot;)
private Set&amp;lt;Product&amp;gt; products = new HashSet&amp;lt;Product&amp;gt;();

public Integer getCid() {
    return cid;
}
public void setCid(Integer cid) {
    this.cid = cid;
}
public String getCname() {
    return cname;
}
public void setCname(String cname) {
    this.cname = cname;
}
public Set&amp;lt;Product&amp;gt; getProducts() {
    return products;
}
public void setProducts(Set&amp;lt;Product&amp;gt; products) {
    this.products = products;
    }
  }&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;多的一方实体(Product)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   @Entity
  @Table(name=&quot;product&quot;)
  public class Product {

@Id
@GeneratedValue(strategy=GenerationType.IDENTITY)
private Integer pid;

@Column(name=&quot;pname&quot;)
private String pname;

@Column(name=&quot;price&quot;)
private double price;
//用一个对象表示,当前商品属于哪个类别
@ManyToOne(targetEntity=Category.class)
@JoinColumn(name=&quot;cid&quot;,referencedColumnName=&quot;cid&quot;)
private Category category;

public Integer getPid() {
    return pid;
}

public void setPid(Integer pid) {
    this.pid = pid;
}

public String getPname() {
    return pname;
}

public void setPname(String pname) {
    this.pname = pname;
}

public double getPrice() {
    return price;
}

public void setPrice(double price) {
    this.price = price;
}

public Category getCategory() {
    return category;
}

public void setCategory(Category category) {
    this.category = category;
}

  }&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3.一对多关系的CRUD&lt;/p&gt;
&lt;p&gt;四,JPA配置多对多&lt;/p&gt;
&lt;p&gt;1,注解详解&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;@ManyToMany&lt;br/&gt;作用：&lt;br/&gt;用于映射多对多关系&lt;br/&gt;属性：&lt;br/&gt;cascade：配置级联操作。&lt;br/&gt;fetch：配置是否采用延迟加载。&lt;br/&gt;targetEntity：配置目标的实体类。映射多对多的时候不用写。&lt;/li&gt;
&lt;li&gt;@JoinTable&lt;br/&gt;作用：&lt;br/&gt;针对中间表的配置&lt;br/&gt;属性：&lt;br/&gt;name：配置中间表的名称&lt;br/&gt;joinColumns：中间表的外键字段关联当前实体类所对应表的主键字段&lt;br/&gt;inverseJoinColumn：中间表的外键字段关联对方表的主键字段&lt;/li&gt;
&lt;li&gt;@JoinColumn&lt;br/&gt;作用：&lt;br/&gt;用于定义主键字段和外键字段的对应关系。&lt;br/&gt;属性：&lt;br/&gt;name：指定外键字段的名称&lt;br/&gt;referencedColumnName：指定引用主表的主键字段名称&lt;br/&gt;unique：是否唯一。默认值不唯一&lt;br/&gt;nullable：是否允许为空。默认值允许。&lt;br/&gt;insertable：是否允许插入。默认值允许。&lt;br/&gt;updatable：是否允许更新。默认值允许。&lt;br/&gt;columnDefinition：列的定义信息。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2,使用JPA配置多对多&lt;/p&gt;
&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;Student.java&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; @Entity
  @Table(name = &quot;student&quot;)
  public class Student {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
@Column(name = &quot;sid&quot;)
private Integer sid;

@Column(name = &quot;sname&quot;)
private String sname;

// 中间表s_c_table字段关联sid表的主键字段sid,// 中间表s_c_table的字段cid关联表的主键cid
@ManyToMany
@JoinTable(name = &quot;s_c_table&quot;, // 中间表的名称
        joinColumns = { @JoinColumn(name = &quot;sid&quot;, referencedColumnName = &quot;sid&quot;) }, 
        inverseJoinColumns = {@JoinColumn(name = &quot;cid&quot;, referencedColumnName = &quot;cid&quot;) })
private Set&amp;lt;Course&amp;gt; courses = new HashSet&amp;lt;Course&amp;gt;();

public Integer getSid() {
    return sid;
}

public void setSid(Integer sid) {
    this.sid = sid;
}

public String getSname() {
    return sname;
}

public void setSname(String sname) {
    this.sname = sname;
}

public Set&amp;lt;Course&amp;gt; getCourses() {
    return courses;
}

public void setCourses(Set&amp;lt;Course&amp;gt; courses) {
    this.courses = courses;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Course.java&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  @Entity
  @Table(name=&quot;course&quot;)
  public class Course {

@Id
@GeneratedValue(strategy=GenerationType.IDENTITY)
@Column(name=&quot;cid&quot;)
private Integer cid;

@Column(name=&quot;cname&quot;)
private String cname;

@ManyToMany(mappedBy=&quot;courses&quot;)
private Set&amp;lt;Student&amp;gt; students = new HashSet&amp;lt;Student&amp;gt;();

public Integer getCid() {
    return cid;
}

public void setCid(Integer cid) {
    this.cid = cid;
}

public String getCname() {
    return cname;
}

public void setCname(String cname) {
    this.cname = cname;
}

public Set&amp;lt;Student&amp;gt; getStudents() {
    return students;
}

public void setStudents(Set&amp;lt;Student&amp;gt; students) {
    this.students = students;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;五,Spring Data JPA&lt;/p&gt;
&lt;p&gt;1.概述&lt;/p&gt;
&lt;p&gt;1.1什么是SpringDataJPA&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Spring提供的一个用于简化JPA开发的框架。可以极大的简化JPA的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。除了CRUD外，还包括如分页、排序等一些常用的功能。下面的示例代码即可完成数据保存的操作，而无需具体实现类&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;1.2SpringDataJPA的核心接口&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Repository：最顶层的接口，是一个空的接口，目的是为了统一所有Repository的类型，且能让组件扫描的时候自动识别。&lt;/li&gt;
&lt;li&gt;CrudRepository ：是Repository的子接口，提供CRUD的功能&lt;/li&gt;
&lt;li&gt;PagingAndSortingRepository：是CrudRepository的子接口，添加分页和排序的功能&lt;/li&gt;
&lt;li&gt;JpaRepository：是PagingAndSortingRepository的子接口，增加了一些实用的功能，比如：批量操作等。&lt;/li&gt;
&lt;li&gt;JpaSpecificationExecutor：用来做负责查询的接口,类似条件(QBC)查询&lt;/li&gt;
&lt;li&gt;Specification：是Spring Data JPA提供的一个查询规范，要做复杂的查询，只需围绕这个规范来设置查询条件即可&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2.SpringDataJPA入门&lt;/p&gt;
&lt;p&gt;2.1创建Java项目,导入jar包&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;spring相关的jar包&lt;/li&gt;
&lt;li&gt;hibernate相关jar包&lt;/li&gt;
&lt;li&gt;springDaataJpa相关的jar: spring-data-commons.jar 、 spring-data-jpa.jar 、 hibernate-entitymanager-5.0.7.Final.jar&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2.2创建持久化类&lt;/p&gt;
&lt;ul readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;BaseDict&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; package com.itheima.crm.bean;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;

@Entity
@Table(name=&quot;base_dict&quot;)
public class BaseDict {

@Id
@GeneratedValue(generator=&quot;sysuuid&quot;)
@GenericGenerator(name = &quot;sysuuid&quot;, strategy = &quot;uuid&quot;)
@Column(name=&quot;dict_id&quot;)
private String dict_id;

@Column(length=20)
private String dict_type_code;
@Column(length=40)
private String dict_type_name;
@Column(length=40)
private String dict_item_name;
@Column(length=40)
private String dict_item_code;
@Column
private int dict_sort;
@Column(length=40)
private String dict_enable;
@Column(length=40)
private String dict_memo;

public String getDict_id() {
    return dict_id;
}
public void setDict_id(String dict_id) {
    this.dict_id = dict_id;
}
public String getDict_type_code() {
    return dict_type_code;
}
public void setDict_type_code(String dict_type_code) {
    this.dict_type_code = dict_type_code;
}
public String getDict_type_name() {
    return dict_type_name;
}
public void setDict_type_name(String dict_type_name) {
    this.dict_type_name = dict_type_name;
}
public String getDict_item_name() {
    return dict_item_name;
}
public void setDict_item_name(String dict_item_name) {
    this.dict_item_name = dict_item_name;
}
public String getDict_item_code() {
    return dict_item_code;
}
public void setDict_item_code(String dict_item_code) {
    this.dict_item_code = dict_item_code;
}
public int getDict_sort() {
    return dict_sort;
}
public void setDict_sort(int dict_sort) {
    this.dict_sort = dict_sort;
}
public String getDict_enable() {
    return dict_enable;
}
public void setDict_enable(String dict_enable) {
    this.dict_enable = dict_enable;
}
public String getDict_memo() {
    return dict_memo;
}
public void setDict_memo(String dict_memo) {
    this.dict_memo = dict_memo;
}
@Override
public String toString() {
    return &quot;BaseDict [dict_id=&quot; + dict_id + &quot;, dict_type_code=&quot; + dict_type_code + &quot;, dict_type_name=&quot;
            + dict_type_name + &quot;, dict_item_name=&quot; + dict_item_name + &quot;, dict_item_code=&quot; + dict_item_code
            + &quot;, dict_sort=&quot; + dict_sort + &quot;, dict_enable=&quot; + dict_enable + &quot;, dict_memo=&quot; + dict_memo + &quot;]&quot;;
}

}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2.3创建applicationContext.xml&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
    xmlns:jpa=&quot;http://www.springframework.org/schema/data/jpa&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd&quot;&amp;gt;
    &amp;lt;!--引入jdbc.properties  --&amp;gt;
    &amp;lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&amp;gt;
    
    &amp;lt;context:component-scan base-package=&quot;com.itheima&quot;/&amp;gt;
    
    &amp;lt;!--配置数据源  --&amp;gt;
    &amp;lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&amp;gt;
        &amp;lt;property name=&quot;driverClass&quot; value=&quot;${jdbc.driver}&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;jdbcUrl&quot; value=&quot;${jdbc.url}&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;user&quot; value=&quot;${jdbc.user}&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    
    &amp;lt;!-- 配置entityManagerFactory --&amp;gt;
    &amp;lt;bean id=&quot;entityManagerFactory&quot; class=&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;&amp;gt;
        &amp;lt;!--1.,配置数据源(代替四个基本项)  --&amp;gt;
        &amp;lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;!--2,配置选配项  --&amp;gt;
        &amp;lt;property name=&quot;jpaProperties&quot;&amp;gt;
            &amp;lt;props&amp;gt;
                &amp;lt;prop key=&quot;hibernate.dialect&quot;&amp;gt;${hibernate.dialect}&amp;lt;/prop&amp;gt;
                &amp;lt;prop key=&quot;hibernate.show_sql&quot;&amp;gt;${hibernate.show_sql}&amp;lt;/prop&amp;gt;
                &amp;lt;prop key=&quot;hibernate.format_sql&quot;&amp;gt;${hibernate.format_sql}&amp;lt;/prop&amp;gt;
                &amp;lt;prop key=&quot;hibernate.hbm2ddl.auto&quot;&amp;gt;${hibernate.hbm2ddl.auto}&amp;lt;/prop&amp;gt;
            &amp;lt;/props&amp;gt;
        &amp;lt;/property&amp;gt;
        &amp;lt;!--3配置包扫描路径  --&amp;gt;
        &amp;lt;property name=&quot;packagesToScan&quot; value=&quot;com.itheima.crm.bean&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;!-- 4.,配置JPA适配 --&amp;gt;
        &amp;lt;property name=&quot;jpaVendorAdapter&quot; ref=&quot;jpaVendorAdapter&quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!--注册适配器  --&amp;gt;
    &amp;lt;bean id=&quot;jpaVendorAdapter&quot; class=&quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&quot;&amp;gt;&amp;lt;/bean&amp;gt;
    
    &amp;lt;!--配置事务管理器  --&amp;gt;
    &amp;lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;&amp;gt;
        &amp;lt;property name=&quot;entityManagerFactory&quot; ref=&quot;entityManagerFactory&quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!--配置注解事务  --&amp;gt;
    &amp;lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&amp;gt;
    
    &amp;lt;!--配置JPADao,生成代理对象 --&amp;gt;
    &amp;lt;jpa:repositories base-package=&quot;com.itheima.crm.dao&quot;&amp;gt;&amp;lt;/jpa:repositories&amp;gt;
    
    
    &amp;lt;!--配置数据字典模块  --&amp;gt;
    &amp;lt;bean id=&quot;baseDictService&quot; class=&quot;com.itheima.crm.service.impl.BaseDictServiceImpl&quot;&amp;gt;
        &amp;lt;property name=&quot;baseDictDao&quot; ref=&quot;baseDictDao&quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    
    &amp;lt;/beans&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.4创建Dao&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  public interface BaseDictDao extends PagingAndSortingRepository&amp;lt;BaseDict, String&amp;gt;{
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.查询方法命名规则及JPQL语法生成&lt;/p&gt;
&lt;p&gt;3.1概述&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SpringDataJPA默认情况下, 提供了查询的相关的方法, 基本上能满足我们80%左右的需要. 但是还有一些是没有满足的,我们可以遵循它的命名规范来定义方法名. 如果没有满足命名规范的, 可以在方法上加@Query注解来写语句&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.2 JPA命令规范&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;      关键字                               方法命名                                    sql where字句               
      And                           findByNameAndPwd                        where name= ? and pwd =?  
      Or                                findByNameOrSex                         where name= ? or sex=?    
      Is,Equals                 findById,findByIdEquals                 where id= ?               
      Between                   findByIdBetween                         where id between ? and ?  
      LessThan                      findByIdLessThan                            where id &amp;lt; ?              
      LessThanEquals            findByIdLessThanEquals                  where id &amp;lt;= ?             
      GreaterThan               findByIdGreaterThan                     where id &amp;gt; ?              
      GreaterThanEquals findByIdGreaterThanEquals       where id &amp;gt; = ?            
      After                             findByIdAfter                                   where id &amp;gt; ?              
      Before                        findByIdBefore                                  where id &amp;lt; ?              
      IsNull                        findByNameIsNull                            where name is null        
      isNotNull,NotNull         findByNameNotNull                       where name is not null    
       Like                             findByNameLike                          where name like ?         
      NotLike                       findByNameNotLike                       where name not like ?     
      StartingWith              findByNameStartingWith                  where name like '?%'      
      EndingWith                findByNameEndingWith                    where name like '%?'      
      Containing                findByNameContaining                    where name like '%?%'     
      OrderBy                   findByIdOrderByXDesc                    where id=? order by x desc
      Not                           findByNameNot                           where name &amp;lt;&amp;gt; ?           
      In                                findByIdIn(Collection&amp;lt;?&amp;gt; c)             where id in (?)           
      NotIn                         findByIdNotIn(Collection&amp;lt;?&amp;gt; c)          where id not  in (?)      
      True                          findByAaaTue                            where aaa = true          
      False                         findByAaaFalse                          where aaa = false         
      IgnoreCase                findByNameIgnoreCase                    where UPPER(name)=UPPER(?)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;eg&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     public interface StandardRepository extends JpaRepository&amp;lt;Standard, Long&amp;gt; {

// JPA的命名规范
List&amp;lt;Standard&amp;gt; findByName(String name);

// 自定义查询,没有遵循命名规范
@Query(&quot;from Standard where name = ?&quot;)
Standard findByNamexxxx(String name);

// 遵循命名规范,执行多条件查询
Standard findByNameAndMaxLength(String name, Integer maxLength);

// 自定义多条件查询
@Query(&quot;from Standard where name = ?2 and maxLength = ?1&quot;)
Standard findByNameAndMaxLengthxxx(Integer maxLength, String name);

// 使用标准SQL查询
@Query(value = &quot;select * from T_STANDARD where C_NAME = ? and C_MAX_LENGTH = ?&quot;,
        nativeQuery = true)
Standard findByNameAndMaxLengthxx(String name, Integer maxLength);

// 模糊查询
Standard findByNameLike(String name);

@Modifying // 代表本操作是更新操作
@Transactional // 事务注解
@Query(&quot;delete from Standard where name = ?&quot;)
void deleteByName(String name);

@Modifying // 代表本操作是更新操作
@Transactional // 事务注解
@Query(&quot;update Standard set maxLength = ? where name = ?&quot;)
void updateByName(Integer maxLength, String name);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Wed, 16 May 2018 13:07:00 +0000</pubDate>
<dc:creator>无冥</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kias2004/p/9048170.html</dc:identifier>
</item>
<item>
<title>漫画谈-微积分（一） - 川山甲</title>
<link>http://www.cnblogs.com/baochuan/p/9047309.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/baochuan/p/9047309.html</guid>
<description>
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/152332/201805/152332-20180516165534573-91279636.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;div class=&quot;c_body&quot; readability=&quot;36.5&quot;&gt;
&lt;div class=&quot;c_body&quot; readability=&quot;43&quot;&gt;
&lt;p&gt;背景&lt;/p&gt;

&lt;p&gt;　　大家有没有考虑过，工作（编程）一段时间之后，我们都会出现技术上的瓶颈，怎么去突破？&lt;/p&gt;

&lt;p&gt;　　我自身领悟到的是，除了抽象问题能力的提升外，如对问题宏观角度理解，还有很多是逻辑上的推理能力！&lt;/p&gt;

&lt;p&gt;　　在日常工作中，我们有没有把系统功能往数学相关性上考虑呢？马克思一生也不断的在探索数学知识，在写资本论的时候，经常会从数学的角度考虑问题（有《马克思数学手稿》一书做凭证，这本书目前都成古董了，市面上很难买到）。&lt;/p&gt;

&lt;p&gt;　　从现在开始，让我们融入数学的海洋中吧！一起去探讨学习数学知识。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;c_body&quot; readability=&quot;33&quot;&gt;
&lt;div class=&quot;c_body&quot; readability=&quot;38.5&quot;&gt;
&lt;p&gt;序章&lt;/p&gt;



&lt;div class=&quot;c_body&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/152332/201805/152332-20180516170223251-685434249.png&quot; alt=&quot;&quot;/&gt;
&lt;span&gt;&lt;strong&gt;函数是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;一件事变成了这样，使得另一件事变成了那样，所谓函数，说的就是事物间的相关性。&lt;/p&gt;
&lt;p&gt;函数说到底就是用来描述&lt;span&gt;“关系”&lt;/span&gt;（或“因果”）、&lt;span&gt;“变化”&lt;/span&gt;或者&lt;span&gt;“单位变化”&lt;/span&gt;的工具。&lt;/p&gt;

&lt;div class=&quot;c_body&quot; readability=&quot;35&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我们经常用的y=f(x)代表什么？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/152332/201805/152332-20180516170756953-1542534972.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 举个例子：把x当成青蛙，把青蛙放进一个f的盒子中，变换一下，就能出来一只叫y的蝌蚪。&lt;em&gt;&lt;span&gt;就是使用f给x施加某种规则或关系，进而推导出y&lt;/span&gt;&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/152332/201805/152332-20180516170927575-1171578271.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/152332/201805/152332-20180516171251090-1221562193.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;/div&gt;
&lt;div class=&quot;c_body&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/152332/201805/152332-20180516171901491-471405258.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;c_body&quot; readability=&quot;37.5&quot;&gt;
&lt;div class=&quot;c_head&quot;&gt;
&lt;p&gt;函数特征&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;因果&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;c_body&quot; readability=&quot;37&quot;&gt;
&lt;p&gt;如：温度为x° C，蟋蟀1分钟鸣叫次数为y。&lt;/p&gt;
&lt;p&gt;可表示为：　　y = g(x) = 7 x - 30,&lt;/p&gt;
&lt;p&gt;当x = 30时， 有为 180。 即 1分钟鸣叫180次。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;画成图形的话，就是一条直线&lt;/span&gt;&lt;/strong&gt;：&lt;/p&gt;

&lt;div class=&quot;c_body&quot; readability=&quot;35&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/152332/201805/152332-20180516172534688-1915013344.png&quot; alt=&quot;&quot;/&gt;
&lt;p&gt;&lt;span&gt;单位变换&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如：计算机采用经过二进制法（0， 1）处理后的信息，x比特锁表示的信息量为有，则 y = b(x) = 2 ^ x。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;画成图形的话，就是指数函数。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;c_body&quot; readability=&quot;36&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/152332/201805/152332-20180516172912855-2062940033.png&quot; alt=&quot;&quot;/&gt;
&lt;p&gt;&lt;span&gt;单位阶跃函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如：A公司的股票价格，不能用一条直线或者特定形式的曲线来表示的函数。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/152332/201805/152332-20180516173212200-758372085.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;函数如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/152332/201805/152332-20180516173945178-1733856545.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;复合函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 函数组合在一起之后称为“复合函数”。我们能够通过复合函数将因果关系扩展到更广阔的范围。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/152332/201805/152332-20180516174027005-583356715.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;div class=&quot;c_body&quot;&gt;
&lt;div class=&quot;c_body&quot; readability=&quot;32&quot;&gt;
&lt;div class=&quot;c_body&quot; readability=&quot;35.5&quot;&gt;
&lt;p&gt;微分：就是将函数化繁为简&lt;/p&gt;

&lt;div class=&quot;c_body&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/152332/201805/152332-20180516181743256-189194374.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;如果我们想知道目前国内通货膨胀情况，可以近似用下面函数去理解。&lt;/p&gt;

&lt;div class=&quot;c_body&quot; readability=&quot;33&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/152332/201805/152332-20180516182135648-1986937710.png&quot; alt=&quot;&quot;/&gt;
&lt;p&gt;篇幅和时间所限，今天暂时写到这里，明天再续，有什么问题欢迎大家一起交流。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;c_body&quot;&gt;
&lt;div class=&quot;c_body&quot;&gt;
&lt;div class=&quot;c_body&quot;&gt;
&lt;p&gt;推荐&lt;/p&gt;



&lt;div class=&quot;c_body&quot;&gt;&lt;img src=&quot;https://pic002.cnblogs.com/images/2012/152332/2012050707292019.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Wed, 16 May 2018 13:00:00 +0000</pubDate>
<dc:creator>川山甲</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/baochuan/p/9047309.html</dc:identifier>
</item>
</channel>
</rss>