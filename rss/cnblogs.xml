<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>EF Core 使用编译查询提高性能 - Sweet-Tang</title>
<link>http://www.cnblogs.com/tdfblog/p/ef-core-compilequery.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tdfblog/p/ef-core-compilequery.html</guid>
<description>&lt;p&gt;今天，我将向您展示这些EF Core中一个很酷的功能，通过使用显式编译的查询，提高查询性能。&lt;/p&gt;
&lt;p&gt;不过在介绍具体内容之前，需要说明一点，EF Core已经对表达式的编译使用了缓存；当您的代码需要重用以前执行的查询时，EF Core将使用哈希查找并从缓存中返回已编译的查询。&lt;/p&gt;
&lt;blockquote readability=&quot;3.8571428571429&quot;&gt;
&lt;p&gt;关于这一点，您可以查阅github上面的代码&lt;a href=&quot;https://github.com/aspnet/EntityFrameworkCore/blob/a26d3984be9a132ceae731a1a3e0681ed46bfd69/src/EFCore/Query/Internal/QueryCompiler.cs#L89&quot;&gt;QueryCompiler.cs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不过，您可能希望直接对查询进行编译，跳过哈希的计算和缓存查找。我们可以通过在&lt;code&gt;EF&lt;/code&gt;静态类中下面两个方法来实现：&lt;/p&gt;
&lt;p&gt;这些方法允许您定义一个已编译的查询，然后通过调用一个委托调用它。&lt;/p&gt;
&lt;blockquote readability=&quot;4.608&quot;&gt;
&lt;p&gt;如果您对表达式的哈希计算感兴趣，可以看一看它的实现，非常复杂，&lt;a href=&quot;https://github.com/aspnet/EntityFrameworkCore/blob/6c425d96f4553ae122d4ca784a75def379432679/src/EFCore/Query/Internal/ExpressionEqualityComparer.cs&quot;&gt;ExpressionEqualityComparer.cs&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了避免因为数据库查询产生测试结果的差异，我们这里使用内存数据库，它开销更小，同时也可以避免数据库优化执行计划以及缓存所带来的问题。&lt;/p&gt;
&lt;h2 id=&quot;实体定义以前数据库dbcontext&quot;&gt;实体定义以前数据库DbContext&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定义实体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这我们定义一个&lt;code&gt;Category&lt;/code&gt;实体类型，非常简单，只有两个属性。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Category
    {
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Guid Id { &lt;span class=&quot;kw&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;; }
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;string&lt;/span&gt; Name { &lt;span class=&quot;kw&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;; }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;数据库DbContext&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;FillCategories&lt;/code&gt;方法中，将内存数据库中增加三条记录。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; TestDbContext : DbContext
    {
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;TestDbContext&lt;/span&gt;(DbContextOptions&amp;lt;TestDbContext&amp;gt; options) : &lt;span class=&quot;kw&quot;&gt;base&lt;/span&gt;(options)
        {
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; DbSet&amp;lt;Category&amp;gt; Categories { &lt;span class=&quot;kw&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;FillCategories&lt;/span&gt;()
        {
            &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; foodCategory = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Category {
                Id = Guid.&lt;span class=&quot;fu&quot;&gt;NewGuid&lt;/span&gt;(),
                Name = &lt;span class=&quot;st&quot;&gt;&quot;Food&quot;&lt;/span&gt;
            };

            Categories.&lt;span class=&quot;fu&quot;&gt;AddRange&lt;/span&gt;(foodCategory, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Category {
                Id = Guid.&lt;span class=&quot;fu&quot;&gt;NewGuid&lt;/span&gt;(),
                Name = &lt;span class=&quot;st&quot;&gt;&quot;Drinks&quot;&lt;/span&gt;
            }, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Category {
                Id = Guid.&lt;span class=&quot;fu&quot;&gt;NewGuid&lt;/span&gt;(),
                Name = &lt;span class=&quot;st&quot;&gt;&quot;Clothing&quot;&lt;/span&gt;
            }, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Category {
                Id = Guid.&lt;span class=&quot;fu&quot;&gt;NewGuid&lt;/span&gt;(),
                Name = &lt;span class=&quot;st&quot;&gt;&quot;Electronis&quot;&lt;/span&gt;
            });


            &lt;span class=&quot;fu&quot;&gt;SaveChanges&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;测试代码&quot;&gt;测试代码&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CompileQueryTest
    {
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt;   Func&amp;lt;TestDbContext, Guid, Category&amp;gt; _getCategory =
            EF.&lt;span class=&quot;fu&quot;&gt;CompileQuery&lt;/span&gt;((TestDbContext context, Guid id) =&amp;gt; context.&lt;span class=&quot;fu&quot;&gt;Categories&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;FirstOrDefault&lt;/span&gt;(c =&amp;gt; c.&lt;span class=&quot;fu&quot;&gt;Id&lt;/span&gt; == id));

        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;readonly&lt;/span&gt; TestDbContext _dbContext;

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;CompileQueryTest&lt;/span&gt;()
        {
            &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; options = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; DbContextOptionsBuilder&amp;lt;TestDbContext&amp;gt;().&lt;span class=&quot;fu&quot;&gt;UseInMemoryDatabase&lt;/span&gt;(Guid.&lt;span class=&quot;fu&quot;&gt;NewGuid&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;ToString&lt;/span&gt;()).&lt;span class=&quot;fu&quot;&gt;Options&lt;/span&gt;;
            &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; context = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;TestDbContext&lt;/span&gt;(options);

            context.&lt;span class=&quot;fu&quot;&gt;FillCategories&lt;/span&gt;();

            _dbContext = context;
        }

        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;readonly&lt;/span&gt; Guid _queryId = Guid.&lt;span class=&quot;fu&quot;&gt;NewGuid&lt;/span&gt;();

        [Benchmark]
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;CompiledQuery&lt;/span&gt;()
        {
            _ = &lt;span class=&quot;fu&quot;&gt;_getCategory&lt;/span&gt;(_dbContext, _queryId);
        }


        [Benchmark]
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UnCompiledQuery&lt;/span&gt;()
        {

            _ = _dbContext.&lt;span class=&quot;fu&quot;&gt;Categories&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;FirstOrDefault&lt;/span&gt;(c =&amp;gt; c.&lt;span class=&quot;fu&quot;&gt;Id&lt;/span&gt; == _queryId);

        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了更加接近测试结果，我们在构造函数中创建&lt;code&gt;TestDbContext&lt;/code&gt;对象以及填充数据库。&lt;/p&gt;
&lt;h2 id=&quot;测试结果&quot;&gt;测试结果&lt;/h2&gt;
&lt;p&gt;我们使用Benchmark.Net进行基准测试，测试结果如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;CompiledQuery&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;10.59 us&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.0580 us&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.0543 us&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;UnCompiledQuery&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;79.55 us&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.7860 us&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.7353 us&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;经过编译的查询比未编译过的查询存在接近8倍的差距。如果您对这个功能感兴趣，不防自己测试一下。&lt;/p&gt;
</description>
<pubDate>Sun, 14 Jan 2018 23:38:00 +0000</pubDate>
<dc:creator>Sweet-Tang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tdfblog/p/ef-core-compilequery.html</dc:identifier>
</item>
<item>
<title>编程范式：命令式编程(Imperative)、声明式编程(Declarative)和函数式编程(Functional) - backslash112</title>
<link>http://www.cnblogs.com/sirkevin/p/8283110.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sirkevin/p/8283110.html</guid>
<description>&lt;p class=&quot;gmail-p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;&lt;span&gt;主要的编程范式有三种：命令式编程，声明式编程和函数式编程。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;&lt;strong&gt;命令式编程：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;&lt;span&gt;命令式编程的主要思想是关注计算机执行的步骤，即&lt;/span&gt;&lt;span&gt;一步一步告诉计算机先做什么再做什么&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;比如：如果你想在一个数字集合 collection(变量名) 中筛选大于 5 的数字，你需要这样告诉计算机：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;第一步，创建一个存储结果的集合变量 results；&lt;/li&gt;
&lt;li&gt;第二步，遍历这个数字集合 collection；&lt;/li&gt;
&lt;li&gt;第三步：一个一个地判断每个数字是不是大于 5，如果是就将这个数字添加到结果集合变量 results 中。&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;代码实现如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; results = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;();
foreach(var num in collection)
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (num &amp;gt; 5&lt;span&gt;)
          results.Add(num);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span&gt;很明显，这个样子的代码是很常见的一种，&lt;/span&gt;&lt;span&gt;不管你用的是 C, C++ 还是 C#, Java, Javascript, BASIC, Python, Ruby&lt;/span&gt; &lt;span&gt;等等，你都可以以这个方式写。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p2&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;gmail-p2&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;&lt;strong&gt;声明式编程：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;&lt;span&gt;声明式编程是以数据结构的形式来表达程序执行的逻辑。它的主要思想是告诉计算机&lt;/span&gt;&lt;span&gt;应该做什么，但不指定具体要怎么做&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;SQL 语句就是最明显的一种声明式编程的例子，例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; collection &lt;span&gt;WHERE&lt;/span&gt; num &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;gmail-p2&quot;&gt;&lt;span&gt;除了 SQL，网页编程中用到的 HTML 和 CSS 也都属于声明式编程。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p2&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;&lt;span&gt;通过观察声明式编程的代码我们可以发现它有一个特点是它&lt;/span&gt;&lt;span&gt;不需要创建变量用来存储数据&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;&lt;span&gt;另一个特点是&lt;/span&gt;&lt;span&gt;它不包含循环控制的代码如 for， while。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p2&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;gmail-p2&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;&lt;strong&gt;函数式编程：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;&lt;span&gt;函数式编程和声明式编程是有所关联的，因为他们思想是一致的：&lt;/span&gt;&lt;span&gt;即只关注做什么而不是怎么做&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;但函数式编程不仅仅局限于声明式编程。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;函数式编程最重要的特点是“函数第一位”，即函数可以出现在任何地方，比如你可以把函数作为参数传递给另一个函数，不仅如此你还可以将函数作为返回值。大部分常见的编程语言一半都已经提供了对这种编程方式的支持，比如 JavaScript，再有 C# 中的 LINQ 和 Java 中的 Lambda 和闭包的概念。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;Java 8 最大的一个对函数式编程支持的更新就是 Stream API，感兴趣的可以了解下，官方文档地址：&lt;span&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p2&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;&lt;span&gt;相比于以前的命令式编程，&lt;/span&gt;&lt;span&gt;在 Java 中我个人现在更倾向于函数式编程的方法，它可以让代码的逻辑更清晰更优雅，&lt;/span&gt;&lt;span&gt;比如同样的逻辑用 Java 8 的 Stream 方式写就是：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
List&amp;lt;Number&amp;gt; results =&lt;span&gt; collection.stream()
                                 .filter(n &lt;/span&gt;-&amp;gt; n &amp;gt; 5&lt;span&gt;)
                                 .collect(Collectors.toList());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;gmail-p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;&lt;strong&gt;结束语：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;以后会另起一篇专门整理下 Java 8 的函数式编程 Stream API 的用法，有兴趣的朋友欢迎关注本博客，也欢迎大家留言讨论。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt; 我们处于大数据时代，对数据处理感兴趣的朋友欢迎查看另一个系列随笔：&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/sirkevin/p/5770681.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;利用Python进行数据分析 基础系列随笔汇总&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;&lt;span&gt;分享一张小镇附近的小湖边：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/238796/201801/238796-20180114124438785-1272497351.jpg&quot; alt=&quot;&quot; width=&quot;700&quot;/&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;gmail-p1&quot;&gt;&lt;span class=&quot;gmail-s1&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 14 Jan 2018 23:16:00 +0000</pubDate>
<dc:creator>backslash112</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sirkevin/p/8283110.html</dc:identifier>
</item>
<item>
<title>（GO_GTD_2)基于OpenCV和QT，建立Android图像处理程序 - jsxyhelu</title>
<link>http://www.cnblogs.com/jsxyhelu/p/8286475.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jsxyhelu/p/8286475.html</guid>
<description>&lt;div readability=&quot;86.5&quot;&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span&gt;    &lt;/span&gt;如何采集图片？在windows环境下，我们可以使用dshow，在linux下，也有ffmpeg等基础类库，再不济，opencv自带的videocapture也是提供了基础的支撑。那么在andoird下，使用的肯定是Android自带的相关函数了。由于Android是基于java语言的，如果我们想要调用Android&lt;/span&gt;&lt;span&gt; 的相关函数，那么必须通过JNI的方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    这里有可以分为两种，一种是直接在java中实现比较完整的函数，在qt中，只需要调用这个函数就可以；另一种就是使用qt自带的jni机制，比如下面这样，打开摄像头，并且采集图片。我们首先介绍第二种方法，让大家最快进入情况。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、通过JNI打开摄像头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;a、填加头文件和命名空间，定义公共变量和宏：&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;#include&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;QtAndroid&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#include&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;QDebug&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#include&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;QAndroidJniEnvironment&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#include&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;QAndroidActivityResultReceiver&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#include&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;QDateTime&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#include&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;QFile&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;cv;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;QtAndroid&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div readability=&quot;49&quot;&gt;
&lt;p&gt;&lt;span&gt;QString&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;strFetchImage&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;QString&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;selectedFileName&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;#define&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;CHECK_EXCEPTION&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;\&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;if&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(env-&amp;gt;ExceptionCheck())\&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{\&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;qDebug&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;exception&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;occured&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;\&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;env-&amp;gt;ExceptionClear();\&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;其中需要注意的是，&lt;/span&gt;&lt;span&gt;CHECK_EXCEPTION&lt;/span&gt;&lt;span&gt;是用来检查Android系统是否有异常的。这一点在使用JNI的时候非常重要和必要。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;b、填加回调类，主要就是在一系列异常判断后，获得imagepath。该类集成自&lt;/span&gt;&lt;span&gt;ResultReceiver&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ResultReceiver&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;QAndroidActivityResultReceiver&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ResultReceiver&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;QString&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;imagePath&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;QLabel&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span&gt; &lt;/span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;m_imagePath&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;imagePath&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;),&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;m_imageView&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;handleActivityResult&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;receiverRequestCode&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;resultCode&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;QAndroidJniObject&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;qDebug&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;handleActivityResult,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;requestCode&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;receiverRequestCode&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;resultCode&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;resultCode&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;();&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;resultCode&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;receiverRequestCode&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;qDebug&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;captured&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;m_imagePath&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;qDebug&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;captured&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;exist&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;QFile&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;exists&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;m_imagePath&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;m_imageView&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;setPixmap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;QPixmap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;m_imagePath&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;));&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span&gt;    &lt;/span&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;QString&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;m_imagePath&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;QLabel&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*&lt;/span&gt;&lt;span&gt;m_imageView&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;};&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt;C、填加控件触发事件。一般来说我们选择pressed事件&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/508489/201801/508489-20180115071503771-275443080.png&quot; alt=&quot;&quot; name=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;d、编写拍照代码&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;82&quot;&gt;
&lt;p&gt;&lt;span&gt;//打开摄像头，采集图片&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt;MainWindow&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;on_btn_capture_pressed&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ui&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;lbMain&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;setScaledContents&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;span&gt;//显示的图像自动缩放&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;b_canSave&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;; &lt;/span&gt;&lt;span&gt;//图片没有采集完成，目前不可以保存&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//引用JNI&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;QAndroidJniEnvironment&lt;/span&gt;&lt;span&gt;env&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//创建用于打开摄像头的content&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;QAndroidJniObject&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;QAndroidJniObject&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;fromString&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;&quot;android.media.action.IMAGE_CAPTURE&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;span&gt;QAndroidJniObject&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;intent&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;&quot;android/content/Intent&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;&quot;(Ljava/lang/String;)V&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jstring&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;gt;());&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//设定img路径&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;QString&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;QDateTime&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;currentDateTime&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;().&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;&quot;yyyyMMdd_hhmmss&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;QAndroidJniObject&lt;/span&gt;&lt;span&gt;fileName&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;QAndroidJniObject&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;fromString&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;+&lt;/span&gt;&lt;span&gt;&quot;.jpg&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;QAndroidJniObject&lt;/span&gt;&lt;span&gt;savedDir&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;QAndroidJniObject&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;callStaticObjectMethod&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;&quot;android/os/Environment&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;&quot;getExternalStorageDirectory&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;&quot;()Ljava/io/File;&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//使用CHECK_EXCEPTION处理异常&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CHECK_EXCEPTION&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;qDebug&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;()&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt;&quot;savedDir&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt;savedDir&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;();&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;QAndroidJniObject&lt;/span&gt;&lt;span&gt;savedImageFile&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;&quot;java/io/File&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;&quot;(Ljava/io/File;Ljava/lang/String;)V&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;savedDir&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jobject&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;gt;(),&lt;/span&gt;&lt;span&gt;fileName&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jstring&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;gt;());&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CHECK_EXCEPTION&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;qDebug&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;()&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt;&quot;savedImageFile&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt;savedImageFile&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;();&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;QAndroidJniObject&lt;/span&gt;&lt;span&gt;savedImageUri&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;QAndroidJniObject&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;callStaticObjectMethod&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;&quot;android/net/Uri&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;&quot;fromFile&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;&quot;(Ljava/io/File;)Landroid/net/Uri;&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;savedImageFile&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jobject&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;gt;());&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CHECK_EXCEPTION&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;()&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;//将输出路径传递过来&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;QAndroidJniObject&lt;/span&gt;&lt;span&gt;mediaStoreExtraOutput&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;QAndroidJniObject&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;getStaticObjectField&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;&quot;android/provider/MediaStore&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;&quot;EXTRA_OUTPUT&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;&quot;Ljava/lang/String;&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CHECK_EXCEPTION&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;qDebug&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;()&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt;&quot;MediaStore.EXTRA_OUTPUT&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt;mediaStoreExtraOutput&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;();&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;intent&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;callObjectMethod&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;putExtra&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;&quot;(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;mediaStoreExtraOutput&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jstring&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;gt;(),&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;savedImageUri&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jobject&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;gt;());&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;//获得采集图片的绝对路径,并且显示出来&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ResultReceiver&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*&lt;/span&gt;&lt;span&gt;resultReceiver&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;ResultReceiver&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;savedImageFile&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(),&lt;/span&gt;&lt;span&gt;ui&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;lbMain&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;startActivity&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;intent&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;resultReceiver&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//获得返回的绝对地址(注意这句话一定要写在&lt;/span&gt;&lt;span&gt;CHECK_EXCEPTION&lt;/span&gt;&lt;span&gt;中）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;strFetchImage&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;savedImageFile&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;toString&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;();&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;最终采集到的图片地址保存在&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;strFetchImage&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;中&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;&lt;span&gt;e、编写处理代码。由于我这里主要进行的是图像处理操作，所以必须结合OpenCV相关函数进行&lt;/span&gt;&lt;/p&gt;&lt;div readability=&quot;179&quot;&gt;
&lt;p&gt;&lt;span&gt;//图像处理操作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt;MainWindow&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;on_btn_process_pressed&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;b_canSave&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;if&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(strFetchImage&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;!=&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ui&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;lbMain&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;setScaledContents&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Mat&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;imread&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(strFetchImage.&lt;/span&gt;&lt;span&gt;toStdString&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;());&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Mat&lt;/span&gt;&lt;span&gt;src2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Mat&lt;/span&gt;&lt;span&gt;rotated&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;////////////////////////////主要算法/////////////////////////////&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cv&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;resize&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;src2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;cv&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Size&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;720&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;));&lt;/span&gt;&lt;span&gt;//标准大小&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Mat&lt;/span&gt;&lt;span&gt;src_gray&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Mat&lt;/span&gt;&lt;span&gt;src_all&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;src2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;clone&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;();&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Mat&lt;/span&gt;&lt;span&gt;threshold_output&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;vector&amp;lt;vector&amp;lt;&lt;/span&gt;&lt;span&gt;Point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;contours&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;contours2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;vector&amp;lt;&lt;/span&gt;&lt;span&gt;Vec4i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;hierarchy&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//预处理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cvtColor&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;src2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;src_gray&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;CV_BGR2GRAY&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;blur&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;src_gray&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;src_gray&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;Size&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;span&gt;//模糊，去除毛刺&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;threshold&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;src_gray&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;threshold_output&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;255&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;THRESH_OTSU&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//添加提示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ui&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;lb_info&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;setText&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;&quot;开始寻找轮廓!&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//寻找轮廓&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//第一个参数是输入图像&lt;/span&gt;&lt;span&gt;2值化的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//第二个参数是内存存储器，FindContours找到的轮廓放到内存里面。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//第三个参数是层级，**[Next,&lt;/span&gt;&lt;span&gt;Previous,&lt;/span&gt;&lt;span&gt;First_Child,&lt;/span&gt;&lt;span&gt;Parent]**&lt;/span&gt;&lt;span&gt;的vector&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//第四个参数是类型，采用树结构&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//第五个参数是节点拟合模式，这里是全部寻找&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;findContours&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;threshold_output&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;contours&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;hierarchy&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;CV_RETR_TREE&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;CHAIN_APPROX_NONE&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;Point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//添加提示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;if&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;contours&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.size()&amp;lt;=&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;ui&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;lb_info&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;setText&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;&quot;轮廓筛选错误，循环退出!请重新采集数据。&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;else&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;ui&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;lb_info&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;setText&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;&quot;开始寻找轮廓!&lt;/span&gt;&lt;span&gt;开始筛选轮廓!&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;//轮廓筛选&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;ic&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;area&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;parentIdx&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;for&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;contours&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.size();&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;++&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//hierarchy[i][2]&lt;/span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;&lt;span&gt;表示不是最外面的轮廓&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;if&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;hierarchy&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;][&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;!=&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt;ic&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;==&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;parentIdx&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ic&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;++;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;hierarchy&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;][&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;!=&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ic&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;++;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//最外面的清0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;hierarchy&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;][&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;==&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ic&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;parentIdx&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//找到定位点信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;if&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;ic&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;contours2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.push_back(&lt;/span&gt;&lt;span&gt;contours&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;parentIdx&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ic&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;parentIdx&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;//添加提示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;if&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;contours2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.size()&amp;lt;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ui&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;lb_info&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;setText&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;&quot;定位点选择错误，循环退出!请重新采集数据。&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;return&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;else&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ui&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;lb_info&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;setText&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;&quot;开始寻找轮廓!&lt;/span&gt;&lt;span&gt;开始筛选轮廓!定位点选择正确!&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;//填充定位点,我们约定，必须要能够同时识别出4个点来&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;for&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;contours2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.size();&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;++)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;drawContours&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;src_all&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;contours2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;CV_RGB&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;255&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;//识别出来了关键区域，但是数量不对，显示当前识别结果，退出循环&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;if&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;contours2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.size()&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;!=&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;QPixmap&lt;/span&gt;&lt;span&gt;qpixmap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;Mat2QImage&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;src_all&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ui&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;lbMain&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;setPixmap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;qpixmap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ui&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;lb_info&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;setText&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;&quot;定位点数量不为4!请重新采集数据。&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;return&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;else&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//否则，进一步分割&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Point&lt;/span&gt;&lt;span&gt;point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;];&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;for&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;contours2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.size();&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;++)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//筛选轮廓，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;contourArea&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;contours2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;if&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;720&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;/&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ui&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;lb_info&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;setText&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;&quot;采集中有错误轮廓，请重新采集数据&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;QPixmap&lt;/span&gt;&lt;span&gt;qpixmap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;Mat2QImage&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;src_all&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ui&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;lbMain&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;setPixmap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;qpixmap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;return&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//定位重点，并重新排序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Point&lt;/span&gt;&lt;span&gt;ptmp&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;Center_cal&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;contours2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;if&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;ptmp&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;720&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;/&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt;ptmp&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;/&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;ptmp&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;ptmp&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;720&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;/&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt;ptmp&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;/&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;ptmp&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;ptmp&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;720&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;/&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt;ptmp&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;/&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;ptmp&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;else&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;ptmp&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;//打印出来&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;for&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;++)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;cbuf&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;];&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;sprintf&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;cbuf&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;&quot;%d&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;putText&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;src_all&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;cbuf&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;],&lt;/span&gt;&lt;span&gt;FONT_HERSHEY_PLAIN&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;Scalar&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;),&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ui&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;lb_info&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;setText&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;&quot;结果识别正确，可以保存&quot;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;//透视变换&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cv&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;::&lt;/span&gt;&lt;span&gt;Point2f&lt;/span&gt;&lt;span&gt;src_vertices&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;];&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;src_vertices&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;];&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;src_vertices&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;];&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;src_vertices&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;];&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;src_vertices&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;];&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Point2f&lt;/span&gt;&lt;span&gt;dst_vertices&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;];&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;dst_vertices&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;Point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;dst_vertices&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;Point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;720&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;dst_vertices&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;Point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;dst_vertices&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;]&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;Point&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;720&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Mat&lt;/span&gt;&lt;span&gt;warpMatrix&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;getPerspectiveTransform&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;src_vertices&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;dst_vertices&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//执行透视变化&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;warpPerspective&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;src2&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;rotated&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;warpMatrix&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;rotated&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(),&lt;/span&gt;&lt;span&gt;INTER_LINEAR&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;,&lt;/span&gt;&lt;span&gt;BORDER_CONSTANT&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//////////////////////////END&lt;/span&gt;&lt;span&gt;主要算法&lt;/span&gt;&lt;span&gt;END&lt;/span&gt;&lt;span&gt;///////////////////////&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将图片显示到label上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;QPixmap&lt;/span&gt;&lt;span&gt;qpixmap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;Mat2QImage&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;rotated&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ui&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;lbMain&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;setPixmap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(&lt;/span&gt;&lt;span&gt;qpixmap&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;matResult&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;rotated&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;.&lt;/span&gt;&lt;span&gt;clone&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;();&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;b_canSave&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;=&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、初步结果和继续研究需要解决的问题&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Sun, 14 Jan 2018 23:15:00 +0000</pubDate>
<dc:creator>jsxyhelu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jsxyhelu/p/8286475.html</dc:identifier>
</item>
<item>
<title>部署 k8s Cluster（下）- 每天5分钟玩转 Docker 容器技术（119） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8282367.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8282367.html</guid>
<description>&lt;p&gt;&lt;span&gt;上节我们通过 kubeadm 在 k8s-master 上部署了 Kubernetes，本节安装 Pod 网络并添加 k8s-node1 和 k8s-node2，完成集群部署。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;安装 Pod 网络&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;要让 Kubernetes Cluster 能够工作，必须安装 Pod 网络，否则 Pod 之间无法通信。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Kubernetes 支持多种网络方案，这里我们先使用 flannel，后面还会讨论 Canal。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;执行如下命令部署 flannel：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml&lt;/span&gt;
&lt;/pre&gt;
&lt;div&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;593.png&quot; src=&quot;https://i.imgsafe.org/ab/ab11ab7cdd.png&quot; alt=&quot;593.png&quot;/&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;添加 k8s-node1 和 k8s-node2&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在 k8s-node1 和 k8s-node2 上分别执行如下命令，将其注册到 Cluster 中：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;kubeadm join --token d38a01.13653e584ccc1980 192.168.56.105:6443&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;这里的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;--token&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 来自前面 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubeadm init&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 输出的第 ⑨ 步提示，如果当时没有记录下来可以通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubeadm token list&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 查看。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;595.png&quot; src=&quot;https://i.imgsafe.org/ab/ab11be7486.png&quot; alt=&quot;595.png&quot;/&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;kubeadm join&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 执行如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;594.png&quot; src=&quot;https://i.imgsafe.org/ab/ab11bc5163.png&quot; alt=&quot;594.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;根据提示，我们可以通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl get nodes&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 查看节点的状态。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;596.png&quot; src=&quot;https://i.imgsafe.org/ab/ab11ca142f.png&quot; alt=&quot;596.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;目前所有节点都是 &lt;/span&gt;&lt;code&gt;&lt;span&gt;NotReady&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，这是因为每个节点都需要启动若干组件，这些组件都是在 Pod 中运行，需要首先从 google 下载镜像，我们可以通过如下命令查看 Pod 的状态：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;kubectl get pod --all-namespaces&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;597.png&quot; src=&quot;https://i.imgsafe.org/ab/ab11d61c84.png&quot; alt=&quot;597.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;Pending&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;ContainerCreating&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;ImagePullBackOff&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 都表明 Pod 没有就绪，&lt;/span&gt;&lt;code&gt;&lt;span&gt;Running&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 才是就绪状态。我们可以通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl describe pod &amp;lt;Pod Name&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 查看 Pod 具体情况，比如：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;kubectl describe pod kube-flannel-ds-v0p3x --namespace=kube-system&lt;/span&gt;
&lt;/pre&gt;
&lt;div&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;598.png&quot; src=&quot;https://i.imgsafe.org/ab/ab11dec76e.png&quot; alt=&quot;598.png&quot;/&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;为了节省篇幅，这里只截取命令输出的最后部分，可以看到在下载 image 时失败，如果网络质量不好，这种情况是很常见的。我们可以耐心等待，因为 Kubernetes 会重试，我们也可以自己手工执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker pull&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 去下载这个镜像。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;等待一段时间，image 都成功下载后，所有 Pod 会处于 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Running&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 状态。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;599.png&quot; src=&quot;https://i.imgsafe.org/ab/ab11f57355.png&quot; alt=&quot;599.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;这时，所有的节点都已经 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Ready&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，Kubernetes Cluster 创建成功，一切准备就绪。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;600.png&quot; src=&quot;https://i.imgsafe.org/ab/ab11f3f0d2.png&quot; alt=&quot;600.png&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;本章通过 kubeadm 部署了三节点的 Kubernetes 集群，后面章节我们都将在这个实验环境中学习 Kubernetes 的各项技术。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://www.cnblogs.com/Users/wanglei/百度云同步盘/容器/images/480.png?v=1510821977521&quot; alt=&quot;&quot;/&gt;&lt;span&gt;&lt;strong&gt;书籍：&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 14 Jan 2018 23:03:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8282367.html</dc:identifier>
</item>
<item>
<title>Java 中的函数式编程(Functional Programming)：Lambda 初识 - backslash112</title>
<link>http://www.cnblogs.com/sirkevin/p/8282952.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sirkevin/p/8282952.html</guid>
<description>&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;Java 8 发布带来的一个主要特性就是对函数式编程的支持。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;而 Lambda 表达式就是一个新的并且很重要的一个概念。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;它提供了一个&lt;span&gt;简单并且很简洁&lt;/span&gt;的编码方式。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;首先从几个简单的 Lambda 表达式的例子开始了解 Java 中的函数式编程。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p2&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;&lt;span&gt;&lt;strong&gt;Lambda 表达式初识：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;首先定义一个 Lambda 表达式：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
x -&amp;gt; x + 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;这个表达式输入参数是一个 x，然后对这个参数 x 的操作是加 1，然后将这个结果返回，即返回值。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;从这个简单的 Lambda 表达式可以看出 Lambda 表达式的语法格式是：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
(类型 参数1, 类型 参数2) -&amp;gt; { 方法体 }
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span&gt;参数的小括号可以省略不写；&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;&lt;span&gt;方法体的花括号也可以省略不写&lt;/span&gt;（这是因为方法体有两种类型：单行代码 或者是 代码块，单行代码不需要花括号同时 return 关键字省略），例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt; y) -&amp;gt; { &lt;span&gt;return&lt;/span&gt; x +&lt;span&gt; y; }
(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt; y) -&amp;gt; x +&lt;span&gt; y
x &lt;/span&gt;-&amp;gt; x + 1&lt;span&gt;
() &lt;/span&gt;-&amp;gt; 3.14&lt;span&gt;
(String s) &lt;/span&gt;-&amp;gt; { System.out.println(s); }
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;第一个表达式接收两个参数 x 和 y，返回 x + y；&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;第二个表达式和第一个表达式一样，省略了花括号和 return 关键字；&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;第三个表达式接收一个参数，返回 x+1；&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;第四个表达式不接收任何参数，返回数字 3.14；&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;第五个表达式接收一个参数，没有返回值。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p2&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;看到第三个表达式，很多新接触 Lambda 表达式的朋友不免会有两个疑问：&lt;span&gt;x 的类型是什么？这个整个函数的类型是什么呢，怎么表示它？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;接下来就要引入另一个关键的内容，即 java.util.function 包，官方对它的定义是：“Functional interfaces provide target types for lambda expressions and method references. ” 即为定义函数对象提供的类，也就是如何存储一个函数对象。也就是它专门用来解决上面提出的这个问题：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;回到刚刚的这个 Lambda 表达式：x -&amp;gt; x + 1，这个表达式接收一个参数，返回一个参数，我们可以将这个 Lambda 表达式表示为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Function&amp;lt;Integer, Integer&amp;gt; add = x -&amp;gt; x + 1&lt;span&gt;;
Function&lt;/span&gt;&amp;lt;String, String&amp;gt; concat  = x -&amp;gt; x + 1;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;第一行代码里的 x 的类型是 Integer，它表示将 Integer 类型的参数 x 加 1 然后并返回，即如果参数是 2，那么这行代码返回 3。&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;第二行代码里的 x 的类型是 String，它表示将 String 类型的参数 x 和 &quot;1&quot; 连接并返回，即如果参数是 &quot;hi&quot;, 那么这行代码返回 hi1。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p2&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;&lt;strong&gt;&lt;span&gt;两个参数：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;如果我们需要定义两个参数的函数要怎么写呢？比如将两个 Integer 类型的 x，y 进行求和并返回结果？&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;这里我们需要另一个类 &lt;span&gt;BiFunction&amp;lt;T, U, R&amp;gt;&lt;/span&gt;，T表示第一个输入参数的类型，U表示第二个输入参数的类型，R表示返回值的类型，所以我们的答案是：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
BiFunction&amp;lt;Integer, Integer, Integer&amp;gt; sum = (x, y) -&amp;gt; x + y;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;&lt;strong&gt;&lt;span&gt;只输入参数不返回结果：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;如果我们需要定义一个只输入参数却不返回结果的函数要怎么写？这里我们需要另一个类 &lt;span&gt;Consumer&amp;lt;T&amp;gt;&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Consumer&amp;lt;String&amp;gt; sayHi = name -&amp;gt; System.out.println(&quot;hi, &quot; + name);
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;如果想要定义输入两个参数却不返回结果的函数需要用 &lt;span&gt;BiConsumer&amp;lt;T, U&amp;gt;&lt;/span&gt; 类，用法和前面提到的 BiFunction 类型一样，不再赘述。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p2&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p2&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;&lt;strong&gt;&lt;span&gt;只返回结果不输入参数：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;如果我们需要定义一个只返回结果但不需要输入参数的函数要怎么写？这里我们需要另一个类 &lt;span&gt;Supplier&amp;lt;T&amp;gt;&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Supplier&amp;lt;String&amp;gt; getName = () -&amp;gt; &quot;Carl&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;&lt;strong&gt;&lt;span&gt;如何执行函数：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;既然有了函数，那么这些函数要怎么执行呢？&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;答案是用 &lt;span&gt;apply()&lt;/span&gt; 方法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
nteger result = add.apply(2);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回 3&lt;/span&gt;
String answer = concat.apply(&quot;hi&quot;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回 &quot;hi1&quot;&lt;/span&gt;
Integer  total = sum.apply(1, 2);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回 3&lt;/span&gt;
String name = getName.apply();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回 &quot;Carl&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;&lt;strong&gt;&lt;span&gt;结束语：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;之前一直用 C#、Objective-C、Swift 和 Python，因为今年研究生阶段的课程以 Java 语言为主，所以开始了解一下 Java。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;感兴趣的朋友欢迎关注本博客，也欢迎大家留言讨论。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p2&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;strong&gt;&lt;span&gt;参考资料：&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://www.amazon.com/Beginning-Java-Objects-Concepts-Second/dp/1590594576&quot; target=&quot;_blank&quot; data-saferedirecturl=&quot;https://www.google.com/url?hl=en&amp;amp;q=https://www.amazon.com/Beginning-Java-Objects-Concepts-Second/dp/1590594576&amp;amp;source=gmail&amp;amp;ust=1515989795066000&amp;amp;usg=AFQjCNHptZTrNO4zDEbdBxIiPcI_2_WXhg&quot;&gt;&lt;em&gt;Beginning Java objects&lt;/em&gt; by Jacquie Barker&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/index.html&quot; target=&quot;_blank&quot; data-saferedirecturl=&quot;https://www.google.com/url?hl=en&amp;amp;q=http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/index.html&amp;amp;source=gmail&amp;amp;ust=1515989795066000&amp;amp;usg=AFQjCNFPTYbGuq4xaelwo8JYW023Z051Lg&quot;&gt;Java SE 8: Lambda Quick Start&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://www.javacodegeeks.com/2014/07/java-se-8-new-features-tour-functional-programming-with-lambda-expression.html&quot; target=&quot;_blank&quot; data-saferedirecturl=&quot;https://www.google.com/url?hl=en&amp;amp;q=https://www.javacodegeeks.com/2014/07/java-se-8-new-features-tour-functional-programming-with-lambda-expression.html&amp;amp;source=gmail&amp;amp;ust=1515989795066000&amp;amp;usg=AFQjCNFPFBwSAvzi6tMeTvNgKDoGAi0dgQ&quot;&gt;The big change in Java SE 8&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://dzone.com/articles/functional-programming-java-8&quot;&gt;Functional Programming with Java 8 Functions&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;分享一张半个月前美国小镇的雪景：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt;&lt;span class=&quot;m_5159914068238236211gmail-s1&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/238796/201801/238796-20180114122406316-1166551775.jpg&quot; alt=&quot;&quot; width=&quot;700&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;m_5159914068238236211gmail-p1&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Sun, 14 Jan 2018 17:11:00 +0000</pubDate>
<dc:creator>backslash112</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sirkevin/p/8282952.html</dc:identifier>
</item>
<item>
<title>HTTP2.0和QUIC - AmyZYX</title>
<link>http://www.cnblogs.com/amyzhu/p/8285300.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/amyzhu/p/8285300.html</guid>
<description>&lt;p&gt;最近看到&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1588496760462100338&amp;amp;wfr=spider&amp;amp;for=pc&quot;&gt;腾讯云支持QUIC&lt;/a&gt;的文章，突然意识到还没有好好认识HTTP2、QUIC，而要认识HTTP2，就需要从HTTP1.0开始讲起，才能清楚HTTP的发展历程。&lt;/p&gt;
&lt;h2 id=&quot;http1.x&quot;&gt;HTTP1.x&lt;/h2&gt;
&lt;p&gt;HTTP（HyperText Transfer Protocol）超文本传输协议伴随着计算机网络和浏览器的诞生，HTTP1.0也随之而来，处于计算机中的应用层。HTTP是建立在TCP协议之上，所以HTTP协议的瓶颈及其优化技巧都是基于TCP协议本身的特性，如TCP三次握手四次挥手建立连接带来的RTT延迟时间等。&lt;br/&gt;HTTP建立之初，就是为了将HTML文档从Web服务器传送到客户端浏览器。&lt;br/&gt;影响一个HTTP网络请求的主要因素：带宽和延迟&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;带宽&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;延迟
&lt;ul&gt;&lt;li&gt;浏览器阻塞（HOL blocking）：浏览器对同一个域名，会限制最大连接数。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;DNS查询（DNS Lookup）：缓存DNS&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;建立链接（Initial connection）：TCP三次握手&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;HTTP 1.1与HTTP 1.0的区别：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;缓存处理，引入更多缓存头控制缓存策略&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;带宽优化及网络连接的使用，增加断点续传功能&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;错误通知的管理：新增24个错误状态码，如409（conflict）表示请求资源与资源当前状态冲突、410（Gone）表示服务器上某个资源被永久性删除。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Host头处理。随着虚拟主机技术的发展，一台物理服务器上可以存在多个虚拟主机且共享同一个IP。HTTP 1.1请求和响应都支持host头，请求消息中如果缺少host，会抱400（Bad Request）&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;长连接，HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，&lt;strong&gt;减少建立、关闭连接的消耗和延迟&lt;/strong&gt;。HTTP 1.1中默认开启Connection:keep-alive。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;HTTP 1.0与1.1存在的问题：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;HTTP传输数据，每次都要3次握手建立连接，增加了大量延迟&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;明文传输&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;header携带内容过大，增加传输成本，并且每次请求header变化不大，移动端增加用户流量&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;虽然HTTP1.1支持了keep-alive，但是keep-alive使用多了同样给服务端带来大量的性能压力，因为文件被请求后，服务端需要保持不必要的连接很长时间。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;https&quot;&gt;HTTPS&lt;/h2&gt;
&lt;p&gt;HTTPS（网景1994创建）就是安全版的HTTP，与HTTP的区别如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;HTTPS协议需要到CA申请证书，免费证书很少，一般需要交费。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;HTTP协议运行在TCP之上，所有传输内容都是明文；HTTPS运行在SSL/TLS（Transport Layer Secure）上，SSL/TLS运行在TCP上，所有传输内容都是加密的。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;HTTP和HTTPS使用端口不同：HTTP默认80，HTTPS默认443。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;HTTPS可以有效防止运营商劫持。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;一个HTTP网站全站改造为HTTPS，需要关注的点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;安装CA证书&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;购买证书后，在证书提供网站上配置自己的域名，将证书下载下来后，配置自己的web服务器，同时进行代码改造。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;HTTPS降低用户访问速度。SSL握手会一定程度降低速度。如果使用SPDY，HTTPS速度甚至还要比HTTP快。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;HTTPS中大量的密钥算法计算，会消耗服务端大量CPU资源。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;spdy&quot;&gt;SPDY&lt;/h2&gt;
&lt;p&gt;SPDY位于HTTP之下，TCP和SSL之上，可以轻松兼容老版本的HTTP协议，也可以使用已有的SSL功能。&lt;br/&gt;SPDY是Google2012年提出，主要解决如下问题：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;降低延迟。针对HTTP高延迟的问题，SPDY采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接，解决了HOL blocking问题，降低延迟同时提高了带宽的利用率。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;请求优先级（request prioritization）。多路复用的连接共享机制有可能导致关键请求被阻塞。SPDY允许给每个request设置优先级，重要请求优先得到响应。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;header压缩。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;基于HTTPS的加密协议传输，大大提高了传输数据的可靠性。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;服务端推送（Server push）&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;http2.0&quot;&gt;HTTP2.0&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/&quot;&gt;YouTube&lt;/a&gt;、&lt;a href=&quot;https://www.taobao.com/&quot;&gt;淘宝&lt;/a&gt;已经支持http2.0.&lt;br/&gt;HTTP2.0可以说是SPDY的升级版本，与SPDY的区别如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;HTTP2.0支持明文HTTP传输，而SPDY强制使用HTTPS。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;HTTP2.0消息头压缩算法使用&lt;a href=&quot;http://http2.github.io/http2-spec/compression.html&quot;&gt;HPACK&lt;/a&gt;，而SPDY使用DEFLATE。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;HTTP2.0的主要目标是改进传输性能，实现低延迟和高吞吐量。&lt;/p&gt;
&lt;p&gt;HTTP2.0新特性：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;新的二进制（Binary Format）分帧层。HTTP1.x的解析基于文本，文本的展现形式多样，要做到健壮性考虑的场景必然很多，二进制则只有0和1，更&lt;strong&gt;高效健壮&lt;/strong&gt;。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;多路复用（MultiPlexing），即连接共享，每一个request都是用作连接共享机制的。每一个request对应一个id，一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方根据request的id将request再归属到不同服务端请求里面。客户端只需要一个连接就可以加载一个页面。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;header压缩。避免了重复header的传输，又减少了需要传输的大小。
&lt;ol&gt;&lt;li&gt;HTTP2.0会压缩首部元数据，在client和server使用首部表跟踪和存储之前发送的健值对，对于相同数据，不需要每次请求响应都发送。首部表在HTTP2.0的连接有效期内始终存在，由client、server共同渐进地更新，每个新的首部健值对要么更新已有值要么append到表尾。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;所有header必须全部小写，而且请求行要独立为健值对（即header+值）。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;服务端推送（server push）。服务端可以对一个客户端请求发送多个响应。server push通过推送那些它认为客户端将会需要使用到的内容到客户端缓存中，以此避免往返的延迟。
&lt;ol&gt;&lt;li&gt;客户端可以限定推送流的数量，也可以设置为0而完全禁用server push&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;所有推送都遵守同源策略，即服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认的。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;PUSH_PROMISE帧：所有服务器推送流都通过PUSH_PROMISE发送，服务端发出有意push所述资源的信号，客户端接收到PUSH_PROMISE帧后，也可以拒绝这个流。&lt;/li&gt;
&lt;li&gt;服务端必须遵循请求-响应的循环，只能借着对请求的响应推送资源。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;PUSH_PROMISE帧必须在返回响应之前发送，否则客户端会出现竞态条件。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;HTTP2.0的升级改造需要考虑的点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;HTTP2.0其实可以支持非HTTPS的，但是主流浏览器如chrome、Firefox还是只支持基于TLS部署的HTTP2.0协议，所以要升级HTTP2.0还是先升级HTTPS好。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;升级HTTPS后，如果使用NGINX，只需要在配置文件中启动相应的协议就可以。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;HTTP2.0完全兼容HTTP1.x，对于不支持HTTP2.0的浏览器，NGINX会自动向下兼容。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;quic协议&quot;&gt;QUIC协议&lt;/h2&gt;
&lt;p&gt;QUIC（Quick UDP Internet Connections）是由Google提出的一种基于UDP改进的低时延的互联网传输层（其实有疑义，QUIC基于UDP，其实更像应用层协议）协议。&lt;br/&gt;优点：具有SPDY的所有优点；0-RTT连接；减少丢包；前向纠错，减少重传时延；自适应拥赛控制，减少重新连接；相当于TLS加密。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;QUIC主要目标是减少连接延迟，客户端第一次连接服务器时，QUIC只需要1RTT的延迟就可以建立可靠安全的连接，相对于TCP+TLS的1～3次RTT要更加快捷。之后客户端可以在本地缓存加密的认证信息，再次与服务端建立连接时可以实现0RTT的连接建立延迟。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;QUIC同时复用了HTTP2.0的多路复用（Multiplexing）功能，但由于QUIC基于UDP，避免了HTTP/2的Head-of-Line Bolcking问题。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;QUIC基于UDP，运行在用户域而不是系统内核，使得QUIC协议可以快速部署和更新。&lt;/li&gt;
&lt;li&gt;重传与恢复&lt;br/&gt;与TCP类似，QUIC每发送一个包后，都会等待回复一个确认包。当丢包率超过协议的纠错阀值，会显示与隐式进行重传。&lt;br/&gt;对于某些重要的数据包，在确认丢失前就会进行重传。这样在网络中会有若干个相同包同时传输，任何一个成功抵达就完成了连接，通过这样降低丢包率。接收方对于关键数据包的多次发送和普通数据包的超时重传，都采用相同的重复包处理机制。&lt;br/&gt;QUIC在拥塞避免算法上还加入了心跳机包，用于减少丢包率。&lt;br/&gt;QUIC使用FEC（前向纠错）来恢复数据，FEC采用简单的异或方式。每次发送一组数据，包含若干个数据包后，并对这些数据包依次做异或运算，最后结果作为一个FEC包再发送出去。接收方收到一组数据后，根据数据包和FEC包即可以进行考验和纠错。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;安全性&lt;br/&gt;QUIC对每个散装的UDP包都进行了加密和认证的保护，并且避免使用前向依赖（如CBC模式）的方法，这样每个UDP包可以独立地根据IV进行加密或者认证处理。&lt;br/&gt;QUIC使用了两级密钥机制：初始密钥和会话密钥。初次连接时不加密，并协商初始密钥。初始密钥协商完毕后再马上协商会话密钥，这样可以保证密钥的前向安全性，之后通信过程还可以实现密钥的更新。接收方收到密钥更新时，需要用新旧两种密钥对数据进行解密，直到成功才会正式使用新密钥。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;0RTT握手过程&lt;br/&gt;QUIC握手过程需要一次数据交互，0RTT即可以完成握手过程的密钥协商，比TLS相比效率提供了5倍。&lt;br/&gt;QUIC在握手过程使用Diffie-Hellman算法协商初始密钥，初始化密钥依赖于服务器存储的一组配置参数，该参数会周期性更新。初始密钥协商成果后，服务端会提供一个临时随机数，双方根据这个随机数再生成会话密钥。&lt;br/&gt;client具体握手过程如下：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1301014/201801/1301014-20180115004735222-552253040.png&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sun, 14 Jan 2018 16:50:00 +0000</pubDate>
<dc:creator>AmyZYX</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/amyzhu/p/8285300.html</dc:identifier>
</item>
<item>
<title>算法4 七大排序之：归并排序 - nnngu</title>
<link>http://www.cnblogs.com/nnngu/p/8285334.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nnngu/p/8285334.html</guid>
<description>&lt;p&gt;上一篇总结了&lt;a href=&quot;http://www.cnblogs.com/nnngu/p/8283977.html&quot; target=&quot;_blank&quot;&gt;直接插入排序和希尔排序&lt;/a&gt;，这一篇要总结的是归并排序，这也是七大排序的最后一种排序算法。&lt;/p&gt;
&lt;p&gt;首先来看一下归并排序(Merge Sort) 的基本原理。它的原理是假设初始序列有n个元素，则可以看成是n个有序的子序列，每个子序列的长度为1，然后两两归并，得到n/2个长度为2或1的有序子序列；再两两归并，…… ，如此重复，直至得到一个长度为n的有序序列为止，这种排序方法就称为归并排序。&lt;/p&gt;
&lt;h2&gt;1、归并排序的示意图&lt;/h2&gt;
&lt;p&gt;下面用示意图来说明归并排序的过程：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图一：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313428/201801/1313428-20180115003705519-306718809.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图二：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313428/201801/1313428-20180115003743426-996799379.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;2、归并排序的代码&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;MergeSort.java &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MergeSort {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;[] list = {50, 10, 90, 30, 70&lt;span&gt;};
        System.out.println(&lt;/span&gt;&quot;************归并排序************&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;排序前：&quot;&lt;span&gt;);
        display(list);
        System.out.println(&lt;/span&gt;&quot;&quot;&lt;span&gt;);

        System.out.println(&lt;/span&gt;&quot;排序后：&quot;&lt;span&gt;);
        mergeSort(list, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[list.length], 0, list.length - 1&lt;span&gt;);
        display(list);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 归并排序算法
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; list     待排序的列表
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; tempList 临时列表
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; head     列表开始位置
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; rear     列表结束位置
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; mergeSort(&lt;span&gt;int&lt;/span&gt;[] list, &lt;span&gt;int&lt;/span&gt;[] tempList, &lt;span&gt;int&lt;/span&gt; head, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; rear) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (head &amp;lt;&lt;span&gt; rear) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 取分割位置&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; middle = (head + rear) / 2&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 递归划分列表的左序列&lt;/span&gt;
&lt;span&gt;            mergeSort(list, tempList, head, middle);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 递归划分列表的右序列&lt;/span&gt;
            mergeSort(list, tempList, middle + 1&lt;span&gt;, rear);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 列表的合并操作&lt;/span&gt;
            merge(list, tempList, head, middle + 1&lt;span&gt;, rear);
        }
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 合并操作(列表的两两合并)
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; list
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; tempList
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; head
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; middle
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; rear
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; merge(&lt;span&gt;int&lt;/span&gt;[] list, &lt;span&gt;int&lt;/span&gt;[] tempList, &lt;span&gt;int&lt;/span&gt; head, &lt;span&gt;int&lt;/span&gt; middle, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; rear) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 左指针尾&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; headEnd = middle - 1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 右指针头&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; rearStart =&lt;span&gt; middle;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 临时列表的下标&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; tempIndex =&lt;span&gt; head;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 列表合并后的长度&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; tempLength = rear - head + 1&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 先循环两个区间段都没有结束的情况&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt; ((headEnd &amp;gt;= head) &amp;amp;&amp;amp; (rearStart &amp;lt;=&lt;span&gt; rear)) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果发现右序列大，则将此数放入临时列表&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (list[head] &amp;lt;&lt;span&gt; list[rearStart]) {
                tempList[tempIndex&lt;/span&gt;++] = list[head++&lt;span&gt;];
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                tempList[tempIndex&lt;/span&gt;++] = list[rearStart++&lt;span&gt;];
            }
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断左序列是否结束&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt; (head &amp;lt;=&lt;span&gt; headEnd) {
            tempList[tempIndex&lt;/span&gt;++] = list[head++&lt;span&gt;];
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断右序列是否结束&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt; (rearStart &amp;lt;=&lt;span&gt; rear) {
            tempList[tempIndex&lt;/span&gt;++] = list[rearStart++&lt;span&gt;];
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 交换数据&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; tempLength; i++&lt;span&gt;) {
            list[rear] &lt;/span&gt;=&lt;span&gt; tempList[rear];
            rear&lt;/span&gt;--&lt;span&gt;;
        }
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 遍历打印
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; display(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] list) {
        System.out.println(&lt;/span&gt;&quot;********展示开始********&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (list != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; list.length &amp;gt; 0&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt;&lt;span&gt; num :
                    list) {
                System.out.print(num &lt;/span&gt;+ &quot; &quot;&lt;span&gt;);
            }
            System.out.println(&lt;/span&gt;&quot;&quot;&lt;span&gt;);
        }
        System.out.println(&lt;/span&gt;&quot;********展示结束********&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313428/201801/1313428-20180115004139222-158113378.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;欢迎转载，但请保留文章原始出处&lt;/p&gt;
&lt;p&gt;本文地址：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 算法4 七大排序之：归并排序&quot; href=&quot;http://www.cnblogs.com/nnngu/p/8285334.html&quot;&gt;http://www.cnblogs.com/nnngu/p/8285334.html&lt;/a&gt; &lt;/p&gt;
</description>
<pubDate>Sun, 14 Jan 2018 16:46:00 +0000</pubDate>
<dc:creator>nnngu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nnngu/p/8285334.html</dc:identifier>
</item>
<item>
<title>Linux磁盘分区/格式化/挂载（树莓派3挂载硬盘） - 柒小栈主</title>
<link>http://www.cnblogs.com/qixiaoyizhan/p/8285239.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qixiaoyizhan/p/8285239.html</guid>
<description>&lt;h2&gt;【前言】&lt;/h2&gt;
&lt;p&gt;　　本文将要讲解的功能为Linux环境下对磁盘进行操作。包括分区、格式化、挂载外接移动存储设备等。&lt;/p&gt;
&lt;p&gt;　　该文的写作背景为本人的树莓派需要外接一个固态硬盘作为存储设备，因此，便开始了一系列的折腾。&lt;/p&gt;
&lt;h2&gt;【开发及部署环境】&lt;/h2&gt;
&lt;p&gt;开发环境：Raspberry Linux&lt;/p&gt;
&lt;p&gt;部署环境：Rspberry Pi3&lt;/p&gt;
&lt;h2&gt;【实现过程】&lt;/h2&gt;
&lt;p&gt;　　一个新磁盘要经过分区、格式化、挂载以后才可以给linux读写文件，如果磁盘已经分区且格式化过，那只要挂载即可。&lt;/p&gt;
&lt;h4&gt;　　准备工作&lt;/h4&gt;
&lt;p&gt;　　首先我们需要先将我们的移动硬盘或U盘插入我们的设备，然后稍等片刻，使用 &lt;strong&gt;&lt;span&gt;fdisk -l&lt;/span&gt;&lt;/strong&gt; 命令查看我们的所有设备。&lt;/p&gt;
&lt;p&gt;　　如果在上述命令敲完后，提示没有权限，则在前面加 &lt;strong&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;&lt;strong&gt;u&lt;/strong&gt;do （sudo fdisk -l）&lt;/span&gt;&lt;/strong&gt;即可。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/998608/201801/998608-20180115000842801-1806418890.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/998608/201801/998608-20180115000858238-515641948.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里我们可以看到我们刚借入的硬盘（固态硬盘59.6GB）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/998608/201801/998608-20180115000933363-277607326.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　开始分区格式化&lt;/h4&gt;
&lt;p&gt;　　一切准备就绪后，我们进行对硬盘的分区、格式化操作。这里我们采用linux下的 &lt;span&gt;&lt;strong&gt;GPT（GUID）&lt;/strong&gt;&lt;/span&gt;分区。&lt;/p&gt;
&lt;p&gt;　　用 &lt;span&gt;&lt;strong&gt;parted &lt;/strong&gt;&lt;/span&gt;工具,可以支持很多种格式的分区，是linux平台教新的分区工具。&lt;/p&gt;
&lt;p&gt;　　接下来我们使用一系列的命令进行对硬盘的分区操作。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sudo parted  # 进入parted工具，输入help可查看帮助

&lt;/span&gt;&lt;span&gt;select&lt;/span&gt; /dev/&lt;span&gt;sda  # 选择你要操作的设备，一定要注意，不要把默认设备误操作了，先使用df工具查看到设备的名称

mklabel gpt  # 设定使用的分区类型, 如果要用MBR分区，输入msdos即可。

mkpart  # 添加一个分区

输入分区名称，回车

输入使用哪种文件系统，默认ext2，回车 （此处可以随意选，之后重新格式化写入文件系统）

输入分区从第几Mb的位置开始，输入1，从第1Mb开始（最好不要从0开始）

输入分区从第几Mb结束，输入2000，第2000Mb结束

此时已经分区成功，输入print查看目前分区情况&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　格式化操作&lt;/h4&gt;
&lt;p&gt;　　我们使用 &lt;span&gt;&lt;strong&gt;parted&lt;/strong&gt;&lt;/span&gt; 工具对对硬盘进行分区操作后，我们&lt;strong&gt;&lt;span&gt;一定要进行格式化分区才能被使用！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　使用 &lt;span&gt;&lt;strong&gt;mkfs &lt;/strong&gt;&lt;/span&gt;工具可以方便地对分区进行格式化。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
fdisk -l  # 用该命令查找到分区的设备号，例如是/dev/&lt;span&gt;sda1

mkfs &lt;/span&gt;-t ext3 /dev/sda1  # 将sda1分区格式化为ext3格式, 也可以用vfat格成fat32等
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　由上述的一行代码即可将我们的分区很好地格式化成我们想要的格式。&lt;/p&gt;
&lt;h4&gt;　　挂载操作（设置开机自动加载）&lt;/h4&gt;
&lt;p&gt;　　格式化好我们的分区后，我们将其进行挂载，才能在系统中使用。&lt;/p&gt;
&lt;p&gt;　　通常情况下，我们采用 &lt;span&gt;&lt;strong&gt;/mnt&lt;/strong&gt;&lt;/span&gt; 目录作为我们的外接存储设备的挂载点，我们在该目录下新建一个目录作为我们的挂载地址（可以看成今后要使用的盘符）。&lt;/p&gt;
&lt;p&gt;　　我们切换到 &lt;span&gt;&lt;strong&gt;/mnt&lt;/strong&gt;&lt;/span&gt; 目录下：&lt;span&gt;&lt;strong&gt;cd /mnt&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/998608/201801/998608-20180115001917082-844310128.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　新建一个目录，本人命名为 &lt;span&gt;&lt;strong&gt;d（暗喻D盘）&lt;/strong&gt;&lt;/span&gt;。使用命令：&lt;span&gt;&lt;strong&gt;mkdir d&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/998608/201801/998608-20180115002105441-1336653761.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　接下来我们使用 mount 命令将我们刚才格式化好的分区挂载到 &lt;span&gt;&lt;strong&gt;/mnt/d&lt;/strong&gt;&lt;/span&gt; 目录下。（&lt;span&gt;&lt;strong&gt;mount /dev/sda1 /mnt/d&lt;/strong&gt;&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;　　当然卸载也很方便，如果我们不继续使用的话，可以将其卸载 。（&lt;strong&gt;&lt;span&gt;unmount /mnt/d&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;用mount命令手动挂载的磁盘，重启后就没了，需要重新挂载，这个时候可以通过修改 &lt;strong&gt;&lt;span&gt;/etc/fstab &lt;/span&gt;&lt;/strong&gt;文件来实现开机自动挂载。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　使用命令：&lt;/span&gt;&lt;/span&gt;&lt;code class=&quot;has-numbering&quot;&gt;&lt;strong&gt;&lt;span&gt;vi /etc/fstab&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;或者&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;nano /etc/fstab&lt;/span&gt;&lt;/strong&gt; &lt;/code&gt;&lt;code class=&quot;has-numbering&quot;&gt;在最后一行添加：&lt;strong&gt;&lt;span&gt;/dev/sda1 /mnt/d ext3 default 0 0&lt;/span&gt;&lt;/strong&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;　　保存完成后，我们便实现了开机自动挂载的功能。&lt;/p&gt;

&lt;h2&gt;【可能遇到的问题】&lt;/h2&gt;
&lt;h4&gt; 　　1、ext格式不支持&lt;/h4&gt;
&lt;p&gt;　　FAT 格式U盘mount 本身就能支持，但如果你的U盘或移动硬盘使用的是exFAT 格式，mount会说不支持。没关系，安装 exfat-fuse软件之后 mount就支持了。&lt;/p&gt;
&lt;p class=&quot;alt&quot;&gt;　　&lt;span&gt;&lt;strong&gt;sudo apt-get install exfat-fuse  &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;　　2、ntfs格式不在支持（同上）&lt;/h4&gt;
&lt;p&gt;　　 &lt;strong&gt;&lt;span&gt;sudo apt-get install fuse-utils ntfs-3g&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;　　3、用 &lt;strong&gt;&lt;span&gt;fdisk -l &lt;/span&gt;&lt;/strong&gt;查看不出来外接硬盘&lt;/h4&gt;
&lt;p&gt;　　第一种原因是硬盘电压不足，没有正常运行。如果是树莓派的话，很有可能，需要给硬盘进行额外供电。固态硬盘应该不需要。&lt;/p&gt;
&lt;p&gt;　　第二种原因是如果分区是 fat32 或 ext3 等文件系统，此时可以用parted工具里输入 &lt;strong&gt;&lt;span&gt;print&lt;/span&gt;&lt;/strong&gt; 查看。&lt;/p&gt;

</description>
<pubDate>Sun, 14 Jan 2018 16:35:00 +0000</pubDate>
<dc:creator>柒小栈主</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qixiaoyizhan/p/8285239.html</dc:identifier>
</item>
<item>
<title>100行代码实现“跳一跳”辅助程序 - 学数学的程序猿</title>
<link>http://www.cnblogs.com/dongkuo/p/8285162.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dongkuo/p/8285162.html</guid>
<description>&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;好久没写博客了，今天来一发吧。分享一下今天下午用python写的“跳一跳”小游戏的辅助程序。之前是准备用树莓派操控一个“机械手指”来代替人的触摸操作，但该方案还在酝酿中，实现了再分享。接下来要分享的是用“纯软件”的方法来玩“跳一跳”。&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;原理其实很简单，按如下步骤操作即可：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;每次跳跃之前，截取一下手机屏幕，并将截图保存到本地电脑中；&lt;/li&gt;
&lt;li&gt;计算截图中人偶的位置与将要跳至的台面中心的距离&lt;span class=&quot;math inline&quot;&gt;\(d\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;将以上距离&lt;span class=&quot;math inline&quot;&gt;\(d\)&lt;/span&gt;换算成相应的触摸时间&lt;span class=&quot;math inline&quot;&gt;\(s\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;发送模拟触摸的命令至手机，触摸时间为以上时间&lt;span class=&quot;math inline&quot;&gt;\(s\)&lt;/span&gt;；&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;实现&quot;&gt;实现&lt;/h2&gt;
&lt;p&gt;本人只做过Android开发，因此下面只给出Android平台下的实现方法。&lt;/p&gt;
&lt;h3 id=&quot;步骤1&quot;&gt;步骤1&lt;/h3&gt;
&lt;p&gt;可以用Android官方提供的&lt;strong&gt;adb&lt;/strong&gt;工具来完成。首先需要搜索并下载对应操作系统下adb工具。其次需要将手机连接电脑， 并将手机的 设置 &amp;gt; 开发人员选项 &amp;gt; USB调试打开。现在在命令行调用一下adb工具，看是否检查到手机：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;adb devices&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;PS：若将&lt;code&gt;adb&lt;/code&gt;路径添加到了&lt;code&gt;PATH&lt;/code&gt;环境变量中，则可直接在命令行调用adb；否则以上命令需要输入adb的全路径。&lt;/p&gt;
&lt;p&gt;若执行以上命令后，输出了设备相关信息，则说明手机连接成功，可继续以下操作。&lt;/p&gt;
&lt;p&gt;用如下命令可截取手机屏幕图片至SD卡保存：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;adb shell screencap -p /mnt/sdcard/screencap.png&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后可用如下命令pull图片到电脑：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;adb pull /mnt/sdcard/screencap.png C:/screencap.png&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;步骤2&quot;&gt;步骤2&lt;/h3&gt;
&lt;p&gt;是整个问题的关键。要计算出人偶与将要跳至的台面中心的距离，需要分别识别出人偶的位置（坐标）和台面中心的位置（坐标）。&lt;/p&gt;
&lt;p&gt;我们以人偶最底部的一行的中心作为人偶的位置，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ojapxw8c8.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180114225816.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至于怎么识别出人偶的最底部，可以这样来操作。通过观察可发现，人偶底部的颜色的rgb值在(53, 57, 95)到(59, 61, 103)之间，因此我们逐行扫描各个像素点，找到rbg值在该区间的各行，最后一行即为人偶的底部了。得到了最底部的一行，自然就能算出该行的中心坐标。&lt;/p&gt;
&lt;p&gt;接下来需要识别人偶将要跳至的平台的中心。要想得到该中心的坐标，我们只需要识别得到下图中的两个顶点vertex1和vertex2的坐标即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ojapxw8c8.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180114232019.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们同样用从左往右，从上往下的顺序扫描各个像素点的方法来找出vertex1的坐标。扫描之前先获取整个背景的颜色的rgb值，取任意“空白”处即可（例如本人手机截图大小为1920x1080，可断定坐标为(40, 500)的点一定处于“空白”处。）。在扫描过程中一旦发现某处的颜色与背景色不一致，发生了“突变”，可断定该点即为vertex1。&lt;/p&gt;
&lt;p&gt;我们把vertex1点的rgb值记录下来作为台面的背景色。在接下去的扫描过程中，我们开始关心当前扫描的点的rgb值是否和该记录值“相似”。“相似”则说明该点“属于”台面，而通过上图可发现，顶点vertex2是所有“属于”台面的点中，横坐标最小的点，这样vertex2的坐标也找到了。&lt;/p&gt;
&lt;p&gt;显然，台面中心的横坐标等于vertex1的横坐标，而纵坐标等于vertex2的纵坐标。&lt;/p&gt;
&lt;h3 id=&quot;步骤3&quot;&gt;步骤3&lt;/h3&gt;
&lt;p&gt;通过多次尝试，发现用如下公式转换距离&lt;span class=&quot;math inline&quot;&gt;\(d\)&lt;/span&gt;（单位：px）为时间&lt;span class=&quot;math inline&quot;&gt;\(s\)&lt;/span&gt;（单位：毫秒）比较合适：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ s = d * 1.35 \]&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;步骤4&quot;&gt;步骤4&lt;/h3&gt;
&lt;p&gt;得到了触摸时间，我们还是借助adb工具来模拟触摸屏幕的行为，以下是相关命令：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;adb shell input swipe 0 0 0 0 1000&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上命令的最后一个参数即为需要模拟按压屏幕的时长，单位是毫秒。&lt;/p&gt;
&lt;h2 id=&quot;实现效果&quot;&gt;实现效果&lt;/h2&gt;
&lt;p&gt;成功连接手机至电脑（手机需开启USB调试），并进入“跳一跳”游戏，然后到电脑上运行该代码即可自动“跳一跳”。&lt;/p&gt;
&lt;p&gt;上一张截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ojapxw8c8.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180114235405.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;完整代码&quot;&gt;完整代码&lt;/h2&gt;
&lt;p&gt;以下是完整代码，在本人手机（1920 * 1080 ）下测试发现大多数情况都能正中靶心，少数情况不能命中靶心，极少数情况会跳出台面以外。其他分辨率的手机可能需要适当修改&lt;code&gt;BACKGROUND_POS&lt;/code&gt;和&lt;code&gt;DISTANCE_TO_TIME_RATIO&lt;/code&gt;参数大小。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; math
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; os
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; tempfile
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; time
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;reduce&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; PIL &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Image

BACKGROUND_POS &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;)
DISTANCE_TO_TIME_RATIO &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.35&lt;/span&gt;
SCREENSHOT_PATH &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tempfile.gettempdir() &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/screenshot.png&quot;&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; calculate_jump_distance():
    im &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Image.&lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(SCREENSHOT_PATH)
    background_rgb &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; im.getpixel(BACKGROUND_POS)

    role_pos_list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;
    vertex1_pos &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;
    block_background_rgb &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;
    vertex2_pos &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;
    role_line_flag &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(BACKGROUND_POS[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;], im.height):
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; role_pos_list &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; role_line_flag:
            &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;
        role_line_flag &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;
        vertex2_line_flag &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(BACKGROUND_POS[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;], im.width):
            current_rgb &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; im.getpixel((x, y))
            next_rgb &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; im.getpixel((x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, y)) &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; im.width &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
            &lt;span class=&quot;co&quot;&gt;# 识别顶点1&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; BACKGROUND_POS[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; BACKGROUND_POS[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; vertex1_pos &lt;span class=&quot;op&quot;&gt;\&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; is_similar(background_rgb, current_rgb) &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; is_similar(current_rgb, next_rgb):
                vertex1_pos &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (x, y)
                block_background_rgb &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; current_rgb
            &lt;span class=&quot;co&quot;&gt;# 识别顶点2&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; block_background_rgb &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; vertex2_line_flag &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; is_similar(current_rgb, block_background_rgb, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;):
                vertex2_line_flag &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; vertex2_pos:
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; vertex2_pos[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; vertex2_pos[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; vertex2_pos[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;:
                        vertex2_pos &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (x, y)
                &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
                    vertex2_pos &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (x, y)
            &lt;span class=&quot;co&quot;&gt;# 识别小人&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; is_part_of_role(current_rgb):
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; role_line_flag:
                    role_pos_list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
                    role_line_flag &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;
                role_pos_list.append((x, y))
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(role_pos_list) &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:
        &lt;span class=&quot;cf&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;pp&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'无法识别小人位置！！！'&lt;/span&gt;)
    pos_sum &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;reduce&lt;/span&gt;((&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; o1, o2: (o1[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; o2[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;], o1[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; o2[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;])), role_pos_list)
    role_pos &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(pos_sum[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(role_pos_list)), &lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(pos_sum[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(role_pos_list)))
    destination_pos &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (vertex1_pos[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;], vertex2_pos[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;])
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(linear_distance(role_pos, destination_pos))


&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; is_part_of_role(rgb):
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;53&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; rgb[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;59&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;57&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; rgb[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;61&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;95&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; rgb[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;103&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; linear_distance(xy1, xy2):
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; math.sqrt(&lt;span class=&quot;bu&quot;&gt;pow&lt;/span&gt;(xy1[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; xy2[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;pow&lt;/span&gt;(xy1[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; xy2[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))


&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; is_similar(rgb1, rgb2, degree&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;):
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;(rgb1[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; rgb2[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;&amp;lt;=&lt;/span&gt; degree &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;(rgb1[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; rgb2[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;&amp;lt;=&lt;/span&gt; degree &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;(rgb1[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; rgb2[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;&amp;lt;=&lt;/span&gt; degree


&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; screenshot():
    os.system(&lt;span class=&quot;st&quot;&gt;&quot;adb shell screencap -p /mnt/sdcard/screencap.png&quot;&lt;/span&gt;)
    os.system(&lt;span class=&quot;st&quot;&gt;&quot;adb pull /mnt/sdcard/screencap.png {} &amp;gt;&amp;gt; {}/jump.out&quot;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(SCREENSHOT_PATH, tempfile.gettempdir()))


&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; jump(touch_time):
    os.system(&lt;span class=&quot;st&quot;&gt;&quot;adb shell input swipe 0 0 0 0 {}&quot;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(touch_time))


&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; distance2time(distance):
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(distance &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; DISTANCE_TO_TIME_RATIO)


&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'__main__'&lt;/span&gt;:
    count &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;:
        screenshot()
        distance &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; calculate_jump_distance()
        touch_time &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; distance2time(distance)
        jump(touch_time)
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#{}: distance={}, time={}&quot;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(count, distance, touch_time))
        count &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
        time.sleep(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;写在最后&quot;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;写完后，看了看其他“跳一跳”辅助的相关博客，原理基本类似，然后还看到他们博客下有很多人有类似的评论：“弄这个那游戏还有啥意思呢？”，“游戏是供人娱乐的，而不是娱乐人的！”，“这样刷分有意思么？”……&lt;/p&gt;
&lt;p&gt;生活中，我确实经常会被这类问题问倒：“这有什么用呢？”，“做这个有什么意义呢？”……我也确实做了很多在别人看来毫无意义而自己却乐在其中的事。最近看了《生活大爆炸》，若再有人问我类似的问题，我会借用里面的一句台词回答：“Because we can.”&lt;/p&gt;
</description>
<pubDate>Sun, 14 Jan 2018 16:27:00 +0000</pubDate>
<dc:creator>学数学的程序猿</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dongkuo/p/8285162.html</dc:identifier>
</item>
<item>
<title>Python 浅析线程（threading模块）和进程（process） - 战争热诚</title>
<link>http://www.cnblogs.com/wj-1314/p/8263328.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wj-1314/p/8263328.html</guid>
<description>&lt;p&gt;     线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务&lt;/p&gt;
&lt;h2&gt;进程与线程&lt;/h2&gt;
&lt;h3&gt;什么是线程（threading）？&lt;/h3&gt;
&lt;p&gt;A thread is an execution context, which is all the information a CPU needs to execute a stream of instructions.&lt;/p&gt;
&lt;p&gt;Suppose you're reading a book, and you want to take a break right now, but you want to be able to come back and resume reading from the exact point where you stopped. One way to achieve that is by jotting down the page number, line number, and word number. So your execution context for reading a book is these 3 numbers.&lt;/p&gt;
&lt;p&gt;If you have a roommate, and she's using the same technique, she can take the book while you're not using it, and resume reading from where she stopped. Then you can take it back, and resume it from where you were.&lt;/p&gt;
&lt;p&gt;Threads work in the same way. A CPU is giving you the illusion that it's doing multiple computations at the same time. It does that by spending a bit of time on each computation. It can do that because it has an execution context for each computation. Just like you can share a book with your friend, many tasks can share a CPU.&lt;/p&gt;
&lt;p&gt;On a more technical level, an execution context (therefore a thread) consists of the values of the CPU's registers.&lt;/p&gt;
&lt;p&gt;Last: threads are different from processes. A thread is a context of execution, while a process is a bunch of resources associated with a computation. A process can have one or many threads.&lt;/p&gt;
&lt;p&gt;Clarification: the resources associated with a process include memory pages (all the threads in a process have the same view of the memory), file descriptors (e.g., open sockets), and security credentials (e.g., the ID of the user who started the process).&lt;/p&gt;
&lt;p&gt;    线程的出现是为了降低上下文切换的消耗，提高系统的并发性，并突破一个进程只能干一样事的缺陷，使到进程内并发成为可能。&lt;/p&gt;
&lt;p&gt;      假设，一个文本程序，需要接受键盘输入，将内容显示在屏幕上，还需要保存信息到硬盘中。若只有一个进程，势必造成同一时间只能干一样事的尴尬（当保存时，就不能通过键盘输入内容）。若有多个进程，每个进程负责一个任务，进程A负责接收键盘输入的任务，进程B负责将内容显示在屏幕上的任务，进程C负责保存内容到硬盘中的任务。这里进程A，B，C间的协作涉及到了进程通信问题，而且有共同都需要拥有的东西——-文本内容，不停的切换造成性能上的损失。若有一种机制，可以使任务A，B，C共享资源，这样上下文切换所需要保存和恢复的内容就少了，同时又可以减少通信所带来的性能损耗，那就好了。是的，这种机制就是线程。&lt;br/&gt;        线程也叫轻量级进程，它是一个基本的CPU执行单元，也是程序执行过程中的最小单元，由线程ID、程序计数器、寄存器集合和堆栈共同组成。线程的引入减小了程序并发执行时的开销，提高了操作系统的并发性能。线程没有自己的系统资源。&lt;/p&gt;
&lt;h3&gt;什么是进程（process）？&lt;/h3&gt;
&lt;p&gt;An executing instance of a program is called a process.&lt;/p&gt;
&lt;p&gt;Each process provides the resources needed to execute a program. A process has a virtual address space, executable code, open handles to system objects, a security context, a unique process identifier, environment variables, a priority class, minimum and maximum working set sizes, and at least one thread of execution. Each process is started with a single thread, often called the primary thread, but can create additional threads from any of its threads.&lt;/p&gt;
&lt;p&gt;      进程就是一个程序在一个数据集上的一次动态执行过程。进程一般由程序、数据集、进程控制块三部分组成。我们编写的程序用来描述进程要完成哪些功能以及如何完成；数据集则是程序在执行过程中所需要使用的资源；进程控制块用来记录进程的外部特征，描述进程的执行变化过程，系统可以利用它来控制和管理进程，它是系统感知进程存在的唯一标志。&lt;/p&gt;
&lt;p&gt;举一例说明进程：&lt;br/&gt;想象一位有一手好厨艺的计算机科学家正在为他的女儿烘制生日蛋糕。他有做生日蛋糕的食谱，厨房里有所需的原料:面粉、鸡蛋、糖、香草汁等。在这个比喻中，做蛋糕的食谱就是程序(即用适当形式描述的算法)计算机科学家就是处理器(cpu)，而做蛋糕的各种原料就是输入数据。进程就是厨师阅读食谱、取来各种原料以及烘制蛋糕等一系列动作的总和。现在假设计算机科学家的儿子哭着跑了进来，说他的头被一只蜜蜂蛰了。计算机科学家就记录下他照着食谱做到哪儿了(保存进程的当前状态)，然后拿出一本急救手册，按照其中的指示处理蛰伤。这里，我们看到处理机从一个进程(做蛋糕)切换到另一个高优先级的进程(实施医疗救治)，每个进程拥有各自的程序(食谱和急救手册)。当蜜蜂蛰伤处理完之后，这位计算机科学家又回来做蛋糕，从他离开时的那一步继续做下去。&lt;/p&gt;
&lt;h3&gt;进程与线程之间的区别？&lt;/h3&gt;
&lt;p&gt;A thread is an execution context, which is all the information a CPU needs to execute a stream of instructions.&lt;/p&gt;
&lt;p&gt;Suppose you're reading a book, and you want to take a break right now, but you want to be able to come back and resume reading from the exact point where you stopped. One way to achieve that is by jotting down the page number, line number, and word number. So your execution context for reading a book is these 3 numbers.&lt;/p&gt;
&lt;p&gt;If you have a roommate, and she's using the same technique, she can take the book while you're not using it, and resume reading from where she stopped. Then you can take it back, and resume it from where you were.&lt;/p&gt;
&lt;p&gt;Threads work in the same way. A CPU is giving you the illusion that it's doing multiple computations at the same time. It does that by spending a bit of time on each computation. It can do that because it has an execution context for each computation. Just like you can share a book with your friend, many tasks can share a CPU.&lt;/p&gt;
&lt;p&gt;On a more technical level, an execution context (therefore a thread) consists of the values of the CPU's registers.&lt;/p&gt;
&lt;p&gt;Last: threads are different from processes. A thread is a context of execution, while a process is a bunch of resources associated with a computation. A process can have one or many threads.&lt;/p&gt;
&lt;p&gt;Clarification: the resources associated with a process include memory pages (all the threads in a process have the same view of the memory), file descriptors (e.g., open sockets), and security credentials (e.g., the ID of the user who started the process).&lt;/p&gt;
&lt;p&gt;          进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。或者说进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位。&lt;br/&gt;       线程则是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1226410/201801/1226410-20180114211538176-998244024.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;进程和线程的关系：&lt;/p&gt;
&lt;p&gt;(1)一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。&lt;br/&gt;(2)资源分配给进程，同一进程的所有线程共享该进程的所有资源。&lt;br/&gt;(3)CPU分给线程，即真正在CPU上运行的是线程。&lt;/p&gt;
&lt;h3&gt;并行与并发&lt;/h3&gt;
&lt;p&gt;并行处理（Parallel Processing）是计算机系统中能同时执行两个或者更多个处理的一种计算方法。并行处理可同时工作于同一程序的不同方面，并行处理的主要目的是节省大型和复杂问题的解决时间。&lt;/p&gt;
&lt;p&gt;并发处理（concurrency Processing）是指一个时间段中有几个程序都处于已经启动运行到运行完毕之间，而且这几个程序都是在同一处理机（CPU）上运行，但任意时刻点上只有一个程序在处理机（CPU）上运行&lt;/p&gt;
&lt;p&gt;并发的关键在于你有处理多个任务的能力，不一定同时，并行的关键是你有同时处理多个任务的能力，所以说，并行是并发的子集&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1226410/201801/1226410-20180114212258957-1673503890.png&quot; alt=&quot;&quot; width=&quot;535&quot; height=&quot;451&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;同步与异步&lt;/h3&gt;
&lt;p&gt;       在计算机领域，同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。举个例子，打电话时就是同步通信，发短息时就是异步通信。&lt;/p&gt;
&lt;h3&gt; 线程（Thread）类的实例方法&lt;/h3&gt;
&lt;h4&gt; join和Daemon&lt;/h4&gt;
&lt;p&gt;join()：在子线程完成运行之前，这个子线程的父线程将一直被阻塞。&lt;/p&gt;
&lt;p&gt;setDaemon(True)：&lt;/p&gt;
&lt;p&gt;      将线程声明为守护线程，必须在start() 方法调用之前设置， 如果不设置为守护线程程序会被无限挂起。这个方法基本和join是相反的。当我们 在程序运行中，执行一个主线程，如果主线程又创建一个子线程，主线程和子线程 就分兵两路，分别运行，那么当主线程完成想退出时，会检验子线程是否完成。如 果子线程未完成，则主线程会等待子线程完成后再退出。但是有时候我们需要的是 只要主线程完成了，不管子线程是否完成，都要和主线程一起退出，这时就可以 用setDaemon方法啦 &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:python;collapse:true;;gutter:true;&quot;&gt;
# join()：在子线程完成运行之前，这个子线程的父线程将一直被阻塞。

# setDaemon(True)：
        '''
         将线程声明为守护线程，必须在start() 方法调用之前设置，如果不设置为守护线程程序会被无限挂起。

         当我们在程序运行中，执行一个主线程，如果主线程又创建一个子线程，主线程和子线程 就分兵两路，分别运行，那么当主线程完成

         想退出时，会检验子线程是否完成。如果子线程未完成，则主线程会等待子线程完成后再退出。但是有时候我们需要的是只要主线程

         完成了，不管子线程是否完成，都要和主线程一起退出，这时就可以 用setDaemon方法啦'''


import threading
from time import ctime,sleep
import time

def Music(name):

        print (&quot;Begin listening to {name}. {time}&quot;.format(name=name,time=ctime()))
        sleep(3)
        print(&quot;end listening {time}&quot;.format(time=ctime()))

def Blog(title):

        print (&quot;Begin recording the {title}. {time}&quot;.format(title=title,time=ctime()))
        sleep(5)
        print('end recording {time}'.format(time=ctime()))


threads = []


t1 = threading.Thread(target=Music,args=('FILL ME',))
t2 = threading.Thread(target=Blog,args=('',))

threads.append(t1)
threads.append(t2)

if __name__ == '__main__':

    #t2.setDaemon(True)

    for t in threads:

        #t.setDaemon(True) #注意:一定在start之前设置
        t.start()

        #t.join()

    #t1.join()
    #t2.join()    #  考虑这三种join位置下的结果？

    print (&quot;all over %s&quot; %ctime())
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
daemon
A boolean value indicating whether this thread is a daemon thread (True) or not (False). This must be set before start() is called, otherwise RuntimeError is raised. Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False.

The entire Python program exits when no alive non-daemon threads are left.

当daemon被设置为True时，如果主线程退出，那么子线程也将跟着退出，

反之，子线程将继续运行，直到正常退出。

daemon
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　其他方法&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
Thread实例对象的方法
  # isAlive(): 返回线程是否活动的。
  # getName(): 返回线程名。
  # setName(): 设置线程名。

threading模块提供的一些方法：
  # threading.currentThread(): 返回当前的线程变量。
  # threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。
  # threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;python GIL（global  Interper  Lack）是什么？&lt;/h3&gt;
&lt;h4&gt;GIL的概念&lt;/h4&gt;
&lt;p&gt;GIL全称是全局解释器锁，来源是python设计之初的考虑，为了数据安全所做的决定&lt;/p&gt;
&lt;p&gt;每个CPU在同一时期只能执行一个线程（在单核CPU下的多线程其实都只是并发的，不是并行，并行和并发从宏观上来讲都是同时处理多路请求的概念。但是并发和并行又有区别，并行是指两个或者多个事件在同一时刻发生；而并发是指两个或者多个事件在同一时间间隔内发生）&lt;/p&gt;
&lt;p&gt;CPython implementation detail: In CPython, due to the Global Interpreter Lock, only one thread can execute Python code at once (even though certain performance-oriented libraries might overcome this limitation). If you want your application to make better use of the computational resources of multi-core machines, you are advised to use multiprocessing. However, threading is still an appropriate model if you want to run multiple I/O-bound tasks simultaneously.&lt;/p&gt;
&lt;h4&gt;GIL的早期设计&lt;/h4&gt;
&lt;p&gt;          Python支持多线程，而解决多线程之间数据完整性和状态同步的最简单方法自然就是加锁。 于是有了GIL这把超级大锁，而当越来越多的代码库开发者接受了这种设定后，他们开始大量依赖这种特性（即默认python内部对象是thread-safe的，无需在实现时考虑额外的内存锁和同步操作）。慢慢的这种实现方式被发现是蛋疼且低效的。但当大家试图去拆分和去除GIL的时候，发现大量库代码开发者已经重度依赖GIL而非常难以去除了。有多难？做个类比，像MySQL这样的“小项目”为了把Buffer Pool Mutex这把大锁拆分成各个小锁也花了从5.5到5.6再到5.7多个大版为期近5年的时间，并且仍在继续。MySQL这个背后有公司支持且有固定开发团队的产品走的如此艰难，那又更何况Python这样核心开发和代码贡献者高度社区化的团队呢？&lt;/p&gt;
&lt;h4&gt;GIL的影响&lt;/h4&gt;
&lt;p&gt;在python多线程下，每个线程的执行方式：&lt;/p&gt;
&lt;p&gt;（1）获取GIL&lt;/p&gt;
&lt;p&gt;（2）执行代码直到sleep或者是python虚拟机将其挂起&lt;/p&gt;
&lt;p&gt;（3）释放GIL&lt;/p&gt;
&lt;p&gt;   可见，某个线程想要执行，必须先拿到GIL，我们可以将GIL看作是“通行证”，并且在一个python进程中，GIL只有一个，拿不到通行证的线程，就不允许进入CPU执行。&lt;/p&gt;
&lt;p&gt;  而每次释放GIL锁，线程进行锁竞争，切换线程，会消耗资源。并且由于GIL锁存在，python里一个进程永远只能同时执行一个线程（拿到GIL的线程才能执行），这就是为什么在多核CPU上，python的多线程效率并不高的原因。&lt;/p&gt;
&lt;p&gt;那么是不是python的多线程就完全没有作用了呢？&lt;/p&gt;
&lt;p&gt;在这里我们分类讨论：&lt;/p&gt;
&lt;p&gt;（1）：CPU密集型代码：又称计算密集型任务，是指CPU计算占主要的任务，CPU一直处于满负荷的状态，比如在一个很大的列表中查找元素（当然这不合理），复杂的加减乘除等&lt;/p&gt;
&lt;p&gt;（各种循环处理，计数等等），在这种情况下，ticks计数很快会达到阙值，然后触发GIL的释放与再竞争（多个线程来回切换当然是需要消耗资源的），所以python下的多线程对CPU密集型代码并不友好。&lt;/p&gt;
&lt;p&gt;（2）：IO密集型代码：指磁盘IO，网络IO占主要的任务，计算量很小。比如请求网页，读取文件等，当然我们可以在python中可以利用sleep达到IO密集型任务的目的&lt;/p&gt;
&lt;p&gt;（文件处理，网络爬虫等），多线程能够有效的提升效率（单线程下有IO操作会进行IO等待，造成不必要的时间浪费，而开启多线程能在线程A等待的时候，自动切换到线程B，可以不浪费CPU资源，从而能提升程序代码执行效率），所以python的多线程对IO密集型代码比较友好。&lt;/p&gt;
&lt;p&gt;    在python3.x中GIL不适用ticks计数，改为使用计时器（执行时间达到阙值后，当前线程释放GIL），这样对CPU密集型程序更加友好，但是依然没有解决GIL导致的同一时间只能执行一个线程的问题，所以效率依然不尽人意&lt;/p&gt;
&lt;p&gt; 多核多线程比单核多线程更差，原因是单核下多线程，每次释放GIL，唤醒的那个线程都能获取到GIL锁，所以能够无缝执行，但是在多核下导致其他几个COU上被唤醒后的线程会醒着等待到切换时间后又进入到待调度状态，这样会造成线程颠簸，导致效率更低。&lt;/p&gt;
&lt;p&gt;所以说“python下想要充分使用多核CPU，就要利用多进程”的原因是什么呢？&lt;/p&gt;
&lt;p&gt;每个进程都有各自独立的GIL，互不干扰，这样就可以真正意义上并行执行，所以在python中，多进程的执行效率优于多线程，（仅仅针对多核CPU）&lt;/p&gt;
&lt;p&gt;故我们得出结论：多核下，想要并行提升效率，比较通用的方法是使用多进程，能够有效的提高执行效率。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;collapse:true;;gutter:true;&quot;&gt;
#coding:utf8
from threading import Thread
import time

def counter():
    i = 0
    for _ in range(50000000):
        i = i + 1

    return True


def main():

    l=[]
    start_time = time.time()

    for i in range(2):

        t = Thread(target=counter)
        t.start()
        l.append(t)
        t.join()

    # for t in l:
    #     t.join()

    end_time = time.time()
    print(&quot;Total time: {}&quot;.format(end_time - start_time))

if __name__ == '__main__':
    main()


'''
py2.7:
     串行:25.4523348808s
     并发:31.4084379673s
py3.5:
     串行:8.62115597724914s
     并发:8.99609899520874s

'''
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt; 多进程&lt;/h2&gt;
&lt;h3&gt; 多进程的概念&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;xref py py-mod docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;a class=&quot;reference internal&quot; title=&quot;multiprocessing: Process-based parallelism.&quot; href=&quot;https://docs.python.org/3.5/library/multiprocessing.html#module-multiprocessing&quot;&gt;multiprocessing&lt;/a&gt;&lt;/span&gt;&lt;/code&gt; is a package that supports spawning processes using an API similar to the &lt;a class=&quot;reference internal&quot; title=&quot;threading: Thread-based parallelism.&quot; href=&quot;https://docs.python.org/3.5/library/threading.html#module-threading&quot;&gt;&lt;code class=&quot;xref py py-mod docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;threading&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; module. The &lt;a class=&quot;reference internal&quot; title=&quot;multiprocessing: Process-based parallelism.&quot; href=&quot;https://docs.python.org/3.5/library/multiprocessing.html#module-multiprocessing&quot;&gt;&lt;code class=&quot;xref py py-mod docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;multiprocessing&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; package offers both local and remote concurrency,effectively side-stepping the &lt;a class=&quot;reference internal&quot; href=&quot;https://docs.python.org/3.5/glossary.html#term-global-interpreter-lock&quot;&gt;&lt;span class=&quot;xref std std-term&quot;&gt;Global Interpreter Lock&lt;/span&gt;&lt;/a&gt; by using subprocesses instead of threads. Due to this, the &lt;a class=&quot;reference internal&quot; title=&quot;multiprocessing: Process-based parallelism.&quot; href=&quot;https://docs.python.org/3.5/library/multiprocessing.html#module-multiprocessing&quot;&gt;&lt;code class=&quot;xref py py-mod docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;multiprocessing&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; module allows the programmer to fully leverage multiple processors on a given machine. It runs on both Unix and Windows.&lt;/p&gt;
&lt;p&gt;由于GIL的存在，python中的多线程其实并不是真正的多线程，如果想要充分地使用多核CPU的资源，在python中大部分情况需要使用多进程。Python提供了非常好用的多进程包multiprocessing，只需要定义一个函数，Python会完成其他所有事情。借助这个包，可以轻松完成从单进程到&lt;strong&gt;并发执行&lt;/strong&gt;的转换。multiprocessing支持子进程、通信和共享数据、执行不同形式的同步，提供了Process、Queue、Pipe、Lock等组件。&lt;/p&gt;
&lt;p&gt;　　multiprocessing包是Python中的多进程管理包。与threading.Thread类似，它可以利用multiprocessing.Process对象来创建一个进程。该进程可以运行在Python程序内部编写的函数。该Process对象与Thread对象的用法相同，也有start(), run(), join()的方法。此外multiprocessing包中也有Lock/Event/Semaphore/Condition类 (这些对象可以像多线程那样，通过参数传递给各个进程)，用以同步进程，其用法与threading包中的同名类一致。所以，multiprocessing的很大一部份与threading使用同一套API，只不过换到了多进程的情境。&lt;/p&gt;
&lt;p&gt;但在使用这些共享API的时候，我们要注意以下几点:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在UNIX平台上，当某个进程终结之后，该进程需要被其父进程调用wait，否则进程成为僵尸进程(Zombie)。所以，有必要对每个Process对象调用join()方法 (实际上等同于wait)。对于多线程来说，由于只有一个进程，所以不存在此必要性。&lt;/li&gt;
&lt;li&gt;multiprocessing提供了threading包中没有的IPC(比如Pipe和Queue)，效率上更高。应优先考虑Pipe和Queue，避免使用Lock/Event/Semaphore/Condition等同步方式 (因为它们占据的不是用户进程的资源)。&lt;/li&gt;
&lt;li&gt;多进程应该避免共享资源。在多线程中，我们可以比较容易地共享资源，比如使用全局变量或者传递参数。在多进程情况下，由于每个进程有自己独立的内存空间，以上方法并不合适。此时我们可以通过共享内存和Manager的方法来共享资源。但这样做提高了程序的复杂度，并因为同步的需要而降低了程序的效率。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Process.PID中保存有PID，如果进程中还没有start()，则PID为None。&lt;/p&gt;
&lt;p&gt;windows系统下，需要注意的是想要启动一个子进程必须加上&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
if __name__ =&quot;__main__&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　进程相关要写在上面这句语句下面。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
from multiprocessing import Process
import time
def f(name):
    time.sleep(1)
    print('hello', name,time.ctime())

if __name__ == '__main__':
    p_list=[]
    for i in range(3):
        p = Process(target=f, args=('alvin',))
        p_list.append(p)
        p.start()
    for i in p_list:
        p.join()
    print('end')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　类式调用&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
from multiprocessing import Process
import time

class MyProcess(Process):
    def __init__(self):
        super(MyProcess, self).__init__()
        #self.name = name

    def run(self):
        time.sleep(1)
        print ('hello', self.name,time.ctime())


if __name__ == '__main__':
    p_list=[]
    for i in range(3):
        p = MyProcess()
        p.start()
        p_list.append(p)

    for p in p_list:
        p.join()

    print('end')
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Process类&lt;/h3&gt;
&lt;h4&gt;构造方法&lt;/h4&gt;
&lt;p&gt;Process([group [, target [, name [, args [, kwargs]]]]])&lt;/p&gt;
&lt;p&gt;　　group: 线程组，目前还没有实现，库引用中提示必须是None； &lt;br/&gt;　　target: 要执行的方法； &lt;br/&gt;　　name: 进程名； &lt;br/&gt;　　args/kwargs: 要传入方法的参数。&lt;/p&gt;
&lt;h4&gt;实例方法&lt;/h4&gt;
&lt;p&gt;is_alive()：返回进程是否在运行。&lt;/p&gt;
&lt;p&gt;　　join([timeout])：阻塞当前上下文环境的进程程，直到调用此方法的进程终止或到达指定的timeout（可选参数）。&lt;/p&gt;
&lt;p&gt;　　start()：进程准备就绪，等待CPU调度&lt;/p&gt;
&lt;p&gt;　　run()：strat()调用run方法，如果实例进程时未制定传入target，这star执行t默认run()方法。&lt;/p&gt;
&lt;p&gt;　　terminate()：不管任务是否完成，立即停止工作进程&lt;/p&gt;
&lt;h4&gt;属性&lt;/h4&gt;
&lt;p&gt;       authkey&lt;/p&gt;
&lt;p&gt;　　daemon：和线程的setDeamon功能一样&lt;/p&gt;
&lt;p&gt;　　exitcode(进程在运行时为None、如果为–N，表示被信号N结束）&lt;/p&gt;
&lt;p&gt;　　name：进程名字。&lt;/p&gt;
&lt;p&gt;　　pid：进程号。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import time
from  multiprocessing import Process

def foo(i):
    time.sleep(1)
    print (p.is_alive(),i,p.pid)
    time.sleep(1)

if __name__ == '__main__':
    p_list=[]
    for i in range(10):
        p = Process(target=foo, args=(i,))
        #p.daemon=True
        p_list.append(p)

    for p in p_list:
        p.start()
    # for p in p_list:
    #     p.join()

    print('main process end')
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;进程间通讯　　&lt;/h3&gt;
&lt;p&gt;不同进程间内存是不共享的，要想实现两个进程间的数据交换，可以用以下方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;——进程队列Queues（&lt;/strong&gt;使用方法跟threading里的queue类似：）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
from multiprocessing import Process, Queue

def f(q,n):
    q.put([42, n, 'hello'])

if __name__ == '__main__':
    q = Queue()
    p_list=[]
    for i in range(3):
        p = Process(target=f, args=(q,i))
        p_list.append(p)
        p.start()
    print(q.get())
    print(q.get())
    print(q.get())
    for i in p_list:
            i.join()
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;——管道Pipe&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
from multiprocessing import Process, Pipe
 
def f(conn):
    conn.send([42, None, 'hello'])
    conn.close()
 
if __name__ == '__main__':
    parent_conn, child_conn = Pipe()
    p = Process(target=f, args=(child_conn,))
    p.start()
    print(parent_conn.recv())   # prints &quot;[42, None, 'hello']&quot;
    p.join()
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;——managers&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
from multiprocessing import Process, Manager

def f(d, l,n):
    d[n] = '1'
    d['2'] = 2
    d[0.25] = None
    l.append(n)
    print(l)

if __name__ == '__main__':
    with Manager() as manager:
        d = manager.dict()

        l = manager.list(range(5))
        p_list = []
        for i in range(10):
            p = Process(target=f, args=(d, l,i))
            p.start()
            p_list.append(p)
        for res in p_list:
            res.join()

        print(d)
        print(l)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;进程同步&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
from multiprocessing import Process, Lock

def f(l, i):
    l.acquire()
    try:
        print('hello world', i)
    finally:
        l.release()

if __name__ == '__main__':
    lock = Lock()

    for num in range(10):
        Process(target=f, args=(lock, num)).start()
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;进程池&lt;/h3&gt;
&lt;p&gt;进程池内部维护一个进程序列，当使用时，去进程池中获取一个进程，如果进程池序列中没有可供使用的进程，那么程序就会等待，直到进程池中有可用进程为止。&lt;/p&gt;
&lt;p&gt;进程池中有以下几个主要方法：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;apply：从进程池里取一个进程并执行&lt;/li&gt;
&lt;li&gt;apply_async：apply的异步版本&lt;/li&gt;
&lt;li&gt;terminate:立刻关闭线程池&lt;/li&gt;
&lt;li&gt;join：主进程等待所有子进程执行完毕，必须在close或terminate之后&lt;/li&gt;
&lt;li&gt;close：等待所有进程结束后，才关闭线程池&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
from  multiprocessing import Process,Pool
import time
 
def Foo(i):
    time.sleep(2)
    return i+100
 
def Bar(arg):
    print('--&amp;gt;exec done:',arg)
 
pool = Pool(5)
 
for i in range(10):
    pool.apply_async(func=Foo, args=(i,),callback=Bar)
    #pool.apply(func=Foo, args=(i,))
 
print('end')
pool.close()
pool.join()
&lt;/pre&gt;&lt;/div&gt;









&lt;p&gt;https://www.cnblogs.com/zingp/p/5878330.html&lt;/p&gt;
</description>
<pubDate>Sun, 14 Jan 2018 16:21:00 +0000</pubDate>
<dc:creator>战争热诚</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wj-1314/p/8263328.html</dc:identifier>
</item>
</channel>
</rss>