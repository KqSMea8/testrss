<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>拒绝“割韭菜”— 谈谈区块链正经的商用场景！ - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/8717662.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/8717662.html</guid>
<description>&lt;p&gt;欢迎大家前往&lt;a href=&quot;https://cloud.tencent.com/developer?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;腾讯云&lt;/a&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;+社区&lt;/a&gt;，获取更多腾讯海量技术实践干货哦&lt;span lang=&quot;EN-US&quot;&gt;~&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;作者：林喜东 | 腾讯云高级工程师&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近区块链有多火，已经无需过多阐述，无论你是主动了解，还是被比特币/加密猫/3点钟无眠区块链等刷屏，相信区块链概念已经在多数人心中萌芽。但区块链这么火，它能做什么？与我有什么关系？现实中有哪些应用？这些问题也困绕我许久，通过近期断断续续的关注和了解，略窥一二，分享给大家；因知识水平有限，难免存在错误，欢迎指正，一起学习，一起进步。&lt;/p&gt;
&lt;p&gt;区块链的应用五花八门，有些是来割韭菜（目前币圈中绝大部分的ICO），有些是来蹭热点的（如区块链手机、区块链手表、区块链牙刷等），经过一番调查，我觉得比较有意义的应用可能包括但不限于以下七种：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.pstatp.com/large/pgc-image/152282752174587289939c6&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;备注：需要了解区块链是什么的，请出门百度/google搜索一下，有很多理解比我透彻，讲得比我好的，就不再普及了；下面直接进入各个应用场景。&lt;/p&gt;

&lt;p&gt;这应该是区块链最简单的应用场景，就是信息互通有无。&lt;/p&gt;
&lt;p&gt;1、传统的信息共享的痛点&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;要么是统一由一个中心进行信息发布和分发，要么是彼此之间定时批量对账（典型的每天一次），对于有时效性要求的信息共享，难以达到实时共享。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;信息共享的双方缺少一种相互信任的通信方式，难以确定收到的信息是否是对方发送的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2、区块链 + 信息共享&lt;/p&gt;
&lt;p&gt;首先，区块链本身就是需要保持各个节点的数据一致性的，可以说是自带信息共享功能；其次，实时的问题通过区块链的P2P技术可以实现；最后，利用区块链的不可篡改和共识机制，可构建其一条安全可靠的信息共享通道。&lt;/p&gt;
&lt;p&gt;也行你会有这样的疑问：解决上面的问题，不用区块链技术，我自己建个加密通道也可以搞定啊！但我想说，既然区块链技术能够解决这些问题，并且增加节点非常方便，在你没有已经建好一套安全可靠的信息共享系统之前，为什么不用区块链技术呢？&lt;/p&gt;
&lt;p&gt;3、应用案例&lt;/p&gt;
&lt;p&gt;举下我们腾讯自己的应用--公益寻人链，借用如下一张好图，可以看到，区块链在信息共享中发挥的价值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.pstatp.com/large/pgc-image/1522827521668aa13a668b0&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;1、传统鉴证证明的痛点&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;流程复杂：以版权保护为例，现有鉴证证明方式，登记时间长，且费用高。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;公信力不足：以法务存证为例，个人或中心化的机构存在篡改数据的可能，公信力难以得到保证。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2、区块链 + 鉴证证明&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;流程简化：区块链应用到鉴证证明后，无论是登记还是查询都非常方便，无需再奔走于各个部门之间。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;安全可靠：区块链的去中心化存储，保证没有一家机构可以任意篡改数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3、应用案例&lt;/p&gt;
&lt;p&gt;区块链在鉴权证明领域的应用有版权保护、法务存证等，下面以版权保护为例，简单说下如何区块链如何实现版权登记和查询。 （1）电子身份证：将“申请人+发布时间+发布内容”等版权信息加密后上传，版权信息用于唯一区块链ID，相当拥有了一张电子身份证。 （2）时间戳保护：版权信息存储时，是加上时间戳信息的，如右雷同，可用于证明先后。 （3）可靠性保证：区块链的去中心化存储、私钥签名、不可篡改的特性提升了鉴权信息的可靠性。&lt;/p&gt;
&lt;p&gt;2016年8月，由Onchain、微软（中国）、法大大等多个机构在北京成立了电子存证区块链联盟“法链”。&lt;/p&gt;
&lt;p&gt;2017年12月，微众银行、仲裁委（广州仲裁委）、杭州亦笔科技有限公司共同推出的仲裁联盟链，用于司法场景下的存证；2018年3月，广州首个“仲裁链”判决书出炉。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://p3.pstatp.com/large/pgc-image/15228275216243a142dc19e&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;商品从生产商到消费者手中，需要经历多个环节（流程可能如上图所示），跨境购物则更加复杂；中间环节经常出问题，消费者很容易购买的假货。而假货问题正是困扰着各大商家和平台，至今无解。&lt;/p&gt;
&lt;p&gt;1、传统是防伪溯源手段&lt;/p&gt;
&lt;p&gt;以一直受假冒伪劣产品困扰的茅台酒的防伪技术为例，2000年起，其酒盖里有一个唯一的RFID标签，可通过手机等设备以NFC方式读出，然后通过茅台的APP进行校验，以此防止伪造产品。 咋一看，这种防伪效果非常可靠。但2016年还是引爆了茅台酒防伪造假，虽然通过NFC方式验证OK，但经茅台专业人士鉴定为假酒。后来，在“国酒茅台防伪溯源系统”数据库审计中发现80万条假的防伪标签记录，系防伪技术公司人员参与伪造；随后，茅台改用安全芯片防伪标签。&lt;/p&gt;
&lt;p&gt;但这里暴露出来的痛点并没有解决，即防伪信息掌握在某个中心机构中，有权限的人可以任意修改。(备注：茅台的这种防伪方式，也衍生了旧瓶回收，旧瓶装假酒的产业，防伪道路任重而道远)。&lt;/p&gt;
&lt;p&gt;2017年05月贵阳数博会上，小马哥就建议茅台防伪使用区块链；那么区块链和物流链的结合有什么优势呢？&lt;/p&gt;
&lt;p&gt;2、区块链+物流链&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;3&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;区块链没有中心化节点，各节点是平等的，掌握单个节点无法实现修改数据；需要掌控足够多的节点，才可能伪造数据，大大提高伪造数据的成本。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;区块链天生的开放、透明，使得任何人都可以公开查询，伪造数据被发现的概率大增。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;区块链的数据不可篡改性，也保证了已销售出去的产品信息已永久记录，无法通过简单复制防伪信息蒙混过关，实现二次销售。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;物流链的所有节点上区块链后，商品从生产商到消费者手里都有迹可循，形成完整链条；商品缺失的环节越多，将暴露出其是伪劣产品概率更大。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3、应用案例&lt;/p&gt;
&lt;p&gt;目前，入局物流链的玩家较多，包括腾讯、阿里、京东、沃尔玛等。 据说，阿里的菜鸟在海淘进口应用区块链上，走在了前面，已经初步实现海外商品溯源，国际物流及进口申报溯源、境内物流溯源；下一步就是生产企业溯源了。下图是网上流传的关于阿里的菜鸟在海淘场景运用区块链的示意图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3.pstatp.com/large/pgc-image/15228275217228255ed6e86&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;另据最新消息，在3月份的第三届全球物流技术大会上，腾讯与中国物流与采购联合会（简称“中物联”）正式签署战略合作协议，并发布了区块链物流平台。强强联合，想象空间很大。&lt;/p&gt;

&lt;p&gt;1、传统的供应链单点融资&lt;/p&gt;
&lt;p&gt;在一般供应链贸易中，从原材料的采购、加工、组装到销售的各企业间都涉及到资金的支出和收入，而企业的资金支出和收入是有时间差的，这就形成了资金缺口，多数需要进行融资生产。我们先来看个简单的供应链(复杂的我也不了解(⊙o⊙))，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3.pstatp.com/large/pgc-image/152282752158408c7b1dce0&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们再来看看图中各个角色的融资情况：&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;2&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;核心企业或大企业：规模大、信用好，议价能力强，通过先拿货后付款，延长账期将资金压力传导给后续供应商；此外，其融资能力也是最强的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;一级供应商：通过核心企业的债权转让，可以获得银行的融资。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;其他供应商（多数是中小微企业）：规模小、发展不稳定、信用低，风险高，难以获得银行的贷款；也无法想核心企业一样有很长的账期；一般越小的企业其账期越短，微小企业还需要现金拿货。这样一出一入对比就像是：中小微企业无息借钱给大企业做生意。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2、区块链+供应链金融&lt;/p&gt;
&lt;p&gt;面对，上述供应链里的中小微企业融资难问题，主要原因是银行和中小企业之间缺乏一个有效的信任机制。&lt;/p&gt;
&lt;p&gt;假如供应链所有节点上链后，通过区块链的私钥签名技术，保证了核心企业等的数据可靠性；而合同、票据等上链，是对资产的数字化，便于流通，实现了价值传递。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p9.pstatp.com/large/pgc-image/1522827521614872d921a9c&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，在区块链解决了数据可靠性和价值流通后，银行等金融机构面对中小企业的融资，不再是对这个企业进行单独评估；而是站在整个供应链的顶端，通过信任核心企业的付款意愿，对链条上的票据、合同等交易信息进行全方位分析和评估。即借助核心企业的信用实力以及可靠的交易链条，为中小微企业融资背书，实现从单环节融资到全链条融资的跨越，从而缓解中小微企业融资难问题。&lt;/p&gt;
&lt;p&gt;3、应用案例&lt;/p&gt;
&lt;p&gt;比较成熟的还没看到，目前腾讯也已入局。&lt;/p&gt;

&lt;p&gt;1、传统跨境支付&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.pstatp.com/large/pgc-image/1522827521867dfc8f914bd&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;跨境支付涉及多种币种，存在汇率问题，传统跨境支付非常依赖于第三方机构，大致的简化模型如上图所示，存在着两个问题；&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;流程繁琐，结算周期长：传统跨境支付基本都是非实时的，银行日终进行交易的批量处理，通常一笔交易需要24小时以上才能完成；某些银行的跨境支付看起来是实时的，但实际上，是收款银行基于汇款银行的信用做了一定额度的垫付，在日终再进行资金清算和对账，业务处理速度慢。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;手续费高：传统跨境支付模式存在大量人工对账操作，加之依赖第三方机构，导致手续费居高不下，麦肯锡《2016全球支付》报告数据显示，通过代理行模式完成一笔跨境支付的平均成本在25美元到35美元之间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2、区块链+跨境支付&lt;/p&gt;
&lt;p&gt;这些问题的存在，很大原因还是信息不对称，没有建立有效的信任机制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3.pstatp.com/large/pgc-image/15228275219414a15c987bb&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，区块链的引入，解决了跨境支付信息不对称的问题，并建立起一定程度的信任机制；带来了两个好处。&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;效率提高，费用降低：接入区块链技术后，通过公私钥技术，保证数据的可靠性，再通过加密技术和去中心，达到数据不可篡改的目的，最后，通过P2P技术，实现点对点的结算；去除了传统中心转发，提高了效率，降低了成本(也展望了普及跨境小额支付的可能性)。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;可追溯，符合监管需求：传统的点对点结算不能不规模应用，除了信任问题，还有就是存在监管漏洞（点对点私下交易，存在洗黑钱的风险），而区块链的交易透明，信息公开，交易记录永久保存实现了可追溯，符合监管的需求。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3、应用案例&lt;/p&gt;
&lt;p&gt;应用现状：Ripple、Circle、招商银行等已经入局。&lt;/p&gt;

&lt;p&gt;1、实体资产存在的问题&lt;/p&gt;
&lt;p&gt;2、区块链实现资产数字化&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;资产数字化后，易于分割、流通方便，交易成本低&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;用区块链技术实现资产数字化后，所有资产交易记录公开、透明、永久存储、可追溯，完全符合监管需求&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3、应用案例&lt;/p&gt;
&lt;p&gt;还是以腾讯的微黄金应用为例，继续借用腾讯区块链官网（trustsql.qq.com）上的图片，可以看到，在资产数字化之后，流通更为方便了，不再依赖于发行机构；且购买0.001g黄金成为了可能，降低了参与门槛。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3.pstatp.com/large/pgc-image/1522827522026b3c98f140b&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;本来不像把代币加进来的，但说到区块链，始终绕不开代币；因区块链脱胎于比特币，天生具有代币的属性，目前区块链最成功的应用也正是比特币。&lt;/p&gt;
&lt;p&gt;1、传统货币存在的问题&lt;/p&gt;
&lt;p&gt;传统的货币发行权掌握在国家手中，存在着货币滥发的风险&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;元朝自1271年建立后，依然四处征战，消耗大量的钱财和粮食，为了财政问题，长期滥发货币，造成严重通货膨胀，多数百姓生活在水生火热中，导致流民四起，国家大乱，1368年，不可一世的元朝成了只有97年短命鬼，走向了灭亡。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;1980年津巴布韦独立，后因土改失败，经济崩溃，政府入不敷出，开始印钞；2001年时100津巴布韦币可兑换约1美元；2009年1月，津央行发行100万亿面值新津元（如下图）加速货币崩溃，最终津元被废弃，改用“美元化”货币政策。2017年津巴布韦发生政变，总统穆加贝被赶下台。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://p3.pstatp.com/large/pgc-image/1522827522102376c065577&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;传统的记账权掌握在一个中心化的中介机构手中，存在中介系统瘫痪、中介违约、中介欺瞒、甚至是中介耍赖等风险。&lt;/p&gt;
&lt;p&gt;2013年3月，塞浦路斯为获得救助，对银行储户进行一次性征税约58亿欧元, 向不低于10万欧元的存款一次性征税9.9%，向低于10万欧元的一次性征税6.75%。&lt;/p&gt;
&lt;p&gt;2017年4月，民生银行30亿假理财事件暴露，系一支行行长伪造保本保息理财产品所致，超过150名投资者被套。&lt;/p&gt;
&lt;p&gt;2、区块链如何解决这些问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3.pstatp.com/large/pgc-image/152282752205540d21142c1&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;比特币解决了货币在发行和记账环节的信任问题，我们来看下比特币是如何一一破解上面的两个问题。&lt;/p&gt;
&lt;p&gt;滥发问题：比特币的获取只能通过挖矿获得，且比特币总量为2100万个，在发行环节解决了货币滥发的问题； 账本修改问题：比特币的交易记录通过链式存储和去中心化的全球节点构成网络来解决账本修改问题。&lt;/p&gt;
&lt;p&gt;链式存储可以简单理解为：存储记录的块是一块连着一块的，形成一个链条；除第一个块的所有区块都的记录包含了前一区块的校验信息，改变任一区块的信息，都将导致后续区块校验出错。因为这种关联性，中间也无法插入其他块，所以修改已有记录是困难的。&lt;/p&gt;
&lt;p&gt;而去中心化节点可以简单理解为：全球的中心节点都是平等的，都拥有一模一样的账本，所以，任一节点出问题都不影响账本记录。而要修改账本，必须修改超过全球一半的节点才能完成；而这在目前看来几乎不可能。 既然账本无法修改，那要是记账的时候作弊呢？ 首先，比特币的每条交易记录是有私钥签名的，别人伪造不了这个记录。你能修改的仅仅自己发起的交易记录。&lt;/p&gt;
&lt;p&gt;其次，是关于记账权问题：比特币的记账权，通过工作量证明获得，可以简单理解为：通过算法确定同一时刻，全球只有一个节点获得了记账权，基本规律是谁拥有的计算资源越多，谁获得记账权的概率越大，只有超过全网一半的算力，才可能实现双花。&lt;/p&gt;
&lt;p&gt;备注：比特币的模式是不可复制的，比特币已经吸引了全球绝大多数的算力，从而降低51%攻击发生等问题；其他的复制品基本无法获得相应的算力保证。&lt;/p&gt;
&lt;p&gt;目前，比特币还存在着51%和效率低等问题有待解决，另外，关于交易本身的信任问题是个社会问题，比特币是没有解决的，也解决不了的。&lt;/p&gt;
&lt;p&gt;3、应用案例&lt;/p&gt;
&lt;p&gt;最具代表性的当然是比特币，也不用多说了。&lt;/p&gt;
&lt;p&gt;备注：代币这块真的不看好，比特币目前吸引了全球绝大部分的算力，有独一无二的算力资源作为支撑还稍好一点，其他的代币和传统的货币相比，其背后缺乏国家和武力为其做信用背书，且夺取了国家发币带来的各种好处（如宏观调控），仔细想想就知道有多不靠谱。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.pstatp.com/large/pgc-image/15228275221732f5d7e4e5b&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;区块链应用的场景肯定还有很多，但很多都还不大明朗，暂时就先梳理以上7种场景，顺便归纳一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.pstatp.com/large/pgc-image/152282752212735d5078b56&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;区块链这么火，但实际应用的案例却少之又少；我认为，并非区块链技术目前存在的问题阻碍了其大范围的应用，也不是区块链可以应用的场景非常少，区块链商用牵扯到各方的利益，其最大的难题可能远在技术之外。&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;strong&gt;&lt;span data-sheets-value=&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Unity引擎与C#脚本简介&amp;quot;}&quot; data-sheets-userformat=&quot;{&amp;quot;2&amp;quot;:1,&amp;quot;3&amp;quot;:[null,0]}&quot;&gt;此文已由作者授权腾讯云+社区发布，转载请注明&lt;a href=&quot;https://cloud.tencent.com/developer/article/1082599?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;文章出处&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;原文链接：https://cloud.tencent.com/developer/article/1082599?fromSource=waitui&lt;/p&gt;
&lt;div id=&quot;post_detail&quot;&gt;
&lt;div id=&quot;topics&quot;&gt;
&lt;div class=&quot;post&quot;&gt;
&lt;div class=&quot;postBody&quot;&gt;
&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;blogpost-body&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1112679/201803/1112679-20180330104936874-1573429539.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 04 Apr 2018 07:52:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/8717662.html</dc:identifier>
</item>
<item>
<title>利用java反射读写csv中的数据 - 流沙De记忆</title>
<link>http://www.cnblogs.com/xuanhouse/p/8717647.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuanhouse/p/8717647.html</guid>
<description>&lt;p&gt;  前一段有个需求需要将从数据库读取到的信息保存到csv文件中，在实现该需求的时候发现资料比较少，经过收集反射和csv相关资料，最终得到了如下程序。&lt;br/&gt;  1.在使用java反射读取csv文件数据时，先通过csvreader jar包得到相关数据信息，然后格局反射去读指定对象的成员变量的信息，并转换数据格式最终将csv数据转化为对应的java实体类，该类是一个工具方法，只需要传入符合要求的数据就可以得到结果。&lt;br/&gt;  2.向csv文件写入指定的对象，文件的首行是该对象的成员变量名称。先根据指定的路径，编码格式创建csvwriter，然后根据反射读取对象的成员变量信息，将成员变量的名称写入csv文件的第一行，然后遍历数据集合，根据反射获取到信息并一一写入文件中。&lt;br/&gt;  大体思路是这样的，亲测可用，详细的方法代码如下：&lt;/p&gt;
&lt;h2&gt;使用java反射读取csv&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * 读取指定目录下的xxx.csv文件，并转化为java对象
 *
 * @param t            读取csv文件之后将要转换成的对象
 * @param readFilePath csv文件所在路径
 * @param charSet      编码格式
 * @return 实体对象列表
 */

public static &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; readCsvDataToObject(T t, String readFilePath, String charSet) {
    List&amp;lt;T&amp;gt; resultList = new ArrayList&amp;lt;T&amp;gt;();
    // 创建CSV读对象
    CsvReader csvReader = null;
    try {
        csvReader = new CsvReader(readFilePath, ',', Charset.forName(charSet));
        // 所有成员变量
        Field[] fields = t.getClass().getDeclaredFields();
        // 成员变量的值
        Object entityMemberValue = &quot;&quot;;
        //读取csv文件列标题
        csvReader.readHeaders();
        while (csvReader.readRecord()) {
            Object newInstance = t.getClass().newInstance();
            // 读一整行
            csvReader.getRawRecord();
            for (int f = 0; f &amp;lt; fields.length; f++) {
                fields[f].setAccessible(true);
                String fieldName = fields[f].getName();
                entityMemberValue = getEntityMemberValue(entityMemberValue, fields, f, csvReader.get(fieldName));
                // 赋值
                PropertyUtils.setProperty(newInstance, fieldName, entityMemberValue);
            }
            resultList.add((T) newInstance);
        }
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (null != csvReader) {
            csvReader.close();
        }
    }
    return resultList;
}

/**
 * 根据实体成员变量的类型得到成员变量的值
 *
 * @param realValue 要赋值的对象
 * @param fields    赋值对象所有的成员变量
 * @param f         具体赋值的第几个成员变量
 * @param value     将要写入的值
 * @return 转换之后的属性
 */
private static Object getEntityMemberValue(Object realValue, Field[] fields, int f, String value) throws ParseException, ClassNotFoundException {
    String type = fields[f].getType().getName();
    switch (type) {
        case &quot;char&quot;:
        case &quot;java.lang.Character&quot;:
        case &quot;java.lang.String&quot;:
            realValue = value;
            break;
        case &quot;java.util.Date&quot;:
            realValue = &quot;&quot;.equals(value) ? null : TimeTools.getStringToDate(value);
            break;
        case &quot;java.lang.Integer&quot;:
            realValue = &quot;&quot;.equals(value) ? null : Integer.valueOf(value);
            break;
        case &quot;int&quot;:
        case &quot;float&quot;:
        case &quot;double&quot;:
        case &quot;java.lang.Double&quot;:
        case &quot;java.lang.Float&quot;:
        case &quot;java.lang.Long&quot;:
        case &quot;java.lang.Short&quot;:
        case &quot;java.math.BigDecimal&quot;:
            realValue = &quot;&quot;.equals(value) ? null : new BigDecimal(value);
            break;
        default:
            realValue = null;
            break;
    }
    return realValue;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;将指定数据写入csv文件中&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * 使用csvjava通过反射导出csv文件(通用方法)
 *
 * @param objectData   需要导出的java对象数据
 * @param saveFilePath 导出文件所在路径
 * @param charSet      文件编码格式
 * @return 成功返回true 失败返回false
 */
public static &amp;lt;T&amp;gt; boolean generateCsv(List&amp;lt;T&amp;gt; objectData, String saveFilePath, String charSet) {
    // 创建CSV写对象
    CsvWriter csvWriter = null;
    boolean flag = true;
    try {
        csvWriter = new CsvWriter(saveFilePath, ',', Charset.forName(charSet));
        //获取数据属性信息并写入第一行
        T firstData = objectData.get(0);
        Field[] dataFields = firstData.getClass().getDeclaredFields();
        for (Field field : dataFields) {
            String fieldName = field.getName();
            csvWriter.write(fieldName);
        }
        //第一行结束，换行
        csvWriter.endRecord();
        // 遍历集合数据，产生数据行
        for (T data : objectData) {
            // 利用反射，根据javabean属性的先后顺序，动态调用getXxx()方法得到属性值
            for (Field field : dataFields) {
                if (field.toString().contains(&quot;static&quot;)) {
                    continue;
                }
                String fieldName = field.getName();
                String getMethodName = &quot;get&quot; + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1);
                Class dataClass = data.getClass();
                Method getMethod = dataClass.getMethod(getMethodName, new Class[]{});
                Object value = getMethod.invoke(data, new Object[]{});
                // 判断值的类型后进行强制类型转换
                String textValue;
                if (value instanceof Date) {
                    Date date = (Date) value;
                    SimpleDateFormat sdf = new SimpleDateFormat(
                            &quot;yyyy-MM-dd hh:mm:ss&quot;);
                    textValue = sdf.format(date);
                } else {
                    // 其它数据类型都当作字符串简单处理
                    if (value == null) {
                        value = &quot;&quot;;
                    }
                    textValue = value.toString();
                }
                csvWriter.write(textValue);
            }
            //换行
            csvWriter.endRecord();
        }
    } catch (Exception e) {
        flag = false;
        e.printStackTrace();
    } finally {
        //关闭
        if (null != csvWriter) {
            csvWriter.close();
        }
    }
    return flag;
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 04 Apr 2018 07:50:00 +0000</pubDate>
<dc:creator>流沙De记忆</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuanhouse/p/8717647.html</dc:identifier>
</item>
<item>
<title>[译]RabbitMQ教程C#版 - 工作队列 - Esofar</title>
<link>http://www.cnblogs.com/esofar/p/rabbitmq-work-queues.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/esofar/p/rabbitmq-work-queues.html</guid>
<description>&lt;blockquote readability=&quot;8.6210526315789&quot;&gt;
&lt;p&gt;&lt;strong&gt;先决条件&lt;/strong&gt;&lt;br/&gt;本教程假定RabbitMQ已经安装，并运行在&lt;code&gt;localhost&lt;/code&gt;标准端口（5672）。如果你使用不同的主机、端口或证书，则需要调整连接设置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从哪里获得帮助&lt;/strong&gt;&lt;br/&gt;如果您在阅读本教程时遇到困难，可以通过邮件列表&lt;a href=&quot;https://groups.google.com/forum/#!forum/rabbitmq-users&quot;&gt;联系我们&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;工作队列&quot;&gt;1.工作队列&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;（使用.NET客户端）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.rabbitmq.com/img/tutorials/python-two.png&quot; alt=&quot;Work Queues&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在第一篇教程中，我们编写了两个程序，用于从一个指定的队列发送和接收消息。在本文中，我们将创建一个&lt;em&gt;工作队列&lt;/em&gt;，用于在多个工作线程间分发耗时的任务。&lt;/p&gt;
&lt;p&gt;工作队列（又名：任务队列）背后的主要想法是避免立即执行资源密集型、且必须等待其完成的任务。相反的，我们把这些任务安排在稍后完成。我们可以将任务封装为消息并把它发送到队列中，在后台运行的工作进程将从队列中取出任务并最终执行。当您运行多个工作线程，这些任务将在这些工作线程之间共享。&lt;/p&gt;
&lt;p&gt;这个概念在Web应用程序中特别有用，因为在一个HTTP请求窗口中无法处理复杂的任务。&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;2.准备&lt;/h2&gt;
&lt;p&gt;我们将略微修改上一个示例中的&lt;em&gt;Send&lt;/em&gt;程序，以其可以在命令行发送任意消息。&lt;br/&gt;这个程序将调度任务到我们的工作队列中，所以让我们把它命名为&lt;code&gt;NewTask&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;像&lt;a href=&quot;http://www.cnblogs.com/esofar/p/rabbitmq-hello-world.html&quot;&gt;教程[1]&lt;/a&gt;，我们需要生成两个项目：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;dotnet new console --name NewTask
mv NewTask/Program.cs NewTask/NewTask.cs

dotnet new console --name Worker
mv Worker/Program.cs Worker/Worker.cs

cd NewTask
dotnet add package RabbitMQ.Client
dotnet restore

cd ../Worker
dotnet add package RabbitMQ.Client
dotnet restore&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;var message = GetMessage(args);
var body = Encoding.UTF8.GetBytes(message);

var properties = channel.CreateBasicProperties();
properties.Persistent = true;

channel.BasicPublish(exchange: &quot;&quot;,
                     routingKey: &quot;task_queue&quot;,
                     basicProperties: properties,
                     body: body);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从命令行参数获取消息的帮助方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private static string GetMessage(string[] args)
{
    return ((args.Length &amp;gt; 0) ? string.Join(&quot; &quot;, args) : &quot;Hello World!&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们旧的&lt;code&gt;Receive.cs&lt;/code&gt;脚本也需要进行一些更改：它需要为消息体中的每个点模拟一秒种的时间消耗。它将处理由RabbitMQ发布的消息，并执行任务，因此我们把它复制到&lt;code&gt;Worker&lt;/code&gt;项目并修改：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 构建消费者实例。
var consumer = new EventingBasicConsumer(channel);

// 绑定消息接收事件。
consumer.Received += (model, ea) =&amp;gt;
{
    var body = ea.Body;
    var message = Encoding.UTF8.GetString(body);
    Console.WriteLine(&quot; [x] Received {0}&quot;, message);

    // 模拟耗时操作。
    int dots = message.Split('.').Length - 1;
    Thread.Sleep(dots * 1000);

    Console.WriteLine(&quot; [x] Done&quot;);
};

channel.BasicConsume(queue: &quot;task_queue&quot;, autoAck: true, consumer: consumer);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;模拟虚拟任务的执行时间：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;int dots = message.Split('.').Length - 1;
Thread.Sleep(dots * 1000);&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;循环调度&quot;&gt;3.循环调度&lt;/h2&gt;
&lt;p&gt;使用任务队列的优点之一是能够轻松地并行工作。如果我们正在积累积压的工作，我们仅要增加更多的工作者，并以此方式可以轻松扩展。&lt;/p&gt;
&lt;p&gt;首先，我们尝试同时运行两个&lt;code&gt;Worker&lt;/code&gt;实例。他们都会从队列中获取消息，但究竟如何？让我们来看看。&lt;/p&gt;
&lt;p&gt;您需要打开三个控制台，两个运行&lt;code&gt;Worker&lt;/code&gt;程序，这些控制台作为我们的两个消费者 - C1和C2。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# shell 1
cd Worker
dotnet run
# =&amp;gt; [*] Waiting for messages. To exit press CTRL+C&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;# shell 2
cd Worker
dotnet run
# =&amp;gt; [*] Waiting for messages. To exit press CTRL+C&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在第三个控制台中，我们将发布一些新的任务。一旦你已经运行了消费者，你可以尝试发布几条消息：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# shell 3
cd NewTask
dotnet run &quot;First message.&quot;
dotnet run &quot;Second message..&quot;
dotnet run &quot;Third message...&quot;
dotnet run &quot;Fourth message....&quot;
dotnet run &quot;Fifth message.....&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;让我们看看有什么发送到了我们的&lt;code&gt;Worker&lt;/code&gt;程序：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# shell 1
# =&amp;gt; [*] Waiting for messages. To exit press CTRL+C
# =&amp;gt; [x] Received 'First message.'
# =&amp;gt; [x] Received 'Third message...'
# =&amp;gt; [x] Received 'Fifth message.....'&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;# shell 2
# =&amp;gt; [*] Waiting for messages. To exit press CTRL+C
# =&amp;gt; [x] Received 'Second message..'
# =&amp;gt; [x] Received 'Fourth message....'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;默认情况下，RabbitMQ会按顺序将每条消息发送给下一个消费者。消费者数量平均的情况下，每个消费者将会获得相同数量的消息。这种分配消息的方式称为循环（Round-Robin）。请尝试开启三个或更多的&lt;code&gt;Worker&lt;/code&gt;程序来验证。&lt;/p&gt;
&lt;h2 id=&quot;消息确认&quot;&gt;4.消息确认&lt;/h2&gt;
&lt;p&gt;处理一项任务可能会需要几秒钟的时间。如果其中一个消费者开启了一项长期的任务并且只完成了部分就挂掉了，您可能想知道会发生什么？在我们当前的代码中，一旦RabbitMQ把消息分发给了消费者，它会立即将这条消息标记为删除。在这种情况下，如果您停掉某一个Worker，我们将会丢失这条正在处理的消息，也将丢失所有分发到该Worker但尚未处理的消息。&lt;/p&gt;
&lt;p&gt;但是我们不想丢失任何一个任务。如果一个Worker挂掉了，我们希望这个任务能被重新分发给其他Worker。&lt;/p&gt;
&lt;p&gt;为了确保消息永远不会丢失，RabbitMQ支持&lt;a href=&quot;http://www.rabbitmq.com/confirms.html&quot;&gt;&lt;em&gt;消息确认&lt;/em&gt;&lt;/a&gt;机制。消费者回发一个确认信号Ack(nowledgement)给RabbitMQ，告诉它某个消息已经被接收、处理并且可以自由删除它。&lt;/p&gt;
&lt;p&gt;如果一个消费者在还没有回发确认信号之前就挂了（其通道关闭，连接关闭或者TCP连接丢失），RabbitMQ会认为该消息未被完全处理，并将其重新排队。如果有其他消费者同时在线，该消息将会被会迅速重新分发给其他消费者。这样，即便Worker意外挂掉，也可以确保消息不会丢失。&lt;/p&gt;
&lt;p&gt;没有任何消息会超时；当消费者死亡时，RabbitMQ将会重新分发消息。即使处理消息需要非常非常长的时间也没关系。&lt;/p&gt;
&lt;p&gt;默认情况下，&lt;a href=&quot;http://www.rabbitmq.com/confirms.html&quot;&gt;手动消息确认&lt;/a&gt;模式是开启的。在前面的例子中，我们通过将&lt;code&gt;autoAck&lt;/code&gt;（“自动确认模式”）参数设置为&lt;code&gt;true&lt;/code&gt;来明确地关闭手动消息确认模式。一旦完成任务，是时候删除这个标志并且从Worker手动发送一个恰当的确认信号给RabbitMQ。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 构建消费者实例。
var consumer = new EventingBasicConsumer(channel);

// 绑定消息接收事件。
consumer.Received += (model, ea) =&amp;gt;
{
    var body = ea.Body;
    var message = Encoding.UTF8.GetString(body);
    Console.WriteLine(&quot; [x] Received {0}&quot;, message);
    
    // 模拟耗时操作。
    int dots = message.Split('.').Length - 1;
    Thread.Sleep(dots * 1000);

    Console.WriteLine(&quot; [x] Done&quot;);
    
    // 手动发送消息确认信号。
    channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false);
};

// autoAck:false - 关闭自动消息确认，调用`BasicAck`方法进行手动消息确认。
// autoAck:true  - 开启自动消息确认，当消费者接收到消息后就自动发送ack信号，无论消息是否正确处理完毕。
channel.BasicConsume(queue: &quot;task_queue&quot;, autoAck: false, consumer: consumer);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用上面这段代码，我们可以确定的是，即使一个Worker在处理消息时，我们通过使用&lt;code&gt;CTRL + C&lt;/code&gt;来终止它，也不会丢失任何消息。Worker挂掉不久，所有未确认的消息将会被重新分发。&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;strong&gt;忘记确认&lt;/strong&gt;&lt;br/&gt;遗漏&lt;code&gt;BasicAck&lt;/code&gt;是一个常见的错误。这是一个很简单的错误，但导致的后果却是严重的。当客户端退出时（看起来像是随机分发的），消息将会被重新分发，但是RabbitMQ会吃掉越来越多的内存，因为它不能释放未确认的消息。&lt;br/&gt;为了调试这种错误，您可以使用&lt;code&gt;rabbitmqctl&lt;/code&gt;来打印&lt;code&gt;messages_unacknowledged&lt;/code&gt;字段：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在Windows上，删除&lt;code&gt;sudo&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;rabbitmqctl.bat list_queues name messages_ready messages_unacknowledged&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;消息持久化&quot;&gt;5.消息持久化&lt;/h2&gt;
&lt;p&gt;我们已经学习了如何确保即使消费者挂掉，任务也不会丢失。但是如果RabbitMQ服务器停止，我们的任务还是会丢失。&lt;/p&gt;
&lt;p&gt;当RabbitMQ退出或崩溃时，它会忘记已存在的队列和消息，除非告诉它不要这样做。为了确保消息不会丢失，有两件事是必须的：我们需要将队列和消息标记为&lt;strong&gt;持久&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;首先，我们需要确保RabbitMQ永远不会丢失我们的队列。为了做到这一点，我们需要把队列声明是&lt;em&gt;持久的（Durable）&lt;/em&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 声明队列，通过指定durable参数为`true`，对消息进行持久化处理。 
channel.QueueDeclare(queue: &quot;hello&quot;,
                     durable: true,
                     exclusive: false,
                     autoDelete: false,
                     arguments: null);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;虽然这个命令本身是正确的，但是它在当前设置中不会起作用。那是因为我们已经定义过一个名为&lt;code&gt;hello&lt;/code&gt;的队列，并且这个队列不是持久化的。RabbitMQ不允许使用不同的参数重新定义已经存在的队列，并会向尝试执行该操作的程序返回一个错误。但有一个快速的解决办法 - 让我们用不同的名称声明一个队列，例如&lt;code&gt;task_queue&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;channel.QueueDeclare(queue: &quot;task_queue&quot;,
                     durable: true,
                     exclusive: false,
                     autoDelete: false,
                     arguments: null);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意，该声明队列&lt;code&gt;QueueDeclare&lt;/code&gt;方法的更改需要同时应用于生产者和消费者代码。&lt;/p&gt;
&lt;p&gt;此时，我们可以确定的是，即使RabbitMQ重新启动，&lt;code&gt;task_queue&lt;/code&gt;队列也不会丢失。现在我们需要将我们的消息标记为&lt;em&gt;持久的（Persistent）&lt;/em&gt; - 通过将&lt;code&gt;IBasicProperties.Persistent&lt;/code&gt;设置为&lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 将消息标记为持久性。
var properties = channel.CreateBasicProperties();
properties.Persistent = true;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7.7705544933078&quot;&gt;
&lt;p&gt;&lt;strong&gt;关于消息持久性的说明&lt;/strong&gt;&lt;br/&gt;将消息标记为&lt;code&gt;Persistent&lt;/code&gt;并不能完全保证消息不会丢失。尽管它告诉RabbitMQ将消息保存到磁盘，但当RabbitMQ接收到消息并且尚未保存消息时仍有一段时间间隔。此外，RabbitMQ不会为每条消息执行&lt;code&gt;fsync(2)&lt;/code&gt; - 它可能只是保存到缓存中，并没有真正写入磁盘。消息的持久化保证并不健壮，但对于简单的任务队列来说已经足够了。如果您需要一个更加健壮的保证，可以使用&lt;a href=&quot;https://www.rabbitmq.com/confirms.html&quot;&gt;发布者确认&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;公平调度&quot;&gt;6.公平调度&lt;/h2&gt;
&lt;p&gt;您可能已经注意到调度仍然无法完全按照我们期望的方式工作。例如，在有两个Worker的情况下，假设所有奇数消息都很庞大、偶数消息都很轻量，那么一个Worker将会一直忙碌，而另一个Worker几乎不做任何工作。是的，RabbitMQ并不知道存在这种情况，它仍然会平均地分发消息。&lt;/p&gt;
&lt;p&gt;发生这种情况是因为RabbitMQ只是在消息进入队列后就将其分发。它不会去检查每个消费者所拥有的未确认消息的数量。它只是盲目地将第n条消息分发给第n位消费者。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.rabbitmq.com/img/tutorials/prefetch-count.png&quot; alt=&quot;公平调度&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了改变上述这种行为，我们可以使用参数设置&lt;code&gt;prefetchCount = 1&lt;/code&gt;的&lt;code&gt;basicQos&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;这就告诉RabbitMQ同一时间不要给一个Worker发送多条消息。或者换句话说，不要向一个Worker发送新的消息，直到它处理并确认了前一个消息。&lt;br/&gt;相反，它会这个消息调度给下一个不忙碌的Worker。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;channel.BasicQos(0, 1, false);&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;关于队列大小的说明&lt;/strong&gt;&lt;br/&gt;如果所有的Worker都很忙，您的队列可能会被填满。请留意这一点，可以尝试添加更多的Worker，或者使用其他策略。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;组合在一起&quot;&gt;7.组合在一起&lt;/h2&gt;
&lt;p&gt;我们&lt;code&gt;NewTask.cs&lt;/code&gt;类的最终代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;using System;
using RabbitMQ.Client;
using System.Text;

class NewTask
{
    public static void Main(string[] args)
    {
        // 实例化连接工厂。
        var factory = new ConnectionFactory() { HostName = &quot;localhost&quot; };
        
        // 创建连接、信道。
        using(var connection = factory.CreateConnection())
        using(var channel = connection.CreateModel())
        {
            // 声明队列，标记为持久性。
            channel.QueueDeclare(queue: &quot;task_queue&quot;,
                                 durable: true,
                                 exclusive: false,
                                 autoDelete: false,
                                 arguments: null);
            
            // 获取发送消息。
            var message = GetMessage(args);
            var body = Encoding.UTF8.GetBytes(message);
            
            // 将消息标记为持久性。
            var properties = channel.CreateBasicProperties();
            properties.Persistent = true;
            
            // 发送数据包。
            channel.BasicPublish(exchange: &quot;&quot;,
                                 routingKey: &quot;task_queue&quot;,
                                 basicProperties: properties,
                                 body: body);
                                 
            Console.WriteLine(&quot; [x] Sent {0}&quot;, message);
        }

        Console.WriteLine(&quot; Press [enter] to exit.&quot;);
        Console.ReadLine();
    }

    private static string GetMessage(string[] args)
    {
        return ((args.Length &amp;gt; 0) ? string.Join(&quot; &quot;, args) : &quot;Hello World!&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/NewTask/NewTask.cs&quot;&gt;（NewTask.cs源码）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还有我们的&lt;code&gt;Worker.cs&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;using System;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System.Text;
using System.Threading;

class Worker
{
    public static void Main()
    {
        // 实例化连接工厂。
        var factory = new ConnectionFactory() { HostName = &quot;localhost&quot; };
        
         // 创建连接、信道。
        using(var connection = factory.CreateConnection())
        using(var channel = connection.CreateModel())
        {
            // 声明队列，标记为持久性。
            channel.QueueDeclare(queue: &quot;task_queue&quot;,
                                 durable: true,
                                 exclusive: false,
                                 autoDelete: false,
                                 arguments: null);
            
            // 告知RabbitMQ，在未收到当前Worker的消息确认信号时，不再分发给消息，确保公平调度。
            channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);

            Console.WriteLine(&quot; [*] Waiting for messages.&quot;);

            // 构建消费者实例。
            var consumer = new EventingBasicConsumer(channel);
            
            // 绑定消息接收事件。
            consumer.Received += (model, ea) =&amp;gt;
            {
                var body = ea.Body;
                var message = Encoding.UTF8.GetString(body);
                Console.WriteLine(&quot; [x] Received {0}&quot;, message);

                // 模拟耗时操作。
                int dots = message.Split('.').Length - 1;
                Thread.Sleep(dots * 1000);

                Console.WriteLine(&quot; [x] Done&quot;);

                // 手动发送消息确认信号。
                channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false);
            };
            
            channel.BasicConsume(queue: &quot;task_queue&quot;,
                                 autoAck: false,
                                 consumer: consumer);

            Console.WriteLine(&quot; Press [enter] to exit.&quot;);
            Console.ReadLine();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/dotnet/Worker/Worker.cs&quot;&gt;（Worker.cs源码）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用消息确认机制和&lt;code&gt;BasicQ&lt;/code&gt;您可以创建一个工作队列。即使RabbitMQ重新启动，通过持久性选项也可让任务继续存在。&lt;/p&gt;
&lt;p&gt;有关&lt;code&gt;IModel&lt;/code&gt;方法和&lt;code&gt;IBasicProperties&lt;/code&gt;的更多信息，您可以在线浏览&lt;a href=&quot;http://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v3.6.10/rabbitmq-dotnet-client-3.6.10-client-htmldoc/html/index.html&quot;&gt;RabbitMQ .NET客户端API参考&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;现在，我们可以继续阅读&lt;a href=&quot;http://www.cnblogs.com/esofar/p/rabbitmq-publish-subscribe.html&quot;&gt;教程[3]&lt;/a&gt;，学习如何向多个消费者发送相同的消息。&lt;/p&gt;
&lt;h2 id=&quot;写在最后&quot;&gt;8.写在最后&lt;/h2&gt;
&lt;p&gt;本文翻译自RabbitMQ官方教程C#版本。本文介绍如与官方有所出入，请以官方最新内容为准。&lt;/p&gt;
&lt;p&gt;水平有限，翻译的不好请见谅，如有翻译错误还请指正。&lt;/p&gt;

</description>
<pubDate>Wed, 04 Apr 2018 07:46:00 +0000</pubDate>
<dc:creator>Esofar</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/esofar/p/rabbitmq-work-queues.html</dc:identifier>
</item>
<item>
<title>区块链笔记 - skyme</title>
<link>http://www.cnblogs.com/skyme/p/8717535.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/skyme/p/8717535.html</guid>
<description>&lt;h2&gt;广义和狭义的区块链&lt;/h2&gt;
&lt;p&gt;广义来讲，区块链技术是利用块链式数据结构来验证与存储数据、利用分布式节点共识算法来生成和更新数据、利用密码学的方式保证数据传输和访问的安全、利用由自动化脚本代码组成的智能合约来编程和操作数据的一种全新的&lt;strong&gt;分布式基础架构与计算范式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;狭义来讲&lt;/strong&gt;，区块链是一种按照时间顺序将数据区块以顺序相连的方式组合成的一种链式数据结构，并以密码学方式保证的不可篡改和不可伪造的&lt;strong&gt;分布式账本（分布式数据库）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153457491-1411972175.png&quot;&gt;&lt;img width=&quot;620&quot; height=&quot;480&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153500041-1284600989.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;区块链结构与特征&lt;/h2&gt;
&lt;p&gt;1) 一个&lt;strong&gt;分布式的链接账本&lt;/strong&gt;，每个账本就是一个“区块”；&lt;/p&gt;
&lt;p&gt;2) 基于分布式的&lt;strong&gt;共识算法&lt;/strong&gt;来决定记账者；&lt;/p&gt;
&lt;p&gt;3) 账本内交易由&lt;strong&gt;密码学签名&lt;/strong&gt;和哈希算法保证不可篡改；&lt;/p&gt;
&lt;p&gt;4) 账本按产生的时间顺序链接，当前账本含有上一个账本的哈希值，账本间的链接保证&lt;strong&gt;不可篡改&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;5) 所有交易在账本中&lt;strong&gt;可追溯&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153502936-2079567022.png&quot;&gt;&lt;img width=&quot;640&quot; height=&quot;317&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153505744-874662152.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那么区块链有什么特征呢？&lt;/p&gt;
&lt;p&gt;区块链是一种&lt;strong&gt;共享的分布式数据库技术。主要有以下4个特征：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1) &lt;strong&gt;去中心化（Decentralization）&lt;/strong&gt;：区块链由众多节点组成一个端到端的网络，不存 在中心化的设备和管理机构，任一节点停止工作都会不影响系统整体的运作。&lt;/p&gt;
&lt;p&gt;2) &lt;strong&gt;去信任（Trustless）&lt;/strong&gt;：系统中所有节点之间通过数字签名技术进行验证，无需信任也可以进行交易，只要按照系统既定的规则进行，节点之间不能也无法欺骗其它节点；&lt;/p&gt;
&lt;p&gt;3) &lt;strong&gt;集体维护（CollectivelyMaintain）&lt;/strong&gt;：系统是由其中所有具有维护功能的节点共同维护的，系统中所有人共同参与维护工作；&lt;/p&gt;
&lt;p&gt;4) &lt;strong&gt;可靠数据库（ReliableDatabase）&lt;/strong&gt;：系统中每一个节点都拥有最新的完整数据库拷贝，单个甚至多个节点对数据库的修改无法影响其他节点的数据库，除非能控制整个网络中超过51%的节点同时修改，这几乎不可能发生。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153506760-1639216704.png&quot;&gt;&lt;img width=&quot;640&quot; height=&quot;196&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153509063-1319896784.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;区块链分类&lt;/h2&gt;
&lt;p&gt;以参与方分类，区块链可以分为&lt;strong&gt;公有链、联盟链&lt;/strong&gt;和&lt;strong&gt;私有链&lt;/strong&gt;；从链与链的关系来分，可以分为&lt;strong&gt;主链&lt;/strong&gt;和&lt;strong&gt;侧链&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153510318-1927979194.png&quot;&gt;&lt;img width=&quot;640&quot; height=&quot;267&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153512171-904540336.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;公有链通常也称为&lt;strong&gt;非许可链（Permissionless Blockchain）&lt;/strong&gt;，无官方组织及管理机构，无中心服务器，参与的借点按照系统规格&lt;strong&gt;自由接入网路、不受控制&lt;/strong&gt;，节点间基于共识机制开展工作。&lt;/p&gt;
&lt;p&gt;公有链一般适合于虚拟货币、面向大众的电子商务、互联网金融等B2C、C2C或C2B等应用场景，&lt;strong&gt;比特币&lt;/strong&gt;和&lt;strong&gt;以太坊&lt;/strong&gt;等就是典型的公有链。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;联盟链（Consortium Blockchain）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;联盟链是一种需要注册许可的区块链，这种区块链也称为&lt;strong&gt;许可链（Permissioned Blockchain）&lt;/strong&gt;。联盟链仅限于&lt;strong&gt;联盟成员参与&lt;/strong&gt;，区块链上的读写权限、参与记账权限按联盟规则来制定。整个网络由成员机构共同维护，网络接入一般通过成员机构的网关节点接入，共识过程由预先选好的节点控制。&lt;/p&gt;
&lt;p&gt;一般来说，联盟链适合于机构间的交易、结算或清算等B2B场景。例如在银行间进行支付、结算、清算的系统就可以采用联盟链的形式，将各家银行的网关节点作为记账节点，当网络上有超过2/3的节点确认一个区块，该区块记录的交易将得到全网确认。&lt;/p&gt;
&lt;p&gt;由40多家银行参与的区块链联盟R3和Linux基金会支持的&lt;strong&gt;超级账本（Hyperleder）&lt;/strong&gt;项目都属于联盟链架构。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;私有链（Private Blockchain）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;私有链建立在某个&lt;strong&gt;企业内部&lt;/strong&gt;，系统的运作规则根据企业要求进行设定。私有链的应用场景一般是企业内部的应用，如数据库管理、审计等；&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;侧链（Side chain）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;侧链是用于&lt;strong&gt;确认来自于其它区块链的数据&lt;/strong&gt;的区块链，通过双向挂钩（TwoWay Peg）机制使比特币、Ripple币等&lt;strong&gt;多种资产在不同区块链上以一定的汇率实现转移。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;侧链进一步扩展了区块链技术的应用范围和创新空间，使区块链支持包括股票、债券、金融衍生品等在内的多种资产类型，以及小微支付、智能合约、安全处理机制、真实世界财产注册等；侧链还可以增强区块链的隐私保护。&lt;/p&gt;
&lt;h2&gt;区块链产业链&lt;/h2&gt;
&lt;p&gt;区块链产业链主要包括&lt;strong&gt;基础网络层、中间协议层及应用服务层&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153514142-1874411550.png&quot;&gt;&lt;img width=&quot;640&quot; height=&quot;280&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153518845-2135612551.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;基础网络层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;基础网络层由&lt;strong&gt;数据层、网络层&lt;/strong&gt;组成，其中数据层包括了底层数据区块以及相关的数据加密和时间戳等技术；网络层则包括分布式组网机制、数据传播机制和数据验证机制等。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;中间协议层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;中间协议层由&lt;strong&gt;共识层、激励层、合约层&lt;/strong&gt;组成，其中共识层主要包括网络节点的各类共识算法；激励层将经济因素集成到区块链技术体系中来，主要包括经济激励的发行机制和分配机制等；合约层主要包括各类脚本、算法和智能合约，是区块链可编程特性的基础。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;应用服务层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;应用服务层作为区块链产业链中最重要的环节，则包括区块链的各种应用场景和案例，包括&lt;strong&gt;可编程货币、可编程金融和可编程社会&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;核心技术&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153521248-890219715.png&quot;&gt;&lt;img width=&quot;640&quot; height=&quot;400&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153523008-972869842.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从数据层开始：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;区块+链&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;从技术上来讲，&lt;strong&gt;区块是一种记录交易的数据结构&lt;/strong&gt;，反映了一笔交易的资金流向。&lt;strong&gt;系统中已经达成的交易的区块连接在一起形成了一条主链&lt;/strong&gt;，所有参与计算的节点都记录了主链或主链的一部分。&lt;/p&gt;
&lt;p&gt;每个区块由区块头和区块体组成，区块体只负责记录前一段时间内的所有交易信息，主要包括交易数量和交易详情；区块头则封装了当前的版本号、前一区块地址、时间戳（记录该区块产生的时间，精确到秒）、随机数（记录解密该区块相关数学题的答案的值）、当前区块的目标哈希值、Merkle数的根值等信息。&lt;strong&gt;从结构来看，区块链的大部分功能都由区块头实现。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;概括来看，一个区块包含以下三部分：&lt;strong&gt;交易信息、前一个区块形成的哈希散列、随机数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;交易信息是区块所承载的任务数据，具体包括交易双方的私钥、交易的数量、电子货币的数字签名等；前一个区块形成的哈希散列用来将区块连接起来，实现过往交易的顺序排列；随机数是交易达成的核心，所有矿工节点竞争计算随机数的答案，最快得到答案的节点生成一个新的区块，并广播到所有节点进行更新，如此完成一笔交易。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;哈希函数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;哈希函数可&lt;strong&gt;将任意长度的资料经由Hash算法转换为一组固定长度的代码&lt;/strong&gt;，原理是基于一种密码学上的单向哈希函数，这种函数&lt;strong&gt;很容易被验证，但是却很难破解&lt;/strong&gt;。通常业界使用y =hash(x)的方式进行表示，该哈希函数实现对x进行运算计算出一个哈希值y。&lt;/p&gt;
&lt;p&gt;常使用的哈希算法包括MD5、SHA-1、SHA-256、SHA-384及SHA-512等。&lt;/p&gt;
&lt;p&gt;Merkle树是一种&lt;strong&gt;哈希二叉树&lt;/strong&gt;，使用它可以&lt;strong&gt;快速校验大规模数据的完整性&lt;/strong&gt;。在区块链网络中，Merkle 树被用来归纳一个区块中的所有交易信息，最终生成这个区块所有交易信息的一个统一的哈希值，区块中任何一笔交易信息的改变都会使得Merkle 树改变。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;非对称加密&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;非对称加密算法是一种密钥的保密方法，需要两个密钥：公钥和私钥。&lt;/p&gt;
&lt;p&gt;公钥与私钥是一对，如果用公钥对数据进行加密，只有用对应的私钥才能解密，从而获取对应的数据价值；如果用私钥对数据进行签名，那么只有用对应的公钥才能验证签名，验证信息的发出者是私钥持有者。&lt;/p&gt;
&lt;p&gt;因为加密和解密使用的是两个不同的密钥，所以这种算法叫做非对称加密算法，而对称加密在加密与解密的过程中使用的是同一把密钥。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153524723-119570022.png&quot;&gt;&lt;img width=&quot;640&quot; height=&quot;287&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153526214-455235119.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后来看网络层&lt;/p&gt;
&lt;p&gt;P2P网络（对等网络），又称点对点技术，是没有中心服务器、依靠用户群交换信息的互联网体系。与有中心服务器的中央网络系统不同，对等网络的每个用户端既是一个节点，也有服务器的功能。&lt;/p&gt;
&lt;p&gt;P2P网络其具有去中心化与健壮性等特点。&lt;/p&gt;
&lt;p&gt;然后是共识层&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;共识机制&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;共识机制，就是&lt;strong&gt;所有记账节点之间如何达成共识&lt;/strong&gt;，去认定一个记录的有效性，这既是认定的手段，也是防止篡改的手段。目前主要有四大类共识机制：PoW、PoS、DPoS和分布式一致性算法。&lt;/p&gt;
&lt;p&gt;重点看一下POW&lt;/p&gt;
&lt;p&gt;PoW机制，也就是像&lt;strong&gt;比特币的挖矿机制&lt;/strong&gt;，矿工通过把网络尚未记录的现有交易打包到一个区块，然后不断遍历尝试来寻找一个随机数，使得新区块加上随机数的哈希值满足一定的难度条件。找到满足条件的随机数，就相当于确定了区块链最新的一个区块，也相当于获得了区块链的本轮记账权。矿工把满足挖矿难度条件的区块在网络中广播出去，全网其他节点在验证该区块满足挖矿难度条件，同时区块里的交易数据符合协议规范后，将各自把该区块链接到自己版本的区块链上，从而在全网形成对当前网络状态的共识。&lt;/p&gt;
&lt;p&gt;   优点：&lt;strong&gt;完全去中心化，节点自由进出&lt;/strong&gt;，避免了建立和维护中心化信用机构的成本。只要网络破坏者的算力不超过网络总算力的50%，网络的交易状态就能达成一致。&lt;/p&gt;
&lt;p&gt;  缺点：目前比特币挖矿造成大量的&lt;strong&gt;资源浪费&lt;/strong&gt;；另外挖矿的激励机制也造成&lt;strong&gt;矿池算力的高度集中&lt;/strong&gt;，背离了当初去中心化设计的初衷。更大的问题是PoW机制的&lt;strong&gt;共识达成的周期较长&lt;/strong&gt;，每秒只能最多做7笔交易，不适合商业应用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153527654-5042403.png&quot;&gt;&lt;img width=&quot;640&quot; height=&quot;392&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153531888-22628254.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后是激励层&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;发行机制和激励机制&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以比特币为例。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153534503-555409562.png&quot;&gt;&lt;img width=&quot;640&quot; height=&quot;329&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153537371-771989385.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;赋予账本可编程的特性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;智能合约是一组&lt;strong&gt;情景应对型的程序化规则和逻辑&lt;/strong&gt;，是通过部署在区块链上的去中心化、可信共享的脚本代码实现的。通常情况下，智能合约经各方签署后，以程序代码的形式附着在区块链数据上，经P2P网络传播和节点验证后记入区块链的特定区块中。智能合约封装了预定义的若干状态及转换规则、触发合约执行的情景、特定情景下的应对行动等。区块链可实时监控智能合约的状态，并通过核查外部数据源、确认满足特定触发条件后激活并执行合约。&lt;/p&gt;
&lt;h2&gt;区块链应用&lt;/h2&gt;
&lt;p&gt;在《区块链：新经济蓝图及导读》一书中，作者MelanieSwan按照应用范围和发展阶段将区块链应用划分为区块链1.0、2.0、3.0。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153539633-1861048283.png&quot;&gt;&lt;img width=&quot;640&quot; height=&quot;306&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153542445-1707304974.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区块链1.0&lt;/strong&gt;支撑&lt;strong&gt;虚拟货币&lt;/strong&gt;应用，也就是与转账、汇款和数字化支付相关的密码学货币应用，比特币是区块链1.0的典型应用；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区块链2.0&lt;/strong&gt;支撑&lt;strong&gt;智能合约&lt;/strong&gt;应用，合约是经济和金融领域区块链应用的基础，区块链2.0应用包括了股票、债券、期货、贷款、抵押、产权、智能财产和智能合约，&lt;strong&gt;以太坊、超级账本&lt;/strong&gt;等是区块链2.0的典型应用；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区块链3.0&lt;/strong&gt;应用是超越货币和金融范围的&lt;strong&gt;泛行业去中心化应用&lt;/strong&gt;，特别是在政府、医疗、科学、文化和艺术等领域的应用。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;泛金融应用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;区块链应用于金融领域有着天生的绝对优势，用互联网语言来说，这是区块链的基因决定的。主观来看，&lt;strong&gt;金融机构在区块链应用的探索上意愿最强，需要新的技术来提高运营效率，降低成本来应对整个全球经济当前现状。客观来看，金融行业市场空间巨大，些许的进步就能带来巨大收益。&lt;/strong&gt;金融行业是对安全性、稳定性要求极高的行业，如果区块链在金融领域应用得以验证，那么将会产生巨大的示范效应，迅速在其他行业推广。&lt;/p&gt;
&lt;p&gt;在金融领域，除去&lt;strong&gt;数字货币&lt;/strong&gt;应用，区块链也逐渐在&lt;strong&gt;跨境支付、供应链金融、保险、数字票据、资产证券化、银行征信&lt;/strong&gt;等领域开始了应用。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;跨境支付&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;该领域的&lt;strong&gt;痛点在于到账周期长、费用高、交易透明度低&lt;/strong&gt;。以第三方支付公司为中心，完成支付流程中的记账、结算和清算，到账周期长，比如跨境支付到账周期在三天以上，费用较高。&lt;/p&gt;
&lt;p&gt;区块链去中介化、交易公开透明和不可篡改的特点，没有第三方支付机构加入，&lt;strong&gt;缩短了支付周期、降低费用、增加了交易透明度&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;数字票据&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;该领域痛点在于三个风险问题。操作风险：由于系统中心化，一旦中心服务器出问题，整个市场瘫痪；市场风险：根据数据统计，在2016年，涉及金额达到数亿以上的风险事件就有七件，涉及多家银行；道德风险：市场上存在&quot;一票多卖&quot;、虚假商业汇票等事件。&lt;/p&gt;
&lt;p&gt;区块链去中介化、系统稳定性、共识机制、不可篡改的特点，减少传统中心化系统中的操作风险、市场风险和道德风险。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;征信管理&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;该领域的痛点在于：&lt;strong&gt;数据缺乏共享&lt;/strong&gt;，征信机构与用户信息不对称；正规市场化&lt;strong&gt;数据采集渠道有限&lt;/strong&gt;，数据源争夺战耗费大量成本；&lt;strong&gt;数据隐私保护问题突出&lt;/strong&gt;，传统技术架构难以满足新要求等。&lt;/p&gt;
&lt;p&gt;在征信领域，区块链具有去中心化、去信任、时间戳、非对称加密和智能合约等特征，在技术层面保证了可以在有效保护数据隐私的基础上实现有限度、可管控的信用数据共享和验证。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;资产证券化&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这一领域业务痛点在于&lt;strong&gt;底层资产真假无法保证&lt;/strong&gt;；参与主体多、操作环节多交易透明度低出现&lt;strong&gt;信息不对称&lt;/strong&gt;等问题，造成风险难以把控。&lt;strong&gt;数据痛点&lt;/strong&gt;在于各参与方之间流转效率不高、各方交易系统间资金清算和对账往往需要大量人力物力、资产回款方式有线上线下多种渠道，无法监控资产的真实情况，&lt;/p&gt;
&lt;p&gt;区块链去中介化、共识机制、不可篡改的特点，增加数据流转效率，减少成本，实时监控资产的真实情况，保证交易链条各方机构对底层资产的信任问题。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;供应链金融&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这一领域的痛点在于&lt;strong&gt;融资周期长、费用高&lt;/strong&gt;。以供应链核心企业系统为中心，第三方增信机构很难鉴定供应链上各种相关凭证的真伪，造成人工审核的时间长、融资费用高。&lt;/p&gt;
&lt;p&gt;区块链去中介化、共识机制、不可篡改的特点，不需要第三方增信机构鉴定供应链上各种相关凭证的真实性，降低融资成本、减少融资的周期。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;保险业务&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;随着区块链技术的发展，未来关于个人的健康状况、事故记录等信息可能会上传至区块链中，使保险公司在客户投保时可以更加及时、准确地获得风险信息，从而降低核保成本、提升效率。区块链的共享透明特点降低了信息不对称，还可降低逆向选择风险；而其历史可追踪的特点，则有利于减少道德风险，进而降低保险的管理难度和管理成本。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;区块链 + 医疗&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;医疗领域，区块链能利用自己的匿名性、去中心化等特征保护病人隐私。&lt;strong&gt;电子健康病例（EHR）、DNA钱包、药品防伪&lt;/strong&gt;等都是区块链技术可能的应用领域。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;区块链 + 物联网&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;物联网是一个非常宽泛的概念，如果将通信、能源管理、供应链管理、共享经济等涵盖在内，区块链技术的物联网应用将成为一个非常重要的应用领域。&lt;/p&gt;
&lt;p&gt;现代企业的供应链不断延长，出现零碎化、复杂化、地理分散化等特点，给供应链管理带来了很大的挑战。&lt;strong&gt;核心企业对于供应链的掌控能力有限&lt;/strong&gt;，同时对&lt;strong&gt;假冒商品的追溯和防范&lt;/strong&gt;也存在很大的难度。作为一种分布式账本技术，区块链能够确保透明度和安全性，也显示出了解决当前供应链所存在问题的潜力。&lt;/p&gt;
&lt;p&gt;共享经济是“去中心化”的典型例子。如Airbnb对接了有闲置房屋或者床位的房东和租房者，Uber、滴滴对接了闲置的汽车和乘客，摩拜、ofo提供的共享单车，等等。但共享经济始终面临的一大问题便是信用缺失。区块链技术可以很好的解决这个问题，区块链去中介化、共识机制、不可篡改的特点能有效解决人与人之间信任基础薄弱、个人信用体系不健全等阻碍共享经济发展的因素。&lt;/p&gt;
&lt;p&gt;分布式能源的发展带来的一个问题是微电网的管理以及与现有的中央电网之间如何平衡。区块链具有分布式账本和智能化的合约体系功能，能够将能源流、资金流和信息流有效地衔接，成为能源互联网落地的技术保障。&lt;/p&gt;
&lt;p&gt;除了上述提到的三大应用场景，区块链技术在物联网领域还可应用于充电桩共享、工业互联网、智能家居等领域。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;区块链 + IP版权&amp;amp;文化娱乐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;互联网流行以来，数字音乐、数字图书、数字视频、数字游戏等逐渐成为了主流。知识经济的兴起使得知识产权成为市场竞争的核心要素。但当下的互联网生态里知识产权侵权现象严重，数字资产的版权保护成为了行业痛点。&lt;/p&gt;
&lt;p&gt;区块链去中介化、共识机制、不可篡改的特点，利用区块链技术，能将文化娱乐价值链的各个环节进行有效整合、加速流通，缩短价值创造周期；同时，可实现数字内容的价值转移，并保证转移过程的可信、可审计和透明，有效预防盗版等行为。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;区块链 + 公共服务&amp;amp;教育&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在公共服务、教育、慈善公益等领域，档案管理、身份（资质）认证、公众信任等问题都是客观存在的，传统方式是依靠具备公信力的第三方作信用背书，但造假、缺失等问题依然存在。区块链技术能够保证所有数据的完整性、永久性和不可更改性，因而可以有效解决这些行业在存证、追踪、关联、回溯等方面的难点和痛点。&lt;/p&gt;
&lt;h2&gt;不适合的行业&lt;/h2&gt;
&lt;p&gt;第一，一个好的区块链技术应用场景一定会涉及到&lt;strong&gt;多个信任主体&lt;/strong&gt;，大家需要有去信任中介的方式来合作。&lt;/p&gt;
&lt;p&gt;第二，一定是主体之间&lt;strong&gt;有比较强的合作关系&lt;/strong&gt;，这是商业的需要。&lt;/p&gt;
&lt;p&gt;第三，目前的区块链技术还只能用于中低频交易，是否可以满足&lt;strong&gt;交易需求&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;第四，&lt;strong&gt;商业模式&lt;/strong&gt;一定要完备、可持续。&lt;/p&gt;
&lt;h2&gt;智能合约&lt;/h2&gt;
&lt;p&gt;智能合约是由事件驱动的、具有状态的、运行在一个复制的、分享的账本之上的、且能够保管账本上资产的程序。&lt;/p&gt;
&lt;p&gt;在区块链社会里，大家共同维护一个区块链账本，所有交易数据无法篡改、不可伪造，还能减少人工对账的出错概率和人力成本；随着智能合约普及，我们也会变得更加佛系。面对潜在的纠纷，无需自己出马，一切代码说了算。&lt;/p&gt;
&lt;p&gt;假设你借了一大笔钱给亲戚，虽然打了白纸黑字的借条，但催款的时候，如果对方有一种坚持不要脸的精神，而你也没有撕破脸、或者把对方告上法庭的勇气，你就拿不回本属于自己的钱。智能合约也许是解决办法之一，当然前提是双方把借款金额、还款时间、对方绑定银行卡信息等打包进合约中。到了约定还款日，借款自动划到你的账户里。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153543647-1468817453.png&quot;&gt;&lt;img width=&quot;640&quot; height=&quot;397&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/133059/201804/133059-20180404153545917-1532306548.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;最后就是对区块链的总结，作为一种新兴的技术模型，我们应该保持冷静的态度来应对，目前，除了比特币之外，其它的落地应用还不是非常的多，但是，风险和机会都是相对的，所以，辩证的看待才是最佳的方式。&lt;/p&gt;
&lt;p&gt;目前&lt;strong&gt;区块链底层协议的成熟度和稳定性都还有很大欠缺&lt;/strong&gt;，这也给优秀的技术团队提供了更大的发展空间。长期来看，掌握底层核心技术研发及优化能力的团队更有机会成长为底层技术和协议开发的平台公司，基于对性能和安全性及应用场景的不同需求开发公有链或联盟链，然后上面生长嫁接出很多不同行业的应用。&lt;/p&gt;
</description>
<pubDate>Wed, 04 Apr 2018 07:36:00 +0000</pubDate>
<dc:creator>skyme</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/skyme/p/8717535.html</dc:identifier>
</item>
<item>
<title>redux基础（1） - sakurayeah</title>
<link>http://www.cnblogs.com/sakurayeah/p/8717351.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sakurayeah/p/8717351.html</guid>
<description>&lt;p&gt;ps：每个案例都是接着上一个案例写的&lt;/p&gt;
&lt;p&gt;主要以案例讲解如何使用，具体概念请参考如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html&quot;&gt;基本概念参考1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.redux.org.cn/docs/basics/&quot;&gt;基本概念参考2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sakurayeah/reduxDemo&quot;&gt;案例源码戳这里&lt;/a&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;一storeactionreducer简介&quot;&gt;一、Store、Action、Reducer简介&lt;/h2&gt;
&lt;p&gt;Store 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。&lt;/p&gt;
&lt;p&gt;Action 描述当前发生的事情。改变 State 的唯一办法，就是使用 Action。它会运送数据到 Store。&lt;/p&gt;
&lt;p&gt;Reducers 指定了应用状态的变化如何响应 actions 并发送到 store 的&lt;/p&gt;
&lt;p&gt;action 描述“发生了什么”，使用 reducers 来根据 action 更新 state，Store 就是把它们联系到一起的对象&lt;/p&gt;
&lt;p&gt;Store 有以下职责：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;维持应用的 state；&lt;/li&gt;
&lt;li&gt;提供 getState() 方法获取 state；&lt;/li&gt;
&lt;li&gt;提供 dispatch(action) 方法更新 state；&lt;/li&gt;
&lt;li&gt;通过 subscribe(listener) 注册监听器;&lt;/li&gt;
&lt;li&gt;通过 subscribe(listener) 返回的函数注销监听器。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h3 id=&quot;案例1-计数器&quot;&gt;案例1 计数器&lt;/h3&gt;
&lt;p&gt;新建项目如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[demo]
  |-- webpack.config.js
  |-- package.json
  |-- proxy.config.js
  |-- index.html
  |-- src
    |-- entry.js
    |-- components
      |-- counter.js&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;demo/package.json&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;31&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;entry&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;./src/entry.js&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;dev&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;dora --plugins webpack,proxy&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;atool-build&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;ISC&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;atool-build&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^1.0.2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-cli&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^6.26.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-preset-es2015&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^6.24.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-preset-react&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^6.24.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-preset-stage-0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^6.24.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;dora&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^0.5.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;dora-plugin-proxy&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^0.8.5&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;dora-plugin-webpack&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^16.2.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;react-dom&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^16.2.0&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;react-redux&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^5.0.7&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;redux&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^3.7.2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;redux-thunk&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^2.2.0&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/webpack.config.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; webpack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'atool-build/lib/webpack'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(webpackConfig) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// common&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;webpackConfig&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;plugins&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(plugin&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; i)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(plugin &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;optimize&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;CommonsChunkPlugin&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;plugin&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;constructor&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'CommonsChunkPlugin'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;webpackConfig&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;plugins&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;splice&lt;/span&gt;(i&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;co&quot;&gt;// 返回 webpack 配置对象&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; webpackConfig&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/index.html&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./index.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/src/entry.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Counter &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./components/counter'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(
  &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Counter /&lt;span class=&quot;op&quot;&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'root'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/src/component/counter.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Counter &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;changeNum&lt;/span&gt;(type) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;num&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (type &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ADD'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      num &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      num &lt;span class=&quot;op&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setState&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; num
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;计数器&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;p&amp;gt;{this.state.num}&amp;lt;/p&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;changeNum&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'ADD'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;}&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;button onClick={&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; this.changeNum&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'SUBTRACT'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;}&amp;gt;-&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;export default Counter;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;$ npm i&lt;/p&gt;
&lt;p&gt;$ npm run dev&lt;/p&gt;
&lt;p&gt;打开 &lt;a href=&quot;http://localhost:8989/&quot; class=&quot;uri&quot;&gt;http://localhost:8989/&lt;/a&gt; ，效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1009686/201804/1009686-20180404150641567-793339054.gif&quot; alt=&quot;1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们要做的效果就是这样的，这个是没有用 redux 的来实现的，下面来改造redux的写法&lt;/p&gt;
&lt;p&gt;新增如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[demo]
  |-- src
    |-- reducers
      |-- counter.js&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;demo/src/reducers/counter.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 整个应用的初始状态，可以作为 State 的默认值&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; defaultState &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; (state &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; defaultState&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; action &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// action 是一个对象，其中的type属性是必须的，表示 Action 的名称&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; type&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; payload &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; action&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 当 reducer 接受到不同类型的 action 时，会对 state 进行处理，返回一个新的 state 值&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;switch&lt;/span&gt; (type) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ADD'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; state &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'SUBTRACT'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; state &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里初始状态 state 的默认值为 0 ; 当接收到的 action 的 type 值为 ADD 时 , 返回的 state 值会加一 ; 当接收到的 action 的 type 值为 SUBTRACT 时 , 返回的 state 值会减一&lt;/p&gt;
&lt;p&gt;相当于是做了这里的操作&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;changeNum&lt;/span&gt;(type) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;num&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (type &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ADD'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    num &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    num &lt;span class=&quot;op&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setState&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; num
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;state = defaultState 就相当于是做了这里的操作&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/src/entry.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; createStore &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Counter &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./components/counter'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; counterReducer &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./reducers/counter'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 通过 createStore 创建一个 Redux store 来存放应用中所有的 state , 应用中应有且仅有一个 store。&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;createStore&lt;/span&gt;(counterReducer)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; render &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Counter store&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;store&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    document.getElementById&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;// Store 允许使用 store.subscribe 方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;store.subscribe&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;createStore 的参数：createStore(reducer, [preloadedState], enhancer)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.redux.org.cn/docs/api/createStore.html&quot;&gt;详细参考请戳这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每当 state 发生变化时，通过 store.subscribe 去监听，从而实现 view 的自动渲染。当把这排代码注释掉时，点击加号和减号，view 不会发生改变。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;demo/src/component/counter.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Counter &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;计数器&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        {/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; 当前时刻的 State，可以通过 &lt;span class=&quot;va&quot;&gt;store&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getState&lt;/span&gt;() 拿到 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/}&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;p&amp;gt;{store.getState&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;}&amp;lt;/p&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;/* store.dispatch 接受一个 Action 对象作为参数，将它发送出去 */&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;store&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dispatch&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ADD'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;}&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;button onClick={&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; store.dispatch&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;{type: 'SUBTRACT'}&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;}&amp;gt;-&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;export default Counter;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当点击加号时，store.dispatch 接收到的 action 对象 , type 为 ADD , 触发 reducer 执行，返回新的 state (state + 1) .&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;switch&lt;/span&gt; (type) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ADD'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; state &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果和上图一样&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;二action-创建函数&quot;&gt;二、Action 创建函数&lt;/h2&gt;
&lt;p&gt;Action 创建函数 就是生成 action 的方法&lt;/p&gt;

&lt;hr/&gt;
&lt;h3 id=&quot;案例2-筛选&quot;&gt;案例2 筛选&lt;/h3&gt;
&lt;p&gt;新增&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[demo]
  |-- reducers
    |-- filtrate.js
  |-- components
    |-- filtrate.js
  |-- actions
    |-- filtrate.js&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;demo/src/reducers/filtrate.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 整个应用的初始状态，可以作为 State 的默认值&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; defaultState &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'筛选器'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'EN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'The forest was completely silent for a moment'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'CN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'量小非君子，无度不丈夫'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'EN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'In the library it was very still'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'EN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'The living room is so quiet without guests.'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'CN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'擒贼先擒王'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  ]
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; (state &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; defaultState&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; action &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// action 是一个对象，其中的type属性是必须的，表示 Action 的名称&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; type&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; payload &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; action&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 当 reducer 接受到不同类型的 action 时，会对 state 进行处理，返回一个新的 state 值&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;switch&lt;/span&gt; (type) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'SHOW_EN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/src/components/filtrate.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Filtrate &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; title &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [] &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;store&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getState&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;op&quot;&gt;&amp;gt;{&lt;/span&gt;title&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;button&amp;gt;只显示英文&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;((v&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; i) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div key&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;}&amp;gt;{&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;i&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;v&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      &amp;lt;/div&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    )
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; Filtrate&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/src/entry.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; createStore &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Counter &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./components/counter'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Filtrate &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./components/filtrate'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; counterReducer &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./reducers/counter'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; FiltrateReducer &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./reducers/filtrate'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 通过 createStore 创建一个 Redux store 来存放应用中所有的 state , 应用中应有且仅有一个 store。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// const store = createStore(counterReducer);&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;createStore&lt;/span&gt;(FiltrateReducer)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; render &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Filtrate store&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;store&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    document.getElementById&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;// Store 允许使用 store.subscribe 方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;store.subscribe&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1009686/201804/1009686-20180404150715615-347395552.jpg&quot; alt=&quot;2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;demo/src/actions/filtrate.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; showEn &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (list) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; arr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 从数组里筛选出 language 为 'EN' 的部分&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;((v) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;v&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'EN'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(v)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'SHOW_EN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; arr&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/src/components/filtrate.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; action &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'../actions/filtrate'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Filtrate &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; title &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [] &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;store&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getState&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;op&quot;&gt;&amp;gt;{&lt;/span&gt;title&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;button onClick={&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; store.dispatch&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;action.showEn&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;}&amp;gt;只显示英文&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;((v&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; i) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div key&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;}&amp;gt;{&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;i&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;v&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      &amp;lt;/div&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    )
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; Filtrate&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;案例1 里面，store.dispatch 里是直接传的对象，这里要筛选数组里属于英文的部分，定义一个函数来生成 Action，这个函数就叫 Action Creator。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;demo/src/reducers/filtrate.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 整个应用的初始状态，可以作为 State 的默认值&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; defaultState &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'筛选器'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'EN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'The forest was completely silent for a moment'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'CN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'量小非君子，无度不丈夫'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'EN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'In the library it was very still'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'EN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'The living room is so quiet without guests.'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'CN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'擒贼先擒王'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  ]
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; (state &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; defaultState&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; action &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// action 是一个对象，其中的type属性是必须的，表示 Action 的名称&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; type&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; payload &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; action&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 当 reducer 接受到不同类型的 action 时，会对 state 进行处理，返回一个新的 state 值&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;switch&lt;/span&gt; (type) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'SHOW_EN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        ...&lt;span class=&quot;at&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; payload &lt;span class=&quot;co&quot;&gt;// 这里传过来的 payload 就是筛选过的数组&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1009686/201804/1009686-20180404150733291-1093358917.gif&quot; alt=&quot;3&quot;/&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;三combinereducers&quot;&gt;三、combineReducers&lt;/h2&gt;
&lt;p&gt;Redux 提供了一个combineReducers方法，用于 Reducer 的拆分。你只要定义各个子 Reducer 函数，然后用这个方法，将它们合成一个大的 Reducer。&lt;/p&gt;

&lt;hr/&gt;
&lt;h3 id=&quot;案例3&quot;&gt;案例3&lt;/h3&gt;
&lt;p&gt;将前面 案例1 和 案例2 合并一个 reducer&lt;/p&gt;
&lt;p&gt;新增&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[demo]
  |-- src
    |-- components
      |-- init.js
    |-- reducers
      |-- index.js&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;demo/src/reducers/index.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; combineReducers &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; counterReducer &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./reducers/counter'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; filtrateReducer &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./reducers/filtrate'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 将 counterReducer 和 filtrateReducer 合并成一个大的 reducer&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;combineReducers&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; counterReducer&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;filtrate&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; filtrateReducer
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/src/entry.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; createStore &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Counter &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./components/counter'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Filtrate &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./components/filtrate'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; reducer &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./reducers/index'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 通过 createStore 创建一个 Redux store 来存放应用中所有的 state , 应用中应有且仅有一个 store。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// const store = createStore(counterReducer);&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;createStore&lt;/span&gt;(reducer)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; render &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Filtrate store&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;store&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    document.getElementById&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;// Store 允许使用 store.subscribe 方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;store.subscribe&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/src/components/filtrate.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; action &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'../actions/filtrate'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Filtrate &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; title &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [] &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;store&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getState&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;filtrate&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;op&quot;&gt;&amp;gt;{&lt;/span&gt;title&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;button onClick={&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; store.dispatch&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;action.showEn&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;}&amp;gt;只显示英文&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;((v&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; i) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div key&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;}&amp;gt;{&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;i&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;v&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      &amp;lt;/div&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    )
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; Filtrate&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里 store.getState() 获取的包含了 counter 和 filtrate 两部分的，因此要取 filtrate 部分的，就要用 store.getState().filtrate&lt;/p&gt;
&lt;p&gt;改到这里，看到的效果和 案例2 一样&lt;/p&gt;
&lt;p&gt;下面再把 counter 也加入&lt;/p&gt;
&lt;p&gt;&lt;span&gt;demo/src/entry.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; createStore &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; reducer &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./reducers/index'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Init &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./components/init'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 通过 createStore 创建一个 Redux store 来存放应用中所有的 state , 应用中应有且仅有一个 store。&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;createStore&lt;/span&gt;(reducer)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; render &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Init store&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;store&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    document.getElementById&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;// Store 允许使用 store.subscribe 方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;store.subscribe&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/components/index.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Filtrate &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./filtrate'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Counter &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./counter'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Init &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Counter store&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;store&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;Filtrate store={store} /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;export default Init;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/components/counter.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Counter &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;计数器&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        {/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; 当前时刻的 State，可以通过 &lt;span class=&quot;va&quot;&gt;store&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getState&lt;/span&gt;() 拿到 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/}&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;p&amp;gt;{store.getState&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;.counter}&amp;lt;/p&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;/* store.dispatch 接受一个 Action 对象作为参数，将它发送出去 */&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;store&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dispatch&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ADD'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;}&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;button onClick={&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; store.dispatch&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;{type: 'SUBTRACT'}&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;}&amp;gt;-&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;export default Counter;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1009686/201804/1009686-20180404150751066-243388989.gif&quot; alt=&quot;4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;多个 action 的写法如下（这里不单独写案例了，大家自己尝试下）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;|-- actions
  |-- a.js
  |-- filtrate.js
  |-- index.js

index.js 内容如下&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; aAction &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./a'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; filtrateAction &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./filtrate'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  ...&lt;span class=&quot;at&quot;&gt;aAction&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  ...&lt;span class=&quot;at&quot;&gt;filtrateAction&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 demo/src/components/filtrate.js 里&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; action &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'../actions/filtrate'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就应该写成&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; action &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'../actions/index'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;四初始化-state&quot;&gt;四、初始化 State&lt;/h2&gt;
&lt;p&gt;上面介绍了 createStore 的三个参数：createStore(reducer, [preloadedState], enhancer)，并且介绍了 reducer 怎么用。下面来介绍下 preloadedState&lt;/p&gt;
&lt;p&gt;主要有两种方法来初始化应用的 state ，第一种是在 reducer 中为 state 设置默认值，第二种是用 createStore 方法中的第二个参数 preloadedState。&lt;/p&gt;
&lt;p&gt;第一个方法在 案例1 已经展示过怎么写了&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 案例1 demo/src/reducers/counter.js&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 整个应用的初始状态，可以作为 State 的默认值&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; defaultState &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; (state &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; defaultState&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; action &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面介绍第二个方法的使用&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;案例4&quot;&gt;案例4&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;demo/src/entry.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; createStore &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; reducer &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./reducers/index'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Init &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./components/init'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 通过 createStore 创建一个 Redux store 来存放应用中所有的 state , 应用中应有且仅有一个 store。&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;createStore&lt;/span&gt;(reducer)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;store&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getState&lt;/span&gt;())

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; render &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Init store&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;store&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    document.getElementById&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;// Store 允许使用 store.subscribe 方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;store.subscribe&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;console 打印的结果如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1009686/201804/1009686-20180404150816422-1313250638.jpg&quot; alt=&quot;5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;demo/src/entry.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; createStore &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; reducer &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./reducers/index'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Init &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./components/init'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 通过 createStore 创建一个 Redux store 来存放应用中所有的 state , 应用中应有且仅有一个 store。&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;createStore&lt;/span&gt;(reducer&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;filtrate&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'筛选器 - 只展示英文'&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;store&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getState&lt;/span&gt;())

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; render &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Init store&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;store&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    document.getElementById&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;// Store 允许使用 store.subscribe 方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;store.subscribe&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;刷新页面后，效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1009686/201804/1009686-20180404150830777-732420489.gif&quot; alt=&quot;6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这时，默认值就不是 reducer 里设置的了，而是 preloadedState。&lt;/p&gt;
&lt;p&gt;这里要注意的时，使用 combineReducers 结合多个 reducer 使用时，设置的初始值一定要和 combineReducers 里的 key 对应。&lt;/p&gt;
&lt;p&gt;例如，直接写一个 abc 在里面&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;createStore&lt;/span&gt;(reducer&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;filtrate&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'筛选器 - 只展示英文'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;123&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;则会报错&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;warning.js:14 Unexpected key &quot;abc&quot; found in preloadedState argument passed to createStore. Expected to find one of the known reducer keys instead: &quot;counter&quot;, &quot;filtrate&quot;. Unexpected keys will be ignored.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;通常情况下，通过 preloadedState 指定的 state 要优先于通过 reducer 指定 state。这样可以使通过 reducer 默认参数指定初始数据显得更加的合理，并且当你从一些持久化的存储器或服务器更新 store 的时候，允许你更新已存在的数据（全部或者部分）。&lt;/p&gt;
&lt;p&gt;preloadedState 但是如果你不传任何东西，或者没设置相应的字段，那么 reducer 就会选择指定的默认 state 参数来取代&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;五connect&quot;&gt;五、connect&lt;/h2&gt;
&lt;p&gt;React-Redux 将所有组件分成两大类：UI 组件（presentational component）和容器组件（container component）。&lt;/p&gt;
&lt;p&gt;UI 组件有以下几个特征：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;只负责 UI 的呈现，不带有任何业务逻辑&lt;/li&gt;
&lt;li&gt;没有状态（即不使用this.state这个变量）&lt;/li&gt;
&lt;li&gt;所有数据都由参数（this.props）提供&lt;/li&gt;
&lt;li&gt;不使用任何 Redux 的 API&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;容器组件的特征恰恰相反：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;负责管理数据和业务逻辑，不负责 UI 的呈现&lt;/li&gt;
&lt;li&gt;带有内部状态&lt;/li&gt;
&lt;li&gt;使用 Redux 的 API&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;UI 组件负责 UI 的呈现，容器组件负责管理数据和逻辑。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html&quot;&gt;详细参考请戳这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React-Redux 提供 connect 方法，用于从 UI 组件生成容器组件。connect 的意思，就是将这两种组件连起来。&lt;/p&gt;
&lt;p&gt;写法如下&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; connect &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-redux'&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Filtrate &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  ...
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;connect&lt;/span&gt;(
  mapStateToProps&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  mapDispatchToProps
)(Filtrate)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;connect方法接受两个参数：mapStateToProps和mapDispatchToProps。它们定义了 UI 组件的业务逻辑。前者负责输入逻辑，即将state映射到 UI 组件的参数（props），后者负责输出逻辑，即将用户对 UI 组件的操作映射成 Action。&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;六mapstatetoprops&quot;&gt;六、mapStateToProps&lt;/h2&gt;
&lt;p&gt;mapStateToProps(Function): 如果定义该参数，组件将会监听 Redux store 的变化。任何时候，只要 Redux store 发生改变，mapStateToProps 函数就会被调用。该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。如果你省略了这个参数，你的组件将不会监听 Redux store。&lt;/p&gt;

&lt;hr/&gt;
&lt;h3 id=&quot;案例5&quot;&gt;案例5&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;demo/src/entry.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; createStore &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; reducer &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./reducers/index'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Init &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./components/init'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 通过 createStore 创建一个 Redux store 来存放应用中所有的 state , 应用中应有且仅有一个 store。&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;createStore&lt;/span&gt;(reducer)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; render &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Init store&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;store&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    document.getElementById&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;// Store 允许使用 store.subscribe 方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;store.subscribe&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/src/components/filtrate.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; connect &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-redux'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; action &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'../actions/filtrate'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Filtrate &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; filtrate&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; dispatch &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; title &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [] &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; filtrate&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;op&quot;&gt;&amp;gt;{&lt;/span&gt;title&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;button onClick={&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; dispatch&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;action.showEn&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;}&amp;gt;只显示英文&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;((v&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; i) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div key&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;}&amp;gt;{&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;i&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;v&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      &amp;lt;/div&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    )
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; mapStateToProps &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (state) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 这里的 state 就相当于是上面案例里写的 store.getState()，在这个案例里&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// mapStateToProps 这个回调函数返回的对象，相当于是 store.getState().filtrate&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filtrate&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;filtrate&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// mapStateToProps 函数返回的对象 和组件 Filtrate 的 props 合并后，可以直接通过 this.props.filtrate 取出&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;connect&lt;/span&gt;(mapStateToProps)(Filtrate)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果和 案例3 一样&lt;/p&gt;
&lt;p&gt;mapStateToProps 会订阅 Store，每当 state 更新的时候，就会自动执行，重新计算 UI 组件的参数，从而触发 UI 组件的重新渲染。&lt;/p&gt;
&lt;p&gt;connect 方法可以省略 mapStateToProps 参数，那样的话，UI 组件就不会订阅Store，就是说 Store 的更新不会引起 UI 组件的更新。&lt;/p&gt;
&lt;p&gt;可以尝试下 改为下面这样，就会发现点击“只显示英文”的按钮时，不会有变化&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// export default connect(mapStateToProps)(Filtrate);&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;connect&lt;/span&gt;()(Filtrate)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;mapStateToProps的第一个参数总是state对象，还可以使用第二个参数，代表容器组件的props对象。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// ownProps 可以理解为：mapStateToProps 函数返回的对象 和组件 Filtrate 的 props 合并之前，组件自身的 props。这里的 ownProps，就相当于是 案例3 Filtrate 组件的 this.props。&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; mapStateToProps &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (state&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ownProps) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(ownProps)
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filtrate&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;filtrate&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;七mapdispatchtoprops&quot;&gt;七、mapDispatchToProps&lt;/h2&gt;
&lt;p&gt;mapDispatchToProps：Object | Function&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Object：如果传递的是一个对象，那么每个定义在该对象的函数都将被当作 Redux action creator，对象所定义的方法名将作为属性名&lt;/li&gt;
&lt;li&gt;Function：每个方法将返回一个新的函数，函数中 dispatch 方法会将 action creator 的返回值作为参数执行。这些属性会被合并到组件的 props 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h3 id=&quot;案例6&quot;&gt;案例6&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;demo/src/components/filtrate.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; connect &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-redux'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; action &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'../actions/filtrate'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Filtrate &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; filtrate&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; btnClick &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; title &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [] &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; filtrate&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;op&quot;&gt;&amp;gt;{&lt;/span&gt;title&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;button onClick={&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; btnClick&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;}&amp;gt;只显示英文&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;((v&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; i) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div key&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;}&amp;gt;{&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;i&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;v&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      &amp;lt;/div&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    )
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; mapStateToProps &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (state&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ownProps) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filtrate&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;filtrate&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 这里 mapDispatchToProps 是一个函数，有两个参数 dispatch 和 ownProps（容器组件的props对象&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; mapDispatchToProps &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (dispatch&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ownProps) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 返回一个对象，该对象的每个键值对都是一个映射，定义了 UI 组件的参数怎样发出 Action&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;btnClick&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (list) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;dispatch&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;action&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;showEn&lt;/span&gt;(list))
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 这里是 mapDispatchToProps 为对象的写法&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// const mapDispatchToProps = {&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//   btnClick: (list) =&amp;gt; action.showEn(list),&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// }&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;connect&lt;/span&gt;(mapStateToProps&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; mapDispatchToProps)(Filtrate)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;mapDispatchToProps 是 connect 函数的第二个参数，用来建立 UI 组件的参数到store.dispatch方法的映射。也就是说，它定义了哪些用户的操作应该当作 Action，传给 Store。它可以是一个函数，也可以是一个对象。&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;八provider&quot;&gt;八、Provider&lt;/h2&gt;
&lt;p&gt;Provider 使组件层级中的 connect() 方法都能够获得 Redux store。正常情况下，你的根组件应该嵌套在 Provider 中才能使用 connect() 方法。&lt;/p&gt;
&lt;p&gt;案例6 中，是把 store 作为 props 传递到每一个被 connect() 包装的组件&lt;/p&gt;
&lt;p&gt;但是 redux 只推荐在单元测试中对 store 进行伪造 (stub) 或者在非完全基于 React 的代码中才这样做。正常情况下，应该使用 Provider&lt;/p&gt;

&lt;hr/&gt;
&lt;h3 id=&quot;案例7&quot;&gt;案例7&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;demo/src/entry.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; createStore &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; Provider &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-redux'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; reducer &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./reducers/index'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Init &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./components/init'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;createStore&lt;/span&gt;(reducer)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// Provider 在根组件外面包了一层，这样一来，Init 的所有子组件就默认都可以拿到state 了&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(
  &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Provider store&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;store&lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Init /&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/Provider&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  document.getElementById&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/src/components/init.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Filtrate &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./filtrate'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Counter &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./counter'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Init &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Counter /&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Filtrate /&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;export default Init;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/src/components/counter.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; connect &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-redux'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Counter &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; counter&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; addClick&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; subtractClick &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;计数器&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;p&amp;gt;{counter}&amp;lt;/p&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;addClick&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;}&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;button onClick={&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; subtractClick&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;}&amp;gt;-&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;const mapStateToProps = &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;state, ownProps&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  return {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    counter: state.counter&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;// function 写法&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;const mapDispatchToProps = &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;dispatch, ownProps&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  return {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    addClick: &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      dispatch&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;{type: 'ADD'}&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    },&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    subtractClick: &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      dispatch&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;{type: 'SUBTRACT'}&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;ss&quot;&gt;// 对象 写法&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;// const mapDispatchToProps = {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;//   addClick: &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;//     type: 'ADD'&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;//   }&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;//   subtractClick: &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;//     type: 'SUBTRACT'&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;//   }&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;// }&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;export default connect&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;mapStateToProps, mapDispatchToProps&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果和 案例3 一样。&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;九bindactioncreators&quot;&gt;九、bindActionCreators&lt;/h2&gt;
&lt;p&gt;bindActionCreators(actionCreators, dispatch)&lt;/p&gt;
&lt;p&gt;把一个 value 为不同 action creator 的对象，转成拥有同名 key 的对象。同时使用 dispatch 对每个 action creator 进行包装，以便可以直接调用它们。&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;actionCreators (Function or Object): 一个 action creator，或者一个 value 是 action creator 的对象。&lt;/li&gt;
&lt;li&gt;dispatch (Function): 一个由 Store 实例提供的 dispatch 函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h3 id=&quot;案例8&quot;&gt;案例8&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; bindActionCreators &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; connect &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-redux'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; action &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'../actions/filtrate'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Filtrate &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; filtrate&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; btnClick&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; actions &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; title &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [] &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; filtrate&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;op&quot;&gt;&amp;gt;{&lt;/span&gt;title&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;button onClick={&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; actions.showEn&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;}&amp;gt;只显示英文&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;((v&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; i) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div key&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;}&amp;gt;{&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;i&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;v&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      &amp;lt;/div&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    )
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; mapStateToProps &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (state&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ownProps) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filtrate&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;filtrate&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;mapDispatchToProps&lt;/span&gt;(dispatch&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ownProps) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 返回值(Function or Object): 一个与原对象类似的对象，只不过这个对象的 value 都是会直接 dispatch 原 action creator 返回的结果的函数。如果传入一个单独的函数作为 actionCreators，那么返回的结果也是一个单独的函数。&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;bindActionCreators&lt;/span&gt;(action&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; dispatch)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;connect&lt;/span&gt;(mapStateToProps&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; mapDispatchToProps)(Filtrate)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果和 案例3 一样。&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;十applymiddleware&quot;&gt;十、applyMiddleware&lt;/h2&gt;
&lt;p&gt;是 Redux 的原生方法，作用是将所有中间件组成一个数组，依次执行&lt;/p&gt;
&lt;p&gt;中间件就是一个函数，对store.dispatch方法进行了改造，在发出 Action 和执行 Reducer 这两步之间，添加了其他功能。&lt;/p&gt;
&lt;p&gt;注意点：&lt;/p&gt;
&lt;p&gt;（1）createStore方法可以接受整个应用的初始状态作为参数，那样的话，applyMiddleware就是第三个参数了。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;createStore&lt;/span&gt;(
  reducer&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  preloadedState&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;applyMiddleware&lt;/span&gt;(logger)
)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）中间件的次序有讲究。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;createStore&lt;/span&gt;(
  reducer&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;applyMiddleware&lt;/span&gt;(thunk&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; promise&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; logger)
)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html&quot;&gt;详细概念戳这里&lt;/a&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;十一redux-thunk-中间键&quot;&gt;十一、redux-thunk 中间键&lt;/h2&gt;
&lt;p&gt;redux-thunk 中间件可以让 action 创建函数先不返回一个 action 对象，而是返回一个函数，函数传递两个参数(dispatch,getState), 在函数体内进行业务逻辑的封装&lt;/p&gt;

&lt;hr/&gt;
&lt;h3 id=&quot;案例9&quot;&gt;案例9&lt;/h3&gt;
&lt;p&gt;npm i jquery --save&lt;/p&gt;
&lt;p&gt;mock数据内容如下&lt;/p&gt;
&lt;p&gt;&lt;span&gt;demo/proxy.config.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;'GET /filtrateInit.json'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'EN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'The forest was completely silent for a moment'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'CN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'量小非君子，无度不丈夫'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'EN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'In the library it was very still'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'EN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'The living room is so quiet without guests.'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'CN'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'擒贼先擒王'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/src/entry.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; createStore&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; applyMiddleware &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; Provider &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-redux'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; thunk &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux-thunk'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; reducer &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./reducers/index'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Init &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./components/init'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;createStore&lt;/span&gt;(reducer&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;applyMiddleware&lt;/span&gt;(thunk))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(
  &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Provider store&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;store&lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Init /&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/Provider&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  document.getElementById&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/src/actions/filtrate.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; $ &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 只展示英文&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; showEn &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (list) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; arr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;((v) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;v&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'EN'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(v)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'BUILD_LIST'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; arr&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 初始化请求&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; filtrateInit &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (dispatch&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; getState) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'filtrateInit.json'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;dispatch&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;filtrateInitOK&lt;/span&gt;(data))
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;// 请求失败的处理&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 请求成功处理&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; filtrateInitOK &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (data) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'BUILD_LIST'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/src/reducers/filtrate.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 整个应用的初始状态，可以作为 State 的默认值&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; defaultState &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'筛选器'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; []
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; (state &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; defaultState&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; action &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// action 是一个对象，其中的type属性是必须的，表示 Action 的名称&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; type&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; payload &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; action&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 当 reducer 接受到不同类型的 action 时，会对 state 进行处理，返回一个新的 state 值&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;switch&lt;/span&gt; (type) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'BUILD_LIST'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        ...&lt;span class=&quot;at&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; payload
      &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;demo/src/components/filtrate.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; bindActionCreators &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; connect &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-redux'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; action &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'../actions/filtrate'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Filtrate &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;componentDidMount&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; actions &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 初始化请求拿 list 的内容&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;actions&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;filtrateInit&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; filtrate&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; btnClick&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; actions &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; title &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [] &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; filtrate&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;op&quot;&gt;&amp;gt;{&lt;/span&gt;title&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;button onClick={&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; actions.showEn&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;}&amp;gt;只显示英文&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;((v&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; i) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div key&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;}&amp;gt;{&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;i&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;v&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      &amp;lt;/div&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    )
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; mapStateToProps &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (state&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ownProps) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filtrate&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;filtrate&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;mapDispatchToProps&lt;/span&gt;(dispatch&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ownProps) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 返回值(Function or Object): 一个与原对象类似的对象，只不过这个对象的 value 都是会直接 dispatch 原 action creator 返回的结果的函数。如果传入一个单独的函数作为 actionCreators，那么返回的结果也是一个单独的函数。&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;bindActionCreators&lt;/span&gt;(action&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; dispatch)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;connect&lt;/span&gt;(mapStateToProps&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; mapDispatchToProps)(Filtrate)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1009686/201804/1009686-20180404150859229-1223995432.gif&quot; alt=&quot;7&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 04 Apr 2018 07:10:00 +0000</pubDate>
<dc:creator>sakurayeah</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sakurayeah/p/8717351.html</dc:identifier>
</item>
<item>
<title>学习ASP.NET Core Razor 编程系列四——Asp.Net Core Razor列表模板页面 - DotNet菜园</title>
<link>http://www.cnblogs.com/chillsrc/p/8717199.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chillsrc/p/8717199.html</guid>
<description>&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span class=&quot;postTitle2&quot;&gt;&lt;span&gt;学习ASP.NET Core Razor 编程系列目录&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl02_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/chillsrc/p/8579777.html&quot;&gt;&lt;span&gt;学习ASP.NET Core Razor 编程系列一&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl01_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/chillsrc/p/8622439.html&quot;&gt;&lt;span&gt;学习ASP.NET Core Razor 编程系列二——添加一个实体&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl01_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/chillsrc/p/8651973.html&quot;&gt;&lt;span&gt;学习ASP.NET Core Razor 编程系列三——创建数据表及创建项目基本页面&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;本篇文章介绍上一篇文章中创建的书籍信息管理系统中增删改查的四个Razor模板页面。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;strong&gt;一、列表页面。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;       我们首先来了解一下书籍列表页面，这个页面位置在 &lt;em&gt;Pages/Books/Index.cshtml.cs&lt;/em&gt; :&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc.RazorPages;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; RazorMvcBooks.Models; 

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; RazorMvcBooks.Pages.Books
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; IndexModel : PageModel
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; RazorMvcBooks.Models.BookContext _context;

         &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IndexModel(RazorMvcBooks.Models.BookContext context)
        {
            _context &lt;/span&gt;=&lt;span&gt; context;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IList&amp;lt;Book&amp;gt; Book { &lt;span&gt;get&lt;/span&gt;;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;; } 

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task OnGetAsync()
        {
            Book &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.Book.ToListAsync();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p align=&quot;left&quot;&gt;&lt;span&gt;        列表页面&lt;span&gt;IndexModel&lt;/span&gt;派生自 PageModel。 按照命名规则PageModel 的派生类一般命名为 &amp;lt;PageName&amp;gt;Model。 构造函数使用依赖关系注入的方式将 BookContext 添加到页面。 所有通过上一文章中的方法创建的模板页面都是如此。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;         当Index页面发出请求时，OnGetAsync 方法向 Razor 页面返回一个书籍列表。 在 Razor 页面上调用 OnGetAsync 方法或 OnGet方法初始化页面数据。 在本示例中，OnGetAsync 将数据库中Book表中的所有书籍信息，并以列表的形式显示出来。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;         当 OnGet 方法返回 void 或 OnGetAsync方法返回 Task 时，不需要任何返回语句。 当返回类型是 IActionResult 或 Task&amp;lt;IActionResult&amp;gt; 时，必须提供返回语句。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;          下面我们介绍一下有返回的方法，例如 &lt;em&gt;Pages/Movies/Create.cshtml.cs&lt;/em&gt; 页面中的OnPostAsync方法，代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IActionResult&amp;gt;&lt;span&gt; OnPostAsync()
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;ModelState.IsValid)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Page();
            }
 

            _context.Book.Add(Book);
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.SaveChangesAsync(); 

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; RedirectToPage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;./Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;           其次，我们来看看&lt;span&gt;书籍列表页面中的前端代码，这个页面位置在&lt;/span&gt; &lt;em&gt;Pages/Books/Index.cshtml，&lt;/em&gt;在Visual Studio  2017中使用鼠标左键双击打开 页面，代码如下:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@page
@model RazorMvcBooks.Pages.Books.IndexModel

@{
    ViewData[&quot;Title&quot;] = &quot;Index&quot;;
}

&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Index&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;asp-page&lt;/span&gt;&lt;span&gt;=&quot;Create&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Create New&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;table&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    @Html.DisplayNameFor(model =&amp;gt; model.Book[0].Name)
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    @Html.DisplayNameFor(model =&amp;gt; model.Book[0].ReleaseDate)
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    @Html.DisplayNameFor(model =&amp;gt; model.Book[0].Author)
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    @Html.DisplayNameFor(model =&amp;gt; model.Book[0].Price)
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
@foreach (var item in Model.Book) {
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                @Html.DisplayFor(modelItem =&amp;gt; item.Name)
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                @Html.DisplayFor(modelItem =&amp;gt; item.ReleaseDate)
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                @Html.DisplayFor(modelItem =&amp;gt; item.Author)
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                @Html.DisplayFor(modelItem =&amp;gt; item.Price)
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;asp-page&lt;/span&gt;&lt;span&gt;=&quot;./Edit&quot;&lt;/span&gt;&lt;span&gt; asp-route-id&lt;/span&gt;&lt;span&gt;=&quot;@item.ID&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Edit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; |
                &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;asp-page&lt;/span&gt;&lt;span&gt;=&quot;./Details&quot;&lt;/span&gt;&lt;span&gt; asp-route-id&lt;/span&gt;&lt;span&gt;=&quot;@item.ID&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Details&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; |
                &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;asp-page&lt;/span&gt;&lt;span&gt;=&quot;./Delete&quot;&lt;/span&gt;&lt;span&gt; asp-route-id&lt;/span&gt;&lt;span&gt;=&quot;@item.ID&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Delete&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;        Razor指令可以根据规则从 HTML 转换为 C# 或 Razor 特定标记。 当在 @ 符号后跟 Razor 保留关键字时，它会转换为 Razor 特定标记，如果不是Razor保留关键字，则会转换为 C#。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;         @page Razor 指令将文件转换为一个 MVC 操作，这意味着它可以处理请求。 @page 必须是页面上的第一个 Razor 指令。 @page 是转换成 Razor 特定标记的一个示例。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;          请查看下列HTML助手中使用的lambda表达式：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
   @Html.DisplayNameFor(model =&amp;gt; model.Book[0].Name)
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;            DisplayNameFor HTML辅助助手检查 Lambda 表达式中引用的Name属性来确定显示名称。 Lambda表达式是检查而不是求值。 这意味着当 model、model.Book 或 model.Book[0] 为 null 或为空时，不会存在任何访问冲突。 当使用Html辅助助手取值辅助方法对 Lambda 表达式取值（例如，使用 @Html.DisplayFor(modelItem =&amp;gt; item.Title)），将取得该实体的属性值。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;       @model指令&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@page
@model RazorMvcBooks.Pages.Books.IndexModel&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;            @model 指令指定传递给 Razor 页面的实体类型。在上面的示例中，@model 使 PageModel 派生的类IndexModel可用于 Razor 页面。 在页面上通过 @Html.DisplayNameFor 和 @Html.DisplayName HTML 辅助助手使用该实体。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;ViewData 和布局&lt;/span&gt;&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;           首先，我们看一下下面的布局代码:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@page
@model RazorMvcBooks.Pages.Books.IndexModel

@{
    ViewData[&quot;Title&quot;] = &quot;Index&quot;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;           上面的代码就是 Razor 代码转换为 C# 的一个示例。 大括号“{ }” 字符括住 C# 代码块。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;             PageModel 基类具有 ViewData 字典属性，可用于添加要传递到某个视图的数据。 可以使用键/值模式将对象添加到 ViewData 字典。 在上面的示例中，“Title”属性被添加到 ViewData 字典中。 “Title”属性的在 Pages/_Layout.cshtml 文件中使用。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;               你可以在Visual Studio 2017中打开 位于 Pages/_Layout.cshtml 文件，我们来看看这个文件中的前几行，便可以发现 “Title”的使用。代码如下。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@ViewData[&quot;Title&quot;] - RazorMvcBooks&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environment &lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;=&quot;Development&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;~/lib/bootstrap/dist/css/bootstrap.css&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;~/css/site.css&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; 

    @*Markup removed for brevity.*@

&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;          &lt;span&gt;行 @*Markup removed for brevity.*@ 为 Razor 注释。 与 HTML 注释不同 (&lt;span&gt;&amp;lt;!-- &lt;span&gt;--&amp;gt;)，Razor 注释不会发送到客户端。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;           在Visual Studio 2017 中按F5运行应用程序，在浏览器测试项目中的链接（Home、About、Contact、Create、Edit和Delete）。你会发现在浏览器中每个页面的标题都是一样的。当您将某个页面添加到书签时，标题用于这个书签。 Pages/Index.cshtml 和 Pages/Books/Index.cshtml 当前具有相同的标题，但可以修改它们以具有不同的值。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;            &lt;span&gt;我们可以在Visual Studio 2017中打开 位于 &lt;/span&gt; Pages/_ViewStart.cshtml 文件，查看其中的 Layout 属性，如下代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@{
    Layout = &quot;_Layout&quot;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;             上面的标记将所有 Razor 页面的布局设置为 Pages 文件夹下的 Pages/_Layout.cshtml所定义的布局。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;strong&gt; 修改布局&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;          第一步，我们要使用“书籍管理系统”来替换 Pages/_Layout.cshtml 文件中的 &amp;lt;title&amp;gt; 元素中的RazorMvcBooks字符串。如下代码。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@ViewData[&quot;Title&quot;] – 书籍管理系统&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;       第二步，在 Pages/_Layout.cshtml 文件中的找到以下数据信息：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;asp-page&lt;/span&gt;&lt;span&gt;=&quot;/Index&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;navbar-brand&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;RazorMvcBooks&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;          将上面的数据信息替换为以下数据信息：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;asp-page&lt;/span&gt;&lt;span&gt;=&quot;/Books/Index&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;navbar-brand&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;书籍管理系统&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;        上面的&amp;lt;a&amp;gt;元素是一个标记辅助助手。此处它是&amp;lt;a&amp;gt;标记辅助助手。asp-page=&quot;/Books/Index&quot; 标记辅助助手属性和值可以用来创建指向 /Books/Index  Razor 页面的链接。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;           保存所做的修改，在Visual Studio 2017中按F5运行程序，在浏览器中通过单击“书籍管理系统”链接测试应用，如下图。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/10343/201804/10343-20180404144600001-1140420259.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 04 Apr 2018 06:47:00 +0000</pubDate>
<dc:creator>DotNet菜园</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chillsrc/p/8717199.html</dc:identifier>
</item>
<item>
<title>［Redis源码阅读］redis持久化 - hoohack</title>
<link>http://www.cnblogs.com/hoohack/p/8716910.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hoohack/p/8716910.html</guid>
<description>&lt;p&gt;作为web开发的一员，相信大家的面试经历里少不了会遇到这个问题：redis是怎么做持久化的？&lt;/p&gt;
&lt;p&gt;不急着给出答案，先停下来思考一下，然后再看看下面的介绍。希望看了这边文章后，你能够回答这个问题。&lt;/p&gt;
&lt;h2 id=&quot;为什么需要持久化&quot;&gt;为什么需要持久化？&lt;/h2&gt;
&lt;p&gt;由于Redis是一种内存型数据库，即服务器在运行时，系统为其分配了一部分内存存储数据，一旦服务器挂了，或者突然宕机了，那么数据库里面的数据将会丢失，为了使服务器即使突然关机也能保存数据，必须通过持久化的方式将数据从内存保存到磁盘中。&lt;/p&gt;
&lt;p&gt;对于进行持久化的程序来说，数据从程序写到计算机的磁盘的流程如下：&lt;/p&gt;
&lt;p&gt;1、客户端发送一个写指令给数据库（此时数据在客户端的内存）&lt;/p&gt;
&lt;p&gt;2、数据库接收到写的指令以及数据（数据此时在服务端的内存）&lt;/p&gt;
&lt;p&gt;3、数据库发起一个系统调用，把数据写到磁盘（此时数据在内核的内存）&lt;/p&gt;
&lt;p&gt;4、操作系统把数据传输到磁盘控制器（数据此时在磁盘缓存中）&lt;/p&gt;
&lt;p&gt;5、磁盘控制器执行真正写入数据到物理媒介的操作（如磁盘）&lt;/p&gt;
&lt;p&gt;如果只是考虑数据库层面，数据在第三阶段之后就安全了，在这个时候，系统调用已经发起了，即使数据库进程奔溃了，系统调用会继续进行，也能顺利将数据写入到磁盘中。&lt;br/&gt;在这一步之后，在第4步内核会将数据从内核缓存保存到磁盘缓存中，但为了系统的效率问题，默认情况下不会太频繁地执行这个动作，大概会在30s执行一次，这就意味着如果这一步失败了或者就在进行这一步的时候服务器突然关机了，那么就可能会有30s的数据丢失了，这种比较普通的灾难性问题也是需要考虑的。&lt;/p&gt;
&lt;p&gt;POSIX API也提供了一个系统调用让内核强制将缓存数据写入到磁盘中，比较常见的就是fsync系统调用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int fsync(int fd);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;fsync函数只对由文件描述符fd指定的一个文件起作用，并且等待写磁盘操作结束后才返回。每次调用fsync时，会初始化一个写操作，然后把缓冲区的数据写入到磁盘中。fsync()函数在完成写操作的时候会阻塞进程，如果其他线程也在写同一个文件，它也会阻塞其他线程，直到完成写操作。&lt;/p&gt;
&lt;h2 id=&quot;持久化&quot;&gt;持久化&lt;/h2&gt;
&lt;p&gt;持久化是将程序数据在持久状态和瞬时状态间转换的机制。对于程序来说，程序运行中数据是在内存的，如果没有及时同步写入到磁盘，那么一旦断电或者程序突然奔溃，数据就会丢失了，只有把数据及时同步到磁盘，数据才能永久保存，不会因为宕机影像数据的有效性。而持久化就是将数据从程序同步到磁盘的一个动作过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7u2eqw.com1.z0.glb.clouddn.com/%E6%8C%81%E4%B9%85%E5%8C%96.png&quot; alt=&quot;持久化&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;redis的持久化&quot;&gt;Redis的持久化&lt;/h2&gt;
&lt;p&gt;redis有RDB和AOF两种持久化方式。RDB是快照文件的方式，redis通过执行SAVE/BGSAVE命令，执行数据的备份，将redis当前的数据保存到&lt;code&gt;*.rdb&lt;/code&gt;文件中，文件保存了所有的数据集合。AOF是服务器通过读取配置，在指定的时间里，追加redis写操作的命令到&lt;code&gt;*.aof&lt;/code&gt;文件中，是一种增量的持久化方式。&lt;/p&gt;
&lt;h3 id=&quot;rdb&quot;&gt;RDB&lt;/h3&gt;
&lt;p&gt;RDB文件通过SAVE或BGSAVE命令实现。&lt;br/&gt;SAVE命令会阻塞Redis服务进程，直到RDB文件创建完成为止。&lt;br/&gt;BGSAVE命令通过fork子进程，有子进程来进行创建RDB文件，父进程和子进程共享数据段，父进程继续提供读写服务，子进程实现备份功能。BGSAVE阶段只有在需要修改共享数据段的时候才进行拷贝，也就是COW（Copy On Write）。SAVE创建RDB文件可以通过设置多个保存条件，只要其中一个条件满足，就可以在后台执行SAVE操作。&lt;/p&gt;
&lt;p&gt;SAVE和BGSAVE命令的实现代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void saveCommand(client *c) {
    // BGSAVE执行时不能执行SAVE
    if (server.rdb_child_pid != -1) {
        addReplyError(c,&quot;Background save already in progress&quot;);
        return;
    }
    rdbSaveInfo rsi, *rsiptr;
    rsiptr = rdbPopulateSaveInfo(&amp;amp;rsi);
    // 调用rdbSave函数执行备份（阻塞当前客户端）
    if (rdbSave(server.rdb_filename,rsiptr) == C_OK) {
        addReply(c,shared.ok);
    } else {
        addReply(c,shared.err);
    }
}

/*
* BGSAVE 命令实现 [可选参数&quot;schedule&quot;]
*/
void bgsaveCommand(client *c) {
    int schedule = 0;

    /* 当AOF正在执行时，SCHEDULE参数修改BGSAVE的效果
    * BGSAVE会在之后执行，而不是报错
    * 可以理解为：BGSAVE被提上日程
    */
    if (c-&amp;gt;argc &amp;gt; 1) {
        // 参数只能是&quot;schedule&quot;
        if (c-&amp;gt;argc == 2 &amp;amp;&amp;amp; !strcasecmp(c-&amp;gt;argv[1]-&amp;gt;ptr,&quot;schedule&quot;)) {
            schedule = 1;
        } else {
            addReply(c,shared.syntaxerr);
            return;
        }
    }

    // BGSAVE正在执行，不操作
    if (server.rdb_child_pid != -1) {
        addReplyError(c,&quot;Background save already in progress&quot;);
    } else if (server.aof_child_pid != -1) {
        // aof正在执行，如果schedule==1，BGSAVE被提上日程
        if (schedule) {
            server.rdb_bgsave_scheduled = 1;
            addReplyStatus(c,&quot;Background saving scheduled&quot;);
        } else {
            addReplyError(c,
            &quot;An AOF log rewriting in progress: can't BGSAVE right now. &quot;
            &quot;Use BGSAVE SCHEDULE in order to schedule a BGSAVE whenever &quot;
            &quot;possible.&quot;);
        }
    } else if (rdbSaveBackground(server.rdb_filename,NULL) == C_OK) {// 否则调用rdbSaveBackground执行备份操作
        addReplyStatus(c,&quot;Background saving started&quot;);
    } else {
        addReply(c,shared.err);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;有了RDB文件之后，如果服务器关机了，或者需要新增一个服务器，重新启动数据库服务器之后，就可以通过载入RDB文件恢复之前备份的数据。&lt;br/&gt;但是bgsave会耗费较长时间，不够实时，会导致在停机的时候丢失大量数据。&lt;/p&gt;
&lt;h3 id=&quot;aofappend-only-file&quot;&gt;AOF（Append Only File）&lt;/h3&gt;
&lt;p&gt;RDB文件保存的是数据库的键值对数据，AOF保存的是数据库执行的写命令。&lt;/p&gt;
&lt;p&gt;AOF的实现流程有三步：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;append-&amp;gt;write-&amp;gt;fsync&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;append追加命令到AOF缓冲区，write将缓冲区的内容写入到程序缓冲区，fsync将程序缓冲区的内容写入到文件。&lt;br/&gt;当AOF持久化功能处于开启状态时，服务器每执行完一个命令，就会将命令以协议格式追加写入到redisServer结构体的aof_buf缓冲区，具体的协议这里不展开阐述。&lt;/p&gt;
&lt;p&gt;AOF的持久化发生时期有个配置选项：appendfsync。该选项有三个值：&lt;br/&gt;always：所有内容写入并同步到aof文件&lt;br/&gt;everysec：将aof_buf缓冲区的内容写入到AOF文件，如果距离上次同步AOF文件的&lt;br/&gt;no：将aof_buf缓冲区中的所有内容写入到AOF文件，但并不对AOF文件进行同步，由操作系统决定何时进行同步，一般是默认情况下的30s。&lt;/p&gt;
&lt;p&gt;AOF持久化模式每个写命令都会追加到AOF文件，随着服务器不断运行，AOF文件会越来越大，为了避免AOF产生的文件太大，服务器会对AOF文件进行重写，将操作相同key的相同命令合并，从而减少文件的大小。&lt;/p&gt;
&lt;p&gt;举个例子，要保存一个员工的名字、性别等信息：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; hset employee_12345 name &quot;hoohack&quot;
&amp;gt; hset employee_12345 good_at &quot;php&quot;
&amp;gt; hset employee_12345 gender &quot;male&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;只是录入这个哈希键的状态，AOF文件就需要保存三条命令，如果还有其他，比如删除，或者更新值的操作，那命令将会更多，文件会更大，有了重写后，就可以适当地减少文件的大小。&lt;/p&gt;
&lt;p&gt;AOF重写的实现原理是先服务器中的数据库，然后遍历数据库，找出每个数据库中的所有键对象，获取键值对的键和值，根据键的类型对键值对进行重写。比如上面的例子，可以合并为下面的一条命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; hset employee_12345 name &quot;hoohack&quot; good_at &quot;php&quot; gender &quot;male&quot;。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;AOF的重写会执行大量的写入操作，Redis是单线程的，所以如果有服务器直接调用重写，服务器就不能处理其他命令了，因此Redis服务器新起了单独一个进程来执行AOF重写。&lt;/p&gt;
&lt;p&gt;Redis执行重写的流程：&lt;br/&gt;&lt;img src=&quot;http://7u2eqw.com1.z0.glb.clouddn.com/redis%20rewrite.png&quot; alt=&quot;redis rewrite&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在子进程执行AOF重写时，服务端接收到客户端的命令之后，先执行客户端发来的命令，然后将执行后的写命令追加到AOF缓冲区中，同时将执行后的写命令追加到AOF重写缓冲区中。&lt;br/&gt;等到子进程完成了重写工作后，会发一个完成的信号给服务器，服务器就将AOF重写缓冲区中的所有内容追加到AOF文件中，然后原子性地覆盖现有的AOF文件。&lt;/p&gt;
&lt;h3 id=&quot;rdb和aof的优缺点&quot;&gt;RDB和AOF的优缺点&lt;/h3&gt;
&lt;p&gt;RDB持久化方式可以只通过服务器读取数据就能加载备份中的文件到程序中，而AOF方式必须创建一个伪客户端才能执行。&lt;/p&gt;
&lt;p&gt;RDB的文件较小，保存了某个时间点之前的数据，适合做灾备和主从同步。&lt;/p&gt;
&lt;p&gt;RDB备份耗时较长，如果数据量大，在遇到宕机的情况下，可能会丢失部分数据。另外，RDB是通过配置使达到某种条件的时候才执行，如果在这段时间内宕机，那么这部分数据也会丢失。&lt;/p&gt;
&lt;p&gt;AOF方式，在相同数据集的情况下，文件大小会比RDB方式的大。&lt;/p&gt;
&lt;p&gt;AOF的持久化方式也是通过配置的不同，默认配置的是每秒同步，最快的模式是同步每一个命令，最坏的方式是等待系统执行fsync将缓冲同步到磁盘文件中，大部分操作系统是30s。通常情况下会配置为每秒同步一次，所以最多会有1s的数据丢失。&lt;/p&gt;
&lt;h3 id=&quot;怎样的同步方式更好&quot;&gt;怎样的同步方式更好？&lt;/h3&gt;
&lt;p&gt;RDB和AOF方式结合。起一个定时任务，每小时备份一份服务器当前状态的数据，以日期和小时命名，另外起一个定时任务，定时删除无效的备份文件（比如48小时之前）。AOF配置为1s一次。这样一来，最多会丢失1s的数据，同时如果redis发生雪崩，也能迅速恢复为前一天的状态，不至于停止服务。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;Redis的持久化方案也不是一成不变的，纸上的理论还需要结合实践成果来证明其可行性。&lt;/p&gt;
&lt;p&gt;原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。&lt;/p&gt;
&lt;p&gt;更多精彩内容，请关注个人公众号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7u2eqw.com1.z0.glb.clouddn.com/qrcode_for_gh_4906075ba3ae_258.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考文章：&lt;br/&gt;&lt;a href=&quot;http://oldblog.antirez.com/post/redis-persistence-demystified.html&quot; class=&quot;uri&quot;&gt;http://oldblog.antirez.com/post/redis-persistence-demystified.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/&quot; class=&quot;uri&quot;&gt;http://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 04 Apr 2018 05:58:00 +0000</pubDate>
<dc:creator>hoohack</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hoohack/p/8716910.html</dc:identifier>
</item>
<item>
<title>数据监听进阶 - 出世Sunny</title>
<link>http://www.cnblogs.com/grey-zhou/p/8716801.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/grey-zhou/p/8716801.html</guid>
<description>&lt;h4 id=&quot;嵌套监听&quot;&gt;嵌套监听&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;简单的数据监听我们已经了解怎么做了，但如果属性也是个对象，我们希望它也能被监听呢？显然我们需要做循环判断了。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt;  test &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;  
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;keys&lt;/span&gt;(obj).&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; obj[key]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;defineProperty&lt;/span&gt;(obj&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;,{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; val&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;set&lt;/span&gt;(newVal)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; newVal&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`你修改了 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;key&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; newObj &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; val&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;keys&lt;/span&gt;(newObj).&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
      ...
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把重复操作部分抽离出来变成递归函数&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;define&lt;/span&gt;(obj&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;defineProperty&lt;/span&gt;(obj&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;,{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; val&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;set&lt;/span&gt;(newVal)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; newVal&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`你修改了 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;key&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;watch&lt;/span&gt;(obj)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;keys&lt;/span&gt;(obj).&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; obj[key]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;define&lt;/span&gt;(obj&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;watch&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;watch&lt;/span&gt;(test)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们已经可以做到监听深层对象了，但是如果我们修改某个属性为对象，比如&lt;code&gt;test.a = {a:7,b:9}&lt;/code&gt;，我们可以监听到&lt;code&gt;test.a&lt;/code&gt;的改变，但我们没法监听&lt;code&gt;{a:7,b:9}&lt;/code&gt;，所以上面的代码还需要强化一下。&lt;br/&gt;我们只需要在&lt;code&gt;set&lt;/code&gt;时，进行一次判断即可。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;define&lt;/span&gt;(obj&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;defineProperty&lt;/span&gt;(obj&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;,{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; val&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;set&lt;/span&gt;(newVal)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; newVal&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`你修改了 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;key&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)
      &lt;span class=&quot;co&quot;&gt;//添加了下面的代码&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;watch&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到了这一步，一个对象的完整监听算是建立起来了。&lt;br/&gt;接下来，我们需要解决一个核心的问题，&lt;strong&gt;监听对象变化，触发回调函数&lt;/strong&gt;&lt;br/&gt;这个才是我们监听对象的根本目的，我们要能添加自己的功能函数进去，而不是写死的&lt;code&gt;console&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;watch的实现&quot;&gt;$watch的实现&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;如果想要塞功能函数进去，显然我们还需要继续封装，因为至少我们要有存储功能函数的位置,还要有存储监听对象的位置，还得提供一个&lt;code&gt;$watch&lt;/code&gt;方法来添加功能函数&lt;br/&gt;所以大概样子应该是这样的&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Observer&lt;/span&gt;(obj)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//存监听对象&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;func_list&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//存功能函数&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Observer&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$watch&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//添加功能函数属于公共方法&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正好我们前面抽离封装成了函数，只要组合一下即可&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Observer&lt;/span&gt;(obj)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//存监听对象&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;func_list&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//存功能函数&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;watch&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Observer&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$watch&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//添加功能函数属于公共方法&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来我们考虑一下&lt;code&gt;$watch&lt;/code&gt;函数怎么写，正常的监听大概是这样的，字面理解就是当&lt;code&gt;属性age&lt;/code&gt;发生变化时，执行回调函数&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; app &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Observer&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'big white'&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$watch&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(newVal)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`年龄已经更新，现在是&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;newVal&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;岁`&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那对我们内部实现来说，我们需要维护一个跟属性相关的回调数组，并且在对应属性发生变化时，挨个调用这个数组内的函数。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Observer&lt;/span&gt;(obj)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//存监听对象&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{};&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//这里改动了&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;watch&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//后面解释为什么使用call&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Observer&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$watch&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;func)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//添加功能函数属于公共方法&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; arr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;func&lt;/span&gt;[key] &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;func&lt;/span&gt;[key] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//没有对应数组就创建个空的&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(func)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; 

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;execute&lt;/span&gt;(arr)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//执行功能函数数组&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fun of arr)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;fun&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那我们现在把所有的代码整合一下&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;judge&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//监听判断&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Observer&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;execute&lt;/span&gt;(arr&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//执行功能函数数组&lt;/span&gt;
    arr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; arr &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; []&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fun of arr)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;fun&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;watch&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//监听对象&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;[key]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;define&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;judge&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;define&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; Fun &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//拿到回调对象&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;,{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; val&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;set&lt;/span&gt;(newVal)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; newVal&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`你修改了 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;key&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)
      &lt;span class=&quot;at&quot;&gt;judge&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;execute&lt;/span&gt;(Fun[key]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Observer&lt;/span&gt;(obj)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//存监听对象&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{};&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//这里改动了&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;watch&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//后面解释为什么使用call&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Observer&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$watch&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;func)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//添加功能函数属于公共方法&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; arr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;func&lt;/span&gt;[key] &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;func&lt;/span&gt;[key] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//没有对应数组就创建个空的&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(func)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在代码已经跑通，我们可以任意添加监听的回调了，不过有几个点还是要单独说一下。&lt;br/&gt;首先解释下为什么&lt;code&gt;watch&lt;/code&gt;这个监听函数要使用&lt;code&gt;call&lt;/code&gt;来调用，原因很简单，因为&lt;code&gt;watch&lt;/code&gt;函数内部是要访问对象实例的，虽说放到私有方法或者原型上也能访问到对象实例，但是我们其实并不希望暴露一个内部实现的方法，所以使用&lt;code&gt;call&lt;/code&gt;既可以绑定到对象实例，又能避免被暴露出去。&lt;code&gt;define&lt;/code&gt;函数也是同理。&lt;br/&gt;然后第二个需要解释的是&lt;code&gt;define&lt;/code&gt;函数内的这一句 &lt;code&gt;let Fun = this.func;&lt;/code&gt;。其实最早我写的时候时候是直接&lt;code&gt;let arr = this.func[key]&lt;/code&gt;，流程一切正常，但是无法执行回调数组。后来我意识到，&lt;code&gt;define&lt;/code&gt;函数很早就执行了，且只执行一次，那个时候我们没有调用过&lt;code&gt;$watch&lt;/code&gt;，理所当然的&lt;code&gt;arr&lt;/code&gt;当然为undefined，且永远为undefined。所以外部必须获取引用类型的&lt;code&gt;this.func&lt;/code&gt;，即&lt;code&gt;let Fun = this.func;&lt;/code&gt;数组的获取只能放到&lt;code&gt;set函数&lt;/code&gt;内部，这样可以保证，每次&lt;code&gt;execute&lt;/code&gt;我们都做了一次回调数组的获取。&lt;/p&gt;
&lt;p&gt;ok，简单监听已经实现完毕，我们调整下代码结构和名称，比如&lt;code&gt;this.func&lt;/code&gt;改为&lt;code&gt;this.events&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; Observer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;judge&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//监听判断&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Observer&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;execute&lt;/span&gt;(arr&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//执行功能函数数组&lt;/span&gt;
        arr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; arr &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; []&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fun of arr)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;fun&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;_watch&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//监听对象&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;[key]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;_define&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;judge&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;_define&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; Event &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//拿到回调对象&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;,{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; val&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;set&lt;/span&gt;(newVal)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; newVal&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;//console.log(`你修改了 ${key}`)&lt;/span&gt;
          &lt;span class=&quot;at&quot;&gt;judge&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;at&quot;&gt;execute&lt;/span&gt;(Event[key]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; constructor &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(obj)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//存监听对象&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{};&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//回调函数对象&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;_watch&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;constructor&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$watch&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;func)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//注册监听事件&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; arr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;events&lt;/span&gt;[key] &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;events&lt;/span&gt;[key] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//没有对应数组就创建个空的&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(func)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; 
    
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; constructor&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;再进一步&quot;&gt;再进一步&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;上面我们实现了&lt;code&gt;$watch&lt;/code&gt;，但是也仅仅是监听简单属性，如&lt;code&gt;a&lt;/code&gt;，面对如&lt;code&gt;a.b&lt;/code&gt;这种形式则毫无办法。&lt;br/&gt;同理，假如&lt;code&gt;a&lt;/code&gt;属性是个对象，当&lt;code&gt;a.b&lt;/code&gt;发生变化时，也不会触发&lt;code&gt;a&lt;/code&gt;变化的回调函数。&lt;br/&gt;也就是说我们的&lt;code&gt;$watch&lt;/code&gt;还停留在简单的一层对象上，数据的变化没有办法传递。&lt;/p&gt;
&lt;p&gt;通过观察其实我们可以发现，无论是正向监听&lt;code&gt;a.b&lt;/code&gt;，还是&lt;code&gt;a.b&lt;/code&gt;的改变要触发&lt;code&gt;a&lt;/code&gt;的监听回调函数，逃不过去的东西就是一个层级，或者我们换个词&lt;code&gt;path&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们的&lt;code&gt;judge&lt;/code&gt;函数是监听深层对象的关键&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;judge&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//监听判断&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Observer&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显然，目前虽然完成了监听，却没有和外层对象产生联系，当我们&lt;code&gt;new Observer()&lt;/code&gt;的时候，我们并不清楚这个新造的对象是根对象还是子对象，所以新建对象的时候应该把子对象在根对象的路径&lt;strong&gt;&lt;code&gt;path&lt;/code&gt;&lt;/strong&gt; 传进去。&lt;br/&gt;如果是根对象，那说明没有&lt;code&gt;path&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; Observer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    ...
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; constructor &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(obj&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;path)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{};&lt;/span&gt;  
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; path&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//将path存在对象内部&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;_watch&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; constructor&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样&lt;code&gt;_define&lt;/code&gt;和&lt;code&gt;_watch&lt;/code&gt;函数内部都能拿到&lt;code&gt;path&lt;/code&gt;，&lt;code&gt;judge&lt;/code&gt;函数也能正确调用&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;judge&lt;/span&gt;(val&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;path)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//监听判断&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Observer&lt;/span&gt;(val&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;path)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;既然有了路径，当&lt;code&gt;a.b&lt;/code&gt;改变时，我们除了可以拿到&lt;code&gt;b&lt;/code&gt;这个属性名(&lt;code&gt;key&lt;/code&gt;)，还能拿到&lt;code&gt;a&lt;/code&gt;这个&lt;code&gt;path&lt;/code&gt;，而我们注册事件的属性名就是&lt;code&gt;a.b&lt;/code&gt;，换句话说当触发更改时，我们只要&lt;code&gt;execute(Event[path + '.' + key],val)&lt;/code&gt;即可。&lt;br/&gt;那么接下来只有一个问题：&lt;code&gt;Event&lt;/code&gt;不是同一个。&lt;br/&gt;解决这个问题也很简单，让所有子对象跟根对象共用一个&lt;code&gt;Event&lt;/code&gt;对象即可&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; Observer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;judge&lt;/span&gt;(val&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;path&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;Event)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//又多了个参数  Event&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Observer&lt;/span&gt;(val&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;path&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;Event)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;_define&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; Event &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  
      &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; Path &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;key : key&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;,{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; val&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;set&lt;/span&gt;(newVal)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(newVal &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
          val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; newVal&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;at&quot;&gt;judge&lt;/span&gt;(val&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;_this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;Event)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;at&quot;&gt;execute&lt;/span&gt;(Event[Path]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ...
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; constructor &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(obj&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;path&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;Event)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//又多了个参数  Event&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Event&lt;span class=&quot;op&quot;&gt;?&lt;/span&gt;Event:&lt;span class=&quot;op&quot;&gt;{};&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;//大家共用根组件的Event对象  &lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; path&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//将path存在对象内部&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;_watch&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; constructor&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上，我们就解决了第一个问题，&lt;code&gt;$watch&lt;/code&gt;可以监听&lt;code&gt;a.b.c&lt;/code&gt;的值了。&lt;br/&gt;仔细一想，第二个问题其实也已经解决了，因为我们现在共用一个&lt;code&gt;Event&lt;/code&gt;对象，&lt;code&gt;a.b.c&lt;/code&gt;改变了，我们只要依次触发&lt;code&gt;a.b&lt;/code&gt;的回调函数，&lt;code&gt;a&lt;/code&gt;的回调函数即可。而&lt;code&gt;a.b.c&lt;/code&gt;这个&lt;code&gt;path&lt;/code&gt;，已经在我们手上了，所以只要改造下&lt;code&gt;execute&lt;/code&gt;函数，就能满足所有需求&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;execute&lt;/span&gt;(Event&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;path&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//参数改变&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; path_arr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    path_arr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path_arr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;reduce&lt;/span&gt;((arr&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;index)&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//获得 a  a.b  a.b.c  数组&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; arr[index &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; arr[index&lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;key : key&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; arr&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;[])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path_arr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;--&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//倒序调用  先触发a.b.c  再触发a.b&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; funs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Event[path_arr[i]] &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; []&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(i &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path_arr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fun of funs)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;fun&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//直接被改变的属性可以拿到新值&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fun of funs)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;fun&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完整代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; Observer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;judge&lt;/span&gt;(val&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;path&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;Event)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//监听判断&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Observer&lt;/span&gt;(val&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;path&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;Event)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;execute&lt;/span&gt;(Event&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;path&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//执行监听回调&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; path_arr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        path_arr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path_arr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;reduce&lt;/span&gt;((arr&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;index)&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//获得 a  a.b  a.b.c  数组&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; arr[index &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; arr[index&lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;key : key&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; arr&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;[])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path_arr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;--&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//倒序调用  先触发a.b.c  再触发a.b&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; funs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Event[path_arr[i]] &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; []&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(i &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path_arr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fun of funs)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;fun&lt;/span&gt;(val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//直接被改变的属性可以拿到新值&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;  
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fun of funs)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;fun&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;_watch&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//监听对象&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;[key]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; Path &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;key : key&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;_define&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;Path)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;judge&lt;/span&gt;(val&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;Path&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;events&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;_define&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;Path)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; Event &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; 
        &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;,{&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; val&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;set&lt;/span&gt;(newVal)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(newVal &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; newVal&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;judge&lt;/span&gt;(val&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;Path&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;Event)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;execute&lt;/span&gt;(Event&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;Path&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
             &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; constructor &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(obj&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;path&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;Event)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Event&lt;span class=&quot;op&quot;&gt;?&lt;/span&gt;Event:&lt;span class=&quot;op&quot;&gt;{};&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;//大家共用根组件的Event对象  &lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; path&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//将path存在对象内部&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;_watch&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;constructor&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$watch&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;func)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//注册监听事件&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; arr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;events&lt;/span&gt;[key] &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;events&lt;/span&gt;[key] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//没有对应数组就创建个空的&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(func)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; 
    
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; constructor&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然，代码还有继续优化的空间，不过目前已经能实现了我们所有的需求，至此，一个监听对象才算真正建立起来。&lt;/p&gt;
</description>
<pubDate>Wed, 04 Apr 2018 05:40:00 +0000</pubDate>
<dc:creator>出世Sunny</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/grey-zhou/p/8716801.html</dc:identifier>
</item>
<item>
<title>SQLite 带你入门 - 陈本布衣</title>
<link>http://www.cnblogs.com/chenbenbuyi/p/8620750.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenbenbuyi/p/8620750.html</guid>
<description>&lt;p&gt;　　&lt;span&gt;SQLite数据库相较于我们常用的Mysql,Oracle而言，实在是轻量得不行&lt;span&gt;&lt;span&gt;（最低只占几百K的内存）&lt;/span&gt;&lt;/span&gt;。平时开发或生产环境中使用各种类型的数据库，可能都需要先安装数据库服务（server）,然后才能通过代码、命令行或者客户端工具来操作数据库，但是&lt;span&gt;SQLite却有点别具一格，它是一个&lt;strong&gt;文件型&lt;/strong&gt;的关系数据库，完全不用你安装，也不需要任何的配置或依赖，去官网下载编译好的二进制文件解压就可以使用——&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;第一次使用时，同事直接拷给我一个文件，说这就是SQLite了，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;我擦嘞还惊了一下，竟然直接对着文件就能执行CRUD命令，这完全刷新了我对数据库的认知。而&lt;/span&gt;&lt;span&gt;它的&lt;a href=&quot;http://www.sqlite.com&quot; target=&quot;_blank&quot;&gt;官网&lt;/a&gt;/&lt;a href=&quot;http://www.sqlite.com/whentouse.html&quot;&gt;When to use SQLite&lt;/a&gt;也说得特别明确：SQLite is not directly comparable to client/server SQL database engines such as MySQL, Oracle, or SQL Server since SQLite is trying to solve a different problem。是的，它的出现并不是为了和 &lt;span&gt;Mysql,Oracle&lt;/span&gt;等数据库竞争，而是为了解决不同的问题；那么哪些场景适合使用SQLite,哪些场景又适合client/server型数据库呢？博主本来也想问度娘的，但是发现官网中就有最最合适的解释：&lt;a href=&quot;http://www.sqlite.org/whentouse.html&quot; target=&quot;_blank&quot;&gt;Client/server SQL database engines strive to implement a shared repository of enterprise data; SQLite strives to provide local data storage for individual applications and devices&lt;/a&gt;。意译过来就是说，client/server型的数据库适合于共享数据的存储—— 一个server端存储数据，N个客户端都可以对数据进行CRUD的操作；而SQLite就完全是一种本地化的文件存储，加之其非常的轻量，特别适合个人应用和设备，所以，你会发现SQLite在嵌入式设备开发比如移动开发中应用得非常广泛&lt;/span&gt;&lt;span&gt;。博主虽然不是做嵌入式开发的，但是用了一下SQLite发现特别小巧好用，建议大家如果应用程序是并发量不是特别高本地应用，完全可以尝试使用SQLite这种轻量的数据库来代替，也省去了安装繁重的数据库服务对系统资源的占用。好了，现在正式切入正题，跟着布衣博主一起来尝试使用&lt;span&gt;SQLite&lt;/span&gt;的一些简单招式——&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;&lt;span&gt;库文件下载&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　要使用&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SQLite数据库，如果没有好同事拷贝给你，就自己去官网下吧。点击&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;http://www.sqlite.org/download.html&quot; target=&quot;_blank&quot;&gt;官网下载页&lt;/a&gt;就可以下载最新的SQLite版本（&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SQLite&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;3），页面也给出了针对不同平台的下载版本——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1231169/201803/1231169-20180328222911283-1984586199.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;对于Windows 64位操作系统,&lt;/span&gt;&lt;span&gt;网上的一些教程都是说要把图中的 &lt;strong&gt;1 、2&lt;/strong&gt; 一起下载解压在同一个文件，但是博主不太喜欢盲从，喜欢琢磨原因，一番尝试后发现，其实只需要下载工具压缩包 &lt;strong&gt;2&lt;/strong&gt; 就可以进行正常的数据库操作了，而对于 &lt;strong&gt;1&lt;/strong&gt; 中动态链接库文件的作用，博主也始终没搞明白，&lt;strong&gt;在此还望常用Sqlite的高人能指点一二&lt;/strong&gt;，博主感激不尽！！！&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;数据库连接&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;　　① 命令行&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;　　上图中 &lt;span&gt;1 下载的压缩包解压后会有三个文件可执行文件 sqldiff.exe、sqlite3.exe和sqlite3_analyzer.exe，开启cmd切换到解压目录，就可以直接通过sqlite3执行SQL命令来操作数据库。这里要注意，如果直接双击&lt;span&gt;&lt;span&gt;sqlite3打开命令行执行后续命令往往是没有效果的，博主一番尝试也无解；有效的方式是切换到该目录后以 &lt;span&gt;&lt;span&gt;&lt;strong&gt;sqlite3 + 数据库名&lt;/strong&gt; 的方式开始令行，如果数据库存在就会直接使用，不存在就会创建一个新的数据库&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1231169/201804/1231169-20180402080811668-1666394900.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;需要说明的是，博主尝试后发现创建的数据库名可以是任意的名字，并不一定是.db 结尾，只不过出于规范化的考量，最好还是加上后缀，这样一看便知是数据库文件&lt;/span&gt;。&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SQLite的命令都是&lt;strong&gt;点命令&lt;/strong&gt;，也就是说都是用 &lt;strong&gt;.&lt;/strong&gt; 开头，并且不以 &lt;strong&gt;；&lt;/strong&gt; 结尾，使用过程中多熟悉一下就习惯了。这里博主也只是简单演示，具体命令行可以 .help 查看或者通过百度、官网渠道查询，博主不赘述。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;　　② 可视化工具&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;　　百度一下，你会发现&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SQLite有一些专门针对性的可视化连接工具，应该都比较好用，博主没有去尝试过，不过使用通用版的Navicat也可以连接&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SQLite，本着工具归一的原则，也就没有必要单独去下载其他连接工具了。建立数据库连接也很简单，不同于其他数据库需要IP、端口以及用户名、密码，&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SQLite&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;只需要找到我们的创建的数据库文件挂载，就相当于连接到相应的数据库了；而新建也很简单，在建库目录下定义好库文件名字就就可以了，下图中1 、2 分别显示了如何连接现有的库文件和创建新的数据库——&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1231169/201804/1231169-20180402233339251-1574015657.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;看似简单，本来无需多言的，但是爱折腾的布衣博主却有个匪夷所思的发现：&lt;strong&gt;使用 Navicat Premium 本进行SQLite的连库和创建新库的过程中，根本不需要依赖自己下载解压的那两个压缩包——新建连接的时候我甚至可以挂载一个txt文件并成功建立起连接，而且能进行正常的数据库SQL操作；创建库的时候我也可以在任意位置创建任意名字、后缀名的数据库，同样能正常SQL操作。这样就有点意思了，也就是说电脑上的一切非目录文件只要你心情好都可以建立连接当成数据库来使用，太腻（bian）害(tai)了吧？博主换了不同的计算机，包括使用Linux系统，尝试过后都是如此，唯一合理的解释就是 &lt;span&gt;Navicat Premium 这厮&lt;/span&gt;本身就内置了SQLite数据库引擎，所以才能直接连接以及创建数据库。&lt;/strong&gt;&lt;span&gt;（其实不管是Windows系统还是Linux系统你都可以在系统用户目录发现&lt;span&gt;&lt;span&gt;Navicat的连接对象文件&lt;/span&gt;&lt;/span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;SQLite 的存储类型&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　学习一个新的数据库，大体从几个方面来了解它——&lt;strong&gt;存储结构、操作语言&lt;/strong&gt;以及支持存储的&lt;strong&gt;数据类型&lt;/strong&gt;。既然&lt;span&gt;SQLite&lt;/span&gt;是一种关系型数据库，那么就支持通用的SQL语言，所以你大可将你深厚的SQL功力运用到SQLite身上愉快的进行你的CRUD操作（当然，一些内置函数和SQL语法还是有所不同）。&lt;strong&gt;&lt;span&gt;SQLite&lt;/span&gt;比较特殊的其实在于它&lt;span&gt;粗放式的数据存储类型，而且并不强制的进行类型约束&lt;/span&gt;，这点和其他关系型数据库有很大的不同。&lt;/strong&gt;如此的结果就是，虽然创建表的时候你指定了某一列应该用什么数据类型，但实际上你是可以胡来的，比如向整型列中插入文本数据，向字符型中插入日期等等（&lt;strong&gt;有个特殊情况就是建表时主键设置若为&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;INTEGER PRIMARY KEY【&lt;/strong&gt;原文&lt;strong&gt;：except an INTEGER PRIMARY KEY column】就只能插入整数，插入其他数据类型会报错&lt;/strong&gt;&lt;/span&gt;）。至于原因，&lt;span&gt;&lt;span&gt;SQLite官网&lt;a href=&quot;http://www.sqlite.org/datatype3.html&quot; target=&quot;_blank&quot;&gt;数据类型页面&lt;/a&gt;中Datatypes In SQLite段讲得很清楚，博主转述过来就是说：传统的关系型数据库采用的是静态数据类型系统，一个字段值的数据类型由存储其值的列容器决定，而&lt;span&gt;&lt;span&gt;&lt;span&gt;SQLite&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;采用更通用的动态数据类型系统，一个字段的数据类型只与其值本身有关，而与存储它的容器无关。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　按照官网描述，&lt;span&gt;SQLite&lt;/span&gt;支持的数据类型分为以下 5 个存储类型：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt; NULL     空值&lt;br/&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt; INTEGER  带符号整型，根据其大小存储在1, 2, 3, 4, 6,或 8 字节中&lt;br/&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt; REAL　　 浮点型，存储为一个 8 字节的IEEE 浮点数&lt;br/&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt; TEXT　　 文本类型 （UTF-8, UTF-16BE 或 UTF-16LE编码格式）&lt;br/&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt; BLOB     全型（布衣博主自己给的称谓），存什么就是什么&lt;br/&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;　　别看只有基本的 5 种存储类型支持，但&lt;span&gt;由于&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SQLite采用的是动态数据类型系统，而且存储类较之普通的数据类型是更加笼统的包含关系，因此能完全兼容&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;其它静态数据类型系统的关系型数据库。但是这种太自由化的存储还是有些问题的，比如一个数据列我同时存了一个 400 整型值和 '500' 的文本类型值，这两个值数据类型不一样，我这么比较？所以，根据&lt;span&gt;&lt;span&gt;&lt;span&gt;SQLite官网的说法，为了最大限度与其他关系型数据库兼容，&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SQLite&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;对数据类型进行了很精巧的设计，就是让数据列具有类型亲和性的特性（其实博主更喜欢某些人翻译的 &lt;strong&gt;类型近似&lt;/strong&gt; 这种叫法）。当我们创建表做字段类型声明的时候，实际上只是表明了该列具有的近似类型，在正式插入数据的时候，&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SQLite引擎&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;才会基于该列的近似类型优先推荐使用 5 种存储类型中的哪一种来存储你的数据——注意是推荐，并不强制，也就是说只要你想要乱搞，&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SQLite&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;也并不会限制你，SQLite是列自由的。所以，建表时字段类型声明的限制在SQLite中是被弱化了的。&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;最新的&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SQLite版本中&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，数据库的每一列都被定义为以下 5 种近似类型的一种，其定义和规则&lt;a href=&quot;http://www.sqlite.org/datatype3.html&quot; target=&quot;_blank&quot;&gt;官网&lt;/a&gt;/Determination Of Column Affinity段中有做出解释：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt; INTEGER  整型，如果声明的字段类型包含字符串“INT”（注意，&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SQLite&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;大多数情况都不区分大小写,下同），那么该字段类型被分配为INTEGER &lt;span&gt;&lt;span&gt;近似类型&lt;/span&gt;&lt;/span&gt;；&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt; TEXT     文本，如果为字段声明的类型中包含了'CHAR'、'CLOB'或'TEXT'，该字段被分配为TEXT亲和性。比如'VARCHAR'包含了'CHAR'，所以被分配为TEXT &lt;span&gt;&lt;span&gt;近似类型&lt;/span&gt;&lt;/span&gt;；&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt; BLOB     无类型,如果为字段声明的类型中包含了'BLOB'，或者没有为该字段声明类型，该字段被分配为BLOB &lt;span&gt;&lt;span&gt;近似类型&lt;/span&gt;&lt;/span&gt;；&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt; REAL     浮点型，&lt;span&gt;&lt;span&gt;如果为字段声明的类型中包含了'REAL'、'FLOA'或'DOUB'，则该字段被分配为REAL &lt;span&gt;&lt;span&gt;近似类型&lt;/span&gt;&lt;/span&gt;；&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; NUMERIC  数值型，除以上情况外的类型，则被分配为NUMERIC &lt;span&gt;&lt;span&gt;近似类型&lt;/span&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://www.sqlite.org/datatype3.html&quot; target=&quot;_blank&quot;&gt;官网&lt;/a&gt;上/Affinity Name Examples段落中有一份表格罗列了传统数据类型作为子集与上述 5 种近似类型如何对应的关系。基于上述近似类型的列叙，可以看出SQLite是&lt;span lang=&quot;en-us&quot;&gt;从声明类型的字符串中去匹配列的近似类型来决定数据的存储类的，因此SQLite很有意思的是创建表时类型声明可以很随意，比如我可以声明一个不存在类型的字符串&lt;span lang=&quot;en-us&quot;&gt;”chenbenbuyi”，但SQLite会根据规则自动识别为NUMERIC的近似类型，并据此近似类型存储我的数据——&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span lang=&quot;en-us&quot;&gt;&lt;span lang=&quot;en-us&quot;&gt;　　　　　　　　　　　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1231169/201804/1231169-20180404081031665-1148029364.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　可能有些人对于上面的数据存储类还是有些疑惑——根据列的近似类型是如何推断数据存入后的最终类型呢？按博主的理解，SQLite在基于类型近似做数据存储转换的时候是有个推荐优先级的。比如上面的声明中，并不存在name声明的数据类型，所以数据库会自动匹配为NUMERIC的近似类型。当文本数据（'23'）被插入到该列时，如果转换操作不会导致数据信息丢失以及完全可逆，那么SQLite就会将该文本数据优先转换为INTEGER或REAL类型的数据（NULL或BLOB类型数据不做转换），转换不成功才会按照文本数据存储——这里能转换INTEGER成功；如果存储列的近似类型为TEXT,那么自然数据存储的优先存储类是TEXT,所以哪怕你存储的是整型数字，结果存的依然是TEXT。这就是类型近似在数据存储中的应用。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;代码连接数据库&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　代码连接比较基础简单，博主简单操作一盘，权当复习,虽然实际项目中很少用得这么基础。基本上呢，代码操作数据库的步骤可以概括为：&lt;strong&gt;加载驱动、获取连接、创建预编译对象、执行SQL、释放资源&lt;/strong&gt;，顺口溜一句就是“贾琏欲执释”。按照这个步骤，首先是要&lt;a href=&quot;https://bitbucket.org/xerial/sqlite-jdbc/downloads/&quot; target=&quot;_blank&quot;&gt;下载&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SQLite&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;的驱动程序包，将包添加到IDE中并Build Path，然后愉快的撸码操作——&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; java.sql.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SQLiteTest {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         String driver = &quot;org.sqlite.JDBC&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         String url = &quot;jdbc:sqlite:E:\\test.db&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         String sql = &quot;select * from chenbenbuyi&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         Connection conn = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         Statement stmt = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         ResultSet rs = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加载驱动&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            Class.forName(driver);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取连接&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             conn = DriverManager.getConnection(url); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;sqlite不需要密码
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建预编译对象&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             stmt =&lt;span&gt; conn.createStatement();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行sql&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             rs =&lt;span&gt; stmt.executeQuery(sql);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt;&lt;span&gt; (rs.next()) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 String s = rs.getString(&quot;x&quot;) +&quot;:&quot;+rs.getString(&quot;y&quot;)+&quot;:&quot;+rs.getString(&quot;z&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                System.out.println(s);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放资源：一定要在finally中确保资源被释放&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; !=&lt;span&gt; rs) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                    rs.close();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                    e.printStackTrace();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; !=&lt;span&gt; stmt) {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                    stmt.close();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;                    e.printStackTrace();
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; !=&lt;span&gt; conn) {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;                    conn.close();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                 } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;                    e.printStackTrace();
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;其它注意项&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　&lt;span&gt;①Sqlite没有单独的布尔存储类型，它使用INTEGER作为存储类型，0为false，1为true；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　 ②Sqlite没有单独的日期和时间存储类，内置的sqlite日期和时间函数能够将日期和时间以TEXT，REAL或INTEGER形式存放；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;③&lt;/span&gt;&lt;span&gt;基于轻量的设计取舍，SQLite的锁粗粒比较粗，当一个写连接要写数据库，所有其它的连接被锁住，直到写连接结束了它的事务，所以&lt;span&gt;多个进程可以同时对SQLIte进行SELECT操作，但在任一时刻，只能有一个进程对数据库进行更改。SQLite因为不适合于高并发的场景。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;尾声&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　好了，作为入门，不可能对SQLite讲述得太全面，但带你入门完全够了，所以本博暂时先止于此。鉴于布衣博主的博客被copy盗取太多，百度一搜甚是气愤，在此郑重申明：&lt;span&gt;转载请获得博主允许并注明出处以及给出&lt;a href=&quot;https://www.cnblogs.com/chenbenbuyi/p/8620750.html&quot; target=&quot;_blank&quot;&gt;原文链接&lt;/a&gt;&lt;/span&gt;，否则。。。中国这版权行情博主一屌丝也不能把你怎样，但你的良心就真的不会痛耶？。　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　结尾涕泣，不知所云。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 04 Apr 2018 05:12:00 +0000</pubDate>
<dc:creator>陈本布衣</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenbenbuyi/p/8620750.html</dc:identifier>
</item>
<item>
<title>用phpcms切换中英文网页的方法（不用解析二级域名）、phpcms完成pc和手机端切换（同一域名） - 悦~</title>
<link>http://www.cnblogs.com/nuanai/p/8716563.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nuanai/p/8716563.html</guid>
<description>&lt;p&gt;&lt;span&gt;AA。phpcms进行双语切换方法（不用解析二级域名）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;phpcms进行两种语言的切换，有一把部分的人都是进行的二级域名的解析，这样的话可能会有一部分的麻烦，我这里有一种方法可以不用解析二级域名就可以，不过因为是模板所以可能麻烦一点，不过真的是不接触不知道，接触到没有用到的东西就可以进行进一步的学习。&lt;span&gt;作者：悦悦 博客地址：http://www.cnblogs.com/nuanai/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这里我使用的方法是进行一级栏目的读取，通过不同的一级栏目进行不同的内容调取。只要修改一级栏目的id就可以了，这就需要用到不同的id，因此就进行了头部文件的修改，其它的列表页或是内容页的东西不用进行修改。但是怎么判断当前页面我应该调取那个语言的一级栏目的id呢？这就是我需要考虑的问题，不过这个问题已经解决了，看下我是怎么解决的吧。下面就是进行phpcms的步骤，因为phpcms的安装步骤一直到添加内容、更换模板风格等在之前的博客中都有写到，这里就不多说了，直接从怎么替换语言来说。&lt;span&gt;作者：悦悦 博客地址：http://www.cnblogs.com/nuanai/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一、两种语言模板的替换（中文---英文）默认首页假如是中文&lt;/p&gt;
&lt;p&gt;　　1.模板结构功能如果一样，直接在你的content文件夹中复制一模一样的默认文件出来（包括所有的文件）&lt;/p&gt;
&lt;p&gt;　　2.修改文件的名字，要和默认中文的文件名字区分开，好进行中英文的模板切换&lt;/p&gt;
&lt;p&gt;　　3.找到你的中文模板的头文件，我这里是header.html文件，打开头文件，进行如下修改&lt;/p&gt;
&lt;p&gt;　　（1）找到你要进行切换语言的位置，修改你的语言切换的指向路径是一个php的处理文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
&amp;lt;!--找到你要进行双语切换的地方，这里是进行英文版的切换--&amp;gt;
&amp;lt;a href=&quot;qhe.php&quot;&amp;gt;English&amp;lt;/a&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;span&gt;　注意：这里指向的php文件是要放到“phpcmswm\install_package”文件夹下的，不然在走这个php文件的时候会出错&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　（2）进行编写这个php处理文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
&amp;lt;?php
        //开启缓存
        session_start();  
        
        //给一个默认的值，这里是英文语言的默认值，默认值你们可以自己定义
        $_SESSION['qhz'] = 1;  
        
        //跳转到自己的phpcms的首页，使用的是window.location.href = '自己的phpcms的主页路径'
        echo &quot;&amp;lt;script type='text/javascript'&amp;gt;window.location.href = '/phpcmswm/install_package/'&amp;lt;/script&amp;gt;&quot;  
?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（3）编写结束php处理文件之后，对默认的首页跳转的处理文件进行修改&lt;/p&gt;
&lt;p&gt;　　首先，找到这个路径下的index.php文件并打开，文件的路径是：　phpcmswm\install_package\phpcms\modules\content\index.php&lt;/p&gt;
&lt;p&gt;　　其次，A.在index.php文件中开启缓存&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
//开启缓存
session_start();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　B.找到文件中的这句话，大约在31行&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
include template('content','index',$default_style);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　替换成如下这样,这是进行判读&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
//判断传过来的session的值是不是空的，是的话就跳默认中文主页，不是就跳英文主页
if(empty($_SESSION[&quot;qhz&quot;]))
{
        include template('content','index',$default_style);
}
else
{
        //这是英文版的主页，我的英文版主页的名字是index1
        include template('content','index1',$default_style);            
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　到这里关于中文版的头部文件修改就结束了。&lt;/p&gt;
&lt;p&gt;　　4.中文头部文件结束了，然后是英文的头部文件了（同上面的第3步骤）&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;注意：不同的地方是你的英文的php处理文件，不要指向同一个处理文件，所以要进行新的处理文件的编写，除了文件名和传值不一样外，其他的其实都是一样的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　（1）中文的头部文件　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
&amp;lt;!--切换中文的指向文件--&amp;gt;
&amp;lt;a href=&quot;qhz.php&quot;&amp;gt;中文&amp;lt;/a&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（2）php处理的页面&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
&amp;lt;?php
        session_start();
        $_SESSION['qhz'] = 0;   //传的中文状态下的值
        echo &quot;&amp;lt;script type='text/javascript'&amp;gt;window.location.href = '/phpcmswm/install_package/'&amp;lt;/script&amp;gt;&quot;
?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（3）phpcmswm\install_package\phpcms\modules\content\index.php这个index.php文件是不需要修改的，因为里面的判断已经写了空的时候就是默认的中文界面，值是空的其实和0是一样的，所以不用进行别的修改。&lt;/p&gt;
&lt;p&gt;　　这样中文和英文的模板需要修改的地方就写完了。&lt;/p&gt;
&lt;p&gt;二、phpcms后台的修改部分&lt;/p&gt;
&lt;p&gt;　　1.默认的模板不用进行修改，需要修改的是英文状态下的模板，这里你就需要进行一级栏目的添加&lt;/p&gt;
&lt;p&gt;　　（1）选择“内容”标签，单击“添加栏目”，进行信息的添加&lt;/p&gt;
&lt;p&gt;　　（2）进行到“模板设置”的栏目的时候，选择“可用风格”---“是站点管理中的风格名字”这个是不用变得；“栏目首页模板”---“是你的英文的首页模板”；“列表页、内容页”----“都是对应的英文的模板文件”&lt;/p&gt;
&lt;p&gt;　　（3）进行“提交”就可以了&lt;/p&gt;
&lt;p&gt;　　2.进行英文栏目下的菜单栏目的添加，正常的添加菜单栏目就可以了&lt;/p&gt;
&lt;p&gt;　　3.其他的内容页、列表页都是正常的添加内容就可以了&lt;/p&gt;
&lt;p&gt;　　到这里，后台的修改就结束了&lt;/p&gt;
&lt;p&gt;三、整体看效果就可以了&lt;/p&gt;
&lt;p&gt;　　以上就是进行双语的切换步骤，修改的只有中英文的头部文件和传值的处理页面，需要后台添加的就是你的英文栏目，其它的东西就是全靠传的id值进行内容切换就可以了，因为功能都是样的，所以直接复制了默认模板的所有文件就可以了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 作者：悦悦 博客地址：http://www.cnblogs.com/nuanai/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;BB。 phpcms完成pc和手机端切换（同一域名）&lt;span&gt;作者：悦悦 博客地址：http://www.cnblogs.com/nuanai/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 一、手机端文件的创建和修改&lt;/p&gt;
&lt;p&gt;　　1.在这个文件路径下新建一个手机端网页文件&lt;/p&gt;
&lt;p&gt;　　phpcmswm\install_package\phpcms\templates\wm    &lt;span&gt;这路径就是后台的“站点管理”中的模板风格文件，在这个模板风格文件下创建一个文件夹，我这里叫做content_m，这个文件夹就是用来做手机网站的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　2.将你的手机网页的文件复制到这个content_m文件夹下，进行拆分成phpcms使用的分类文件就可以了（正常的网页文件拆分：头部、尾部、中心等），然后修改文件中的各个文件路径就可以了，这里不多说，路径修改什么的都在前面的博客中详细讲解过了。&lt;/p&gt;
&lt;p&gt;二、修改首页跳转的处理文件&lt;/p&gt;
&lt;p&gt;　　1.找到这个index.php文件，就是首页跳转的处理文件  路径：phpcmswm\install_package\phpcms\modules\content\index.php&lt;/p&gt;
&lt;p&gt;　　2.将判断设备的代码复制到index的类方法里（类名大约是第8行），判断设备的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;76&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
//判断是不是手机端
        function isMobile()
        {
                // 如果有HTTP_X_WAP_PROFILE则一定是移动设备
                if (isset ($_SERVER['HTTP_X_WAP_PROFILE']))
                {
                        return true;
                }
                // 如果via信息含有wap则一定是移动设备,部分服务商会屏蔽该信息
                if (isset ($_SERVER['HTTP_VIA']))
                {
                        // 找不到为flase,否则为true
                        return stristr($_SERVER['HTTP_VIA'], &quot;wap&quot;) ? true : false;
                }
                // 脑残法，判断手机发送的客户端标志,兼容性有待提高
                if (isset ($_SERVER['HTTP_USER_AGENT']))
                {
                        $clientkeywords = array ('nokia',
                                'sony',
                                'ericsson',
                                'mot',
                                'samsung',
                                'htc',
                                'sgh',
                                'lg',
                                'sharp',
                                'sie-',
                                'philips',
                                'panasonic',
                                'alcatel',
                                'lenovo',
                                'iphone',
                                'ipod',
                                'blackberry',
                                'meizu',
                                'android',
                                'netfront',
                                'symbian',
                                'ucweb',
                                'windowsce',
                                'palm',
                                'operamini',
                                'operamobi',
                                'openwave',
                                'nexusone',
                                'cldc',
                                'midp',
                                'wap',
                                'mobile'
                                );
                        // 从HTTP_USER_AGENT中查找手机浏览器的关键字
                        if (preg_match(&quot;/(&quot; . implode('|', $clientkeywords) . &quot;)/i&quot;, strtolower($_SERVER['HTTP_USER_AGENT'])))
                        {
                                return true;
                        }
                }
                // 协议法，因为有可能不准确，放到最后判断
                if (isset ($_SERVER['HTTP_ACCEPT']))
                {
                        // 如果只支持wml并且不支持html那一定是移动设备
                        // 如果支持wml和html但是wml在html之前则是移动设备
                        if ((strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') !== false) &amp;amp;&amp;amp; (strpos($_SERVER['HTTP_ACCEPT'], 'text/html') === false || (strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') &amp;lt; strpos($_SERVER['HTTP_ACCEPT'], 'text/html'))))
                        {
                                return true;
                        }
                }
                return false;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3.找到本处理文件中的这句代码（处理文件的所有这句代码都要替换）　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
include template('content',$template);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　替换成如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
if($this-&amp;gt;isMobile())
{
        //第一个参数是你要跳转的手机网页文件夹名
        include template('content_m',$template); 
}
else
{
        include template('content',$template);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4.找到处理文件中的这句代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
include template('content','index',$default_style);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　替换成如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
if($this-&amp;gt;isMobile())
{
    //这是手机端的网页
　　include template('content_m','index',$default_style);
}
else
{               
　　include template('content','index',$default_style);                   
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　到这里就是PC和手机的切换步骤基本结束了，你可以通过火狐浏览器的手机模拟器来查看是不是可以修改了。&lt;span&gt;作者：悦悦 博客地址：http://www.cnblogs.com/nuanai/&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;以上的两大内容就是我在做项目的时候遇到过的新的问题，现在已经都解决了，所以分享一下过程，需要的同志们可以查看一下。&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 作者：悦悦 博客地址：http://www.cnblogs.com/nuanai/&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 04 Apr 2018 04:45:00 +0000</pubDate>
<dc:creator>悦~</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nuanai/p/8716563.html</dc:identifier>
</item>
</channel>
</rss>