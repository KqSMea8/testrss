<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Quartz入门案例与介绍（与spring整合） - 高压锅里的小白</title>
<link>http://www.cnblogs.com/xiaobai1226/p/7643384.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaobai1226/p/7643384.html</guid>
<description>&lt;h3&gt;　　Quartz概述&lt;/h3&gt;
&lt;p&gt;　　Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，它可以与J2EE与J2SE应用程序相结合也可以单独使用。Quartz可以用来创建简单或为运行十个，百个，甚至是好几万个Jobs这样复杂的程序。Jobs可以做成标准的Java组件或 EJBs。&lt;/p&gt;
&lt;p&gt;　　官网下载地址：&lt;a href=&quot;http://www.quartz-scheduler.org/downloads/&quot; target=&quot;_blank&quot;&gt;http://www.quartz-scheduler.org/downloads/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　下载好后是这样一个压缩包 &lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171009223549871-320598884.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　解压压缩包得到以下目录文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171009223637168-2075975758.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　首先，新建一个java工程&lt;/p&gt;
&lt;p&gt;　　第二步，导入相关的jar包&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171010004551340-1006094847.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　第三步，创建作业类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestQuartz {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(){
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         System.out.println(&lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;任务执行了&quot;+&quot;yyyy-MM-dd HH:mm:ss&quot;).format(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date()));
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　第四步：在spring配置文件中配置作业类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置作业类 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;myJob&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.test.job.MyJob&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　第五步：在spring配置文件中配置JobDetail&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置JobDetail（作业详情） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;myJobDetail&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 用到的job实例 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;targetObject&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;myJob&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; job实例中的方法 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;targetMethod&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;run&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　第六步：在spring配置文件中配置触发器（cron表达式下面会有详细讲解）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置触发器Trigger &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;myTrigger&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.scheduling.quartz.CronTriggerFactoryBean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;jobDetail&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;myJobDetail&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;cronExpression&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置cron表达式，每5秒执行一次 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0/5 * * * * ?&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　   第七步：在spring配置文件中配置&lt;strong&gt;scheduler&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置scheduler工厂 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;scheduler&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;triggers&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ref &lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;=&quot;myTrigger&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　   第八步：加载spring配置文件，创建spring工厂&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestQuartz {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        ClassPathXmlApplicationContext classPathXmlApplicationContext &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　到此时，一运行main方法，就成功运行了，每5秒调用一次run方法&lt;/p&gt;


&lt;p&gt;　　1、scheduler是一个计划调度器容器，容器里面可以盛放众多的JobDetail和trigger，当容器启动后，里面的每个JobDetail都会根据trigger按部就班自动去执行。&lt;/p&gt;
&lt;p&gt;　　2、JobDetail是一个可执行的工作，它本身可能是有状态的。&lt;/p&gt;
&lt;p&gt;　　3、Trigger触发器代表一个调度参数的配置，什么时候去调。&lt;/p&gt;
&lt;p&gt;　　4、当JobDetail和Trigger在scheduler容器上注册后，形成了装配好的作业（JobDetail和Trigger所组成的一对儿），就可以伴随容器启动而调度执行了。&lt;/p&gt;
&lt;p&gt;　　5、scheduler是个容器，容器中有一个线程池，用来并行调度执行每个作业，这样可以提高容器效率。&lt;/p&gt;



&lt;p&gt;　　（1）Quartz cron 的格式向下支持到秒级别的计划。&lt;/p&gt;
&lt;p&gt;　　（2）Quartz 用 cron 表达式存放执行计划。引用了 cron 表达式的 CronTrigger 在计划的时间里会与 job 关联上。&lt;/p&gt;
&lt;p&gt;　　&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;（3）Quartz 提供七个域&lt;/em&gt;&lt;/em&gt;，每个域的含义如下&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171010005527402-33081096.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;下表列出了 Quartz cron 表达式支持的七个域。&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　Quartz Cron&lt;/strong&gt; &lt;strong&gt;表达式支持到七个域&lt;/strong&gt; &lt;/p&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;是否必须&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;允许值&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;特殊字符&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;秒&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;是&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;0-59&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;, - * /&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;分&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;是&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;0-59&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;, - * /&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;时&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;是&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;0-23&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;, - * /&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;日&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;是&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;1-31&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;, - * ? / L W C&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;月&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;是&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;1-12 或 JAN-DEC&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;, - * /&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;周&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;是&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;1-7 或 SUN-SAT&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;, - * ? / L C #&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;年&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;否&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;空 或 1970-2099&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;, - * /&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;br/&gt;　　注意： （1）月份和星期的名称是不区分大小写的。FRI 和 fri 是一样的。 &lt;/p&gt;&lt;p&gt;　　　　　（2）域之间有空格分隔，我们能写的最简单的表达式看起来就是这个了：&lt;/p&gt;
&lt;p&gt;　　　　　　　　 * * * ? * * &lt;br/&gt;　　　　　　　　这个表达会每秒钟激发一个部署的 job。 &lt;/p&gt;&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt;&lt;strong&gt;理解特殊字符&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;　　&lt;strong&gt;*&lt;/strong&gt; &lt;strong&gt;星号&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;　　使用星号(*) 指示着你想在这个域上包含所有合法的值。例如，在月份域上使用星号意味着每个月都会触发这个 trigger。&lt;/p&gt;&lt;p&gt;　　表达式样例： &lt;/p&gt;&lt;p&gt;　　0 * 17 * * ? &lt;/p&gt;&lt;p&gt;　　意义：每天从下午5点到下午5:59中的每分钟激发一次 trigger。它停在下午 5:59 是因为值 17 在小时域上，在下午 6 点时，小时变为 18 了，也就不再理会这个 trigger，直到下一天的下午5点。 &lt;/p&gt;&lt;p&gt;　　在你希望 trigger 在该域的所有有效值上被激发时使用 * 字符。 &lt;/p&gt;&lt;p&gt;　　&lt;strong&gt;?&lt;/strong&gt; &lt;strong&gt;问号&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;　　? 号只能用在日和周域上，但是不能在这两个域上同时使用。你可以认为 ? 字符是 &quot;我并不关心在该域上是什么值。&quot; 这不同于星号，星号是指示着该域上的每一个值。? 是说不为该域指定值。 &lt;/p&gt;&lt;p&gt;　　不能同时这两个域上指定值的理由是难以解释甚至是难以理解的。基本上，假定同时指定值的话，意义就会变得含混不清了：考虑一下，如果一个表达式在日域上有值11，同时在周域上指定了 WED。那么是要 trigger 仅在每个月的11号，且正好又是星期三那天被激发？还是在每个星期三的11号被激发呢？要去除这种不明确性的办法就是不能同时在这两个域上指定值。 &lt;/p&gt;&lt;p&gt;　　只要记住，假如你为这两域的其中一个指定了值，那就必须在另一个字值上放一个 ?。 &lt;/p&gt;&lt;p&gt;　　表达式样例： &lt;/p&gt;&lt;p&gt;　　0 10,44 14 ? 3 WEB &lt;/p&gt;&lt;p&gt;　　意义：在三月中的每个星期三的下午 2:10 和 下午 2:44 被触发。 &lt;/p&gt;&lt;p&gt;　　&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;逗号&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;　　逗号 (,) 是用来在给某个域上指定一个值列表的。例如，使用值 0,15,30,45 在秒域上意味着每15秒触发一个 trigger。 &lt;/p&gt;&lt;p&gt;　　表达式样例： &lt;/p&gt;&lt;p&gt;　　0 0,15,30,45 * * * ? &lt;/p&gt;&lt;p&gt;　　意义：每刻钟触发一次 trigger。 &lt;/p&gt;&lt;p&gt;　　&lt;strong&gt;/&lt;/strong&gt; &lt;strong&gt;斜杠&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;　　斜杠 (/) 是用于时间表的递增的。我们刚刚用了逗号来表示每15分钟的递增，但是我们也能写成这样 0/15。 &lt;/p&gt;&lt;p&gt;　　表达式样例： &lt;/p&gt;&lt;p&gt;　　0/15 0/30 * * * ? &lt;/p&gt;&lt;p&gt;　　意义：在整点和半点时每15秒触发 trigger。 &lt;/p&gt;&lt;p&gt;　　&lt;strong&gt;-&lt;/strong&gt; &lt;strong&gt;中划线&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;　　中划线 (-) 用于指定一个范围。例如，在小时域上的 3-8 意味着 &quot;3,4,5,6,7 和 8 点。&quot;  域的值不允许回卷，所以像 50-10 这样的值是不允许的。 &lt;/p&gt;&lt;p&gt;　　表达式样例： &lt;/p&gt;&lt;p&gt;　　0 45 3-8 ? * * &lt;/p&gt;&lt;p&gt;　　意义：在上午的3点至上午的8点的45分时触发 trigger。 &lt;/p&gt;&lt;p&gt;　　&lt;strong&gt;L&lt;/strong&gt; &lt;strong&gt;字母&lt;/strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;br/&gt;　　L 说明了某域上允许的最后一个值。它仅被日和周域支持。当用在日域上，表示的是在月域上指定的月份的最后一天。例如，当月域上指定了 JAN 时，在日域上的 L 会促使 trigger 在1月31号被触发。假如月域上是 SEP，那么 L 会预示着在9月30号触发。换句话说，就是不管指定了哪个月，都是在相应月份的时最后一天触发 trigger。 &lt;/p&gt;&lt;p&gt;　　表达式 0 0 8 L * ? 意义是在每个月最后一天的上午 8:00 触发 trigger。在月域上的 * 说明是 &quot;每个月&quot;。 &lt;/p&gt;&lt;p&gt;　　当 L 字母用于周域上，指示着周的最后一天，就是星期六 (或者数字7)。所以如果你需要在每个月的最后一个星期六下午的 11:59 触发 trigger，你可以用这样的表达式 0 59 23 ? * L。 &lt;/p&gt;&lt;p&gt;　　当使用于周域上，你可以用一个数字与 L 连起来表示月份的最后一个星期 X。例如，表达式 0 0 12 ? * 2L 说的是在每个月的最后一个星期一触发 trigger。 &lt;/p&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;5.5&quot;&gt;&lt;td readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;不要让范围和列表值与 L 连用&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;虽然你能用星期数(1-7)与 L 连用，但是不允许你用一个范围值和列表值与 L 连用。这会产生不可预知的结果。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;br/&gt;　　&lt;strong&gt;W&lt;/strong&gt; &lt;strong&gt;字母&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;　　W 字符代表着平日 (Mon-Fri)，并且仅能用于日域中。它用来指定离指定日的最近的一个平日。大部分的商业处理都是基于工作周的，所以 W 字符可能是非常重要的。例如，日域中的 15W 意味着 &quot;离该月15号的最近一个平日。&quot; 假如15号是星期六，那么 trigger 会在14号(星期四)触发，因为距15号最近的是星期一，这个例子中也会是17号（译者Unmi注：不会在17号触发的，如果是15W，可能会是在14号(15号是星期六)或者15号(15号是星期天)触发，也就是只能出现在邻近的一天，如果15号当天为平日直接就会当日执行）。W 只能用在指定的日域为单天，不能是范围或列表值。 &lt;/p&gt;&lt;p&gt;　　&lt;strong&gt;#&lt;/strong&gt; &lt;strong&gt;井号&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;　　# 字符仅能用于周域中。它用于指定月份中的第几周的哪一天。例如，如果你指定周域的值为 6#3，它意思是某月的第三个周五 (6=星期五，#3意味着月份中的第三周)。另一个例子 2#1 意思是某月的第一个星期一 (2=星期一，#1意味着月份中的第一周)。注意，假如你指定 #5，然而月份中没有第 5 周，那么该月不会触发。&lt;/p&gt;
&lt;p&gt;　　示例：&lt;em id=&quot;__mceDel&quot;&gt;表达式意义&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　&quot;0 0 12 * *?&quot; 每天中午12点触发&lt;/p&gt;
&lt;p&gt;　　&quot;0 15 10 ? **&quot; 每天上午10:15触发&lt;/p&gt;
&lt;p&gt;　　&quot;0 15 10 * *?&quot; 每天上午10:15触发&lt;/p&gt;
&lt;p&gt;　　&quot;0 15 10 * * ?*&quot; 每天上午10:15触发&lt;/p&gt;
&lt;p&gt;　　&quot;0 15 10 * * ?2005&quot; 2005年的每天上午10:15触发&lt;/p&gt;
&lt;p&gt;　　&quot;0 * 14 * *?&quot; 在每天下午2点到下午2:59期间的每1分钟触发&lt;/p&gt;
&lt;p&gt;　　&quot;0 0/5 14 * *?&quot; 在每天下午2点到下午2:55期间的每5分钟触发&lt;/p&gt;
&lt;p&gt;　　&quot;0 0/5 14,18 ** ?&quot; 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发&lt;/p&gt;
&lt;p&gt;　　&quot;0 0-5 14 * *?&quot; 在每天下午2点到下午2:05期间的每1分钟触发&lt;/p&gt;
&lt;p&gt;　　&quot;0 10,44 14 ? 3WED&quot; 每年三月的星期三的下午2:10和2:44触发&lt;/p&gt;
&lt;p&gt;　　&quot;0 15 10 ? *MON-FRI&quot; 周一至周五的上午10:15触发&lt;/p&gt;
&lt;p&gt;　　&quot;0 15 10 15 *?&quot; 每月15日上午10:15触发&lt;/p&gt;
&lt;p&gt;　　&quot;0 15 10 L *?&quot; 每月最后一日的上午10:15触发&lt;/p&gt;
&lt;p&gt;　　&quot;0 15 10 ? *6L&quot; 每月的最后一个星期五上午10:15触发&lt;/p&gt;
&lt;p&gt;　　&quot;0 15 10 ? * 6L2002-2005&quot; 2002年至2005年的每月的最后一个星期五上午10:15触发&lt;/p&gt;
&lt;p&gt;　　&quot;0 15 10 ? *6#3&quot; 每月的第三个星期五上午10:15触发&lt;/p&gt;

</description>
<pubDate>Mon, 09 Oct 2017 17:09:00 +0000</pubDate>
<dc:creator>高压锅里的小白</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaobai1226/p/7643384.html</dc:identifier>
</item>
<item>
<title>PE文件格式详解,第一讲,DOS头文件格式 - iBinary</title>
<link>http://www.cnblogs.com/iBinary/p/7643695.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iBinary/p/7643695.html</guid>
<description>
&lt;p&gt;今天讲解PE文件格式的DOS头文件格式&lt;/p&gt;
&lt;p&gt;首先我们要理解,什么是文件格式,我们常说的EXE可执行程序,就是一个文件格式,那么我们要了解它里面到底存了什么内容&lt;/p&gt;
&lt;p&gt;简短的说明.&lt;/p&gt;
&lt;p&gt;我们要知道,PE文件格式,是微软半公开的,因为微软并没有说明这个文件格式.但是微软有定义的结构体.&lt;/p&gt;
&lt;p&gt;文件格式,是记录文件加载到内存中执行的位置,和偏移&lt;/p&gt;
&lt;p&gt;在DOS16位年代下,主要记录分段等等的信息.&lt;/p&gt;
&lt;p&gt;在32位年代下,主要记录分区位置,代码位置,各种表等等..&lt;/p&gt;

&lt;p&gt;作者：IBinary&lt;br/&gt;出处：&lt;a href=&quot;http://www.cnblogs.com/iBinary/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/iBinary/&lt;/a&gt;&lt;br/&gt;版权所有，欢迎保留原文链接进行转载：)&lt;/p&gt;
&lt;h2&gt;一丶DOS头文件格式&lt;/h2&gt;
&lt;p&gt;我们看下结构体.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
typedef &lt;span&gt;struct&lt;/span&gt; _IMAGE_DOS_HEADER {      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; DOS .EXE header&lt;/span&gt;
    WORD   e_magic;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Magic number (标志,不会变的标志)&lt;/span&gt;
    WORD   e_cblp;                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Bytes on last page of file&lt;/span&gt;
    WORD   e_cp;                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Pages in file&lt;/span&gt;
    WORD   e_crlc;                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Relocations&lt;/span&gt;
    WORD   e_cparhdr;                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Size of header in paragraphs&lt;/span&gt;
    WORD   e_minalloc;                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Minimum extra paragraphs needed&lt;/span&gt;
    WORD   e_maxalloc;                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Maximum extra paragraphs needed&lt;/span&gt;
    WORD   e_ss;                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Initial (relative) SS value&lt;/span&gt;
    WORD   e_sp;                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Initial SP value&lt;/span&gt;
    WORD   e_csum;                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Checksum&lt;/span&gt;
    WORD   e_ip;                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Initial IP value&lt;/span&gt;
    WORD   e_cs;                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Initial (relative) CS value&lt;/span&gt;
    WORD   e_lfarlc;                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; File address of relocation table&lt;/span&gt;
    WORD   e_ovno;                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Overlay number&lt;/span&gt;
    WORD   e_res[&lt;span&gt;4&lt;/span&gt;];                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Reserved words&lt;/span&gt;
    WORD   e_oemid;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; OEM identifier (for e_oeminfo)&lt;/span&gt;
    WORD   e_oeminfo;                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; OEM information; e_oemid specific&lt;/span&gt;
    WORD   e_res2[&lt;span&gt;10&lt;/span&gt;];                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Reserved words&lt;/span&gt;
    LONG   e_lfanew;                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; File address of new exe header&lt;/span&gt;
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看出,这个结构体中已经明确定义了各种DOS(16位年代的)头了.&lt;/p&gt;
&lt;p&gt;我们在32位年代下,主要要知道第一个成员和最后一个成员&lt;/p&gt;
&lt;p&gt;第一个成员: 标志MZ,记录了MZ,占两个字节,这个是DOS系统作者的名字&lt;/p&gt;
&lt;p&gt;最后一个成员: 这个成员主要记录了新的文件开始执行的地址位置.&lt;/p&gt;
&lt;p&gt;因为微软为了兼容16位程序,所以还保留DOS头,但是32位程序,是不会执行DOS头了,重要的就是这两个成员.&lt;/p&gt;
&lt;h2&gt;二丶WinHex对比&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171009231801184-784766003.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第一个成员,对应4D 5A两个字节&lt;/p&gt;
&lt;p&gt;最后一个成员,对应 00 00 00 D0 (小尾方式) 最后一个成员是保存了新的文件格式地址.所以我们看到D0的位置,正好是PE&lt;/p&gt;
&lt;p&gt;那么我们如果不是在16位程序下使用,那么上面除了最后一个成员,其余的位置都可以随便改.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171010001254199-1739249471.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;正常运行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171010001450637-375478398.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;三丶DOS头的代码区&lt;/h2&gt;
&lt;p&gt;我们上面看到了,DOS头就一个结构体大小,到了最后一个成员位置,则是这个结构体结束,那么在这个结构体结束的后面,一直到PE的位置的二进制到底是什么?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171010002022887-489694342.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看出,在DOS头的位置,也就是成员 WORD e_lfarlc; 记录的是DOS的代码执行位置,这块区域属于DOS的代码执行区域&lt;/p&gt;
&lt;p&gt;主要作用是,在16位系统下,不能运行32位程序,如果运行,则利用中断,显示 This is Program cannot be run in Dos Mode (这个程序不能运行在DOS系统)&lt;/p&gt;
&lt;p&gt;如果在32位系统下使用,那么这一段是没有任何作用的.DOS头只需要知道 第一个成员,和最后一个成员你的指向即可.&lt;/p&gt;
&lt;p&gt;如果是16位系统下,那么你这个DOS头记录的信息就有用了(保存了页大小,页的个数,SS段.IP执行位置,校验和等等)&lt;/p&gt;
&lt;h2&gt;四丶NT头,PE头,以及可选头(第一讲介绍,不讲解具体作用)&lt;/h2&gt;
&lt;p&gt;到了PE位置,那么我们要了解一下NT头,PE头,可选头的结构到底是什么.新的格式是怎么样子的.&lt;/p&gt;
&lt;h3&gt;NT头:&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NT头分为32和64位版本的,这里说下32的,&lt;/p&gt;
&lt;p&gt;第一个成员: 4个字节,也就是和4D 5A 一样,都是固定的标志,而这个标志则是&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171010002839730-773922655.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;也就是我们说的PE头.&lt;/p&gt;
&lt;p&gt;下面还有两个结构体,分别是文件头,还有可选头.&lt;/p&gt;
&lt;h3&gt;文件头:&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
typedef struct _IMAGE_FILE_HEADER {
    WORD    Machine;
    WORD    NumberOfSections;
    DWORD   TimeDateStamp;
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
    WORD    SizeOfOptionalHeader;
    WORD    Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 可选头:&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;101&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
 

　　　　　　　　　　　PE文件格式详解,第一讲,DOS头文件格式

 

今天讲解PE文件格式的DOS头文件格式

首先我们要理解,什么是文件格式,我们常说的EXE可执行程序,就是一个文件格式,那么我们要了解它里面到底存了什么内容

简短的说明.

我们要知道,PE文件格式,是微软半公开的,因为微软并没有说明这个文件格式.但是微软有定义的结构体.

文件格式,是记录文件加载到内存中执行的位置,和偏移

在DOS16位年代下,主要记录分段等等的信息.

在32位年代下,主要记录分区位置,代码位置,各种表等等..

一丶DOS头文件格式

我们看下结构体.

typedef struct _IMAGE_DOS_HEADER {      // DOS .EXE header
    WORD   e_magic;                     // Magic number (标志,不会变的标志)
    WORD   e_cblp;                      // Bytes on last page of file
    WORD   e_cp;                        // Pages in file
    WORD   e_crlc;                      // Relocations
    WORD   e_cparhdr;                   // Size of header in paragraphs
    WORD   e_minalloc;                  // Minimum extra paragraphs needed
    WORD   e_maxalloc;                  // Maximum extra paragraphs needed
    WORD   e_ss;                        // Initial (relative) SS value
    WORD   e_sp;                        // Initial SP value
    WORD   e_csum;                      // Checksum
    WORD   e_ip;                        // Initial IP value
    WORD   e_cs;                        // Initial (relative) CS value
    WORD   e_lfarlc;                    // File address of relocation table
    WORD   e_ovno;                      // Overlay number
    WORD   e_res[4];                    // Reserved words
    WORD   e_oemid;                     // OEM identifier (for e_oeminfo)
    WORD   e_oeminfo;                   // OEM information; e_oemid specific
    WORD   e_res2[10];                  // Reserved words
    LONG   e_lfanew;                    // File address of new exe header
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;
可以看出,这个结构体中已经明确定义了各种DOS(16位年代的)头了.

我们在32位年代下,主要要知道第一个成员和最后一个成员

第一个成员: 标志MZ,记录了MZ,占两个字节,这个是DOS系统作者的名字

最后一个成员: 这个成员主要记录了新的文件开始执行的地址位置.

因为微软为了兼容16位程序,所以还保留DOS头,但是32位程序,是不会执行DOS头了,重要的就是这两个成员.

二丶WinHex对比



第一个成员,对应4D 5A两个字节

最后一个成员,对应 00 00 00 D0 (小尾方式) 最后一个成员是保存了新的文件格式地址.所以我们看到D0的位置,正好是PE

那么我们如果不是在16位程序下使用,那么上面除了最后一个成员,其余的位置都可以随便改.



正常运行



三丶DOS头的代码区

我们上面看到了,DOS头就一个结构体大小,到了最后一个成员位置,则是这个结构体结束,那么在这个结构体结束的后面,一直到PE的位置的二进制到底是什么?



可以看出,在DOS头的位置,也就是成员 WORD e_lfarlc; 记录的是DOS的代码执行位置,这块区域属于DOS的代码执行区域

主要作用是,在16位系统下,不能运行32位程序,如果运行,则利用中断,显示 This is Program cannot be run in Dos Mode (这个程序不能运行在DOS系统)

如果在32位系统下使用,那么这一段是没有任何作用的.DOS头只需要知道 第一个成员,和最后一个成员你的指向即可.

如果是16位系统下,那么你这个DOS头记录的信息就有用了(保存了页大小,页的个数,SS段.IP执行位置,校验和等等)

四丶NT头,PE头,以及可选头(第一讲介绍,不讲解具体作用)

到了PE位置,那么我们要了解一下NT头,PE头,可选头的结构到底是什么.新的格式是怎么样子的.

NT头:
typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;　
NT头分为32和64位版本的,这里说下32的,

第一个成员: 4个字节,也就是和4D 5A 一样,都是固定的标志,而这个标志则是



也就是我们说的PE头.

下面还有两个结构体,分别是文件头,还有可选头.

文件头:
typedef struct _IMAGE_FILE_HEADER {
    WORD    Machine;
    WORD    NumberOfSections;
    DWORD   TimeDateStamp;
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
    WORD    SizeOfOptionalHeader;
    WORD    Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
 可选头:
typedef struct _IMAGE_OPTIONAL_HEADER {
    //
    // Standard fields.
    //

    WORD    Magic;
    BYTE    MajorLinkerVersion;
    BYTE    MinorLinkerVersion;
    DWORD   SizeOfCode;
    DWORD   SizeOfInitializedData;
    DWORD   SizeOfUninitializedData;
    DWORD   AddressOfEntryPoint;
    DWORD   BaseOfCode;
    DWORD   BaseOfData;

    //
    // NT additional fields.
    //

    DWORD   ImageBase;
    DWORD   SectionAlignment;
    DWORD   FileAlignment;
    WORD    MajorOperatingSystemVersion;
    WORD    MinorOperatingSystemVersion;
    WORD    MajorImageVersion;
    WORD    MinorImageVersion;
    WORD    MajorSubsystemVersion;
    WORD    MinorSubsystemVersion;
    DWORD   Win32VersionValue;
    DWORD   SizeOfImage;
    DWORD   SizeOfHeaders;
    DWORD   CheckSum;
    WORD    Subsystem;
    WORD    DllCharacteristics;
    DWORD   SizeOfStackReserve;
    DWORD   SizeOfStackCommit;
    DWORD   SizeOfHeapReserve;
    DWORD   SizeOfHeapCommit;
    DWORD   LoaderFlags;
    DWORD   NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;
　　　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后一个成员是数据目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD   VirtualAddress;
    DWORD   Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;节头:&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
typedef struct _IMAGE_SECTION_HEADER {
    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];
    union {
            DWORD   PhysicalAddress;
            DWORD   VirtualSize;
    } Misc;
    DWORD   VirtualAddress;
    DWORD   SizeOfRawData;
    DWORD   PointerToRawData;
    DWORD   PointerToRelocations;
    DWORD   PointerToLinenumbers;
    WORD    NumberOfRelocations;
    WORD    NumberOfLinenumbers;
    DWORD   Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看出,一个PE文件,主要是结构体套结构体,里面的每个成员都代表什么意义,结构体就怎么多.&lt;/p&gt;
&lt;h2&gt;五丶大体的PE结构分布图&lt;/h2&gt;
&lt;p&gt;DOS头&lt;/p&gt;
&lt;p&gt;NT头&lt;/p&gt;
&lt;p&gt;{　　&lt;/p&gt;
&lt;p&gt;　文件头&lt;/p&gt;
&lt;p&gt;　可选头&lt;/p&gt;
&lt;p&gt;　　数据目录　&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;节头&lt;/p&gt;
&lt;p&gt;今天主要是要了解PE的DOS头,以及PE结构的分布图.具体作用以后慢慢讲,主要了解大体框架,随着框架深入.&lt;/p&gt;
&lt;p&gt;如果想一次了解全部PE,请参考网上大神的博客. &lt;a href=&quot;http://www.cppblog.com/oosky/archive/2016/07/15/15614.html&quot; target=&quot;_blank&quot;&gt;http://www.cppblog.com/oosky/archive/2016/07/15/15614.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者：IBinary&lt;br/&gt;出处：&lt;a href=&quot;http://www.cnblogs.com/iBinary/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/iBinary/&lt;/a&gt;&lt;br/&gt;版权所有，欢迎保留原文链接进行转载：)&lt;/p&gt;
</description>
<pubDate>Mon, 09 Oct 2017 16:43:00 +0000</pubDate>
<dc:creator>iBinary</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iBinary/p/7643695.html</dc:identifier>
</item>
<item>
<title>jQuery中的常用内容总结(三) - funnyZpC</title>
<link>http://www.cnblogs.com/funnyzpc/p/7571998.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/funnyzpc/p/7571998.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;jQuery中的常用内容总结(三)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;转载请注明地址&lt;/strong&gt;:&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/funnyzpc/p/7571998.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/funnyzpc/p/7571998.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;内容提要&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;A&amp;gt;表单参数序列化提交&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;如果没有借助jQuery，表单可以直接提交，这样带来两个问题就是&lt;span&gt;安全(get提交)或表单参数验证障碍&lt;/span&gt;，嗯~，可能很难懂，这样吧，我先放张图，这图是原生get提交的-&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1161789/201710/1161789-20171009222317496-1784857415.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这下清楚了吧，所有的参数都在浏览器里面显示，稍稍别有用心的人就能轻易利用，这是其一；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果是post提交，可能没有以上这个问题，但是。。。，如果参数值提交前需要在js中做处理(表单参数验证或参数拼接等等)，这样直接把数据扔给后台的童鞋，肯定不太好~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　额，还可以借助前两章中的方法。。。可能会累死啊~，毕竟每一个表单都要单独取值。。。总之，这样麻烦；哈哈~ヽ(●´ω｀●)ﾉ，既然麻烦，jQuery给我们提供了两个好用的方法&lt;span&gt;serializeArray()&lt;/span&gt;和&lt;span&gt;serialize()&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;前者可以将表单的参数值序列化成一个Array的形式(用于post提交)，后者会将表单参数值序列化成键值字符串的形式(用于get提交)&lt;/span&gt;，二话不说，先放出源码以及效果图--&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;padding-left: 100px;&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;forms&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     姓名:&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     班级:&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;class&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;一班&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;二班&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;三班&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     性别:男&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;male&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;              女&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;female&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     课程:&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;course&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;语文 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;course&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;数学&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;course&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;历史&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;course&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;4&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;化学&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button  &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;submit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;submitForm(1)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;提交1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button  &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;submitForm(2)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;提交2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;reset&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;取消&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; submitForm(val){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(1==&lt;span&gt;val){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;serializeArray&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; serializeArray=$(&quot;#forms&quot;&lt;span&gt;).serializeArray();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             console.log(&quot;serializeArray:&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            console.log(serializeArray);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; serializeArray){
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; serialize=$(&quot;#forms&quot;&lt;span&gt;).serialize();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             console.log(&quot;serialize:&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            console.log(serialize);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1161789/201710/1161789-20171009223427668-885436504.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1161789/201710/1161789-20171009223516965-229252896.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　后者已经比较完美了，可以直接拼接到提交路径后面就好了，但~对于前者，这个serializeArray只是帮忙做了一部分，如果是&lt;span&gt;post提交应该是{key1:value1,key2:value2}的形式&lt;/span&gt;，此时即使对于菜鸟也很容易写一个通用的方法处理成对象键值对的形式，在此就贡献一个吧&lt;strong&gt;(๑´ڡ`๑)&lt;/strong&gt;--&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; submitForm(val){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(1==&lt;span&gt;val){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;serializeArray&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; serializeArray=$(&quot;#forms&quot;&lt;span&gt;).serializeArray();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             console.log(&quot;serializeArray_before:&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            console.log(serializeArray);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             console.log(&quot;serializeArray_after:&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; paramsArray = $(&quot;#forms&quot;).serializeArray(),params =&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;var&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; paramsArray)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 params[paramsArray[i].name] =&lt;span&gt; paramsArray[i].value;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            console.log(params);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; serialize=$(&quot;#forms&quot;&lt;span&gt;).serialize();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             console.log(&quot;serialize:&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            console.log(serialize);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　实际效果:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1161789/201710/1161789-20171009224347262-1992028010.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　额，嗯~，其实有两个小问题，如果&lt;span&gt;表单有一项没有填的话参数会不存在，还有一个问题是 多选框永远只会序列化第一个值，切记 切记。。。&lt;strong&gt;(ಠ .̫.̫ ಠ)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　啊哈，这个问题就不折腾了 就交给聪明的读者吧~~~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　哦~~~，还存在一个问题是，&lt;span&gt;如果表单外层的form标签若不存在，则不能序列化参数，如果table标签里面嵌一个form的也不能&lt;/span&gt;，至于这个原因 个人猜想可能是与html规范冲突吧~，这个是我在实际开发中碰到的问题，希望各位不要踩坑啊！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;B&amp;gt;遍历&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　&lt;/strong&gt;　由于js本身就是脚本语言的缘故，遂在js中可遍历的对象大致有三种 &lt;span&gt;对象Object类型、数组Array类型以及混合类型(一般是Object+Array类型)&lt;/span&gt;，相比较java是不是巨强大，O(∩_∩)O哈哈~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; obj={'a':1,'b':2,'c':3&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;            array=['a','b','c','d'&lt;span&gt;],
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             mix={'data':['a','b','c'],'pp':99,'kk':21&lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     console.log(&quot;obj:&quot;+&lt;span&gt;obj);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; obj){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         console.log(&quot;i=&quot;+i+&quot; obj[i]=&quot;+&lt;span&gt;obj[i]);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     console.log(&quot;array:&quot;+&lt;span&gt;array);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt;&lt;span&gt; array){
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         console.log(&quot;j=&quot;+j+&quot; array[j]=&quot;+&lt;span&gt;array[j]);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     console.log(&quot;mix:&quot;+&lt;span&gt;mix);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; k &lt;span&gt;in&lt;/span&gt;&lt;span&gt; mix){
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         console.log(&quot;k=&quot;+k+&quot; mix[k]=&quot;+&lt;span&gt;mix[k]);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1161789/201710/1161789-20171009232114434-565495052.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　通过代码和实际输出结果可以看出:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　　　　　&lt;span&gt;&lt;strong&gt;1&lt;/strong&gt;.如果遍历的是对象类型，循环的每一项都会只输出这个对象item的键key，至于值就需要Object[key]来获取了；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　　　　　&lt;strong&gt;2&lt;/strong&gt;.如果遍历的是数组类型，循环的每一项都会只输出这个数组Array的下标，下标所指的值需要Array[index]来获取&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　　　　　&lt;strong&gt;3&lt;/strong&gt;.如果是混合类型，最外层若是Array则同数组循环，若是对象Object则同对象循环&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　嗯哼...,看起来是不是超简单&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(这里只讲了for in循环，这种写法是一种简略写法，由于非常常用，其他的形式用的少就不缀诉啦。。。)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;嗯，以上只是提到了js中的遍历，现在给大家演示下&lt;span&gt;jQuery中的遍历&lt;/span&gt;，这里需要说明的是一般对象或者数组遍历用js的遍历就好了，&lt;span&gt;jQuery中的遍历(each)一般是用来遍历选定的dom对象&lt;/span&gt;的，这里给出样例哈--&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1161789/201710/1161789-20171009230841621-298220595.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;1&lt;/span&gt;     $(&quot;#forms button&quot;).each(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(idx,ele){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         console.log(&quot;idx=&quot;+idx+&quot; ele=&quot;+&lt;span&gt;$(ele).text());
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1161789/201710/1161789-20171009230939949-1703727503.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　以上代码中的each方法的返回值有两个&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;span&gt;　&lt;strong&gt;idx&lt;/strong&gt;:当前循环到的dom对象所在的下标位置&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;ele&lt;/strong&gt;:当前循环到的dom对象可直接使用jQuery的方法对当前循环的dom进行操作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　关于遍历这一节就不过多缀诉了，相信各位键盘上敲敲就轻松明了~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;C&amp;gt;其他&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;关于实际开发中常用的小知识，这里单独拧出来说说(◍'౪`◍)ﾉﾞ：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;Number()&lt;/strong&gt;&lt;/span&gt;:这个方法是将字符串类型转换成数字(Number)的方法，经转换后的参数是Number类型，如果被转换的类型含有数字外的字符则返回NaN&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1161789/201710/1161789-20171009233310965-1431858686.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;toFixed(小数位数)&lt;/span&gt;&lt;/strong&gt;:此方法可以将Number四舍五入保留指定长度小数位&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1161789/201710/1161789-20171009233705605-54295828.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;span&gt;isNan(对象)&lt;/span&gt;&lt;/strong&gt;:此方法可以判断传入的对象是不是数字类型，如果是则返回false，反之为true，同时对象为数字的字符串类型也是可以的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1161789/201710/1161789-20171009234116293-1868835636.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;window.location.reload()&lt;/span&gt;&lt;/strong&gt;:这个方法是可以刷新浏览器的，在js中可以直接写就好~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;span&gt;setTimeout(方法的字符串形式&lt;/span&gt;&lt;span&gt;, 刷新的时间&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/strong&gt;:此方法可以设置指定时间调用指定js方法，刷新时间为毫秒&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　&lt;strong&gt;&lt;span&gt;preventDefault()&lt;/span&gt;&lt;/strong&gt;:这个方法一般用于阻止dom的默认事件而使用的，什么是默认事件，例如，点击提交按钮提交表单、点击a标签跳转等都是，如果用此类标签做其他事情的话dom的默认事件肯定是要阻止的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　哈，可能不明白，给个例子(如果细究还是自行在浏览器打js脚本看吧。。。,说实话你这样我救不了你&lt;strong&gt;╰_╯&lt;/strong&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;1&lt;/span&gt; $(&quot;a&quot;).click(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;  　　event.preventDefault();
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 　　});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;关于js中的空、零、null、undefined的一些点拨&lt;/span&gt;&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;span&gt;在js中如果对象值不存在的时候一般返回undefined，这个undefined既不等于true也不等于false，但且记住undefined在if判断中是false，请区别于直接比较的值，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　在js中如果除了空和零之外的变量在比较时都是true(undefined这个关键字除外哈)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　在js中变量值是不存在null这一说，这个要区别于java中的空值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1161789/201710/1161789-20171009235859996-1789693138.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　额，最后个大家一个在dom里面写js的简便方法，我就直接上代码，自行研究，不解释哈~●ω●&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1161789/201710/1161789-20171010000335824-1819034755.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1161789/201710/1161789-20171010000302746-2045642216.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1161789/201710/1161789-20171010000359652-963213285.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt; &lt;strong&gt;本节结束啦，真开心~↖(▔▽▔)↗&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 09 Oct 2017 16:23:00 +0000</pubDate>
<dc:creator>funnyZpC</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/funnyzpc/p/7571998.html</dc:identifier>
</item>
<item>
<title>Windows下如何创建低权限进程 - scau_Joseph</title>
<link>http://www.cnblogs.com/liaoguifa/p/lower-process-integrity.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liaoguifa/p/lower-process-integrity.html</guid>
<description>&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;   1.  前言&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;在使用 &lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/&quot; target=&quot;_blank&quot;&gt;Sysinternals&lt;/a&gt; 出品的 Process Explorer 过程中，对 “&lt;strong&gt;Run as Limited User&lt;/strong&gt;” 功能的实现方式颇感兴趣，一番搜寻之下发现Mark大神在《&lt;a href=&quot;https://blogs.technet.microsoft.com/markrussinovich/2006/03/02/running-as-limited-user-the-easy-way/&quot; target=&quot;_blank&quot;&gt;Running as Limited User – the Easy Way&lt;/a&gt;》中对该功能的实现做了相关的阐述：&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;use the CreateRestrictedToken API to create a security context, called a token, that’s a stripped-down version of its own, removing administrative privileges and group membership. After generating a token that looks like one that Windows assigns to standard users Process Explorer calls CreateProcessAsUser to launch the target process with the new token.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用 CreateRestrictedToken API来创建安全上下文，降低令牌（Token）的管理员权限和组成员资格，使其创建的令牌看起来像Windows赋予普通用户时一样，然后使用此令牌作为传入参数调用CreateProcessAsUser来创建新的子进程。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;Process Explorer queries the privileges assigned to the Users group and strips out all other privileges, including powerful ones like SeDebugPrivilege, SeLoadDriverPrivilege and SeRestorePrivilege.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查询赋予用户组的特权并从当前进程权限中剔除这些权限比如SeDebugPrivilege、SeLoadDriverPrivilege和SeRestorePrivilege。&lt;/p&gt;

&lt;p&gt;刚好最近有个项目需要实现降低进程权限的功能，在一翻折腾下就将其实现了，下面将谈谈实现的历程，如果纰漏之处，不吝指出。&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;   2.  知识背书&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;在列出代码前需要了解一下一些实现原理，下面是一些相关的知识点，如果无耐心往下看，可以直接点击&lt;a href=&quot;http://www.cnblogs.com/liaoguifa/p/lower-process-integrity.html#code&quot;&gt;这里&lt;/a&gt;跳到代码实现处。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span&gt;安全对象&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;有资格拥有安全描述符的对象如文件、管道、进程、进程间同步对象等。所有已命名的Windows对象都是安全的，那些未被命名的对象比如线程或进程对象也可以拥有安全描述符。&lt;/p&gt;
&lt;p&gt;对于大多数的安全对象，当创建该对象时可以指定它的安全描述符。当一个安全对象被创建时，系统会对其赋予一个安全描述符，安全描述符包含由其创建者指定的安全信息，或者缺省的安全信息（如果没有特意进行指定的话）。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;   应用程序可以使特定的函数对已有的对象进行操作以来获取和设置安全信息。&lt;/li&gt;
&lt;li&gt;   每种类型的安全对象定义了它自身的访问权限和自身映射的通用访问权限。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;更详细内容见：&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa379557(v=vs.85).aspx&quot; target=&quot;_blank&quot;&gt;https://msdn.microsoft.com/en-us/library/windows/desktop/aa379557(v=vs.85).aspx&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span&gt;安全描述符（security descriptor）&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;包含用于保护安全对象的安全信息。&lt;/p&gt;
&lt;p&gt;安全描述符描述 对象的所有者（SIDs） 和 以下的访问控制列表：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;自由访问控制列表（DACL）：指明特定用户或组对该对象的访问是允许或拒绝；&lt;/li&gt;
&lt;li&gt;安全访问控制列表（SACL）：控制系统审计如何访问对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span&gt;&lt;span&gt;安全标识（Security Identifiers）&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;一定长度用来表示托管的唯一值。&lt;/p&gt;
&lt;p&gt;安全标识主要运用于如下几个方面：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在安全描述符中定义对象的所有者和基本组；&lt;/li&gt;
&lt;li&gt;在访问控制项中定义托管的权限是允许、拒绝或是审计；&lt;/li&gt;
&lt;li&gt;在访问令牌中定义用户和用户所在的组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span&gt;&lt;span&gt;访问令牌&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;包含登录用户的信息。用来描述一个进程或线程的安全上下文的对象，令牌的信息包含关联到进程或线程的账号的标识和特权。&lt;/p&gt;
&lt;p&gt;当一个用户登录时，系统对用户的账号和密码进行认证，如果登录成功，系统则创建一个访问令牌，每个进程运行时都有一个访问令牌代表当前的用户，访问令牌中的安全描述符指明当前用户所属的账号和所属的组账号，令牌也包含一系列由用户或用户所在组进行维护的权限，在一个进程试图进行访问安全对象或执行系统管理员任务过程中需要权限时，系统通过这个令牌来确认关联的用户。&lt;/p&gt;
&lt;p&gt;&lt;em&gt; &lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;span&gt;访问控制列表及其访问控制项&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;自由访问控制列表（DACL）包含若干个访问控制项（ACEs）。&lt;/p&gt;
&lt;p&gt;约定的执行规则如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;   如果对象没有自由访问控制列表（DACL），则任何用户对其均有完全的访问权限；&lt;/li&gt;
&lt;li&gt;   如果对象拥有DACL，那么系统仅允许那些在访问控制项（ACE）显式指明的访问权限；&lt;/li&gt;
&lt;li&gt;   如果在访问控制列表（DACL）中不存在访问控制项（ACE），那么系统不允许任何用户对其进行访问；&lt;/li&gt;
&lt;li&gt;   如果访问控制列表中的访问控制项对准许访问的用户或组数目有限，那么系统会隐式拒绝那些不在访问控制项中的其他托管的访问&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;需要注意的是访问控制项的排序很重要&lt;/strong&gt;。因为系统按照队列的方式读取访问控制项，直到访问被拒绝或允许。用户的访问拒绝ACE必须放在访问允许ACE的前头，否则当系统读到对组的访问允许ACE时，它会给当前限制的用户赋予访问的权限。系统在检测到请求访问被允许或拒绝后就不再往下检查。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;你可以通过标识允许访问的ACE来控制对对象的访问，你无需显式地拒绝一个对象的访问。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span&gt;线程和安全对象间的交互&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;当一个线程想要使用一个安全对象时，系统在线程执行前会进行访问审核，在访问审核中，系统将线程&lt;span&gt;访问令牌&lt;/span&gt;中的安全信息与对象&lt;span&gt;安全描述符&lt;/span&gt;中的安全信息进行比对。&lt;/p&gt;
&lt;p&gt;访问令牌中包含的安全标识（SIDs）可以指明与线程关联的用户，系统查看线程访问令牌中用户或组的SID，同时检查对象的自由访问控制列表（DACL），自由访问控制列表（DACL）中包含存储有指明对指定的用户或组的访问权限是允许或拒绝信息的访问控制项（ACE），系统检查每个访问控制项（ACE）直至出现指明针对此线程（的用户或组的SID）的访问权限是允许还是拒绝的ACE，或者到最终都没有对应的ACEs可以检查。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/450534/201710/450534-20171009172311074-1486251449.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（图片出处：&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa378890(v=vs.85).aspx&quot;&gt;https://msdn.microsoft.com/en-us/library/windows/desktop/aa378890(v=vs.85).aspx&lt;/a&gt;）&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;系统按照序列检查每个ACE，查询ACE中的托管与定义在线程中的托管（根据托管的SID）一致的ACE，直到如下的情况出现：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;   表明访问拒绝的ACE显式拒绝在线程的访问令牌中的一个托管的任何访问权限；&lt;/li&gt;
&lt;li&gt;   一个或多个表明访问允许的ACEs显式地为线程访问令牌中的托管提供所有访问权限；&lt;/li&gt;
&lt;li&gt;   所有ACEs已经比对审核完但至少有一个请求访问权限没有显式允许，这种情况下该访问权限则被隐式拒绝。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;一个访问控制列表（ACL）可以有多个的访问控制项（ACE）针对令牌的（同一个）SIDs，这种情况下每个ACE授予的访问权限是可以进行累积叠加，比如，如果一个ACE对一个组允许读的访问权限，而另一个ACE对该组内的一个用户允许写的访问权限，那么该用户对于当前对象就拥有了读和写的访问权限。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/450534/201710/450534-20171009172357371-1971223884.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（图片出处：&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa446597(v=vs.85).aspx&quot; target=&quot;_blank&quot;&gt;https://msdn.microsoft.com/en-us/library/windows/desktop/aa446597(v=vs.85).aspx&lt;/a&gt;）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，对于线程A，尽管在ACE@3中允许写权限，但因为在ACE@1中已经显式拒绝“Andrew”用户的访问权限，所以该安全对象对于线程A是不可访问的；对于线程B，在ACE@2中显式指明A组用户可以有写的权限，并且在ACE@3中允许任何用户读和执行的权限，所以线程B对这个安全对象拥有读、写以及执行的权限。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span&gt;完整性级别&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Windows完整性机制是对Windows安全架构的扩展，该完整性机制通过添加完整性等级到安全访问令牌和添加强制性标记访问控制项到安全描述符中的系统访问控制列表（SACL）&lt;/p&gt;
&lt;p&gt;进程在安全访问令牌中定义完整性等级，IE在保护模式下的完整性等级为低，从开始菜单运行的应用程序的等级为中等，需要管理员权限并以管理员权限运行的应用程序的等级为高。&lt;/p&gt;
&lt;p&gt;保护模式能够有效地减少IE进程附带的攻击行为如篡改和摧毁数据、安装恶意程序；相比其他程序，连接网络的程序更容易遭受网络的攻击因为它们更可能从未知源地址下载未受信任的内容，通过降低完整性等级或限制对其的允许权限，可以减少篡改系统或污染用户数据文件的风险。&lt;/p&gt;
&lt;p&gt;在系统访问控制列表（SACL）中有一个称为&lt;strong&gt;强制标识&lt;/strong&gt;的访问控制项（ACE），该控制项的安全描述符定义完整性等级或允许访问当前对象需要达到的等级，安全对象如果没有该控制项则默认拥有中等的完整性等级；&lt;/p&gt;
&lt;p&gt;即使用户在自由访问控制列表（DACL）中已经明确授予相应的写权限，低等级的进程也不能获取比其高等级的安全对象的写权限，&lt;strong&gt;完整性等级检验在用户访问权限审查之前完成。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所有的文件和注册表键在缺省下的完整性等级为中，而由低等完整性进程创建的安全对象，系统会自动地赋予其低等完整性强制标志，同样，由低等完整性进程创建的子进程也是在低完整性等级下运行。&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;120&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;完整性访问等级(IL)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;104&quot;&gt;
&lt;p&gt;&lt;span&gt;系统权限&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;94&quot;&gt;
&lt;p&gt;&lt;span&gt;安全标识&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;296&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;120&quot;&gt;
&lt;p&gt;&lt;span&gt;System&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;104&quot;&gt;
&lt;p&gt;&lt;span&gt;System&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;94&quot;&gt;
&lt;p&gt;&lt;span&gt;S-1-16-16384&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;296&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;120&quot;&gt;
&lt;p&gt;&lt;span&gt;High&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;104&quot;&gt;
&lt;p&gt;&lt;span&gt;Administrative&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;94&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;S-1-16-12288&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;296&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;可安装文件到Program Files文件夹、往敏感的注册表中如HKEY_LOCAL_MACHINE写数据&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;120&quot;&gt;
&lt;p&gt;&lt;span&gt;Medium&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;104&quot;&gt;
&lt;p&gt;&lt;span&gt;User&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;94&quot;&gt;
&lt;p&gt;&lt;span&gt;S-1-16-8192&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;296&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;创建和修改用户文档中的文件、往特定用户的注册表如HKEY_CURRENT_USER中写数据&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;120&quot;&gt;
&lt;p&gt;&lt;span&gt;Low&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;104&quot;&gt;
&lt;p&gt;&lt;span&gt;Untrusted&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;94&quot;&gt;
&lt;p&gt;&lt;span&gt;S-1-16-4096&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;296&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;仅能往低等级位置写数据如临时网络文件夹和注册表&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;HKEY_CURRENT_USER\Software\LowRegistry&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;低完整性进程可以往用户存档文件下写文件，通常为%USER PROFILE%\AppData\LocalLow，可以通过调用SHGetKnownFolderPath 函数并传入FOLDERID_LocalAppDataLow参数来获取完整的路径名称&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SHGetKnownFolderPath(FOLDERID_LocalAppDataLow, 0, NULL, szPath, ARRAYSIZE(szPath));&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;同样低完整性进程可以往指定的注册表下创建和修改子键，该注册表路径通常为HKEY_CURRENT_USER\Software\AppDataLow&lt;/p&gt;
&lt;table id=&quot;code&quot; border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;   3.  代码实现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;实现思路&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;创建新的普通用户组和系统管理员的安全描述符标识；&lt;/li&gt;
&lt;li&gt;获取当前进程的令牌，并根据令牌句柄获取当前进程所拥有的特权；&lt;/li&gt;
&lt;li&gt;通过已创建的普通用户组的安全描述符标识获取普通用户组所拥有的特权；&lt;/li&gt;
&lt;li&gt;给当前进程令牌中的管理员安全描述符添加Deny-only属性，以此达到避免新创建的进程以管理员作为其所有者；&lt;/li&gt;
&lt;li&gt;从当前进程拥有的特权中剔除普通用户组所没有的特权；&lt;/li&gt;
&lt;li&gt;从新的受限令牌中复制为模拟令牌；&lt;/li&gt;
&lt;li&gt;将模拟令牌的完整性特权设为低级，以限制新创建的进程对普通文档、可执行程序的写、执行等访问权限；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;143&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; CreateRestrictedProcess() 
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;    SECURITY_ATTRIBUTES sa;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt;     sa.nLength = &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(SECURITY_ATTRIBUTES);
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;     sa.bInheritHandle =&lt;span&gt; TRUE;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;     sa.lpSecurityDescriptor =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt;     TCHAR szCmdLine[CMDLINE_SIZE] = {&lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;     HANDLE hToken =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;     HANDLE hNewToken =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;     HANDLE hNewExToken =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt;     CHAR szIntegritySid[&lt;span&gt;20&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;S-1-16-4096&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;     PSID pIntegritySid =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;     PSID pUserGroupSID =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;     PSID pAdminSID =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; 
&lt;span&gt; 18&lt;/span&gt;     TOKEN_MANDATORY_LABEL tml = {&lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; 
&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;    PROCESS_INFORMATION pi;
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;    STARTUPINFO si;
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt;     BOOL bSuc =&lt;span&gt; FALSE;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;     ZeroMemory(&amp;amp;pi, &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(PROCESS_INFORMATION));
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; 
&lt;span&gt; 26&lt;/span&gt;     ZeroMemory(&amp;amp;si, &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(STARTUPINFO));
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;     si.cb = &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(STARTUPINFO);
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;     GetStartupInfo(&amp;amp;&lt;span&gt;si);
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;     DWORD fdwCreate = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;    __try
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;OpenProcessToken(GetCurrentProcess(),
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;MAXIMUM_ALLOWED,&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;             TOKEN_DUPLICATE |
&lt;span&gt; 37&lt;/span&gt;             TOKEN_ADJUST_DEFAULT |
&lt;span&gt; 38&lt;/span&gt;             TOKEN_QUERY |
&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;            TOKEN_ASSIGN_PRIMARY,
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;             &amp;amp;&lt;span&gt;hToken))
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;             &lt;span&gt;char&lt;/span&gt; szMsg[DEFAULT_MSG_SIZE] = {&lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;             Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OpenProcessToken failed, GLE = %u.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, GetLastError());
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;            __leave;
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; 
&lt;span&gt; 47&lt;/span&gt;         Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Using RestrictedTokens way !!!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         DWORD dwSize = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;         DWORD dwTokenInfoLength = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;         SID_IDENTIFIER_AUTHORITY SIDAuth =&lt;span&gt; SECURITY_NT_AUTHORITY;
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;         SID_IDENTIFIER_AUTHORITY SIDAuthNT =&lt;span&gt; SECURITY_NT_AUTHORITY;
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;AllocateAndInitializeSid(
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;             &amp;amp;&lt;span&gt;SIDAuthNT, 
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;             &lt;span&gt;0x2&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;             SECURITY_BUILTIN_DOMAIN_RID&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;0×20&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;            DOMAIN_ALIAS_RID_USERS, 
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;             &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;             &amp;amp;&lt;span&gt;pUserGroupSID))
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;             Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AllocateAndInitializeSid for UserGroup Error %u&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, GetLastError());
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;            __leave;
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create a SID for the BUILTIN\Administrators group.&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(! AllocateAndInitializeSid( &amp;amp;SIDAuth, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;            SECURITY_BUILTIN_DOMAIN_RID,
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;            DOMAIN_ALIAS_RID_ADMINS,
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;             &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;             &amp;amp;&lt;span&gt;pAdminSID) ) 
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;             Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AllocateAndInitializeSid for AdminGroup Error %u&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, GetLastError());
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;            __leave;
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt;         SID_AND_ATTRIBUTES SidToDisable[&lt;span&gt;1&lt;/span&gt;] = {&lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;         SidToDisable[&lt;span&gt;0&lt;/span&gt;].Sid =&lt;span&gt; pAdminSID;
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;         SidToDisable[&lt;span&gt;0&lt;/span&gt;].Attributes = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; 
&lt;span&gt; 79&lt;/span&gt;         PTOKEN_PRIVILEGES pTokenPrivileges =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;         PTOKEN_PRIVILEGES pTokenPrivilegesToDel =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!GetTokenInformation(hToken, TokenPrivileges, NULL, &lt;span&gt;0&lt;/span&gt;, &amp;amp;&lt;span&gt;dwSize))
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(GetLastError() ==&lt;span&gt; ERROR_INSUFFICIENT_BUFFER)
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                 pTokenPrivileges = (PTOKEN_PRIVILEGES)LocalAlloc(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, dwSize);
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                 pTokenPrivilegesToDel = (PTOKEN_PRIVILEGES)LocalAlloc(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, dwSize);
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(pTokenPrivileges != NULL &amp;amp;&amp;amp; pTokenPrivilegesToDel !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(!GetTokenInformation(hToken, TokenPrivileges, pTokenPrivileges, dwSize, &amp;amp;&lt;span&gt;dwSize))
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;                         Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GetTokenInformation about TokenPrivileges failed GTE = %u.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, GetLastError());
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;                        __leave;
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;                     &lt;span&gt;char&lt;/span&gt; szMsg[DEFAULT_MSG_SIZE] = {&lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;                     Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LocalAlloc for pTokenPrivileges failed GTE = %u.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, GetLastError());
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;                    __leave;
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; 
&lt;span&gt;104&lt;/span&gt;         LUID_AND_ATTRIBUTES *pTokenLUID = pTokenPrivileges-&amp;gt;&lt;span&gt;Privileges;
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;         Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CurrentToken's TokenPrivileges Count: %u&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, pTokenPrivileges-&amp;gt;&lt;span&gt;PrivilegeCount);
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;         DWORD dwLuidCount = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;         PLUID pPrivilegeLuid =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!CTWProcHelper::GetPrivilegeLUIDWithSID(pUserGroupSID, &amp;amp;pPrivilegeLuid, &amp;amp;&lt;span&gt;dwLuidCount))
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;             Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GetPrivilegeLUIDWithSID failed GTE = %u.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, GetLastError());
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(pPrivilegeLuid)
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;HeapFree(GetProcessHeap(), 0, pPrivilegeLuid);&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt; &lt;span&gt;                LocalFree(pPrivilegeLuid);
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;                 pPrivilegeLuid =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;            __leave;
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;         Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UserGroup's TokenPrivileges Count: %u&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, dwLuidCount);
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; 
&lt;span&gt;121&lt;/span&gt;         DWORD dwDelPrivilegeCount = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(DWORD dwIdx=&lt;span&gt;0&lt;/span&gt;; dwIdx&amp;lt;(pTokenPrivileges-&amp;gt;PrivilegeCount); dwIdx++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;             BOOL bFound =&lt;span&gt; FALSE;
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;             DWORD dwJdx = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(; dwJdx&amp;lt;dwLuidCount; dwJdx++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;if(memcmp(&amp;amp;(pTokenLUID[dwIdx].Luid), &amp;amp;(pPrivilegeLuid[dwJdx]), sizeof(LUID)) == 0)&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;((pTokenLUID[dwIdx].Luid.HighPart ==&lt;span&gt; pPrivilegeLuid[dwJdx].HighPart)
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;                     &amp;amp;&amp;amp;
&lt;span&gt;131&lt;/span&gt;                     (pTokenLUID[dwIdx].Luid.LowPart ==&lt;span&gt; pPrivilegeLuid[dwJdx].LowPart))
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;                     bFound =&lt;span&gt; TRUE;
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;bFound)
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;                 &lt;span&gt;char&lt;/span&gt; szPrivilegeName[MAX_PATH] = {&lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;                 DWORD dwNameSize =&lt;span&gt; MAX_PATH;
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(!LookupPrivilegeName(NULL, &amp;amp;(pTokenLUID[dwIdx].Luid), szPrivilegeName, &amp;amp;&lt;span&gt;dwNameSize))
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;                     Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LookupPrivilegeName failed GTE = %u.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, GetLastError());
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Dbg(&quot;NoFound[%u]: i=%u, j=%u&quot;, dwDelPrivilegeCount, dwIdx, dwJdx);&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;else
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    Dbg(&quot;NoFound[%u]: i=%u, j=%u -&amp;gt; %s&quot;, dwDelPrivilegeCount, dwIdx, dwJdx, szPrivilegeName);
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;150&lt;/span&gt;                 pTokenPrivilegesToDel-&amp;gt;Privileges[dwDelPrivilegeCount++].Luid =&lt;span&gt; pTokenLUID[dwIdx].Luid;
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;         pTokenPrivilegesToDel-&amp;gt;PrivilegeCount =&lt;span&gt; dwDelPrivilegeCount;
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;         Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TokenPrivileges to delete Count: %u&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, dwDelPrivilegeCount);
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(pPrivilegeLuid)
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;HeapFree(GetProcessHeap(), 0, pPrivilegeLuid);&lt;/span&gt;
&lt;span&gt;158&lt;/span&gt; &lt;span&gt;            LocalFree(pPrivilegeLuid);
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;             pPrivilegeLuid =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt; 
&lt;span&gt;162&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;CreateRestrictedToken(hToken,
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;             &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt;             &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, SidToDisable,
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;0, NULL,&lt;/span&gt;
&lt;span&gt;166&lt;/span&gt;             dwDelPrivilegeCount, pTokenPrivilegesToDel-&amp;gt;&lt;span&gt;Privileges,
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;             &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, NULL,
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;             &amp;amp;&lt;span&gt;hNewToken
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt; &lt;span&gt;            ))
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;             &lt;span&gt;char&lt;/span&gt; szMsg[DEFAULT_MSG_SIZE] = {&lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;             Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateRestrictedToken failed GTE = %u.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, GetLastError());
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt; &lt;span&gt;            __leave;
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt; 
&lt;span&gt;176&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Duplicate the primary token of the current process.&lt;/span&gt;
&lt;span&gt;177&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;DuplicateTokenEx(hNewToken, MAXIMUM_ALLOWED, NULL, SecurityImpersonation, 
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;             TokenPrimary, &amp;amp;&lt;span&gt;hNewExToken))
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;             Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DuplicateTokenEx failed GTE = %u.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, GetLastError());
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;             hNewExToken =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;__leave;&lt;/span&gt;
&lt;span&gt;183&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;185&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (ConvertStringSidToSid(szIntegritySid, &amp;amp;&lt;span&gt;pIntegritySid))
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;                 tml.Label.Attributes =&lt;span&gt; SE_GROUP_INTEGRITY;
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt;                 tml.Label.Sid =&lt;span&gt; pIntegritySid;
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt; 
&lt;span&gt;191&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set the process integrity level&lt;/span&gt;
&lt;span&gt;192&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (!SetTokenInformation(hNewExToken, TokenIntegrityLevel, &amp;amp;&lt;span&gt;tml,
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt;                     &lt;span&gt;sizeof&lt;/span&gt;(TOKEN_MANDATORY_LABEL) +&lt;span&gt; GetLengthSid(pIntegritySid)))
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt;                     Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SetTokenInformation failed GTE = %u.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, GetLastError());
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;__leave;&lt;/span&gt;
&lt;span&gt;197&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;199&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt; &lt;span&gt;                    CloseHandle(hNewToken);
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt;                     hNewToken =&lt;span&gt; hNewExToken;
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt;                     hNewExToken =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt;                     Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Assign Low Mandatory Level to New Token which used to CreateProcessAsUser.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt; 
&lt;span&gt;207&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt; 
&lt;span&gt;209&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!(bSuc =&lt;span&gt; CreateProcessAsUser(hNewToken, NULL,
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt;             szCmdLine,     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; command line &lt;/span&gt;
&lt;span&gt;211&lt;/span&gt;             NULL,          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO: process security attributes &lt;/span&gt;
&lt;span&gt;212&lt;/span&gt;             NULL,          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO: primary thread security attributes &lt;/span&gt;
&lt;span&gt;213&lt;/span&gt;             TRUE,         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; handles are inherited ?? &lt;/span&gt;
&lt;span&gt;214&lt;/span&gt;             fdwCreate,     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; creation flags&lt;/span&gt;
&lt;span&gt;215&lt;/span&gt;             NULL,          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; use parent's environment &lt;/span&gt;
&lt;span&gt;216&lt;/span&gt;             NULL,          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; use parent's current directory &lt;/span&gt;
&lt;span&gt;217&lt;/span&gt;             &amp;amp;si,           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; STARTUPINFO pointer &lt;/span&gt;
&lt;span&gt;218&lt;/span&gt;             &amp;amp;pi)))         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; receives PROCESS_INFORMATION &lt;/span&gt;
&lt;span&gt;219&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt;             Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateProcessAsUser failed GTE = %u.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, GetLastError());
&lt;/span&gt;&lt;span&gt;221&lt;/span&gt; &lt;span&gt;            __leave;
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt; 
&lt;span&gt;224&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(pTokenPrivileges)
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt; &lt;span&gt;            LocalFree(pTokenPrivileges);
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(pTokenPrivilegesToDel)
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt; &lt;span&gt;            LocalFree(pTokenPrivilegesToDel);
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt; &lt;span&gt;    __finally
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;235&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(pIntegritySid)
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt; &lt;span&gt;            LocalFree(pIntegritySid);
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(pUserGroupSID)
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt; &lt;span&gt;            LocalFree(pUserGroupSID);
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;243&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(pAdminSID)
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt; &lt;span&gt;            LocalFree(pAdminSID);
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt; 
&lt;span&gt;248&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Close the access token.
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt; 
&lt;span&gt;250&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (hToken)
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt; &lt;span&gt;            CloseHandle(hToken);
&lt;/span&gt;&lt;span&gt;253&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;254&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(hNewToken)
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;256&lt;/span&gt; &lt;span&gt;            CloseHandle(hNewToken);
&lt;/span&gt;&lt;span&gt;257&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(hNewExToken)
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt; &lt;span&gt;            CloseHandle(hNewExToken);
&lt;/span&gt;&lt;span&gt;261&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;262&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;bSuc)
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;264&lt;/span&gt;             Dbg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Retry to Create process in normal way.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Create process.&lt;/span&gt;
&lt;span&gt;266&lt;/span&gt;             bSuc =&lt;span&gt; CreateProcess(NULL, 
&lt;/span&gt;&lt;span&gt;267&lt;/span&gt;                 szCmdLine,     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; command line &lt;/span&gt;
&lt;span&gt;268&lt;/span&gt;                 NULL,          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO: process security attributes &lt;/span&gt;
&lt;span&gt;269&lt;/span&gt;                 NULL,          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO: primary thread security attributes &lt;/span&gt;
&lt;span&gt;270&lt;/span&gt;                 TRUE,          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; handles are inherited ?? &lt;/span&gt;
&lt;span&gt;271&lt;/span&gt;                 fdwCreate,     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; creation flags&lt;/span&gt;
&lt;span&gt;272&lt;/span&gt;                 NULL,          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; use parent's environment &lt;/span&gt;
&lt;span&gt;273&lt;/span&gt;                 NULL,          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; use parent's current directory &lt;/span&gt;
&lt;span&gt;274&lt;/span&gt;                 &amp;amp;si,           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; STARTUPINFO pointer &lt;/span&gt;
&lt;span&gt;275&lt;/span&gt;                 &amp;amp;pi);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; receives PROCESS_INFORMATION &lt;/span&gt;
&lt;span&gt;276&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;277&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;278&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;其中 GetPrivilegeLUIDWithSID 函数的实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; BOOL GetPrivilegeLUIDWithSID(PSID pSID, PLUID *&lt;span&gt;pLUID, PDWORD pDwCount)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    LSA_OBJECT_ATTRIBUTES ObjectAttributes;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    NTSTATUS ntsResult;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    LSA_HANDLE lsahPolicyHandle;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Object attributes are reserved, so initialize to zeros.&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     ZeroMemory(&amp;amp;ObjectAttributes, &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(ObjectAttributes));
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Get a handle to the Policy object.&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     ntsResult =&lt;span&gt; LsaOpenPolicy(
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         NULL,    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Name of the target system.&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &amp;amp;ObjectAttributes, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Object attributes.&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         POLICY_ALL_ACCESS, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Desired access permissions.&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &amp;amp;lsahPolicyHandle  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Receives the policy handle.&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        );
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (ntsResult !=&lt;span&gt; STATUS_SUCCESS)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OpenPolicy failed returned %lu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, LsaNtStatusToWinError(ntsResult));
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; FALSE;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    } 
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     PLSA_UNICODE_STRING UserRights =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    ULONG uRightCount;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     ntsResult = LsaEnumerateAccountRights(lsahPolicyHandle, pSID, &amp;amp;UserRights, &amp;amp;&lt;span&gt;uRightCount);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (ntsResult !=&lt;span&gt; STATUS_SUCCESS)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LsaEnumerateAccountRights failed returned %lu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, LsaNtStatusToWinError(ntsResult));
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        LsaClose(lsahPolicyHandle);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; FALSE;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     
&lt;span&gt;34&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LsaEnumerateAccountRights returned Right count: %lu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, uRightCount);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;     (*pDwCount) = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;pLUID = (PLUID)HeapAlloc(GetProcessHeap(), 0, uRightCount*sizeof(LUID));&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;     (*pLUID) = (PLUID)LocalAlloc(LPTR, uRightCount*&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(LUID));
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;((*pLUID) ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HeapAlloc for PLUID failed returned %u&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, GetLastError());
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        LsaClose(lsahPolicyHandle);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; FALSE;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(ULONG uIdx=&lt;span&gt;0&lt;/span&gt;; UserRights != NULL &amp;amp;&amp;amp; uIdx&amp;lt;uRightCount; uIdx++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; nLenOfMultiChars = WideCharToMultiByte(CP_ACP, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, UserRights[uIdx].Buffer, UserRights[uIdx].Length,
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             NULL, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, NULL, NULL);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         PTSTR pMultiCharStr = (PTSTR)HeapAlloc(GetProcessHeap(), &lt;span&gt;0&lt;/span&gt;, nLenOfMultiChars*&lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;char&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(pMultiCharStr !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;             WideCharToMultiByte(CP_ACP, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, UserRights[uIdx].Buffer, UserRights[uIdx].Length,
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;                pMultiCharStr, nLenOfMultiChars, NULL, NULL);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;            LUID luid;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(!LookupPrivilegeValue(NULL, pMultiCharStr, &amp;amp;&lt;span&gt;luid))
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;                 printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LookupPrivilegeValue about %s failed, GLE=%u.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, pMultiCharStr, GetLastError());
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                 HeapFree(GetProcessHeap(), &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, pMultiCharStr);
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             (*pLUID)[(*pDwCount)++] =&lt;span&gt; luid;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;             HeapFree(GetProcessHeap(), &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, pMultiCharStr);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;((ntsResult = LsaFreeMemory(UserRights)) !=&lt;span&gt; STATUS_SUCCESS)
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LsaFreeMemory failed returned %lu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, LsaNtStatusToWinError(ntsResult));
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    LsaClose(lsahPolicyHandle);
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; TRUE;
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 下图是普通创建子进程效果（使用 &lt;a href=&quot;https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer&quot; target=&quot;_blank&quot;&gt;Process Explorer&lt;/a&gt; 获取的进程信息，下同），可以看到：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;该进程的所有者为 Administrators；&lt;/li&gt;
&lt;li&gt;强制性标识等级为：高&lt;/li&gt;
&lt;li&gt;部分特权为 Enabled&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/450534/201710/450534-20171009172641074-646813245.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 通过执行上方的代码对新进程的创建令牌进行一系列的限制后，可以看到：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;进程的所有者：添加了Deny属性；&lt;/li&gt;
&lt;li&gt;强制性标识等级：低；&lt;/li&gt;
&lt;li&gt;部分特权被删除。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/450534/201710/450534-20171009172732434-1120383345.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;  4.  扩展延伸&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;托管&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;一个托管可以是用户账号、组账号或者登陆会话。是由访问控制项（ACE）赋予的，每个访问控制项（ACE）中都有一个安全标识（SID）用来表明特定的托管。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span&gt;特权（Privilege）&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;特权用于对一个对象或服务的访问控制，比自由访问控制更为严格，一个系统管理员通过使用特权控制那些用户可以操纵系统资源，一个应用程序在修改系统层级的资源需要使用到特权，比如修改系统时间和关闭系统。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;更多内容请查看如下链接：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb625963.aspx&quot; target=&quot;_blank&quot;&gt;Windows Integrity Mechanism Design&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb625960.aspx&quot; target=&quot;_blank&quot;&gt;Designing Applications to Run at a Low Integrity Level&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb250462(VS.85).aspx&quot; target=&quot;_blank&quot;&gt;Understanding and Working in Protected Mode Internet Explorer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms972827.aspx&quot; target=&quot;_blank&quot;&gt;Browsing the Web and Reading E-mail Safely as an Administrator&lt;/a&gt;（DropMyRight.exe的实现）&lt;/p&gt;

</description>
<pubDate>Mon, 09 Oct 2017 16:13:00 +0000</pubDate>
<dc:creator>scau_Joseph</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liaoguifa/p/lower-process-integrity.html</dc:identifier>
</item>
<item>
<title>单元测试多租户数据库提供商 - 东城慕水</title>
<link>http://www.cnblogs.com/chen-jie/p/asp-net-mvc-core-multi-tenant-data-context-unit-tests.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chen-jie/p/asp-net-mvc-core-multi-tenant-data-context-unit-tests.html</guid>
<description>&lt;p&gt;&lt;strong&gt;不定时更新翻译系列，此系列更新毫无时间规律，文笔菜翻译菜求各位看官老爷们轻喷，如觉得我翻译有问题请挪步原博客地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本博文翻译自：&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;http://gunnarpeipman.com/2017/08/multi-tenant-data-context-unit-tests/&quot;&gt;&lt;strong&gt;http://gunnarpeipman.com/2017/08/multi-tenant-data-context-unit-tests/&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我在ASP.NET Core Web应用程序中支持多个租户的博客中已经指出，租户可以使用单独的数据库。现在是时候为数据上下文编写一些测试，以确保在意外情况下行为正确。这篇文章涵盖数据环境和多租户的单元测试。&lt;/p&gt;
&lt;h3 id=&quot;我以前的多租户工作&quot;&gt;我以前的多租户工作&lt;/h3&gt;
&lt;p&gt;为了更好地了解我以前在ASP.NET Core和Entity Framework Core 2.0中的多租户工作，请仔细阅读以下文章：&lt;/p&gt;
&lt;h3 id=&quot;数据库上下文&quot;&gt;数据库上下文&lt;/h3&gt;
&lt;p&gt;为了让阅读更容易，我在这里给出了在以前的帖子中使用的简化版数据上下文&lt;/p&gt;
&lt;hr/&gt;&lt;pre&gt;
&lt;code&gt;public class PlaylistContext : DbContext
{
    private readonly Tenant _tenant;
 
    public DbSet&amp;lt;Playlist&amp;gt; Playlists { get; set; }
    public DbSet&amp;lt;Song&amp;gt; Songs { get; set; }
 
    public PlaylistContext(DbContextOptions&amp;lt;PlaylistContext&amp;gt; options,
                            ITenantProvider tenantProvider)
        : base(options)
    {
        _tenant = tenantProvider.GetTenant();
    }
 
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer(_tenant.DatabaseConnectionString);
 
        base.OnConfiguring(optionsBuilder);
    }
 
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity&amp;lt;Playlist&amp;gt;().HasKey(e =&amp;gt; e.Id);
        modelBuilder.Entity&amp;lt;Song&amp;gt;().HasKey(e =&amp;gt; e.Id);
 
        base.OnModelCreating(modelBuilder);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;p&gt;由于每个租户都有单独的数据库，因此无需通过全局查询过滤器自动强制租户ID到所有域实体。&lt;/p&gt;
&lt;h3 id=&quot;要测试什么&quot;&gt;要测试什么?&lt;/h3&gt;
&lt;p&gt;下面的数据库上下文使用租户提供者来检测租户必须使用的数据库的连接字符串。由于依赖租户提供商，因此编写一些测试以确保数据上下文类的行为像预期一样非常重要。那么可能出现什么问题呢？&lt;/p&gt;
&lt;p&gt;那么，单元测试有几件事要考虑：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;租户提供者为null，&lt;/li&gt;
&lt;li&gt;租户为null，&lt;/li&gt;
&lt;li&gt;缺少数据库连接字符串.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其实最后一件事情不应该发生，但世事无绝对。我们可能通过自定义构造的DTO列表序列化云端的租户，或者手动修改，导致链接字符串缺失，因此测试缺少的连接字符串是合理的。&lt;/p&gt;
&lt;h3 id=&quot;添加验证&quot;&gt;添加验证&lt;/h3&gt;
&lt;p&gt;在编写测试之前，我们将对无效数据的验证添加到数据上下文类中。以下代码涵盖以上所有三项检查。&lt;/p&gt;
&lt;hr/&gt;&lt;pre&gt;
&lt;code&gt;public class PlaylistContext : DbContext
{
    private readonly Tenant _tenant;
 
    public DbSet&amp;lt;Playlist&amp;gt; Playlists { get; set; }
    public DbSet&amp;lt;Song&amp;gt; Songs { get; set; }
 
    public PlaylistContext(DbContextOptions&amp;lt;PlaylistContext&amp;gt; options,
                            ITenantProvider tenantProvider)
        : base(options)
    {
 
        if(tenantProvider == null)
        {
            throw new ArgumentNullException(nameof(tenantProvider));
        }
 
        _tenant = tenantProvider.GetTenant();
 
        if(_tenant == null)
        {
            throw new NullReferenceException(&quot;Tenant is null&quot;);
        }
    }
 
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if(string.IsNullOrEmpty(_tenant.DatabaseConnectionString))
        {
            throw new NullReferenceException(&quot;Connection string is missing&quot;);
        }
 
        optionsBuilder.UseSqlServer(_tenant.DatabaseConnectionString);
 
        base.OnConfiguring(optionsBuilder);
    }
 
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity&amp;lt;Playlist&amp;gt;().HasKey(e =&amp;gt; e.Id);
        modelBuilder.Entity&amp;lt;Song&amp;gt;().HasKey(e =&amp;gt; e.Id);
 
        base.OnModelCreating(modelBuilder);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;h3 id=&quot;编写单元测试&quot;&gt;编写单元测试&lt;/h3&gt;
&lt;p&gt;为了测试数据上下文，在测试项目中我们需要一些额外的类。在单元测试中，系统的其他部分不应该发生集成，否则它们是集成测试。由于依赖于ITenantProvider接口，因此单元测试需要假的租户提供商。&lt;/p&gt;
&lt;hr/&gt;&lt;pre&gt;
&lt;code&gt;public class FakeTenantProvider : ITenantProvider
{
    private Tenant _tenant;
 
    public FakeTenantProvider(Tenant tenant)
    {
        _tenant = tenant;          
    }
 
    public Tenant GetTenant()
    {
        return _tenant;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;p&gt;还有一个问题因为接口ITenantProvider中的OnConfiguring()方法是受保护的。所以外部调用者只能通过反射来调用此方法。或者扩展原始数据上下文，并添加从基类调用受保护的OnConfiguring()方法的新实例。&lt;/p&gt;
&lt;hr/&gt;&lt;pre&gt;
&lt;code&gt;public class FakePlaylistContext : PlaylistContext
{
    public FakePlaylistContext(DbContextOptions&amp;lt;PlaylistContext&amp;gt; options, ITenantProvider tenantProvider) 
        : base(options, tenantProvider)
    {
    }
 
    public new void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        base.OnConfiguring(optionsBuilder);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;p&gt;使用这两个类，现在可以编写数据上下文的测试。&lt;/p&gt;
&lt;hr/&gt;&lt;pre&gt;
&lt;code&gt;[TestClass]
public class PlaylistContextTests
{
    [TestMethod]
    [ExpectedException(typeof(ArgumentNullException))]
    public void ThrowsExpetionIfTenantProviderIsNull()
    {
        var options = new DbContextOptions&amp;lt;PlaylistContext&amp;gt;();
        new PlaylistContext(options, null);
    }
 
    [TestMethod]
    [ExpectedException(typeof(NullReferenceException))]
    public void ThrowsExceptionIfTenantIsNull()
    {
        var options = new DbContextOptions&amp;lt;PlaylistContext&amp;gt;();
        var provider = new FakeTenantProvider(null);
        new PlaylistContext(options, provider);
    }
 
    [TestMethod]
    [ExpectedException(typeof(NullReferenceException))]
    public void ThrowsExceptionIfConnectionStringIsMissing()
    {
        var options = new DbContextOptions&amp;lt;PlaylistContext&amp;gt;();
        var tenant = new Tenant { Id = 1 };
        var provider = new FakeTenantProvider(tenant);
        var builder = new DbContextOptionsBuilder();
 
        var context = new FakePlaylistContext(options, provider);
 
        context.OnConfiguring(builder);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;p&gt;这些测试使用的是Microsoft测试工具，也可以在其他平台上使用ASP.NET Core项目。在Visual Studio中运行这些测试结果如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gunnarpeipman.com/wp-content/uploads/2017/08/dbcontext-tenant-provider-tests.png&quot; title=&quot;Unit tests for tenant provider in data context&quot; alt=&quot;Unit tests for tenant provider in data context&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所有通过的测试成功完成。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;向Entity Framework Core数据上下文注入的租户提供者引入了需要进行测试的情况。为了测试上下文，需要一个伪类和数据上下文的继承版本。由于没有复杂的对象图来模拟测试，所以测试很简单。但这些测试必须确保数据上下文处理有问题的情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎转载，转载请注明翻译原文出处(本文章)，原文出处(原博客地址)，然后谢谢观看&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果觉得我的翻译对您有帮助，请点击推荐支持：）&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 09 Oct 2017 16:00:00 +0000</pubDate>
<dc:creator>东城慕水</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chen-jie/p/asp-net-mvc-core-multi-tenant-data-context-unit-tests.html</dc:identifier>
</item>
<item>
<title>箱线图(boxplot)简介与举例 - Splace</title>
<link>http://www.cnblogs.com/space-place/p/7643480.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/space-place/p/7643480.html</guid>
<description>&lt;p&gt;&lt;br/&gt;&lt;h2&gt;&lt;span&gt;简述：&lt;/span&gt;&lt;/h2&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　盒图是在1977年由美国的统计学家约翰·图基(John Tukey)发明的。它由五个数值点组成：&lt;span&gt;最小值(min)，下四分位数(Q1)，中位数(median)，上四分位数(Q3)，最大值(max)。也可以往盒图里面加入平均值(mean)&lt;/span&gt;。如上图。下四分位数、中位数、上四分位数组成一个“带有隔间的盒子”。上四分位数到最大值之间建立一条延伸线，这个延伸线成为“胡须(whisker)”。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;http://www.blogjava.net/images/blogjava_net/norvid/44484/o_boxplot.png&quot; alt=&quot;&quot; width=&quot;393&quot; height=&quot;311&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　由于现实数据中总是存在各式各样地“脏数据”，也成为“离群点”，于是为了不因这些少数的离群数据导致整体特征的偏移，将这些离群点单独汇出，而盒图中的胡须的两级修改成最小观测值与最大观测值。这里有个经验，就是最大(最小)观测值设置为与四分位数值间距离为1.5个IQR(中间四分位数极差)。即：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/884095/201710/884095-20171009221403902-824833776.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;

&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;IQR = Q3-Q1，即上四分位数与下四分位数之间的差，也就是盒子的长度。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;最小观测值为min = Q1 - 1.5*IQR，如果存在离群点小于最小观测值，则胡须下限为最小观测值，离群点单独以点汇出。如果没有比最小观测值小的数，则胡须下限为最小值。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;最大观测值为max = Q3 -1.5*IQR，如果存在离群点大于最大观测值，则胡须上限为最大观测值，离群点单独以点汇出。如果没有比最大观测值大的数，则胡须上限为最大值。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;通过盒图，在分析数据的时候，盒图能够有效地帮助我们识别数据的特征：&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;54.334370677732&quot;&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt; 直观地识别数据集中的异常值(查看离群点)。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt; 判断数据集的数据离散程度和偏向(观察盒子的长度，上下隔间的形状，以及胡须的长度)。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;&lt;span&gt;实例：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;12位商学院毕业生月起薪的样本在这里按升序重复如下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2710 2755 2850 | 2880 2880 2890 | 2920 2940 2950 | 3050 3130 3325&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; = 2865　&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt; = 2905(中位数)　&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt; = 3000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　中位数是2 905，第一个四分位数&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; = 2865，第三个四分位数&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt; = 3000。检查这些数据，最小值为2710，最大值为3325。因此，薪水数据的五数概括数据为2710、2865、2905、3000、3325。大约1／4或25％的观察值在五数概括的相邻两个数字之间。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　箱线图是在五数概括的基础上对数据进行描述的图形方法。绘制箱线图的关键是计算中位数、四分位数&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;和&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt;。也可以使用四分位数全距&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;I&lt;/em&gt;&lt;em&gt;Q&lt;/em&gt;&lt;em&gt;R&lt;/em&gt; = &lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt; − &lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;。图1是月起薪数据的箱线图。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　绘制箱线图的步骤如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1．画一只箱子，箱子两端分别位于第一个和第三个四分位数上。对于薪水数据来说,&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; = 2865以及&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt; = 3000。这个箱子包括中间50％的数据。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2．在箱子中位数(薪水数据是2905)的位置画一条垂直线。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3．用四分位数全距&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;I&lt;/em&gt;&lt;em&gt;Q&lt;/em&gt;&lt;em&gt;R&lt;/em&gt; = &lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt; − &lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;，确定限制线的位置。箱线图的上、下限制线分别在比&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;低1.5(IQR)和比&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt;高1.5(IQR)的位置上。对于薪水数据来说，&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;I&lt;/em&gt;&lt;em&gt;Q&lt;/em&gt;&lt;em&gt;R&lt;/em&gt; = &lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt; − &lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; = 3000 − 2865 = 135。因此，限制线的位置在&lt;span class=&quot;texhtml&quot;&gt;2865 − 1.5(135) = 2662.5和&lt;span class=&quot;texhtml&quot;&gt;3000 + 1.5(135) = 3202.5处。两条限制线以外的数据可以认为是异常值。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　4．图1中的虚线称为触须线。触须线从箱子两端开始绘制，直至第3步中计算的限制线内的最小值和最大值。因此，薪水数据的触须线分别在2 710和3 130处结束。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　5．最后，每个异常值的位置都用星号“*”表示出来。在图1中，我们可以看到一个异常值，即3325。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;a class=&quot;image&quot; title=&quot;Image:图1 起薪数据带有上下限制线的箱线图.jpg&quot; href=&quot;http://wiki.mbalib.com/wiki/Image:%E5%9B%BE1_%E8%B5%B7%E8%96%AA%E6%95%B0%E6%8D%AE%E5%B8%A6%E6%9C%89%E4%B8%8A%E4%B8%8B%E9%99%90%E5%88%B6%E7%BA%BF%E7%9A%84%E7%AE%B1%E7%BA%BF%E5%9B%BE.jpg&quot;&gt;&lt;img src=&quot;http://wiki.mbalib.com/w/images/6/69/%E5%9B%BE1_%E8%B5%B7%E8%96%AA%E6%95%B0%E6%8D%AE%E5%B8%A6%E6%9C%89%E4%B8%8A%E4%B8%8B%E9%99%90%E5%88%B6%E7%BA%BF%E7%9A%84%E7%AE%B1%E7%BA%BF%E5%9B%BE.jpg&quot; alt=&quot;Image:图1 起薪数据带有上下限制线的箱线图.jpg&quot; longdesc=&quot;/wiki/Image:%E5%9B%BE1_%E8%B5%B7%E8%96%AA%E6%95%B0%E6%8D%AE%E5%B8%A6%E6%9C%89%E4%B8%8A%E4%B8%8B%E9%99%90%E5%88%B6%E7%BA%BF%E7%9A%84%E7%AE%B1%E7%BA%BF%E5%9B%BE.jpg&quot; width=&quot;562&quot; height=&quot;236&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在图1中，我们画出了表示上下界限位置的直线。画这些线是为了说明如何计算薪水数据的限制线并标出其位置。虽然限制线通常要计算出来，但是在箱线图中一般并不标示出来。图2显示了薪水数据的常见箱线图的形状。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;a class=&quot;image&quot; title=&quot;Image:图2 起薪数据的箱线图.jpg&quot; href=&quot;http://wiki.mbalib.com/wiki/Image:%E5%9B%BE2_%E8%B5%B7%E8%96%AA%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AE%B1%E7%BA%BF%E5%9B%BE.jpg&quot;&gt;&lt;img src=&quot;http://wiki.mbalib.com/w/images/0/0d/%E5%9B%BE2_%E8%B5%B7%E8%96%AA%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AE%B1%E7%BA%BF%E5%9B%BE.jpg&quot; alt=&quot;Image:图2 起薪数据的箱线图.jpg&quot; longdesc=&quot;/wiki/Image:%E5%9B%BE2_%E8%B5%B7%E8%96%AA%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AE%B1%E7%BA%BF%E5%9B%BE.jpg&quot; width=&quot;520&quot; height=&quot;189&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;seaborn(sns)调用举例：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; seaborn as sns
sns.set_style(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;whitegrid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
tips &lt;/span&gt;= sns.load_dataset(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tips&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 绘制箱线图&lt;/span&gt;
ax = sns.boxplot(x=tips[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;total_bill&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 竖着放的箱线图，也就是将x换成y&lt;/span&gt;
ax = sns.boxplot(y=tips[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;total_bill&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ref:&lt;/p&gt;
&lt;p&gt;1.&lt;a id=&quot;viewpost1_TitleUrl&quot; class=&quot;singleposttitle&quot; href=&quot;http://www.blogjava.net/norvid/articles/317235.html&quot;&gt;盒图(boxplot)&lt;/a&gt;: http://www.blogjava.net/norvid/articles/317235.html&lt;/p&gt;
&lt;p&gt;2. 箱线图: http://wiki.mbalib.com/wiki/%E7%AE%B1%E7%BA%BF%E5%9B%BE#_ref-1&lt;/p&gt;
&lt;p&gt;3. Seaborn(sns)官方文档学习笔记（第五章 分类数据的绘制） https://zhuanlan.zhihu.com/p/27683042&lt;/p&gt;
&lt;p&gt;4. &lt;span class=&quot;link_title&quot;&gt;&lt;a href=&quot;http://blog.csdn.net/suzyu12345/article/details/69029106&quot;&gt;python seaborn画图&lt;/a&gt;&lt;/span&gt; : http://blog.csdn.net/suzyu12345/article/details/69029106&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 09 Oct 2017 15:05:00 +0000</pubDate>
<dc:creator>Splace</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/space-place/p/7643480.html</dc:identifier>
</item>
<item>
<title>详解斯坦纳点及斯坦纳树及模版归纳总结 - Angel_Kitty</title>
<link>http://www.cnblogs.com/ECJTUACM-873284962/p/7643445.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ECJTUACM-873284962/p/7643445.html</guid>
<description>&lt;h2&gt;①&lt;span&gt;什么是斯坦纳点？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　假设原来已经给定了个点，库朗等指出需要引进的点数至多为，此种点称为斯坦纳点。过每一斯坦纳点，至多有三条边通过。若为三条边，则它们两两交成120°角；若为两条边，则此斯坦纳点必为某一已给定的点，且此两条边交成的角必大于或等于120°。其中最小的网络称为已给定点的集合的最小斯坦纳树，记作SMT。若此SMT的斯坦纳点中有等于给定点的点，则称此SMT为退化的，此给定点称为退化点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;构造方法：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1100338/201710/1100338-20171009223317824-1951787591.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;已知B，C，D，E可知B点为转轴线段BC绕B顺时针旋转60度得到正三角形，再以顶点F为转轴，FD构成的线段逆时针旋转得到新的正三角形顶点G，劣弧DF上任意一点都能和D，F构成三个，相同的，劣弧CB上的点也是。&lt;/p&gt;
&lt;p&gt;故将第四点E与G相连接在劣弧上得到一个交点，再由交点与F连接交劣弧CB于一点，即构成了非退化情况下的两斯坦纳点，枚举得到斯坦纳最小生成树，当与顶点连线不与劣弧有交点时则为该种结构的退化点情况.&lt;/p&gt;
&lt;h2&gt;②&lt;span&gt;什么是斯坦纳树？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;       斯坦纳树问题是组合优化学科中的一个问题。将指定点集合中的所有点连通，且边权总和最小的生成树称为最小斯坦纳树（Minimal Steiner Tree），其实最小生成树是最小斯坦纳树的一种特殊情况。而&lt;span&gt;斯坦纳树可以理解为使得指定集合中的点连通的树，但不一定最小。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;③&lt;span&gt;如何求解最小斯坦纳树？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;      可以用DP求解，dp[i][state]表示以i为根，指定集合中的点的连通状态为state的生成树的最小总权值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      转移方程有两重：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      第一重，先通过连通状态的子集进行转移。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      dp[i][state]=min{ dp[i][subset1]+dp[i][subset2] } &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      枚举子集的技巧可以用 for(sub=(state-1)&amp;amp;state;sub;sub=(sub-1)&amp;amp;state)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      第二重，在当前枚举的连通状态下，对该连通状态进行松弛操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      dp[i][state]=min{ dp[i][state], dp[j][state]+e[i][j] }&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      为什么只需对该连通状态进行松弛？因为更后面的连通状态会由先前的连通状态通过第一重转移得到，所以无需对别的连通状态松弛。松弛操作用SPFA即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      复杂度 O(n*3^k+cE*&lt;span&gt;2^k)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      c为SPFA复杂度中的常数，E为边的数量，但几乎达不到全部边的数量，甚至非常小。3^k来自于子集的转移sum{C(i,n)*2^i} (1&amp;lt;=i&amp;lt;=n)，用二项式展开求一下和。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;模版如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; *  Steiner Tree：求，使得指定K个点连通的生成树的最小总权值
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; *  st[i] 表示顶点i的标记值，如果i是指定集合内第m(0&amp;lt;=m&amp;lt;K)个点，则st[i]=1&amp;lt;&amp;lt;m 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; *  endSt=1&amp;lt;&amp;lt;K
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; *  dptree[i][state] 表示以i为根，连通状态为state的生成树值
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; CLR(x,a) memset(x,a,sizeof(x))
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; dptree[N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;K],st[N],endSt;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; vis[N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;K];
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; queue&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; que;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; input()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;    &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    *    输入，并且返回指定集合元素个数K
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    *    因为有时候元素个数需要通过输入数据处理出来，所以单独开个输入函数。
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initSteinerTree()
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     CLR(dptree,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     CLR(st,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++) CLR(vis[i],&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     endSt=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;input();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         dptree[i][st[i]]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; update(&lt;span&gt;int&lt;/span&gt; &amp;amp;a,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     a=(a&amp;gt;x || a==-&lt;span&gt;1&lt;/span&gt;)?&lt;span&gt; x : a;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SPFA(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; state)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;que.empty()){
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; u=&lt;span&gt;que.front();
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        que.pop();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         vis[u][state]=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=p[u];i!=-&lt;span&gt;1&lt;/span&gt;;i=&lt;span&gt;e[i].next){
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; v=&lt;span&gt;e[i].vid;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(dptree[v][st[v]|state]==-&lt;span&gt;1&lt;/span&gt; || 
&lt;span&gt;45&lt;/span&gt;                 dptree[v][st[v]|state]&amp;gt;dptree[u][state]+&lt;span&gt;e[i].w){
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;                 dptree[v][st[v]|state]=dptree[u][state]+&lt;span&gt;e[i].w;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(st[v]|state!=state ||&lt;span&gt; vis[v][state]) 
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                     &lt;span&gt;continue&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;只更新当前连通状态&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;                 vis[v][state]=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                que.push(v);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; 
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; steinerTree()
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;1&lt;/span&gt;;j&amp;lt;endSt;j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(st[i] &amp;amp;&amp;amp; (st[i]&amp;amp;j)==&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; sub=(j-&lt;span&gt;1&lt;/span&gt;)&amp;amp;j;sub;sub=(sub-&lt;span&gt;1&lt;/span&gt;)&amp;amp;&lt;span&gt;j){
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; x=st[i]|sub,y=st[i]|(j-&lt;span&gt;sub);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(dptree[i][x]!=-&lt;span&gt;1&lt;/span&gt; &amp;amp;&amp;amp; dptree[i][y]!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;                     update(dptree[i][j],dptree[i][x]+&lt;span&gt;dptree[i][y]);
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(dptree[i][j]!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) 
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;                 que.push(i),vis[i][j]=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;        SPFA(j);
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;④&lt;span&gt;学习心得&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　参考09年姜碧野神牛写的论文《SPFA的优化与应用》，里面提到了一道题——[WC2008]游览计划。这题让我立刻联想到了去年北京赛区的E题，差不多的模型，大概就是在一个图中求给定的k个点的斯坦纳生成树，给定点的个数k&amp;lt;=10。&lt;/p&gt;
&lt;div class=&quot;bct fc05 fc11 nbw-blog ztag&quot; readability=&quot;49&quot;&gt;
&lt;p&gt;       首先我们知道，最优解必然是一棵树，然后这棵树又是由若干棵子树合并成的，于是我们可以状态压缩，把k个节点的连通状态用一个二进制数j表示，dp[i][j]表示以i为根和对应状态为j的节点连通的子树的最小权值。有两种转移方法：&lt;/p&gt;
&lt;p&gt;       枚举子树的形态：dp[ i ][ j ]=min{ dp[ i ][ j ]，dp[ i ][ k ]+dp[ i ][ l ] }，其中k和l是对j的一个划分。&lt;/p&gt;
&lt;p&gt;       按照边进行松弛：dp[ i ][ j ]=&lt;span&gt;min{ dp[ i ][ j ]，dp[ i' ][ j ]+w[ i ][ i' ] }，其中i和i'之间有边相连。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       对于第一种转移，我们直接枚举子集就行了。对于第二种转移，我们仔细观察可以发现这个方程和最短路的约束条件是很类似的，于是我们可以用spfa或者dij来进行状态转移。枚举子集的复杂度=n*sum{C(k，i)*2^i，0&amp;lt;i=k}=n*3^k，spfa的复杂度为n*2^k。所以总复杂度为O(n*3^k)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       具体实现的时候我试了好几种不同的方法，一开始是直接把两种转移都看成图中的边，一遍spfa得出结果，大概如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bct fc05 fc11 nbw-blog ztag&quot; readability=&quot;47.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; spfa(){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;Q.empty()){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; x=Q.front()/&lt;span&gt;10000&lt;/span&gt;,y=Q.front()%&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;in&lt;/span&gt;[x][y]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        Q.pop();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(edge *i=Adj[x];i;i=i-&amp;gt;nxt)       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对当前节点的每条边都进行松弛操作&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             update(i-&amp;gt;v,s[i-&amp;gt;v]|y,d[x][y]+i-&amp;gt;&lt;span&gt;w);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; t=nn-&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;y;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=t;i;i=(i-&lt;span&gt;1&lt;/span&gt;)&amp;amp;t)            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;枚举补集的所有子集，进行松弛操作&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             update(x,y|i,d[x][y]+d[x][i|&lt;span&gt;s[x]]);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     这么做的复杂度是没有变的，但是常数非常大，hdu上跑了2500ms才过，仔细一想，我们发现第二松弛操作其实做了很多无用功，考虑能不能进行优化。&lt;/p&gt;
&lt;p&gt;       第二种松弛操作非常的耗时间，所以我们就不把它加到spfa里面进行转移，直接在外面进行枚举，实现更新，避免大量的重复计算。先枚举连通性j，对于所有的1&amp;lt;=i&amp;lt;=n，我们先进行第一种转移，既枚举子集进行更新。如果dp[i][j]被更新了，我们就把它加到队列里，最后再进行spfa()，这样按j分层的进行转移，大概如下：&lt;/p&gt;
&lt;div readability=&quot;22&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; y=&lt;span&gt;0&lt;/span&gt;;y&amp;lt;nn;y++)                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;枚举连通性&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; x=&lt;span&gt;1&lt;/span&gt;;x&amp;lt;=n;x++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;                 &lt;span&gt;bool&lt;/span&gt; flag=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=(y-&lt;span&gt;1&lt;/span&gt;)&amp;amp;y;i;i=(i-&lt;span&gt;1&lt;/span&gt;)&amp;amp;y)      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;枚举所有子集，进行第一种转移&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;                     flag|=update(x,y,d[x][i|s[x]]+d[x][(y-i)|&lt;span&gt;s[x]]);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(flag) Q.push(x*&lt;span&gt;10000&lt;/span&gt;+y);       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果节点被更新则加入队列&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;                 spfa();       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;spfa进行第二种转移&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;             }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       我本来以为这样会更快一些，结果跑了4700ms = =！顿时吐槽无力。&lt;/p&gt;
&lt;p&gt;       为啥这样会更慢呢？我觉的大概是由于spfa()的次数过多，所以导致很多节点被重复的更新了很多次，又产生了大量了重复计算，所以反而更慢了。那么就没有什么好办法吗？仔细一想，我发现进行spfa的时候只需要对当前层的节点进行spfa就行了，不需要整个图完全松弛一遍，因为更高的层都可以通过枚举子集而变成若干个更低的层，这样一次spfa的复杂度一下就降了下来，变成了O(n)级别，大概如下：&lt;/p&gt;
&lt;div readability=&quot;24.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(edge *i=Adj[x];i;i=i-&amp;gt;&lt;span&gt;nxt)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(update(i-&amp;gt;v,y|s[i-&amp;gt;v],d[x][y]+i-&amp;gt;w)&amp;amp;&amp;amp;y==(y|s[i-&amp;gt;v])&amp;amp;&amp;amp;!&lt;span&gt;in&lt;/span&gt;[i-&amp;gt;v][y]) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;只把处于相同层的节点加到队列中&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;in&lt;/span&gt;[i-&amp;gt;v][y]=&lt;span&gt;1&lt;/span&gt;,Q.push(i-&amp;gt;v*&lt;span&gt;10000&lt;/span&gt;+y); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样修改以后效果果然非常明显，1000ms就AC了。但还是不够快，别人最快的能够达到500ms。于是我baidu了一下，发现他们没有用spfa！大概就是把第二种转移表示成了另外一种形式：&lt;/p&gt;
&lt;p&gt;       dp[ i ][ j ]=min{ dp[ i ][ j ] , dp[ k ][ j ]+d[ k ][ i ] }，其中d[ k ][ i ]表示k到i的最短路。&lt;/p&gt;

&lt;p&gt;       很容易就能证明这样写方程也是对的，于是我们就可以先用floyed预处理出任意两点间的最短路，然后直接DP。这样做的总复杂度为O(n^3+n^2*2^k+n*3^k)，这个复杂度并不比上面的方法低，但由于hdu4085的n比较小，所以这样写反而比上一种方法要快上不少。但对于 &lt;span&gt;[WC2008]游览计划、ZOJ 3613 Wormhole Transport这两道题就不行了，n都达到了100甚至200的大小，这种方法要比前面一种慢。所以最后得出结论，还是前一种方法最稳定 = ^ =&lt;/span&gt;
&lt;h2&gt;⑤&lt;span&gt;更多习题分享&lt;/span&gt;&lt;/h2&gt;
&lt;/p&gt;
&lt;div readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;HDU 4085 Peach Blossom Spring&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;       11年北京赛区的E题，这题有点不同的地方在于，最后的答案可能是一个森林，所以我们要先求出斯坦纳树后进行DP。转移的时候要注意一点，只有人的个数和房子的个数相等的时候才算合法状态，所以我们要加一个check()函数进行检查。&lt;/p&gt;
&lt;div readability=&quot;41.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;80&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;cstdio&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;cstring&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include&amp;lt;vector&amp;gt;
&lt;span&gt; 4&lt;/span&gt; #include&amp;lt;queue&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include&amp;lt;algorithm&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; N 60
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; INF 2000000
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; edge{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; v,w;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     edge *&lt;span&gt;nxt;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }E[&lt;span&gt;2009&lt;/span&gt;],*Adj[N],*&lt;span&gt;cur;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n,m,K,nn;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; s[N],&lt;span&gt;in&lt;/span&gt;[N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; d[N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;10&lt;/span&gt;],dp[&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; queue&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; Q;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; addedge(&lt;span&gt;int&lt;/span&gt; u,&lt;span&gt;int&lt;/span&gt; v,&lt;span&gt;int&lt;/span&gt; w){cur-&amp;gt;v=v,cur-&amp;gt;w=w,cur-&amp;gt;nxt=Adj[u],Adj[u]=cur++&lt;span&gt;;}
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; check(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x){
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; r=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;x;i++,x&amp;gt;&amp;gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         r+=(x&amp;amp;&lt;span&gt;1&lt;/span&gt;)*(i&amp;lt;K?&lt;span&gt;1&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; r==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; inline &lt;span&gt;bool&lt;/span&gt; update(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt; y,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; w){
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(w&amp;lt;d[x][y]) &lt;span&gt;return&lt;/span&gt; d[x][y]=w,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; spfa(){
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;Q.empty()){
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; x=Q.front()/&lt;span&gt;10000&lt;/span&gt;,y=Q.front()%&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;in&lt;/span&gt;[x][y]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        Q.pop();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(edge *i=Adj[x];i;i=i-&amp;gt;&lt;span&gt;nxt)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(update(i-&amp;gt;v,y|s[i-&amp;gt;v],d[x][y]+i-&amp;gt;w)&amp;amp;&amp;amp;y==(y|s[i-&amp;gt;v])&amp;amp;&amp;amp;!&lt;span&gt;in&lt;/span&gt;[i-&amp;gt;&lt;span&gt;v][y])
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                 &lt;span&gt;in&lt;/span&gt;[i-&amp;gt;v][y]=&lt;span&gt;1&lt;/span&gt;,Q.push(i-&amp;gt;v*&lt;span&gt;10000&lt;/span&gt;+&lt;span&gt;y);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; init(){
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     cur=&lt;span&gt;E;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     memset(Adj,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(Adj));
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     memset(s,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(s));    
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;m,&amp;amp;&lt;span&gt;K);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     nn=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(&lt;span&gt;2&lt;/span&gt;*&lt;span&gt;K);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;nn;j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;             d[i][j]=&lt;span&gt;INF;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(m--&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;&lt;span&gt; u,v,w;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;u,&amp;amp;v,&amp;amp;&lt;span&gt;w);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        addedge(u,v,w);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        addedge(v,u,w);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;    }    
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=K;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         s[i]=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(i-&lt;span&gt;1&lt;/span&gt;),d[i][s[i]]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;                
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         s[n-i+&lt;span&gt;1&lt;/span&gt;]=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(K+i-&lt;span&gt;1&lt;/span&gt;),d[n-i+&lt;span&gt;1&lt;/span&gt;][s[n-i+&lt;span&gt;1&lt;/span&gt;]]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;        
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;    }    
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){    
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; T;
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;T);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(T--&lt;span&gt;){        
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;        init();
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; y=&lt;span&gt;0&lt;/span&gt;;y&amp;lt;nn;y++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; x=&lt;span&gt;1&lt;/span&gt;;x&amp;lt;=n;x++&lt;span&gt;){                
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=(y-&lt;span&gt;1&lt;/span&gt;)&amp;amp;y;i;i=(i-&lt;span&gt;1&lt;/span&gt;)&amp;amp;&lt;span&gt;y)
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;                     d[x][y]=min(d[x][y],d[x][i|s[x]]+d[x][(y-i)|&lt;span&gt;s[x]]);
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(d[x][y]&amp;lt;INF) Q.push(x*&lt;span&gt;10000&lt;/span&gt;+y),&lt;span&gt;in&lt;/span&gt;[x][y]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;            spfa();
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;nn;j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;             dp[j]=&lt;span&gt;INF;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++) dp[j]=&lt;span&gt;min(dp[j],d[i][j]);
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;nn;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(check(i))
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=i&amp;amp;(i-&lt;span&gt;1&lt;/span&gt;);j;j=(j-&lt;span&gt;1&lt;/span&gt;)&amp;amp;&lt;span&gt;i)
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(check(j))
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;                         dp[i]=min(dp[i],dp[j]+dp[i-&lt;span&gt;j]);
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(dp[nn-&lt;span&gt;1&lt;/span&gt;]&amp;gt;=INF) puts(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;No solution&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,dp[nn-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;[WC2008]游览计划&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;       这题要求一棵满足要求的斯坦纳树，基本上按照上面的做法写就行了，不过有一点恶心的就是要输出一组可行方案，所以DP的时候还要记录一下路径。&lt;/p&gt;
&lt;div readability=&quot;42&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;cstdio&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;cstring&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include&amp;lt;vector&amp;gt;
&lt;span&gt; 4&lt;/span&gt; #include&amp;lt;queue&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include&amp;lt;algorithm&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; INF 2000000
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; N 10
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; dx[]={&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     dy[]={&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,-&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; max_s,n,m;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; mat[N][N],st[N][N],vis[N][N],cnt;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; d[N][N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;N],pre[N][N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;N];
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;[N][N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;N];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; queue&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; Q;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; spfa(){
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; x,y,s,tx,ty,ts;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;Q.empty()){
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         x=Q.front()/&lt;span&gt;100000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         y=(Q.front()-x*&lt;span&gt;100000&lt;/span&gt;)/&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         s=Q.front()-x*&lt;span&gt;100000&lt;/span&gt;-y*&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        Q.pop();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;in&lt;/span&gt;[x][y][s]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;4&lt;/span&gt;;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             tx=x+dx[i],ty=y+&lt;span&gt;dy[i];
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(tx&amp;gt;=n||ty&amp;gt;=m||tx&amp;lt;&lt;span&gt;0&lt;/span&gt;||ty&amp;lt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             ts=s|&lt;span&gt;st[tx][ty];
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(d[x][y][s]+mat[tx][ty]&amp;lt;&lt;span&gt;d[tx][ty][ts]){
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 d[tx][ty][ts]=d[x][y][s]+&lt;span&gt;mat[tx][ty];
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 pre[tx][ty][ts]=x*&lt;span&gt;100000&lt;/span&gt;+y*&lt;span&gt;10000&lt;/span&gt;+&lt;span&gt;s;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;in&lt;/span&gt;[tx][ty][ts]&amp;amp;&amp;amp;s==ts) &lt;span&gt;in&lt;/span&gt;[tx][ty][ts]=&lt;span&gt;1&lt;/span&gt;,Q.push(tx*&lt;span&gt;100000&lt;/span&gt;+ty*&lt;span&gt;10000&lt;/span&gt;+&lt;span&gt;ts);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            }                
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; go(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt; y,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; s){
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     vis[x][y]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; t=&lt;span&gt;pre[x][y][s],tx,ty,ts;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!t) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     tx=t/&lt;span&gt;100000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     ty=(t-tx*&lt;span&gt;100000&lt;/span&gt;)/&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     ts=t-tx*&lt;span&gt;100000&lt;/span&gt;-ty*&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    go(tx,ty,ts);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(x==tx&amp;amp;&amp;amp;y==ty) go(x,y,(s-ts)|&lt;span&gt;st[x][y]);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;freopen(&quot;in.in&quot;,&quot;r&quot;,stdin);&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;&lt;span&gt;m);    
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;m;j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;mat[i][j]);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(!mat[i][j]) st[i][j]=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(cnt++&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        }    
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     max_s=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;cnt;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;m;j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; k=&lt;span&gt;0&lt;/span&gt;;k&amp;lt;max_s;k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;                 d[i][j][k]=&lt;span&gt;INF;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(st[i][j]) d[i][j][st[i][j]]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; k=&lt;span&gt;1&lt;/span&gt;;k&amp;lt;max_s;k++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;m;j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(st[i][j]&amp;amp;&amp;amp;!(st[i][j]&amp;amp;k)) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;                
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; x=(k-&lt;span&gt;1&lt;/span&gt;)&amp;amp;k;x;x=(x-&lt;span&gt;1&lt;/span&gt;)&amp;amp;&lt;span&gt;k){
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt; t=d[i][j][x|st[i][j]]+d[i][j][(k-x)|st[i][j]]-&lt;span&gt;mat[i][j];
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(t&amp;lt;d[i][j][k]) d[i][j][k]=t,pre[i][j][k]=i*&lt;span&gt;100000&lt;/span&gt;+j*&lt;span&gt;10000&lt;/span&gt;+(x|&lt;span&gt;st[i][j]);
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(d[i][j][k]&amp;lt;INF) Q.push(i*&lt;span&gt;100000&lt;/span&gt;+j*&lt;span&gt;10000&lt;/span&gt;+k),&lt;span&gt;in&lt;/span&gt;[i][j][k]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;        spfa();
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;m;j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(st[i][j]){
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;                 printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,d[i][j][max_s-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;                 go(i,j,max_s-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; x=&lt;span&gt;0&lt;/span&gt;;x&amp;lt;n;x++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; y=&lt;span&gt;0&lt;/span&gt;;y&amp;lt;m;y++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;(st[x][y]) putchar(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;                         &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(vis[x][y]) putchar(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;                         &lt;span&gt;else&lt;/span&gt; putchar(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;                     puts(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;ZOJ 3613 Wormhole Transport&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;       ZOJ Monthly, June 2012的C题。和HDU 4085差不多，有一点不同的是一个星球可能有很多个工厂，但是含有资源和含有工厂的星球个数都不超过4。还是先状态压缩，然后DP求出斯坦纳树。最优的方案有可能是森林，所以我们还要DP，dp[ i ]表示对应的工厂节点和资源节点组成的斯坦树森林的最优值。那么：&lt;/p&gt;
&lt;p&gt;       dp[ i ]=min{ dp[ i ]，dp[ j ]+dp[ k ] }，其中j和k为i的一个划分。&lt;/p&gt;
&lt;p&gt;       这里要注意一点，所有的状态i、j、k都要满足一个条件，就是连通的星球上工厂的个数要大于等于资源的个数，这样才是一个合法的状态，所以要加一个check()函数。最后再找到所含资源最多，花费最小的合法方案就是答案。&lt;/p&gt;
&lt;div readability=&quot;35&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;90&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;cstdio&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;cstring&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include&amp;lt;queue&amp;gt;
&lt;span&gt; 4&lt;/span&gt; #include&amp;lt;vector&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include&amp;lt;algorithm&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; N 209
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; edge{&lt;span&gt;int&lt;/span&gt; v,w;edge *nxt;}E[&lt;span&gt;10009&lt;/span&gt;],*Adj[N],*&lt;span&gt;cur;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n,m,nn;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; d[N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;8&lt;/span&gt;],dp[&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;[N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; S[N],P[N],st[N],fac[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;],cf,cs;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; queue&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; Q;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; addedge(&lt;span&gt;int&lt;/span&gt; u,&lt;span&gt;int&lt;/span&gt; v,&lt;span&gt;int&lt;/span&gt; w){cur-&amp;gt;v=v,cur-&amp;gt;w=w,cur-&amp;gt;nxt=Adj[u],Adj[u]=cur++&lt;span&gt;;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; up(&lt;span&gt;int&lt;/span&gt; &amp;amp;a,&lt;span&gt;int&lt;/span&gt; b){&lt;span&gt;if&lt;/span&gt;(a==-&lt;span&gt;1&lt;/span&gt;||a&amp;gt;b) a=&lt;span&gt;b;}
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; spfa(){
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;Q.empty()){
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; x=Q.front()/&lt;span&gt;1000&lt;/span&gt;,y=Q.front()%&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        Q.pop();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;in&lt;/span&gt;[x][y]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(edge *i=Adj[x];i;i=i-&amp;gt;&lt;span&gt;nxt)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(d[i-&amp;gt;v][y|st[i-&amp;gt;v]]==-&lt;span&gt;1&lt;/span&gt;||d[x][y]+i-&amp;gt;w&amp;lt;d[i-&amp;gt;v][y|st[i-&amp;gt;&lt;span&gt;v]]){
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 d[i-&amp;gt;v][y|st[i-&amp;gt;v]]=d[x][y]+i-&amp;gt;&lt;span&gt;w;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(y==(y|st[i-&amp;gt;v])&amp;amp;&amp;amp;!&lt;span&gt;in&lt;/span&gt;[i-&amp;gt;v][y]) &lt;span&gt;in&lt;/span&gt;[i-&amp;gt;v][y]=&lt;span&gt;1&lt;/span&gt;,Q.push(i-&amp;gt;v*&lt;span&gt;1000&lt;/span&gt;+&lt;span&gt;y);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            }                
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; check(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x){
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; t=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;x;i++,x&amp;gt;&amp;gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         t+=(x&amp;amp;&lt;span&gt;1&lt;/span&gt;)*(i&amp;lt;cf?fac[i]:-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; t&amp;gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; cnt(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x){
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; r=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;x;i++,x&amp;gt;&amp;gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         r+=(x&amp;amp;&lt;span&gt;1&lt;/span&gt;)*(i&amp;lt;cf?&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; r;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;n)+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         cur=&lt;span&gt;E;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         cf=cs=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         memset(Adj,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(Adj));
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         memset(st,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(st));
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         memset(d,-&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(d));
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         memset(dp,-&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(dp));        
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; ans=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;){            
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,P+i,S+&lt;span&gt;i);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(S[i]&amp;amp;&amp;amp;P[i]) P[i]--,S[i]=&lt;span&gt;0&lt;/span&gt;,ans++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(P[i]) st[i]=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;cf,fac[cf++]=P[i],d[i][st[i]]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        }        
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(S[i])
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;                 st[i]=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(cf+cs++),d[i][st[i]]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         nn=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(cf+&lt;span&gt;cs);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         
&lt;span&gt;60&lt;/span&gt;         scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;m);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;(m--&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;&lt;span&gt; u,v,w;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;             scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;u,&amp;amp;v,&amp;amp;&lt;span&gt;w);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;            addedge(u,v,w);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;            addedge(v,u,w);
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;         
&lt;span&gt;68&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; y=&lt;span&gt;1&lt;/span&gt;;y&amp;lt;nn;y++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; x=&lt;span&gt;1&lt;/span&gt;;x&amp;lt;=n;x++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(st[x]&amp;amp;&amp;amp;!(st[x]&amp;amp;y)) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=(y-&lt;span&gt;1&lt;/span&gt;)&amp;amp;y;i;i=(i-&lt;span&gt;1&lt;/span&gt;)&amp;amp;&lt;span&gt;y)
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(d[x][i|st[x]]!=-&lt;span&gt;1&lt;/span&gt;&amp;amp;&amp;amp;d[x][(y-i)|st[x]]!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;                         up(d[x][y],d[x][i|st[x]]+d[x][(y-i)|&lt;span&gt;st[x]]);
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(d[x][y]!=-&lt;span&gt;1&lt;/span&gt;) Q.push(x*&lt;span&gt;1000&lt;/span&gt;+y),&lt;span&gt;in&lt;/span&gt;[x][y]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; &lt;span&gt;            spfa();
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;nn;j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(d[i][j]!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;                    up(dp[j],d[i][j]);
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; num=&lt;span&gt;0&lt;/span&gt;,cost=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;nn;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(check(i)){
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=(i-&lt;span&gt;1&lt;/span&gt;)&amp;amp;i;j;j=(j-&lt;span&gt;1&lt;/span&gt;)&amp;amp;&lt;span&gt;i)
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(check(j)&amp;amp;&amp;amp;check(i-j)&amp;amp;&amp;amp;dp[j]!=-&lt;span&gt;1&lt;/span&gt;&amp;amp;&amp;amp;dp[i-j]!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt;                         up(dp[i],dp[j]+dp[i-&lt;span&gt;j]);
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; t=&lt;span&gt;cnt(i);
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(dp[i]!=-&lt;span&gt;1&lt;/span&gt;&amp;amp;&amp;amp;(t&amp;gt;num||(t==num&amp;amp;&amp;amp;dp[i]&amp;lt;&lt;span&gt;cost)))
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt;                     num=t,cost=&lt;span&gt;dp[i];
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;92&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d %d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,num+&lt;span&gt;ans,cost);
&lt;/span&gt;&lt;span&gt;93&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;94&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 09 Oct 2017 14:54:00 +0000</pubDate>
<dc:creator>Angel_Kitty</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ECJTUACM-873284962/p/7643445.html</dc:identifier>
</item>
<item>
<title>云计算---OpenStack Neutron详解 - 姚红</title>
<link>http://www.cnblogs.com/yaohong/p/7643424.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yaohong/p/7643424.html</guid>
<description>&lt;h2&gt;简介:&lt;/h2&gt;
&lt;p&gt;neutron是openstack核心项目之一，提供云计算环境下的虚拟网络功能&lt;/p&gt;
&lt;p&gt;OpenStack网络（neutron）管理OpenStack环境中&lt;span&gt;所有虚拟网络基础设施&lt;/span&gt;（VNI），&lt;span&gt;物理网络基础设施&lt;span&gt;（PNI）的&lt;span&gt;接入层&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;h2&gt;网络结构：&lt;/h2&gt;
&lt;p class=&quot;p0&quot;&gt;Neutron网络结构图，管理员创建和管理Neutron外部网络，是租户虚拟机与互联网信息交互的桥梁。更具体的，外部网络会分出一个子网，它是一组在互联网上可寻址的IP地址。一般情况下，外部网络只有一个（neutron是支持多个外部网络的），且由管理员创建。租户虚拟机创建和管理租户网络，每个网络可以根据需要划分成多个子网。诸多子网通过路由器与Neutron外部网络(图中具体是子网A)连接。路由器的gateway网关端连接外部网络的子网，interfaces接口端有多个，连接租户网络的子网。路由器及interface接口端连接的网络都是由租户根据需要自助创建，管理者只创建和管理Neutron外部网络部分。&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;总结来看，创建一个Neutron网络的过程如下：&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;       1 、首先管理员拿到一组可以在互联网上寻址的IP地址，并且创建一个外部网络和子网&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;       2、 租户创建一个网络和子网&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;       3、 租户创建一个路由器并且连接租户子网和外部网络&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;       4、 租户创建虚拟机&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;      &lt;img src=&quot;http://images2017.cnblogs.com/blog/1024482/201710/1024482-20171009224559824-1526517172.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;网络类型：&lt;/h2&gt;
&lt;p&gt;　　1：管理网络---用于 OpenStack 各组件之间的内部通信。&lt;/p&gt;
&lt;p&gt;　　2：数据网络---用于云部署中虚拟数据之间的通信。&lt;/p&gt;
&lt;p&gt;　　3：外部网络---公共网络，外部或 internet 可以访问的网络。&lt;/p&gt;
&lt;p&gt;　　4：API 网络---暴露所有的 OpenStack APIs,包括 OpenStack 网络 API 给租户们。 &lt;/p&gt;
&lt;p&gt;    　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024482/201710/1024482-20171009204323527-1439597966.png&quot; alt=&quot;&quot; width=&quot;567&quot; height=&quot;387&quot;/&gt;&lt;/p&gt;
&lt;h2&gt; 网络模式：&lt;/h2&gt;
&lt;p&gt;　　　　1：Flat模式---网桥模式，所有的都需要手工配置，属于平面网络，所以实例属于同一网络&lt;/p&gt;
&lt;p&gt;　　　　2：Flat DHCP模式---网桥模式，在网关处单独取了一个DHCP的进程，可以辅助用户进行网络配置&lt;/p&gt;
&lt;p&gt;　　　　3：VLAN模式---为每个不同的租户设置了不同的虚拟子网，在这个虚拟子网中，用户可以有自己的ip&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;    详解：&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;1：Flat模式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　　　　　1）指定一个子网，规定虚拟机能使用的ip范围，也就是一个ip池（分配ip不会超过这个范围，也就是配置里面的fixed_range，比如10.0.0.1/27，那么可用ip就有32 个）；&lt;/p&gt;
&lt;p&gt;　　　　　　2）创建实例时，从有效ip地址池接取一个IP，为虚拟机实例分配，然后在虚拟机启动时候注入虚拟机镜像（文件系统）；&lt;/p&gt;
&lt;p&gt;　　　　　　3）必须手动配置好网桥（br100），所有的系统实例都是和同一个网桥连接；网桥与连到网桥的实例组成一个虚拟网络，nova-network所在的节点作为默认网关。&lt;/p&gt;
&lt;p&gt;　　　　　　　　比如flat_interface=eth1;eth1的ip为10.0.0.1，其它网络ip在10.0.0.1/27内。flat interface--&amp;gt;br100--&amp;gt;flat network&lt;/p&gt;
&lt;p&gt;　　　　　　4）此后，网络控制器（nova-network节点）对虚拟机实例进行NAT转换，实现与外部的通信。&lt;/p&gt;
&lt;p&gt;　　　　　　注意：目前好像配置注入只能够对Linux类型的操作系统实例正常工作，网络配置保存在/etc/network/interfaces文件。&lt;/p&gt;
&lt;p&gt;                                  &lt;img src=&quot;http://images2017.cnblogs.com/blog/1024482/201710/1024482-20171009224349715-1428046779.png&quot; alt=&quot;&quot; width=&quot;425&quot; height=&quot;391&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2：&lt;strong&gt;Flat DHCP模式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　　　　　与Flat模式一样，从ip池取出ip分配给虚拟机实例，所有的实例都在计算节点中和一个网桥相关。不过，在这个模式里，控制节点做了更多一些的配置，尝试和以太网设备(默认为eth0)建立网桥，&lt;/p&gt;
&lt;p&gt;　　　　　　通过dhcp自动为实例分配flat网络的固定ip，可以回收释放ip。&lt;/p&gt;
&lt;p&gt;　　　　　　1）网络控制器（运行nova-network服务的节点）运行dusmasq作为DHCP服务器监听这个网桥；&lt;/p&gt;
&lt;p&gt;　　　　　　2）实例做一次dhcp discover操作，发送请求；&lt;/p&gt;
&lt;p&gt;　　　　　　3）网络控制器把从一个指定的子网中获得的IP地址响应给虚拟机实例；&lt;/p&gt;
&lt;p&gt;　　　　　　4）实例通过网络控制器与外部实现互相访问。&lt;/p&gt;
&lt;p&gt;                                    &lt;img src=&quot;http://images2017.cnblogs.com/blog/1024482/201710/1024482-20171009224419996-1012340113.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;3：&lt;strong&gt;VLAN网络模式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　　　　　OpenStack的默认网络管理模式，没有设置&lt;span class=&quot;pun&quot;&gt;--&lt;span class=&quot;pln&quot;&gt;network_manager&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;pln&quot;&gt;nova&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;network&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;manager&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;typ&quot;&gt;FlatDHCPManager或者FlatManager的时候默认为vlan。为了实现多台机器的安装，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;typ&quot;&gt;　　　　　　VLAN网络模式需要一个支持VLAN标签(IEEE 802.1Q)的交换机（switch）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　在这个模式里，为每个项目创建了VLAN和网桥。所有属于某个项目的实例都会连接到同一个VLAN，必要的时候会创建Linux网桥和VLAN。&lt;/p&gt;
&lt;p&gt;　　　　　　每个项目获得一些只能从VLAN内部访问的私有IP地址，即私网网段。每个项目拥有它自己的VLAN，Linux网桥还有子网。被网络管理员所指定的子网都会在需要的时候动态地分配给一个项目。&lt;/p&gt;
&lt;p&gt;　　　　　　1）网络控制器上的DHCP服务器为所有的VLAN所启动，从被分配到项目的子网中获取IP地址并传输到虚拟机实例。&lt;/p&gt;
&lt;p&gt;　　　　　　2）为了实现用户获得项目的实例，访问私网网段，需要创建一个特殊的VPN实例（代码名为cloudpipe，用了创建整数、key和vpn访问实例）。&lt;/p&gt;
&lt;p&gt;　　　　　　3）计算节点为用户生成了证明书和key，使得用户可以访问VPN，同时计算节点自动启动VPN。&lt;/p&gt;
&lt;p&gt;　　　　　　4）vpn访问。&lt;/p&gt;
&lt;p&gt;                                              &lt;img src=&quot;http://images2017.cnblogs.com/blog/1024482/201710/1024482-20171009224223371-443117131.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;3：Flat与vLAN的比较&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　　　　　在两种Flat模式里，网络控制器扮演默认网关的角色，实例都被分配了公共的IP地址（扁平式结构，都在一个桥接网络里）。&lt;/p&gt;
&lt;p&gt;　　　　　　vLAN模式功能丰富，很适合提供给企业内部部署使用。但是，需要支持vLAN的switches来连接，而且相对比较复杂，在小范围实验中常采用FlatDHCP模式。&lt;/p&gt;

</description>
<pubDate>Mon, 09 Oct 2017 14:48:00 +0000</pubDate>
<dc:creator>姚红</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yaohong/p/7643424.html</dc:identifier>
</item>
<item>
<title>机器学习之概率与统计（三）- 极大似然估计 - tanv</title>
<link>http://www.cnblogs.com/tan-v/p/7643166.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tan-v/p/7643166.html</guid>
<description>&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;     目录&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span&gt;&lt;a&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;一、参数估计&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;二、极大释然估计&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．似然函数&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．极大似然估计（MLE&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．log&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;似然函数&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．损失函数&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．求极大似然估计的一般步骤&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;三、常见分布的参数估计&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．高斯分布&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Bernoulli&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;分布&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;二项分布（Binomia&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;多项分布（Multinoull&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;四、机器学习模型的参数估计&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;回归&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．线性回归&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;2.1&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;线性回归的极大似然估计&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．Logistic&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;回归&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;3.1 Logistic&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;回归的&lt;span lang=&quot;EN-US&quot;&gt;极大似然估计&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;朴素贝叶斯(Naive Bayes Classifier, NBC)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;4.1&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;定义&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;4.2&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;朴素贝叶斯的极大似然估计&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;五、估计的评价&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;1.&lt;/span&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;估计量的评价标准&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;偏差&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;-&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;方差分解&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;3.&lt;/span&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;监督学习模型的偏差&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;-&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;方差分解&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;11&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;4.&lt;/span&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;估计的抽样分布&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;11&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;4.1&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;参数&lt;/span&gt;&lt;/span&gt;Bootstrap&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;12&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;4.2&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;非参数&lt;/span&gt;&lt;/span&gt;Bootstrap&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;12&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;　　参数估计，即估计模型的参数：给定模型&lt;span lang=&quot;EN-US&quot;&gt;p(&lt;strong&gt;x&lt;/strong&gt;|&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt;&lt;span&gt;和数据&lt;span lang=&quot;EN-US&quot;&gt;D&lt;/span&gt;，选择与数据最匹配的参数&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;　　常用估计模型参数的方法：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;　　(1)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;矩方法，比如一阶矩，二阶矩，&lt;span lang=&quot;EN-US&quot;&gt;…&lt;/span&gt;，&lt;span lang=&quot;EN-US&quot;&gt;K&lt;/span&gt;阶矩；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;　　(2)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;极大释然估计：频率学派&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;　　(3)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;贝叶斯估计：贝叶斯学派&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;．似然函数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;似然（&lt;span lang=&quot;EN-US&quot;&gt;likelihood&lt;/span&gt;，可能性的意思），描述的是事件发生可能性的大小。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;似然函数的定义：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;设数据&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;D=X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;,…,X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;N&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;为独立同分布（&lt;span lang=&quot;EN-US&quot;&gt;IID&lt;/span&gt;），其概率密度函数（&lt;span lang=&quot;EN-US&quot;&gt;pdf&lt;/span&gt;）为&lt;span lang=&quot;EN-US&quot;&gt;p(&lt;strong&gt;x&lt;/strong&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，则似然函数定义为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214228793-33578755.png&quot;&gt;&lt;img title=&quot;clip_image001&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214229246-175657021.png&quot; alt=&quot;clip_image001&quot; width=&quot;268&quot; height=&quot;65&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;即为在给定数据&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;D&lt;/span&gt;&lt;/strong&gt;的情况下，参数为&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的函数。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;．极大似然估计（&lt;span lang=&quot;EN-US&quot;&gt;MLE&lt;/span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;定义：使得似然函数&lt;span lang=&quot;EN-US&quot;&gt;L(&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt;&lt;span&gt;最大的&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的估计：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt; &lt;span&gt; &lt;/span&gt; &lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214229465-131927398.png&quot;&gt;&lt;img title=&quot;clip_image002&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214229668-859172599.png&quot; alt=&quot;clip_image002&quot; width=&quot;243&quot; height=&quot;71&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;．&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;似然函数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;定义：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214229934-2000770523.png&quot;&gt;&lt;img title=&quot;clip_image003&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214230246-130040136.png&quot; alt=&quot;clip_image003&quot; width=&quot;192&quot; height=&quot;40&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;即：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214230512-395874002.png&quot;&gt;&lt;img title=&quot;clip_image004&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214230871-221772368.png&quot; alt=&quot;clip_image004&quot; width=&quot;191&quot; height=&quot;60&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;性质：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;它和似然函数在相同的位置取极大值&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;在不引起混淆的情况下，有时记&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;似然函数为似然函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;相差常数倍也不影响似然函数取极大值的位置，因此似然函数中的常数项也可以抛弃&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（4）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;在分类中&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;似然有时亦称为交叉熵&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;(cross-entropy)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;．损失函数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;损失函数 &lt;span lang=&quot;EN-US&quot;&gt;=&lt;/span&gt; 负&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;似然函数，即：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;损失函数 &lt;span lang=&quot;EN-US&quot;&gt;= - log p(&lt;/span&gt;&lt;/span&gt; &lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;|D)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;．求极大似然估计的一般步骤&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;）选择模型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;）得到密度函数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;p(x)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;span lang=&quot;EN-US&quot;&gt;3&lt;/span&gt;）求似然函数&lt;span lang=&quot;EN-US&quot;&gt;L =&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Ʃ&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;log.p(x)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;span lang=&quot;EN-US&quot;&gt;4&lt;/span&gt;）对似然函数求极值（求导），得到参数估计&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;1．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;高斯分布&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;假设&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;,…,X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;N&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;~ N (μ, δ&lt;/span&gt;&lt;sup&gt;&lt;span&gt;2&lt;/span&gt;&lt;/sup&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，参数为&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;μ, δ&lt;/span&gt;&lt;sup&gt;&lt;span&gt;2&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;，则高斯分布：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214231059-768347394.png&quot;&gt;&lt;img title=&quot;clip_image005&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214231293-100690424.png&quot; alt=&quot;clip_image005&quot; width=&quot;621&quot; height=&quot;73&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;的似然函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214231512-1829102701.png&quot;&gt;&lt;img title=&quot;clip_image006&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214231699-680366730.png&quot; alt=&quot;clip_image006&quot; width=&quot;563&quot; height=&quot;229&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;样本均值：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214231918-1428906291.png&quot;&gt;&lt;img title=&quot;clip_image007&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214232105-1009416432.png&quot; alt=&quot;clip_image007&quot; width=&quot;142&quot; height=&quot;76&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;样本方差：&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214232324-1966061548.png&quot;&gt;&lt;img title=&quot;clip_image008&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214232621-1123394201.png&quot; alt=&quot;clip_image008&quot; width=&quot;243&quot; height=&quot;74&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;    　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;因为有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;               &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214232871-1530789014.png&quot;&gt;&lt;img title=&quot;clip_image009&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214233324-1466927999.png&quot; alt=&quot;clip_image009&quot; width=&quot;559&quot; height=&quot;70&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;高斯分布的似然函数化简为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214233715-960168608.png&quot;&gt;&lt;img title=&quot;clip_image010&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214234043-1383323512.png&quot; alt=&quot;clip_image010&quot; width=&quot;550&quot; height=&quot;73&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;求最大值（求梯度，解方程）：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214234293-2076499281.png&quot;&gt;&lt;img title=&quot;clip_image011&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214234512-2051494385.png&quot; alt=&quot;clip_image011&quot; width=&quot;311&quot; height=&quot;151&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;　　得到极值点（一阶导数为&lt;span lang=&quot;EN-US&quot;&gt;0&lt;/span&gt;）：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214234699-320853089.png&quot;&gt;&lt;img title=&quot;clip_image012[4]&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214234902-1773362397.png&quot; alt=&quot;clip_image012[4]&quot; width=&quot;422&quot; height=&quot;148&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;     说明，使用样本的均值和方差作为高斯分布的参数估计，是极大似然的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;2．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;分布&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;分布的密度函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214235090-895707257.png&quot;&gt;&lt;img title=&quot;clip_image013&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214235324-1640487760.png&quot; alt=&quot;clip_image013&quot; width=&quot;282&quot; height=&quot;49&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其似然函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214235527-1258940892.png&quot;&gt;&lt;img title=&quot;clip_image014&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214235730-1341080070.png&quot; alt=&quot;clip_image014&quot; width=&quot;594&quot; height=&quot;158&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;N&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;为试验结果为&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;的次数，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;N&lt;/span&gt;&lt;sub&gt;&lt;span&gt;2&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;为试验结果为&lt;span lang=&quot;EN-US&quot;&gt;0&lt;/span&gt;的次数，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214235902-261273663.png&quot;&gt;&lt;img title=&quot;clip_image015&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214236121-2130630508.png&quot; alt=&quot;clip_image015&quot; width=&quot;178&quot; height=&quot;146&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;求极大似然有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214236309-682651014.png&quot;&gt;&lt;img title=&quot;clip_image016&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214236496-698867589.png&quot; alt=&quot;clip_image016&quot; width=&quot;535&quot; height=&quot;78&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;即样本实验结果为&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;的比率，是&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;分布的参数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的极大释然估计。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;3．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;二项分布（&lt;span lang=&quot;EN-US&quot;&gt;Binomia&lt;/span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Binomia&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;分布的密度函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214236730-1867938549.png&quot;&gt;&lt;img title=&quot;clip_image017&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214236934-402153994.png&quot; alt=&quot;clip_image017&quot; width=&quot;352&quot; height=&quot;89&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其似然函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214237121-369330338.png&quot;&gt;&lt;img title=&quot;clip_image018&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214237309-1919436714.png&quot; alt=&quot;clip_image018&quot; width=&quot;430&quot; height=&quot;160&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其极大释然估计和&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;分布一样：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;求极大似然有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214237496-1819535251.png&quot;&gt;&lt;img title=&quot;clip_image016[1]&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214253605-1404196741.png&quot; alt=&quot;clip_image016[1]&quot; width=&quot;535&quot; height=&quot;78&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;即样本实验结果为&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;的比率，是 &lt;span lang=&quot;EN-US&quot;&gt;Binomia&lt;/span&gt;分布的参数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的极大释然估计。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;4．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;多项分布（&lt;span lang=&quot;EN-US&quot;&gt;Multinoull&lt;/span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Multinoull&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;分布的密度函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214253996-285238575.png&quot;&gt;&lt;img title=&quot;clip_image019&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214254355-1393798162.png&quot; alt=&quot;clip_image019&quot; width=&quot;495&quot; height=&quot;90&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其似然函数为（其中&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;N&lt;/span&gt;&lt;sub&gt;&lt;span&gt;K&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;表示&lt;span lang=&quot;EN-US&quot;&gt;N&lt;/span&gt;次试验中出现&lt;span lang=&quot;EN-US&quot;&gt;k&lt;/span&gt;的次数）：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214254715-983586747.png&quot;&gt;&lt;img title=&quot;clip_image020&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214255043-1296320017.png&quot; alt=&quot;clip_image020&quot; width=&quot;366&quot; height=&quot;83&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;约束条件为&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214255449-2078292665.png&quot;&gt;&lt;img title=&quot;clip_image021&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214256168-1628156031.png&quot; alt=&quot;clip_image021&quot; width=&quot;99&quot; height=&quot;63&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;采用拉格朗日乘子法求极值：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214256559-1433477019.png&quot;&gt;&lt;img title=&quot;clip_image022&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214256934-138982292.png&quot; alt=&quot;clip_image022&quot; width=&quot;369&quot; height=&quot;76&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;分别对λ和θ&lt;/span&gt;&lt;sub&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;求偏导并令其等于&lt;span lang=&quot;EN-US&quot;&gt;0&lt;/span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214257277-686585986.png&quot;&gt;&lt;img title=&quot;clip_image023&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214257684-683487492.png&quot; alt=&quot;clip_image023&quot; width=&quot;601&quot; height=&quot;146&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;即为θ的最大释然参数估计。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;1. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;回归&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;正态分布可用于回归系统噪声建模&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;回归是监督学习问题，是输入到输出的映射的学习。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;回归问题的模型：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214258230-1395595123.png&quot;&gt;&lt;img title=&quot;clip_image024&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214258590-1051831832.png&quot; alt=&quot;clip_image024&quot; width=&quot;191&quot; height=&quot;49&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;假设残差服从正态分布：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214258793-1043560598.png&quot;&gt;&lt;img title=&quot;clip_image025&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214258965-222015851.png&quot; alt=&quot;clip_image025&quot; width=&quot;162&quot; height=&quot;48&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;因此，回归问题的模型可以记为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214259152-958397199.png&quot;&gt;&lt;img title=&quot;clip_image026&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214259418-1937524994.png&quot; alt=&quot;clip_image026&quot; width=&quot;288&quot; height=&quot;50&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt; &lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;回归即预测其输出：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214259730-510722610.png&quot;&gt;&lt;img title=&quot;clip_image027&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214259902-1205436565.png&quot; alt=&quot;clip_image027&quot; width=&quot;129&quot; height=&quot;49&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;．线性回归&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;线性回归：输入与输出呈线性关系。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;相信回归的模型：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214300277-1575567142.png&quot;&gt;&lt;img title=&quot;clip_image028&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214300512-261879635.png&quot; alt=&quot;clip_image028&quot; width=&quot;213&quot; height=&quot;160&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;即：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214300934-2141197816.png&quot;&gt;&lt;img title=&quot;clip_image029&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214301309-1735705920.png&quot; alt=&quot;clip_image029&quot; width=&quot;269&quot; height=&quot;40&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其中&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;W&lt;/span&gt;&lt;sub&gt;&lt;span&gt;0&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;是截距，&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;W&lt;/span&gt;&lt;/strong&gt;为权重向量，&lt;span lang=&quot;EN-US&quot;&gt;ε&lt;/span&gt;为预测值和真值之间的残差。模型的参数为&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;（&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;W&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;, δ&lt;/span&gt;&lt;sup&gt;&lt;span&gt;2&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.1 &lt;/span&gt;&lt;span&gt;&lt;span&gt;线性回归的极大似然估计&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.1.1 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;线性回归的似然函数&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;线性回归的似然函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214301699-149380031.png&quot;&gt;&lt;img title=&quot;clip_image030&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214301965-1810476946.png&quot; alt=&quot;clip_image030&quot; width=&quot;586&quot; height=&quot;221&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其中，&lt;span lang=&quot;EN-US&quot;&gt;RSS&lt;/span&gt;表示残差平方和&lt;span lang=&quot;EN-US&quot;&gt;(residual sum of squares)&lt;/span&gt;，即残差向量的&lt;span lang=&quot;EN-US&quot;&gt;L2&lt;/span&gt;模：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214302215-1839397149.png&quot;&gt;&lt;img title=&quot;clip_image031&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214302449-2014258970.png&quot; alt=&quot;clip_image031&quot; width=&quot;470&quot; height=&quot;62&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;注：平均平方误差&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;(MSE)&lt;span&gt; &lt;/span&gt; = RSS/N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h4 align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.1.2 &lt;/span&gt;&lt;span&gt;&lt;span&gt;负&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;似然函数求参数估计&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;极大似然等价为极小负&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;似然损失&lt;span lang=&quot;EN-US&quot;&gt;(negative log likelihood&lt;/span&gt;，&lt;span lang=&quot;EN-US&quot;&gt;NLL)&lt;/span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214302668-1053131590.png&quot;&gt;&lt;img title=&quot;clip_image032&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214302934-1460044527.png&quot; alt=&quot;clip_image032&quot; width=&quot;616&quot; height=&quot;150&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;只取与&lt;span lang=&quot;EN-US&quot;&gt;w&lt;/span&gt;有关的项，得到：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214303184-598841890.png&quot;&gt;&lt;img title=&quot;clip_image033&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214303418-755815926.png&quot; alt=&quot;clip_image033&quot; width=&quot;444&quot; height=&quot;54&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;因为有矩阵求导：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214303684-614612168.png&quot;&gt;&lt;img title=&quot;clip_image034&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214303980-738008719.png&quot; alt=&quot;clip_image034&quot; width=&quot;257&quot; height=&quot;138&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;所以&lt;span lang=&quot;EN-US&quot;&gt;NLL&lt;/span&gt;求导有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214304184-1700413218.png&quot;&gt;&lt;img title=&quot;clip_image035&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214304449-1199153885.png&quot; alt=&quot;clip_image035&quot; width=&quot;425&quot; height=&quot;73&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;求解得到：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214304762-1469760570.png&quot;&gt;&lt;img title=&quot;clip_image036[4]&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214305012-416025163.png&quot; alt=&quot;clip_image036[4]&quot; width=&quot;241&quot; height=&quot;41&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;即为&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;W&lt;/span&gt;&lt;/strong&gt;的极大似然估计，把其代入&lt;span lang=&quot;EN-US&quot;&gt;NLL&lt;/span&gt;，则有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214305340-1710232410.png&quot;&gt;&lt;img title=&quot;clip_image037&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214305652-2054779250.png&quot; alt=&quot;clip_image037&quot; width=&quot;656&quot; height=&quot;69&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;求导有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214305965-333425291.png&quot;&gt;&lt;img title=&quot;clip_image038&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214306199-1112959219.png&quot; alt=&quot;clip_image038&quot; width=&quot;565&quot; height=&quot;72&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;求解得：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214306449-464595241.png&quot;&gt;&lt;img title=&quot;clip_image039&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214307199-1713966089.png&quot; alt=&quot;clip_image039&quot; width=&quot;580&quot; height=&quot;72&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;以上便是线性回归参数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;（&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;W&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;, δ&lt;/span&gt;&lt;sup&gt;&lt;span&gt;2&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;）的极大似然估计。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h4 align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.1.3 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;计算机求解线性回归的解极大似然估计&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）当样本数目&lt;span lang=&quot;EN-US&quot;&gt;N&lt;/span&gt;较小时，可采用&lt;span lang=&quot;EN-US&quot;&gt;OLS&lt;/span&gt;结论，用矩阵&lt;span lang=&quot;EN-US&quot;&gt;QR&lt;/span&gt;分解分解得到优化解。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）当样本数目&lt;span lang=&quot;EN-US&quot;&gt;N&lt;/span&gt;较大时，可采用随机梯度下降方法优化求解：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;目标函数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214307496-1190032193.png&quot;&gt;&lt;img title=&quot;clip_image040&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214307715-1898880836.png&quot; alt=&quot;clip_image040&quot; width=&quot;506&quot; height=&quot;84&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&amp;lt;2&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;梯度下降法步骤：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）给定初值&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;sup&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;ii)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;更新&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;w&lt;/span&gt;&lt;/strong&gt;，使得&lt;span lang=&quot;EN-US&quot;&gt;J(&lt;strong&gt;W&lt;/strong&gt;)&lt;/span&gt;越来越小&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214307996-1034900163.png&quot;&gt;&lt;img title=&quot;clip_image041&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214308230-751528066.png&quot; alt=&quot;clip_image041&quot; width=&quot;383&quot; height=&quot;145&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;iii) &lt;strong&gt;w&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的各维同时更新&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214308480-720287760.png&quot;&gt;&lt;img title=&quot;clip_image042&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214308715-920560574.png&quot; alt=&quot;clip_image042&quot; width=&quot;213&quot; height=&quot;52&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;iv)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;直到收敛到某个&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;w&lt;/span&gt;&lt;/strong&gt;值，使得&lt;span lang=&quot;EN-US&quot;&gt;J(&lt;strong&gt;W&lt;/strong&gt;)&lt;/span&gt;最小&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，&lt;span lang=&quot;EN-US&quot;&gt;α&lt;/span&gt;称为学习率，控制下降速度的大小。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;．&lt;span lang=&quot;EN-US&quot;&gt;Logistic&lt;/span&gt;回归&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;）&lt;span lang=&quot;EN-US&quot;&gt;Logistic&lt;/span&gt;回归是线性回归的扩展，用于分类任务（&lt;span lang=&quot;EN-US&quot;&gt;0, 1&lt;/span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;）分类目标为二值变量，因此服从&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;分布：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt; &lt;span&gt; &lt;/span&gt;&lt;span&gt;  &lt;/span&gt; P(y|θ)&lt;span&gt; &lt;/span&gt; =&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214308934-1170611262.png&quot;&gt;&lt;img title=&quot;clip_image044&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214309168-963412220.png&quot; alt=&quot;clip_image044&quot; width=&quot;76&quot; height=&quot;24&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其中&lt;span lang=&quot;EN-US&quot;&gt;y&lt;/span&gt;为类别输入（&lt;span lang=&quot;EN-US&quot;&gt;0,1&lt;/span&gt;）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;假设输入为&lt;span lang=&quot;EN-US&quot;&gt;x&lt;/span&gt;的线性组合，即输入为&lt;span lang=&quot;EN-US&quot;&gt;x&lt;/span&gt;的函数&lt;span&gt;μ&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(x)&lt;/span&gt;，则&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;分布的密度函数可以写为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt; P(y|&lt;/span&gt;&lt;span&gt;μ&lt;span lang=&quot;EN-US&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;)&lt;span&gt; &lt;/span&gt; =&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214309387-2025803618.png&quot;&gt;&lt;img title=&quot;clip_image046&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214309621-660886721.png&quot; alt=&quot;clip_image046&quot; width=&quot;124&quot; height=&quot;24&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其中：&lt;span lang=&quot;EN-US&quot;&gt;0&lt;/span&gt;≤μ&lt;span lang=&quot;EN-US&quot;&gt;(x)&lt;/span&gt;≤&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;在&lt;span lang=&quot;EN-US&quot;&gt;Logistic&lt;/span&gt;回归中，输入的&lt;span lang=&quot;EN-US&quot;&gt;x&lt;/span&gt;的函数&lt;span lang=&quot;EN-US&quot;&gt;(&lt;/span&gt;概率密度函数&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt;为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;μ(x) = &lt;span&gt;&lt;span&gt;&lt;span&gt;sigm&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;strong&gt;&lt;span&gt;w&lt;/span&gt;&lt;/strong&gt;&lt;sup&gt;&lt;span&gt;T&lt;/span&gt;&lt;/sup&gt;&lt;strong&gt;&lt;span&gt;x&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中&lt;span lang=&quot;EN-US&quot;&gt;sigm()&lt;/span&gt;为&lt;span lang=&quot;EN-US&quot;&gt;sigmoid&lt;/span&gt;函数，或&lt;span lang=&quot;EN-US&quot;&gt;logistic&lt;/span&gt;函数：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214309855-283739979.png&quot;&gt;&lt;img title=&quot;clip_image047&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214310105-1458411893.png&quot; alt=&quot;clip_image047&quot; width=&quot;322&quot; height=&quot;61&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（4）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;logistic&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;回归的概率密度函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214310324-595061672.png&quot;&gt;&lt;img title=&quot;clip_image048&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214310543-851347737.png&quot; alt=&quot;clip_image048&quot; width=&quot;326&quot; height=&quot;38&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3.1 Logistic&lt;/span&gt;&lt;span&gt;&lt;span&gt;回归的极大似然估计&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(1)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;负&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;似然函数求参数估计&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Logistic&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;回归的似然函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214310840-333767294.png&quot;&gt;&lt;img title=&quot;clip_image049&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214311074-1977824479.png&quot; alt=&quot;clip_image049&quot; width=&quot;475&quot; height=&quot;119&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;μ&lt;/span&gt;&lt;sub&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;μ&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;(x&lt;/span&gt;&lt;sub&gt;&lt;span&gt;i&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;) = sigm(&lt;/span&gt;&lt;strong&gt;&lt;span&gt;w&lt;/span&gt;&lt;/strong&gt;&lt;sup&gt;&lt;span&gt;T&lt;/span&gt;&lt;/sup&gt;&lt;strong&gt;&lt;span&gt;x&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt; y&lt;/span&gt;&lt;sub&gt;&lt;span&gt;i&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;分类标签（&lt;span lang=&quot;EN-US&quot;&gt;0,1&lt;/span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;梯度下降法求解&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;1）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;对似然函数进行求导&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214311293-1709943933.png&quot;&gt;&lt;img title=&quot;clip_image050&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214311527-580161076.png&quot; alt=&quot;clip_image050&quot; width=&quot;635&quot; height=&quot;367&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214311762-741939104.png&quot;&gt;&lt;img title=&quot;clip_image051&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214312012-97218087.png&quot; alt=&quot;clip_image051&quot; width=&quot;771&quot; height=&quot;319&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;以上用到的矩阵求导：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214312262-31310798.png&quot;&gt;&lt;img title=&quot;clip_image052&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214312465-1574764187.png&quot; alt=&quot;clip_image052&quot; width=&quot;260&quot; height=&quot;57&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;2）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;得到梯度函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214312699-2014412721.png&quot;&gt;&lt;img title=&quot;clip_image053&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214312949-1364836533.png&quot; alt=&quot;clip_image053&quot; width=&quot;259&quot; height=&quot;68&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;3）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;使用梯度进行迭代&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214313168-290028151.png&quot;&gt;&lt;img title=&quot;clip_image054&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214313387-1460845065.png&quot; alt=&quot;clip_image054&quot; width=&quot;362&quot; height=&quot;169&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;即：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214313605-118862499.png&quot;&gt;&lt;img title=&quot;clip_image055&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214313824-495804474.png&quot; alt=&quot;clip_image055&quot; width=&quot;375&quot; height=&quot;177&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214314027-1821538874.png&quot;&gt;&lt;img title=&quot;clip_image056&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214314230-1697824850.png&quot; alt=&quot;clip_image056&quot; width=&quot;172&quot; height=&quot;66&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;牛顿法求解&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;1）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;牛顿法也叫牛顿&lt;span lang=&quot;EN-US&quot;&gt;-&lt;/span&gt;拉夫逊（&lt;span lang=&quot;EN-US&quot;&gt;Newton-Raphson&lt;/span&gt;）方法，也叫二阶梯度下降法。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;2）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;原理：使用函数&lt;span lang=&quot;EN-US&quot;&gt;f(x)&lt;/span&gt;的泰勒级数的前面几项来寻找方程&lt;span lang=&quot;EN-US&quot;&gt;f(x)=0&lt;/span&gt;的根&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;3）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;步骤：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;i)&lt;/span&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;将导数&lt;span lang=&quot;EN-US&quot;&gt;g(&lt;strong&gt;w&lt;/strong&gt;)&lt;/span&gt;在&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;w&lt;/span&gt;&lt;sup&gt;&lt;span&gt;t&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;处进行&lt;span lang=&quot;EN-US&quot;&gt;Taylor&lt;/span&gt;展开&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214314918-545626882.png&quot;&gt;&lt;img title=&quot;clip_image057&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214315137-613694111.png&quot; alt=&quot;clip_image057&quot; width=&quot;645&quot; height=&quot;49&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;ii)&lt;/span&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;由上式得到：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214315449-141716266.png&quot;&gt;&lt;img title=&quot;clip_image058&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214315684-713415670.png&quot; alt=&quot;clip_image058&quot; width=&quot;321&quot; height=&quot;55&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;iii)&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;迭代式为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214315934-137851477.png&quot;&gt;&lt;img title=&quot;clip_image059&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214316199-1661567135.png&quot; alt=&quot;clip_image059&quot; width=&quot;343&quot; height=&quot;51&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;4.&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;朴素贝叶斯&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;(Naive Bayes Classifier, NBC)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;4.1&lt;/span&gt;&lt;span&gt;&lt;span&gt;定义&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;假设共有&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;C&lt;/span&gt;&lt;span&gt;个类别&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;y&lt;/span&gt;&lt;span&gt;∈&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(1,2,…,C)&lt;/span&gt;&lt;span&gt;，每个类别有特征&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;=(x&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;,x&lt;/span&gt;&lt;sub&gt;&lt;span&gt;2&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;,…x&lt;/span&gt;&lt;sub&gt;&lt;span&gt;D&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;),&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;则朴素贝叶斯为假设各维特征在给定类别标签的情况下条件独立：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214316590-1211129379.png&quot;&gt;&lt;img title=&quot;clip_image060&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214316918-1997021201.png&quot; alt=&quot;clip_image060&quot; width=&quot;393&quot; height=&quot;99&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;概率密度函数：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214317324-728998815.png&quot;&gt;&lt;img title=&quot;clip_image061&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214317590-2143997503.png&quot; alt=&quot;clip_image061&quot; width=&quot;352&quot; height=&quot;173&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，π、θ分别为&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的先验分布和类条件分布的参数。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;4.2&lt;/span&gt;&lt;span&gt;&lt;span&gt;朴素贝叶斯的极大似然估计&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;）似然函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214317777-2006724509.png&quot;&gt;&lt;img title=&quot;clip_image062&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214317980-416323865.png&quot; alt=&quot;clip_image062&quot; width=&quot;717&quot; height=&quot;91&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其中&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;N&lt;/span&gt;&lt;sub&gt;&lt;span&gt;c&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;为&lt;span lang=&quot;EN-US&quot;&gt;y=c&lt;/span&gt;的样本数。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;如果服从&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;分布&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214318246-1161607384.png&quot;&gt;&lt;img title=&quot;clip_image063&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214318480-1081190817.png&quot; alt=&quot;clip_image063&quot; width=&quot;255&quot; height=&quot;59&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;则参数估计：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214318730-2105333796.png&quot;&gt;&lt;img title=&quot;clip_image064&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214318980-183684268.png&quot; alt=&quot;clip_image064&quot; width=&quot;115&quot; height=&quot;78&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214319262-2024121413.png&quot;&gt;&lt;img title=&quot;clip_image065&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214319574-595340807.png&quot; alt=&quot;clip_image065&quot; width=&quot;627&quot; height=&quot;65&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;如果服从多值分布&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214319887-539130317.png&quot;&gt;&lt;img title=&quot;clip_image066&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214320137-1409264545.png&quot; alt=&quot;clip_image066&quot; width=&quot;213&quot; height=&quot;49&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;则参数估计：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214320402-1323616812.png&quot;&gt;&lt;img title=&quot;clip_image067&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214320668-1176784685.png&quot; alt=&quot;clip_image067&quot; width=&quot;256&quot; height=&quot;81&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214320965-834081128.png&quot;&gt;&lt;img title=&quot;clip_image068&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214321293-1244340058.png&quot; alt=&quot;clip_image068&quot; width=&quot;345&quot; height=&quot;54&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（4）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;如果服从正泰分布&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214321590-1761255775.png&quot;&gt;&lt;img title=&quot;clip_image069&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214321918-816218160.png&quot; alt=&quot;clip_image069&quot; width=&quot;261&quot; height=&quot;60&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;则参数估计：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214322152-1037325651.png&quot;&gt;&lt;img title=&quot;clip_image070&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214322418-1099594372.png&quot; alt=&quot;clip_image070&quot; width=&quot;309&quot; height=&quot;218&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（5）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;使用朴素贝叶斯进行预测&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;将给定数据条件&lt;span lang=&quot;EN-US&quot;&gt;D&lt;/span&gt;换成参数的&lt;span lang=&quot;EN-US&quot;&gt;MLE&lt;/span&gt;插入，得到：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214322652-409339990.png&quot;&gt;&lt;img title=&quot;clip_image071&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214322855-1739688309.png&quot; alt=&quot;clip_image071&quot; width=&quot;544&quot; height=&quot;81&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;例如&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;分布的预测：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214323043-1930217042.png&quot;&gt;&lt;img title=&quot;clip_image072&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214323277-1889067048.png&quot; alt=&quot;clip_image072&quot; width=&quot;340&quot; height=&quot;171&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;估计量的评价标准&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;一个好的估计具有的性质：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;无偏性：估计量的期望等于真值的期望：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;即估计的偏差&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(bias)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214323543-1763087500.png&quot;&gt;&lt;img title=&quot;clip_image073&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214323887-2057338072.png&quot; alt=&quot;clip_image073&quot; width=&quot;234&quot; height=&quot;56&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;等于&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;0。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;相容性&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;若：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214324137-2144465178.png&quot;&gt;&lt;img title=&quot;clip_image074&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214324512-916609638.png&quot; alt=&quot;clip_image074&quot; width=&quot;109&quot; height=&quot;40&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;则该估计是相容&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(consistent)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;有效性&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;无偏估计中，方差较小的一个更有效（收敛速度更快）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;偏差&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;-&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;方差分解&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;点估计的性能通过均方误差&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(MSE, mean squared error)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;来评价：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214324762-992177958.png&quot;&gt;&lt;img title=&quot;clip_image075&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214325043-200649088.png&quot; alt=&quot;clip_image075&quot; width=&quot;187&quot; height=&quot;54&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;可分解为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214325277-231928485.png&quot;&gt;&lt;img title=&quot;clip_image076&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214325543-1793630838.png&quot; alt=&quot;clip_image076&quot; width=&quot;240&quot; height=&quot;54&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;估计的偏差为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214325809-1628169081.png&quot;&gt;&lt;img title=&quot;clip_image077&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214326074-334117165.png&quot; alt=&quot;clip_image077&quot; width=&quot;248&quot; height=&quot;57&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;估计的变化程度&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(&lt;/span&gt;&lt;span&gt;精度&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214326324-2051161515.png&quot;&gt;&lt;img title=&quot;clip_image078&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214326574-284664788.png&quot; alt=&quot;clip_image078&quot; width=&quot;48&quot; height=&quot;40&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;如果&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;bias = 0&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;称其为无偏估计&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;为了使估计的&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;MSE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;小，估计的偏差和方差到要小。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;监督学习模型的偏差&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;方差分解&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;在回归任务中，学习算法&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;f&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的平方预测误差期望为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214326855-1425183674.png&quot;&gt;&lt;img title=&quot;clip_image079&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214327121-1244175011.png&quot; alt=&quot;clip_image079&quot; width=&quot;755&quot; height=&quot;467&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;偏差：学习算法的预测的期望与真实结果的偏离程度&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;,&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;即刻画了学习算法本身的拟合能力。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;方差：同样大小的训练集的变动所导致的学习性能的变化&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;,&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;即刻画了数据扰动所造成的影响。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;噪声：在当前任务上任何学习算法所能达到的期望泛化误差的下界&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;,&lt;/span&gt; &lt;span&gt;即刻画了学习问题本身的&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;难度。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;估计的抽样分布&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;解决的问题：分布的参数真值未知，无法产生真实的模拟数据。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;如何解决？：估计的抽样分布&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;估计的抽样分布：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;假设从真实分布：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214327340-1520461135.png&quot;&gt;&lt;img title=&quot;clip_image080&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214327543-1451938298.png&quot; alt=&quot;clip_image080&quot; width=&quot;190&quot; height=&quot;56&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;中进行&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;S&lt;/span&gt;&lt;span&gt;次抽样，每次的样本集的大小均为&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;N,&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;得到数据集合&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214327730-967915860.png&quot;&gt;&lt;img title=&quot;clip_image081&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214328074-560836117.png&quot; alt=&quot;clip_image081&quot; width=&quot;420&quot; height=&quot;71&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;根据每次抽样得到的数据&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;D(s)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，都会得到一个估计：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214328324-1785697001.png&quot;&gt;&lt;img title=&quot;clip_image082&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214328543-626935081.png&quot; alt=&quot;clip_image082&quot; width=&quot;101&quot; height=&quot;41&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;当&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;S -&amp;gt; ∞&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;时，使用估计的参数代替真实的参数，称为估计的抽样分布。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;4.1 &lt;/span&gt;&lt;span&gt;&lt;span&gt;参数&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Bootstrap&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Bootstrap&lt;/span&gt;&lt;span&gt;（一种重采样技术），用&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214328887-1285908964.png&quot;&gt;&lt;img title=&quot;clip_image084&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214329387-226190665.png&quot; alt=&quot;clip_image084&quot; width=&quot;13&quot; height=&quot;29&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;代替&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214329730-1183862755.png&quot;&gt;&lt;img title=&quot;clip_image086[4]&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214329887-1123471270.png&quot; alt=&quot;clip_image086[4]&quot; width=&quot;19&quot; height=&quot;21&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，从分布&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214330105-979049297.png&quot;&gt;&lt;img title=&quot;clip_image088[4]&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214330293-381075116.png&quot; alt=&quot;clip_image088[4]&quot; width=&quot;53&quot; height=&quot;32&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;中产生样本。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;4.2 &lt;/span&gt;&lt;span&gt;&lt;span&gt;非参数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Bootstrap&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;从原始数据中进行&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;N&lt;/span&gt;&lt;span&gt;次有放回地采样&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;个数据，用经验分布近似真正的分布&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;               - tany 2017年10月9日于杭州&lt;/p&gt;
</description>
<pubDate>Mon, 09 Oct 2017 14:04:00 +0000</pubDate>
<dc:creator>tanv</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tan-v/p/7643166.html</dc:identifier>
</item>
<item>
<title>详谈字符编码[二]代码页是什么 - painterQ</title>
<link>http://www.cnblogs.com/painterQ/p/7642797.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/painterQ/p/7642797.html</guid>
<description>&lt;p&gt;        上一篇关于字符编码的随笔介绍了编码，输入码，机内码，字形码，字形库等概念。除此之外，还有一些其他的概念我们不得不了解，它们已经不属于现在，但是却时常影响着现在。代码页，正是这些有历史感的概念之一。这篇博文带你了解代码页和当前Windows对Unicode和ANSI编码的支持情况，末尾分析了一个乱码的案例，出于某知名软件，你一定不想错过。&lt;/p&gt;
&lt;h2&gt;Windows的默认编码？&lt;/h2&gt;
&lt;p&gt;        偶尔在知乎看到这样的问题：为什么中文Windows选择GBK作为默认编码？其实会有这样的误解也难怪，为什么这么说呢？大家都从控制台的Helloworld开始，后来想要输出中文时自然先想到printf(&quot;你好，世界&quot;);运行发现真的出现了中文，仿佛英文和中文没什么区别，世界很美好的感觉。但学习更多之后发现Windows下的strlen(&quot;你好，世界&quot;)的值竟然是10（严格说是MinGW下使用GBK作源编码时或者使用VS时才是10），第一次感觉到了英文字母与汉字的区别，于是我们去寻找原因，终于得知GBK编码之类的各种编码，也知道了代码页这个令人疑惑的名词。你好世界，世界却是灰色的。&lt;/p&gt;
&lt;p&gt;        实际上微软早就声明：&lt;strong&gt;“UTF-16Little-endian是Microsoft以及Windows操作系统中的编码标准”&lt;/strong&gt;。在Windows2000以前的操作系统上，内码的编码是和语言相关的（ANSI编码）。那时候简体中文版的Windows使用GBK，所有的中文的软件中的字符串也都是GBK，所以在window上运行也不会乱码。但是可想而至，这二者一旦不匹配就会出现乱码。不同语言国家的Windows编码都不一样，因此微软使用了代码页来解释字符编码，比如简体中文版的Windows默认代码页就是GBK，这意味着默认使用GBK来解释字符串，所以能显示中文是必然的，显示其他的语言（比如日语）是乱码也是必然的。&lt;/p&gt;
&lt;p&gt;        Windows2000之后（严格说是Windows NT 3.1之后）默认使用UTF-16作为编码标准。这是什么意思呢，意思就是全世界的字符你都可以处理，如果安装了相应的字体，你还可以显示全部字符，如果安装了相关输入法你还可以输入任意一种语言。但是哪些不是UTF-16编码的程序还能在新平台下运行吗？可以的，在这一方面微软还是负责任的，毕竟当初是自己提出的代码页方案，不能把软件开发商们都得罪了。所以直到今天（Windows 10）微软都是兼容二者，但是提倡使用UTF-16。那么Windows的默认编码是什么呢？事实是最好不要使用”默认编码“这个词，因为根本没有什么默认的编码（你可以决定使用任何一种编码，只不过别人不认识而已），推荐使用官方的说法“编码标准”，而且微软的编码标准是UTF-16L。&lt;/p&gt;
&lt;p&gt;　　之所以很多初学者有误解，是因为一开始的程序基本都是控制台程序，而控制台的默认代码页确实是GBK。使用chcp命令可以查看当前代码页，可以看到回显Active code page: 936，这正是代表GBK。可以使用命令“chcp 65001”切换到UTF-8。控制台为了兼容性默认代码页是936，不代表Windows的编码标准是GBK，下面的试验都在对话框上显示，因为这是最简单的检验GUI编码方式的方法。&lt;/p&gt;
&lt;h2&gt;Windows对两种机制的兼容&lt;/h2&gt;
&lt;p&gt;那么具体Windows是怎样同时兼容二者：既支持UTF-16，又可以使用ANSI编码的呢？使用一个MessageBox做一下试验。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; #include&amp;lt;windows.h&amp;gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     MessageBox(NULL, L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你好，世界&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你好，世界&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果是下面图1这样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1146242/201710/1146242-20171009192203387-1923791024.png&quot; alt=&quot;&quot;/&gt;     &lt;img src=&quot;http://images2017.cnblogs.com/blog/1146242/201710/1146242-20171009192631902-131373929.png&quot; alt=&quot;&quot; width=&quot;322&quot; height=&quot;73&quot;/&gt;&lt;/p&gt;
&lt;p&gt;           图1                                             图2&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1146242/201710/1146242-20171009200114699-471499216.png&quot; alt=&quot;&quot; width=&quot;303&quot; height=&quot;351&quot;/&gt;&lt;/p&gt;
&lt;p&gt;         图3&lt;/p&gt;
&lt;p&gt;        但大家都知道，这里是使用了&lt;strong&gt;宏&lt;/strong&gt;（如图2），调用&lt;strong&gt;MessageBox()&lt;/strong&gt;实际上是调用了&lt;strong&gt;MessageBoxW()&lt;/strong&gt;，&lt;strong&gt;MessageBoxW()&lt;/strong&gt;的参数是wchar_t类型的，wchar_t*的字符串字面量一般被实现成UTF-16编码。与之对应的是&lt;strong&gt;MessageBoxA()&lt;/strong&gt;，&lt;strong&gt;MessageBoxA()&lt;/strong&gt;接受的参数是char*类型的，char*的字符串字面量被实现成ANSI编码。我说的字符串字面量被实现成某某编码是什么意思呢？用图片解释一下（图3），两个字符串虽然都是“你好，世界”但是运行时的样子完全不同。要强调机器只认识二进制，所以对机器来说这俩个字符串没有任何相同点。我们如果就是调用&lt;strong&gt;MassageBoxA()&lt;/strong&gt;，传入char*会显示什么呢。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
#include&amp;lt;windows.h&amp;gt;
&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
    MessageBoxA(NULL, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你好，世界&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你好，世界&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       很意外，结果竟然和图1完全一样。两个完全不同的二进制串竟然显示了相同的正确结果。其实这就是所谓的Windows兼容两种编码（UTF-16与ANSI编码），虽然推荐使用UTF-16但是，使用GBK也能正常在Windows的GUI中显示，但是你的应用程序已经被Windows归类为“&lt;strong&gt;非Unicode程序&lt;/strong&gt;”。这里大家可以打开控制面板--时钟语言和区域--区域--管理，可以找到一个设置项：&lt;strong&gt;非Unicode程序的语言&lt;/strong&gt;。可以选择中文或者其他语言，那它有什么影响呢？你不妨尝试一下改成日语或者韩语什么的，再运行第二段代码，你就能看到乱码了。但是除此之外几乎感受不到影响，程序们还是正常的运行着，没有出现乱码，这说明现在的绝大多数程序都是使用的UTF-16编码，所以这一个设置对他们根本没有影响。&lt;/p&gt;
&lt;p&gt;        但也并不绝对，在笔者把这一项设置修改为“日语（日本）”一周后（我已经忘了自己没有改回来，因为确实没有什么影响）看到一个奇怪的文件夹，他的名字是：ﾑｸﾀﾗﾏﾂﾔﾘ。是哪一个程序搞出了这样的乱码呢？文件夹名字原来是什么呢（不要指望这是日语，这只是日语字符组成的乱码，不能看出含义）？下一节我们来分析这个例子，揭开这个还在使用ANSI编码的程序的羞耻的面纱。&lt;/p&gt;
&lt;h2&gt;一个乱码的例子分析&lt;/h2&gt;
&lt;p&gt;        日本的ANSI编码是Shift_JIS，它是在有Unicode之前日本国内计算机的编码方式。可想而知，之所以出现ﾑｸﾀﾗﾏﾂﾔﾘ这一段乱码，就是因为我把&lt;strong&gt;非Unicode程序的语言&lt;/strong&gt;设定成了日语（日本），所以导致某个想要用GBK字符串命名文件夹的程序创建了乱码的名称。现在能够查到这些字符的Unicode编码（复制粘贴后，他已经变成了Unicode），所以把Unicode转换成的Shift_JIS二进制串解释为GBK就得到文件夹本来的名字了。&lt;/p&gt;
&lt;p&gt;ff fe 91 ff 78 ff 80 ff 97 ff 8f ff 82 ff 94 ff 98 ff&amp;lt;--这是UTF16小端编码,开头的0xfffe是BOM，不知道BOM是什么的可以查看详解字符编码[一]&lt;/p&gt;
&lt;p&gt;d1 b8 c0 d7 cf c2 d4 d8&amp;lt;--这是对应的Shift_JIS&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1146242/201710/1146242-20171009211705418-470543695.png&quot; alt=&quot;&quot; width=&quot;536&quot; height=&quot;194&quot;/&gt;&lt;/p&gt;
&lt;p&gt;把上面的二进制翻译成GBK就是答案：迅雷下载&lt;/p&gt;
&lt;p&gt;我用的正是最新版本的迅雷：9.1.41.914。迅雷的一个小Bug就这样被我发现了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;日志：&lt;/strong&gt;在把&lt;strong&gt;非Unicode程序的语言&lt;/strong&gt;改为日语后，只有一个MFC的上古程序和最新版的迅雷出现了乱码，2017年10月9日。&lt;/p&gt;
&lt;p&gt; 下一篇会介绍C/C++程序避免乱码的方法并介绍怎样在Java中处理UTF-16的代理对。喜欢请给个推荐，再见。&lt;/p&gt;

</description>
<pubDate>Mon, 09 Oct 2017 13:49:00 +0000</pubDate>
<dc:creator>painterQ</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/painterQ/p/7642797.html</dc:identifier>
</item>
</channel>
</rss>