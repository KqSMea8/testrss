<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Dubbo（一） 开始认识Dubbo，分布式服务框架 - 黄新宇的博客</title>
<link>http://www.cnblogs.com/tohxyblog/p/8183780.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tohxyblog/p/8183780.html</guid>
<description>&lt;h2 id=&quot;h2--&quot;&gt;引言：&lt;/h2&gt;
&lt;p&gt;以前的车马很慢，一生只够爱一个人&lt;br/&gt;以前的网站人很少，一个单应用服务着一个人&lt;br/&gt;————————————————————&lt;br/&gt;现在，动不动就谈什么高并发，千万级访问。单应用？BOOM！分分钟爆炸。于是，技术随着业务的需求诞生了新的产物。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;框架演变：&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;单一应用架构 :所有的功能部署在一个应用中。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;垂直应用架构 ：将应用拆成互不相干的几个应用，以提升效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;分布式服务架构 ：当垂直应用越来越多，应用之间交互不可避免，此时，用于提高业务复用及整合的 分布式服务框架(RPC) 是关键。&lt;br/&gt;&lt;img src=&quot;http://www.droptb.com/rec/article/images/201712/jpg/20171201173855_530.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;OK！到此为止，我们今天的主要目标就是分布式服务架构之Dubbo。&lt;/p&gt;
&lt;p&gt;在了解Dubbo之前，我们先了解两个概念：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是服务框架？&lt;/strong&gt;&lt;br/&gt;服务框架就是提供服务的，服务框架是基于业务对应SaaS分发模式的服务进行整合，以产生新的应用。服务框架中，与业务相关，但与业务功能的整合无关的组件以外部服务形式引入（也就是说把一些业务分离出来，变成一种服务，供其他人调用该服务）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是RPC？&lt;/strong&gt;&lt;br/&gt;RPC全拼是（Remote Procedure CallProtocol）远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。（理解：远程调用协议，为Dubbo实现远程接口调用做支持）&lt;/p&gt;
&lt;h2 id=&quot;h2-dubbo-&quot;&gt;Dubbo是什么&lt;/h2&gt;
&lt;p&gt;Dubbo，阿里巴巴的开源框架-分布式框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。&lt;br/&gt;简单的说，就是把一个应用分成几份，他负责各份应用之间的通信以及管理。&lt;br/&gt;&lt;img src=&quot;http://www.droptb.com/rec/article/images/201712/jpg/20171201175218_91.jpg&quot; alt=&quot;&quot;/&gt;&lt;strong&gt;难道你不知道springCloud吗？&lt;/strong&gt;&lt;br/&gt;emmm！sprigcloud，I know，spring家族的一大分布式神器，在近两年随着微服务的风靡，他也是一大潮流。但是论目前使用度，springcloud还远远不如老牌的dubbo，而且最近阿里重新开始疯狂维护Dubbo，谁知道他到后面的发展不会比spring好呢？在都是找工作的压力下，还是会点dubbo没毛病吧。&lt;br/&gt;&lt;img src=&quot;http://www.droptb.com/rec/article/images/201712/jpg/20171201175657_156.jpg&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;既然你提到了springCloud，那我们也顺便来对比下两者之间的区别吧。&lt;br/&gt;&lt;img src=&quot;http://www.droptb.com/rec/article/images/201712/png/20171201182031_349.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;上图看得出，dubbo就是对应用做了管理，而springcloud继承了spring一如既往的特点，整合万物。一句话，没有我不整合，只有你用不到的。 当然啦，dubbo那些没有的功能就不能实现吗？NO！只是要自己结合第三方去实现而已。&lt;br/&gt;所以说一句公道话，现在springcloud更具技术代表性，在大部分公司用springcloud的情况下，需要什么也能简单的实现，而dubbo，还得看阿里团队以后的努力。当然！技术流弊的，这些没什么大不了。&lt;/p&gt;
&lt;h2 id=&quot;h2-dubbo-&quot;&gt;Dubbo通信协议&lt;/h2&gt;
&lt;p&gt;Dubbo这么强大的一个框架，通信协议也肯定十分强大，他支持多种协议，例如：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Dubbo协议【默认协议】&lt;/li&gt;
&lt;li&gt;Hessian协议&lt;/li&gt;
&lt;li&gt;HTTP协议&lt;/li&gt;
&lt;li&gt;RMI协议&lt;/li&gt;
&lt;li&gt;WebService协议&lt;/li&gt;
&lt;li&gt;Thrift协议&lt;/li&gt;
&lt;li&gt;Memcached协议&lt;/li&gt;
&lt;li&gt;Redis协议&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在通信过程中，不同的服务等级一般对应着不同的服务质量，那么选择合适的协议便是一件非常重要的事情。你可以根据你应用的创建来选择。例如，使用RMI协议，一般会受到防火墙的限制，所以对于外部与内部进行通信的场景，就不要使用RMI协议，而是基于HTTP协议或者Hessian协议。&lt;br/&gt;关于协议的选择，在后面的文章会有讲到，或者参考文章→&lt;a title=&quot;dubbo多协议选择&quot; href=&quot;http://blog.csdn.net/songjinbin/article/details/49498431&quot;&gt;dubbo多协议选择&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;h2-dubbo-&quot;&gt;Dubbo几大核心要点&lt;/h2&gt;
&lt;ol readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;服务定义：消费者消费服务者提供的服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;服务注册：消费者和服务者都需要公开自己的身份，方便被寻找。常用zookeeper注册。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;服务监控：对服务状态实时监控，方便改进质量。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;远程通信与信息交换：服务者和消费者之间的交流，通过通信协议。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;服务调用：消费者从zookeeper上找对服务者，然后享受他的服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;注册/注销服务：服务者上班，和下班的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;服务订阅/取消：消费者按摩和不按摩的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;h2-u957Fu8BDDu77EDu8BF4&quot;&gt;长话短说&lt;/h2&gt;
&lt;p&gt;那么说了这么多，亲们越看越模糊，感觉博主像个傻逼一样BB了半天，却根本没让我们了解Dubbo，怎么办？&lt;br/&gt;OK！&lt;br/&gt;简单地说，例如&lt;br/&gt;第一步：Dubbo把项目切割开来变成两个，然后项目一（action）留一个接口，告诉zookeeper我是消费者，项目二（service）实现那个接口，告诉zookeeper我是消费者。&lt;br/&gt;第二部：当action被调用走到接口的时候，会去zookeeper询问，我的消费者在哪里啊，然后zookeeper告诉他service的IP地址和端口，找到接口的Impl实现类走完，然后返回给action结果。&lt;/p&gt;
&lt;p&gt;没了~入门就这么简单。&lt;/p&gt;
&lt;p&gt;至于zookeeper在文中反复提到，他又是什么，在这里透个小底，他是标配的小神器。除了普通的注册之外，他还能提供负载均衡等强大功能，而且添加和移除集群节点非常平滑哦！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://www.droptb.com/article/detail/544ddadf5ed64ae6ba49b3fffcc6b7d6&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;点击查看更多&lt;/strong&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://www.droptb.com/article/detail/544ddadf5ed64ae6ba49b3fffcc6b7d6&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;strong&gt;点击有惊喜&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 03 Jan 2018 06:58:00 +0000</pubDate>
<dc:creator>黄新宇的博客</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tohxyblog/p/8183780.html</dc:identifier>
</item>
<item>
<title>asp.net core 2.0+sqlsugar搭建个人网站系列（0） - T林飘叶</title>
<link>http://www.cnblogs.com/T-FQlin/p/8183574.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/T-FQlin/p/8183574.html</guid>
<description>&lt;div id=&quot;output_wrapper_id&quot; class=&quot;output_wrapper&quot; readability=&quot;44.983777937996&quot;&gt;
&lt;h3 id=&quot;&quot;&gt;&lt;span&gt;一些废话&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  马上就要过年了，回顾这一年最大的收获就是技术有了很大的提升，其他的方面没有什么改变，现在还是单身小屌丝一枚。&lt;/p&gt;
&lt;p&gt;  这一年来学习的主要重点就是asp.net core，中间也使用 core+EF做过两个项目，想着趁年前工作少，为自己做一个网站。其实这个想法一直都有，只是一直以来懒得动，眼看都要过年了，而且又闲的无聊，就想着开工了。&lt;/p&gt;
&lt;p&gt;  原本我想着是做好放到服务器上就行了，有天看到 &lt;a href=&quot;http://www.cnblogs.com/lizzie-xhu/p/7943128.html&quot;&gt;生活是咖啡&lt;/a&gt; 把他的网站搭建分享了出来，也就有了我的这个系列。&lt;/p&gt;
&lt;h3 id=&quot;-1&quot;&gt;&lt;span&gt;一些技术&lt;/span&gt;&lt;/h3&gt;
&lt;blockquote readability=&quot;7.7077625570776&quot;&gt;
&lt;p&gt;首先就像标题说的：asp.net core 2.0&lt;br/&gt;orm ：&lt;a href=&quot;http://www.codeisbug.com/&quot;&gt;sqlsugar&lt;/a&gt;&lt;br/&gt;数据库：mysql&lt;br/&gt;服务器：centos 7.3（计划为腾讯云，然只是计划）&lt;br/&gt;开发工具：vs2017&lt;/p&gt;

&lt;p&gt;以及未来不知道可能会用到的一些技术&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;为什么不使用EF，而是用没有听说过的什么 sqlsugar ？因为我想有新鲜感，而且我看介绍说是一款高性能（达到ADO.NET最高性能水平），又是中国人写的，有问题还容易交流，综上所述：就决定用它了。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;为什么使用mysql？本程序猿没钱买个云数据库，而且我的服务器只是1核1G,我要是再来个sql server整个服务器就不用干别的了，所有使用mysql很好。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;为什么使用centos？每天都是Windows服务器，我想学习尝一尝 Linux。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;-2&quot;&gt;&lt;span&gt;正式开始&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;首先就是大家熟悉的创建项目，相信这个步骤每一个C#开发人员都没有问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/999985/201801/999985-20180103141843534-894050885.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我的前后台是创建的两个项目，没有放在一起，毕竟我已经注册了三个域名，到现在还闲着，不用也是浪费。&lt;br/&gt;我的Web 应用程序选择的是空，毕竟整个项目都是从零开始，当然越干净越好了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/999985/201801/999985-20180103141909784-1175753314.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;325&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我需要用到Autofac，那就先给web项目装个 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Autofac.Extensions.DependencyInjection
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;添加一个appsettings.json 文件用来存放数据库的链接字符串。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/999985/201801/999985-20180103141934643-755668920.png&quot; alt=&quot;&quot; width=&quot;833&quot; height=&quot;53&quot;/&gt;&lt;/p&gt;
&lt;p&gt;修改一下&lt;a href=&quot;https://github.com/FQLin/FanBlog/blob/master/Admin/Program&quot;&gt;Program&lt;/a&gt;文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/999985/201801/999985-20180103142143190-420033335.png&quot; alt=&quot;&quot; width=&quot;902&quot; height=&quot;343&quot;/&gt;&lt;br/&gt;再向服务中注册SqlSugarClient。只是注册的话这个很简单，可是我想着像EF那样注册服务，那么就要来敲一敲代码了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/999985/201801/999985-20180103142001971-2105254426.png&quot; alt=&quot;&quot; width=&quot;810&quot; height=&quot;144&quot;/&gt;&lt;/p&gt;
&lt;p&gt;只是注册一个服务要不要搞的这么复杂？我想这么搞，这个理由比什么都充分，而且这么来看着更有逼格。&lt;br/&gt;其实也不是太复杂，我的方法就是照着&lt;a href=&quot;https://github.com/aspnet/EntityFrameworkCore&quot;&gt;EF的源码&lt;/a&gt;抄，抄代码能有什么技术含量，只是费些功法罢了，这是我写（抄）得扩展 &lt;a href=&quot;https://github.com/FQLin/FanBlog/tree/master/SqlSugarExtensions&quot;&gt;https://github.com/FQLin/FanBlog/tree/master/SqlSugarExtensions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;随意创建一个实体，然后调用&lt;a href=&quot;https://github.com/FQLin/FanBlog/blob/master/Data/MySqLSugar/SqlSugarContext.cs&quot;&gt;SqlSugarContext&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/999985/201801/999985-20180103142030987-884287280.png&quot; alt=&quot;&quot; width=&quot;845&quot; height=&quot;116&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以codefirst 的形式生成数据库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/999985/201801/999985-20180103142042456-37195542.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;开篇到这就结束了！&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;第一次写 系列文章，可能会比较乱，我尽可能把想到的都写上。&lt;br/&gt;欢迎大家有什么好的建议提给我，让我的这个项目更完美。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 03 Jan 2018 06:25:00 +0000</pubDate>
<dc:creator>T林飘叶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/T-FQlin/p/8183574.html</dc:identifier>
</item>
<item>
<title>公式编辑器 - 自定义匹配规则 - 带提示下拉框 - 动态获取光标像素坐标 - 谎言让你心安</title>
<link>http://www.cnblogs.com/wbsndbf/p/8183464.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wbsndbf/p/8183464.html</guid>
<description>&lt;h3&gt;&lt;span&gt;引言&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　前段时间发了一个编辑器的插件，忙完后自己再次进行了详细的测试，然后心里冒出一句：“这谁写的这么奇葩的插件？完全没什么luan用啊！”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自己做了让自己不满意的事，咋整？男人不怕累，花了时间重写（为世界上所有像我一样勤劳的男人点赞）~&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;思维导图&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;在小生看来，在开发每一个新功能的时候都应该做到心中有一张思维导图：功能实现逻辑和实现功能大致的方法。当然我们不可能在还没动手&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;前就考虑得面面俱到，但在正式开发之前心里对整个流程有个清晰的印象肯定会让我们在动手时愈加流畅（喝口娃哈哈美滋滋，看图~）：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/921970/201801/921970-20180103140813706-724366294.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;流程效果图&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/921970/201801/921970-20180103120400737-323556608.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　触发检索事件字符可自定义，默认为 $，输入 $ 触发检索显示，此时检索值为空，所以显示所有选项，继续输入 a ，检索值为 a，显示匹配选项，当再输入 . 时， 检索值获取条件发生改变（具体我们等下看代码），&lt;/p&gt;
&lt;p&gt;图四中为整个流程在控制台中的记录。&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;js代码 -- 监听输入框&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　全局变量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;考虑到里面小方法比较多，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;为了简化代码，这里我选择模块化一下，需要用到以下全局变量。&lt;span&gt;这里特别提一下&lt;/span&gt;：持续事件和点事件的区别，持续顾名思义，持续事件就是一直触发的事件，这里 $ 触发检索事件后，检索值 &lt;/span&gt;&lt;/span&gt;selectVal&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　是变化的，但是我们又不需要它一直处于触发状态，怎么办呢？对，开关，我们可以给这个事件设置一个开关，条件满足时打开开关，事件持续触发，结束后关闭开关，结束检索事件，这里设置的开关是：searchStart；而点事件&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　这里就是输入 . 时触发的事件，它只需要在输入 . 时获取相关的值就行了，不需要连续触发，这里我们设置参数 enterCharacter ： 当前输入的字符&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; _this = $(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; e = event || window.event; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 键值兼容&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; searchStart = &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置检索事件开关&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; checkCharacter = &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输入字符检索开关                &lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; oldCurrentPos = '';    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检索值开始的位置&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; currentPos = ''; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检索值结束的位置&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; selectVal = '';    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检索值&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; pos = ''; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置光标位置&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; enterCharacter = ''; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前输入的字符&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; dotVal; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输入 . 时从0到当前光标位置文本&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; dotDollerPos; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取往后查找离 . 最近的 $ 的下标，引文输入 . 时的检索值即dotSelectVal不包含 $ 本身，所以需要加1 &lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; dotSelectVal; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输入 . 时的检索值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　&lt;span&gt;插入输入框&lt;/span&gt;　&lt;/p&gt;
&lt;p&gt; 　首先插入下拉框，当然留到后面插入也可以（你开心你说什么都是对的），但是这里有个点需要注意一下：为什么选择插入在body下？因为我们获取到的下拉框的位置是绝对定位坐标。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; //&lt;/span&gt;&lt;span&gt; 插入下拉框&lt;/span&gt;
 _this.dropdown = $('&amp;lt;ul class=&quot;editTips&quot; style=&quot;display:none;&quot;&amp;gt;&amp;lt;/ul&amp;gt;'&lt;span&gt;);
&lt;/span&gt;// 获取到的弹出的下拉框的位置是绝对定位的坐标，所以得把弹出的层放到$(&quot;body&quot;&lt;span&gt;).after(_this.dropdown);                      
 _this.dropdown.css({
     &lt;/span&gt;'width'&lt;span&gt;:opts.dropdownWidth,
     &lt;/span&gt;'position':'absolute'&lt;span&gt;,
 });
 _this.css({
     &lt;/span&gt;'position': 'relative'&lt;span&gt;,

 });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;span&gt;注意：&lt;span&gt;这里我们提一下，要获取检索值，即 selectVal，我们需要知道事件触发时光标所在的位置，即 oldCurrentPos，以及光标当前位置 currentPos，有了这两个 下标，我们才能动态获取 selectVal&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　&lt;span&gt;获取光标当前位置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　 &lt;span&gt;关于获取输入框光标以及获取值等方法，不了解的朋友可以去看一下 range 方法，当然无数前辈已经做过无数归纳总结讲解（向前辈们敬礼~）：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取当前光标位置 currentPos&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; getStart =&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {            
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; all_range = ''&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (navigator.userAgent.indexOf(&quot;MSIE&quot;) &amp;gt; -1) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;IE&lt;/span&gt;
                        &lt;span&gt;if&lt;/span&gt;( _this.get(0).tagName == &quot;TEXTAREA&quot;&lt;span&gt; ){ 
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据body创建textRange&lt;/span&gt;
                            all_range =&lt;span&gt; document.body.createTextRange();
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 让textRange范围包含元素里所有内容&lt;/span&gt;
                            all_range.moveToElementText(_this.get(0&lt;span&gt;));
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据当前输入元素类型创建textRange&lt;/span&gt;
                            all_range = _this.get(0&lt;span&gt;).createTextRange();
                        }
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输入元素获取焦点&lt;/span&gt;
&lt;span&gt;                        _this.focus();
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取当前的textRange,如果当前的textRange是一个具体位置而不是范围,textRange的范围从currentPos到end.此时currentPos等于end&lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt; cur_range =&lt;span&gt; document.selection.createRange();
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将当前的textRange的end向前移&quot;选中的文本.length&quot;个单位.保证currentPos=end&lt;/span&gt;
                        cur_range.moveEnd('character',-&lt;span&gt;cur_range.text.length)
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将当前textRange的currentPos移动到之前创建的textRange的currentPos处, 此时当前textRange范围变为整个内容的currentPos处到当前范围end处&lt;/span&gt;
                        cur_range.setEndPoint(&quot;StartToStart&quot;&lt;span&gt;,all_range);

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 此时当前textRange的Start到End的长度,就是光标的位置&lt;/span&gt;
                        currentPos =&lt;span&gt; cur_range.text.length;
                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文本框获取焦点&lt;/span&gt;
&lt;span&gt;                        _this.focus();
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取当前元素光标位置&lt;/span&gt;
                        currentPos = _this.get(0&lt;span&gt;).selectionStart;
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(&quot;光标当前位置:&quot;+currentPos);&lt;/span&gt;
&lt;span&gt;                    }
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回光标位置&lt;/span&gt;
                    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; currentPos;
                };                &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;获取检索值开始位置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;检索开始位置，即事件触发时光标所在位置，直白来说，就是把事件触发时光标所在位置 &lt;/span&gt;&lt;/span&gt;currentPos 赋值给 oldCurrentPos 储存起来，然后与新的 currentPos 组&lt;/p&gt;
&lt;p&gt;　　成的区域 （oldCurrentPos，currentPos）就是我们检索值所在区域　&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;                //&lt;/span&gt;&lt;span&gt; 获取检索值开始位置 oldCurrentPos&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; getOldCurrentPos = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    getStart(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开始输入的时候的光标位置 currentPos&lt;/span&gt;
                    oldCurrentPos = currentPos; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 储存输入开始位置&lt;/span&gt;
&lt;span&gt;                    console.log(oldCurrentPos);
                }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;设置光标位置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;选择当前项重组输入框 value 值后光标是默认显示在最后的，这当然不符合我们的开发需求，我们想要的效果是事件结束时光标能在我们编辑结束的位置（关于value值重组我们在下面的方法中再看）&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置光标位置&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; setCarePosition = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(start,end) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(navigator.userAgent.indexOf(&quot;MSIE&quot;) &amp;gt; -1&lt;span&gt;){
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; all_range = ''&lt;span&gt;;

                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( _this.get(0).tagName == &quot;TEXTAREA&quot;&lt;span&gt; ){ 
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据body创建textRange&lt;/span&gt;
                            all_range =&lt;span&gt; document.body.createTextRange();
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 让textRange范围包含元素里所有内容&lt;/span&gt;
                            all_range.moveToElementText(_this.get(0&lt;span&gt;));
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据当前输入元素类型创建textRange&lt;/span&gt;
                            all_range = _this.get(0&lt;span&gt;).createTextRange();
                        }

                        _this.focus();

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将textRange的start设置为想要的start&lt;/span&gt;
                        all_range.moveStart('character'&lt;span&gt;,start);

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将textRange的end设置为想要的end. 此时我们需要的textRange长度=end-start; 所以用总长度-(end-start)就是新end所在位置&lt;/span&gt;
                        all_range.moveEnd('character',-(all_range.text.length-(end-&lt;span&gt;start)));

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 选中从start到end间的文本,若start=end,则光标定位到start处&lt;/span&gt;
&lt;span&gt;                        all_range.select();
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文本框获取焦点&lt;/span&gt;
&lt;span&gt;                        _this.focus();

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 选中从start到end间的文本,若start=end,则光标定位到start处&lt;/span&gt;
                        _this.get(0&lt;span&gt;).setSelectionRange(start,end);
                    }
                };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;结束检索事件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　在结束检索事件中我们需要初始化下拉框以及关闭开关，这里需要将该方法声明在获取检索值方法前面，因为获取值后整个事件流程结束，我们需要初始化变量为下一次事件触发做好准备&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;                //&lt;/span&gt;&lt;span&gt; 结束检索事件&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; endSearch = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    _this.dropdown.find(&lt;/span&gt;&quot;li&quot;).remove(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 移除下拉框中的选项&lt;/span&gt;
                    _this.dropdown.hide(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 隐藏下拉框&lt;/span&gt;
                    searchStart = &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化检索开关 searchStart&lt;/span&gt;
                    enterCharacter=''; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化当前字符&lt;/span&gt;
                }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　&lt;span&gt;获取检索的值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　 &lt;span&gt;看下方代码，我们能够获取值的前提是 searchStart 开关 打开状态，这里我们为了保持插件的灵活性，将触发字符设置为变量，这里默认为 $ 和 . ，enterCharacter为当前输入的字符，&lt;br/&gt;        因为当我们输入 . 时，selectVal 的获取规则会改变，所以这里我们需要将 selectVal 获取方式区分开来，&lt;span&gt;注意：&lt;span&gt;这里我们要考虑到存在一个操作 -- 回删，输入 $,下拉框出来了，但是我&lt;br/&gt;        们又觉得此处 $ 出现得还不是时候（反正就是要删），删除 $，那么检索事件也就结束，初始化相关变量。当输入的是 . 时，如果要替换值，那么我们需要的获取从 . 在的位置往后找&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;到离 . 最近的 $ 符号，得到其在文本中的位置，这样我们才能重组 value&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;                //&lt;/span&gt;&lt;span&gt; 获取检索的值 selctVal&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; getSelectVal = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; val =&lt;span&gt; _this.val();
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( searchStart == &lt;span&gt;true&lt;/span&gt; &amp;amp;&amp;amp; enterCharacter != opts.levelCharacter ){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当输入的是字符 triggerCharacter 的时候 默认为 $&lt;/span&gt;
                        selectVal = val.substring(oldCurrentPos,currentPos);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检索值直接为获取的文本区域&lt;/span&gt;
&lt;span&gt;                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( searchStart == &lt;span&gt;true&lt;/span&gt; &amp;amp;&amp;amp; enterCharacter == opts.levelCharacter ){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当输入的是字符 levelCharacter 的时候 默认为 .&lt;/span&gt;
                        dotVal = val.slice(0&lt;span&gt;,currentPos);
                        dotDollerPos &lt;/span&gt;= dotVal.lastIndexOf(opts.triggerCharacter)+1&lt;span&gt;;
                        dotSelectVal &lt;/span&gt;=&lt;span&gt; dotVal.substring(dotDollerPos,currentPos);
                        selectVal &lt;/span&gt;=&lt;span&gt; dotSelectVal;
                        console.log(&lt;/span&gt;&quot;到当前下标的字符串为：&quot;+&lt;span&gt;dotVal);
                        console.log(&lt;/span&gt;&quot;到当前下标最近的$下标是：&quot;+&lt;span&gt;dotDollerPos);
                        console.log(&lt;/span&gt;&quot;输入 . 时检索值为：&quot;+&lt;span&gt;dotSelectVal);
                    }                
                    console.log(&lt;/span&gt;&quot;获取的值区域为：&quot;+oldCurrentPos+&quot;-&quot;+&lt;span&gt;currentPos);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( oldCurrentPos &amp;gt; currentPos ){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 回删时清除选项li 隐藏下拉框&lt;/span&gt;
&lt;span&gt;                        endSearch()
                    }                
                }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;改变输入框 value 值，定位光标位置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;因为我们这里存在两种选择方式，鼠标点击和按 enter 键，两者的区别只在于执行事件的方式，将同样的代码写两遍未免有点不美，这里我们将它摘出来&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;span&gt;注意：&lt;/span&gt;此处需要区分触发检索事件的符号是 $ 还是 . ，因为符号不同，我们获取的值是不同的，光标定位也是不同的&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;                //&lt;/span&gt;&lt;span&gt; 选中li当前项 改变输入框value值 定位光标&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; changeValue = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; val =&lt;span&gt; _this.val();    
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; liTxt = _this.dropdown.find(&quot;.active&quot;&lt;span&gt;).text();
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; liTxtLength =&lt;span&gt; liTxt.length;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; valLength =&lt;span&gt; val.length;
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 此处需要区分触发检索事件的符号是&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt;( enterCharacter == opts.levelCharacter ){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果是 .&lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt; beforeSelectVal = val.substring(0&lt;span&gt;,dotDollerPos);                
                    }
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;{ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果是 &amp;amp;&lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt; beforeSelectVal = val.substring(0&lt;span&gt;,oldCurrentPos);
                    }
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beforeSelectValLength =&lt;span&gt; beforeSelectVal.length;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; afterSelectVal =&lt;span&gt; val.substring(currentPos,valLength);
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; pos = liTxtLength +&lt;span&gt; beforeSelectValLength;
                    val &lt;/span&gt;= beforeSelectVal+liTxt+&lt;span&gt;afterSelectVal;
                    _this.val(val);
                    setCarePosition(pos,pos); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将光标定位在插入值后面&lt;/span&gt;
&lt;span&gt;                    endSearch();
                    console.log(&lt;/span&gt;&quot;文本长度:&quot;+&lt;span&gt;beforeSelectVal.length);
                    console.log(&lt;/span&gt;&quot;li文本为:&quot;+&lt;span&gt;liTxt);
                    console.log(&lt;/span&gt;&quot;前部为:&quot;+&lt;span&gt;beforeSelectVal);
                    console.log(&lt;/span&gt;&quot;后部分为:&quot;+&lt;span&gt;afterSelectVal);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 此处必须加上return false 不然会调用callbacktips 初始化 dropdown&lt;/span&gt;
                }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;定义回调函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;/span&gt;&lt;span&gt;   &lt;span&gt;获取检索值之后就需要发送请求了，我们拿到返回的数组 arr_json 后，将其遍历生成 li 添加到下拉框中&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;                //&lt;/span&gt;&lt;span&gt; 定义回调函数 callbacktips&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt;  callbacktips = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(arr_json){
                     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化 UL &lt;/span&gt;
                    _this.dropdown.find(&quot;li&quot;&lt;span&gt;).remove();
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;( arr_json ){
                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( i=0;i&amp;lt;arr_json.length;i++&lt;span&gt; ){
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; n =&lt;span&gt; arr_json[i].indexOf(selectVal);
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(  n != -1&lt;span&gt; ){
                                _this.dropdown.append(&lt;/span&gt;'&amp;lt;li&amp;gt;'+arr_json[i]+'&amp;lt;/li&amp;gt;'&lt;span&gt;);    
                            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                            }                                    
                        };
                    }                    
                    _this.dropdown.show();
                    _this.dropdown.find(&lt;/span&gt;&quot;li:first-child&quot;).addClass(&quot;active&quot;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自定义样式&lt;/span&gt;
                    _this.dropdown.find(&quot;li&quot;&lt;span&gt;).css({    
                        &lt;/span&gt;'width':'100%'&lt;span&gt;,
                    });
                };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;获得焦点时获取光标位置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;这里我们直接调用上面的方法就行了&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　　　　　//&lt;/span&gt;&lt;span&gt; 获得焦点的时候获取光标位置&lt;/span&gt;
                _this.click(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    getOldCurrentPos()
                });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;阻止键盘默认事件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;这里我们需要判断下拉框的状态：显示还是隐藏&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　　　　　　//&lt;/span&gt;&lt;span&gt;下拉框显示时 阻止键盘方向键默认事件&lt;/span&gt;
                _this.keydown(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e){
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dropdownIsshow = _this.dropdown.css(&quot;display&quot;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( dropdownIsshow == &quot;block&quot;&lt;span&gt; ){
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( e.keyCode == 38 || e.keyCode == 40 || e.keyCode == 13&lt;span&gt; ){
                            e.preventDefault();
                        }
                    }
                })&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;span&gt;keyup 事件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;通过keyuo事件：”我们能实时监听输入框；也能通过按键切换当前项以及改变光标位置；也能限制输入字符范围，比如这里：当输入某些字符时，将会被认为输入了不合法字符而终止检索事件；&lt;br/&gt;　　我们的事件开关也是通过该事件能改变其状态的以及 enter 键选取当前项&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　　　　　　//&lt;/span&gt;&lt;span&gt; 监听输入框value值变化&lt;/span&gt;
                _this.keyup(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e){
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; val =&lt;span&gt; _this.val();    
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前项索引&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; n = _this.dropdown.find(&quot;.active&quot;&lt;span&gt;).index();
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; li 个数&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; n_max = _this.dropdown.find(&quot;li&quot;&lt;span&gt;).length;            
                    getStart(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获得最新光标位置&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 方向键控制 li 选项&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt;( e.keyCode == 38&lt;span&gt; ){                        
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(n-1&amp;gt;=0&lt;span&gt;){
                            _this.dropdown.find(&lt;/span&gt;'li').eq(n-1).addClass(&quot;active&quot;).siblings().removeClass(&quot;active&quot;&lt;span&gt;);
                        }
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( n == 0&lt;span&gt;){
                            _this.dropdown.find(&lt;/span&gt;'li').eq(n_max-1).addClass(&quot;active&quot;).siblings().removeClass(&quot;active&quot;&lt;span&gt;);
                        }
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 此处必须加上return false 不然会重复初始化&lt;/span&gt;
&lt;span&gt;                    }                
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( e.keyCode == 40&lt;span&gt; ){
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(n&amp;lt;n_max-1&lt;span&gt;){
                            _this.dropdown.find(&lt;/span&gt;'li').eq(n+1).addClass(&quot;active&quot;).siblings().removeClass(&quot;active&quot;&lt;span&gt;);    
                        }
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( n+1 ==&lt;span&gt; n_max ){
                            _this.dropdown.find(&lt;/span&gt;'li').eq(0).addClass(&quot;active&quot;).siblings().removeClass(&quot;active&quot;&lt;span&gt;);
                        }
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 此处必须加上return false 不然会重复初始化&lt;/span&gt;
&lt;span&gt;                    }    
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( e.keyCode != 37 &amp;amp;&amp;amp; e.keyCode != 38 &amp;amp;&amp;amp; e.keyCode != 39 &amp;amp;&amp;amp; e.keyCode != 40&lt;span&gt; ){
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; reg = &lt;span&gt;new&lt;/span&gt; RegExp(&quot;[`~!@#^&amp;amp;*()=|{}':;',\\[\\]&amp;lt;&amp;gt;/?~！@#￥……&amp;amp;*（）——|{}【】‘；：”“'。，、？]&quot;&lt;span&gt;);
                        enterCharacter &lt;/span&gt;= val.substring(currentPos-1,currentPos); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前输入的字符&lt;/span&gt;
                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(enterCharacter);&lt;/span&gt;
                        &lt;span&gt;if&lt;/span&gt;( reg.test(enterCharacter) == &lt;span&gt;false&lt;/span&gt; &amp;amp;&amp;amp; enterCharacter != &quot; &quot;){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输入的字符合法 可以执行检索事件&lt;/span&gt;
                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(&quot;输入字符合法&quot;);&lt;/span&gt;
                            checkCharacter = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                            checkCharacter &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                            endSearch()
                            console.log(&lt;/span&gt;&quot;输入了不合法字符&quot;&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(selectVal);                    &lt;/span&gt;
&lt;span&gt;                        }                        
                    }                    
                    console.log(&lt;/span&gt;&quot;当前输入的字符是:&quot;+&lt;span&gt;enterCharacter);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(  enterCharacter == opts.triggerCharacter || enterCharacter ==&lt;span&gt; opts.levelCharacter){
                        console.log(&lt;/span&gt;&quot;输入了$或者.&quot;&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输入了 $,打开开关，允许检索事件执行&lt;/span&gt;
                        searchStart = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                        getOldCurrentPos(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输入 $ 的时候重置 oldCurrentPos&lt;/span&gt;
&lt;span&gt;                    }
                    getSelectVal(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 外度调用获取检索值方法 保证实时更新 selectVal 及 searchStart&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt;( searchStart == &lt;span&gt;true&lt;/span&gt; &amp;amp;&amp;amp; checkCharacter == &lt;span&gt;true&lt;/span&gt; &amp;amp;&amp;amp; e.keyCode != 13&lt;span&gt; ){
                        console.log(&lt;/span&gt;&quot;获取的值:&quot;+&lt;span&gt;selectVal);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;( $.isFunction(opts.keyPressAction) ){                        
                            opts.keyPressAction(selectVal, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(arr_json){
                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用回调函数&lt;/span&gt;
&lt;span&gt;                                callbacktips(arr_json);                        
                            });
                        }
                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( e.keyCode == 13 ){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 按enter键选取当前li文本值 重组输入框 value值&lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt; dropdownIsshow = _this.dropdown.css(&quot;display&quot;&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( dropdownIsshow == &quot;block&quot; ){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 为了在下拉框隐藏时按 enter键 能换行，需要加上这个判断&lt;/span&gt;
&lt;span&gt;                            changeValue();
                            console.log(&lt;/span&gt;&quot;这是点击enter后searchStart：&quot;+&lt;span&gt;searchStart);
                        }
                    }
                    console.log(&lt;/span&gt;&quot;这是整个事件执行完成以后：&quot;+&lt;span&gt;searchStart);
                });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;鼠标滑入切换当前项&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　　　　　　//&lt;/span&gt;&lt;span&gt; 切换当前项&lt;/span&gt;
                _this.dropdown.on('mouseenter','li',&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;).addClass(&quot;active&quot;).siblings().removeClass(&quot;active&quot;&lt;span&gt;);
                });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;点击选取当前项 失去焦点事件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;这里采用了 event.target 方法来获得事件源，如果是 下拉框中的 li ，则执行 changeValue() 方法,否则结束检索事件 endSearch()&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　　　　　 //&lt;/span&gt;&lt;span&gt; 点击当前项获取文本值 重组输入框 value值 失去焦点时隐藏下拉框 清空下拉框&lt;/span&gt;
                $(document).click(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e){
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; e = event ||&lt;span&gt; window.event;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; el = e.target.localName; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取事件源 标签名&lt;/span&gt;
                    el == &quot;li&quot; ?&lt;span&gt; changeValue() : endSearch();
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(el);&lt;/span&gt;
                })
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;js代码 -- 动态获取光标位置&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;这个方法是借鉴一位前辈的，这里附上原文地址（前辈大善）：http://blog.csdn.net/kingwolfofsky/article/details/6586029&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;********以下为获取下拉框像素坐标方法********&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 
                &lt;span&gt;var&lt;/span&gt; kingwolfofsky =&lt;span&gt; {  
                    getInputPositon: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (elem) {  
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (document.selection) {   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;IE Support  &lt;/span&gt;
&lt;span&gt;                            elem.focus();  
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Sel =&lt;span&gt; document.selection.createRange();  
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {  
                                left: Sel.boundingLeft,  
                                top: Sel.boundingTop,  
                                bottom: Sel.boundingTop &lt;/span&gt;+&lt;span&gt; Sel.boundingHeight  
                            };  
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {  
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; that = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;  
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; cloneDiv = '{$clone_div}', cloneLeft = '{$cloneLeft}', cloneFocus = '{$cloneFocus}', cloneRight = '{$cloneRight}'&lt;span&gt;;  
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; none = '&amp;lt;span style=&quot;white-space:pre-wrap;&quot;&amp;gt; &amp;lt;/span&amp;gt;'&lt;span&gt;;  
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; div = elem[cloneDiv] || document.createElement('div'), focus = elem[cloneFocus] || document.createElement('span'&lt;span&gt;);  
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; text = elem[cloneLeft] || document.createElement('span'&lt;span&gt;);  
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; offset = that._offset(elem), index = &lt;span&gt;this&lt;/span&gt;._getFocus(elem), focusOffset = { left: 0, top: 0&lt;span&gt; };  
                  
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;elem[cloneDiv]) {  
                                elem[cloneDiv] &lt;/span&gt;= div, elem[cloneFocus] =&lt;span&gt; focus;  
                                elem[cloneLeft] &lt;/span&gt;=&lt;span&gt; text;  
                                div.appendChild(text);  
                                div.appendChild(focus);  
                                document.body.appendChild(div);  
                                focus.innerHTML &lt;/span&gt;= '|'&lt;span&gt;;  
                                focus.style.cssText &lt;/span&gt;= 'display:inline-block;width:0px;overflow:hidden;z-index:-100;word-wrap:break-word;word-break:break-all;'&lt;span&gt;;  
                                div.className &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._cloneStyle(elem);  
                                div.style.cssText &lt;/span&gt;= 'visibility:hidden;display:inline-block;position:absolute;z-index:-100;word-wrap:break-word;word-break:break-all;overflow:hidden;'&lt;span&gt;;  
                            };  
                            div.style.left &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;._offset(elem).left + &quot;px&quot;&lt;span&gt;;  
                            div.style.top &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;._offset(elem).top + &quot;px&quot;&lt;span&gt;;  
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; strTmp = elem.value.substring(0, index).replace(/&amp;lt;/g, '&amp;lt;').replace(/&amp;gt;/g, '&amp;gt;').replace(/\n/g, '&amp;lt;br/&amp;gt;').replace(/\s/&lt;span&gt;g, none);  
                            text.innerHTML &lt;/span&gt;=&lt;span&gt; strTmp;  
                  
                            focus.style.display &lt;/span&gt;= 'inline-block'&lt;span&gt;;  
                            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt; { focusOffset = &lt;span&gt;this&lt;/span&gt;._offset(focus); } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (e) { };  
                            focus.style.display &lt;/span&gt;= 'none'&lt;span&gt;;  
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {  
                                left: focusOffset.left,  
                                top: focusOffset.top,  
                                bottom: focusOffset.bottom  
                            };  
                        }  
                    },
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 克隆元素样式并返回类  &lt;/span&gt;
                    _cloneStyle: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (elem, cache) {  
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!cache &amp;amp;&amp;amp; elem['${cloneName}']) &lt;span&gt;return&lt;/span&gt; elem['${cloneName}'&lt;span&gt;];  
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; className, name, rstyle = /^(number|string)$/&lt;span&gt;;  
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; rname = /^(content|outline|outlineWidth)$/; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Opera: content; IE8:outline &amp;amp;&amp;amp; outlineWidth  &lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt; cssText = [], sStyle =&lt;span&gt; elem.style;  
                  
                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (name &lt;span&gt;in&lt;/span&gt;&lt;span&gt; sStyle) {  
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;rname.test(name)) {  
                                val &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._getStyle(elem, name);  
                                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (val !== '' &amp;amp;&amp;amp; rstyle.test(&lt;span&gt;typeof&lt;/span&gt; val)) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Firefox 4  &lt;/span&gt;
                                    name = name.replace(/([A-Z])/g, &quot;-$1&quot;&lt;span&gt;).toLowerCase();  
                                    cssText.push(name);  
                                    cssText.push(&lt;/span&gt;':'&lt;span&gt;);  
                                    cssText.push(val);  
                                    cssText.push(&lt;/span&gt;';'&lt;span&gt;);  
                                };  
                            };  
                        };  
                        cssText &lt;/span&gt;= cssText.join(''&lt;span&gt;);  
                        elem[&lt;/span&gt;'${cloneName}'] = className = 'clone' + (&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date).getTime();  
                        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;._addHeadStyle('.' + className + '{' + cssText + '}'&lt;span&gt;);  
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; className;  
                    },  
                  
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向页头插入样式  &lt;/span&gt;
                    _addHeadStyle: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (content) {  
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; style = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._style[document];  
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;style) {  
                            style &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;._style[document] = document.createElement('style'&lt;span&gt;);  
                            document.getElementsByTagName(&lt;/span&gt;'head')[0&lt;span&gt;].appendChild(style);  
                        };  
                        style.styleSheet &lt;/span&gt;&amp;amp;&amp;amp; (style.styleSheet.cssText += content) ||&lt;span&gt; style.appendChild(document.createTextNode(content));  
                    },  
                    _style: {},  
                  
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取最终样式  &lt;/span&gt;
                    _getStyle: 'getComputedStyle' &lt;span&gt;in&lt;/span&gt; window ? &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (elem, name) {  
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; getComputedStyle(elem, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)[name];  
                    } : &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (elem, name) {  
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; elem.currentStyle[name];  
                    },  
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取光标在文本框的位置  &lt;/span&gt;
                    _getFocus: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (elem) {  
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; index = 0&lt;span&gt;;  
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (document.selection) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; IE Support  &lt;/span&gt;
&lt;span&gt;                            elem.focus();  
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Sel =&lt;span&gt; document.selection.createRange();  
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (elem.nodeName === 'TEXTAREA') {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;textarea  &lt;/span&gt;
                                &lt;span&gt;var&lt;/span&gt; Sel2 =&lt;span&gt; Sel.duplicate();  
                                Sel2.moveToElementText(elem);  
                                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; index = -1&lt;span&gt;;  
                                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (Sel2.inRange(Sel)) {  
                                    Sel2.moveStart(&lt;/span&gt;'character'&lt;span&gt;);  
                                    index&lt;/span&gt;++&lt;span&gt;;  
                                };  
                            }  
                            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (elem.nodeName === 'INPUT') {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; input  &lt;/span&gt;
                                Sel.moveStart('character', -&lt;span&gt;elem.value.length);  
                                index &lt;/span&gt;=&lt;span&gt; Sel.text.length;  
                            }  
                        }  
                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (elem.selectionStart || elem.selectionStart == '0') { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Firefox support  &lt;/span&gt;
                            index =&lt;span&gt; elem.selectionStart;  
                        }  
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (index);  
                    },  
                  
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取元素在页面中位置  &lt;/span&gt;
                    _offset: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (elem) {  
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; box = elem.getBoundingClientRect(), doc = elem.ownerDocument, body = doc.body, docElem =&lt;span&gt; doc.documentElement;  
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0&lt;span&gt;;  
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; top = box.top + (self.pageYOffset || docElem.scrollTop) - clientTop, left = box.left + (self.pageXOffset || docElem.scrollLeft) -&lt;span&gt; clientLeft;  
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {  
                            left: left,  
                            top: top,  
                            right: left &lt;/span&gt;+&lt;span&gt; box.width,  
                            bottom: top &lt;/span&gt;+&lt;span&gt; box.height  
                        };  
                    }  
                };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;调用获取坐标方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　　　　　 //&lt;/span&gt;&lt;span&gt; 调用获取坐标方法 show(elem)&lt;/span&gt;
                $(&lt;span&gt;this&lt;/span&gt;).keyup(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    show(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
                });                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用 kingwolfofsky， 获取光标坐标&lt;/span&gt;
                &lt;span&gt;function&lt;/span&gt;&lt;span&gt; show(elem) {  
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; p =&lt;span&gt; kingwolfofsky.getInputPositon(elem);  
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; s = _this.dropdown.get(0&lt;span&gt;); 
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ttop = parseInt(_this.css(&quot;marginTop&quot;&lt;span&gt;));
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tleft = parseInt(_this.css(&quot;marginLeft&quot;&lt;span&gt;));
                    s.style.top &lt;/span&gt;= p.bottom-ttop+10+'px'&lt;span&gt;;  
                    s.style.left &lt;/span&gt;= p.left-tleft + 'px'&lt;span&gt;;                    
                }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;js代码 -- 设置默认参数&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    var&lt;/span&gt; defaults =&lt;span&gt; {    
        triggerCharacter : &lt;/span&gt;'$', &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 默认触发事件 字符&lt;/span&gt;
        levelCharacter: '.',  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 默认多层检索触发字符&lt;/span&gt;
        dropdownWidth:'150px'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 下拉框默认宽度&lt;/span&gt;
    };
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;js代码 -- 插件调用&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;此处只为展示效果 在 keyPressAction 中能自定义匹配规则进行拓展&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
　　　　　$(&quot;#test&quot;&lt;span&gt;).editTips({
            triggerCharacter : &lt;/span&gt;'$'&lt;span&gt;,
            levelCharacter: &lt;/span&gt;'.'&lt;span&gt;,
            dropdownWidth:&lt;/span&gt;'150px'&lt;span&gt;,  
            keyPressAction:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(selectVal,callbacktips){
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; arr_json;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( selectVal == &quot;&quot;&lt;span&gt; ){
                    arr_json &lt;/span&gt;= [&quot;a&quot;,&quot;ab&quot;,&quot;b&quot;,&quot;bb&quot;&lt;span&gt;]
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(selectVal &amp;amp;&amp;amp; selectVal.indexOf(&quot;a&quot;)== 0&lt;span&gt;){
                    arr_json &lt;/span&gt;= [&quot;a&quot;,&quot;ab&quot;&lt;span&gt;];
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(selectVal &amp;amp;&amp;amp; selectVal.indexOf(&quot;b&quot;)== 0&lt;span&gt;){
                    arr_json &lt;/span&gt;= [&quot;b&quot;,&quot;bb&quot;&lt;span&gt;];
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(selectVal &amp;amp;&amp;amp; selectVal.indexOf(&quot;a.&quot;)== 0&lt;span&gt;){
                    arr_json &lt;/span&gt;= [&quot;a.a&quot;,&quot;a.b&quot;,&quot;a.c&quot;&lt;span&gt;];
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(selectVal &amp;amp;&amp;amp; selectVal.indexOf(&quot;b.&quot;)== 0&lt;span&gt;){
                    arr_json &lt;/span&gt;= [&quot;b.a&quot;,&quot;b.b&quot;,&quot;b.c&quot;&lt;span&gt;];
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(selectVal &amp;amp;&amp;amp; selectVal.indexOf(&quot;ab.&quot;)== 0&lt;span&gt;){
                    arr_json &lt;/span&gt;= [&quot;ab.a&quot;,&quot;ab.b&quot;,&quot;ab.c&quot;&lt;span&gt;];
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(selectVal &amp;amp;&amp;amp; selectVal.indexOf(&quot;bb.&quot;)== 0&lt;span&gt;){
                    arr_json &lt;/span&gt;= [&quot;bb.a&quot;,&quot;bb.b&quot;,&quot;bb.c&quot;&lt;span&gt;];
                }
                callbacktips(arr_json);
            }           
        });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于代码比较多，这里就不展示所有代码了，最终效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/921970/201801/921970-20180103140412284-1179339445.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在此附上demo下载链接：&lt;/p&gt;
&lt;p&gt;不管你信不信，我已经设置了下载口令，亲们必须在心里说出我的一个优点才能点击下载~&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.cnblogs.com/files/wbsndbf/%E5%85%AC%E5%BC%8F%E7%BC%96%E8%BE%91%E5%99%A8.rar&quot; target=&quot;_blank&quot;&gt;下载demo&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 03 Jan 2018 06:06:00 +0000</pubDate>
<dc:creator>谎言让你心安</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wbsndbf/p/8183464.html</dc:identifier>
</item>
<item>
<title>ABP 教程文档 1-1 手把手引进门之 AngularJs, ASP.NET MVC, Web API 和 EntityFramework（官方教程翻译版 版本3.2.5）含学习资料 - 鸭补一生如梦</title>
<link>http://www.cnblogs.com/yabu007/p/8134792.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yabu007/p/8134792.html</guid>
<description>&lt;p&gt;本文是ABP官方文档翻译版，翻译基于 3.2.5 版本 转载请注明出处：&lt;a href=&quot;http://www.cnblogs.com/yabu007/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/yabu007/&lt;/a&gt;  谢谢&lt;/p&gt;
&lt;p&gt;官方文档分四部分&lt;/p&gt;
&lt;p&gt;一、 教程文档&lt;/p&gt;
&lt;p&gt;二、ABP 框架&lt;/p&gt;
&lt;p&gt;三、zero 模块&lt;/p&gt;
&lt;p&gt;四、其他（中文翻译资源）&lt;/p&gt;

&lt;p&gt;本篇是第一部分的第一篇。&lt;/p&gt;
&lt;p&gt;第一部分分三篇&lt;/p&gt;
&lt;p&gt;1-1 手把手引进门&lt;/p&gt;
&lt;p&gt;1-2 进阶&lt;/p&gt;
&lt;p&gt;1-3 杂项 （相关理论知识）&lt;/p&gt;

&lt;p&gt;第一篇含两个步骤。&lt;/p&gt;
&lt;p&gt;1-1-1 &lt;a href=&quot;http://www.codeproject.com/Articles/1115763/Using-ASP-NET-Core-Entity-Framework-Core-and-ASP-N&quot;&gt;ASP.NET Core &amp;amp; Entity Framework Core&lt;/a&gt; 后端（内核）含两篇 （ &lt;a href=&quot;http://www.cnblogs.com/yabu007/p/8067694.html&quot; target=&quot;_blank&quot;&gt;第一篇链接&lt;/a&gt;    &lt;a href=&quot;http://www.cnblogs.com/yabu007/p/8117792.html&quot; target=&quot;_blank&quot;&gt;第二篇链接&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;1-1-2 &lt;a href=&quot;http://www.codeproject.com/Articles/791740/Using-AngularJs-ASP-NET-MVC-Web-API-and-EntityFram&quot;&gt;ASP.NET MVC, Web API, EntityFramework &amp;amp; AngularJs&lt;/a&gt;  前端&lt;/p&gt;

&lt;p&gt;现在进入正文 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;译者注：本文的最新更新时间是2016年10月，文章的内容与实际最新的样例模版已经不同。请读者注意区别。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;翻译末尾我会再加一个栏目，提供推荐的 Angular 学习资料，毕竟2017年9月已经发布 Angular5 了。 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;土牛语录：&lt;span class=&quot;author&quot;&gt;&lt;a href=&quot;https://www.codeproject.com/script/Membership/View.aspx?mid=6866592&quot; rel=&quot;author&quot;&gt;Halil ibrahim Kalkan&lt;/a&gt;, &lt;span class=&quot;date&quot; title=&quot;Date last updated&quot;&gt;26 Oct 2016&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;使用 AngularJs ， ASP.NET MVC ， Web API ， EntityFramework 和 ASP.NET Boileplate 创建一个 N 层的，本地化的，良好架构的单页面 Web 应用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/9304/201712/9304-20171228103348738-382806015.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;样例程序的截图如上。&lt;/p&gt;


&lt;p&gt;介绍&lt;/p&gt;
&lt;p&gt;用模板创建应用&lt;/p&gt;
&lt;p&gt;创建实体 entities&lt;/p&gt;
&lt;p&gt;创建数据库上下文 DbContext&lt;/p&gt;
&lt;p&gt;创建数据库迁移&lt;/p&gt;
&lt;p&gt;定义仓储 repositories&lt;/p&gt;
&lt;p&gt;实现仓储&lt;/p&gt;
&lt;p&gt;创建应用服务&lt;/p&gt;
&lt;p&gt;创建 Web API 服务&lt;/p&gt;
&lt;p&gt;开发单页程序 SPA&lt;/p&gt;
&lt;p&gt;本地化&lt;/p&gt;
&lt;p&gt;单元测试&lt;/p&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;p&gt;文章更改历史&lt;/p&gt;
&lt;p&gt;引用&lt;/p&gt;
&lt;p&gt;版权所有 &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Angular 学习资料&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;在这篇文章中，我们会展示如何用以下工具从底层到顶层逐步的开发一个单页面 Web 应用程序（SPA）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ASP.NET MVC 和 ASP.NET Web API 作为 web 框架&lt;/li&gt;
&lt;li&gt;Angularjs 作为单页面 SPA 框架&lt;/li&gt;
&lt;li&gt;EntityFramework 作为 ORM （对象关系映射） 框架&lt;/li&gt;
&lt;li&gt;Castle Windsor 作为依赖注射框架&lt;/li&gt;
&lt;li&gt;Twitter Bootstrap 作为 HTML/CSS 框架&lt;/li&gt;
&lt;li&gt;Log4Net 作为日志记录， AutoMapper 作为对象映射工具。&lt;/li&gt;
&lt;li&gt;ASP.NET Boilerplate 作为启动模板和应用程序框架&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;ASP.NET Boilerplate [1] 是一个开源的应用程序框架，它把以上所有的框架和类库合并到一起，让我们可以轻松的开始开发我们的应用程序。这是一个最佳实践的基础框架，我们可以用它来开发应用程序。它天然的支持依赖注射 Dependency Injection ，领域模型设计 Domain Driven Design 和 分层架构 Layered Architecture 。样例应用程序夜实现了验证 Validation ， 异常处理 exception handling ， 本地化 localization 和 响应式设计 responsive design。&lt;/p&gt;


&lt;p&gt;ASP.NET Boilerplate 会生成模板，模板绑定并配置好很多搭建企业级 web 应用最好的工具，这让我们在开始创建一个新应用程序时可以节约很多时间。&lt;/p&gt;
&lt;p&gt;让我们从 &lt;a href=&quot;http://www.aspnetboilerplate.com/Templates&quot;&gt;aspnetboilerplate.com/Templates&lt;/a&gt; 开始生成模板创建我们的应用程序吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/9304/201712/9304-20171228122021894-1059454667.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;译者注：友情提示：上面的页面是旧版本的。新版本请参考  &lt;a href=&quot;http://www.codeproject.com/Articles/1115763/Using-ASP-NET-Core-Entity-Framework-Core-and-ASP-N&quot;&gt;ASP.NET Core &amp;amp; Entity Framework Core&lt;/a&gt; &lt;a href=&quot;http://www.cnblogs.com/yabu007/p/8067694.html&quot; target=&quot;_blank&quot;&gt;第一篇链接&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;在上图中，我们选择 SPA （单页面程序）AngularJs 和 EntityFramework 。依然使用 SimpleTaskSystem 作为我们的项目名字。点击创建后会生成并下载我们的解决方案。&lt;/p&gt;
&lt;p&gt; 解决方案中有5个项目。 .core 项目是领域（业务）层， Application 项目是应用层， WebApi 项目实现 Web Api 控制器， Web 项目是展现层，最后 EntityFramework 项目是 EntityFramework 数据库的实现，是基础设施层。&lt;/p&gt;
&lt;p&gt;友情提示：如果你下载本文的样例解决方案（&lt;span&gt;译者注：文章开头的样例下载链接&lt;/span&gt;），你会看到解决方案有7个项目。那是因为我们将样例修改为支持 NHibernate 和 Durandal 。如果你对 NHibernate 或者 Durandal 不感兴趣，请忽略。&lt;/p&gt;
&lt;p&gt;（&lt;span&gt;译者注：如果从官网下载，.Net Core 必须选择带 zero 模块才能下载 Angular 版本，不选择 zero 模块必须使用 .Net MVC 5.X，如图&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/9304/201801/9304-20180102111626174-738259039.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;我们创建一个简单的应用服务，这个服务创建任务并把任务指派给责任人。所以，我们需要任务 Task 和责任人 People 实体。&lt;/p&gt;
&lt;p&gt;任务 Task 实体定义很简单，包含任务的描述 Description ， 创建时间 CreationTime ，状态 State 。还有一个可选的责任人 Person （责任人 AssignedPerson）引用：&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('524e6601-a8d9-4932-94c3-a53384ec0416')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_524e6601-a8d9-4932-94c3-a53384ec0416&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_524e6601-a8d9-4932-94c3-a53384ec0416&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('524e6601-a8d9-4932-94c3-a53384ec0416',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_524e6601-a8d9-4932-94c3-a53384ec0416&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Task : Entity&amp;amp;lt;&lt;span&gt;long&lt;/span&gt;&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     [ForeignKey(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AssignedPersonId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; Person AssignedPerson { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;? AssignedPersonId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Description { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; DateTime CreationTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; TaskState State { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Task()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         CreationTime =&lt;span&gt; DateTime.Now;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         State =&lt;span&gt; TaskState.Active;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 责任人 Person 实体仅仅定义了责任人的名字 ：&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4c074aa8-fb24-407c-86c8-21f45c4a201b')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_4c074aa8-fb24-407c-86c8-21f45c4a201b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4c074aa8-fb24-407c-86c8-21f45c4a201b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4c074aa8-fb24-407c-86c8-21f45c4a201b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4c074aa8-fb24-407c-86c8-21f45c4a201b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person : Entity
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;ASP.NET Bolierplate 提供预定了 Id 属性的 Entity 类。我们的实体从 Entity 类继承。任务 Task 类从 Entity&amp;lt;long&amp;gt; 继承，所以它的 Id 类型是 long 。责任人 Person 类的 Id 类型是 int 。因为我们没有指定其他类型，所以责任人类使用了默认的主键类型 int 。&lt;/p&gt;
&lt;p&gt;由于实体属于领域层/业务层，所以我们在 Core 项目下定义实体。&lt;/p&gt;


&lt;p&gt;总所周知，EntityFramework 通过 DbContext 类与数据库连接。我们首先来定义 DbContext 。 ASP.NET Boilerplate 模版已经为我们创建了 DbContext 模板。我们只需要把实体 Task 和 Person 的 IDbSets 加上去就可以。这是我们的 DbContext 类：&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('75b92278-0f05-4a51-8cc6-20db6a1e5be7')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_75b92278-0f05-4a51-8cc6-20db6a1e5be7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_75b92278-0f05-4a51-8cc6-20db6a1e5be7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('75b92278-0f05-4a51-8cc6-20db6a1e5be7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_75b92278-0f05-4a51-8cc6-20db6a1e5be7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SimpleTaskSystemDbContext : AbpDbContext
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; IDbSet&amp;amp;lt;Task&amp;gt; Tasks { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; IDbSet&amp;amp;lt;Person&amp;gt; People { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SimpleTaskSystemDbContext()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         : &lt;span&gt;base&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; SimpleTaskSystemDbContext(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; nameOrConnectionString)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         : &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(nameOrConnectionString)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;它将会使用 web.config 中的默认 Default 连接字符串。 它定义如下：&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('01292513-3896-4242-a3e4-c723a0f177c7')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_01292513-3896-4242-a3e4-c723a0f177c7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_01292513-3896-4242-a3e4-c723a0f177c7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('01292513-3896-4242-a3e4-c723a0f177c7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_01292513-3896-4242-a3e4-c723a0f177c7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;amp;lt;add name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; connectionString=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Server=localhost; Database=SimpleTaskSystem; Trusted_Connection=True;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; providerName=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Data.SqlClient&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;


&lt;p&gt;我们使用 EntityFramework 的 代码优先模式 Code First 迁移来创建和维护数据库结构。 ASP.NET Boilerplate 模版支持默认迁移并使用配置 Configuration 类。&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f5f4a156-4ffb-4d8f-a478-17d12a0e64af')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_f5f4a156-4ffb-4d8f-a478-17d12a0e64af&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f5f4a156-4ffb-4d8f-a478-17d12a0e64af&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f5f4a156-4ffb-4d8f-a478-17d12a0e64af',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f5f4a156-4ffb-4d8f-a478-17d12a0e64af&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; internalinternal &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Configuration : DbMigrationsConfiguration&amp;amp;lt;SimpleTaskSystem.EntityFramework.SimpleTaskSystemDbContext&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Configuration()
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         AutomaticMigrationsEnabled = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Seed(SimpleTaskSystem.EntityFramework.SimpleTaskSystemDbContext context)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        context.People.AddOrUpdate(
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             p =&amp;gt;&lt;span&gt; p.Name,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;new&lt;/span&gt; Person {Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Isaac Asimov&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;new&lt;/span&gt; Person {Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Thomas More&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;new&lt;/span&gt; Person {Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;George Orwell&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;new&lt;/span&gt; Person {Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Douglas Adams&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            );
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;在 Seed 方法中，我们加入4个人作为初始数据。 然后，我们开始创建 初始迁移 initial migration 。 我们打开程序包管理控制台 Package Manager Console 并输入以下命令，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/9304/201801/9304-20180102125031096-1363333940.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（&lt;span&gt;译者注：如果这部分有问题，请参照ASP.NET Core MVC 的第一篇，默认项目必须选 EntityFramework 项目&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt; 输入命令 Add-Migration &quot;InitialCreate&quot; 创建一个名为 InitialCreate 的类。&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('84edff85-6489-41b8-83ea-f80edc44c372')&quot; readability=&quot;40&quot;&gt;&lt;img id=&quot;code_img_closed_84edff85-6489-41b8-83ea-f80edc44c372&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_84edff85-6489-41b8-83ea-f80edc44c372&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('84edff85-6489-41b8-83ea-f80edc44c372',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_84edff85-6489-41b8-83ea-f80edc44c372&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; InitialCreate : DbMigration
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Up()
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        CreateTable(
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbo.StsPeople&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             c =&amp;gt; &lt;span&gt;new&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     Id = c.Int(nullable: &lt;span&gt;false&lt;/span&gt;, identity: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                     Name =&lt;span&gt; c.String(),
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                })
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             .PrimaryKey(t =&amp;gt;&lt;span&gt; t.Id);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        CreateTable(
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbo.StsTasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             c =&amp;gt; &lt;span&gt;new&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     Id = c.Long(nullable: &lt;span&gt;false&lt;/span&gt;, identity: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     AssignedPersonId =&lt;span&gt; c.Int(),
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     Description =&lt;span&gt; c.String(),
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     CreationTime = c.DateTime(nullable: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     State = c.Byte(nullable: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                })
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             .PrimaryKey(t =&amp;gt;&lt;span&gt; t.Id)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             .ForeignKey(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbo.StsPeople&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, t =&amp;gt;&lt;span&gt; t.AssignedPersonId)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             .Index(t =&amp;gt;&lt;span&gt; t.AssignedPersonId);            
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Down()
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         DropForeignKey(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbo.StsTasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AssignedPersonId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbo.StsPeople&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         DropIndex(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbo.StsTasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AssignedPersonId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         DropTable(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbo.StsTasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         DropTable(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbo.StsPeople&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;我们已经完成了创建数据库所必需的类了，但是我们还没创建数据库。创建数据库必需输入以下的命令：&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ca9ef00c-4f9b-4183-9cdc-04e245c2406d')&quot;&gt;&lt;img id=&quot;code_img_closed_ca9ef00c-4f9b-4183-9cdc-04e245c2406d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ca9ef00c-4f9b-4183-9cdc-04e245c2406d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ca9ef00c-4f9b-4183-9cdc-04e245c2406d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ca9ef00c-4f9b-4183-9cdc-04e245c2406d&quot; class=&quot;cnblogs_code_hide&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; PM&amp;gt; Update-Database
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;（&lt;span&gt;译者注：命令在刚才的程序包管理控制台里输入。即输入 Add-Migration 的地方&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;这个命令执行迁移，创建数据库并填充初始数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/9304/201801/9304-20180102130448596-713275124.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当我们修改实体类后，我们可以很容易的创建新的迁移类，输入 Add-Migration 命令然后再输入 Update-Database 命令来更新数据库。 如果对数据库迁移感兴趣的，可以参考   &lt;a href=&quot;http://msdn.microsoft.com/en-us/data/aa937723&quot; target=&quot;_blank&quot;&gt;entity framework&lt;/a&gt; 文档。&lt;/p&gt;


&lt;p&gt;在领域设计模式中，仓储是用于实现数据库操作的指定代码。 ASP.NETBoilerplate 定义了范型的 IRepository 接口， 它为每个实体创建了自动化的仓储。 IRepository 定义了很多公用方法，比如 select ，insert ，update ， delete 等等，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/9304/201801/9304-20180102132111299-542626223.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在我们需要的时候我们可以扩展这些仓储 。 我们来扩展它并创建一个任务 Task 仓储。依据接口实现分离约定，我们首先声明仓储的借口， 任务 Task 的仓储接口如下：&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8f537243-a990-411e-a438-1926af4872bf')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_8f537243-a990-411e-a438-1926af4872bf&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8f537243-a990-411e-a438-1926af4872bf&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8f537243-a990-411e-a438-1926af4872bf',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8f537243-a990-411e-a438-1926af4872bf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; ITaskRepository : IRepository&amp;amp;lt;Task, &lt;span&gt;long&lt;/span&gt;&amp;gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     List&amp;amp;lt;Task&amp;gt; GetAllWithPeople(&lt;span&gt;int&lt;/span&gt;? assignedPersonId, TaskState?&lt;span&gt; state);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;代码拓展了 ASP.NETBoilerplate 的范型 IRepository 接口。所以， ITaskRepository 默认就包含所有这些方法的定义。它只需要编码自定义的方法 GetAllWithPeople(...).&lt;/p&gt;
&lt;p&gt;至于责任人 Person 仓储就无需再创建了，因为默认的方法我们就够用了。 ASP.NET boilerplate 无需创建仓储类，通过反射范型仓储就可以用了。我们将在创建应用服务章节的任务应用服务 TaskAppService 类进行展示。&lt;/p&gt;
&lt;p&gt;仓储接口是领域层/应用层的一部分，所以我们在 Core 项目下进行定义。&lt;/p&gt;


&lt;p&gt;我们来实现刚才定义的 ITaskRepository 接口。我们将在 EntityFramework 项目实现仓储类。 这样，领域层将完全独立于基础设施层 EntityFramework 。&lt;/p&gt;
&lt;p&gt;当我们创建模版时， ASP.NET Boilerplate 在我们的项目中自动创建了仓储范型类 ： SimpleTaskSystemRepositoryBase 。 创建这个基类是一种最佳实践的做法，我们可以在以后为我们的仓储类添加一些公用的方法。我们可以在代码里看到这个基类的定义。我们实现的 TaskRepository 就从这个基类继承。&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9241e1d6-2bc2-44db-ab30-4907f2485c93')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_9241e1d6-2bc2-44db-ab30-4907f2485c93&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9241e1d6-2bc2-44db-ab30-4907f2485c93&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9241e1d6-2bc2-44db-ab30-4907f2485c93',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9241e1d6-2bc2-44db-ab30-4907f2485c93&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; TaskRepository : SimpleTaskSystemRepositoryBase&amp;amp;lt;Task, &lt;span&gt;long&lt;/span&gt;&amp;gt;&lt;span&gt;, ITaskRepository
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;amp;lt;Task&amp;gt; GetAllWithPeople(&lt;span&gt;int&lt;/span&gt;? assignedPersonId, TaskState?&lt;span&gt; state)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;In repository methods, we do not deal with create/dispose DB connections, DbContexes and transactions. ABP handles it.&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;             
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; query = GetAll(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;GetAll() returns IQueryable&amp;amp;lt;T&amp;gt;, so we can query over it.
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;var query = Context.Tasks.AsQueryable(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Alternatively, we can directly use EF's DbContext object.
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;var query = Table.AsQueryable(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Another alternative: We can directly use 'Table' property instead of 'Context.Tasks', they are identical.
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Add some Where conditions...&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (assignedPersonId.HasValue)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             query = query.Where(task =&amp;gt; task.AssignedPerson.Id ==&lt;span&gt; assignedPersonId.Value);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (state.HasValue)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             query = query.Where(task =&amp;gt; task.State ==&lt;span&gt; state);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; query
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             .OrderByDescending(task =&amp;gt;&lt;span&gt; task.CreationTime)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             .Include(task =&amp;gt; task.AssignedPerson) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Include assigned person in a single query&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            .ToList();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;任务仓储 TaskRepository 继承于 SimpleTaskSystemRepositoryBase 并实现了 ITaskRepository 接口。&lt;/p&gt;
&lt;p&gt;GetAllWithPeople 是我们自定义的方法，该方法获取任务，并附带任务的责任人（预先绑定），该任务可通过设定条件进行过滤。我们可以在仓储里自由的使用数据库和数据库上下文 Context （ EF 的 DbContext ）对象。ASP.NET Boilerplate 为我们管理数据库连接，事务，创建和销毁数据库上下文 DbContext （详情参见 &lt;a href=&quot;http://www.aspnetboilerplate.com/Pages/Documents/Repositories&quot;&gt;documentation&lt;/a&gt;）&lt;/p&gt;


&lt;p&gt;应用服务通过分层方法把展示层和领域层分开。 我们在项目的应用程序集里定义了应用服务。首先，我们为任务应用服务定义接口：&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b8d1de8c-bc04-4081-bb51-63df492c7ae3')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_b8d1de8c-bc04-4081-bb51-63df492c7ae3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b8d1de8c-bc04-4081-bb51-63df492c7ae3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b8d1de8c-bc04-4081-bb51-63df492c7ae3',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b8d1de8c-bc04-4081-bb51-63df492c7ae3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ITaskAppService : IApplicationService
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    GetTasksOutput GetTasks(GetTasksInput input);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; UpdateTask(UpdateTaskInput input);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; CreateTask(CreateTaskInput input);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;（&lt;span&gt;译者注：在.net core 系列里， input 和 output 都已经替换为 ResultDto 了。 建议官网下载最新的版本&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;接口 ITaskAppService 拓展了 IApplicationService 。 ASP.NET Boilerplate 自动为这个类提供了一些特性 （比如依赖注入 dependency injection 和 验证 validation ）。现在，让我们来实现 ITaskAppService 接口&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('55e75c4c-040b-40c4-9938-0265891f9fe7')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_55e75c4c-040b-40c4-9938-0265891f9fe7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_55e75c4c-040b-40c4-9938-0265891f9fe7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('55e75c4c-040b-40c4-9938-0265891f9fe7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_55e75c4c-040b-40c4-9938-0265891f9fe7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TaskAppService : ApplicationService, ITaskAppService
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;These members set in constructor using constructor injection.&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ITaskRepository _taskRepository;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; IRepository&amp;amp;lt;Person&amp;gt;&lt;span&gt; _personRepository;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; &amp;amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt;In constructor, we can get needed classes/interfaces.
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt;They are sent here by dependency injection system automatically.
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; &amp;amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; TaskAppService(ITaskRepository taskRepository, IRepository&amp;amp;lt;Person&amp;gt;&lt;span&gt; personRepository)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         _taskRepository =&lt;span&gt; taskRepository;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         _personRepository =&lt;span&gt; personRepository;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; GetTasksOutput GetTasks(GetTasksInput input)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Called specific GetAllWithPeople method of task repository.&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; tasks =&lt;span&gt; _taskRepository.GetAllWithPeople(input.AssignedPersonId, input.State);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Used AutoMapper to automatically convert List&amp;amp;lt;Task&amp;gt; to List&amp;amp;lt;TaskDto&amp;gt;.&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GetTasksOutput
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                     Tasks = Mapper.Map&amp;amp;lt;List&amp;amp;lt;TaskDto&amp;gt;&amp;gt;&lt;span&gt;(tasks)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                };
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; UpdateTask(UpdateTaskInput input)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;We can use Logger, it's defined in ApplicationService base class.&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         Logger.Info(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Updating a task for input: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; input);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Retrieving a task entity with given id using standard Get method of repositories.&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; task =&lt;span&gt; _taskRepository.Get(input.TaskId);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Updating changed properties of the retrieved task entity.&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (input.State.HasValue)
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             task.State =&lt;span&gt; input.State.Value;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (input.AssignedPersonId.HasValue)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;             task.AssignedPerson =&lt;span&gt; _personRepository.Load(input.AssignedPersonId.Value);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;We even do not call Update method of the repository.
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Because an application service method is a 'unit of work' scope as default.
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ABP automatically saves all changes when a 'unit of work' scope ends (without any exception).&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; CreateTask(CreateTaskInput input)
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;We can use Logger, it's defined in ApplicationService class.&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;         Logger.Info(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Creating a task for input: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; input);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Creating a new Task entity with given input's properties&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; task = &lt;span&gt;new&lt;/span&gt; Task { Description =&lt;span&gt; input.Description };
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; 
&lt;span&gt;63&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (input.AssignedPersonId.HasValue)
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;             task.AssignedPersonId =&lt;span&gt; input.AssignedPersonId.Value;
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; 
&lt;span&gt;68&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Saving entity with standard Insert method of repositories.&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt; &lt;span&gt;        _taskRepository.Insert(task);
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;任务应用服务 TaskAppService 使用仓储来操作数据库。它通过构造函数注入模式从构造函数获得引用。 ASP.NET Boilerplate 天然实现依赖注入，所以我们可以自由的使用构造函数注入和属性注入（更多依赖注入详情请参照 ASP.NET Boilerplate  &lt;a href=&quot;http://www.aspnetboilerplate.com/Pages/Documents/Dependency-Injection&quot;&gt;documentation&lt;/a&gt; 文档）&lt;/p&gt;
&lt;p&gt;友情提示，我们通过 反射 IRepository&amp;lt;Person&amp;gt; 使用责任人仓储 PersonRepository 。 ASP.NET Boilerplate 自动为我们的实体创建了仓储。我们无需创建仓储类因为默认的 IRepository 接口的方法已经足够我们用了。&lt;/p&gt;
&lt;p&gt;应用服务方法使用数据传输对象 Data Transfer Objects （DTOs）。 这是最佳实践的一种。我们强烈推荐使用这种方法。如果你在将实体暴露给展示层这个问题上有自己的处理方式的话，请按你自己的方式来，无需一定使用 DTO。&lt;/p&gt;
&lt;p&gt;在 GetTasks 方法里， 我们使用 GetAllWithPeople 方法。它会返回一个 LIst&amp;lt;Task&amp;gt; ， 但我需要返回给展示层的是  ListMTaskDto&amp;gt; 。&lt;a href=&quot;http://automapper.org/&quot; target=&quot;_blank&quot;&gt;AutoMapper&lt;/a&gt; 可以帮我们自动的将 Task 对象转换为 TaskDto 对象。 GetTasksInput 和 GetTasksOutput 是专门为 GetTasks 方法定义的特殊 DTOs 。&lt;/p&gt;
&lt;p&gt; 在 CreateTask 方法里， 我们简单的创建了一个新的任务并使用 IRepository 的插入方法将它插入了数据库。&lt;/p&gt;
&lt;p&gt;ASP.NET Boilerplate 的 ApplicationService 类有一些方法可以让我们更容易的开发应用服务。例如，它定义了记录日志的 Logger 属性。所以，由于我们的 TaskAppService 是从 ApplicationService 继承的，我们可以直接使用 Logger 属性。是否从这个类继承是可选的，但必需实现 IApplicationService （友情提示，ITaskAppService 拓展了 IApplicationService ，由于这个类实现了 ITaskAppService 也就实现了 IApplicationService ）&lt;/p&gt;
&lt;h2&gt;验证&lt;/h2&gt;
&lt;p&gt;ASP.NET Boilerplate 自动验证应用服务方法的输入参数。 CreateTask 方法将 CreateTaskInput 作为输入参数&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2fa0cb99-dc34-4ba3-95a1-ea81119e77f3')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_2fa0cb99-dc34-4ba3-95a1-ea81119e77f3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2fa0cb99-dc34-4ba3-95a1-ea81119e77f3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2fa0cb99-dc34-4ba3-95a1-ea81119e77f3',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2fa0cb99-dc34-4ba3-95a1-ea81119e77f3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CreateTaskInput
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;? AssignedPersonId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;    [Required]
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Description { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;在这，描述 Description 被标记为必需的 Required 。 你可以使用更多的数据注释属性，请参考  &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.aspx&quot; target=&quot;_blank&quot;&gt;Data Annotation attributes&lt;/a&gt; 。 如果你想做一些定制验证，你可以实现 ICustomValidate ， 就像我在 UpdateTaskInput 里实现的&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('bf5dac71-4acb-4896-b4e7-2bcbdee47744')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_bf5dac71-4acb-4896-b4e7-2bcbdee47744&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bf5dac71-4acb-4896-b4e7-2bcbdee47744&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('bf5dac71-4acb-4896-b4e7-2bcbdee47744',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bf5dac71-4acb-4896-b4e7-2bcbdee47744&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UpdateTaskInput : ICustomValidate
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     [Range(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;long&lt;/span&gt;&lt;span&gt;.MaxValue)]
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; TaskId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;? AssignedPersonId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; TaskState? State { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; AddValidationErrors(List&amp;amp;lt;ValidationResult&amp;gt;&lt;span&gt; results)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (AssignedPersonId == &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; State == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             results.Add(&lt;span&gt;new&lt;/span&gt; ValidationResult(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Both of AssignedPersonId and State can not be null in order to update a Task!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AssignedPersonId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;State&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }));
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ToString()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[UpdateTask &amp;gt; TaskId = {0}, AssignedPersonId = {1}, State = {2}]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, TaskId, AssignedPersonId, State);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;AddValidationErrors 方法是你编写你自己的定制验证代码的地方。&lt;/p&gt;
&lt;h2&gt;处理异常&lt;/h2&gt;
&lt;p&gt;友情提示，我们不处理任何异常。 ASP.NET Boilerplate 自动处理异常，日志并返回一个恰当的错误信息给客户端。同理，在客户端，自动的处理这些错误信息并展示给客户。实际上，这对 ASP.NET MVC 和 Web API 控制器操作来说是合理的。 我们将使用 Web API 来暴露任务管理服务 TaskAppService ， 我们无需处理异常。 细节请参考 &lt;a href=&quot;http://www.aspnetboilerplate.com/Pages/Documents/Handling-Exceptions&quot;&gt;exception handling&lt;/a&gt; 文档。&lt;/p&gt;


&lt;p&gt;我们将我们的应用服务暴露给远程客户端。这样，我们的 Angularjs 应用程序可以使用 AJAX 轻松的调用这些服务方法。&lt;/p&gt;
&lt;p&gt;ASP.NET Boilerplate 提供了自动化方法将我们的应用服务方法暴露为 ASP.NET Web API 。我们使用 DynamicApiControllerBuilder &lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3b378cdf-e457-454e-9142-243103ae87d2')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_3b378cdf-e457-454e-9142-243103ae87d2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3b378cdf-e457-454e-9142-243103ae87d2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3b378cdf-e457-454e-9142-243103ae87d2',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3b378cdf-e457-454e-9142-243103ae87d2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;DynamicApiControllerBuilder
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     .ForAll&amp;amp;lt;IApplicationService&amp;gt;(Assembly.GetAssembly(&lt;span&gt;typeof&lt;/span&gt; (SimpleTaskSystemApplicationModule)), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tasksystem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     .Build();
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;在这个例子里， ASP.NET Boilerplate 在应用层程序集里查找所有继承了 IApplicationService 接口的接口，然后为每个应用服务类创建一个 web api 控制器。这是精细控制的替代语法。我们来看看怎么使用 AJAX 调用这些服务。&lt;/p&gt;


&lt;p&gt;我们来实现一个单页面（SPA） Web 应用来作为我们项目的用户界面。 AngularJS （Google 出品）是 SPA 框架最有用的一个（也许是最好的一个）。&lt;/p&gt;
&lt;p&gt;ASP.NET Boilerplate 提供一个模版，使我们可以轻松的开始使用 AngularJs 。 模版有可以平滑切换的两个页面（主页和关于页）。 使用 Twitter 的 Bootstrap 作为 HTML/CSS 框架。（所以，这是基于响应模式的。）。 当然，ASP.NET Boilerplate 的本地化系统可以让我们自由切换英语和土耳其语 （我们也可以很容易的添加其他语言或者删除掉）&lt;/p&gt;
&lt;p&gt;我们首先修改模版的路由。 ASP.NET Boilerplate 模版使用 AngularUI-Router 路由器。这是 AngularJs 的标准路由器 de-facto 。 它是基于状态的路由模式。我们将有两个视图： 任务列表 task list 和新任务 new task 。 所以， 我们需要修改 app.js 中定义的路由。 &lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('098af02d-eb4f-4598-a050-f3767940953a')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_098af02d-eb4f-4598-a050-f3767940953a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_098af02d-eb4f-4598-a050-f3767940953a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('098af02d-eb4f-4598-a050-f3767940953a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_098af02d-eb4f-4598-a050-f3767940953a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;app.config([
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$stateProvider&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$urlRouterProvider&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    function ($stateProvider, $urlRouterProvider) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         $urlRouterProvider.otherwise(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        $stateProvider
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             .state(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;tasklist&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 url: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 templateUrl: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/App/Main/views/task/list.cshtml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 menu: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TaskList&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Matches to name of 'TaskList' menu in SimpleTaskSystemNavigationProvider&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             .state(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;newtask&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 url: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/new&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 templateUrl: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/App/Main/views/task/new.cshtml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 menu: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NewTask&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Matches to name of 'NewTask' menu in SimpleTaskSystemNavigationProvider&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; ]);
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;app.js 是主要的 javascript 文件， 它配置和启动我们的 SPA 。友情提示， 我们使用 cshtml 文件作为视图。通常，在 AngularJs 中，我们使用 html 文件作为视图。 ASP.NET Boilerplate 让我们可以使用 cshtml 文件。所以我们可以使用 razor 引擎来生成 HTML 。 &lt;/p&gt;
&lt;p&gt;ASP.NET Boilerplate 基础架构支持在应用程序里创建和展示菜单 menus ，而且这很简单。你可以使用 C# 定义菜单，使用 C# 和 javascript 来使用菜单。请查看 SimpleTaskSystemNavigationProvide 类的代码，这里我们创建了菜单，然后请查看 header.js/header.cshtml 的代码， 这里我们展示了如何使用 angular 来展示菜单。&lt;/p&gt;
&lt;p&gt;首先，我们为 任务列表 task list 视图创建一个 Angular 控制器 controller&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e58a6d53-5d74-4857-85fd-8a76e160972e')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_e58a6d53-5d74-4857-85fd-8a76e160972e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e58a6d53-5d74-4857-85fd-8a76e160972e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e58a6d53-5d74-4857-85fd-8a76e160972e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e58a6d53-5d74-4857-85fd-8a76e160972e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;(function() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; app = angular.module(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; controllerId = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sts.views.task.list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    app.controller(controllerId, [
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$scope&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abp.services.tasksystem.task&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        function($scope, taskService) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; vm = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;             vm.localize = abp.localization.getSource(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SimpleTaskSystem&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;             vm.tasks =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;             $scope.selectedTaskState = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;             $scope.$watch(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;selectedTaskState&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function(value) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                vm.refreshTasks();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;             vm.refreshTasks =&lt;span&gt; function() {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 abp.ui.setBusy( &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Set whole page busy until getTasks complete&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;                     &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     taskService.getTasks({ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Call application service method directly from javascript&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                         state: $scope.selectedTaskState &amp;gt; &lt;span&gt;0&lt;/span&gt; ? $scope.selectedTaskState : &lt;span&gt;null&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                    }).success(function(data) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                         vm.tasks =&lt;span&gt; data.tasks;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                    })
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                );
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;             vm.changeTaskState =&lt;span&gt; function(task) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt;&lt;span&gt; newState;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (task.state == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                     newState = &lt;span&gt;2&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Completed&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                     newState = &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Active&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;                taskService.updateTask({
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                    taskId: task.id,
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                    state: newState
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;                }).success(function() {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                     task.state =&lt;span&gt; newState;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                     abp.notify.info(vm.localize(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TaskUpdatedMessage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;                });
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt;             vm.getTaskCountText =&lt;span&gt; function() {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; abp.utils.formatString(vm.localize(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Xtasks&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;), vm.tasks.length);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    ]);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; })();
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;我们将控制器 controller 命名为 ‘sts.views.task.list’ 。这么命名是我的习惯（方便拓展或重构代码），但你可以简单的命名为 ‘ListController’ 。 AngularJs 一样可以使用依赖注入。 我们在这反射 ‘$scope’ 和 ‘abp.services.tasksystem.task’ 。 第一个是 Angular 的 scope 变量，第二个是自动生成的 ITaskAppService （我们在创建 Web API 服务章节创建了这个接口） 的 javascript 服务代理 。&lt;/p&gt;
&lt;p&gt;ASP.NET Boilerplate 的基础架构支持在服务端和客户端都使用相同的本地化 &lt;a href=&quot;http://www.aspnetboilerplate.com/Pages/Documents/Localization&quot;&gt;localization&lt;/a&gt; 文本 （详情请参照 &lt;a href=&quot;http://www.aspnetboilerplate.com/Pages/Documents/Localization&quot;&gt;localization&lt;/a&gt; 文档）&lt;/p&gt;
&lt;p&gt;vm.tasks 是即将在视图里展示的任务列表。 vm.refreshTasks 方法调用 taskService 获取任务并填充到队列里。当 selectedTaskState 改变的时候（使用 $scope.$watch 监控）就会调用 vm.refreshTasks 方法。&lt;/p&gt;
&lt;p&gt;就像你所看到的。调用应用服务方法是如此的容易和直接！这是 ASP.NET Boilerplate 的特性之一。它生成 Web API 层和与 Web API 层通讯的 Javascript 代理层。所以，我们调用应用服务方法就想调用 javascript 方法一样简单。这是与 AngularJs 的完整集成 （通过使用 Angular 的 $http 服务）。&lt;/p&gt;
&lt;p&gt;让我们看下任务列表的视图代码。&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('37f4d14e-f14b-447d-b558-87e5cfb92caa')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_37f4d14e-f14b-447d-b558-87e5cfb92caa&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_37f4d14e-f14b-447d-b558-87e5cfb92caa&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('37f4d14e-f14b-447d-b558-87e5cfb92caa',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_37f4d14e-f14b-447d-b558-87e5cfb92caa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;panel panel-default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ng-controller=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sts.views.task.list as vm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &amp;amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;panel-heading&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position: relative;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 4&lt;/span&gt;         &amp;amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;row&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 5&lt;/span&gt;             
&lt;span&gt; 6&lt;/span&gt;             &amp;amp;lt;!-- Title --&amp;gt;
&lt;span&gt; 7&lt;/span&gt;             &amp;amp;lt;h3 &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;panel-title col-xs-6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 8&lt;/span&gt;                 @L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) - &amp;amp;lt;span&amp;gt;{{vm.getTaskCountText()}}&amp;amp;lt;/span&amp;gt;
&lt;span&gt; 9&lt;/span&gt;             &amp;amp;lt;/h3&amp;gt;
&lt;span&gt;10&lt;/span&gt;             
&lt;span&gt;11&lt;/span&gt;             &amp;amp;lt;!-- Task state combobox --&amp;gt;
&lt;span&gt;12&lt;/span&gt;             &amp;amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-xs-6 text-right&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;13&lt;/span&gt;                 &amp;amp;lt;&lt;span&gt;select&lt;/span&gt; ng-model=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;selectedTaskState&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;14&lt;/span&gt;                     &amp;amp;lt;option value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AllTasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;amp;lt;/option&amp;gt;
&lt;span&gt;15&lt;/span&gt;                     &amp;amp;lt;option value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ActiveTasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;amp;lt;/option&amp;gt;
&lt;span&gt;16&lt;/span&gt;                     &amp;amp;lt;option value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CompletedTasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;amp;lt;/option&amp;gt;
&lt;span&gt;17&lt;/span&gt;                 &amp;amp;lt;/&lt;span&gt;select&lt;/span&gt;&amp;gt;
&lt;span&gt;18&lt;/span&gt;             &amp;amp;lt;/div&amp;gt;
&lt;span&gt;19&lt;/span&gt;         &amp;amp;lt;/div&amp;gt;
&lt;span&gt;20&lt;/span&gt;     &amp;amp;lt;/div&amp;gt;
&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &amp;amp;lt;!-- Task list --&amp;gt;
&lt;span&gt;23&lt;/span&gt;     &amp;amp;lt;ul &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ng-repeat=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;task in vm.tasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;24&lt;/span&gt;         &amp;amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list-group-item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;25&lt;/span&gt;             &amp;amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;task-state-icon glyphicon&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ng-click=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vm.changeTaskState(task)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ng-&lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{'glyphicon-minus': task.state == 1, 'glyphicon-ok': task.state == 2}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;amp;lt;/span&amp;gt;
&lt;span&gt;26&lt;/span&gt;             &amp;amp;lt;span ng-&lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{'task-description-active': task.state == 1, 'task-description-completed': task.state == 2 }&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;{{task.description}}&amp;amp;lt;/span&amp;gt;
&lt;span&gt;27&lt;/span&gt;             &amp;amp;lt;br /&amp;gt;
&lt;span&gt;28&lt;/span&gt;             &amp;amp;lt;span ng-show=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;task.assignedPersonId &amp;gt; 0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;29&lt;/span&gt;                 &amp;amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;task-assignedto&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;{{task.assignedPersonName}}&amp;amp;lt;/span&amp;gt;
&lt;span&gt;30&lt;/span&gt;             &amp;amp;lt;/span&amp;gt;
&lt;span&gt;31&lt;/span&gt;             &amp;amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;task-creationtime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;{{task.creationTime}}&amp;amp;lt;/span&amp;gt;
&lt;span&gt;32&lt;/span&gt;         &amp;amp;lt;/div&amp;gt;
&lt;span&gt;33&lt;/span&gt;     &amp;amp;lt;/ul&amp;gt;
&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &amp;amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; ng-controller 特性（参见第一行）将视图和控制器绑在了一起。 @L(&quot;TaskList&quot;) 用于将 “任务列表 task list”进行本地化 （在服务端对 HTML 进行渲染）。这是 cshtml 文件可以做到的。&lt;/p&gt;
&lt;p&gt;ng-model 将下拉框和 javascript 变量绑定在了一起。当变量改变时，下拉框就会更新。当下拉框改变了，变量也就更新了。这是 AngularJs 的双向绑定。&lt;/p&gt;
&lt;p&gt;ng-repeat 是 Angular 中的另一个“指令”，用于传送相同的 HTML 给队列里的每个值。当队列改变时（比如添加了一个项目），它会自动反射到视图里。这是 AngularJs 另一个很强大的特性。&lt;/p&gt;
&lt;p&gt;友情提示，当你添加一个 javascript 文件时（例如，为 ‘任务列表’控制器），你应该把它加到你的页面上。你可以在模版里的 Home\Index.cshtml 里添加它。&lt;/p&gt;


&lt;p&gt;ASP.NET Boilerplate 拥有一个灵活且强大的本地化系统。你可以 XML 文件或资源文件作为本地化源文件。你也可以自定义本地化源文件。详情请参加 &lt;a href=&quot;http://www.aspnetboilerplate.com/Pages/Documents/Localization&quot;&gt;documentation&lt;/a&gt; 文档。在这个样例应用程序里，我们使用 XML 文件（路径是 web 应用程序的本地化文件夹里 Localization）：&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('bb421469-448d-4fb5-93aa-9aee4b922ab4')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_bb421469-448d-4fb5-93aa-9aee4b922ab4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bb421469-448d-4fb5-93aa-9aee4b922ab4&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('bb421469-448d-4fb5-93aa-9aee4b922ab4',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bb421469-448d-4fb5-93aa-9aee4b922ab4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;amp;lt;localizationDictionary culture=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;en&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 3&lt;/span&gt;   &amp;amp;lt;texts&amp;gt;
&lt;span&gt; 4&lt;/span&gt;     &amp;amp;lt;text name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskSystem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Task System&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 5&lt;/span&gt;     &amp;amp;lt;text name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Task List&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;amp;lt;text name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NewTask&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;New Task&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;amp;lt;text name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Xtasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0} tasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;amp;lt;text name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AllTasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;All tasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;amp;lt;text name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ActiveTasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Active tasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;10&lt;/span&gt;     &amp;amp;lt;text name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CompletedTasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Completed tasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;11&lt;/span&gt;     &amp;amp;lt;text name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskDescription&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Task description&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;12&lt;/span&gt;     &amp;amp;lt;text name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EnterDescriptionHere&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Task description&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;13&lt;/span&gt;     &amp;amp;lt;text name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AssignTo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Assign to&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;14&lt;/span&gt;     &amp;amp;lt;text name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SelectPerson&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Select person&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;15&lt;/span&gt;     &amp;amp;lt;text name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTheTask&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Create the task&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;16&lt;/span&gt;     &amp;amp;lt;text name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskUpdatedMessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Task has been successfully updated.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;17&lt;/span&gt;     &amp;amp;lt;text name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskCreatedMessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Task {0} has been created successfully.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;18&lt;/span&gt;   &amp;amp;lt;/texts&amp;gt;
&lt;span&gt;19&lt;/span&gt; &amp;amp;lt;/localizationDictionary&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;


&lt;p&gt;ASP.NET Boilerplate 的设计是可测试的。我们编写了一篇文章来展示 ABP 基本项目的单元测试和集成测试。文章请参见 &lt;a href=&quot;http://www.codeproject.com/Articles/871786/Unit-testing-in-Csharp-using-xUnit-Entity-Framewor&quot;&gt;Unit testing in C# using xUnit, Entity Framework, Effort and ASP.NET Boilerplate&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;在这片文章里，我们展示了如何开发一个 N 层单页面的 SPA 基于响应式用户界面的 ASP.NET MVC web 应用程序。我们使用 ASP.NET Boilerplate 作为基础架构，因为它是基于最佳实践的，我们不止很容易就可以开发应用程序，而且相当的节约时间。更多信息请参考以下链接：&lt;/p&gt;


&lt;ul&gt;&lt;li&gt;2016-10-26：升级样例项目到 ABP v1.0&lt;/li&gt;
&lt;li&gt;2016-07-19：升级文章和样例项目到 ABP v0.10&lt;/li&gt;
&lt;li&gt;2015-06-08：升级文章和样例项目到 ABP v0.6.3.1&lt;/li&gt;
&lt;li&gt;2015-02-20：增加单元测试文章的链接，更新样例项目&lt;/li&gt;
&lt;li&gt;2015-01-05： 升级样例项目到 ABP v0.5&lt;/li&gt;
&lt;li&gt;2014-11-03：升级文章和样例项目到 ABP v0.4.1&lt;/li&gt;
&lt;li&gt;2014-09-08：升级文章和样例项目到 ABP v0.3.2&lt;/li&gt;
&lt;li&gt;2014-08-17： 升级样例项目到 ABP v0.3.1.2&lt;/li&gt;
&lt;li&gt;2014-07-22：升级样例项目到 ABP v0.3.0.1&lt;/li&gt;
&lt;li&gt;2014-07-08：添加 “Enable-Migrations”的命令行截图&lt;/li&gt;
&lt;li&gt;2014-07-01： 首次发布文章&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[1] ABP.NET Boilerplate 官网 ： &lt;a href=&quot;http://www.aspnetboilerplate.com/&quot;&gt;http://www.aspnetboilerplate.com&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;该文章和其中的任何源代码和文件的版权均归  &lt;a href=&quot;http://www.codeproject.com/info/cpol10.aspx&quot; rel=&quot;license&quot;&gt;The Code Project Open License (CPOL)&lt;/a&gt; 所有&lt;/p&gt;


&lt;p&gt;&lt;span&gt;此部分信息为译者学习中使用的资料，与本文及作者无关。请按需使用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Angular 英文官网 ： &lt;a href=&quot;https://angular.io/&quot;&gt;https://angular.io/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Angular 中文官网 ：&lt;a href=&quot;https://angular.cn/&quot;&gt;https://angular.cn/&lt;/a&gt;  中文官网在大版本上与英文官网同步，小版本上会落后一些。&lt;/p&gt;
&lt;p&gt;阿里的 Angular 组件NG-ZORRO：&lt;a href=&quot;https://ng.ant.design/#/docs/angular/introduce&quot;&gt;https://ng.ant.design/#/docs/angular/introduce&lt;/a&gt; 分为 NG5 和 NG4 两个版本&lt;/p&gt;
&lt;p&gt;百度的 Echarts 数据可视化组件 ： &lt;a href=&quot;http://echarts.baidu.com/&quot;&gt;http://echarts.baidu.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;书籍推荐看官方的英文或中文文档：&lt;/p&gt;
&lt;p&gt;推荐看 ng-book 最新版本，英文的 &lt;a href=&quot;https://www.ng-book.com/2/&quot;&gt;https://www.ng-book.com/2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中文的只有 ng-book2 的翻译版 &lt;a href=&quot;https://www.amazon.cn/dp/B06ZZ1YFG4/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1514958849&amp;amp;sr=1-1&amp;amp;keywords=Angular+%E6%9D%83%E5%A8%81&quot; target=&quot;_blank&quot;&gt;《Angular 权威教程》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后推荐看 雪狼的 &lt;a href=&quot;https://www.amazon.cn/dp/B01ASI3HCG/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1514958799&amp;amp;sr=1-1&amp;amp;keywords=AngularJS%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5&quot; target=&quot;_blank&quot;&gt;《AngularJS深度剖析与最佳实践》&lt;/a&gt;这本书写的是 Angular 1.0 ，感兴趣的可以重温一下&lt;/p&gt;

&lt;p&gt;群和博客请参考&lt;/p&gt;
&lt;h2 id=&quot;nice-angular社区：qq群&quot;&gt;Nice Angular社区：QQ群&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;278252889（ Nice Angular社区，2000人已满）&lt;/li&gt;
&lt;li&gt;305739270（ Nice Angular社区二群，2000人）&lt;/li&gt;
&lt;li&gt;207542263（ Nice Angular社区三群，1000人）&lt;/li&gt;
&lt;li&gt;200242234（ Angular 互助组，500人）&lt;/li&gt;
&lt;li&gt;110455272（ Ionic 开发实践，500人）&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;nice-angular社区：微信公众号&quot;&gt;Nice Angular社区：微信公众号&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;shuang_lang_shuo（由破狼、雪狼等人维护）&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Wed, 03 Jan 2018 05:57:00 +0000</pubDate>
<dc:creator>鸭补一生如梦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yabu007/p/8134792.html</dc:identifier>
</item>
<item>
<title>MySQL Replication 主从复制全方位解决方案 - 惨绿少年</title>
<link>http://www.cnblogs.com/clsn/p/8150036.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/clsn/p/8150036.html</guid>
<description>&lt;h2&gt;1.1 主从复制基础概念&lt;/h2&gt;
&lt;p&gt;　　　　在了解主从复制之前必须要了解的就是数据库的二进制日志(binlog),主从复制架构大多基于二进制日志进行，二进制日志相关信息参考：&lt;a href=&quot;http://www.cnblogs.com/clsn/p/8087678.html#_label6&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/clsn/p/8087678.html#_label6&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;1.1.1 二进制日志管理说明&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;span&gt;二进制日志在哪？如何设置位置和命名？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;p class=&quot;a4&quot;&gt;　　　　在my.cnf文件中使用 log-bin = 指定；命名规则为 mysql-bin.000000 （后为6位数字）&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;二进制日志位置&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
mysql&lt;span&gt;&amp;gt;&lt;/span&gt; show variables &lt;span&gt;like&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%log_bin%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-------------------------------+-----------------------------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; Variable_name                   &lt;span&gt;|&lt;/span&gt; Value                                   &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-------------------------------+-----------------------------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; log_bin                         &lt;span&gt;|&lt;/span&gt; &lt;span&gt;ON&lt;/span&gt;                                      &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; log_bin_basename                &lt;span&gt;|&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;application&lt;span&gt;/&lt;/span&gt;mysql&lt;span&gt;/&lt;/span&gt;data&lt;span&gt;/&lt;/span&gt;mysql&lt;span&gt;-&lt;/span&gt;bin       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; log_bin_index                   &lt;span&gt;|&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;application&lt;span&gt;/&lt;/span&gt;mysql&lt;span&gt;/&lt;/span&gt;data&lt;span&gt;/&lt;/span&gt;mysql&lt;span&gt;-&lt;/span&gt;bin.&lt;span&gt;index&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; log_bin_trust_function_creators &lt;span&gt;|&lt;/span&gt; &lt;span&gt;OFF&lt;/span&gt;                                     &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; log_bin_use_v1_row_events       &lt;span&gt;|&lt;/span&gt; &lt;span&gt;OFF&lt;/span&gt;                                     &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; sql_log_bin                     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;ON&lt;/span&gt;                                      &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-------------------------------+-----------------------------------------+&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.06&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;       日志命名&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
mysql&lt;span&gt;&amp;gt;&lt;/span&gt; show &lt;span&gt;binary&lt;/span&gt;&lt;span&gt; logs;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----------------+-----------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; Log_name         &lt;span&gt;|&lt;/span&gt; File_size &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----------------+-----------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; mysql&lt;span&gt;-&lt;/span&gt;bin.&lt;span&gt;000001&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;      &lt;span&gt;2979&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; mysql&lt;span&gt;-&lt;/span&gt;bin.&lt;span&gt;000002&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;120&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----------------+-----------+&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;二进制日志记录什么？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;a4&quot;&gt;　　　　二进制日志中记录的是一个个完成的事件&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;span&gt;二进制日志格式是怎样的？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;a4&quot;&gt;　　　　推荐使用row格式&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;       查看当前使用的日志 格式。&lt;/p&gt;
&lt;div readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
mysql&lt;span&gt;&amp;gt;&lt;/span&gt; show variables &lt;span&gt;like&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%format%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------------------------+-------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; Variable_name            &lt;span&gt;|&lt;/span&gt; Value             &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------------------------+-------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; binlog_format            &lt;span&gt;|&lt;/span&gt; ROW               &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; date_format              &lt;span&gt;|&lt;/span&gt; &lt;span&gt;%&lt;/span&gt;Y&lt;span&gt;-%&lt;/span&gt;m&lt;span&gt;-%&lt;/span&gt;d          &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; datetime_format          &lt;span&gt;|&lt;/span&gt; &lt;span&gt;%&lt;/span&gt;Y&lt;span&gt;-%&lt;/span&gt;m&lt;span&gt;-%&lt;/span&gt;d &lt;span&gt;%&lt;/span&gt;H:&lt;span&gt;%&lt;/span&gt;i:&lt;span&gt;%&lt;/span&gt;s &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; default_week_format      &lt;span&gt;|&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;                 &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; innodb_file_format       &lt;span&gt;|&lt;/span&gt; Antelope          &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; innodb_file_format_check &lt;span&gt;|&lt;/span&gt; &lt;span&gt;ON&lt;/span&gt;                &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; innodb_file_format_max   &lt;span&gt;|&lt;/span&gt; Antelope          &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; time_format              &lt;span&gt;|&lt;/span&gt; &lt;span&gt;%&lt;/span&gt;H:&lt;span&gt;%&lt;/span&gt;i:&lt;span&gt;%&lt;/span&gt;s          &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------------------------+-------------------+&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;二进制日志如何滚动？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;a4&quot;&gt;　　　　每次重启都会刷新日志，也可以通过命令进行刷新  reset master;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;span&gt;二进制日志用来干嘛？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p class=&quot;a4&quot;&gt;　　　　备份恢复&lt;/p&gt;
&lt;p class=&quot;a4&quot;&gt;　　　　起始点的备份恢复&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;span&gt;二进制日志的操作命令？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;     　　  查看都有哪些二进制日志&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
mysql&lt;span&gt;&amp;gt;&lt;/span&gt; show &lt;span&gt;binary&lt;/span&gt;&lt;span&gt; logs;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----------------+-----------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; Log_name         &lt;span&gt;|&lt;/span&gt; File_size &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----------------+-----------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; mysql&lt;span&gt;-&lt;/span&gt;bin.&lt;span&gt;000001&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;      &lt;span&gt;2979&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; mysql&lt;span&gt;-&lt;/span&gt;bin.&lt;span&gt;000002&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;167&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; mysql&lt;span&gt;-&lt;/span&gt;bin.&lt;span&gt;000003&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;       &lt;span&gt;120&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----------------+-----------+&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　       查看当前使用的二进制日志文件&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
mysql&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; show master status;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----------------+----------+--------------+------------------+-------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;File&lt;/span&gt;             &lt;span&gt;|&lt;/span&gt; Position &lt;span&gt;|&lt;/span&gt; Binlog_Do_DB &lt;span&gt;|&lt;/span&gt; Binlog_Ignore_DB &lt;span&gt;|&lt;/span&gt; Executed_Gtid_Set &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----------------+----------+--------------+------------------+-------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; mysql&lt;span&gt;-&lt;/span&gt;bin.&lt;span&gt;000003&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;      &lt;span&gt;120&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;              &lt;span&gt;|&lt;/span&gt;                  &lt;span&gt;|&lt;/span&gt;                   &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----------------+----------+--------------+------------------+-------------------+&lt;/span&gt;
&lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;em&gt;binlog&lt;/em&gt;&lt;em&gt;相关详情参照：http://www.cnblogs.com/clsn/p/8087678.html#_label6&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;1.1.2 mysql传统备份方式和缺陷&lt;/h3&gt;
&lt;p&gt;　　1、二进制日志备份&lt;/p&gt;
&lt;p&gt;　　2、mysqldump&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p class=&quot;a4&quot;&gt;   　　　　a)必须有数据库服务器完成逻辑工作，需要更多地cpu周期&lt;/p&gt;
&lt;p class=&quot;a4&quot;&gt;　　　　   b)逻辑备份还原速度慢：需要MySQL加载和解释语句、转化存储格式、重建引擎&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;　　3、xtrabackup&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;p class=&quot;a4&quot;&gt; 　　　　  a)文件大&lt;/p&gt;
&lt;p class=&quot;a4&quot;&gt;　　　　　b)不总是可以跨平台、操作系统和MySQL版本&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;1.1.3 MySQL主从复制能为我们做什么&lt;/h3&gt;
&lt;p&gt;　　　　　高可用、辅助备份、分担负载&lt;/p&gt;
&lt;h2&gt;1.2 MySQL主从复制介绍&lt;/h2&gt;
&lt;h3&gt;1.2.1 复制技术&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p class=&quot;a4&quot;&gt;　　1.保证数据安全(异机实时备份)&lt;/p&gt;
&lt;p class=&quot;a4&quot;&gt;　　2.保证服务持续运行（宕机接管）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;主从复制实现基本原理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p class=&quot;a4&quot;&gt;　　1.自带功能，复制是 MySQL 的一项功能，允许服务器将更改从一个实例复制到另一个实例。&lt;/p&gt;
&lt;p class=&quot;a4&quot;&gt;　　2.主服务器将所有数据和结构更改记录到二进制日志中。&lt;/p&gt;
&lt;p class=&quot;a4&quot;&gt;　　3.从属服务器从主服务器请求该二进制日志并在本地应用其内容。即通过把主库的binlog传送到从库，从新解析应用到从库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;h3&gt;1.2.2 复制架构&lt;/h3&gt;
&lt;p&gt;mysql复制的应用常见场景：&lt;/p&gt;
&lt;div&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;p class=&quot;a&quot;&gt;应用场景1：从服务器作为主服务器的实时数据备份&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;应用场景2：主从服务器实现读写分离，从服务器实现负载均衡&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;应用场景3：把多个从服务器根据业务重要性进行拆分访问&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;h4&gt;&lt;strong&gt;1.2.2.1 &lt;/strong&gt; &lt;strong&gt;主–从复制&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;　　传统的 MySQL 复制提供了一种简单的主–从复制方法。 有一个主，以及一个或多个从。 主节点执行和提交事务，然后将它们（异步地）发送到从节点，以重新执行（在基于语句的复制中）或应用（在基于行的复制中）。 这是一个 shared-nothing 的系统，默认情况下所有 server 成员都有一个完整的数据副本。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230145845570-1921897724.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;(图)MySQL 异步复制&lt;/p&gt;
&lt;p&gt;　　还有一个半同步复制，它在协议中添加了一个同步步骤。 这意味着主节点在提交时需要等待从节点确认它已经接收到事务。只有这样，主节点才能继续提交操作。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230145902382-366690047.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;(图)MySQL 异步复制&lt;/p&gt;
&lt;p&gt;　　在上面的两个图片中，可以看到传统异步 MySQL 复制协议（以及半同步）的图形展示。 蓝色箭头表示在不同 server 之间或者 server 与 client 应用之间的信息交互。&lt;/p&gt;
&lt;h3&gt;1.2.3 MySQL主从复制原理介绍&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;复制过程：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;p class=&quot;a&quot;&gt;1、开启binlog日志，通过把主库的binlog传送到从库，从新解析应用到从库。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;2、复制需要3个线程（dump、io、sql）完成，5.6从库多个sql。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;3、复制是异步的过程。主从复制是异步的逻辑的SQL语句级的复制。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;复制前提：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;blockquote readability=&quot;19&quot;&gt;
&lt;div readability=&quot;37&quot;&gt;
&lt;p class=&quot;a&quot;&gt;1、主服务期一定要打开二进制日志&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;2、必须两台服务器（或者是多个实例）&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;3、从服务器需要一次&lt;strong&gt;&lt;em&gt;数据初始化&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;     3.1如果主从服务器都是新搭建的话，可以不做初始化&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;     3.2如果主服务器已经运行了很长时间了，可以通过备份将主库数据恢复到从库。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;4、主库必须要有对从库复制请求的用户。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;5、从库需要有relay-log设置，存放从主库传送过来的二进制日志 &lt;em&gt;show variables  like '%relay%';&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;6、在第一次的时候，从库需要change master to 去连接主库。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;7、change master信息需要存放到master.info中  &lt;em&gt;show variables  like '%master_info%';&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;8、从库怎么知道，主库发生了新的变化?通过relay-log.info记录的已经应用过的relay-log信息。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;&lt;strong&gt;9&lt;/strong&gt;&lt;strong&gt;、在复制过程中涉及到的线程&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;      从库会开启一个IO thread(线程)，负责连接主库，请求binlog，接收binlog并写入relay-log。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;      从库会开启一个SQL thread(线程)，负责执行relay-log中的事件。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;      主库会开启一个dump thrad(线程)，负责响应从IO thread的请求。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;主从怎么实现的？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;1、通过二进制日志&lt;/p&gt;
&lt;p&gt;2、至少两台（主、从）&lt;/p&gt;
&lt;p&gt;3、主服务器的二进制日志“拿”到从服务器上再运行一遍。&lt;/p&gt;
&lt;p&gt;4、通过网络连接两台机器，一般都会出现延迟的状态。也可以说是异步的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230150035101-381337558.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;1.2.4 执行原理--第一次开启主从过程&lt;/h3&gt;
&lt;div readability=&quot;16.5&quot;&gt;
&lt;blockquote readability=&quot;26&quot;&gt;
&lt;p class=&quot;a&quot;&gt;1、 从库通过手工执行change master to 语句连接主库，提供了连接的用户一切条件&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;&lt;em&gt;（user&lt;/em&gt;&lt;em&gt;、password&lt;/em&gt;&lt;em&gt;、port&lt;/em&gt;&lt;em&gt;、ip&lt;/em&gt;&lt;em&gt;）&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;    &lt;em&gt;并且让从库知道，二进制日志的起点位置（file&lt;/em&gt;&lt;em&gt;名  position&lt;/em&gt;&lt;em&gt;号）&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;    &lt;em&gt;start slave&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;2、从库的IO和主库的dump线程建立连接&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;3、从库根据change master to 语句提供的file名和position号，IO线程向主库发起binlog的请求&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;4、主库dump线程根据从库的请求，将本地binlog以events的方式发给从库IO线程&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;5、从库IO线程接收binlog evnets，并存放到本地relay-log中，传送过来的信息，会记录到master.info中。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;6、从库SQL线程应用relay-log，并且把应用过的记录到relay-log.info,默认情况下，已经应用过的relay会自动被清理purge。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;&lt;span&gt;&lt;strong&gt;到此位置，一次主从复制就完成&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p class=&quot;a&quot;&gt;　　一旦主从运行起来：&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;    　　　　就不需要手工执行change master to，&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt; 　　  　　 因为信息都会被存放到master.info&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;　　　　　　（user、password、port、ip，上次获取过的binlog信息file和position）中&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;   　　　　 其他的过程都是一样的&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;1.2.4.1 &lt;/strong&gt; &lt;strong&gt;详细的mysql replication&lt;/strong&gt; &lt;strong&gt;过程  &lt;/strong&gt;&lt;/h4&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230150155007-1749757503.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.3 主从搭建配置&lt;/h2&gt;
&lt;p&gt;　　　　本次主从搭建使用mysql多实例进行实验。&lt;em&gt;多实例配置参考文档进行配置：&lt;/em&gt;&lt;a href=&quot;http://www.cnblogs.com/clsn/p/8038964.html#_label8&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;http://www.cnblogs.com/clsn/p/8038964.html#_label8&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;1.3.1 多实例数据库slave配置&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;系统环境说明：&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[root@db02 ~]# &lt;span&gt;cat&lt;/span&gt; /etc/redhat-&lt;span&gt;release 
CentOS release &lt;/span&gt;&lt;span&gt;6.9&lt;/span&gt;&lt;span&gt; (Final)
[root@db02 &lt;/span&gt;~]# &lt;span&gt;uname&lt;/span&gt; -&lt;span&gt;r
&lt;/span&gt;&lt;span&gt;2.6&lt;/span&gt;.&lt;span&gt;32&lt;/span&gt;-&lt;span&gt;696&lt;/span&gt;&lt;span&gt;.el6.x86_64
[root@db02 &lt;/span&gt;~]# /etc/init.d/&lt;span&gt;iptables status 
iptables: Firewall is not running.  # 注意：务必关闭防火墙（iptables  selinux）
[root@db02 &lt;/span&gt;~&lt;span&gt;]# getenforce  
Disabled
[root@db02 &lt;/span&gt;~]# mysql --&lt;span&gt;version
mysql  Ver &lt;/span&gt;&lt;span&gt;14.14&lt;/span&gt; Distrib &lt;span&gt;5.6&lt;/span&gt;.&lt;span&gt;36&lt;/span&gt;, &lt;span&gt;for&lt;/span&gt; Linux (x86_64) using  EditLine wrapper
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;、启动多实例数据库&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@db02 ~]# /data/&lt;span&gt;3306&lt;/span&gt;/&lt;span&gt;mysql start
Starting MySQL...
[root@db02 &lt;/span&gt;~]# /data/&lt;span&gt;3307&lt;/span&gt;/&lt;span&gt;mysql start
Starting MySQL...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;strong&gt;、配置文件说明：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;master&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt; &lt;strong&gt;&lt;em&gt;&lt;span&gt;配置文件说明&lt;/span&gt;：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@db02 ~]# &lt;span&gt;cat&lt;/span&gt; /data/&lt;span&gt;3306&lt;/span&gt;/&lt;span&gt;my.cnf 
[client]
port            &lt;/span&gt;= &lt;span&gt;3306&lt;/span&gt;&lt;span&gt;
socket          &lt;/span&gt;= /data/&lt;span&gt;3306&lt;/span&gt;/&lt;span&gt;mysql.sock

[mysqld]
user    &lt;/span&gt;=&lt;span&gt; mysql
port    &lt;/span&gt;= &lt;span&gt;3306&lt;/span&gt;&lt;span&gt;
socket  &lt;/span&gt;= /data/&lt;span&gt;3306&lt;/span&gt;/&lt;span&gt;mysql.sock
basedir &lt;/span&gt;= /application/&lt;span&gt;mysql
datadir &lt;/span&gt;= /data/&lt;span&gt;3306&lt;/span&gt;/&lt;span&gt;data
log&lt;/span&gt;-bin = /data/&lt;span&gt;3306&lt;/span&gt;/mysql-&lt;span&gt;bin
server&lt;/span&gt;-&lt;span&gt;id&lt;/span&gt; = &lt;span&gt;6&lt;/span&gt;  # server &lt;span&gt;id&lt;/span&gt;&lt;span&gt; 不能相同
skip_name_resolve &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt; # 跳过域名解析参数


[mysqld_safe]
log&lt;/span&gt;-error=/data/&lt;span&gt;3306&lt;/span&gt;/&lt;span&gt;mysql_3306.err
pid&lt;/span&gt;-&lt;span&gt;file&lt;/span&gt;=/data/&lt;span&gt;3306&lt;/span&gt;/mysqld.pid
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;slave&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;配置文件说明：&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@db02 ~]# &lt;span&gt;cat&lt;/span&gt; /data/&lt;span&gt;3307&lt;/span&gt;/&lt;span&gt;my.cnf 
[client]
port            &lt;/span&gt;= &lt;span&gt;3307&lt;/span&gt;&lt;span&gt;
socket          &lt;/span&gt;= /data/&lt;span&gt;3307&lt;/span&gt;/&lt;span&gt;mysql.sock

[mysqld]
user    &lt;/span&gt;=&lt;span&gt; mysql
port    &lt;/span&gt;= &lt;span&gt;3307&lt;/span&gt;&lt;span&gt;
socket  &lt;/span&gt;= /data/&lt;span&gt;3307&lt;/span&gt;/&lt;span&gt;mysql.sock
basedir &lt;/span&gt;= /application/&lt;span&gt;mysql
datadir &lt;/span&gt;= /data/&lt;span&gt;3307&lt;/span&gt;/&lt;span&gt;data
log&lt;/span&gt;-bin = /data/&lt;span&gt;3307&lt;/span&gt;/mysql-&lt;span&gt;bin
server&lt;/span&gt;-&lt;span&gt;id&lt;/span&gt; = &lt;span&gt;7&lt;/span&gt;  # server &lt;span&gt;id&lt;/span&gt;&lt;span&gt; 不能相同
skip_name_resolve &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;  # 跳过域名解析参数
read_only &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;  # 从库只读 （非root用户 ）

[mysqld_safe]
log&lt;/span&gt;-error=/data/&lt;span&gt;3307&lt;/span&gt;/&lt;span&gt;mysql_3307.err
pid&lt;/span&gt;-&lt;span&gt;file&lt;/span&gt;=/data/&lt;span&gt;3307&lt;/span&gt;/mysqld.pid
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;strong&gt;、在主库创建复制用户&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;         登陆到主数据库中：&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mysql &lt;span&gt;-&lt;/span&gt;uroot &lt;span&gt;-&lt;/span&gt;p123 &lt;span&gt;-&lt;/span&gt;S &lt;span&gt;/&lt;/span&gt;data&lt;span&gt;/&lt;/span&gt;&lt;span&gt;3306&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;mysql.sock
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;         创建授权用户，注意是slave用户。&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;grant&lt;/span&gt; &lt;span&gt;replication&lt;/span&gt; slave  &lt;span&gt;on&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;.&lt;span&gt;*&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; repl@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;10.0.0.%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; identified &lt;span&gt;by&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;strong&gt;、初始化从库数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;备份主库当前数据&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 mysqldump &lt;span&gt;-&lt;/span&gt;uroot &lt;span&gt;-&lt;/span&gt;p123 &lt;span&gt;-&lt;/span&gt;A &lt;span&gt;-&lt;/span&gt;B &lt;span&gt;-&lt;/span&gt;F &lt;span&gt;--&lt;/span&gt;&lt;span&gt;master-data=2  -S /data/3306/mysql.sock &amp;gt;/tmp/full.sql&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt; 部分&lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span&gt;参数说明：（详细参照&lt;a href=&quot;http://www.cnblogs.com/clsn/p/8138015.html#_label2&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/clsn/p/8138015.html#_label2&lt;/a&gt;）&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　　　-F 刷新二进制日志&lt;/p&gt;
&lt;p&gt;　　　　--master-data [=＃]这会导致二进制日志的位置和文件名被追加到输出中。&lt;/p&gt;
&lt;p&gt;　　　　如果等于1，则将其打印为CHANGE MASTER命令; 如果等于2，那么该命令将以注释符号为前缀。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;到从库进行恢复&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 mysql &lt;span&gt;-&lt;/span&gt;uroot &lt;span&gt;-&lt;/span&gt;p123 &lt;span&gt;-&lt;/span&gt;S &lt;span&gt;/&lt;/span&gt;data&lt;span&gt;/&lt;/span&gt;&lt;span&gt;3307&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;mysql.sock
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;ad&quot;&gt;# 恢复备份的数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;set&lt;/span&gt; sql_log_bin&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
source &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;tmp&lt;span&gt;/&lt;/span&gt;&lt;span&gt;full&lt;/span&gt;.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;strong&gt;、开启从库复制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;         查看备份的当前使用的文件及POS号&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
mysql&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; show master status;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----------------+----------+--------------+------------------+-------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;File&lt;/span&gt;             &lt;span&gt;|&lt;/span&gt; Position &lt;span&gt;|&lt;/span&gt; Binlog_Do_DB &lt;span&gt;|&lt;/span&gt; Binlog_Ignore_DB &lt;span&gt;|&lt;/span&gt; Executed_Gtid_Set &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----------------+----------+--------------+------------------+-------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; mysql&lt;span&gt;-&lt;/span&gt;bin.&lt;span&gt;000012&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;      &lt;span&gt;120&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;              &lt;span&gt;|&lt;/span&gt;                  &lt;span&gt;|&lt;/span&gt;                   &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----------------+----------+--------------+------------------+-------------------+&lt;/span&gt;
&lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;         登入数据库，进行slave配置。&lt;/p&gt;
&lt;div readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
mysql &lt;span&gt;-&lt;/span&gt;uroot &lt;span&gt;-&lt;/span&gt;p123 &lt;span&gt;-&lt;/span&gt;S &lt;span&gt;/&lt;/span&gt;data&lt;span&gt;/&lt;/span&gt;&lt;span&gt;3307&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;mysql.sock 
CHANGE MASTER &lt;/span&gt;&lt;span&gt;TO&lt;/span&gt;&lt;span&gt;
  MASTER_HOST&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;10.0.0.52&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  MASTER_USER&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;repl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  MASTER_PASSWORD&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  MASTER_PORT&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;3306&lt;/span&gt;&lt;span&gt;,
  MASTER_LOG_FILE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql-bin.000012&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  MASTER_LOG_POS&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;&lt;span&gt;;
start  slave;  # 启动从库复制&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;         该配置想关说明可以通过 help 获得。&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
mysql&lt;span&gt;&amp;gt;&lt;/span&gt; help CHANGE MASTER &lt;span&gt;TO&lt;/span&gt;&lt;span&gt;
CHANGE MASTER &lt;/span&gt;&lt;span&gt;TO&lt;/span&gt;&lt;span&gt;
  MASTER_HOST&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;master2.mycompany.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  MASTER_USER&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;replication&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  MASTER_PASSWORD&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bigs3cret&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  MASTER_PORT&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;3306&lt;/span&gt;&lt;span&gt;,
  MASTER_LOG_FILE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;master2-bin.001&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  MASTER_LOG_POS&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;,
  MASTER_CONNECT_RETRY&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;1.3.2 测试主从同步&lt;/h3&gt;
&lt;p&gt;查看slave库的状态&lt;/p&gt;
&lt;p&gt;           主要查看   Slave_IO_Running 与 Slave_SQL_Running 是否都为Yes&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1936e928-1ef2-4118-b99c-8ac93940265b')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_1936e928-1ef2-4118-b99c-8ac93940265b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1936e928-1ef2-4118-b99c-8ac93940265b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1936e928-1ef2-4118-b99c-8ac93940265b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1936e928-1ef2-4118-b99c-8ac93940265b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; mysql&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; show slave status\G
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;***************************&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;. row &lt;span&gt;***************************&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;                Slave_IO_State: Waiting &lt;span&gt;for&lt;/span&gt; master &lt;span&gt;to&lt;/span&gt;&lt;span&gt; send event
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                   Master_Host: &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.52&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                  Master_User: repl
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                   Master_Port: &lt;span&gt;3306&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;                 Connect_Retry: &lt;span&gt;60&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;               Master_Log_File: mysql&lt;span&gt;-&lt;/span&gt;bin.&lt;span&gt;000010&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;           Read_Master_Log_Pos: &lt;span&gt;842&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;                Relay_Log_File: &lt;span&gt;3307&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;relay&lt;span&gt;-&lt;/span&gt;bin.&lt;span&gt;000018&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;                 Relay_Log_Pos: &lt;span&gt;283&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         Relay_Master_Log_File: mysql&lt;span&gt;-&lt;/span&gt;bin.&lt;span&gt;000010&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;             Slave_IO_Running: Yes
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            Slave_SQL_Running: Yes
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;              Replicate_Do_DB: 
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;          Replicate_Ignore_DB: 
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;           Replicate_Do_Table: 
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;       Replicate_Ignore_Table: 
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;      Replicate_Wild_Do_Table: 
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;  Replicate_Wild_Ignore_Table: 
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                    Last_Errno: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                   Last_Error: 
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                  Skip_Counter: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;           Exec_Master_Log_Pos: &lt;span&gt;842&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;               Relay_Log_Space: &lt;span&gt;455&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;              Until_Condition: None
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;               Until_Log_File: 
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 Until_Log_Pos: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;           Master_SSL_Allowed: No
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;           Master_SSL_CA_File: 
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;           Master_SSL_CA_Path: 
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;              Master_SSL_Cert: 
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            Master_SSL_Cipher: 
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;               Master_SSL_Key: 
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         Seconds_Behind_Master: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;Master_SSL_Verify_Server_Cert: No
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                 Last_IO_Errno: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                Last_IO_Error: 
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                Last_SQL_Errno: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;               Last_SQL_Error: 
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;  Replicate_Ignore_Server_Ids: 
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;              Master_Server_Id: &lt;span&gt;6&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;                   Master_UUID: 4f344556&lt;span&gt;-&lt;/span&gt;e0ab&lt;span&gt;-&lt;/span&gt;11e7&lt;span&gt;-&lt;/span&gt;&lt;span&gt;9138&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;000c29d60ab3
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;              Master_Info_File: &lt;span&gt;/&lt;/span&gt;data&lt;span&gt;/&lt;/span&gt;&lt;span&gt;3307&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;data&lt;span&gt;/&lt;/span&gt;&lt;span&gt;master.info
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                     SQL_Delay: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;           SQL_Remaining_Delay: &lt;span&gt;NULL&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;       Slave_SQL_Running_State: Slave has &lt;span&gt;read&lt;/span&gt; &lt;span&gt;all&lt;/span&gt; relay &lt;span&gt;log&lt;/span&gt;; waiting &lt;span&gt;for&lt;/span&gt; the slave I&lt;span&gt;/&lt;/span&gt;O thread &lt;span&gt;to&lt;/span&gt; &lt;span&gt;update&lt;/span&gt;&lt;span&gt; it
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;            Master_Retry_Count: &lt;span&gt;86400&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;                  Master_Bind: 
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;      Last_IO_Error_Timestamp: 
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;     Last_SQL_Error_Timestamp: 
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;               Master_SSL_Crl: 
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;           Master_SSL_Crlpath: 
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;           Retrieved_Gtid_Set: 
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;            Executed_Gtid_Set: 
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                 Auto_Position: &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code 从库状态信息&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;         在主库进行操作，在从库验证&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@db02 ~&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# mysql &lt;span&gt;-&lt;/span&gt;uroot &lt;span&gt;-&lt;/span&gt;p123  &lt;span&gt;-&lt;/span&gt;S &lt;span&gt;/&lt;/span&gt;data&lt;span&gt;/&lt;/span&gt;&lt;span&gt;3306&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;mysql.sock
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; show databases;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;Database&lt;/span&gt;           &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; information_schema &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; mysql              &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; performance_schema &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; test               &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------------------+&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;database&lt;/span&gt;&lt;span&gt; clsn;
Query OK, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row affected (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;         在从库上可以看到该数据库已创建&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@db02 ~&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# mysql &lt;span&gt;-&lt;/span&gt;uroot &lt;span&gt;-&lt;/span&gt;p123 &lt;span&gt;-&lt;/span&gt;S &lt;span&gt;/&lt;/span&gt;data&lt;span&gt;/&lt;/span&gt;&lt;span&gt;3307&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;mysql.sock
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; show databases;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;Database&lt;/span&gt;           &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; information_schema &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; clsn               &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; mysql              &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; performance_schema &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; test               &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------------------+&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;至此mysql&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;主从复制就搭建完成&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;1.3.3 忘记数据库密码？&lt;/h3&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
shell&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;application&lt;span&gt;/&lt;/span&gt;mysql&lt;span&gt;/&lt;/span&gt;bin&lt;span&gt;/&lt;/span&gt;mysqld_safe  &lt;span&gt;--&lt;/span&gt;&lt;span&gt;defaults-file=/data/3306/my.cnf    --skip-grant-tables --skip-networking  &amp;amp;&lt;/span&gt;
mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;update&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; password&lt;span&gt;=&lt;/span&gt;password(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;where&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; host&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; flush &lt;span&gt;privileges&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;1.3.4 主从复制状态失败的原因？&lt;/h3&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Last_IO_Error: error reconnecting &lt;span&gt;to&lt;/span&gt; master &lt;span&gt;'&lt;/span&gt;&lt;span&gt;repl@10.0.0.52:3306&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;-&lt;/span&gt; retry&lt;span&gt;-&lt;/span&gt;time: &lt;span&gt;60&lt;/span&gt;  retries: &lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;div&gt;
&lt;blockquote readability=&quot;10.5&quot;&gt;
&lt;div readability=&quot;20&quot;&gt;
&lt;p class=&quot;a&quot;&gt;1、主机没启动，或者宕机，检查主库的状态。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;2、网络通信问题，使用ping命令进行检查；或使用mysql命令进行shell端登陆测试&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;3、防火墙，selinux（务必检查）。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;4、复制用户和密码、端口号、地址有问题，使用mysql命令进行shell端登陆测试。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;5、mysql自动解析，会将连接的IP解析成主机名（skip-name-resolve = 0）写入my.cnf文件即可。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;6、从库IO异常关闭，通过show slave status \G 进行查看。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;h2&gt;1.4 MySQL主从复制常见问题&lt;/h2&gt;
&lt;h3&gt;1.4.1 从库binlog落后主库binlog？&lt;/h3&gt;
&lt;p&gt;　　从库记录的已经主库已经给我传送的binlog事件的坐标，一般在繁忙的生产环境下会落后于主库&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
show master status\G  &lt;span&gt;--&lt;/span&gt;&lt;span&gt;- 主&lt;/span&gt;
show slave status \G  &lt;span&gt;--&lt;/span&gt;&lt;span&gt;- 从&lt;/span&gt;
Master_Log_File: mysql&lt;span&gt;-&lt;/span&gt;bin.&lt;span&gt;000007&lt;/span&gt;&lt;span&gt;
Read_Master_Log_Pos: &lt;/span&gt;&lt;span&gt;729&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;落后太远的原因：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;硬件条件有关的，机器磁盘IO性能不足。&lt;/p&gt;
&lt;p&gt;主要还是网络问题，网络传输的性能。&lt;/p&gt;
&lt;p&gt;主库存放二进制日志的存储性能太低，建议binlog日志存咋SSD中。&lt;/p&gt;
&lt;p&gt;主库DUMP线程太繁忙，主要发生在一主多从的环境下。&lt;/p&gt;
&lt;p&gt;从库IO线程太忙&lt;/p&gt;
&lt;p&gt;人为控制（delay节点、延时节点 ）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.4.2 主库update，从库迟迟的没有更新。&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;特殊情况：&lt;/em&gt;&lt;/strong&gt;日志已经传过来了，数据并没有同步&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;一般情况：&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;p class=&quot;a&quot;&gt;1、没开启SQL线程&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;2、传的东西有问题（你要做的事情，我提前已经做了，不想重复做了，然后他就死了）&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;3、SQL线程忙。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;4、人为控制了【delay(从库)节点、延时节点，一般生产设置为3-6小时之间，可以保证过去3-6小时之间的误操作，可以避免】。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;h3&gt;1.4.3 主从复制延时配置(从库配置)&lt;/h3&gt;
&lt;p&gt;停止从库复制&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mysql&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;stop slave;
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.01&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;         修改延时参数，MASTER_DELAY，单位位S （秒）。&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mysql&lt;span&gt;&amp;gt;&lt;/span&gt;CHANGE MASTER &lt;span&gt;TO&lt;/span&gt; MASTER_DELAY &lt;span&gt;=&lt;/span&gt; &lt;span&gt;30&lt;/span&gt;&lt;span&gt;;
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.07&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;         启动从库复制&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mysql&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;start slave;
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.07&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;         查看配置是否生效&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mysql&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; show slave status \G
……
              SQL_Delay: &lt;/span&gt;&lt;span&gt;30&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;1.4.4 从库安全配置（其他用户只读）&lt;/h3&gt;
&lt;p&gt;修改my.cnf配置文件，添加只读参数&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
read_only &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;    &lt;span&gt;====&amp;gt;&lt;/span&gt;&lt;span&gt; 控制普通用户
innodb_read_only &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;  &lt;span&gt;====&amp;gt;&lt;/span&gt; 控制root用户，正常情况不要加
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;         添加完成后重启数据库&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
mysql&lt;span&gt;&amp;gt;&lt;/span&gt; show variables &lt;span&gt;like&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%read_only%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----------------+-------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; Variable_name    &lt;span&gt;|&lt;/span&gt; Value &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----------------+-------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; innodb_read_only &lt;span&gt;|&lt;/span&gt; &lt;span&gt;OFF&lt;/span&gt;   &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; read_only        &lt;span&gt;|&lt;/span&gt; &lt;span&gt;ON&lt;/span&gt;    &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; tx_read_only     &lt;span&gt;|&lt;/span&gt; &lt;span&gt;OFF&lt;/span&gt;   &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;----------------+-------+&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　延时从库: delay节点、延时节点&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;1.4.5 主从复制故障及解决（跳过错误）&lt;/h3&gt;
&lt;p&gt;命令行设置&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
stop slave; #&lt;span&gt;&amp;lt;==&lt;/span&gt;&lt;span&gt;临时停止同步开关。
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; global sql_slave_skip_counter &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; ; #&lt;span&gt;&amp;lt;==&lt;/span&gt;&lt;span&gt;将同步指针向下移动一个，如果多次不同步，可以重复操作。
start slave;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;         在配置文件修改，设置要跳过的pos&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/&lt;/span&gt;etc&lt;span&gt;/&lt;/span&gt;&lt;span&gt;my.cnf
slave&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;skip&lt;span&gt;-&lt;/span&gt;errors &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1032&lt;/span&gt;,&lt;span&gt;1062&lt;/span&gt;,&lt;span&gt;1007&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在mysql中可以跳过某些错误,但是最好的解决办法，重新搭建主从复制。&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;1.4.6 延时节点概念 --&amp;gt; SQL线程延时？&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Last_SQL_Errno: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
Last_SQL_Error:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;原因:&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;1、主库做操作的对象，在从库不存在&lt;/p&gt;
&lt;p&gt;2、主库做操作的对象属性不一致。&lt;/p&gt;
&lt;p&gt;3、主库做操作的对象，从库已经存在&lt;/p&gt;
&lt;p&gt;                  ……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.4.7 Slave_*_Running：？&lt;/h3&gt;
&lt;blockquote readability=&quot;9.5&quot;&gt;
&lt;div readability=&quot;18&quot;&gt;
&lt;p&gt;1、Slave_IO_Running I/O 线程正在运行、未运行还是正在运行但尚未连接到主服务器。可能值分别为Yes、No 或 Connecting。&lt;/p&gt;
&lt;p&gt;2、Slave_SQL_Running SQL 线程当前正在运行、未运行,可能值分别为 Yes、No 主服务器日志坐标：&lt;/p&gt;
&lt;p&gt;3、Master_Log_File 和 Read_Master_Log_Pos 标识主服务器二进制日志中 I/O 线程已经传输的最近事件的坐标。&lt;/p&gt;
&lt;p&gt;4、如果Master_Log_File和Read_Master_Log_Pos 的值远远落后于主服务器上的那些值，这表示主服务器与从属服务器之间事件的网络传输可能存在延迟。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.4.8 中继日志坐标&lt;/h3&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;a)  Relay_Log_File 和 Relay_Log_Pos 列标识从属服务器中继日志中 SQL 线程已经执行的最近事件的坐标。这些坐标对应于 Relay_Master_Log_File 和 Exec_Master_Log_Pos 列标识的主服务器二进制日志中的坐标。&lt;/p&gt;
&lt;p&gt;b)  如果 Relay_Master_Log_File 和 Exec_Master_Log_Pos 列的输出远远落后于 Master_Log_File 和Read_Master_Log_Pos 列（表示 I/O 线程的坐标），这表示 SQL 线程（而不是 I/O 线程）中存在延迟。即，它表示复制日志事件快于执行这些事件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.4.9 单一主从需要改变的地方&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;从库的作用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;1、相当于实时备份&lt;/p&gt;
&lt;p&gt;2、使用从库备份&lt;/p&gt;
&lt;p&gt;3、一主多从应对读多的业务需求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;     &lt;/strong&gt; 如果，从库只做备份服务器用，那么主库的压力会不减反增。因为，所有的业务都在主库实现，读和写，dump线程读取并投递binlog&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;（1）可不可以挪走一部分读业务到从库，读写分离&lt;/p&gt;
&lt;p&gt;（2） 一主多从应对读多的业务需求，一旦发展成这个架构，dump线程投递binlog的压力更大&lt;/p&gt;
&lt;p&gt;（3） 多级主从，采用中间库缓解主库dump的压力，会出现中间库瓶颈的问题，选择blackhole引擎，看性能与安全的权衡&lt;/p&gt;
&lt;p&gt;（4）双主模型：缓解，数据一致性难保证&lt;/p&gt;
&lt;p&gt;（5）环装复制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;1.5 【生产案例】主从复制事故&lt;/h2&gt;
&lt;h3&gt;1.5.1 发生背景&lt;/h3&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;1、有一台已经工作很久的单机mysql数据。在2017年12月24日的平安夜，我司购物网站宕机了。机器物损坏，系统硬盘报废。&lt;/p&gt;
&lt;p&gt;2、在接到一条短信告知&lt;span&gt;服务器宕机&lt;/span&gt;，数据库连不上。当时的我一脸懵逼的还在开party，谁能想到在这样一个阖家欢乐的时刻发生这样的事情。  &lt;/p&gt;
&lt;p&gt;3、随之我火速赶回公司处理事故。首先更换硬盘，从备份服务器上拉取备份数据，用备份恢复宕机的时刻数据，经历40分钟后所有应用恢复正常。&lt;/p&gt;
&lt;p&gt;4、经历这次事故，决心修改数据库架构，我跟领导承诺，保证改完之后，出现类似故障能在5-10分钟恢复业务。把原来的停机时间缩短4-8倍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.5.2 搭建流程&lt;/h3&gt;
&lt;h4&gt;&lt;strong&gt;1.5.2.1 &lt;/strong&gt; &lt;strong&gt;架构设计&lt;/strong&gt;&lt;/h4&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230151833742-2105293480.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                  修改架构采用数据库主从同步，能保证数据的安全，提高事故发生的恢复速度。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;1.5.2.2 &lt;/strong&gt; &lt;strong&gt;架构实施&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;         （1）准备一台新机器，配置、系统、环境等与原数据库保持一致。&lt;/p&gt;
&lt;p&gt;         （2）在主库检查binlog开关，没有开启将其开启 ，检查server_id 与 auto.cnf文件中的uuid 是否唯一。&lt;/p&gt;
&lt;p&gt;         （3）主库创建授权复制的用户，授权 replication slave。&lt;/p&gt;
&lt;p&gt;         （4）备份主库上现有数据，恢复到从库中，推荐使用mysqldump，在访问低谷的时候做。&lt;/p&gt;
&lt;p&gt;         （5）在从库上开启binlog和relaylog,server_id。&lt;/p&gt;
&lt;p&gt;         （6）在从库配置change master to 信息：在第一次开启主从的时候，告诉从库user password host  port，复制binlog的起点file、position。&lt;/p&gt;
&lt;p&gt;         （7）start slave 开启主从复制。&lt;/p&gt;
&lt;p&gt;         到此历经千辛万苦主从复制搭建完成。&lt;/p&gt;
&lt;h3&gt;1.5.3 测试主从切换&lt;/h3&gt;
&lt;blockquote readability=&quot;26&quot;&gt;
&lt;p&gt;（1） 主从的可用性测试：在主库中插入数据，在从库查看有没有。  &lt;/p&gt;
&lt;p&gt;（2） 主从快速恢复演练&lt;/p&gt;
&lt;p&gt;　　a)  在一个月黑风高夜选一个业务不繁忙时间点，人工宕掉主库。&lt;/p&gt;
&lt;p&gt;　　b)  将从库定为主库，查看从库的日志量（master.info、relay-log.info）&lt;/p&gt;
&lt;p&gt;　　c)  判断主从日志的差距（master.info,show master status）&lt;/p&gt;
&lt;p&gt;　　d)  恢复后发现偏差，就人为登录到主库（备份服务器也行）中，把截取差距的binlog日志，并传送到从库进行数据补偿。&lt;/p&gt;
&lt;p&gt;　　e)  此时从库数据现在已经和主库一致。&lt;/p&gt;
&lt;p&gt;　　f)  reset master，reset slave&lt;/p&gt;
&lt;p&gt;　　g)  应用割接到从库，将应用数据库IP指向从库IP，测试应用。&lt;/p&gt;
&lt;p&gt;（3）小结：经历里这次测试，主从见的切换历时6分32秒，比之前缩短许多，但是感觉还差点什么，以后再补吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;1.6 mysql半同步复制&lt;/h2&gt;
&lt;p&gt;　　MySQL复制默认是异步复制，存在一定的概率备库与主库的数据是不对等的,如果Master宕机，事务在Master上已提交，但很可能这些事务没有传到任何的Slave上，此时Slave也可能会丢失事务。在半同步复制的架构下，当master在将自己binlog发给slave上的时候，要确保slave已经接受到了这个二进制日志以后，才会返回数据给客户端。&lt;/p&gt;
&lt;p&gt;　　半同步复制介于异步复制和全同步复制之间，主库在执行完客户端提交的事务后不是立刻返回给客户端，而是等待至少一个从库接收到并写到relay log中才返回给客户端。相对于异步复制，半同步复制提高了数据的安全性，同时它也造成了一定程度的延迟，这个延迟最少是一个TCP/IP往返的时间。所以，半同步复制最好在低延时的网络中使用。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230151931851-594607212.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;半同步复制的原理图&lt;/p&gt;
&lt;p&gt;　　在5.6中加入了group commit特性之后，性能不比传统的异步复制差。&lt;/p&gt;
&lt;h3&gt;1.6.1 半同步复制的潜在问题&lt;/h3&gt;
&lt;p&gt;　　客户端事务在存储引擎层提交后，在得到从库确认的过程中，主库宕机了，此时，可能的情况有两种&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事务还没发送到从库上&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　此时，客户端会收到事务提交失败的信息，客户端会重新提交该事务到新的主上，当宕机的主库重新启动后，以从库的身份重新加入到该主从结构中，会发现，该事务在从库中被提交了两次，一次是之前作为主的时候，一次是被新主同步过来的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事务已经发送到从库上&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　此时，从库已经收到并应用了该事务，但是客户端仍然会收到事务提交失败的信息，重新提交该事务到新的主上。&lt;/p&gt;
&lt;h3&gt;1.6.2 半同步架构搭建&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;加载使用的插件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;主库:
INSTALL PLUGIN rpl_semi_sync_master SONAME &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;semisync_master.so&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
从从:
INSTALL PLUGIN rpl_semi_sync_slave SONAME &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;semisync_slave.so&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;查看是否加载成功&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
show plugins;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;启动半同步复制&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;主库:
&lt;/span&gt;&lt;span&gt;SET&lt;/span&gt; GLOBAL rpl_semi_sync_master_enabled &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
从库:
&lt;/span&gt;&lt;span&gt;SET&lt;/span&gt; GLOBAL rpl_semi_sync_slave_enabled &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;重启从库上的IO&lt;/strong&gt;&lt;strong&gt;线程&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;STOP SLAVE IO_THREAD;
START SLAVE IO_THREAD;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;查看是否在运行&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;主库:
show status &lt;/span&gt;&lt;span&gt;like&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Rpl_semi_sync_master_status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
从库:
show status &lt;/span&gt;&lt;span&gt;like&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Rpl_semi_sync_slave_status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;测试半同步复制&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;查看延迟时间:
show variables &lt;/span&gt;&lt;span&gt;like&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%rpl_semi_sync%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
从库:
stop slave;
主库:
&lt;/span&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;database&lt;/span&gt; clsn;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果创建库的时间是设置的时间就成功了。&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;1.7 主从复制架构的演变&lt;/h2&gt;
&lt;h3&gt;1.7.1 基本结构&lt;/h3&gt;
&lt;p&gt;（1）一主一从&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230152117226-2068861123.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）一主多从&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230152145445-1265499500.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;（3）多级主从&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230152203710-42573272.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）双主&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230152220898-423986887.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（5）多主一从（5.7之后开始支持）&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230152232179-1765608793.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（6）循环复制&lt;/p&gt;
&lt;p&gt;                  对于循环数据库镜像，就是多个数据库A、B、C、D等，对其中任一个数据库的修改，都要同时镜像到其它的数据库里。  &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;replicate&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;same&lt;span&gt;-&lt;/span&gt;server&lt;span&gt;-&lt;/span&gt;id &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230152241507-635336480.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;h3&gt;1.7.2 高级应用架构演变&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（1&lt;/strong&gt;&lt;strong&gt;）读写分离——MySQL proxy&lt;/strong&gt;&lt;strong&gt;、amoeba&lt;/strong&gt;&lt;strong&gt;、xx-dbproxy&lt;/strong&gt;&lt;strong&gt;等。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230152306820-59568261.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　一般来说都是通过主从复制（Master-Slave）的方式来同步数据，再通过读写分离（MySQL-Proxy）来提升数据库的并发负载能力这样的方案来进行部署与实施的。　　&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（2&lt;/strong&gt;&lt;strong&gt;）分库分表——cobar&lt;/strong&gt;&lt;strong&gt;、自主研发等。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230152317273-92340670.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;　　1) 系统对外提供的数据库名是dbtest,并且其中有两张表tb1和tb2。&lt;/p&gt;
&lt;p&gt;　　2) tb1表的数据被映射到物理数据库dbtest1的tb1上。&lt;/p&gt;
&lt;p&gt;　　3) tb2表的一部分数据被映射到物理数据库dbtest2的tb2上，另外一部分数据被映射到物理数据库dbtest3的tb2上。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（3&lt;/strong&gt;&lt;strong&gt;）MMM&lt;/strong&gt;&lt;strong&gt;架构——mysql-mmm&lt;/strong&gt;&lt;strong&gt;（google&lt;/strong&gt;&lt;strong&gt;）-&lt;/strong&gt;&lt;strong&gt;使用极少&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230152332335-1783684620.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　MMM（Master-Master replication manager for MySQL）是一套支持双主故障切换和双主日常管理的脚本程序。MMM使用Perl语言开发，主要用来监控和管理MySQL Master-Master（双主）复制，可以说是mysql主主复制管理器。&lt;/p&gt;
&lt;p&gt;　　虽然叫做双主复制，但是业务上同一时刻只允许对一个主进行写入，另一台备选主上提供部分读服务，以加速在主主切换时刻备选主的预热，可以说MMM这套脚本程序一方面实现了故障切换的功能，另一方面其内部附加的工具脚本也可以实现多个slave的read负载均衡。&lt;/p&gt;
&lt;p&gt;　　关于mysql主主复制配置的监控、故障转移和管理的一套可伸缩的脚本套件（在任何时候只有一个节点可以被写入），这个套件也能对居于标准的主从配置的任意数量的从服务器进行读负载均衡，所以你可以用它来在一组居于复制的服务器启动虚拟ip，除此之外，它还有实现数据备份、节点之间重新同步功能的脚本。&lt;/p&gt;
&lt;p&gt;　　对于那些对数据的一致性要求很高的业务，非常不建议采用MMM这种高可用架构。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（4&lt;/strong&gt;&lt;strong&gt;）MHA&lt;/strong&gt;&lt;strong&gt;架构——mysql-master-ha&lt;/strong&gt;&lt;strong&gt;（日本DeNa&lt;/strong&gt;&lt;strong&gt;）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230152405476-1810433091.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;　　MHA（Master High Availability）目前在MySQL高可用方面是一个相对成熟的解决方案，它由日本DeNA公司youshimaton（现就职于Facebook公司）开发，是一套优秀的作为MySQL高可用性环境下故障切换和主从提升的高可用软件。在MySQL故障切换过程中，MHA能做到在0~30秒之内自动完成数据库的故障切换操作，并且在进行故障切换的过程中，MHA能在最大程度上保证数据的一致性，以达到真正意义上的高可用。&lt;/p&gt;
&lt;p&gt;　　该软件由两部分组成：MHA Manager（管理节点）和MHA Node（数据节点）。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（5&lt;/strong&gt;&lt;strong&gt;）MGR-- 5.7    &lt;/strong&gt; &lt;strong&gt;新特性    MySQL    Group      replication&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230152430351-638052279.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　基于传统异步复制和半同步复制的缺陷——数据的一致性问题无法保证，MySQL官方在5.7.17版本正式推出组复制（MySQL Group Replication，简称MGR）。&lt;/p&gt;
&lt;p&gt;　　由若干个节点共同组成一个复制组，一个事务的提交，必须经过组内大多数节点（N / 2 + 1）决议并通过，才能得以提交。如上图所示，由3个节点组成一个复制组，Consensus层为一致性协议层，在事务提交过程中，发生组间通讯，由2个节点决议(certify)通过这个事务，事务才能够最终得以提交并响应。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（6）PXC、MySQL Cluster、galera cluster架构&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1190037/201712/1190037-20171230152443757-539991414.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;在PXC中，一次数据写入在各个节点间的验证/回滚流程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;PXC&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;架构的优点：&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;a)  服务高可用；&lt;/p&gt;
&lt;p&gt;b)  数据同步复制(并发复制)，几乎无延迟；&lt;/p&gt;
&lt;p&gt;c)  多个可同时读写节点，可实现写扩展，不过最好事先进行分库分表，让各个节点分别写不同的表或者库，避免让galera解决数据冲突；&lt;/p&gt;
&lt;p&gt;d)  新节点可以自动部署，部署操作简单；&lt;/p&gt;
&lt;p&gt;e)  数据严格一致性，尤其适合电商类应用；&lt;/p&gt;
&lt;p&gt;f)  完全兼容MySQL；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.7.3 分库分表简单实践&lt;/h3&gt;
&lt;p&gt;　　实践中使用的为world数据库，为mysql官方提供，详情参照：&lt;a href=&quot;http://www.cnblogs.com/clsn/p/8087417.html#_label0&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/clsn/p/8087417.html#_label0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一个里程碑:创建新表&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;12.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `country_1` (
  `Code` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
  `Name` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;52&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
  `Continent` enum(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Asia&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Europe&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;North America&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Africa&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Oceania&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Antarctica&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;South America&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Asia&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`Code`),
  &lt;/span&gt;&lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; `name_idx` (`Name`)
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;InnoDB &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;latin1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;第二个里程碑：从旧表导入数据到新表&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; country_1(code,name,continent) &lt;span&gt;select&lt;/span&gt; code,name,continent &lt;span&gt;from&lt;/span&gt; country;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;第三个里程碑：横向拆表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;         创建与导出表相同格式的新表1&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; country_1_p1 &lt;span&gt;like&lt;/span&gt; country_1;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;         将数据的前100行插入到新表1中&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; country_1_p1 &lt;span&gt;select&lt;/span&gt; code,name,continent &lt;span&gt;from&lt;/span&gt; country_1 &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; code limit &lt;span&gt;100&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;         创建与新表1相同格式的新表2&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; country_1_p2 &lt;span&gt;like&lt;/span&gt; country_1;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;         将100行之后的139行导入表2.&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; country_1_p2 &lt;span&gt;select&lt;/span&gt; code,name,continent &lt;span&gt;from&lt;/span&gt; country_1 &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; code limit &lt;span&gt;139&lt;/span&gt; offset &lt;span&gt;100&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;1.8 参考文献&lt;/h2&gt;
&lt;div&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;div readability=&quot;27&quot;&gt;
&lt;p class=&quot;a&quot;&gt;[1]  http://blog.csdn.net/hguisu/article/details/7325124&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;[2]  https://www.cnblogs.com/ivictor/p/5735580.html&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;[3]  https://www.cnblogs.com/Aiapple/p/5792939.html&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;[4]  http://heylinux.com/archives/1004.html 读写分离&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;[5]  http://hualong.iteye.com/blog/2102798 Cobar逻辑层次图&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;[6]  https://www.cnblogs.com/kevingrace/p/5662975.html MMM架构&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;[7]  https://www.cnblogs.com/gomysql/p/3675429.html  MHA架构&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;[8]  http://blog.jobbole.com/70844/   MySQL在大型网站的应用架构演变&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;[9]  https://www.cnblogs.com/dosmile/p/6681923.html  MGR复制&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;[10] http://imysql.cn/tag/pxc    PXC架构&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;[11] https://mp.weixin.qq.com/s/Ll0sdKS6Vbw1pXIKbW3-NQ &lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 03 Jan 2018 05:33:00 +0000</pubDate>
<dc:creator>惨绿少年</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/clsn/p/8150036.html</dc:identifier>
</item>
<item>
<title>Kotlin——最详细的抽象类（abstract）、内部类（嵌套类）详解 - Jetictors</title>
<link>http://www.cnblogs.com/Jetictors/p/8183254.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Jetictors/p/8183254.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/12/16/1605e233843eca28?w=571&amp;amp;h=300&amp;amp;f=jpeg&amp;amp;s=7768&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在前面几个章节中，详细的介绍了&lt;code&gt;Kotlin&lt;/code&gt;类的类别中的&lt;code&gt;数据类&lt;/code&gt;、&lt;code&gt;密封类&lt;/code&gt;、&lt;code&gt;接口类&lt;/code&gt;以及&lt;code&gt;枚举类&lt;/code&gt;。在这个章节中会对&lt;code&gt;Koltin&lt;/code&gt;的&lt;code&gt;抽象类&lt;/code&gt;和&lt;code&gt;内部类&lt;/code&gt;作出一个详细的讲解。如果对上面所提到的类的类别还不是很清晰的，请阅读我的前几篇文章。&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/Jetictors/p/8157969.html&quot;&gt;Kotlin——数据类（data）、密封类详解&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/Jetictors/p/7751662.html&quot;&gt;Kotlin——枚举类（Enum）、接口类（Interface）详解&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/Jetictors/p/7758828.html&quot;&gt;Kotlin——类（class）详解&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/3/160b80e78fde53ea?w=891&amp;amp;h=440&amp;amp;f=png&amp;amp;s=24430&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;一抽象类&quot;&gt;一、抽象类&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;我们知道，在实际的开发程序的时候，一般都会写一个基类，封装常用方法、以及处理一些共有的逻辑，但是程序逻辑是根据每个类不同的功能实现不同的代码。而这个所谓的基类，一般都是一个抽象类。不管是&lt;code&gt;Java&lt;/code&gt;还是&lt;code&gt;Kotlin&lt;/code&gt;，实现其抽象类的作用就在于此。那么什么是抽象类呢，它是怎么定义的，它又要怎么使用呢？&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;抽象类的定义&quot;&gt;1、抽象类的定义&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;抽象类，可以理解为类定义了一个模板。所有的子类都是根据这个模板是填充自己的代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.1、关键字&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;声明一个抽象（类或函数）的关键字为：&lt;code&gt;abstract&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;其中值得注意的是：抽象可以分为抽象类、抽象函数、抽象属性。而一个抽象类和普通类的区别在于抽象类除了可以有其自己的属性、构造函数、方法等组成部分，还包含了抽象函数以及抽象属性。&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;abstract class Lanauage{
    val TAG = this.javaClass.simpleName  // 自身的属性
    
    // 自身的函数
    fun test() : Unit{
        // exp
    }
    abstract var name : String           // 抽象属性
    abstract fun init()                  // 抽象方法
}

/**
 * 抽象类Lanauage的实现类TestAbstarctA
 */
class TestAbstarctA : Lanauage(){

    override var name: String
        get() = &quot;Kotlin&quot;
        set(value) {}

    override fun init() {
        println(&quot;我是$name&quot;)
    }
}

/**
 * 抽象类Lanauage的实现类TestAbstarctB
 */
class TestAbstarctB : Lanauage(){
    override var name: String
        get() = &quot;Java&quot;
        set(value) {}

    override fun init() {
        println(&quot;我是$name&quot;)
    }
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    
    // val lanauage = Lanauage() 是错误的，因为抽象类不能直接被实例化
    
    val mTestAbstarctA = TestAbstarctA()
    val mTestAbstarctB = TestAbstarctB()

    println(mTestAbstarctA.name)
    mTestAbstarctA.init()

    println(mTestAbstarctB.name)
    mTestAbstarctB.init()
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Kotlin
我是Kotlin
Java
我是Java&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.2、小结&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;抽象类本身具有普通类特性，以及组成部分。不过值得注意的是，&lt;strong&gt;抽象类不能直接被实例化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;其抽象了类的子类必须全部重写带&lt;code&gt;abstract&lt;/code&gt;修饰的属性和方法。&lt;/li&gt;
&lt;li&gt;抽象成员只有定义，没有实现。都有&lt;code&gt;abstract&lt;/code&gt;修饰符修饰。&lt;/li&gt;
&lt;li&gt;抽象类是为其子类定义了一个模板。不同是类实现不同的功能&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;抽象类的规则&quot;&gt;2、抽象类的规则&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;在&lt;code&gt;Kotlin&lt;/code&gt;中的抽象类在顶层定义的时候只能使用&lt;code&gt;public&lt;/code&gt;可见性修饰符修饰。&lt;/li&gt;
&lt;li&gt;抽象类中可以定义内部抽象类。&lt;/li&gt;
&lt;li&gt;只能继承一个抽象类。&lt;/li&gt;
&lt;li&gt;若要实现抽象类的实例化，需要依靠子类采用向上转型的方式处理。&lt;/li&gt;
&lt;li&gt;抽象类可以继承自一个继承类，即抽象类可以作为子类。不过，抽象类建议不用&lt;code&gt;open&lt;/code&gt;修饰符修饰，因为可以覆写抽象类的父类的函数。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;open class Base{
    open fun init(){}
}

abstract class Lanauage : Base(){
    val TAG = this.javaClass.simpleName  // 自身的属性

    // 自身的函数
    fun test() : Unit{
        // exp
    }
    abstract var name : String           // 抽象属性
    abstract override fun init()         // 覆写父类的方法
    
    abstract class Name(){}              // 嵌套抽象类，可查看第二节中的嵌套类使用
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    // 若要实现抽象类的实例化，需要依靠子类采用向上转型的方式处理。
    val mLanauage : Lanauage = TestAbstarctB()
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;抽象类的实际应用&quot;&gt;3、抽象类的实际应用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;在&lt;code&gt;Java&lt;/code&gt;的设计模式中，有一种设计模式叫&lt;code&gt;模板设计模式&lt;/code&gt;，其定义为：&lt;/li&gt;
&lt;li&gt;定义一个操作中算法的骨架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变算法的结构即可重定义该算法的某些特定步骤。&lt;/li&gt;
&lt;li&gt;通俗点的理解就是 ：完成一件事情，有固定的数个步骤，但是每个步骤根据对象的不同，而实现细节不同；就可以在父类中定义一个完成该事情的总方法，按照完成事件需要的步骤去调用其每个步骤的实现方法。每个步骤的具体实现，由子类完成。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Kotlin&lt;/code&gt;和&lt;code&gt;Java&lt;/code&gt;是互通的，说明&lt;code&gt;Kotlin&lt;/code&gt;也是支持这种设计模式的。&lt;br/&gt;如果你对&lt;code&gt;Java&lt;/code&gt;中的&lt;strong&gt;模板设计模式&lt;/strong&gt;不是很了解的，请参见&lt;a href=&quot;https://www.cnblogs.com/qq-361807535/p/6854191.html&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;二内部类嵌套类&quot;&gt;二、内部类（嵌套类）&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;在实际开发中，用到内部类的地方是很多的。比如说：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对于&lt;code&gt;Android&lt;/code&gt;开发来说，列表适配器（&lt;code&gt;adapter&lt;/code&gt;）中的&lt;code&gt;ViewHolder&lt;/code&gt;类，就是一个内部类。&lt;/li&gt;
&lt;li&gt;根据后台开发人员提供的&lt;code&gt;json&lt;/code&gt;字符串生成的对象中，也包含另外一个对象，这也是一个内部类。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;嵌套类&quot;&gt;1、嵌套类&lt;/h3&gt;
&lt;p&gt;上面提到的两种情况，是在开发中最常见的。当然，说到内部类，就必须世道另一个概念&lt;strong&gt;嵌套类&lt;/strong&gt;，所谓的嵌套类：即指一个类可以嵌套在其他类中。&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Other{           // 外部类
    val numOuther = 1

    class Nested {      // 嵌套类
        fun init(){
            println(&quot;执行了init方法&quot;)
        }
    }
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    Other.Nested().init()      // 调用格式为：外部类.嵌套类().嵌套类方法/属性
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;执行了init方法&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;调用嵌套类的属性或方法的格式为：&lt;code&gt;外部类.嵌套类().嵌套类方法/属性。在调用的时候嵌套类是需要实例化的&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;嵌套类不能使用外部类的属性和成员&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;内部类&quot;&gt;2、内部类&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;在上面的例子中讲解了嵌套类的使用，而内部类和嵌套类还是有一定的区别的，而且内部类是有特定的关键字去声明的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;关键字&quot;&gt;2.1、关键字&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;声明一个内部类使用&lt;code&gt;inner&lt;/code&gt;关键字。&lt;br/&gt;声明格式：inner class 类名(参数){}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Other{            // 外部类
    val numOther = 1

    inner class InnerClass{     // 嵌套内部类
        val name = &quot;InnerClass&quot;
        fun init(){
            println(&quot;我是内部类&quot;)
        }
    }
}

fun main(args: Array&amp;lt;String&amp;gt;) {
   Other().InnerClass().init()  // 调用格式为：外部类().内部类().内部类方法/属性
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;调用内部类的属性或方法的格式为：&lt;code&gt;外部类().内部类().内部类方法/属性。在调用的时候嵌套类是需要实例化的&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;内部类不能使用外部类的属性和成员&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;匿名内部类&quot;&gt;2.2、匿名内部类&lt;/h4&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;作为一名&lt;code&gt;Android&lt;/code&gt;开发者，对匿名内部类都不陌生，因为在开发中，匿名内部类随处可见。比如说&lt;code&gt;Button&lt;/code&gt;的&lt;code&gt;OnClickListener&lt;/code&gt;，&lt;code&gt;ListView&lt;/code&gt;的单击、长按事件等都用到了匿名内部类。&lt;br/&gt;一般的使用方式为定义一个接口，在接口中定义一个方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Other{
    
    lateinit private var listener : OnClickListener

    fun setOnClickListener(listener: OnClickListener){
        this.listener = listener
    }
    
    fun testListener(){
        listener.onItemClick(&quot;我是匿名内部类的测试方法&quot;)
    }
}    

interface OnClickListener{
    fun onItemClick(str : String)
}

fun main(args: Array&amp;lt;String&amp;gt;){
    // 测试匿名内部类
    val other = Other()
    other.setOnClickListener(object : OnClickListener{
        override fun onItemClick(str: String) {
            // todo
            println(str)
        }
    })
    other.testListener()
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;我是匿名内部类的测试方法&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;遗留的问题&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7.2044198895028&quot;&gt;
&lt;p&gt;在上面实现的匿名内部类是很常规的用法以及写法。在我们的实际开发当中也是大家熟知的写法。但是在我们实际开发当中，会引入&lt;code&gt;lambda&lt;/code&gt;语法糖，让我们的项目支持&lt;code&gt;lambda&lt;/code&gt;语法，简化代码量。在这里我也是想把用&lt;strong&gt;&lt;code&gt;lambda&lt;/code&gt;语法实现匿名内部类实现的代码贴出来&lt;/strong&gt;，但是考虑到很多朋友不知道&lt;code&gt;lambda&lt;/code&gt;语法强大或者对&lt;code&gt;lambda&lt;/code&gt;不了解，同时考虑到篇幅原因，故而在我的下一篇博文&lt;a href=&quot;http://www.cnblogs.com/Jetictors/p/8183254.html#&quot;&gt;Kotlin——你该应该熟知、掌握的Lambda语法&lt;/a&gt;去讲解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;局部类&quot;&gt;3、局部类&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;所谓局部类，这一点和&lt;code&gt;Java&lt;/code&gt;是一致的。即定义在方法（函数）中的类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Other{    // 外部类
    val numOther = 1
    
    fun partMethod(){
        var name : String = &quot;partMethod&quot;

        class Part{
            var numPart : Int = 2

            fun test(){
                name = &quot;test&quot;
                numPart = 5
                println(&quot;我是局部类中的方法&quot;)
            }
        }

        val part = Part()
        println(&quot;name = $name \t numPart = &quot; + part.numPart + &quot;\t numOther = numOther&quot;)
        part.test()
        println(&quot;name = $name \t numPart = &quot; + part.numPart + &quot;\t numOther = numOther&quot;)
    }
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    // 测试局部类
    Other().partMethod()
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;name = partMethod    numPart = 2    numOther = 1
我是局部类中的方法
name = test      numPart = 5    numOther = 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;通过上面的实例：我们可以看出：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;局部类只能在定义该局部类的方法中使用。&lt;/li&gt;
&lt;li&gt;定义在实例方法中的局部类可以访问外部类的所有变量和方法。但不能修改&lt;/li&gt;
&lt;li&gt;局部类中的可以定义属性、方法。并且可以修改局部方法中的变量。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;静态类&quot;&gt;4、静态类&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;熟悉&lt;code&gt;Java&lt;/code&gt;的朋友都知道&lt;code&gt;Java&lt;/code&gt;的静态类，或者说用&lt;code&gt;static&lt;/code&gt;修饰符修饰的类。但是在&lt;code&gt;Kotlin&lt;/code&gt;中，是不存在&lt;code&gt;static&lt;/code&gt;关键字的。那么我们怎样去实现一个静态类呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于&lt;strong&gt;静态类&lt;/strong&gt;的使用，以及静态类的语法。以及&lt;code&gt;Koltin&lt;/code&gt;的单例模式实现。由于篇幅原因我在这里就不展示了。有兴趣的朋友请参见&lt;a href=&quot;https://www.jianshu.com/p/157126615f77&quot;&gt;kotlin中的object更像是语法糖&lt;/a&gt;。这篇文章是别的大牛诠释静态类以及单例实现很好的文章。后面我会出一篇详细的文章为大家讲解。&lt;/p&gt;
&lt;h2 id=&quot;三总结&quot;&gt;三、总结&lt;/h2&gt;
&lt;p&gt;在学完本篇博文中，你应该掌握&lt;code&gt;抽象类&lt;/code&gt;的作用，掌握其和&lt;code&gt;普通类&lt;/code&gt;、&lt;code&gt;接口类&lt;/code&gt;、&lt;code&gt;继承类&lt;/code&gt;的区别所在，了解实现&lt;code&gt;抽象类&lt;/code&gt;的意义，或者说在项目中为什么要用&lt;code&gt;抽象类&lt;/code&gt;去编写一个&lt;code&gt;基类&lt;/code&gt;等。&lt;br/&gt;对于&lt;code&gt;嵌套类&lt;/code&gt;和&lt;code&gt;内部类&lt;/code&gt;而言，知道这两者的区别所在，和熟知他们在项目中用在什么地方就够了。对于&lt;code&gt;静态类&lt;/code&gt;来说，常用的实现都是用其去实现一个单例模式。在&lt;code&gt;Koltin&lt;/code&gt;的不像&lt;code&gt;Java&lt;/code&gt;一样实现很多的工具类，因为&lt;code&gt;Kotlin&lt;/code&gt;中的&lt;strong&gt;扩展&lt;/strong&gt;功能很强大。可以用&lt;strong&gt;扩展&lt;/strong&gt;去替换掉大部分的工具类。本篇文章主要是展示&lt;code&gt;object&lt;/code&gt;的用法而已，详细的使用场景和用法会在后续的文章中为大家奉上。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Jetictors/KotlinLeran/blob/master/src/com/kotlin/leran/cls/classDemo/AbstarctClassDemo.kt&quot;&gt;源代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果各位大佬看了之后感觉还阔以，就请各位大佬随便&lt;code&gt;star&lt;/code&gt;一下，您的关注是我最大的动力。&lt;br/&gt;&lt;em&gt;我的个人博客&lt;/em&gt;：&lt;a href=&quot;https://jetictors.github.io/&quot;&gt;Jetictors&lt;/a&gt;&lt;br/&gt;&lt;em&gt;我的github&lt;/em&gt;：&lt;a href=&quot;https://github.com/Jetictors&quot;&gt;Jetictors&lt;/a&gt;&lt;br/&gt;&lt;em&gt;我的掘金&lt;/em&gt;：&lt;a href=&quot;https://juejin.im/user/5709f5798ac247004c295d95&quot;&gt;Jetictors&lt;/a&gt;&lt;/p&gt;

&lt;h2 align=&quot;center&quot;&gt;欢迎各位大佬进群共同研究、探索&lt;br/&gt;&lt;/h2&gt;
&lt;h4 align=&quot;center&quot;&gt;QQ群号：497071402&lt;br/&gt;&lt;/h4&gt;
</description>
<pubDate>Wed, 03 Jan 2018 05:02:00 +0000</pubDate>
<dc:creator>Jetictors</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Jetictors/p/8183254.html</dc:identifier>
</item>
<item>
<title>AdaBoost对实际数据分类的Julia实现 - szcf715</title>
<link>http://www.cnblogs.com/szcf715/p/8183230.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/szcf715/p/8183230.html</guid>
<description>&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;AdaBoost是机器学习领域一个很重要很流行的算法，而Julia是一门新兴的发展迅速的科学计算语言。本文将从一个实际例子出发，展示如何用Julia语言实现AdaBoost算法。&lt;/p&gt;
&lt;h2 id=&quot;什么是adaboost&quot;&gt;什么是AdaBoost&lt;/h2&gt;
&lt;p&gt;这方面的资料有很多，我将基于Hastie和Tibshirani的ESL(The Elements of Statistical Learning)有关章节的内容，从统计学习的角度简单介绍一下。另外，我一直在进行ESL的翻译工作，并试图实现书中有关算法，欢迎访问&lt;a href=&quot;https://esl.hohoweiya.xyz/&quot;&gt;ESL-CN项目主页&lt;/a&gt;，本节的相关翻译内容参见&lt;a href=&quot;https://esl.hohoweiya.xyz/10%20Boosting%20and%20Additive%20Trees/10.1%20Boosting%20Methods/index.html&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;给定预报向量&lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt;，分类器&lt;span class=&quot;math inline&quot;&gt;\(G(X)\)&lt;/span&gt;在二值&lt;span class=&quot;math inline&quot;&gt;\(\\{-1,1\\}\)&lt;/span&gt;中取一个值得到一个预测。在训练样本上的误差率是&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \overline{err}=\frac{1}{N}\sum\limits_{i=1}^NI(y_i\neq G(x_i)) \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在未来预测值上的期望误差率为&lt;span class=&quot;math inline&quot;&gt;\(E_{XY}I(Y\neq G(X))\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;弱分类器是误差率仅仅比随机猜测要好一点的分类器。boosting的目的是依次对反复修改的数据应用弱分类器算法，因此得到弱分类器序列&lt;span class=&quot;math inline&quot;&gt;\(G_m(x),m=1,2,\ldots,M\)&lt;/span&gt; 根据它们得到的预测再通过一个加权来得到最终的预测&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ G(x)=\mathrm {sign}(\sum\limits_{m=1}^M\alpha_mG_m(x)) \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;用一个概念图（图来自ESL原书）表示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/953584/201801/953584-20180103115034971-1771777614.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;具体来说，对每步boosting的数据修改是对每个训练观测&lt;span class=&quot;math inline&quot;&gt;\((x_i,y_i),i=1,2,\ldots,N\)&lt;/span&gt;赋予权重&lt;span class=&quot;math inline&quot;&gt;\(w_1,w_2,\ldots,w_N\)&lt;/span&gt;。初始化所有的权重设为&lt;span class=&quot;math inline&quot;&gt;\(w_i=1/N\)&lt;/span&gt;，使得第一步以通常的方式对数据进行训练分类器。对每个接下来的迭代&lt;span class=&quot;math inline&quot;&gt;\(m=2,3,\ldots,M\)&lt;/span&gt;，单独修改观测的权重，然后将分类算法重新应用到加权观测值上。在第&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;步，上一步中被分类器&lt;span class=&quot;math inline&quot;&gt;\(G_{m-1}(x)\)&lt;/span&gt;的误分类的观测值增大了权重，而正确分类的观测值权重降低了。因此当迭代继续，很难正确分类的观测受到越来越大的影响。每个相继的分类器因此被强制集中在上一步误分类的训练数据上。&lt;/p&gt;
&lt;p&gt;算法10.1显示了AdaBoost.M1算法的详细细节。当前的分类器&lt;span class=&quot;math inline&quot;&gt;\(G_m(x)\)&lt;/span&gt;由第2(a)行的加权观测值得到。在第2(b)行计算加权误差率。第2(c)行计算赋予&lt;span class=&quot;math inline&quot;&gt;\(G_m(x)\)&lt;/span&gt;的权重&lt;span class=&quot;math inline&quot;&gt;\(\alpha_m\)&lt;/span&gt;来得到最终的分类器&lt;span class=&quot;math inline&quot;&gt;\(G(x)\)&lt;/span&gt;(第3行)。每个观测的个体权重在第2(d)行进行更新。在导出序列中下一个分类器&lt;span class=&quot;math inline&quot;&gt;\(G_{m+1}(x)\)&lt;/span&gt;时，被分类器&lt;span class=&quot;math inline&quot;&gt;\(G(x)\)&lt;/span&gt;错误分类的观测值的权重被因子&lt;span class=&quot;math inline&quot;&gt;\(exp(\alpha_m)\)&lt;/span&gt;进行缩放以提高它们的相对影响。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/953584/201801/953584-20180103115826753-627618106.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;例子&quot;&gt;例子&lt;/h2&gt;
&lt;p&gt;特征&lt;span class=&quot;math inline&quot;&gt;\(X_1,\ldots,X_{10}\)&lt;/span&gt;是标准独立高斯分布，目标&lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt;定义如下&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ Y= \left\{ \begin{array}{ll} 1&amp;amp;\text{if } \sum_{j=1}^{10}X_j^2&amp;gt;\chi_{10}^2(0.5)\\ -1 &amp;amp; \text{otherwise} \end{array} \right. \qquad (10.2) \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这里&lt;span class=&quot;math inline&quot;&gt;\(\chi_{10}^2(0.5)=9.34\)&lt;/span&gt;是自由度为10的卡方随机变量的中位数（10个标准的高斯分布的平方和）。有2000个训练情形，每个类别大概有1000个情形，以及10000个测试观测值。这里我们取称为“stump”的弱分类器：含两个终止结点的分类树。&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;实现&lt;/h2&gt;
&lt;p&gt;Julia的具体细节参见&lt;a href=&quot;https://docs.julialang.org/en/stable/manual/&quot;&gt;官方manual&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;首先我们定义模型的结构，我们需要两个参数，弱分类器的个数&lt;code&gt;n_clf&lt;/code&gt;和存储&lt;code&gt;n_clf&lt;/code&gt;个弱分类器的&lt;code&gt;n_clf&lt;/code&gt;&lt;span class=&quot;math inline&quot;&gt;\(\times 4\)&lt;/span&gt;的矩阵。因为对于每个弱分类器——两个终止结点的stump，我们需要三个参数确定，分割变量的编号&lt;code&gt;idx&lt;/code&gt;，该分割变量对应的cutpoint值&lt;code&gt;val&lt;/code&gt;，以及分类的方向&lt;code&gt;flag&lt;/code&gt;（当&lt;code&gt;flag&lt;/code&gt;取1时则所有比cutpoint大的观测值分到树的右结点，而&lt;code&gt;flag&lt;/code&gt;取0时分到左结点），另外算法中需要确定的&lt;code&gt;alpha&lt;/code&gt;参数，所以一个stump需要四个参数。下面代码默认弱分类器个数为10。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode julia&quot;&gt;
&lt;code class=&quot;sourceCode julia&quot;&gt;struct Adaboost
    n_clf::&lt;span class=&quot;dt&quot;&gt;Int64&lt;/span&gt;
    clf::&lt;span class=&quot;dt&quot;&gt;Matrix&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; Adaboost(;n_clf::&lt;span class=&quot;dt&quot;&gt;Int64&lt;/span&gt; = &lt;span class=&quot;fl&quot;&gt;10&lt;/span&gt;)
    clf = zeros(n_clf, &lt;span class=&quot;fl&quot;&gt;4&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; Adaboost(n_clf, clf)
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;训练模型&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode julia&quot;&gt;
&lt;code class=&quot;sourceCode julia&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; train!(model::Adaboost, X::&lt;span class=&quot;dt&quot;&gt;Matrix&lt;/span&gt;, y::&lt;span class=&quot;dt&quot;&gt;Vector&lt;/span&gt;)
    n_sample, n_feature = size(X)
    &lt;span class=&quot;co&quot;&gt;## initialize weight&lt;/span&gt;
    w = ones(n_sample) / n_sample
    threshold = &lt;span class=&quot;fl&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;## indicate the classification direction&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;## consider observation obs which is larger than cutpoint.val&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;## if flag = 1, then classify obs as 1&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;## else if flag = -1, classify obs as -1&lt;/span&gt;
    flag = &lt;span class=&quot;fl&quot;&gt;0&lt;/span&gt;
    feature_index = &lt;span class=&quot;fl&quot;&gt;0&lt;/span&gt;
    alpha = &lt;span class=&quot;fl&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; i = &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;:model.n_clf
        &lt;span class=&quot;co&quot;&gt;## step 2(a): stump&lt;/span&gt;
        err_max = &lt;span class=&quot;fl&quot;&gt;1e10&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; feature_ind = &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;:n_feature
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; threshold_ind = &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;:n_sample
                flag_ = &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;
                err = &lt;span class=&quot;fl&quot;&gt;0&lt;/span&gt;
                threshold_ = X[threshold_ind, feature_ind]

                &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; sample_ind = &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;:n_sample
                    pred = &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;
                    x = X[sample_ind, feature_ind]
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; x &amp;lt; threshold_
                        pred = -&lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
                    err += w[sample_ind] * (y[sample_ind] != pred)
                &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
                err = err / sum(w)
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; err &amp;gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;
                    err = &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt; - err
                    flag_ = -&lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;

                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; err &amp;lt; err_max
                    err_max = err
                    threshold = threshold_
                    flag = flag_
                    feature_index = feature_ind
                &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;## step 2(c)&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;#alpha = 1/2 * log((1-err_max)/(err_max))&lt;/span&gt;
        alpha = &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;fl&quot;&gt;2&lt;/span&gt; * log((&lt;span class=&quot;fl&quot;&gt;1.000001&lt;/span&gt;-err_max)/(err_max+&lt;span class=&quot;fl&quot;&gt;0.000001&lt;/span&gt;))
        &lt;span class=&quot;co&quot;&gt;## step 2(d)&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; j = &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;:n_sample
            pred = &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;
            x = X[j, feature_index]
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; flag * x &amp;lt; flag * threshold
                pred = -&lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
            w[j] = w[j] * exp(-alpha * y[j] * pred)
        &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
        model.clf[i, :] = [feature_index, threshold, flag, alpha]
    &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;预测模型&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode julia&quot;&gt;
&lt;code class=&quot;sourceCode julia&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; predict(model::Adaboost,
                 x::&lt;span class=&quot;dt&quot;&gt;Matrix&lt;/span&gt;)
    n = size(x,&lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;)
    res = zeros(n)
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; i = &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;:n
        res[i] = predict(model, x[i,:])
    &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; res
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; predict(model::Adaboost,
                 x::&lt;span class=&quot;dt&quot;&gt;Vector&lt;/span&gt;)
    s = &lt;span class=&quot;fl&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; i = &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;:model.n_clf
        pred = &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;
        feature_index = trunc(&lt;span class=&quot;dt&quot;&gt;Int64&lt;/span&gt;,model.clf[i, &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;])
        threshold = model.clf[i, &lt;span class=&quot;fl&quot;&gt;2&lt;/span&gt;]
        flag = model.clf[i, &lt;span class=&quot;fl&quot;&gt;3&lt;/span&gt;]
        alpha = model.clf[i, &lt;span class=&quot;fl&quot;&gt;4&lt;/span&gt;]
        x_temp = x[feature_index]
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; flag * x_temp &amp;lt; flag * threshold
            pred = -&lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
        s += alpha * pred
    &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; sign(s)

&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来应用到模拟例子中&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;26&quot;&gt;
&lt;pre class=&quot;sourceCode julia&quot;&gt;
&lt;code class=&quot;sourceCode julia&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; generate_data(N)
    p = &lt;span class=&quot;fl&quot;&gt;10&lt;/span&gt;
    x = randn(N, p)
    x2 = x.*x
    c = &lt;span class=&quot;fl&quot;&gt;9.341818&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;#qchisq(0.5, 10)&lt;/span&gt;
    y = zeros(&lt;span class=&quot;dt&quot;&gt;Int64&lt;/span&gt;,N)
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; i=&lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;:N
        tmp = sum(x2[i,:])
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; tmp &amp;gt; c
            y[i] = &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
            y[i] = -&lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; x,y
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; test_Adaboost()
    x_train, y_train = generate_data(&lt;span class=&quot;fl&quot;&gt;2000&lt;/span&gt;)
    x_test, y_test = generate_data(&lt;span class=&quot;fl&quot;&gt;10000&lt;/span&gt;)
    m = &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;fl&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;fl&quot;&gt;400&lt;/span&gt;
    res = zeros(size(m, &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;))
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; i=&lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;:size(m, &lt;span class=&quot;fl&quot;&gt;1&lt;/span&gt;)
        model = Adaboost(n_clf=m[i])
        train!(model, x_train, y_train)
        predictions = predict(model, x_test)
        println(&lt;span class=&quot;st&quot;&gt;&quot;The number of week classifiers &quot;&lt;/span&gt;, m[i])
        res[i] = classification_error(y_test, predictions)
        println(&lt;span class=&quot;st&quot;&gt;&quot;classification error: &quot;&lt;/span&gt;, res[i])
    &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; hcat(m, res)
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;作出误差随迭代次数的图象如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/953584/201801/953584-20180103123728237-1958283034.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完整代码参见&lt;a href=&quot;https://github.com/szcf-weiya/ESL-CN/tree/master/code/boosting&quot;&gt;这里&lt;/a&gt;&lt;del&gt;觉得项目很好的话记得star鼓励一下哦&lt;/del&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 03 Jan 2018 04:52:00 +0000</pubDate>
<dc:creator>szcf715</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/szcf715/p/8183230.html</dc:identifier>
</item>
<item>
<title>Hello 2018, Bye 2017 - James.Ying</title>
<link>http://www.cnblogs.com/inday/p/hello-2018-goodbye-2017.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/inday/p/hello-2018-goodbye-2017.html</guid>
<description>&lt;p&gt;2017年过去了，过去一年经历了太多，改变了好多好多，可以说人生进入了另一个阶段，有可能是成熟吧。&lt;/p&gt;
&lt;h2 id=&quot;回顾2017&quot;&gt;回顾2017&lt;/h2&gt;
&lt;p&gt;去年换了新工作，离开了将近工作了8年的公司，不带走一丝云彩，为其任劳任怨，最后没有任何留恋，真的很失败，一晃已经中年，但我不放弃，我决心改变自己&lt;/p&gt;
&lt;h3 id=&quot;减肥&quot;&gt;减肥&lt;/h3&gt;
&lt;p&gt;从大病之后体重一直在200左右，不高不低，指标也不是很正常，这次换了新的公司，新公司做健康的，索性开始减肥吧。&lt;br/&gt;早餐代餐奶昔（公司福利），午餐照吃，不过尽量自己带饭，晚餐也在家吃，随后晚上9点开始锻炼，刚开始跑步，但后来腰不太舒服，改成了室内单车，大概3个月减了20斤，持续到现在，大概已经7个月了，不过还是维持在180左右，不过身体健康了，血液检查指标一切正常，这是非常让人开心的。&lt;/p&gt;
&lt;h3 id=&quot;戒烟&quot;&gt;戒烟&lt;/h3&gt;
&lt;p&gt;之前戒了好多次好多次，这次换了公司后，从每天抽10根到每天3根，后来想想3根有撒好抽的，索性戒了，现在真的戒了，已经没有任何念头，很多朋友说香烟能带来思路，我想说的是，尼古丁只会降低你的智商，戒了吧！&lt;/p&gt;
&lt;h3 id=&quot;看书&quot;&gt;看书&lt;/h3&gt;
&lt;p&gt;之前一直说着要看书要看书，但一看就睡。。。。现在看书除了为了自己也为了儿子，他一天天的长大，已经开始在学习字母，文字，英文了，但是作为爸爸的我每天回来捧着手机玩王者，给他带来了很坏的榜样，索性改变了，看书，写字，陪着他一起来，当然学习完还会陪他玩一会的&lt;/p&gt;
&lt;h3 id=&quot;学英文&quot;&gt;学英文&lt;/h3&gt;
&lt;p&gt;之前学过，在vipabc上学的，学了一年，撒都没记住，浪费精力浪费钱，这次因为进了外企，常年打交道，那就重新来吧，从新概念开始，一步一个脚印，但是交流的机会不多，又报了一个51talk，老师可以自己选，课程可以自己选，非常好，找到了几个口音不错的菲律宾老师，长期跟着，进步还算可以吧&lt;/p&gt;
&lt;h3 id=&quot;写博客和代码&quot;&gt;写博客和代码&lt;/h3&gt;
&lt;p&gt;这块一开始蛮用心的，但是工作后来越来越多，实在无法兼顾，只能抽时间去写，很累，现在不强求自己每周或者每月写多少博客了，慢工出细活，慢慢来，也会不断去磨练自己。代码方便，每天工作都会打交道，回来之后也会写一些自己的东西，比如&lt;a href=&quot;https://github.com/JamesYing/JCWXCore&quot;&gt;微信快速开发框架&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;展望2018&quot;&gt;展望2018&lt;/h2&gt;
&lt;p&gt;2017过去了，感觉过的很充实，人生改变了很多，接下来的一年相信会更好，我不喜欢再订什么目标，我觉得坚持才是最宝贵的，以上的种种都需要坚持继续下去。&lt;/p&gt;
&lt;p&gt;2018年将以.Net Core，Python，微服务，docker，人工智能为主。&lt;br/&gt;.Net Core是跨系统的平台，性能上面已经超过java，个人非常看好其发展，也很希望自己能够为国内社区奉献自己一份力量。&lt;/p&gt;
&lt;p&gt;python则是最好的ai编程语言，而且python非常简单，类库非常强大，很适合在微服务或者项目中运用。&lt;/p&gt;
&lt;p&gt;docker技术之前我就说过，这是一个amazing，crazing的产物，学习的差不多了，该把这一些付诸于行动了。&lt;/p&gt;
&lt;p&gt;人工智能是一个风口，但需要扎实的数学基础，所以要把高中数学再看一遍，巩固以下。&lt;/p&gt;
&lt;p&gt;2018年，我第二个18岁了，我一定要好好努力，不仅仅为我自己，而且还有我的家人，希望大家也能在2018年开开心心，顺顺利利。&lt;/p&gt;
</description>
<pubDate>Wed, 03 Jan 2018 03:44:00 +0000</pubDate>
<dc:creator>James.Ying</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/inday/p/hello-2018-goodbye-2017.html</dc:identifier>
</item>
<item>
<title>前端MVC Vue2学习总结（五）——表单输入绑定、组件 - 张果</title>
<link>http://www.cnblogs.com/best/p/8182847.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/best/p/8182847.html</guid>
<description>&lt;h2 id=&quot;基础用法&quot;&gt;1.1、基础用法&lt;/h2&gt;
&lt;p&gt;你可以用 &lt;code&gt;v-model&lt;/code&gt; 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 &lt;code&gt;v-model&lt;/code&gt; 本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并特别处理一些极端的例子。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v-model&lt;/code&gt; 并不关心表单控件初始化所生成的值。因为它会选择 Vue 实例数据来作为具体的值。&lt;/p&gt;
&lt;h3&gt;1.1.1、文本&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;message&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;edit me&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Message is: {{ message }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.1.2、多行文本&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Multiline message is:&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;white-space: pre&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ message }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;textarea &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;message&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;add multiple lines&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;textarea&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在文本区域插值( &lt;code&gt;&amp;lt;textarea&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/code&gt; ) 并不会生效，应用 &lt;code&gt;v-model&lt;/code&gt; 来代替&lt;/p&gt;
&lt;h3 id=&quot;复选框&quot;&gt;1.1.3、复选框&lt;/h3&gt;
&lt;p&gt;单个勾选框，逻辑值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;checked&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ checked }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多个勾选框，绑定到同一个数组：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;jack&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;Jack&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;checkedNames&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;jack&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Jack&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;john&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;John&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;checkedNames&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;john&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;John&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;mike&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;Mike&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;checkedNames&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;mike&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Mike&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Checked names: {{ checkedNames }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;'...'&lt;span&gt;,
  data: {
    checkedNames: []
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.1.4、单选按钮&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;one&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;One&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;picked&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;one&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;One&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;two&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;Two&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;picked&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;two&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Two&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Picked: {{ picked }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;选择列表&quot;&gt;1.1.5、选择列表&lt;/h3&gt;
&lt;p&gt;单选列表:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;selected&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;A&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;B&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;C&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Selected: {{ selected }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多选列表（绑定到一个数组）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;selected&quot;&lt;/span&gt;&lt;span&gt; multiple&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;A&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;B&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;C&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Selected: {{ selected }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;动态选项，用 &lt;code&gt;v-for&lt;/code&gt; 渲染：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;selected&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;option in options&quot;&lt;/span&gt;&lt;span&gt; v-bind:value&lt;/span&gt;&lt;span&gt;=&quot;option.value&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {{ option.text }}
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Selected: {{ selected }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;'...'&lt;span&gt;,
  data: {
    selected: &lt;/span&gt;'A'&lt;span&gt;,
    options: [
      { text: &lt;/span&gt;'One', value: 'A'&lt;span&gt; },
      { text: &lt;/span&gt;'Two', value: 'B'&lt;span&gt; },
      { text: &lt;/span&gt;'Three', value: 'C'&lt;span&gt; }
    ]
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;绑定-value&quot;&gt;1.2、绑定 value&lt;/h2&gt;
&lt;p&gt;对于单选按钮，勾选框及选择列表选项， &lt;code&gt;v-model&lt;/code&gt; 绑定的 value 通常是静态字符串（对于勾选框是逻辑值）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 当选中时，`picked` 为字符串 &quot;a&quot; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;picked&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;a&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; `toggle` 为 true 或 false &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;toggle&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 当选中时，`selected` 为字符串 &quot;abc&quot; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;selected&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;abc&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ABC&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是有时我们想绑定 value 到 Vue 实例的一个动态属性上，这时可以用 &lt;code&gt;v-bind&lt;/code&gt; 实现，并且这个属性的值可以不是字符串。&lt;/p&gt;
&lt;h3&gt;1.2.1、复选框&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input
  &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt;
  v-model&lt;/span&gt;&lt;span&gt;=&quot;toggle&quot;&lt;/span&gt;&lt;span&gt;
  v-bind:true-value&lt;/span&gt;&lt;span&gt;=&quot;a&quot;&lt;/span&gt;&lt;span&gt;
  v-bind:false-value&lt;/span&gt;&lt;span&gt;=&quot;b&quot;&lt;/span&gt;
&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当选中时&lt;/span&gt;
vm.toggle ===&lt;span&gt; vm.a
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当没有选中时&lt;/span&gt;
vm.toggle === vm.b
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.2.2、单选按钮&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;pick&quot;&lt;/span&gt;&lt;span&gt; v-bind:value&lt;/span&gt;&lt;span&gt;=&quot;a&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当选中时&lt;/span&gt;
vm.pick === vm.a
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.2.3、选择列表设置&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;selected&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 内联对象字面量 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;v-bind:value&lt;/span&gt;&lt;span&gt;=&quot;{ number: 123 }&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;123&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当选中时&lt;/span&gt;
&lt;span&gt;typeof&lt;/span&gt; vm.selected &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -&amp;gt; 'object'&lt;/span&gt;
vm.selected.number &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -&amp;gt; 123&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;表单&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;vm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;tom&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;值：
                &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-text&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-html&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{name}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;爱好&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;hobbies&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;代码&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;hobbies1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;hobbies1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;代码&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;hobbies&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;运动&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;hobbies2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;hobbies2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;运动&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;hobbies&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;音乐&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;hobbies3&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;hobbies3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;音乐&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; 值：{{hobbies.join(',')}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;性别&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;男&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;sex1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;sex1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;男&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;女&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;sex2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;sex2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;女&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;保密&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;sex3&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;sex3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;保密&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; 值：{{sex}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;精通&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;skill1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;Java&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;前端&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;前端&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;Oracle&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Oracle&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;--请选择--&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                值：{{skill1}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;擅长&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;skill2&quot;&lt;/span&gt;&lt;span&gt; multiple&lt;/span&gt;&lt;span&gt;=&quot;multiple&quot;&lt;/span&gt;&lt;span&gt; size&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;C#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;C#&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;Ruby&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Ruby&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;Go&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Go&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;PHP&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;PHP&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;python&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;python&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                值：{{skill2}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;isAllow&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;isAllow&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;isAllow&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;同意本网站协定&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; 值：{{isAllow}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;isOk&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;isOk&quot;&lt;/span&gt;&lt;span&gt; v-bind:true-value&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt; v-bind:false-value&lt;/span&gt;&lt;span&gt;=&quot;no&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;isOk&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;同意本网站协定&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; 值：{{isOk}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;isOk2&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;isOk2&quot;&lt;/span&gt;&lt;span&gt; v-bind:true-value&lt;/span&gt;&lt;span&gt;=&quot;'yes'&quot;&lt;/span&gt;&lt;span&gt; v-bind:false-value&lt;/span&gt;&lt;span&gt;=&quot;'no'&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;isOk2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;同意本网站协定&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; 值：{{isOk2}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;isSend&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;isSend&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;发送&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;发送
                &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;isSend&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;isSend&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;不发送&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;不发送
                &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;发送短信&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; 值：{{isSend}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;等级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;grade&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;:value&lt;/span&gt;&lt;span&gt;=&quot;{level:1}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;A级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;:value&lt;/span&gt;&lt;span&gt;=&quot;{level:2}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;B级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;v-bind:value&lt;/span&gt;&lt;span&gt;=&quot;{level:3}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;C级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                值：{{grade.level}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;textarea &lt;/span&gt;&lt;span&gt;rows&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt;&lt;span&gt; cols&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{name}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;textarea&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#vm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    isShow: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                    name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rose&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    hobbies: [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;代码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
                    sex: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;保密&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    skill1: &lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
                    skill2: [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PHP&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
                    isAllow: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                    isOk: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;同意&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    yes: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;同意&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    no: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;不同意&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    isOk2: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    isSend:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;不发送&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    grade:{
                        name:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;技术等级&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        level:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
                    }
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180102104243034-1494420916.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;修饰符&quot;&gt;1.3、修饰符&lt;/h2&gt;
&lt;h3 id=&quot;lazy&quot;&gt;&lt;code&gt;1.3.1、.lazy&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;在默认情况下， &lt;code&gt;v-model&lt;/code&gt; 在 &lt;code&gt;input&lt;/code&gt; 事件中同步输入框的值与数据，但你可以添加一个修饰符 &lt;code&gt;lazy&lt;/code&gt; ，从而转变为在 &lt;code&gt;change&lt;/code&gt; 事件中同步：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model.lazy&lt;/span&gt;&lt;span&gt;=&quot;msg&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;表单&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;vm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;tom&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt; 值：
                &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-text&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model.lazy&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;tom&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt; 值：
                &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-text&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#vm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rose&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180102104712956-43986308.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;number&quot;&gt;&lt;code&gt;1.3.2、.number&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 &lt;code&gt;number&lt;/code&gt; 给 &lt;code&gt;v-model&lt;/code&gt; 来处理输入值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model.number&lt;/span&gt;&lt;span&gt;=&quot;age&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;number&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这通常很有用，因为在 &lt;code&gt;type=&quot;number&quot;&lt;/code&gt; 时 HTML 中输入的值也总是会返回字符串类型。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;表单&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;vm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;age&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;年龄&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;age&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;age&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;age&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;number&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt; 值：{{age}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;age&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;年龄&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model.number&lt;/span&gt;&lt;span&gt;=&quot;age&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;age&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;age&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt; 值：{{age}}
                类型：{{typeof(age)}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#vm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rose&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    age: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180102105347893-409035617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180102105410612-256023567.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;trim&quot;&gt;&lt;code&gt;1.3.2、.trim&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;如果要自动过滤用户输入的首尾空格，可以添加 &lt;code&gt;trim&lt;/code&gt; 修饰符到 &lt;code&gt;v-model&lt;/code&gt; 上过滤输入：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model.trim&lt;/span&gt;&lt;span&gt;=&quot;msg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;表单&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;vm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;memo1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自我介绍&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;memo1&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;memo1&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;memo1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt; 值：{{memo1}}结束
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;memo2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自我介绍&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model.trim&lt;/span&gt;&lt;span&gt;=&quot;memo2&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;memo2&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;memo2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt; 值：{{memo2}}结束
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#vm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rose&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    age: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    memo1:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  我是 一个 好学生 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    memo2:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  我是一个好学生   &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;初始加载，trim未执行：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180102105918815-519920889.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;修改后有效：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180102105837987-1829365774.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.4、在组件上使用 v-model&lt;/h2&gt;
&lt;p&gt;如果你还不熟悉 Vue 的组件，可以暂且跳过这里。&lt;br/&gt;HTML 原生的输入元素类型并不总能满足需求。幸好，Vue 的组件系统允许你创建具有完全自定义行为且可复用的输入组件。这些输入组件甚至可以和 &lt;code&gt;v-model&lt;/code&gt; 一起使用！要了解更多，请参阅组件指南中的&lt;a href=&quot;https://cn.vuejs.org/v2/guide/components.html#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%84%E4%BB%B6&quot;&gt;自定义输入组件&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;官方原文：&lt;a href=&quot;http://vuejs.org/guide/forms.html&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;http://vuejs.org/guide/forms.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cn.vuejs.org/images/components.png&quot; alt=&quot;Component Tree&quot; width=&quot;620&quot; height=&quot;240&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;什么是组件？&quot;&gt;2.1、什么是组件？&lt;/h2&gt;
&lt;p&gt;组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。&lt;/p&gt;
&lt;p&gt;先看看几种定义组件的办法：&lt;/p&gt;
&lt;h3&gt;2.1.1、组件形式一：使用script标签&lt;/h3&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;组件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;vm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-component1&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-component1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/x-template&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;template1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;这是一个组件&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;div&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义全局的Vue组件&lt;/span&gt;
&lt;span&gt;            Vue.component(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;me-component1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{
                template:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#template1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            });
            
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#vm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rose&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180102140427987-1806653466.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意：使用&amp;lt;script&amp;gt;标签时，type指定为text/x-template，意在告诉浏览器这不是一段js脚本，浏览器在解析HTML文档时会忽略&amp;lt;script&amp;gt;标签内定义的内容。&lt;/p&gt;
&lt;h3&gt;2.1.2、组件形式二：使用template标签&lt;/h3&gt;
&lt;p&gt; 示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;组件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;vm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-component1&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-component1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;template2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;这是另一个组件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义全局的Vue组件&lt;/span&gt;
&lt;span&gt;            Vue.component(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;me-component1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{
                template:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#template2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            });
            
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#vm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rose&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180102140801049-1413539719.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.1.3、组件形式一：使用vue文件&lt;/h3&gt;
&lt;p&gt;这种方法常用在vue单页应用（SPA）中。详情看官网：&lt;a href=&quot;https://cn.vuejs.org/v2/guide/single-file-components.html%20&quot; target=&quot;_blank&quot;&gt;https://cn.vuejs.org/v2/guide/single-file-components.html&lt;/a&gt;&lt;br/&gt;创建.vue后缀的文件,组件Hello.vue，放到components文件夹中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;hello&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ msg }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  name: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  data () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
      msg: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;欢迎！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    }
  }
}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;app.vue&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 展示模板 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./assets/logo.png&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 导入组件&lt;/span&gt;
&lt;span&gt;import Hello from &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./components/Hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  name: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  components: {
    Hello
  }
}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 样式代码 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
#app &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
  font-family&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 'Avenir', Helvetica, Arial, sans-serif&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
  -webkit-font-smoothing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; antialiased&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
  -moz-osx-font-smoothing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; grayscale&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
  text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
  color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #2c3e50&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
  margin-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;使用组件&quot;&gt;2.2、使用组件&lt;/h2&gt;
&lt;h3 id=&quot;注册&quot;&gt;2.2.1、注册&lt;/h3&gt;
&lt;p&gt;之前说过，我们可以通过以下方式创建一个 Vue 实例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;'#some-element'&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 选项&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要注册一个全局组件，你可以使用 &lt;code&gt;Vue.component(tagName, options)&lt;/code&gt;。 例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Vue.component('my-component'&lt;span&gt;, {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 选项&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于自定义标签名，Vue.js 不强制要求遵循 &lt;a href=&quot;https://www.w3.org/TR/custom-elements/#concepts&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;W3C规则&lt;/a&gt; （小写，并且包含一个短杠），尽管遵循这个规则比较好。&lt;/p&gt;
&lt;p&gt;组件在注册之后，便可以在父实例的模块中以自定义元素&lt;code&gt;&amp;lt;my-component&amp;gt;&amp;lt;/my-component&amp;gt;&lt;/code&gt; 的形式使用。要确保在初始化根实例 之前 注册了组件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;example&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 注册&lt;/span&gt;
Vue.component('my-component'&lt;span&gt;, {
  template: &lt;/span&gt;'&amp;lt;div&amp;gt;A custom component!&amp;lt;/div&amp;gt;'&lt;span&gt;
})
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建根实例&lt;/span&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;'#example'&lt;span&gt;
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;渲染为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;example&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;A custom component!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;局部注册&quot;&gt;2.2.2、局部注册&lt;/h3&gt;
&lt;p&gt;不必在全局注册每个组件。通过使用组件实例选项注册，可以使组件仅在另一个实例/组件的作用域中可用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; Child =&lt;span&gt; {
  template: &lt;/span&gt;'&amp;lt;div&amp;gt;A custom component!&amp;lt;/div&amp;gt;'&lt;span&gt;
}
&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...&lt;/span&gt;
&lt;span&gt;  components: {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &amp;lt;my-component&amp;gt; 将只在父模板可用&lt;/span&gt;
    'my-component'&lt;span&gt;: Child
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种封装也适用于其它可注册的 Vue 功能，如指令。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;组件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;vm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-component3&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-component3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义局部的Vue组件&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#vm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rose&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                },
                components: {
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;me-component3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                        template: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;定义局部的Vue组件&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    }
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180102141913018-2123087847.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;DOM-模版解析说明&quot;&gt;2.2.3、DOM 模版解析说明&lt;/h3&gt;
&lt;p&gt;当使用 DOM 作为模版时（例如，将 &lt;code&gt;el&lt;/code&gt; 选项挂载到一个已存在的元素上）, 你会受到 HTML 的一些限制，因为 Vue 只有在浏览器解析和标准化 HTML 后才能获取模版内容。尤其像这些元素 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;， &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 限制了能被它包裹的元素，&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 只能出现在其它元素内部。&lt;/p&gt;
&lt;p&gt;在自定义组件中使用这些受限制的元素时会导致一些问题，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-row&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;...&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-row&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自定义组件 &lt;code&gt;&amp;lt;my-row&amp;gt;&lt;/code&gt; 被认为是无效的内容，因此在渲染的时候会导致错误。变通的方案是使用特殊的 &lt;code&gt;is&lt;/code&gt; 属性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt;=&quot;my-row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应当注意，如果您使用来自以下来源之一的字符串模板，这些限制将不适用：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;&amp;lt;script type=&quot;text/x-template&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;JavaScript内联模版字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.vue&lt;/code&gt; 组件&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因此，有必要的话请使用字符串模版。&lt;/p&gt;
&lt;h3 id=&quot;data-必须是函数&quot;&gt;&lt;code&gt;2.2.4、data&lt;/code&gt; 必须是函数&lt;/h3&gt;
&lt;p&gt;使用组件时，大多数选项可以被传入到 Vue 构造器中，有一个例外： &lt;code&gt;data&lt;/code&gt; 必须是函数。 实际上，如果你这么做：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Vue.component('my-component'&lt;span&gt;, {
  template: &lt;/span&gt;'&amp;lt;span&amp;gt;{{ message }}&amp;lt;/span&amp;gt;'&lt;span&gt;,
  data: {
    message: &lt;/span&gt;'hello'&lt;span&gt;
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;那么 Vue 会在控制台发出警告，告诉你在组件中 &lt;code&gt;data&lt;/code&gt; 必须是一个函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180102143149206-1119372752.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最好理解这种规则的存在意义。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;example-2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;simple-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;simple-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;simple-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;simple-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;simple-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;simple-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; data = { counter: 0&lt;span&gt; }
Vue.component(&lt;/span&gt;'simple-counter'&lt;span&gt;, {
  template: &lt;/span&gt;'&amp;lt;button v-on:click=&quot;counter += 1&quot;&amp;gt;{{ counter }}&amp;lt;/button&amp;gt;'&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; data 是一个函数，因此 Vue 不会警告，&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 但是我们为每一个组件返回了同一个对象引用&lt;/span&gt;
  data: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; data
  }
})
&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;'#example-2'&lt;span&gt;
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;组件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;vm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义组件的数据&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; data &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
            };
            Vue.component(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;me-counter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, {
                template: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;button type='button' @click='counter+=1'&amp;gt;{{counter}}&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
                }
            });

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#vm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rose&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180102143302424-1035560791.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由于这三个组件共享了同一个 &lt;code&gt;data&lt;/code&gt; ， 因此增加一个 counter 会影响所有组件！我们可以通过为每个组件返回新的 data 对象来解决这个问题：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
data: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
    counter: &lt;/span&gt;0&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在每个 counter 都有它自己内部的状态了&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;组件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;vm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            Vue.component(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;me-counter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, {
                template: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;button type='button' @click='counter+=1'&amp;gt;{{counter}}&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
                    };
                }
            });

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#vm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rose&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180102143407862-2021933553.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;构成组件&quot;&gt;2.2.5、构成组件&lt;/h3&gt;
&lt;p&gt;组件意味着协同工作，通常父子组件会是这样的关系：组件 A 在它的模版中使用了组件 B 。它们之间必然需要相互通信：父组件要给子组件传递数据，子组件需要将它内部发生的事情告知给父组件。然而，在一个良好定义的接口中尽可能将父子组件解耦是很重要的。这保证了每个组件可以在相对隔离的环境中书写和理解，也大幅提高了组件的可维护性和可重用性。&lt;/p&gt;
&lt;p&gt;在 Vue.js 中，父子组件的关系可以总结为 props down, events up 。父组件通过 props 向下传递数据给子组件，子组件通过 events 给父组件发送消息。看看它们是怎么工作的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;img src=&quot;http://cn.vuejs.org/images/props-events.png&quot; alt=&quot;props down, events up&quot; width=&quot;468&quot; height=&quot;383&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;Props&quot;&gt;2.3、Props&lt;/h2&gt;
&lt;h3 id=&quot;使用Props传递数据&quot;&gt;2.3.1、使用Props传递数据&lt;/h3&gt;
&lt;p&gt;组件实例的作用域是孤立的。这意味着不能并且不应该在子组件的模板内直接引用父组件的数据。可以使用 props 把数据传给子组件。&lt;/p&gt;
&lt;p&gt;prop 是父组件用来传递数据的一个自定义属性。子组件需要显式地用 &lt;a href=&quot;http://cn.vuejs.org/v2/api/#props&quot;&gt;&lt;code&gt;props&lt;/code&gt; 选项&lt;/a&gt; 声明 “prop”：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Vue.component('child'&lt;span&gt;, {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 声明 props&lt;/span&gt;
  props: ['message'&lt;span&gt;],
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 就像 data 一样，prop 可以用在模板内&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 同样也可以在 vm 实例中像 “this.message” 这样使用&lt;/span&gt;
  template: '&amp;lt;span&amp;gt;{{ message }}&amp;lt;/span&amp;gt;'&lt;span&gt;
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后向它传入一个普通字符串：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;child &lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;=&quot;hello!&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;child&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;hello!&lt;/p&gt;
&lt;h3 id=&quot;camelCase-vs-kebab-case&quot;&gt;2.3.2、camelCase vs. kebab-case&lt;/h3&gt;
&lt;p&gt;HTML 特性不区分大小写。当使用非字符串模版时，prop的名字形式会从 camelCase 转为 kebab-case（短横线隔开）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Vue.component('child'&lt;span&gt;, {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; camelCase in JavaScript&lt;/span&gt;
  props: ['myMessage'&lt;span&gt;],
  template: &lt;/span&gt;'&amp;lt;span&amp;gt;{{ myMessage }}&amp;lt;/span&amp;gt;'&lt;span&gt;
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; kebab-case in HTML &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;child &lt;/span&gt;&lt;span&gt;my-message&lt;/span&gt;&lt;span&gt;=&quot;hello!&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;child&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再次说明，如果你使用字符串模版，不用在意这些限制。&lt;/p&gt;
&lt;h3 id=&quot;动态-Props&quot;&gt;2.3.3、动态 Props&lt;/h3&gt;
&lt;p&gt;类似于用 &lt;code&gt;v-bind&lt;/code&gt; 绑定 HTML 特性到一个表达式，也可以用 &lt;code&gt;v-bind&lt;/code&gt; 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;parentMsg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;child &lt;/span&gt;&lt;span&gt;v-bind:my-message&lt;/span&gt;&lt;span&gt;=&quot;parentMsg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;child&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 &lt;code&gt;v-bind&lt;/code&gt; 的缩写语法通常更简单：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;child &lt;/span&gt;&lt;span&gt;:my-message&lt;/span&gt;&lt;span&gt;=&quot;parentMsg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;child&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;demo&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;组件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;vm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-button &lt;/span&gt;&lt;span&gt;:text-Msg&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;template1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{textMsg}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义全局的Vue组件&lt;/span&gt;
&lt;span&gt;            Vue.component(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;me-button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, {
                props: [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;textMsg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
                template: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#template1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            });

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#vm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;父组件的name的值&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;demo&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180102152439003-1284180305.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;h3 id=&quot;字面量语法-vs-动态语法&quot;&gt;2.3.4、字面量语法 vs 动态语法&lt;/h3&gt;
&lt;p&gt;初学者常犯的一个错误是使用字面量语法传递数值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 传递了一个字符串&quot;1&quot; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;comp &lt;/span&gt;&lt;span&gt;some-prop&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;comp&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为它是一个字面 prop ，它的值以字符串 &lt;code&gt;&quot;1&quot;&lt;/code&gt; 而不是以实际的数字传下去。如果想传递一个实际的 JavaScript 数字，需要使用 &lt;code&gt;v-bind&lt;/code&gt; ，从而让它的值被当作 JavaScript 表达式计算：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 传递实际的数字 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;comp &lt;/span&gt;&lt;span&gt;v-bind:some-prop&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;comp&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;单向数据流&quot;&gt;2.3.5、单向数据流&lt;/h3&gt;
&lt;p&gt;prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。&lt;/p&gt;
&lt;p&gt;另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。&lt;strong&gt;&lt;span&gt;这意味着你不应该在子组件内部改变 prop&lt;/span&gt;&lt;/strong&gt; 。如果你这么做了，Vue 会在控制台给出警告。&lt;/p&gt;
&lt;p&gt;通常有两种改变 prop 的情况：&lt;/p&gt;
&lt;ol readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;prop 作为初始值传入，子组件之后只是将它的初始值作为本地数据的初始值使用；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;prop 作为需要被转变的原始值传入。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;更确切的说这两种情况是：&lt;/p&gt;
&lt;ol readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;7.5&quot;&gt;
&lt;p&gt;定义一个局部 data 属性，并将 prop 的初始值作为局部数据的初始值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
props: ['initialCounter'&lt;span&gt;],
data: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; { counter: &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.initialCounter }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.定义一个 computed 属性，此属性从 prop 的值计算得出。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
props: ['size'&lt;span&gt;],
computed: {
  normalizedSize: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.size.trim().toLowerCase()
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它会影响父组件的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;Prop-验证&quot;&gt;2.3.6、Prop 验证&lt;/h3&gt;
&lt;p&gt;组件可以为 props 指定验证要求。如果未指定验证要求，Vue 会发出警告。当组件给其他人使用时这很有用。&lt;/p&gt;
&lt;p&gt;prop 是一个对象而不是字符串数组时，它包含验证要求：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
Vue.component('example'&lt;span&gt;, {
  props: {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 基础类型检测 （`null` 意思是任何类型都可以）&lt;/span&gt;
&lt;span&gt;    propA: Number,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 多种类型&lt;/span&gt;
&lt;span&gt;    propB: [String, Number],
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 必传且是字符串&lt;/span&gt;
&lt;span&gt;    propC: {
      type: String,
      required: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数字，有默认值&lt;/span&gt;
&lt;span&gt;    propD: {
      type: Number,
      &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;: 100&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数组／对象的默认值应当由一个工厂函数返回&lt;/span&gt;
&lt;span&gt;    propE: {
      type: Object,
      &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; { message: 'hello'&lt;span&gt; }
      }
    },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自定义验证函数&lt;/span&gt;
&lt;span&gt;    propF: {
      validator: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (value) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; value &amp;gt; 10&lt;span&gt;
      }
    }
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt; 可以是下面原生构造器：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Function&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;type&lt;/code&gt; 也可以是一个自定义构造器，使用 &lt;code&gt;instanceof&lt;/code&gt; 检测。&lt;/p&gt;
&lt;p&gt;当 prop 验证失败了， Vue 将拒绝在子组件上设置此值，如果使用的是开发版本会抛出一条警告。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;组件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;vm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-component1 &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;喜马拉雅&quot;&lt;/span&gt;&lt;span&gt; :size&lt;/span&gt;&lt;span&gt;=&quot;8848&quot;&lt;/span&gt;&lt;span&gt; :is-boy&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; :address&lt;/span&gt;&lt;span&gt;=&quot;'中国西藏'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-component1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/x-template&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;template1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;姓名：{{name}} &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; 身高：{{size}} &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; 是否是男生：{{isBoy}} &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; 位置：{{address}} &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; 重量：{{weight.ton}}亿吨&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;div&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义全局的Vue组件&lt;/span&gt;
&lt;span&gt;            Vue.component(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;me-component1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{
                template:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#template1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                props:{
                    name:{  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;属性名&lt;/span&gt;
&lt;span&gt;                        type:String,  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;类型&lt;/span&gt;
&lt;span&gt;                        required:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;必填&lt;/span&gt;
&lt;span&gt;                    },
                    size:Number,  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;类型必须是数字&lt;/span&gt;
&lt;span&gt;                    isBoy:Boolean,  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;类型必须是布尔&lt;/span&gt;
&lt;span&gt;                    age:[String,Number],  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;多种类型&lt;/span&gt;
&lt;span&gt;                    address:{
                        type:String,  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;类型&lt;/span&gt;
                        &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;中国&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认值&lt;/span&gt;
&lt;span&gt;                        validator:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(value){  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证&lt;/span&gt;
                            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value.indexOf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;中国&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&amp;gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;地址中必须包含中国&lt;/span&gt;
&lt;span&gt;                        }
                    },
                    weight:{
                        type:Object,  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对象类型&lt;/span&gt;
                        &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用函数返回对象的默认值&lt;/span&gt;
                            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {ton:&lt;/span&gt;&lt;span&gt;99988&lt;/span&gt;&lt;span&gt;};
                        }
                    }
                }
            });
            
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#vm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rose&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180103091512424-1008761726.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;自定义事件&quot;&gt;2.4、自定义事件&lt;/h2&gt;
&lt;p&gt;我们知道，父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，应该怎样做？那就是自定义事件！&lt;/p&gt;
&lt;h3 id=&quot;使用-v-on-绑定自定义事件&quot;&gt;2.4.1、使用 &lt;code&gt;v-on&lt;/code&gt; 绑定自定义事件&lt;/h3&gt;
&lt;p&gt;每个 Vue 实例都实现了&lt;a href=&quot;http://cn.vuejs.org/v2/api/#Instance-Methods-Events&quot;&gt;事件接口(Events interface)&lt;/a&gt;，即：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用 &lt;code&gt;$on(eventName)&lt;/code&gt; 监听事件&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;$emit(eventName)&lt;/code&gt; 触发事件&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Vue的事件系统分离自浏览器的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;EventTarget API&lt;/a&gt;。尽管它们的运行类似，但是&lt;code&gt;$on&lt;/code&gt; 和 &lt;code&gt;$emit&lt;/code&gt; 不是&lt;code&gt;addEventListener&lt;/code&gt; 和 &lt;code&gt;dispatchEvent&lt;/code&gt; 的别名。&lt;/p&gt;
&lt;p&gt;另外，父组件可以在使用子组件的地方直接用 &lt;code&gt;v-on&lt;/code&gt; 来监听子组件触发的事件。&lt;/p&gt;
&lt;p&gt;下面是一个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;counter-event-example&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ total }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button-counter &lt;/span&gt;&lt;span&gt;v-on:increment&lt;/span&gt;&lt;span&gt;=&quot;incrementTotal&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button-counter &lt;/span&gt;&lt;span&gt;v-on:increment&lt;/span&gt;&lt;span&gt;=&quot;incrementTotal&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
Vue.component('button-counter'&lt;span&gt;, {
  template: &lt;/span&gt;'&amp;lt;button v-on:click=&quot;increment&quot;&amp;gt;{{ counter }}&amp;lt;/button&amp;gt;'&lt;span&gt;,
  data: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
      counter: &lt;/span&gt;0&lt;span&gt;
    }
  },
  methods: {
    increment: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.counter += 1
      &lt;span&gt;this&lt;/span&gt;.$emit('increment'&lt;span&gt;)
    }
  },
})
&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;'#counter-event-example'&lt;span&gt;,
  data: {
    total: &lt;/span&gt;0&lt;span&gt;
  },
  methods: {
    incrementTotal: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.total += 1&lt;span&gt;
    }
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在本例中，子组件已经和它外部完全解耦了。它所做的只是触发一个父组件关心的内部事件。&lt;/p&gt;
&lt;h4 id=&quot;给组件绑定原生事件&quot;&gt;给组件绑定原生事件&lt;/h4&gt;
&lt;p&gt;有时候，你可能想在某个组件的根元素上监听一个原生事件。可以使用 &lt;code&gt;.native&lt;/code&gt; 修饰&lt;code&gt;v-on&lt;/code&gt; 。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component &lt;/span&gt;&lt;span&gt;v-on:click.native&lt;/span&gt;&lt;span&gt;=&quot;doTheThing&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;组件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;vm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{name}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;总数：{{total}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-tax &lt;/span&gt;&lt;span&gt;@tax&lt;/span&gt;&lt;span&gt;=&quot;updateTotal&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;小国A&quot;&lt;/span&gt;&lt;span&gt; :unit&lt;/span&gt;&lt;span&gt;=&quot;unit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-tax&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-tax &lt;/span&gt;&lt;span&gt;@tax&lt;/span&gt;&lt;span&gt;=&quot;updateTotal&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;小国B&quot;&lt;/span&gt;&lt;span&gt; :unit&lt;/span&gt;&lt;span&gt;=&quot;unit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-tax&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-tax &lt;/span&gt;&lt;span&gt;@tax&lt;/span&gt;&lt;span&gt;=&quot;updateTotal&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;小国C&quot;&lt;/span&gt;&lt;span&gt; :unit&lt;/span&gt;&lt;span&gt;=&quot;unit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-tax&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-tax &lt;/span&gt;&lt;span&gt;@tax&lt;/span&gt;&lt;span&gt;=&quot;updateTotal&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;小国D&quot;&lt;/span&gt;&lt;span&gt; :unit&lt;/span&gt;&lt;span&gt;=&quot;unit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-tax&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-tax &lt;/span&gt;&lt;span&gt;@tax&lt;/span&gt;&lt;span&gt;=&quot;updateTotal&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;小国E&quot;&lt;/span&gt;&lt;span&gt; :unit&lt;/span&gt;&lt;span&gt;=&quot;unit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-tax&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{msg}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义全局的Vue组件&lt;/span&gt;
&lt;span&gt;            Vue.component(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;me-tax&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, {
                template: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;button @click='upTax'&amp;gt;{{money}}&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
                    }
                },
                props: [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;unit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
                methods: {
                    upTax: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;this.unit=-5;&lt;/span&gt;
                        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.money &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.unit;
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通知父组件或实例自己的状态变化，触发tax事件&lt;/span&gt;
                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;this.$emit(&quot;tax&quot;, this.money);&lt;/span&gt;
                        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$emit(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tax&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{name:&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name,money:&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.money});
                    }
                }
            });

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#vm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;王国税收&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    total: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
                    unit:&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;,  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次交税的量&lt;/span&gt;
&lt;span&gt;                    msg:&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
                },
                methods: {
                    updateTotal: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(obj) {
                        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.total &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.unit;
                        console.log(JSON.stringify(obj));
                        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.msg&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;obj.name&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;交税成功，已交税：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;obj.money;
                    }
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180103101616424-1740512077.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;sync-修饰符&quot;&gt;&lt;code&gt;2.4.2、sync&lt;/code&gt; 修饰符（2.3+）&lt;/h3&gt;
&lt;p&gt;在一些情况下，我们可能会需要对一个 prop 进行“双向绑定”。事实上，这正是 Vue 1.x 中的 &lt;code&gt;.sync&lt;/code&gt; 修饰符所提供的功能。当一个子组件改变了一个带 &lt;code&gt;.sync&lt;/code&gt; 的 prop 的值时，这个变化也会同步到父组件中所绑定的值。这很方便，但也会导致问题，因为它破坏了单向数据流。由于子组件改变 prop 的代码和普通的状态改动代码毫无区别，当光看子组件的代码时，你完全不知道它何时悄悄地改变了父组件的状态。这在 debug 复杂结构的应用时会带来很高的维护成本。&lt;/p&gt;
&lt;p&gt;上面所说的正是我们在 2.0 中移除 &lt;code&gt;.sync&lt;/code&gt; 的理由。但是在 2.0 发布之后的实际应用中，我们发现 &lt;code&gt;.sync&lt;/code&gt; 还是有其适用之处，比如在开发可复用的组件库时。我们需要做的只是让子组件改变父组件状态的代码更容易被区分。&lt;/p&gt;
&lt;p&gt;从 2.3.0 起我们重新引入了 &lt;code&gt;.sync&lt;/code&gt; 修饰符，但是这次它只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 &lt;code&gt;v-on&lt;/code&gt; 监听器。&lt;/p&gt;
&lt;p&gt;如下代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;comp &lt;/span&gt;&lt;span&gt;:foo.sync&lt;/span&gt;&lt;span&gt;=&quot;bar&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;comp&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会被扩展为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;comp &lt;/span&gt;&lt;span&gt;:foo&lt;/span&gt;&lt;span&gt;=&quot;bar&quot;&lt;/span&gt;&lt;span&gt; @update:foo&lt;/span&gt;&lt;span&gt;=&quot;val =&amp;gt; bar = val&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;comp&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当子组件需要更新 &lt;code&gt;foo&lt;/code&gt; 的值时，它需要显式地触发一个更新事件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.$emit('update:foo', newValue)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&amp;lt;div id=&quot;app&quot;&amp;gt;&lt;span&gt;
  &lt;/span&gt;&amp;lt;div&amp;gt;{{bar}}&amp;lt;/div&amp;gt;
  &amp;lt;my-comp :foo.sync=&quot;bar&quot;&amp;gt;&amp;lt;/my-comp&amp;gt;
  &amp;lt;!-- &amp;lt;my-comp :foo=&quot;bar&quot; @update:foo=&quot;val =&amp;gt; bar = val&quot;&amp;gt;&amp;lt;/my-comp&amp;gt; --&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;&lt;span&gt;
  Vue.component(&lt;/span&gt;'my-comp'&lt;span&gt;, {
    template: &lt;/span&gt;'&amp;lt;div @click=&quot;increment&quot;&amp;gt;点我+1&amp;lt;/div&amp;gt;'&lt;span&gt;,
    data: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; {copyFoo: &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.foo}
    },
    props: [&lt;/span&gt;'foo'&lt;span&gt;],
    methods: {
      increment: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$emit('update:foo', ++&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.copyFoo);
      }
    }
  });
  &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
    el: &lt;/span&gt;'#app'&lt;span&gt;,
    data: {bar: &lt;/span&gt;0&lt;span&gt;}
  });
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;组件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;vm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{bar}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-comp &lt;/span&gt;&lt;span&gt;:foo&lt;/span&gt;&lt;span&gt;=&quot;bar&quot;&lt;/span&gt;&lt;span&gt; @update:foo&lt;/span&gt;&lt;span&gt;=&quot;updatefoo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-comp&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-comp &lt;/span&gt;&lt;span&gt;:foo&lt;/span&gt;&lt;span&gt;=&quot;bar&quot;&lt;/span&gt;&lt;span&gt; @update:foo&lt;/span&gt;&lt;span&gt;=&quot;val=&amp;gt;bar=val&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-comp&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;me-comp &lt;/span&gt;&lt;span&gt;:foo.sync&lt;/span&gt;&lt;span&gt;=&quot;bar&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;me-comp&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义全局的Vue组件&lt;/span&gt;
&lt;span&gt;            Vue.component(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;me-comp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, {
                template: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;button @click='increment'&amp;gt;点击我修改父组件的bar的值+1 {{fooCopy}}&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                props: {
                    foo: Number
                },
                data: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
                        fooCopy: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.foo
                    }
                },
                methods: {
                    increment: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.fooCopy&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$emit(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;update:foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.fooCopy);
                    }
                }
            });

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#vm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    bar: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
                },
                methods:
                {
                    updatefoo:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(val){
                        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.bar&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;val;
                    }
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180103105358190-763912134.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：这种方式本质上还是父组件自己修改了自己的值，子组件并未直正修改父组件的值，只是触发了通知。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用自定义事件的表单输入组件&quot;&gt;2.4.2、使用自定义事件的表单输入组件&lt;/h3&gt;
&lt;p&gt;自定义事件也可以用来创建自定义的表单输入组件，使用 &lt;code&gt;v-model&lt;/code&gt; 来进行数据双向绑定。牢记：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;something&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;仅仅是一个语法糖：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-bind:value&lt;/span&gt;&lt;span&gt;=&quot;something&quot;&lt;/span&gt;&lt;span&gt; v-on:input&lt;/span&gt;&lt;span&gt;=&quot;something = $event.target.value&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以在组件中使用时，它相当于下面的简写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-bind:value&lt;/span&gt;&lt;span&gt;=&quot;something&quot;&lt;/span&gt;&lt;span&gt; v-on:input&lt;/span&gt;&lt;span&gt;=&quot;something = arguments[0]&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以要让组件的 &lt;code&gt;v-model&lt;/code&gt; 生效，它必须：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;接受一个 &lt;code&gt;value&lt;/code&gt; 属性&lt;/li&gt;
&lt;li&gt;在有新的 value 时触发 &lt;code&gt;input&lt;/code&gt; 事件&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;一个非常简单的货币输入：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;currency-input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;price&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;currency-input&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
Vue.component('currency-input'&lt;span&gt;, {
  template: &lt;/span&gt;'&lt;span&gt;\
    &amp;lt;span&amp;gt;\
      $\
      &amp;lt;input\
        ref=&quot;input&quot;\
        v-bind:value=&quot;value&quot;\
        v-on:input=&quot;updateValue($event.target.value)&quot;\
      &amp;gt;\
    &amp;lt;/span&amp;gt;\
  &lt;/span&gt;'&lt;span&gt;,
  props: [&lt;/span&gt;'value'&lt;span&gt;],
  methods: {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Instead of updating the value directly, this&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; method is used to format and place constraints&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; on the input's value&lt;/span&gt;
    updateValue: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (value) {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; formattedValue =&lt;span&gt; value
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Remove whitespace on either side&lt;/span&gt;
&lt;span&gt;        .trim()
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Shorten to 2 decimal places&lt;/span&gt;
        .slice(0, value.indexOf('.') + 3&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If the value was not already normalized,&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; manually override it to conform&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt; (formattedValue !==&lt;span&gt; value) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$refs.input.value =&lt;span&gt; formattedValue
      }
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Emit the number value through the input event&lt;/span&gt;
      &lt;span&gt;this&lt;/span&gt;.$emit('input'&lt;span&gt;, Number(formattedValue))
    }
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The implementation above is pretty naive though. For example, users are allowed to enter multiple periods and even letters sometimes - yuck! So for those that want to see a non-trivial example, here’s a more robust currency filter:&lt;/p&gt;
&lt;p&gt;这个接口不仅仅可以用来连接组件内部的表单输入，也很容易集成你自己创造的输入类型。想象一下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;voice-recognizer v-model=&quot;question&quot;&amp;gt;&amp;lt;/voice-recognizer&amp;gt;
&amp;lt;webcam-gesture-reader v-model=&quot;gesture&quot;&amp;gt;&amp;lt;/webcam-gesture-reader&amp;gt;
&amp;lt;webcam-retinal-scanner v-model=&quot;retinalImage&quot;&amp;gt;&amp;lt;/webcam-retinal-scanner&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;非父子组件通信&quot;&gt;2.4.3、非父子组件通信&lt;/h3&gt;
&lt;p&gt;有时候非父子关系的组件也需要通信。在简单的场景下，使用一个空的 Vue 实例作为中央事件总线：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; bus = &lt;span&gt;new&lt;/span&gt; Vue()
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 触发组件 A 中的事件&lt;/span&gt;
bus.$emit('id-selected', 1)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在组件 B 创建的钩子中监听事件&lt;/span&gt;
bus.$on('id-selected', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (id) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在更多复杂的情况下，你应该考虑使用专门的 &lt;a href=&quot;http://cn.vuejs.org/v2/guide/state-management.html&quot;&gt;状态管理模式&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;使用-Slots-分发内容&quot;&gt;2.5、使用 Slots 分发内容&lt;/h2&gt;
&lt;p&gt;在使用组件时，常常要像这样组合它们：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;app-header&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;app-header&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;app-footer&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;app-footer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意两点：&lt;/p&gt;
&lt;ol readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;app&amp;gt;&lt;/code&gt; 组件不知道它的挂载点会有什么内容。挂载点的内容是由&lt;code&gt;&amp;lt;app&amp;gt;&lt;/code&gt;的父组件决定的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;app&amp;gt;&lt;/code&gt; 组件很可能有它自己的模版。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;为了让组件可以组合，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为 内容分发 (或 “transclusion” 如果你熟悉 Angular)。Vue.js 实现了一个内容分发 API ，参照了当前 &lt;a href=&quot;https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;Web组件规范草案&lt;/a&gt;，使用特殊的 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 元素作为原始内容的插槽。&lt;/p&gt;
&lt;h3 id=&quot;编译作用域&quot;&gt;2.5.1、编译作用域&lt;/h3&gt;
&lt;p&gt;在深入内容分发 API 之前，我们先明确内容的编译作用域。假定模板为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;child-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  {{ message }}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;child-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;message&lt;/code&gt; 应该绑定到父组件的数据，还是绑定到子组件的数据？答案是父组件。组件作用域简单地说是：&lt;/p&gt;
&lt;p&gt;父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。&lt;/p&gt;
&lt;p&gt;一个常见错误是试图在父组件模板内将一个指令绑定到子组件的属性/方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 无效 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;child-component &lt;/span&gt;&lt;span&gt;v-show&lt;/span&gt;&lt;span&gt;=&quot;someChildProperty&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;child-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;假定 &lt;code&gt;someChildProperty&lt;/code&gt; 是子组件的属性，上例不会如预期那样工作。父组件模板不应该知道子组件的状态。&lt;/p&gt;
&lt;p&gt;如果要绑定子组件内的指令到一个组件的根节点，应当在它的模板内这么做：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Vue.component('child-component'&lt;span&gt;, {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 有效，因为是在正确的作用域内&lt;/span&gt;
  template: '&amp;lt;div v-show=&quot;someChildProperty&quot;&amp;gt;Child&amp;lt;/div&amp;gt;'&lt;span&gt;,
  data: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
      someChildProperty: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    }
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类似地，分发内容是在父组件作用域内编译。&lt;/p&gt;
&lt;h3 id=&quot;单个-Slot&quot;&gt;2.5.2、单个 Slot&lt;/h3&gt;
&lt;p&gt;除非子组件模板包含至少一个 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 插口，否则父组件的内容将会被丢弃。当子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。&lt;/p&gt;
&lt;p&gt;最初在 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 标签中的任何内容都被视为备用内容。备用内容在子组件的作用域内编译，并且只有在宿主元素为空，且没有要插入的内容时才显示备用内容。&lt;/p&gt;
&lt;p&gt;假定 &lt;code&gt;my-component&lt;/code&gt; 组件有下面模板：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;I'm the child title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    如果没有分发内容则显示我。
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;父组件模版：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;I'm the parent title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;This is some original content&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;This is some more original content&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;渲染结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;I'm the parent title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;I'm the child title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;This is some original content&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;This is some more original content&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;具名Slots&quot;&gt;2.5.3、具名Slots&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 元素可以用一个特殊的属性 &lt;code&gt;name&lt;/code&gt; 来配置如何分发内容。多个 slot 可以有不同的名字。具名 slot 将匹配内容片段中有对应 &lt;code&gt;slot&lt;/code&gt; 特性的元素。&lt;/p&gt;
&lt;p&gt;仍然可以有一个匿名 slot ，它是默认 slot ，作为找不到匹配的内容片段的备用插槽。如果没有默认的 slot ，这些找不到匹配的内容片段将被抛弃。&lt;/p&gt;
&lt;p&gt;例如，假定我们有一个 &lt;code&gt;app-layout&lt;/code&gt; 组件，它的模板为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;header&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;slot &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;header&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;header&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;footer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;slot &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;footer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;父组件模版：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;app-layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1 &lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;=&quot;header&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Here might be a page title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;A paragraph for the main content.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;And another one.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;=&quot;footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Here's some contact info&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;app-layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;渲染结果为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;header&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Here might be a page title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;header&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;A paragraph for the main content.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;And another one.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;footer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Here's some contact info&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;footer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在组合组件时，内容分发 API 是非常有用的机制。&lt;/p&gt;
&lt;h2 id=&quot;动态组件&quot;&gt;2.6、动态组件&lt;/h2&gt;
&lt;p&gt;多个组件可以使用同一个挂载点，然后动态地在它们之间切换。使用保留的 &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt;元素，动态地绑定到它的 &lt;code&gt;is&lt;/code&gt; 特性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; vm = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;'#example'&lt;span&gt;,
  data: {
    currentView: &lt;/span&gt;'home'&lt;span&gt;
  },
  components: {
    home: { &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; ... &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; },
    posts: { &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; ... &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; },
    archive: { &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; ... &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; }
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;component &lt;/span&gt;&lt;span&gt;v-bind:is&lt;/span&gt;&lt;span&gt;=&quot;currentView&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 组件在 vm.currentview 变化时改变！ &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以直接绑定到组件对象上：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; Home =&lt;span&gt; {
  template: &lt;/span&gt;'&amp;lt;p&amp;gt;Welcome home!&amp;lt;/p&amp;gt;'&lt;span&gt;
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; vm = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;'#example'&lt;span&gt;,
  data: {
    currentView: Home
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;keep-alive&quot;&gt;&lt;code&gt;2.6.1、keep-alive&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 &lt;code&gt;keep-alive&lt;/code&gt; 指令参数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;keep-alive&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;component &lt;/span&gt;&lt;span&gt;:is&lt;/span&gt;&lt;span&gt;=&quot;currentView&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 非活动组件将被缓存！ &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;keep-alive&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在&lt;a href=&quot;http://cn.vuejs.org/v2/api/#keep-alive&quot;&gt;API 参考&lt;/a&gt;查看更多 &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; 的细节。&lt;/p&gt;
&lt;h2 id=&quot;杂项&quot;&gt;2.7、杂项&lt;/h2&gt;
&lt;h3 id=&quot;编写可复用组件&quot;&gt;2.7.1、编写可复用组件&lt;/h3&gt;
&lt;p&gt;在编写组件时，记住是否要复用组件有好处。一次性组件跟其它组件紧密耦合没关系，但是可复用组件应当定义一个清晰的公开接口。&lt;/p&gt;
&lt;p&gt;Vue 组件的 API 来自三部分 - props, events 和 slots ：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Props 允许外部环境传递数据给组件&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Events 允许组件触发外部环境的副作用&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Slots 允许外部环境将额外的内容组合在组件中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;使用 &lt;code&gt;v-bind&lt;/code&gt; 和 &lt;code&gt;v-on&lt;/code&gt; 的简写语法，模板的缩进清楚且简洁：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component
  &lt;/span&gt;&lt;span&gt;:foo&lt;/span&gt;&lt;span&gt;=&quot;baz&quot;&lt;/span&gt;&lt;span&gt;
  :bar&lt;/span&gt;&lt;span&gt;=&quot;qux&quot;&lt;/span&gt;&lt;span&gt;
  @event-a&lt;/span&gt;&lt;span&gt;=&quot;doThis&quot;&lt;/span&gt;&lt;span&gt;
  @event-b&lt;/span&gt;&lt;span&gt;=&quot;doThat&quot;&lt;/span&gt;
&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;=&quot;icon&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;...&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;=&quot;main-text&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hello!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;子组件索引&quot;&gt;2.7.2、子组件索引&lt;/h3&gt;
&lt;p&gt;尽管有 props 和 events ，但是有时仍然需要在 JavaScript 中直接访问子组件。为此可以使用 &lt;code&gt;ref&lt;/code&gt; 为子组件指定一个索引 ID 。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;user-profile &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;profile&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;user-profile&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; parent = &lt;span&gt;new&lt;/span&gt; Vue({ el: '#parent'&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 访问子组件&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; child = parent.$refs.profile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当 &lt;code&gt;ref&lt;/code&gt; 和 &lt;code&gt;v-for&lt;/code&gt; 一起使用时， ref 是一个数组或对象，包含相应的子组件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$refs&lt;/code&gt; 只在组件渲染完成后才填充，并且它是非响应式的。它仅仅作为一个直接访问子组件的应急方案——应当避免在模版或计算属性中使用 &lt;code&gt;$refs&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&quot;异步组件&quot;&gt;2.7.3、异步组件&lt;/h3&gt;
&lt;p&gt;在大型应用中，我们可能需要将应用拆分为多个小模块，按需从服务器下载。为了让事情更简单， Vue.js 允许将组件定义为一个工厂函数，动态地解析组件的定义。Vue.js 只在组件需要渲染时触发工厂函数，并且把结果缓存起来，用于后面的再次渲染。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Vue.component('async-example', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (resolve, reject) {
  setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    resolve({
      template: &lt;/span&gt;'&amp;lt;div&amp;gt;I am async!&amp;lt;/div&amp;gt;'&lt;span&gt;
    })
  }, &lt;/span&gt;1000&lt;span&gt;)
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;工厂函数接收一个 &lt;code&gt;resolve&lt;/code&gt; 回调，在收到从服务器下载的组件定义时调用。也可以调用&lt;code&gt;reject(reason)&lt;/code&gt; 指示加载失败。这里 &lt;code&gt;setTimeout&lt;/code&gt; 只是为了演示。怎么获取组件完全由你决定。推荐配合使用 ：&lt;a href=&quot;http://webpack.github.io/docs/code-splitting.html&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;Webpack 的代码分割功能&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Vue.component('async-webpack-example', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (resolve) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这个特殊的 require 语法告诉 webpack&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自动将编译后的代码分割成不同的块，&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这些块将通过 Ajax 请求自动下载。&lt;/span&gt;
  require(['./my-async-component'&lt;span&gt;], resolve)
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你可以使用 Webpack 2 + ES2015 的语法返回一个 &lt;code&gt;Promise&lt;/code&gt; resolve 函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Vue.component(
  &lt;/span&gt;'async-webpack-example'&lt;span&gt;,
  () &lt;/span&gt;=&amp;gt; System.import('./my-async-component'&lt;span&gt;)
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你是 Browserify 用户,可能就无法使用异步组件了,它的作者已经&lt;a href=&quot;https://github.com/substack/node-browserify/issues/58#issuecomment-21978224&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;表明&lt;/a&gt;Browserify 是不支持异步加载的。如果这个功能对你很重要，请使用 Webpack。&lt;/p&gt;
&lt;h3 id=&quot;组件命名约定&quot;&gt;2.7.4、组件命名约定&lt;/h3&gt;
&lt;p&gt;当注册组件（或者 props）时，可以使用 kebab-case ，camelCase ，或 TitleCase 。Vue 不关心这个。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在组件定义中&lt;/span&gt;
&lt;span&gt;components: {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用 camelCase 形式注册&lt;/span&gt;
  'kebab-cased-component': { &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; ... &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; },
  &lt;/span&gt;'camelCasedComponent': { &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; ... &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; },
  &lt;/span&gt;'TitleCasedComponent': { &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; ... &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 HTML 模版中，请使用 kebab-case 形式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 在HTML模版中始终使用 kebab-case &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;kebab-cased-component&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;kebab-cased-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;camel-cased-component&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;camel-cased-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title-cased-component&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title-cased-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当使用字符串模式时，可以不受 HTML 的 case-insensitive 限制。这意味实际上在模版中，你可以使用 camelCase 、 PascalCase 或者 kebab-case 来引用你的组件和 prop：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 在字符串模版中可以用任何你喜欢的方式! &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;myComponent&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;myComponent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MyComponent&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MyComponent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果组件未经 &lt;code&gt;slot&lt;/code&gt; 元素传递内容，你甚至可以在组件名后使用 &lt;code&gt;/&lt;/code&gt; 使其自闭合：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然，这只在字符串模版中有效。因为自闭的自定义元素是无效的 HTML ，浏览器原生的解析器也无法识别它。&lt;/p&gt;
&lt;h3 id=&quot;递归组件&quot;&gt;2.7.5、递归组件&lt;/h3&gt;
&lt;p&gt;组件在它的模板内可以递归地调用自己，不过，只有当它有 name 选项时才可以：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
name: 'unique-name-of-my-component'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当你利用&lt;code&gt;Vue.component&lt;/code&gt;全局注册了一个组件, 全局的ID作为组件的 &lt;code&gt;name&lt;/code&gt; 选项，被自动设置.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Vue.component('unique-name-of-my-component'&lt;span&gt;, {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你不谨慎, 递归组件可能导致死循环:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
name: 'stack-overflow'&lt;span&gt;,
template: &lt;/span&gt;'&amp;lt;div&amp;gt;&amp;lt;stack-overflow&amp;gt;&amp;lt;/stack-overflow&amp;gt;&amp;lt;/div&amp;gt;'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面组件会导致一个错误 “max stack size exceeded” ，所以要确保递归调用有终止条件 (比如递归调用时使用 &lt;code&gt;v-if&lt;/code&gt; 并让他最终返回 &lt;code&gt;false&lt;/code&gt; )。&lt;/p&gt;
&lt;h3 id=&quot;内联模版&quot;&gt;2.7.6、内联模版&lt;/h3&gt;
&lt;p&gt;如果子组件有 inline-template 特性，组件将把它的内容当作它的模板，而不是把它当作分发内容。这让模板更灵活。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component &lt;/span&gt;&lt;span&gt;inline-template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;These are compiled as the component's own template.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Not parent's transclusion content.&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是 inline-template 让模板的作用域难以理解。最佳实践是使用 template 选项在组件内定义模板或者在 &lt;code&gt;.vue&lt;/code&gt; 文件中使用 &lt;code&gt;template&lt;/code&gt; 元素。&lt;/p&gt;
&lt;h3 id=&quot;X-Templates&quot;&gt;2.7.7、X-Templates&lt;/h3&gt;
&lt;p&gt;另一种定义模版的方式是在 JavaScript 标签里使用 &lt;code&gt;text/x-template&lt;/code&gt; 类型，并且指定一个id。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/x-template&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;hello-world-template&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Hello hello hello&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;p&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Vue.component('hello-world'&lt;span&gt;, {
  template: &lt;/span&gt;'#hello-world-template'&lt;span&gt;
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这在有很多模版或者小的应用中有用，否则应该避免使用，因为它将模版和组件的其他定义隔离了。&lt;/p&gt;
&lt;h3 id=&quot;使用-v-once-的低级静态组件-Cheap-Static-Component&quot;&gt;2.7.8、使用 &lt;code&gt;v-once&lt;/code&gt; 的低级静态组件(Cheap Static Component)&lt;/h3&gt;
&lt;p&gt;尽管在 Vue 中渲染 HTML 很快，不过当组件中包含大量静态内容时，可以考虑使用&lt;code&gt;v-once&lt;/code&gt; 将渲染结果缓存起来，就像这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Vue.component('terms-of-service'&lt;span&gt;, {
  template: &lt;/span&gt;'&lt;span&gt;\
    &amp;lt;div v-once&amp;gt;\
      &amp;lt;h1&amp;gt;Terms of Service&amp;lt;/h1&amp;gt;\
      ... a lot of static content ...\
    &amp;lt;/div&amp;gt;\
  &lt;/span&gt;'&lt;span&gt;
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;官方帮助：&lt;a href=&quot;http://vuejs.org/guide/components.html&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;http://vuejs.org/guide/components.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.1、请完成课程中的所有示例。&lt;/p&gt;
&lt;p&gt;3.2、请定义一个vue分页组件，可以实现客户端分页功能，接收参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180103110507299-1799453712.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180103110521565-887271076.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180103110557596-353162854.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180103110610846-122792669.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e986fd19-69b4-4930-bd58-d64eb29a35f7')&quot; readability=&quot;41&quot;&gt;&lt;img id=&quot;code_img_closed_e986fd19-69b4-4930-bd58-d64eb29a35f7&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e986fd19-69b4-4930-bd58-d64eb29a35f7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e986fd19-69b4-4930-bd58-d64eb29a35f7',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e986fd19-69b4-4930-bd58-d64eb29a35f7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;vue分页组件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    .page &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      font-weight&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 900&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #888&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px auto 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #f2f2f2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

    .pagelist &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      line-height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

    .pagelist span &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 14px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

    .pagelist .jump &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ccc&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 5px 8px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      -webkit-border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 4px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      -moz-border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 4px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 4px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      cursor&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; pointer&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      margin-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 5px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

    .pagelist .bgprimary &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      cursor&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; default&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #337ab7&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #337ab7&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

    .jumpinp input &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 55px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 26px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 13px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ccc&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      -webkit-border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 4px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      -moz-border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 4px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 4px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

    .ellipsis &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0px 8px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

    .jumppoint &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      margin-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

    .pagelist .gobtn &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 12px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

    .bgprimary &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      cursor&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; default&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #337ab7&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      border-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #337ab7&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    .pagelist .jump.disabled&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      pointer-events&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
      background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;page&quot;&lt;/span&gt;&lt;span&gt;  v-show&lt;/span&gt;&lt;span&gt;=&quot;show&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;pagelist&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;jump&quot;&lt;/span&gt;&lt;span&gt; :class&lt;/span&gt;&lt;span&gt;=&quot;{disabled:pstart}&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;{current_page--}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;上一页&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-show&lt;/span&gt;&lt;span&gt;=&quot;current_page&amp;gt;5&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;jump&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;jumpPage(1)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;ellipsis&quot;&lt;/span&gt;&lt;span&gt;  v-show&lt;/span&gt;&lt;span&gt;=&quot;efont&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;...&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;jump&quot;&lt;/span&gt;&lt;span&gt; v-for&lt;/span&gt;&lt;span&gt;=&quot;num in indexs&quot;&lt;/span&gt;&lt;span&gt; :class&lt;/span&gt;&lt;span&gt;=&quot;{bgprimary:current_page==num}&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;jumpPage(num)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{num}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;ellipsis&quot;&lt;/span&gt;&lt;span&gt;  v-show&lt;/span&gt;&lt;span&gt;=&quot;ebehind&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;...&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;:class&lt;/span&gt;&lt;span&gt;=&quot;{disabled:pend}&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;jump&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;{current_page++}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;下一页&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-show&lt;/span&gt;&lt;span&gt;=&quot;current_page&amp;lt;pages-4&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;jump&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;jumpPage(pages)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{pages}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;jumppoint&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;跳转到：&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;jumpinp&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;changePage&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;jump gobtn&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;jumpPage(changePage)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;GO&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;http://www.jq22.com/jquery/vue.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; newlist &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
      el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
      data: {
        current_page: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前页&lt;/span&gt;
&lt;span&gt;        pages: &lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;总页数&lt;/span&gt;
&lt;span&gt;        changePage:&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;跳转页&lt;/span&gt;
&lt;span&gt;        nowIndex:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
      },
      computed:{
         show:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
             &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pages &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pages &lt;/span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
         },
         pstart: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
           &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.current_page &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
         },
         pend: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
           &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.current_page &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pages;
         },
         efont: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
           &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pages &lt;/span&gt;&lt;span&gt;&amp;lt;=&lt;/span&gt; &lt;span&gt;7&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
           &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.current_page &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;
         },
         ebehind: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
           &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pages &lt;/span&gt;&lt;span&gt;&amp;lt;=&lt;/span&gt; &lt;span&gt;7&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
           &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; nowAy &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.indexs;
           &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nowAy[nowAy.length &lt;/span&gt;&lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;] &lt;/span&gt;&lt;span&gt;!=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pages;
         },
         indexs: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {

           &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; left &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
             right &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pages,
             ar &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [];
           &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pages &lt;/span&gt;&lt;span&gt;&amp;gt;=&lt;/span&gt; &lt;span&gt;7&lt;/span&gt;&lt;span&gt;) {
             &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.current_page &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;5&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.current_page &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pages &lt;/span&gt;&lt;span&gt;-&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;) {
               left &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; Number(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.current_page) &lt;/span&gt;&lt;span&gt;-&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
               right &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; Number(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.current_page) &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
             } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
               &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.current_page &lt;/span&gt;&lt;span&gt;&amp;lt;=&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;) {
                 left &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                 right &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;7&lt;/span&gt;&lt;span&gt;;
               } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                 right &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pages;

                 left &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pages &lt;/span&gt;&lt;span&gt;-&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;&lt;span&gt;;
               }
             }
           }
           &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (left &lt;/span&gt;&lt;span&gt;&amp;lt;=&lt;/span&gt;&lt;span&gt; right) {
             ar.push(left);
             left&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;;
           }
           &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ar;
         },
       },
      methods: {
        jumpPage: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(id) {
          &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.current_page &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; id;
        },
      },

    })
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;3.3、请完使用vue2实现图书列表与详细展示功能，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180103111002815-1466257155.jpg&quot; alt=&quot;&quot; width=&quot;468&quot; height=&quot;832&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201801/63651-20180103110907112-1730573545.jpg&quot; alt=&quot;&quot; width=&quot;473&quot; height=&quot;841&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://search.m.dangdang.com/search.php?keyword=Vue&amp;amp;sid=82fb0e8bcd6a2b6af200715941a9ad93&quot; target=&quot;_blank&quot;&gt;参考地址&lt;/a&gt;&lt;/p&gt;


</description>
<pubDate>Wed, 03 Jan 2018 03:14:00 +0000</pubDate>
<dc:creator>张果</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/best/p/8182847.html</dc:identifier>
</item>
<item>
<title>浅析Node.js的Event Loop - 动机在未来</title>
<link>http://www.cnblogs.com/yzfdjzwl/p/8182749.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yzfdjzwl/p/8182749.html</guid>
<description>&lt;h2 id=&quot;引出问题&quot;&gt;引出问题&lt;/h2&gt;
&lt;p&gt;首先看两段代码，下面两段代码的执行结果是什么？为什么？&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// event-loop-1.js&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'setTimeout'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;setImmediate&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'setImmediate'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;co&quot;&gt;// event-loop-2.js&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'fs'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;readFile&lt;/span&gt;(__filename&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'setTimeout'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;setImmediate&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'setImmediate'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也许你心里已经有了答案，但是就是不太确定，其实这里面涉及到的知识点就是今天要说的&lt;code&gt;Event Loop&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;node.js的基本架构&quot;&gt;Node.js的基本架构&lt;/h2&gt;
&lt;p&gt;在讲&lt;code&gt;Event Loop&lt;/code&gt;之前，首先介绍一下Node.js的基本架构。提到Node.js的时候，我们耳熟能详的是: Node.js是一个基于ChromeV8引擎的JavaScript运行时。Node.js 使用高效、轻量级的事件驱动、非阻塞 I/O 模型。那么这句话真正想要表达的是什么呢？请看下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p0.meituan.net/codeman/e1324e3f1d7a6dbca59abfb7abeefc1b69981.jpg&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Node standard library: Node的标准库，也就是我们平时所用的&lt;code&gt;fs, path, http, net, stream&lt;/code&gt;等模块。&lt;/li&gt;
&lt;li&gt;Node bindlings: 是C++与JavaScript沟通的桥梁, 封装了V8和Libuv的细节，向上层提供API。&lt;/li&gt;
&lt;li&gt;最后一层是支撑Node的关键。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;使用&lt;code&gt;tree -L 1&lt;/code&gt;可以看到Node.js源码的目录如下:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;➜  node git:(master) tree -L 1
.
├── AUTHORS
├── BSDmakefile
├── BUILDING.md
├── CHANGELOG.md
├── CODE_OF_CONDUCT.md
├── COLLABORATOR_GUIDE.md
├── CONTRIBUTING.md
├── CPP_STYLE_GUIDE.md
├── GOVERNANCE.md
├── LICENSE
├── Makefile
├── README.md
├── android-configure
├── benchmark
├── common.gypi
├── configure
├── deps
├── doc
├── lib
├── node.gyp
├── node.gypi
├── src
├── test
├── tools
└── vcbuild.bat&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而比较关键的几个目录是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;deps: 一些Node.js的依赖库，比如Libuv, V8等。&lt;/li&gt;
&lt;li&gt;src: 包含C++的源码，即Node bindings。&lt;/li&gt;
&lt;li&gt;lib: 包含JavaScript的源码，存放的是Node.js的核心模块，即&lt;code&gt;fs, path, http, net, stream&lt;/code&gt;等模块。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;libuv&quot;&gt;Libuv&lt;/h2&gt;
&lt;p&gt;我们知道Node.js是一个Runtime, 它拥有异步，非阻塞的模型，那么它是如何实现非阻塞的呢？答案是：Libuv。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p0.meituan.net/codeman/4b006aaf3e6f0d6f2143924680c046a541942.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;什么是Libuv？Libuv是一个高性能的，事件驱动的I/O库，并且提供了 &lt;strong&gt;&lt;em&gt;跨平台&lt;/em&gt;&lt;/strong&gt;（如windows, *nix）的API。简单的来说，Node.js的异步、非阻塞I/O，底层实际上是Libuv实现的。&lt;/p&gt;
&lt;p&gt;具体更多关于&lt;a href=&quot;https://github.com/libuv/libuv&quot;&gt;Libuv&lt;/a&gt;的知识这里不再阐述，感兴趣的同学下来可以去多了解一下。&lt;/p&gt;
&lt;h2 id=&quot;event-loop&quot;&gt;Event Loop&lt;/h2&gt;
&lt;p&gt;可以参考Node.js官方文档上的这样一篇文档: &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/&quot;&gt;The Node.js Event Loop, Timers, and process.nextTick()&lt;/a&gt;, 我们可以知道:&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;When Node.js starts, it initializes the event loop, processes the provided input script (or drops into the REPL, which is not covered in this document) which may make async API calls, schedule timers, or call process.nextTick(), then begins processing the event loop.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即在Node.js启动的时候，它会初始化&lt;code&gt;Event Loop&lt;/code&gt;, 处理提供的输入脚本, 这可能会使异步API调用，调用timers，或者调用&lt;code&gt;process.nextTick&lt;/code&gt;, 然后开始处理事件循环。&lt;br/&gt;下图简单展示了事件循环的操作顺序:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;┌───────────────────────┐
┌─&amp;gt;│        timers         │
│  └──────────┬────────────┘
│  ┌──────────┴────────────┐
│  │     I/O callbacks     │
│  └──────────┬────────────┘
│  ┌──────────┴────────────┐
│  │     idle, prepare     │
│  └──────────┬────────────┘      ┌───────────────┐
│  ┌──────────┴────────────┐      │   incoming:   │
│  │         poll          │&amp;lt;─────┤  connections, │
│  └──────────┬────────────┘      │   data, etc.  │
│  ┌──────────┴────────────┐      └───────────────┘
│  │        check          │
│  └──────────┬────────────┘
│  ┌──────────┴────────────┐
└──┤    close callbacks    │
└───────────────────────┘&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意：每个盒子被当作Event Loop的一个阶段。&lt;/p&gt;
&lt;p&gt;每个阶段都有一个执行回调的FIFO队列(官网这么描述的，实际上不是的，比如timers的数据结构实际上是堆), 简单概述，当Event Loop进入到某个阶段的时候，就会将该阶段的队列里的回调拿出来执行，直到队列为空(实际上要复杂一点儿)。&lt;/p&gt;
&lt;h3 id=&quot;event-loop-phases-overview&quot;&gt;Event Loop Phases Overview&lt;/h3&gt;
&lt;p&gt;简单的介绍一下这几个阶段所做的事情：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;timers: 这个阶段执行由&lt;code&gt;setTimeout()&lt;/code&gt;和&lt;code&gt;setInterval()&lt;/code&gt;调度的回调。&lt;/li&gt;
&lt;li&gt;I/O callbacks: 执行几乎所有的回调，除了&lt;code&gt;close callbacks&lt;/code&gt;以及timers调度的回调和&lt;code&gt;setImmediate()&lt;/code&gt;调度的回调。&lt;/li&gt;
&lt;li&gt;idle, prepare: 只在内部使用。&lt;/li&gt;
&lt;li&gt;poll: 检索新的I/O事件，node将在适当的时候阻塞。(retrieve new I/O events; node will block here when appropriate)&lt;/li&gt;
&lt;li&gt;check: &lt;code&gt;setImmediate()&lt;/code&gt;的回调将会在这个阶段执行。&lt;/li&gt;
&lt;li&gt;close callbacks: 比如&lt;code&gt;socket.on('close', ...)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面的阶段还是笔记容易理解的，就是poll阶段的解释有点儿让人迷惑，这是什么意思呢？官方文档给出了poll阶段的作用。&lt;/p&gt;
&lt;h4 id=&quot;poll-phase&quot;&gt;Poll Phase&lt;/h4&gt;
&lt;p&gt;poll阶段有两个功能:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当timers到达指定的时间后，执行指定的timer的回调(Executing scripts for timers whose threshold has elapsed, then)。&lt;/li&gt;
&lt;li&gt;处理poll队列的事件(Processing events in the poll queue)。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当进入到poll阶段，并且没有timers被调用的时候，会发生下面的情况:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果poll队列不为空，Event Loop 将同步的执行poll queue里的callback，直到queue为空或者执行的callback到达上线。&lt;/li&gt;
&lt;li&gt;如果poll队列为空，则会发生下面的情况:
&lt;ul&gt;&lt;li&gt;如果脚本调用了&lt;code&gt;setImmediate()&lt;/code&gt;, Event Loop将会结束poll阶段并且进入到&lt;code&gt;check&lt;/code&gt;阶段执行&lt;code&gt;setImmediate()&lt;/code&gt;的回调。&lt;/li&gt;
&lt;li&gt;如果脚本没有被&lt;code&gt;setImmediate()&lt;/code&gt;调用，Event Loop将会等待回调被添加到队列中，然后立即执行它们。&lt;br/&gt;当进入到poll阶段，并且调用了timers的话，会发生下面的情况:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;一旦poll queue是空的话，Event Loop会检查是否timers, 如果有1个或多个timers时间已经到达，Event Loop将会回到timer阶段并执行那些timer的callback(即进入到下一次tick)。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;看了上面的介绍，比较I/O callbacks阶段与poll阶段，可能会感到迷惑？为什么在I/O callbacks是执行几乎所有的回调，而在poll阶段也是执行回调？我找到了&lt;a href=&quot;http://docs.libuv.org/en/v1.x/design.html#the-i-o-loop&quot;&gt;Libuv的官方文档&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;Pending callbacks are called. All I/O callbacks are called right after polling for I/O, for the most part. There are cases, however, in which calling such a callback is deferred for the next loop iteration. If the previous iteration deferred any I/O callback it will be run at this point.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结合&lt;a href=&quot;http://docs.libuv.org/en/v1.x/design.html#the-i-o-loop&quot;&gt;Libuv官方文档&lt;/a&gt;给出的流程图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.meituan.net/codeman/624c9768d8888b109a4649298c0cb09180528.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;来看, 可以翻译为：Pending callbacks(即I/O callbacks)被调用。大多数情况下，所有的I/O callbacks都是在&lt;code&gt;poll for I/O&lt;/code&gt;(即poll phase)后理解调用的。然而，有些情况，会在下一次tick调用，以前被推迟的&lt;code&gt;I/O callback&lt;/code&gt;会在下一次tick的I/O阶段调用。&lt;/p&gt;
&lt;p&gt;那么一般什么样的&lt;code&gt;callback&lt;/code&gt;会在I/O callbacks阶段被调用呢?&lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/&quot;&gt;Node.js官方&lt;/a&gt;有提到：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;This phase executes callbacks for some system operations such as types of TCP errors. For example if a TCP socket receives ECONNREFUSED when attempting to connect, some *nix systems want to wait to report the error. This will be queued to execute in the I/O callbacks phase.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即：这个阶段对某些系统操作(比如TCP类型错误)执行回调。举个例子，如果尝试连接时,一个TCP套接字收到了&lt;code&gt;ECONNREFUSED&lt;/code&gt;，则某些&lt;code&gt;*nix&lt;/code&gt;系统会等待报错。这将排队在&lt;code&gt;I/O callbacks&lt;/code&gt;阶段执行。&lt;/p&gt;
&lt;p&gt;对于文档上的说法去一探究竟，在Node.js源码里全局搜索: &lt;code&gt;ECONNREFUSED&lt;/code&gt;, 在&lt;a href=&quot;https://github.com/nodejs/node/blob/master/deps/uv/src/unix/tcp.c&quot;&gt;node/deps/uv/src/unix/tcp.c&lt;/a&gt;目录下，第206行，&lt;code&gt;uv__tcp_connect&lt;/code&gt;函数，代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;26&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; uv__tcp_connect(uv_connect_t* req,
                    uv_tcp_t* handle,
                    &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; sockaddr* addr,
                    &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; addrlen,
                    uv_connect_cb cb) {
  &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; err;
  &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; r;

  assert(handle-&amp;gt;type == UV_TCP);

  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (handle-&amp;gt;connect_req != NULL)
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; -EALREADY;  &lt;span class=&quot;co&quot;&gt;/* FIXME(bnoordhuis) -EINVAL or maybe -EBUSY. */&lt;/span&gt;

  err = maybe_new_socket(handle,
                         addr-&amp;gt;sa_family,
                         UV_STREAM_READABLE | UV_STREAM_WRITABLE);
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (err)
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; err;

  handle-&amp;gt;delayed_error = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;

  &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt; {
    errno = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    r = connect(uv__stream_fd(handle), addr, addrlen);
  } &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (r == -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; errno == EINTR);

  &lt;span class=&quot;co&quot;&gt;/* We not only check the return value, but also check the errno != 0.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   * Because in rare cases connect() will return -1 but the errno&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   * is 0 (for example, on Android 4.3, OnePlus phone A0001_12_150227)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   * and actually the tcp three-way handshake is completed.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (r == -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; errno != &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (errno == EINPROGRESS)
      ; &lt;span class=&quot;co&quot;&gt;/* not an error */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (errno == ECONNREFUSED)
    &lt;span class=&quot;co&quot;&gt;/* If we get a ECONNREFUSED wait until the next tick to report the&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * error. Solaris wants to report immediately--other unixes want to&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * wait.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
      handle-&amp;gt;delayed_error = -errno;
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; -errno;
  }

  uv__req_init(handle-&amp;gt;loop, req, UV_CONNECT);
  req-&amp;gt;cb = cb;
  req-&amp;gt;handle = (uv_stream_t*) handle;
  QUEUE_INIT(&amp;amp;req-&amp;gt;queue);
  handle-&amp;gt;connect_req = req;

  uv__io_start(handle-&amp;gt;loop, &amp;amp;handle-&amp;gt;io_watcher, POLLOUT);

  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (handle-&amp;gt;delayed_error)
    uv__io_feed(handle-&amp;gt;loop, &amp;amp;handle-&amp;gt;io_watcher);

  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的代码我们可以知道，当&lt;code&gt;errno === ECONNREFUSED&lt;/code&gt;时，会去调用&lt;code&gt;uv__io_feed(handle-&amp;gt;loop, &amp;amp;handle-&amp;gt;io_watcher)&lt;/code&gt;方法，看一下&lt;a href=&quot;https://github.com/nodejs/node/blob/master/deps/uv/src/unix/core.c&quot;&gt;uv__io_feed&lt;/a&gt;的的实现:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; uv__io_feed(uv_loop_t* loop, uv__io_t* w) {
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (QUEUE_EMPTY(&amp;amp;w-&amp;gt;pending_queue))
    QUEUE_INSERT_TAIL(&amp;amp;loop-&amp;gt;pending_queue, &amp;amp;w-&amp;gt;pending_queue);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从函数名字可以看出来，这里是在向&lt;code&gt;pendingQueue&lt;/code&gt;插入发生错误时的回调。也就是说，&lt;code&gt;I/O callbacks&lt;/code&gt;一般是对一些系统操作执行回调。&lt;/p&gt;
&lt;p&gt;那么我们可以得出结论：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;大部分的回调在poll阶段执行的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;I/O callbacks&lt;/code&gt;阶段一般执行的是系统操作的回调。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;the-heart-of-event-loop&quot;&gt;The Heart Of Event Loop&lt;/h3&gt;
&lt;p&gt;有了上面的知识后，我们依然不能解决文章开头的问题。来看一下，&lt;a href=&quot;https://github.com/nodejs/node/blob/master/deps/uv/src/unix/core.c&quot;&gt;Event Loop核心的代码&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; uv_run(uv_loop_t* loop, uv_run_mode mode) {
  &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; timeout;
  &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; r;
  &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ran_pending;

  r = uv__loop_alive(loop);
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!r)
    uv__update_time(loop);

  &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (r != &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; loop-&amp;gt;stop_flag == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
    uv__update_time(loop);
    uv__run_timers(loop);
    ran_pending = uv__run_pending(loop);
    uv__run_idle(loop);
    uv__run_prepare(loop);

    timeout = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ((mode == UV_RUN_ONCE &amp;amp;&amp;amp; !ran_pending) || mode == UV_RUN_DEFAULT)
      timeout = uv_backend_timeout(loop);

    uv__io_poll(loop, timeout);
    uv__run_check(loop);
    uv__run_closing_handles(loop);

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (mode == UV_RUN_ONCE) {
      &lt;span class=&quot;co&quot;&gt;/* UV_RUN_ONCE implies forward progress: at least one callback must have&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;       * been invoked when it returns. uv__io_poll() can return without doing&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;       * I/O (meaning: no callbacks) when its timeout expires - which means we&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;       * have pending timers that satisfy the forward progress constraint.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;       *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;       * UV_RUN_NOWAIT makes no guarantees about progress so it's omitted from&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;       * the check.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;       */&lt;/span&gt;
      uv__update_time(loop);
      uv__run_timers(loop);
    }

    r = uv__loop_alive(loop);
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)
      &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
  }

  &lt;span class=&quot;co&quot;&gt;/* The if statement lets gcc compile it to a conditional store. Avoids&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   * dirtying a cache line.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (loop-&amp;gt;stop_flag != &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
    loop-&amp;gt;stop_flag = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;

  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; r;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面代码可以简化为下面的伪代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;(true) {
    uv__update_time(loop); &lt;span class=&quot;co&quot;&gt;// 使用Linux下的高精度Timer hrtime更新loop-&amp;gt;time,即event loop的时间戳&lt;/span&gt;
    uv__run_timers(loop);
    uv__run_pending(loop);
    uv__run_idle(loop);
    uv__run_prepare(loop);
    uv__io__poll(loop, timeout);
    uv__run_check(loop);
    uv__run_closing_handlers(loop);

    &lt;span class=&quot;co&quot;&gt;// Node默认的mode是`UV_RUN_ONCE`&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (mode == UV_RUN_ONCE) {
        uv__run_timers();
        uv__update_time(loop); &lt;span class=&quot;co&quot;&gt;// 更新loop-&amp;gt;time&lt;/span&gt;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实际上，在一次tick的时候，首先会去调用一次&lt;code&gt;uv__run_timers&lt;/code&gt;去处理timers, 然后在最后&lt;code&gt;if&lt;/code&gt;语句里，还会去调用&lt;code&gt;uv__run_timers&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我在&lt;a href=&quot;https://github.com/nodejs/node/blob/master/lib/internal/timers.js&quot;&gt;timers&lt;/a&gt;的实现里, 找到下面的代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Timeout&lt;/span&gt;(callback&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; after&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; isRepeat) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  after &lt;span class=&quot;op&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// coalesce to number or NaN&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;(after &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; after &lt;span class=&quot;op&quot;&gt;&amp;lt;=&lt;/span&gt; TIMEOUT_MAX)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (after &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; TIMEOUT_MAX) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;emitWarning&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;after&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; does not fit into`&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;
                          &lt;span class=&quot;st&quot;&gt;' a 32-bit signed integer.'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;
                          &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;Timeout duration was set to 1.'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;st&quot;&gt;'TimeoutOverflowWarning'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    after &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// schedule on next tick, follows browser behavior&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_called&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_idleTimeout&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; after&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_idlePrev&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_idleNext&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_idleStart&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// this must be set to null first to avoid function tracking&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// on the hidden class, revisit in V8 versions after 6.2&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_onTimeout&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_onTimeout&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; callback&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_timerArgs&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; args&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_repeat&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; isRepeat &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; after : &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_destroyed&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;[async_id_symbol] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;async_id_fields[kAsyncIdCounter]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;[trigger_async_id_symbol] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;getDefaultTriggerAsyncId&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (async_hook_fields[kInit] &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;emitInit&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;[async_id_symbol]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;st&quot;&gt;'Timeout'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;[trigger_async_id_symbol]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也就是说，实际上&lt;code&gt;setTimeout(fn, 0);&lt;/code&gt;最后会变为&lt;code&gt;setTimeout(fn, 1);&lt;/code&gt;在一次tick的时候，大概的流程是这样的：&lt;/p&gt;
&lt;ul readability=&quot;-0.95460440985733&quot;&gt;&lt;li readability=&quot;0.46710526315789&quot;&gt;
&lt;p&gt;首先更新loop-&amp;gt;time(&lt;a href=&quot;https://github.com/nodejs/node/blob/master/deps/uv/src/unix/internal.h&quot;&gt;uv__update_time&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;UV_UNUSED(&lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; uv__update_time(uv_loop_t* loop)) {
  &lt;span class=&quot;co&quot;&gt;/* Use a fast time source if available.  We only need millisecond precision.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   */&lt;/span&gt;
  loop-&amp;gt;time = uv__hrtime(UV_CLOCK_FAST) / &lt;span class=&quot;dv&quot;&gt;1000000&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;上面的&lt;code&gt;uv__hrtime(UV_CLOCK_FAST)&lt;/code&gt;的值是精确到纳秒的，因此&lt;code&gt;loop-&amp;gt;time&lt;/code&gt;最后的结果可能是大于1的，也有可能是小于1的。&lt;/li&gt;
&lt;li readability=&quot;2.3737373737374&quot;&gt;
&lt;p&gt;然后&lt;a href=&quot;https://github.com/nodejs/node/blob/master/deps/uv/src/unix/timer.c&quot;&gt;uv__run_timers(loop)&lt;/a&gt;被调用:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; uv__run_timers(uv_loop_t* loop) {
  &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; heap_node* heap_node;
  uv_timer_t* handle;

  &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (;;) {
    heap_node = heap_min((&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; heap*) &amp;amp;loop-&amp;gt;timer_heap);
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (heap_node == NULL)
      &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;

    handle = container_of(heap_node, uv_timer_t, heap_node);
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (handle-&amp;gt;timeout &amp;gt; loop-&amp;gt;time)
      &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;

    uv_timer_stop(handle);
    uv_timer_again(handle);
    handle-&amp;gt;timer_cb(handle);
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;有了上面的理解后，就可以得到文章最开始的答案了，对于&lt;code&gt;event-loop-1.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 如果第一次loop准备前的耗时超过1ms, 即loop-&amp;gt;time &amp;gt; 1, 则会先执行setTimeout, 再执行setImmediate&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 如果第一次loop准备前的耗时小于1ms，即loop-&amp;gt;time &amp;lt; 1, 则会先执行setImediate，然后在执行setTimeout&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'setTimeout'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;setImmediate&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'setImmediate'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而对于&lt;code&gt;event-loop-2.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 由于是在回调里面调用的setTimeout, setImmediate两个函数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 首先在poll阶段，执行回调函数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 然后进入到check阶段，会执行setImmediate()的回调函数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 最后进入在执行setTimeout()的回调函数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'fs'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;readFile&lt;/span&gt;(__filename&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'setTimeout'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;setImmediate&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'setImmediate'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;macrotask-vs-microtask&quot;&gt;MacroTask VS MicroTask&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/&quot;&gt;Node.js官网文档&lt;/a&gt;的描述中，提到了&lt;code&gt;process.nextTick()&lt;/code&gt;, 它不属于&lt;code&gt;Libuv&lt;/code&gt;的部分，实际上，它是属于Node.js的一部分。&lt;/p&gt;
&lt;p&gt;实际上，除了Libuv里面要处理的回调，在Node.js里还有另外两个queue，分别是&lt;code&gt;Next Tick Queue&lt;/code&gt;以及&lt;code&gt;MicroTask Queue&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Next Tick Queue&lt;/code&gt;: 使用&lt;code&gt;process.nextTick()&lt;/code&gt;添加的回调。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MicroTask Queue&lt;/code&gt;: 包含一些microtasks比如&lt;code&gt;resolved promise callbacks&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;那MacroTask是什么呢？Macrotask实际上就是上面我们遇到的那些异步任务，也被称为Task, 也就是说，有的人会将&lt;code&gt;MacroTask Queue&lt;/code&gt;称为&lt;code&gt;Task Queue&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;它是如何工作的&quot;&gt;它是如何工作的？&lt;/h3&gt;
&lt;p&gt;我们结合一张图来看看它在Event Loop是如何工作的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.meituan.net/codeman/441db12a0388ee230bf4d238e19ebe3518591.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;在Event Loop完成一个阶段，然后到另一个阶段之前，Event Loop将会执行这&lt;code&gt;Next Tick Queue&lt;/code&gt;以及&lt;code&gt;MicroTask Queue&lt;/code&gt;里面的回调, 直到这两个队列为空。一旦它们空了后，Event Loop会进入到下一个阶段。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;很多人会将这两个队列都当作是&lt;code&gt;MicroTask Queue&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;, 因为它们是处于同一阶段执行的， 实际上，这两个队列执行依然是有一个先后顺序的: &lt;code&gt;Next Tick Queue&lt;/code&gt;的优先级高于&lt;code&gt;MicroTask Queue&lt;/code&gt;, &lt;strong&gt;&lt;em&gt;注意：我们这里将两个队列称为&lt;code&gt;Immediate Queue&lt;/code&gt;。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;E.g, The event loop is currently processing the immediates queue which has 5 handlers to be processed. Meanwhile, two handlers are added to the next tick queue. Once the event loop completes 5 handlers in the immediates queue, event loop will detect that there are two items to be processed in the next tick queue before moving to the close handlers queue. It will then execute all the handlers in the next tick queue and then will move to process the close handlers queue.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的那段话引用来自&lt;a href=&quot;https://jsblog.insiderattack.net/event-loop-and-the-big-picture-nodejs-event-loop-part-1-1cb67a182810&quot;&gt;Event Loop and the Big Picture — NodeJS Event Loop Part 1&lt;/a&gt;, 即&lt;code&gt;Event Loop&lt;/code&gt;在处理拥有5个&lt;code&gt;handlers&lt;/code&gt;的&lt;code&gt;Next Tick Queue&lt;/code&gt;时，有2个&lt;code&gt;handlers&lt;/code&gt;被添加到&lt;code&gt;Next Tick Queue&lt;/code&gt;， 一旦5个&lt;code&gt;handlers&lt;/code&gt;被处理完后，Event Loop会接着处理&lt;code&gt;Next Tick Queue&lt;/code&gt;里面新增的两个&lt;code&gt;handlers&lt;/code&gt;, 然后再处理&lt;code&gt;MicroTask Queue&lt;/code&gt;里的回调，当&lt;code&gt;Immediate Queue&lt;/code&gt;里面的回调都处理完成后，Event Loop将会进入到下一个阶段。举个例子：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;then&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'resolve1'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;nextTick&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'tick1'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;nextTick&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'tick2'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;nextTick&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'tick3'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;then&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'resolve2'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;nextTick&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'tick4'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;va&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;then&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'resolve3'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;nextTick&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'tick5'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么上面的执行顺序是：&lt;code&gt;tick1, tick4, tick5, tick2, tick3, resolve1, resolve2, resolve3&lt;/code&gt;。不要递归调用&lt;code&gt;process.nextTick&lt;/code&gt;, 因为这会导致&lt;code&gt;I/O starvation&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;推荐阅读&quot;&gt;推荐阅读&lt;/h2&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
</description>
<pubDate>Wed, 03 Jan 2018 03:00:00 +0000</pubDate>
<dc:creator>动机在未来</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yzfdjzwl/p/8182749.html</dc:identifier>
</item>
</channel>
</rss>