<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>就简单聊聊沟通效率问题 - Zachary_Fan</title>
<link>http://www.cnblogs.com/Zachary-Fan/p/CommunicationEfficiency.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Zachary-Fan/p/CommunicationEfficiency.html</guid>
<description>

&lt;h2&gt;一、沟通效率是什么&lt;/h2&gt;
&lt;p&gt;　　沟通效率是指依据利益点，选择适当的时间、方式、手段，&lt;strong&gt;快捷、准确、及时&lt;/strong&gt;传递信息产生的实效性和节奏感。有效度是指沟通&lt;strong&gt;对信息接受者影响的效果与程度&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　————摘自《百度百科》&lt;/p&gt;


&lt;h2&gt;二、为什么每个组织都在强调沟通效率&lt;/h2&gt;
&lt;p&gt;　　只要有大于1个人的地方就有沟通，所以说只要是一个组织，不管是家庭还是企业都存在着沟通问题。然而企业又是个创造利益的团体，所以其对效率的追求是无止境的，因为效率高低直接影响了企业运转的成本。&lt;/p&gt;
&lt;p&gt;　　沟通就是一个进行信息对称化的过程，板板手指可以算出来，比如：2个人只需要进行1次，3个人是3次，4个人是6次，以此类推，如下图1。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2017.cnblogs.com/blog/397048/201802/397048-20180206100914576-1885465860.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/397048/201802/397048-20180206100914576-1885465860.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　【图1】&lt;/p&gt;
&lt;p&gt;　　大家可以发现，人越多沟通成本越大，这也侧面反映了，在某些行业里赶工作进度的时候，并不是加人就能解决的，甚至可能会出现反效果。所以这里沟通的效率就很重要了，如果沟通效率低，那么可能团队到3、4个人就已经内耗很严重了。如果沟通效率比较好，团队可以顺利达到传说中的“2个披萨团队”。&lt;/p&gt;
&lt;p&gt;　　另外相信大家也看到过很多的大公司病，都知道大公司病有负面作用。但是为什么每个公司在变大之后，都慢慢患上了大公司病呢？这里我非常认同这篇文章（传送门：&lt;a href=&quot;https://www.zhihu.com/question/26111395/answer/32222806&quot; target=&quot;_blank&quot;&gt;https://www.zhihu.com/question/26111395/answer/32222806&lt;/a&gt;）中姚冬的观点，其中阐述的是：大公司已经从追求效率第一转变为稳妥第一了。举个例子，在公司小的时候，系统挂了就挂了，只要赶紧恢复了什么都好说。但是公司大了就不一样，比如微博的系统被鹿晗事件搞挂了，这个事情就会被传千里。甚至可能会需要公关团队来解决舆论的压力。那么为了稳妥而大量增加的沟通成本，对于一个企业来说，也是一个不容小觑的问题。提高安全稳定是为了降低出错带来的额外成本，但是提高沟通效率又未尝不是降低企业成本的另一种方式。&lt;/p&gt;
&lt;p&gt;　　我们再来换一个角度看，沟通的目的除了协作之外，还有一层意义是决策。在内耗比较严重的企业会出现的情况是 —— 一件事情决策不下来，然后拉上BOSS来决策。这里就涉及到2个大大的浪费：&lt;/p&gt;
&lt;p&gt;　　浪费1：BOSS需要花额外的时间来了解整件事情的来龙去脉，这里本身也是一个沟通问题（由哪些人和BOSS沟通）。&lt;/p&gt;
&lt;p&gt;　　浪费2：拉BOSS进来之前的沟通过程所花费的时间大部分都浪费了。&lt;/p&gt;
&lt;p&gt;　　需要注意的是这里面的浪费1，如果这个时间没花，那么BOSS可能作出的决策也并不是最优的。&lt;/p&gt;
&lt;p&gt;　　所以说，良好的沟通是润滑剂，拥有着促进作用。一个人的沟通能力也影响着其在企业的工作是否顺风顺水，毕竟你不是一个人在工作。&lt;/p&gt;


&lt;h2&gt;三、如何提高沟通效率&lt;/h2&gt;
&lt;p&gt;　　 提高沟通效率的本质就是在更短的时间内扩大下图2中的绿色范围。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2017.cnblogs.com/blog/397048/201802/397048-20180206174057748-1543926141.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/397048/201802/397048-20180206174057748-1543926141.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　【图2】&lt;/p&gt;
&lt;p&gt; 　　如果图中“对方”就是你自己，那么这2个圆是完全覆盖的，所以这里换位思考就是很重要的一个点了。只有进行了换位思考，你才能满足第一节中提到的&lt;strong&gt;方式和&lt;/strong&gt;&lt;strong&gt;快捷&lt;/strong&gt;。由于每个人的所处的环境以及经历不同，所以你要把自己脑海中的一个观点要以对方的能够理解的方式讲述出来，并且将它作为你在沟通中的第一要素。&lt;/p&gt;
&lt;p&gt;　　如果说换位思考是从“道”的角度出发的一种方式，那么在“术”的角度方式相对就比较多了。比如：&lt;/p&gt;
&lt;p&gt;　　1.&lt;strong&gt;如果可以，尽量通过图来阐明某个观点&lt;/strong&gt;。所谓一图胜千言，这里的作用相信大家都懂。&lt;/p&gt;
&lt;p&gt;　　2.&lt;strong&gt;在与平级或者上级沟通时，提炼出问题的简述，并尽可能的总结出自己的观点和结论，由对方选择&lt;/strong&gt;。这种方式会给沟通对象更好的代入感，快速进入到这个问题中来，并且如果回答是做选择题，这里还省去了对方阐述他的观点时你再次理解的过程。&lt;/p&gt;
&lt;p&gt;　　3.&lt;strong&gt;在自己没真正形成一个理解之前不要打断对方&lt;/strong&gt;。因为理解也是在沟通中很重的一环，同样参考上文中知乎连接中答者许晓风的回答中很经典的一个图，我直接贴一下，下图3：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2017.cnblogs.com/blog/397048/201802/397048-20180207162150591-1322241825.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/397048/201802/397048-20180207162150591-1322241825.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　【图3】&lt;/p&gt;
&lt;p&gt;　　大家可以看到，在你作为一个被沟通的对象时，“认真听”这个事情所影响的比率有3/5（这里忽视里面的百分比）。所以说如果别人讲的东西你都没听明白就盲目的打断，这个习惯会无形之间加大沟通的时间和出错率。我觉得这个现象比较容易出现在资格老的人与新人的沟通中，由于某种优越感让自己高傲起来，导致没有耐心去倾听。&lt;/p&gt;



&lt;h2&gt;四、结语&lt;/h2&gt;
&lt;p&gt;　　坦白说，在没有真正思考这个问题之前，我的确没有意识到沟通与人数之间的关系是这样的，对协作效率的影响如此之大。比如一个100人的团队，要让所有人认知统一需要维系5050条沟通带，并且这5050条沟通带本身也要一致。我觉得这个本身是个几乎不可能完成的任务，所以才产生了所谓的项目制、两个披萨原则这样的概念来将团队拆大化小。&lt;/p&gt;
&lt;p&gt; 　　附上几个关于这个问题很有价值的连接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/26111395/answer/32222806&quot; target=&quot;_blank&quot;&gt;https://www.zhihu.com/question/26111395/answer/32222806&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/36088643/answer/80386216&quot; target=&quot;_blank&quot;&gt;https://www.zhihu.com/question/36088643/answer/80386216&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;作者：&lt;a href=&quot;http://www.cnblogs.com/Zachary-Fan&quot; target=&quot;_blank&quot;&gt;Zachary_Fan&lt;/a&gt;&lt;br/&gt;出处：&lt;a href=&quot;http://www.cnblogs.com/Zachary-Fan/p/CommunicationEfficiency.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/Zachary-Fan/p/CommunicationEfficiency.html&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;如果你想及时得到个人自写文章的消息推送，欢迎扫描下面的二维码~。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/397048/201706/397048-20170620064950210-569784315.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 23:00:00 +0000</pubDate>
<dc:creator>Zachary_Fan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Zachary-Fan/p/CommunicationEfficiency.html</dc:identifier>
</item>
<item>
<title>我的前端故事----关于前端数据&amp;逻辑的思考 - F-happy</title>
<link>http://www.cnblogs.com/fuhuixiang/p/8424395.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fuhuixiang/p/8424395.html</guid>
<description>&lt;p&gt;最近重构了一个项目，一个基于redux模型的react-native项目，目标是在混乱的代码中梳理出一个清晰的结构来，为了实现这个目标，首先需要对项目的结构做分层处理，将各个逻辑分离出来，这里我是基于典型的MVC模型，那么为了将现有代码重构为理想的模型，我需要做以下几步：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;拆分组件&lt;/li&gt;
&lt;li&gt;逻辑处理&lt;/li&gt;
&lt;li&gt;抽象、聚合数据&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;组件化&quot;&gt;组件化&lt;/h2&gt;
&lt;p&gt;这是一个老生常谈的问题了，从16年起前端除了构建工具，讨论的最多的就是组件化了，把视图按照一定规则切分为若干模块过程就是组件化，那么组件化的重点就是那个&lt;strong&gt;规则&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那么这个规则又是什么呢？&lt;/p&gt;
&lt;p&gt;按功能？按样式？&lt;/p&gt;
&lt;p&gt;我之前的项目里多数这两种情况都存在，举个简单的例子，对于app的登录模块来说就是一个典型的按功能分组，而对于一个列表就是一个明显的按样式去组件化，他们两个对应着两种完全不同的写法，因为他们一个是&lt;strong&gt;充血模型&lt;/strong&gt;，一个是&lt;strong&gt;贫血模型&lt;/strong&gt;。在redux中，明显的区别是贫血组件中一切的状态全部外置，组件自身不去管理自己的状态，统统放到reducer；而在充血组件中，一部分状态由全局的store去管理，一部分有自身的state控制。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;co&quot;&gt;// 充血组件              // 贫血组件&lt;/span&gt;
    组件A &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; 组件B &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; 组件C    组件A &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; 组件B &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; 组件C
    逻辑A &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; 逻辑B &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; 逻辑C    &lt;span class=&quot;op&quot;&gt;---------------------&lt;/span&gt;
    数据A &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; 数据B &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; 数据C           逻辑层
    &lt;span class=&quot;op&quot;&gt;-------------------&lt;/span&gt;    &lt;span class=&quot;op&quot;&gt;---------------------&lt;/span&gt;
          全局逻辑                 数据层&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在我重构的过程中更倾向于将组件内的状态都放在reducer中，这样View就可以更纯粹的去渲染了，这样的View在我看来会更加简洁、更加清晰，对于组件的替换更是驾轻就熟。但状态全外置这种实践带来的代价也是很大的。因为一个带交互的组件，势必需要一些事件的处理，生命周期的触发等等操作，这会带来一些问题：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;这种组件提炼出来的状态只和自己有关，强制被放在Store中就会带来Store复杂度的上升，如果你的组件足够多，那么全局的Store会膨胀的特别明显，更重要的是如果你的状态是和组件成树形对应的话，Store中将会冗余很多重复的数据。&lt;/li&gt;
&lt;li&gt;描述组件的状态被转移到外部，导致操作组件的成本变高，对于组件内的一些简单操作将变得复杂繁琐。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;对于后一点我认为并没有很大的问题，得益于分层和纯渲染的设计，组件将控制自身的行为交出后可以将这些逻辑抽象为更加通用的逻辑，从而方便有类似需求的组件使用，因为逻辑应该只出现在一个地方，而不应分散在多个地方。例如控制一批组件的显示或隐藏，将组件内部控制显示的逻辑交出来反而会省去更多的重复代码。&lt;/p&gt;
&lt;p&gt;而我更担心的是由于组件中私有状态的转移导致的Store膨胀的问题，为了避免这个问题首先做的便是尽可能的提取公用有相似作用的状态，例如控制显示/隐藏、多个列表的页数/条数；等这些有着相似功能的字段。走到这一步就引出了另外一个问题了，对于组件的状态描述是&lt;strong&gt;树形&lt;/strong&gt;的还是&lt;strong&gt;平行&lt;/strong&gt;的。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;树形结构&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这种结构的特点是将一个组件的状态通过一个树的形式记录下来，页面是如何嵌套的，那么状态树就是如何嵌套的，这样做的好处是组件接收到状态后直接递归的显示就行了，对于组件来说这是最简单，效率最高的展现形式。但这样做的问题就是如果有多个相似的组件就会造成Store中冗余大量重复数据，最终造成Store的膨胀。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;平行结构&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这种结构和上面的树形结构恰恰相反，可以最大程度的避免冗余数据的产生，将每一类数据拍平保存，但这种形式对于组件的展示却很不友好，组件需要自己去消化多处数据源带来的格式化操作，在redux中connect方法就是用来处理这种多数据源聚合用的。&lt;/p&gt;
&lt;p&gt;那么上面两种结构改如何取舍呢？我个人推荐第二种平行结构，既然选择了平行结构，那么该如何去处理数据聚合的问题呢？在这里我推荐利用管道的思路来解决，这借鉴了 &lt;a href=&quot;https://www.angular.cn/guide/pipes&quot;&gt;Angular 2 Pipe&lt;/a&gt;的概念，当然熟悉Linux的同学对于&lt;code&gt;|&lt;/code&gt;操作符一定也不会陌生。在我们的项目中，数据是流动的，如同一个管道中的水一样，Store就是一个水库，汇集了各种各样的数据（水），而页面组件就如同需要灌溉的田，而从水库到田间这段距离就需要水管的帮助了。同样的，利用pipe我们可以将保存在Store中的数据转换成期望看到的结构，而这一切操作都是在数据的流动中完成的，而不是放在数据已经传递到组件之后去处理了。&lt;/p&gt;
&lt;p&gt;这里引出了一个概念，就是&lt;strong&gt;数据流&lt;/strong&gt;这个概念，在项目中我将所有数据的操作都成为数据的流动。举个例子，当用户在登录框输入了用户名和密码并点击提交之后，这两个input中的value就变成了两个数据流：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;   input &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;merge&lt;/span&gt;(name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; password) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;(校验合法性) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;post&lt;/span&gt;(服务器)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个行为变成了一条流水线，先不管post输出的结果如何，在上面的demo中我们的输入行为被抽象成了两个参数，最后通过合并、过滤、发送，最终到达服务器，这不是一个新概念，在很多的框架中都有体现：&lt;/p&gt;
&lt;p&gt;在Cycle.js它被称为 &lt;strong&gt;Intent&lt;/strong&gt;（负责从外部的输入中，提取出所需信息），Intent实际上做的是action执行过程的高级抽象，提取了必要的信息。由于View是纯展示的，所以包括事件监听在内的行为统统被Intent抽象成数据源，这在RxJs中很常见：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; clicks &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Rx&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;Observable&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fromEvent&lt;/span&gt;(document&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'click'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;clicks&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;subscribe&lt;/span&gt;(x &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(x))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 结果:&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 每次点击 document 时，都会在控制台上输出 MouseEvent 。&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相比于从View中发出的同步数据源，我们遇到更多的是从HTTP中获取的异步数据源。在redux中我们常用redux-thunk来处理异步操作，那么在流中呢？&lt;/p&gt;
&lt;h2 id=&quot;逻辑处理&quot;&gt;逻辑处理&lt;/h2&gt;
&lt;p&gt;在之前的业务中我们有很多方式去处理异步操作，比如说最常用的redux-thunk(回调)、promise、async/await。现在很多人更愿意用async/await操作符去写异步逻辑，因为它让代码显得更加“同步”，我之前也很喜欢这种方式，但现在在数据流的概念中，同步/异步已经被“模糊”了，它们都是数据源，它们都是“主动”发出数据的，那么同步还是异步就显得不那么重要了，还是上面的例子，如果用户名变成了一个异步获取的过程，而不是用户主动输入的了：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; input =&amp;gt; merge(async(name), password) =&amp;gt; filter(校验合法性) =&amp;gt; post(服务器)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这种情况下在RxJs中可以通过&lt;code&gt;zip&lt;/code&gt;来等待全部的数据流&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;29&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; age$ &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Observable&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;number&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;29&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; name$ &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Observable&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Bar'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Beer'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; isDev$ &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Observable&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;boolean&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

Observable
    .&lt;span class=&quot;at&quot;&gt;zip&lt;/span&gt;(age$&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
         name$&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
         isDev$&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
         (age&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; number&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; isDev&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; boolean) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; isDev &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;))
    .&lt;span class=&quot;at&quot;&gt;subscribe&lt;/span&gt;(x &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(x))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 输出：&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// { age: 27, name: 'Foo', isDev: true }&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// { age: 25, name: 'Bar', isDev: true }&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// { age: 29, name: 'Beer', isDev: false }&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过这样的链式操作，我们可以很方便的控制和获取数据流，这是对于数据的获取，那么数据的分发呢？在redux中，我们通常会多次dispatch，在redux-thunk中我们会这样写：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; getInfo &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (params) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;async&lt;/span&gt; (dispatch&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; getState) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// TODO...&lt;/span&gt;
    
    &lt;span class=&quot;at&quot;&gt;dispatch&lt;/span&gt;(actionaA)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;co&quot;&gt;// TODO...&lt;/span&gt;
    
    &lt;span class=&quot;at&quot;&gt;dispatch&lt;/span&gt;(actionaA)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而在redux-observable中：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; somethingEpic &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (action$&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; store) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;action$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ofType&lt;/span&gt;(SOMETHING)
    .&lt;span class=&quot;at&quot;&gt;switchMap&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'/something'&lt;/span&gt;)
        .&lt;span class=&quot;at&quot;&gt;do&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;store&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dispatch&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; SOMETHING_ELSE &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;))
        .&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;(response &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; SUCCESS&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; response &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;))
    )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是我认为到处dispatch是一个不好的行为，这会让一个流变得混乱，因为你在流的最后不会得完整的结果（在过程中有一部分就已经派发出去了），这会让逻辑看起来很散乱，所以我推荐应该写成这样的形式：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; somethingEpic &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; action$ &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;action$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ofType&lt;/span&gt;(SOMETHING)
    .&lt;span class=&quot;at&quot;&gt;switchMap&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'/something'&lt;/span&gt;)
        .&lt;span class=&quot;at&quot;&gt;mergeMap&lt;/span&gt;(response &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Observable&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;of&lt;/span&gt;(
          &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; SOMETHING_ELSE &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; SUCCESS&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; response &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        ))
    )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 上面这两段demo来着redux-observable的文档&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结束了异步的处理，我们的流模型也完成了input-&amp;gt;output的完整闭环了。在这里没有详细说output是因为基于redux，我任然是通过redux的connect方法将Store分发注入到组件的props中去的，因此如果你熟悉redux那么会很习惯现在的改变。&lt;/p&gt;
&lt;p&gt;在处理完了同步/异步之后我们就来聊聊业务的逻辑该如何处理了。在redux中逻辑被分在了两个地方，action和reducer中，一个是做数据的聚合，一个是做数据的格式化。上面提到了Intent 是action的高阶抽象，其实是对action的拆分，剥离了action中获取数据的部分逻辑，那么剩下的就是数据处理的部分了，这部分在我的实践中被叫做&lt;strong&gt;Service&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这是一个单例的实例，整个项目中一个服务只会有一个实例，不必将相同的代码复制一遍又一遍，只需要创建一个单一的可复用的数据服务，并且把它注入到需要它的那些组件中。并且使用单独的服务可以保持组件足够的精简，同时也更容易对组件进行单元测试。同样reducer中的数据格式化逻辑也迁到了服务中去处理，在redux中reducer兼顾着数据的格式化和数据的保存这两个功能，现在我们将彻底剥离出数据的处理部分，剩下的reducer将只做数据的保存，这就又引出了另一个概念&lt;strong&gt;Model&lt;/strong&gt;，这一层我们一会讨论，接着业务处理来看，在数据流获取到数据并处理分发到Model中之后，input这一步基本算是结束了，接下来就是由Model到View的output了。&lt;/p&gt;
&lt;p&gt;上文中我说道了我推荐使用平行模式，那么在平行模式到View这种树型结构该如果转化呢？这是output中最重要的一步，在CycleJS中这一步通常由&lt;strong&gt;filter&lt;/strong&gt;去完成，而在Angular中则是由&lt;strong&gt;Pipe&lt;/strong&gt;去处理，无论它叫什么，它们都是这条流程上的一环，就像水管中的一节一样，所有从Model通向View的数据都会进过这一环，从而被格式化。在代码中我更推荐大家尝试使用&lt;strong&gt;Decorator&lt;/strong&gt;去过滤数据源：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@UserInfoPipe({ name: 'Model.UserInfo.name' })
class LoginDemo extends Component {
  constructor(props) {
    super(props);
  }

  render(){
    return (
      &amp;lt;View&amp;gt;
        &amp;lt;Text&amp;gt;{this.props.name}&amp;lt;/Text&amp;gt;
      &amp;lt;/View&amp;gt;
    );
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;抽象聚合数据&quot;&gt;抽象、聚合数据&lt;/h2&gt;
&lt;p&gt;现在整体的骨架已经有了，剩下的就是该如何更好的抽象整合项目中的数据了。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一阶段&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最一开始的项目由于为了方便，我就按照API的结构去设计Store，那个时候一个页面对应一个接口或者很少的几个接口，这时候我将API返回的结构与本地的状态一一对应，这在初期非常的方便，不需要我做过多的转换，然而接下来为了应付接口的各种异常，不得不写很多防御性的代码（字段判空、属性变更、接口数据拼装），最后这些代码变得臃肿不堪，在其它同学介入修改的时候总是一头雾水，总是改了这里，那里出又出了问题。并且这其中也存在不少冗余的数据。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第二阶段&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;后来我发现既然数据都是最终给View去用的，那么我就按View的需求去设计Store好了，这个Store对于展示的组件来说，使用起来非常方便，当前应用处于哪种状态，就用对应状态的数组类型的数据渲染，不用做任何的中间数据转换。不过这也同样造成数据冗余的问题，并且如果我需要改动页面的某个字段的话，需要在很多地方去修改，因为这个Store树变得很深枝叶很多。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第三阶段&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;那么我现在该如何设计状态呢？作为一个曾经做过一段时间后端的我来说，我决定模仿数据库的结构去设计状态树。把Store当成一个数据库，每个种类的状态看做数据库中的一张表，状态中的每一个字段对应表的一个字段。&lt;/p&gt;
&lt;p&gt;那么设计一个数据库，应该要遵循哪些原则呢？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数据按照域分类，存在不同的表中，每张表存储的字段不重复&lt;/li&gt;
&lt;li&gt;每张表中每条数据都有一个唯一主键&lt;/li&gt;
&lt;li&gt;表中除了主键外其它列，相互不存在依赖关系&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;而基于上面这三条原则，我们怎么设计Store呢？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;把整个项目按照一定模型去分离为若干子状态，这些子状态之间不存在重复冗余的数据。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;怎么理解这件事呢？举个例子，我有一个长列表，每当我点击列表中的某一列时就会有一个红框出现包裹住这列，而这个列表中真正展示的数据应该是另外一个子状态，它们的关系类似：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
    activeLine: 1,
    list: [
        {
            name: 'test1',
        },
        {
            name: 'test2',
        },
        {
            name: 'test3',
        },
        {
            name: 'test4',
        },
    ]
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;以键值对的结构存储数据，用key/ID作为记录的索引，记录中的其他字段都依赖于索引。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;有了唯一的key做主键，我们就可以很方便的去遍历/处理数据。更进一步的，如果我们想去判断一条数据有没有变化，我们可以单纯的去判断主键是否一致，在一些情况下，这是一个不错的思路，这避免了多层判断，或者深拷贝带来的复杂度和性能问题（这个可以参考immutable）。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;状态树中不保存可以通过已有数据计算出来的数据，也就是这些数据都是相互独立的，都可以被称为&lt;strong&gt;原子数据&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;什么是&lt;strong&gt;原子数据&lt;/strong&gt;？页面中使用到的数据都是由这些原子数据通过计算、拼装得到的（注意:这里只有拼装，没有拆分，因为原子是最小的单位，所以是不可拆分的）；这就保持了数据源的统一，不会出现一份一样的数据来自多出数据源的问题了，这会避免很多不必要的问题，如多处数据源不同步导致的页面展示异常等问题。&lt;/p&gt;
&lt;p&gt;好了，数据层也设计完了，这样一个完整的结构就清晰的摆在面前了，最终总结一下这个过程：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;按照贫血模型分离组件&lt;/li&gt;
&lt;li&gt;通过订阅的形式采集数据源&lt;/li&gt;
&lt;li&gt;通过数据库的形式去保存数据&lt;/li&gt;
&lt;li&gt;通过流的方式去处理和分发数据&lt;/li&gt;
&lt;li&gt;通过流的形式去格式化数据&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;经过以上几步，我们就初步的完成了一个业务从input到output的完整闭环。&lt;/p&gt;
&lt;p&gt;已上这些便是我这次重构总结的一些经验，肯定不全对、不完善、不准确，但是这个大方向我觉得是值得去探索的。&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 16:17:00 +0000</pubDate>
<dc:creator>F-happy</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fuhuixiang/p/8424395.html</dc:identifier>
</item>
<item>
<title>R语言的神奇之基于向量 - 千度&amp;</title>
<link>http://www.cnblogs.com/j-star/p/8429079.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/j-star/p/8429079.html</guid>
<description>&lt;p&gt;对于大多数需要来说，当我们需要计算两个向量相加时，我们需要分别对这两个向量的元素进行遍历，所以写起来非常的麻烦。下面看看R语言是如何实现的。&lt;/p&gt;
&lt;p&gt;首先，将1：5赋予一个名为x的向量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt; X&amp;lt;- &lt;span&gt;1&lt;/span&gt;:&lt;span&gt;5&lt;/span&gt;
&amp;gt;&lt;span&gt; X
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; &lt;span&gt;4&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;
 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，我们用这个向量加上另一个向量&lt;/p&gt;
&lt;p&gt;例如：让x加上6:10，可以如下执行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt; x ＋ &lt;span&gt;6&lt;/span&gt;:&lt;span&gt;10&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; [&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;7&lt;/span&gt; &lt;span&gt;9&lt;/span&gt; &lt;span&gt;11&lt;/span&gt; &lt;span&gt;13&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就是这么简单，这是因为R语言是向量化的语言，它可以在一个步骤中同时执行多个操作，这是其他非向量化编程语言所不具备的。&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 16:05:00 +0000</pubDate>
<dc:creator>千度&amp;</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/j-star/p/8429079.html</dc:identifier>
</item>
<item>
<title>在IAR下移植CC2650 contiki工程 - 可乐咸鱼</title>
<link>http://www.cnblogs.com/cola-fish/p/8429061.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cola-fish/p/8429061.html</guid>
<description>&lt;p&gt;与Instant Contiki相比，在Windows的IAR下开发可以在线仿真，下载也更方便，因此我想把BLEach的工程移植到IAR下。弄了好几天总算编译并且下载成功了，参考了[这篇TI的wiki][1]，过程中的error和warning都是查google一个个改的，过程记录难免会有一些疏忽，欢迎讨论和指正。&lt;/p&gt;
&lt;p&gt;软硬件环境：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;系统: Win10&lt;/li&gt;
&lt;li&gt;IDE: IAR for ARM 7.4&lt;/li&gt;
&lt;li&gt;driverlib 版本：cc26xxware_2_24_02_17393（包含在tirtos_cc13xx_cc26xx_2_20_01_08中）&lt;/li&gt;
&lt;li&gt;Contiki: 3.0.5 包含BLEach &lt;a href=&quot;https://github.com/spoerk/contiki&quot; class=&quot;uri&quot;&gt;https://github.com/spoerk/contiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235450763-2047014596.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后选择工程目录并起名字，我的工程叫cc26xx-BLE-server-demo。&lt;/p&gt;
&lt;h2 id=&quot;右击工程名-add-add-group可以看作创建文件夹根据本工程的实际情况创建如下group&quot;&gt;2. 右击工程名 Add-&amp;gt;Add Group（可以看作创建文件夹），根据本工程的实际情况创建如下Group:&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235459326-232100044.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;添加源文件仅添加本工程编译和链接过程中必须的文件&quot;&gt;3. 添加源文件（仅添加本工程编译和链接过程中必须的文件）&lt;/h2&gt;
&lt;h3 id=&quot;application&quot;&gt;application:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235510763-1673087325.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;core&quot;&gt;core:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235550560-1680827106.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;core下的net目录&quot;&gt;core下的net目录：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235557279-46716293.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;cpu&quot;&gt;cpu:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235606498-150660563.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;platform&quot;&gt;platform&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235620873-1598685986.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置设备&quot;&gt;4. 设置设备：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235628513-1298156003.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置编译器的include目录&quot;&gt;5. 设置编译器的include目录：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235637138-1194460550.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这步需要根据编译时产生的&quot;file xxx not found&quot;错误来添加，下面是本工程的include内容：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;$PROJ_DIR$\contiki\core
$PROJ_DIR$\contiki\core\sys
$PROJ_DIR$\contiki\core\lib
$PROJ_DIR$\contiki\core\net
$PROJ_DIR$\contiki\examples\cc26xx\cc26xx-ble-server-demo
$PROJ_DIR$\contiki\platform\srf06-cc26xx
$PROJ_DIR$\contiki\platform\srf06-cc26xx\srf06\cc26xx
$PROJ_DIR$\contiki\cpu\cc26xx-cc13xx\lib\cc26xxware\driverlib
$PROJ_DIR$\contiki\cpu\cc26xx-cc13xx\lib\cc26xxware
$PROJ_DIR$\contiki\cpu\cc26xx-cc13xx
$PROJ_DIR$\contiki\platform
$PROJ_DIR$\contiki\core\dev
$PROJ_DIR$\contiki\cpu\cc26xx-cc13xx\dev
$PROJ_DIR$\contiki\cpu\cc26xx-cc13xx\lib\cc26xxware\inc
$PROJ_DIR$\contiki
$PROJ_DIR$\contiki\cpu\cc26xx-cc13xx\rf-core\api&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里建议都用$PROJ_DIR$写成相对路径的形式，方便我们更改工程路径。&lt;/p&gt;
&lt;h2 id=&quot;设置链接器&quot;&gt;6. 设置链接器&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235650185-650110626.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里需要填写TI的开发库cc26xxware driverlib的路径，我的是：&lt;code&gt;..\contiki\cpu\cc26xx-cc13xx\lib\cc26xxware\driverlib\bin\iar\driverlib.lib&lt;/code&gt;&lt;br/&gt;此处一定注意driverlib的版本，我使用旧版本出现了&lt;code&gt;no definition for _iar_program_start&lt;/code&gt;的error。&lt;br/&gt;本文中的driverlib是从tirtos_cc13xx_cc26xx_2_20_01_08提取出来的，该软件包可以从TI官网下载，其默认安装目录为&lt;code&gt;C:\ti\tirtos_cc13xx_cc26xx_2_20_01_08\products\cc26xxware_2_24_02_17393&lt;/code&gt;&lt;br/&gt;如果是其他工程，需要根据链接产生的错误从第3步逐步添加所需要的文件，如果不好定位链接器error中找不到的函数名，可以用source insight新建一个工程来定位函数具体在哪个文件中。&lt;/p&gt;
&lt;h2 id=&quot;设置宏&quot;&gt;7. 设置宏&lt;/h2&gt;
&lt;p&gt;在IAR中我们并不使用Makefile，因此需要将一些宏定义显示写在如下窗口：&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235701451-1120029943.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;具体需要根据各级Makefile，..\contiki\platform\srf06-cc26xx\contiki-conf.h和..\contiki\examples\cc26xx\cc26xx-ble-server-demo\project-conf.h设置，本工程中的宏如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;CONTIKI_WITH_RPL=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
CONTIKI_WITH_IPV6=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
AUTOSTART_ENABLE
MODE_IEEE802_15_4=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
MODE_BLE=&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;
MODE=MODE_BLE
BUTTON_SENSOR_CONF_ENABLE_SHUTDOWN=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
BOARD_CONF_DEBUGGER_DEVPACK=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
PACKETBUF_CONF_SIZE=&lt;span class=&quot;dv&quot;&gt;1280&lt;/span&gt;
QUEUEBUF_CONF_NUM=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
UIP_CONF_BUFFER_SIZE=&lt;span class=&quot;dv&quot;&gt;1280&lt;/span&gt;
CC26XX_CONF_RADIO_MODE=CC26XX_RADIO_MODE_BLE
NETSTACK_CONF_RADIO=ble_cc2650_driver
NETSTACK_CONF_RDC=ble_null_par_driver
NETSTACK_CONF_MAC=ble_l2cap_driver
RTIMER_CONF_MULTIPLE_ACCESS=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
BLE_MODE_CONF_INIT_PEER_ADDR=&lt;span class=&quot;bn&quot;&gt;0x000000000000&lt;/span&gt;
SICSLOWPAN_CONF_MAC_MAX_PAYLOAD=&lt;span class=&quot;dv&quot;&gt;1280&lt;/span&gt;
SICSLOWPAN_CONF_COMPRESSION=SICSLOWPAN_COMPRESSION_HC06
SICSLOWPAN_CONF_COMPRESSION_THRESHOLD=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
SICSLOWPAN_CONF_FRAG=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
SICSLOWPAN_FRAMER_HDRLEN=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
UIP_CONF_ROUTER=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
UIP_CONF_ND6_SEND_NA=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
UIP_CONF_ND6_SEND_RA=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
UIP_CONF_IP_FORWARD=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一定注意不要有空格，否则会出现编译错误。&lt;br/&gt;至此，编译器和链接器已经设置好了。&lt;br/&gt;本工程源代码因为是Linux下的gcc编译的，在IAR中编译难免会有一些ERROR和WARNING，我记录了其中几个:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Error[Pe018]: expected a &quot;)&quot; D:\
xxx\contiki\cpu\cc26xx-cc13xx\rf-core\ble-hal\ble-hal-cc26xx.c 720 &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235720513-1852634262.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是因为IAR编译器不支持0b开头的二进制，我们把这些变量改为0x的16进制就可以了。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Warning[Pa050]: non-native end of line sequence detected (this diagnostic is only issued once) &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是因为linux和windows的换行符编码不一样，可以如下设置以不显示这个警告，&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235736560-1249503192.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Error[Pe852]: expression must be a pointer to a complete object type &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是因为源码中对(void*)类型的指针进行了加减运算，比如ble-hal-cc26xx.c的line 1180, 通过查找这个变量的类型，我们将其改成&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;      memcpy(((&lt;span class=&quot;dt&quot;&gt;uint8_t&lt;/span&gt; *)packetbuf_dataptr() + packetbuf_datalen()), &amp;amp;rx_data[header_offset], len);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;设置debugger并下载&quot;&gt;8. 设置Debugger并下载&lt;/h2&gt;
&lt;h3 id=&quot;设置xds我使用的是xds100v3&quot;&gt;设置XDS，我使用的是XDS100V3，&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235748888-1194426156.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235755951-1590255940.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;debugger&quot;&gt;Debugger&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235804388-1564267959.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1316297/201802/1316297-20180207235812888-530879665.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;下载可能会遇到如下错误&quot;&gt;9. 下载可能会遇到如下错误&lt;/h2&gt;
&lt;p&gt;Wed Feb 07, 2018 22:31:07: Fatal error: Failed to connect to the XDS emulator (connect ICEPick)... (Error -241 @ 0x0) A router subpath could not be accessed. A security error has probably occurred. (Emulation package 5.1.641.0)&lt;br/&gt;这是因为Flash Programmer2给程序上锁，我们需要用它擦除CC2650的FLASH，然后就可以下载和在线调试了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更多内容请关注本博客后续文章。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&quot;http://processors.wiki.ti.com/index.php/Contiki-IAR&quot; class=&quot;uri&quot;&gt;http://processors.wiki.ti.com/index.php/Contiki-IAR&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 15:59:00 +0000</pubDate>
<dc:creator>可乐咸鱼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cola-fish/p/8429061.html</dc:identifier>
</item>
<item>
<title>2018年承德代评中高级职称报名评审评定条件流程 - 胡云锋</title>
<link>http://www.cnblogs.com/3833069hu/p/8428986.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/3833069hu/p/8428986.html</guid>
<description>&lt;p&gt;承德中高级职称评审 代理Q Q:2129883406 承德哪里有职称评定认定 咨询Q Q:2129883406 张老师 支持官网查询 红头文件 评审表 解聘证明都齐全 人力资源和社会保障厅颁发的证书 （咨询客户多，请加QQ联系) 六年申报经验，诚信专业职称代理申报评审服务 咨询Q Q:2129883406 可 评 审 级 别 ： 中 级 职 称 （ 工 程 师 ） 、 高 级 职 称 （ 高 级 工 程 师 ）&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 15:47:00 +0000</pubDate>
<dc:creator>胡云锋</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/3833069hu/p/8428986.html</dc:identifier>
</item>
<item>
<title>iOS UITableView左滑操作功能的实现（iOS8-11） - 腾讯WeTest</title>
<link>http://www.cnblogs.com/wetest/p/8428735.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wetest/p/8428735.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;WeTest 导读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本文主要是介绍下iOS 11系统及iOS 11之前的系统在实现左滑操作功能上的区别，及如何自定义左滑的标题颜色、字体大小。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、左滑操作功能实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt;如果左滑的时候只有一个操作按钮，可以使用如下三个delegate方法来实现：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222349732-1879658204.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、&lt;/strong&gt;如果左滑有一个或多个操作按钮，iOS8-10 可使用如下两个delegate&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222413326-1202240555.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;3、&lt;/strong&gt;iOS 11之后，tableView的delegate增加了两个方法，用来取代editActionsForRowAtIndexPath方法，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222433248-1138441463.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;在2和3中，如果是需要适配iOS 11之前的版本，以上三个方法都需要实现。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;4、&lt;span&gt;上面1.2和1.3中实现的方法的区别&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;体验上的不同就是当左滑只有一个button时，iOS 11中可以一直左滑，滑到一定程度时，会执行点击按钮的操作，iOS 11之前的不会。&lt;/p&gt;

&lt;p&gt;iOS 11之前如果想增大button区域，可通过在标题前后加空格的方式，但iOS 11不行，加空格无效，button大小固定，超过4个字时换行显示。&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、左滑操作自定义标题颜色、字体&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;因为系统对左滑出的按钮只提供了3个可设置的属性：title、backgroundColor、image，如果使用自定义的titleColor和font，就需要自己来实现了。实现的思想是hook系统实现，但鉴于UITableView的view层级结构在iOS 11中有所改变，所以iOS8-10和iOS11的实现有所不同，以下分别给出。&lt;/p&gt;

&lt;p&gt;考虑到代码的可复用性，自定义左滑操作的字体大小和颜色的代码不写在viewController中，而是写在UITableView和UITableViewCell的Category中，对外提供editActionTitleColor和editActionTitleFont属性来设置颜色和大小，需要使用自定义颜色和字体时只需要设置一下这两个属性即可。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、iOS 8-10 设置标题颜色和字体&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;左滑操作后，UITableView的层级结构如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222617716-1599369065.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;由上图可知，左滑的操作按钮是在UITableViewCell的子view，所以我们可以在UITableViewCell的category中hook掉layoutSubviews方法，找到UITableViewCellDeleteConfirmationView的子view button，设置字体颜色和大小。&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222634623-352399819.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、 iOS 11 设置标题颜色和字体&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;左滑操作后，UITableView的层级结构如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222710685-1293556535.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;由上图可知，左滑的操作按钮是在UITableView的子view，所以我们可以在UITableView的category中hook掉layoutSubviews方法，找到UISwipeActionPullView的子view button，设置字体颜色和大小。&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222728373-604963861.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、遇到的问题及原因分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、&lt;span&gt;问题是iOS 11上设置颜色有延迟，颜色有一个明显的跳变，从系统默认色跳转到我设置的颜色&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有问题的代码如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222807013-1970174472.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2、&lt;span&gt;&lt;span&gt;问题原因分析&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当左滑一个cell后，直接操作左滑另一个cell，这个时候tableView上会有两个UISwipeActionPullView，此时tableView的部分view层级如下图所示：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222850873-190146898.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;而上面的代码，在__findSwipActionButton方法中，找到其中一个UISwipeActionPullView上面的button就直接返回了，没有设置第二个UISwipeActionPullView的button的颜色，导致显示了系统默认色。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、解决方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;将以上有问题的代码修改为以下代码：找出所有的UISwipeActionPullView，返回UISwipeActionPullView的button数组，对button数组进行设置字体颜色和大小，这个数组最多有两个元素，因为左滑出下一个cell时，上一个cell会逐渐消失，当此cell左滑操作完成时，上一个左滑的cell也会完成消失。&lt;/p&gt;

&lt;p&gt;解决后的代码如二（2）的示例代码。&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;腾讯WeTest iOS预审工具&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;为了提高IEG苹果审核通过率，腾讯专门成立了苹果审核测试团队，打造出iOS预审工具这款产品。经过1年半的内部运营，腾讯内部应用的iOS审核通过率从平均35%提升到90%+。&lt;/p&gt;

&lt;p&gt;现将腾讯内部产品的过审经验，以线上工具的形式共享给各位。在WeTest腾讯质量开放平台上可以在线使用。&lt;span&gt;&lt;strong&gt;点击 &lt;a href=&quot;http://wetest.qq.com/product/ios?from=content_cnblogs&quot;&gt;http://wetest.qq.com/product/ios&lt;/a&gt; 即可立即体验！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果使用当中有任何疑问，欢迎联系腾讯WeTest企业QQ：800024531&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;iOS预审服务&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【扫描工具】&lt;/strong&gt;上传IPA包、图片、视频、应用描述即可进行测试； 多维度自动扫描提审材料的被拒风险；1小时内反馈全面的扫描报告。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【专家预审】&lt;/strong&gt;腾讯专家为您遍历App所有功能模块；全面暴露App内容被拒风险；跟进问题直至上线（需提供官方拒绝邮件）。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;【专家咨询】&lt;/strong&gt;资深预审专家一对一服务； 咨询时间灵活可选，按需购买；有的放矢解 决审核问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;【ASO优化】&lt;/strong&gt;专业团队多维度深度剖析App的ASO现状；围绕App目标用户群筛选高 度关联的关键词；帮助提升App在苹果应用商店中的曝光率。&lt;/p&gt;










</description>
<pubDate>Wed, 07 Feb 2018 14:31:00 +0000</pubDate>
<dc:creator>腾讯WeTest</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wetest/p/8428735.html</dc:identifier>
</item>
<item>
<title>Java文件上传细讲 - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8428591.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8428591.html</guid>
<description>&lt;p&gt;文件上传就是把用户的信息保存起来。&lt;/p&gt;

&lt;p&gt;在用户注册的时候，可能需要用户提交照片。那么这张照片就应该要进行保存。&lt;/p&gt;

&lt;h2 id=&quot;为什么我们要使用上传工具&quot;&gt;为什么我们要使用上传工具？&lt;/h2&gt;
&lt;p&gt;为啥我们需要上传组件呢？当我们要获取客户端的数据，我们一般是通过getParameter()方法来获取的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上传文件数据是经过MIME协议进行分割的，表单进行了二进制封装。也就是说：getParameter()无法获取得到上传文件的数据。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们首先来看看&lt;strong&gt;文件上传http是怎么把数据带过去的&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;jsp页面，&lt;strong&gt;表单一定要指定enctype:multipart/form-data&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;form&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; action=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath }/servlet/UploadServlet1&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; enctype=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        上传用户：&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
        上传文件1：&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;file1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
        上传文件2：&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;file2&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;提交&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;http抓包&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170326194205188?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;尝试在Servlet上使用getParameter()获取数据&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        String ss = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;);
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(ss);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;直接使用getParameter是获取不到数据的。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170326194423558?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么我们要怎么办呢？？？？&lt;strong&gt;request对象提供了ServletInputStream流给我们读取数据&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;我们试着读取下文件&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        ServletInputStream inputStream = request.&lt;span class=&quot;fu&quot;&gt;getInputStream&lt;/span&gt;();

        &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1024&lt;/span&gt;];
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;

        &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; ((len = inputStream.&lt;span class=&quot;fu&quot;&gt;read&lt;/span&gt;(bytes)) &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String(bytes, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, len));
        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;在jsp页面多增添一个input控件&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;我上传的文本文件内容就是111111，读取效果如下：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170326195601173?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在我们能够读取上传文件的数据了，但是现在问题又来了：&lt;strong&gt;怎么把文件上传个数据和普通传送给服务器的数据分割开来呢？？？&lt;/strong&gt;上面在图上我们已经看到了，他们是混合在一起的。&lt;/p&gt;
&lt;p&gt;按我们平常的做法是很难分割开来的，所以我们需要上传组件&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;上传组件有两种&quot;&gt;上传组件有两种&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;FileUpload【操作比较复杂】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SamrtUpload【操作比较简单】&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;p&gt;要使用FileUpload组件，就需要导入两个jar包&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;commons-io&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Commons-fileupload&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;开发步骤&quot;&gt;开发步骤&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;创建解析器工厂对象【DiskFileItemFactory】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过解析器工厂创建解析器【ServletFileUpload】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用解析器方法解析request对象，得到所有上传的内容【list】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;遍历list，判断每个对象是否是上传文件&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;如果是普通表单字段，得到字段名和字段值&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果是上传文件，调用InputSteam方法得到输入流，读取上传的数据&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h2 id=&quot;快速入门&quot;&gt;快速入门&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;{
        
            &lt;span class=&quot;co&quot;&gt;//1.得到解析器工厂&lt;/span&gt;
            DiskFileItemFactory factory = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DiskFileItemFactory&lt;/span&gt;();
            
            &lt;span class=&quot;co&quot;&gt;//2.得到解析器&lt;/span&gt;
            ServletFileUpload upload = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ServletFileUpload&lt;/span&gt;(factory);
            
            &lt;span class=&quot;co&quot;&gt;//3.判断上传表单的类型&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;(!upload.&lt;span class=&quot;fu&quot;&gt;isMultipartContent&lt;/span&gt;(request)){
                &lt;span class=&quot;co&quot;&gt;//上传表单为普通表单，则按照传统方式获取数据即可&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
            }
            
            &lt;span class=&quot;co&quot;&gt;//为上传表单，则调用解析器解析上传数据&lt;/span&gt;
            List&amp;lt;FileItem&amp;gt; list = upload.&lt;span class=&quot;fu&quot;&gt;parseRequest&lt;/span&gt;(request);  &lt;span class=&quot;co&quot;&gt;//FileItem&lt;/span&gt;
            
            &lt;span class=&quot;co&quot;&gt;//遍历list，得到用于封装第一个上传输入项数据fileItem对象&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt;(FileItem item : list){
                
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;(item.&lt;span class=&quot;fu&quot;&gt;isFormField&lt;/span&gt;()){
                    &lt;span class=&quot;co&quot;&gt;//得到的是普通输入项&lt;/span&gt;
                    String name = item.&lt;span class=&quot;fu&quot;&gt;getFieldName&lt;/span&gt;();  &lt;span class=&quot;co&quot;&gt;//得到输入项的名称&lt;/span&gt;
                    String value = item.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;();
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(name + &lt;span class=&quot;st&quot;&gt;&quot;=&quot;&lt;/span&gt; + value);
                }&lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;{
                    &lt;span class=&quot;co&quot;&gt;//得到上传输入项&lt;/span&gt;
                    String filename = item.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();  &lt;span class=&quot;co&quot;&gt;//得到上传文件名  C:\Documents and Settings\ThinkPad\桌面\1.txt&lt;/span&gt;
                    filename = filename.&lt;span class=&quot;fu&quot;&gt;substring&lt;/span&gt;(filename.&lt;span class=&quot;fu&quot;&gt;lastIndexOf&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;)+&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
                    InputStream in = item.&lt;span class=&quot;fu&quot;&gt;getInputStream&lt;/span&gt;();   &lt;span class=&quot;co&quot;&gt;//得到上传数据&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
                    &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt; buffer[]= &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1024&lt;/span&gt;];
                    
                    
                    String savepath = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getServletContext&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getRealPath&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/upload&quot;&lt;/span&gt;);
                    FileOutputStream out = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; FileOutputStream(savepath + &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; + filename);  &lt;span class=&quot;co&quot;&gt;//向upload目录中写入文件&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;((len=in.&lt;span class=&quot;fu&quot;&gt;read&lt;/span&gt;(buffer))&amp;gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;){
                        out.&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(buffer, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, len);
                    }
                    
                    in.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
                    out.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
                }
            }
        
        }&lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
            e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;测试&quot;&gt;测试&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;普通的字段和上传的文件都能读取得到了！&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170326223432688?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;要使用SmartUpload组件，就需要&lt;strong&gt;导入smartupload.jar开发包&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;快速入门-1&quot;&gt;快速入门&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        &lt;span class=&quot;co&quot;&gt;//实例化组件&lt;/span&gt;
        SmartUpload smartUpload = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SmartUpload&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//初始化上传操作&lt;/span&gt;
        smartUpload.&lt;span class=&quot;fu&quot;&gt;initialize&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getServletConfig&lt;/span&gt;(), request, response);


        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {

            &lt;span class=&quot;co&quot;&gt;//上传准备&lt;/span&gt;
            smartUpload.&lt;span class=&quot;fu&quot;&gt;upload&lt;/span&gt;();

            &lt;span class=&quot;co&quot;&gt;//对于普通数据，单纯到request对象是无法获取得到提交参数的。也是需要依赖smartUpload&lt;/span&gt;
            String password = smartUpload.&lt;span class=&quot;fu&quot;&gt;getRequest&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;);
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(password);

            &lt;span class=&quot;co&quot;&gt;//上传到uploadFile文件夹中&lt;/span&gt;
            smartUpload.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;uploadFile&quot;&lt;/span&gt;);


        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SmartUploadException e) {
            e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;测试-1&quot;&gt;测试&lt;/h2&gt;
&lt;p&gt;同样地，&lt;strong&gt;我们可以上传文件到uploadFile文件夹中。代码量也的确减少很多！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也能够获取普通字段的参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170327094141204?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;我把文件名改成中文，就乱码了&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170327132619813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;表单提交过来的中文数据也乱码了&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170327132752164?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面已经说了，上传文件的数据的&lt;strong&gt;表单进行了二进制封装&lt;/strong&gt;，所以&lt;strong&gt;使用request对数据编码编码，对于表单提交过来的数据是不奏效的！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;fileupload解决乱码&quot;&gt;FileUpload解决乱码&lt;/h2&gt;
&lt;p&gt;使用FileUpload解决乱码问题是十分简单的&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;解决中文文件名乱码，得到解析器以后，&lt;strong&gt;就直接设置解析器的编码为UTF-8就行了！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        &lt;span class=&quot;co&quot;&gt;//设置upload的编码&lt;/span&gt;
        fileUpload.&lt;span class=&quot;fu&quot;&gt;setHeaderEncoding&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;解决表单数据乱码，&lt;strong&gt;在获取表单值的时候，按照UTF-8编码来获取&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
   String value = fileItem.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;效果&quot;&gt;&lt;strong&gt;效果：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170327162516674?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;smartupload解决乱码&quot;&gt;&lt;strong&gt;SmartUpload解决乱码&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;这个组件解决乱码问题有点麻烦，在网上找了各种办法也没找到简单的......&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;如果数据不涉及到中文就使用SmartUpload组件，涉及到中文数据就使用FileUpload组件吧！&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;假设我现在有多个文件要上传，而且要&lt;strong&gt;上传的个数是不确定的&lt;/strong&gt;。那么我们要怎么办呢？？？&lt;/p&gt;
&lt;p&gt;我们不可能列出很多很多个上传文件的控件在页面上，这样不美观。如果用户用不到那么多个控件，也浪费呀。&lt;/p&gt;
&lt;p&gt;所以，我们想要动态地增添上传文件的控件，&lt;strong&gt;如果用户还想要上传文件，只需要动态地生成控件出来即可！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;分析&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;要想在页面上动态地生成控件，无非就是使用JavaScript代码。&lt;/p&gt;
&lt;p&gt;那么我们要怎么做呢？？&lt;/p&gt;
&lt;p&gt;这样子吧：&lt;strong&gt;当用户想要上传文件的时候，就点击按钮，按钮绑定事件，生成文件上传的控件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了做得更加完善，&lt;strong&gt;每当生成了文件上传的控件，也提供一个删除按钮，删除该控件！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们&lt;strong&gt;应该使用div装载着我们要生成的控件和删除按钮，而用户点击删除的时候，应该是要把删除按钮和文件上传控件都一起隐藏起来的&lt;/strong&gt;。所以，最好就是使用&lt;strong&gt;嵌套div&lt;/strong&gt;！&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;代码&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;页面代码：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;table&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; border=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1px&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;上传用户：&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;添加上传文件&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;添加上传文件&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; onclick=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;addUploadFile()&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;javaScript代码&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;script type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;addUploadFile&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//生成文件上传控件&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; input &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;input&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;input&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'file'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;input&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'fileName'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;


            &lt;span class=&quot;co&quot;&gt;//生成删除按钮&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; del &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;input&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;del&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'button'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;del&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'删除'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//生成内部的div&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; innerDiv &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//将两个控件绑定到内部div上&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;innerDiv&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(input)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;innerDiv&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(del)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//得到外部div控件，并将内部div绑定到外部div上&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; outterDiv &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;file&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;outterDiv&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(innerDiv)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//为删除按钮绑定事件&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;del&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;dele&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;co&quot;&gt;//调用外界div的remove方法把内部的div干掉&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;parentNode&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;parentNode&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;removeChild&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;parentNode&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;ul&gt;&lt;li&gt;如果&lt;strong&gt;上传文件的大小大于我们设定文件的大小&lt;/strong&gt;，那么文件在&lt;strong&gt;上传的时候会使用临时文件保存上传数据&lt;/strong&gt;。在上传完毕后，我们&lt;strong&gt;应该删除临时文件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上传文件的位置是不能在WEB服务器管理之下的，否则可能造成安全问题【其他人有可能通过手段来修改上传文件】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果上传文件名相同，那么就会把原本的上传文件覆盖掉&lt;/strong&gt;。我们要生成一个独一无二的文件名。&lt;/li&gt;
&lt;li&gt;如果用户量很大，上传文件非常多。那么我们&lt;strong&gt;不应该在一个目录保存所有的上传文件，这样很可能造成磁盘奔溃了&lt;/strong&gt;。所以我们要&lt;strong&gt;把上传的文件打散到不同的目录下&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;分析-1&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;删除临时文件问题是非常简单的，只需要&lt;strong&gt;在所有的操作完毕之后，调用FileItem的delete()方法即可&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;让上传文件的位置不能在WEB服务器管理之下，我们&lt;strong&gt;把上传文件的位置放到WEB-INF/目录下即可！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文件名相同的问题，我们可以&lt;strong&gt;使用UUID+用户上传的文件名来作为我们保存上传文件名&lt;/strong&gt;。这样的文件名就是独一无二的了。&lt;/p&gt;
&lt;p&gt;要将上传的文件进行打散，那么我们需要&lt;strong&gt;使用HashCode算法来进行打散&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;低四位生成一级目录&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5-8位生成二级目录&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;代码-1&quot;&gt;代码&lt;/h2&gt;
&lt;p&gt;下面我们写一个比较完善的上传文件代码&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;使用hashCode算法来打散保存的目录&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;makeDirPath&lt;/span&gt;(String fileName, String path) {

        &lt;span class=&quot;co&quot;&gt;//通过文件名来算出一级目录和二级目录&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; hashCode = fileName.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;();
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; dir1 = hashCode &amp;amp; &lt;span class=&quot;bn&quot;&gt;0xf&lt;/span&gt;;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; dir2 = (hashCode &amp;amp; &lt;span class=&quot;bn&quot;&gt;0xf0&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;;

        String dir = path + &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; + dir1 + &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; + dir2;

        &lt;span class=&quot;co&quot;&gt;//如果该目录不存在，就创建目录&lt;/span&gt;
        File file = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; File(dir);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!file.&lt;span class=&quot;fu&quot;&gt;exists&lt;/span&gt;()) {

            file.&lt;span class=&quot;fu&quot;&gt;mkdirs&lt;/span&gt;();
        }
        &lt;span class=&quot;co&quot;&gt;//返回全路径&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; dir;

    }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;生成独一无二的文件名&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;makeFileName&lt;/span&gt;(String fileName) {

        &lt;span class=&quot;co&quot;&gt;//使用下划线把UUID和文件名分割开来，后面可能会解析文件名的。&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; UUID.&lt;span class=&quot;fu&quot;&gt;randomUUID&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;_&quot;&lt;/span&gt;+ fileName;

    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;上传的代码&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        &lt;span class=&quot;co&quot;&gt;//创建工厂&lt;/span&gt;
        DiskFileItemFactory factory = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DiskFileItemFactory&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//通过工厂创建解析器&lt;/span&gt;
        ServletFileUpload fileUpload = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ServletFileUpload&lt;/span&gt;(factory);

        &lt;span class=&quot;co&quot;&gt;//设置upload的编码&lt;/span&gt;
        fileUpload.&lt;span class=&quot;fu&quot;&gt;setHeaderEncoding&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//判断上传表单的类型&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;(!fileUpload.&lt;span class=&quot;fu&quot;&gt;isMultipartContent&lt;/span&gt;(request)){
            &lt;span class=&quot;co&quot;&gt;//上传表单为普通表单，则按照传统方式获取数据即可&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {

            &lt;span class=&quot;co&quot;&gt;//解析request对象，得到List【装载着上传的全部内容】&lt;/span&gt;
            List&amp;lt;FileItem&amp;gt; list = fileUpload.&lt;span class=&quot;fu&quot;&gt;parseRequest&lt;/span&gt;(request);

            &lt;span class=&quot;co&quot;&gt;//遍历List，判断装载的内容是普通字段还是上传文件&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (FileItem fileItem : list) {

                &lt;span class=&quot;co&quot;&gt;//如果是普通输入项&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (fileItem.&lt;span class=&quot;fu&quot;&gt;isFormField&lt;/span&gt;()) {

                    &lt;span class=&quot;co&quot;&gt;//得到输入项的名称和值&lt;/span&gt;
                    String name = fileItem.&lt;span class=&quot;fu&quot;&gt;getFieldName&lt;/span&gt;();
                    String value = fileItem.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);

                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(name + &lt;span class=&quot;st&quot;&gt;&quot; = &quot;&lt;/span&gt; + value);
                } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {

                    &lt;span class=&quot;co&quot;&gt;//如果是上传文件&lt;/span&gt;

                    &lt;span class=&quot;co&quot;&gt;//得到上传名称【包括路径名】&lt;/span&gt;
                    String fileName = fileItem.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();

                    &lt;span class=&quot;co&quot;&gt;//截取文件名&lt;/span&gt;
                    fileName = fileName.&lt;span class=&quot;fu&quot;&gt;substring&lt;/span&gt;(fileName.&lt;span class=&quot;fu&quot;&gt;lastIndexOf&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;) + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);

                    &lt;span class=&quot;co&quot;&gt;//生成独一无二的文件名&lt;/span&gt;
                    fileName = &lt;span class=&quot;fu&quot;&gt;makeFileName&lt;/span&gt;(fileName);

                    InputStream inputStream = fileItem.&lt;span class=&quot;fu&quot;&gt;getInputStream&lt;/span&gt;();

                    &lt;span class=&quot;co&quot;&gt;//得到项目的路径，把上传文件写到项目中&lt;/span&gt;
                    String path = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getServletContext&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getRealPath&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/WEB-INF/uploadFile&quot;&lt;/span&gt;);

                    &lt;span class=&quot;co&quot;&gt;//得到分散后的目录路径&lt;/span&gt;
                    String realPath = &lt;span class=&quot;fu&quot;&gt;makeDirPath&lt;/span&gt;(fileName, path);

                    FileOutputStream outputStream = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; FileOutputStream(realPath + &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; + fileName);

                    &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1024&lt;/span&gt;];
                    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
                    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; ((len = inputStream.&lt;span class=&quot;fu&quot;&gt;read&lt;/span&gt;(bytes)) &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
                        outputStream.&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(bytes, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, len);
                    }

                    inputStream.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
                    outputStream.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();

                    &lt;span class=&quot;co&quot;&gt;//删除临时文件的数据&lt;/span&gt;
                    fileItem.&lt;span class=&quot;fu&quot;&gt;delete&lt;/span&gt;();

                }
            }

        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (FileUploadException e) {
            e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;效果-1&quot;&gt;效果：&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;成功把目录打散，文件名也是独一无二的了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170327173915684?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;在讲解respose对象的时候已经讲解过文件下载了。这次我们就直接写一个小案例来巩固文件下载把。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;上传目录下的文件有3个&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170327183913502?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;分析-2&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;首先，要把目录下的文件都列出来。由于后&lt;strong&gt;面要根据文件名对文件进行下载，所以我们用一个Map集合来保存所有的文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下载文件部分也很简单，&lt;strong&gt;根据文件名和上传文件位置找到对应的文件，对其进行读写，然后修改消息头实现下载就好了。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;得到装载上传文件的路径，通过递归把所有的文件都查找出来（判断是否是文件就是递归出口），装载到Map集合中&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将Map集合传到前台做展示&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户点击下载的时候，再根据原名来获取绝对路径&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果该资源是存在的，就允许用户下载&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;代码-2&quot;&gt;代码&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;将存放在WEB-INF/目录下的文件全部放在Map集合中&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doPost&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; ServletException, IOException {


        &lt;span class=&quot;co&quot;&gt;//得到上传文件的目录&lt;/span&gt;
        String filePath = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getServletContext&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getRealPath&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/WEB-INF/uploadFile&quot;&lt;/span&gt;);

        Map map = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashMap();

        &lt;span class=&quot;co&quot;&gt;//使用递归来得到所有的文件，并添加到Map集合中&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;getAllFiles&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; File(filePath), map);

        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;map&quot;&lt;/span&gt;, map);
        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/listFile.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);



    }

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getAllFiles&lt;/span&gt;(File filePath, Map map) {

        &lt;span class=&quot;co&quot;&gt;//如果不是文件，那么它就是文件夹&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!filePath.&lt;span class=&quot;fu&quot;&gt;isFile&lt;/span&gt;()) {

            &lt;span class=&quot;co&quot;&gt;//列出文件夹下所有的文件（可能是文件，可能是文件夹）&lt;/span&gt;
            File[] files = filePath.&lt;span class=&quot;fu&quot;&gt;listFiles&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (File file : files) {

                &lt;span class=&quot;co&quot;&gt;//得到的文件（或者是文件夹）再对其进行判断&lt;/span&gt;
                &lt;span class=&quot;fu&quot;&gt;getAllFiles&lt;/span&gt;(file, map);
            }
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;//进入到else语句了，肯定是文件了&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//得到文件名&lt;/span&gt;
            String fileName = filePath.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;substring&lt;/span&gt;(filePath.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;lastIndexOf&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;_&quot;&lt;/span&gt;) + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);

            &lt;span class=&quot;co&quot;&gt;//我们将文件全名作为key，文件名作为value保存在map集合中&lt;/span&gt;
            map.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(filePath.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;(), fileName);

        }

    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;在JSP页面中显示可以下载的文件&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode jsp&quot;&gt;
&lt;code class=&quot;sourceCode jsp&quot;&gt;


&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:forEach&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; items&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${map}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; var&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;me&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;c:url&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; var&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;/DownFileServlet&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;c:param&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;fileName&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${me.key}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/c:param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:url&amp;gt;&lt;/span&gt;
    ${me.value}&amp;lt;a&lt;span class=&quot;ot&quot;&gt; href&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${url}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&amp;gt;下载！&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:forEach&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;实现下载的Servlet&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doPost&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; ServletException, IOException {

        &lt;span class=&quot;co&quot;&gt;//得到文件的全名&lt;/span&gt;
        String fileName = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;fileName&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//如果是中文数据，需要转码。&lt;/span&gt;
        fileName = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String(fileName.&lt;span class=&quot;fu&quot;&gt;getBytes&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ISO8859-1&quot;&lt;/span&gt;), &lt;span class=&quot;st&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//得到保存文件的位置&lt;/span&gt;
        String path = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getServletContext&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getRealPath&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/WEB-INF/uploadFile&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//文件是通过文件名进行hashCode打散保存的，通过文件名拿到文件绝对路径&lt;/span&gt;
        String fileRealPath = &lt;span class=&quot;fu&quot;&gt;makeFilePath&lt;/span&gt;(fileName, path);
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(fileRealPath);

        &lt;span class=&quot;co&quot;&gt;//判断文件是否存在&lt;/span&gt;
        File file = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; File(fileRealPath);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!file.&lt;span class=&quot;fu&quot;&gt;exists&lt;/span&gt;()) {
            request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;您要下载的资源不存在了！&quot;&lt;/span&gt;);
            request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ;
        }

        &lt;span class=&quot;co&quot;&gt;//存在&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//读取该文件并把数据写给浏览器&lt;/span&gt;
        FileInputStream inputStream = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; FileInputStream(fileRealPath);
        &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1024&lt;/span&gt;];
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; ((len = inputStream.&lt;span class=&quot;fu&quot;&gt;read&lt;/span&gt;(bytes)) &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
            response.&lt;span class=&quot;fu&quot;&gt;getOutputStream&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(bytes, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, len);
        }

        inputStream.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();


        &lt;span class=&quot;co&quot;&gt;//设置消息头，告诉浏览器，这是下载的文件&lt;/span&gt;
        String name = fileName.&lt;span class=&quot;fu&quot;&gt;substring&lt;/span&gt;(fileName.&lt;span class=&quot;fu&quot;&gt;lastIndexOf&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;_&quot;&lt;/span&gt;) + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
        response.&lt;span class=&quot;fu&quot;&gt;setHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;content-disposition&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;attachment;filename=&quot;&lt;/span&gt; + URLEncoder.&lt;span class=&quot;fu&quot;&gt;encode&lt;/span&gt;(name, &lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;));

    }

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;makeFilePath&lt;/span&gt;(String fileName, String path) {

        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; hashCode = fileName.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;();

        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; dir1 = hashCode &amp;amp; &lt;span class=&quot;bn&quot;&gt;0xf&lt;/span&gt;;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; dir2 = (hashCode &amp;amp; &lt;span class=&quot;bn&quot;&gt;0xf0&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;;

        String dir = path + &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; + dir1 + &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; + dir2 +&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;+ fileName;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; dir;
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;效果-2&quot;&gt;效果&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170327193259435?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章的同学，可以关注微信公众号:Java3y&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Wed, 07 Feb 2018 13:59:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8428591.html</dc:identifier>
</item>
<item>
<title>开源中文分词工具探析（六）：Stanford CoreNLP - Treant</title>
<link>http://www.cnblogs.com/en-heng/p/8428504.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/en-heng/p/8428504.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://github.com/stanfordnlp/CoreNLP&quot;&gt;CoreNLP&lt;/a&gt;是由斯坦福大学开源的一套Java NLP工具，提供诸如：词性标注（part-of-speech (POS) tagger）、命名实体识别（named entity recognizer (NER)）、情感分析（sentiment analysis）等功能。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;【开源中文分词工具探析】系列：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/en-heng/p/6225117.html&quot;&gt;中文分词工具探析（一）：ICTCLAS (NLPIR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/en-heng/p/6234006.html&quot;&gt;中文分词工具探析（二）：Jieba&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/en-heng/p/6274881.html&quot;&gt;中文分词工具探析（三）：Ansj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/en-heng/p/6429355.html&quot;&gt;开源中文分词工具探析（四）：THULAC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/en-heng/p/6559327.html&quot;&gt;开源中文分词工具探析（五）：FNLP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/en-heng/p/8428504.html&quot;&gt;开源中文分词工具探析（六）：Stanford CoreNLP&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;
&lt;p&gt;CoreNLP的&lt;a href=&quot;http://nlp.stanford.edu/software/segmenter.shtml&quot;&gt;中文分词&lt;/a&gt;基于&lt;a href=&quot;http://www.cnblogs.com/en-heng/p/6214023.html&quot;&gt;CRF&lt;/a&gt;模型：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ P_w(y|x) = \frac{exp \left( \sum_i w_i f_i(x,y) \right)}{Z_w(x)} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;span class=&quot;math inline&quot;&gt;\(Z_w(x)\)&lt;/span&gt;为归一化因子，&lt;span class=&quot;math inline&quot;&gt;\(w\)&lt;/span&gt;为模型的参数，&lt;span class=&quot;math inline&quot;&gt;\(f_i(x,y)\)&lt;/span&gt;为特征函数。&lt;/p&gt;

&lt;p&gt;以下源码分析基于3.7.0版本，分词示例见&lt;code&gt;SegDemo&lt;/code&gt;类。&lt;/p&gt;
&lt;h2 id=&quot;模型&quot;&gt;模型&lt;/h2&gt;
&lt;p&gt;主要模型文件有两份，一份为词典文件&lt;code&gt;dict-chris6.ser.gz&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// dict-chris6.ser.gz 对应于长度为7的Set数组词典&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 共计词数：0+7323+125336+142252+82139+26907+39243&lt;/span&gt;
ChineseDictionary::&lt;span class=&quot;fu&quot;&gt;loadDictionary&lt;/span&gt;(String serializePath) {
    Set&amp;lt;String&amp;gt;[] dict = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashSet[MAX_LEXICON_LENGTH + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;];
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt;= MAX_LEXICON_LENGTH; i++) {
        dict[i] = Generics.&lt;span class=&quot;fu&quot;&gt;newHashSet&lt;/span&gt;();
    }
    dict = IOUtils.&lt;span class=&quot;fu&quot;&gt;readObjectFromURLOrClasspathOrFileSystem&lt;/span&gt;(serializePath);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; dict;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;词典的索引值为词的长度，比如第0个词典中没有词，第1个词典为长度为1的词，第6个词典为长度为6的词。其中，第6个词典为半成词，比如，有词“《双峰》（电”、“８０年国家领”、“１８２４年英”。&lt;/p&gt;
&lt;p&gt;另一份为CRF训练模型文件&lt;code&gt;/ctb.gz&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;CRFClassifier::&lt;span class=&quot;fu&quot;&gt;loadClassifier&lt;/span&gt;(ObjectInputStream ois, Properties props) {
    Object o = ois.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;();
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (o &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; List) {
        labelIndices = (List&amp;lt;Index&amp;lt;CRFLabel&amp;gt;&amp;gt;) o; &lt;span class=&quot;co&quot;&gt;// label索引&lt;/span&gt;
    }
    classIndex = (Index&amp;lt;String&amp;gt;) ois.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// 序列标注label&lt;/span&gt;
    featureIndex = (Index&amp;lt;String&amp;gt;) ois.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// 特征&lt;/span&gt;
    flags = (SeqClassifierFlags) ois.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// 模型配置&lt;/span&gt;

    Object featureFactory = ois.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// 特征模板，用于生成特征&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (featureFactory &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; FeatureFactory) {
        featureFactories = Generics.&lt;span class=&quot;fu&quot;&gt;newArrayList&lt;/span&gt;();
        featureFactories.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;((FeatureFactory&amp;lt;IN&amp;gt;) featureFactory);
    }

    windowSize = ois.&lt;span class=&quot;fu&quot;&gt;readInt&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// 窗口大小为2&lt;/span&gt;
    weights = (&lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt;[][]) ois.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// 特征+label 对应的权重&lt;/span&gt;

    Set&amp;lt;String&amp;gt; lcWords = (Set&amp;lt;String&amp;gt;) ois.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// Set为空&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        knownLCWords = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; MaxSizeConcurrentHashSet&amp;lt;&amp;gt;(lcWords);
    }

    &lt;span class=&quot;fu&quot;&gt;reinit&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不同于其他分词器采用B、M、E、S四种label来做分词，CoreNLP的中文分词label只有两种，“1”表示当前字符与前一字符连接成词，“0”则表示当前字符为另一词的开始——换言之前一字符为上一个词的结尾。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CRFClassifier {
    classIndex: &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; edu.&lt;span class=&quot;fu&quot;&gt;stanford&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;nlp&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;util&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;HashIndex&lt;/span&gt;
      [&lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt;]
}

&lt;span class=&quot;co&quot;&gt;// 中文分词label对应的类&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; AnswerAnnotation &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; CoreAnnotation&amp;lt;String&amp;gt;{}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;特征&quot;&gt;特征&lt;/h2&gt;
&lt;p&gt;CoreNLP的特征如下（示例）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CRFClassifier {
    &lt;span class=&quot;co&quot;&gt;// 特征&lt;/span&gt;
    featureIndex: &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; edu.&lt;span class=&quot;fu&quot;&gt;stanford&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;nlp&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;util&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;HashIndex&lt;/span&gt;
        size = &lt;span class=&quot;dv&quot;&gt;3408491&lt;/span&gt;
        &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;=的膀cc2|C
        &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;=身也pc|C
        &lt;span class=&quot;dv&quot;&gt;44&lt;/span&gt;=LSSLp2spscsc2s|C
        &lt;span class=&quot;dv&quot;&gt;45&lt;/span&gt;=科背p2p|C
        &lt;span class=&quot;dv&quot;&gt;46&lt;/span&gt;=迪。cc2|C
        ...
        =球-行pc2|CnC
        =音非cc2|CpC
    
    &lt;span class=&quot;co&quot;&gt;// 权重&lt;/span&gt;
    weights: &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;3408491&lt;/span&gt;][&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]
        [[&lt;span class=&quot;fl&quot;&gt;2.2114868426005005E-5&lt;/span&gt;, -&lt;span class=&quot;fl&quot;&gt;2.2114868091546352E-5&lt;/span&gt;]...]
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特征后缀只有3类：C, CpC, CnC，分别代表了三大类特征；均由特征模板生成：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 特征模板List&lt;/span&gt;
featureFactories: ArrayList&amp;lt;FeatureFactory&amp;gt;
    &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; = Gale2007ChineseSegmenterFeatureFactory

&lt;span class=&quot;co&quot;&gt;// 具体特征模板&lt;/span&gt;
Gale2007ChineseSegmenterFeatureFactory::&lt;span class=&quot;fu&quot;&gt;getCliqueFeatures&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (clique == cliqueC) {
        &lt;span class=&quot;fu&quot;&gt;addAllInterningAndSuffixing&lt;/span&gt;(features, &lt;span class=&quot;fu&quot;&gt;featuresC&lt;/span&gt;(cInfo, loc), &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt;);
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (clique == cliqueCpC) {
        &lt;span class=&quot;fu&quot;&gt;addAllInterningAndSuffixing&lt;/span&gt;(features, &lt;span class=&quot;fu&quot;&gt;featuresCpC&lt;/span&gt;(cInfo, loc), &lt;span class=&quot;st&quot;&gt;&quot;CpC&quot;&lt;/span&gt;);
        &lt;span class=&quot;fu&quot;&gt;addAllInterningAndSuffixing&lt;/span&gt;(features, &lt;span class=&quot;fu&quot;&gt;featuresCnC&lt;/span&gt;(cInfo, loc - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;st&quot;&gt;&quot;CnC&quot;&lt;/span&gt;);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特征模板只用到了两个特征簇&lt;code&gt;cliqueC&lt;/code&gt;与&lt;code&gt;cliqueCpC&lt;/code&gt;，其中，&lt;code&gt;cliqueC&lt;/code&gt;由函数&lt;code&gt;featuresC()&lt;/code&gt;实现，&lt;code&gt;cliqueCpC&lt;/code&gt;由函数&lt;code&gt;featuresCpC()&lt;/code&gt;与&lt;code&gt;featuresCnC()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;26&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
Gale2007ChineseSegmenterFeatureFactory::&lt;span class=&quot;fu&quot;&gt;featuresC&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useWord1&lt;/span&gt;) {
        &lt;span class=&quot;co&quot;&gt;// Unigram 特征&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charc +&lt;span class=&quot;st&quot;&gt;&quot;::c&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[0]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charc2+&lt;span class=&quot;st&quot;&gt;&quot;::c2&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[1]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp +&lt;span class=&quot;st&quot;&gt;&quot;::p&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[-1]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp2 +&lt;span class=&quot;st&quot;&gt;&quot;::p2&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[-2]&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;// Bigram 特征&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charc +charc2  +&lt;span class=&quot;st&quot;&gt;&quot;::cn&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[0]c[1]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charc +charc3  +&lt;span class=&quot;st&quot;&gt;&quot;::cn2&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[0]c[2]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp +charc  +&lt;span class=&quot;st&quot;&gt;&quot;::pc&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[-1]c[0]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp +charc2  +&lt;span class=&quot;st&quot;&gt;&quot;::pn&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[-1]c[1]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp2 +charp  +&lt;span class=&quot;st&quot;&gt;&quot;::p2p&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[-2]c[-1]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp2 +charc  +&lt;span class=&quot;st&quot;&gt;&quot;::p2c&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[-2]c[0]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charc2 +charc  +&lt;span class=&quot;st&quot;&gt;&quot;::n2c&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[1]c[0]&lt;/span&gt;
    }

    &lt;span class=&quot;co&quot;&gt;// 三个字符c[-1]c[0]c[1]对应的LBeginAnnotation、LMiddleAnnotation、LEndAnnotation 三种label特征&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 结果特征分别以6种形式结尾，&quot;-lb&quot;, &quot;-lm&quot;, &quot;-le&quot;, &quot;-plb&quot;, &quot;-plm&quot;, &quot;-ple&quot;, &quot;-c2lb&quot;, &quot;-c2lm&quot;, &quot;-c2le&quot;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// null || &quot;.../models/segmenter/chinese/dict-chris6.ser.gz&quot;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;dictionary&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; || flags.&lt;span class=&quot;fu&quot;&gt;serializedDictionary&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
        &lt;span class=&quot;fu&quot;&gt;dictionaryFeaturesC&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;LBeginAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;,
                CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;LMiddleAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;,
                CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;LEndAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;,
                &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;, features, p, c, c2);
    }

    &lt;span class=&quot;co&quot;&gt;// 特征 c[1]c[0], c[1]&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useFeaturesC4gram&lt;/span&gt; || flags.&lt;span class=&quot;fu&quot;&gt;useFeaturesC5gram&lt;/span&gt; || flags.&lt;span class=&quot;fu&quot;&gt;useFeaturesC6gram&lt;/span&gt;) {
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp2 + charp + &lt;span class=&quot;st&quot;&gt;&quot;p2p&quot;&lt;/span&gt;);
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp2 + &lt;span class=&quot;st&quot;&gt;&quot;p2&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;co&quot;&gt;// Unicode特征&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useUnicodeType&lt;/span&gt; || flags.&lt;span class=&quot;fu&quot;&gt;useUnicodeType4gram&lt;/span&gt; || flags.&lt;span class=&quot;fu&quot;&gt;useUnicodeType5gram&lt;/span&gt;) {
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(uTypep + &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt; + uTypec + &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt; + uTypec2 + &lt;span class=&quot;st&quot;&gt;&quot;-uType3&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;co&quot;&gt;// UnicodeType特征&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useUnicodeType4gram&lt;/span&gt; || flags.&lt;span class=&quot;fu&quot;&gt;useUnicodeType5gram&lt;/span&gt;) {
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(uTypep2 + &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt; + uTypep + &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt; + uTypec + &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt; + uTypec2 + &lt;span class=&quot;st&quot;&gt;&quot;-uType4&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;co&quot;&gt;// UnicodeBlock特征&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useUnicodeBlock&lt;/span&gt;) {
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(p.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;UBlockAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;) + &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt;
                + c.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;UBlockAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;) + &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt;
                + c2.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;UBlockAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                + &lt;span class=&quot;st&quot;&gt;&quot;-uBlock&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;co&quot;&gt;// Shape特征&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useShapeStrings&lt;/span&gt;) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useShapeStrings1&lt;/span&gt;) {
            features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(p.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;) + &lt;span class=&quot;st&quot;&gt;&quot;ps&quot;&lt;/span&gt;);
            features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(c.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;) + &lt;span class=&quot;st&quot;&gt;&quot;cs&quot;&lt;/span&gt;);
            features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(c2.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;) + &lt;span class=&quot;st&quot;&gt;&quot;c2s&quot;&lt;/span&gt;);
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useShapeStrings3&lt;/span&gt;) {
            features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(p.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + c.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + c2.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + &lt;span class=&quot;st&quot;&gt;&quot;pscsc2s&quot;&lt;/span&gt;);
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useShapeStrings4&lt;/span&gt;) {
            features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(p2.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + p.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + c.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + c2.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + &lt;span class=&quot;st&quot;&gt;&quot;p2spscsc2s&quot;&lt;/span&gt;);
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useShapeStrings5&lt;/span&gt;) {
            features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(p2.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + p.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + c.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + c2.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + c3.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + &lt;span class=&quot;st&quot;&gt;&quot;p2spscsc2sc3s&quot;&lt;/span&gt;);
        }
    }
}

Gale2007ChineseSegmenterFeatureFactory::&lt;span class=&quot;fu&quot;&gt;featuresCpC&lt;/span&gt;() {}

Gale2007ChineseSegmenterFeatureFactory::&lt;span class=&quot;fu&quot;&gt;featuresCnC&lt;/span&gt;() {}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;三大类特征分别以“|C”为结尾（共计有32个）、以“|CpC”结尾（共计有37个）、以“|CnC”结尾（共计有9个）；总计78个特征。个人感觉CoreNLP定义的特征过于复杂，大部分特征并没有什么用。&lt;/p&gt;
&lt;p&gt;CoreNLP后面处理流程跟其他分词器别无二样了，求每个label的权重加权之和，Viterbi解码求解最大概率路径，解析label序列得到分词结果。CoreNLP分词速度巨慢，效果也一般，在PKU、MSR测试集上的表现如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;PKU&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;thulac4j&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.948&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.936&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;0.942&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;/&gt;
&lt;td align=&quot;center&quot;&gt;CoreNLP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.901&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.894&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.897&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;MSR&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;thulac4j&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.866&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.896&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;0.881&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;/&gt;
&lt;td align=&quot;center&quot;&gt;CoreNLP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.822&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.859&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.840&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;[1] Huihsin, Tseng, et al. &quot;A conditional random field word segmenter.&quot; Fourth SIGHAN Workshop. 2005.&lt;br/&gt;[2] Chang, Pi-Chuan, Michel Galley, and Christopher D. Manning. &quot;Optimizing Chinese word segmentation for machine translation performance.&quot; Proceedings of the third workshop on statistical machine translation. Association for Computational Linguistics, 2008.&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 13:24:00 +0000</pubDate>
<dc:creator>Treant</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/en-heng/p/8428504.html</dc:identifier>
</item>
<item>
<title>记开发过的一款无线音箱解决方案 - davidtym</title>
<link>http://www.cnblogs.com/talkaudiodev/p/8428434.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/talkaudiodev/p/8428434.html</guid>
<description>&lt;p&gt;从2017年开始国外智能音箱的热潮席卷到国内，各大小厂商都推出了智能音箱，主要有阿里的天猫精灵京东的叮咚和小米的小爱同学等。我也在去年双11入手了一款智能音箱（天猫精灵），体验下来总体感觉还是不错的，我相信这股热潮在今年（2018）会愈演愈热。有报道说美国的青年有了智能音箱后对手机的依赖度有所下降，即有些事情可以通过智能音箱解决了，这种现象在国内也会出现。智能音箱是在无线音箱的基础上加上人工智能（AI）发展起来的。几年前无线音箱也火过，推出了好多产品，有基于bluetooth的，也有基于WiFi的。基于bluetooth的是主流，基于WiFi的不多，但是现在智能音箱都是基于WiFi的。那时我还在芯片公司，我们team的语音解决方案已经做得很成熟，老板就让我们用自己公司的芯片做主芯片，开发一个基于WiFi的无线音箱解决方案。&lt;/p&gt;

&lt;p&gt;无线音箱先由手机去配置连到某个无线路由器上，手机也连到这个无线路由器上， 这样手机上的音乐播放器就可以把音乐在无线音箱上播放了。既可以把手机本机上的歌曲推送到音箱上播放，也可以把云端的歌曲推送到音箱上播放。支持的协议有DLNA和Airplay，主流的音乐播放器（QQ音乐/酷狗音乐/网易云音乐等）均支持，也支持苹果的音乐播放器（Airplay）。支持的音乐格式很多，有MP3/AAC/OGG/APE/WMA/ALAC/FLAC等，支持音乐双声道立体声播放，但是在一个音箱上效果不明显。如果有两个这样的音箱，又用上公司开发的相应的音乐播放APP，可以把左声道的数据推送到一个音箱上，右声道的数据推送到另一个音箱上，产生较强的立体声效果。&lt;/p&gt;

&lt;p&gt;无线音箱的软件实现是在openWrt上开发的，这样无线相关的软件全都好了，我们只要开发音频相关的软件。音频相关的绝大多数是基于开源的开发，协议的DLNA用的是sharepoint，AirPlay用的是gmediarender，音乐格式解析及解码等用的是FFMPEG，音频的播放用的是ALSA。Sharepoint和gmediarender基本上是拿来用，在接口上改了一点点，调用我们做好的API实现与我们自己软件的通信。FFMPEG主要是增加decoder，同时还要对decoder优化使其能流畅的运行。我们自己的软件就是搭一个框架（实现一个process）把这些开源实现给串起来，形成一个无线音箱音乐播放方案。解决方案的软件框图如下：&lt;/p&gt;
&lt;p&gt;                                        &lt;img src=&quot;https://images2017.cnblogs.com/blog/1181527/201802/1181527-20180207204124670-796959395.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;我们实现的process叫mediaplay, 它与协议（DLNA/AirPlay）之间通过share memory通信，从而实现音乐的播放暂停停止等。Mediaplay会调用FFMPEG提供的API去解析音乐格式，并一帧一帧的解码得到PCM数据放进ring buffer中，然后用mutex block住mediaplay。Mediaplay向ALSA注册了回调函数，每隔一帧时长就会被调用一次，取走ring buffer中一帧PCM数据，并解锁mutex使mediaplay继续循环运行去解码下一帧。在一首歌开始解码时一般会缓存若干帧在ring buffer中然后才使能播放，这样做虽然增加了一两百毫秒的delay，但是保证了播放时的连续流畅性，不会出现噪声。再说音乐播放是非实时业务，一两百毫秒的delay对用户是不敏感的。&lt;/p&gt;

&lt;p&gt;我们team共4人。一人负责ALSA（包括driver和ALSA-Lib的调用），一人负责软件框架（即实现mediaplay process及里面的控制逻辑）,一人负责DLNA/AirPlay协议的移植以及与mediaplay的通信，我负责FFMPEG、decoder优化以及把优化好的decoder lib集成到FFMPEG中，同时还负责后处理（主要是EQ）。用开源的好处是网上资料很多。我开始前先在网上搜怎么编译FFMPEG生成动态库，以及怎么使能一些decoder不使能一些decoder等。这些搞定后就调研我们需要的decoder（MP3/AAC/APE/OGG/WMA/FLAC/ALAC）FFMPEG是否都支持，哪些是定点实现的，哪些是浮点实现的（我们是在ARM上做软件方案，且CPU只有500兆，一定要用定点实现，浮点实现CPU load扛不住）。调研下来这些decoder FFMPEG都支持，但是AAC/OGG/WMA是浮点实现的。做了个小应用程序（代码中调用FFMPEG的API）在芯片上去播放这些格式的音乐，明显播放速度变慢了，这就需要去找这些decoder的定点实现来替换浮点实现。又到网上搜这些decoder定点实现中哪个应用最广泛（在网上快速搜到自己想要的东西也是一种能力，我就在那时候这方面的能力得到了提高，并且养成了要找开源首先去GitHub的习惯。给GitHub打广告了，哈哈）。&lt;/p&gt;

&lt;p&gt;对于AAC，搜下来定点方案中较好的是3GPP中AAC的参考实现。由于是3GPP的reference code，质量肯定没问题，就决定用它了。刚开始未优化时在我们芯片上跑下来load是2000多MCPS，后来一步步优化到不到200MCPS，可以在芯片上高枕无忧的运行了，也就没再继续优化，还要去忙其他的decoder呢。至于怎么优化的可以看我前面写过的一片文章（&lt;a href=&quot;http://www.cnblogs.com/talkaudiodev/p/7502193.html&quot;&gt;音频的编解码及其优化方法和经验&lt;/a&gt;），这里就不具体描述了，通常优化都是有套路的。优化好后就要把静态库集成到FFMPEG中，并且加相应的适配代码，使其能正常运行。那时（2013年）网上关于这方面的描述不多，我也是一边搜索一边尝试，最终把AAC的定点实现库成功集成到FFMPEG中了。这里也简单说一下怎么加decoder的库到FFMPEG 中，给有需要的做个参考。主要有以下几个步骤：&lt;/p&gt;
&lt;p&gt;1）把decoder调好，得到库文件和头文件&lt;/p&gt;
&lt;p&gt;2）修改FFMPEG的configure&lt;/p&gt;
&lt;p&gt;3）在allcodecs.c中加上REGISTER_DECODER()，注册这个decoder&lt;/p&gt;
&lt;p&gt;4）在libavcodec目录中加上这个decoder的适配文件（*.c），同时修改libavcodec下的makefile，使这个适配文件能编进去&lt;/p&gt;
&lt;p&gt;5）修改./configure 使这个decoder使能，同时告诉相应的库路径和头文件路径&lt;/p&gt;

&lt;p&gt;OGG格式的解码用的是Vorbis，其官网（www.xiph.org）上就有定点实现。本来load就不高，把他简单优化一下就可以用了，然后做成静态库集成到FFMPEG中。从找定点实现到集成到FFMPEG中用了不到一星期时间，可以说是非常顺利。WMA就没有这么顺利了，废了一番波折，主要是因为微软不提供定点实现。在网上花了一些时间搜索，某个国外论坛里有人说RockBox里有WMA的定点实现。把RockBox download下来在Ubuntu下生成一个带界面的应用程序，播放一个WMA格式的音乐，可以正常播放。接下来就是把WMA的定点实现从RockBox中剥离出来，它与其他代码耦合的比较深，剥离花了些时间，最终还是成功剥离了，又花了点时间简单优化下并做成库集成进FFMPEG中。这样三个decoder的优化及集成就搞定了。&lt;/p&gt;

&lt;p&gt;Decoder搞定后就开始做后处理，主要做均衡化（EQ），它是通过改变不同频段上的gain值从而产生不同的音效，有摇滚、经典、古典、爵士舞曲等10种模式。从信号处理的角度看，EQ就是一个两阶IIR滤波器。用户在手机APP上指定想要的模式后模式ID就会发到音箱上，软件就会根据ID得到相应的参数做EQ后处理。依旧在网上找定点实现，找到后先做一个应用程序验证效果。验证好后就开始把它用到我们的产品中并和其他模块联调。调试好后看到我们的无线音箱也支持音效特别有成就感。&lt;/p&gt;

&lt;p&gt;经过我们几个月的努力，无线音箱解决方案完成了，也陆续得到客户的认可，采用我们的方案。对我个人而言，从语音扩展到了音乐，音频的知识面更广了。&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 12:58:00 +0000</pubDate>
<dc:creator>davidtym</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/talkaudiodev/p/8428434.html</dc:identifier>
</item>
<item>
<title>Python之Django rest_Framework(2) - 孟庆健</title>
<link>http://www.cnblogs.com/mengqingjian/p/8428053.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mengqingjian/p/8428053.html</guid>
<description>&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;实例化：
v1 &lt;/span&gt;= [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;view.xxx.path.Role&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;view.xxx.path.Group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,]    可以循环，循环出来的每一个不能实例化
如果把v1循环弄成每一个对象列表，通过rsplit切割，在通过importlib.import_module拿到每一个路径，在通过getattr把它的类名拿过来，&lt;br/&gt;这个类加括号就是实例化想
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; v1:
m &lt;/span&gt;= importlib.import_module(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;view.xxx.path&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
cls &lt;/span&gt;= getattr(m,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Role&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
cls()



&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; view.xxx.path &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Role,Group      
v2 &lt;/span&gt;=&lt;span&gt; [Group,Role]      这个可以循环每一个实例化
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt; v2:     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;循环V2的每一个元素加括号，就是实例化&lt;/span&gt;
item()&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;rest_Framework的规范：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;    按顺序：它的method的不同，原来没有考虑，原来是url区分，现在通过method来区分，method的不同提交方式不同，紧接着一般是面向资源的就是把url变成名词，接下就是返回值，以前没有考虑状态码，现在有考虑状态码。（一般有get，post方法，还有put,delete等方法）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、Django rest_Framework框架&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;   ----为什么用Django rest_Framework框架？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;            ----首先没有&lt;/strong&gt;Django rest_Framework框架用django也是可以做出来的，只不过它为我们提供一些API常用的功能，比如：（认证，权限，限流，有了这些我们只需要写个类已配置，它就能当都市图用，还能全局配置，如果自己写还得写中间件，写装饰器来实现，通过&lt;strong&gt;&lt;strong&gt;Django rest_Framework框架，他已经把规则写好，只需要写类，只需实现方法，返回值就可以&lt;/strong&gt;&lt;/strong&gt;）&lt;/span&gt;实现了一部分功能。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;  ----设计比较好&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;            ----单独视图+全局配置 =&amp;gt;Dajngo中间件（importlib/反射）=&amp;gt;动态配置课扩展（短信，邮件，微信等提醒）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、Django rest_Framework原理？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;        先开始在路由，路由.as_view：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197755/201802/1197755-20180207154604685-441773544.png&quot; alt=&quot;&quot; width=&quot;403&quot; height=&quot;325&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;点击as_view&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://images2017.cnblogs.com/blog/1197755/201802/1197755-20180207155715013-230538091.png&quot; alt=&quot;&quot; width=&quot;356&quot; height=&quot;297&quot;/&gt;        &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197755/201802/1197755-20180207155829716-1635047046.png&quot; alt=&quot;&quot; width=&quot;341&quot; height=&quot;251&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;请求进来，走完以上，才走self.dispatch()&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;走&lt;/strong&gt;self.dispatch()&lt;/span&gt;流程如下地址：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: Python之Django rest_Framework框架认证源码分析&quot; href=&quot;http://www.cnblogs.com/mengqingjian/p/8419563.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/mengqingjian/p/8419563.html&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、版本&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;a.根据url的不同来来操作，版本控制&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;先在setting中注册&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_8413af73-dc75-4f0c-a8fe-fd0e9d077114&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8413af73-dc75-4f0c-a8fe-fd0e9d077114&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8413af73-dc75-4f0c-a8fe-fd0e9d077114&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.conf.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; url,include
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.contrib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; admin

urlpatterns &lt;/span&gt;=&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;url(r'^admin/', admin.site.urls),&lt;/span&gt;
    url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^api/(?P&amp;lt;version&amp;gt;[v1|v2]+)/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;api.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; url(r'^api/', include('api.urls')),&lt;/span&gt;
    url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^backend/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;backend.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;url&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_a07b68d4-d6e5-4772-870e-ddb65bace5f7&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a07b68d4-d6e5-4772-870e-ddb65bace5f7&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a07b68d4-d6e5-4772-870e-ddb65bace5f7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
REST_FRAMEWORK =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;VERSION_PARAM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSION&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ALLOWED_VERSIONS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 'DEFAULT_VERSIONING_CLASS':&quot;rest_framework.versioning.HostNameVersioning&quot;&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSIONING_CLASS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rest_framework.versioning.URLPathVersioning&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;settings.py配置&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_b53d329b-6357-4581-bbb9-f9a3147ed8b7&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b53d329b-6357-4581-bbb9-f9a3147ed8b7&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b53d329b-6357-4581-bbb9-f9a3147ed8b7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.views &lt;span&gt;import&lt;/span&gt;&lt;span&gt; APIView
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.response &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Response
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.authentication &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BasicAuthentication
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.versioning &lt;span&gt;import&lt;/span&gt;&lt;span&gt; QueryParameterVersioning,URLPathVersioning,HostNameVersioning
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.renderers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BrowsableAPIRenderer,JSONRenderer

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 基于url传参&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; versioning_class = QueryParameterVersioning&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 基于URL http://127.0.0.1:8001/api/v2/users/&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; versioning_class = URLPathVersioning&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 基于子域名 http://v1.luffy.com/users/&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; versioning_class = HostNameVersioning&lt;/span&gt;


    &lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
        self.dispatch
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request.version) # QueryParameterVersioning().detemiin_version()&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request.versioning_scheme) # QueryParameterVersioning()&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 当前版本一样的URL&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; url = request.versioning_scheme.reverse(viewname='u',request=request)&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(url)&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 当前版本不一样的URL&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; from django.urls import reverse&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; url = reverse(viewname='u',kwargs={'version':'v2'})&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(url)&lt;/span&gt;


        &lt;span&gt;return&lt;/span&gt; Response(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;views.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_073947b7-6a3c-45a0-bd14-c22f5ec1c5ad&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_073947b7-6a3c-45a0-bd14-c22f5ec1c5ad&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_073947b7-6a3c-45a0-bd14-c22f5ec1c5ad&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.conf.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; url,include
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; . &lt;span&gt;import&lt;/span&gt;&lt;span&gt; views
urlpatterns &lt;/span&gt;=&lt;span&gt; [
    url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^users/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.UsersView.as_view(),name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;url.py -----和view在一个APP中的路由&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;b、&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt; HostName
            urlpatterns &lt;/span&gt;=&lt;span&gt; [
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;url(r'^admin/', admin.site.urls),&lt;/span&gt;
                url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^api/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;api.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
            ]

            urlpatterns &lt;/span&gt;=&lt;span&gt; [
                url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^users/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.UsersView.as_view(),name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
            ]
            
            
            &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                
                &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                    self.dispatch
                    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(request.version) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; QueryParameterVersioning().detemiin_version()&lt;/span&gt;
                    &lt;span&gt;print&lt;/span&gt;(request.versioning_scheme) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; QueryParameterVersioning()&lt;/span&gt;
&lt;span&gt;
            
            REST_FRAMEWORK &lt;/span&gt;=&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;VERSION_PARAM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSION&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ALLOWED_VERSIONS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSIONING_CLASS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rest_framework.versioning.HostNameVersioning&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            }
            
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; C:\Windows\System32\drivers\etc&lt;/span&gt;
            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; vim /etc/hosts&lt;/span&gt;
            127.0.0.1&lt;span&gt;    v1.luffy.com
            &lt;/span&gt;127.0.0.1    v2.luffy.com&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、rest framework解析器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;请求的数据进行解析：请求体进行解析。表示服务端可以解析的数据格式的种类。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;Content-Type: application/url-&lt;span&gt;encoding.....
            request.body
            request.POST
            
            Content&lt;/span&gt;-Type: application/&lt;span&gt;json.....
            request.body
            request.POST
        
        客户端：
            Content&lt;/span&gt;-Type: application/&lt;span&gt;json
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{&quot;name&quot;:&quot;alex&quot;,&quot;age&quot;:123}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        
        服务端接收：
            读取客户端发送的Content&lt;/span&gt;-Type的值 application/&lt;span&gt;json
            
            parser_classes &lt;/span&gt;=&lt;span&gt; [JSONParser,]
            media_type_list &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,]
        
            如果客户端的Content&lt;/span&gt;-Type的值和 application/&lt;span&gt;json 匹配：JSONParser处理数据
            如果客户端的Content&lt;/span&gt;-Type的值和 application/x-www-form-&lt;span&gt;urlencoded 匹配：FormParser处理数据
        
        
        配置：
            单视图：
            &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                parser_classes &lt;/span&gt;=&lt;span&gt; [JSONParser,]
                
            全局配置：
                REST_FRAMEWORK &lt;/span&gt;=&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;VERSION_PARAM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSION&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ALLOWED_VERSIONS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
                    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 'DEFAULT_VERSIONING_CLASS':&quot;rest_framework.versioning.HostNameVersioning&quot;&lt;/span&gt;
                    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSIONING_CLASS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rest_framework.versioning.URLPathVersioning&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_PARSER_CLASSES&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:[
                        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rest_framework.parsers.JSONParser&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rest_framework.parsers.FormParser&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    ]
                }&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_8d60eb81-82ec-43dc-96e9-53d37d79b8a7&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8d60eb81-82ec-43dc-96e9-53d37d79b8a7&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8d60eb81-82ec-43dc-96e9-53d37d79b8a7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.conf.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; url,include
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.contrib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; admin

urlpatterns &lt;/span&gt;=&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;url(r'^admin/', admin.site.urls),&lt;/span&gt;
    url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^api/(?P&amp;lt;version&amp;gt;[v1|v2]+)/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;api.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; url(r'^api/', include('api.urls')),&lt;/span&gt;
    url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^backend/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;backend.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;url.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_3942d720-bff7-46ed-8a36-b339c0a4ebc1&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3942d720-bff7-46ed-8a36-b339c0a4ebc1&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3942d720-bff7-46ed-8a36-b339c0a4ebc1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
REST_FRAMEWORK =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;VERSION_PARAM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSION&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ALLOWED_VERSIONS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 'DEFAULT_VERSIONING_CLASS':&quot;rest_framework.versioning.HostNameVersioning&quot;&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSIONING_CLASS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rest_framework.versioning.URLPathVersioning&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_PARSER_CLASSES&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:[
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rest_framework.parsers.JSONParser&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rest_framework.parsers.FormParser&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;setting.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_5bda7102-7bce-49e5-8e45-fa1dcf6def79&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5bda7102-7bce-49e5-8e45-fa1dcf6def79&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5bda7102-7bce-49e5-8e45-fa1dcf6def79&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.views &lt;span&gt;import&lt;/span&gt;&lt;span&gt; APIView
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.response &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Response
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.authentication &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BasicAuthentication
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.versioning &lt;span&gt;import&lt;/span&gt;&lt;span&gt; QueryParameterVersioning,URLPathVersioning,HostNameVersioning
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.renderers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BrowsableAPIRenderer,JSONRenderer
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.parsers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; JSONParser,FormParser
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.request &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Request
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
        self.dispatch
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; post(self,request,*args,**&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; # application/json&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request._request.body) # b&quot;xxxxx&quot;   decode()   json.loads&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request._request.POST) # 无&lt;/span&gt;
        &lt;span&gt;#
&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; # www-form-url-encode&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request._request.body)&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request._request.POST)&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request.data)&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request.POST)&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request.FILES)&lt;/span&gt;
&lt;span&gt;
        request.data
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;views.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_27c49923-4551-4022-be3a-51a8f8bb9164&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_27c49923-4551-4022-be3a-51a8f8bb9164&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_27c49923-4551-4022-be3a-51a8f8bb9164&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.conf.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; url,include
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; . &lt;span&gt;import&lt;/span&gt;&lt;span&gt; views
urlpatterns &lt;/span&gt;=&lt;span&gt; [
    url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^users/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.UsersView.as_view(),name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;url.py 和view一个APP下的文件&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;五、 rest framework序列化+Form&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;序列化：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;        对象 -&amp;gt; 字符串 序列化&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;        字符串 -&amp;gt; 对象 反序列化&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;目的：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;        解决QuerySet序列化问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;序列化：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;a、基本操作&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.Serializer):
                    name &lt;/span&gt;=&lt;span&gt; serializers.CharField()
                    pwd &lt;/span&gt;=&lt;span&gt; serializers.CharField()
            
                        
                &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                        self.dispatch
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一：&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all().values('name','pwd','group__id',&quot;group__title&quot;)&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(user_list)&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之多对象&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all()&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ser = UsersSerializer(instance=user_list,many=True)&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(ser.data)&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之单对象&lt;/span&gt;
                        user =&lt;span&gt; models.UserInfo.objects.all().first()
                        ser &lt;/span&gt;= UsersSerializer(instance=user, many=&lt;span&gt;False)
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(ser.data)&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;b、跨表&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.Serializer):
                    name &lt;/span&gt;=&lt;span&gt; serializers.CharField()
                    pwd &lt;/span&gt;=&lt;span&gt; serializers.CharField()
                    group_id &lt;/span&gt;=&lt;span&gt; serializers.CharField()
                    xxxx &lt;/span&gt;= serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                    x1 &lt;/span&gt;= serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.mu.name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)



                &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                        self.dispatch
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一：&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all().values('name','pwd','group__id',&quot;group__title&quot;)&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(user_list)&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之多对象&lt;/span&gt;
                        user_list =&lt;span&gt; models.UserInfo.objects.all()
                        ser &lt;/span&gt;= UsersSerializer(instance=user_list,many=&lt;span&gt;True)
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(ser.data)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;c、复杂序列化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;解决方案一：
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyCharField(serializers.CharField):

                        &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; to_representation(self, value):
                            data_list &lt;/span&gt;=&lt;span&gt; []
                            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt;&lt;span&gt; value:
                                data_list.append(row.name)
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; data_list

                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.Serializer):
                        name &lt;/span&gt;= serializers.CharField() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.name&lt;/span&gt;
                        pwd = serializers.CharField()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.pwd&lt;/span&gt;
                        group_id = serializers.CharField() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.group_id&lt;/span&gt;
                        xxxx = serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.group.title&lt;/span&gt;
                        x1 = serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.mu.name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.mu.name&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; x2 = serializers.CharField(source=&quot;roles.all&quot;) # obj.mu.name&lt;/span&gt;
                        x2 = MyCharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;roles.all&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.mu.name&lt;/span&gt;
&lt;span&gt;    
                解决方案二：
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyCharField(serializers.CharField):
                        &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; to_representation(self, value):
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:value.pk, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:value.name}

                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.Serializer):
                        name &lt;/span&gt;= serializers.CharField() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.name&lt;/span&gt;
                        pwd = serializers.CharField()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.pwd&lt;/span&gt;
                        group_id = serializers.CharField() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.group_id&lt;/span&gt;
                        xxxx = serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.group.title&lt;/span&gt;
                        x1 = serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.mu.name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.mu.name&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; x2 = serializers.CharField(source=&quot;roles.all&quot;) # obj.mu.name&lt;/span&gt;
                        x2 = serializers.ListField(child=MyCharField(),source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;roles.all&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.mu.name&lt;/span&gt;
&lt;span&gt;
                解决方案三（&lt;/span&gt;*&lt;span&gt;）：
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.Serializer):
                        name &lt;/span&gt;= serializers.CharField() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.name&lt;/span&gt;
                        pwd = serializers.CharField()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.pwd&lt;/span&gt;
                        group_id = serializers.CharField() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.group_id&lt;/span&gt;
                        xxxx = serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.group.title&lt;/span&gt;
                        x1 = serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.mu.name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.mu.name&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; x2 = serializers.CharField(source=&quot;roles.all&quot;) # obj.mu.name&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; x2 = serializers.ListField(child=MyCharField(),source=&quot;roles.all&quot;) # obj.mu.name&lt;/span&gt;
                        x2 =&lt;span&gt; serializers.SerializerMethodField()

                        &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_x2(self,obj):
                            obj.roles.all()
                            role_list &lt;/span&gt;= obj.roles.filter(id__gt=1&lt;span&gt;)
                            data_list &lt;/span&gt;=&lt;span&gt; []
                            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt;&lt;span&gt; role_list:
                                data_list.append({&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:row.pk,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:row.name})
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; data_list&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;以上三种都是使用相同的视图：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                        &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                            self.dispatch
                            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一：&lt;/span&gt;
                            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all().values('name','pwd','group__id',&quot;group__title&quot;)&lt;/span&gt;
                            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(user_list)&lt;/span&gt;

                            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之多对象&lt;/span&gt;
                            user_list =&lt;span&gt; models.UserInfo.objects.all()
                            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; [obj1,obj2,obj3]&lt;/span&gt;
                            ser = UsersSerializer(instance=user_list,many=&lt;span&gt;True)
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(ser.data)&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;d. 基于Model&lt;/strong&gt;   &lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.ModelSerializer):
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
                        model &lt;/span&gt;=&lt;span&gt; models.UserInfo
                        fields &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; fields = ['name', 'pwd','group']&lt;/span&gt;
                        depth = 1


                &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                        self.dispatch
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一：&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all().values('name','pwd','group__id',&quot;group__title&quot;)&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(user_list)&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之多对象&lt;/span&gt;
                        user_list =&lt;span&gt; models.UserInfo.objects.all()
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; [obj1,obj2,obj3]&lt;/span&gt;
                        ser = UsersSerializer(instance=user_list,many=&lt;span&gt;True)
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(ser.data)&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;e. 生成URL&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.ModelSerializer):
                    group &lt;/span&gt;= serializers.HyperlinkedIdentityField(view_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;detail&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
                        model &lt;/span&gt;=&lt;span&gt; models.UserInfo
                        fields &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                        fields &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pwd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;group&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
                        depth &lt;/span&gt;= 1


                &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                        self.dispatch
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一：&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all().values('name','pwd','group__id',&quot;group__title&quot;)&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(user_list)&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之多对象&lt;/span&gt;
                        user_list =&lt;span&gt; models.UserInfo.objects.all()
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; [obj1,obj2,obj3]&lt;/span&gt;
                        ser = UsersSerializer(instance=user_list,many=True,context={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;request&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:request})
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(ser.data)&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;f. 全局生成URL&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.HyperlinkedModelSerializer):
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
                        model &lt;/span&gt;=&lt;span&gt; models.UserInfo
                        fields &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; fields = ['id','name','pwd']&lt;/span&gt;

                &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                        self.dispatch
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一：&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all().values('name','pwd','group__id',&quot;group__title&quot;)&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(user_list)&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之多对象&lt;/span&gt;
                        user_list =&lt;span&gt; models.UserInfo.objects.all()
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; [obj1,obj2,obj3]&lt;/span&gt;
                        ser = UsersSerializer(instance=user_list,many=True,context={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;request&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:request})
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(ser.data)&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;请求数据验证：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;a、&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; PasswordValidator(object):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, base):
                        self.base &lt;/span&gt;=&lt;span&gt; base

                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__call__&lt;/span&gt;&lt;span&gt;(self, value):
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; value !=&lt;span&gt; self.base:
                            message &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户输入的值必须是 %s.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; self.base
                            &lt;/span&gt;&lt;span&gt;raise&lt;/span&gt;&lt;span&gt; serializers.ValidationError(message)

                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; set_context(self, serializer_field):
                        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
                        This hook is called by the serializer instance,
                        prior to the validation call being made.
                        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 执行验证之前调用,serializer_fields是当前字段对象&lt;/span&gt;
                        &lt;span&gt;pass&lt;/span&gt;

                &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.Serializer):
                        name &lt;/span&gt;= serializers.CharField(min_length=6&lt;span&gt;)
                        pwd &lt;/span&gt;= serializers.CharField(error_messages={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;密码不能为空&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}, validators=[PasswordValidator(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;666&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)])&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;b、&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; PasswordValidator(object):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, base):
                        self.base &lt;/span&gt;=&lt;span&gt; base

                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__call__&lt;/span&gt;&lt;span&gt;(self, value):
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; value !=&lt;span&gt; self.base:
                            message &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户输入的值必须是 %s.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; self.base
                            &lt;/span&gt;&lt;span&gt;raise&lt;/span&gt;&lt;span&gt; serializers.ValidationError(message)

                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; set_context(self, serializer_field):
                        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
                        This hook is called by the serializer instance,
                        prior to the validation call being made.
                        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 执行验证之前调用,serializer_fields是当前字段对象&lt;/span&gt;
                        &lt;span&gt;pass&lt;/span&gt;

                &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.ModelSerializer):
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
                        model &lt;/span&gt;=&lt;span&gt; models.UserInfo
                        fields &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                        extra_kwargs &lt;/span&gt;=&lt;span&gt; {
                            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;min_length&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 6&lt;span&gt;},
                            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pwd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;validators&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [PasswordValidator(666&lt;span&gt;), ]}
                        }&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;使用：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                        self.dispatch
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一：&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all().values('name','pwd','group__id',&quot;group__title&quot;)&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(user_list)&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之多对象&lt;/span&gt;
                        user_list =&lt;span&gt; models.UserInfo.objects.all()
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; [obj1,obj2,obj3]&lt;/span&gt;
                        ser = UsersSerializer(instance=user_list,many=True,context={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;request&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:request})
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Response(ser.data)

                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; post(self,request,*args,**&lt;span&gt;kwargs):
                        ser &lt;/span&gt;= UsersSerializer(data=&lt;span&gt;request.data)
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ser.is_valid():
                            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(ser.validated_data)
                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(ser.errors)
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;









</description>
<pubDate>Wed, 07 Feb 2018 12:23:00 +0000</pubDate>
<dc:creator>孟庆健</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mengqingjian/p/8428053.html</dc:identifier>
</item>
</channel>
</rss>