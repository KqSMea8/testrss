<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>基于 HTML5 WebGL 的 3D 场景中的灯光效果 - xhload3d</title>
<link>http://www.cnblogs.com/xhload3d/p/8168955.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xhload3d/p/8168955.html</guid>
<description>&lt;div readability=&quot;43&quot;&gt;
&lt;pre&gt;
floor = &lt;span&gt;new&lt;/span&gt; ht.Node();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Node 节点类&lt;/span&gt;
floor.s3(1100, 10, 1100&lt;span&gt;);
floor.p3(&lt;/span&gt;0, -100, -110&lt;span&gt;);
floor.s({
    &lt;/span&gt;'shape3d': 'cylinder',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置 3D 模型为圆形&lt;/span&gt;
    'shape3d.side': 100,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认值为0，决定3d图形显示为几边型，为0时显示为平滑的曲面效果&lt;/span&gt;
    'shape3d.color': 'white',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认值为#3498DB，3d图形整体颜色&lt;/span&gt;
    '3d.selectable': &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认值为true，控制图元在Graph3dView上是否可选中&lt;/span&gt;
    '2d.visible': &lt;span&gt;false&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认值为true，控制图元在GraphView上是否可见&lt;/span&gt;
&lt;span&gt;});
dm.add(floor);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0; i&amp;lt;8; i++&lt;span&gt;){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; angle = Math.PI*2*i/8;
          pillar = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ht.Node();
    pillar.s({
        &lt;/span&gt;'shape3d': 'cylinder'&lt;span&gt;,
         &lt;/span&gt;'shape3d.color': 'white'&lt;span&gt;,
         &lt;/span&gt;'shape': 'circle',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;多边形类型图元，为空时显示为图片&lt;/span&gt;
         'shape.background': 'gray'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;多边形类型图元背景&lt;/span&gt;
&lt;span&gt;    });
    pillar.s3(&lt;/span&gt;50, 180, 50&lt;span&gt;);
    pillar.p3(Math.cos(angle)&lt;/span&gt;*480, 0, -110+Math.sin(angle)*480&lt;span&gt;);
    dm.add(pillar);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还有就是这些“箭头”作为贴图的模型，各种各样的，这里我就只解析一个，比较靠前的“波动”部分，具体的多边形的描述请参考&lt;a href=&quot;http://www.hightopo.com/guide/guide/core/shape/ht-shape-guide.html&quot; target=&quot;_blank&quot;&gt;形状手册&lt;/a&gt;：&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/591709/201801/591709-20180101204604221-923301468.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;其中 image 的部分是通过 ht.Default.setImage 函数来创建的名为 arrow 的贴图。&lt;/p&gt;&lt;div readability=&quot;68&quot;&gt;
&lt;pre&gt;
shape3 = &lt;span&gt;new&lt;/span&gt; ht.Shape();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;多边形类&lt;/span&gt;
&lt;span&gt;dm.add(shape3);
shape3.setTall(&lt;/span&gt;60);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置高度&lt;/span&gt;
shape3.setThickness(0);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置厚度&lt;/span&gt;
shape3.s({&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置样式&lt;/span&gt;
    'shape.background': &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;'shape.border.width': 10,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;多边形类型图元边框宽度&lt;/span&gt;
    'shape.border.color': 'blue'&lt;span&gt;,

    &lt;/span&gt;'all.visible': &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;六面是否可见&lt;/span&gt;
    'front.visible': &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;'front.blend': 'blue',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面染色颜色&lt;/span&gt;
    'front.reverse.flip': &lt;span&gt;true&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面的反面是否显示正面的内容&lt;/span&gt;
    'front.image': 'arrow',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面贴图&lt;/span&gt;
    'front.uv.scale': [16, 3]&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面贴图的uv缩放，格式为[3,2]&lt;/span&gt;
&lt;span&gt;});
shape3.setPoints([&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置点数组&lt;/span&gt;
    {x: 0, y: 0&lt;span&gt;},
    {x: &lt;/span&gt;25, y: -25&lt;span&gt;},
    {x: &lt;/span&gt;50, y: 0&lt;span&gt;},
    {x: &lt;/span&gt;75, y: 25&lt;span&gt;},
    {x: &lt;/span&gt;100, y: 0&lt;span&gt;},
    {x: &lt;/span&gt;125, y: -25&lt;span&gt;},
    {x: &lt;/span&gt;150, y: 0&lt;span&gt;},
    {x: &lt;/span&gt;175, y: 25&lt;span&gt;},
    {x: &lt;/span&gt;200, y: 0&lt;span&gt;}
]);
shape3.setSegments([&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;描述点连接样式&lt;/span&gt;
    1, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; moveTo&lt;/span&gt;
    3, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; quadraticCurveTo&lt;/span&gt;
    3, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; quadraticCurveTo&lt;/span&gt;
    3, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; quadraticCurveTo&lt;/span&gt;
    3 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; quadraticCurveTo&lt;/span&gt;
&lt;span&gt;]);
shape3.p3(&lt;/span&gt;-100, 0, 100&lt;span&gt;);
shape3.setRotationZ(&lt;/span&gt;-Math.PI/2);//设置图元在3D拓扑中沿z轴的旋转角度(弧度制)
&lt;/pre&gt;&lt;/div&gt;</description>
<pubDate>Mon, 01 Jan 2018 23:22:00 +0000</pubDate>
<dc:creator>xhload3d</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xhload3d/p/8168955.html</dc:identifier>
</item>
<item>
<title>(一)基于阿里云的MQTT远程控制(Android 连接MQTT服务器,ESP8266连接MQTT服务器实现远程通信控制----简单的连接通信) - 杨奉武</title>
<link>http://www.cnblogs.com/yangfengwu/p/8175080.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangfengwu/p/8175080.html</guid>
<description>&lt;p&gt;&lt;span&gt;如果不了解MQTT的可以看这篇文章  &lt;a href=&quot;http://www.cnblogs.com/yangfengwu/p/7764667.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/yangfengwu/p/7764667.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/yangfengwu/p/8026014.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://www.cnblogs.com/yangfengwu/p/8026014.html&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于钱的问题,其实自己是花钱买的云服务,虽然自己现在能支付的起,但是呢为了尽量减少支出,自已还有好多好多文章要写,好多好多元器件要买,所以哈会在自己的淘宝上卖源码2元价格,一元捐出,一元自己留着当亲们支付云服务的费用了,不过后来想了想,感觉有点麻烦还要发链接,还是直接给大家链接吧,然后自己会在最后设置一个一元的支护宝收钱码(一个朋友这样告诉的,感觉也挺好的),然后淘宝里面也出售源码改为一元价格,淘宝的就直接捐出.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果看不懂也没关系,跟着做就可以了,做完以后您会发现原来MQTT这么好用,也如此简单.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对了我要尽量把程序写的烂一些,界面做的烂一些,因为既然是学习用的应该越直观越好.......说一下,自己的服务器因为公开了稳定性上肯定不好,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据冲突也是可能的,这是第一篇,下面几篇慢慢的来,咱一块慢慢完善哈&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实现的功能--手机和WIFI模块都连接MQTT服务器,手机用按钮实现远程控制一个继电器,然后WIFI模块采集的DHT11的&lt;/span&gt;&lt;span&gt;温湿度,远程发给手机&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不过自己这批贴片的板子要等到后天才到..........................&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102040423596-575059822.png&quot; alt=&quot;&quot;/&gt;  &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102040812659-1650960062.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102041155221-957289320.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102041213659-1362274021.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;先看一下Android 程序怎么写,首先就是下载个MQTT的jar包&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/1bpjRzyB&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1bpjRzyB&lt;/a&gt; 密码：90vv&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;新建一个Android 工程就不说了吧...............&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将下载的jar包放在一个地方&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201712/819239-20171231222929867-203082966.png&quot; alt=&quot;&quot; width=&quot;648&quot; height=&quot;357&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;我放在了我的Android的源码的根目录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在在Android 工程导入下载的那个jar包&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201712/819239-20171231223238851-2140251031.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201712/819239-20171231223310804-400918704.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201712/819239-20171231223446867-1115819411.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180101235336471-1529998184.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180101235249081-2023545266.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;现在把可能用到的一些权限加上 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102004614003-1305535269.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 &amp;lt;!--     获取手机信息权限 --&amp;gt;  
    &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.INTERNET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/uses-permission&amp;gt;
    &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.WRITE_EXTERNAL_STORAGE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;lt;/uses-permission&amp;gt;&lt;span&gt;&quot;
&lt;/span&gt;    &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.CHANGE_NETWORK_STATE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/uses-permission&amp;gt;  
    &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.CHANGE_CONFIGURATION&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt; 
    &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.ACCESS_NETWORK_STATE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.READ_PHONE_STATE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;  
    &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.INTERNET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
    &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.ACCESS_WIFI_STATE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
     &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.WAKE_LOCK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
     &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.CHANGE_WIFI_STATE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
     &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.VIBRATE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
     &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.WRITE_SETTINGS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
     &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.CHANGE_WIFI_MULTICAST_STATE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/uses-permission&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;现在呢先写个程序获取手机的IMEI号,因为连接的时候每一个客户端的ClientID要求不能一样,咱就用IMEI号代表ClientID&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102001412737-1044338222.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其实就这两句&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
TelephonyManager mTm = (TelephonyManager)&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getSystemService(TELEPHONY_SERVICE);  
TelephonyIMEI &lt;/span&gt;= mTm.getDeviceId();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;现在配置咱的MQTT&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainActivity extends Activity {
    
    String TelephonyIMEI&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; MqttClient client;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; MqttConnectOptions options;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置&lt;/span&gt;
&lt;span&gt;    
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        TelephonyManager mTm &lt;/span&gt;= (TelephonyManager)&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getSystemService(TELEPHONY_SERVICE);  
        TelephonyIMEI &lt;/span&gt;=&lt;span&gt; mTm.getDeviceId();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Toast.makeText(getApplicationContext(), TelephonyIMEI, 500).show();&lt;/span&gt;
&lt;span&gt;        MyMqttInit();
    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;  初始化配置Mqtt  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; MyMqttInit()
    {
        
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(1)主机地址(2)客户端ID,一般以客户端唯一标识符(不能够和其它客户端重名)(3)最后一个参数是指数据保存在内存(具体保存什么数据,以后再说,其实现在我也不是很确定)&lt;/span&gt;
            client = &lt;span&gt;new&lt;/span&gt; MqttClient(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tcp://47.93.19.134:1883&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,TelephonyIMEI,&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MemoryPersistence());
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (MqttException e) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;            e.printStackTrace();
        }
        
        options &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; MqttConnectOptions();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;MQTT的连接设置&lt;/span&gt;
&lt;span&gt;        
        options.setCleanSession(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置是否清空session,这里如果设置为false表示服务器会保留客户端的连接记录，这里设置为true表示每次连接到服务器都以新的身份连接&lt;/span&gt;
&lt;span&gt;        
        options.setUserName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置连接的用户名(自己的服务器没有设置用户名)&lt;/span&gt;
&lt;span&gt;        
        options.setPassword(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.toCharArray());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置连接的密码(自己的服务器没有设置密码)&lt;/span&gt;
&lt;span&gt;        
        options.setConnectionTimeout(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置连接超时时间 单位为秒&lt;/span&gt;
&lt;span&gt;        
        options.setKeepAliveInterval(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置会话心跳时间 单位为秒 服务器会每隔1.5*20秒的时间向客户端发送个消息判断客户端是否在线，但这个方法并没有重连的机制&lt;/span&gt;
&lt;span&gt;        
        client.setCallback(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MqttCallback() {
            @Override&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取的消息会执行这里--arg0是主题,arg1是消息&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; messageArrived(String arg0, MqttMessage arg1) throws Exception {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;                
            }
            
            @Override&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;订阅主题后会执行到这里&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deliveryComplete(IMqttDeliveryToken arg0) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;                
            }
            
            @Override&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接丢失后，会执行这里&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; connectionLost(Throwable arg0) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;                
            }
        });
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 现在连接咱的服务器,连接成功后打印一下连接成功,连接是阻塞的,所以放在一个任务里面执行连接&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainActivity extends Activity {
    
    String TelephonyIMEI&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; MqttClient client;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; MqttConnectOptions options;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置&lt;/span&gt;
    MqttConnectThread mqttConnectThread = &lt;span&gt;new&lt;/span&gt; MqttConnectThread();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接服务器任务&lt;/span&gt;
&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        TelephonyManager mTm &lt;/span&gt;= (TelephonyManager)&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getSystemService(TELEPHONY_SERVICE);  
        TelephonyIMEI &lt;/span&gt;=&lt;span&gt; mTm.getDeviceId();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Toast.makeText(getApplicationContext(), TelephonyIMEI, 500).show();&lt;/span&gt;
        MyMqttInit();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化配置MQTT客户端&lt;/span&gt;
        mqttConnectThread.start();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行连接服务器任务&lt;/span&gt;
&lt;span&gt;    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;  初始化配置Mqtt  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; MyMqttInit()
    {
        .........&lt;/span&gt;&lt;span&gt;
    }
    
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;连接服务器任务&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MqttConnectThread extends Thread
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run()
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; 
            {
                client.connect(options);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接服务器,连接不上会阻塞在这&lt;/span&gt;
                runOnUiThread(&lt;span&gt;new&lt;/span&gt; Runnable() {&lt;span&gt;//
&lt;/span&gt;                    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                        Toast.makeText(getApplicationContext(), &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt;&lt;span&gt;).show();
                    }
                });
            } 
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (MqttSecurityException e) 
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;安全问题连接失败&lt;/span&gt;
&lt;span&gt;            } 
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (MqttException e) 
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接失败原因&lt;/span&gt;
&lt;span&gt;            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 现在下载到手机试一试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102004406487-737000269.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;现在呢测试一下通信,测试接收消息,用调试助手发信息,然后手机端接收,然后显示出来&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 调试助手链接&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/1qYxEeLI&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1qYxEeLI&lt;/a&gt; 密码：exfj&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 现在先设置一下APP的订阅的主题,和接收到消息之后就显示出来&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102005831659-1433665045.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102005904424-1382867464.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainActivity extends Activity {
    
    String TelephonyIMEI&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; MqttClient client;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; MqttConnectOptions options;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置&lt;/span&gt;
    MqttConnectThread mqttConnectThread = &lt;span&gt;new&lt;/span&gt; MqttConnectThread();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接服务器任务&lt;/span&gt;
&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        TelephonyManager mTm &lt;/span&gt;= (TelephonyManager)&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getSystemService(TELEPHONY_SERVICE);  
        TelephonyIMEI &lt;/span&gt;=&lt;span&gt; mTm.getDeviceId();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Toast.makeText(getApplicationContext(), TelephonyIMEI, 500).show();&lt;/span&gt;
        MyMqttInit();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化配置MQTT客户端&lt;/span&gt;
        mqttConnectThread.start();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行连接服务器任务&lt;/span&gt;
&lt;span&gt;    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;  初始化配置Mqtt  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; MyMqttInit()
    {
        
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(1)主机地址(2)客户端ID,一般以客户端唯一标识符(不能够和其它客户端重名)(3)最后一个参数是指数据保存在内存(具体保存什么数据,以后再说,其实现在我也不是很确定)&lt;/span&gt;
            client = &lt;span&gt;new&lt;/span&gt; MqttClient(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tcp://47.93.19.134:1883&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,TelephonyIMEI,&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MemoryPersistence());
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (MqttException e) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;            e.printStackTrace();
        }
        
        options &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; MqttConnectOptions();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;MQTT的连接设置&lt;/span&gt;
&lt;span&gt;        
        options.setCleanSession(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置是否清空session,这里如果设置为false表示服务器会保留客户端的连接记录，这里设置为true表示每次连接到服务器都以新的身份连接&lt;/span&gt;
&lt;span&gt;        
        options.setUserName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置连接的用户名(自己的服务器没有设置用户名)&lt;/span&gt;
&lt;span&gt;        
        options.setPassword(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.toCharArray());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置连接的密码(自己的服务器没有设置密码)&lt;/span&gt;
&lt;span&gt;        
        options.setConnectionTimeout(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置连接超时时间 单位为秒&lt;/span&gt;
&lt;span&gt;        
        options.setKeepAliveInterval(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置会话心跳时间 单位为秒 服务器会每隔1.5*20秒的时间向客户端发送个消息判断客户端是否在线，但这个方法并没有重连的机制&lt;/span&gt;
&lt;span&gt;        
        client.setCallback(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MqttCallback() {
            @Override&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取消息会执行这里--arg0是主题,arg1是消息&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; messageArrived(String arg0, MqttMessage arg1) throws Exception {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
                final String topic = arg0;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主题&lt;/span&gt;
                final String msgString = arg1.toString();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;消息&lt;/span&gt;
&lt;span&gt;                
                runOnUiThread(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Runnable() {&lt;span&gt;//
&lt;/span&gt;                    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                        Toast.makeText(getApplicationContext(),&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;主题:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+topic+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;消息:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+msgString, &lt;span&gt;500&lt;/span&gt;&lt;span&gt;).show();
                    }
                });
            }
            
            @Override&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;订阅主题后会执行到这里&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deliveryComplete(IMqttDeliveryToken arg0) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;                
            }
            
            @Override&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接丢失后，会执行这里&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; connectionLost(Throwable arg0) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;                
            }
        });
    }
    
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;连接服务器任务&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MqttConnectThread extends Thread
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run()
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; 
            {
                client.connect(options);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接服务器,连接不上会阻塞在这&lt;/span&gt;
&lt;span&gt;                
                client.subscribe(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置(订阅)接收的主题,主题的级别是0&lt;/span&gt;
&lt;span&gt;                
                runOnUiThread(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Runnable() {&lt;span&gt;//
&lt;/span&gt;                    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                        Toast.makeText(getApplicationContext(), &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt;&lt;span&gt;).show();
                    }
                });
            } 
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (MqttSecurityException e) 
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;安全问题连接失败&lt;/span&gt;
&lt;span&gt;            } 
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (MqttException e) 
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接失败原因&lt;/span&gt;
&lt;span&gt;            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下载到手机 &lt;/p&gt;

&lt;p&gt;&lt;span&gt; 现在配置一下软件,对了有些参数现在不明白没关系,后面会介绍一下相关的知识,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102010439159-217651156.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;软件的主题名称要和APP中订阅的主题一样 都是 test&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在连接&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102010715299-1099731858.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 现在点击发布消息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102010817362-654981952.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;看手机端&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102010906534-88855261.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;说明已经能通信了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;现在说一下关于主题哈,关于/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;现在把手机端的订阅的主题改为&quot;/#&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102011324518-2125113858.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;然后下载到手机&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102011427471-50328294.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102011442174-864528743.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;你会发现手机也能接收消息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102011525128-381938845.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102011614331-1282342854.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;手机都能接收到消息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;#&lt;/code&gt; 是一个匹配主题中任意层次数的通配符。比如说，如果你订阅了&lt;code&gt;test/device/#&lt;/code&gt;，你就可以接收到以下这些主题的消息。&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;span&gt;&lt;code class=&quot;hljs has-numbering&quot;&gt;test/device&lt;br/&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;span&gt;&lt;code class=&quot;hljs has-numbering&quot;&gt;test/device/后面随便是什么&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;span readability=&quot;1&quot;&gt;&lt;code class=&quot;hljs has-numbering&quot; readability=&quot;2&quot;&gt;咱们的设备可以用&quot;/&quot;来进行分类,咱们的APP呢可以指定接收哪一类的产品的数据&quot;XXXX/#&quot;....是不是很方便&lt;p&gt;对了如果现在接收两个已知主题的设备&lt;br/&gt;假如说是&lt;/p&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102013225284-1924606617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第一种方式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102013256362-61646634.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102013458456-979595110.png&quot; alt=&quot;&quot;/&gt;  &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102013513112-536285436.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;span&gt;第二种方式&lt;/span&gt;&lt;/pre&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;span&gt;&lt;code class=&quot;hljs has-numbering&quot;&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102013551471-937021454.png&quot; alt=&quot;&quot;/&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;结果和上面一样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102013625237-738802238.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 现在呢在界面加一个按钮,按下发送消息&quot;1&quot;,松开发送消息&quot;0&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后设置发布的主题是&quot;/test/button&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102014453362-211811422.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102020409596-1825574914.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102020434940-78964991.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainActivity extends Activity {
    
    String TelephonyIMEI&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; MqttClient client;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; MqttConnectOptions options;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置&lt;/span&gt;
    MqttConnectThread mqttConnectThread = &lt;span&gt;new&lt;/span&gt; MqttConnectThread();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接服务器任务&lt;/span&gt;
&lt;span&gt;    
    Button button;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送消息按钮&lt;/span&gt;
&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        button &lt;/span&gt;= (Button) findViewById(R.id.button1);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取发送消息按钮&lt;/span&gt;
        button.setOnTouchListener(buttonTouch);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置按钮的触摸事件&lt;/span&gt;
&lt;span&gt;        
        TelephonyManager mTm &lt;/span&gt;= (TelephonyManager)&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getSystemService(TELEPHONY_SERVICE);  
        TelephonyIMEI &lt;/span&gt;=&lt;span&gt; mTm.getDeviceId();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Toast.makeText(getApplicationContext(), TelephonyIMEI, 500).show();&lt;/span&gt;
        MyMqttInit();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化配置MQTT客户端&lt;/span&gt;
        mqttConnectThread.start();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行连接服务器任务&lt;/span&gt;
&lt;span&gt;    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;按钮触摸事件&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; OnTouchListener buttonTouch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnTouchListener() {
        
        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; boolean onTouch(View v, MotionEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) 
        {
            MqttMessage msgMessage &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Mqtt消息变量&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction() == MotionEvent.ACTION_DOWN) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;按下&lt;/span&gt;
&lt;span&gt;            {
                msgMessage &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; MqttMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.getBytes());
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;.getAction() == MotionEvent.ACTION_UP) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;松开&lt;/span&gt;
&lt;span&gt;            {
                msgMessage &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; MqttMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.getBytes());
            }
            
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; 
            {
                client.publish(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/test/button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,msgMessage);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送主题为&quot;/test/button&quot;的消息&lt;/span&gt;
            } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (MqttPersistenceException e) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;                e.printStackTrace();
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (MqttException e) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;                e.printStackTrace();
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其余的状态msgMessage = null;所以加了这个catch (Exception e)&lt;/span&gt;
&lt;span&gt;            }
            
            
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;span&gt;现在下载到手机,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;调试助手订阅一下主题 &lt;/span&gt;&lt;span&gt;&quot;/test/button&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102020523471-244807877.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 动作一下按钮&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102020726565-1447939235.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102020645628-2044384385.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;现在把发过来的数据用文本框显示,不让他提示了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102021601049-1412467358.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102021615831-1188919362.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;     接收显示的换一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102021635909-873796300.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
runOnUiThread(&lt;span&gt;new&lt;/span&gt; Runnable() {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;因为操作的是主界面的控件所以用刷新UI的线程,最好用handle哈,我这里怎么简单怎么写&lt;/span&gt;
                    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Toast.makeText(getApplicationContext(),&quot;主题:&quot;+topic+&quot;消息:&quot;+msgString, 500).show();&lt;/span&gt;
                        textView.setText(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;主题:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+topic+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n消息:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;msgString);
                    }
                });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;span&gt;现在试一下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102021940315-2063278458.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102022010393-827776087.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;好了,现在咱开始控制咱的WIFI模块了....用咱的手机控制WIFI板子上的继电器,WIFI模块呢采集温湿度,然后显示在手机的文本框中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自己更倾向于用lua开发,所以要刷入lua的固件哈&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于刷固件可以参考&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/yangfengwu/p/7514336.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://www.cnblogs.com/yangfengwu/p/7514336.html&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自己已经下载好的固件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/1o8pAISy&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1o8pAISy&lt;/a&gt; 密码：9zns&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果亲们自己下载的话别忘了,把mqtt和dht选择上哈&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102022559049-1928227317.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;程序--init.lua&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
&lt;span&gt;wifi.setmode(wifi.STATION)

RelayPin &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;;--&lt;span&gt;RelayPin
gpio.mode(RelayPin,gpio.OUTPUT)&lt;/span&gt;--&lt;span&gt;RelayPin
gpio.write(RelayPin,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;)--&lt;span&gt;RelayPin

LedPin &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;;--&lt;span&gt;LedPin
gpio.mode(LedPin,gpio.OUTPUT)&lt;/span&gt;--&lt;span&gt;LedPin
gpio.write(LedPin,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;)--&lt;span&gt;LedPin

DHT11pin &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;--&lt;span&gt;DHT11 GPIO

Temperature &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;--&lt;span&gt;Storage temperature
Humidity &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;--&lt;span&gt;Store humidity


apcfg&lt;/span&gt;=&lt;span&gt;{}
apcfg.ssid&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qqqqq&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
apcfg.pwd&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;11223344&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
wifi.sta.config(apcfg)
&lt;/span&gt;--&lt;span&gt;wifi.sta.connect()
wifi.sta.autoconnect(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)


clientid &lt;/span&gt;=&lt;span&gt; wifi.sta.getmac()
mqttClient&lt;/span&gt;=&lt;span&gt;nil
mqttConnectedFlage &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

Mymqtt &lt;/span&gt;= mqtt.Client(clientid, &lt;span&gt;120&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);


&lt;/span&gt;--&lt;span&gt;[[The connection serve]]
tmr.alarm(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1000&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, function()
    Mymqtt:connect(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;47.93.19.134&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;1883&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,ConnectSuccess,ConnectFailed)
end)


&lt;/span&gt;--&lt;span&gt;[[The connection Success]]
function ConnectSuccess(client)
     client:subscribe(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/test/button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, subscribeSuccess)
                                         
     print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;connected&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
     mqttClient &lt;/span&gt;=&lt;span&gt; client;
     tmr.stop(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
     mqttConnectedFlage &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
end

&lt;/span&gt;--&lt;span&gt;[[The connection fails]]
function mqttConnectFailed(client,reason)
   mqttConnectedFlage &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
   print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;failed reason: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; .. reason)
   tmr.start(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
end


&lt;/span&gt;--&lt;span&gt;[[The subscribe Success]]
function subscribeSuccess(client)
    print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subscribe success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) 
end

&lt;/span&gt;--&lt;span&gt;[[The Receive Msg]]
Mymqtt:on(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, function(client, topic, data) 
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;  &lt;span&gt;string&lt;/span&gt;.find(data,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) ~=&lt;span&gt; nil then
        gpio.write(RelayPin,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
    end

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;  &lt;span&gt;string&lt;/span&gt;.find(data,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) ~=&lt;span&gt; nil then
        gpio.write(RelayPin,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    end
   
end)


&lt;/span&gt;--&lt;span&gt;[[The Send Msg]]
tmr.alarm(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1000&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, function()

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; mqttClient ~= nil and mqttConnectedFlage == &lt;span&gt;1&lt;/span&gt;&lt;span&gt; then
        mqttClient:publish(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/test/yang&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Temperature=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;..Temperature..&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;..&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Humidity=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;..Humidity, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, 
          function(client) 
            gpio.write(&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;-gpio.read(&lt;span&gt;4&lt;/span&gt;&lt;span&gt;))
          end)
    end      
end)

&lt;/span&gt;--&lt;span&gt;[[The gather humiture data]]
tmr.alarm(&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;, &lt;span&gt;2000&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, function()--&lt;span&gt;Every other 1S
    local status, temp, humi, temp_dec, humi_dec &lt;/span&gt;= dht.read11(DHT11pin)--&lt;span&gt;Gathering temperature and humidity                 
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; status == dht.OK or status ==&lt;span&gt; dht.ERROR_CHECKSUM then
        Temperature &lt;/span&gt;=&lt;span&gt; temp;
        Humidity &lt;/span&gt;=&lt;span&gt; humi;
        &lt;/span&gt;--print(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DHT Temperature:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;..temp..&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;..&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Humidity:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;..humi)
    end
end)


printip &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
wifi.eventmon.register(wifi.eventmon.STA_DISCONNECTED, function(T)
    printip &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
end)


wifi.eventmon.register(wifi.eventmon.STA_GOT_IP, function(T)
   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; printip == &lt;span&gt;0&lt;/span&gt;&lt;span&gt; then
      ip,netmask,gateway &lt;/span&gt;=&lt;span&gt; wifi.sta.getip()
      print(gateway)
   end
   printip &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
end)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;现在说一下个个部分的功能,对了关于语法问题和其余的问题就请大家参考我的,其实上面的代码就是参考的官方给的API函数,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我希望亲们最重要的是有自学的能力,而不是需要别人灌输东西的机器.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102034215206-188287733.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102034724737-826510940.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102034814503-1283240363.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102035041331-142599521.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102035311128-1212216971.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102035540206-503928540.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102035639924-1243796067.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102035931987-6423852.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102040046315-1228905729.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 好了亲们可以自己去测试了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;源码链接&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;wifi的就是上面的,直接复制粘贴过去就好啦&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;APP源码链接：&lt;a href=&quot;https://pan.baidu.com/s/1pLKGLrt&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1pLKGLrt&lt;/a&gt; 密码：nfn3&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自己淘宝店的链接呢在最上面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/819239/201801/819239-20180102043022753-410175121.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 01 Jan 2018 20:43:00 +0000</pubDate>
<dc:creator>杨奉武</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangfengwu/p/8175080.html</dc:identifier>
</item>
<item>
<title>前端学数据结构之栈 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/8174742.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/8174742.html</guid>
<description>&lt;h2&gt;前面的话&lt;/h2&gt;
&lt;p&gt;　　学习数据结构和算法十分重要。首要原因是数据结构和算法可以很高效地解决常见问题，这对今后的代码质量至关重要（也包括性能，要是用了不恰当的数据结构或算法，很可能会产生性能问题）。其次，对于计算机科学，算法是最基础的概念。数组是计算机科学中最常用的数据结构，我们知道，可以在数组的任意位置上删除或添加元素。然而，有时候还需要一种在添加或删除元素时有更多控制的数据结构。有两种数据结构类似于数组，但在添加和删除元素时更为可控。它们就是栈和队列。本文将详细介绍栈&lt;/p&gt;

&lt;h3&gt;数据结构&lt;/h3&gt;
&lt;p&gt;　　栈是一种遵从后进先出（LIFO）原则的有序集合。新添加的或待删除的元素都保存在栈的末尾，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。&lt;/p&gt;
&lt;p&gt;　　在现实生活中也能发现很多栈的例子。例如，下图里的一摞书或者餐厅里堆放的盘子&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureStack1.png&quot; alt=&quot;stack&quot; width=&quot;271&quot; height=&quot;421&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　栈也被用在编程语言的编译器和内存中保存变量、方法调用等&lt;/p&gt;

&lt;h3&gt;创建栈&lt;/h3&gt;
&lt;p&gt;　　下面将创建一个类来表示栈，先声明这个类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function Stack() {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;各种属性和方法的声明&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　使用一种数据结构来保存栈里的元素。可以选择数组：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
let items = [];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接下来，为栈声明一些方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;push(element(s))：添加一个（或几个）新元素到栈顶
pop()：移除栈顶的元素，同时返回被移除的元素
peek()：返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返回它）
isEmpty()：如果栈里没有任何元素就返回true，否则返回false
clear()：移除栈里的所有元素
size()：返回栈里的元素个数。这个方法和数组的length属性很类似&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【push】&lt;/p&gt;
&lt;p&gt;　　push方法负责往栈里添加新元素，有一点很重要：该方法只添加元素到栈顶，也就是栈的末尾&lt;/p&gt;
&lt;p&gt;　　因为使用了数组来保存栈里的元素，所以可以数组的push方法来实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.push =&lt;span&gt; function(element){ 
  items.push(element);
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【pop】&lt;/p&gt;
&lt;p&gt;　　接着来实现pop方法。这个方法主要用来移除栈里的元素。栈遵从LIFO原则，因此移出的是最后添加进去的元素。因此，可以用数组的pop方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.pop =&lt;span&gt; function(){ 
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; items.pop();
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　只能用push和pop方法添加和删除栈中元素，这样一来，栈自然就遵从了LIFO原则&lt;/p&gt;
&lt;p&gt;【peek】&lt;/p&gt;
&lt;p&gt;　　现在，为类实现一些额外的辅助方法。如果想知道栈里最后添加的元素是什么，可以用peek方法。这个方法将返回栈顶的元素：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.peek =&lt;span&gt; function(){
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; items[items.length-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　因为类内部是用数组保存元素的，所以访问数组的最后一个元素可以用 length - 1&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureStack2.png&quot; alt=&quot;stack2&quot; width=&quot;164&quot; height=&quot;212&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　在上图中，有一个包含三个元素的栈，因此内部数组的长度就是3。数组中最后一项的位置是2，length - 1（3 -1）正好是2&lt;/p&gt;
&lt;p&gt;【isEmpty】&lt;/p&gt;
&lt;p&gt;　　下面要实现的方法是 isEmpty，如果栈为空的话将返回true，否则就返回false：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.isEmpty =&lt;span&gt; function(){ 
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; items.length == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　使用isEmpty方法，能简单地判断内部数组的长度是否为0&lt;/p&gt;
&lt;p&gt;【size】&lt;/p&gt;
&lt;p&gt;　　类似于数组的length属性，也能实现栈的length。对于集合，最好用size代替length。因为栈的内部使用数组保存元素，所以能简单地返回栈的长度：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.size =&lt;span&gt; function(){ 
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; items.length;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【clear】&lt;/p&gt;
&lt;p&gt;　　最后来实现clear方法。clear方法用来移除栈里所有的元素，把栈清空。实现这个方法最简单的方式是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.clear =&lt;span&gt; function(){ 
  items &lt;/span&gt;=&lt;span&gt; [];
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　另外也可以多次调用pop方法，把数组中的元素全部移除，这样也能实现clear方法&lt;/p&gt;
&lt;p&gt;　　栈已经实现。通过一个例子来应用它，为了检查栈里的内容，我们来实现一个辅助方法，叫print。它会把栈里的元素都输出到控制台：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.print =&lt;span&gt; function(){ 
  console.log(items.toString());
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样，我们就完整创建了栈！&lt;/p&gt;
&lt;p&gt;　　栈的完整代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function Stack() {

    let items &lt;/span&gt;=&lt;span&gt; [];

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.push =&lt;span&gt; function(element){
        items.push(element);
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.pop =&lt;span&gt; function(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; items.pop();
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.peek =&lt;span&gt; function(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; items[items.length-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.isEmpty =&lt;span&gt; function(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; items.length == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.size =&lt;span&gt; function(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; items.length;
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.clear =&lt;span&gt; function(){
        items &lt;/span&gt;=&lt;span&gt; [];
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.print =&lt;span&gt; function(){
        console.log(items.toString());
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.toString =&lt;span&gt; function(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; items.toString();
    };
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;使用stack类&lt;/h3&gt;
&lt;p&gt;　　下面来学习如何使用Stack类。 首先，需要初始化Stack类。然后，验证一下栈是否为空（输出是true，因为还没有往栈里添加元素）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; stack = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stack(); 
console.log(stack.isEmpty()); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出为true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接下来，往栈里添加一些元素（可以添加任意类型的元素）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
stack.push(&lt;span&gt;5&lt;/span&gt;&lt;span&gt;); 
stack.push(&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果调用peek方法，将会输出8，因为它是往栈里添加的最后一个元素：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
console.log(stack.peek());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　再添加一个元素：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
stack.push(&lt;span&gt;11&lt;/span&gt;&lt;span&gt;); 
console.log(stack.size()); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出3 &lt;/span&gt;
console.log(stack.isEmpty()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们往栈里添加了11。如果调用size方法，输出为3，因为栈里有三个元素（5、8和11）。 如果调用isEmpty方法，会看到输出了false（因为栈里有三个元素，不是空栈）。最后， 我们再添加一个元素：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
stack.push(&lt;span&gt;15&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下图描绘了目前为止我们对栈的操作，以及栈的当前状态：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureStack3.png&quot; alt=&quot;stack3&quot; width=&quot;428&quot; height=&quot;186&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　然后，调用两次pop方法从栈里移除2个元素：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;stack.pop();
stack.pop(); 
console.log(stack.size()); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出2 &lt;/span&gt;
stack.print(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出[5, 8]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在两次调用pop方法前，我们的栈里有四个元素。调用两次后，现在栈里仅剩下5和8了。下图描绘这个过程的执行：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureStack4.png&quot; alt=&quot;stack4&quot; width=&quot;285&quot; height=&quot;182&quot;/&gt;&lt;/div&gt;

&lt;h3&gt;ES6&lt;/h3&gt;
&lt;p&gt;　　下面来花点时间分析一下代码，看看是否能用ES6的新功能来改进&lt;/p&gt;
&lt;p&gt;　　我们创建了一个可以当作类来使用的Stack函数。JS函数都有构造函数，可以用来模拟类的行为。我们声明了一个私有的items变量，它只能被Stack函数/类访问。然而，这个方法为每个类的实例都创建一个items变量的副本。因此，如果要创建多个Stack实例，它就不太适合了&lt;/p&gt;
&lt;p&gt;　　下面用ES6新语法来声明Stack类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Stack {

    constructor () {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.items =&lt;span&gt; [];
    }

    push(element){
        &lt;/span&gt;&lt;span&gt;this.&lt;/span&gt;&lt;span&gt;items.push(element);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其他方法&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们只是用ES6的简化语法把Stack函数转换成Stack类。这种方法不能像其他语言(Java、C++、C#)一样直接在类里面声明变量，只能在类的构造函数constructor里声明，在类的其他函数里用this.items就可以引用这个变量&lt;/p&gt;
&lt;p&gt;　　尽管代码看起来更简洁、更漂亮，变量items却是公共的。ES6的类是基于原型的，虽然基于原型的类比基于函数的类更节省内存，也更适合创建多个实例，却不能声明私有属性(变量)或方法。而且，在这种情况下，我们希望Stack类的用户只能访问暴露给类的方法。否则，就有可能从栈的中间移除元素（因为我们用数组来存储其值），这不是我们希望看到的&lt;/p&gt;
&lt;p&gt;　　ES6语法有没有其他方法来创建私有属性呢？&lt;/p&gt;
&lt;p&gt;【Symbol】&lt;/p&gt;
&lt;p&gt;　　ES6新增了一种叫作Symbol的基本类型，它是不可变的，可以用作对象的属性。看看怎么用它来在Stack类中声明items属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
let _items = Symbol(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{1}&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Stack {
 constructor () {
 　　&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;[_items] = []; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{2}&lt;/span&gt;
&lt;span&gt; }
 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Stack方法&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在上面的代码中，我们声明了Symbol类型的变量_items（行{1}），在类的constructor函数中初始化它的值（行{2}）。要访问_items，只需把所有的this.items都换成this[_items]&lt;/p&gt;
&lt;p&gt;　　这种方法创建了一个假的私有属性，因为ES6新增的Object.getOwnPropertySymbols方法能够取到类里面声明的所有Symbols属性。下面是一个破坏Stack类的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
let stack = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stack();
stack.push(&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;);
stack.push(&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;);
let objectSymbols &lt;/span&gt;=&lt;span&gt; Object.getOwnPropertySymbols(stack);
console.log(objectSymbols.length); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
console.log(objectSymbols); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; [Symbol()]&lt;/span&gt;
console.log(objectSymbols[&lt;span&gt;0&lt;/span&gt;]); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Symbol()&lt;/span&gt;
stack[objectSymbols[&lt;span&gt;0&lt;/span&gt;]].push(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
stack.print(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出 5, 8, 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　从以上代码可以看到，访问stack[objectSymbols[0]]是可以得到_items的。并且，_items属性是一个数组，可以进行任意的数组操作，比如从中间删除或添加元素。我们操作的是栈，不应该出现这种行为&lt;/p&gt;
&lt;p&gt;【WeakMap】&lt;/p&gt;
&lt;p&gt;　　有一种数据类型可以确保属性是私有的，这就是WeakMap。WeakMap可以存储键值对，其中键是对象，值可以是任意数据类型。&lt;/p&gt;
&lt;p&gt;　　如果用WeakMap来存储items变量，Stack类就是这样的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;const&lt;/span&gt; items = &lt;span&gt;new&lt;/span&gt; WeakMap(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{1}&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Stack {
 constructor () {
   items.&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;, []); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{2}&lt;/span&gt;
&lt;span&gt; }
 push(element) {
  let s &lt;/span&gt;= items.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{3}&lt;/span&gt;
&lt;span&gt;  s.push(element);
 }
 pop() {
  let s &lt;/span&gt;= items.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
  let r &lt;/span&gt;=&lt;span&gt; s.pop();
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; r;
 }
 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其他方法&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　行{1}，声明一个WeakMap类型的变量items。行{2}，在constructor中，以this（Stack类自己的引用）为键，把代表栈的数组存入items。行{3}，从WeakMap中取出值，即以this为键（行{2}设置的）从items中取值&lt;/p&gt;
&lt;p&gt;　　现在知道，items在Stack类里是真正的私有属性了，但还有一件事要做。items现在仍然是在Stack类以外声明的，因此谁都可以改动它。要用一个闭包（外层函数）把Stack类包起来，这样就只能在这个函数里访问WeakMap：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
let Stack =&lt;span&gt; (function () {
 &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; items = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WeakMap();
 &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Stack {
  constructor () {
    items.&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, []);
  }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其他方法&lt;/span&gt;
&lt;span&gt; }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Stack; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{5}&lt;/span&gt;
})();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当Stack函数里的构造函数被调用时，会返回Stack类的一个实例（行{5}）&lt;/p&gt;
&lt;p&gt;　　现在，Stack类有一个名为items的私有属性。虽然它很丑陋，但毕竟实现了私有属性。然而，用这种方法的话，扩展类无法继承私有属性。鱼与熊掌不可兼得&lt;/p&gt;
&lt;p&gt;　　栈的完整代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
let Stack3 =&lt;span&gt; (function () {

    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; items = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WeakMap();

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Stack3 {

        constructor () {
            items.&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, []);
        }

        push(element){
            let s &lt;/span&gt;= items.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            s.push(element);
        }

        pop(){
            let s &lt;/span&gt;= items.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            let r &lt;/span&gt;=&lt;span&gt; s.pop();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; r;
        }

        peek(){
            let s &lt;/span&gt;= items.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; s[s.length-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
        }

        isEmpty(){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; items.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;).length == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        }

        size(){
            let s &lt;/span&gt;= items.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; s.length;
        }

        clear(){
            items.&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, []);
        }

        print(){
            console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.toString());
        }

        toString(){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; items.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;).toString();
        }
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Stack3;
})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　把上面的代码跟最初实现的Stack类做个比较，我们会发现有一些相似之处：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function Stack() {
 let items &lt;/span&gt;=&lt;span&gt; [];
 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其他方法&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　事实上，尽管ES6引入了类的语法，仍然不能像在其他编程语言中一样声明私有属性或方法。有很多种方法都可以达到相同的效果，但无论是语法还是性能，这些方法都有各自的优点和缺点&lt;/p&gt;
&lt;p&gt;　　哪种方法更好？这取决于在实际项目中如何使用算法，要处理的数据量，要创建的实例个数，以及其他约束条件&lt;/p&gt;

&lt;h3&gt;应用&lt;/h3&gt;
&lt;p&gt;　　栈的实际应用非常广泛。在回溯问题中，它可以存储访问过的任务或路径、撤销的操作。Java和C#用栈来存储变量和方法调用，特别是处理递归算法时，有可能抛出一个栈溢出异常&lt;/p&gt;
&lt;p&gt;　　下面将学习使用栈的三个最著名的算法示例。首先是十进制转二进制问题，以及任意进制转换的算法；然后是平衡圆括号问题；最后，学习如何用栈解决汉诺塔问题&lt;/p&gt;
&lt;p&gt;【十进制转二进制】&lt;/p&gt;
&lt;p&gt;&lt;em&gt;　　&lt;/em&gt;现实生活中，我们主要使用十进制。但在计算科学中，二进制非常重要，因为计算机里的所有内容都是用二进制数字表示的（0和1）。没有十进制和二进制相互转化的能力，与计算机交流就很困难&lt;/p&gt;
&lt;p&gt;　　要把十进制转化成二进制，我们可以将该十进制数字和2整除（二进制是满二进一），直到结果是0为止。举个例子，把十进制的数字10转化成二进制的数字，过程大概是这样&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureStack5.png&quot; alt=&quot;stack5&quot; width=&quot;246&quot; height=&quot;135&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　下面是对应的算法描述：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function divideBy2(decNumber){
 &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; remStack = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stack(),
 rem,
 binaryString &lt;/span&gt;= &lt;span&gt;''&lt;/span&gt;&lt;span&gt;;
 &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (decNumber &amp;gt; &lt;span&gt;0&lt;/span&gt;){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{1}&lt;/span&gt;
  rem = Math.floor(decNumber % &lt;span&gt;2&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{2}&lt;/span&gt;
  remStack.push(rem); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{3}&lt;/span&gt;
  decNumber = Math.floor(decNumber / &lt;span&gt;2&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{4}&lt;/span&gt;
&lt;span&gt; }
 &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!remStack.isEmpty()){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{5}&lt;/span&gt;
  binaryString +=&lt;span&gt; remStack.pop().toString();
 }
 &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; binaryString;
} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在这段代码里，当结果满足和2做整除的条件时（行{1}），我们会获得当前结果和2的余数，放到栈里（行{2}、{3}）。然后让结果和2做整除（行{4}）。另外请注意：JavaScript有数字类型，但是它不会区分究竟是整数还是浮点数。因此，要使用Math.floor函数让除法的操作仅返回整数部分。最后，用pop方法把栈中的元素都移除，把出栈的元素变成连接成字符串（行{5}）。&lt;/p&gt;
&lt;p&gt;　　用刚才写的算法做一些测试，使用以下代码把结果输出到控制台里：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
console.log(divideBy2(&lt;span&gt;233&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出11101001 &lt;/span&gt;
console.log(divideBy2(&lt;span&gt;10&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出1010 &lt;/span&gt;
console.log(divideBy2(&lt;span&gt;1000&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出1111101000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【进制转换算法】&lt;/p&gt;
&lt;p&gt;　　我们很容易修改之前的算法，使之能把十进制转换成任何进制。除了让十进制数字和2整除 转成二进制数，还可以传入其他任意进制的基数为参数，就像下面算法这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
function baseConverter(decNumber, &lt;span&gt;base&lt;/span&gt;&lt;span&gt;){
 &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; remStack = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stack(),
     rem,
     baseString &lt;/span&gt;= &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
     digits &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0123456789ABCDEF&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{6}&lt;/span&gt;
 &lt;span&gt;while&lt;/span&gt; (decNumber &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
  rem &lt;/span&gt;= Math.floor(decNumber % &lt;span&gt;base&lt;/span&gt;&lt;span&gt;);
  remStack.push(rem);
  decNumber &lt;/span&gt;= Math.floor(decNumber / &lt;span&gt;base&lt;/span&gt;&lt;span&gt;);
 }
 &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;remStack.isEmpty()){
  baseString &lt;/span&gt;+= digits[remStack.pop()]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{7}&lt;/span&gt;
&lt;span&gt; }
 &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; baseString;
} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们只需要改变一个地方。在将十进制转成二进制时，余数是0或1；在将十进制转成八进制时，余数是0到7之间的数；但是将十进制转成16进制时，余数是0到9之间的数字加上A、B、C、D、E和F（对应10、11、12、13、14和15）。因此，我们需要对栈中的数字做个转化才可以（行{6}和行{7}）&lt;/p&gt;
&lt;p&gt;　　可以使用之前的算法，输出结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
console.log(baseConverter(&lt;span&gt;100345&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出11000011111111001&lt;/span&gt;
console.log(baseConverter(&lt;span&gt;100345&lt;/span&gt;, &lt;span&gt;8&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出303771&lt;/span&gt;
console.log(baseConverter(&lt;span&gt;100345&lt;/span&gt;, &lt;span&gt;16&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出187F9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【平衡圆括号】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function parenthesesChecker(symbols){

    let stack &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stack(),
        balanced &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        index &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
        symbol, top,
        opens &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;([{&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        closers &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (index &amp;lt; symbols.length &amp;amp;&amp;amp;&lt;span&gt; balanced){
        symbol &lt;/span&gt;=&lt;span&gt; symbols.charAt(index);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (opens.indexOf(symbol) &amp;gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
            stack.push(symbol);
            console.log(`open symbol &lt;/span&gt;-&lt;span&gt; stacking ${symbol}`);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            console.log(`close symbol ${symbol}`);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (stack.isEmpty()){
                balanced &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Stack is empty, no more symbols to pop and compare&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                top &lt;/span&gt;=&lt;span&gt; stack.pop();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;if (!matches(top, symbol)){&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (!(opens.indexOf(top) ===&lt;span&gt; closers.indexOf(symbol))) {
                    balanced &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                    console.log(`poping symbol ${top} &lt;/span&gt;- &lt;span&gt;is&lt;/span&gt;&lt;span&gt; not a match compared to ${symbol}`);
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    console.log(`poping symbol ${top} &lt;/span&gt;- &lt;span&gt;is&lt;/span&gt; &lt;span&gt;is&lt;/span&gt;&lt;span&gt; a match compared to ${symbol}`);
                }
            }
        }
        index&lt;/span&gt;++&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (balanced &amp;amp;&amp;amp;&lt;span&gt; stack.isEmpty()){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
}

console.log(parenthesesChecker(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{([])}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
console.log(parenthesesChecker(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{{([][])}()}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
console.log(parenthesesChecker(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[{()]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【汉诺塔】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
function towerOfHanoi(n, &lt;span&gt;from&lt;/span&gt;&lt;span&gt;, to, helper){

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (n &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
        towerOfHanoi(n&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;from&lt;/span&gt;&lt;span&gt;, helper, to);
        to.push(&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;.pop());
        console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-----&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Source: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + &lt;span&gt;from&lt;/span&gt;&lt;span&gt;.toString());
        console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dest: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; to.toString());
        console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Helper: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; helper.toString());
        towerOfHanoi(n&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;, helper, to, &lt;span&gt;from&lt;/span&gt;&lt;span&gt;);
    }
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; source = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stack();
source.push(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
source.push(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
source.push(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dest = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stack();
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; helper = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stack();

towerOfHanoi(source.size(), source, dest, helper);

source.print();
helper.print();
dest.print();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 01 Jan 2018 20:24:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuochai/p/8174742.html</dc:identifier>
</item>
<item>
<title>回望2017：一个前端从业者砥砺前行的一年 - 闰土大叔</title>
<link>http://www.cnblogs.com/running-runtu/p/8173975.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/running-runtu/p/8173975.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;从年前就嚷嚷着要走出去走出去，转眼间已经到了年底依然在我的大太原呆着。年底了，不能免俗的我，也来写一篇2017年度工作总结的文章，凑凑热闹。如果对你有一点点启发，或者感悟，那我写这些文字也算值了。 &lt;/p&gt;
&lt;p&gt;接下来，正文从这开始～&lt;/p&gt;
&lt;p&gt;说实话，这是我从事前端三年以来，第一次认真写年度工作总结，提笔一瞬间，感觉今年的路走的挺坎坷的，一步一个坑，有坑就要努力往出爬，每次爬坑的经历或多或少都会有些收获。或许，人生这个阶段应该叫，磨砺。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;MacBook Pro对我编程的影响&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;在说起我的现任MBP之前，先来追溯下我的前任-宏碁笔记本，它的配置如下：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Intel Core I5-2450M CPU处理器&lt;/p&gt;
&lt;p&gt;2G运行内存RAM&lt;/p&gt;
&lt;p&gt;500G机械硬盘&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这台笔记本，在我进了编程培训班的第二年就跟着我了，一直陪伴到今年年初。现在想想，满打满算4年了。我对它还是蛮有感情的，毕竟是我用过的第一台笔记本电脑。至今我都能回想起当初深夜在宿舍敲代码的经历，那会儿我们正在学HTML+CSS，&amp;lt;熬夜&amp;gt;&amp;lt;/撸码&amp;gt;，这对标签成了我们当时最真实的写照。&lt;/p&gt;
&lt;p&gt;时间一晃，四年过去了。我的这台笔记本渐渐地变的卡顿，2G内存逐渐跟不上了越来越多的软件程序的高负荷运转。圈里不是有句话么，低于2G内存的笔记本就不要用于编程了，否则有你后悔的时候。服役了这么长时间，是时候让它退役了。&lt;/p&gt;
&lt;p&gt;于是乎，在2017年年初的时候，我人生中第一台MacBook Pro就这样承前启后地来到了我的身边。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQEAjQ9pF5ycu7b0A4icbC4cdQ8cSQ3TnTlsCwgYPo95zDQRpiaUDAhlNA/640?wx_fmt=jpeg&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-src=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQEAjQ9pF5ycu7b0A4icbC4cdQ8cSQ3TnTlsCwgYPo95zDQRpiaUDAhlNA/0?wx_fmt=jpeg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQficM4xUQABbc69ZUB9NCGRIiaINr1xC0icBVg1fPhPfYQiaDROY1o7ichGA/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;800&quot; data-cropy1=&quot;419.41747572815524&quot; data-cropy2=&quot;919.0938511326859&quot; data-ratio=&quot;0.625&quot; data-w=&quot;800&quot; data-backw=&quot;618&quot; data-backh=&quot;386&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这是我刚从邮政取回来包裹时拍的照片，当时还没来及拆。回家开箱的一瞬间，我承认被它征服了。虽然我不是果粉，但还是被它出色的工业设计、视网膜级别的Retina屏幕，实用的macOS系统以及后来我接触到的高性能所吸引了。&lt;/p&gt;
&lt;p&gt;当然，我买的是内存8G的入门版。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQ6lzjF0iccH7ricNfVZdmblUWibRlgzBtgz4AkyFibjGwF4mrcWXYBnNr6A/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQ6lzjF0iccH7ricNfVZdmblUWibRlgzBtgz4AkyFibjGwF4mrcWXYBnNr6A/0?wx_fmt=png&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6040955631399317&quot; data-w=&quot;1172&quot; data-backw=&quot;618&quot; data-backh=&quot;373&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;刚入手的那段时间，恰逢我正在学习node.js 和 MongoDB。俗话说，没有对比就没有伤害，之前那台宏碁笔记本在启动一个photoshop都卡的要死，更别提特别吃内存的webstorm了。自从用上MBP后，感觉瞬间流畅了好多，有种刚还在北京四环堵车，突然间开到了青藏高速公路上的快感。&lt;/p&gt;
&lt;p&gt;一开始，体验了一下homebrew，一款MacOS平台下的软件包管理工具。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQnhddEmcefgBYQuLpRapOmtWRfPBfc85qA90deetib0uRhFu2BqAicMIQ/640?wx_fmt=jpeg&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQnhddEmcefgBYQuLpRapOmtWRfPBfc85qA90deetib0uRhFu2BqAicMIQ/0?wx_fmt=jpeg&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.625&quot; data-w=&quot;1024&quot; data-backw=&quot;618&quot; data-backh=&quot;386&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;然后，秀了一把node和MongoDB操作：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQJLKdS25o3EJyOWibBujv7LFuEZibQvezQ0abhrGficbOPicnyByJEbpqUg/640?wx_fmt=jpeg&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQJLKdS25o3EJyOWibBujv7LFuEZibQvezQ0abhrGficbOPicnyByJEbpqUg/0?wx_fmt=jpeg&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.625&quot; data-w=&quot;1280&quot; data-backw=&quot;618&quot; data-backh=&quot;386&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQYDjUEsGzaicLNGibFKNCxJuHxjVhPvctK61MVFaNUlPjMfL4oIaYAVeA/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQYDjUEsGzaicLNGibFKNCxJuHxjVhPvctK61MVFaNUlPjMfL4oIaYAVeA/0?wx_fmt=png&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.625&quot; data-w=&quot;1024&quot; data-backw=&quot;618&quot; data-backh=&quot;386&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;当初因为MongoDB的Mac配置环境，还捣鼓了半天，有相同问题困扰的小伙伴可以私信我。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQGcxuFdhSpSt0j8yQwjcgnKjMwqApkqEHVBiaib99xiaVVmP8GK6X4KLdA/640?wx_fmt=jpeg&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQGcxuFdhSpSt0j8yQwjcgnKjMwqApkqEHVBiaib99xiaVVmP8GK6X4KLdA/0?wx_fmt=jpeg&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5828125&quot; data-w=&quot;1280&quot; data-backw=&quot;618&quot; data-backh=&quot;360&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;最后秀一把nodejs加密模块的处理，自己琢磨出来的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQ42pUWZwXUZJbjd375lSBd50yCp5dEO1cdgzOuaofOHWbGwFRian91vA/640?wx_fmt=jpeg&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQ42pUWZwXUZJbjd375lSBd50yCp5dEO1cdgzOuaofOHWbGwFRian91vA/0?wx_fmt=jpeg&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5515625&quot; data-w=&quot;1280&quot; data-backw=&quot;618&quot; data-backh=&quot;341&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;运营公众号的收获与感悟&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;公众号运营是今年6月份有的这个想法，然后7月份开始写的文章。走过了2017这一年，公众号的名称前前后后改了三次，最后定格为：闰土哥的前端路（running_hacker）。先说下这半年来运营公众号的数据：&lt;/p&gt;
&lt;blockquote readability=&quot;9.9280575539568&quot;&gt;
&lt;p&gt;发表原创文章23篇；&lt;/p&gt;
&lt;p&gt;收获粉丝关注人数1000+；&lt;/p&gt;
&lt;p&gt;最高一篇文章的阅读量停留在了6283（原文链接：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyNDg5MzM4Ng==&amp;amp;mid=2247483883&amp;amp;idx=1&amp;amp;sn=e52abe7fbd8b9fd9eecae7022adf1701&amp;amp;chksm=e809414edf7ec858b526a7976b8433544df5f862c29189d776757f89b404f9dd19fe2c8d1099&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;大兴公寓的那场火，烧毁了我的所有&lt;/a&gt;）；&lt;/p&gt;
&lt;p&gt;开通了前端技术交流群，人数380+（之前清理了将近50多个长期不发言的）；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这半年时间里，每天都有关注和取关的同行以及同学，现在的我已经学会淡然处之了。原创文章在今年下半年发表了23篇，相当于一周一篇的节奏。中途也曾遇到过停更的困境，一停就是两个月。当时也听说了有不少技术公众号运营了一段时间就停更了，有的甚至废弃一旁，再也没有精力去插手。而我，却不想做其中的一员，想继续坚持下去。说真的，仅靠业余时间来坚持运营公众号是一件非常不容易的事情。工作上，你可能会碰上公司业务繁忙，项目刚刚启动，每天加班到八九点钟，下班回到家已经10点多了的情况。生活上，你可能会碰到搬家、学驾照、陪女朋友逛街、户外跑步健身、朋友聚餐等占用你业余时间的事情。总之，如果你想有固定的时间来运营公众号，你会挤占很多你工作之外的时间。可能别人在看你写的一篇文章，看完也就完了。而这篇文章很有可能是你熬夜写出来的，写文章需要梳理思绪，需要润色文字，需要引经据典（这里指的是代码片段），通常这些事情，会让你用两到三个小时的时间才能完成。这背后的艰辛，估计只有运营过公众号的童鞋才会有切身体会吧。&lt;/p&gt;
&lt;p&gt;所以说，个人运营公众号，真的是一件需要坚持坚持再坚持才能走下去的事情。对于那些长期坚持写原创文章的作者，咱们还是且行且珍惜吧。&lt;/p&gt;
&lt;p&gt;当然，付出总有回报。接下来我们说说从运营公众号这件事情里所收获的感悟。很多博客大佬都建议萌新要养成写文章总结的习惯。可以帮你梳理你学到的知识，也能分享你的一些职场上的经验。关于写博带来的好处，我是受益匪浅，不仅让我加深了学到的技术知识，还认识了好多志同道合的同行朋友们（其中不乏一些大厂的同行），间接地扩大了自己的前端圈子，提升了自己在圈内的影响力，虽然这个影响力可能微乎其微。&lt;/p&gt;
&lt;p&gt;刚开始我只是在公众号里推送文章，后来在朋友的推荐下，陆续开通了博客园、掘金&lt;/p&gt;
&lt;p&gt;segmentfault、CSDN、简书、慕课网手记等博客专栏，从中收获了更多前端同行的认同与指教，也让我对前端这个圈子有了更深刻的认识。&lt;/p&gt;
&lt;p&gt;在这里，闰土感谢你们一直以来对我的关注与支持。2018年，我会继续前行，前端路上我们不孤单。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;Vue学以致用在工作中得到实践&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;今年在技术上的沉淀就是整体看完了一遍JavaScript高级程序设计，俗名红宝书。关于读后感，可以参考我之前写的系列文章：&lt;/p&gt;
&lt;blockquote readability=&quot;0.18367346938776&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyNDg5MzM4Ng==&amp;amp;mid=2247483733&amp;amp;idx=1&amp;amp;sn=4c47d82cb2cadaae34baf8e445cc9a49&amp;amp;chksm=e80941f0df7ec8e698df3a3901f44ecc849ee1bcb9d68b51b8f369ae3e1cb470e0b657af6718&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;闰土说JS进阶之变量&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyNDg5MzM4Ng==&amp;amp;mid=2247483740&amp;amp;idx=1&amp;amp;sn=4de12c34e08d15eb2a1663b354e67594&amp;amp;chksm=e80941f9df7ec8efb9fc46742f7a9082ef3063b422f9fde48e9f81500e8a9554836fe4d60436&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;闰土说JS进阶之作用域链&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyNDg5MzM4Ng==&amp;amp;mid=2247483760&amp;amp;idx=1&amp;amp;sn=2c8f3fc760b544ae10bc419f1464084a&amp;amp;chksm=e80941d5df7ec8c30a4a178e470f02a2358013682e7bb65f78c6219c09874cd8bb82196c377a&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;闰土说JS进阶之「戏说数组」&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说完基础，再来说说Vue这门MVVM框架。今年在工作中最大的收获就是学习完Vue 然后在公司项目中得到了实践，世间最美好的事情莫过于此。好多身处二三线城市、忙碌于小厂的童鞋们应该深有体会，你平时自学的热门前端框架在北上广深等一线城市都用烂了，然后在你们公司的项目中却很少见到它们的身影。学不能以致用，呜呼哀哉！&lt;/p&gt;
&lt;p&gt;关于今年对Vue的输出，你们也可以参考下我前段时间写的系列文章，以下是传送门：&lt;/p&gt;
&lt;blockquote readability=&quot;0.087378640776699&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyNDg5MzM4Ng==&amp;amp;mid=2247483894&amp;amp;idx=1&amp;amp;sn=06647be3eb92763160b44ef970eca6d9&amp;amp;chksm=e8094153df7ec8456900341e9d3caece1e63fca212127e582dfeb60fcd797c7d2e44970066a8&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;在没有DOM操作的日子里，我是怎么熬过来的（上）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyNDg5MzM4Ng==&amp;amp;mid=2247483897&amp;amp;idx=1&amp;amp;sn=b32c90f20610ae1d7ae58109c9562594&amp;amp;chksm=e809415cdf7ec84a827d58d5966cc45f1d0a038157200700943b59a63b4fb6677c0df110fa0b&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;在没有DOM操作的日子里，我是怎么熬过来的（中）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyNDg5MzM4Ng==&amp;amp;mid=2247483987&amp;amp;idx=1&amp;amp;sn=cffdd9271d25f317359eb58dde10c7e6&amp;amp;chksm=e80942f6df7ecbe0cc0cb5606e8d56d29967034acb12d1ea35ed45b085aae3785488fa6734ee&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;在没有DOM操作的日子里，我是怎么熬过来的（终结篇）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;我与微信小程序的邂逅&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;自从今年年初微信发布了小程序之后，我就对它保持持续的关注。期间为了巩固API，还练手写了一个demo。这是一个以战狼2为主题的、集阅读与电影为一体的小程序。以下是一个代码片段：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQFlZOSfia3pPrEtysWk55FicR2cakaMiaTuRZzjV8nIlDALBzq2pjyVJYQ/640?wx_fmt=jpeg&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mqQjaBlicpZib3IofcjPTcMrnicKAcoYoJQFlZOSfia3pPrEtysWk55FicR2cakaMiaTuRZzjV8nIlDALBzq2pjyVJYQ/0?wx_fmt=jpeg&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.625&quot; data-w=&quot;1280&quot; data-backw=&quot;618&quot; data-backh=&quot;386&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在2017年行将结束的时候，微信小程序放了一个大招，“跳一跳”瞬间成为朋友圈的热门游戏。有大佬说，国内不存在移动互联网，只有微信互联网。这或许不是一句玩笑话。微信通过“跳一跳”秀了一把小程序的肌肉💪，此番更新，或许是微信朝着这个目标迈出的一大步。小程序，大野心，让我们拭目以待吧！&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;比今晚不加班更能让程序员兴奋的话是，欢迎业主回家&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;今年我正式开始考虑买房交首付的事情了，岁月不饶人啊。曾经的90后闰土少年，如今已然变成了闰土大叔小哥哥。作为程序员，我想大家最大的愿望就是拥有一套属于自己的房子。没有房子，到哪儿都是流浪。&lt;/p&gt;
&lt;p&gt;今年我和我媳妇儿看了一处楼盘，异常心动，如果不是钱的问题，我估计我们当时都有买下来的冲动。那处楼盘位于太原市小店区偏南地段，离榆次区不远，楼盘名字叫枫林四季。小区户型不错，南北通透，一梯两户。均价4500，这价格绝对属于太原市最便宜的楼盘之一了。售楼部的人给我们介绍，小产权大户型，总价40万出头，首付20万，可按揭，还贷8年，月供2100。多么诱人的条件，能用钱解决的问题，都不是问题。&lt;strong&gt;问题是我们没钱啊&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;让我来说说在二三线城市买房交首付的现实问题吧。以我的老家太原为例，山西省会城市，据我了解，今年太原中环以内的房价都在1万左右，1万以下的都算便宜的。据售楼部的朋友说，未来两年太原的房价还会迎来新一波的涨价潮，到了2020年，太原会承办全国青少年运动会，简称青运会。青运会的主办地在晋源区的山西红灯笼体育中心，汾河公园三期工程将在附近地段展开，预计到时候附近的楼盘绝对会顺势而涨。到时候，地铁2号线也会全线开通运营，紧邻地铁线的楼盘估计又要疯长一波了。&lt;/p&gt;
&lt;p&gt;所以，房价到底涨不涨，还是售楼部小姐的那句话最经典：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;先生，赶紧买吧！明年房价一定会涨的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要不就是财经专家的那句金句：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;买房最好的时机，是去年。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为小编的我，只期盼2018年的工资能再涨上一涨。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2018年该立的旗帜&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;关于2018年的小计划，我要给自己立几个flag：&lt;/p&gt;

&lt;p&gt;1、录制一些关于前端的入门视频教程；&lt;/p&gt;
&lt;p&gt;        我现在还没想好要录制的方向，先立着吧，万一实现了呢？&lt;/p&gt;
&lt;p&gt;2、希望自己可以继续研究下vue、react、node、rn、小程序等；&lt;/p&gt;
&lt;p&gt;3、坚持锻炼身体；&lt;/p&gt;
&lt;p&gt;        户外跑步健身这件事，我已经陆陆续续热爱了10来年了。不解释，强悍的人生需要一个强健的体魄来支撑。&lt;/p&gt;
&lt;p&gt;4、希望2018年可以定下终身大事；&lt;/p&gt;
&lt;p&gt;5、最后，希望自己的工资能再涨一波。&lt;/p&gt;
&lt;p&gt;        多攒点钱，明年希望自己能够离首付更近一点（base 太原）。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;后记&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2017，我在太原&lt;/p&gt;
&lt;p&gt;2018，我在哪儿&lt;/p&gt;
&lt;p&gt;这个问题，恐怕连我自己也回答不了，那就交给时间来处理吧。时间是最好的魔法师，她会给我们最合适的答案 &lt;/p&gt;
&lt;p&gt;最后，祝大家在新的一年里，工作顺利，家庭和睦。如果你有什么新年小目标，欢迎在下方留言讨论，闰土大叔在这里等你～&lt;/p&gt;
</description>
<pubDate>Mon, 01 Jan 2018 19:23:00 +0000</pubDate>
<dc:creator>闰土大叔</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/running-runtu/p/8173975.html</dc:identifier>
</item>
<item>
<title>前端项目怎样合理使用模块化和闭包？ - 谢灿勇</title>
<link>http://www.cnblogs.com/st-leslie/p/8159639.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/st-leslie/p/8159639.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;span&gt;通常我们在做项目的时候一般会出现这样的一种情况。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;script&amp;gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; a.js&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; varity=1&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; changeHTML(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;define function changeHTML&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; decodeHTML(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; define function decodeHTML&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;………………&lt;/span&gt;
&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt; main.html的引入&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;a.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 这个按照我们正常的写法上面来说是没有什么问题的，至少在使用上面没有问题，但是却存在一些隐患&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 假设后来有A同事需要添加一个方法叫做decodeString来处理string文本，B同事如果也要添加一个类似的方法，那么就不能够使用decodeString来命名，除此之外这样的函数定义也会直接把函数暴露到全局中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 变量也会被散乱分布到全局变量中，后续变量命名就会有命名冲突的隐患&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3. 如果是函数与函数之间的依赖关系比较难维护等问题&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;对于这样的一种情况最开始谷歌的YUI提出的解决方案是与PHP,JAVA的解决方案相似就是添加一个命名空间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面的代码我们可以这样的去编写。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;script&amp;gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; a.js&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  变量&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; variable={};&lt;span&gt;//&lt;/span&gt;&lt;span&gt;全局中只有唯一的一个variable，用来保存所有的变量&lt;/span&gt;
    variable.varity=1&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 方法&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; methods={};&lt;span&gt;//&lt;/span&gt;&lt;span&gt;全局中只有唯一的一个methods，用来保存所有的方法&lt;br/&gt;　　 var methods.common={};&lt;/span&gt;
    methods.common.changeHTML=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;define function changeHTML&lt;br/&gt;　　　　　　alert(1);&lt;br/&gt;&lt;/span&gt;
&lt;span&gt;    }
    methods.common.decodeHTML &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;define function decodeHTML&lt;/span&gt;
&lt;span&gt;    }
   
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;我们发现这样的基本上面的这种方法是可以解决一些不必要的冲突的(除非你是想给自己挖坑)，假如我们要添加一个关于用户登录的方法，我们可以这样写。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
methods.users =&lt;span&gt; {};
    methods.users.login&lt;/span&gt;=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(str){
        console.log(str);
    }
    methods.users.login(&lt;/span&gt;&quot;this is a test&quot;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;这样去管理方法和变量虽然相比于第一种方法来说可以有效的解决冲突，但是也是存在如下的一些问题：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 如果我们要调用这个简单的login方法，我们会发现需要书写一大串的前缀（&lt;/span&gt;&lt;span&gt;methods.users.login&lt;/span&gt;&lt;span&gt;）。代码编写风格不简洁&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 变量虽然是可以有效的管理，但是确实没有解决读写的控制，特别是如果团队的人较多的话，容易发生误操作，所以应该进行读写分离。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;变量的管理方案----闭包&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;其实上面对变量的管理已经比较有效了，但只是缺少读写的控制，容易发生误操作，所以参照ES6的做法，重新编写了一个getter方法和setting方法来获取参数。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; val=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; that=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; variable=&lt;span&gt;{};
        variable.varity&lt;/span&gt;=1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; returnVal=&lt;span&gt;{};

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.isString=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(str){
             &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; str !== &quot;string&quot;&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &quot;TypeErr&quot;&lt;span&gt;;
                    
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (e) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e == &quot;TypeErr&quot;&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                }
            }
        }

        returnVal.getter&lt;/span&gt;=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(str){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; isStr=&lt;span&gt;that.isString(str);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(isStr){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; variable[str];
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                console.error(&lt;/span&gt;&quot;input type must string!!!!!&quot;&lt;span&gt;);
            }
           
        }

        returnVal.setter&lt;/span&gt;=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(key,value){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; isStr=&lt;span&gt;that.isString(key);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(isStr){
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(variable[key]==&lt;span&gt;undefined){
                    eval(variable[key]);
                }
                variable[key]&lt;/span&gt;=&lt;span&gt;value;
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                console.error(&lt;/span&gt;&quot;input type must string!!!!!&quot;&lt;span&gt;);
            }
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; returnVal;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;运行代码测试：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; val= val();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化方法&lt;/span&gt;
    console.log(val.getter(&quot;varity&quot;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  1&lt;/span&gt;
    val.setter(&quot;va222rity&quot;,3);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不存在重新添加并赋值&lt;/span&gt;
    console.log(val.getter(&quot;va222rity&quot;));  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 现在这样写变量就不容易发生误操作了(读写已经分离)，也不会把变量泄漏到全局中去。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面的函数就是对闭包的一个实际的应用。具体不懂的可以自行百度闭包的知识（具体还可以实现的更加的简洁，在这里不累赘）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;变量相关的优化方案我们已经说了，我们接下来说一说关于函数模块化的应用。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;函数的管理方案-------模块化&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;模块化最早是由node.js提出来的一种规范，具体的实现是CommonJS&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/728493/201801/728493-20180101183145784-101691995.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是由于服务器端与浏览器端的不同，不同之处主要表现在服务器端加载文件是通过缓存读取本地文件的形式来实现的，所以加载的时间可以忽略不计，但是在浏览器端（前端）却不是这样的，每个文件都是通过HTTP请求从服务器中下载而来，所以中间会产生一定的加载时间，所以浏览器端和服务器端你是不同的。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;服务器端&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt; &lt;span&gt;采用的方式是按需加载，也就是说什么时候需要就什么时候加载这个文件进来&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;浏览器端&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 共同点&lt;/strong&gt;：都是实行对代码的预先加载&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 异同点&lt;/strong&gt;：RequireJS提出的观点是预先加载并执行[早期]，SeaJS提出的观点是预先加载，按需执行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;相比之下，作者更倾向于RequireJS的实现方式，具体原因如下&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.RequireJS社区和文档的支持比较完善 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2,SeaJS项目停止维护&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.RequireJS在后续的版本中含括了SeaJS的功能&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在实际的应用之中，一般模块化是用来解决以下的几种情况的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.  解决文件与文件之间相互的依赖关系所产生的问题，方便后期代码的升级维护。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.  解决过渡加载不需要的函数代码&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.  函数直接不会泄漏到全局&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;具体的用法不过多的解释不懂点这里：&lt;a href=&quot;http://www.zhangxinxu.com/sp/seajs/docs/zh-cn/module-definition.html#define&quot; target=&quot;_blank&quot;&gt;http://www.zhangxinxu.com/sp/seajs/docs/zh-cn/module-definition.html#define&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;span&gt;写这篇文章的时候已经是2018年了，这些东西虽然可以用，但是未免有些过时。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;该文章主要是讲关于闭包和模块化在项目中要怎样的合理使用，目前模块化最好的解决方案我认为是ES6的module。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;但是考虑到团队中可能水平参差不齐，导致ES6推动的难度。所以建议首选ES6，次选RequireJS。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;关于ES6的讲解介绍会在之后的文章提及，如果觉得文章对你有帮助请点个赞。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 01 Jan 2018 17:14:00 +0000</pubDate>
<dc:creator>谢灿勇</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/st-leslie/p/8159639.html</dc:identifier>
</item>
<item>
<title>headfirst设计模式（4）—工厂模式 - 纷飞丶</title>
<link>http://www.cnblogs.com/skyseavae/p/8030304.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/skyseavae/p/8030304.html</guid>
<description>&lt;p&gt;&lt;span&gt;开篇&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;天天逛博客园，就是狠不下心来写篇博客，忙是一方面，但是说忙能有多忙呢，都有时间逛博客园，写篇博客的时间都没有？（这还真不好说）&lt;/p&gt;
&lt;p&gt;每次想到写一篇新的设计模式，我总会问自己：&lt;/p&gt;
&lt;p&gt;1，自己理解了吗？&lt;/p&gt;
&lt;p&gt;2，我能以一种简单且有逻辑的方式把它说出来吗？&lt;/p&gt;
&lt;p&gt;不说做到有的放矢，但是一本正经的胡说八道还是要有吧，起码要忽悠得头头是道嘛（手动斜眼笑）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于工厂模式的几个问题&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1，这个是拿来干什么的？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2，怎么用？&lt;/p&gt;
&lt;p&gt;3，不用行不行？&lt;/p&gt;
&lt;p&gt;第一个和第三个问题，我现在就可以告诉你答案：早点下班，可以&lt;/p&gt;
&lt;p&gt;所有的设计模式对我来说都是为了减少工作量。关于减少工作量我的理解是：每个需求，都应该在它适当的时候出现适当的代码！这个太重要了&lt;/p&gt;
&lt;p&gt;代码偷懒，后期返工多&lt;/p&gt;
&lt;p&gt;过度设计，后期返工多&lt;/p&gt;
&lt;p&gt;设计模式+经验可以解决这个问题，其他的我还不知道。没有经验怎么办？两个要点：&lt;/p&gt;
&lt;p&gt;1，能用&lt;/p&gt;
&lt;p&gt;2，简洁&lt;/p&gt;
&lt;p&gt;首先要达到能用，然后就是尽量简洁，这样代码就不会太差。首先你要自己看得懂，然后是让队友看得懂。&lt;/p&gt;
&lt;p&gt;你知道你队友看到一堆烂的看都看不懂，也一句注释都没有的代码的时候的心理阴影面积吗？&lt;/p&gt;
&lt;p&gt;这其实也没什么，谁没填过别人的坑呢？关键是他知道你家在哪里，而且还知道你经常走夜路，就问你怕不怕？（卧槽，又跑题了。。）&lt;/p&gt;

&lt;p&gt;需求：你有一个披萨店，只卖一种披萨，代码如下：&lt;/p&gt;
&lt;p&gt;披萨：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 披萨类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Pizza {
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String name;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;披萨名称&lt;/span&gt;
    
    &lt;span&gt;private&lt;/span&gt; String dough;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;面团&lt;/span&gt;
    
    &lt;span&gt;private&lt;/span&gt; String sauce;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;酱料&lt;/span&gt;
    
    &lt;span&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; toppings = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;佐料&lt;/span&gt;
    
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Pizza() {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name = &quot;原味披萨&quot;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dough = &quot;原味面团&quot;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sauce = &quot;原味酱料&quot;&lt;span&gt;;
    }
    
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; prepare() {
        System.out.println(&lt;/span&gt;&quot;开始准备披萨：&quot; +&lt;span&gt; name);
        
        System.out.println(&lt;/span&gt;&quot;开始处理面团：&quot; +&lt;span&gt; dough);
        
        System.out.println(&lt;/span&gt;&quot;添加酱料：&quot; +&lt;span&gt; sauce);
        
        System.out.println(&lt;/span&gt;&quot;添加佐料：&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(toppings.size() &amp;gt; 0&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(String t : toppings) {
                System.out.println(&lt;/span&gt;&quot; &quot; +&lt;span&gt; t);
            }
        }
    }
    
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; bake() {
        System.out.println(&lt;/span&gt;&quot;烘焙25分钟..&quot;&lt;span&gt;);
    }
    
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; cut() {
        System.out.println(&lt;/span&gt;&quot;披萨切片..&quot;&lt;span&gt;);
    }
    
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; box() {
        System.out.println(&lt;/span&gt;&quot;披萨打包..&quot;&lt;span&gt;);
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;披萨店：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 只卖一种披萨的披萨店
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PizzaStore {
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Pizza orderPizza() {
        Pizza pizza &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Pizza();
        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; pizza;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 测试类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * pizza测试类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PizzaTest {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        PizzaStore pizzaStore &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PizzaStore();
        Pizza pizza &lt;/span&gt;=&lt;span&gt; pizzaStore.orderPizza();
        System.out.println(&lt;/span&gt;&quot;当前预定的披萨：&quot; +&lt;span&gt; pizza.getName());
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/785526/201801/785526-20180101230839674-752897588.png&quot; alt=&quot;&quot; width=&quot;224&quot; height=&quot;131&quot;/&gt; &lt;/p&gt;
&lt;p&gt;现在披萨店要拓展业务了，因为卖一种披萨顾客已经吃腻了，现在要开始添加新的披萨类型&lt;/p&gt;
&lt;p&gt;&lt;span&gt;简单工厂模式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Pizza类的改进&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 披萨抽象类
 * 1,修改private -&amp;gt; protected（保证子类拥有这些属性）
 * 2,将Pizza定义为abstract类，防止被new，也是为后面的改造做准备
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Pizza {
    
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; String name;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;披萨名称&lt;/span&gt;
    
    &lt;span&gt;protected&lt;/span&gt; String dough;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;面团&lt;/span&gt;

    &lt;span&gt;protected&lt;/span&gt; String sauce;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;酱料&lt;/span&gt;
    
    &lt;span&gt;protected&lt;/span&gt; List&amp;lt;String&amp;gt; toppings = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;佐料&lt;/span&gt;
    
    &lt;span&gt;void&lt;/span&gt;&lt;span&gt; prepare() {
        System.out.println(&lt;/span&gt;&quot;开始准备披萨：&quot; +&lt;span&gt; name);
        
        System.out.print(&lt;/span&gt;&quot;开始处理面团：&quot; +&lt;span&gt; dough);
        
        System.out.println(&lt;/span&gt;&quot;添加酱料：&quot; +&lt;span&gt; sauce);
        
        System.out.println(&lt;/span&gt;&quot;添加佐料：&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(String t : toppings) {
            System.out.println(&lt;/span&gt;&quot; &quot; +&lt;span&gt; t);
        }
    }
    
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; bake() {
        System.out.println(&lt;/span&gt;&quot;烘焙25分钟..&quot;&lt;span&gt;);
    }
    
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; cut() {
        System.out.println(&lt;/span&gt;&quot;披萨切片..&quot;&lt;span&gt;);
    }
    
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; box() {
        System.out.println(&lt;/span&gt;&quot;披萨打包..&quot;&lt;span&gt;);
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Pizza [name=&quot; + name + &quot;, dough=&quot; + dough + &quot;, sauce=&quot; + sauce + &quot;, toppings=&quot; + toppings + &quot;]&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先给出新增的披萨&lt;/p&gt;
&lt;p&gt;芝士披萨：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_980668d9-477f-468c-a12c-d9c558c0ad4c&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_980668d9-477f-468c-a12c-d9c558c0ad4c&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_980668d9-477f-468c-a12c-d9c558c0ad4c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 芝士披萨
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CheesePizza &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Pizza{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CheesePizza() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name = &quot;芝士披萨&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dough = &quot;芝士披萨的面团&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sauce = &quot;芝士披萨的酱料&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.toppings.add(&quot;很多芝士....&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;蛤蜊披萨:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_48e5c9d5-0af0-49a2-8da7-eb08fe122704&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_48e5c9d5-0af0-49a2-8da7-eb08fe122704&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_48e5c9d5-0af0-49a2-8da7-eb08fe122704&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 蛤蜊披萨
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ClamPizza &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Pizza {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ClamPizza() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name = &quot;蛤蜊披萨&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dough = &quot;蛤蜊披萨的面团&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sauce = &quot;蛤蜊披萨的酱料&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.toppings.add(&quot;蛤蜊&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;意大利烤肠披萨：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_294ed756-7eeb-408c-910f-a8586a69bd1e&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_294ed756-7eeb-408c-910f-a8586a69bd1e&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_294ed756-7eeb-408c-910f-a8586a69bd1e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 意大利烤肠披萨
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PepperoniPizza &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Pizza{
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; PepperoniPizza() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name = &quot;意大利烤肠披萨&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dough = &quot;意大利烤肠披萨的面团&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sauce = &quot;意大利烤肠披萨的酱料&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.toppings.add(&quot;一大波意大利烤肠...&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 素食比萨：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_05cb243c-f28d-4359-a45e-0078879483d4&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_05cb243c-f28d-4359-a45e-0078879483d4&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_05cb243c-f28d-4359-a45e-0078879483d4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 素食比萨
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; VeggiePizza &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Pizza {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; VeggiePizza() {
        name &lt;/span&gt;= &quot;素食比萨&quot;&lt;span&gt;;
        dough &lt;/span&gt;= &quot;素食比萨的面团&quot;&lt;span&gt;;
        sauce &lt;/span&gt;= &quot;素食比萨的酱料&quot;&lt;span&gt;;
        toppings.add(&lt;/span&gt;&quot;素食比萨&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;素食比萨佐料1&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;素食比萨佐料2&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;贴了这么多代码，先给出一波简单的实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * pizza店
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PizzaStore {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Pizza orderPizza(String type) {
        Pizza pizza &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (type.equals(&quot;cheese&quot;&lt;span&gt;)) {
            pizza &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CheesePizza();
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (type.equals(&quot;pepperoni&quot;&lt;span&gt;)) {
            pizza &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PepperoniPizza();
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (type.equals(&quot;clam&quot;&lt;span&gt;)) {
            pizza &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ClamPizza();
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (type.equals(&quot;veggie&quot;&lt;span&gt;)) {
            pizza &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; VeggiePizza();
        }
        
        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; pizza;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在不考虑继续扩展披萨种类的时候，这样的实现有没有问题，一般来说，达到了可以用的标准，但是不好用，问题如下：&lt;/p&gt;
&lt;p&gt;1，没有兼容原来的一种披萨方法 public Pizza orderPizza()，相信我，每一个public方法都是很重要的，因为你不知道有多少地方用到过。当然也不是没办法知道，只是你知道也不一定就能改，就算你能改，也不一定改对。&lt;/p&gt;
&lt;p&gt;2，String类型的type太容易出错了，个人感觉对程序开发不友好，当然这个也要分情况，灵活和严谨本来就很难做到两全&lt;/p&gt;
&lt;p&gt;3，推荐取不到合适的type时抛异常，而不是返回空，便于排查问题(此处的if里面只是直接new返回的对象，实际情况远比现在的复杂)&lt;/p&gt;
&lt;p&gt;给出第二版：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * pizza店
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PizzaStore {
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Pizza orderPizza() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; orderPizza(PizzaTypeEnum.CHEESE);
    }
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Pizza orderPizza(PizzaTypeEnum type) {
        Pizza pizza;
 
        pizza &lt;/span&gt;=&lt;span&gt; SimplePizzaFactory.getPizza(type);
        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; pizza;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SimplePizzaFactory：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 简单工厂类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SimplePizzaFactory {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 根据类型获取pizza
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; type
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Pizza getPizza(PizzaTypeEnum type){
        &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (type) {
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CHEESE: &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CheesePizza();
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CLAM: &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ClamPizza();
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; PEPPERONI: &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PepperoniPizza();
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; VEGGIE: &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; VeggiePizza();
            &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;: &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NoSuchPizzaException(type.getCode());
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;辅助类（枚举，异常）:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_f3c91c66-b626-41aa-a854-16f57c28a8bf&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f3c91c66-b626-41aa-a854-16f57c28a8bf&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f3c91c66-b626-41aa-a854-16f57c28a8bf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 定义pizza类型枚举
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; PizzaTypeEnum{
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 芝士披萨
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    CHEESE(&lt;/span&gt;&quot;cheese&quot;&lt;span&gt;),
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 意大利烤肠披萨
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    PEPPERONI(&lt;/span&gt;&quot;pepperoni&quot;&lt;span&gt;),
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 蛤蜊披萨
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    CLAM(&lt;/span&gt;&quot;clam&quot;&lt;span&gt;),
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 素食比萨
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    VEGGIE(&lt;/span&gt;&quot;veggie&quot;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String code;
    PizzaTypeEnum(String code) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.code =&lt;span&gt; code;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCode() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; code;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_f129a557-fd18-4264-b769-5a08babfa108&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f129a557-fd18-4264-b769-5a08babfa108&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f129a557-fd18-4264-b769-5a08babfa108&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 没有匹配的pizza异常
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NoSuchPizzaException &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; RuntimeException{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 6831396172306375611L&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; NoSuchPizzaException(String message) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(message);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;测试类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * pizza测试类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PizzaTest {
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        PizzaStore store &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PizzaStore();

        Pizza pizza &lt;/span&gt;=&lt;span&gt; store.orderPizza(PizzaTypeEnum.CHEESE);
        System.out.println(pizza);
 
        pizza &lt;/span&gt;=&lt;span&gt; store.orderPizza(PizzaTypeEnum.VEGGIE);
        System.out.println(pizza);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/785526/201801/785526-20180101234721268-1011824962.png&quot; alt=&quot;&quot; width=&quot;734&quot; height=&quot;293&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好了，代码写到这里，其实对于：新增披萨类型的这个需求的实现其实已经很好了。至少来说现阶段的需求实现了，其次就是对调用方友好，至少队友不会跑过来问你类型传啥，不会告诉你他string字符串传错了，不会在你改个类型的时候，还要通知他（当然这个也可以通过常量来处理）。&lt;/p&gt;
&lt;p&gt;吹了半天，来说说这段代码的问题，正常情况下，需求会是这样变：&lt;/p&gt;
&lt;p&gt;1，PepperoniPizza暂时不要了，一般来说，你问他要不要，他会说，这个要看后面的运营情况（我：...）&lt;/p&gt;
&lt;p&gt;2，你给我新加一个xx披萨&lt;/p&gt;
&lt;p&gt;现在需要改的是两个地方，一个是工厂类，一个是枚举，但是主要的流程是不用改了，如果你觉得还是很麻烦在不考虑性能的情况下，你还可以用反射来玩，改造一下工厂类(实现通过class来创建对象)和枚举（添加一个字段来存放type对应的class）就可以了，不赘述..&lt;/p&gt;
&lt;p&gt;第一波需求就差不多可以这样收手了，随着业务的发展，披萨店那叫一个红火啊，虽然中间也对代码做了很多新的披萨，但是由于PizzaStore相当稳定，也没出什么大问题。&lt;/p&gt;
&lt;p&gt;新的问题（开分店）：&lt;/p&gt;
&lt;p&gt;1，旗舰店在芝加哥，现在要在纽约开一家新的店&lt;/p&gt;
&lt;p&gt;2，分店的披萨口味要根据当地的口味来进行调整，保证能够不失品牌特色的同时，也能满足当地独特的风味&lt;/p&gt;
&lt;p&gt;3，分店披萨的种类与暂时与旗舰店保持一致&lt;/p&gt;
&lt;p&gt;&lt;span&gt;工厂方法模式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;先把所有的披萨列出来&lt;/p&gt;
&lt;p&gt;芝加哥的披萨：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_80469a87-4c07-45fe-9686-1c6e75f9cd13&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_80469a87-4c07-45fe-9686-1c6e75f9cd13&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_80469a87-4c07-45fe-9686-1c6e75f9cd13&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 芝加哥芝士披萨
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ChicagoStyleCheesePizza &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Pizza {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ChicagoStyleCheesePizza() { 
        name &lt;/span&gt;= &quot;芝加哥芝士披萨&quot;&lt;span&gt;;
        dough &lt;/span&gt;= &quot;芝加哥芝士披萨面团&quot;&lt;span&gt;;
        sauce &lt;/span&gt;= &quot;芝加哥芝士披萨酱料&quot;&lt;span&gt;;
 
        toppings.add(&lt;/span&gt;&quot;芝加哥芝士披萨调料1&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;芝加哥芝士披萨调料2&quot;&lt;span&gt;);
    }
 
    @Override
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; cut() {
        System.out.println(&lt;/span&gt;&quot;芝加哥芝士披萨版切片...&quot;&lt;span&gt;);
    }
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 芝加哥蛤蜊披萨
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ChicagoStyleClamPizza &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Pizza {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ChicagoStyleClamPizza() {
        name &lt;/span&gt;= &quot;芝加哥蛤蜊披萨&quot;&lt;span&gt;;
        dough &lt;/span&gt;= &quot;芝加哥蛤蜊披萨面团&quot;&lt;span&gt;;
        sauce &lt;/span&gt;= &quot;芝加哥蛤蜊披萨酱料&quot;&lt;span&gt;;
 
        toppings.add(&lt;/span&gt;&quot;芝加哥蛤蜊披萨佐料1&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;芝加哥蛤蜊披萨佐料2&quot;&lt;span&gt;);
    }
 
    @Override
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; cut() {
        System.out.println(&lt;/span&gt;&quot;芝加哥蛤蜊披萨版切片...&quot;&lt;span&gt;);
    }
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 芝加哥意大利烤肠披萨
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ChicagoStylePepperoniPizza &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Pizza {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ChicagoStylePepperoniPizza() {
        name &lt;/span&gt;= &quot;芝加哥意大利烤肠披萨&quot;&lt;span&gt;;
        dough &lt;/span&gt;= &quot;芝加哥意大利烤肠披萨面团&quot;&lt;span&gt;;
        sauce &lt;/span&gt;= &quot;芝加哥意大利烤肠披萨酱料&quot;&lt;span&gt;;
 
        toppings.add(&lt;/span&gt;&quot;芝加哥意大利烤肠披萨调料1&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;芝加哥意大利烤肠披萨调料2&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;芝加哥意大利烤肠披萨调料3&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;芝加哥意大利烤肠披萨调料4&quot;&lt;span&gt;);
    }
 
    @Override
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; cut() {
        System.out.println(&lt;/span&gt;&quot;芝加哥意大利烤肠披萨版切片...&quot;&lt;span&gt;);
    }
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 芝加哥素食比萨
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ChicagoStyleVeggiePizza &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Pizza {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ChicagoStyleVeggiePizza() {
        name &lt;/span&gt;= &quot;芝加哥素食比萨&quot;&lt;span&gt;;
        dough &lt;/span&gt;= &quot;芝加哥素食比萨的面团&quot;&lt;span&gt;;
        sauce &lt;/span&gt;= &quot;芝加哥素食比萨的酱料&quot;&lt;span&gt;;
 
        toppings.add(&lt;/span&gt;&quot;芝加哥素食比萨调料1&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;芝加哥素食比萨调料2&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;芝加哥素食比萨调料3&quot;&lt;span&gt;);
    }
 
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; cut() {
        System.out.println(&lt;/span&gt;&quot;芝加哥素食比萨版切片...&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;纽约的披萨：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_96ec1ae7-1b3c-45de-8359-a18c65d4d87a&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_96ec1ae7-1b3c-45de-8359-a18c65d4d87a&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_96ec1ae7-1b3c-45de-8359-a18c65d4d87a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 纽约芝士披萨
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NYStyleCheesePizza &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Pizza {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; NYStyleCheesePizza() { 
        name &lt;/span&gt;= &quot;纽约芝士披萨&quot;&lt;span&gt;;
        dough &lt;/span&gt;= &quot;纽约芝士披萨面团&quot;&lt;span&gt;;
        sauce &lt;/span&gt;= &quot;纽约芝士披萨酱料&quot;&lt;span&gt;;
 
        toppings.add(&lt;/span&gt;&quot;纽约芝士披萨调料1&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;纽约芝士披萨调料2&quot;&lt;span&gt;);
    }
 
    @Override
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; cut() {
        System.out.println(&lt;/span&gt;&quot;纽约芝士披萨版切片...&quot;&lt;span&gt;);
    }
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 纽约蛤蜊披萨
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NYStyleClamPizza &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Pizza {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; NYStyleClamPizza() {
        name &lt;/span&gt;= &quot;纽约蛤蜊披萨&quot;&lt;span&gt;;
        dough &lt;/span&gt;= &quot;纽约蛤蜊披萨面团&quot;&lt;span&gt;;
        sauce &lt;/span&gt;= &quot;纽约蛤蜊披萨酱料&quot;&lt;span&gt;;
 
        toppings.add(&lt;/span&gt;&quot;纽约蛤蜊披萨佐料1&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;纽约蛤蜊披萨佐料2&quot;&lt;span&gt;);
    }
 
    @Override
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; cut() {
        System.out.println(&lt;/span&gt;&quot;纽约蛤蜊披萨版切片...&quot;&lt;span&gt;);
    }
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 纽约意大利烤肠披萨
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NYStylePepperoniPizza &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Pizza {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; NYStylePepperoniPizza() {
        name &lt;/span&gt;= &quot;纽约意大利烤肠披萨&quot;&lt;span&gt;;
        dough &lt;/span&gt;= &quot;纽约意大利烤肠披萨面团&quot;&lt;span&gt;;
        sauce &lt;/span&gt;= &quot;纽约意大利烤肠披萨酱料&quot;&lt;span&gt;;
 
        toppings.add(&lt;/span&gt;&quot;纽约意大利烤肠披萨调料1&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;纽约意大利烤肠披萨调料2&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;纽约意大利烤肠披萨调料3&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;纽约意大利烤肠披萨调料4&quot;&lt;span&gt;);
    }
 
    @Override
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; cut() {
        System.out.println(&lt;/span&gt;&quot;纽约意大利烤肠披萨版切片...&quot;&lt;span&gt;);
    }
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 纽约素食比萨
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NYStyleVeggiePizza &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Pizza {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; NYStyleVeggiePizza() {
        name &lt;/span&gt;= &quot;纽约素食比萨&quot;&lt;span&gt;;
        dough &lt;/span&gt;= &quot;纽约素食比萨的面团&quot;&lt;span&gt;;
        sauce &lt;/span&gt;= &quot;纽约素食比萨的酱料&quot;&lt;span&gt;;
 
        toppings.add(&lt;/span&gt;&quot;纽约素食比萨调料1&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;纽约素食比萨调料2&quot;&lt;span&gt;);
        toppings.add(&lt;/span&gt;&quot;纽约素食比萨调料3&quot;&lt;span&gt;);
    }
 
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; cut() {
        System.out.println(&lt;/span&gt;&quot;纽约素食比萨版切片...&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;披萨倒是列完了，但是在实际的开发过程中，业务逻辑这么简单那是不可能的，想要改那什么旗舰店披萨的类名是很困难的&lt;/p&gt;
&lt;p&gt;一般要考虑：&lt;/p&gt;
&lt;p&gt;1，是不是单机，有没有其他外部系统在调用&lt;/p&gt;
&lt;p&gt;2，改动原来的代码有什么好处，更容易理解吗？迭代了几个版本过后垃圾代码太多了吗？&lt;/p&gt;
&lt;p&gt;3，影响大不大&lt;/p&gt;
&lt;p&gt;当然，我这里是随便造，你们呢，我就不知道了，嘿嘿嘿，所以碰到这种情况，一般来说要悠着点，看时间，也要看影响，开发就是这样，同一个功能，2天有2天的做法，5天有5天的做法，10天有10天的做法&lt;/p&gt;
&lt;p&gt;披萨店改造：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 披萨店抽象类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PizzaStore {
 
    &lt;/span&gt;&lt;span&gt;abstract&lt;/span&gt;&lt;span&gt; Pizza createPizza(String item);
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Pizza orderPizza(String type) {
        Pizza pizza &lt;/span&gt;=&lt;span&gt; createPizza(type);
        System.out.println(&lt;/span&gt;&quot;--- 制作 &quot; + pizza.getName() + &quot; ---&quot;&lt;span&gt;);
        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; pizza;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 芝加哥披萨店
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ChicagoPizzaStore &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; PizzaStore {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String CHEESE = &quot;cheese&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String VEGGIE = &quot;veggie&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String CLAM = &quot;clam&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String PEPPERONI = &quot;pepperoni&quot;&lt;span&gt;;
    Pizza createPizza(String item) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (CHEESE.equals(item)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ChicagoStyleCheesePizza();
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (VEGGIE.equals(item)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ChicagoStyleVeggiePizza();
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (CLAM.equals(item)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ChicagoStyleClamPizza();
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (PEPPERONI.equals(item)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ChicagoStylePepperoniPizza();
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NoSuchPizzaException(item);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;纽约披萨店（和芝加哥披萨店几乎一毛一样，这里就不展开了）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_3b1f2445-c1cd-47b9-998e-b4bc1581782a&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3b1f2445-c1cd-47b9-998e-b4bc1581782a&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3b1f2445-c1cd-47b9-998e-b4bc1581782a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 纽约披萨店
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NYPizzaStore &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; PizzaStore {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String CHEESE = &quot;cheese&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String VEGGIE = &quot;veggie&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String CLAM = &quot;clam&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String PEPPERONI = &quot;pepperoni&quot;&lt;span&gt;;
    Pizza createPizza(String item) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (CHEESE.equals(item)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NYStyleCheesePizza();
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (VEGGIE.equals(item)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NYStyleVeggiePizza();
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (CLAM.equals(item)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NYStyleClamPizza();
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (PEPPERONI.equals(item)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NYStylePepperoniPizza();
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NoSuchPizzaException(item);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;这段代码有三个问题要理解清楚：&lt;/p&gt;
&lt;p&gt;1，这个地方为啥要弄个抽象类出来？&lt;/p&gt;
&lt;p&gt;这个就要结合实际来理解了，分店与分店之间，需不需要统一规范化管理？需不需要保证自己的特色？答案毫无疑问，都是需要的&lt;/p&gt;
&lt;p&gt;这个地方制作披萨的过程，毫无疑问是肯定要一致的。就像外卖一样，下单，炒菜，配送。整套流程都是这样，不能说你出来就开始炒菜了啊，这不科学。不一样的地方就是，你炒的什么菜，好不好吃。配送得快不快，稳不稳，服务好不好。&lt;/p&gt;
&lt;p&gt;所以，抽象类的意义就是：规范、特色&lt;/p&gt;
&lt;p&gt;2，factory咋个不见了？&lt;/p&gt;
&lt;p&gt;因为把它和具体的store合并在一起了，这样又引申出另外一个问题：为啥要合并？因为store现在充当的角色就是facotry，刚才说过的制作过程已经放到父类中实现了，现在只需要在具体的store中去解决披萨的创建问题&lt;/p&gt;
&lt;p&gt;3，为啥又不用枚举了，弄个String来创建pizza？&lt;/p&gt;
&lt;p&gt;如果还是单机，用枚举当然会比直接扔个string来得稳当。&lt;/p&gt;
&lt;p&gt;开了分店，要是每个分店都是一套完整的服务在玩，丢个string，要比枚举来得好。原因有2：传输过程中的序列化和反序列化、更加灵活（客户端不用每次都因为这个原因要去升级对应的包，特别是多个版本在跑得时候，升级了又会导致其他东西不能玩）&lt;/p&gt;
&lt;p&gt;测试类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 披萨测试类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; skysea
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PizzaTest {
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        PizzaStore nyStore &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NYPizzaStore();
        PizzaStore chicagoStore &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ChicagoPizzaStore();
 
        Pizza pizza &lt;/span&gt;=&lt;span&gt; nyStore.orderPizza(NYPizzaStore.CHEESE);
        System.out.println(&lt;/span&gt;&quot;Ethan ordered a &quot; + pizza.getName() + &quot;\n&quot;&lt;span&gt;);
 
        pizza &lt;/span&gt;=&lt;span&gt; chicagoStore.orderPizza(ChicagoPizzaStore.CHEESE);
        System.out.println(&lt;/span&gt;&quot;Joel ordered a &quot; + pizza.getName() + &quot;\n&quot;&lt;span&gt;);

        pizza &lt;/span&gt;=&lt;span&gt; nyStore.orderPizza(NYPizzaStore.CLAM);
        System.out.println(&lt;/span&gt;&quot;Ethan ordered a &quot; + pizza.getName() + &quot;\n&quot;&lt;span&gt;);
 
        pizza &lt;/span&gt;=&lt;span&gt; chicagoStore.orderPizza(ChicagoPizzaStore.CLAM);
        System.out.println(&lt;/span&gt;&quot;Joel ordered a &quot; + pizza.getName() + &quot;\n&quot;&lt;span&gt;);

        pizza &lt;/span&gt;=&lt;span&gt; nyStore.orderPizza(NYPizzaStore.PEPPERONI);
        System.out.println(&lt;/span&gt;&quot;Ethan ordered a &quot; + pizza.getName() + &quot;\n&quot;&lt;span&gt;);
 
        pizza &lt;/span&gt;=&lt;span&gt; chicagoStore.orderPizza(ChicagoPizzaStore.PEPPERONI);
        System.out.println(&lt;/span&gt;&quot;Joel ordered a &quot; + pizza.getName() + &quot;\n&quot;&lt;span&gt;);

        pizza &lt;/span&gt;=&lt;span&gt; nyStore.orderPizza(NYPizzaStore.VEGGIE);
        System.out.println(&lt;/span&gt;&quot;Ethan ordered a &quot; + pizza.getName() + &quot;\n&quot;&lt;span&gt;);
 
        pizza &lt;/span&gt;=&lt;span&gt; chicagoStore.orderPizza(ChicagoPizzaStore.VEGGIE);
        System.out.println(&lt;/span&gt;&quot;Joel ordered a &quot; + pizza.getName() + &quot;\n&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果（结果太多了，就不全部截图出来了）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/785526/201801/785526-20180101234405878-1407998739.png&quot; alt=&quot;&quot; width=&quot;591&quot; height=&quot;354&quot;/&gt;&lt;/p&gt;


</description>
<pubDate>Mon, 01 Jan 2018 16:19:00 +0000</pubDate>
<dc:creator>纷飞丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/skyseavae/p/8030304.html</dc:identifier>
</item>
<item>
<title>我的2017 - 肉娃娃</title>
<link>http://www.cnblogs.com/rouwawa/p/8169322.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rouwawa/p/8169322.html</guid>
<description>&lt;p&gt;在经历了2016的苍白，去年的今天决定在2017有所改变，即树目标和做记录。2017即将结束，回头看看目标和记录，这一年的关键词就是一个：踏实。&lt;/p&gt;
&lt;h4 id=&quot;写博客&quot;&gt;1. 写博客&lt;/h4&gt;
&lt;p&gt;这是我在2017年最意外的收获，以前一直知道写博客对工作或生活的重要意义，但是真正付诸于行动之后，才发现并不只有“意义”那么简单，而逐渐养成记录的习惯之后，在工作中遇到的任何一个问题，从发现到解决这一过程中，你会发现自己会有一种“渴望”去用文字梳理这样一个脉络，因为解决问题的过程中，往往是东一个点西一个点的去摸索，比较杂乱，回头梳理一遍，更容易掌握该知识的要点。当然，精力有限，并且紧凑的工作压力下，你可能来不及去梳理，就要赶着时间去解决下一个问题，所以只有简单记录一下，争取回头梳理。&lt;/p&gt;
&lt;p&gt;发表了17篇博客，主要是技术相关，差不多三四万字。&lt;/p&gt;
&lt;h4 id=&quot;阅读&quot;&gt;2. 阅读&lt;/h4&gt;
&lt;p&gt;阅读一直是我多年以来的习惯，虽然阅读速度始终没有大的提升，可能阅读量和知识储备完全不能做到，一目十行，花一两个小时检索一本书的精华即可，现在选的书目基本都是推荐书籍，里面有太多自己不曾接触或者不熟悉的内容，只能细细品读，没关系，没有功利性，享受即可。&lt;/p&gt;
&lt;p&gt;2017年，阅读了11本课外书，其中影响比较大的三本是：&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;《人类简史》——宏观的认识了人类和这个世界的演变。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;《乌合之众》——作者对人类群体活动的高度概括，在百年后的今天依然适用，细思极恐。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;《你一生的故事》——披着科幻外衣的哲学书，深深不能自拔。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其中值得一提的是《你一生的故事》，最初是因为看了其改编的电影《降临》而勾起我极大的兴趣而购买的，该书是本短篇科幻小说集，所谓披着科幻外衣，是因为作者并没有描写什么黑科技，而仅仅是构建了一个现实中不存在的世界。《你一生的故事》只是其中的一篇，讲述了语言到底在人类社会发展，以及大脑构建时空所起的影响，这一脑洞让我非常着迷。该书中绝大多数篇章都极其有内涵，忍不住想要把每一篇都剖析一下，以后慢慢来。&lt;/p&gt;
&lt;h4 id=&quot;运动&quot;&gt;3. 运动&lt;/h4&gt;
&lt;p&gt;运动也一直是我坚持的爱好之一，一直觉得喜欢锻炼完之后的那种感觉，我觉得每一个喜欢运动的人，精气神显得相对更好一些。2017年在keep中记录的运动时间是2871分钟，其中跑步233公里。因为天热偷懒、雾霾和大腿拉伤，没有能很好的完成目标。值得一提的是，2017年回归足球队，主要是抱着跟队友学习的态度，学习怎么踢出“专业化”的感觉，而不是像以前踢野球一样，只知道满场吓跑，对跑位、站位和传接球都理解的不深。球队也首次踢进淘汰赛，不错。&lt;/p&gt;
&lt;h4 id=&quot;电影&quot;&gt;4. 电影&lt;/h4&gt;
&lt;p&gt;电影也是我的爱好之一（不得不说，爱好太多），以前看了大量的电影，没有记录，觉得浑浑噩噩的。2017开始学着在猫眼上做标记。看了40部好电影，其中《降临》、《爱乐之城》、《沃伦》、《新世界》印象深刻，今天看的《芳华》也超出自己的预期。《降临》改变自《你一生的故事》，还原度较高。《沃伦》已写影评发表。&lt;/p&gt;
&lt;h4 id=&quot;工作&quot;&gt;5. 工作&lt;/h4&gt;
&lt;p&gt;没错，工作肯定放在最后^_^。年初，一位FPGA骨干同事离职，一堆烂摊子扔给我，当然这也是一个绝佳的学习机会，项目一直处于赶的状态，FPGA代码修修补补，大半年的时间终于熬到了项目鉴定完成。11月底，却又被“坑”，要求在一个半月内完成一个STM32做控制的项目，也被授权主管该项目，进度控制、协调资源、自己摸索着写代码，目前来看能凑合交付样机，挺有成就感的，除了时间上的压力外，其他都还好，也经历一个快速成长期。&lt;/p&gt;
&lt;p&gt;2016做的计划，在2017年的完成度还是令人满意的，不出意外，2018还有很多件大事要发生，期待一切顺利，继续加油。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/966190/201801/966190-20180101230635424-866509982.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 01 Jan 2018 15:07:00 +0000</pubDate>
<dc:creator>肉娃娃</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rouwawa/p/8169322.html</dc:identifier>
</item>
<item>
<title>ArcGIS Runtime SDK是什么？ - 秋意正寒</title>
<link>http://www.cnblogs.com/onsummer/p/8169266.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/onsummer/p/8169266.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1097074/201801/1097074-20180101221359331-254810295.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图，Runtime SDK是什么东西？居然还有安卓、苹果手机、Mac、QT的版本？&lt;/p&gt;
&lt;p&gt;是不是意味着ArcGIS的编辑数据和空间分析可以通过编程的方法在每个平台上满地跑了？&lt;/p&gt;
&lt;p&gt;答案是：是，也不是。&lt;/p&gt;

&lt;p&gt;AO是ArcGIS Desktop和ArcGIS Server的底层技术，有C++、Java、.NET三种实现方式。&lt;/p&gt;
&lt;p&gt;AO包装一层，就是AE，其绝大部分语法是与AO兼容的。&lt;/p&gt;
&lt;p&gt;只要你能力足够，使用AO可以完全再造一款ArcGIS Desktop软件出来，当然也可以造一款ArcGIS Server；&lt;/p&gt;
&lt;p&gt;也就是说有了AO/AE，可以定制出一款从数据编辑、空间分析、制图输出、数据管理都能做的很好的二次开发软件。&lt;/p&gt;
&lt;h2&gt;1.1 Runtime SDK&lt;/h2&gt;
&lt;p&gt;早期用户可能听说过ArcGIS Engine Runtime等一系列乱七八糟的“Runtime”，这里不废话，以免混淆。&lt;/p&gt;
&lt;p&gt;为了完成在各种平台（Linux、iOS、安卓、Windows、Mac）上进行数据的显示和简单的数据统计、简单的空间分析，但是数据源（地图数据、矢量栅格数据）并不存在于本机，而在远程服务器端（通常是服务器电脑上的ArcGIS Server、ArcGIS Portal、Datastore等），进行的空间分析也不是在本机进行的，仅仅作为远程服务器进行的GP（地理处理，GeoProcess，ArcGIS Server的一个功能，十分强大）的运行结果的显示，就有了Runtime SDK。&lt;/p&gt;
&lt;p&gt;画图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1097074/201801/1097074-20180101223246940-39003698.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Runtime SDK就是为了创造各个平台上的这种客户端而存在的一套开发包。&lt;/p&gt;
&lt;p&gt;其中，QT的特点使得在Linux/Windows都可以跑Runtime SDK.&lt;/p&gt;
&lt;h2&gt;1.2 与B/S架构的ArcGIS API for JavaScript的区别&lt;/h2&gt;
&lt;p&gt;这个更像C/S架构，Runtime SDK的API帮助文档、类结构与Js 4.x API的API极其相似，在不同的编程语言上有所区别而已。&lt;/p&gt;
&lt;p&gt;例如，Js API用Task完成浏览器端处理GP服务的请求、接收远程GP服务生成的结果；&lt;/p&gt;
&lt;p&gt;Runtime SDK也能找到类似的Task类。&lt;/p&gt;

&lt;p&gt;因为Js 4.x API在4.5中已经出现了数据编辑的工具，这就意味着Runtime SDK早就应该具备了简单的数据编辑工作。&lt;/p&gt;
&lt;p&gt;但是，与ArcMap和ArcGIS Pro的“工作站”式编辑工具还是有很大差距的，例如不能完成字段的批量计算、不能完成拓扑、不能方便数据导入导出等，只能简单的画点画线画面。&lt;/p&gt;
&lt;h2&gt;1.3 Runtime SDK产出&lt;/h2&gt;
&lt;p&gt;开发生成的应用程序是绿色的，不需要依赖庞大的运行库，也不需要安装ArcGIS套件，直接双击就能使用。&lt;/p&gt;
&lt;p&gt;随之会产生一些dll（Windows下），随着exe一起携带即可。&lt;/p&gt;
&lt;p&gt;Linux、Mac、安卓、iOS表示不清楚~有兴趣的同学可以自行了解。&lt;/p&gt;

&lt;p&gt;Runtime SDK全线都更新到了100.x这个版本，旗帜鲜明的与ArcGIS Pro对接，也就是说大数据、多线程、3DGIS的加入。&lt;/p&gt;
&lt;p&gt;显然，Runtime SDK就是为了解决AO/AE中数据显示/简单分析的功能而出现的，因为让只需要查看数据、地理数据统计、轻量分析的用户去购买AE是不划算的，Esri考虑到了这一点，将繁重的数据编辑、数据管理、空间分析过程集中到了新的ArcGIS Pro平台上，使用Datastore、Portal进行发布和管理云端数据，再使用Runtime SDK编写轻量化的客户端进行访问，这符合实际的需求。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1097074/201801/1097074-20180101224602003-254445469.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，为了方便拓展ArcGIS Pro，已经有了帮助开发ArcGIS Pro插件的SDK。&lt;/p&gt;

</description>
<pubDate>Mon, 01 Jan 2018 14:50:00 +0000</pubDate>
<dc:creator>秋意正寒</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/onsummer/p/8169266.html</dc:identifier>
</item>
<item>
<title>图像识别：微信跳一跳机器人 - ExperDot</title>
<link>http://www.cnblogs.com/experdot/p/8157666.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/experdot/p/8157666.html</guid>
<description>&lt;h2&gt;准备&lt;/h2&gt;
&lt;blockquote readability=&quot;5.9367088607595&quot;&gt;
&lt;p&gt;　　IDE：VisualStudio&lt;/p&gt;
&lt;p&gt;　　Language：VB.NET/C#&lt;/p&gt;
&lt;p&gt;　　GitHub：&lt;a href=&quot;https://github.com/experdot/AutoJump.NET&quot; target=&quot;_blank&quot;&gt;AutoJump.NET&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　本文将向你介绍一种通过图像识别实现“跳一跳”机器人的方法。　&lt;/p&gt;
&lt;h2&gt;第一节 图像识别&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;　　文中提到的所有方法和步骤均仅涉及简单的向量计算。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;　　需要哪些计算？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　比较像素点的颜色&lt;/p&gt;
&lt;p&gt;　　求向量集合的中心&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　计算颜色的相似度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　一个RGB颜色可以看作一个三维向量&lt;/p&gt;
&lt;p&gt;　　比较两个颜色的相似度可以计算它们的欧几里得距离&lt;/p&gt;
&lt;p&gt;　　也可以直接比较它们的夹角：夹角越小，两个颜色越相似，反之亦然&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;求平面向量集合的中心位置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;首先，将集合中所有的向量相加得到向量&lt;em&gt;&lt;strong&gt;S&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;再将向量&lt;strong&gt;&lt;em&gt;S&lt;/em&gt;&lt;/strong&gt;除以集合元素的个数，结果即为它们的中心&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/726127/201801/726127-20180101204912659-1974445619.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图1-1 识别效果预览&lt;/p&gt;
&lt;h2&gt;第二节 识别落点&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;　　找出盒子落点的前提是发掘每个盒子都具有的共同特征。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　&lt;strong&gt;盒子特征&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　目标落点有两种类型，菱形或圆形的盒子&lt;/p&gt;
&lt;p&gt;　　只有部分盒子的顶面颜色是大面积的纯色&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;盒子下方的地面背景是纯色，但随着游戏进行颜色会发生变化&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;顶点特征&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　顶点的上侧为背景色&lt;/p&gt;
&lt;p&gt;　　顶点的左侧（可能不适用于圆形）、右侧（可能不适用于圆形）均为背景色&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;识别方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　从上向下逐行扫描像素找出盒子的顶点&lt;em&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　继续向下找出与&lt;em&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/em&gt;颜色相似的所有像素点集合&lt;em&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　求出&lt;em&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/em&gt;像素集合的中心点，即为落点&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/726127/201801/726127-20180101220518143-146676075.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图2-1 盒子落点识别&lt;/p&gt;
&lt;h2&gt;第三节 识别角色&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;　　角色的颜色相对特殊，很容易从游戏图像中区分出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　&lt;strong&gt;人物特征&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　角色呈国际象棋棋子状&lt;/p&gt;
&lt;p&gt;　　角色整体颜色较为一致，部分区域有高光&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;顶点特征&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　角色的顶点颜色较深，易于区分&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;识别方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　从上向下逐行扫描像素找出角色的顶点&lt;em&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　继续向下找出与&lt;em&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/em&gt;颜色相似的所有像素点集合&lt;em&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　求出&lt;em&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/em&gt;像素集合的中心点，并向下偏移固定数值&lt;em&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　中心点偏移后的像素&lt;em&gt;&lt;strong&gt;D&lt;/strong&gt;&lt;/em&gt;的位置即为角色的底部&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/726127/201801/726127-20180101194817049-1224504882.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3-1 角色底部识别&lt;/p&gt;
&lt;h2&gt;第四节 识别干扰&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;　　通常，简单的方法只适应于绝大部分情况，特定情形时仍会出错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　&lt;strong&gt;哪些情况会导致识别错误&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;盒子顶部的颜色不一致时&lt;/p&gt;
&lt;p&gt;　　角色顶部的位置高于目标盒子时&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;角色站立的盒子和目标盒子的顶部颜色一致时&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;其他干扰因素的解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;加分提示的动画：延时解决&lt;/p&gt;
&lt;p&gt;　　击中中心的动画：延时解决&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;音乐盒的乐符动画：不要在音乐盒上停留ヾ(✿ﾟ▽ﾟ)ノ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/726127/201801/726127-20180101222315612-2042666433.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图4-1 魔方（正确）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/726127/201801/726127-20180101222334846-1086830251.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图4-2 商店（偏离中心）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/726127/201801/726127-20180101222827815-1165158036.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图4-3 音乐盒 （偏离中心）&lt;/p&gt;
&lt;h2&gt;第五节 实测数值&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;　　程序的部分参数需要通过实际测试得出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　&lt;strong&gt;识别区域&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;仅屏幕中间的三分之一区域需要进行图像识别&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;触压时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　触压屏幕的毫秒数正好是角色与落点距离数值的两倍&lt;/p&gt;
&lt;p&gt;　　例如，距离为500个像素点，那么就需要持续按下1000毫秒&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/726127/201801/726127-20180101214106253-1697136279.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图5-1 识别区域（阴影部分）&lt;/p&gt;
&lt;h2&gt;附录&lt;/h2&gt;
&lt;p&gt;　　&lt;span&gt;运气好时，机器人可以自动玩到1000分:)&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5.5344827586207&quot;&gt;
&lt;p&gt;　　GitHub：&lt;a href=&quot;https://github.com/experdot/AutoJump.NET&quot; target=&quot;_blank&quot;&gt;AutoJump.NET&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;　　参考文章：&lt;a href=&quot;https://www.cnblogs.com/dotnet-org-cn/p/8149693.html&quot; target=&quot;_blank&quot;&gt;.NET开发一个微信跳一跳辅助程序&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　参考书籍：《&lt;a href=&quot;https://book.douban.com/subject/10750155/&quot; target=&quot;_blank&quot;&gt;数学之美&lt;/a&gt;》&lt;span&gt;[美] 吴军 著 人民邮电出版社&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 01 Jan 2018 14:40:00 +0000</pubDate>
<dc:creator>ExperDot</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/experdot/p/8157666.html</dc:identifier>
</item>
<item>
<title>再谈谈数学 - 窗户</title>
<link>http://www.cnblogs.com/Colin-Cai/p/7881317.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Colin-Cai/p/7881317.html</guid>
<description>&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
　　版权申明：本文为博主窗户(Colin Cai)原创，欢迎转帖。如要转贴，必须注明原文网址

　　http://www.cnblogs.com/Colin-Cai/p/7881317.html 

　　作者：窗户

　　QQ：&lt;span&gt;6679072&lt;/span&gt;

　　E-mail：&lt;span&gt;6679072@qq.com
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　在一个很老的群里聊天，群里就那么二十几个人，都是搞这行的，在网上认识了十几年。一人是某大型电子地图公司出来的，说，”地图里面人工智能不就是用初中的概率论搞起来的，谁拿到数据谁都可以搞定“……初中的概率论，听到觉得真的非常的刺耳，于是就在群里争了几句。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　回头来想想，在信息技术领域里，难道数学真的变成了这么低的门槛的东西？再或许，我真的是out了，这些年的执着变得分文不值?可能是因为自己有些偏执，想起以前的时候学习计算机，虽然专业并不是计算机，但依然是一板一眼，一上来是从c语言汇编语言这样的语言开始搞起，数据结构、编译原理、操作系统原理、数据库原理、计算机原理等，过程中潜意识中意识到数学的作用，仿佛所有的计算机知识都可以被形式化。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　准确的说，计算机应该属于工科的东西，有很多工程的性质。如同别的工科工程一样，很多时候因为一些具体业务的需求会有一些用到初等数学的小窍门。打个比方，从时间0开始，两个任务，一个3分钟执行一次，一个5分钟执行一次，那么两个在那些分钟点上，两个任务都执行？如果是三个任务呢？于是突然有一天来了更复杂的问题，已知a,b互质数，找一个c，使得ac除以b余1，结果可能就不会做了。那么，为什么不稍微系统的学一下数论呢？设计算法的时候，可能设计了一个频繁使用的平均复杂度为O(logn)的算法，感觉很满意，可是运行的好好的，突然程序运行偶尔会很不顺畅，原来该算法的最高时间复杂度是O(n)。那么，为什么不系统的学学复杂度的计算呢？感到最烦的就是某些可能是初学者，会问为什么什么什么算法没有什么什么语言的描述之类的问题。我们学习算法学习的是神，而不是型，你学得算法的内涵之后，应该很容易就可以用你熟悉的语法写出来，可是很多人不明白这一点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　机器学习里最简单的KNN算法，每个学习过的人真的认真去想过吗？KNN的每个维度如何做到公平这个问题，如果书本或者别人不告诉你的情况下，你自己是否会想到如何变的公平？直方图的意义在什么地方？归一化呢？KNN是很简单，可是你会不会想到如何在很多很多的样本中，尽量快速的找到前k个最近的值？我相信，很多人没有想过，乃至书上不会说自己也就永远不会去想。当然，我们的库、我们的工具可能很多地方是很好，让你不用去思考某些细节。所以，我们的研发很多时候只是在那里调节一些老外的参数而已，却很少想着去真正理解它，然后再此基础上改进甚至否定。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　工程两个字很多时候给人一些误解，认为对于某些问题我们只要反复的去试就行了，可实际上是，如果有深入的理论指导，很可能事半功倍，何止事半功倍。有时候想，是什么让人浮躁，是我们的收入使然，还是千变万化而又快速取代的信息技术？或许一切都不是原罪，而只有自己的心。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我一向觉得，数学很重要，我们的软件工程师大多数数学学的太少，即便有的学了一些，可是依然不想着得其髓。再回到之前的概率论，搞AI的确是需要概率论这样的数学基础的，但是概率论真的很容易吗？我看不见得，当年我们学的时候，感觉是很难的，那一大堆的证明很头疼啊，比如有多少种极限的方式可以得到正太分布？甚至于建立概率空间的Sigma代数都不是那么平易近人。当然，你会反驳，我们是工程师，我们只需要知道怎么使用嘛那么复杂的概率论底层我们凭什么要深入了解。是的，我们甚至可能只需要知道条件概率怎么算，知道贝叶斯公式就OK了。可是，永远不要忘了，如果你站在更高的地方，你的思路会变得更广阔。所有上了大学接触到高等数学的学生可能都不会再觉得高中数学过于困难，那就是因为你上到了一个新的台阶。不需要每个人都像数学系那样深度的去学数学，可是，还是需要深入的想一想。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我还是建议每个人从数学的角度去看看编译原理，或许可以看到一个不一样的世界，我也希望每个人都可以尝试着用lisp去勾画，好好理解理解lisp的思想，如果所有都是为了实用而实用，思想会禁锢。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　一直遇到一些浮躁的刚毕业大学生，甚至工作了有一定年份的人也有类似的想法。但我的思维可能还是那么古板，也许真是我多想了，不是人们浮躁了，而是世界变的快。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 01 Jan 2018 14:10:00 +0000</pubDate>
<dc:creator>窗户</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Colin-Cai/p/7881317.html</dc:identifier>
</item>
</channel>
</rss>