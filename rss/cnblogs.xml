<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Python网络编程（socketserver、TFTP云盘、HTTPServer服务器模型） - ParisGabriel</title>
<link>http://www.cnblogs.com/ParisGabriel/p/9491157.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ParisGabriel/p/9491157.html</guid>
<description>
&lt;p&gt;&lt;strong&gt;ＨＴＴＰ协议？&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;13&quot;&gt;
&lt;p&gt;HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。HTTP是一个无状态的协议。&lt;/p&gt;

&lt;p&gt;通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS&lt;/p&gt;

&lt;p&gt;默认HTTP的端口号为80，HTTPS的端口号为443。&lt;/p&gt;
&lt;/div&gt;

&lt;div readability=&quot;89&quot;&gt;
&lt;p&gt;　　　　ｗｈａｔ？　　无状态什么鬼？&lt;/p&gt;
&lt;p&gt;　　　　　　　HTTP无状态协议是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，&lt;/p&gt;
&lt;p&gt;　　　　　　　　则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快&lt;/p&gt;
&lt;p&gt;　　　　　　　　由于ｗｅｂ等客户端与服务器交互的应用程序出现后HTTP的无状态严重阻碍了这些应用的实现效率 说以就产生了cookie和Session&lt;/p&gt;
&lt;p&gt;cookie：&lt;/p&gt;
&lt;p&gt;当用户使用浏览器访问一个支持Cookie的网站的时候，用户会提供包括用户名在内的个人信息并且提交至服务器；&lt;/p&gt;
&lt;p&gt;接着，服务器在向客户端回传相应的超文本的同时也会发回这些个人信息，当然这些信息并不是存放在HTTP响应体（Response Body）中的，&lt;/p&gt;
&lt;p&gt;而是存放于HTTP响应头（Response Header）；当客户端浏览器接收到来自服务器的响应之后，&lt;/p&gt;
&lt;p&gt;浏览器会将这些信息存放在一个统一的位置，对于Windows操作系统而言，&lt;/p&gt;
&lt;p&gt;我们可以从： [系统盘]:\Documents and Settings\[用户名]\Cookies目录中找到存储的Cookie；自此，客户端再向服务器发送请求的时候，&lt;/p&gt;
&lt;p&gt;都会把相应的Cookie再次发回至服务器。而这次，Cookie信息则存放在HTTP请求头（Request Header）了。&lt;/p&gt;
&lt;p&gt;Session ：&lt;/p&gt;
&lt;p&gt;所谓session就是指客户端与服务端之间的一种交互过程的状态信息（数据） 这个状态的定界以及生命期是应用本身的事情&lt;/p&gt;
&lt;p&gt;当一个用户向服务器发送第一个请求时，服务器为其建立一个session 并且会给这个session创建一个标识号&lt;/p&gt;
&lt;p&gt;这个用户随后的请求都应该包括这个标识好服务器会对这个标识判断请求属于哪一个session&lt;/p&gt;
&lt;p&gt;这种机制不使用IP作为标识，因为很多机器是代理服务器上网，无法区分主机 可以用cookie和URL重写来实现session标识号（sessionID）&lt;/p&gt;
&lt;p&gt;URL只是一个统称 实际上是URI包含URL和URN由于URN用的非常少 几乎说有的URI都是URL所以人们更喜欢叫URL&lt;br/&gt;&lt;/p&gt;

&lt;div readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;strong&gt;os.&lt;span&gt;listdir&lt;/span&gt;(path)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;          获取文件&lt;strong&gt;列表&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;os.path.&lt;span&gt;isfile&lt;/span&gt;() : &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;           判断一个 文件是否为&lt;strong&gt;普通文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;os.path.&lt;span&gt;isdir&lt;/span&gt;() ：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;           判断一个文件是否为&lt;strong&gt;目录 &lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;TFTP 文件服务器&lt;/p&gt;

&lt;p&gt;项目功能 ： &lt;/p&gt;

&lt;p&gt;    * 客户端有简单的页面命令提示&lt;/p&gt;
&lt;p&gt;    * 功能包含：&lt;/p&gt;
&lt;p&gt;               1. 查看服务器文件库中的文件列表（普通文件）&lt;/p&gt;
&lt;p&gt;               2. 可以下载其中的某个文件到本地&lt;/p&gt;
&lt;p&gt;               3. 可以上传客户端文件到服务器文件库&lt;/p&gt;

&lt;p&gt;     * 服务器需求 ：&lt;/p&gt;
&lt;p&gt;               1. 允许多个客户端同时操作&lt;/p&gt;
&lt;p&gt;               2.每个客户端可能回连续发送命令&lt;/p&gt;

&lt;p&gt;技术分析：&lt;/p&gt;
&lt;p&gt;       1. tcp套接字更适合文件传输&lt;/p&gt;
&lt;p&gt;       2. 并发方案  ---》 fork 多进程并发&lt;/p&gt;
&lt;p&gt;       3. 对文件的读写操作&lt;/p&gt;
&lt;p&gt;       4. 获取文件列表 ----》 os.listdir() &lt;/p&gt;
&lt;p&gt;       粘包的处理&lt;/p&gt;

&lt;p&gt;整体结构设计&lt;/p&gt;
&lt;p&gt;       1. 服务器功能封装在类中（上传，下载，查看列表）&lt;/p&gt;
&lt;p&gt;       2. 创建套接字，流程函数调用  main（）&lt;/p&gt;
&lt;p&gt;       3. 客户端负责发起请求，接受回复，展示&lt;/p&gt;
&lt;p&gt;       服务端负责接受请求，逻辑处理&lt;/p&gt;

&lt;p&gt;编程实现&lt;/p&gt;
&lt;p&gt;       1. 搭建整体结构，创建网络连接&lt;/p&gt;
&lt;p&gt;       2. 创建多进程和类的结构&lt;/p&gt;
&lt;p&gt;       3. 每个功能模块的实现&lt;/p&gt;


&lt;/div&gt;
&lt;p&gt;服务器端：&lt;/p&gt;

&lt;div readability=&quot;13&quot;&gt;&lt;br/&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; socket &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; signal 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time 

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 文件库&lt;/span&gt;
FILE_PATH = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/home/tarena/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 实现功能模块&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TftpServer(object):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,connfd):
        self.connfd &lt;/span&gt;=&lt;span&gt; connfd 

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查询&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; do_list(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取列表&lt;/span&gt;
        file_list =&lt;span&gt; os.listdir(FILE_PATH)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; file_list:
            self.connfd.send(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文件库为空&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.encode())
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 服务器目录无文件&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 有文件&lt;/span&gt;
            self.connfd.send(b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            time.sleep(&lt;/span&gt;0.1&lt;span&gt;)

        files &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; file &lt;span&gt;in&lt;/span&gt;&lt;span&gt; file_list:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 发送所有普通文件的文件名并且不是隐藏文件&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; os.path.isfile(FILE_PATH+file) &lt;span&gt;and&lt;/span&gt; file[0] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 文件名间隔符 用于客户端解析&lt;/span&gt;
                files = files + file + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 一次全部发送 简单粗暴&lt;/span&gt;
&lt;span&gt;        self.connfd.send(files.encode())

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 下载&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; do_get(self,filename):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断文件是否纯在&lt;/span&gt;
        &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            fd &lt;/span&gt;= open(FILE_PATH + filename,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt;:
            self.connfd.send(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文件不存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.encode())
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;
        self.connfd.send(b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        time.sleep(&lt;/span&gt;0.1&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 发送文件&lt;/span&gt;
        &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
                data &lt;/span&gt;= fd.read(1024&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; data:
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;
                self.connfd.send(data)
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(e)
        time.sleep(&lt;/span&gt;0.1&lt;span&gt;)
        self.connfd.send(b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;##&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 表示文件发送完成&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文件发送完毕&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 上传&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; do_put(self,filename):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 限制文件命重复导致覆盖源文件&lt;/span&gt;
        &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            fd &lt;/span&gt;= open(FILE_PATH+filename,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt;:
            self.connfd.send(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;无法上传&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.encode())
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 
        &lt;span&gt;except&lt;/span&gt;&lt;span&gt; FileExistsError:
            self.connfd.send(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文件已存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.encode())
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; 
        self.connfd.send(b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 上传文件&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
            data &lt;/span&gt;= self.connfd.recv(1024&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; data == b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;##&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;
            fd.write(data)
        fd.close()
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文件上传完毕&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 流程控制，创建套接字，创建并发，方法调用&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main():
    HOST &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0.0.0.0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    PORT &lt;/span&gt;= 8888&lt;span&gt;
    ADDR &lt;/span&gt;=&lt;span&gt; (HOST,PORT)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建套接字&lt;/span&gt;
    sockfd =&lt;span&gt; socket()
    sockfd.setsockopt(SOL_SOCKET, SO_REUSEADDR, &lt;/span&gt;1&lt;span&gt;)
    sockfd.bind(ADDR)
    sockfd.listen(&lt;/span&gt;5&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 忽略子进程退出&lt;/span&gt;
&lt;span&gt;    signal.signal(signal.SIGCHLD, signal.SIG_IGN)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 循环等待客户端链接&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;: 
            connfd, addr &lt;/span&gt;=&lt;span&gt; sockfd.accept()
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; KeyboardInterrupt:
            sockfd.close()
            sys.exit(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;服务器退出&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(e)
            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;客户端登录:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,addr)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建父子进程&lt;/span&gt;
        pid =&lt;span&gt; os.fork()
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 进入子进程&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; pid ==&lt;span&gt; 0:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 关闭子进程内无用套接字&lt;/span&gt;
&lt;span&gt;            sockfd.close()
            tftp &lt;/span&gt;= TftpServer(connfd)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __init__传参&lt;/span&gt;
            &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
                data &lt;/span&gt;= connfd.recv(1024&lt;span&gt;).decode()
                    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 断开连接&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;not&lt;/span&gt; data) &lt;span&gt;or&lt;/span&gt; data[0] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;客户端退出&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                    sys.exit(0)
                &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; data[0] == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;L&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 申请查询&lt;/span&gt;
&lt;span&gt;                    tftp.do_list()
                &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; data[0] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 解析文件名&lt;/span&gt;
                    filename = data.split(&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;)[-1&lt;span&gt;]
                    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 申请下载&lt;/span&gt;
&lt;span&gt;                    tftp.do_get(filename)
                &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; data[0] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;P&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                    filename &lt;/span&gt;= data.split(&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;)[-1&lt;span&gt;]
                    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 申请上传&lt;/span&gt;
&lt;span&gt;                    tftp.do_put(filename)       
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;客户端发送错误指令&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 关闭父进程内无用套接字 &lt;/span&gt;
&lt;span&gt;            connfd.close()
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 父进程只用来做客户端链接&lt;/span&gt;
            &lt;span&gt;continue&lt;/span&gt;


&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
    main()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;客户端：&lt;/p&gt;
&lt;div readability=&quot;13.5&quot;&gt;&lt;br/&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; socket &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time 

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 实现各种功能请求&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TftpClient(object):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,sockfd):
        self.sockfd &lt;/span&gt;=&lt;span&gt; sockfd 

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; do_list(self):
        self.sockfd.send(b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;L&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 发送请求类型&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 接收服务器回应&lt;/span&gt;
        data = self.sockfd.recv(1024&lt;span&gt;).decode()
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; data == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
            data &lt;/span&gt;= self.sockfd.recv(4096&lt;span&gt;).decode()
            files &lt;/span&gt;= data.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; file &lt;span&gt;in&lt;/span&gt;&lt;span&gt; files:
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(file)
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文件展示完毕&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 请求失败原因&lt;/span&gt;
            &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(data)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 下载指定文件&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; do_get(self,filename):
        self.sockfd.send((&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;G &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; filename).encode())
        data &lt;/span&gt;= self.sockfd.recv(1024&lt;span&gt;).decode()
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 请求成功&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; data == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
            fd &lt;/span&gt;= open(filename,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
                data &lt;/span&gt;= self.sockfd.recv(1024&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 结束符&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; data == b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;##&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;
                fd.write(data)
            fd.close()
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s 下载完成\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;filename)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 请求失败原因&lt;/span&gt;
            &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(data)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; do_put(self,filename):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断本地是否有要上传的文件&lt;/span&gt;
        &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            fd &lt;/span&gt;= open(filename,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;上传文件不存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; 
        self.sockfd.send((&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;P &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;filename).encode())
        data &lt;/span&gt;= self.sockfd.recv(1024&lt;span&gt;).decode()
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 请求成功&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; data == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
                data &lt;/span&gt;= fd.read(1024&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; data:
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;
                self.sockfd.send(data)
            fd.close()
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 发送结束符并防止粘包&lt;/span&gt;
            time.sleep(0.1&lt;span&gt;)
            self.sockfd.send(b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;##&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s 上传完毕&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;filename)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 请求失败原因&lt;/span&gt;
            &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(data)


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建套接字并建立连接&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main():
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 终端输入地址&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; len(sys.argv) &amp;lt; 3&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;argv is error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;
    HOST &lt;/span&gt;= sys.argv[1&lt;span&gt;]
    PORT &lt;/span&gt;= int(sys.argv[2&lt;span&gt;])
    ADDR &lt;/span&gt;=&lt;span&gt; (HOST,PORT)

    sockfd &lt;/span&gt;=&lt;span&gt; socket()
    sockfd.connect(ADDR)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建对象&lt;/span&gt;
    tftp =&lt;span&gt; TftpClient(sockfd)   

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;==========命令选项===========&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;**********  list  *********&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;********** get file  ******&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;********** put file  ******&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;**********  quit  *********&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=============================&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

        cmd &lt;/span&gt;= input(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;输入命令&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 去除空格判断命令&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; cmd.strip() == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查询&lt;/span&gt;
&lt;span&gt;            tftp.do_list()
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取文件上传或下载命令&lt;/span&gt;
        &lt;span&gt;elif&lt;/span&gt; cmd[:3] == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 拆分命令获取文件名&lt;/span&gt;
            filename = cmd.split(&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;)[-1&lt;span&gt;]
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 下载&lt;/span&gt;
&lt;span&gt;            tftp.do_get(filename)
        &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; cmd[:3] == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
            filename &lt;/span&gt;= cmd.split(&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;)[-1&lt;span&gt;]
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 上传&lt;/span&gt;
&lt;span&gt;            tftp.do_put(filename)
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 退出&lt;/span&gt;
        &lt;span&gt;elif&lt;/span&gt; cmd.strip() == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
            sockfd.send(b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            sockfd.close()
            sys.exit(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;欢迎使用&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入正确命令！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
    main()


 
 
 
多线程并发
 
threading模块完成多线程并发
 
对比多进程并发
     优势 ：
            资源消耗少
     缺点 ： 
            需要注意对共享资源的操作
 
实现步骤：
       &lt;/span&gt;1&lt;span&gt;. 创建套接字，绑定，监听
       &lt;/span&gt;2&lt;span&gt;. 接收客户端连接请求，创建新的线程
       &lt;/span&gt;3&lt;span&gt;. 主线程继续等待其他客户端连接，分支线程执行客户端具体请求
       &lt;/span&gt;4&lt;span&gt;. 处理完客户端请求后分支线程自然退出，关闭客户端套接字
示例：

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; socket &lt;span&gt;import&lt;/span&gt; * 
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os,sys 
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; threading &lt;span&gt;import&lt;/span&gt; *&lt;span&gt; 

HOST &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.0.0.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
PORT &lt;/span&gt;= 8888&lt;span&gt;
ADDR &lt;/span&gt;=&lt;span&gt; (HOST,PORT)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;客户端处理函数&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; handler(connfd):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Connect from&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,connfd.getpeername())
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
        data &lt;/span&gt;= connfd.recv(1024&lt;span&gt;).decode()
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; data:
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(data)
        connfd.send(b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Receive your msg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    connfd.close()


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main(ADDR):
    s &lt;/span&gt;=&lt;span&gt; socket()
    s.bind(ADDR)
    s.listen(&lt;/span&gt;5&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            connfd,addr &lt;/span&gt;=&lt;span&gt; s.accept()
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 处理 Ctrl + C &lt;/span&gt;
        &lt;span&gt;except&lt;/span&gt;&lt;span&gt; KeyboardInterrupt:
            s.close()
            sys.exit(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;服务器退出&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 其他异常&lt;/span&gt;
        &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(e)
            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt; 
            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建子线程用于处理客户端请求&lt;/span&gt;
        t = Thread(target=handler,args=&lt;span&gt; (connfd,))
        t.setDaemon(True)
        t.start()

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;:
    main()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;socket并发集成模块&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;python2  SocketServer&lt;/p&gt;
&lt;p&gt;python3  &lt;span&gt;&lt;strong&gt;socketserver&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;      &lt;strong&gt;    功能 ： &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;                 通过模块提供的接口组合可以完成多进程/多线程  tcp/udp的         并发程序&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;StreamRequestHandler &lt;/strong&gt;      处理tcp请求&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DatagramRequestHandler&lt;/strong&gt;  处理udp请求&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ForkingMixIn &lt;/strong&gt;      创建多进程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ThreadingMixIn&lt;/strong&gt;  创建多线程&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TCPServer &lt;/strong&gt;  创建tcp  server&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UDPServer &lt;/strong&gt; 创建udp  server&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ForkingTCPServer&lt;/strong&gt;       等于    ForkingMixIn  +  TCPServer &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ForkingUDPServer &lt;/strong&gt;     等于    ForkingMixIn  +  UDPServer &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ThreadingTCPServer &lt;/strong&gt;  等于   ThreadingMixIn  +  TCPServer &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ThreadingUDPServer&lt;/strong&gt;  等于   ThreadingMixIn  +  UDPServer &lt;/p&gt;

&lt;div readability=&quot;9.5&quot;&gt;示例：&lt;br/&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;多进程　tcp　server&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; socketserver &lt;span&gt;import&lt;/span&gt; * 

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建server类&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; class Server(ForkingMixIn,TCPServer):&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; class Server(ForkingTCPServer):&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;     pass &lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;多线程tcp并发&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Server(ThreadingTCPServer):
    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;


&lt;span&gt;#&lt;/span&gt;&lt;span&gt;具体的请求处理类&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Handler(StreamRequestHandler):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; handle(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; self.request ==&amp;gt; accept返回的套接字&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Connect from&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,self.request.getpeername())
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
            data &lt;/span&gt;= self.request.recv(1024&lt;span&gt;).decode()
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; data:
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;
            &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(data)
            self.request.send(b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Receive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建ｓｅｒｖｅｒ对象&lt;/span&gt;
    server = Server((&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.0.0.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,8888&lt;span&gt;),Handler)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;启动服务器&lt;/span&gt;
&lt;span&gt;    server.serve_forever()
 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;基于多线程并发的HTTPServer&lt;/p&gt;

&lt;p&gt;       1. 接收浏览器http请求&lt;/p&gt;
&lt;p&gt;       2. 对请求进行一定的解析&lt;/p&gt;
&lt;p&gt;       3. 根据解析结果返回对应内容&lt;/p&gt;
&lt;p&gt;       4. 如果没有请求内容则返回404&lt;/p&gt;
&lt;p&gt;       5. 组织Response格式进行回发&lt;/p&gt;

&lt;p&gt;升级：&lt;/p&gt;
&lt;p&gt;       * 使用多线程并发&lt;/p&gt;
&lt;p&gt;       * 增加了具体的请求解析和404情况&lt;/p&gt;
&lt;p&gt;       * 使用类进行代码封装&lt;/p&gt;
&lt;p&gt;       * 增加一定的数据获取功能&lt;/p&gt;

&lt;p&gt;技术点 ： threading并发&lt;/p&gt;
&lt;p&gt;                tcp socket 传输&lt;/p&gt;
&lt;p&gt;        HTTP请求和响应格式&lt;/p&gt;

&lt;p&gt;相比上次升级了一点点&lt;/p&gt;
&lt;div readability=&quot;14&quot;&gt;&lt;br/&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; socket &lt;span&gt;import&lt;/span&gt; * 
&lt;span&gt;from&lt;/span&gt; threading &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Thread 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time 

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 存放静态页面的目录&lt;/span&gt;
STATIC_DIR = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;./static&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
ADDR &lt;/span&gt;= (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0.0.0.0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 8000&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; HTTPServer类，封装具体功能&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; HTTPServer(object):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, address):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建套接字&lt;/span&gt;
        self.sockfd =&lt;span&gt; socket()
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置端口重用&lt;/span&gt;
        self.sockfd.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1&lt;span&gt;)
        self.sockfd.bind(address)
        self.sockfd.listen(&lt;/span&gt;5&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 为对象增加属性变量&lt;/span&gt;
        self.name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HTTPServer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        self.port &lt;/span&gt;= address[1&lt;span&gt;]
        self.address &lt;/span&gt;=&lt;span&gt; address 

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 启动服务器&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; serve_forever(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Listen the port %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;self.port)
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 循环接收客户端请求并创建新的套接字&lt;/span&gt;
            connfd, addr =&lt;span&gt; self.sockfd.accept()
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建线程并运行处理具体请求&lt;/span&gt;
            clientThread = Thread(target = self.handleRequest,args =&lt;span&gt; (connfd,))
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 主线程结束时结束线程&lt;/span&gt;
&lt;span&gt;            clientThread.setDaemon(True)
            clientThread.start()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; handleRequest(self, connfd):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 接收客户端请求&lt;/span&gt;
        request = connfd.recv(4096&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 按行切割　字符串&lt;/span&gt;
        requestHeadlers =&lt;span&gt; request.splitlines()
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取请求行&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(connfd.getpeername(), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; , requestHeadlers[0]) 
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取请求内容并解析&lt;/span&gt;
        getRequest = str(requestHeadlers[0]).split(&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;)[1&lt;span&gt;]
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 并判断请求类型&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; getRequest == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;or&lt;/span&gt; getRequest[-5:] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 请求行为网页请求&lt;/span&gt;
            data =&lt;span&gt; self.get_html(getRequest)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 请求指定数据内容&lt;/span&gt;
            data =&lt;span&gt; self.get_data(getRequest)
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 响应请求并返还内容&lt;/span&gt;
&lt;span&gt;        connfd.send(data.encode())
        connfd.close()

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用于处理网页请求&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_html(self,page):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断是否为主页请求&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; page == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
            filename &lt;/span&gt;= STATIC_DIR + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/index.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            filename &lt;/span&gt;= STATIC_DIR +&lt;span&gt; page

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            f &lt;/span&gt;=&lt;span&gt; open(filename)
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 没有找到页面&lt;/span&gt;
            responseHeadlers = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HTTP/1.1 404 Not Found\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            responseHeadlers &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Type: text/html\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            responseHeadlers &lt;/span&gt;+= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
            responseBody &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;h1&amp;gt;Sorry,not found the page&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            responseHeadlers &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HTTP/1.1 200  OK\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            responseHeadlers &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Type: text/html\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            responseHeadlers &lt;/span&gt;+= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; f:
                responseBody &lt;/span&gt;+=&lt;span&gt; i
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 页面存不存在否响应&lt;/span&gt;
        &lt;span&gt;finally&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; responseHeadlers +&lt;span&gt; responseBody

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用于处理数据内容请求&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_data(self,data):
        responseHeadlers &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HTTP/1.1 200 OK\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        responseHeadlers &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

        &lt;span&gt;if&lt;/span&gt; data == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
            responseBody &lt;/span&gt;=&lt;span&gt; time.ctime()
        &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; data == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/ParisGabriel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
            responseBody &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Welcome to ParisGabriel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            responseBody &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The data not found&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; responseHeadlers +&lt;span&gt; responseBody


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成服务器对象&lt;/span&gt;
    httpd =&lt;span&gt; HTTPServer(ADDR)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 启动服务器&lt;/span&gt;
    httpd.serve_forever()
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Thu, 16 Aug 2018 16:53:00 +0000</pubDate>
<dc:creator>ParisGabriel</dc:creator>
<og:description>ＨＴＴＰ协议？ HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。HTTP是一个无状态的协议。 通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ParisGabriel/p/9491157.html</dc:identifier>
</item>
<item>
<title>数据挖掘方法系列（一）数据探索 - 小糖球ai大萝卜</title>
<link>http://www.cnblogs.com/xiaotangqiu/p/9490964.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaotangqiu/p/9490964.html</guid>
<description>&lt;p&gt;&lt;strong&gt;为什么要做数据探索？&lt;/strong&gt;&lt;br/&gt;了解数据的类型和人与人沟通过程中了解对方的性别一样重要，人与人沟通知道对方的性别才能用不同的方式与其沟通，不同的数据类型能做的操作也不一样。&lt;br/&gt;&lt;strong&gt;探索数据探索哪些？数据的类型和数据的质量。&lt;/strong&gt;&lt;br/&gt;数据类型分为定性和定量的。&lt;br/&gt;定性也可以说是分类的，包括标称和序数。标称很好理解，用户ID、用户的名称也属于标称，虽然也可以重复，但大致还是能代表一个个体；序数有类型{好，非常好，超级好}，可以比较大小的，比如“超级好好”比“好”在好的程度要高，{高，较高，非常高}也属于序数。&lt;br/&gt;定量可以说是连续的，包括区间和比率。区间是可以做差操作的。比如日期，可以求日期之间的区间，今年和去年相差一年；比率既可以求区间，又可以求比率。比如年龄是比率，20岁比30岁年轻10岁，还可以求年龄的均值，。&lt;br/&gt;数据类型除了这种分类还有别的分类，但这样的分类是基础分类，掌握了就可以以不变应万变了。&lt;/p&gt;
&lt;p&gt;数据的质量主要有：属性值缺失、对象重复、离群点、数据不一致以及数据错误。造成这些数据质量问题的原因有很多，比如操作员手工录入时发生错误、用户填写时造成的笔误和精准偏差（对一个问题的理解不到位或问卷设计不合理）、再比如传感器收集时失灵等问题。目前，很少有企业一开始收集大量的数据是为做挖掘，基本都是数据积累到一定量然后有了做挖掘的需求，不管是从数据还是从业务驱动上来说都是这样的，这样数据可能分散在各个业务系统中，缺失、不一致问题必然存在，需要通过各种预处理手段，将数据的质量提升到一定高度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么问题来了，如何做数据探索呢？&lt;/strong&gt;&lt;br/&gt;前面说了，需要探索数据类型和数据质量，接下来就讲运用两种工具来探索数据，商用数据挖掘软件IBM SPSS Modeler以及python语言。&lt;br/&gt;IBM SPSS Modeler现在是IBM公司的一款数据挖掘工具，它能用拖拉拽的方式实现数据挖掘建模。使用方法在这里不介绍，只介绍探索的结果。&lt;br/&gt;这是探索字段的数据类型，连续型，值范围，以及是否有缺失。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1444365/201808/1444365-20180817001959489-357818858.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下面是探索数据质量，分为数据的描述统计信息和质量评估。&lt;br/&gt;描述统计包括图形化/数据类型/最小值/最大值/平均值/标准差/偏度/是否唯一/有效值等等这些指标；&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1444365/201808/1444365-20180817002018354-1924645572.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;质量评估包括离群值/极值/完成率/有效记录数/无效值个数/字符型空值个数/空白个数/控制个数等&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1444365/201808/1444365-20180817002035509-2066471282.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;modeler是目前为止我用过的挖掘工具中最好的入门工具，尽管数据处理功能和支持挖掘算法不属于最多的，执行效率也不是最高的，但好在简单易懂；如果是公司内部使用有版权风险，或者是大数据量又穷那就还是用python吧。&lt;br/&gt;Python语言是一门开源的编程语言，其中有很多大神贡献了很多模块，我们直接导入模块，就可以运用模块的功能，虽然是编程语言，但是学习成本真的很低，很多功能都是拿来就可以用。&lt;br/&gt;#导入各个模块&lt;br/&gt;from sklearn import datasets #导入机器学习库中的数据集&lt;br/&gt;import pandas as pd   #导入pandas模块，用来处理数据，&lt;/p&gt;
&lt;p&gt;iris=datasets.load_iris()&lt;br/&gt;iris_X=iris.data&lt;br/&gt;iris_Y=iris.target&lt;/p&gt;
&lt;p&gt;iris_X1=pd.DataFrame(iris_X)&lt;br/&gt;iris_Y1=pd.Series(iris_Y)    #因为下面用的数据探索的函数只有pandas中的DataFrame，Series&lt;/p&gt;
&lt;p&gt;print(X1.describe(),X1.head(),X1.corr(),X1.corrwith(y1))   #引用数据探索的函数&lt;/p&gt;

&lt;p&gt; 工具永远都只是工具，只能帮助我们工作，不能替代我们思考，只有不断思考知道需要做什么，怎么做才能进步~&lt;/p&gt;
</description>
<pubDate>Thu, 16 Aug 2018 16:24:00 +0000</pubDate>
<dc:creator>小糖球ai大萝卜</dc:creator>
<og:description>为什么要做数据探索？了解数据的类型和人与人沟通过程中了解对方的性别一样重要，人与人沟通知道对方的性别才能用不同的方式与其沟通，不同的数据类型能做的操作也不一样。探索数据探索哪些？数据的类型和数据的质量</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaotangqiu/p/9490964.html</dc:identifier>
</item>
<item>
<title>Java面试必问之---HashMap - Marksmanbat</title>
<link>http://www.cnblogs.com/-Marksman/p/9441688.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/-Marksman/p/9441688.html</guid>
<description>&lt;p&gt;　　　本文有些长，贴的源码较多，请各位看官自备花生瓜子啤酒饮料矿泉水小板凳，且听我慢慢道来。&lt;/p&gt;
&lt;p&gt;　　　Java面试都会问集合，集合必问HashMap，CurrentHashMap，后面的套路就肯定会问多线程、线程安全等等，今天就来学习下HashMap，不对，是补习下。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、HasMap的属性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　先看下HashMap的继承体系，它继承自抽象类AbstractMap，实现了Map、Cloneable、Serializable接口，还有较常用的子类LinkedHashMap也实现了Map接口。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HashMap&amp;lt;K,V&amp;gt; &lt;span&gt;extends&lt;/span&gt; AbstractMap&amp;lt;K,V&amp;gt; &lt;span&gt;implements&lt;/span&gt; Map&amp;lt;K,V&amp;gt;&lt;span&gt;, Cloneable, Serializable{...&lt;br/&gt;&lt;/span&gt;public abstract class AbstractMap&amp;lt;K,V&amp;gt; implements Map&amp;lt;K,V&amp;gt; {...&lt;br/&gt;public class LinkedHashMap&amp;lt;K,V&amp;gt; extends HashMap&amp;lt;K,V&amp;gt; implements Map&amp;lt;K,V&amp;gt;{...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　再看看HashMap的成员变量和一些默认值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 默认的初始化数组大小，16&lt;/span&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; HashMap的最大长度&lt;/span&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; DEFAULT_LOAD_FACTOR = 0.75f; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 负载因子的默认值&lt;/span&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Entry&amp;lt;?,?&amp;gt;[] EMPTY_TABLE = {}; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Entry数组默认为空&lt;/span&gt;
&lt;span&gt;transient&lt;/span&gt; Entry&amp;lt;K,V&amp;gt;[] table = (Entry&amp;lt;K,V&amp;gt;[]) EMPTY_TABLE; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Entry数组&lt;/span&gt;
&lt;span&gt;transient&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; size; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; map中key-value 键值对的数量&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; threshold; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 阈值，即table.length 乘 loadFactor&lt;/span&gt;
&lt;span&gt;final&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; loadFactor; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;负载因子，默认值为 DEFAULT_LOAD_FACTOR = 0.75 &lt;/span&gt;
&lt;span&gt;transient&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; modCount; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; HashMap结构被修改的次数&lt;/span&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ALTERNATIVE_HASHING_THRESHOLD_DEFAULT = Integer.MAX_VALUE; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 阈值的默认值&lt;/span&gt;
HashMap.Holder.trasient &lt;span&gt;int&lt;/span&gt; hashSeed; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 翻译过来叫哈希种子，是一个随机数，
　　　　　　　　　　　　　　　　　　　　　　 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;它能够减小hashCode碰撞的几率，默认为0，表示不能进行选择性哈希（我也不知道是啥意思）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　所以我们用默认构造方法new 出来的HashMap()，长度默认为16，阈值为12，并且size达到threshold，就会resize为原来的2倍。&lt;/p&gt;
&lt;p&gt;　　再看下HashMap的一些重要的内部类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Entry&amp;lt;K,V&amp;gt; &lt;span&gt;implements&lt;/span&gt; Map.Entry&amp;lt;K,V&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt; K key;
    V value;
    Entry&lt;/span&gt;&amp;lt;K,V&amp;gt;&lt;span&gt; next;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; hash;&lt;/span&gt;&lt;span&gt;
    Entry(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; h, K k, V v, Entry&amp;lt;K,V&amp;gt;&lt;span&gt; n) {
        value &lt;/span&gt;=&lt;span&gt; v;
        next &lt;/span&gt;=&lt;span&gt; n;
        key &lt;/span&gt;=&lt;span&gt; k;
        hash &lt;/span&gt;=&lt;span&gt; h;
    }&lt;br/&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　Entry实现了Map的内部接口Entry，它有四个属性，key、value、Entry、hash，是HashMap内数组每个位置上真正存放元素的数据结构。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; EntrySet &lt;span&gt;extends&lt;/span&gt; AbstractSet&amp;lt;Map.Entry&amp;lt;K,V&amp;gt;&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Iterator&amp;lt;Map.Entry&amp;lt;K,V&amp;gt;&amp;gt;&lt;span&gt; iterator() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; newEntryIterator();
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; contains(Object o) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!(o &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; Map.Entry))
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        Map.Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; e = (Map.Entry&amp;lt;K,V&amp;gt;&lt;span&gt;) o;
        Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; candidate =&lt;span&gt; getEntry(e.getKey());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; candidate != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; candidate.equals(e);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; remove(Object o) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; removeMapping(o) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; size;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; clear() {
        HashMap.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.clear();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　EntrySet 继承了AbstractSet，它内部有个迭代器iterator，可以获取Entry对象，方法contains用来判断所给的对象是否包含在当前EntrySet中。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、put、get、resize方法源码分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　我们知道HashMap，在jdk1.8之前底层用&lt;strong&gt;数组+链表&lt;/strong&gt;实现的，jdk1.8改成了&lt;strong&gt;数组+链表+红黑树&lt;/strong&gt;实现，以避免长链表带来的遍历效率低问题。&lt;/p&gt;
&lt;p&gt;　　1）&lt;strong&gt;jdk1.7&lt;/strong&gt;下的源码&lt;/p&gt;
&lt;p&gt;　　　　1.1）put()方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;span&gt; V put(K key, V value) {&lt;span&gt;        &lt;br/&gt;　　if (table == EMPTY_TABLE) { &lt;span&gt;//(1)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;          &lt;br/&gt;　　inflateTable(threshold);
   }
   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (key == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;//(2)&lt;/span&gt;
       &lt;span&gt;return&lt;/span&gt;&lt;span&gt; putForNullKey(value);
   &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; hash = hash(key); &lt;span&gt;//(3）&lt;/span&gt;
   &lt;span&gt;int&lt;/span&gt; i =&lt;span&gt; indexFor(hash, table.length);
   &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Entry&amp;lt;K,V&amp;gt; e = table[i]; e != &lt;span&gt;null&lt;/span&gt;; e =&lt;span&gt; e.next) {
        Object k;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e.hash == hash &amp;amp;&amp;amp; ((k = e.key) == key || key.equals(k))) { &lt;span&gt;//(4）&lt;/span&gt;
            V oldValue =&lt;span&gt; e.value;
            e.value &lt;/span&gt;=&lt;span&gt; value;
            e.recordAccess(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldValue;
        }
   }
   modCount&lt;/span&gt;++&lt;span&gt;;
   addEntry(hash, key, value, i); &lt;/span&gt;&lt;span&gt;//(5）&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}&lt;br/&gt;&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; V putForNullKey(V value) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Entry&amp;lt;K,V&amp;gt; e = table[0]; e != &lt;span&gt;null&lt;/span&gt;; e =&lt;span&gt; e.next) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e.key == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            V oldValue &lt;/span&gt;=&lt;span&gt; e.value;
            e.value &lt;/span&gt;=&lt;span&gt; value;
            e.recordAccess(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldValue;
        }
    }
    modCount&lt;/span&gt;++&lt;span&gt;;
    addEntry(&lt;/span&gt;0, &lt;span&gt;null&lt;/span&gt;, value, 0&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; indexFor(&lt;span&gt;int&lt;/span&gt; h, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; assert Integer.bitCount(length) == 1 : &quot;length must be a non-zero power of 2&quot;; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;长度必须是2的非零幂&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; h &amp;amp; (length-1); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;table数组的下标计算：hashCode与(table数组长度减一)做与(&amp;amp;)运算&lt;/span&gt;
&lt;span&gt;}

&lt;/span&gt;&amp;amp;&lt;span&gt;运算，即同是1才为1，否则为0
例如：h1&lt;/span&gt;=3 h2=20 length=16&lt;span&gt;
     h1:        &lt;/span&gt;0011&lt;span&gt;
　   h2:       &lt;/span&gt;10100&lt;span&gt;
　   &lt;/span&gt;&lt;span&gt;length&lt;/span&gt;-1:  1111&lt;span&gt;
     h1(index): &lt;/span&gt;0011 = 3&lt;span&gt;
　   &lt;/span&gt;&lt;span&gt;h2(index): &lt;/span&gt;0100 = 4&lt;span&gt;
这样运算得出的index就是舍弃了hashCode一部分高位的hash的值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　(1）首先判断数组若为空，则创建一个新的数组；&lt;/p&gt;
&lt;p&gt;　　(2）如果key为null，遍历table数组，如果找出key=null的位置，将value覆盖，并返回旧的value，否则调用addEntry()将它保存到table[0]位置；&lt;/p&gt;
&lt;p&gt;　　(3）若key!=null，则计算出hashCode，算出下标 index，遍历table&lt;/p&gt;
&lt;p&gt;　　(4）若找到hashCode与当前key的hashCode相等，并且key值也相同，那就覆盖value的值，并且放回oldValue；&lt;/p&gt;
&lt;p&gt;　　(5）若没满足(4）中的条件，则调用方法addEntry(...)，下面仔细看下这个方法&lt;/p&gt;
&lt;p&gt;　　　　若indexFor计算出来的下标在数组中不为空并且size达到阈值，则扩容，然后在index位置创建一个Entry，将key-value放进去。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; addEntry(&lt;span&gt;int&lt;/span&gt; hash, K key, V value, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; bucketIndex) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((size &amp;gt;= threshold) &amp;amp;&amp;amp; (&lt;span&gt;null&lt;/span&gt; !=&lt;span&gt; table[bucketIndex])) {
        resize(&lt;/span&gt;2 *&lt;span&gt; table.length); 
        hash &lt;/span&gt;= (&lt;span&gt;null&lt;/span&gt; != key) ? hash(key) : 0; &lt;span&gt;// &lt;/span&gt;&lt;span&gt;null的hashCode为0&lt;/span&gt;
        bucketIndex =&lt;span&gt; indexFor(hash, table.length); 
    }
    createEntry(hash, key, value, bucketIndex);
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; createEntry(&lt;span&gt;int&lt;/span&gt; hash, K key, V value, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; bucketIndex) {
    Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; e =&lt;span&gt; table[bucketIndex];
    table[bucketIndex] &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Entry&amp;lt;&amp;gt;&lt;span&gt;(hash, key, value, e);
    size&lt;/span&gt;++&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　　　1.2）get() 方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; V get(Object key) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (key == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) &lt;span&gt;//（1）
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; getForNullKey();
    Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; entry =&lt;span&gt; getEntry(key); &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; == entry ? &lt;span&gt;null&lt;/span&gt;&lt;span&gt; : entry.getValue(); &lt;span&gt;//（4）&lt;/span&gt;
}

&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; V getForNullKey() { &lt;span&gt;//（2）
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (size == 0&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Entry&amp;lt;K,V&amp;gt; e = table[0]; e != &lt;span&gt;null&lt;/span&gt;; e =&lt;span&gt; e.next) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e.key == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; e.value;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;final&lt;/span&gt; Entry&amp;lt;K,V&amp;gt;&lt;span&gt; getEntry(Object key) { &lt;span&gt;//（3）
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (size == 0&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; hash = (key == &lt;span&gt;null&lt;/span&gt;) ? 0&lt;span&gt; : hash(key);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Entry&amp;lt;K,V&amp;gt; e =&lt;span&gt; table[indexFor(hash, table.length)]; 
         e &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
         e &lt;/span&gt;=&lt;span&gt; e.next) {
        Object k;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e.hash == hash &amp;amp;&amp;amp;&lt;span&gt;
            ((k &lt;/span&gt;= e.key) == key || (key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))))
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; e;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　get() 方法就比较简单啦：&lt;/p&gt;
&lt;p&gt;　　　　　　(1) 如果key为null，则判断HashMap中是否有值，若没有直接返回null；&lt;/p&gt;
&lt;p&gt;　　　　　　(2) 若有就遍历table数组，找到null对应的value并返回；&lt;/p&gt;
&lt;p&gt;　　　　　　(3) 若key不为null，则获取Entry，也就是一个遍历table数组命中的过程；&lt;/p&gt;
&lt;p&gt;　　　　　　(4) 最后获取Entry的value，并返回。&lt;/p&gt;
&lt;p&gt; 　　　　1.3）resize() 方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; resize(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; newCapacity) {
    Entry[] oldTable &lt;/span&gt;=&lt;span&gt; table;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; oldCapacity =&lt;span&gt; oldTable.length;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (oldCapacity ==&lt;span&gt; MAXIMUM_CAPACITY) { &lt;span&gt;//（1）&lt;/span&gt;
        threshold &lt;/span&gt;=&lt;span&gt; Integer.MAX_VALUE;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    }

    Entry[] newTable &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Entry[newCapacity];&lt;span&gt; //（2）&lt;/span&gt;
    transfer(newTable, initHashSeedAsNeeded(newCapacity)); &lt;span&gt;//（3）&lt;/span&gt;
    table &lt;/span&gt;=&lt;span&gt; newTable;
    threshold &lt;/span&gt;= (&lt;span&gt;int&lt;/span&gt;)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　（1）首先将当前对象的一些属性保存起来，如果当前HashMap的容量达到最大值，那就无法扩容了，将阈值设置为Integer的最大值并结束方法；&lt;/p&gt;
&lt;p&gt;　　　　（2）否则创建新的Entry数组，长度为newCapacity，在addEntry()方法中，我们知道newCapacity = 2 * table.length；&lt;/p&gt;
&lt;p&gt;　　　　（3）然后调用transfer()方法，此方法的作用是将当前数组中的Entry转移到新数组中；&lt;/p&gt;
&lt;p&gt;　　　　　　在存入key-value时会调用initHashSeedAsNeeded()方法判断是否需要rehash，该方法的过程见注释，好吧，我也不知道为什么这样处理得出的结果就能                判断是否需要rehash，后面就是根据rehash重新计算下标，并将key-value存入新的table中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Transfers all entries from current table to newTable.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; transfer(Entry[] newTable, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; rehash) {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; newCapacity =&lt;span&gt; newTable.length;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Entry&amp;lt;K,V&amp;gt;&lt;span&gt; e : table) {
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt; !=&lt;span&gt; e) {
            Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; next =&lt;span&gt; e.next;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (rehash) {
                e.hash &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt; == e.key ? 0&lt;span&gt; : hash(e.key);
            }
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i =&lt;span&gt; indexFor(e.hash, newCapacity);
            e.next &lt;/span&gt;=&lt;span&gt; newTable[i];
            newTable[i] &lt;/span&gt;=&lt;span&gt; e;
            e &lt;/span&gt;=&lt;span&gt; next;
        }
    }
}
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Initialize the hashing mask value. We defer initialization until we really need it.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; initHashSeedAsNeeded(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; capacity) { 
    &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; currentAltHashing = hashSeed != 0; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前哈希种子是否为0&lt;/span&gt;
    &lt;span&gt;boolean&lt;/span&gt; useAltHashing = sun.misc.VM.isBooted() &amp;amp;&amp;amp;&lt;span&gt; 
　　　　　　　　(capacity &lt;/span&gt;&amp;gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 虚拟机是否启动，当前数组容量是否大于阈值&lt;/span&gt;
    &lt;span&gt;boolean&lt;/span&gt; switching = currentAltHashing ^ useAltHashing; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 做异或运算&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (switching) { 
        hashSeed &lt;/span&gt;= useAltHashing ? sun.misc.Hashing.randomHashSeed(&lt;span&gt;this&lt;/span&gt;) : 0; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重置哈希种子&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; switching; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回异或运算的结果，作为是否rehash的标准&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　2）&lt;strong&gt;jdk1.8&lt;/strong&gt;下的源码&lt;/p&gt;
&lt;p&gt;　　　　jdk1.8中将Entry改为Node节点来实现的，属性都是一样的。&lt;/p&gt;
&lt;p&gt;　　　　2.1）put()方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt;&lt;span&gt; V put(K key, V value) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; putVal(hash(key), key, value, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
 }

&lt;/span&gt;&lt;span&gt;final&lt;/span&gt; V putVal(&lt;span&gt;int&lt;/span&gt; hash, K key, V value, &lt;span&gt;boolean&lt;/span&gt; onlyIfAbsent,&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; evict) {
    Node&lt;/span&gt;&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; p; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n, i;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((tab = table) == &lt;span&gt;null&lt;/span&gt; || (n = tab.length) == 0) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果数组是null或者数组为空，就调用resize()进行初始化&lt;/span&gt;
        n = (tab =&lt;span&gt; resize()).length; 
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((p = tab[i = (n - 1) &amp;amp; hash]) == &lt;span&gt;null&lt;/span&gt;)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;（n-1）&amp;amp;hash 算出下表，这个和1.7是一样的&lt;/span&gt;
        tab[i] = newNode(hash, key, value, &lt;span&gt;null&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果当前计算出来的位置为null，就新建一个节点&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt;&lt;span&gt; e; K k;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (p.hash == hash &amp;amp;&amp;amp; ((k = p.key) == key || &lt;br/&gt;　　　　　　　　　　(key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; key.equals(k)))) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 若计算出来的位置上不为null，它和传入的key相比，hashCode相等并且key也相等&lt;/span&gt;
            e = p; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 那么将p赋给e&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (p &lt;span&gt;instanceof&lt;/span&gt; TreeNode) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果p是树类型&lt;/span&gt;
            e = ((TreeNode&amp;lt;K,V&amp;gt;)p).putTreeVal(&lt;span&gt;this&lt;/span&gt;, tab, hash, key, value); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 则按照红黑树的结构存入进去&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; binCount = 0; ; ++binCount) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历p，p是链表&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; ((e = p.next) == &lt;span&gt;null&lt;/span&gt;) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果p的下一个节点是尾节点（尾节点.next=null）&lt;/span&gt;
                    p.next = newNode(hash, key, value, &lt;span&gt;null&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在p的后面创建一个节点，存放key/value（尾插法，多线程并发不会形成循环链表）&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt; (binCount &amp;gt;= TREEIFY_THRESHOLD - 1) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TREEIFY_THRESHOLD = 8，即当binCount达到7时转换成红黑树数据结构，
　　　　　　　　　　　　　　　　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 因为binCount是从0开始的，达到7时p链表上就有8个节点了，所以是链表上达到8个节点时会转变成红黑树。&lt;/span&gt;
                        treeifyBin(tab, hash); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里先就不展开了，红黑树不会，有时间再研究&lt;/span&gt;
                    &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e.hash == hash &amp;amp;&amp;amp; ((k = e.key) == key || (key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))))
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                p &lt;/span&gt;= e; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 若上面两个条件都不满足，此时e = p.next，也就是将p的下一个节点赋给p，进入下一次循环&lt;/span&gt;
&lt;span&gt;            }
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e != &lt;span&gt;null&lt;/span&gt;) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; existing mapping for key，jdk这段注释意思是存在key的映射，我的理解是传入的key在p位置找到它自己的坑被别人占了&lt;/span&gt;
            V oldValue =&lt;span&gt; e.value;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!onlyIfAbsent || oldValue == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 下面就是将value存入被占的位置，并将旧的value返回&lt;/span&gt;
                e.value =&lt;span&gt; value;
            afterNodeAccess(e); 
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldValue;
        }
    }
    &lt;/span&gt;++modCount; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 修改次数加一&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (++size &amp;gt; threshold) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 若已有的键值对数大于阈值，就扩容&lt;/span&gt;
&lt;span&gt;        resize();
    afterNodeInsertion(evict);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面盗个图，嘿嘿，那老哥画的太好了，图片来源：http://www.importnew.com/20386.html，我自己又画了下，加深点印象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1401002/201808/1401002-20180817000346168-1320328528.png&quot; alt=&quot;&quot; width=&quot;730&quot; height=&quot;526&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　2.2）get()方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; V get(Object key) {
    Node&lt;/span&gt;&amp;lt;K,V&amp;gt;&lt;span&gt; e;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (e = getNode(hash(key), key)) == &lt;span&gt;null&lt;/span&gt; ? &lt;span&gt;null&lt;/span&gt;&lt;span&gt; : e.value;
}

&lt;/span&gt;&lt;span&gt;final&lt;/span&gt; Node&amp;lt;K,V&amp;gt; getNode(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; hash, Object key) {
    Node&lt;/span&gt;&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; first, e; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n; K k;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((tab = table) != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; (n = tab.length) &amp;gt; 0 &amp;amp;&amp;amp;&lt;span&gt;
        (first &lt;/span&gt;= tab[(n - 1) &amp;amp; hash]) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (first.hash == hash &amp;amp;&amp;amp; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; always check first node&lt;/span&gt;
            ((k = first.key) == key || (key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))))
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; first;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((e = first.next) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (first &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; TreeNode)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ((TreeNode&amp;lt;K,V&amp;gt;&lt;span&gt;)first).getTreeNode(hash, key);
            &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e.hash == hash &amp;amp;&amp;amp;&lt;span&gt;
                    ((k &lt;/span&gt;= e.key) == key || (key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))))
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; e;
            } &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; ((e = e.next) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　get()方法也没什么，就是根据key的hashCode算出下标，找到对应位置上key与参数key是否相等，hash是否相等，如果是树就获取树的节点，如果是链表就遍历直到找到为止，找不到就返回null。&lt;/p&gt;
&lt;p&gt;　　　　2.3）resize()方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;final&lt;/span&gt; Node&amp;lt;K,V&amp;gt;&lt;span&gt;[] resize() {
    Node&lt;/span&gt;&amp;lt;K,V&amp;gt;[] oldTab =&lt;span&gt; table; 
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; oldCap = (oldTab == &lt;span&gt;null&lt;/span&gt;) ? 0 : oldTab.length; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; oldCap就是原数组的长度&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; oldThr = threshold; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;原阈值&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; newCap, newThr = 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (oldCap &amp;gt; 0&lt;span&gt;) { 
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (oldCap &amp;gt;=&lt;span&gt; MAXIMUM_CAPACITY) {
            threshold &lt;/span&gt;=&lt;span&gt; Integer.MAX_VALUE;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldTab;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ((newCap = oldCap &amp;lt;&amp;lt; 1) &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp;&lt;span&gt;
                  oldCap &lt;/span&gt;&amp;gt;=&lt;span&gt; DEFAULT_INITIAL_CAPACITY)
            newThr &lt;/span&gt;= oldThr &amp;lt;&amp;lt; 1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; double threshold 扩容成两倍&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (oldThr &amp;gt; 0) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; initial capacity was placed in threshold&lt;/span&gt;
        newCap =&lt;span&gt; oldThr;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; {      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; zero initial threshold signifies using defaults，这里表示初始化resize的另一个作用&lt;/span&gt;
        newCap =&lt;span&gt; DEFAULT_INITIAL_CAPACITY;
        newThr &lt;/span&gt;= (&lt;span&gt;int&lt;/span&gt;)(DEFAULT_LOAD_FACTOR *&lt;span&gt; DEFAULT_INITIAL_CAPACITY);
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (newThr == 0&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; ft = (&lt;span&gt;float&lt;/span&gt;)newCap *&lt;span&gt; loadFactor;
        newThr &lt;/span&gt;= (newCap &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp; ft &amp;lt; (&lt;span&gt;float&lt;/span&gt;)MAXIMUM_CAPACITY ?&lt;span&gt;
                  (&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)ft : Integer.MAX_VALUE);
    }
    threshold &lt;/span&gt;=&lt;span&gt; newThr;
    @SuppressWarnings({&lt;/span&gt;&quot;rawtypes&quot;,&quot;unchecked&quot;&lt;span&gt;})
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt;[] newTab = (Node&amp;lt;K,V&amp;gt;[])&lt;span&gt;new&lt;/span&gt; Node[newCap]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建新数组，容量为原数组的两倍&lt;/span&gt;
    table = newTab; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将它指向table变量&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (oldTab != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; oldCap; ++j) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历原数组&lt;/span&gt;
            Node&amp;lt;K,V&amp;gt;&lt;span&gt; e;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((e = oldTab[j]) != &lt;span&gt;null&lt;/span&gt;) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将不为null的j位置的元素指向e节点&lt;/span&gt;
                oldTab[j] = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e.next == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                    newTab[e.hash &lt;/span&gt;&amp;amp; (newCap - 1)] = e; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;若e是尾节点，或者说e后面没有节点了，就将e指向新数组的e.hash&amp;amp;(newCap-1)位置&lt;/span&gt;
                &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; TreeNode)
                    ((TreeNode&lt;/span&gt;&amp;lt;K,V&amp;gt;)e).split(&lt;span&gt;this&lt;/span&gt;, newTab, j, oldCap); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果是树节点，就按红黑树处理，这里不展开&lt;/span&gt;
                &lt;span&gt;else&lt;/span&gt; { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; preserve order&lt;/span&gt;
                    Node&amp;lt;K,V&amp;gt; loHead = &lt;span&gt;null&lt;/span&gt;, loTail = &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 存放新数组中原位置的节点，这里后面展开说&lt;/span&gt;
                    Node&amp;lt;K,V&amp;gt; hiHead = &lt;span&gt;null&lt;/span&gt;, hiTail = &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;存放新数组中原位置+原数组长度的节点&lt;/span&gt;
                    Node&amp;lt;K,V&amp;gt;&lt;span&gt; next;
                    &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
                        next &lt;/span&gt;=&lt;span&gt; e.next;
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((e.hash &amp;amp; oldCap) == 0) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;e.hash&amp;amp;oldCap 的值要么是0要么是oldCap &lt;strong&gt;&lt;span&gt;###&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
                            &lt;span&gt;if&lt;/span&gt; (loTail == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                                loHead &lt;/span&gt;= e; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第一次进来，先确定头节点，以后都走else，loHead指向e&lt;/span&gt;
                            &lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                               loTail.next &lt;/span&gt;= e; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第二次进来时loTail的next指向e(e=e.next)，
　　　　　　　　　　　　　　　　　　　　　　　　　　　　 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 注意此时loHead的地址和loTail还是一样的，所以loHead也指向e,
　　　　　　　　　　　　　　　　　　　　　　　　　　　　 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 也就是说e被挂在了loHead的后面（尾插法，不会形成循环链表），
　　　　　　　　　　　　　　　　　　　　　　　　　　　　 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 以此类推，后面遍历的e都会被挂在loHead的后面。&lt;/span&gt;
                            loTail = e; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; loTail指向e,第一次进来时头和尾在内存中的指向是一样的都是e，
　　　　　　　　　　　　　　　　　　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第二次进来时，loTail指向了e(e=e.next)，这时和loHead.next指向的对象是一样的，
　　　　　　　　　　　　　　　　　　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 所以下一次进来的时候loHead可以找到loTail.next，并将e挂在后面。&lt;br/&gt;　　　　　　　　　　　　　　　　　　　　　　　　// 这段不明白的可以参考：https://blog.csdn.net/u013494765/article/details/77837338&lt;/span&gt;
&lt;span&gt;                        }
                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 和if里面的原理是一样的&lt;/span&gt;
                            &lt;span&gt;if&lt;/span&gt; (hiTail == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                                hiHead &lt;/span&gt;=&lt;span&gt; e;
                            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                                hiTail.next &lt;/span&gt;=&lt;span&gt; e;
                            hiTail &lt;/span&gt;=&lt;span&gt; e;
                        }
                    } &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; ((e = next) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (loTail != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) { 
                        loTail.next &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                        newTab[j] &lt;/span&gt;= loHead; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将loHead节点存到新数组中原下标位置&lt;/span&gt;
&lt;span&gt;                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (hiTail != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                        hiTail.next &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                        newTab[j &lt;/span&gt;+ oldCap] = hiHead; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将hiHead节点存到新数组中 [原下标+原数组长度] 的位置&lt;/span&gt;
&lt;span&gt;                    }
                }
            }
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; newTab;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　这里争对 &lt;span&gt;&lt;strong&gt;&lt;em id=&quot;__mceDel&quot;&gt;###&lt;/em&gt;&lt;/strong&gt; &lt;span&gt;标注的右岸代码详细讲下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　为什么(e.hash&amp;amp;oldCap) == 0为true或false就能判断存放的位置是newTab[原下标]，还是newTab[原下标+原数组长度]，而不用像jdk1.7那样每次都要rehash？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1401002/201808/1401002-20180817001545731-1495761768.png&quot; alt=&quot;&quot; width=&quot;715&quot; height=&quot;443&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、jdk1.7多线程并发形成循环链表问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1401002/201808/1401002-20180817001530130-2131195872.png&quot; alt=&quot;&quot; width=&quot;719&quot; height=&quot;292&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;&lt;strong&gt;4、并发访问HashMap会出现哪些问题，如何解决呢&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　经过上面分析，我们知道jdk1.8已经不会在多线程下出现循环链表问题了，那还会出现哪些问题呢？&lt;/p&gt;
&lt;p&gt;　　如：&lt;em id=&quot;__mceDel&quot;&gt;数据丢失、结果不一致......&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;p&gt;　　（1）HashTable&lt;/p&gt;
&lt;p&gt;　　　　用synchronized锁住整个table，效率太低，不好。&lt;/p&gt;
&lt;p&gt;　　（2）Collections.SynchronizedMap() &lt;/p&gt;
&lt;p&gt;　　　　它是对put等方法用synchronized加锁的，效率一般是不如ConcurrentHashMap的，用的不多。&lt;/p&gt;
&lt;p&gt;　　（3）ConcurrentHashMap&lt;/p&gt;
&lt;p&gt;　　　　采用锁分段，segment，每次对要操作的那部分数据加锁，并且get()是不用加锁的，这效率就高多了。具体实现原理，且听下回分解。&lt;/p&gt;

&lt;p&gt;最后：文中若有写的不对或者不好的地方，请各位看官指出，谢谢。&lt;/p&gt;

&lt;p&gt;参考资料：1、https://juejin.im/post/5b551e8df265da0f84562403&lt;/p&gt;
&lt;p&gt;　　　　　 2、http://www.importnew.com/20386.html&lt;/p&gt;
&lt;p&gt;　　　　　3、https://blog.csdn.net/u013494765/article/details/77837338#comments&lt;/p&gt;
</description>
<pubDate>Thu, 16 Aug 2018 16:21:00 +0000</pubDate>
<dc:creator>Marksmanbat</dc:creator>
<og:description>本文有些长，贴的源码较多，请各位看官自备花生瓜子啤酒饮料矿泉水小板凳，且听我慢慢道来。 Java面试都会问集合，集合必问HashMap，CurrentHashMap，后面的套路就肯定会问多线程、线程安</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/-Marksman/p/9441688.html</dc:identifier>
</item>
<item>
<title>《深入理解计算机系统》自学历程（一）模拟高速缓存逻辑（上） - 炎寒</title>
<link>http://www.cnblogs.com/xiayongming/p/9490946.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiayongming/p/9490946.html</guid>
<description>&lt;p&gt;&lt;span&gt;《深入理解计算机系统》笔记&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　存储越大寻址时间越慢、效率越低，虽然相对来说每一个数据计算机都会用到，&lt;strong&gt;&lt;span&gt;但在某一阶段、某一个特定时间，使用到的数据范围是相对固定的&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　处理器需要更快速的处理速度，需要快速得到指令和数据，而这些指令和数据都是存在低级的存储中（硬盘等本地存储或网络存储），单纯拿硬盘来说，读取时间就包括了传输时间、旋转时间、寻道时间，效率太低。为了更快速的让处理器得到数据，更好的利用处理器的性能，现代处理器演化出了分支预测的功能单元，可以让处理器在未执行到某一个分支之前就通过投机先行计算（不在本次范围内）。另外，除了内部的文件寄存器，计算机将处理器和主存之间增加了多级缓存，用来存放处理器需要用到的指令和数据。因此，处理器在活动时可以通过分支预测等技术同步的将后续将会使用到的指令和数据加载到缓存中（指令高速缓存/数据高速缓存），可以让整个处理器流水线的效率更高。&lt;/p&gt;
&lt;p&gt;　　注：L0，L1，L2，L3级缓存的效率都是成百倍的降低，L4主存的效率相比L1更是天差地别。客观条件相同的情况下，存储越大寻址速度越慢。虽然说从材料上面来说也有不同，不单单是大小的问题，但材料方面不在本次讨论范围内。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;缓存是低层次存储的缓存&lt;/strong&gt;，或者说是对低层次缓存的“凝练和融合”（L1是L2的缓存，L2是L3的缓存）。通过建立一套规则和逻辑，我们将低层次存储中的数据根据需要读取到高层次缓存中。&lt;/p&gt;
&lt;p&gt;　　本次说到的高速缓存的结构划分为以下几个部分（概念）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;组　　行　　数据块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　S　　 E　　  block&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1126312/201808/1126312-20180816234453117-992364339.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　一个高速缓存的大小（C）就是 S*E*B（blockSize）  &lt;span&gt;&lt;strong&gt;其中 B S 必须是2的N次幂&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;　2.1 为什么要这么划分？&lt;/h2&gt;
&lt;p&gt;　　我们需要一套机制，&lt;span&gt;&lt;strong&gt;将内存地址与高速缓存的索引之间建立关系&lt;/strong&gt;&lt;/span&gt;，上面说的方式就是其中一种。&lt;/p&gt;
&lt;p&gt;　　S代表了高速缓存的组数，E代表了每组中的行数，B代表每行中的数据块大小，通过这S值和B值，我们就可以对内存地址进行掩码处理，并得到相应的组值和数据块偏移。&lt;/p&gt;
&lt;p&gt;       &lt;span&gt;&lt;strong&gt;简单分步骤的说：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　1）计算机中的信息是用二进制表示的。&lt;/p&gt;
&lt;p&gt;　　　　2）S组都是 2的N次幂，代表他们都是通过范围的2进制位数表示的（如果S=5，那么值就可能是0,1,10,11,100,101；但三位二进数还有110、111的值，就无法用三位截取地址的方式来计算组索引了）&lt;/p&gt;
&lt;p&gt;　　　　3）B数据块也是2的N次幂，原因同S。&lt;/p&gt;
&lt;p&gt;　　所以 s = log2（S） 就是 组索引在地址中的位数，b = log2（B）就是数据块偏移的位数。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;1000 1000 1000 1000&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　   t             s            b&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;　2.2 t是什么？&lt;/h2&gt;
&lt;p&gt;　　t代表标识，设想一下，既然是缓存，那么就是将低级存储进行缓存，大小一定是比低级存储更小，所以速度更快。更小代表着较多的数据要使用较小的位置，也就是说多个地址的数据使用一个缓存位置来存数（覆盖什么规则后期再谈），那么久需要一个标识来表示这个缓存单元中的数到底是哪个内存的，否则读取数据的时候都不知道该读哪个了。&lt;/p&gt;
&lt;p&gt;　　t的公式是  memAddrLength - b - s。就是说，去掉组索引位和数据块偏移位，剩下的就是标识位了。&lt;/p&gt;

&lt;h2&gt;　2.3 结果呢，总体来说高速缓存到底什么样子？&lt;/h2&gt;
&lt;p&gt;　　通过组和行我们把高速缓存划分成了一个树形结构，当需要读取低级存储的时候，先将地址根据t s b的规则进行拆分，通过s找到相应的组（组数*行数*高速缓存单元的大小），再通过标识找到对应的行，然后根据块偏移把数据读出来。总的来说就是这么简单。&lt;/p&gt;
&lt;p&gt;　　实际上呢还有不少细节的问题，比如如果不命中怎么办？如果命中的时候对应的高速缓存单元还没热身怎么办（没读取数据）？如果现在内存地址对应的组都已经写满了应该替换哪一个？ 等等，这些计算机现在都有相应的策略，感兴趣的同学可以去看看书。&lt;/p&gt;


&lt;p&gt;　　我准备用C语言自己写一个高速缓存的机制试试，首先我没有低级存储（目前还不会硬件），低级存储是用一个指针加一部分内存空间抽象的。而高速缓存也一样，也在内存里，用一个指针加一部分内存空间抽象的。写这个的目的是为了让自己更好的理解高速缓存的原理。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;实现的功能是：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　1）实现高速缓存读功能，可以根据内存地址进行掩码处理得到对应的t s b值并从“高速缓存空间”中获取到高速缓存单元。&lt;/p&gt;
&lt;p&gt;　　　　2）实现高速缓存的写功能，现在计划使用直写的方式，即直接写入到“低级存储”中不根据高速缓存的写状态进行处理。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;目前进行了组件设计和活动图设计，图如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1）组件图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1126312/201808/1126312-20180817000511354-852934950.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　2）交互图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1126312/201808/1126312-20180817000542991-1408266000.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3）读活动图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1126312/201808/1126312-20180817000602520-25816332.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4）写活动图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1126312/201808/1126312-20180817000619458-695741216.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 代码后续会放到 git@code.aliyun.com:qdxiayongming/C.learn.git&lt;/p&gt;
&lt;p&gt; 望有有经验的朋友指正。&lt;/p&gt;


</description>
<pubDate>Thu, 16 Aug 2018 16:15:00 +0000</pubDate>
<dc:creator>炎寒</dc:creator>
<og:description>《深入理解计算机系统》笔记 一、首先复习一下 存储越大寻址时间越慢、效率越低，虽然相对来说每一个数据计算机都会用到，但在某一阶段、某一个特定时间，使用到的数据范围是相对固定的。 处理器需要更快速的处理</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiayongming/p/9490946.html</dc:identifier>
</item>
<item>
<title>Redis源码阅读（二）高可用设计——复制 - gogo一</title>
<link>http://www.cnblogs.com/gogoCome/p/9490876.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gogoCome/p/9490876.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;复制的概念：&lt;/strong&gt;Redis的复制简单理解就是一个Redis服务器从另一台Redis服务器复制所有的Redis数据库数据，能保持两台Redis服务器的数据库数据一致。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;使用场景：&lt;/strong&gt;复制机制很实用，在客户端并发访问量很大，单台Redis扛不住的情况下，可以部署多台Redis复制相同的数据，共同对外提供服务，提高Redis并发访问处理能力。当然这种通过复制方式部署多台Redis以提高并发处理能力的方式只适用于客户端大部分访问为读数据请求的场景。此外，Redis从2.8版本以后支持的Sentinel高可用机制（热备）也需要依赖复制功能来同步几台机器的Redis数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;个人在阅读源码时比较关心的几个复制问题如下：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;Redis复制时，机器之间传递的数据结构是怎样的？&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;为保证各节点的数据一致，应该要经常进行数据同步，Redis数据量很大时，每次同步都全量肯定不现实，那Redis中的增量同步是如何实现的？&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如果从节点断线后重连到主节点，是否会触发全量同步，在网络状况不好的情况下可能会出现频繁的重连，如果每次重连再进行全量同步会加重网络负担，Redis是否在这种情况下做了增量同步？&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;接下来会介绍Redis复制的主要流程，并针对这几个问题来看Redis源码的实现。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1. &lt;strong&gt;初次复制的流程&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;客户端发slaveof命令给从服务器，给从服务器指定需要复制的主服务器ip和端口&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;从服务器收到slaveof命令后，创建到主服务器的连接并发送PING来确认连接有效&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;从服务器接收到主服务器返回PONG，确认可以和主服务器通信后，向主服务器发送”PSYNC ？ -1”命令，申请执行初次的全量同步&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;主服务器收到PSYNC，开始在内部执行BGSAVE命令，将数据库写到RDB文件中；注意，在执行BGSAVE期间，主服务器还可接收客户端的写命令，这些命令会向缓冲区中写一份，确保在执行BGSAVE期间发生的写命令也可以同步给从服务器&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;主服务器执行BGSAVE后，发送RDB文件给从服务器，从服务器导入RDB文件&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;发送RDB完成后，主服务器将缓冲区中的写命令也发送给从服务器，从服务器执行这些写命令&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;备注：这里介绍的是主要流程，忽略了身份认证的步骤&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1438066/201808/1438066-20180816233056827-1660971132.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;复制时机器间传递的数据结构是RDB文件；RDB是Redis持久化的一种方式；RDB文件中记录的是Redis数据库中所有的key-value对；这种持久方式在任意时刻开启都能保证持久化的数据是Redis中完整数据，与此相对的AOF持久化方式则是将所有写命令计入到文件中，这种文件保留的数据只是从开启AOF的那一刻开始，开启之前的数据是无法保存的，所以复制机制没有使用AOF文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;源码中，服务器处理slaveof命令的处理器是slaveofCommand()函数&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; slaveofCommand(redisClient *c) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;想让一个节点A通过slaveof成为另一个节点B的slave，则必须是B在单机模式下

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; .......&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Check if we are already attached to the specified slave &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查输入的 host 和 port 是否服务器目前的主服务器
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果是的话，向客户端返回 +OK ，不做其他动作
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;说明之前已经slaveof ip port过，这次又执行该命令，说明之前已经连接建立成功过了&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (server.masterhost &amp;amp;&amp;amp; !strcasecmp(server.masterhost,c-&amp;gt;argv[&lt;span&gt;1&lt;/span&gt;]-&amp;gt;&lt;span&gt;ptr)
            &lt;/span&gt;&amp;amp;&amp;amp; server.masterport ==&lt;span&gt; port) {
            redisLog(REDIS_NOTICE,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SLAVE OF would result into synchronization with the master we are already connected with. No operation performed.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            addReplySds(c,sdsnew(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+OK Already connected to specified master\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;向从服务器的redis-cli客户端发送该命令&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一次执行slaveof ip port,新的ip或者port&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; There was no previous master or the user specified a different one,
         * we can continue. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 没有前任主服务器，或者客户端指定了新的主服务器
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开始执行复制操作&lt;/span&gt;&lt;span&gt;
        replicationSetMaster(c&lt;/span&gt;-&amp;gt;argv[&lt;span&gt;1&lt;/span&gt;]-&amp;gt;&lt;span&gt;ptr, port);
        redisLog(REDIS_NOTICE,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SLAVE OF %s:%d enabled (user request)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            server.masterhost, server.masterport);
    }
    addReply(c,shared.ok);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;在该函数中通过replicationSetMaster()函数设置要连接的主服务器的IP和端口，并将服务器连接状态server.repl_state置为REDIS_REPL_CONNECT。从而会触发connectWithMaster()函数将连接状态置为REDIS_REPL_CONNECTING，继而触发slaveTryPartialResynchronization()函数来发送PSYNC命令。connectWithMaster函数创建连接套接字专门用于主备数据同步&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 以非阻塞方式连接主服务器&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; connectWithMaster(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; fd;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 连接主服务器&lt;/span&gt;
    fd =&lt;span&gt; anetTcpNonBlockConnect(NULL,server.masterhost,server.masterport);

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (fd == -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
        redisLog(REDIS_WARNING,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unable to connect to MASTER: %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,  strerror(errno));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; REDIS_ERR;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 监听主服务器 fd 的读和写事件，并绑定文件事件处理器&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (aeCreateFileEvent(server.el,fd,AE_READABLE|AE_WRITABLE,syncWithMaster,NULL) ==&lt;span&gt;
            AE_ERR)
    {
        close(fd);
        redisLog(REDIS_WARNING,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Can't create readable event for SYNC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; REDIS_ERR;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化统计变量&lt;/span&gt;
    server.repl_transfer_lastio =&lt;span&gt; server.unixtime;
    server.repl_transfer_s &lt;/span&gt;=&lt;span&gt; fd;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将状态改为已连接&lt;/span&gt;
    server.repl_state =&lt;span&gt; REDIS_REPL_CONNECTING;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; REDIS_OK;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;看下slaveTryPartialResynchronization()的具体实现实现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; slaveTryPartialResynchronization(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; fd) {
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;psync_runid;
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; psync_offset[&lt;span&gt;32&lt;/span&gt;&lt;span&gt;];
    sds reply;
    server.repl_master_initial_offset &lt;/span&gt;= -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;例如从服务器之前和主服务器连接上，并同步了数据，中途端了，则连接断了后会在replicationCacheMaster把server.cached_master = server.master;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;表示之前有连接到过服务器&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (server.cached_master) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 缓存存在，尝试部分重同步
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 命令为 &quot;PSYNC &amp;lt;master_run_id&amp;gt; &amp;lt;repl_offset&amp;gt;&quot;&lt;/span&gt;&lt;span&gt;
        psync_runid &lt;/span&gt;= server.cached_master-&amp;gt;&lt;span&gt;replrunid;
        snprintf(psync_offset,&lt;/span&gt;&lt;span&gt;sizeof&lt;/span&gt;(psync_offset),&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%lld&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, server.cached_master-&amp;gt;reploff+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
        redisLog(REDIS_NOTICE,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Trying a partial resynchronization (request %s:%s).&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, psync_runid, psync_offset);
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 缓存不存在
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 发送 &quot;PSYNC ? -1&quot; ，要求完整重同步&lt;/span&gt;&lt;span&gt;
        redisLog(REDIS_NOTICE,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Partial resynchronization not possible (no cached master)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        psync_runid &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        memcpy(psync_offset,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Issue the PSYNC command &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向主服务器发送 PSYNC 命令&lt;/span&gt;&lt;span&gt;
    reply &lt;/span&gt;= sendSynchronousCommand(fd,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PSYNC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,psync_runid,psync_offset,NULL);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 接收到 FULLRESYNC ，进行 full-resync&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (!strncmp(reply,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+FULLRESYNC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;11&lt;/span&gt;&lt;span&gt;)) {
        &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *runid = NULL, *offset =&lt;span&gt; NULL;
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; FULL RESYNC, parse the reply in order to extract the run id
         * and the replication offset. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 分析并记录主服务器的 run id&lt;/span&gt;&lt;span&gt;
        runid &lt;/span&gt;= strchr(reply,&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (runid) {
            runid&lt;/span&gt;++&lt;span&gt;;
            offset &lt;/span&gt;= strchr(runid,&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (offset) offset++&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查 run id 的合法性&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (!runid || !offset || (offset-runid-&lt;span&gt;1&lt;/span&gt;) !=&lt;span&gt; REDIS_RUN_ID_SIZE) {
            redisLog(REDIS_WARNING, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Master replied with wrong +FULLRESYNC syntax.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 主服务器支持 PSYNC ，但是却发来了异常的 run id
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 只好将 run id 设为 0 ，让下次 PSYNC 时失败&lt;/span&gt;&lt;span&gt;
            memset(server.repl_master_runid,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,REDIS_RUN_ID_SIZE+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保存 run id&lt;/span&gt;&lt;span&gt;
            memcpy(server.repl_master_runid, runid, offset&lt;/span&gt;-runid-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            server.repl_master_runid[REDIS_RUN_ID_SIZE] &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 以及 initial offset&lt;/span&gt;&lt;span&gt;
            server.repl_master_initial_offset &lt;/span&gt;= strtoll(offset,NULL,&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印日志，这是一个 FULL resync&lt;/span&gt;&lt;span&gt;
            redisLog(REDIS_NOTICE,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Full resync from master: %s:%lld&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                server.repl_master_runid,
                server.repl_master_initial_offset);
        }
       &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; We are going to full resync, discard the cached master structure. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 要开始完整重同步，缓存中的 master 已经没用了，清除它&lt;/span&gt;&lt;span&gt;
        replicationDiscardCachedMaster();
        sdsfree(reply);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回状态&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; PSYNC_FULLRESYNC;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 接收到 CONTINUE ，进行 partial resync&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (!strncmp(reply,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+CONTINUE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;9&lt;/span&gt;&lt;span&gt;)) {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Partial resync was accepted, set the replication state accordingly &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        redisLog(REDIS_NOTICE, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Successful partial resynchronization with master.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        sdsfree(reply);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将缓存中的 master 设为当前 master&lt;/span&gt;&lt;span&gt;
        replicationResurrectCachedMaster(fd);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回状态&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; PSYNC_CONTINUE;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 接收到错误？&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (strncmp(reply,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-ERR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;&lt;span&gt;)) {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; If it's not an error, log the unexpected event. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        redisLog(REDIS_WARNING,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unexpected reply to PSYNC from master: %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, reply);
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        redisLog(REDIS_NOTICE,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Master does not support PSYNC or is in &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error state (reply: %s)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, reply);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果从服务器发送PSYNC上去后或者其他原因返回错误，然后在serverCron中重新建立连接再次从新走一次PSYNC或者SYNC流程&lt;/span&gt;&lt;span&gt;
    sdsfree(reply);
    replicationDiscardCachedMaster();

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 主服务器不支持 PSYNC&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; PSYNC_NOT_SUPPORTED;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;为什么设置了server.repl_state状态，就可以触发Redis服务器进行各种相应操作呢？ 很明显Redis内部有定时轮询server.repl_state的逻辑存在。实现定时轮询其实就是Redis时间事件的一个实际的应用，感兴趣可以看下源码中ServerCron()函数的处理。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;2. &lt;strong&gt;增量同步&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;增量同步的两个常用场景：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;初次全量同步之后，主服务器在收到写命令时，会将写命令传播给从服务器，而不是全量发送给从服务器（从服务器只读，不处理非主节点发来的写命令）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;从服务器断线重连之后，从服务器与主服务器之间的数据差异只有断线期间主服务器接收到的写命令所执行的对数据的修改部分，此时只需要增量同步这部分数据即可。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;写命令的传播比较容易理解，主服务器收到写命令，可能导致主从服务器数据不一致，那么主服务器在执行命令之外还会转发这个写命令给从服务器，让从服务器也执行相同的写命令，做到数据的一致。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另一个场景断线重连，Redis是由PSYNC命令来实现的，该功能也是在2.8版本后加入到Redis中的，老版本不兼容该命令。PSYNC的实现依赖于两个重要的概念：复制偏移量和复制积压缓冲区。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;复制偏移量&lt;/strong&gt;，指主服务器传播给从服务器的写命令的偏移量；主服务器和从服务器分别维护各自的偏移量。主服务器每传播N字节的写命令，偏移量就自增N；从服务器在接收到N字节写命令后也会将偏移量增N，这样就能保证主从节点的偏移量始终保持一致。（从服务器初始的复制偏移量是从哪里获取的呢？很明显应该是在初次全量同步时将主服务器的复制偏移量也同步给从服务器）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用示例图片来表示复制偏移量的变化&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1438066/201808/1438066-20180816234334172-1704638142.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;图1 主从服务器复制偏移量一致&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;开始阶段主从服务器的偏移量均为10086&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1438066/201808/1438066-20180816234347304-1776213959.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;图2 客户端发来写命令后，偏移量的变化&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;主服务器执行写命令后更新了自身的偏移量到10101；同时传播写命令给从服务器，从服务器接收命令后也会更新自己的同步偏移量使得主从保持一致。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有了这个概念，一旦从服务器断线重连时就可以在同步命令中带上偏移量，主服务器根据偏移量是否一致来判断是否需要增量同步，以及增量哪些写命令。偏移量在服务器启动时初始化为0，后面可以一直递增不用考虑循环，因为偏移量是long long类型的，上限很大很大（9223372036854775807），基本不会撑爆。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那需要增量的写命令时保存在哪里的呢？这里就引入了另一个概念：复制积压缓冲区（server.backlog）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;复制积压缓冲区，&lt;/strong&gt;在Redis中是一个先进先出的定长队列，默认长度是1M。数据结构就是一个带标签的字符串数组。每次写命令都会直接从index开始进行拷贝, 达到缓冲区尾部就从缓冲区头开始拷贝，对原有数据直接覆盖。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;3. &lt;strong&gt;心跳检测&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;心跳检测是由从服务器发起的，默认情况下是每隔1s发送一次；发送的命令是：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;REPLCONF ACK &amp;lt;replication_offset&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Replication_offset是从服务器的复制偏移量；这样主服务器收到该命令后可以比较从服务器的Replication_offset是否和自身的一致，如果不一致这说明需要同步数据。主节点此时的处理方式类似于从服务器断线重连时的处理，将偏移量多出来的写命令发送给从节点执行，保持两者的数据一致。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由此可见心跳检测的一个重要功能就是防止命令传播过程中有消息未送达从服务器而导致的主从数据不一致。这也是2.8版本以后新增的异常处理逻辑，很大的提高了复制机制的可用性。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;4. &lt;strong&gt;总结&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;以上就是复制机制的一些关键点，总结一下主要包括以下几点：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;复制机制下，只有主服务器才可以接收普通客户的写命令，从服务器只能接收普通客户端的读命令；且主服务器每接收到一个写命令，都会讲该命令传播给从服务器，保证主从数据一致&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Redis使用复制偏移量和复制积压缓冲区来实现PSYNC的增量复制，在从服务器断线重连后避免了进行全同步，效率提升明显。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;心跳检测可以检查主从服务器数据是否一致，利用的也是从服务器发送给主服务器的复制偏移量，主服务器可以尽早的发现传播过程中丢掉的命令，并发起补充的命令传播。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;Redis自带的高可用解决方案Sentinel也是以复制机制为基础的，增加了Sentinel监控节点，可以及时检查到失效的主服务器，在从服务器中选出新的主服务器。当原有的主服务器恢复后会成为从服务器加进来。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 16 Aug 2018 15:52:00 +0000</pubDate>
<dc:creator>gogo一</dc:creator>
<og:description>Redis的复制机制的概念，常用场景分析，主体的实现流程和增量复制的实现介绍</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gogoCome/p/9490876.html</dc:identifier>
</item>
<item>
<title>我的第一个python web开发框架（30）——定制ORM（七） - AllEmpty</title>
<link>http://www.cnblogs.com/EmptyFS/p/9484680.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/EmptyFS/p/9484680.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　几个复杂的ORM方式都已介绍完了，剩下一些常用的删除、获取记录数量、统计合计数、获取最大值、获取最小值等方法我就不一一详细介绍了，直接给出代码大家自行查看。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4d9666cf-4e7f-416a-9532-26fc56874f2f')&quot; readability=&quot;84.5&quot;&gt;&lt;img id=&quot;code_img_closed_4d9666cf-4e7f-416a-9532-26fc56874f2f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4d9666cf-4e7f-416a-9532-26fc56874f2f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4d9666cf-4e7f-416a-9532-26fc56874f2f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4d9666cf-4e7f-416a-9532-26fc56874f2f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;164&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; coding=utf-8&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; common &lt;span&gt;import&lt;/span&gt;&lt;span&gt; db_helper
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogicBase():
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;逻辑层基础类&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self, db, is_output_sql, table_name, column_name_list=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, pk_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;类初始化&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库参数&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;         self.&lt;span&gt;__db&lt;/span&gt; =&lt;span&gt; db
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是否输出执行的Sql语句到日志中&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;         self.&lt;span&gt;__is_output_sql&lt;/span&gt; =&lt;span&gt; is_output_sql
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 表名称&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;         self.&lt;span&gt;__table_name&lt;/span&gt; =&lt;span&gt; str(table_name).lower()
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查询的列字段名称，*表示查询全部字段，多于1个字段时用逗号进行分隔，除了字段名外，也可以是表达式&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;         self.&lt;span&gt;__column_name_list&lt;/span&gt; =&lt;span&gt; str(column_name_list).lower()
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 主健名称&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;         self.&lt;span&gt;__pk_name&lt;/span&gt; =&lt;span&gt; str(pk_name).lower()
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;####################################################################&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 执行Sql ###&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt; 
&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; select(self, sql):
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;执行sql查询语句（select）&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;         with db_helper.PgHelper(self.&lt;span&gt;__db&lt;/span&gt;, self.&lt;span&gt;__is_output_sql&lt;/span&gt;&lt;span&gt;) as db:
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 执行sql语句&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;             result =&lt;span&gt; db.execute(sql)
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;                 result =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; 
&lt;span&gt; 35&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; execute(self, sql):
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;执行sql语句，并提交事务&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;         with db_helper.PgHelper(self.&lt;span&gt;__db&lt;/span&gt;, self.&lt;span&gt;__is_output_sql&lt;/span&gt;&lt;span&gt;) as db:
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 执行sql语句&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;             result =&lt;span&gt; db.execute(sql)
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;                db.commit()
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;                 result =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; copy(self, values, columns):
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;批量更新数据&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;         with db_helper.PgHelper(self.&lt;span&gt;__db&lt;/span&gt;, self.&lt;span&gt;__is_output_sql&lt;/span&gt;&lt;span&gt;) as db:
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 执行sql语句&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;             result = db.copy(values, self.&lt;span&gt;__table_name&lt;/span&gt;&lt;span&gt;, columns)
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; 
&lt;span&gt; 53&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_model(self, wheres):
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;通过条件获取一条记录&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果有条件，则自动添加where&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;             wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 合成sql语句&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;         sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select %(column_name_list)s from %(table_name)s %(wheres)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;column_name_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__column_name_list&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: wheres}
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初化化数据库链接&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;         result =&lt;span&gt; self.select(sql)
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result[0]
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; 
&lt;span&gt; 68&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; get_model_for_pk(self, pk, wheres=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;通过主键值获取数据库记录实体&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; pk:
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 组装查询条件&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;         wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s = %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; % (self.&lt;span&gt;__pk_name&lt;/span&gt;&lt;span&gt;, str(pk))
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.get_model(wheres)
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; 
&lt;span&gt; 77&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; get_value(self, column_name, wheres=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;        获取指定条件的字段值————多于条记录时，只取第一条记录
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;        :param column_name: 单个字段名，如：id
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;        :param wheres: 查询条件
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;        :return: 7 （指定的字段值）
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; column_name:
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; None
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;elif&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;             wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; 
&lt;span&gt; 89&lt;/span&gt;         sql = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select %(column_name)s from %(table_name)s %(wheres)s limit 1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;column_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: column_name, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: wheres}
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;         result =&lt;span&gt; self.select(sql)
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果查询成功，则直接返回记录字典&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result[0].get(column_name)
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; 
&lt;span&gt; 96&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; get_value_list(self, column_name, wheres=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;        获取指定条件记录的字段值列表
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;        :param column_name: 单个字段名，如：id
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;        :param wheres: 查询条件
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;        :return: [1,3,4,6,7]
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; column_name:
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;             column_name = self.&lt;span&gt;__pk_name&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;elif&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;             wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt;         sql = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select array_agg(%(column_name)s) as list from %(table_name)s %(wheres)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;column_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: column_name, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: wheres}
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;         result =&lt;span&gt; self.select(sql)
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果查询失败或不存在指定条件记录，则直接返回初始值&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; result &lt;span&gt;and&lt;/span&gt;&lt;span&gt; isinstance(result, list):
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; 
&lt;span&gt;117&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; add_model(self, fields, returning=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;新增数据库记录&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 拼接sql语句 ###&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化变量&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;         key_list =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;         value_list =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将传入的字典参数进行处理，把字段名生成sql插入字段名数组和字典替换数组&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; PS:字符串使用字典替换参数时，格式是%(name)s，这里会生成对应的字串&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 比如：&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;   传入的字典为： {'id': 1, 'name': '名称'}&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;   那么生成的key_list为：'id','name'&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;   而value_list为：'%(id)s,%(name)s'&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;   最终而value_list为字符串对应名称位置会被替换成相应的值&lt;/span&gt;
&lt;span&gt;130&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fields.keys():
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;            key_list.append(key)
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;             value_list.append(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + key + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置sql拼接字典，并将数组（lit）使用join方式进行拼接，生成用逗号分隔的字符串&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;         parameter =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pk_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__pk_name&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;key_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.join(key_list),
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;value_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.join(value_list)
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果有指定返回参数，则添加&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; returning:
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; returning
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt; 
&lt;span&gt;146&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成可以使用字典替换的字符串&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt;         sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;insert into %(table_name)s (%(key_list)s) values (%(value_list)s) returning %(pk_name)s %(returning)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; parameter
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将生成好的字符串替字典参数值，生成最终可执行的sql语句&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt;         sql = sql %&lt;span&gt; fields
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; 
&lt;span&gt;151&lt;/span&gt;         result =&lt;span&gt; self.execute(sql)
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result[0]
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; 
&lt;span&gt;156&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; edit(self, fields, wheres=&lt;span&gt;''&lt;/span&gt;, returning=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;批量编辑数据库记录&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;158&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 拼接sql语句 ###&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 拼接字段与值&lt;/span&gt;
&lt;span&gt;160&lt;/span&gt;         field_list = [key + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; = %(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + key + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fields.keys()]
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置sql拼接字典&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt;         parameter =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pk_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__pk_name&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;field_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.join(field_list)
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果存在更新条件，则将条件添加到sql拼接更换字典中&lt;/span&gt;
&lt;span&gt;168&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;172&lt;/span&gt; 
&lt;span&gt;173&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果有指定返回参数，则添加&lt;/span&gt;
&lt;span&gt;174&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; returning:
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; returning
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;178&lt;/span&gt; 
&lt;span&gt;179&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成sql语句&lt;/span&gt;
&lt;span&gt;180&lt;/span&gt;         sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;update %(table_name)s set %(field_list)s %(wheres)s returning %(pk_name)s %(returning)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; parameter
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;         sql = sql %&lt;span&gt; fields
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; 
&lt;span&gt;183&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.execute(sql)
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt; 
&lt;span&gt;185&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; edit_model(self, pk, fields, wheres=&lt;span&gt;''&lt;/span&gt;, returning=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;编辑单条数据库记录&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;187&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; pk:
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt;         &lt;span&gt;elif&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt;             wheres = self.&lt;span&gt;__pk_name&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; = &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(pk) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; and &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt;             wheres = self.&lt;span&gt;__pk_name&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; = &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(pk)
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt; 
&lt;span&gt;194&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.edit(fields, wheres, returning)
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt; 
&lt;span&gt;196&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; delete(self, wheres=&lt;span&gt;''&lt;/span&gt;, returning=&lt;span&gt;''&lt;/span&gt;, is_update_cache=&lt;span&gt;True):
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;批量删除数据库记录&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;198&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果存在条件&lt;/span&gt;
&lt;span&gt;199&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;             wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt; 
&lt;span&gt;202&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果有指定返回参数，则添加&lt;/span&gt;
&lt;span&gt;203&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; returning:
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt;             returning = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; returning
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt; 
&lt;span&gt;206&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成sql语句&lt;/span&gt;
&lt;span&gt;207&lt;/span&gt;         sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete from %(table_name)s %(wheres)s returning %(pk_name)s %(returning)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: wheres, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pk_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__pk_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: returning}
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.execute(sql)
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt; 
&lt;span&gt;211&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; delete_model(self, pk, wheres=&lt;span&gt;''&lt;/span&gt;, returning=&lt;span&gt;''&lt;/span&gt;, is_update_cache=&lt;span&gt;True):
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;删除单条数据库记录&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;213&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; pk:
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt;         &lt;span&gt;elif&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt;             wheres = self.&lt;span&gt;__pk_name&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; = &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(pk) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; and &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt;             wheres = self.&lt;span&gt;__pk_name&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; = &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(pk)
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt; 
&lt;span&gt;220&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.delete(wheres, returning)
&lt;/span&gt;&lt;span&gt;221&lt;/span&gt; 
&lt;span&gt;222&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; get_list(self, column_name_list=&lt;span&gt;''&lt;/span&gt;, wheres=&lt;span&gt;''&lt;/span&gt;, page_number=None, page_size=None, orderby=None, table_name=&lt;span&gt;None):
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;224&lt;/span&gt; &lt;span&gt;        获取指定条件的数据库记录集
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt; &lt;span&gt;        :param column_name_list:      查询字段
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt; &lt;span&gt;        :param wheres:      查询条件
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt; &lt;span&gt;        :param page_number:   分页索引值
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt; &lt;span&gt;        :param page_size:    分页大小， 存在值时才会执行分页
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt; &lt;span&gt;        :param orderby:     排序规则
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt; &lt;span&gt;        :param table_name:     查询数据表，多表查询时需要设置
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt; &lt;span&gt;        :return: 返回记录集总数量与分页记录集
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt; &lt;span&gt;            {'records': 0, 'total': 0, 'page': 0, 'rows': []}
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;234&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化输出参数：总记录数量与列表集&lt;/span&gt;
&lt;span&gt;235&lt;/span&gt;         data =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 0,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 总记录数&lt;/span&gt;
&lt;span&gt;237&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;total&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 0,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 总页数&lt;/span&gt;
&lt;span&gt;238&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 1,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 当前页面索引&lt;/span&gt;
&lt;span&gt;239&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [],  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查询结果（记录列表）&lt;/span&gt;
&lt;span&gt;240&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化查询数据表名称&lt;/span&gt;
&lt;span&gt;242&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; table_name:
&lt;/span&gt;&lt;span&gt;243&lt;/span&gt;             table_name = self.&lt;span&gt;__table_name&lt;/span&gt;
&lt;span&gt;244&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化查询字段名&lt;/span&gt;
&lt;span&gt;245&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; column_name_list:
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt;             column_name_list = self.&lt;span&gt;__column_name_list&lt;/span&gt;
&lt;span&gt;247&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化查询条件&lt;/span&gt;
&lt;span&gt;248&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果是字符串，表示该查询条件已组装好了，直接可以使用&lt;/span&gt;
&lt;span&gt;250&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; isinstance(wheres, str):
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt;                 wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果是list，则表示查询条件有多个，可以使用join将它们用and方式组合起来使用&lt;/span&gt;
&lt;span&gt;253&lt;/span&gt;             &lt;span&gt;elif&lt;/span&gt;&lt;span&gt; isinstance(wheres, list):
&lt;/span&gt;&lt;span&gt;254&lt;/span&gt;                 wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; and &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.join(wheres)
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化排序&lt;/span&gt;
&lt;span&gt;256&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; orderby:
&lt;/span&gt;&lt;span&gt;257&lt;/span&gt;             orderby = self.&lt;span&gt;__pk_name&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; desc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;258&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化分页查询的记录区间&lt;/span&gt;
&lt;span&gt;259&lt;/span&gt;         paging = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;260&lt;/span&gt; 
&lt;span&gt;261&lt;/span&gt;         with db_helper.PgHelper(self.&lt;span&gt;__db&lt;/span&gt;, self.&lt;span&gt;__is_output_sql&lt;/span&gt;&lt;span&gt;) as db:
&lt;/span&gt;&lt;span&gt;262&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;############################################################&lt;/span&gt;
&lt;span&gt;263&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断是否需要进行分页&lt;/span&gt;
&lt;span&gt;264&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; page_size &lt;span&gt;is&lt;/span&gt;&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 执行sql，获取指定条件的记录总数量&lt;/span&gt;
&lt;span&gt;266&lt;/span&gt;                 sql = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select count(1) as records from %(table_name)s %(wheres)s &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;267&lt;/span&gt;                       {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: table_name, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: wheres}
&lt;/span&gt;&lt;span&gt;268&lt;/span&gt;                 result =&lt;span&gt; db.execute(sql)
&lt;/span&gt;&lt;span&gt;269&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果查询失败或不存在指定条件记录，则直接返回初始值&lt;/span&gt;
&lt;span&gt;270&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; result &lt;span&gt;or&lt;/span&gt; result[0][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] ==&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;271&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data
&lt;/span&gt;&lt;span&gt;272&lt;/span&gt; 
&lt;span&gt;273&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置记录总数量&lt;/span&gt;
&lt;span&gt;274&lt;/span&gt;                 data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;275&lt;/span&gt; 
&lt;span&gt;276&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;########################################################&lt;/span&gt;
&lt;span&gt;277&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 设置分页索引与页面大小 ###&lt;/span&gt;
&lt;span&gt;278&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; page_size &amp;lt;=&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;279&lt;/span&gt;                     page_size = 10
&lt;span&gt;280&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算总分页数量：通过总记录数除于每页显示数量来计算总分页数量&lt;/span&gt;
&lt;span&gt;281&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] % page_size ==&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;282&lt;/span&gt;                     page_total = data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] //&lt;span&gt; page_size
&lt;/span&gt;&lt;span&gt;283&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;284&lt;/span&gt;                     page_total = data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] // page_size + 1
&lt;span&gt;285&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断页码是否超出限制，超出限制查询时会出现异常，所以将页面索引设置为最后一页&lt;/span&gt;
&lt;span&gt;286&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; page_number &amp;lt; 1 &lt;span&gt;or&lt;/span&gt; page_number &amp;gt;&lt;span&gt; page_total:
&lt;/span&gt;&lt;span&gt;287&lt;/span&gt;                     page_number =&lt;span&gt; page_total
&lt;/span&gt;&lt;span&gt;288&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 记录总页面数量&lt;/span&gt;
&lt;span&gt;289&lt;/span&gt;                 data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;total&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; page_total
&lt;/span&gt;&lt;span&gt;290&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 记录当前页面值&lt;/span&gt;
&lt;span&gt;291&lt;/span&gt;                 data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; page_number
&lt;/span&gt;&lt;span&gt;292&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算当前页面要显示的记录起始位置（limit指定的位置）&lt;/span&gt;
&lt;span&gt;293&lt;/span&gt;                 record_number = (page_number - 1) *&lt;span&gt; page_size
&lt;/span&gt;&lt;span&gt;294&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置查询分页条件&lt;/span&gt;
&lt;span&gt;295&lt;/span&gt;                 paging = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; limit &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(page_size) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; offset &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(record_number)
&lt;/span&gt;&lt;span&gt;296&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;############################################################&lt;/span&gt;
&lt;span&gt;297&lt;/span&gt; 
&lt;span&gt;298&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 按条件查询数据库记录&lt;/span&gt;
&lt;span&gt;299&lt;/span&gt;             sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select %(column_name_list)s from %(table_name)s %(wheres)s order by %(orderby)s %(paging)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;300&lt;/span&gt;                   {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;column_name_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: column_name_list,
&lt;/span&gt;&lt;span&gt;301&lt;/span&gt;                    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: table_name,
&lt;/span&gt;&lt;span&gt;302&lt;/span&gt;                    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: wheres,
&lt;/span&gt;&lt;span&gt;303&lt;/span&gt;                    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;orderby&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: orderby,
&lt;/span&gt;&lt;span&gt;304&lt;/span&gt;                    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;paging&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: paging}
&lt;/span&gt;&lt;span&gt;305&lt;/span&gt;             result =&lt;span&gt; db.execute(sql)
&lt;/span&gt;&lt;span&gt;306&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;307&lt;/span&gt;                 data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; result
&lt;/span&gt;&lt;span&gt;308&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 不需要分页查询时，直接在这里设置总记录数&lt;/span&gt;
&lt;span&gt;309&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; page_size &lt;span&gt;is&lt;/span&gt;&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt;310&lt;/span&gt;                     data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; len(result)
&lt;/span&gt;&lt;span&gt;311&lt;/span&gt; 
&lt;span&gt;312&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data
&lt;/span&gt;&lt;span&gt;313&lt;/span&gt; 
&lt;span&gt;314&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; get_count(self, wheres=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;315&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;获取指定条件记录数量&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;316&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;317&lt;/span&gt;             wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;318&lt;/span&gt;         sql = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select count(1) as total from %(table_name)s %(wheres)s &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;319&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: wheres}
&lt;/span&gt;&lt;span&gt;320&lt;/span&gt;         result =&lt;span&gt; self.select(sql)
&lt;/span&gt;&lt;span&gt;321&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果查询存在记录，则返回true&lt;/span&gt;
&lt;span&gt;322&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;323&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;total&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;324&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;325&lt;/span&gt; 
&lt;span&gt;326&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_sum(self, fields, wheres):
&lt;/span&gt;&lt;span&gt;327&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;获取指定条件记录数量&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;328&lt;/span&gt;         sql = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select sum(%(fields)s) as total from %(table_name)s where %(wheres)s &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;329&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: wheres, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;fields&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: fields}
&lt;/span&gt;&lt;span&gt;330&lt;/span&gt;         result =&lt;span&gt; self.select(sql)
&lt;/span&gt;&lt;span&gt;331&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果查询存在记录，则返回true&lt;/span&gt;
&lt;span&gt;332&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; result &lt;span&gt;and&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;total&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;333&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;total&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;334&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;335&lt;/span&gt; 
&lt;span&gt;336&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_min(self, fields, wheres):
&lt;/span&gt;&lt;span&gt;337&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;获取该列记录最小值&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;338&lt;/span&gt;         sql = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select min(%(fields)s) as min from %(table_name)s where %(wheres)s &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;339&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: wheres, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;fields&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: fields}
&lt;/span&gt;&lt;span&gt;340&lt;/span&gt;         result =&lt;span&gt; self.select(sql)
&lt;/span&gt;&lt;span&gt;341&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果查询存在记录，则返回true&lt;/span&gt;
&lt;span&gt;342&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; result &lt;span&gt;and&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;min&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;343&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;min&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;344&lt;/span&gt; 
&lt;span&gt;345&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_max(self, fields, wheres):
&lt;/span&gt;&lt;span&gt;346&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;获取该列记录最大值&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;347&lt;/span&gt;         sql = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select max(%(fields)s) as max from %(table_name)s where %(wheres)s &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;348&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: wheres, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;fields&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: fields}
&lt;/span&gt;&lt;span&gt;349&lt;/span&gt;         result =&lt;span&gt; self.select(sql)
&lt;/span&gt;&lt;span&gt;350&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果查询存在记录，则返回true&lt;/span&gt;
&lt;span&gt;351&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; result &lt;span&gt;and&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;max&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;352&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;max&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;353&lt;/span&gt; 
&lt;span&gt;354&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;####################################################################&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　大家只要掌握了ORM简单的组合sql方法，就可以自由发挥，根据自己的需要去创建不同的方法了，也可以随意更换mysql、mssql等数据库。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当然，这只是最简单的ORM方式，提交字段参数和条件参数时，它不会自动分辨字段的类型，不会自动初始化默认值，如果想让它变的更加强大，还需要做更多的改造与处理，这样做的话它也会跟着变的更加复杂和难懂，性能也会跟着下降。不过当前功能对于多数项目来说，已经足够使用了。大家如果有需要可以自行研究进行扩展。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　在日常操作中，获取指定记录实体是最常见使用最频繁的操作，为了减少对数据库的查询，我们可以将ORM与Nosql结合起来，提升ORM的操作性能，当然如果你不想使用nosql缓存，也可以直接跳过本章节。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　使用Nosql，首先我们需要一个链接Nosql的配置文件，用它来存储Nosql的服务地址、端口、密码等参数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在config文件夹中我们创建redis_config.py配置文件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; coding=utf-8&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;## redis缓存配置参数 ###&lt;/span&gt;
REDIS =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 服务地址&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;server&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 服务端口&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 6379&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 服务密码&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pwd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库序号&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;db&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 1&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　然后我们还需要一个nosql链接工具包（cache_helper.py），用来对nosql进行set、get、delete和clear操作（存储、获取、删除和清空缓存）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2c0923e5-693d-4e22-aa5d-bbbe5c3f3da1')&quot; readability=&quot;40&quot;&gt;&lt;img id=&quot;code_img_closed_2c0923e5-693d-4e22-aa5d-bbbe5c3f3da1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2c0923e5-693d-4e22-aa5d-bbbe5c3f3da1&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2c0923e5-693d-4e22-aa5d-bbbe5c3f3da1',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2c0923e5-693d-4e22-aa5d-bbbe5c3f3da1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; coding=utf-8&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; redis
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; common &lt;span&gt;import&lt;/span&gt;&lt;span&gt; log_helper
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; config &lt;span&gt;import&lt;/span&gt;&lt;span&gt; redis_config
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置redis配置参数&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt; _redis =&lt;span&gt; redis_config.REDIS
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化Redis缓存链接&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt; r =&lt;span&gt; None
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; r:
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;         r = redis.Redis(host=_redis.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;server&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;                         port=_redis.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;                         db=_redis.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;db&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;                         password=_redis.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pwd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;                         socket_timeout=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;                         socket_connect_timeout=1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;     log_helper.info(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;连接redis出错:(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(_redis) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(e.args))
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;pass&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt; 
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; set(key, value, time=86400&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;    写缓存
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;    :param key: 缓存key，字符串，不区分大小写
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;    :param value: 要存储的值
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;    :param time: 缓存过期时间（单位：秒），0=永不过期
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;    :return:
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将key转换为小写字母&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;     key =&lt;span&gt; str(key).lower()
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;        r.set(key, value, time)
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         log_helper.info(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;写缓存失败:key(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + key + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(e.args))
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;pass&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt; 
&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get(key):
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;    读缓存
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;    :param key: 缓存key，字符串，不区分大小写
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;    :return:
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将key转换为小写字母&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;     key =&lt;span&gt; str(key).lower()
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;         value =&lt;span&gt; r.get(key)
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; log_helper.error('读缓存失败:key(' + key + ')' + str(e.args) + ' r:' + str(r) + ' _redis:' + str(_redis))&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;         value =&lt;span&gt; None
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _str_to_json(value)
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; push(key, value):
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;    添加数据到队列头部
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;    :param key: 缓存key，字符串，不区分大小写
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;    :param value: 要存储的值
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将key转换为小写字母&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;     key =&lt;span&gt; str(key).lower()
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;        r.lpush(key, value)
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;         log_helper.info(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;写缓存失败:key(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + key + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(e.args))
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;pass&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt; 
&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; pop(key):
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;    从缓存队列的后尾读取一条数据
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;    :param key: 缓存key，字符串，不区分大小写
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;    :return: 缓存数据
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将key转换为小写字母&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;     key =&lt;span&gt; str(key).lower()
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;         value =&lt;span&gt; r.rpop(key)
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;         log_helper.info(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;读取缓存队列失败:key(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + key + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(e.args))
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;         value =&lt;span&gt; None
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; 
&lt;span&gt; 89&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _str_to_json(value)
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; 
&lt;span&gt; 91&lt;/span&gt; 
&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; _str_to_json(value):
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;    将缓存中读取出来的字符串转换成对应的数据、元组、列表或字典
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; value:
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 否则直接转换&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;         value =&lt;span&gt; value.decode()
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; eval(value)
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(e.args)
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;pass&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 否则直接输出字符串&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt; 
&lt;span&gt;109&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; delete(key):
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt; &lt;span&gt;    删除缓存
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;    :param key:缓存key，字符串，不区分大小写
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;    :return:
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将key转换为小写字母&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;     key =&lt;span&gt; str(key).lower()
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;        log_helper.info(str(r.delete(key)))
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;         log_helper.info(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Exception:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(e.args))
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;         &lt;span&gt;pass&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt; 
&lt;span&gt;123&lt;/span&gt; 
&lt;span&gt;124&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; clear():
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt; &lt;span&gt;    清空所有缓存
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;        r.flushdb()
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;         &lt;span&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　我常用的是redis，所以使用cache_helper.py时，需要安装redis服务和对应的Python包。如果你使用的是memcache，你只需要重构一下cache_helper.py代码就可以了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　接下来我们改造一下逻辑层基类（ORM模块）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先我们需要导入cache_helper&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; common &lt;span&gt;import&lt;/span&gt; db_helper, cache_helper
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　在使用nosql缓存时，大家都知道我们是使用key来进行对象存取的，而这个key也是唯一的，所以key的生成就很重要的，为了避免key的重复，我们在对记录设置key时，可以用表名+主键id的方式来组合key，当然为了调用方便，可以将获取key写成一个方法来生成&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_cache_key(self, pk):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;获取缓存key值&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;.join((self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, str(pk)))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这里使用join的方法，将表名、下横线、主键值组合生成缓存key字符串&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　对于缓存的操作，主要有设置缓存、获取缓存、删除缓存这三种操作，当然为了方便我们获取记录中指定字段值，我们可以增加读取指定字段值方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先是设置缓存方法，大家看看下面代码，它非常简单，先调用生成缓存key，然后将对象存储到缓存中，并指定过期时间，当设置time为0时，它将永不过期&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt; set_model_for_cache(self, pk, value, time=43200&lt;span&gt;):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;更新存储在缓存中的数据库记录，缓存过期时间为12小时&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成缓存key&lt;/span&gt;
        key =&lt;span&gt; self.get_cache_key(pk)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 存储到nosql缓存中&lt;/span&gt;
        cache_helper.set(key, value, time)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　接着是获取缓存对象方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_model_for_cache(self, pk):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;从缓存中读取数据库记录&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成缓存key&lt;/span&gt;
        key =&lt;span&gt; self.get_cache_key(pk)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从缓存中读取数据库记录&lt;/span&gt;
        result =&lt;span&gt; cache_helper.get(key)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 缓存中不存在记录，则从数据库获取&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; result:
            result &lt;/span&gt;=&lt;span&gt; self.get_model_for_pk(pk)
            self.set_model_for_cache(pk, result)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; {}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　我们首先要做的同样是生成缓存key，然后调用get方法从缓存中读取对象，执行完后，需要判断该对象是否存在缓存中，如果不存在则表示该对象并未存储到缓存中或它可能存储过期了，所以需要重新从数据库中读取出来，并将它存储到缓存中，然后将读取出来的记录实体返回出去。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　然后我们再增加一个读取指定记录字段值的方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_value_for_cache(self, pk, column_name):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;获取指定记录的字段值&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; self.get_model_for_cache(pk).get(column_name)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　它直接调用获取缓存对象方法，然后从返回的对象中读取指定的字段值就可以了&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　删除缓存方法也很简单，生成缓存key后，直接调用delete进行删除。对于删除方法，有时候调用不知是不是nosql自身bug问题，还是在主从关系的nosql中读写分离会引起删除失败，如果出现这种情况，可以将delete改为set，将该缓存set为空就可以解决这个问题&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; del_model_for_cache(self, pk):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;删除缓存中指定数据&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成缓存key&lt;/span&gt;
        key =&lt;span&gt; self.get_cache_key(pk)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; log_helper.info(key)&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 存储到nosql缓存中&lt;/span&gt;
        cache_helper.delete(key)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　PS：在使用缓存操作时，有时我们直接对数据库进行操作，就会引起数据与缓存不匹配，出现脏数据的情况，这时在后台增加清空缓存的操作，直接调用cache_helper.clear()进行清空缓存。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　基本方法都完成了，接下来就是要对ORM的删除与修改方法进行改造了，让它们自行根据需要对缓存进行对应操作，让缓存与数据表中的记录保持一致。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在改造时，我们只需要对删除与修改操作进行处理，对新增与查询操作不需要操作，因为新增的记录，它并在缓存中并不存在，所以不需要进行操作，而查询也不会改变数据内容，只有进行删除和修改操作时，才会变动数据内容，这时就需要更改缓存，让数据保持一致。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　改造编辑记录实体方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; edit(self, fields, wheres=&lt;span&gt;''&lt;/span&gt;, returning=&lt;span&gt;''&lt;/span&gt;, is_update_cache=&lt;span&gt;True):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        批量编辑数据库记录
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        :param fields: 要更新的字段（字段名与值存储在字典中）
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        :param wheres: 更新条件
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        :param returning: 更新成功后，返回的字段名
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        :param is_update_cache: 是否同步更新缓存
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 拼接sql语句 ###&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 拼接字段与值&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         field_list = [key + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; = %(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + key + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fields.keys()]
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置sql拼接字典&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         parameter =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pk_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__pk_name&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;field_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.join(field_list)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果存在更新条件，则将条件添加到sql拼接更换字典中&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果有指定返回参数，则添加&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; returning:
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; returning
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成sql语句&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;update %(table_name)s set %(field_list)s %(wheres)s returning %(pk_name)s %(returning)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; parameter
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         sql = sql %&lt;span&gt; fields
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;         result =&lt;span&gt; self.execute(sql)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断是否删除对应的缓存&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; is_update_cache:
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 循环删除更新成功的所有记录对应的缓存&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; model &lt;span&gt;in&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                     self.del_model_for_cache(model.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 0))
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; result
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　大家可以看到，该方法增加了is_update_cache 是否同步更新缓存参数，这是因为我们在使用缓存时会存在一些特殊情况，比如说批量更新很多数据时，如果使用循环逐条清理对应缓存时，会占用较多资源，我们可以关掉缓存的同步更新，直接调用clear清空所有缓存会更加快捷；又比如说，页面访问数的更新，它会更新的非常频繁，我们不需要实时清除，可以使用其他方式触发清理，也可以将点击数用独立缓存存储使用等&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　而清理缓存，我们只需要将缓存内容直接删除就可以了，因为执行更新以后，返回的记录实体没有设置为*时，只返回主键id，直接设置的话会造成缓存数据丢失细节的问题，另外，我们执行更新以后，该记录也不一定还会被读取出来。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　删除记录也进行一样的改造&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; delete(self, wheres=&lt;span&gt;''&lt;/span&gt;, returning=&lt;span&gt;''&lt;/span&gt;, is_update_cache=&lt;span&gt;True):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        批量删除数据库记录
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        :param wheres: 删除条件
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        :param returning: 删除成功后，返回的字段名
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        :param is_update_cache: 是否同步更新缓存
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果存在条件&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果有指定返回参数，则添加&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; returning:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             returning = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; returning
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成sql语句&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete from %(table_name)s %(wheres)s returning %(pk_name)s %(returning)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: wheres, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pk_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__pk_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: returning}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         result =&lt;span&gt; self.execute(sql)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 同步删除对应的缓存&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; is_update_cache:
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; model &lt;span&gt;in&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                     self.del_model_for_cache(model.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 0))
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; result
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　对于缓存基本上就这两个要进行改造的操作了。在实现开发中，我们认真想一想，其实我们还会存在一些特殊的情况，比如说我们对数据进行加工处理后，将加工后的值存储到缓存中，而对相关记录进行修改或删除操作以后，由于这些缓存它与记录并没有关联，所以执行相关操作以后，它就变成孤岛，不会实时同步，产生脏数据。所以我们需要有一个功能，可以将它们管理起来，与该数据表的修改和删除操作关联起来，进行修改和删除操作后同步清除这些特殊缓存。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　根据这些要求，我们就需要再增加两个缓存操作方法，用来存储这些特殊的缓存名称，然后在进行修改和删除操作时，同步清除这些特殊缓存。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先我们需要在初始化方法中，添加一个绑定该数据表的全局缓存变量self.__cache_list，它由表名称+_cache_list组成。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self, db, is_output_sql, table_name, column_name_list=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, pk_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;类初始化&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库参数&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         self.&lt;span&gt;__db&lt;/span&gt; =&lt;span&gt; db
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是否输出执行的Sql语句到日志中&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         self.&lt;span&gt;__is_output_sql&lt;/span&gt; =&lt;span&gt; is_output_sql
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 表名称&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         self.&lt;span&gt;__table_name&lt;/span&gt; =&lt;span&gt; str(table_name).lower()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查询的列字段名称，*表示查询全部字段，多于1个字段时用逗号进行分隔，除了字段名外，也可以是表达式&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         self.&lt;span&gt;__column_name_list&lt;/span&gt; =&lt;span&gt; str(column_name_list).lower()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 主健名称&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         self.&lt;span&gt;__pk_name&lt;/span&gt; =&lt;span&gt; str(pk_name).lower()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 缓存列表&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         self.&lt;span&gt;__cache_list&lt;/span&gt; = self.&lt;span&gt;__table_name&lt;/span&gt; + &lt;span&gt;'_cache_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　然后我们再添加特殊缓存存储方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; add_relevance_cache_in_list(self, key):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;将缓存名称存储到列表里————主要存储与记录变更关联的&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从nosql中读取全局缓存列表&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         cache_list = cache_helper.get(self.&lt;span&gt;__cache_list&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断缓存列表是否有值，有则进行添加操作&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; cache_list:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断是否已存储列表中，不存在则执行添加操作&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; cache_list:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                cache_list.append(key)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 cache_helper.set(self.&lt;span&gt;__cache_list&lt;/span&gt;&lt;span&gt;, cache_list)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 无则直接创建全局缓存列表，并存储到nosql中&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             cache_list =&lt;span&gt; [key]
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             cache_helper.set(self.&lt;span&gt;__cache_list&lt;/span&gt;, cache_list)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　执行该方法，会将我们自定义的缓存名称存储到全局缓存变量中&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　接着我们再添加一个清除所有特殊缓存的方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; del_relevance_cache(self):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;删除关联缓存————将和数据表记录关联的，个性化缓存全部删除&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从nosql中读取全局缓存列表&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         cache_list = cache_helper.get(self.&lt;span&gt;__cache_list&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 清除已删除缓存列表&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         cache_helper.delete(self.&lt;span&gt;__cache_list&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; cache_list:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 执行删除操作&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; cache &lt;span&gt;in&lt;/span&gt;&lt;span&gt; cache_list:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 cache_helper.delete(cache)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　添加完成以后，我们再来改造一下修改与删除代码，只需要在里面添加清除所有特殊缓存方法就可以了&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('baf008d2-ee2c-4fca-9961-b8e88dfa4caf')&quot; readability=&quot;41&quot;&gt;&lt;img id=&quot;code_img_closed_baf008d2-ee2c-4fca-9961-b8e88dfa4caf&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_baf008d2-ee2c-4fca-9961-b8e88dfa4caf&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('baf008d2-ee2c-4fca-9961-b8e88dfa4caf',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_baf008d2-ee2c-4fca-9961-b8e88dfa4caf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; edit(self, fields, wheres=&lt;span&gt;''&lt;/span&gt;, returning=&lt;span&gt;''&lt;/span&gt;, is_update_cache=&lt;span&gt;True):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        批量编辑数据库记录
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        :param fields: 要更新的字段（字段名与值存储在字典中）
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        :param wheres: 更新条件
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        :param returning: 更新成功后，返回的字段名
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        :param is_update_cache: 是否同步更新缓存
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 拼接sql语句 ###&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 拼接字段与值&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         field_list = [key + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; = %(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + key + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fields.keys()]
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置sql拼接字典&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         parameter =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pk_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__pk_name&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;field_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.join(field_list)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果存在更新条件，则将条件添加到sql拼接更换字典中&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果有指定返回参数，则添加&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; returning:
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; returning
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成sql语句&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;update %(table_name)s set %(field_list)s %(wheres)s returning %(pk_name)s %(returning)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; parameter
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         sql = sql %&lt;span&gt; fields
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;         result =&lt;span&gt; self.execute(sql)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断是否删除对应的缓存&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; is_update_cache:
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 循环删除更新成功的所有记录对应的缓存&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; model &lt;span&gt;in&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                     self.del_model_for_cache(model.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 0))
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 同步删除与本表关联的缓存&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;                self.del_relevance_cache()
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; delete(self, wheres=&lt;span&gt;''&lt;/span&gt;, returning=&lt;span&gt;''&lt;/span&gt;, is_update_cache=&lt;span&gt;True):
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        批量删除数据库记录
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        :param wheres: 删除条件
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        :param returning: 删除成功后，返回的字段名
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        :param is_update_cache: 是否同步更新缓存
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果存在条件&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;             wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果有指定返回参数，则添加&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; returning:
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;             returning = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; returning
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; 
&lt;span&gt;62&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成sql语句&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt;         sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete from %(table_name)s %(wheres)s returning %(pk_name)s %(returning)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: wheres, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pk_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__pk_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: returning}
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;         result =&lt;span&gt; self.execute(sql)
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 同步删除对应的缓存&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; is_update_cache:
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; model &lt;span&gt;in&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;                     self.del_model_for_cache(model.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 0))
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 同步删除与本表关联的缓存&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt; &lt;span&gt;                self.del_relevance_cache()
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; result
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　ORM的缓存改造就全部完成了，下面是完整代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2c7b8cbd-1bf7-4c25-be9f-6149497ef312')&quot; readability=&quot;94.5&quot;&gt;&lt;img id=&quot;code_img_closed_2c7b8cbd-1bf7-4c25-be9f-6149497ef312&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2c7b8cbd-1bf7-4c25-be9f-6149497ef312&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2c7b8cbd-1bf7-4c25-be9f-6149497ef312',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2c7b8cbd-1bf7-4c25-be9f-6149497ef312&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;184&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; coding=utf-8&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; common &lt;span&gt;import&lt;/span&gt;&lt;span&gt; db_helper, cache_helper
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogicBase():
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;逻辑层基础类&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self, db, is_output_sql, table_name, column_name_list=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, pk_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;类初始化&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 数据库参数&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;         self.&lt;span&gt;__db&lt;/span&gt; =&lt;span&gt; db
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是否输出执行的Sql语句到日志中&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;         self.&lt;span&gt;__is_output_sql&lt;/span&gt; =&lt;span&gt; is_output_sql
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 表名称&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;         self.&lt;span&gt;__table_name&lt;/span&gt; =&lt;span&gt; str(table_name).lower()
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查询的列字段名称，*表示查询全部字段，多于1个字段时用逗号进行分隔，除了字段名外，也可以是表达式&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;         self.&lt;span&gt;__column_name_list&lt;/span&gt; =&lt;span&gt; str(column_name_list).lower()
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 主健名称&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;         self.&lt;span&gt;__pk_name&lt;/span&gt; =&lt;span&gt; str(pk_name).lower()
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 缓存列表&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;         self.&lt;span&gt;__cache_list&lt;/span&gt; = self.&lt;span&gt;__table_name&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_cache_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;####################################################################&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 执行Sql ###&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; select(self, sql):
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;执行sql查询语句（select）&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;         with db_helper.PgHelper(self.&lt;span&gt;__db&lt;/span&gt;, self.&lt;span&gt;__is_output_sql&lt;/span&gt;&lt;span&gt;) as db:
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 执行sql语句&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;             result =&lt;span&gt; db.execute(sql)
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;                 result =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; 
&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; execute(self, sql):
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;执行sql语句，并提交事务&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;         with db_helper.PgHelper(self.&lt;span&gt;__db&lt;/span&gt;, self.&lt;span&gt;__is_output_sql&lt;/span&gt;&lt;span&gt;) as db:
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 执行sql语句&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;             result =&lt;span&gt; db.execute(sql)
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;                db.commit()
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;                 result =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; 
&lt;span&gt; 48&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; copy(self, values, columns):
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;批量更新数据&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;         with db_helper.PgHelper(self.&lt;span&gt;__db&lt;/span&gt;, self.&lt;span&gt;__is_output_sql&lt;/span&gt;&lt;span&gt;) as db:
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 执行sql语句&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;             result = db.copy(values, self.&lt;span&gt;__table_name&lt;/span&gt;&lt;span&gt;, columns)
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; 
&lt;span&gt; 55&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_model(self, wheres):
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;通过条件获取一条记录&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果有条件，则自动添加where&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;             wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; 
&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 合成sql语句&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;         sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select %(column_name_list)s from %(table_name)s %(wheres)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;column_name_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__column_name_list&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: wheres}
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初化化数据库链接&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;         result =&lt;span&gt; self.select(sql)
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result[0]
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; 
&lt;span&gt; 70&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; get_model_for_pk(self, pk, wheres=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;通过主键值获取数据库记录实体&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; pk:
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 组装查询条件&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;         wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s = %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; % (self.&lt;span&gt;__pk_name&lt;/span&gt;&lt;span&gt;, str(pk))
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; 
&lt;span&gt; 77&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.get_model(wheres)
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; 
&lt;span&gt; 79&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; get_value(self, column_name, wheres=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;        获取指定条件的字段值————多于条记录时，只取第一条记录
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;        :param column_name: 单个字段名，如：id
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;        :param wheres: 查询条件
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;        :return: 7 （指定的字段值）
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; column_name:
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; None
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;elif&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; 
&lt;span&gt; 91&lt;/span&gt;         sql = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select %(column_name)s from %(table_name)s %(wheres)s limit 1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;column_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: column_name, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: wheres}
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         result =&lt;span&gt; self.select(sql)
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果查询成功，则直接返回记录字典&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result[0].get(column_name)
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; 
&lt;span&gt; 98&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; get_value_list(self, column_name, wheres=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt; &lt;span&gt;        获取指定条件记录的字段值列表
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;        :param column_name: 单个字段名，如：id
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;        :param wheres: 查询条件
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;        :return: [1,3,4,6,7]
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; column_name:
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;             column_name = self.&lt;span&gt;__pk_name&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;         &lt;span&gt;elif&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;             wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; 
&lt;span&gt;110&lt;/span&gt;         sql = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select array_agg(%(column_name)s) as list from %(table_name)s %(wheres)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;column_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: column_name, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: wheres}
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;         result =&lt;span&gt; self.select(sql)
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果查询失败或不存在指定条件记录，则直接返回初始值&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; result &lt;span&gt;and&lt;/span&gt;&lt;span&gt; isinstance(result, list):
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; 
&lt;span&gt;119&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; add_model(self, fields, returning=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;新增数据库记录&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 拼接sql语句 ###&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化变量&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt;         key_list =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;         value_list =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将传入的字典参数进行处理，把字段名生成sql插入字段名数组和字典替换数组&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; PS:字符串使用字典替换参数时，格式是%(name)s，这里会生成对应的字串&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 比如：&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;   传入的字典为： {'id': 1, 'name': '名称'}&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;   那么生成的key_list为：'id','name'&lt;/span&gt;
&lt;span&gt;130&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;   而value_list为：'%(id)s,%(name)s'&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;   最终而value_list为字符串对应名称位置会被替换成相应的值&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fields.keys():
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;            key_list.append(key)
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;             value_list.append(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + key + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置sql拼接字典，并将数组（lit）使用join方式进行拼接，生成用逗号分隔的字符串&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt;         parameter =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pk_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__pk_name&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;key_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.join(key_list),
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;value_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.join(value_list)
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果有指定返回参数，则添加&lt;/span&gt;
&lt;span&gt;143&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; returning:
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; returning
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt; 
&lt;span&gt;148&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成可以使用字典替换的字符串&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt;         sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;insert into %(table_name)s (%(key_list)s) values (%(value_list)s) returning %(pk_name)s %(returning)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; parameter
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将生成好的字符串替字典参数值，生成最终可执行的sql语句&lt;/span&gt;
&lt;span&gt;151&lt;/span&gt;         sql = sql %&lt;span&gt; fields
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; 
&lt;span&gt;153&lt;/span&gt;         result =&lt;span&gt; self.execute(sql)
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result[0]
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; 
&lt;span&gt;158&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; edit(self, fields, wheres=&lt;span&gt;''&lt;/span&gt;, returning=&lt;span&gt;''&lt;/span&gt;, is_update_cache=&lt;span&gt;True):
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;160&lt;/span&gt; &lt;span&gt;        批量编辑数据库记录
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt; &lt;span&gt;        :param fields: 要更新的字段（字段名与值存储在字典中）
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt; &lt;span&gt;        :param wheres: 更新条件
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt; &lt;span&gt;        :param returning: 更新成功后，返回的字段名
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; &lt;span&gt;        :param is_update_cache: 是否同步更新缓存
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;167&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 拼接sql语句 ###&lt;/span&gt;
&lt;span&gt;168&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 拼接字段与值&lt;/span&gt;
&lt;span&gt;169&lt;/span&gt;         field_list = [key + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; = %(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + key + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fields.keys()]
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置sql拼接字典&lt;/span&gt;
&lt;span&gt;171&lt;/span&gt;         parameter =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pk_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__pk_name&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;field_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.join(field_list)
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果存在更新条件，则将条件添加到sql拼接更换字典中&lt;/span&gt;
&lt;span&gt;177&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;181&lt;/span&gt; 
&lt;span&gt;182&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果有指定返回参数，则添加&lt;/span&gt;
&lt;span&gt;183&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; returning:
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; returning
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;             parameter[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;187&lt;/span&gt; 
&lt;span&gt;188&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成sql语句&lt;/span&gt;
&lt;span&gt;189&lt;/span&gt;         sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;update %(table_name)s set %(field_list)s %(wheres)s returning %(pk_name)s %(returning)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; parameter
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt;         sql = sql %&lt;span&gt; fields
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt; 
&lt;span&gt;192&lt;/span&gt;         result =&lt;span&gt; self.execute(sql)
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断是否删除对应的缓存&lt;/span&gt;
&lt;span&gt;195&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; is_update_cache:
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 循环删除更新成功的所有记录对应的缓存&lt;/span&gt;
&lt;span&gt;197&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; model &lt;span&gt;in&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt;                     self.del_model_for_cache(model.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 0))
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 同步删除与本表关联的缓存&lt;/span&gt;
&lt;span&gt;200&lt;/span&gt; &lt;span&gt;                self.del_relevance_cache()
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt; 
&lt;span&gt;203&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; edit_model(self, pk, fields, wheres=&lt;span&gt;''&lt;/span&gt;, returning=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;编辑单条数据库记录&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;205&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; pk:
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt;         &lt;span&gt;elif&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt;             wheres = self.&lt;span&gt;__pk_name&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; = &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(pk) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; and &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt;             wheres = self.&lt;span&gt;__pk_name&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; = &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(pk)
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt; 
&lt;span&gt;212&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.edit(fields, wheres, returning)
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt; 
&lt;span&gt;214&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; delete(self, wheres=&lt;span&gt;''&lt;/span&gt;, returning=&lt;span&gt;''&lt;/span&gt;, is_update_cache=&lt;span&gt;True):
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;216&lt;/span&gt; &lt;span&gt;        批量删除数据库记录
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt; &lt;span&gt;        :param wheres: 删除条件
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt; &lt;span&gt;        :param returning: 删除成功后，返回的字段名
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt; &lt;span&gt;        :param is_update_cache: 是否同步更新缓存
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt;221&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;222&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果存在条件&lt;/span&gt;
&lt;span&gt;223&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt;             wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt; 
&lt;span&gt;226&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果有指定返回参数，则添加&lt;/span&gt;
&lt;span&gt;227&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; returning:
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt;             returning = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; returning
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt; 
&lt;span&gt;230&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成sql语句&lt;/span&gt;
&lt;span&gt;231&lt;/span&gt;         sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete from %(table_name)s %(wheres)s returning %(pk_name)s %(returning)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: wheres, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pk_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__pk_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;returning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: returning}
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt;         result =&lt;span&gt; self.execute(sql)
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;235&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 同步删除对应的缓存&lt;/span&gt;
&lt;span&gt;236&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; is_update_cache:
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; model &lt;span&gt;in&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt;                     self.del_model_for_cache(model.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 0))
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 同步删除与本表关联的缓存&lt;/span&gt;
&lt;span&gt;240&lt;/span&gt; &lt;span&gt;                self.del_relevance_cache()
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt; 
&lt;span&gt;243&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; delete_model(self, pk, wheres=&lt;span&gt;''&lt;/span&gt;, returning=&lt;span&gt;''&lt;/span&gt;, is_update_cache=&lt;span&gt;True):
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;删除单条数据库记录&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;245&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; pk:
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt;         &lt;span&gt;elif&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt;             wheres = self.&lt;span&gt;__pk_name&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; = &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(pk) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; and &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt;             wheres = self.&lt;span&gt;__pk_name&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; = &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(pk)
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt; 
&lt;span&gt;252&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.delete(wheres, returning)
&lt;/span&gt;&lt;span&gt;253&lt;/span&gt; 
&lt;span&gt;254&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; get_list(self, column_name_list=&lt;span&gt;''&lt;/span&gt;, wheres=&lt;span&gt;''&lt;/span&gt;, page_number=None, page_size=None, orderby=None, table_name=&lt;span&gt;None):
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;256&lt;/span&gt; &lt;span&gt;        获取指定条件的数据库记录集
&lt;/span&gt;&lt;span&gt;257&lt;/span&gt; &lt;span&gt;        :param column_name_list:      查询字段
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt; &lt;span&gt;        :param wheres:      查询条件
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt; &lt;span&gt;        :param page_number:   分页索引值
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt; &lt;span&gt;        :param page_size:    分页大小， 存在值时才会执行分页
&lt;/span&gt;&lt;span&gt;261&lt;/span&gt; &lt;span&gt;        :param orderby:     排序规则
&lt;/span&gt;&lt;span&gt;262&lt;/span&gt; &lt;span&gt;        :param table_name:     查询数据表，多表查询时需要设置
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt; &lt;span&gt;        :return: 返回记录集总数量与分页记录集
&lt;/span&gt;&lt;span&gt;264&lt;/span&gt; &lt;span&gt;            {'records': 0, 'total': 0, 'page': 0, 'rows': []}
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;266&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化输出参数：总记录数量与列表集&lt;/span&gt;
&lt;span&gt;267&lt;/span&gt;         data =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;268&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 0,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 总记录数&lt;/span&gt;
&lt;span&gt;269&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;total&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 0,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 总页数&lt;/span&gt;
&lt;span&gt;270&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 1,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 当前页面索引&lt;/span&gt;
&lt;span&gt;271&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [],  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查询结果（记录列表）&lt;/span&gt;
&lt;span&gt;272&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;273&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化查询数据表名称&lt;/span&gt;
&lt;span&gt;274&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; table_name:
&lt;/span&gt;&lt;span&gt;275&lt;/span&gt;             table_name = self.&lt;span&gt;__table_name&lt;/span&gt;
&lt;span&gt;276&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化查询字段名&lt;/span&gt;
&lt;span&gt;277&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; column_name_list:
&lt;/span&gt;&lt;span&gt;278&lt;/span&gt;             column_name_list = self.&lt;span&gt;__column_name_list&lt;/span&gt;
&lt;span&gt;279&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化查询条件&lt;/span&gt;
&lt;span&gt;280&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;281&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果是字符串，表示该查询条件已组装好了，直接可以使用&lt;/span&gt;
&lt;span&gt;282&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; isinstance(wheres, str):
&lt;/span&gt;&lt;span&gt;283&lt;/span&gt;                 wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;284&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果是list，则表示查询条件有多个，可以使用join将它们用and方式组合起来使用&lt;/span&gt;
&lt;span&gt;285&lt;/span&gt;             &lt;span&gt;elif&lt;/span&gt;&lt;span&gt; isinstance(wheres, list):
&lt;/span&gt;&lt;span&gt;286&lt;/span&gt;                 wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; and &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.join(wheres)
&lt;/span&gt;&lt;span&gt;287&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化排序&lt;/span&gt;
&lt;span&gt;288&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; orderby:
&lt;/span&gt;&lt;span&gt;289&lt;/span&gt;             orderby = self.&lt;span&gt;__pk_name&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; desc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;290&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化分页查询的记录区间&lt;/span&gt;
&lt;span&gt;291&lt;/span&gt;         paging = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;292&lt;/span&gt; 
&lt;span&gt;293&lt;/span&gt;         with db_helper.PgHelper(self.&lt;span&gt;__db&lt;/span&gt;, self.&lt;span&gt;__is_output_sql&lt;/span&gt;&lt;span&gt;) as db:
&lt;/span&gt;&lt;span&gt;294&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;############################################################&lt;/span&gt;
&lt;span&gt;295&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断是否需要进行分页&lt;/span&gt;
&lt;span&gt;296&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; page_size &lt;span&gt;is&lt;/span&gt;&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt;297&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 执行sql，获取指定条件的记录总数量&lt;/span&gt;
&lt;span&gt;298&lt;/span&gt;                 sql = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select count(1) as records from %(table_name)s %(wheres)s &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;299&lt;/span&gt;                       {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: table_name, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: wheres}
&lt;/span&gt;&lt;span&gt;300&lt;/span&gt;                 result =&lt;span&gt; db.execute(sql)
&lt;/span&gt;&lt;span&gt;301&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果查询失败或不存在指定条件记录，则直接返回初始值&lt;/span&gt;
&lt;span&gt;302&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; result &lt;span&gt;or&lt;/span&gt; result[0][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] ==&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;303&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data
&lt;/span&gt;&lt;span&gt;304&lt;/span&gt; 
&lt;span&gt;305&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置记录总数量&lt;/span&gt;
&lt;span&gt;306&lt;/span&gt;                 data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;307&lt;/span&gt; 
&lt;span&gt;308&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;########################################################&lt;/span&gt;
&lt;span&gt;309&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 设置分页索引与页面大小 ###&lt;/span&gt;
&lt;span&gt;310&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; page_size &amp;lt;=&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;311&lt;/span&gt;                     page_size = 10
&lt;span&gt;312&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算总分页数量：通过总记录数除于每页显示数量来计算总分页数量&lt;/span&gt;
&lt;span&gt;313&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] % page_size ==&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;314&lt;/span&gt;                     page_total = data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] //&lt;span&gt; page_size
&lt;/span&gt;&lt;span&gt;315&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;316&lt;/span&gt;                     page_total = data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] // page_size + 1
&lt;span&gt;317&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断页码是否超出限制，超出限制查询时会出现异常，所以将页面索引设置为最后一页&lt;/span&gt;
&lt;span&gt;318&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; page_number &amp;lt; 1 &lt;span&gt;or&lt;/span&gt; page_number &amp;gt;&lt;span&gt; page_total:
&lt;/span&gt;&lt;span&gt;319&lt;/span&gt;                     page_number =&lt;span&gt; page_total
&lt;/span&gt;&lt;span&gt;320&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 记录总页面数量&lt;/span&gt;
&lt;span&gt;321&lt;/span&gt;                 data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;total&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; page_total
&lt;/span&gt;&lt;span&gt;322&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 记录当前页面值&lt;/span&gt;
&lt;span&gt;323&lt;/span&gt;                 data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; page_number
&lt;/span&gt;&lt;span&gt;324&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算当前页面要显示的记录起始位置（limit指定的位置）&lt;/span&gt;
&lt;span&gt;325&lt;/span&gt;                 record_number = (page_number - 1) *&lt;span&gt; page_size
&lt;/span&gt;&lt;span&gt;326&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置查询分页条件&lt;/span&gt;
&lt;span&gt;327&lt;/span&gt;                 paging = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; limit &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(page_size) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; offset &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(record_number)
&lt;/span&gt;&lt;span&gt;328&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;############################################################&lt;/span&gt;
&lt;span&gt;329&lt;/span&gt; 
&lt;span&gt;330&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 按条件查询数据库记录&lt;/span&gt;
&lt;span&gt;331&lt;/span&gt;             sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select %(column_name_list)s from %(table_name)s %(wheres)s order by %(orderby)s %(paging)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;332&lt;/span&gt;                   {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;column_name_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: column_name_list,
&lt;/span&gt;&lt;span&gt;333&lt;/span&gt;                    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: table_name,
&lt;/span&gt;&lt;span&gt;334&lt;/span&gt;                    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: wheres,
&lt;/span&gt;&lt;span&gt;335&lt;/span&gt;                    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;orderby&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: orderby,
&lt;/span&gt;&lt;span&gt;336&lt;/span&gt;                    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;paging&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: paging}
&lt;/span&gt;&lt;span&gt;337&lt;/span&gt;             result =&lt;span&gt; db.execute(sql)
&lt;/span&gt;&lt;span&gt;338&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;339&lt;/span&gt;                 data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; result
&lt;/span&gt;&lt;span&gt;340&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 不需要分页查询时，直接在这里设置总记录数&lt;/span&gt;
&lt;span&gt;341&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; page_size &lt;span&gt;is&lt;/span&gt;&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt;342&lt;/span&gt;                     data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; len(result)
&lt;/span&gt;&lt;span&gt;343&lt;/span&gt; 
&lt;span&gt;344&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data
&lt;/span&gt;&lt;span&gt;345&lt;/span&gt; 
&lt;span&gt;346&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; get_count(self, wheres=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;347&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;获取指定条件记录数量&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;348&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; wheres:
&lt;/span&gt;&lt;span&gt;349&lt;/span&gt;             wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; wheres
&lt;/span&gt;&lt;span&gt;350&lt;/span&gt;         sql = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select count(1) as total from %(table_name)s %(wheres)s &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;351&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: wheres}
&lt;/span&gt;&lt;span&gt;352&lt;/span&gt;         result =&lt;span&gt; self.select(sql)
&lt;/span&gt;&lt;span&gt;353&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果查询存在记录，则返回true&lt;/span&gt;
&lt;span&gt;354&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;355&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;total&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;356&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;357&lt;/span&gt; 
&lt;span&gt;358&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_sum(self, fields, wheres):
&lt;/span&gt;&lt;span&gt;359&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;获取指定条件记录数量&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;360&lt;/span&gt;         sql = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select sum(%(fields)s) as total from %(table_name)s where %(wheres)s &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;361&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: wheres, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;fields&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: fields}
&lt;/span&gt;&lt;span&gt;362&lt;/span&gt;         result =&lt;span&gt; self.select(sql)
&lt;/span&gt;&lt;span&gt;363&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果查询存在记录，则返回true&lt;/span&gt;
&lt;span&gt;364&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; result &lt;span&gt;and&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;total&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;365&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;total&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;366&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;367&lt;/span&gt; 
&lt;span&gt;368&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_min(self, fields, wheres):
&lt;/span&gt;&lt;span&gt;369&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;获取该列记录最小值&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;370&lt;/span&gt;         sql = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select min(%(fields)s) as min from %(table_name)s where %(wheres)s &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;371&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: wheres, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;fields&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: fields}
&lt;/span&gt;&lt;span&gt;372&lt;/span&gt;         result =&lt;span&gt; self.select(sql)
&lt;/span&gt;&lt;span&gt;373&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果查询存在记录，则返回true&lt;/span&gt;
&lt;span&gt;374&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; result &lt;span&gt;and&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;min&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;375&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;min&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;376&lt;/span&gt; 
&lt;span&gt;377&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_max(self, fields, wheres):
&lt;/span&gt;&lt;span&gt;378&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;获取该列记录最大值&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;379&lt;/span&gt;         sql = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select max(%(fields)s) as max from %(table_name)s where %(wheres)s &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;380&lt;/span&gt;               {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheres&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: wheres, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;fields&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: fields}
&lt;/span&gt;&lt;span&gt;381&lt;/span&gt;         result =&lt;span&gt; self.select(sql)
&lt;/span&gt;&lt;span&gt;382&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果查询存在记录，则返回true&lt;/span&gt;
&lt;span&gt;383&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; result &lt;span&gt;and&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;max&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;384&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; result[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;max&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;385&lt;/span&gt; 
&lt;span&gt;386&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;####################################################################&lt;/span&gt;
&lt;span&gt;387&lt;/span&gt; 
&lt;span&gt;388&lt;/span&gt; 
&lt;span&gt;389&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;####################################################################&lt;/span&gt;
&lt;span&gt;390&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 缓存操作方法 ###&lt;/span&gt;
&lt;span&gt;391&lt;/span&gt; 
&lt;span&gt;392&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_cache_key(self, pk):
&lt;/span&gt;&lt;span&gt;393&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;获取缓存key值&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;394&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;.join((self.&lt;span&gt;__table_name&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, str(pk)))
&lt;/span&gt;&lt;span&gt;395&lt;/span&gt; 
&lt;span&gt;396&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; set_model_for_cache(self, pk, value, time=43200&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;397&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;更新存储在缓存中的数据库记录，缓存过期时间为12小时&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;398&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成缓存key&lt;/span&gt;
&lt;span&gt;399&lt;/span&gt;         key =&lt;span&gt; self.get_cache_key(pk)
&lt;/span&gt;&lt;span&gt;400&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 存储到nosql缓存中&lt;/span&gt;
&lt;span&gt;401&lt;/span&gt; &lt;span&gt;        cache_helper.set(key, value, time)
&lt;/span&gt;&lt;span&gt;402&lt;/span&gt; 
&lt;span&gt;403&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_model_for_cache(self, pk):
&lt;/span&gt;&lt;span&gt;404&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;从缓存中读取数据库记录&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;405&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成缓存key&lt;/span&gt;
&lt;span&gt;406&lt;/span&gt;         key =&lt;span&gt; self.get_cache_key(pk)
&lt;/span&gt;&lt;span&gt;407&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从缓存中读取数据库记录&lt;/span&gt;
&lt;span&gt;408&lt;/span&gt;         result =&lt;span&gt; cache_helper.get(key)
&lt;/span&gt;&lt;span&gt;409&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 缓存中不存在记录，则从数据库获取&lt;/span&gt;
&lt;span&gt;410&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;411&lt;/span&gt;             result =&lt;span&gt; self.get_model_for_pk(pk)
&lt;/span&gt;&lt;span&gt;412&lt;/span&gt; &lt;span&gt;            self.set_model_for_cache(pk, result)
&lt;/span&gt;&lt;span&gt;413&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;414&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
&lt;/span&gt;&lt;span&gt;415&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;416&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;417&lt;/span&gt; 
&lt;span&gt;418&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_value_for_cache(self, pk, column_name):
&lt;/span&gt;&lt;span&gt;419&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;获取指定记录的字段值&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;420&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.get_model_for_cache(pk).get(column_name)
&lt;/span&gt;&lt;span&gt;421&lt;/span&gt; 
&lt;span&gt;422&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; del_model_for_cache(self, pk):
&lt;/span&gt;&lt;span&gt;423&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;删除缓存中指定数据&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;424&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成缓存key&lt;/span&gt;
&lt;span&gt;425&lt;/span&gt;         key =&lt;span&gt; self.get_cache_key(pk)
&lt;/span&gt;&lt;span&gt;426&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; log_helper.info(key)&lt;/span&gt;
&lt;span&gt;427&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 存储到nosql缓存中&lt;/span&gt;
&lt;span&gt;428&lt;/span&gt; &lt;span&gt;        cache_helper.delete(key)
&lt;/span&gt;&lt;span&gt;429&lt;/span&gt; 
&lt;span&gt;430&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; add_relevance_cache_in_list(self, key):
&lt;/span&gt;&lt;span&gt;431&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;将缓存名称存储到列表里————主要存储与记录变更关联的&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;432&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从nosql中读取全局缓存列表&lt;/span&gt;
&lt;span&gt;433&lt;/span&gt;         cache_list = cache_helper.get(self.&lt;span&gt;__cache_list&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;434&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断缓存列表是否有值，有则进行添加操作&lt;/span&gt;
&lt;span&gt;435&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; cache_list:
&lt;/span&gt;&lt;span&gt;436&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断是否已存储列表中，不存在则执行添加操作&lt;/span&gt;
&lt;span&gt;437&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; cache_list:
&lt;/span&gt;&lt;span&gt;438&lt;/span&gt; &lt;span&gt;                cache_list.append(key)
&lt;/span&gt;&lt;span&gt;439&lt;/span&gt;                 cache_helper.set(self.&lt;span&gt;__cache_list&lt;/span&gt;&lt;span&gt;, cache_list)
&lt;/span&gt;&lt;span&gt;440&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 无则直接创建全局缓存列表，并存储到nosql中&lt;/span&gt;
&lt;span&gt;441&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;442&lt;/span&gt;             cache_list =&lt;span&gt; [key]
&lt;/span&gt;&lt;span&gt;443&lt;/span&gt;             cache_helper.set(self.&lt;span&gt;__cache_list&lt;/span&gt;&lt;span&gt;, cache_list)
&lt;/span&gt;&lt;span&gt;444&lt;/span&gt; 
&lt;span&gt;445&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; del_relevance_cache(self):
&lt;/span&gt;&lt;span&gt;446&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;删除关联缓存————将和数据表记录关联的，个性化缓存全部删除&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;447&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从nosql中读取全局缓存列表&lt;/span&gt;
&lt;span&gt;448&lt;/span&gt;         cache_list = cache_helper.get(self.&lt;span&gt;__cache_list&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;449&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 清除已删除缓存列表&lt;/span&gt;
&lt;span&gt;450&lt;/span&gt;         cache_helper.delete(self.&lt;span&gt;__cache_list&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;451&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; cache_list:
&lt;/span&gt;&lt;span&gt;452&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 执行删除操作&lt;/span&gt;
&lt;span&gt;453&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; cache &lt;span&gt;in&lt;/span&gt;&lt;span&gt; cache_list:
&lt;/span&gt;&lt;span&gt;454&lt;/span&gt; &lt;span&gt;                cache_helper.delete(cache)
&lt;/span&gt;&lt;span&gt;455&lt;/span&gt; 
&lt;span&gt;456&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;####################################################################&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;版权声明：本文原创发表于 &lt;a href=&quot;http://www.cnblogs.com/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;博客园&lt;/span&gt;&lt;/a&gt;，作者为 &lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/EmptyFS/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;AllEmpty&lt;/span&gt;&lt;/a&gt; &lt;/strong&gt;本文欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则视为侵权。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;python开发QQ群：669058475    作者博客：http://www.cnblogs.com/EmptyFS/&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 16 Aug 2018 15:52:00 +0000</pubDate>
<dc:creator>AllEmpty</dc:creator>
<og:description>几个复杂的ORM方式都已介绍完了，剩下一些常用的删除、获取记录数量、统计合计数、获取最大值、获取最小值等方法我就不一一详细介绍了，直接给出代码大家自行查看。 1 #!/usr/bin/env pyth</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/EmptyFS/p/9484680.html</dc:identifier>
</item>
<item>
<title>D05——C语言基础学PYTHON - m1racle</title>
<link>http://www.cnblogs.com/zhangkanghui/p/9480500.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangkanghui/p/9480500.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;C语言基础学习PYTHON——基础学习D05&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;20180815内容纲要：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　1 模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　2 包&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　3 import的本质&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　4 内置模块详解&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（1）time&amp;amp;datetime&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（2）datetime&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（3）random&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（4）os&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（5）sys&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（6）json&amp;amp;pickle&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（7）shelve&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（8）xml&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（9）shutil&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（10）PyYaml&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（11）configpaser&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（12）hashlib&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（13）re&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　5 练习：开发一个简单的python计算器（挑战性很强）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1 模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;模块：&lt;/strong&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt;定义：本质就是.py结尾的PYTHON文件，用来从逻辑上组织python代码（变量、函数、类、逻辑），实现一个功能。&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;导入方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_b01092d9-0187-490d-95df-6ad835d86001&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b01092d9-0187-490d-95df-6ad835d86001&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b01092d9-0187-490d-95df-6ad835d86001&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; module_name            调用module_name.xxx
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; module_name &lt;span&gt;import&lt;/span&gt; *&lt;span&gt;    直接调用即可（导入优化）
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; module_name &lt;span&gt;import&lt;/span&gt;&lt;span&gt; func_module_name as func    
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; form . improt module_name     从当前目录下导入module_name            
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;导入方法&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;模块分类&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;自定义模块&lt;/li&gt;
&lt;li&gt;内置标准模块（又称标准库）&lt;/li&gt;
&lt;li&gt;开源模块&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;自定义模块和开源模块的使用参考      &lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/4963027.html%20&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/4963027.html &lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2 包&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;包：用来从逻辑上组织模块，本质就是一个目录，（必须带有一个__init__.py文件），&lt;br/&gt;那么在导入包之后改如何调用包下面的.py文件呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1435523/201808/1435523-20180815094749981-532192930.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_ebe4968f-b9ca-4d04-b4cc-b42d6bfcca56&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ebe4968f-b9ca-4d04-b4cc-b42d6bfcca56&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ebe4968f-b9ca-4d04-b4cc-b42d6bfcca56&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我最美&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; . &lt;span&gt;import&lt;/span&gt; foo
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;__init__.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_ed698687-1e10-4faf-b9f3-aa6c47ad410a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ed698687-1e10-4faf-b9f3-aa6c47ad410a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ed698687-1e10-4faf-b9f3-aa6c47ad410a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; foo():
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我喜欢你&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;foo.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_f297b0ca-2ee9-4bbc-b38c-b15b477cc283&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f297b0ca-2ee9-4bbc-b38c-b15b477cc283&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f297b0ca-2ee9-4bbc-b38c-b15b477cc283&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; package
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; package.foo.foo()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;调用（必须与包在同级目录下）&lt;/span&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3 import的本质&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;import的本质（路径搜索和搜索路径）:&lt;br/&gt;　　&amp;gt;&amp;gt;&amp;gt;导入模块的本质就是把python文件解释一遍&lt;br/&gt;　　&amp;gt;&amp;gt;&amp;gt;导入包的本质就是执行包下的__inint__.py文件&lt;br/&gt;在导入的过程中，要确保存储路径在同级目录下。如果不在那怎么解决呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_9ccdd18b-9dd1-4c11-8d52-dc5c4b10a004&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9ccdd18b-9dd1-4c11-8d52-dc5c4b10a004&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9ccdd18b-9dd1-4c11-8d52-dc5c4b10a004&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; package&lt;span&gt;#&lt;/span&gt;&lt;span&gt;直接运行&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(sys.path)         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取当前文件的存储位置&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(os.path.abspath(&lt;span&gt;__file__&lt;/span&gt;))       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取当前文件的存储路径&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(os.path.dirname(os.path.abspath(&lt;span&gt;__file__&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;添加路径：&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; sys.path.append()       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;追加到sys.path的最后，如果想放到前面怎么办&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;sys.path.insert()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;os、sys模块下面有详解&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;访问目录&lt;/span&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4 内置模块详解&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;（1）time&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先，在python中有这么几种表示时间的方法：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（1）时间戳&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（2）元组（struct_time）共有九个元素：年，月，日，小时，分钟，秒，一周的第几天，一年的第几天，时区&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（3）格式化的时间字符串&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_e4ea6d5e-c5d3-42af-aba9-e4b6f91f0ce2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e4ea6d5e-c5d3-42af-aba9-e4b6f91f0ce2&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e4ea6d5e-c5d3-42af-aba9-e4b6f91f0ce2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 1534000340.4254425        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这是从1970年开始计算至今的秒数。&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这是命令行操作&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;时间戳time.time（）&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_6f7cc9cd-10d9-4598-8926-87c81df52080&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6f7cc9cd-10d9-4598-8926-87c81df52080&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6f7cc9cd-10d9-4598-8926-87c81df52080&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; time.localtime()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; time.struct_time(tm_year=2018, tm_mon=8, tm_mday=11, tm_hour=23, tm_min=17, tm_sec=19, tm_wday=5, tm_yday=223, tm_isdst=0)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;元组 localtime（）&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_0b412a0c-8041-46ab-93c6-71c565b7cc4f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0b412a0c-8041-46ab-93c6-71c565b7cc4f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0b412a0c-8041-46ab-93c6-71c565b7cc4f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; x =&lt;span&gt;time.localtime()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; x
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; time.struct_time(tm_year=2018, tm_mon=8, tm_mday=12, tm_hour=0, tm_min=0, tm_sec=43, tm_wday=6, tm_yday=224, tm_isdst=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; time.strftime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%Y-%m-%d %H:%m:%S&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,x)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2018-08-12 00:08:43&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;格式化的时间字符串time.strftime（）&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;科普：&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;UTC（Coordinated Universal Time，世界协调时）即格林威治天文时间，世界标准时间。在中国为UTC+8，&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt;DST（Daylight Saving Time）即夏令时&lt;/p&gt;
&lt;p&gt;在补充一点格式：&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;comomly used format code：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_8bba8118-f964-4a2b-9cf5-16b8f75b2cc7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8bba8118-f964-4a2b-9cf5-16b8f75b2cc7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8bba8118-f964-4a2b-9cf5-16b8f75b2cc7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; %&lt;span&gt;Y Year with century as a decimal number.
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; %m Month as a decimal number [01,12&lt;span&gt;].
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; %d Day of the month as a decimal number [01,31&lt;span&gt;].
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; %H Hour (24-hour clock) as a decimal number [00,23&lt;span&gt;].
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; %M Minute as a decimal number [00,59&lt;span&gt;].
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; %S Second as a decimal number [00,61&lt;span&gt;].
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; %z Time zone offset &lt;span&gt;from&lt;/span&gt;&lt;span&gt; UTC.
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; %a Locale&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s abbreviated weekday name.&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; %A Locale&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s full weekday name.&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; %b Locale&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s abbreviated month name.&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; %B Locale&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s full month name.&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; %c Locale&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s appropriate date and time representation.&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; %I Hour (12-hour clock) as a decimal number [01,12&lt;span&gt;].
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; %p Locale&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s equivalent of either AM or PM.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;commmonly used format code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;a  time.localtime()　&lt;/strong&gt;　将一个时间戳转换为当前时区的struct_time。secs参数未提供，则以当前时间为准。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b  time.gmtime()　&lt;/strong&gt;　   将一个时间戳转换为UTC时区（0时区）的struct_time。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40.5&quot;&gt;&lt;img id=&quot;code_img_closed_0c05142c-8ea2-4ede-8a5d-f6b58ec2abe0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0c05142c-8ea2-4ede-8a5d-f6b58ec2abe0&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0c05142c-8ea2-4ede-8a5d-f6b58ec2abe0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; time.localtime()
time.struct_time(tm_year&lt;/span&gt;=2018, tm_mon=8, tm_mday=15, tm_hour=10, tm_min=3, tm_sec=22, tm_wday=2, tm_yday=227, tm_isdst=&lt;span&gt;0)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; time.gmtime()
time.struct_time(tm_year&lt;/span&gt;=2018, tm_mon=8, tm_mday=15, tm_hour=2, tm_min=3, tm_sec=30, tm_wday=2, tm_yday=227, tm_isdst=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;这也验证了中国时区是UTC+8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;二者有什么区别呢？&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;c  time.mktime（）　 &lt;/strong&gt;将一个struct_time转化为时间戳　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_100e1e11-61f3-4cda-867b-9edaa6af5a5f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_100e1e11-61f3-4cda-867b-9edaa6af5a5f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_100e1e11-61f3-4cda-867b-9edaa6af5a5f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; x =&lt;span&gt;time.localtime()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; x
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; time.struct_time(tm_year=2018, tm_mon=8, tm_mday=15, tm_hour=10, tm_min=7, tm_sec=30, tm_wday=2, tm_yday=227, tm_isdst=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; time.mktime(x)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 1534298850.0
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;time.mktime（）&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;d time.strftime(format[,t])　　　　&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_d5d5eaff-9f95-46dc-aa96-317a44b94713&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d5d5eaff-9f95-46dc-aa96-317a44b94713&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d5d5eaff-9f95-46dc-aa96-317a44b94713&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; x =&lt;span&gt;time.localtime()
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; x
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; time.struct_time(tm_year=2018, tm_mon=8, tm_mday=15, tm_hour=10, tm_min=13, tm_sec=47, tm_wday=2, tm_yday=227, tm_isdst=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; time.strftime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%Y-%m-%d %H:%m:%S&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,x)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2018-08-15 10:08:47&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;time.strftime()&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;e  time.strptime([格式化时间, format]) 　&lt;/strong&gt;　把一个格式化时间字符串转化为struct_time。实际上它和strftime()是逆操作。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_f199430c-e9d6-4c15-a362-bef5fbd82662&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f199430c-e9d6-4c15-a362-bef5fbd82662&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f199430c-e9d6-4c15-a362-bef5fbd82662&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;time.strptime(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2011-05-05 16:37:06&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%Y-%m-%d %X&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; time.struct_time(tm_year=2011, tm_mon=5, tm_mday=5, tm_hour=16, tm_min=37, tm_sec=6, tm_wday=3, tm_yday=125, tm_isdst=-1)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;time.strptime([格式化时间,format])&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;f  asctime([t])&lt;/strong&gt; 　　 　　　　把一个表示时间的元组或者struct_time表示为这种形式：'Sun Jun 20 23:21:05 1993'。如果没有参数，将会将time.localtime()作为参数传入。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;g  ctime([seconds])&lt;/strong&gt; 　   　 把一个时间戳（按秒计算的浮点数）转化为time.asctime()的形式。如果参数未给或者为None的时候，将会默认time.time()为参数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_95f4b639-b263-4eac-a17f-9b1189837f17&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_95f4b639-b263-4eac-a17f-9b1189837f17&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_95f4b639-b263-4eac-a17f-9b1189837f17&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; time.asctime()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Sun Aug 12 23:27:28 2018&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; time.ctime()
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Sun Aug 12 23:52:40 2018&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;不要忘记导入time模块哟&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;一起来看看&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;接下来上图~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1435523/201808/1435523-20180815102701872-1119951815.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1435523/201808/1435523-20180815102721131-111141969.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;（2）datetime&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;a  datetime.datetime.now（）　　　&lt;/strong&gt;　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_5535c7e9-df3a-4897-aaa3-ef632a885439&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5535c7e9-df3a-4897-aaa3-ef632a885439&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5535c7e9-df3a-4897-aaa3-ef632a885439&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; datetime.datetime.now()
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; datetime.datetime(2018, 8, 12, 23, 54, 0, 324086)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;datetime.datetime.now（）&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;b  datetime.date.fromtimestamp(time.time())　&lt;/strong&gt;　时间戳直接转成日期格式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_1697b887-64c5-4910-be5e-06b396ec858b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1697b887-64c5-4910-be5e-06b396ec858b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1697b887-64c5-4910-be5e-06b396ec858b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; datetime.date.fromtimestamp(time.time())
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; datetime.date(2018, 8, 12)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;时间戳&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_bc4335a1-b114-4f95-8eb0-75feb8b51d81&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bc4335a1-b114-4f95-8eb0-75feb8b51d81&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bc4335a1-b114-4f95-8eb0-75feb8b51d81&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; datetime.datetime.now() + datetime.timedelta(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; datetime.datetime(2018, 8, 15, 23, 55, 31, 676392)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;当前时间+3天&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_f84d07ce-32fa-4b24-9f62-6160adc7f782&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f84d07ce-32fa-4b24-9f62-6160adc7f782&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f84d07ce-32fa-4b24-9f62-6160adc7f782&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; datetime.datetime.now() + datetime.timedelta(-3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; datetime.datetime(2018, 8, 9, 23, 55, 57, 20937)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;当前时间-3天&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_8299126f-00f0-4303-bf48-c174bca1b979&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8299126f-00f0-4303-bf48-c174bca1b979&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8299126f-00f0-4303-bf48-c174bca1b979&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; datetime.datetime.now() + datetime.timedelta(hours=3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; datetime.datetime(2018, 8, 13, 2, 56, 25, 388509)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;当前时间+3小时&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_a415a65e-9081-46c2-82e7-f20d007a241b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a415a65e-9081-46c2-82e7-f20d007a241b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a415a65e-9081-46c2-82e7-f20d007a241b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; datetime.datetime.now() + datetime.timedelta(minutes=30&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; datetime.datetime(2018, 8, 13, 0, 26, 53, 300279)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;当前时间+30分&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（3）random&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;&lt;img id=&quot;code_img_closed_a119b449-3604-4f3a-a74b-88244f19fd55&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a119b449-3604-4f3a-a74b-88244f19fd55&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a119b449-3604-4f3a-a74b-88244f19fd55&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;85&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;random.random()    生成一个0-1的随机浮点数&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; random.random()
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 0.6813665412962242
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;那么能不能指定范围呢？&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;random.uniform(a,b)   &lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; random.uniform(2,5&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 3.7103054399886606 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;random.randint(a,b)    用于生成一个指定范围内的整数，包括a，b&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; random.randint(1,3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 3
&lt;span&gt;11&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; random.randint(1,3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 3
&lt;span&gt;13&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; random.randint(1,3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 1
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;random.randrange(start,stop，step)  从指定范围获得一个随机数，但不包括stop&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; random.randrange(1,3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 2
&lt;span&gt;18&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; random.randrange(1,3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 1
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;random.choice(&quot;序列&quot;)            从序列中获取一个随机元素&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; random.choice(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; random.choice(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; random.choice(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; random.choice(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; random.choice(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;random.sample(&quot;序列&quot;，k)     从序列中获取k个随机元素，必须指定k&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; random.sample(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; random.sample(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; random.sample(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;random.shuffle()                    洗牌
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; l =[1,2,3,4,5,6&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; random
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; random.shuffle(l)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; l
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; [4, 6, 3, 2, 1, 5]
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;random模块&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（2）os模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;os模块是与操作系统交互的一个接口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a  os.getcwd()&lt;/strong&gt; 　　　  　获取当前工作目录&lt;br/&gt;&lt;strong&gt;b  os.chdir（）&lt;/strong&gt; 　　　　 改变工作目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_345cb961-ccd0-415f-bf25-e64881e9e0b6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_345cb961-ccd0-415f-bf25-e64881e9e0b6&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_345cb961-ccd0-415f-bf25-e64881e9e0b6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;os.getcwd()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\miraacle&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; os.chdir(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.getcwd()
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; os.chdir(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C:\Users\miraacle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;对比上一条chdir命令有什么区别/&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.getcwd()
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\miraacle&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;如何操作&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;c  os.curdir()　&lt;/strong&gt;　　　　　 返回当前目录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;d  os.pardir()&lt;/strong&gt; 　　　　　　 返回当前目录的上一级目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_d69d45c6-2d98-4806-bf76-cb2ed7d8cb9a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d69d45c6-2d98-4806-bf76-cb2ed7d8cb9a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d69d45c6-2d98-4806-bf76-cb2ed7d8cb9a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.curdir
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.pardir
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;看操作&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;d  os.makedirs(r&quot;C:\a\b\c\d&quot;) 　&lt;/strong&gt;　　　生成多层递归目录&lt;br/&gt;&lt;strong&gt;e  os.removesdirs(r&quot;C:\a\b\c\d&quot;) 　　&lt;/strong&gt;  若目录为空，则删除，并递归到上一级目录，若也为空则删除，以此类推。&lt;br/&gt;&lt;strong&gt;f  os.mkdir() 　&lt;/strong&gt;　　　　　　　　　　　生成单级目录&lt;br/&gt;&lt;strong&gt;g  os.rmdir() 　&lt;/strong&gt;　　　　　　　　　　　删除单级目录&lt;br/&gt;&lt;strong&gt;h  os.listdir()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57.5&quot;&gt;&lt;img id=&quot;code_img_closed_2bf689b4-7efa-46b6-ad1a-39c6229f51e4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;os.listdir（'.'）&lt;img id=&quot;code_img_opened_2bf689b4-7efa-46b6-ad1a-39c6229f51e4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2bf689b4-7efa-46b6-ad1a-39c6229f51e4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;110&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; os.listdir(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.astropy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.conda&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.ipython&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.matplotlib&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.oracle_jre_usage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.Origin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.PyCharm2017.1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.QtWebEngineProcess&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3D Objects&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Anaconda3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;AppData&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Application Data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Contacts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cookies&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Desktop&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Documents&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Downloads&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Evernote&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Favorites&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IntelGraphicsProfiles&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Links&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Local Settings&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;LocalStorage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;MicrosoftEdgeBackups&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Music&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;My Documents&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NetHood&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NTUSER.DAT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ntuser.dat.LOG1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ntuser.dat.LOG2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NTUSER.DAT{2fe3e105-6421-11e8-b183-74e6e23ee3d1}.TM.blf&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NTUSER.DAT{2fe3e105-6421-11e8-b18374e6e23ee3d1}.TMContainer00000000000000000001.regtrans-ms&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NTUSER.DAT{2fe3e105-6421-11e8-b183-74e6e23ee3d1}.TMContainer00000000000000000002.regtrans-ms&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ntuser.ini&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;OneDrive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;OneDrive.old&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Pictures&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PrintHood&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PyCharm 2017.1.2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PycharmProjects&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Recent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Saved Games&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Searches&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SendTo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Templates&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Videos&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;WebpageIcons.db&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;「开始」菜单&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;微博图片&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;新建文件夹&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;一堆东西&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_94f1a672-bf52-466c-a44b-b9b033ca8b67&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;os.list('..')&lt;img id=&quot;code_img_opened_94f1a672-bf52-466c-a44b-b9b033ca8b67&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_94f1a672-bf52-466c-a44b-b9b033ca8b67&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; os.listdir(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Administrator&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;All Users&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Default User&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Default.migrated&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;desktop.ini&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;miraacle&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Public&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;这就清楚多了&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;i  os.remove()&lt;/strong&gt; 　　　　　　　　　　　　删除一个文件&lt;br/&gt;&lt;strong&gt;j  os.rename('oldname','newname')&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;k  os.stat('path') &lt;span class=&quot;Apple-tab-span&quot;&gt;　　　　　　　　　　&lt;/span&gt;  &lt;/strong&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;详细信息属性&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_5d8a175e-ddc1-4bc1-89aa-b580580f544c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5d8a175e-ddc1-4bc1-89aa-b580580f544c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5d8a175e-ddc1-4bc1-89aa-b580580f544c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; os.stat(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;微博图片&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; os.stat_result(st_mode=16895, st_ino=5910974511128476, st_dev=43069414, st_nlink=1, st_uid=0, st_gid=0, st_size=&lt;span&gt;0, 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; st_atime=1481191549, st_mtime=1481191549, st_ctime=1462148410)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;详细属性&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;l  os.sep&lt;/strong&gt; &lt;span class=&quot;Apple-tab-span&quot;&gt;&lt;strong&gt;　&lt;/strong&gt;　　　　　　　　　　　　&lt;/span&gt; &lt;span class=&quot;Apple-tab-span&quot;&gt;输出操作系统特定的路径分隔符&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;m  os.&lt;/strong&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;&lt;strong&gt;linesep&lt;/strong&gt; &lt;span class=&quot;Apple-tab-span&quot;&gt;　　　　　　　　　　　输出当前平台使用的行终止符&lt;/span&gt;  &lt;/span&gt;dd       &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;n  os.pathsep &lt;span class=&quot;Apple-tab-span&quot;&gt;　　　　　　　　&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　&lt;/span&gt;  &lt;span class=&quot;Apple-tab-span&quot;&gt;输出用于分割文件路径的字符串&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;o  os.name&lt;/strong&gt; &lt;span class=&quot;Apple-tab-span&quot;&gt;　　　　　　　　　　　　输出字符串当前使用的平台&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_f4f6843e-ea4f-4e0f-ba7a-7465d3c14ead&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f4f6843e-ea4f-4e0f-ba7a-7465d3c14ead&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f4f6843e-ea4f-4e0f-ba7a-7465d3c14ead&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.sep
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.linesep
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.pathsep
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.name
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;nt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;操作集锦&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;p  os.environ&lt;/strong&gt; &lt;span class=&quot;Apple-tab-span&quot;&gt;&lt;strong&gt;　&lt;/strong&gt;　　　　　　　　　　　获取系统环境变量&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55.5&quot;&gt;&lt;img id=&quot;code_img_closed_392e06e2-5df8-44a1-9eb2-db049c8b5c97&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_392e06e2-5df8-44a1-9eb2-db049c8b5c97&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_392e06e2-5df8-44a1-9eb2-db049c8b5c97&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;106&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.environ
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; environ({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ACTEL_FOR_ALTIUM_OVERRIDE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ALLUSERSPROFILE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\ProgramData&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ALTERA_FOR_ALTIUM_OVERRIDE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ALTIUMPATH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files (x86)\\Altium2004 SP2\\System&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;APPDATA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\miraacle\\AppData\\Roaming&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CM2015DIR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files (x86)\\Common Files\\Autodesk Shared\\Materials\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;COMMONPROGRAMFILES&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files (x86)\\Common Files&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;COMMONPROGRAMFILES(X86)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files (x86)\\Common Files&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;COMMONPROGRAMW6432&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files\\Common Files&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;COMPUTERNAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;MIRACLE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;COMSPEC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\WINDOWS\\system32\\cmd.exe&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DRIVERDATA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Windows\\System32\\Drivers\\DriverData&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FPS_BROWSER_APP_PROFILE_STRING&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Internet Explorer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FPS_BROWSER_USER_PROFILE_STRING&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;HOMEDRIVE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;HOMEPATH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\Users\\miraacle&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;LOCALAPPDATA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: 
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\miraacle\\AppData\\Local&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;LOGONSERVER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\\\MIRACLE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NUMBER_OF_PROCESSORS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ONEDRIVE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\miraacle\\OneDrive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;OS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows_NT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PATH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\WIDCOMM\\Bluetooth Software\\;C:\\Program Files\\WIDCOMM\\BluetoothSoftware\\syswow64;;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Altium2004 SP2\\System;C:\\Users\\miraacle\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts\\;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; C:\\Users\\miraacle\\AppData\\Local\\Programs\\Python\\Python36-32&lt;span&gt;\\;C:\\Users\\miraacle\\Anaconda3;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;C:\\Users\\miraacle\\Anaconda3\\Scripts;C:\\Users\\miraacle\\Anaconda3\\Library\\bin;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     C:\\Users\\miraacle\\AppData\\Local\\Microsoft\\WindowsApps;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;PATHEXT&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROCESSOR_ARCHITECTURE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x86&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROCESSOR_ARCHITEW6432&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;AMD64&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROCESSOR_IDENTIFIER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Intel64 Family 6 Model 61 Stepping 4, &lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     GenuineIntel&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;PROCESSOR_LEVEL&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;6&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;PROCESSOR_REVISION&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;3d04&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;PROGRAMDATA&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;C:\\ProgramData&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;PROGRAMFILES&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files (x86)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROGRAMFILES(X86)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files (x86)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROGRAMW6432&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROMPT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: 
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$P$G&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PSMODULEPATH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PUBLIC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\Public&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SESSIONNAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Console&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SYNAPROGDIR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Synaptics\\SynTP&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SYSTEMDRIVE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SYSTEMROOT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: 
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\WINDOWS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TEMP&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\miraacle\\AppData\\Local\\Temp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TMP&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\miraacle\\AppData\\Local\\Temp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USERDOMAIN&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;MIRACLE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USERDOMAIN_ROAMINGPROFILE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;MIRACLE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USERNAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;miraacle&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USERPROFILE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\miraacle&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;WINDIR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\WINDOWS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;})
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;可怕的环境变量&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;q  os.system()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_efacb2c6-c41a-4fe3-8c2a-80e12adcbe95&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_efacb2c6-c41a-4fe3-8c2a-80e12adcbe95&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_efacb2c6-c41a-4fe3-8c2a-80e12adcbe95&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; os.system(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dir&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;     驱动器 C 中的卷是 我的磁盘
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;      卷的序列号是 0291-&lt;span&gt;2FE6
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    C:\Users\miraacle 的目录
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     2018/08/10  00:17    &amp;lt;DIR&amp;gt;&lt;span&gt;          .
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     2018/08/10  00:17    &amp;lt;DIR&amp;gt;&lt;span&gt;          ..
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     2015/05/10  21:32    &amp;lt;DIR&amp;gt;&lt;span&gt;          .android
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     2018/07/04  22:40    &amp;lt;DIR&amp;gt;&lt;span&gt;          .astropy
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     2018/07/23  01:27    &amp;lt;DIR&amp;gt;&lt;span&gt;          .conda
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     2018/07/04  22:38    &amp;lt;DIR&amp;gt;&lt;span&gt;          .ipython
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     2018/07/04  22:51    &amp;lt;DIR&amp;gt;&lt;span&gt;          .matplotlib
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     2016/11/23  22:45    &amp;lt;DIR&amp;gt;&lt;span&gt;          .oracle_jre_usage
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     2017/01/17  22:43    &amp;lt;DIR&amp;gt;&lt;span&gt;          .Origin
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     2018/06/17  00:53    &amp;lt;DIR&amp;gt;          .PyCharm2017.1
&lt;span&gt;17&lt;/span&gt;     2017/01/17  22:43    &amp;lt;DIR&amp;gt;&lt;span&gt;          .QtWebEngineProcess
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     2018/07/18  17:47    &amp;lt;DIR&amp;gt;&lt;span&gt;          3D Objects
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     2018/08/13  10:23    &amp;lt;DIR&amp;gt;&lt;span&gt;          Anaconda3
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     2018/07/18  17:47    &amp;lt;DIR&amp;gt;&lt;span&gt;          Contacts
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     2018/08/13  14:04    &amp;lt;DIR&amp;gt;&lt;span&gt;          Desktop
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     2018/07/18  17:47    &amp;lt;DIR&amp;gt;&lt;span&gt;          Documents
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     2018/08/12  23:49    &amp;lt;DIR&amp;gt;&lt;span&gt;          Downloads
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     2016/10/21  18:36    &amp;lt;DIR&amp;gt;&lt;span&gt;          Evernote
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     2018/07/18  17:47    &amp;lt;DIR&amp;gt;&lt;span&gt;          Favorites
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     2018/07/18  17:47    &amp;lt;DIR&amp;gt;&lt;span&gt;          Links
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     2017/01/15  16:13    &amp;lt;DIR&amp;gt;&lt;span&gt;          LocalStorage
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     2018/07/18  17:47    &amp;lt;DIR&amp;gt;&lt;span&gt;          Music
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     2018/04/05  01:08    &amp;lt;DIR&amp;gt;&lt;span&gt;          OneDrive
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     2015/05/21  18:28    &amp;lt;DIR&amp;gt;&lt;span&gt;          OneDrive.old
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     2018/07/18  17:47    &amp;lt;DIR&amp;gt;&lt;span&gt;          Pictures
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     2018/06/17  00:50    &amp;lt;DIR&amp;gt;          PyCharm 2017.1.2
&lt;span&gt;33&lt;/span&gt;     2018/07/04  23:11    &amp;lt;DIR&amp;gt;&lt;span&gt;          PycharmProjects
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     2018/07/18  17:47    &amp;lt;DIR&amp;gt;&lt;span&gt;          Saved Games
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     2018/07/18  17:47    &amp;lt;DIR&amp;gt;&lt;span&gt;          Searches
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     2018/07/18  17:47    &amp;lt;DIR&amp;gt;&lt;span&gt;          Videos
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     2017/06/14  00:26            22,528&lt;span&gt; WebpageIcons.db
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     2016/12/08  18:05    &amp;lt;DIR&amp;gt;&lt;span&gt;          微博图片
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     2017/05/04  09:33    &amp;lt;DIR&amp;gt;&lt;span&gt;          新建文件夹
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                    1 个文件         22,528&lt;span&gt; 字节
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                   32 个目录 43,556,442,112&lt;span&gt; 可用字节
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     0
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;看看系统&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_c7b29f3d-38dd-4190-ab76-3ae7a7b2af04&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c7b29f3d-38dd-4190-ab76-3ae7a7b2af04&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c7b29f3d-38dd-4190-ab76-3ae7a7b2af04&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; os.system(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ipconfig/all&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    Windows IP 配置
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;       主机名  . . . . . . . . . . . . . : miracle
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;       主 DNS 后缀 . . . . . . . . . . . :
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;       节点类型  . . . . . . . . . . . . : 混合
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;       IP 路由已启用 . . . . . . . . . . : 否
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;       WINS 代理已启用 . . . . . . . . . : 否
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    以太网适配器 以太网:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;       媒体状态  . . . . . . . . . . . . : 媒体已断开连接
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;       连接特定的 DNS 后缀 . . . . . . . :
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;       描述. . . . . . . . . . . . . . . : Realtek PCIe FE Family Controller
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;        物理地址. . . . . . . . . . . . . : 74-E6-E2-3E-E3-&lt;span&gt;D1
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;       DHCP 已启用 . . . . . . . . . . . : 是
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;       自动配置已启用. . . . . . . . . . : 是
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     无线局域网适配器 本地连接* 2&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;       媒体状态  . . . . . . . . . . . . : 媒体已断开连接
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;       连接特定的 DNS 后缀 . . . . . . . :
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;        描述. . . . . . . . . . . . . . . : Microsoft Wi-&lt;span&gt;Fi Direct Virtual Adapter
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;        物理地址. . . . . . . . . . . . . : 2E-33-7A-FC-F0-&lt;span&gt;B5
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;       DHCP 已启用 . . . . . . . . . . . : 是
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;       自动配置已启用. . . . . . . . . . : 是
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     无线局域网适配器 本地连接* 4&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;       媒体状态  . . . . . . . . . . . . : 媒体已断开连接
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;       连接特定的 DNS 后缀 . . . . . . . :
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;        描述. . . . . . . . . . . . . . . : Microsoft Wi-Fi Direct Virtual Adapter &lt;span&gt;#&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;        物理地址. . . . . . . . . . . . . : 2E-33-7A-FC-F8-&lt;span&gt;B5
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;       DHCP 已启用 . . . . . . . . . . . : 是
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;       自动配置已启用. . . . . . . . . . : 是
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    无线局域网适配器 WLAN:
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;       连接特定的 DNS 后缀 . . . . . . . :
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;        描述. . . . . . . . . . . . . . . : Dell Wireless 1704 802.11b/g/n (2&lt;span&gt;.4GHz)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;        物理地址. . . . . . . . . . . . . : 2C-33-7A-FC-F0-&lt;span&gt;B5
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;       DHCP 已启用 . . . . . . . . . . . : 是
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;       自动配置已启用. . . . . . . . . . : 是
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;        IPv6 地址 . . . . . . . . . . . . : 2001:250:20a:1900&lt;span&gt;:1c19:8fdc:c570:89f6(首选)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;        临时 IPv6 地址. . . . . . . . . . : 2001:250:20a:1900:5d56:4217&lt;span&gt;:aa5a:e812(首选)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;        本地链接 IPv6 地址. . . . . . . . : fe80::1c19:8fdc:c570:89f6%3&lt;span&gt;(首选)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;        IPv4 地址 . . . . . . . . . . . . : 10.20.72.135&lt;span&gt;(首选)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;        子网掩码  . . . . . . . . . . . . : 255.255.224.0
&lt;span&gt;50&lt;/span&gt;        获得租约的时间  . . . . . . . . . : 2018年8月13日 9:30:01
&lt;span&gt;51&lt;/span&gt;        租约过期的时间  . . . . . . . . . : 2018年8月13日 14:58:54
&lt;span&gt;52&lt;/span&gt;        默认网关. . . . . . . . . . . . . : fe80::276:86ff:febe:7a41%3
&lt;span&gt;53&lt;/span&gt;                                            10.20.95.254
&lt;span&gt;54&lt;/span&gt;        DHCP 服务器 . . . . . . . . . . . : 10.100.100.100
&lt;span&gt;55&lt;/span&gt;        DHCPv6 IAID . . . . . . . . . . . : 36451194
&lt;span&gt;56&lt;/span&gt;        DHCPv6 客户端 DUID  . . . . . . . : 00-01-00-01-1E-59-AF-DE-74-E6-E2-3E-E3-&lt;span&gt;D1
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;        DNS 服务器  . . . . . . . . . . . : 202.112.209.122
&lt;span&gt;58&lt;/span&gt;                                            202.112.209.123
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;       TCPIP 上的 NetBIOS  . . . . . . . : 已启用
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;     0
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;看看ip配置&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;r  os.path.xxx&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_4cb36ca2-da59-422a-a813-68d443ead5ea&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4cb36ca2-da59-422a-a813-68d443ead5ea&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4cb36ca2-da59-422a-a813-68d443ead5ea&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;os.path.abspath()        获取某一文件的绝对路径
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;os.path.split(path)        分割路径
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;os.path.diranme(path)    返回path的目录，其实就是os.path.split（）的第一个元素
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;os.path.basename(path)    返回path的最后一个文件名
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;os.path.exists(path)        判断路径是否存在
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;os.path.isabs(path)        判断是否为绝对路径
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;os.path.isfile(path)        判断是否为文件    
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;os.path.isdir(path)        判断是否为目录
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;os.path.join()            将说个路径组合返回
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;os.path.getatime(path)    返回path所指向的文件或目录的最后存储时间
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; so.path.getmtime(path)    返回path所指向的文件或目录的最后修改时间
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;关于os.path.xxx&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;终于完了~&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（5）sys模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; a  sys.version&lt;/strong&gt; &lt;span class=&quot;Apple-tab-span&quot;&gt;&lt;strong&gt;　&lt;/strong&gt;　　　　　获取python解释器的版本信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b  &lt;/strong&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;&lt;strong&gt;sys.platform&lt;/strong&gt; &lt;span class=&quot;Apple-tab-span&quot;&gt;　　　　　　获取操作系统平台名称&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;&lt;strong&gt;c  &lt;/strong&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;&lt;strong&gt;sys.argv&lt;/strong&gt; &lt;span class=&quot;Apple-tab-span&quot;&gt;　　　　　　　　命令行参数list，第一个元素是程序本身路径&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;d  sys.path&lt;/strong&gt; 　　　　　　　  返回模块的搜索路径，初始化时使用python环境变量的值&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;e  sys.exit(n)　　　　　　　&lt;/strong&gt; 退出程序，正常退出时exit（0）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_5fc8e55e-54d9-48dd-8c70-0c6dc5b2f1aa&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5fc8e55e-54d9-48dd-8c70-0c6dc5b2f1aa&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5fc8e55e-54d9-48dd-8c70-0c6dc5b2f1aa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; sys.version
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; sys.platform
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;win32&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;C:\Users\miraacle\PycharmProjects\s\day5&amp;gt;module_sys.py 1 2 3 4 5&lt;span&gt;
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\miraacle\\PycharmProjects\\s\\day5\\module_sys.py&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;sys模块操作&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; （6）json&amp;amp;pickle模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;json把字符串、列表、字典等各语言通用的数据类型写进文件里。便于各平台和语言之前进行数据交互。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;pickle，用于python特有的类型和python的数据类型间进行转换。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_7465fc08-81da-4a63-924f-b34f756d4acb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7465fc08-81da-4a63-924f-b34f756d4acb&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7465fc08-81da-4a63-924f-b34f756d4acb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; json
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; info =&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Kanghui&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:23
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;强行转成字符串，不推荐使用。因为反序列化不好办。&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;f =open('文本.txt','w')
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#f.write(info)               #TypeError: write() argument must be str, not dict
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;f.write(str(info))
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;f.close()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;推荐使用json.dumps或者dump&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; f =open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;文本.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; f.write( json.dumps(info) )    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;等价于json.dump（info，f）&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; f.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;json序列化&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_c1d51321-b5ec-4edd-a2f4-caec56558019&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c1d51321-b5ec-4edd-a2f4-caec56558019&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c1d51321-b5ec-4edd-a2f4-caec56558019&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; json
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;json只能处理简单的数据类型，例如字典，列表字符串。json在所有语言之间都一样。因为不同语言进行数据交互，能够使用不同语言。&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;xml用于在不同语言之间进行数据交互，在不断地被json取代，主流的在不同平台和语言之间数据交互。因为跨语言，所以不能处理复杂的&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; f =open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;文本.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;f.write(info)       TypeError: write() argument must be str, not dict&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; data =f.read()&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; f.close()&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(data)&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;print(data[&quot;age&quot;])       此时TypeError: string indices must be integers因为是字符串，现在需要变回字典&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;那怎么办呢？&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;data =eval( f.read() )
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;f.close()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;print(data[&quot;age&quot;])
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;不用eval呢？eval不是一个通用的&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; data =&lt;span&gt;json.loads(f.read())
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(data[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;json反序列化&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_57be9f64-d2e5-4121-862c-494785bdd3ba&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_57be9f64-d2e5-4121-862c-494785bdd3ba&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_57be9f64-d2e5-4121-862c-494785bdd3ba&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pickle
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; date ={&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;k1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:123,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;k2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;pickle.dumps   将数据通过特殊形式转换为只有python语言认识的字符串&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; p_str =&lt;span&gt;pickle.dumps(data)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(p_str)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;pickle.dump  将数据通过特殊形式转换为只有python语言认识的字符串,并写入文件&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pickle序列化文本.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     pickle.dump(date,f)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pickle序列化&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_098b9ea0-cf4f-49c3-a2b2-112a17fd75d3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_098b9ea0-cf4f-49c3-a2b2-112a17fd75d3&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_098b9ea0-cf4f-49c3-a2b2-112a17fd75d3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;pickle和json的用法几乎完全一样&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pickle
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; sayhi(name):
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,name)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; info =&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Kanghui&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:23&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:sayhi
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; f =open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;文本.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;f.write( pickle.dump(info) )
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; f.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;可以dump不一样可以load&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;pickle的用于与json完全一样。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（7）shelve模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;shelve模块是一个简单的k,v将内存数据通过文件持久化的模块，可以持久化任何pickle可支持的python数据格式。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_36db47ec-caf9-45e8-b371-f96404423712&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_36db47ec-caf9-45e8-b371-f96404423712&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_36db47ec-caf9-45e8-b371-f96404423712&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; shelve
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; d =shelve.open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)          &lt;span&gt;#&lt;/span&gt;&lt;span&gt;打开一个文件&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;info ={&quot;age&quot;:23,&quot;job&quot;:'std'}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;name =[&quot;a&quot;,&quot;b&quot;]
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;d['name']=name              #持久化列表
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;d['info']=info              #持久化字典
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;d[&quot;date&quot;]=datetime.datetime.now()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;d.close()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(d.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(d.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(d.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;shelve模块&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;运行的结果会生成三个文件：text.txt.bak、text.txt.dir，text.txt.dat。貌似很好用的样子~&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（8）xml模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;xml是实现不同语言或程序之间进行数据交换的协议，跟json差不多，但json使用起来更简单。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;xml的格式如下，就是通过&amp;lt;&amp;gt;节点来区别数据结构的:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_032f9d8f-dc28-4cfa-87e9-8edbb897b385&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_032f9d8f-dc28-4cfa-87e9-8edbb897b385&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_032f9d8f-dc28-4cfa-87e9-8edbb897b385&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;data&amp;gt;
&lt;span&gt; 3&lt;/span&gt;     &amp;lt;country name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Liechtenstein&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 4&lt;/span&gt;         &amp;lt;rank updated=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;2&amp;lt;/rank&amp;gt;
&lt;span&gt; 5&lt;/span&gt;         &amp;lt;year&amp;gt;2008&amp;lt;/year&amp;gt;
&lt;span&gt; 6&lt;/span&gt;         &amp;lt;gdppc&amp;gt;141100&amp;lt;/gdppc&amp;gt;
&lt;span&gt; 7&lt;/span&gt;         &amp;lt;neighbor name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Austria&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; direction=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt; 8&lt;/span&gt;         &amp;lt;neighbor name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Switzerland&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; direction=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;W&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;/country&amp;gt;
&lt;span&gt;10&lt;/span&gt;     &amp;lt;country name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Singapore&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;11&lt;/span&gt;         &amp;lt;rank updated=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;5&amp;lt;/rank&amp;gt;
&lt;span&gt;12&lt;/span&gt;         &amp;lt;year&amp;gt;2011&amp;lt;/year&amp;gt;
&lt;span&gt;13&lt;/span&gt;         &amp;lt;gdppc&amp;gt;59900&amp;lt;/gdppc&amp;gt;
&lt;span&gt;14&lt;/span&gt;         &amp;lt;neighbor name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Malaysia&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; direction=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;N&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;15&lt;/span&gt;     &amp;lt;/country&amp;gt;
&lt;span&gt;16&lt;/span&gt;     &amp;lt;country name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Panama&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;17&lt;/span&gt;         &amp;lt;rank updated=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;69&amp;lt;/rank&amp;gt;
&lt;span&gt;18&lt;/span&gt;         &amp;lt;year&amp;gt;2011&amp;lt;/year&amp;gt;
&lt;span&gt;19&lt;/span&gt;         &amp;lt;gdppc&amp;gt;13600&amp;lt;/gdppc&amp;gt;
&lt;span&gt;20&lt;/span&gt;         &amp;lt;neighbor name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Costa Rica&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; direction=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;W&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;21&lt;/span&gt;         &amp;lt;neighbor name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Colombia&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; direction=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;22&lt;/span&gt;     &amp;lt;/country&amp;gt;
&lt;span&gt;23&lt;/span&gt; &amp;lt;/data&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;xml格式&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;xml协议在各个语言里的都 是支持的，在python中可以用以下模块操作xml：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_7edbc4cc-4bdd-40aa-b58c-378321c07f7e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7edbc4cc-4bdd-40aa-b58c-378321c07f7e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7edbc4cc-4bdd-40aa-b58c-378321c07f7e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; xml.etree.ElementTree as ET
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; tree = ET.parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xmltest.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; root =&lt;span&gt; tree.getroot()
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(root.tag)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;遍历xml文档&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; child &lt;span&gt;in&lt;/span&gt;&lt;span&gt; root:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(child.tag, child.attrib)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; child:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(i.tag,i.text)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;遍历xml文档&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_13125f83-8604-4e3c-9488-74e89a7e7ce3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_13125f83-8604-4e3c-9488-74e89a7e7ce3&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_13125f83-8604-4e3c-9488-74e89a7e7ce3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; xml.etree.ElementTree as ET
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt; tree = ET.parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xmltest.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; root =&lt;span&gt; tree.getroot()
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(root.tag)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;只遍历year 节点&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; node &lt;span&gt;in&lt;/span&gt; root.iter(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(node.tag,node.text)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;只遍历节点&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;还可以修改和删除xml文档：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_9cdd5ebf-2c12-4bf9-bc16-88079dfa575e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9cdd5ebf-2c12-4bf9-bc16-88079dfa575e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9cdd5ebf-2c12-4bf9-bc16-88079dfa575e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; xml.etree.ElementTree as ET
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; tree = ET.parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xmltest.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; root =&lt;span&gt; tree.getroot()
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;修改&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; node &lt;span&gt;in&lt;/span&gt; root.iter(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     new_year = int(node.text) + 1
&lt;span&gt; 9&lt;/span&gt;     node.text =&lt;span&gt; str(new_year)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     node.set(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;updated&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;  
&lt;span&gt;12&lt;/span&gt; tree.write(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xmltest.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  
&lt;span&gt;14&lt;/span&gt;  
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;删除node&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; country &lt;span&gt;in&lt;/span&gt; root.findall(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;country&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;    rank = int(country.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rank&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).text)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;    &lt;span&gt;if&lt;/span&gt; rank &amp;gt; 50&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;     root.remove(country)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;  
&lt;span&gt;21&lt;/span&gt; tree.write(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;output.xml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;xml修改和删除&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;还可以自行创建xml文档&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_84d82ed1-e2c2-4193-9787-a1cfa9d95541&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_84d82ed1-e2c2-4193-9787-a1cfa9d95541&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_84d82ed1-e2c2-4193-9787-a1cfa9d95541&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; xml.etree.ElementTree as ET
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt;  
&lt;span&gt; 4&lt;/span&gt; new_xml = ET.Element(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;namelist&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; name = ET.SubElement(new_xml,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,attrib={&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enrolled&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; age = ET.SubElement(name,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,attrib={&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checked&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; sex = ET.SubElement(name,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; sex.text = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; name2 = ET.SubElement(new_xml,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,attrib={&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enrolled&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; age = ET.SubElement(name2,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; age.text = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;  
&lt;span&gt;13&lt;/span&gt; et = ET.ElementTree(new_xml) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;生成文档对象&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; et.write(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,xml_declaration=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;  
&lt;span&gt;16&lt;/span&gt; ET.dump(new_xml) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;打印生成的格式&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;xml文档创建&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;（9）shutil模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;高级的 文件、文件夹、压缩包 处理模块。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;&lt;img id=&quot;code_img_closed_3f34b5f6-e936-4c86-b056-6c168f8b6c1a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3f34b5f6-e936-4c86-b056-6c168f8b6c1a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3f34b5f6-e936-4c86-b056-6c168f8b6c1a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;81&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将一个文件拷贝到另一个文件中&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; shutil
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; shutil.copyfileobj(open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;old xml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;new xml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;拷贝文件和权限&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; shutil.copy(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f1.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f2.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)          &lt;span&gt;#&lt;/span&gt;&lt;span&gt;目标文件无需存在&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;shutil.copy2(src, dst)拷贝文件和状态信息&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; shutil.copy2(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f1.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;f2.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;仅拷贝权限。内容、组、用户均不变。&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; shutil.copymode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f1.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f2.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;目标文件必须存在&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;仅拷贝文件的状态信息，包括：mode bits, atime, mtime, flags&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; shutil.copystat(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f1.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;f2.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;目标文件必须存在&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;shutil.ignore_patterns(*patterns)&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;shutil.copytree(src, dst, symlinks=False, ignore=None)&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;递归的去拷贝文件夹&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; shutil.copytree(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;folder1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;folder2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,ignore=shutil.ignore_patterns(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*.pyc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;tmp*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 目标目录不能存在，注意对folder2目录父级目录要有可写权限，ignore的意思是排除&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;shutil.rmtree(path[, ignore_errors[, onerror]])递归的去删除文件&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; shutil.rmtree(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;folder1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;shutil.move(src, dst)递归的去移动文件，它类似mv命令，其实就是重命名。&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; shutil.move(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;folder1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;folder3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;shutil乱七八糟的操作&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;shutil.make_archive(base_name, format,...)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建压缩包并返回文件路径，例如：zip、tar&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;base_name： 压缩包的文件名，也可以是压缩包的路径。只是文件名时，则保存至当前目录，否则保存至指定路径，&lt;br/&gt;如 data_bak                       =&amp;gt;保存至当前路径&lt;br/&gt;如：/tmp/data_bak =&amp;gt;保存至/tmp/&lt;/li&gt;
&lt;li&gt;format： 压缩包种类，“zip”, “tar”, “bztar”，“gztar”&lt;/li&gt;
&lt;li&gt;root_dir： 要压缩的文件夹路径（默认当前目录）&lt;/li&gt;
&lt;li&gt;owner： 用户，默认当前用户&lt;/li&gt;
&lt;li&gt;group： 组，默认当前组&lt;/li&gt;
&lt;li&gt;logger： 用于记录日志，通常是logging.Logger对象&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;span&gt;shutil 对压缩包的处理是调用 ZipFile 和 TarFile 两个模块来进行的，详细：&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_f0db3b30-ac2d-4f40-9b70-14aad6e14d48&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f0db3b30-ac2d-4f40-9b70-14aad6e14d48&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f0db3b30-ac2d-4f40-9b70-14aad6e14d48&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; zipfile
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 压缩&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; z = zipfile.ZipFile(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;laxi.zip&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; z.write(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; z.write(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data.data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;z.close()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 解压&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; z = zipfile.ZipFile(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;laxi.zip&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; z.extractall(path=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; z.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;zipfile压缩&amp;amp;解压&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_9454ca12-ab0f-42b2-941d-6cbb5f734642&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9454ca12-ab0f-42b2-941d-6cbb5f734642&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9454ca12-ab0f-42b2-941d-6cbb5f734642&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tarfile
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 压缩&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; t=tarfile.open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/tmp/egon.tar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; t.add(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/test1/a.py&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,arcname=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.bak&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; t.add(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/test1/b.py&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,arcname=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b.bak&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; t.close()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 解压&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; t=tarfile.open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/tmp/egon.tar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; t.extractall(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/egon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; t.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;tarfile压缩&amp;amp;解压&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; （10）PyYaml模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Python也可以很容易的处理ymal文档格式，只不过需要安装一个模块，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;参考文档    &lt;a title=&quot;PyYaml&quot; target=&quot;_blank&quot;&gt; &lt;/a&gt;&lt;/strong&gt;&lt;a title=&quot;PyYaml&quot; target=&quot;_blank&quot;&gt;http://pyyaml.org/wiki/PyYAMLDocumentation &lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;（11）cofigpaser模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用于生成和修改常见配置文档&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;来看一个好多软件的常见文档格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_50e2532f-8318-4793-9b34-39f838423a88&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_50e2532f-8318-4793-9b34-39f838423a88&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_50e2532f-8318-4793-9b34-39f838423a88&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;[DEFAULT]
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; ServerAliveInterval = 45
&lt;span&gt; 3&lt;/span&gt; Compression =&lt;span&gt; yes
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; CompressionLevel = 9
&lt;span&gt; 5&lt;/span&gt; ForwardX11 =&lt;span&gt; yes
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;[bitbucket.org]
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; User =&lt;span&gt; hg
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;  
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;[topsecret.server.com]
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; Port = 50022
&lt;span&gt;12&lt;/span&gt; ForwardX11 = no
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;我是没见过&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;如果想用python生成一个这样的文档怎么做呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_9e064d77-f52a-408e-bfc5-114acebe8adb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9e064d77-f52a-408e-bfc5-114acebe8adb&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9e064d77-f52a-408e-bfc5-114acebe8adb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; configparser
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; config =&lt;span&gt; configparser.ConfigParser()
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; config[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DEFAULT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ServerAliveInterval&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                       &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Compression&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                      &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CompressionLevel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  
&lt;span&gt; 8&lt;/span&gt; config[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bitbucket.org&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; config[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bitbucket.org&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; config[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;topsecret.server.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; topsecret = config[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;topsecret.server.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; topsecret[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Host Port&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;50022&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; mutates the parser&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; topsecret[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ForwardX11&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;no&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; same here&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; config[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ForwardX11&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;example.ini&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as configfile:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;    config.write(configfile)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;python写配置文档&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;写完了还能再读：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_ddb0f729-55f2-4c64-bf06-c99de24b1791&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ddb0f729-55f2-4c64-bf06-c99de24b1791&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ddb0f729-55f2-4c64-bf06-c99de24b1791&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; configparser
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; config =&lt;span&gt; configparser.ConfigParser()
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; config.sections()
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;[]
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; config.read(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;example.ini&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;example.ini&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; config.sections()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bitbucket.org&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;topsecret.server.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;bitbucket.org&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; config
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;True
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;bytebong.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; config
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;False
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; config[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bitbucket.org&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; config[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Compression&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; topsecret = config[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;topsecret.server.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; topsecret[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ForwardX11&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;no&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; topsecret[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Port&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;50022&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;for&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt; config[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bitbucket.org&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]: &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(key)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;...
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;user
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;compressionlevel
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;serveraliveinterval
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;compression
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;forwardx11
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; config[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bitbucket.org&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ForwardX11&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;python读取配置文档&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_23111e37-6627-48c8-ac7a-339bc864a314&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_23111e37-6627-48c8-ac7a-339bc864a314&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_23111e37-6627-48c8-ac7a-339bc864a314&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;[section1]
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; k1 =&lt;span&gt; v1
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;k2:v2
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;   
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;[section2]
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; k1 =&lt;span&gt; v1
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ConfigParser
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;   
&lt;span&gt;10&lt;/span&gt; config =&lt;span&gt; ConfigParser.ConfigParser()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; config.read(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i.cfg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;   
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ########## 读 ##########&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;secs = config.sections()&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;print secs&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;options = config.options('group2')&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;print options&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;   
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;item_list = config.items('group2')&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;print item_list&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;   
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;val = config.get('group1','key')&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;val = config.getint('group1','key')&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;   
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ########## 改写 ##########&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;sec = config.remove_section('group1')&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;config.write(open('i.cfg', &quot;w&quot;))&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;   
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;sec = config.has_section('wupeiqi')&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;sec = config.add_section('wupeiqi')&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;config.write(open('i.cfg', &quot;w&quot;))&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;   
&lt;span&gt;33&lt;/span&gt;   
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;config.set('group2','k1',11111)&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;config.write(open('i.cfg', &quot;w&quot;))&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;   
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;config.remove_option('group2','age')&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;config.write(open('i.cfg', &quot;w&quot;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;增删改查&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（12）hashlib模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用于加密相关的操作，主要提供 SHA1, SHA224, SHA256, SHA384, SHA512 ，MD5 算法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_80476938-3b4d-438b-983f-3960ae150974&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_80476938-3b4d-438b-983f-3960ae150974&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_80476938-3b4d-438b-983f-3960ae150974&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; hashlib
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; m =&lt;span&gt; hashlib.md5()
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; m.update(b&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; m.update(b&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;It's me&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(m.digest())
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; m.update(b&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;It's been a long time since last time we ...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;  
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(m.digest()) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2进制格式hash&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(len(m.hexdigest())) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;16进制格式hash&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;def digest(self, *args, **kwargs): # real signature unknown
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    &quot;&quot;&quot; Return the digest value as a string of binary data. &quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    pass
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;  
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;def hexdigest(self, *args, **kwargs): # real signature unknown
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    &quot;&quot;&quot; Return the digest value as a string of hexadecimal digits. &quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    pass
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;  
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; hashlib
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;  
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ######## md5 ########&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;  
&lt;span&gt;25&lt;/span&gt; hash =&lt;span&gt; hashlib.md5()
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; hash.update(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(hash.hexdigest())
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;  
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ######## sha1 ########&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;  
&lt;span&gt;31&lt;/span&gt; hash =&lt;span&gt; hashlib.sha1()
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; hash.update(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(hash.hexdigest())
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;  
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ######## sha256 ########&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;  
&lt;span&gt;37&lt;/span&gt; hash =&lt;span&gt; hashlib.sha256()
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; hash.update(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(hash.hexdigest())
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;  
&lt;span&gt;41&lt;/span&gt;  
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ######## sha384 ########&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;  
&lt;span&gt;44&lt;/span&gt; hash =&lt;span&gt; hashlib.sha384()
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; hash.update(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(hash.hexdigest())
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;  
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ######## sha512 ########&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;  
&lt;span&gt;50&lt;/span&gt; hash =&lt;span&gt; hashlib.sha512()
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; hash.update(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(hash.hexdigest())
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hashlib模块，试试吧&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;python 还有一个 hmac 模块，它内部对我们创建 key 和 内容 再进行处理然后再加密&lt;/p&gt;
&lt;p&gt;散列消息鉴别码，简称HMAC，是一种基于消息鉴别码MAC（Message Authentication Code）的鉴别机制。使用HMAC时,消息通讯的双方，通过验证消息中加入的鉴别密钥K来鉴别消息的真伪；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_47164f1d-9cfd-4cb2-89f5-6d84a3143723&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_47164f1d-9cfd-4cb2-89f5-6d84a3143723&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_47164f1d-9cfd-4cb2-89f5-6d84a3143723&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; hmac
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; h = hmac.new(b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;天王盖地虎&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;宝塔镇河妖&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;print&lt;/span&gt; h.hexdigest()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;hmac加密&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;更多关于md5,sha1,sha256等介绍的文章看这里&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tbs-certificates.co.uk/FAQ/en/sha256.html%20&quot; target=&quot;_blank&quot;&gt;https://www.tbs-certificates.co.uk/FAQ/en/sha256.html &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt; （13）re模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 常用正则表达式符号：五种匹配语法、三种匹配模式&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41.5&quot;&gt;&lt;img id=&quot;code_img_closed_8042622e-1d0d-49e6-bf49-939fffda5121&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8042622e-1d0d-49e6-bf49-939fffda5121&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8042622e-1d0d-49e6-bf49-939fffda5121&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;     默认匹配除\n之外的任意一个字符，若指定flag DOTALL,则匹配任意字符，包括换行
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;^&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;     匹配字符开头，若指定flags MULTILINE,这种也可以匹配上(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\nabc\neee&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,flags=&lt;span&gt;re.MULTILINE)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;     匹配字符结尾，或e.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bfoo\nsdfsf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,flags=&lt;span&gt;re.MULTILINE).group()也可以
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;     匹配*号前的字符0次或多次，re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ab*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cabb3abcbbac&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)  结果为[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ab&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;     匹配前一个字符1次或多次，re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ab+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ab+cd+abb+bba&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) 结果[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ab&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;     匹配前一个字符1次或0次
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{m}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;   匹配前一个字符m次
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{n,m}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 匹配前一个字符n到m次，re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ab{1,3}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abb abc abbcbbb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) 结果&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ab&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;     匹配|左或|右的字符，re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc|ABC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ABCBabcCD&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).group() 结果&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ABC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;(...)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 分组匹配，re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(abc){2}a(123|456)c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abcabca456c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).group() 结果 abcabca456c
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;常用的正则表达式1&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_ceb64f4a-90b3-47f4-8ac9-200c049f9b2a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ceb64f4a-90b3-47f4-8ac9-200c049f9b2a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ceb64f4a-90b3-47f4-8ac9-200c049f9b2a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    只从字符开头匹配，re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\Aabc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexabc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) 是匹配不到的
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\Z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;    匹配字符结尾，同$
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    匹配数字0-9
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;    匹配非数字
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    匹配[A-Za-z0-9&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\W&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    匹配非[A-Za-z0-9&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;     匹配空白字符、\t、\n、\r , re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\s+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ab\tc1\n3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).group() 结果 &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;常用的正则表达式2&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_4c5fe368-9c76-4e3e-9353-164eceea01a4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4c5fe368-9c76-4e3e-9353-164eceea01a4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4c5fe368-9c76-4e3e-9353-164eceea01a4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;(?P&amp;lt;name&amp;gt;...)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 分组匹配 re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(?P&amp;lt;province&amp;gt;[0-9]{4})(?P&amp;lt;city&amp;gt;[0-9]{2})(?P&amp;lt;birthday&amp;gt;[0-9]{4})&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;371481199306143242&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).groupdict(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;city&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) 结果{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;province&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3714&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;city&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;birthday&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1993&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;分组匹配身份证号&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_c7ba0085-e499-4385-b72b-17299fb1fe5d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;五种&lt;img id=&quot;code_img_opened_c7ba0085-e499-4385-b72b-17299fb1fe5d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c7ba0085-e499-4385-b72b-17299fb1fe5d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;re.match 从头开始匹配
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;re.search 匹配包含
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;re.findall 把所有匹配到的字符放到以列表中的元素返回
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;re.splitall 以匹配到的字符当做列表分隔符
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; re.sub      匹配字符并替换
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;匹配语法&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_f30d4783-a8ef-40b6-bf34-268187ad9f05&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;三种&lt;img id=&quot;code_img_opened_f30d4783-a8ef-40b6-bf34-268187ad9f05&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f30d4783-a8ef-40b6-bf34-268187ad9f05&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;re.I(re.IGNORECASE): 忽略大小写（括号内是完整写法，下同）
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; M(MULTILINE): 多行模式，改变&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;和&lt;span&gt;'&lt;/span&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;的行为（参见上图）
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; S(DOTALL): 点任意匹配模式，改变&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;的行为
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;匹配模式&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;下面来看看实例操作：（命令行操作）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;&lt;img id=&quot;code_img_closed_c55c4062-6a93-479b-a150-282cc6cff780&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c55c4062-6a93-479b-a150-282cc6cff780&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c55c4062-6a93-479b-a150-282cc6cff780&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;91&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^Kanghui&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kanghui123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(0, 7), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Kanghui&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;            
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这是匹配到的情况,如果匹配不到呢？是没有反应的。就是none&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^aKanghui&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kanghui123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^aKanghui&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kanghui123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;查看匹配内容&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; res =re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^Kanghui&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kanghui123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; res.group()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Kanghui&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;现在这样还没用到正则，那么接下来~我要把后面的数字也匹配进来&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; res =re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^Kang\d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; res.group()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Kang1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;现在只有一个数字，多个数字就再加一个+&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; res =re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^Kang\d+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; res.group()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Kang123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;接下来开始正式使用正则表示式符号&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^.\d+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^.\d+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这样为什么没有反应呢？原因是因为    ^匹配字符开头,    .默认匹配除\n之外的任意一个字符    一个字符之后就是数字所以不行&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^.+\d+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(0, 13), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Kang123hui123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;24&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^.+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(0, 13), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Kang123hui123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;26&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(0, 13), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Kang123hui123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;28&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(0, 1), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;K&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;30&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^K.+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(0, 13), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Kang123hui123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果我只想要数字中间的部分呢?&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^h.+i&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui321&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)                &lt;span&gt;#&lt;/span&gt;&lt;span&gt;^匹配字符开头&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;h.+i&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui321&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(7, 10), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hui&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;re模块引入&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56.5&quot;&gt;&lt;img id=&quot;code_img_closed_553dc86a-aaf1-43d2-865f-72dcabc70f41&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_553dc86a-aaf1-43d2-865f-72dcabc70f41&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_553dc86a-aaf1-43d2-865f-72dcabc70f41&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;108&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^h.+i&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui321&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;h.+i&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui321&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(7, 10), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hui&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui321a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(14, 14), match=&lt;span&gt;''&lt;/span&gt;&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui321a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(13, 14), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt; 8&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.+a$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui321a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(0, 14), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Kang123hui321a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;10&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.+a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui321a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(0, 14), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Kang123hui321a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;12&lt;/span&gt; 这样看起来$貌似没有什么用，因为.+&lt;span&gt;是匹配任意字符。
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;h[a-z]+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui321a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(7, 10), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hui&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;15&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;h[a-z]+i&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui321i&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(7, 10), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hui&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;17&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;h[a-z]+i$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123hui321i&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;h[a-zA-Z]+i&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kang123huiKAnghui321i&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(7, 17), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;huiKAnghui&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;20&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#.+#&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123#hello#&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(3, 10), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#hello#&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;22&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaa?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexaaa&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(4, 7), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;aaa&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;24&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaa?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aalexaaa&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(0, 2), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;aa&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;26&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aal?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aalexaaa&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(0, 3), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;aal&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;28&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aal?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaexaaa&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(0, 2), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;aa&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;30&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[0-9]{3}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a8l26e456x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(6, 9), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;32&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[0-9]{1,3}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a8l26e456x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(1, 2), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果想要匹配所有的数字呢？用findall试试：&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;re.search&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51.5&quot;&gt;&lt;img id=&quot;code_img_closed_3627cbee-0c99-4212-8196-0e490e4944c8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3627cbee-0c99-4212-8196-0e490e4944c8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3627cbee-0c99-4212-8196-0e490e4944c8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;98&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[0-9]{1,3}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a8l26e456x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(1, 2), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[0-9]{1,2}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a8l26e456x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[0-9]{1,3}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a8l26e456x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc|ABC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ABCabcCDE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(0, 3), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ABC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt; 9&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc|ABC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ABCabcCDE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).group()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ABC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc|ABC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ABCabcCDE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).group()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;Traceback (most recent call last):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;   File &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;stdin&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line 1, &lt;span&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
&lt;span&gt;14&lt;/span&gt; AttributeError: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; object has no attribute &lt;span&gt;'&lt;/span&gt;&lt;span&gt;group&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc|ABC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ABCabcCDE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ABC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(abc){2}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subjectabccccabc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(abc){2}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subjectabccccabcabc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(13, 19), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abcabc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;20&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(abc){2}\|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subjectabccccabcabc|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(13, 20), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abcabc|&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;22&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(abc){2}\|\|=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subjectabccccabcabc||=||=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(13, 22), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abcabc||=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;24&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\D+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123#abc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(3, 7), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;26&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\s+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123#abc \r\n       &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &amp;lt;_sre.SRE_Match object; span=(7, 11), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \r\n\t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;re.findall&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_8ced723f-bc09-4fcf-818e-742fd5bb5edd&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8ced723f-bc09-4fcf-818e-742fd5bb5edd&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8ced723f-bc09-4fcf-818e-742fd5bb5edd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[0-9]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc12de3f45g6HGD&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;de&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;HGD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[0-9]+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc12de3f45g6HGD&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;de&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;HGD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;re.split&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_5dfc6c56-734d-4d4d-921a-8f6e23d1279c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5dfc6c56-734d-4d4d-921a-8f6e23d1279c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5dfc6c56-734d-4d4d-921a-8f6e23d1279c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.sub(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[0-9]+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc12de3f45g6HGD&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc|de|f|g|HGD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.sub(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[0-9]+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc12de3f45g6HGD&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,count=2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc|de|f45g6HGD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;re.sub&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;最后来个使用性的例子：身份证号码的每个数字都代表着什么你知道吗？&lt;/p&gt;
&lt;p&gt;科普：&lt;/p&gt;
&lt;p class=&quot;title&quot;&gt;身份证号码编排规则(18位身份证号码)&lt;/p&gt;
&lt;p&gt;公民身份证号码是特征组合码，由17位数字本体码和1位校验码组成。前1、2位数字表示：所在省份的代码；第3、4位数字表示：所在城市的代码；第5、 6位数字表示：所在区县的代码；第7~14位数字表示：出生年、月、日；第15、16位数字表示：所在地的派出所的代码；第17位数字表示性别：奇数表示男性，偶数表示女性；第18位数字是校检码：用来检验身份证号码的正确性，校检码由0~9的数字、及X表示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_0f4237eb-092e-4080-a364-3e45c3d29cc4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0f4237eb-092e-4080-a364-3e45c3d29cc4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0f4237eb-092e-4080-a364-3e45c3d29cc4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(?P&amp;lt;province&amp;gt;[0-9]{2})(?P&amp;lt;city&amp;gt;[0-9]{2})(?P&amp;lt;county&amp;gt;[0-9]{2})(?P&amp;lt;birthday&amp;gt;[0-9]{4})&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;412727199511282319&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).groupdict(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;city&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;province&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;city&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;county&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;birthday&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1995&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;通过正则取出身份信息&lt;/span&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5 练习（开发一个简单的python计算器）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;需求：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1实现加减乘除和括号优先级的解析&lt;br/&gt;2用户输入1-2*（（60-30）+（40/5）*）等类的公式后，必须自己解析里面的运算符号，运算后得出结果，结果必须与真实计算器一致。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56.5&quot;&gt;&lt;img id=&quot;code_img_closed_a0e12127-d735-4c43-bed2-83b0d030e7fc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a0e12127-d735-4c43-bed2-83b0d030e7fc&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a0e12127-d735-4c43-bed2-83b0d030e7fc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;108&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;该计算器思路：
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;    1、递归寻找表达式中只含有 数字和运算符的表达式，并计算结果
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;    2、由于整数计算会忽略小数，所有的数字都认为是浮点型操作，以此来保留小数
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;使用技术：
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;    1、正则表达式
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;    2、递归
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;  
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;执行流程如下：
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;******************** 请计算表达式： 1 - 2 * ( (60-30 +(-40.0/5) * (9-2*5/3 + 7 /3*99/4*2998 +10 * 568/14 )) - (-4*3)/ (16-3*2) ) ********************
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;before： ['1-2*((60-30+(-40.0/5)*(9-2*5/3+7/3*99/4*2998+10*568/14))-(-4*3)/(16-3*2))']
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;-40.0/5=-8.0
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;after： ['1-2*((60-30+-8.0*(9-2*5/3+7/3*99/4*2998+10*568/14))-(-4*3)/(16-3*2))']
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;========== 上一次计算结束 ==========
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;before： ['1-2*((60-30+-8.0*(9-2*5/3+7/3*99/4*2998+10*568/14))-(-4*3)/(16-3*2))']
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;9-2*5/3+7/3*99/4*2998+10*568/14=173545.880953
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;after： ['1-2*((60-30+-8.0*173545.880953)-(-4*3)/(16-3*2))']
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;========== 上一次计算结束 ==========
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;before： ['1-2*((60-30+-8.0*173545.880953)-(-4*3)/(16-3*2))']
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;60-30+-8.0*173545.880953=-1388337.04762
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;after： ['1-2*(-1388337.04762-(-4*3)/(16-3*2))']
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;========== 上一次计算结束 ==========
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;before： ['1-2*(-1388337.04762-(-4*3)/(16-3*2))']
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;-4*3=-12.0
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;after： ['1-2*(-1388337.04762--12.0/(16-3*2))']
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;========== 上一次计算结束 ==========
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;before： ['1-2*(-1388337.04762--12.0/(16-3*2))']
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;16-3*2=10.0
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;after： ['1-2*(-1388337.04762--12.0/10.0)']
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;========== 上一次计算结束 ==========
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;before： ['1-2*(-1388337.04762--12.0/10.0)']
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;-1388337.04762--12.0/10.0=-1388335.84762
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;after： ['1-2*-1388335.84762']
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;========== 上一次计算结束 ==========
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;我的计算结果： 2776672.69524
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;  
&lt;span&gt; 40&lt;/span&gt;  
&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; re
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;  
&lt;span&gt; 43&lt;/span&gt;  
&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; compute_mul_div(arg):
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt; 操作乘除
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;    :param expression:表达式
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;    :return:计算结果
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;  
&lt;span&gt; 50&lt;/span&gt;     val =&lt;span&gt; arg[0]
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;     mch = re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d+\.*\d*[\*\/]+[\+\-]?\d+\.*\d*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, val)
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; mch:
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;     content = re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d+\.*\d*[\*\/]+[\+\-]?\d+\.*\d*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, val).group()
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;  
&lt;span&gt; 56&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; len(content.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))&amp;gt;1&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;         n1, n2 = content.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         value = float(n1) *&lt;span&gt; float(n2)
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         n1, n2 = content.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;         value = float(n1) /&lt;span&gt; float(n2)
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;  
&lt;span&gt; 63&lt;/span&gt;     before, after = re.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d+\.*\d*[\*\/]+[\+\-]?\d+\.*\d*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, val, 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;     new_str = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s%s%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (before,value,after)
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;     arg[0] =&lt;span&gt; new_str
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;    compute_mul_div(arg)
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;  
&lt;span&gt; 68&lt;/span&gt;  
&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; compute_add_sub(arg):
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt; 操作加减
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;    :param expression:表达式
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;    :return:计算结果
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; arg[0].&lt;span&gt;__contains__&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;or&lt;/span&gt; arg[0].&lt;span&gt;__contains__&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;or&lt;/span&gt; arg[0].&lt;span&gt;__contains__&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;or&lt;/span&gt; arg[0].&lt;span&gt;__contains__&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;             arg[0] = arg[0].replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;             arg[0] = arg[0].replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;             arg[0] = arg[0].replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;             arg[0] = arg[0].replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;  
&lt;span&gt; 83&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; arg[0].startswith(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;         arg[1] += 1
&lt;span&gt; 85&lt;/span&gt;         arg[0] = arg[0].replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;         arg[0] = arg[0].replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;         arg[0] = arg[0].replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;         arg[0] = arg[0][1&lt;span&gt;:]
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;     val =&lt;span&gt; arg[0]
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;     mch = re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d+\.*\d*[\+\-]{1}\d+\.*\d*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, val)
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; mch:
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;     content = re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d+\.*\d*[\+\-]{1}\d+\.*\d*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, val).group()
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; len(content.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))&amp;gt;1&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;         n1, n2 = content.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;         value = float(n1) +&lt;span&gt; float(n2)
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;         n1, n2 = content.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;         value = float(n1) -&lt;span&gt; float(n2)
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;  
&lt;span&gt;101&lt;/span&gt;     before, after = re.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d+\.*\d*[\+\-]{1}\d+\.*\d*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, val, 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;     new_str = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s%s%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (before,value,after)
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;     arg[0] =&lt;span&gt; new_str
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;    compute_add_sub(arg)
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;  
&lt;span&gt;106&lt;/span&gt;  
&lt;span&gt;107&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; compute(expression):
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt; 操作加减乘除
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;    :param expression:表达式
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;    :return:计算结果
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;     inp =&lt;span&gt; [expression,0]
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;  
&lt;span&gt;114&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 处理表达式中的乘除&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt; &lt;span&gt;    compute_mul_div(inp)
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;  
&lt;span&gt;117&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 处理&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt; &lt;span&gt;    compute_add_sub(inp)
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; divmod(inp[1],2)[1] == 1&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;         result =&lt;span&gt; float(inp[0])
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;         result = result * -1
&lt;span&gt;122&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;         result =&lt;span&gt; float(inp[0])
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;  
&lt;span&gt;126&lt;/span&gt;  
&lt;span&gt;127&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; exec_bracket(expression):
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt; 递归处理括号，并计算
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;    :param expression: 表达式
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;    :return:最终计算结果
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果表达式中已经没有括号，则直接调用负责计算的函数，将表达式结果返回，如：2*1-82+444&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\(([\+\-\*\/]*\d+\.*\d*){2,}\)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, expression):
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;         final =&lt;span&gt; compute(expression)
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; final
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取 第一个 只含有 数字/小数 和 操作符 的括号&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如：&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;    ['1-2*((60-30+(-40.0/5)*(9-2*5/3+7/3*99/4*2998+10*568/14))-(-4*3)/(16-3*2))']&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;    找出：(-40.0/5)&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt;     content = re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\(([\+\-\*\/]*\d+\.*\d*){2,}\)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, expression).group()
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;  
&lt;span&gt;142&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 分割表达式，即：&lt;/span&gt;
&lt;span&gt;143&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将['1-2*((60-30+(-40.0/5)*(9-2*5/3+7/3*99/4*2998+10*568/14))-(-4*3)/(16-3*2))']&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 分割更三部分：['1-2*((60-30+(    (-40.0/5)      *(9-2*5/3+7/3*99/4*2998+10*568/14))-(-4*3)/(16-3*2))']&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt;     before, nothing, after = re.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\(([\+\-\*\/]*\d+\.*\d*){2,}\)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, expression, 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;  
&lt;span&gt;147&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;before：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,expression
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;     content = content[1:len(content)-1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;  
&lt;span&gt;150&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算，提取的表示 (-40.0/5)，并活的结果，即：-40.0/5=-8.0&lt;/span&gt;
&lt;span&gt;151&lt;/span&gt;     ret =&lt;span&gt; compute(content)
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;  
&lt;span&gt;153&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s=%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;( content, ret)
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;  
&lt;span&gt;155&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将执行结果拼接，['1-2*((60-30+(      -8.0     *(9-2*5/3+7/3*99/4*2998+10*568/14))-(-4*3)/(16-3*2))']&lt;/span&gt;
&lt;span&gt;156&lt;/span&gt;     expression = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s%s%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt;(before, ret, after)
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;after：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,expression
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;*10,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;上一次计算结束&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;*10
&lt;span&gt;159&lt;/span&gt;  
&lt;span&gt;160&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 循环继续下次括号处理操作，本次携带者的是已被处理后的表达式，即：&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ['1-2*((60-30+   -8.0  *(9-2*5/3+7/3*99/4*2998+10*568/14))-(-4*3)/(16-3*2))']&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt;  
&lt;span&gt;163&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如此周而复始的操作，直到表达式中不再含有括号&lt;/span&gt;
&lt;span&gt;164&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; exec_bracket(expression)
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;  
&lt;span&gt;166&lt;/span&gt;  
&lt;span&gt;167&lt;/span&gt;  
&lt;span&gt;168&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用 __name__ 的目的：&lt;/span&gt;
&lt;span&gt;169&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;   只有执行 python index.py 时，以下代码才执行&lt;/span&gt;
&lt;span&gt;170&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;   如果其他人导入该模块，以下代码不执行&lt;/span&gt;
&lt;span&gt;171&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;print '*'*20,&quot;请计算表达式：&quot;, &quot;1 - 2 * ( (60-30 +(-40.0/5) * (9-2*5/3 + 7 /3*99/4*2998 +10 * 568/14 )) - (-4*3)/ (16-3*2) )&quot; ,'*'*20&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;inpp = '1 - 2 * ( (60-30 +(-40.0/5) * (9-2*5/3 + 7 /3*99/4*2998 +10 * 568/14 )) - (-4*3)/ (16-3*2) ) '&lt;/span&gt;
&lt;span&gt;174&lt;/span&gt;     inpp = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1-2*-30/-12*(-20+200*-3/-200*-300-100)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;175&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;inpp = &quot;1-5*980.0&quot;&lt;/span&gt;
&lt;span&gt;176&lt;/span&gt;     inpp = re.sub(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\s*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;&lt;span&gt;,inpp)
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 表达式保存在列表中&lt;/span&gt;
&lt;span&gt;178&lt;/span&gt;     result =&lt;span&gt; exec_bracket(inpp)
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt; result
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;6 小结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;做一名程序猿是真的不容易。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最近才觉得好多东西要学啊，亚历山大~~！！！自己就像一张白纸，慢慢填~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;坚持~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为什么明明才二十几岁，就感觉一辈子好像就这样了呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;别忘了看书。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;我是尾巴~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这次推荐一个远程控制电脑的黑科技： &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/SE5QGzwJhA1lKbVuhS9_bg&quot; target=&quot;_blank&quot;&gt;https://mp.weixin.qq.com/s/SE5QGzwJhA1lKbVuhS9_bg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽不才，才要坚持~&lt;/p&gt;

</description>
<pubDate>Thu, 16 Aug 2018 15:48:00 +0000</pubDate>
<dc:creator>m1racle</dc:creator>
<og:description>C语言基础学习PYTHON——基础学习D05 20180815内容纲要： 1 模块 2 包 3 import的本质 4 内置模块详解 （1）time&amp;datetime （2）datetime</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangkanghui/p/9480500.html</dc:identifier>
</item>
<item>
<title>python字符串拼接相关 - 心痛是尾调</title>
<link>http://www.cnblogs.com/tallme/p/9490848.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tallme/p/9490848.html</guid>
<description>&lt;p&gt;#字符串拼接&lt;br/&gt;#str.join(元组、列表、字典、字符串) 之后生成的只能是字符串。&lt;br/&gt;str = &quot;-&quot;;&lt;br/&gt;seq = (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;); # 字符串序列&lt;br/&gt;sqr=['a','b','c','sss']#list&lt;br/&gt;ssr=str.join(sqr)&lt;br/&gt;print('='.join(ssr))&lt;/p&gt;
&lt;p&gt;print (str.join(sqr));&lt;br/&gt;print (str.join(seq));&lt;/p&gt;
&lt;p&gt;seq = {'hello':'nihao','good':2,'boy':3,'doiido':4}#对象&lt;br/&gt;print('-'.join(seq))&lt;/p&gt;
&lt;p&gt;#打印字符&lt;br/&gt;print (&quot;His name is %s&quot;%(&quot;Aviad&quot;))#1. 打印字符串&lt;br/&gt;#http://www.cnblogs.com/plwang1990/p/3757549.html&lt;br/&gt;print (&quot;He is %d years old&quot;%(25))#2.打印整数&lt;br/&gt;print (&quot;His height is %f m&quot;%(1.83))#3.打印浮点数&lt;br/&gt;print (&quot;His height is %.2f m&quot;%(1.83))#4.打印浮点数（指定保留小数点位数）&lt;br/&gt;print (&quot;Name:%10s Age:%8d Height:%8.2f&quot;%(&quot;Aviad&quot;,25,1.83))#5.指定占位符宽度&lt;br/&gt;print (&quot;Name:%-10s Age:%-8d Height:%-8.2f&quot;%(&quot;Aviad&quot;,25,1.83))#6.指定占位符宽度（左对齐）&lt;br/&gt;print (&quot;Name:%-10s Age:%08d Height:%08.2f&quot;%(&quot;Aviad&quot;,25,1.83))#7.指定占位符（只能用0当占位符？）&lt;/p&gt;
</description>
<pubDate>Thu, 16 Aug 2018 15:43:00 +0000</pubDate>
<dc:creator>心痛是尾调</dc:creator>
<og:description>#字符串拼接#str.join(元组、列表、字典、字符串) 之后生成的只能是字符串。str = &quot;-&quot;;seq = (&quot;a&quot;, &quot;b&quot;, &amp;</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tallme/p/9490848.html</dc:identifier>
</item>
<item>
<title>Win10+CUDA9.0+cuDNN7.2 下载 安装 配置 - youngzn</title>
<link>http://www.cnblogs.com/youngzn/p/9490587.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/youngzn/p/9490587.html</guid>
<description>&lt;p&gt;安装CUDA前须安装VS2015&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/yuyushikuan/article/details/79067484&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/yuyushikuan/article/details/79067484&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/fengbingchun/article/details/53892997&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/fengbingchun/article/details/53892997&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.下载&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CUDA9.0下载链接（1.33GB）：&lt;a href=&quot;https://developer.nvidia.com/cuda-90-download-archive?target_os=Windows&amp;amp;target_arch=x86_64&amp;amp;target_version=10&amp;amp;target_type=exenetwork&quot; target=&quot;_blank&quot;&gt;https://developer.nvidia.com/cuda-90-download-archive?target_os=Windows&amp;amp;target_arch=x86_64&amp;amp;target_version=10&amp;amp;target_type=exenetwork&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;cuDNN7.2下载链接（需要注册才能下载，我微信登录的）（cuda9.0对应7.2的版本）（171MB）：&lt;a href=&quot;https://developer.nvidia.com/rdp/cudnn-download&quot; target=&quot;_blank&quot;&gt;https://developer.nvidia.com/rdp/cudnn-download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.安装：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CUDA是一个exe文件，安装过程就是一直点击下一步，5分钟左右。默认安装在C:\Program Files\NVIDIA GPU Computing Toolkit\&lt;/p&gt;
&lt;p&gt;cuDNN是个zip压缩文件，安装过程是将cuDNN的三个文件复制到CUDA中。具体过程：将解压到C:\Program Files\cudnn-9.0-windows10-x64-v7.2.1.38 后，将cuDNN的三个文件（cudnn64_7.dll ，cudnn.h ，cudnn.lib ）复制粘贴到CUDA相同的目录下。&lt;/p&gt;
&lt;p&gt;复制cudnn目录中的文件：&lt;/p&gt;
&lt;p&gt;C:\Program Files\cudnn-9.0-windows10-x64-v7.2.1.38\cuda\bin&lt;/p&gt;
&lt;p&gt;C:\Program Files\cudnn-9.0-windows10-x64-v7.2.1.38\cuda\include&lt;/p&gt;
&lt;p&gt;C:\Program Files\cudnn-9.0-windows10-x64-v7.2.1.38\cuda\lib\x64&lt;/p&gt;
&lt;p&gt;到cuda对应目录中：&lt;/p&gt;
&lt;p&gt;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\bin&lt;/p&gt;
&lt;p&gt;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\include&lt;/p&gt;
&lt;p&gt;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\lib\x64&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.环境变量配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CUDA:不用配置&lt;/p&gt;
&lt;p&gt;cuDNN:将C:\Program Files\cudnn-9.0-windows10-x64-v7.2.1.38\cuda\bin 添加到path中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;疑问：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.解压后的cuDNN文件内容已经放到CUDA中去了，那解压的文件还有什么用吗？&lt;/p&gt;
&lt;p&gt;2.使用nvcc -V 可以判断自己是否安装了CUDA，如何判断cuDNN安装好了呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/604263/201808/604263-20180816223528795-489561962.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 16 Aug 2018 15:41:00 +0000</pubDate>
<dc:creator>youngzn</dc:creator>
<og:description>安装CUDA前须安装VS2015 参考： https://blog.csdn.net/yuyushikuan/article/details/79067484 https://blog.csdn.ne</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/youngzn/p/9490587.html</dc:identifier>
</item>
<item>
<title>【模板】两类素数筛详解 - WJEMail</title>
<link>http://www.cnblogs.com/NSD-email0820/p/9490828.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NSD-email0820/p/9490828.html</guid>
<description>&lt;p&gt;本文写于email同学被&lt;span&gt;巨水的&lt;/span&gt;素数筛教做人之后。&lt;/p&gt;
&lt;p&gt;会提到两种筛法：埃拉托色尼筛法，线性筛法。&lt;/p&gt;


&lt;p&gt;1.对于一个合数x,必有一个范围在2~√x 的因数。（显然）&lt;/p&gt;
&lt;p&gt;2.任何一个大于1的自然数都能被唯一分解有限个质数的乘积，如 X=P&lt;sub&gt;1 &lt;/sub&gt;&lt;sup&gt;a1 &lt;/sup&gt; *P&lt;sub&gt;2&lt;/sub&gt;&lt;sup&gt;a2 &lt;/sup&gt; *······* Pn&lt;sub&gt; &lt;/sub&gt;&lt;sup&gt;an  &lt;/sup&gt;其中P为质数，a为指数.&lt;/p&gt;

&lt;p&gt;字面意思，根据第一条性质，我们枚举2~~√n所有数，用n去试着除以，若有能整除的n为合数，若都不能整除，n就是质数了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; prime(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n)
{
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;2&lt;/span&gt;;i*i&amp;lt;=n;i++&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!(n%&lt;span&gt;i))
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;时间复杂度O：（√n）&lt;/p&gt;

&lt;p&gt;这种筛法应该是是&lt;strong&gt;效率相对比较高&lt;/strong&gt;，而且&lt;strong&gt;很好理解&lt;/strong&gt;，&lt;strong&gt;用得最多&lt;/strong&gt;的筛法。&lt;/p&gt;
&lt;p&gt;试除法是用原数去尝试诸多因子，那对于求一个范围（比如1~N）的所有素数，显然上述方法是不可取的。&lt;/p&gt;
&lt;p&gt;那我们反向思考，尝试枚举因子去排除素数（即标记合数）。&lt;/p&gt;
&lt;p&gt;枚举2~N，并且用2~N的倍数去标记合数，比如枚举到i，那2*i,3*i,4*i······,全部都标记为合数，直到k*i&amp;gt;N。&lt;/p&gt;
&lt;p&gt;扫到数x时，看它是否有合数标记，如果没有，则说明2~x-1的数中，都没有它的因数，根据性质1，显然x-1&amp;gt;√x（x&amp;gt;2），所以x为质数。&lt;/p&gt;
&lt;p&gt;显然，一个合数可能被多个小因数标记，这就是优化的下手处。&lt;/p&gt;
&lt;p&gt;我们如果不从2*i开始筛，而从i*i开始筛是否可行呢？&lt;/p&gt;
&lt;p&gt;显然可行。因为我们扫到2的之后就已经用2筛完了所有2的倍数，扫到3的之后已经筛完了所有2，3的倍数，扫到4的之后已经筛完了所有2，3 ，4的倍数······&lt;/p&gt;
&lt;p&gt;所以扫到i时，2~i-1的倍数已经全部被筛了，没必要再筛i的2~i-1倍的数，可以直接从i&lt;sup&gt;2&lt;/sup&gt;开始筛了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; primes(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n)
{
    memset(v,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;(v));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;假设全是素数，无合数标记 &lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;2&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;v[i])
        {
            prime[&lt;/span&gt;++cnt]=&lt;span&gt;i;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=i*i;j&amp;lt;=n;j+=&lt;span&gt;i)
            v[j]&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;; 
        }
    }&lt;br/&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;时间复杂度：O（∑ N/p ) =O（N loglogN ),p为小于N的质数 。接近线性效率，而且比较起线性筛是更灵活的（最后的例题会提到）&lt;/p&gt;

&lt;p&gt;优化后的埃拉托色尼筛也有重复筛到数的情况，比如2,3都会筛12，2和4都会筛到24，要保证线性效率，就必须让每个数只被筛一次&lt;/p&gt;
&lt;p&gt;我们不能让12=2*6,12=3*4发生，只能让12=2*2*3发生。&lt;/p&gt;
&lt;p&gt;所以我们需要将每个合数用它最小的质因子筛去。&lt;/p&gt;
&lt;p&gt;标记合数时，我们只向现有的数中乘上一个质因子，这相当于合数的质因子从小到大累积。（意思是现在只能用现在扫到的这个数乘筛出来的素数来筛后面的素数）&lt;/p&gt;
&lt;p&gt;因为找出筛的素数一定是最小素数，所以对于扫到的合数，它只能筛到出现它的约数之前的数的它的倍数。质数则能筛掉2*x~x*x。（小于x&lt;sup&gt;2&lt;/sup&gt;的所有x的质数倍）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前面说得太抽象了，不理解不要紧&lt;/strong&gt;，模拟一下。&lt;/p&gt;
&lt;p&gt;prime[]数组装素数,v[i]是筛掉i的那个最小质因数,若无标记说明是质数&lt;/p&gt;
&lt;p&gt;1、扫到 2，v[2]无标记，赋值 ：v[2]=2,prime[1]=2.&lt;/p&gt;
&lt;p&gt;遍历prime，用2*prime[j]，可以筛掉4. 赋值： v[4]=2.&lt;/p&gt;
&lt;p&gt;2、扫到3，v[3]无标记，赋值： v[3]=3,prime[2]=3.&lt;/p&gt;
&lt;p&gt;遍历prime，用3*prime[j]，可以筛掉6,9 .赋值： v[6]=2，v[9]=3&lt;/p&gt;
&lt;p&gt;3、扫到 4，v[4]有标记&lt;/p&gt;
&lt;p&gt;遍历prime，用4*prime[j]，只能筛掉8，赋值：v[8]=2（&lt;strong&gt;不能筛12&lt;/strong&gt;！！即便有3这个素数。因为3大于4的最小质因数2了，用3*4筛就违背了2*3*3的原理，这里能被3*4筛掉的12，后来也可以被2*6筛到，保证了筛到12的是最小质因数2）&lt;/p&gt;
&lt;p&gt;4、扫到5，v[5]无标记，赋值： v[5]=5,prime[3]=5.&lt;/p&gt;
&lt;p&gt;遍历prime，用5*prime[j]，可以筛掉10,15,25 .赋值： v[10]=2，v[15]=3，v[25]=5，&lt;/p&gt;
&lt;p&gt;大概就是这样了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; primes(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n)
{
    memset(v,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;(v));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;假设全是素数，无合数标记 &lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;2&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;v[i])
        {
            prime[&lt;/span&gt;++cnt]=&lt;span&gt;i;
            v[i]&lt;/span&gt;=&lt;span&gt;i;
        }
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;1&lt;/span&gt;;j&amp;lt;=cnt;j++&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(prime[j]&amp;gt;v[i]||prime[j]*i&amp;gt;n)&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;出现了比i的最小质因数还小的质数（对于4来说出现了3） &lt;/span&gt;
            v[prime[j]*i]=&lt;span&gt;prime[j];
        }    
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=cnt;i++&lt;span&gt;)
        cout&lt;/span&gt;&amp;lt;&amp;lt;prime[i]&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;题意&lt;/h3&gt;
&lt;p&gt;求出范围[k,n]内的合数个数，并且求出筛掉每个合数的最小素数之和，答案对998244353取模&lt;/p&gt;
&lt;p&gt;数据规模&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1459836/201808/1459836-20180816230444647-1613219686.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;分析&lt;/h3&gt;
&lt;p&gt;数据规模1e12太大了，线性筛也无法处理，但是区间大小只有1e7，所以我们可以用线性筛+埃拉托色尼筛&lt;/p&gt;
&lt;p&gt;用线性筛预处理出1e6范围内的所有素数，再用这些素数去做埃拉托色尼筛。&lt;/p&gt;
&lt;p&gt;为什么不能都做线性筛？因为线性筛必须完全记录了筛每一个数的那个素数，不能有任何无操作的空白，而埃拉托色尼筛就没有这类限制，比较灵活，直接把筛出来的素数用来继续筛。&lt;/p&gt;
&lt;p&gt;注意数组开不下，需要移一下位。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
#include&amp;lt;bits/stdc++.h&amp;gt;
&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; N 10000100
&lt;span&gt;#define&lt;/span&gt; ll long long
&lt;span&gt;const&lt;/span&gt; ll limit=&lt;span&gt;2000000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; ll  mod=&lt;span&gt;998244353&lt;/span&gt;&lt;span&gt;;
ll prime[N],v[N];
ll n,k,cnt,ans1,ans2;
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    cin&lt;/span&gt;&amp;gt;&amp;gt;k&amp;gt;&amp;gt;&lt;span&gt;n;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(ll i=&lt;span&gt;2&lt;/span&gt;;i&amp;lt;=limit;i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;v[i])
        {
            v[i]&lt;/span&gt;=&lt;span&gt;i;
            prime[&lt;/span&gt;++cnt]=&lt;span&gt;i;
        }
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(ll j=&lt;span&gt;1&lt;/span&gt;;j&amp;lt;=cnt;j++&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(prime[j]&amp;gt;v[i]||prime[j]*i&amp;gt;limit)&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            v[prime[j]&lt;/span&gt;*i]=&lt;span&gt;prime[j];
        }
    } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;线性筛预处理 &lt;/span&gt;
    memset(v,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(v));
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(ll i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=cnt;i++&lt;span&gt;)
    {
        ll st&lt;/span&gt;=max((ll)&lt;span&gt;1&lt;/span&gt;,(k-&lt;span&gt;1&lt;/span&gt;)/prime[i])*prime[i]+prime[i];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算出起始位置 &lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;(ll j=st;j&amp;lt;=n;j+=&lt;span&gt;prime[i])
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!v[j-&lt;span&gt;k])
            {
                v[j&lt;/span&gt;-k]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                ans1&lt;/span&gt;++&lt;span&gt;;
                ans2&lt;/span&gt;=(ans2+prime[i])%&lt;span&gt;mod;
            }    
        }
    }
    cout&lt;/span&gt;&amp;lt;&amp;lt;ans1&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;ans2;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于素数筛的整理到此告一段落，比较基础的知识，两种筛法各有好处，线性筛更快，但是埃拉托色尼筛可以节约空间，也比较适合做区间的跨度不大，但区间本身左右端点数值很大的题目。&lt;/p&gt;

</description>
<pubDate>Thu, 16 Aug 2018 15:38:00 +0000</pubDate>
<dc:creator>WJEMail</dc:creator>
<og:description>前言 本文写于email同学被巨水的素数筛教做人之后。 会提到两种筛法：埃拉托色尼筛法，线性筛法。 知识储备 1.对于一个合数x,必有一个范围在2~√x 的因数。（显然） 2.任何一个大于1的自然数都</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NSD-email0820/p/9490828.html</dc:identifier>
</item>
</channel>
</rss>