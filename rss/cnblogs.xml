<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>依赖注入[5]: 创建一个简易版的DI框架[下篇] - Artech</title>
<link>http://www.cnblogs.com/artech/p/net-core-di-05.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/artech/p/net-core-di-05.html</guid>
<description>&lt;p&gt;为了让读者朋友们能够对.NET Core DI框架的实现原理具有一个深刻而认识，我们采用与之类似的设计构架了一个名为Cat的DI框架。在《&lt;a href=&quot;https://www.cnblogs.com/artech/p/net-core-di-04.html&quot;&gt;依赖注入[4]: 创建一个简易版的DI框架[上篇]&lt;/a&gt;》中我们介绍了Cat的基本编程模式，接下来我们就来聊聊Cat的设计和实现。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;目录&lt;br/&gt;一、服务注册：ServiceRegistry&lt;br/&gt;二、DI容器：Cat&lt;br/&gt;三、扩展方法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于作为DI容器的Cat对象总是利用预先添加到服务注册来提供对应的服务实例，所以服务注册至关重要。如下所示的就是表示服务注册的&lt;strong&gt;ServiceRegistry&lt;/strong&gt;的定义，它具有三个核心属性（ServiceType、Lifetime和Factory）分别代表服务类型、生命周期模式和用来创建服务实例的工厂。最终用来创建服务实例的工厂体现为一个类型为Func&amp;lt;Cat,Type[], object&amp;gt;的委托对象，它具有的两个输入分别代表当前使用的Cat对象以及提供服务类型的&lt;strong&gt;泛型参数列表&lt;/strong&gt;，如果提供的服务类型并不是一个泛型类型，这个参数会指定为空的类型数组。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ServiceRegistry
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Type                         ServiceType { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Lifetime                     Lifetime { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Func&amp;lt;Cat,Type[], &lt;span&gt;object&lt;/span&gt;&amp;gt;    Factory { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; ServiceRegistry            Next { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ServiceRegistry(Type serviceType, Lifetime lifetime, Func&amp;lt;Cat,Type[], &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; factory)
    {
        ServiceType     &lt;/span&gt;=&lt;span&gt; serviceType;
        Lifetime        &lt;/span&gt;=&lt;span&gt; lifetime;
        Factory         &lt;/span&gt;=&lt;span&gt; factory;
    }
    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; IEnumerable&amp;lt;ServiceRegistry&amp;gt;&lt;span&gt; AsEnumerable()
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; list = &lt;span&gt;new&lt;/span&gt; List&amp;lt;ServiceRegistry&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; self = &lt;span&gt;this&lt;/span&gt;; self!=&lt;span&gt;null&lt;/span&gt;; self=&lt;span&gt; self.Next)
        {
            list.Add(self);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
我们将针对同一个服务类型（ServiceType属性相同）的多个ServiceRegistry组成一个&lt;strong&gt;链表&lt;/strong&gt;，作为相邻节点的两个ServiceRegistry对象通过&lt;strong&gt;Next&lt;/strong&gt;属性关联起来。我们为ServiceRegistry定义了一个AsEnumerable方法是它返回由当前以及后续节点组成的ServiceRegistry集合。如果当前ServiceRegistry为链表表头，那么这个方法返回链表所有的节点。

&lt;p&gt;在了解了表示服务注册的ServiceRegistry之后，我们来着重介绍表示DI容器的&lt;strong&gt;Cat&lt;/strong&gt;类型。如下面的代码片段所示，Cat同时实现了IServiceProvider和IDisposable接口，定义在前者中的GetService用于提供最终的服务实例。作为根容器的Cat对象通过公共构造函数创建，另一个内部构造函数则用来创建作为子容器的Cat对象，指定的Cat对象将作为父容器。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Cat : IServiceProvider, IDisposable
{
    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt;&lt;span&gt; Cat                                         _root;
    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; ConcurrentDictionary&amp;lt;Type, ServiceRegistry&amp;gt;&lt;span&gt;     _registries;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; ConcurrentDictionary&amp;lt;ServiceRegistry, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt;    _services;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; ConcurrentBag&amp;lt;IDisposable&amp;gt;&lt;span&gt;                      _disposables;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt;                                 _disposed;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Cat()
    {
        _registries   &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ConcurrentDictionary&amp;lt;Type, ServiceRegistry&amp;gt;&lt;span&gt;();
        _root         &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        _services     &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ConcurrentDictionary&amp;lt;ServiceRegistry, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt;();
        _disposables  &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ConcurrentBag&amp;lt;IDisposable&amp;gt;&lt;span&gt;();
    }
    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt;&lt;span&gt; Cat(Cat parent)
    {
        _root         &lt;/span&gt;=&lt;span&gt; parent._root;
        _registries   &lt;/span&gt;=&lt;span&gt; _root._registries;
        _services     &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ConcurrentDictionary&amp;lt;ServiceRegistry, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt;();
        _disposables  &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ConcurrentBag&amp;lt;IDisposable&amp;gt;&lt;span&gt;();
    }
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; EnsureNotDisposed()
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (_disposed)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ObjectDisposedException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cat&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }  
    ...
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
作为根容器的Cat对象通过&lt;strong&gt;_root&lt;/strong&gt;字段表示。&lt;strong&gt;_registries&lt;/strong&gt;字段返回的一个ConcurrentDictionary对象表示所有添加的服务注册，字典对象的Key和Value分别表示服务类型和ServiceRegistry链表。由当前Cat对象提供的非Transient服务实例保存在由&lt;strong&gt;_services&lt;/strong&gt;字段表示的一个ConcurrentDictionary对象上，该字典对象的Key表示创建服务实例所使用的ServiceRegistry对象。由于需要负责完成对提供服务实例的释放工作，所以我们需要将实现了IDisposable接口的服务实例保存在通过&lt;strong&gt;_disposables&lt;/strong&gt;字段表示的集合中。
&lt;p&gt;虽然我们为Cat定义了若干扩展方法来提供多种不同的服务注册，但是这些方法最终都会调用如下这个&lt;strong&gt;Register&lt;/strong&gt;方法，该方法会将提供的ServiceRegistry添加到&lt;strong&gt;_registries&lt;/strong&gt;字段表示的字典对象中。值得注意的是，不论我们是调用那个Cat对象的Register方法，指定的ServiceRegistry都会被添加到作为&lt;strong&gt;根容器&lt;/strong&gt;的Cat对象上。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Cat : IServiceProvider, IDisposable
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Cat Register(ServiceRegistry registry)
    {
        EnsureNotDisposed();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_registries.TryGetValue(registry.ServiceType, &lt;span&gt;out&lt;/span&gt; &lt;span&gt;var&lt;/span&gt;&lt;span&gt; existing))
        {
            _registries[registry.ServiceType] &lt;/span&gt;=&lt;span&gt; registry;
            registry.Next &lt;/span&gt;=&lt;span&gt; existing;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            _registries[registry.ServiceType] &lt;/span&gt;=&lt;span&gt; registry;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
}
...
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用来提供服务实例的核心操作实现在如下这个&lt;strong&gt;GetServiceCore&lt;/strong&gt;方法中。如下面的代码片段所示，我们在调用该方法的时候需要指定对应的ServiceRegistry和服务对象泛型参数。当该方法被执行的时候，对于&lt;strong&gt;Transient&lt;/strong&gt;生命周期模式，它会直接利用ServiceRegistry提供的工厂来创建服务实例，如果服务实例实现了&lt;strong&gt;IDisposable&lt;/strong&gt;接口，它会被添加到&lt;strong&gt;_disposables&lt;/strong&gt;字段表示的待释放服务实例列表中。对于&lt;strong&gt;Root&lt;/strong&gt;和&lt;strong&gt;Self&lt;/strong&gt;生命周期模式，该方法会先根据提供的ServiceRegistry判断是否对应的服务实例已经存在，存在的服务实例会直接作为返回值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Cat : IServiceProvider, IDisposable
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt; GetServiceCore(ServiceRegistry registry, Type[] genericArguments)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; serviceType =&lt;span&gt; registry.ServiceType;
        &lt;/span&gt;&lt;span&gt;object&lt;/span&gt; GetOrCreate(ConcurrentDictionary&amp;lt;ServiceRegistry, &lt;span&gt;object&lt;/span&gt;&amp;gt; services, ConcurrentBag&amp;lt;IDisposable&amp;gt;&lt;span&gt; disposables)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (services.TryGetValue(registry, &lt;span&gt;out&lt;/span&gt; &lt;span&gt;var&lt;/span&gt;&lt;span&gt; service))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; service;
            }
            service &lt;/span&gt;= registry.Factory(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, genericArguments);
            services[registry] &lt;/span&gt;=&lt;span&gt; service;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; disposable = service &lt;span&gt;as&lt;/span&gt;&lt;span&gt; IDisposable;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; !=&lt;span&gt; disposable)
            {
                disposables.Add(disposable);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; service;
        }
        &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (registry.Lifetime)
        {
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Lifetime.Root: &lt;span&gt;return&lt;/span&gt;&lt;span&gt; GetOrCreate(_root._services, _root._disposables);   
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Lifetime.Self: &lt;span&gt;return&lt;/span&gt;&lt;span&gt; GetOrCreate(_services, _disposables);
            &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; service = registry.Factory(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, genericArguments);
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; disposable = service &lt;span&gt;as&lt;/span&gt;&lt;span&gt; IDisposable;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; !=&lt;span&gt; disposable)
                    {
                        _disposables.Add(disposable);
                    }
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; service;
                }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
GetServiceCore方法只有在指定ServiceRegistry对应的服务实例不存在的情况下采用利用提供的工厂来创建服务实例，创建的服务实例会根据生命周期模式保存到作为根容器的Cat对象或者当前Cat对象上。如果提供的服务实例实现了IDisposable接口，在采用&lt;strong&gt;Root&lt;/strong&gt;生命周期模式下会被保存到作为&lt;strong&gt;根容器&lt;/strong&gt;的Cat对象的待释放列表中，如果生命周期模式为&lt;strong&gt;Self&lt;/strong&gt;，它会被添加到&lt;strong&gt;当前Cat&lt;/strong&gt;对象的待释放列表中。
&lt;p&gt;在实现的&lt;strong&gt;GetService&lt;/strong&gt;方法中，Cat会根据指定的服务类型找到对应的ServiceRegistry对象，并最终调用GetServiceCore方法来提供对应的服务实例。GetService方法会解决一些特殊服务提供问题，如果服务类型为&lt;strong&gt;Cat&lt;/strong&gt;或者&lt;strong&gt;IServiceProvider&lt;/strong&gt;，该方法返回的就是它自己。如果服务类型为&lt;strong&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/strong&gt;，GetService会根据泛型参数类型T找到所有的ServiceRegistry并利用它们来创建对应的服务实例，最终返回的是有这些服务实例组成的集合。除了这些，针对&lt;strong&gt;泛型&lt;/strong&gt;服务实例的提供也是在这个方法中解决的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Cat : IServiceProvider, IDisposable
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt; GetService(Type serviceType)
    {
        EnsureNotDisposed();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (serviceType == &lt;span&gt;typeof&lt;/span&gt;(Cat) || serviceType == &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(IServiceProvider))
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }
        ServiceRegistry registry;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (serviceType.IsGenericType &amp;amp;&amp;amp; serviceType.GetGenericTypeDefinition() == &lt;span&gt;typeof&lt;/span&gt;(IEnumerable&amp;lt;&amp;gt;&lt;span&gt;))
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; elementType = serviceType.GetGenericArguments()[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!_registries.TryGetValue(elementType, &lt;span&gt;out&lt;/span&gt;&lt;span&gt;  registry))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Array.CreateInstance(elementType, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; registries =&lt;span&gt; registry.AsEnumerable();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; services = registries.Select(it =&amp;gt; GetServiceCore(it,  &lt;span&gt;new&lt;/span&gt; Type[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;])).ToArray();
            Array array &lt;/span&gt;=&lt;span&gt; Array.CreateInstance(elementType, services.Length);
            services.CopyTo(array, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; array;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (serviceType.IsGenericType &amp;amp;&amp;amp; !&lt;span&gt;_registries.ContainsKey(serviceType))
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; definition =&lt;span&gt; serviceType.GetGenericTypeDefinition();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; _registries.TryGetValue(definition, &lt;span&gt;out&lt;/span&gt;&lt;span&gt; registry)
                &lt;/span&gt;?&lt;span&gt; GetServiceCore(registry, serviceType.GetGenericArguments())
                : &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; _registries.TryGetValue(serviceType, &lt;span&gt;out&lt;/span&gt;&lt;span&gt; registry)
                &lt;/span&gt;? GetServiceCore(registry, &lt;span&gt;new&lt;/span&gt; Type[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;])
                : &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
    ...
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在实现的&lt;strong&gt;Dispose&lt;/strong&gt;方法中，由于所有待释放的服务实例已经保存到&lt;strong&gt;_disposables&lt;/strong&gt;字段表示的集合中，所以我们只需要依次调用它们的Dispose方法即可。在释放了所有服务实例并清空待释放列表后，Dispose方法还会清空&lt;strong&gt;_services&lt;/strong&gt;字段表示的服务实例列表。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Cat : IServiceProvider, IDisposable
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Dispose()
    {
        _disposed &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; disposable &lt;span&gt;in&lt;/span&gt;&lt;span&gt; _disposables)
        {
            disposable.Dispose();
        }
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;_disposables.IsEmpty)
        {
            _disposables.TryTake(&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt; _);
        }
        _services.Clear();
    }
    ...
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;为了方便注册服务，我们定义了如下三个4个扩展方法&lt;strong&gt;Register&lt;/strong&gt;。由于服务注册的添加总是需要调用Cat自身的Register方法来完成，所以这些方法最终都需要创建一个代表服务注册的&lt;strong&gt;ServiceRegistry&lt;/strong&gt;对象。对于一个ServiceRegistry对象来说，它最为核心的莫过于表示服务实例创建工厂的&lt;strong&gt;Func&amp;lt;Cat,Type[], object&amp;gt;&lt;/strong&gt;对象，所以上述这4个扩展方法需要解决的就是创建这么一个委托对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CatExtensions
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Cat Register(&lt;span&gt;this&lt;/span&gt; Cat cat, Type &lt;span&gt;from&lt;/span&gt;&lt;span&gt;, Type to, Lifetime lifetime)
    {
        Func&lt;/span&gt;&amp;lt;Cat, Type[], &lt;span&gt;object&lt;/span&gt;&amp;gt; factory = (_, arguments) =&amp;gt;&lt;span&gt; Create(_, to, arguments);
        cat.Register(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ServiceRegistry(&lt;span&gt;from&lt;/span&gt;&lt;span&gt;, lifetime, factory));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cat;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Cat Register&amp;lt;TFrom, TTo&amp;gt;(&lt;span&gt;this&lt;/span&gt; Cat cat, Lifetime lifetime) &lt;span&gt;where&lt;/span&gt;&lt;span&gt; TTo:TFrom
        &lt;/span&gt;=&amp;gt; cat. Register(&lt;span&gt;typeof&lt;/span&gt;(TFrom), &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TTo), lifetime);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Cat Register&amp;lt;TServiceType&amp;gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; Cat cat, TServiceType instance)
    {
        Func&lt;/span&gt;&amp;lt;Cat, Type[], &lt;span&gt;object&lt;/span&gt;&amp;gt; factory = (_, arguments) =&amp;gt;&lt;span&gt; instance;
        cat.Register(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ServiceRegistry(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TServiceType),  Lifetime.Root, factory));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cat;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Cat Register&amp;lt;TServiceType&amp;gt;(&lt;span&gt;this&lt;/span&gt; Cat cat, Func&amp;lt;Cat,TServiceType&amp;gt;&lt;span&gt; factory, Lifetime lifetime)
    {
        cat.Register(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ServiceRegistry(&lt;span&gt;typeof&lt;/span&gt;(TServiceType), lifetime, (_,arguments)=&amp;gt;&lt;span&gt;factory(_)));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cat;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; HasRegistry&amp;lt;T&amp;gt;(&lt;span&gt;this&lt;/span&gt; Cat cat) =&amp;gt; cat.HasRegistry(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(T));
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; HasRegistry(&lt;span&gt;this&lt;/span&gt; Cat cat, Type serviceType) =&amp;gt;&lt;span&gt; cat._root._registries.ContainsKey(serviceType);
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt; Create(Cat cat, Type type, Type[] genericArguments)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (genericArguments.Length &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            type &lt;/span&gt;=&lt;span&gt; type.MakeGenericType(genericArguments);
        }
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; constructors =&lt;span&gt; type.GetConstructors(BindingFlags.Instance);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (constructors.Length == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cannot create the instance of &lt;/span&gt;
                {type} which does not have an &lt;span&gt;public&lt;/span&gt; constructor.&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; constructor = constructors.FirstOrDefault(it =&amp;gt; it.GetCustomAttributes(&lt;span&gt;false&lt;/span&gt;).OfType&amp;lt;InjectionAttribute&amp;gt;&lt;span&gt;().Any());
        constructor &lt;/span&gt;= constructor ??&lt;span&gt; constructors.First();
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; parameters =&lt;span&gt; constructor.GetParameters();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (parameters.Length == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Activator.CreateInstance(type);
        }
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arguments = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt;[parameters.Length];
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; index = &lt;span&gt;0&lt;/span&gt;; index &amp;lt; arguments.Length; index++&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; parameter =&lt;span&gt; parameters[index];
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; parameterType =&lt;span&gt; parameter.ParameterType;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cat.HasRegistry(parameterType))
            {
                arguments[index] &lt;/span&gt;=&lt;span&gt; cat.GetService(parameterType);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (parameter.HasDefaultValue)
            {
                arguments[index] &lt;/span&gt;=&lt;span&gt; parameter.DefaultValue;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cannot create the instance of {type} whose constructor has non-registered parameter type(s)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Activator.CreateInstance(type, arguments);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
第三个扩展方法来指定的是一个用来提供服务实例的Func对象，最后一个扩展方法指定的直接就是服务实例，所以我们很容易将提供的参数转换成一个Func。由于前两个重载指定的是服务实现类型，所以我们需要调用对应的构造函数来创建服务实例，这一逻辑实现在私有的&lt;strong&gt;Create&lt;/strong&gt;方法中。
&lt;p&gt;我们刻意简化了构造函数的筛选逻辑。为了解决构造函数的选择问题，我们引入如下这个&lt;strong&gt;InjectionAttribute&lt;/strong&gt;特性。我们将所有公共实例构造函数作为候选的构造函数，并会优先选择标注了该特性的构造函数。当构造函数被选择出来后，我们需要通过分析其参数类型并利用Cat对象来提供具体的参数值，这实际上是一个递归的过程。最终我们将针对构造函数的调用转换成Func&amp;lt;Cat,Type[], object&amp;gt;对象，进而创建出表示服务注册的ServiceRegistry对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[AttributeUsage( AttributeTargets.Constructor)]
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; InjectionAttribute: Attribute {}
&lt;/pre&gt;&lt;/div&gt;
上面给出的代码片段还提供了两个&lt;strong&gt;HasRegistry&lt;/strong&gt;和&lt;strong&gt;HasRegistry&amp;lt;T&amp;gt;&lt;/strong&gt;方法来确定指定类型的服务注册是否存在。除此之外，用于提供服务实例的泛型方法GetService和用于提供所有指定类型服务实例的GetService方法采用了如下的定义方式。
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CatExtensions
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IEnumerable&amp;lt;T&amp;gt; GetServices&amp;lt;T&amp;gt;(&lt;span&gt;this&lt;/span&gt; Cat cat) =&amp;gt; cat.GetService&amp;lt;IEnumerable&amp;lt;T&amp;gt;&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; T GetService&amp;lt;T&amp;gt;(&lt;span&gt;this&lt;/span&gt; Cat cat) =&amp;gt; (T)cat.GetService(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(T));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/net-core-di-01.html&quot;&gt;依赖注入[1]: 控制反转&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/net-core-di-02.html&quot;&gt;依赖注入[2]: 基于IoC的设计模式&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/net-core-di-03.html&quot;&gt;依赖注入[3]: 依赖注入模式&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/net-core-di-04.html&quot;&gt;依赖注入[4]: 创建一个简易版的DI框架[上篇]&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/net-core-di-05.html&quot;&gt;依赖注入[5]: 创建一个简易版的DI框架[下篇]&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/net-core-di-06.html&quot;&gt;依赖注入[6]: .NET Core DI框架[编程体验]&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/net-core-di-07.html&quot;&gt;依赖注入[7]: .NET Core DI框架[服务注册]&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/net-core-di-08html&quot;&gt;依赖注入[8]: .NET Core DI框架[服务消费]&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 30 Jul 2018 23:29:00 +0000</pubDate>
<dc:creator>Artech</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/artech/p/net-core-di-05.html</dc:identifier>
</item>
<item>
<title>Apollo 8 — ConfigService 异步轮询接口的实现 - 莫那-鲁道</title>
<link>http://www.cnblogs.com/stateis0/p/9393871.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stateis0/p/9393871.html</guid>
<description>&lt;h2 id=&quot;源码&quot;&gt;源码&lt;/h2&gt;
&lt;p&gt;Apollo 长轮询的实现，是通过客户端轮询 &lt;code&gt;/notifications/v2&lt;/code&gt; 接口实现的。具体代码在 com.ctrip.framework.apollo.configservice.controller.NotificationControllerV2.java。&lt;/p&gt;
&lt;p&gt;这个类也是实现了 ReleaseMessageListener 监控，表明他是一个消息监听器，当有新的消息时，就会调用他的 hanlderMessage 方法。这个具体我们后面再说。&lt;/p&gt;
&lt;p&gt;该类只有一个 rest 接口： pollNotification 方法。返回值是 DeferredResult，这是 Spring 支持 Servlet 3 的一个类，关于异步同步的不同，可以看笔者的另一篇文章 &lt;a href=&quot;http://thinkinjava.cn/2018/07/%E5%BC%82%E6%AD%A5-Servlet-%E5%92%8C%E5%90%8C%E6%AD%A5-Servlet-%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/&quot;&gt;异步 Servlet 和同步 Servlet 的性能测试&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;该接口提供了几个参数：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;appId appId&lt;/li&gt;
&lt;li&gt;cluster 集群名称&lt;/li&gt;
&lt;li&gt;notificationsAsString 通知对象的 json 字符串&lt;/li&gt;
&lt;li&gt;dataCenter，idc 属性&lt;/li&gt;
&lt;li&gt;clientIp 客户端 IP， 非必传，为了扩展吧估计&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;大家有么有觉得少了什么？ namespace 。&lt;/p&gt;
&lt;p&gt;当然，没有 namespace 这个重要的参数是不存在的。&lt;/p&gt;
&lt;p&gt;参数在 notificationsAsString 中。客户端会将自己所有的 namespace 传递到服务端进行查询。&lt;/p&gt;
&lt;p&gt;是时候上源码了。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@RequestMapping(method = RequestMethod.GET)
  public DeferredResult&amp;lt;ResponseEntity&amp;lt;List&amp;lt;ApolloConfigNotification&amp;gt;&amp;gt;&amp;gt; pollNotification(
      @RequestParam(value = &quot;appId&quot;) String appId,// appId
      @RequestParam(value = &quot;cluster&quot;) String cluster,// default
      @RequestParam(value = &quot;notifications&quot;) String notificationsAsString,// json 对象 List&amp;lt;ApolloConfigNotification&amp;gt;
      @RequestParam(value = &quot;dataCenter&quot;, required = false) String dataCenter,// 基本用不上, idc 属性
      @RequestParam(value = &quot;ip&quot;, required = false) String clientIp) {

    List&amp;lt;ApolloConfigNotification&amp;gt; notifications =// 转换成对象
          gson.fromJson(notificationsAsString, notificationsTypeReference);
          
    // Spring 的异步对象: timeout 60s, 返回304
    DeferredResultWrapper deferredResultWrapper = new DeferredResultWrapper();
    Set&amp;lt;String&amp;gt; namespaces = Sets.newHashSet();
    Map&amp;lt;String, Long&amp;gt; clientSideNotifications = Maps.newHashMap();
    Map&amp;lt;String, ApolloConfigNotification&amp;gt; filteredNotifications = filterNotifications(appId, notifications);// 过滤一下名字
    // 循环
    for (Map.Entry&amp;lt;String, ApolloConfigNotification&amp;gt; notificationEntry : filteredNotifications.entrySet()) {
      // 拿出 key
      String normalizedNamespace = notificationEntry.getKey();
      // 拿出 value
      ApolloConfigNotification notification = notificationEntry.getValue();
      /* 添加到 namespaces Set */
      namespaces.add(normalizedNamespace);
      // 添加到 client 端的通知, key 是 namespace, values 是 messageId
      clientSideNotifications.put(normalizedNamespace, notification.getNotificationId());
      // 如果不相等, 记录客户端名字
      if (!Objects.equals(notification.getNamespaceName(), normalizedNamespace)) {
        // 记录 key = 标准名字, value = 客户端名字
        deferredResultWrapper.recordNamespaceNameNormalizedResult(notification.getNamespaceName(), normalizedNamespace);
      }
    }// 记在 namespaces 集合, clientSideNotifications 也put (namespace, notificationId)

    // 组装得到需要观察的 key,包括公共的.
    Multimap&amp;lt;String, String&amp;gt; watchedKeysMap =
        watchKeysUtil.assembleAllWatchKeys(appId, cluster, namespaces, dataCenter);// namespaces 是集合
    // 得到 value; 这个 value 也就是 appId + cluster + namespace
    Set&amp;lt;String&amp;gt; watchedKeys = Sets.newHashSet(watchedKeysMap.values());
    // 从缓存得到最新的发布消息
    List&amp;lt;ReleaseMessage&amp;gt; latestReleaseMessages =// 根据 key 从缓存得到最新发布的消息.
        releaseMessageService.findLatestReleaseMessagesGroupByMessages(watchedKeys);

    /* 如果不关闭, 这个请求将会一直持有一个数据库连接. 影响并发能力. 这是一个 hack 操作*/
    entityManagerUtil.closeEntityManager();
    // 计算出新的通知
    List&amp;lt;ApolloConfigNotification&amp;gt; newNotifications =
        getApolloConfigNotifications(namespaces, clientSideNotifications, watchedKeysMap,
            latestReleaseMessages);
    // 不是空, 理解返回结果, 不等待
    if (!CollectionUtils.isEmpty(newNotifications)) {
      deferredResultWrapper.setResult(newNotifications);
    } else {
      // 设置 timeout 回调:打印日志
      deferredResultWrapper
          .onTimeout(() -&amp;gt; logWatchedKeys(watchedKeys, &quot;Apollo.LongPoll.TimeOutKeys&quot;));
      // 设置完成回调:删除 key
      deferredResultWrapper.onCompletion(() -&amp;gt; {
        //取消注册
        for (String key : watchedKeys) {
          deferredResults.remove(key, deferredResultWrapper);
        }
      });

      //register all keys 注册
      for (String key : watchedKeys) {
        this.deferredResults.put(key, deferredResultWrapper);
      }
    }
    // 立即返回
    return deferredResultWrapper.getResult();/** @see DeferredResultHandler 是关键 */
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注释写了很多了，再简单说说逻辑：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;解析 JSON 字符串为 List&amp;lt; ApolloConfigNotification&amp;gt; 对象。&lt;/li&gt;
&lt;li&gt;创建 Spring 异步对象。&lt;/li&gt;
&lt;li&gt;处理过滤 namespace。&lt;/li&gt;
&lt;li&gt;根据 namespace 生成需要监听的 key，格式为 appId + cluster + namespace，包括公共 namespace。并获取最新的 Release 信息。&lt;/li&gt;
&lt;li&gt;关闭 Spring 实例管理器，释放数据库资源。&lt;/li&gt;
&lt;li&gt;根据刚刚得到的 ReleaseMessage，和客户端的 ReleaseMessage 的版本进行对比，生成新的配置通知对象集合。&lt;/li&gt;
&lt;li&gt;如果不是空 —— 立即返回给客户端，结束此次调用。如果没有，进入第 8 步。&lt;/li&gt;
&lt;li&gt;设置 timeout 回调方法 —— 打印日志。再设置完成回调方法：删除注册的 key。&lt;/li&gt;
&lt;li&gt;对客户端感兴趣的 key 进行注册，这些 key 都对应着 deferredResultWrapper 对象，可以认为他就是客户端。&lt;/li&gt;
&lt;li&gt;返回 Spring 异步对象。该请求将被异步挂起。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Apollo 的 DeferredResultWrapper 保证了 Spring 的 DeferredResult 对象，泛型内容是 List， 构造这个对象，默认的 timeout 是 60 秒，即挂起 60 秒。同时，对 setResult 方法进行包装，加入了对客户端 key 和服务端 key 的一个映射（大小写不一致） 。&lt;/p&gt;
&lt;p&gt;我们刚刚说，Apollo 会将这些 key 注册起来。那么什么时候使用呢，异步对象被挂起，又是上面时候被唤醒呢？&lt;/p&gt;
&lt;p&gt;答案就在 handleMessage 方法里。我们刚刚说他是一个监听器，当消息扫描器扫描到新的消息时，会通知所有的监听器，也就是执行 handlerMessage 方法。方法内容如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Override
public void handleMessage(ReleaseMessage message, String channel) {

  String content = message.getMessage();
  if (!Topics.APOLLO_RELEASE_TOPIC.equals(channel) || Strings.isNullOrEmpty(content)) {
    return;
  }
  String changedNamespace = retrieveNamespaceFromReleaseMessage.apply(content);

  //create a new list to avoid ConcurrentModificationException 构造一个新 list ,防止并发失败
  List&amp;lt;DeferredResultWrapper&amp;gt; results = Lists.newArrayList(deferredResults.get(content));

  // 创建通知对象
  ApolloConfigNotification configNotification = new ApolloConfigNotification(changedNamespace, message.getId());
  configNotification.addMessage(content, message.getId());

  //do async notification if too many clients 如果有大量的客户端(100)在等待,使用线程池异步处理
  if (results.size() &amp;gt; bizConfig.releaseMessageNotificationBatch()) {
    // 大量通知批量处理
    largeNotificationBatchExecutorService.submit(() -&amp;gt; {
      for (int i = 0; i &amp;lt; results.size(); i++) { // 循环
        /*
         * 假设一个公共 Namespace 有10W 台机器使用，如果该公共 Namespace 发布时直接下发配置更新消息的话，
         * 就会导致这 10W 台机器一下子都来请求配置，这动静就有点大了，而且对 Config Service 的压力也会比较大。
         * 即&quot;惊群效应&quot;
         */
        if (i &amp;gt; 0 &amp;amp;&amp;amp; i % bizConfig.releaseMessageNotificationBatch() == 0) {// 如果处理了一批客户端,休息一下(100ms)
            TimeUnit.MILLISECONDS.sleep(bizConfig.releaseMessageNotificationBatchIntervalInMilli());
        }
        results.get(i).setResult(configNotification);// 通知每个等待的 HTTP 请求
      }
    });
    return;
  }

  // 否则,同步处理
  for (DeferredResultWrapper result : results) {
    result.setResult(configNotification);
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;笔者去除了一些日志和一些数据判断。大致的逻辑如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;消息类型必须是 “apollo-release”。然后拿到消息里的 namespace 内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;根据 namespace 从注册器里拿出 Spring 异步对象集合&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;创建通知对象。&lt;/li&gt;
&lt;li&gt;如果有超过 100 个客户端在等待，那么就使用线程池批量执行通知。否则就同步慢慢执行。&lt;/li&gt;
&lt;li&gt;每处理 100 个客户端就休息 100ms，防止发生惊群效应，导致大量客户端调用配置获取接口，引起服务抖动。&lt;/li&gt;
&lt;li&gt;循环调用 Spring 异步对象的 setResult 方法，让其立即返回。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;具体的流程图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-ca1bbe21c2a21b52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中，灰色区域是扫描器的异步线程，黄色区域是接口的同步线程。他们共享 deferredResults 这个线程安全的 Map，实现异步解耦和实时通知客户端。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;好了，这就是 Apollo 的长轮询接口，客户端会不断的轮询服务器，服务器会 Hold住 60 秒，这是通过 Servlet 3 的异步 + NIO 来实现的，能够保持万级连接（Tomcat 默认 10000）。&lt;/p&gt;
&lt;p&gt;通过一个线程安全的 Map + 监听器，让扫描器线程和 HTTP 线程共享 Spring 异步对象，即实现了消息实时通知，也让应用程序实现异步解耦。&lt;/p&gt;
</description>
<pubDate>Mon, 30 Jul 2018 22:12:00 +0000</pubDate>
<dc:creator>莫那-鲁道</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stateis0/p/9393871.html</dc:identifier>
</item>
<item>
<title>【java代码之美】---Lambda - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/9393724.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/9393724.html</guid>
<description>
&lt;h2&gt;&lt;span&gt;一、概述&lt;/span&gt;&lt;/h2&gt;
&lt;h4&gt;&lt;span&gt;1、什么是Lambda表达式&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Lambda 表达式是一种匿名函数，简单地说，它是没有声明的方法，也即没有访问修饰符、返回值声明和名字。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使 Java 语言的表达能力得到了提升。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;2、&lt;strong&gt;Lambda表达式的语法&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;基本语法:  (parameters) -&amp;gt; expression&lt;/p&gt;
&lt;p&gt;     或者：(parameters) -&amp;gt;{ statements; &lt;/p&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1. 不需要参数,返回值为 5  &lt;/span&gt;
() -&amp;gt; 5  
  
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2. 接收一个参数(数字类型),返回其2倍的值  &lt;/span&gt;
x -&amp;gt; 2 *&lt;span&gt; x  
  
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3. 接受2个参数(数字),并返回他们的差值  &lt;/span&gt;
(x, y) -&amp;gt;&lt;span&gt; x – y  
  
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4. 接收2个int型整数,返回他们的和  &lt;/span&gt;
(&lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt; y) -&amp;gt; x +&lt;span&gt; y  
  
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  &lt;/span&gt;
(String s) -&amp;gt; System.out.print(s)  
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;3、什么是函数式接口&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  再对上面进行举例说明之前，必须先来理解下函数式接口，因为Lambda是建立在函数式接口的基础上的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 记住！&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;   （1）&lt;span&gt;只包含一个抽象方法的接口，称为函数式接口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  （2）&lt;span&gt;你可以通过 Lambda 表达式来创建该接口的对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  （3）我们可以在任意函数式接口上使用 @FunctionalInterface 注解，这样做可以检测它是否是一个函数式接口，同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。&lt;/p&gt;
&lt;p&gt;在实际开发者🈶️两个比较常见的函数式接口：&lt;strong&gt;Runnable接口，Comparator接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   先举例&lt;strong&gt;Runnable接口相关&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.1使用匿名内部类  &lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {  
            @Override  
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {  
                System.out.println(&lt;/span&gt;&quot;Hello world !&quot;&lt;span&gt;);  
            }  
        }).start();  
          
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.2使用 lambda 获得Runnable接口对象  &lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt; Thread(() -&amp;gt; System.out.println(&quot;Hello world !&quot;&lt;span&gt;)).start();  
        
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;=============================================================================
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.1使用匿名内部类  &lt;/span&gt;
        Runnable race1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {  
            @Override  
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {  
                System.out.println(&lt;/span&gt;&quot;Hello world !&quot;&lt;span&gt;);  
            }  
        };  
          
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.2使用 lambda直接获得接口对象 &lt;/span&gt;
        Runnable race2 = () -&amp;gt; System.out.println(&quot;Hello world !&quot;&lt;span&gt;);          
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 直接调用 run 方法(没开新线程哦!)  &lt;/span&gt;
&lt;span&gt;        race1.run();  
        race2.run();  
    }
}
&lt;/span&gt;&lt;span&gt;/*输出结果&lt;/span&gt;&lt;span&gt;
 * Hello world !
 * Hello world !
 * Hello world !
 * Hello world !
 *／&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上面案例可以看出：通过Lambda表达式看去舒服清爽多了，2而通过匿名内部类代码总是不够整洁。&lt;/p&gt;
&lt;p&gt;再举一个例子：&lt;strong&gt;使用Lambda对数组排序&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestArray {
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        String[] players &lt;/span&gt;= {&quot;zhansgan&quot;, &quot;lisi&quot;, &quot;wangwu&quot;, &quot;zhaoliu&quot;,  &quot;wangmazi&quot;&lt;span&gt;};  

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.1 使用匿名内部类根据 surname 排序 players  &lt;/span&gt;
        Arrays.sort(players, &lt;span&gt;new&lt;/span&gt; Comparator&amp;lt;String&amp;gt;&lt;span&gt;() {  
            @Override  
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(String s1, String s2) {  
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (s1.compareTo(s2));  
            }  
        });  
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.2 使用 lambda 排序,根据 surname  &lt;/span&gt;
        Arrays.sort(players, (String s1, String s2) -&amp;gt;&lt;span&gt;  s1.compareTo(s2));  
         
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;================================================================================================
          
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.1 使用匿名内部类根据 name lenght 排序 players  &lt;/span&gt;
        Arrays.sort(players, &lt;span&gt;new&lt;/span&gt; Comparator&amp;lt;String&amp;gt;&lt;span&gt;() {  
            @Override  
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(String s1, String s2) {  
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (s1.length() -&lt;span&gt; s2.length());  
            }  
        });  

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.2使用Lambda,根据name length  &lt;/span&gt;
        Arrays.sort(players, (String s1, String s2) -&amp;gt; (s1.length() -&lt;span&gt; s2.length()));  
    
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;==================================================================================================    
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.1 使用匿名内部类排序 players, 根据最后一个字母  &lt;/span&gt;
        Arrays.sort(players, &lt;span&gt;new&lt;/span&gt; Comparator&amp;lt;String&amp;gt;&lt;span&gt;() {  
            @Override  
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(String s1, String s2) {  
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (s1.charAt(s1.length() - 1) - s2.charAt(s2.length() - 1&lt;span&gt;));  
            }  
        });  

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.2 使用Lambda,根据最后一个字母&lt;/span&gt;
        Arrays.sort(players, (String s1, String s2) -&amp;gt; (s1.charAt(s1.length() - 1) - s2.charAt(s2.length() - 1&lt;span&gt;)));  
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上面例子我们再来思考为什么Lambda表达式需要函数式接口？其实很简单目的就是为来保证唯一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你的&lt;/strong&gt;Runnable接口只要一个抽象方法，那么我用() -&amp;gt; System.out.println(&quot;Hello world !&quot;)，就只能代表run方法，如果你下面还有一个抽象方法，那我使用Lambda表达式，那鬼才知道要调用哪个抽象方法呢。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;strong&gt;二、方法引用&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h4&gt;&lt;span&gt;&lt;strong&gt;1、基本介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;首先注意：&lt;/strong&gt;方法引用，不是方法调用！方法引用，不是方法调用！方法引用，不是方法调用！&lt;/p&gt;
&lt;p&gt;函数式接口的实例可以通过 lambda 表达式、 方法引用、构造方法引用来创建。方法引用是 lambda 表达式的语法糖，任何用方法引用的地方都可由lambda表达式替换，但是并不是所有的lambda表达式都可以用方法引用来替换。&lt;/p&gt;
&lt;p&gt;举例&lt;/p&gt;
&lt;p&gt;这就是一个打印集合所有元素的例子，value -&amp;gt; System.out.println(value) 是一个Consumer函数式接口， 这个函数式接口可以通过方法引用来替换。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestArray {
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
         List&lt;/span&gt;&amp;lt;String&amp;gt; list = Arrays.asList(&quot;xuxiaoxiao&quot;, &quot;xudada&quot;, &quot;xuzhongzhong&quot;&lt;span&gt;);
           list.forEach(value &lt;/span&gt;-&amp;gt;&lt;span&gt; System.out.println(value));
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 输出：
     * xuxiaoxiao
     * xudada
     * xuzhongzhong
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用方法引用的方式，和上面的输出是一样的，&lt;span&gt;方法引用使用的是双冒号（::）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
list.forEach(System.out::println);
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;2、分类&lt;/span&gt;&lt;/h4&gt;
&lt;table align=&quot;left&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;&lt;span&gt;使用形式&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;静态方法引用&lt;/td&gt;
&lt;td&gt;&lt;span&gt;类名 :: 静态方法名&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;实例方法引用&lt;/td&gt;
&lt;td&gt;&lt;span&gt;对象名(引用名) :: 实例方法名&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;类方法引用&lt;/td&gt;
&lt;td&gt;&lt;span&gt;类名 :: 实例方法名&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;构造方法引用&lt;/td&gt;
&lt;td&gt;&lt;span&gt;类名 :: new&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;





&lt;p&gt;&lt;span&gt;&lt;strong&gt;（1）静态方法引用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Apple {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String color;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; weight;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Apple(String name, String color, &lt;span&gt;double&lt;/span&gt;&lt;span&gt; weight) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt; color;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.weight =&lt;span&gt; weight;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compareByWeight(Apple a1, Apple a2) {
        &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; diff = a1.getWeight() -&lt;span&gt; a2.getWeight();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Double(diff).intValue();
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;还有getter setter toString&lt;/span&gt;
}    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有一个苹果的List，现在需要根据苹果的重量进行排序。List 的 sort 函数接收一个 Comparator 类型的参数，Comparator 是一个函数式接口，接收两个参数，返回一个int值。&lt;/p&gt;
&lt;p&gt;Apple的静态方法compareByWeight正好符合Comparator函数式接口，所以可以使用：&lt;/p&gt;
&lt;p&gt;Apple::compareByWeight &lt;span&gt;静态方法引用&lt;/span&gt;来替代lambda表达式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LambdaTest {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {

        Apple apple1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Apple(&quot;红富士&quot;, &quot;Red&quot;, 280&lt;span&gt;);
        Apple apple2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Apple(&quot;冯心&quot;, &quot;Yello&quot;, 470&lt;span&gt;);
        Apple apple3 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Apple(&quot;大牛&quot;, &quot;Red&quot;, 320&lt;span&gt;);
        Apple apple4 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Apple(&quot;小小&quot;, &quot;Green&quot;, 300&lt;span&gt;);

        List&lt;/span&gt;&amp;lt;Apple&amp;gt; appleList =&lt;span&gt; Arrays.asList(apple1, apple2, apple3, apple4);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;lambda 表达式形式
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;appleList.sort((Apple a1, Apple a2) -&amp;gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    return new Double(a1.getWeight() - a2.getWeight()).intValue();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;});

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;静态方法引用形式（可以看出引用方法比上面的更加简单&lt;/span&gt;
&lt;span&gt;        appleList.sort(Apple::compareByWeight);

        appleList.forEach(apple &lt;/span&gt;-&amp;gt;&lt;span&gt; System.out.println(apple));

    }
}
输出：
Apple{category&lt;/span&gt;='红富士', color='Red', weight=280.0&lt;span&gt;}
Apple{category&lt;/span&gt;='小小', color='Green', weight=300.0&lt;span&gt;}
Apple{category&lt;/span&gt;='大牛', color='Red', weight=320.0&lt;span&gt;}
Apple{category&lt;/span&gt;='冯心', color='Yello', weight=470.0}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/span&gt;Apple.compareByWeight是方法的调用，而Apple::compareByWeight方法引用，这两者完全不是一回事。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（2）&lt;/span&gt;实例方法引用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个compareByWeight是一个实例方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AppleComparator {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compareByWeight(Apple a1, Apple a2) {
        &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; diff = a1.getWeight() -&lt;span&gt; a2.getWeight();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Double(diff).intValue();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面的例子通过&lt;span&gt;实例对象的方法引用&lt;/span&gt; comparator::compareByWeight 来代替lambda表达式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LambdaTest {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {

        Apple apple1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Apple(&quot;红富士&quot;, &quot;Red&quot;, 280&lt;span&gt;);
        Apple apple2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Apple(&quot;冯心&quot;, &quot;Yello&quot;, 470&lt;span&gt;);
        Apple apple3 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Apple(&quot;哈哈&quot;, &quot;Red&quot;, 320&lt;span&gt;);
        Apple apple4 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Apple(&quot;小小&quot;, &quot;Green&quot;, 300&lt;span&gt;);


        List&lt;/span&gt;&amp;lt;Apple&amp;gt; appleList =&lt;span&gt; Arrays.asList(apple1, apple2, apple3, apple4);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;lambda 表达式形式
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;appleList.sort((Apple a1, Apple a2) -&amp;gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    return new Double(a1.getWeight() - a2.getWeight()).intValue();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;});

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例方法引用&lt;/span&gt;
        AppleComparator comparator = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AppleComparator();
        appleList.sort(comparator::compareByWeight);

        appleList.forEach(apple &lt;/span&gt;-&amp;gt;&lt;span&gt; System.out.println(apple));

    }
}
输出：
Apple{category&lt;/span&gt;='红富士', color='Red', weight=280.0&lt;span&gt;}
Apple{category&lt;/span&gt;='小小', color='Green', weight=300.0&lt;span&gt;}
Apple{category&lt;/span&gt;='哈哈', color='Red', weight=320.0&lt;span&gt;}
Apple{category&lt;/span&gt;='冯心', color='Yello', weight=470.0}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上面两个例子可以看到，静态方法引用和实例方法引用都是比较好理解的。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）类方法引用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一般来说，同类型对象的比较，应该当前调用方法的对象与另外一个对象进行比较，好的设计应该像下面： &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Apple {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String category;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String color;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; weight;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Apple(String category, String color, &lt;span&gt;double&lt;/span&gt;&lt;span&gt; weight) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.category =&lt;span&gt; category;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt; color;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.weight =&lt;span&gt; weight;
    }
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里和上面静态方式唯一区别就是这个参数就一个，需要实例对象调这个方法&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compareByWeight(Apple other) {
        &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; diff = &lt;span&gt;this&lt;/span&gt;.getWeight() -&lt;span&gt; other.getWeight();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Double(diff).intValue();
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;getter setter toString&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    还是之前List排序的例子，看看使用类方法引用如何写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LambdaTest {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {

        Apple apple1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Apple(&quot;红富士&quot;, &quot;Red&quot;, 280&lt;span&gt;);
        Apple apple2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Apple(&quot;黄元帅&quot;, &quot;Yello&quot;, 470&lt;span&gt;);
        Apple apple3 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Apple(&quot;红将军&quot;, &quot;Red&quot;, 320&lt;span&gt;);
        Apple apple4 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Apple(&quot;国光&quot;, &quot;Green&quot;, 300&lt;span&gt;);


        List&lt;/span&gt;&amp;lt;Apple&amp;gt; appleList =&lt;span&gt; Arrays.asList(apple1, apple2, apple3, apple4);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;lambda 表达式形式
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;appleList.sort((Apple a1, Apple a2) -&amp;gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    return new Double(a1.getWeight() - a2.getWeight()).intValue();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;});

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里是类方法引用&lt;/span&gt;
&lt;span&gt;        appleList.sort(Apple::compareByWeight);

        appleList.forEach(apple &lt;/span&gt;-&amp;gt;&lt;span&gt; System.out.println(apple));

    }
}
输出：
Apple{category&lt;/span&gt;='红富士', color='Red', weight=280.0&lt;span&gt;}
Apple{category&lt;/span&gt;='国光', color='Green', weight=300.0&lt;span&gt;}
Apple{category&lt;/span&gt;='红将军', color='Red', weight=320.0&lt;span&gt;}
Apple{category&lt;/span&gt;='黄元帅', color='Yello', weight=470.0}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     这里使用的是：&lt;span&gt;类名::实例方法名&lt;/span&gt;。首先要说明的是，方法引用不是方法调用。compareByWeight一定是某个实例调用的，就是lambda表达式的第一个参数，然后lambda表达式剩下的参数作为 &lt;/p&gt;
&lt;p&gt;compareByWeight的参数，这样compareByWeight正好符合lambda表达式的定义。&lt;/p&gt;
&lt;p&gt;或者也可以这样理解：&lt;/p&gt;
&lt;p&gt;(Apple a1, Apple a2) -&amp;gt; { return new Double(a1.getWeight() - a2.getWeight()).intValue(); }&lt;/p&gt;
&lt;p&gt;int compareByWeight(Apple other) 需要当前对象调用，然后与另外一个对象比较，并且返回一个int值。可以理解为lambda表达式的第一个参数 a1 赋值给当前对象， 然后 a2 赋值给 other对象，然后返回int值。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（4）构造方法引用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConstructionMethodTest {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String getString(Supplier&amp;lt;String&amp;gt;&lt;span&gt; supplier) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; supplier.get();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {

        ConstructionMethodTest test &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConstructionMethodTest();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;lambda表达式形式&lt;/span&gt;
        System.out.println(test.getString(() -&amp;gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String();}));

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造方法引用形式&lt;/span&gt;
        System.out.println(test.getString(String::&lt;span&gt;new&lt;/span&gt;&lt;span&gt;));

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getString 方法接收一个Supplier类型的参数，Supplier 不接收参数，返回一个String。lambda表达式应该这样写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
() -&amp;gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; String();}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;替换成方法引用的形式如下： 实际上调用的是String 无参构造方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
String::&lt;span&gt;new&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;参考&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    1、&lt;/span&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/franson-2016/p/5593080.html&quot;&gt;Java中Lambda表达式的使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    2、&lt;a href=&quot;https://blog.csdn.net/yitian_66/article/details/80652656&quot; target=&quot;_blank&quot;&gt;java8特性概要以及demo分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    3&lt;a href=&quot;https://blog.csdn.net/yitian_66/article/details/80652656&quot; target=&quot;_blank&quot;&gt;、&lt;/a&gt;&lt;a href=&quot;https://blog.csdn.net/yitian_66/article/details/80652656&quot; target=&quot;_blank&quot;&gt;java8 笔记 - 方法引用（四）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;想太多，做太少，中间的落差就是烦恼。想没有烦恼，要么别想，要么多做。中校【9】&lt;/strong&gt; &lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 30 Jul 2018 17:21:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdhxhz/p/9393724.html</dc:identifier>
</item>
<item>
<title>类的继承 - 我是leon</title>
<link>http://www.cnblogs.com/walls/p/9393686.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/walls/p/9393686.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;本文讲述JavaScript中类继承的实现方式，并比较实现方式的差异。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一何为继承&quot;&gt;一、何为继承&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;继承，是子类继承父类的特征和行为，使得子类对象具有父类的实例域和方法。&lt;br/&gt;继承是面向对象编程中，不可或缺的一部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;优点&quot;&gt;1.1 优点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;减少代码冗余&lt;/code&gt; 父类可以为子类提供通用的属性，而不必因为增加功能，而逐个修改子类的属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;代码复用&lt;/code&gt; 同上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;代码易于管理和扩展&lt;/code&gt; 子类在父类基础上，可以实现自己的独特功能&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;缺点&quot;&gt;1.2 缺点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;耦合度高&lt;/code&gt; 如果修改父类代码，将影响所有继承于它的子类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;影响性能&lt;/code&gt; 子类继承于父类的数据成员，有些是没有使用价值的。但是，在实例化的时候，已经分配了内存。所以，在一定程度上影响程序性能。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;二例子&quot;&gt;二、例子&lt;/h2&gt;
&lt;p&gt;例子以图书馆中的书入库归类为例。&lt;br/&gt;以下是简化后的父类&lt;code&gt;Book&lt;/code&gt;（也可称为基类）。&lt;br/&gt;目的是通过继承该父类，产出&lt;code&gt;Computer&lt;/code&gt;（计算机）子类。&lt;br/&gt;并且，子类拥有新方法&lt;code&gt;say&lt;/code&gt;，输出自己的书名。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;function Book(){
    this.name = ''; // 书名
    this.page = 0; // 页数
    this.classify = ''; // 类型
}
Book.prototype = {
    constructor: Book,
    init: function(option){
        this.name = option.name || '';
        this.page = option.page || 0;
        this.classify = option.classify || '';
    },
    getName: function(){
        console.log(this.name);
    },
    getPage: function(){
        console.log(this.page);
    },
    getClassify: function(){
        console.log(this.classify);
    }
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来会讲解子类&lt;code&gt;Computer&lt;/code&gt;几种继承方式的实现和优化方法。开始飙车~&lt;/p&gt;
&lt;h2 id=&quot;三实例式继承&quot;&gt;三、实例式继承&lt;/h2&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;function Computer(){
    Book.apply(this, arguments);
}
Computer.prototype = new Book();
Computer.prototype.constructor = Computer;
Computer.prototype.init = function(option){
    option.classify = 'computer';
    Book.prototype.init.call(this, option);
};
Computer.prototype.say = function(){
    console.log('I\'m '+ this.name);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;调用父类构造器进行初始化&quot;&gt;3.1 调用父类构造器进行初始化&lt;/h3&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;function Computer(){
    Book.apply(this, arguments);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Computer&lt;/code&gt;的构造函数里，调用父类的构造函数进行初始化操作。使子类拥有父类一样的初始化属性。&lt;/p&gt;
&lt;h3 id=&quot;将父类的原型传递给子类&quot;&gt;3.2 将父类的原型传递给子类&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Computer.prototype = new Book();&lt;/code&gt;使用new操作符对父类&lt;code&gt;Book&lt;/code&gt;进行实例化,并将实例对象赋值给子类的&lt;code&gt;prototype&lt;/code&gt;。&lt;br/&gt;这样，子类&lt;code&gt;Computer&lt;/code&gt;就可以通过原型链访问到父类的属性。&lt;/p&gt;
&lt;h3 id=&quot;缺点-1&quot;&gt;3.3 缺点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;父类&lt;code&gt;Book&lt;/code&gt;的构造函数被执行了2次&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;一次是在&lt;code&gt;Computer&lt;/code&gt;的构造函数里&lt;code&gt;Book.apply(this, arguments);&lt;/code&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;一次是在&lt;code&gt;Computer.prototype = new Book();&lt;/code&gt;&lt;br/&gt;这种模式，存在一定的性能浪费。&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;父类实例化无法传参&lt;/strong&gt;&lt;br/&gt;&lt;code&gt;Computer.prototype = new Book();&lt;/code&gt;，这种实例化方式，无法让&lt;code&gt;Book&lt;/code&gt;父类接收不固定的参数集合。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;四原型式继承&quot;&gt;四、原型式继承&lt;/h2&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;function Computer(){
    Book.apply(this, arguments);
}
Computer.prototype = Object.create(Book.prototype);
Computer.prototype.constructor = Computer;
Computer.prototype.init = function(option){
    option.classify = 'computer';
    Book.prototype.init(option);
};
Computer.prototype.say = function(){
    console.log('I\'m '+ this.name);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的改进：是使用&lt;code&gt;Object.create(Book.prototype)&lt;/code&gt;。它的作用是返回一个继承自原型对象&lt;code&gt;Book.prototype&lt;/code&gt;的新对象。且该对象下的属性已经初始化。&lt;br/&gt;用&lt;code&gt;Object.create&lt;/code&gt;生成新对象，并不会调用到&lt;code&gt;Book&lt;/code&gt;的构造函数。&lt;br/&gt;这种方式，也可以通过原型链实现继承。&lt;/p&gt;
&lt;h2 id=&quot;五object.create的简单版兼容&quot;&gt;五、Object.create的简单版兼容&lt;/h2&gt;
&lt;p&gt;由于低版本的浏览器是不支持&lt;code&gt;Object.create&lt;/code&gt;的。所以这里简单介绍下兼容版本：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;Object.create = function(prototype){
    function F(){}
    F.prototype = prototype;
    return new F();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;原理是定义一个空的构造函数，然后修改其原型，使之成为一个跳板，可以将原型链传递到真正的prototype。&lt;/p&gt;
&lt;h2 id=&quot;六函数化继承&quot;&gt;六、函数化继承&lt;/h2&gt;
&lt;p&gt;上述两种实现方式，都存在一个问题：不存在&lt;code&gt;私有属性&lt;/code&gt;和&lt;code&gt;私有方法&lt;/code&gt;。也就是说，存在被篡改的风险。&lt;br/&gt;接下来就用函数化来化解这个问题。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;function book(spec, my){
    var that = {};

    // 私有变量
    spec.name = spec.name || ''; // 书名
    spec.page = spec.page || 0; // 页数
    spec.classify = spec.classify || ''; // 类型

    var getName = function(){
        console.log(spec.name);
    };
    var getPage = function(){
        console.log(spec.page);
    };
    var getClassify = function(){
        console.log(spec.classify);
    };

    that.getName = getName;
    that.getPage = getPage;
    that.getClassify = getClassify;

    return that;
}

function computer(spec, my){
    spec = spec || {};
    spec.classify = 'computer';
    var that = book(spec, my);

    var say = function(){
        console.log('I\'m '+ spec.name);
    };
    that.say = say;

    return that;
}

var Ninja = computer({name: 'JavaScript忍者秘籍', page: 350});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;函数化的优势，就是可以更好地进行封装和信息隐藏。&lt;/strong&gt;&lt;br/&gt;也许有人疑惑为什么用以下这种方式声明和暴露方法：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;var say = function(){
    console.log('I\'m '+ spec.name);
};
that.say = say;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实是为了保护对象自身的完整性。即使&lt;code&gt;that.say&lt;/code&gt;被外部篡改或破坏掉，&lt;code&gt;function computer&lt;/code&gt;内部的&lt;code&gt;say&lt;/code&gt;方法仍然能够正常工作。&lt;br/&gt;另外，解释下&lt;code&gt;that&lt;/code&gt;、&lt;code&gt;spec&lt;/code&gt;和&lt;code&gt;my&lt;/code&gt;的作用：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;that&lt;/code&gt;是一个公开数据存储容器，暴露出去的数据接口，都放到这个容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec&lt;/code&gt;是用来存储创建新实例所需的信息，属于实例之间共同编辑的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;my&lt;/code&gt;是用来存储父类、子类之间共享的私密数据容器，外部是访问不到的。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;七es6继承&quot;&gt;七、ES6继承&lt;/h2&gt;
&lt;p&gt;最后，看下现代版ES6的类继承。不禁感慨以前的刀耕火种，是多么折磨人🌚&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;class Book {
    constructor(){
        this.name = ''; // 书名
        this.page = 0; // 页数
        this.classify = ''; // 类型
    }
    init(option) {
        this.name = option.name || '';
        this.page = option.page || 0;
        this.classify = option.classify || '';
    }
    getName() {
        console.log(this.name);
    }
    getPage (){
        console.log(this.page);
    }
    getClassify (){
        console.log(this.classify);
    }
}
class Computer extends Book{
    constructor(...args){
        super(...args);
    }
    init(option) {
        super.init(option);
        this.classify = 'computer';
    }
    say() {
        console.log('I\'m '+ this.name);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;
&lt;p&gt;虽然ES5终究会被淘汰，但是了解下其工作原理，还是很有必要。因为很多源码还是有用到里面的模式。&lt;br/&gt;附带的价值就是，ES5的继承玩到飞起，ES6的继承就是小菜一碟。&lt;/p&gt;
</description>
<pubDate>Mon, 30 Jul 2018 16:46:00 +0000</pubDate>
<dc:creator>我是leon</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/walls/p/9393686.html</dc:identifier>
</item>
<item>
<title>Python学习：19.Python设计模式-单例模式 - BD-ld-2017</title>
<link>http://www.cnblogs.com/liudi2017/p/9393614.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liudi2017/p/9393614.html</guid>
<description>&lt;p&gt;&lt;span&gt;一、单例模式存在的意义&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　在这里的单例就是只有一个实例（这里的实例就像在面向对象的时候，创建了一个对象也可以说创建了一个实例），只用一个实例进行程序设计，首先我们可以了解一下什么时候不适合使用单例模式，比如我们需要使用类同时创建多个对象的时候，且每个对象中封装了不同的数据的时候，就不能使用单例模式，就像下面的例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,name,age):
        self.name &lt;/span&gt;=&lt;span&gt; name
        self.age &lt;/span&gt;=&lt;span&gt; age
        
mingming &lt;/span&gt;= Person(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;明明&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,19&lt;span&gt;)
mingyue &lt;/span&gt;= Person(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;明月&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,30&lt;span&gt;)
mingri &lt;/span&gt;= Person(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;明日&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,20)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　那么什么时候适合使用单例模式，如果每个对象中封装了相同的数据，但是需要创建多个对象的时候，而且这两个实例所有的功能是一样的，所以我们就可以使用一个实例完成，在这里我们就可以使用单例模式，如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
        self.name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        self.age &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; f1(self):
        &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; f2(self):
        &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;&lt;span&gt;

mingming &lt;/span&gt;=&lt;span&gt; Person()
mingming.f1()

mingyue &lt;/span&gt;=&lt;span&gt; Person()
mingyue.f1()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　为什么要使用单例模式，就是为了在封装数据相同的情况下，而且每个实例可执行的方法相同的时候，不必创建多个对象，只需要使用一个实例，来完成多个相同实例所完成的功能，通过这种方式减少内存的使用。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二、单例模式应用的场景&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;需要频繁的进行创建和销毁的对象；&lt;/li&gt;
&lt;li&gt;创建对象时耗时过多或耗费资源过多，但又经常用到的对象；&lt;/li&gt;
&lt;li&gt;工具类对象；&lt;/li&gt;
&lt;li&gt;频繁访问数据库或文件的对象。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;三、单例模式的优点以及缺点&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;优点&lt;/h3&gt;
&lt;p&gt;系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。&lt;/p&gt;
&lt;p&gt;由于单例模式在内存中只有一个实例，减少了内存开销。 &lt;br/&gt;单例模式可以避免对资源的多重占用，例如一个写文件时，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作。 &lt;br/&gt;单例模式可以再系统设置全局的访问点，优化和共享资源访问。 &lt;br/&gt;其中使用到单例模式时，考虑较多的就是多线程的情况下如何防止被多线程同时创建等问题。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;con&quot;&gt;当这个类的对象在多个地方创建的时候，使得内部的方法多次调用，但是希望只要一个对象操作这个方法，或者不希望多个地方同时调用这个方法，需要保持这个方法的单一性质，就用单利模式&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;缺点&lt;/h3&gt;
&lt;p&gt;使用单例模式，扩展很困难，若要扩展，除了修改代码基本上没有第二种途径可以实现。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;四、单例模式代码编写&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;接下来我们就模拟一个数据库连接池来实现单例模式&lt;br/&gt;首先我们介绍一下数据库连接池&lt;br/&gt;我们通过程序进行数据库的操作的时候，每次都需要连接数据库，但是连接数据库需要消耗较多的时间，所以我们可以在我们主机的内存里维护一个数据库连接池，在这个连接池中有若干个已经连接数据库的连接，我们想要连接数据库的时候直接到连接池中取出一个连接即可，省去了连接的时间。&lt;/p&gt;
&lt;p&gt;非单例模式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; random

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; SqlConnectionPool:

    &lt;/span&gt;&lt;span&gt;__instance&lt;/span&gt; =&lt;span&gt; None

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
        self.ip &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        self.port &lt;/span&gt;= 3306&lt;span&gt;
        self.pwd &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        self.username &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;去连接&lt;/span&gt;
        self.conn_list = [1,2,3,4,5,6,7,8,9,10&lt;span&gt;]

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_connection(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取连接&lt;/span&gt;
        r = random.randrange(1,11&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; r


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;我们创建多个对象内存地址是一样的，说明拿到的是同一个对象&lt;/span&gt;
obj =&lt;span&gt; SqlConnectionPool()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(obj)
obj1 &lt;/span&gt;=&lt;span&gt; SqlConnectionPool()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(obj1)
obj2 &lt;/span&gt;=&lt;span&gt; SqlConnectionPool()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(obj2)

输出结果：
&lt;/span&gt;&amp;lt;&lt;span&gt;__main__&lt;/span&gt;.SqlConnectionPool instance at 0x0000000002630788&amp;gt;
&amp;lt;&lt;span&gt;__main__&lt;/span&gt;.SqlConnectionPool instance at 0x0000000002630888&amp;gt;
&amp;lt;&lt;span&gt;__main__&lt;/span&gt;.SqlConnectionPool instance at 0x00000000026308C8&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;非单例模式每次内存输出的结果都不同，下面是单例模式。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; random

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; SqlConnectionPool:

    &lt;/span&gt;&lt;span&gt;__instance&lt;/span&gt; =&lt;span&gt; None

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
        self.ip &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        self.port &lt;/span&gt;= 3306&lt;span&gt;
        self.pwd &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        self.username &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;去连接&lt;/span&gt;
        self.conn_list = [1,2,3,4,5,6,7,8,9,10&lt;span&gt;]

    @staticmethod   &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;静态方法是由类调用的&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_instance():
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; SqlConnectionPool.&lt;span&gt;__instance&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; SqlConnectionPool.&lt;span&gt;__instance&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建一个对象，并将对象赋值给静态字段__instance&lt;/span&gt;
            SqlConnectionPool.&lt;span&gt;__instance&lt;/span&gt; =&lt;span&gt; SqlConnectionPool()
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; SqlConnectionPool.&lt;span&gt;__instance&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;单例模式关键代码解析&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;当第一次调用这个静态方法的时候，判断__instacne的值是None所以执行else，然后在else中创建一个对象赋给静态字段__instance，然后返回这个静态字段&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;第二次调用这个今静态方法的时候，判断__instance的值为真，所以直接返回这个静态字段，而这个静态字段中包含的是第一次创建的对象，所以在以后调用这个方法&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;就只会调用第一次创建的对象，这就是单例模式&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_connection(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取连接&lt;/span&gt;
        r = random.randrange(1,11&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; r


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;我们创建多个对象内存地址是一样的，说明拿到的是同一个对象&lt;/span&gt;
obj =&lt;span&gt; SqlConnectionPool.get_instance()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(obj)
obj1 &lt;/span&gt;=&lt;span&gt; SqlConnectionPool.get_instance()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(obj1)
obj2 &lt;/span&gt;=&lt;span&gt; SqlConnectionPool.get_instance()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(obj2)


输出结果：
&lt;/span&gt;&amp;lt;&lt;span&gt;__main__&lt;/span&gt;.SqlConnectionPool instance at 0x000000000260C808&amp;gt;
&amp;lt;&lt;span&gt;__main__&lt;/span&gt;.SqlConnectionPool instance at 0x000000000260C808&amp;gt;
&amp;lt;&lt;span&gt;__main__&lt;/span&gt;.SqlConnectionPool instance at 0x000000000260C808&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 以上是基于类，使用静态字段和静态方法实现的一个单例模式。&lt;/p&gt;
</description>
<pubDate>Mon, 30 Jul 2018 16:11:00 +0000</pubDate>
<dc:creator>BD-ld-2017</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liudi2017/p/9393614.html</dc:identifier>
</item>
<item>
<title>设计模式-----Builder模式 - JJian</title>
<link>http://www.cnblogs.com/jian0110/p/9393573.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jian0110/p/9393573.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;近日，看到Myabtis中组件中SqlSessionFactory由SqlSessionFactoryBuilder().build()生成时，且采用Builder模式，遂记录学习之。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
SqlSessionFactory sqlSessionFactory = &lt;span&gt;new&lt;/span&gt; SqlSessionFactoryBuilder().build(inputStream);
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;
&lt;h2&gt;1、什么是Builder模式？&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　（1）对于复杂的对象，如果只是用构造方法创建的话，构造方法中会存在很多的逻辑，那么我们可以一步步有秩序构建它，从而降低复杂度；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（2）对于复杂的对象，使用者不必知道其内部是如何实现的清下，逐步构造需要的实例对象；&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;2、什么情况下使用Builder模式？&lt;/h2&gt;
&lt;p&gt;　　（1）将一个复杂对象的构建与它的表示分离，即相同的构造过程可以有不同表示；&lt;/p&gt;
&lt;p&gt;　　（2）当有多个构造器且需要传入不同的参数表示不同的产品时（即可以弥补工厂模式等无法选择多参数的缺点）&lt;/p&gt;
&lt;p&gt;　　（3）传入参数情况比较灵活且复杂的情况，或者说一开始不需要明确参数的情况。&lt;/p&gt;
&lt;p&gt;　　（4）框架中很多Configuration配置都会用到Builder模式。&lt;/p&gt;
&lt;h2&gt;3、具体使用Builder例子&lt;/h2&gt;
&lt;p&gt;（1）以前经常通过不同构造器传入不同的参数构造不同复杂的对象，比如我们现在需要一个User的不同情况对象&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;只有id和name&lt;/li&gt;
&lt;li&gt;有id、name、age&lt;/li&gt;
&lt;li&gt;有id、name、age、address&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String address;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不同的构造器传入不同的参数，创造不同的复杂的产品&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; User(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id, String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; User(&lt;span&gt;int&lt;/span&gt; id, String name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; User(&lt;span&gt;int&lt;/span&gt; id, String name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age, String address) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age=&lt;span&gt; age;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.address =&lt;span&gt; address;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getAge() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setAge(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getAddress() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; address;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAddress(String address) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.address =&lt;span&gt; address;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试类这样编写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Main {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;情况1：id、姓名&lt;/span&gt;
        User user = &lt;span&gt;new&lt;/span&gt; User(1, &quot;Zhangsan&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;情况2：id、姓名、年龄&lt;/span&gt;
        User user2 = &lt;span&gt;new&lt;/span&gt; User(2,&quot;Lisi&quot;,22&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;情况3：id、姓名、年龄、地址&lt;/span&gt;
        User user3 = &lt;span&gt;new&lt;/span&gt; User(3,&quot;Wangwu&quot;,23,&quot;Beijing&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;情况4：id与年龄不清楚，很容易混淆，必须得查看源码或者文档才能知道哪个参数位置id/年龄&lt;/span&gt;
        User user4 = &lt;span&gt;new&lt;/span&gt; User(24,&quot;Wangwu&quot;,24,&quot;Beijing&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;OK，这样是没有问题的，但是会有以下弊端：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;就好比情况4。当传入的参数很多并且没有说明文档的情况下，之后阅读完源码后才能更好地使用。那么就有可能对源码进行修改，这样就违背了在应用中一个好的设计模块的原则，即设计模式中的开闭原则(Open-Closed Principle, OCP，对修改封闭)&lt;/li&gt;
&lt;li&gt;每种情况都得编写一个的构造器，没有一点的灵活度。再比如这里address属性是可选的，可以不传入，那么灵活度同样很低！&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;（2）接下来就使用Builder模式创建，注意：Builder主要采用Java静态内部类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 利用Builer模式灵活面对复杂对象的创建
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Lijian
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User2 {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String address;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; User2(Builder builder) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; builder.id;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; builder.name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; builder.age;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.address =&lt;span&gt; builder.address;
    }
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Builder{
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String address;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;灵活选择参数&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; Builder setId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Builder setName(String name) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Builder setAddress(String address) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.address =&lt;span&gt; address;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Builder setAge(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; age) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;最后build返回User2对象&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User2 build() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; User2(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Main {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过build创建了User2对象,之后通过setXXX方法可灵活初始化属性，最后build返回对象&lt;/span&gt;
        User2 user = &lt;span&gt;new&lt;/span&gt; User2.Builder().setId(1).setName(&quot;Lijian&quot;).setAge(22&lt;span&gt;).build();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;情况1：id、姓名&lt;/span&gt;
        User2 user2 = &lt;span&gt;new&lt;/span&gt; User2.Builder().setId(2).setName(&quot;Zhangsan&quot;&lt;span&gt;).build();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;情况2：id、姓名、年轻、地址&lt;/span&gt;
        User2 user3 = &lt;span&gt;new&lt;/span&gt; User2.Builder().setId(2).setName(&quot;Lisi&quot;&lt;span&gt;).build();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;情况3：id与age很明显能区分&lt;/span&gt;
        User2 user4 = &lt;span&gt;new&lt;/span&gt; User2.Builder().setId(23).setAge(23&lt;span&gt;).build();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过setXXX()方法灵活选择参数，最后build()方法“闭合”返回对象。很适用于复杂对象的创建，此处让我想起Java8新特性中的Stream API（&lt;a href=&quot;https://blog.csdn.net/mynewclass/article/details/80393308&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/mynewclass/article/details/80393308&lt;/a&gt;）的一个特点：懒加载。是的，有点“懒加载”的味道，不需要立马指定属性，也不会立马生效，之后最后的操作build()才会生效！&lt;/p&gt;

</description>
<pubDate>Mon, 30 Jul 2018 15:59:00 +0000</pubDate>
<dc:creator>JJian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jian0110/p/9393573.html</dc:identifier>
</item>
<item>
<title>大数据自动化安装部署方案(一)——集群系统环境设置 - 牧梦者</title>
<link>http://www.cnblogs.com/swordfall/p/9330063.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/swordfall/p/9330063.html</guid>
<description>&lt;h2&gt;1.1系统和yum源镜像准备&lt;/h2&gt;
&lt;p&gt;需要的条件：&lt;/p&gt;
&lt;p&gt;① 至少三台刚装上Centos7.0系统的物理机或者虚拟机；&lt;/p&gt;
&lt;p&gt;② CentOS-7.0-x86_64-bin-DVD1.iso镜像，用于制作本地yum源；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/span&gt;本文三台物理机或虚拟机的操作系统镜像是CentOS-7-x86_64-Minimal-1804.iso。&lt;/p&gt;
&lt;p&gt;用于制作本地yum源的CentOS-7.0-x86_64-bin-DVD1.iso镜像默认存放于第一节点node1的/opt/system下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1217276/201807/1217276-20180731001031240-1574899925.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.2 配置文件host_ip.txt和frames.tx准备&lt;/h2&gt;
&lt;p&gt;host_ip.txt文件为集群ip、hostname、root账号密码配置；而frames.txt为所需要安装的软件配置说明，其中false为不安装，true为安装&lt;/p&gt;
&lt;p&gt;host_ip.txt内容为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;187.201&lt;/span&gt;&lt;span&gt; node1 root hadoop
&lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;187.202&lt;/span&gt;&lt;span&gt; node2 root hadoop
&lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;187.203&lt;/span&gt; node3 root hadoop
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;frames.txt内容为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
jdk-8u181-linux-x64.&lt;span&gt;tar&lt;/span&gt;.gz &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
scala&lt;/span&gt;-&lt;span&gt;2.11&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;.tgz &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
hadoop&lt;/span&gt;-&lt;span&gt;2.7&lt;/span&gt;.&lt;span&gt;6&lt;/span&gt;.&lt;span&gt;tar&lt;/span&gt;.gz &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
hbase&lt;/span&gt;-&lt;span&gt;2.0&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;-bin.&lt;span&gt;tar&lt;/span&gt;.gz &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
apache&lt;/span&gt;-hive-&lt;span&gt;2.3&lt;/span&gt;.&lt;span&gt;3&lt;/span&gt;-bin.&lt;span&gt;tar&lt;/span&gt;.gz &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
zookeeper&lt;/span&gt;-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;13&lt;/span&gt;.&lt;span&gt;tar&lt;/span&gt;.gz &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
spark&lt;/span&gt;-&lt;span&gt;2.3&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;-bin-hadoop2.&lt;span&gt;7&lt;/span&gt;.tgz &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
kafka_2.&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;-&lt;span&gt;1.1&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;.tgz &lt;span&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;1.3 安装软件准备&lt;/h2&gt;
&lt;p&gt;需要在官网上下载frames.txt所列的软件安装包，可以自行下载。&lt;/p&gt;
&lt;p&gt;这里默认所有的软件安装包放在第一节点node1的/opt/frames目录下，下面涉及软件部分的shell操作都会根据/opt/frames/目录下是否有该软件再进行自动安装。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1217276/201807/1217276-20180730235114197-79060640.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.4 shell命令文本准备&lt;/h2&gt;
&lt;p&gt;以下shell文本文件，以及host_ip.txt和frames.txt文件，都默认放置在第一节点node1的&lt;span&gt;&lt;em&gt;/home/hadoop/automaticDeploy&lt;/em&gt;&lt;span&gt;目录下，如图：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1217276/201807/1217276-20180730234854393-1698634637.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/span&gt;以下所有shell命令的执行，都需要以root用户执行&lt;/p&gt;
&lt;p&gt;模块化自动安装部署包括IP地址设置、机器名hostname修改、host配置文件修改、关闭防火墙/SELINUX、添加bigdata用户名、配置yum源、配置SSH无密码登录、配置JDK环境、配置Scala环境共9个模块。&lt;/p&gt;
&lt;h2&gt;2.1 集群中每台机器IP地址的设置&lt;/h2&gt;
&lt;p&gt;集群中每台机器首先需要设置IP地址，保证机器与机器之间可以直接通过ip地址访问。&lt;/p&gt;
&lt;p&gt;IP地址设置shell命令文件editIpAddr.sh代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#! /bin/&lt;span&gt;bash
################
#针对Centos&lt;/span&gt;-&lt;span&gt;7.0&lt;/span&gt;&lt;span&gt;
################

#处理涉及到IP地址设置的网络文件，备份并创建新的
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; doWithNetworkFile()
{
 #&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;.查找/etc/sysconfig/network-scripts/目录下是否存在ifcfg-&lt;span&gt;ens33文件，存在则重命名为.bak结尾的
 fileResult&lt;/span&gt;=`&lt;span&gt;find&lt;/span&gt; /etc/sysconfig/network-scripts/ -name &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ifcfg-ens33&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;`

 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ $fileResult != &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; ]]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
     #&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;.创建一个ifcfg-&lt;span&gt;ens33文件用于配置网络设置
     result&lt;/span&gt;=`&lt;span&gt;find&lt;/span&gt; /etc/sysconfig/network-scripts -&lt;span&gt;wholename $fileResult.bak`
     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ -&lt;span&gt;z $result ]]  
     &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;        
         &lt;span&gt;mv&lt;/span&gt;&lt;span&gt; $fileResult $fileResult.bak
     &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;
     &lt;span&gt;cp&lt;/span&gt;&lt;span&gt; $fileResult.bak $fileResult
 &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
     &lt;span&gt;touch&lt;/span&gt; /etc/sysconfig/network-scripts/ifcfg-&lt;span&gt;ens33
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
}

#配置ip地址
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; configureIpAddr()
{ 
 ip&lt;/span&gt;=$&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
 gateway&lt;/span&gt;=$&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
 fileUrl&lt;/span&gt;=/etc/sysconfig/network-scripts/ifcfg-&lt;span&gt;ens33 

 #&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;.把ifcfg-&lt;span&gt;ens33文件非#开头的行注释掉
 &lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s/^[^#]/#&amp;amp;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; $fileUrl
 
 UUID&lt;/span&gt;=`&lt;span&gt;grep&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^#UUID=*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; $fileUrl | &lt;span&gt;head&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;`
 
 #&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.配置内网IP地址
 #连接类型
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TYPE=Ethernet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $fileUrl
 #静态IP
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BOOTPROTO=static&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $fileUrl
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DEFROUTE=yes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $fileUrl
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPV4_FAILURE_FATAL=no&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $fileUrl
 #IPV6关闭
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPV6INIT=no&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $fileUrl
 #配置名字
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NAME=ens33&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $fileUrl
 #唯一标识
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${UUID:1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $fileUrl
 #网卡名称
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DEVICE=ens33&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $fileUrl
 #开机即启动网络
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ONBOOT=yes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $fileUrl
 #IP地址
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPADDR=$ip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $fileUrl
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PREFIX=24&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $fileUrl
 #网络掩码
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NETMASK=255.255.255.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $fileUrl
 #网关
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GATEWAY=$gateway&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $fileUrl 
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; editIpAddr()
{
 ip&lt;/span&gt;=$&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
 gateway&lt;/span&gt;=$&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
 
 #处理涉及到IP地址设置的网络文件，备份并创建新的
 doWithNetworkFile
 #在&lt;/span&gt;/etc/sysconfig/network-scripts/ifcfg-&lt;span&gt;ens33上设置IP地址
 configureIpAddr $ip $gateway 
 
 #重启网络服务
 service network restart
}

ip&lt;/span&gt;=$&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
gateway&lt;/span&gt;=$&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
editIpAddr $ip $gateway&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分别在三台机器上以root用户执行如下命令：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;/home/hadoop/automaticDeploy/systems/editIpAddr.sh 192.168.187.*** 192.168.187.2&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 注意：&lt;/p&gt;
&lt;p&gt;①网关192.168.187.2需要通过 &lt;span&gt;&lt;em&gt;route -n &lt;/em&gt;&lt;/span&gt;命令(CentOS7以上使用)查看，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1217276/201807/1217276-20180730194437114-1999413222.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;②不同机器的ip地址是不一样的，这里指IP地址的前三个数值是一样，前三个数值与网关的前三个数值是一致的；只有最后一个***是根据需求设置，一般在0~255之间。这里我假定三个节点node1、node2、node3的IP分别为192.168.187.201，192.168.187.202，192.168.187.203。&lt;/p&gt;
&lt;h2&gt;2.2 修改机器名hostname&lt;/h2&gt;
&lt;p&gt;changeHostname.sh代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
#! /bin/&lt;span&gt;bash

#修改机器名hostname
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; changeHostname()
{
 &lt;/span&gt;&lt;span&gt;hostname&lt;/span&gt;=$&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
 #&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;change the hostname $1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
 
 &lt;span&gt;egrep&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^HOSTNAME=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /etc/sysconfig/network &amp;gt;&amp;amp; /dev/&lt;span&gt;null&lt;/span&gt;
 &lt;span&gt;if&lt;/span&gt; [ $? -eq &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
      #存在则删除旧的hostname
      &lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/^HOSTNAME=/d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /etc/sysconfig/&lt;span&gt;network
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
 #添加新的hostname
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HOSTNAME=$hostname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sysconfig/&lt;span&gt;network
 
 #&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;change the hostname $1 successfully&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}

#获取参数
node&lt;/span&gt;=$&lt;span&gt;1&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; [ -&lt;span&gt;z $node ]
&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;参数为空，请输入参数node1,node2,node3...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    changeHostname $node
&lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以root用户执行如下命令，$hostname为参数传值，设为node1、node2、node3....&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;/home/hadoop/automaticDeploy/systems/changeHostname.sh $hostname&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt; 2.3 host配置文件修改&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;addClusterIps.sh代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#! /bin/&lt;span&gt;bash

#添加Ip、hostname到&lt;/span&gt;/etc/&lt;span&gt;hosts文件里面
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; addIpToHostFile()
{
 ip&lt;/span&gt;=$&lt;span&gt;1&lt;/span&gt;
 &lt;span&gt;hostname&lt;/span&gt;=$&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
 #查询$ip是否存在于&lt;/span&gt;/etc/&lt;span&gt;hosts里面
 &lt;/span&gt;&lt;span&gt;egrep&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^$ip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /etc/hosts &amp;gt;&amp;amp; /dev/&lt;span&gt;null&lt;/span&gt;
 &lt;span&gt;if&lt;/span&gt; [ $? -eq &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
     #$&lt;/span&gt;?是上一个程序执行是否成功的标志，如果执行成功则$?&lt;span&gt;为0，否则不为0，存在则先把就的ip设置删除掉
     &lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/^$ip/d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /etc/&lt;span&gt;hosts
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
 
 #把ip、hostname添加到&lt;/span&gt;/etc/&lt;span&gt;hosts中
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$ip $hostname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/&lt;span&gt;hosts
}

#执行ssh免密登录之前，hosts文件里面需要存储每台机器的ip地址
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; editHostFile()
{
 #&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;edit the host file&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
 
 #&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;./home/hadoop/&lt;span&gt;host_ip.txt文件中读取ip和hostname
 &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; read line
 &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;&lt;span&gt;
   #提取文件中的ip
   ip&lt;/span&gt;=`&lt;span&gt;echo&lt;/span&gt; $line | &lt;span&gt;cut&lt;/span&gt; -d &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; -&lt;span&gt;f1`
   #提取文件中的用户名
   &lt;/span&gt;&lt;span&gt;hostname&lt;/span&gt;=`&lt;span&gt;echo&lt;/span&gt; $line | &lt;span&gt;cut&lt;/span&gt; -d &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; -&lt;span&gt;f2`

   addIpToHostFile $ip $&lt;/span&gt;&lt;span&gt;hostname&lt;/span&gt;
 &lt;span&gt;done&lt;/span&gt; &amp;lt; /home/hadoop/automaticDeploy/&lt;span&gt;host_ip.txt #读取存储ip的文件

 #&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;edit the host file successfully&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}

editHostFile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以root用户执行命令：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;/home/hadoop/automaticDeploy/systems/addClusterIps.sh&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt; 2.4 关闭防火墙、SELINUX&lt;/h2&gt;
&lt;p&gt;closeFirewall.sh命令如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#! /bin/&lt;span&gt;bash

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; closeFirewallAndGetenforce()
{
 #&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.关闭防火墙
 firewallStatus&lt;/span&gt;=`firewall-cmd --&lt;span&gt;state`
 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ $firewallStatus = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;running&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
     systemctl stop firewalld.service &lt;/span&gt;&amp;amp;&amp;amp;&lt;span&gt;systemctl disable firewalld.service
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
 
 #&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.关闭getenforce
 getenforceStatus&lt;/span&gt;=&lt;span&gt;`getenforce`
 &lt;/span&gt;&lt;span&gt;egrep&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^SELINUX=enforcing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /etc/selinux/config &amp;gt;&amp;amp; /dev/&lt;span&gt;null&lt;/span&gt;
 &lt;span&gt;if&lt;/span&gt; [[ $getenforceStatus = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Enforcing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; || $? -eq &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ]]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;
     &lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s/^SELINUX=enforcing/SELINUX=disabled/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; /etc/selinux/&lt;span&gt;config 
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
 
 #&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.重启，使设置生效
 #reboot
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; startFirewallAndGetenforce()
{
 #&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.开启防火墙
 firewallStatus&lt;/span&gt;=`firewall-cmd --&lt;span&gt;state`
 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ $firewallStatus != &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;running&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
    systemctl enable firewalld.service &lt;/span&gt;&amp;amp;&amp;amp;&lt;span&gt; systemctl start firewalld.service
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;

 #&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.开启getenforce
 getenforceStatus&lt;/span&gt;=&lt;span&gt;`getenforce`
 &lt;/span&gt;&lt;span&gt;egrep&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^SELINUX=disabled&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /etc/selinux/config &amp;gt;&amp;amp; /dev/&lt;span&gt;null&lt;/span&gt;
 &lt;span&gt;if&lt;/span&gt; [[ $getenforceStatus = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Disabled&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; || $? -eq &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ]]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;
    &lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s/^SELINUX=disabled/SELINUX=enforcing/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; /etc/selinux/&lt;span&gt;config
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;

 #&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.重启，使设置生效
 #reboot
}

operate&lt;/span&gt;=$&lt;span&gt;1&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; [ -&lt;span&gt;z $operate ]
&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;参数为空，请输入参数close或start&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;else&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; [[ $operate = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;close&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]]
    &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
        closeFirewallAndGetenforce
    &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; [[ $operate = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]]
    &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
        startFirewallAndGetenforce
    &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;
&lt;span&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里提供开启和关闭防火墙两种功能，方便操作。以root用户执行该shell命令时，需要输入参数close或start：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;/home/hadoop/automaticDeploy/systems/closeFirewall.sh close&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;2.5 添加系统bigdata用户&lt;/h2&gt;
&lt;p&gt;autoCreateUser.sh代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#! /bin/&lt;span&gt;bash

#创建bigdata用户组，创建bigdata用户并设置密码
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; createUserAndGroup()
{
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start to create user 'bigdata'!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

 user&lt;/span&gt;=$&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
 group&lt;/span&gt;=$&lt;span&gt;2&lt;/span&gt;&lt;span&gt;

 #create group &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; not exists
 #在&lt;/span&gt;/etc/group中查找用户组是否存在，并把错误输出输到/dev/&lt;span&gt;null中
 &lt;/span&gt;&lt;span&gt;egrep&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^$group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /etc/group &amp;gt;&amp;amp; /dev/&lt;span&gt;null&lt;/span&gt;&lt;span&gt;
 # 判断上一命令是否等于0，不等于则创建用户组
 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ $? -ne &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
     groupadd $group
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;

 #create user &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; not exists
 &lt;/span&gt;&lt;span&gt;egrep&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^$user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /etc/&lt;span&gt;passwd&lt;/span&gt; &amp;gt;&amp;amp; /dev/&lt;span&gt;null&lt;/span&gt;
 &lt;span&gt;if&lt;/span&gt; [ $? -ne &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
     useradd &lt;/span&gt;-&lt;span&gt;g $group $user
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;

 #在shell中使用expect实现自动输入密码，通常需要与&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;expect &amp;lt;&amp;lt;EOF EOF&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;、spawn、子expect一起使用
 expect &lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt; EOF
 spawn &lt;/span&gt;&lt;span&gt;passwd&lt;/span&gt;&lt;span&gt; $user
 expect &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;New password:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
 send &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${user}\r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
 expect &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Retype new password:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
 send &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${user}\r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
 expect eof;
EOF
}

#删除bigdata用户，删除bigdata用户组
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; deleteUserAndGroup()
{
 user&lt;/span&gt;=$&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
 group&lt;/span&gt;=$&lt;span&gt;2&lt;/span&gt;

 &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete the user:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; $user &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; and the userGroup:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; $group
 userdel &lt;/span&gt;-&lt;span&gt;r $user
 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ $user !=&lt;span&gt; $group ]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
     groupdel $group
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
}

operate&lt;/span&gt;=$&lt;span&gt;1&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; [ -&lt;span&gt;z $operate ]
&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;参数为空，请输入参数create或delete&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;else&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; [[ $operate = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;create&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]]
    &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
        createUserAndGroup bigdata bigdata
    &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; [[ $operate = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]]
    &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
        deleteUserAndGroup bigdata bigdata
    &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;
&lt;span&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里提供创建、删除用户两种操作，以root用户执行该命令需要输入参数create或者delete：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;/home/hadoop/automaticDeploy/systems/autoCreateUser.sh create&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;2.6 配置yum源&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;由于大数据平台一般是在内网环境下搭建的，所以需要配置本地yum源，用以解决一些依赖包缺少的问题，这里以node1节点作为本地yum源所在的服务器，以CentOS-7.0-x86_64-bin-DVD1.iso作为yum源的source。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;configureYum.sh代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#! /bin/&lt;span&gt;bash

#配置yum源
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; configureYumSource()
{
 yumUrl&lt;/span&gt;=$&lt;span&gt;1&lt;/span&gt;&lt;span&gt; 
 yumFile&lt;/span&gt;=$&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
 
 #&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;.把CentOS-&lt;span&gt;Media.repo文件非#开头的行注释掉
 &lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s/^[^#]/#&amp;amp;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; $yumFile
 #&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.配置本地源
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[base]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $yumFile
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name=CentOS-Local&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $yumFile
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;baseurl=$yumUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $yumFile
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gpgcheck=0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $yumFile
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enabled=1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $yumFile
 &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $yumFile
 #&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.清除YUM缓存
 &lt;/span&gt;&lt;span&gt;yum&lt;/span&gt; clean all &amp;gt; /dev/&lt;span&gt;null&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&amp;gt;&amp;amp;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
 #&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.列出可用的YUM源
 &lt;/span&gt;&lt;span&gt;yum&lt;/span&gt; repolist &amp;gt; /dev/&lt;span&gt;null&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&amp;gt;&amp;amp;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
}

#处理并保证只有一个CentOS&lt;/span&gt;-&lt;span&gt;Media.repo文件存在
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; doWithRepoFile()
{
 #&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.进入到yum.repos.d目录
 cd &lt;/span&gt;/etc/&lt;span&gt;yum&lt;/span&gt;.repos.d/&lt;span&gt;
 
 #&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;.查找/etc/&lt;span&gt;yum&lt;/span&gt;.repos.d/&lt;span&gt;目录下是否存在.repo结尾的文件，存在则重命名为.repo.bak结尾的
 fileResult&lt;/span&gt;=`&lt;span&gt;find&lt;/span&gt; /etc/&lt;span&gt;yum&lt;/span&gt;.repos.d/ -name &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*.repo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;`
 &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;file&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; $fileResult
 &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;&lt;span&gt;
   onlyFile&lt;/span&gt;=`&lt;span&gt;find&lt;/span&gt; /etc/&lt;span&gt;yum&lt;/span&gt;.repos.d -wholename $&lt;span&gt;file&lt;/span&gt;&lt;span&gt;.bak`
   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ -&lt;span&gt;z $onlyFile ]]
   &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;
        &lt;span&gt;mv&lt;/span&gt; $&lt;span&gt;file&lt;/span&gt; $&lt;span&gt;file&lt;/span&gt;&lt;span&gt;.bak
   &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;
 &lt;span&gt;done&lt;/span&gt;&lt;span&gt;

 #&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.只创建一个.repo文件用于配置本地yum源
 result&lt;/span&gt;=`&lt;span&gt;find&lt;/span&gt; /etc/&lt;span&gt;yum&lt;/span&gt;.repos.d/ -name CentOS-&lt;span&gt;Media.repo.bak`
 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ -&lt;span&gt;z $result ]]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;
     &lt;span&gt;touch&lt;/span&gt; CentOS-&lt;span&gt;Media.repo
 &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
     &lt;span&gt;cp&lt;/span&gt; CentOS-Media.repo.bak CentOS-&lt;span&gt;Media.repo
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
}

#############################################################################
#同一函数及其调用的子函数，父函数与子函数均有一样的变量名，而内容不一样会报错
#############################################################################

#配置本地源
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; localYumSource()
{
 systemUrl&lt;/span&gt;=$&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
 ip&lt;/span&gt;=$&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
 yumFile&lt;/span&gt;=/etc/&lt;span&gt;yum&lt;/span&gt;.repos.d/CentOS-&lt;span&gt;Media.repo

 #&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.不存在则创建mount的目录
 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ ! -d /var/&lt;span&gt;iso ]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;
      &lt;span&gt;mkdir&lt;/span&gt; /var/&lt;span&gt;iso
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
 
 #挂载系统，已挂载则不再次挂载
 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ ! -d /var/iso/&lt;span&gt;CentOS_BuildTag ]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt; 
     &lt;span&gt;mount&lt;/span&gt; -o loop $systemUrl /var/&lt;span&gt;iso
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;

 #&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;.处理并保证只有一个CentOS-&lt;span&gt;Media.repo的文件用于配置本地yum源
 doWithRepoFile 

 #&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.配置yum源
 configureYumSource &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;:&lt;span&gt;///&lt;/span&gt;&lt;span&gt;var/iso $yumFile&lt;/span&gt;
&lt;span&gt;
 #&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.安装相应的软件
 httpdIsExists&lt;/span&gt;=`rpm -qa | &lt;span&gt;grep&lt;/span&gt;&lt;span&gt; http`
 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ -&lt;span&gt;z $httpdIsExists ]]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;
     &lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; -&lt;span&gt;y httpd
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;

 #&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;.开启httpd使用浏览器访问
 #service httpd start
 httpdStatus&lt;/span&gt;=&lt;span&gt;`systemctl status httpd.service`
 result&lt;/span&gt;=$(&lt;span&gt;echo&lt;/span&gt; $httpdStatus | &lt;span&gt;grep&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Active: active (running)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ $result = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; ]]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
     systemctl start httpd.service
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
 
 #&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;.将YUM源配置到httpd中，其他的服务器可通过网络访问这个内网中的YUM源
 httpUrl&lt;/span&gt;=/var/www/html/CentOS-&lt;span&gt;7.0&lt;/span&gt;
 &lt;span&gt;if&lt;/span&gt; [ ! -e $httpUrl/&lt;span&gt;lock ]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;
     &lt;span&gt;cp&lt;/span&gt; -r /var/&lt;span&gt;iso $httpUrl
     &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt; $httpUrl/&lt;span&gt;lock
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
 
 #&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;.取消先前挂载的镜像 强制取消，哈哈哈哈
 &lt;/span&gt;&lt;span&gt;umount&lt;/span&gt; -fl /var/&lt;span&gt;iso
 
 #&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;.修改yum源指向的地址
 &lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s/^baseurl\=file:\/\/\/var\/iso/baseurl\=http:\/\/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;$ip&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\/CentOS-7.0/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; $yumFile
 
 #&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;.清除YUM缓存
 &lt;/span&gt;&lt;span&gt;yum&lt;/span&gt; clean all &amp;gt; /dev/&lt;span&gt;null&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&amp;gt;&amp;amp;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
 
 #&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;.列出可用的YUM源
 &lt;/span&gt;&lt;span&gt;yum&lt;/span&gt; repolist &amp;gt; /dev/&lt;span&gt;null&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&amp;gt;&amp;amp;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
 #&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;create the local yum source successfully&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}

#配置远程yum源
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; remoteYumSource()
{
 ip&lt;/span&gt;=$&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
 yumUrl&lt;/span&gt;=http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;$ip/CentOS-7.0&lt;/span&gt;
 yumFile=/etc/&lt;span&gt;yum&lt;/span&gt;.repos.d/CentOS-&lt;span&gt;Media.repo 

 #&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;.处理并保证只有一个CentOS-&lt;span&gt;Media.repo的文件用于配置yum源
 doWithRepoFile

 #&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.配置yum源
 configureYumSource $yumUrl $yumFile
}

&lt;/span&gt;&lt;span&gt;hostname&lt;/span&gt;=$&lt;span&gt;1&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; [[ $&lt;span&gt;hostname&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;node1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]]
&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
    localYumSource &lt;/span&gt;/opt/system/CentOS-&lt;span&gt;7&lt;/span&gt;-x86_64-DVD-&lt;span&gt;1804&lt;/span&gt;.iso &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;187.201&lt;/span&gt;
&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    remoteYumSource &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;187.201&lt;/span&gt;
&lt;span&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以root用户执行代码如下，参数$hostname一般为node1、node2、node3：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;/home/hadoop/automaticDeploy/systems/configureYum.sh $hostname&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;2.7 配置SSH无密码登录&lt;/h2&gt;
&lt;p&gt;sshFreeLogin代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#! /bin/&lt;span&gt;bash

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; sshFreeLogin()
{
 #&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.检测expect服务是否存在，不存在则使用yum安装expect
 expectIsExists&lt;/span&gt;=`rpm -qa | &lt;span&gt;grep&lt;/span&gt;&lt;span&gt; expect` 
 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ -&lt;span&gt;z $expectIsExists ]
 &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;
      &lt;span&gt;yum&lt;/span&gt; -y &lt;span&gt;install&lt;/span&gt;&lt;span&gt; expect
 &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;

 #&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.密钥对不存在则创建密钥
 [ &lt;/span&gt;! -f /root/.&lt;span&gt;ssh&lt;/span&gt;/id_rsa.pub ] &amp;amp;&amp;amp; &lt;span&gt;ssh-keygen&lt;/span&gt; -t rsa -P &lt;span&gt;&quot;&quot;&lt;/span&gt; -f /root/.&lt;span&gt;ssh&lt;/span&gt;/&lt;span&gt;id_rsa

 &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; read line;&lt;span&gt;do&lt;/span&gt;&lt;span&gt;
       #提取文件中的ip
       &lt;/span&gt;&lt;span&gt;hostname&lt;/span&gt;=`&lt;span&gt;echo&lt;/span&gt; $line | &lt;span&gt;cut&lt;/span&gt; -d &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; -&lt;span&gt;f2`
       #提取文件中的用户名
       user_name&lt;/span&gt;=`&lt;span&gt;echo&lt;/span&gt; $line | &lt;span&gt;cut&lt;/span&gt; -d &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; -&lt;span&gt;f3`
       #提取文件中的密码
       pass_word&lt;/span&gt;=`&lt;span&gt;echo&lt;/span&gt; $line | &lt;span&gt;cut&lt;/span&gt; -d &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; -&lt;span&gt;f4`
          
       expect &lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;EOF
              #复制公钥到目标主机
              spawn &lt;/span&gt;&lt;span&gt;ssh&lt;/span&gt;-copy-&lt;span&gt;id&lt;/span&gt; $&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;
              expect {
                      #expect实现自动输入密码
                      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yes/no&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; { send &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yes\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;exp_continue } 
                      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; { send &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$pass_word\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;exp_continue }
                      eof
              }
EOF
 # 读取存储ip的文件 
 &lt;/span&gt;&lt;span&gt;done&lt;/span&gt; &amp;lt; /home/hadoop/automaticDeploy/&lt;span&gt;host_ip.txt
 
}

sshFreeLogin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以root用户执行代码如下：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;/home/hadoop/automaticDeploy/systems/sshFreeLogin.sh&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;2.8 配置JDK环境&lt;/h2&gt;
&lt;p&gt;configureJDK.sh代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#! /bin/&lt;span&gt;bash

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; configureJDK()
{
 #&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.在frames.txt中查看是否需要安装java
 javaInfo&lt;/span&gt;=`&lt;span&gt;egrep&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^jdk&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /home/hadoop/automaticDeploy/&lt;span&gt;frames.txt`
 
 java&lt;/span&gt;=`&lt;span&gt;echo&lt;/span&gt; $javaInfo | &lt;span&gt;cut&lt;/span&gt; -d &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; -&lt;span&gt;f1`
 isInstall&lt;/span&gt;=`&lt;span&gt;echo&lt;/span&gt; $javaInfo | &lt;span&gt;cut&lt;/span&gt; -d &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; -&lt;span&gt;f2`

 #是否安装
 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ $isInstall = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]];&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
 
    #&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;.查看/opt/&lt;span&gt;frames目录下是否有java安装包
    javaIsExists&lt;/span&gt;=`&lt;span&gt;find&lt;/span&gt; /opt/frames -&lt;span&gt;name $java`
    
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ ${#javaIsExists} -ne &lt;span&gt;0&lt;/span&gt; ]];&lt;span&gt;then&lt;/span&gt;
        
        &lt;span&gt;if&lt;/span&gt; [ -d /usr/lib/java ];&lt;span&gt;then&lt;/span&gt;
              &lt;span&gt;rm&lt;/span&gt; -rf /usr/lib/&lt;span&gt;java
        &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;
 
        &lt;span&gt;mkdir&lt;/span&gt; /usr/lib/java &amp;amp;&amp;amp; &lt;span&gt;chmod&lt;/span&gt; -R &lt;span&gt;777&lt;/span&gt; /usr/lib/&lt;span&gt;java
   
        #&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;.解压到指定文件夹/usr/lib/&lt;span&gt;java中 
        &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;开启解压jdk安装包&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;tar&lt;/span&gt; -zxvf $javaIsExists -C /usr/lib/java &amp;gt;&amp;amp; /dev/&lt;span&gt;null&lt;/span&gt;
        &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jdk安装包解压完毕&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    
        java_home&lt;/span&gt;=`&lt;span&gt;find&lt;/span&gt; /usr/lib/java -maxdepth &lt;span&gt;1&lt;/span&gt; -name &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jdk*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;`

        #&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;.在/etc/&lt;span&gt;profile配置JAVA_HOME
        profile&lt;/span&gt;=/etc/&lt;span&gt;profile
        &lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/^export JAVA_HOME/d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; $profile
        &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;export JAVA_HOME=$java_home&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $profile
 
        #&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;.在/etc/&lt;span&gt;profile配置PATH
        &lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/^export PATH=\$PATH:\$JAVA_HOME\/bin/d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; $profile
        &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;export PATH=\$PATH:\$JAVA_HOME/bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $profile
        &lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/^export CLASSPATH=.:\$JAVA_HOME/d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; $profile
        &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;export CLASSPATH=.:\$JAVA_HOME/lib/dt.jar:\$JAVA_HOME/lib/tools.jar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $profile

        #&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;.更新/etc/&lt;span&gt;profile文件
        source &lt;/span&gt;/etc/profile &amp;amp;&amp;amp; source /etc/&lt;span&gt;profile
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
         &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/opt/frames目录下没有jdk安装包&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;fi&lt;/span&gt;
 &lt;span&gt;else&lt;/span&gt;
     &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/opt/frames目录下没有jdk安装包&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
 &lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
}

configureJDK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以root用户执行代码如下：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;/home/hadoop/automaticDeploy/systems/configureJDK.sh&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;2.9 配置Scala环境&lt;/h2&gt;
&lt;p&gt;configureScala.sh代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#! /bin/&lt;span&gt;bash

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; configureScala()
{
 #&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.在frames.txt中查看是否需要安装scala
 scalaInfo&lt;/span&gt;=`&lt;span&gt;egrep&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^scala&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /home/hadoop/automaticDeploy/&lt;span&gt;frames.txt`
 
 scala&lt;/span&gt;=`&lt;span&gt;echo&lt;/span&gt; $scalaInfo | &lt;span&gt;cut&lt;/span&gt; -d &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; -&lt;span&gt;f1`
 isInstall&lt;/span&gt;=`&lt;span&gt;echo&lt;/span&gt; $scalaInfo | &lt;span&gt;cut&lt;/span&gt; -d &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; -&lt;span&gt;f2`

 #是否安装
 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ $isInstall = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]];&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
     
     #&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;.查找/opt/&lt;span&gt;frames目录下是否有Scala安装包
     scalaIsExists&lt;/span&gt;=`&lt;span&gt;find&lt;/span&gt; /opt/frames -&lt;span&gt;name $scala`

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ ${#scalaIsExists} -ne &lt;span&gt;0&lt;/span&gt; ]];&lt;span&gt;then&lt;/span&gt;
    
       &lt;span&gt;if&lt;/span&gt; [ -d /usr/lib/scala ];&lt;span&gt;then&lt;/span&gt;
            &lt;span&gt;rm&lt;/span&gt; -rf /usr/lib/&lt;span&gt;scala
       &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;

       &lt;span&gt;mkdir&lt;/span&gt; /usr/lib/scala &amp;amp;&amp;amp; &lt;span&gt;chmod&lt;/span&gt; -R &lt;span&gt;777&lt;/span&gt; /usr/lib/&lt;span&gt;scala

       #&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;.解压到指定文件夹/usr/lib/&lt;span&gt;scala中
       &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;开始解压scala安装包&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
       &lt;span&gt;tar&lt;/span&gt; -zxvf $scalaIsExists -C /usr/lib/scala &amp;gt;&amp;amp; /dev/&lt;span&gt;null&lt;/span&gt;
       &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scala安装包解压完毕&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

       scala_home&lt;/span&gt;=`&lt;span&gt;find&lt;/span&gt; /usr/lib/scala -maxdepth &lt;span&gt;1&lt;/span&gt; -name &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scala-*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;`
    
       #&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;.在/etc/&lt;span&gt;profile配置SCALA_HOME
       profile&lt;/span&gt;=/etc/&lt;span&gt;profile
       &lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/^export SCALA_HOME/d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; $profile
       &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;export SCALA_HOME=$scala_home&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $profile

       #&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;.在/etc/&lt;span&gt;profile配置PATH
       &lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/^export PATH=\$PATH:\$SCALA_HOME\/bin/d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; $profile
       &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;export PATH=\$PATH:\$SCALA_HOME/bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span&gt; $profile

       #&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;.更新/etc/&lt;span&gt;profile文件
       source &lt;/span&gt;/etc/profile &amp;amp;&amp;amp; source /etc/&lt;span&gt;profile  
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; 
        &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/opt/frames目录下没有scala安装包1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;fi&lt;/span&gt;
 &lt;span&gt;else&lt;/span&gt;
       &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/opt/frames目录下没有scala安装包2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
 &lt;span&gt;fi&lt;/span&gt;&lt;span&gt;

}

configureScala&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以root用户执行代码如下：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;/home/hadoop/automaticDeploy/systems/configureScala.sh&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;3.1 单机上整合第2点的9个模块自动化批量执行&lt;/h2&gt;
&lt;p&gt;batchOperate.sh代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#! /bin/&lt;span&gt;bash

&lt;/span&gt;&lt;span&gt;hostname&lt;/span&gt;=$&lt;span&gt;1&lt;/span&gt;&lt;span&gt;

#&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.ip地址修改，目前只能每台机器独自修改ip地址
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;1&lt;/span&gt;&lt;span&gt;.ip地址修改暂无&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

#&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.修改机器名hostname
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;2&lt;/span&gt;&lt;span&gt;.修改hostname为node1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
/home/hadoop/automaticDeploy/systems/changeHostname.&lt;span&gt;sh&lt;/span&gt; $&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;

#&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.host配置文件修改
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3.把集群ip及其映射的hostname添加到/etc/hosts中&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
/home/hadoop/automaticDeploy/systems/addClusterIps.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;

#&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.关闭防火墙、SELINUX ，需要输入参数close或start
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;4.关闭防火墙、SELINUX&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
/home/hadoop/automaticDeploy/systems/closeFirewall.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt; close

#&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;.添加bigdata用户名 ，需要输入参数create或delete
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5.添加bigdata用户名&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
/home/hadoop/automaticDeploy/systems/autoCreateUser.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt; create

#&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;.配置yum源
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6.配置yum源&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
/home/hadoop/automaticDeploy/systems/configureYum.&lt;span&gt;sh&lt;/span&gt; $&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;

#&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;.配置SSH无密码登录
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;7.集群各节点之间配置SSH无密码登录&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
/home/hadoop/automaticDeploy/systems/sshFreeLogin.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;

#&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;.配置JDK环境
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;8.配置jdk环境&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
/home/hadoop/automaticDeploy/systems/configureJDK.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;

#&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;.配置SCALA环境
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;9.配置scala环境&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
/home/hadoop/automaticDeploy/systems/configureScala.&lt;span&gt;sh&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以root用户执行代码如下，参数$hostname一般为node1、node2、node3：：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;/home/hadoop/automaticDeploy/systems/batchOperate.sh $hostname&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在一台机器上执行以上命令，可以迅速设置该台机器的系统环境。但是如果集群机器过多，则需要每台机器都要执行&lt;em&gt;batchOperate.sh，&lt;/em&gt;所以需要3.2点在集群上一次性部署整个集群上机器的系统环境，而不需要每台机器都重复部署。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;3.2 集群上自动化部署安装&lt;/h2&gt;
&lt;p&gt;这里以node1为基点，集群上的所有操作触发点都在node1上，操作原理为：在clusterOperate.sh代码里，node1上本地执行batchOperate.sh设置本地机器的系统环境，而利用ssh远程执行batchOperate.sh设置远程机器的系统环境。&lt;/p&gt;
&lt;p&gt;clusterOperate.sh代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#! /bin/&lt;span&gt;bash

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; clusterOperate()
{
 #&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.远程复制文件
  &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; read line;
  &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;
    &lt;span&gt;hostname&lt;/span&gt;=`&lt;span&gt;echo&lt;/span&gt; $line | &lt;span&gt;cut&lt;/span&gt; -d &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; -&lt;span&gt;f2`
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;目前正在设置$hostname节点的系统环境&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    
    #默认node1为本地主机
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ $&lt;span&gt;hostname&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;node1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]]
    &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
        #&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.本地主机操作
        &lt;/span&gt;/home/hadoop/automaticDeploy/systems/batchOperate.&lt;span&gt;sh&lt;/span&gt; $&lt;span&gt;hostname&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        #&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.远程主机操作
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;ssh&lt;/span&gt; -n $&lt;span&gt;hostname&lt;/span&gt; test -e /home/hadoop/&lt;span&gt;automaticDeploy
        &lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
             #&lt;/span&gt;&lt;span&gt;3.1&lt;/span&gt;&lt;span&gt; 存在则先删除旧的
             &lt;/span&gt;&lt;span&gt;ssh&lt;/span&gt; -n $&lt;span&gt;hostname&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rm -rf /home/hadoop/automaticDeploy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
 
        #&lt;/span&gt;&lt;span&gt;3.2&lt;/span&gt;&lt;span&gt; 把本地的automaticDeploy里面的脚本文件复制到远程主机上
        &lt;/span&gt;&lt;span&gt;scp&lt;/span&gt; -r /home/hadoop/automaticDeploy/ $&lt;span&gt;hostname&lt;/span&gt;:/home/hadoop/&lt;span&gt;automaticDeploy

        #&lt;/span&gt;&lt;span&gt;3.3&lt;/span&gt; 把本地的/opt/frames里的软件安装包复制到远程主机的/opt/&lt;span&gt;frames上
        #判断远程主机上&lt;/span&gt;/opt/&lt;span&gt;frames是否存在，不存在则创建 
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;ssh&lt;/span&gt; -n $&lt;span&gt;hostname&lt;/span&gt; test -e /opt/frames/;&lt;span&gt;then&lt;/span&gt;
            &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt; /dev/&lt;span&gt;null&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;
            &lt;span&gt;ssh&lt;/span&gt; -n $&lt;span&gt;hostname&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mkdir /opt/frames&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;fi&lt;/span&gt;&lt;span&gt;
   
        #遍历需要安装的软件
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; read lineString;
        &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;&lt;span&gt;
          software&lt;/span&gt;=`&lt;span&gt;echo&lt;/span&gt; $lineString | &lt;span&gt;cut&lt;/span&gt; -d &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; -&lt;span&gt;f1`
          isInstall&lt;/span&gt;=`&lt;span&gt;echo&lt;/span&gt; $lineString | &lt;span&gt;cut&lt;/span&gt; -d &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; -&lt;span&gt;f2`
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [[ $isInstall = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]];&lt;span&gt;then&lt;/span&gt;
              &lt;span&gt;if&lt;/span&gt; &lt;span&gt;ssh&lt;/span&gt; -n $&lt;span&gt;hostname&lt;/span&gt; test -e /opt/frames/$software;&lt;span&gt;then&lt;/span&gt;
                  &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt; /dev/&lt;span&gt;null&lt;/span&gt;
              &lt;span&gt;else&lt;/span&gt;  
                  &lt;span&gt;scp&lt;/span&gt; /opt/frames/$software $&lt;span&gt;hostname&lt;/span&gt;:/opt/frames/&lt;span&gt;$software
              &lt;/span&gt;&lt;span&gt;fi&lt;/span&gt;
          &lt;span&gt;fi&lt;/span&gt;
        &lt;span&gt;done&lt;/span&gt; &amp;lt; /home/hadoop/automaticDeploy/&lt;span&gt;frames.txt
 
        #&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.远程执行文件
        &lt;/span&gt;&lt;span&gt;ssh&lt;/span&gt; -n $&lt;span&gt;hostname&lt;/span&gt; /home/hadoop/automaticDeploy/systems/batchOperate.&lt;span&gt;sh&lt;/span&gt; $&lt;span&gt;hostname&lt;/span&gt;
    &lt;span&gt;fi&lt;/span&gt;
  &lt;span&gt;done&lt;/span&gt; &amp;lt; /home/hadoop/automaticDeploy/&lt;span&gt;host_ip.txt

}

clusterOperate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在node1节点上，以root用户执行clusterOperate.sh，一次性部署集群三个节点的系统环境：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;/home/hadoop/automaticDeploy/systems/clusterOperate.sh&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;到此，集群中每台机器的环境自动化设置完成，下一篇介绍如何自动化部署大数据组件hadoop、spark、hbase、hive、kafka等等。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;所有shell文件代码存放在github上，代码可能写得不是很完美，欢迎指出错误。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;github地址&lt;/strong&gt;&lt;/span&gt;为：&lt;a title=&quot;https://github.com/qiushangwenyue/BigData_AutomaticDeploy&quot; href=&quot;https://github.com/qiushangwenyue/BigData_AutomaticDeploy&quot; target=&quot;_blank&quot;&gt;https://github.com/qiushangwenyue/BigData_AutomaticDeploy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhidao.baidu.com/question/502381951517702724.html&quot; rel=&quot;nofollow&quot;&gt;https://zhidao.baidu.com/question/502381951517702724.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_34685846/article/details/72825587&quot; rel=&quot;nofollow&quot;&gt;https://blog.csdn.net/qq_34685846/article/details/72825587&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/cute/archive/2011/08/26/2154137.html&quot; rel=&quot;nofollow&quot;&gt;https://www.cnblogs.com/cute/archive/2011/08/26/2154137.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/mark-zhou/p/5976222.html&quot; rel=&quot;nofollow&quot;&gt;https://www.cnblogs.com/mark-zhou/p/5976222.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/kinger0/article/details/52251847&quot; rel=&quot;nofollow&quot;&gt;https://blog.csdn.net/kinger0/article/details/52251847&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wyl9527/article/details/72831567&quot; rel=&quot;nofollow&quot;&gt;https://blog.csdn.net/wyl9527/article/details/72831567&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/hello_hwc/article/details/40118129&quot; rel=&quot;nofollow&quot;&gt;https://blog.csdn.net/hello_hwc/article/details/40118129&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.codebelief.com/article/2017/02/26-examples-of-find-command-on-linux/&quot; rel=&quot;nofollow&quot;&gt;http://www.codebelief.com/article/2017/02/26-examples-of-find-command-on-linux/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://hadesmo.com/2015/07/20/sed.html&quot; rel=&quot;nofollow&quot;&gt;http://hadesmo.com/2015/07/20/sed.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 30 Jul 2018 15:57:00 +0000</pubDate>
<dc:creator>牧梦者</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/swordfall/p/9330063.html</dc:identifier>
</item>
<item>
<title>Netty源码—七、内存释放 - lacker</title>
<link>http://www.cnblogs.com/sunshine-2015/p/9393410.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sunshine-2015/p/9393410.html</guid>
<description>&lt;p&gt;Netty本身在内存分配上支持堆内存和直接内存，我们一般选用直接内存，这也是默认的配置。所以要理解Netty内存的释放我们得先看下直接内存的释放。&lt;/p&gt;
&lt;h2 id=&quot;java直接内存释放&quot;&gt;Java直接内存释放&lt;/h2&gt;
&lt;p&gt;我们先来看下直接内存是怎么使用的&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;ByteBuffer.allocateDirect(capacity)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;申请的过程是其实就是创建一个DirectByteBuffer对象的过程，DirectByteBuffer对象只相当于一个holder，包含一个address，这个是直接内存的指针。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;调用native方法申请内存&lt;/li&gt;
&lt;li&gt;初始化cleaner&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static ByteBuffer allocateDirect(int capacity) {
    return new DirectByteBuffer(capacity);
}

DirectByteBuffer(int cap) {                   // package-private
    // 省略中间代码...
    // 创建一个cleaner，最后会调用Deallocator.run来释放内存
    cleaner = Cleaner.create(this, new Deallocator(base, size, cap));
    att = null;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Cleaner这个类继承自PhantomReference，也就是所谓的虚引用，这种类型引用的特点是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用get方法不能获取到对象&lt;/li&gt;
&lt;li&gt;只要引用的对象除了PhantomReference之外没有其他引用了，JVM随时可以将PhantomReference引用的对象回收。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;JVM在回前会将将要被回收的对象放在一个队列中，由于Cleaner继承自PhantomReference，队列的实现是使用cleaner的&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;private static final ReferenceQueue&amp;lt;Object&amp;gt; dummyQueue = new ReferenceQueue&amp;lt;&amp;gt;();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个队列在PhantomReference的父类Reference中使用到了，Reference这个类在初始化的时候会启动一个线程来调用cleaner.clean方法，在Reference的静态代码块中启动线程&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// java.lang.ref.Reference
static {
    ThreadGroup tg = Thread.currentThread().getThreadGroup();
    for (ThreadGroup tgn = tg;
         tgn != null;
         tg = tgn, tgn = tg.getParent());
    Thread handler = new ReferenceHandler(tg, &quot;Reference Handler&quot;);
    /* If there were a special system-only priority greater than
         * MAX_PRIORITY, it would be used here
         */
    handler.setPriority(Thread.MAX_PRIORITY);
    handler.setDaemon(true);
    // 启动ReferenceHandler线程
    handler.start();
    // 省略中间代码...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;该线程的主要作用就是调用tryHandlePending&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// java.lang.ref.Reference#tryHandlePending
static boolean tryHandlePending(boolean waitForNotify) {
        Reference&amp;lt;Object&amp;gt; r;
        Cleaner c;
        try {
            synchronized (lock) {
                if (pending != null) {
                    r = pending;
                    // 'instanceof' might throw OutOfMemoryError sometimes
                    // so do this before un-linking 'r' from the 'pending' chain...
                    c = r instanceof Cleaner ? (Cleaner) r : null;
                    // unlink 'r' from 'pending' chain
                    pending = r.discovered;
                    r.discovered = null;
                } else {
                    // The waiting on the lock may cause an OutOfMemoryError
                    // because it may try to allocate exception objects.
                    if (waitForNotify) {
                        lock.wait();
                    }
                    // retry if waited
                    return waitForNotify;
                }
            }
        } catch (OutOfMemoryError x) {
            // Give other threads CPU time so they hopefully drop some live references
            // and GC reclaims some space.
            // Also prevent CPU intensive spinning in case 'r instanceof Cleaner' above
            // persistently throws OOME for some time...
            Thread.yield();
            // retry
            return true;
        } catch (InterruptedException x) {
            // retry
            return true;
        }

        // Fast path for cleaners
        if (c != null) {
            // 调用clean方法
            c.clean();
            return true;
        }

        ReferenceQueue&amp;lt;? super Object&amp;gt; q = r.queue;
        if (q != ReferenceQueue.NULL) q.enqueue(r);
        return true;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;System.gc不能回收堆外内存，但是会回收已经没有使用了DirectByteBuffer对象，该对象被回收的时候会将cleaner对象放入队列中，在Reference的线程中调用clean方法来回收堆外内存 。cleaner.run执行的是传入参数的thunk.run方法，这里thunk是Deallocator，所以最后执行的Deallocator.run方法&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public void run() {
    if (address == 0) {
        // Paranoia
        return;
    }
    // 释放内存
    unsafe.freeMemory(address);
    address = 0;
    Bits.unreserveMemory(size, capacity);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所以最后通过unsafe.freeMemory释放了申请到的内存。&lt;/p&gt;
&lt;p&gt;总结一下，在申请内存的时候调用的是&lt;code&gt;java.nio.ByteBuffer#allocateDirect&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;会new DirectByteBuffer，通过Cleaner.create创建Cleaner，同时传入Deallocator作为Runnable参数，在Cleaner.clean的时候会调用该Deallocator.run来处理&lt;/p&gt;
&lt;p&gt;Cleaner继承自PhantomReference，包含一个ReferenceQueue，在DirectByteBuffer不再使用的时候，该对象是处于Java堆的，除了该PhantomReference引用了DirectByteBuffer外，没有其他引用的时候，jvm会把cleaner对象放入ReferenceQueue队列中。&lt;/p&gt;
&lt;p&gt;PhantomReference继承了Reference，Reference会启动一个线程（java.lang.ref.Reference.ReferenceHandler#run）去调用队列中的cleaner.clean方法。&lt;/p&gt;
&lt;h2 id=&quot;netty内存释放&quot;&gt;Netty内存释放&lt;/h2&gt;
&lt;p&gt;Netty使用的直接内存的释放方式和JDK的释放方式略有不同。Netty开始释放内存的时候是调用free方法的时候&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;io.netty.buffer.PoolArena#free
io.netty.buffer.PoolArena.DirectArena#destroyChunk&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最终释放内存的方法有两种&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;利用反射获取unsafe，调用Unsafe#freeMemory&lt;/li&gt;
&lt;li&gt;利用反射获取DirectByteBuffer#cleaner，通过反射调用cleaner.clean方法&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;两种不同的方式依赖的条件不同，使用场景也不同&lt;/p&gt;
&lt;h3 id=&quot;使用反射调用cleaner.clean&quot;&gt;使用反射调用cleaner.clean&lt;/h3&gt;
&lt;p&gt;要满足以下条件之一的时候使用这种方式&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;没有可使用的直接内存&lt;/li&gt;
&lt;li&gt;不能获取unsafe&lt;/li&gt;
&lt;li&gt;directBuffer没有传入long、int的构造方法&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;使用unsafe&quot;&gt;使用unsafe&lt;/h3&gt;
&lt;p&gt;不能使用上面这种方式的都使用unsafe&lt;/p&gt;
</description>
<pubDate>Mon, 30 Jul 2018 15:14:00 +0000</pubDate>
<dc:creator>lacker</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sunshine-2015/p/9393410.html</dc:identifier>
</item>
<item>
<title>盘点 Python 中的那些冷知识（一） - 站在两个世界的边缘</title>
<link>http://www.cnblogs.com/wongbingming/p/9393186.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wongbingming/p/9393186.html</guid>
<description>&lt;div class=&quot;output_wrapper&quot; id=&quot;output_wrapper_id&quot; readability=&quot;89&quot;&gt;
&lt;p&gt;小明在日常Code中遇到一些好玩，冷门的事情，通常都会记录下来。&lt;/p&gt;
&lt;p&gt;现在已经积攒了一些了，最近打算整理一波，发出来给大家补补。一篇只分享五个，有时间了就整理。不想错过的，千万记得关注一下。&lt;/p&gt;
&lt;h3 id=&quot;h1&quot;&gt;&lt;span&gt;1. 省略号也是对象&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;...&lt;/code&gt; 这是省略号，在Python中，一切皆对象。它也不例外。&lt;/p&gt;
&lt;p&gt;在 Python 中，它叫做 Ellipsis 。&lt;/p&gt;
&lt;p&gt;在 Python 3 中你可以直接写…来得到这玩意。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&amp;gt;&amp;gt;&amp;gt; ...&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Ellipsis&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; type(...)&lt;br/&gt;&amp;lt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; '&lt;span class=&quot;hljs-title&quot;&gt;ellipsis&lt;/span&gt;'&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而在 2 中没有…这个语法，只能直接写Ellipsis来获取。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Ellipsis&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Ellipsis&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; type(&lt;span class=&quot;hljs-built_in&quot;&gt;Ellipsis&lt;/span&gt;)&lt;br/&gt;&amp;lt;type &lt;span class=&quot;hljs-string&quot;&gt;'ellipsis'&lt;/span&gt;&amp;gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它转为布尔值时为真&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&amp;gt;&amp;gt;&amp;gt; bool(...)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后，这东西是一个单例。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&amp;gt;&amp;gt;&amp;gt; id(...)&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4362672336&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(...)&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4362672336&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这东西有啥用呢？据说它是Numpy的语法糖，不玩 Numpy 的人，可以说是没啥用的。&lt;/p&gt;
&lt;p&gt;在网上只看到这个 用 &lt;code&gt;...&lt;/code&gt; 代替 pass ，稍微有点用，但又不是必须使用的。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ZeroDivisionError:&lt;br/&gt;...&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h2&quot;&gt;&lt;span&gt;2. 类首字母不一定是大写&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在正常情况下，我们所编写的所见到的代码，好像都默许了类名首字母大写，而实例用小写的这一准则。但这并不是强制性的，即使你反过来的也没有关系。&lt;/p&gt;
&lt;p&gt;但有一些内置的类，首字母都是小写，而实例都是大写。&lt;/p&gt;
&lt;p&gt;比如 bool 是类名，而 True，False 是其实例；&lt;br/&gt;比如 ellipsis 是类名，Ellipsis是实例；&lt;br/&gt;还有 int，string，float，list，tuple，dict 等一系列数据类型都是类名，它们都是小写。&lt;/p&gt;
&lt;h3 id=&quot;h3&quot;&gt;&lt;span&gt;3. 增量赋值的性能更好&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;诸如 &lt;code&gt;+=&lt;/code&gt; 和 &lt;code&gt;*=&lt;/code&gt; 这些运算符，叫做 增量赋值运算符。&lt;/p&gt;
&lt;p&gt;这里使用用 += 举例，以下两种写法，在效果上是等价的。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ini&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ; a += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; a = a + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;+=&lt;/code&gt; 其背后使用的魔法方法是 __iadd__，如果没有实现这个方法则会退而求其次，使用 __add__ 。&lt;/p&gt;
&lt;p&gt;这两种写法有什么区别呢？&lt;/p&gt;
&lt;p&gt;用列表举例 a += b，使用 __iadd__ 的话就像是使用了a.extend(b),如果使用 __add__ 的话，则是 a = a+b,前者是直接在原列表上进行扩展，而后者是先从原列表中取出值，在一个新的列表中进行扩展，然后再将新的列表对象返回给变量，显然后者的消耗要大些。&lt;/p&gt;
&lt;p&gt;所以在能使用增量赋值的时候尽量使用它。&lt;/p&gt;
&lt;h3 id=&quot;h4andor&quot;&gt;&lt;span&gt;4. and 和 or 的取值顺序&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;and 和 or 是我们再熟悉不过的两个逻辑运算符。而我们通常只用它来做判断，很少用它来取值。&lt;/p&gt;
&lt;p&gt;如果一个or表达式中所有值都为真，Python会选择第一个值，而and表达式则会选择第二个。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;&amp;gt;&amp;gt;&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) * (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;  &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h5&quot;&gt;&lt;span&gt;5. 如何修改解释器提示符&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;这个当做今天的一个小彩蛋吧。应该算是比较冷门的，估计知道的人很少了吧。&lt;/p&gt;
&lt;p&gt;正常情况下，我们在 终端下 执行Python 命令是这样的。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs r&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;):&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;     print (i)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你是否想过 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;...&lt;/code&gt; 这两个提示符也是可以修改的呢？&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; import sys                      &lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; sys.ps1                         &lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/span&gt;                              &lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; sys.ps2                         &lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;'... '&lt;/span&gt;                              &lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt;                                 &lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; sys.ps2 = &lt;span class=&quot;hljs-string&quot;&gt;'................'&lt;/span&gt;                 &lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; sys.ps1 = &lt;span class=&quot;hljs-string&quot;&gt;'Python编程时光&amp;gt;&amp;gt;&amp;gt;'&lt;/span&gt;       &lt;br/&gt;Python编程时光&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;for i in range(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;):     &lt;br/&gt;................    print (i)                    &lt;br/&gt;................                                 &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;                                   &lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;                                   &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;小明会继续坚持写这个系列，如果你觉得写得还可以的，不防关注一下，以免掉队，如果可以的话，请分享给身边的小伙伴们。&lt;/p&gt;
&lt;hr/&gt;&lt;img src=&quot;http://ovzwokrcz.bkt.clouddn.com/5b29283fdd19f.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 30 Jul 2018 14:25:00 +0000</pubDate>
<dc:creator>站在两个世界的边缘</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wongbingming/p/9393186.html</dc:identifier>
</item>
<item>
<title>微信小程序开发03-这是一个组件 - 叶小钗</title>
<link>http://www.cnblogs.com/yexiaochai/p/9382862.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yexiaochai/p/9382862.html</guid>
<description>&lt;h2&gt;基本结构&lt;/h2&gt;
&lt;p&gt;接上文：&lt;a href=&quot;http://www.cnblogs.com/yexiaochai/p/9374374.html&quot;&gt;微信小程序开发02-小程序基本介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们今天先来实现这个弹出层：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201807/294743-20180730105755788-2057483691.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之前这个组件是一个容器类组件，弹出层可设置载入的html结构，然后再设置各种事件即可，这种组件有一个特点：&lt;/p&gt;
&lt;p&gt;① 只提供Header部分以及容器部分&lt;/p&gt;
&lt;p&gt;② 容器部分的HTML结构由业务层提供&lt;/p&gt;
&lt;p&gt;③ 容器部分对应样式由业务层提供&lt;/p&gt;
&lt;p&gt;我们如果要在小程序中实现这类组件，意味着我们需要往小程序中动态插入WXML结构，我们这里先做个demo，试试往动态插入WXML是不是可行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.setData({'wxml'&lt;span&gt;: `
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &amp;lt;my-component&amp;gt;
&lt;span&gt;3&lt;/span&gt;   &amp;lt;view&amp;gt;动态插入的节点&amp;lt;/view&amp;gt; 
&lt;span&gt;4&lt;/span&gt;   &amp;lt;/my-component&amp;gt;
&lt;span&gt;5&lt;/span&gt; `});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201807/294743-20180730112527535-973564966.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;小程序对应设置的数据进行了转义，所以并不能动态解析，如果站在性能角度思考，不进行动态解析也不是错误的；另一方面，一旦小程序能动态解析wxml，那么可能会涌出各种花式用法，控制力会减低，那么我们这里如何解决这个问题呢？&lt;/p&gt;
&lt;p&gt;我想的是，直接将业务级wxml结构放到页面里面，隐藏起来，需要使用弹出层的时候，直接将之装载进去，我们来看看是否可行，我们将我们需要展示的结构放到一个模板当中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;searchbox&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;动态组件部分&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，我们在我们主界面中载入模板：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;import &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;mod.searchbox.wxml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 这部分内容将被放置在组件 &amp;lt;slot&amp;gt; 的位置上 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;这里是插入到组件slot中的内容&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt;=&quot;searchbox&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201807/294743-20180730115024406-1960508341.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;主体结构放到页面中，我们传入数据模型或者控制显示即可，看起来是可行的，于是我们先实现我们基本的样式，因为业务模块的样子应该由业务提供，所以对应样式写到index.wxss里面：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6907da97-8061-4f4f-a18d-9851dc0a27d4')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_6907da97-8061-4f4f-a18d-9851dc0a27d4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6907da97-8061-4f4f-a18d-9851dc0a27d4&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6907da97-8061-4f4f-a18d-9851dc0a27d4',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6907da97-8061-4f4f-a18d-9851dc0a27d4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;.btn-primary &lt;/span&gt;{
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    background-color&lt;/span&gt;:&lt;span&gt; #00b358&lt;/span&gt;;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    color&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    border&lt;/span&gt;:&lt;span&gt; 0 none&lt;/span&gt;;
&lt;span&gt; 5&lt;/span&gt; }
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;.btn, .btn-primary, .btn-secondary, .btn-sub &lt;/span&gt;{
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    line-height&lt;/span&gt;:&lt;span&gt; 88rpx&lt;/span&gt;;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;:&lt;span&gt; 88rpx&lt;/span&gt;;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    padding&lt;/span&gt;:&lt;span&gt; 0 20rpx&lt;/span&gt;;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    display&lt;/span&gt;:&lt;span&gt; inline-block&lt;/span&gt;;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    vertical-align&lt;/span&gt;:&lt;span&gt; middle&lt;/span&gt;;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    border-radius&lt;/span&gt;:&lt;span&gt; 8rpx&lt;/span&gt;;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    cursor&lt;/span&gt;:&lt;span&gt; pointer&lt;/span&gt;;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    font-size&lt;/span&gt;:&lt;span&gt; 32rpx&lt;/span&gt;;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    -webkit-box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;
&lt;span&gt;18&lt;/span&gt; }
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;.full-width &lt;/span&gt;{
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    -webkit-box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;
&lt;span&gt;23&lt;/span&gt; }
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;.c-row &lt;/span&gt;{
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt; auto&lt;/span&gt;;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    display&lt;/span&gt;:&lt;span&gt; -webkit-box&lt;/span&gt;;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    -webkit-box-orient&lt;/span&gt;:&lt;span&gt; horizontal&lt;/span&gt;;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    -webkit-box-direction&lt;/span&gt;:&lt;span&gt; normal&lt;/span&gt;;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    -webkit-box-pack&lt;/span&gt;:&lt;span&gt; justify&lt;/span&gt;;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    -webkit-box-align&lt;/span&gt;:&lt;span&gt; stretch&lt;/span&gt;;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    -webkit-box-lines&lt;/span&gt;:&lt;span&gt; single&lt;/span&gt;;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    display&lt;/span&gt;:&lt;span&gt; -webkit-flex&lt;/span&gt;;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    -webkit-flex-direction&lt;/span&gt;:&lt;span&gt; row&lt;/span&gt;;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    -webkit-justify-content&lt;/span&gt;:&lt;span&gt; space-between&lt;/span&gt;;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    -webkit-align-items&lt;/span&gt;:&lt;span&gt; strecth&lt;/span&gt;;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    -webkit-align-content&lt;/span&gt;:&lt;span&gt; flex-start&lt;/span&gt;;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    -webkit-flex-wrap&lt;/span&gt;:&lt;span&gt; nowrap&lt;/span&gt;;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    padding&lt;/span&gt;:&lt;span&gt; 20rpx 40rpx&lt;/span&gt;;
&lt;span&gt;41&lt;/span&gt; }
&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;.c-span3 &lt;/span&gt;{
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt; 25%&lt;/span&gt;;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    -webkit-box-flex&lt;/span&gt;:&lt;span&gt; 3&lt;/span&gt;;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    -webkit-flex&lt;/span&gt;:&lt;span&gt; 3 3 auto&lt;/span&gt;;
&lt;span&gt;47&lt;/span&gt; }
&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;.c-span9 &lt;/span&gt;{
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt; 75%&lt;/span&gt;;
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    -webkit-box-flex&lt;/span&gt;:&lt;span&gt; 9&lt;/span&gt;;
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    -webkit-flex&lt;/span&gt;:&lt;span&gt; 9 9 auto&lt;/span&gt;;
&lt;span&gt;53&lt;/span&gt; }
&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;.search-line &lt;/span&gt;{
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;:&lt;span&gt; 96rpx&lt;/span&gt;;
&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    line-height&lt;/span&gt;:&lt;span&gt; 96rpx&lt;/span&gt;;
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    font-size&lt;/span&gt;:&lt;span&gt; 30rpx&lt;/span&gt;;
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;    font-weight&lt;/span&gt;:&lt;span&gt; 600&lt;/span&gt;;
&lt;span&gt;61&lt;/span&gt; &lt;span&gt;    border-bottom&lt;/span&gt;:&lt;span&gt; 1rpx solid #e6e6e6&lt;/span&gt;;
&lt;span&gt;62&lt;/span&gt; }
&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt; &lt;span&gt;.search-line::after &lt;/span&gt;{
&lt;span&gt;65&lt;/span&gt; &lt;span&gt;    content&lt;/span&gt;:&lt;span&gt; &quot;&quot;&lt;/span&gt;;
&lt;span&gt;66&lt;/span&gt; &lt;span&gt;    display&lt;/span&gt;:&lt;span&gt; inline-block&lt;/span&gt;;
&lt;span&gt;67&lt;/span&gt; &lt;span&gt;    vertical-align&lt;/span&gt;:&lt;span&gt; middle&lt;/span&gt;;
&lt;span&gt;68&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt; 20rpx&lt;/span&gt;;
&lt;span&gt;69&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;:&lt;span&gt; 20rpx&lt;/span&gt;;
&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    border-top&lt;/span&gt;:&lt;span&gt; 4rpx solid #00b358&lt;/span&gt;;
&lt;span&gt;71&lt;/span&gt; &lt;span&gt;    border-right&lt;/span&gt;:&lt;span&gt; 4rpx solid #00b358&lt;/span&gt;;
&lt;span&gt;72&lt;/span&gt; &lt;span&gt;    position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;
&lt;span&gt;73&lt;/span&gt; &lt;span&gt;    right&lt;/span&gt;:&lt;span&gt; 60rpx&lt;/span&gt;;
&lt;span&gt;74&lt;/span&gt; &lt;span&gt;    top&lt;/span&gt;:&lt;span&gt; 50%&lt;/span&gt;;
&lt;span&gt;75&lt;/span&gt; &lt;span&gt;    margin-top&lt;/span&gt;:&lt;span&gt; -4rpx&lt;/span&gt;;
&lt;span&gt;76&lt;/span&gt; &lt;span&gt;    -webkit-transform&lt;/span&gt;:&lt;span&gt; rotate(45deg) translateY(-50%)&lt;/span&gt;;
&lt;span&gt;77&lt;/span&gt; &lt;span&gt;    transform&lt;/span&gt;:&lt;span&gt; rotate(45deg) translateY(-50%)&lt;/span&gt;;
&lt;span&gt;78&lt;/span&gt; &lt;span&gt;    -webkit-box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;
&lt;span&gt;79&lt;/span&gt; &lt;span&gt;    box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;
&lt;span&gt;80&lt;/span&gt; }
&lt;span&gt;81&lt;/span&gt; 
&lt;span&gt;82&lt;/span&gt; &lt;span&gt;.search-line-txt &lt;/span&gt;{
&lt;span&gt;83&lt;/span&gt; &lt;span&gt;    text-align&lt;/span&gt;:&lt;span&gt; right&lt;/span&gt;;
&lt;span&gt;84&lt;/span&gt; &lt;span&gt;    padding-right&lt;/span&gt;:&lt;span&gt; 60rpx&lt;/span&gt;;
&lt;span&gt;85&lt;/span&gt; &lt;span&gt;    overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;
&lt;span&gt;86&lt;/span&gt; &lt;span&gt;    text-overflow&lt;/span&gt;:&lt;span&gt; ellipsis&lt;/span&gt;;
&lt;span&gt;87&lt;/span&gt; &lt;span&gt;    white-space&lt;/span&gt;:&lt;span&gt; nowrap&lt;/span&gt;;
&lt;span&gt;88&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;searchbox&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-row search-line&quot;&lt;/span&gt;&lt;span&gt; data-flag&lt;/span&gt;&lt;span&gt;=&quot;start&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;           出发&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span9 js-start search-line-txt&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;           请选择出发地&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-row search-line&quot;&lt;/span&gt;&lt;span&gt; data-flag&lt;/span&gt;&lt;span&gt;=&quot;arrive&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;           到达&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span9 js-arrive search-line-txt&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;           请选择到达地&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-row &quot;&lt;/span&gt;&lt;span&gt; data-flag&lt;/span&gt;&lt;span&gt;=&quot;arrive&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;btn-primary full-width js_search_list&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;查询&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201807/294743-20180730143834259-444680510.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如此一来，我们基本的弹出层样式就七七八八了，这里可以看出一些特点：小程序与平时我们的样式差距不大，稍微改点就能用，甚至能直接通用；另一方面，我们也需要思考一个问题：公共部分的CSS该怎么处理？其实我这里需要解决的不只是公共的样式部分，还需要解决公共的组件部分。&lt;/p&gt;
&lt;p&gt;我这里想的是将所有公共部分的CSS放到一个全局的文件global.wxss中，然后在每个业务级页面import即可，所以我们这里需要形成一个公共的WXSS库，这个与纯web映射起来即可，我们这里便不深入。&lt;/p&gt;
&lt;h2&gt;公共组件库&lt;/h2&gt;
&lt;p&gt;要提高开发效率的第一个前提就是要有足够多的UI组件，小程序本身提供了一些定制化的组件，我们仍然会用到的组件有：&lt;/p&gt;
&lt;p&gt;① alert类弹出层&lt;/p&gt;
&lt;p&gt;② loading类弹出层&lt;/p&gt;
&lt;p&gt;③ 日历组件&lt;/p&gt;
&lt;p&gt;④ toast&amp;amp;message类提示弹出组件&lt;/p&gt;
&lt;p&gt;⑤ 容器类组件&lt;/p&gt;
&lt;p&gt;⑥ ......&lt;/p&gt;
&lt;p&gt;之前的做法，是我们将html实体和组件实现直接放到一起，css放到全局global里面去，现在小程序并不支持动态展示wxml，所以动态插入的方式行不通了，我们需要将组件的wxml放到页面里面做预加载，这里我想的是提供一个通用global.ui.wxml文件用以装载所有的wxml实体，常用的组件我们默认全局引入，我们这里先挑点软柿子来捏，我们先实现一个alert类弹出层组件。&lt;/p&gt;
&lt;p&gt;我们将原来弹出层类会用到的CSS全部翻译为WXSS，放入global.wxss中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201807/294743-20180730153231580-1762280558.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们每个组件都会有一个固定的生命周期：创建-&amp;gt;显示-&amp;gt;隐藏，这个生命周期是每个组件都具有的特性，所以我们这里应该引入继承概念实现组件，但是小程序官方提供的Components并没有提供继承概念，而是提供了behaviors概念，用以将组件间的公共部分处理掉，所以我们这里也使用behaviors，因为不能操作dom，我们的组件抽象会变得相对简单，不用记录太多dom节点了，另外小程序的组件与我们之前的“组件”从定义到使用上有很大的不同，之前我们是以js作为控制器，现在是以标签wxml作为控制器，根本没有办法在js中获取实例，而小程序组件的生命周期并不包含显示隐藏生命周期，所以他的组件和我们以为的组件有很大的不同&lt;/p&gt;
&lt;p&gt;我思考了下为什么小程序中，js不能获取组件的实例，这里得出的结论是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;小程序中所有的WXML必须在页面中进行预加载逻辑，不能动态插入DOM的方式插入WXML，所以小程序没有提供组件实例给我们控制&lt;br/&gt;所以在小程序中想完成组件库，那么便只能把组件做标签使用（而且是js不能获取的标签），而不是js组件，这样会有效帮助我们理解&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们这里尝试实现一个遮盖层的标签（这里开始不用组件这个词，感觉很有歧义）:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201807/294743-20180730175337355-1540724229.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;代码非常简单：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cm-overlay&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.cm-overlay &lt;/span&gt;{&lt;span&gt;
    background&lt;/span&gt;:&lt;span&gt; rgba(0, 0, 0, 0.5)&lt;/span&gt;;&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt; fixed&lt;/span&gt;;&lt;span&gt;
    top&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
    right&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
    bottom&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
    left&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; let LayerView = require('behavior-layer-view'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;Component({
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;  behaviors: [LayerView],
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;  data: {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    myData: {}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;   attached: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () { },
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;  methods: {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，这个遮盖层mask没有什么意义，而且一般来说mask也不会单独存在，一般是一个组件（比如弹出层的loading）会包含一个遮盖层，所以我们这里要改造下Mask的结构，让他可以装载组件，我们从js组件逻辑来说是mask应该是loading的一个实例，但是我们站在标签角度来说，他们两个应该是独立的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cm-overlay&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们这里实现一个loading的组件（PS：CSS3动画稍微要做点兼容调试）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201807/294743-20180730205513326-945900149.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c308b17e-5b47-4949-9399-a68d757e73a1')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_c308b17e-5b47-4949-9399-a68d757e73a1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c308b17e-5b47-4949-9399-a68d757e73a1&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c308b17e-5b47-4949-9399-a68d757e73a1',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c308b17e-5b47-4949-9399-a68d757e73a1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;.spinner &lt;/span&gt;{
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;  width&lt;/span&gt;:&lt;span&gt; 140rpx&lt;/span&gt;;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;  height&lt;/span&gt;:&lt;span&gt; 140rpx&lt;/span&gt;;
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;  position&lt;/span&gt;:&lt;span&gt; fixed&lt;/span&gt;;
&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;  align-items&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;  display&lt;/span&gt;:&lt;span&gt; flex&lt;/span&gt;;
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;  top&lt;/span&gt;:&lt;span&gt; 50%&lt;/span&gt;;
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;  left&lt;/span&gt;:&lt;span&gt; 50%&lt;/span&gt;;
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;  margin-left&lt;/span&gt;:&lt;span&gt; -70rpx&lt;/span&gt;;
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;  margin-top&lt;/span&gt;:&lt;span&gt; -70rpx&lt;/span&gt;;
&lt;span&gt; 11&lt;/span&gt; }
&lt;span&gt; 12&lt;/span&gt;  
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;.container1 &amp;gt; view, .container2 &amp;gt; view, .container3 &amp;gt; view &lt;/span&gt;{
&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;  width&lt;/span&gt;:&lt;span&gt; 24rpx&lt;/span&gt;;
&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;  height&lt;/span&gt;:&lt;span&gt; 24rpx&lt;/span&gt;;
&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;  background-color&lt;/span&gt;:&lt;span&gt; #00b358&lt;/span&gt;;
&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;  border-radius&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;
&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;  position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;
&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;  -webkit-animation&lt;/span&gt;:&lt;span&gt; bouncedelay 1.2s infinite ease-in-out&lt;/span&gt;;
&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;  animation&lt;/span&gt;:&lt;span&gt; bouncedelay 1.2s infinite ease-in-out&lt;/span&gt;;
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;  -webkit-animation-fill-mode&lt;/span&gt;:&lt;span&gt; both&lt;/span&gt;;
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;  animation-fill-mode&lt;/span&gt;:&lt;span&gt; both&lt;/span&gt;;
&lt;span&gt; 23&lt;/span&gt; }
&lt;span&gt; 24&lt;/span&gt;  
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;.spinner .spinner-container &lt;/span&gt;{
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;  position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;
&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;  width&lt;/span&gt;:&lt;span&gt; 66%&lt;/span&gt;;
&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;  height&lt;/span&gt;:&lt;span&gt; 66%&lt;/span&gt;;
&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;  top&lt;/span&gt;:&lt;span&gt; 10%&lt;/span&gt;;
&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;  left&lt;/span&gt;:&lt;span&gt; 10%&lt;/span&gt;;
&lt;span&gt; 31&lt;/span&gt; }
&lt;span&gt; 32&lt;/span&gt;  
&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;.container2 &lt;/span&gt;{
&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;  -webkit-transform&lt;/span&gt;:&lt;span&gt; rotateZ(45deg)&lt;/span&gt;;
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;  transform&lt;/span&gt;:&lt;span&gt; rotateZ(45deg)&lt;/span&gt;;
&lt;span&gt; 36&lt;/span&gt; }
&lt;span&gt; 37&lt;/span&gt;  
&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;.container3 &lt;/span&gt;{
&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;  -webkit-transform&lt;/span&gt;:&lt;span&gt; rotateZ(90deg)&lt;/span&gt;;
&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;  transform&lt;/span&gt;:&lt;span&gt; rotateZ(90deg)&lt;/span&gt;;
&lt;span&gt; 41&lt;/span&gt; }
&lt;span&gt; 42&lt;/span&gt;  
&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;.circle1 &lt;/span&gt;{&lt;span&gt; top&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt; left&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;; }
&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;.circle2 &lt;/span&gt;{&lt;span&gt; top&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt; right&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;; }
&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;.circle3 &lt;/span&gt;{&lt;span&gt; right&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt; bottom&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;; }
&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;.circle4 &lt;/span&gt;{&lt;span&gt; left&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt; bottom&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;; }
&lt;span&gt; 47&lt;/span&gt;  
&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;.container2 .circle1 &lt;/span&gt;{
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;  -webkit-animation-delay&lt;/span&gt;:&lt;span&gt; -1.1s&lt;/span&gt;;
&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;  animation-delay&lt;/span&gt;:&lt;span&gt; -1.1s&lt;/span&gt;;
&lt;span&gt; 51&lt;/span&gt; }
&lt;span&gt; 52&lt;/span&gt;  
&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;.container3 .circle1 &lt;/span&gt;{
&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;  -webkit-animation-delay&lt;/span&gt;:&lt;span&gt; -1.0s&lt;/span&gt;;
&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;  animation-delay&lt;/span&gt;:&lt;span&gt; -1.0s&lt;/span&gt;;
&lt;span&gt; 56&lt;/span&gt; }
&lt;span&gt; 57&lt;/span&gt;  
&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;.container1 .circle2 &lt;/span&gt;{
&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;  -webkit-animation-delay&lt;/span&gt;:&lt;span&gt; -0.9s&lt;/span&gt;;
&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;  animation-delay&lt;/span&gt;:&lt;span&gt; -0.9s&lt;/span&gt;;
&lt;span&gt; 61&lt;/span&gt; }
&lt;span&gt; 62&lt;/span&gt;  
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;.container2 .circle2 &lt;/span&gt;{
&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;  -webkit-animation-delay&lt;/span&gt;:&lt;span&gt; -0.8s&lt;/span&gt;;
&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;  animation-delay&lt;/span&gt;:&lt;span&gt; -0.8s&lt;/span&gt;;
&lt;span&gt; 66&lt;/span&gt; }
&lt;span&gt; 67&lt;/span&gt;  
&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;.container3 .circle2 &lt;/span&gt;{
&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;  -webkit-animation-delay&lt;/span&gt;:&lt;span&gt; -0.7s&lt;/span&gt;;
&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;  animation-delay&lt;/span&gt;:&lt;span&gt; -0.7s&lt;/span&gt;;
&lt;span&gt; 71&lt;/span&gt; }
&lt;span&gt; 72&lt;/span&gt;  
&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;.container1 .circle3 &lt;/span&gt;{
&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;  -webkit-animation-delay&lt;/span&gt;:&lt;span&gt; -0.6s&lt;/span&gt;;
&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;  animation-delay&lt;/span&gt;:&lt;span&gt; -0.6s&lt;/span&gt;;
&lt;span&gt; 76&lt;/span&gt; }
&lt;span&gt; 77&lt;/span&gt;  
&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;.container2 .circle3 &lt;/span&gt;{
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;  -webkit-animation-delay&lt;/span&gt;:&lt;span&gt; -0.5s&lt;/span&gt;;
&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;  animation-delay&lt;/span&gt;:&lt;span&gt; -0.5s&lt;/span&gt;;
&lt;span&gt; 81&lt;/span&gt; }
&lt;span&gt; 82&lt;/span&gt;  
&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;.container3 .circle3 &lt;/span&gt;{
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;  -webkit-animation-delay&lt;/span&gt;:&lt;span&gt; -0.4s&lt;/span&gt;;
&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;  animation-delay&lt;/span&gt;:&lt;span&gt; -0.4s&lt;/span&gt;;
&lt;span&gt; 86&lt;/span&gt; }
&lt;span&gt; 87&lt;/span&gt;  
&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;.container1 .circle4 &lt;/span&gt;{
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;  -webkit-animation-delay&lt;/span&gt;:&lt;span&gt; -0.3s&lt;/span&gt;;
&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;  animation-delay&lt;/span&gt;:&lt;span&gt; -0.3s&lt;/span&gt;;
&lt;span&gt; 91&lt;/span&gt; }
&lt;span&gt; 92&lt;/span&gt;  
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;.container2 .circle4 &lt;/span&gt;{
&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;  -webkit-animation-delay&lt;/span&gt;:&lt;span&gt; -0.2s&lt;/span&gt;;
&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;  animation-delay&lt;/span&gt;:&lt;span&gt; -0.2s&lt;/span&gt;;
&lt;span&gt; 96&lt;/span&gt; }
&lt;span&gt; 97&lt;/span&gt;  
&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;.container3 .circle4 &lt;/span&gt;{
&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;  -webkit-animation-delay&lt;/span&gt;:&lt;span&gt; -0.1s&lt;/span&gt;;
&lt;span&gt;100&lt;/span&gt; &lt;span&gt;  animation-delay&lt;/span&gt;:&lt;span&gt; -0.1s&lt;/span&gt;;
&lt;span&gt;101&lt;/span&gt; }
&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt; &lt;span&gt;@-webkit-keyframes bouncedelay &lt;/span&gt;{
&lt;span&gt;104&lt;/span&gt; &lt;span&gt;  0%, 80%, 100% { -webkit-transform&lt;/span&gt;:&lt;span&gt; scale(0.0) &lt;/span&gt;}
&lt;span&gt;105&lt;/span&gt; &lt;span&gt;  40% &lt;/span&gt;{&lt;span&gt; -webkit-transform&lt;/span&gt;:&lt;span&gt; scale(1.0) &lt;/span&gt;}
&lt;span&gt;106&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;  
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;@keyframes bouncedelay &lt;/span&gt;{
&lt;span&gt;109&lt;/span&gt; &lt;span&gt;  0%, 80%, 100% {
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;    transform&lt;/span&gt;:&lt;span&gt; scale(0.0)&lt;/span&gt;;
&lt;span&gt;111&lt;/span&gt; &lt;span&gt;    -webkit-transform&lt;/span&gt;:&lt;span&gt; scale(0.0)&lt;/span&gt;;
&lt;span&gt;112&lt;/span&gt;   }&lt;span&gt; 40% &lt;/span&gt;{
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;    transform&lt;/span&gt;:&lt;span&gt; scale(1.0)&lt;/span&gt;;
&lt;span&gt;114&lt;/span&gt; &lt;span&gt;    -webkit-transform&lt;/span&gt;:&lt;span&gt; scale(1.0)&lt;/span&gt;;
&lt;span&gt;115&lt;/span&gt;   }
&lt;span&gt;116&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;loading样式&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ui-mask &lt;/span&gt;&lt;span&gt;z-index&lt;/span&gt;&lt;span&gt;=&quot;{{maskzIndex}}&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ui-mask&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;spinner&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;z-index: {{meIndex}}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;spinner-container container1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;spinner-container container2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;spinner-container container3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; const util = require('../utils/util.js'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; let LayerView = require('behavior-layer-view'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;Component({
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;  behaviors: [LayerView],
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;  data: {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    maskzIndex: util.getBiggerzIndex(),
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    meIndex: util.getBiggerzIndex()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;   attached: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () { 
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     console.log('loading'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;  methods: {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index调用情况：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;import &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./mod.searchbox.wxml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt;=&quot;searchbox&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ui-loading&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ui-loading&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201807/294743-20180730205742364-1104989176.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们后续将完整的项目代码放到github上去，这里便继续代码了&lt;/p&gt;
&lt;h2&gt;添加事件&lt;/h2&gt;
&lt;p&gt;于是，我们开始添加事件了，这里添加一个点击遮盖层关闭整个组件的功能，这里有个问题是，我们点击遮盖层事实上关闭的是遮盖以及loading两个标签，而我们这里的isShow属性便派上了用处，我们现在page中设置下属性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ui-loading &lt;/span&gt;&lt;span&gt;is-show&lt;/span&gt;&lt;span&gt;=&quot;{{isLoadingShow}}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ui-loading&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; onShow: &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     isLoadingShow: ''
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;  });
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; },
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们改造mask以及loading添加事件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cm-overlay&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;z-index: {{zIndex}}; display: {{isShow}}&quot;&lt;/span&gt;&lt;span&gt; bindtap&lt;/span&gt;&lt;span&gt;=&quot;onTap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; let LayerView = require('behavior-layer-view'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;Component({
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;  behaviors: [LayerView],
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;  data: {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    myData: {}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;   attached: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () { 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     console.log('mask'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;  methods: {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     onTap: &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;.triggerEvent('customevent'&lt;span&gt;, {}, {})
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ui-mask &lt;/span&gt;&lt;span&gt;z-index&lt;/span&gt;&lt;span&gt;=&quot;{{maskzIndex}}&quot;&lt;/span&gt;&lt;span&gt; is-show&lt;/span&gt;&lt;span&gt;=&quot;{{isShow}}&quot;&lt;/span&gt;&lt;span&gt; bindcustomevent&lt;/span&gt;&lt;span&gt;=&quot;onMaskEvent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ui-mask&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;spinner&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;z-index: {{meIndex}}; display: {{isShow}}; &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;spinner-container container1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;spinner-container container2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;spinner-container container3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;circle4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; const util = require('../utils/util.js'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; let LayerView = require('behavior-layer-view'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;Component({
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;  behaviors: [LayerView],
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;  data: {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    maskzIndex: util.getBiggerzIndex(),
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    meIndex: util.getBiggerzIndex()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;   attached: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () { 
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     console.log('loading'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;  methods: {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     onMaskEvent: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;      console.log(e);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         isShow: 'none'
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;      });
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个时候，当我们点击遮盖层的时候，我们整个组件便关闭了。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;我们今天花了很多功夫写一个loading，发现小程序中的组件事实上是标签，我们没法使用js获取到我们“组件”的实例，所以使用上有很大的区别，但是什么都不能阻碍我们写通用组件的决心，于是我们明天来写一些通用的组件库，并且形成一个小程序的体系，这里想的是有：&lt;/p&gt;
&lt;p&gt;① 消息框&lt;/p&gt;
&lt;p&gt;② toast提示&lt;/p&gt;
&lt;p&gt;③ 日历组件&lt;/p&gt;
&lt;p&gt;④ 然后再做一个需要定位的气泡组件&lt;/p&gt;
</description>
<pubDate>Mon, 30 Jul 2018 14:20:00 +0000</pubDate>
<dc:creator>叶小钗</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yexiaochai/p/9382862.html</dc:identifier>
</item>
</channel>
</rss>