<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>javascript 之原型、原型链-14 - 风吹De麦浪</title>
<link>http://www.cnblogs.com/CandyManPing/p/8335834.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CandyManPing/p/8335834.html</guid>
<description>[unable to retrieve full-text content]原型 原型是一个对象，每个函数对象（在javascript 之对象中说过函数也是对象 ）都有一个属性（prototype）指向这个对象--原型对象，这个对象的作用是让所有对象实例共享原型对象中的属性、方法。即我们可以把公共的属性、方法写在这个原型中，所以说js中的继承是基于原型实现的； 构造函数、原</description>
<pubDate>Tue, 23 Jan 2018 06:59:00 +0000</pubDate>
<dc:creator>风吹De麦浪</dc:creator>
<dc:identifier>http://www.cnblogs.com/CandyManPing/p/8335834.html</dc:identifier>
</item>
<item>
<title>SLAM入门之视觉里程计(6)：相机标定 张正友经典标定法详解 - Brook_icv</title>
<link>http://www.cnblogs.com/wangguchangqing/p/8335131.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangguchangqing/p/8335131.html</guid>
<description>[unable to retrieve full-text content]想要从二维图像中获取到场景的三维信息，相机的内参数是必须的，在SLAM中，相机通常是提前标定好的。张正友于1998年在论文：&quot;A Flexible New Technique fro Camera Calibration&quot;提出了基于单平面棋盘格的相机标定方法。该方法介于传统的标定方法和自标定方法之间</description>
<pubDate>Tue, 23 Jan 2018 04:29:00 +0000</pubDate>
<dc:creator>Brook_icv</dc:creator>
<dc:identifier>http://www.cnblogs.com/wangguchangqing/p/8335131.html</dc:identifier>
</item>
<item>
<title>Django REST framework 中 3 种类视图的对比 - 小单同桌</title>
<link>http://www.cnblogs.com/reboot51/p/8335120.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/reboot51/p/8335120.html</guid>
<description>&lt;p&gt;&lt;span&gt;相较于使用基于方法（function based）的视图，我们更加倾向使用基于类（class based）的视图。接下来，你将看到这是一个强大的模式，是我们能够重用公共的功能，并且，帮我们减少重复的造轮子。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们现在开始了。首先，重写根视图（root view），变成基于类的视图。所涉及的，只是对 views.py 文件的一点重构。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、使用基于 APIView 类的视图&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; testapps.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Testapp
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; testapps.serializers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; TestappSerializer
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.http &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Http404
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.views &lt;span&gt;import&lt;/span&gt;&lt;span&gt; APIView
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.response &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Response
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; status

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestappList(APIView):
&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
列出所有代码片段(testapps), 或者新建一个代码片段(testapp).
&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; get(self, request, format=&lt;span&gt;None):
        testapps &lt;/span&gt;=&lt;span&gt; Testapp.objects.all()
        serializer &lt;/span&gt;= TestappSerializer(testapps, many=&lt;span&gt;True)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Response(serializer.data)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; post(self, request, format=&lt;span&gt;None):
        serializer &lt;/span&gt;= TestappSerializer(data=&lt;span&gt;request.data)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; serializer.is_valid():
            serializer.save()
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(serializer.data, status=&lt;span&gt;status.HTTP_201_CREATED)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;至此为止，一切顺利。看起来，跟基于方法的差别不大，但我们将各个 HTTP 请求方法之间，做了更好的分离。接着，我们将同样的更改我们，处理片段详细的视图，继续我们的  views.py  文件：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestappDetail(APIView):

&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
读取, 更新 or 删除一个代码片段(testapp)实例(instance).
&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_object(self, pk):
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Testapp.objects.get(pk=&lt;span&gt;pk)
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; Testapp.DoesNotExist:
            &lt;/span&gt;&lt;span&gt;raise&lt;/span&gt;&lt;span&gt; Http404

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self, request, pk, format=&lt;span&gt;None):
        testapp &lt;/span&gt;=&lt;span&gt; self.get_object(pk)
        serializer &lt;/span&gt;=&lt;span&gt; TestappSerializer(testapp)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Response(serializer.data)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; put(self, request, pk, format=&lt;span&gt;None):
        testapp &lt;/span&gt;=&lt;span&gt; self.get_object(pk)
        serializer &lt;/span&gt;= TestappSerializer(testapp, data=&lt;span&gt;request.data)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; serializer.is_valid():
            serializer.save()
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Response(serializer.data)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(serializer.errors, status=&lt;span&gt;status.HTTP_400_BAD_REQUEST)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; delete(self, request, pk, format=&lt;span&gt;None):
        testapp &lt;/span&gt;=&lt;span&gt; self.get_object(pk)
        testapp.delete()
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(status=status.HTTP_204_NO_CONTENT)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;看起来不错。但还是跟基于方法的视图，差别不多。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们也需要重构 urls.py文件，因为我们现在使用的是基于类的视图。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.conf.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; url
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.urlpatterns &lt;span&gt;import&lt;/span&gt;&lt;span&gt; format_suffix_patterns
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; testapp &lt;span&gt;import&lt;/span&gt;&lt;span&gt; views

urlpatterns &lt;/span&gt;=&lt;span&gt; [
    url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^testapp/$&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, views.TestappList.as_view()),
    url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^testapp/(?P&amp;lt;pk&amp;gt;[0-9]+)/$&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, views.TestappDetail.as_view()),
]

urlpatterns &lt;/span&gt;= format_suffix_patterns(urlpatterns)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;好，搞定。如果你跑起开发者服务器，应该跟之前的效果是一样的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、使用 Mixins 类的视图&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用类视图的一大好处是，我们可以很容易地，组成可重复使用的行为。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;目前为止，我们所用的增删改查操作，在我们创建的，任何支持模型的视图里，都没有太大区别。这些通用的行为，在 REST framework的 Mixin类中，都已经实现了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;让我们看看，使用混合类，如何组建视图。下面同样是我们的 views.py 模块：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; testapp.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Testapp
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; testapp.serializers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Testapperializer
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; mixins
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; generics

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestappList(mixins.ListModelMixin,
                  mixins.CreateModelMixin,
                  generics.GenericAPIView):
    queryset &lt;/span&gt;=&lt;span&gt; Testapp.objects.all()
    serializer_class &lt;/span&gt;=&lt;span&gt; Testapperializer

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self, request, *args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.list(request, *args, **&lt;span&gt;kwargs)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; post(self, request, *args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.create(request, *args, **kwargs)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;我们会花一些时间来审查一下，这里发生的事情。我们使用 GenericAPIView 创建了我们的视图，并且加入了 ListModelMixin 和 CreateModelMixin 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;基本类提供了核心的功能，Mixin 类提供了 .list() 和 .create() 行为。然后，我们显式地在 get 和 post 方法里面，放入对应的行动。非常简单，但目前够用。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestappDetail(mixins.RetrieveModelMixin,
                    mixins.UpdateModelMixin,
                    mixins.DestroyModelMixin,
                    generics.GenericAPIView):
    queryset &lt;/span&gt;=&lt;span&gt; Testapp.objects.all()
    serializer_class &lt;/span&gt;=&lt;span&gt; TestappSerializer

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self, request, *args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.retrieve(request, *args, **&lt;span&gt;kwargs)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; put(self, request, *args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.update(request, *args, **&lt;span&gt;kwargs)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; delete(self, request, *args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.destroy(request, *args, **kwargs)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;非常的类似。我们使用了 GenericAPIView 类提供了核心功能，而 Mixin 类提供了 .retrieve() ，.update() 和 .destroy() 行为。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、使用 Generic 类的视图&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用混 Mixin 类重新视图，相比之前，我们减少了一些代码，但我们还可以更进一步。REST framework 提供了一套已经实现了 Mixin 类的 Generic 视图，我们可以使我们的 views.py 模块，更加瘦身！&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; testapps.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Testapp
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; testapps.serializers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; TestappSerializer
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; generics


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestappList(generics.ListCreateAPIView):
    queryset &lt;/span&gt;=&lt;span&gt; Testapp.objects.all()
    serializer_class &lt;/span&gt;=&lt;span&gt; TestappSerializer


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestappDetail(generics.RetrieveUpdateDestroyAPIView):
    queryset &lt;/span&gt;=&lt;span&gt; Testapp.objects.all()
    serializer_class &lt;/span&gt;= TestappSerializer
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这下够简洁了。代码看起来像是很厉害的，干净的，地道的 Django。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 23 Jan 2018 04:22:00 +0000</pubDate>
<dc:creator>小单同桌</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/reboot51/p/8335120.html</dc:identifier>
</item>
<item>
<title>听说 Android 9.0 要禁用 @Hide Api 的调用，你怎么看？ - 承香墨影</title>
<link>http://www.cnblogs.com/plokmju/p/8334869.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/plokmju/p/8334869.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/23/16121092ea75f9e4?w=900&amp;amp;h=500&amp;amp;f=jpeg&amp;amp;s=82864&quot; alt=&quot;197&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;android-9.0&quot;&gt;Android 9.0?&lt;/h2&gt;
&lt;p&gt;Hi，大家好，我是承香墨影！&lt;/p&gt;
&lt;p&gt;距离 Android 8.0 发布，已经过了五个月，虽然现在占有率并不高，不过呢，Google 已经着手准备下一版本的 Android 系统。&lt;/p&gt;
&lt;p&gt;上周，据快科技爆出来的消息，在 XDA社区 有人发现最近的 AOSP（Android Open Source Project）提交记录中，怀疑是下一代 Android 系统版本的代码：PI，这可能是 Android 9.0 的版本名称。不过根据 Android 之前版本的命名习惯，Google 钟爱使用甜点来命名版本，很多人猜测 Pi可能是 Pie（馅饼）的缩写。&lt;/p&gt;
&lt;p&gt;在 AOSP 最新的 commit 中，还暴露出来一些特别的信息，可能会开始限制一些没有被文档提及的非公开 APIs 的调用，例如被标记为 &lt;code&gt;@hide&lt;/code&gt; 的 APIs。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/23/16121092ea74ed0c?w=1800&amp;amp;h=1054&amp;amp;f=jpeg&amp;amp;s=285796&quot; alt=&quot;commit&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面是 commit 的截图，有兴趣可以去这里 AOSP 里看看细节。&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://android-review.googlesource.com/c/platform/external/doclava/+/589515&quot; class=&quot;uri&quot;&gt;https://android-review.googlesource.com/c/platform/external/doclava/+/589515&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单看了一下这个 commit 的改动，可以看到，在 Stubs 中增加了一个 privateDexApiWriter，应该是用来记录这些被标记为 &lt;code&gt;@hide&lt;/code&gt; 的方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/23/16121092ea953fd8?w=1490&amp;amp;h=1444&amp;amp;f=jpeg&amp;amp;s=536423&quot; alt=&quot;dexFile&quot;/&gt;&lt;/p&gt;
&lt;p&gt;具体用来做什么的，也没有深入深究，不过单纯从这个 commit 里看到的内容猜测，应该是要着手限制一些 &lt;code&gt;@hide&lt;/code&gt; APIs 的访问。&lt;/p&gt;
&lt;p&gt;那么我们继续开一下脑洞，想想 Google 想要限制 &lt;code&gt;@hide&lt;/code&gt; APIs 的调用，有那些需要考虑的。&lt;/p&gt;
&lt;h2 id=&quot;hide-方法&quot;&gt;@hide 方法&lt;/h2&gt;
&lt;p&gt;众所周知，Android 系统在迭代的过程中，越来越重视安全这个因素。而有一些方法可能会涉及到系统安全、用户隐私或者其他一些原因，总之有一些因素考量，在发布出来的时候，被 Google 标记为 &lt;code&gt;@hide&lt;/code&gt;，表示并不希望开发者去使用它们。&lt;/p&gt;
&lt;p&gt;而这些标记为 &lt;code&gt;@hide&lt;/code&gt; 的方法，我们也是无法直接调用的，只能使用反射的方式去调用它们，这本身就是不安全的操作。&lt;/p&gt;
&lt;p&gt;不过呢，我们有时候确实为了实现一些功能，需要使用到这些被标记为 &lt;code&gt;@hide&lt;/code&gt; 的方法。&lt;/p&gt;
&lt;p&gt;从前面提到的 commit 的描述中，可以看到，这种限制是 Dex-level 层的，也就是它应该可以做到无视反射调用。例如加个权限限制，调用的时候判断无权调用则直接报错或者让你反射的时候调用，也无法起作用，其实都是限制的方式，现在还不用太深究原理。&lt;/p&gt;
&lt;h2 id=&quot;support-library&quot;&gt;Support Library&lt;/h2&gt;
&lt;p&gt;虽然 Google 是可以做到对 &lt;code&gt;@hide&lt;/code&gt; 方法的限制的，不过有一点不知道大家注意到没有，那就是 Support Library 中，也包含了大量 &lt;code&gt;@hide&lt;/code&gt; APIs 的调用。&lt;/p&gt;
&lt;p&gt;例如最近说到的 Autosizing 功能的实现中，就专门用来写了一个方法，来做反射的调用，获取 TextView 中的一些属性值。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &amp;lt;T&amp;gt; T &lt;span class=&quot;fu&quot;&gt;invokeAndReturnWithDefault&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt; Object object,
            &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String methodName, &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; T defaultValue) {
        T result = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; exceptionThrown = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;// Cache lookup.&lt;/span&gt;
            Method method = &lt;span class=&quot;fu&quot;&gt;getTextViewMethod&lt;/span&gt;(methodName);
            result = (T) method.&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(object);
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception ex) {
            exceptionThrown = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
            Log.&lt;span class=&quot;fu&quot;&gt;w&lt;/span&gt;(TAG, &lt;span class=&quot;st&quot;&gt;&quot;Failed to invoke TextView#&quot;&lt;/span&gt; + methodName + &lt;span class=&quot;st&quot;&gt;&quot;() method&quot;&lt;/span&gt;, ex);
        } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (result == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; exceptionThrown) {
                result = defaultValue;
            }
        }

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; result;
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Google 提供的一系列 Support Library 的库，本质上都是 Google 为开发者准备的一些 APIs 扩展包，但是它不同于系统本身的 APIs。&lt;/p&gt;
&lt;p&gt;我们在开发 Android 的阶段，会指定一个 Api Level ，从 IDE 的表现来看，它会引用一个 android.jar ，本质上是为了我们开发阶段能够成功编译而存在的，这个 Jar 包本身是不会被打包在 APK 中的。&lt;/p&gt;
&lt;p&gt;在 Support Library 则不一样，它只是 Google 提供的一个工具包，会真实的被编译进 APK 中，会占用 APK 的体积。这就是为什么 Support v26 删除了一些方法来促使体积减小，是一件让人高兴的事情。&lt;/p&gt;
&lt;p&gt;而如果 Google 对 &lt;code&gt;@hide&lt;/code&gt; 方法进行了一刀切的限制之后，Support Library 中的一些功能，应该也会受到影响，因为本质上它就是我们 Apk 中的代码，权限级别和我们开发中编写的代码是一样的。&lt;/p&gt;
&lt;p&gt;所以这就存在两个方向的问题：&lt;/p&gt;
&lt;p&gt;1、区分来自 Support Library 的调用和开发者调用。&lt;/p&gt;
&lt;p&gt;2、一刀切，直接修改 Support Library 源码和系统源码，重新审视那些现在被标记为 &lt;code&gt;@hide&lt;/code&gt; 的方法，将那些不会影响安全和隐私的 APIs 全部开放出来，允许开发者调用。&lt;/p&gt;
&lt;p&gt;下面我们继续开脑洞，仔细说说这些的区别。&lt;/p&gt;
&lt;h3 id=&quot;区分调用来源&quot;&gt;1、区分调用来源&lt;/h3&gt;
&lt;p&gt;如果 Google 有办法区分调用来自哪里，然后针对不同的调用来源来实行不同的调用权限控制。&lt;/p&gt;
&lt;p&gt;对开发者而言，实际上就是有漏洞可以让我们模拟成一个来自 Support Library 的调用，就依然可以绕过不允许调用 &lt;code&gt;@hide&lt;/code&gt; 方法的限制，这个明显是有隐患的。&lt;/p&gt;
&lt;h3 id=&quot;一刀切&quot;&gt;2、一刀切&lt;/h3&gt;
&lt;p&gt;从现有 Support Library 中的代码可以看到，其实它使用的 &lt;code&gt;@hide&lt;/code&gt; 方法，并不全都是涉及安全和隐私的。&lt;/p&gt;
&lt;p&gt;就拿最近分析的 Autosizing 来说，它其中大量的调用了一些 TextView 的诸如 &lt;code&gt;getHorizontallyScrolling()&lt;/code&gt;、&lt;code&gt;getLineSpacingMultiplier()&lt;/code&gt;、&lt;code&gt;getLineSpacingExtra()&lt;/code&gt; 方法，这些方法其实并不触及安全和隐私。&lt;/p&gt;
&lt;p&gt;只是为了拿个文本控件的属性而已，能有什么不安全或者不隐私的？慎重考虑之后，拿掉这些方法的 &lt;code&gt;@hide&lt;/code&gt; 就好了，开放调用，就不需要区分那么多了。&lt;/p&gt;
&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;
&lt;p&gt;以上都是我的简单猜测和开脑洞后的想法，说了这么多，Android 依然为向着安全、易用的方向发展，所以无论是限制或是不限制，都是为了让用户好的使用。&lt;/p&gt;
&lt;p&gt;对 Google 可能会限制 &lt;code&gt;@hide&lt;/code&gt; APIs 的调用，你有什么独特的看法？欢迎在留言区分享！&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;今天在&lt;strong&gt;承香墨影&lt;/strong&gt;公众号的后台，回复『&lt;strong&gt;成长&lt;/strong&gt;』。我会送你一些我整理的学习资料。&lt;/p&gt;
&lt;p&gt;我另外还维护了一个技术交流的微信群，有兴趣可以在公众号后台回复：&quot;加群&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;推荐阅读：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/23/16121092eaacd4b3?w=600&amp;amp;h=600&amp;amp;f=jpeg&amp;amp;s=54770&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 23 Jan 2018 03:30:00 +0000</pubDate>
<dc:creator>承香墨影</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/plokmju/p/8334869.html</dc:identifier>
</item>
<item>
<title>聚集索引与非聚集索引的总结 - {-）大傻逼</title>
<link>http://www.cnblogs.com/s-b-b/p/8334593.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/s-b-b/p/8334593.html</guid>
<description>[unable to retrieve full-text content]一.索引简介 众所周知，索引是关系型数据库中给数据库表中一列或多列的值排序后的存储结构，SQL的主流索引结构有B+树以及Hash结构，聚集索引以及非聚集索引用的是B+树索引。这篇文章会总结SQL Server以及MySQL的InnoDB和MyISAM两种SQL的索引。 SQL Sever索引类型有：</description>
<pubDate>Tue, 23 Jan 2018 03:09:00 +0000</pubDate>
<dc:creator>{-）大傻逼</dc:creator>
<dc:identifier>http://www.cnblogs.com/s-b-b/p/8334593.html</dc:identifier>
</item>
<item>
<title>机器学习笔记5-Tensorflow高级API之tf.estimator - 无上@诀</title>
<link>http://www.cnblogs.com/wushangjue/p/8334539.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wushangjue/p/8334539.html</guid>
<description>&lt;p&gt;本文接着上一篇继续来聊&lt;code&gt;Tensorflow&lt;/code&gt;的接口，上一篇中用较低层的接口实现了线性模型，本篇中将用更高级的API——&lt;code&gt;tf.estimator&lt;/code&gt;来改写线性模型。&lt;/p&gt;
&lt;p&gt;还记得之前的文章《&lt;a href=&quot;https://www.fujiabin.com/2017/12/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-sklearn%E4%B9%8Biris%E6%95%B0%E6%8D%AE%E9%9B%86/&quot; target=&quot;_blank&quot;&gt;机器学习笔记2 - sklearn之iris数据集&lt;/a&gt;》吗？本文也将使用&lt;code&gt;tf.estimator&lt;/code&gt;改造该示例。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本文代码都是基于API版本&lt;code&gt;r1.4&lt;/code&gt;。本文中本地开发环境为&lt;code&gt;Pycharm&lt;/code&gt;，在文中不再赘述。&lt;/em&gt;&lt;/p&gt;


&lt;h2 id=&quot;内置模型&quot;&gt;内置模型&lt;/h2&gt;
&lt;p&gt;比起用底层API“较硬”的编码方式，&lt;code&gt;tf.estimator&lt;/code&gt;的在使用时更像是对模型描述（或定义）的过程。&lt;code&gt;Tensorflow&lt;/code&gt;把&lt;code&gt;训练&lt;/code&gt;、&lt;code&gt;评估&lt;/code&gt;、&lt;code&gt;数据处理&lt;/code&gt;等这些过程全部封装起来，让开发人员更专注于解决实际问题的建模过程，而不是纠结于代码实现过程。如果用&lt;code&gt;tf.estimator&lt;/code&gt;改造上一篇中的线性模型的话，完整代码如下：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本例中使用的库&lt;code&gt;numpy&lt;/code&gt;是一个开源工具，是一个功能非常强大且执行效率很高的库，主要用作数值处理及矩阵操作等。&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;python3&quot;&gt;
&lt;code&gt;import numpy as np
import tensorflow as tf

# 定义特性列，线性模型中特性是列是x，shape=[1]，因此定义如下：
feature_columns = [tf.feature_column.numeric_column(&quot;x&quot;, shape=[1])]

# 使用tf.estimator内置的LinearRegressor来完成线性回归算法
# tf.estimator提供了很多常规的算法模型以便用户调用，不需要用户自己重复造轮子
# 到底为止，短短两行代码我们的建模工作就已经完成了
estimator = tf.estimator.LinearRegressor(feature_columns=feature_columns)

# 有了模型之后，我们要使用模型完成训练-&amp;gt;评估-&amp;gt;预测这几个步骤
# 训练数据依旧是(1.,0.)，(2.,-1.)，(3.,-2.)，(4.,-3.)这几个点，拆成x和y两个维度的数组
x_train = np.array([1., 2., 3., 4.])
y_train = np.array([0., -1., -2., -3.])

# 评估数据为(2.,-1.01)，(5.,-4.1)，(8.,-7.)，(1.,0.)这四个点，同样拆分成x和y两个维度的数组
x_eval = np.array([2., 5., 8., 1.])
y_eval = np.array([-1.01, -4.1, -7., 0.])

# 用tf.estimator.numpy_input_fn方法生成随机打乱的数据组，每组包含4个数据
input_fn = tf.estimator.inputs.numpy_input_fn({&quot;x&quot;: x_train}, y_train, batch_size=4, num_epochs=None, shuffle=True)
# 循环1000次训练模型
estimator.train(input_fn=input_fn, steps=1000)

# 生成训练数据，分成1000组，每组4个数据
train_input_fn = tf.estimator.inputs.numpy_input_fn({&quot;x&quot;: x_train}, y_train, batch_size=4, num_epochs=1000, shuffle=False)
# 生成评估数据，分成1000组，每组4个数据
eval_input_fn = tf.estimator.inputs.numpy_input_fn({&quot;x&quot;: x_eval}, y_eval, batch_size=4, num_epochs=1000, shuffle=False)

# 训练数据在模型上的预测准确率
train_metrics = estimator.evaluate(input_fn=train_input_fn)
# 评估数据在模型上的预测准确率
eval_metrics = estimator.evaluate(input_fn=eval_input_fn)

print(&quot;train metrics: %r&quot;% train_metrics)
print(&quot;eval metrics: %r&quot;% eval_metrics)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre class=&quot;python3&quot;&gt;
&lt;code&gt;train metrics: {'average_loss': 4.4709815e-08, 'loss': 1.7883926e-07, 'global_step': 1000}
eval metrics: {'average_loss': 0.0025470245, 'loss': 0.010188098, 'global_step': 1000}&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;自定义模型&quot;&gt;自定义模型&lt;/h2&gt;
&lt;p&gt;虽然&lt;code&gt;tf.estimator&lt;/code&gt;内置了大量的常用模型，但也并不代表我们必须使用内置模型。如有需要，我们可以用底层API实现自定义模型，同时，继续使用&lt;code&gt;tf.estimator&lt;/code&gt;提供的高级特性。如上例中，我们需要定义自己的线性回归模型，仅需要按如下步骤操作：&lt;/p&gt;
&lt;h3 id=&quot;替换estimator&quot;&gt;替换estimator&lt;/h3&gt;
&lt;pre class=&quot;python3&quot;&gt;
&lt;code&gt;# 下面这行替换了原先的estimator = tf.estimator.LinearRegressor(feature_columns=feature_columns)
estimator = tf.estimator.Estimator(model_fn=model_fn)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;定义并实现model_fn方法&quot;&gt;定义并实现model_fn方法&lt;/h3&gt;
&lt;pre class=&quot;python3&quot;&gt;
&lt;code&gt;...
def model_fn(features, labels, mode):
    # 用底层API构建线性模型
    W = tf.get_variable(&quot;W&quot;, [1], dtype=tf.float64)
    b = tf.get_variable(&quot;b&quot;, [1], dtype=tf.float64)
    y = W * features['x'] + b

    loss = tf.reduce_sum(tf.square(y - labels))

    # 获取训练全局参数step
    global_step = tf.train.get_global_step()
    # 梯度下降算法，学习率是0.01
    optimizer = tf.train.GradientDescentOptimizer(0.01)
    # 将优化器和全局step的累加方法打包成一个方法组，相当于把若干个方法打包成事务执行的模式
    train = tf.group(optimizer.minimize(loss), tf.assign_add(global_step, 1))

    # 将所有内容封装成符合tf.estimator.Estimator规范的对象
    return tf.estimator.EstimatorSpec(
        mode=mode,
        predictions=y,
        loss=loss,
        train_op=train)
...&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;在&lt;code&gt;tf.estimator&lt;/code&gt;中，生成&lt;code&gt;TensorBoard&lt;/code&gt;的方法也被集成在了底层，我们要做的，仅仅是传入参数&lt;code&gt;model_dir&lt;/code&gt;而已：&lt;/p&gt;
&lt;p&gt;在LinearRegressor例中代码如下：&lt;/p&gt;
&lt;pre class=&quot;python3&quot;&gt;
&lt;code&gt;...
estimator = tf.estimator.LinearRegressor(feature_columns=feature_columns, model_dir='d1')
...&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;python3&quot;&gt;
&lt;code&gt;...
estimator = tf.estimator.Estimator(model_fn=model_fn, model_dir='d2')
...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;TensorBoard&lt;/code&gt;的启动和上一篇文章中一样，在&lt;code&gt;Pycharm&lt;/code&gt;的控制台中执行：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 以LinearRegressor的代码为例
tensorboard --logdir=d1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动&lt;code&gt;TensorBoard&lt;/code&gt;大致效果如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/tensorboard-display.gif&quot;&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/tensorboard-display.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;现在我们来改造之前用&lt;code&gt;sklearn&lt;/code&gt;实现的&lt;code&gt;IRIS&lt;/code&gt;数据集。之前用了&lt;code&gt;决策树&lt;/code&gt;和&lt;code&gt;邻近算法&lt;/code&gt;两种算法来实现，这次用的是&lt;code&gt;Tensorflow&lt;/code&gt;提供的深度学习模型&lt;code&gt;DNNClassifier&lt;/code&gt;，完整代码如下（代码是官网提供的Demo代码，仅仅将&lt;code&gt;DNNClassifier&lt;/code&gt;中参数&lt;code&gt;model_dir&lt;/code&gt;改为了当前目录下&lt;code&gt;iris_model&lt;/code&gt;目录）：&lt;/p&gt;
&lt;pre class=&quot;python3&quot;&gt;
&lt;code&gt;from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os
from six.moves.urllib.request import urlopen

import numpy as np
import tensorflow as tf

# 数据集
IRIS_TRAINING = &quot;iris_training.csv&quot;
IRIS_TRAINING_URL = &quot;http://download.tensorflow.org/data/iris_training.csv&quot;

IRIS_TEST = &quot;iris_test.csv&quot;
IRIS_TEST_URL = &quot;http://download.tensorflow.org/data/iris_test.csv&quot;


def main():
    # 先将数据集保存到本地
    if not os.path.exists(IRIS_TRAINING):
        raw = urlopen(IRIS_TRAINING_URL).read()
        with open(IRIS_TRAINING, &quot;wb&quot;) as f:
            f.write(raw)

    if not os.path.exists(IRIS_TEST):
        raw = urlopen(IRIS_TEST_URL).read()
        with open(IRIS_TEST, &quot;wb&quot;) as f:
            f.write(raw)

    # 读取数据集
    training_set = tf.contrib.learn.datasets.base.load_csv_with_header(
        filename=IRIS_TRAINING,
        target_dtype=np.int,
        features_dtype=np.float32)
    test_set = tf.contrib.learn.datasets.base.load_csv_with_header(
        filename=IRIS_TEST,
        target_dtype=np.int,
        features_dtype=np.float32)

    feature_columns = [tf.feature_column.numeric_column(&quot;x&quot;, shape=[4])]

    # 创建一个三层的DNN深度学习分类器，三层分别有10、20、10个神经元
    classifier = tf.estimator.DNNClassifier(feature_columns=feature_columns,
                                            hidden_units=[10, 20, 10],
                                            n_classes=3,
                                            model_dir=&quot;iris_model&quot;)

    # 定义训练用的数据集输入
    train_input_fn = tf.estimator.inputs.numpy_input_fn(
        x={&quot;x&quot;: np.array(training_set.data)},
        y=np.array(training_set.target),
        num_epochs=None,
        shuffle=True)

    # 训练模型
    classifier.train(input_fn=train_input_fn, steps=2000)

    # 定义测试用的数据集输入
    test_input_fn = tf.estimator.inputs.numpy_input_fn(
        x={&quot;x&quot;: np.array(test_set.data)},
        y=np.array(test_set.target),
        num_epochs=1,
        shuffle=False)

    # 评估准确率
    accuracy_score = classifier.evaluate(input_fn=test_input_fn)[&quot;accuracy&quot;]

    print(&quot;\nTest Accuracy: {0:f}\n&quot;.format(accuracy_score))

    # 预测两个新样本
    new_samples = np.array(
        [[6.4, 3.2, 4.5, 1.5],
         [5.8, 3.1, 5.0, 1.7]], dtype=np.float32)
    predict_input_fn = tf.estimator.inputs.numpy_input_fn(
        x={&quot;x&quot;: new_samples},
        num_epochs=1,
        shuffle=False)

    predictions = list(classifier.predict(input_fn=predict_input_fn))

    predicted_classes = [p[&quot;classes&quot;] for p in predictions]

    print(
        &quot;New Samples, Class Predictions:    {}\n&quot;
            .format(predicted_classes))


if __name__ == &quot;__main__&quot;:
    main()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;pre class=&quot;python3&quot;&gt;
&lt;code&gt;Test Accuracy: 0.966667

New Samples, Class Predictions:    [array([b'1'], dtype=object), array([b'2'], dtype=object)]


Process finished with exit code 0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，用&lt;code&gt;tf.estimator&lt;/code&gt;提供的&lt;code&gt;DNNClassifier&lt;/code&gt;，仅需要如下代码即可实现一个三层的DNN，并将模型保存在本地的&lt;code&gt;iris_model&lt;/code&gt;文件夹下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;classifier = tf.estimator.DNNClassifier(feature_columns=feature_columns,
                                            hidden_units=[10, 20, 10],
                                            n_classes=3,
                                            model_dir=&quot;iris_model&quot;)&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;启动&lt;code&gt;TensorBoard&lt;/code&gt;，看到的效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/iris-tensorboard-1.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/iris-tensorboard2.jpg&quot;/&gt;&lt;/p&gt;


&lt;p&gt;前面几篇文章中，我在本地运行代码的之后，同时在阿里云&lt;code&gt;PAI&lt;/code&gt;上执行了一次代码。本来我也是想在&lt;code&gt;PAI&lt;/code&gt;上再进行本文中的示例代码的，不过我花了一天多的时间，最后还是失败了，主要原因如下：&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;PAI&lt;/code&gt;目前只支持到&lt;code&gt;Tensorflow 1.2&lt;/code&gt;，而官方目前已经出到&lt;code&gt;Tensorflow 1.4&lt;/code&gt;（马上要出1.5了），而&lt;code&gt;Tensorflow 1.2&lt;/code&gt;是不支持&lt;code&gt;tf.estimator.DNNClassifier&lt;/code&gt;的（代码中需要用到）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;PAI&lt;/code&gt;虽然是可视化拖拽，但是代码还是需要按照&lt;code&gt;PAI&lt;/code&gt;的要求进行少量改造，不便于本地代码直接放到云端执行&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;PAI&lt;/code&gt;的相关文档太少，遇到问题很难解决，就算提交工单技术支持也比较敷衍，这让我这样的初学者感到非常大的挫折感&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;说来也可笑，我的代码无论如何调整在&lt;code&gt;PAI&lt;/code&gt;中运行都会报错，在&lt;code&gt;PAI&lt;/code&gt;官方的技术QQ群里寻求帮助，半天没人搭理，然后有一个群友说&lt;code&gt;PAI&lt;/code&gt;确实不好用，建议我用&lt;code&gt;Google Cloud Platform&lt;/code&gt;。备受挫折的我就注册了一个&lt;code&gt;Google Cloud Platform&lt;/code&gt;，果然，即便是全英文的文档，也让我在&lt;code&gt;不到2小时&lt;/code&gt;的时间里，从注册账号到执行代码成功。这真不是我崇洋媚外或者故意黑阿里，我仅仅叙述了我自己的亲身经历而已。相比&lt;code&gt;PAI&lt;/code&gt;，&lt;code&gt;Google Cloud Platform&lt;/code&gt;的&lt;code&gt;ML Engine&lt;/code&gt;就是一个虚拟云主机（Linux），可以直接用Google的Web版远程控制台进行操作，就跟操作一台真实的Linux一样的体验。因此本地代码也可以直接拷贝过去就能执行，不需要任何修改。运行速度上，我觉得比&lt;code&gt;PAI&lt;/code&gt;快很多（没有数据，只是感觉）。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;Google Cloud Platform&lt;/code&gt;的&lt;code&gt;ML Engine&lt;/code&gt;，需要一些前提条件：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;收费，需要绑定信用卡（VISA或MASTER），不过注册账号是送300美金体验1年（也就是一年内不超过300美金的消费是免费的），官方承诺，免费体验额度用完，如果要产生后续扣信用卡费用的行为，需要用户确认之后才会继续扣款&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;较好的英文阅读能力（能基本看懂英文技术、帮助文档）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FQ（你懂的）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;会操作Linux系统&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以下就是我在&lt;code&gt;Google Cloud Platform&lt;/code&gt;的&lt;code&gt;ML Engine&lt;/code&gt;的Web控制台中操作的动图（注册过程略）：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/googlecloud-mlengine2.gif&quot;&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/googlecloud-mlengine2.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;注意：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;em&gt;我事先做过了实验，所以代码已经放在文件&lt;code&gt;~/cloudml-samples-master/mymltest/tensorflowdemo3/code.py&lt;/code&gt;中，动图中仅仅是复制了一份代码到新的执行目录下。&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;Google Cloud Platform&lt;/code&gt;的帮助文档我放在了最后的&lt;code&gt;参考文档&lt;/code&gt;中。&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;p&gt;官方文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/get_started/get_started&quot; target=&quot;_blank&quot;&gt;https://www.tensorflow.org/get_started/get_started&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/get_started/estimator&quot; target=&quot;_blank&quot;&gt;https://www.tensorflow.org/get_started/estimator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML Engine帮助文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/ml-engine/docs/getting-started-training-prediction&quot; target=&quot;_blank&quot;&gt;https://cloud.google.com/ml-engine/docs/getting-started-training-prediction&lt;/a&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;本文在&lt;a href=&quot;http://www.cnblogs.com/wushangjue/&quot; target=&quot;_blank&quot;&gt;我的博客园&lt;/a&gt;和&lt;a href=&quot;https://www.fujiabin.com&quot; target=&quot;_blank&quot;&gt;我的个人博客&lt;/a&gt;上同步发布，作者保留版权，转载请注明来源。&lt;/p&gt;
</description>
<pubDate>Tue, 23 Jan 2018 02:55:00 +0000</pubDate>
<dc:creator>无上@诀</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wushangjue/p/8334539.html</dc:identifier>
</item>
<item>
<title>客户端一致性与多Leader机制------《Designing Data-Intensive Applications》读书笔记7 - HappenLee</title>
<link>http://www.cnblogs.com/happenlee/p/8334478.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/happenlee/p/8334478.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;接着上一篇的内容，我们继续来梳理分布式系统之中的副本机制与副本一致。上文我们聊到了在可用性与一致性之间的一个折中的一致性等级：&lt;strong&gt;最终一致性&lt;/strong&gt;。我们顺着上篇的内容，由用户来分析一致性等级。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;客户端的困扰&quot;&gt;1. 客户端的困扰&lt;/h3&gt;
&lt;p&gt;上篇文章我们提到了数据系统常用的模型，当提交新数据时，必须将它发送给Leader节点，但是当用户查询数据时，可以从一个Follower节点读取该数据。&lt;br/&gt;这样的模型使十分适合Web应用的&lt;strong&gt;读多写少&lt;/strong&gt;的特点。&lt;/p&gt;
&lt;h4 id=&quot;读写一致性&quot;&gt;读写一致性&lt;/h4&gt;
&lt;p&gt;但是倘若Leader与Follower之间以异步的方式复制的话，会存在一些问题。如下图所示：如果用户数据刚刚写入，而新的数据可能尚未达到Follower节点的副本。在用户的角度，他们提交的数据看起来似乎丢失了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-259fe1764c20c990.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;用户无法读取到新写入的数据&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这种情况下，我们需要&lt;strong&gt;读写一致性&lt;/strong&gt;。对于用户来说，总是能看到它们最新更新的数据。而其他用户的更新可能需要一定的时间之后才可见。现在新的问题来了，我们如何实现Leader-Follower机制下的读写一致性呢？&lt;/p&gt;
&lt;p&gt;这里有一个最简单粗暴的规则是：&lt;strong&gt;用户可以选择总是从Leader节点那里读取自己写入的数据，然后选择自从Follower节点处读取其他用户写入的数据。（注：这里的技巧十分巧妙，十分适合在多用户下的隔离,但是仅仅适用于每个用户都仅仅修改自己数据的场景。）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以更好的方式是&lt;strong&gt;时间戳机制&lt;/strong&gt;，客户端可以通过记录最近一次写入的时间戳，然后数据系统需要确保为该用户提供的任何读取的副本至少在该时间戳之后更新。如果一个副本还没有达到最新的时间戳，则该读取需要由另一个副本处理，或者等待可本节点的副本跟进到满足要求的时间戳。时间戳可以是逻辑时间戳（&lt;strong&gt;表示写入顺序的命令，如日志序列号&lt;/strong&gt;）或实际系统时钟（&lt;strong&gt;强依赖系统时钟的话，需要处理时钟回拨等问题，十分麻烦~~~&lt;/strong&gt;）。&lt;/p&gt;
&lt;h4 id=&quot;单调读一致性&quot;&gt;单调读一致性&lt;/h4&gt;
&lt;p&gt;解决了读写一致性，我们再来看看下面的这个场景：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-9c4fa9e8edef5656.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;单调读时在不同副本的幻读现象&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为用户可以从多个不同的副本进行多次读取，则可能发生这种情况。如上图所示，用户2345进行了两次相同的查询，第一次访问了Follower1节点，第二次查询访问了Follower2节点。第一次查询返回一个最近由用户1234添加的注释，但是第二次查询并没有上次查询的注释了，因为滞后的Follower还没有同步到之前的写入注释的操作。如果用户2345第一次看到用户1234的注释出现，然后再次查询它时却消失了，这对用户2345来说是非常令人困惑的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单调读一致性&lt;/strong&gt;来是保证这种异常不会发送。当客户读到的数据，保证不会看到一个旧的数据。要满足单调读一致性。&lt;strong&gt;实现单调读取的一种方法是确保每个用户总是从同一副本中读取（不同的用户可以从不同的副本读取）。例如，可以根据用户ID散列选择副本，而不是随机选择。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多数据中心下的交叉设备读&lt;/strong&gt;：&lt;br/&gt;在多个数据中心的环境下，问题会变的更加复杂。任何需要由Leader节点服务的请求都必须路由转发到包含Leader的数据中心。当同一用户从多个设备访问服务时，另一个复杂的问题出现了，例如桌面Web浏览器和移动应用程序。在这种情况下，您可能希望在读写一致性的基础之上提供交叉设备读：如果用户输入某个设备上的一些信息，然后在另一个设备上查看，则应该看到他们刚刚输入的信息。如果需要提供交叉设备读，记录用户上次更新的时间戳是十分困难的，因为一个设备不知道其他设备上发生了什么更新。假如你的副本分布在不同的数据中心，也不能保证不同设备的连接将被路由引导到同一数据中心。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;:当使用一个最终一致性的数据系统时，如果复制延迟增加到几分钟甚至几小时，就需要考虑应用程序的行为。如果答案是“没有问题”，那太好了。但如果应用程序对一致性敏感，则应用程序需要提供额外的处理逻辑来处理特殊的场景，如对某些特殊的读取操作，可以限定只对Leader节点执行某些类型的读取。但是，在应用程序代码中处理这些问题会很复杂，很容易出错。&lt;strong&gt;事务&lt;/strong&gt;确保了许多一致性模型，使应用程序更简单。然而，在向分布式的环境之中，许多数据系统放弃了对事务的支持，因为事务会大大降低分布式环境之中系统的性能与可用性。所以，最终一致性能够使用的场景有限，我们还是要按需选择，避免踩坑。&lt;/p&gt;
&lt;h3 id=&quot;多leader机制&quot;&gt;2. 多Leader机制&lt;/h3&gt;
&lt;p&gt;在多数据中心的环境下，如果仅仅只有一个Leader，所以每次写操作都必须访问同一个数据中心，这将会导致延迟大大提高。所以我们可以考虑&lt;strong&gt;多Leader的机制&lt;/strong&gt;。在多Leader机制可以在每个数据中心中设置一个Leader。下图展示了多Leader机制的结构：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-dd2ee156b2bec2c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;多Leader机制的结构&quot;/&gt;&lt;br/&gt;在数据中心内部，保持前文提到的Leader-Follower机制。而跨数据中心的Leader之间通过冲突协调进行数据同步。我们来梳理一下多Leader机制的一些特点&lt;/p&gt;
&lt;p&gt;在多Leader机制中，每个写操作可以在本地数据中心进行处理，再异步复制到其他的数据中心。因此可以大大降低跨数据中心的网络延迟，性能表现显然会更好。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Leader失效&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在单Leader的机制里，如果数据中心失效，则故障转移可以使另一个数据中心中的Follower成为Leader。而多Leader机制，每个数据中心可以独立于其他数据中心继续运行。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;网络的延迟与故障&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;数据中心之间的通信通常依托于公共互联网，它相比数据中心内的本地网络更加不可靠。显然具有异步复制特性的多Leader机制可以更好地容忍跨数据中心通信的延迟与故障。&lt;/p&gt;
&lt;h4 id=&quot;写冲突&quot;&gt;写冲突&lt;/h4&gt;
&lt;p&gt;虽然多Leader机制具备了很多优势，它也有一个大缺点是：相同的数据可以在两个不同的数据中心，一旦数据同时被修改就必须要有机制来解决&lt;strong&gt;写冲突&lt;/strong&gt;的问题。如下图所示，考虑一个同时由两个用户编辑的wiki页面。User1将页面标题从A改为B，User2同时将标题从A改为C。每个用户的更改都分别成功提交给了Leader1与Leader2。当进行异步复制时，系统会检测到冲突：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-dfd498f1f413f765.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;同时更新同一条记录而出现写冲突&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在一个单Leader的数据系统之中，User2要么阻塞，等待第一次写入完成，要么中止第二个写事务，迫使User2重试写入。而在多Leader机制之中，两个写入操作都是成功的，并且冲突只是在稍后的某个时间点异步检测到的。有什么办法可以解决这样的问题呢？&lt;/p&gt;
&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;避免冲突&lt;/strong&gt;&lt;br/&gt;避免冲突：如果应用程序可以确保某个特定记录的所有写入都由同一个Leader处理，那么冲突就不会发生。由于多Leader机制处理冲突十分复杂，避免冲突是经常推荐的方法。（&lt;strong&gt;在用户可以编辑自己的数据的应用程序中，可以确保特定用户的请求总是路由到同一个数据中心，并使用该数据中心中的Leader处理读写请求。不过这只是一种鸵鸟策略，用户地理位置的转移，或者是路由系统的更新，冲突协调仍然不可避免。&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;收敛到一致状态&lt;/strong&gt;&lt;br/&gt;在单Leader的机制中：&lt;strong&gt;如果对同一个字段有多个更新，最后一个写入确定字段的最终值。&lt;/strong&gt;。而在多Leader的机制中，没有定义的写入顺序，因此不清楚最终值应该是什么。所以数据系统必须以收敛的方式解决冲突，这意味着当所有更改都被复制时，所有副本必须到达相同的最终值。可以为每个写操作分配一个唯一的ID（例如，一个时间戳，一个长的随机数，一个UUID或散列的键和值），最高的ID值认为是最终值，这种技术被称为&lt;strong&gt;Last Write Win（LWW）&lt;/strong&gt;。（&lt;strong&gt;强依赖系统时间又会造成很多问题，唉，这真的很烦&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;自定义冲突消解的逻辑&lt;/strong&gt;&lt;br/&gt;最合适的解决冲突的方法可能取决于应用程序，该代码可以在写或读时执行：一旦数据系统检测到复制更改日志中的冲突，它就调用冲突处理程序。或是在应用程序读取的阶段检测到冲突时，会将这些数据的多个版本将返回应用程序。应用程序可以提示用户或自动解决冲突，并将结果写入数据库。（&lt;strong&gt;Cassandra与CouchDB就是采取了这种机制&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;多leader机制的复制拓扑&quot;&gt;多Leader机制的复制拓扑&lt;/h4&gt;
&lt;p&gt;两个Leader进行同步时，拓扑结构十分简单。但是一旦扩展到4,5个Leader，之后多个Leader之间的同步结构又应该是怎么样的呢？（&lt;strong&gt;虽然在实践中，很少采用这样的架构&lt;/strong&gt;）&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-4c3d280a7404b3cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;多Leader机制的拓扑结构&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最一般的拓扑结构是图（c），其中每个节点都将其写入传递给所有的节点。而（a）或（b）采用了环形或星型的结构来减少网络的流量。在环形和星形拓扑中，在到达所有副本之前，写入可能需要经过几个节点。因此，节点需要转发它们从其他节点接收到的数据更改。为了防止无限复制循环，每个节点都被赋予唯一的标识符，并且在复制日志中，每个写入都用它经过的所有节点的标识符标记。当一个节点接收一个带有自己标识符的数据更改时，该数据更改将被忽略，因为节点知道它已经被处理了。&lt;/p&gt;
&lt;p&gt;环形和星形结构存在的一个问题是，如果有一个节点失效，会中断其他节点之间的同步消息流，而因为它不允许消息沿着不同的路径传播，造成了单点故障。但是All pass的结构也会带来一些新的问题，由于网络拥塞的原因，各个节点的信息接收顺序不一致，如下图所示：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-9443d40b50eace39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;写入操作乱序到达&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Client A将行插入到一个Leader 1的表，和Client B在Leader 3之中进行更新。而Leader 2收到了不同顺序的写操作：update操作出现在了insert操作之前。为了正确地排列这些事件，我们可以使用一种称为多版本向量控制（&lt;strong&gt;MVCC&lt;/strong&gt;）的技术。至于什么是MVVC，我们下一篇继续来梳理~~（ &lt;strong&gt;不是我故意卖关子啊，只是怕写的太长你们懒得看~~~&lt;/strong&gt;）&lt;/p&gt;
</description>
<pubDate>Tue, 23 Jan 2018 02:48:00 +0000</pubDate>
<dc:creator>HappenLee</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/happenlee/p/8334478.html</dc:identifier>
</item>
<item>
<title>使用 SVG 和 JS 创建一个由星形变心形的动画 - 叙帝利</title>
<link>http://www.cnblogs.com/nzbin/p/7811451.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nzbin/p/7811451.html</guid>
<description>&lt;blockquote readability=&quot;9.0012484394507&quot;&gt;
&lt;p&gt;序言：首先，这是一篇学习 SVG 及 JS 动画不可多得的优秀文章。我非常喜欢 &lt;a href=&quot;https://css-tricks.com/author/thebabydino/&quot; target=&quot;_blank&quot;&gt;Ana Tudor&lt;/a&gt; 写的教程。在她的教程中有大量使用 SVG 制作的图解以及实时交互 DEMO，可以说教程的所有细枝末节都可以成为学习 SVG 以及 JS 画图的资料。另一方面，这篇教程也非常枯燥，因为教程的主要篇幅是关于几何图形的数学计算，不过上过中学的人都能理解。全篇翻译完，我觉得我几乎重新温习了一遍中学的几何知识，顺便学了点英语词汇。最后还要感叹一下，想要灵活运用 SVG 画图，深厚的数学功底是不可或缺的，同时还要有敏锐的思维和牢靠的记忆力。&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://css-tricks.com/creating-star-heart-animation-svg-vanilla-javascript/&quot; target=&quot;_blank&quot;&gt;Creating a Star to Heart Animation with SVG and Vanilla JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译者：&lt;a href=&quot;http://www.cnblogs.com/nzbin/&quot; target=&quot;_blank&quot;&gt;nzbin&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 &lt;a href=&quot;https://css-tricks.com/emulating-css-timing-functions-javascript/&quot;&gt;我上一篇文章中&lt;/a&gt;, 我讲解了如何使用纯 JavaScript 实现从一个状态到另一个状态的平滑过渡。一定要看看这篇文章，因为我会引用一些我详细解释过的东西，比如演示示例、各种定时函数公式以及如何从结束状态返回初始状态而不需要反转定时函数。&lt;/p&gt;
&lt;p&gt;最后一个例子展示了一个从悲伤到高兴的嘴形，它是通过嘴形 &lt;code&gt;path&lt;/code&gt; 的 &lt;code&gt;d&lt;/code&gt; 属性实现的。&lt;/p&gt;
&lt;p&gt;利用路径数据可以获得更有趣的结果，比如一颗星星变成一个心。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/999445/201711/999445-20171110201110684-1019655776.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们即将编写的星星变心的动画。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;两个形状都是使用五条 &lt;a href=&quot;https://codepen.io/thebabydino/pen/EKLNvZ&quot;&gt;三次 Bézier 曲线&lt;/a&gt; 创建的。下面的交互式演示显示了各个曲线和这些曲线连接的点。单击任何曲线或点都会高亮显示，与它对应的另一个形状的曲线/点也会高亮显示。&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;400&quot; data-theme-id=&quot;25320&quot; data-slug-hash=&quot;NayELo&quot; data-default-tab=&quot;result&quot; data-user=&quot;thebabydino&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;star vs. heart: highlight corresponding cubic Bézier curves on click&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/thebabydino/pen/NayELo/&quot;&gt;star vs. heart: highlight corresponding cubic Bézier curves on click&lt;/a&gt; by Ana Tudor (&lt;a href=&quot;https://codepen.io/thebabydino&quot;&gt;@thebabydino&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;注意，所有这些曲线都是三次曲线，不过其中一些曲线的两个控制点是重合的。&lt;/p&gt;
&lt;p&gt;星星和心的形状都非常简单，但制作起来还是会有一定难度。&lt;/p&gt;

&lt;p&gt;正如在 &lt;a href=&quot;https://codepen.io/thebabydino/pen/bryQGJ&quot;&gt;脸部动画&lt;/a&gt; 中看到的，我经常使用 Pug 生成这样的形状，但在这里，因为我们生成的路径数据也需要用 JavaScript 来制作路径动画，所以全部使用 JavaScript，包括计算坐标并把数值放入 &lt;code&gt;d&lt;/code&gt; 属性中，这似乎是最好的选择。&lt;/p&gt;
&lt;p&gt;这意味着我们不需要写太多的标签：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;svg&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;path &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;='shape'&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;svg&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 JavaScript 的话, 我们先要获取 SVG 元素和 &lt;code&gt;path&lt;/code&gt; 元素（这是星形到心形来回切换的形状）。我们在 SVG 元素上添加了 &lt;code&gt;viewBox&lt;/code&gt; 属性，这样可以保证沿两轴方向尺寸相等并且 &lt;code&gt;(0,0)&lt;/code&gt; 点位于视图中心。所以左上角的坐标是 &lt;code&gt;(-.5*D,-.5*D)&lt;/code&gt;, 其中 &lt;code&gt;D&lt;/code&gt; 是 &lt;code&gt;viewBox&lt;/code&gt; 尺寸的数值。最后，但并非最不重要的一点是，我们创建一个对象来存储关于初始状态和结束状态的信息，以及设置 SVG 形状的的插入值和实际值信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
const _SVG = document.querySelector('svg'&lt;span&gt;), 
      _SHAPE &lt;/span&gt;= document.getElementById('shape'&lt;span&gt;), 
      D &lt;/span&gt;= 1000&lt;span&gt;, 
      O &lt;/span&gt;=&lt;span&gt; { ini: {}, fin: {}, afn: {} };

(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; init() {
  _SVG.setAttribute(&lt;/span&gt;'viewBox', [-.5*D, -.5*D, D, D].join(' '&lt;span&gt;));
})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;既然已经弄明白了，现在开始讨论有趣的部分！&lt;/p&gt;

&lt;p&gt;端点和控制点的初始状态的坐标用于画星星，结束状态的坐标用于画心形。每个坐标的范围是它的最终值与其初始值之间的差值。在这里，需要旋转变形的形状，因为我们想让星星的角指向上方，其次我们改变 &lt;code&gt;fill&lt;/code&gt; 实现金星到红心的变化。&lt;/p&gt;
&lt;p&gt;但是在这两种情况下，我们如何得到端点和控制点的坐标呢？&lt;/p&gt;

&lt;p&gt;从星形开始，先画一个正五角星。曲线的端点就是五角星边的交点，控制点是五角星的顶点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/star_round_tips_pentagram_frame.svg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;高亮显示的正五角星顶点以及边线交点就是五条三次 Bézier 曲线的控制点及端点 (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/YrebKb?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;获取正五角星的顶点坐标 &lt;a href=&quot;https://codepen.io/thebabydino/pen/ybVEzP/?editors=1100&quot;&gt;非常容易&lt;/a&gt; ，只要知道它的外接圆半径 ( 或直径 )，我们可以从 SVG （为了简单起见，我们把它看成正方形，不在对它严密封装）的 &lt;code&gt;viewBox&lt;/code&gt; 尺寸得到。但是我们怎样才能获得交叉点坐标呢？&lt;/p&gt;
&lt;p&gt;首先，我们先考虑下图中五角星形中高亮显示的小五边形。由于是正五角星形，所以五角星形边线交叉得到的小五边形也是正五边形。它和五角星形有相同的 &lt;a href=&quot;http://mathworld.wolfram.com/Incircle.html&quot;&gt;内切圆&lt;/a&gt; 及内切圆半径。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/star_pentagram_inner_pentagon_incircle.svg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;正五角星形和它里面的正五边形有相同的内切圆 (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/wrmKxY?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果我们计算五角星的内切圆半径，那么就可以得到内五边形的半径，如果再知道正五边形一条边所对的 &lt;a href=&quot;http://mathworld.wolfram.com/CentralAngle.html&quot;&gt;圆心角&lt;/a&gt;， 就可以得到五边形的 &lt;a href=&quot;http://mathworld.wolfram.com/Circumcircle.html&quot;&gt;外接圆半径&lt;/a&gt;，然后就可以计算出顶点坐标，这些坐标也是五角星形边线的交点坐标以及三次 Bézier 曲线的坐标。&lt;/p&gt;
&lt;p&gt;我们的正五角星形可以用 &lt;a href=&quot;https://en.wikipedia.org/wiki/Schl%C3%A4fli_symbol#Regular_polygons_.28plane.29&quot;&gt;Schläfli symbol&lt;/a&gt; &lt;code&gt;{5/2}&lt;/code&gt; 表示，这说明它有 &lt;code&gt;5&lt;/code&gt; 顶点，然后将这 &lt;code&gt;5&lt;/code&gt; 个顶点平均分布到它的外接圆上，每个点相隔 &lt;code&gt;360°/5 = 72°&lt;/code&gt; 。我们从第一个点开始，跳过圆上的相邻点与第二个点连接（这就是符号中的 &lt;code&gt;2&lt;/code&gt;；&lt;code&gt;1&lt;/code&gt; 表示五边形，也就是不跳过任何点，与第一个点连接）。以此类推，圆上的点依次相隔连接。&lt;/p&gt;
&lt;p&gt;在下面的交互式演示中，可以选择五边形或五角星形，看看它们是怎样生成的。&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;399&quot; data-theme-id=&quot;25320&quot; data-slug-hash=&quot;veRKMd&quot; data-default-tab=&quot;result&quot; data-user=&quot;thebabydino&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;construct regular pentagon/ pentagram&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/thebabydino/pen/veRKMd/&quot;&gt;construct regular pentagon/ pentagram&lt;/a&gt; by Ana Tudor (&lt;a href=&quot;https://codepen.io/thebabydino&quot;&gt;@thebabydino&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;这样，我们得到了正五角星形的中心角，它是正五边形圆心角的两倍。其中正五边形的圆心角是 &lt;code&gt;1·(360°/5) = 1·72° = 72°&lt;/code&gt; （弧度 &lt;code&gt;1·(2·π/5)&lt;/code&gt;），而正五边形为 &lt;code&gt;2·(360°/5) = 2·72° = 144°&lt;/code&gt; （弧度为 &lt;code&gt;2·(2·π/5)&lt;/code&gt;）。通常，给定一个正多边形（不管是凸多边形还是星形多边形），使用 Schläfli symbol &lt;code&gt;{p,q}&lt;/code&gt; 表示，与一条边相对的圆心角就是 &lt;code&gt;q·(360°/p)&lt;/code&gt; （弧度为 &lt;code&gt;q·(2·π/p)&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/star_pentagram_vs_pentagon_central_ang.svg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;正多边形一条边所对的圆心角: 五角星形 (左, &lt;code&gt;144°&lt;/code&gt;) vs. 五边形 (右, &lt;code&gt;72°&lt;/code&gt;) (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/KXeqzy?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们已经知道五角星形的外接圆半径， 它是正方形 &lt;code&gt;viewBox&lt;/code&gt; 尺寸的一部分。这意味着可以通过直角三角形得到五角星形的内切圆半径（等于它里面的小五边形的内切圆半径），因为我们已经知道斜边（就是五角星形的外接圆半径）以及一个锐角（与边相对的圆心角的一半）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/star_pentagram_inradius.svg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过直角三角形计算正五角星形的内切圆半径，其中斜边是五角星形的外接圆半径，锐角是五角星形边所对的半径夹角的一半 (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/QqBBQg?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;圆心角一半的余弦值就是内切圆半径除以外接圆半径，所以内切圆半径等于外接圆乘以余弦值。&lt;/p&gt;
&lt;p&gt;现在已经知道了五角星形内的小正五边形的内切圆半径，我们可以通过相似的直角三角形计算外接圆半径，直角三角形的斜边就是外接圆半径，圆心角的一半是其中一个锐角，与锐角相邻的中垂线是内切圆半径。&lt;/p&gt;
&lt;p&gt;下图中，高亮突出显示的直角三角形就是由正多边形的外接圆半径、内切圆半径以及边线的一半组成的。从这个三角形中，如果我们知道内切圆半径以及与多边形相对的圆心角（两个半径之间的锐角等于圆心角的一半），我们就可以计算出外接圆半径。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/star_pentagon_circumradius.svg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过直角三角形计算正五边形的外接圆半径（斜边）， 直角边是内切圆半径和五边形边长的一半，锐角是五边形边所对的半径夹角的一半  (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/eGPOOq?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;记住，在这种情况下，圆心角并不等于五角星形的圆心角，而是它的一半 (&lt;code&gt;360°/5 = 72°&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;很好，得到内切圆半径之后，我们可以得到所有想要的点坐标。它们是在两个圆上以相等角度分布的点的坐标。外圆（五角星形的外接圆）上有 &lt;code&gt;5&lt;/code&gt; 个点，内圆（小五边形的外接圆）上也有 &lt;code&gt;5&lt;/code&gt; 个点。总共有 &lt;code&gt;10&lt;/code&gt; 个点，它们所在的径向线之间的角度为 &lt;code&gt;360°/10 = 36°&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/star_points_distr.svg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;端点及控制点分别平均分布在内五边形和五角星的外接圆上 (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/oGawmm?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们已经知道这两个圆的半径。外圆的半径是正五边形的外接圆半径，我们可以取 &lt;code&gt;viewBox&lt;/code&gt; 尺寸的任意数值（&lt;code&gt;.5&lt;/code&gt; 、 &lt;code&gt;.25&lt;/code&gt; 、 &lt;code&gt;.32&lt;/code&gt; 或者我们觉得更好的数值）。内圆的半径是在五角星形内形成的小正五边形的外接圆半径，可以通过一条边相对的圆心角和内切圆半径计算， 而内切圆半径等于五角星形的内切圆半径，可以通过五角星形外接圆半径和圆心角计算得出。&lt;/p&gt;
&lt;p&gt;因此，我们已经可以获得绘制五角星的路径数据，所有数据都是已知的。&lt;/p&gt;
&lt;p&gt;现在让我们在代码中去实现它！&lt;/p&gt;
&lt;p&gt;我们先创建一个 &lt;code&gt;getStarPoints(f)&lt;/code&gt; 函数，它需要传递一个随机因数 (&lt;code&gt;f&lt;/code&gt;) ，这个因数乘以 &lt;code&gt;viewBox&lt;/code&gt; 尺寸就是五角星形的外接圆半径。该函数会返回一个坐标数组，我们之后会用于插入值。&lt;/p&gt;
&lt;p&gt;通过这个函数，我们首先计算变换形状时不会改变的常量，比如五角星形的外接圆半径（外圆的半径）、正五角星和正多边形一条边所对的圆心角、五角星形和内五边形（其顶点是五角星形边的交叉点）共有的内切圆半径、内五边形的外接圆半径、以及需要计算坐标的不同点的总数和平均分布的角度。&lt;/p&gt;
&lt;p&gt;之后，使用循环计算我们想要的点的坐标，并把它们放到坐标数组中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
const P = 5; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; number of cubic curves/ polygon vertices &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;function&lt;/span&gt; getStarPoints(f = .5&lt;span&gt;) {
  const RCO &lt;/span&gt;= f*D &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; outer (pentagram) circumradius  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;, 
        BAS &lt;/span&gt;= 2*(2*Math.PI/P) /* base angle &lt;span&gt;for&lt;/span&gt; star poly */, 
        BAC = 2*Math.PI/P /* base angle &lt;span&gt;for&lt;/span&gt; convex poly */, 
        RI = RCO*Math.cos(.5*BAS) &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;pentagram/ inner pentagon inradius &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;, 
        RCI &lt;/span&gt;= RI/Math.cos(.5*BAC) /* inner pentagon circumradius */, 
        ND = 2*P &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; total number of distinct points we need to get &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;, 
        BAD &lt;/span&gt;= 2*Math.PI/ND /* base angle &lt;span&gt;for&lt;/span&gt; point distribution */, 
        PTS = [] &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; array we fill with point coordinates &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let i = 0; i &amp;lt; ND; i++&lt;span&gt;) {}

  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; PTS;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了计算点的坐标，我们使用它们所在的圆的半径和与水平轴相连的径向线的角度，可以看下面的交互式演示（拖动这个点，看看它的笛卡尔坐标是如何变化的）:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;590&quot; data-theme-id=&quot;25320&quot; data-slug-hash=&quot;KNxXZJ&quot; data-default-tab=&quot;result&quot; data-user=&quot;thebabydino&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;position of point in a plane (drag point)&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/thebabydino/pen/KNxXZJ/&quot;&gt;position of point in a plane (drag point)&lt;/a&gt; by Ana Tudor (&lt;a href=&quot;https://codepen.io/thebabydino&quot;&gt;@thebabydino&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;在我们的例子中，偶数点 (&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, ...) 半径是外圆的半径（五角星外接圆半径 &lt;code&gt;RCO&lt;/code&gt;），奇数点 (&lt;code&gt;1&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, ...) 半径是内圆半径（内五边形外接圆半径 &lt;code&gt;RCI&lt;/code&gt;），而点的径向线与端点的夹角就是该点的索引 (&lt;code&gt;i&lt;/code&gt;) 乘以平均分布的点的基本角度 (&lt;code&gt;BAD&lt;/code&gt;, 在例子中刚好是 &lt;code&gt;36°&lt;/code&gt; 或者 &lt;code&gt;π/10&lt;/code&gt; )。&lt;/p&gt;
&lt;p&gt;因此循环可以这样写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt;(let i = 0; i &amp;lt; ND; i++&lt;span&gt;) {
  let cr &lt;/span&gt;= i%2 ?&lt;span&gt; RCI : RCO, 
      ca &lt;/span&gt;= i*&lt;span&gt;BAD, 
      x &lt;/span&gt;= Math.round(cr*&lt;span&gt;Math.cos(ca)), 
      y &lt;/span&gt;= Math.round(cr*&lt;span&gt;Math.sin(ca));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为我们给 &lt;code&gt;viewBox&lt;/code&gt; 尺寸设置的非常大，所以可以放心地将坐标值四舍五入，这样的话没有小数点，看起来更简洁。&lt;/p&gt;
&lt;p&gt;在将这些坐标保存到数组的过程中，外圆的点（偶数点情况下）被保存了两次，因为实际上这两个控制点是重叠的（这种情况只针对星形），所以我们需要把这些重叠点移动到不同的位置以获得心形。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt;(let i = 0; i &amp;lt; ND; i++&lt;span&gt;) {
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  
  PTS.push([x, y]);
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!(i%2&lt;span&gt;)) PTS.push([x, y]);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，将数据放入对象 &lt;code&gt;O&lt;/code&gt; 中。对于路径数据的（&lt;code&gt;d&lt;/code&gt;）属性，我们将上述函数执行后得到的点数组作为初始数值。我们还创建了一个函数来生成实际的属性值（也就是路径数据字符串——在两对坐标之间插入命令，以便浏览器处理这些坐标）。最后，我们将存储数据的每个值设置成前面提到的函数返回值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; init() {
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  
  O.d &lt;/span&gt;=&lt;span&gt; {
    ini: getStarPoints(), 
    afn: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(pts) {
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; pts.reduce((a, c, i) =&amp;gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; a + (i%3 ? ' ' : 'C') +&lt;span&gt; c
      }, `M${pts[pts.length &lt;/span&gt;- 1&lt;span&gt;]}`)
    }
  };
    
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; O) _SHAPE.setAttribute(p, O[p].afn(O[p].ini))
})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果可以在下面的 CodePen 中查看：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;400&quot; data-theme-id=&quot;25320&quot; data-slug-hash=&quot;YrdwmX&quot; data-default-tab=&quot;result&quot; data-user=&quot;thebabydino&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;make SVG star shape&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/thebabydino/pen/YrdwmX/&quot;&gt;make SVG star shape&lt;/a&gt; by Ana Tudor (&lt;a href=&quot;https://codepen.io/thebabydino&quot;&gt;@thebabydino&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;这是一个好的开始。然而，我们希望生成的五角星第一个角朝下，而最终的星形第一个角朝上。目前，他们都指向右。这是因为星形是从 &lt;code&gt;0°&lt;/code&gt; 度（三点钟方向）开始绘制的。所以为了将六点钟方向作为起点，我们在 &lt;code&gt;getStarPoints()&lt;/code&gt; 函数中给所有角度添加 &lt;code&gt;90°&lt;/code&gt; （&lt;code&gt;π/2&lt;/code&gt; 弧度）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
ca = i*BAD + .5*Math.PI
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在生成的五角星和最终的星形的第一角都朝下。为了旋转星形，我们需要在 &lt;code&gt;transform&lt;/code&gt; 属性中设置半个圆的角度。为了做到这一点，我们首先将初始旋转角度设置为 &lt;code&gt;-180&lt;/code&gt; 。然后，我们设置一个生成实际属性值的函数，这个函数可以通过函数名和参数生成字符串：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; fnStr(fname, farg) { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; `${fname}(${farg})` };

(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; init() {
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  
  O.transform &lt;/span&gt;= { ini: -180,  afn: (ang) =&amp;gt; fnStr('rotate'&lt;span&gt;, ang) };
    
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们也用同样的方式给星形填充金色。将 RGB 数组设置为 &lt;code&gt;fill&lt;/code&gt; 的初始值，并使用同样的函数生成实际的属性值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; init() {
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  
  O.fill &lt;/span&gt;= { ini: [255, 215, 0],  afn: (rgb) =&amp;gt; fnStr('rgb'&lt;span&gt;, rgb) };
    
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在，我们有了一个使用三次 Bézier 曲线及 SVG 绘制的漂亮的金色星星：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;400&quot; data-theme-id=&quot;25320&quot; data-slug-hash=&quot;wrRWJN&quot; data-default-tab=&quot;result&quot; data-user=&quot;thebabydino&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;make SVG star shape #2&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/thebabydino/pen/wrRWJN/&quot;&gt;make SVG star shape #2&lt;/a&gt; by Ana Tudor (&lt;a href=&quot;https://codepen.io/thebabydino&quot;&gt;@thebabydino&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;既然已经有了星形，接下来看看如何才能得到心形！&lt;/p&gt;
&lt;p&gt;我们从两个等径的相交圆开始画，半径都是  &lt;code&gt;viewBox&lt;/code&gt; 尺寸的一部分（暂时为 &lt;code&gt;.25&lt;/code&gt; ）。在这种情况下，两个相交圆的中心点连线位于 &lt;var&gt;x&lt;/var&gt; 轴，交点连线位于 &lt;var&gt;y&lt;/var&gt; 轴。而且这两部分是相等的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/heart_helper_circ.svg&quot; alt=&quot;Illustration showing the helper circles we start with, their radii and the segments connecting their central points and their intersection points.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从两个半径相等的圆开始画，它的圆心位于横轴，交线位于竖轴 (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/aLPYQy?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们画出通过上方交点的直径，然后画出通过直径另一点的切线。这些切线相交于 &lt;var&gt;y&lt;/var&gt; 轴。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/heart_helper_circ_tan.svg&quot; alt=&quot;Illustration showing the helper circles we start with, their passing through their upper intersection point, the tangents at the diametrically opposite points and their intersection.&quot;/&gt;&lt;span&gt;画出经过上方交点的直径，以及经过直径与圆相交的另一端点的切线，切线的交点位于竖轴 (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/qPLvbq?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;上方的交点和切点正好是我们需要的五个端点中的三个。另外两个端点将半圆弧分成了两个相等的部分，从而可以得到四个四分之一圆弧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/heart_hl_end_low_ctrl_pts.svg&quot; alt=&quot;Illustration highlighting the end points of the cubic Bézier curves that make up the heart and the coinciding control points of the bottom one of these curves.&quot;/&gt;&lt;span&gt;高亮显示的三次 Bézier 曲线构成了心形， 下方曲线的控制点重合 (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/wrRZBw?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下方的曲线的控制点正好和之前两切线的交点重合。但是其他四条曲线呢？如何用三次 Bézier 曲线得到圆弧？&lt;/p&gt;
&lt;p&gt;我们无法直接通过三次 Bézier 曲线画出四分之一圆弧，但我们可以找到近似的方法，详见 &lt;a href=&quot;http://spencermortensen.com/articles/bezier-circle/&quot;&gt;这篇文章&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;我们从一个半径为 &lt;code&gt;R&lt;/code&gt; 的四分之一圆弧开始，画出圆弧端点 ( &lt;var&gt;N&lt;/var&gt; and &lt;var&gt;Q&lt;/var&gt; ) 的切线。切线相交于 &lt;var&gt;P&lt;/var&gt; 点。四边形 &lt;var&gt;ONPQ&lt;/var&gt; 的所有角都等于 &lt;code&gt;90°&lt;/code&gt; ( 或者 &lt;code&gt;π/2&lt;/code&gt; )，其中三个是创建出来的（&lt;var&gt;O&lt;/var&gt; 所对的是 &lt;code&gt;90°&lt;/code&gt; 圆弧，所以通过圆弧端点的切线必然与通过该点的半径垂直） ，最后一个是计算出来的（四边形的内角和是 &lt;code&gt;360°&lt;/code&gt; ，而另外三个角的和为 &lt;code&gt;270°&lt;/code&gt;）。所以 &lt;var&gt;ONPQ&lt;/var&gt; 是一个矩形。但是 &lt;var&gt;ONPQ&lt;/var&gt; 也有两个相等的邻边（&lt;var&gt;OQ&lt;/var&gt; 和 &lt;var&gt;ON&lt;/var&gt; 是半径，长度等于 &lt;code&gt;R&lt;/code&gt; ），所以它是边长为 &lt;code&gt;R&lt;/code&gt; 的正方形。因此 &lt;var&gt;NP&lt;/var&gt; 和 &lt;var&gt;QP&lt;/var&gt; 的长度也等于 &lt;code&gt;R&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/arc_cubic_curve_approxim.svg&quot; alt=&quot;Illustration showing the control points we need to approximate a quarter circle arc with a cubic Bézier curve.&quot;/&gt;&lt;span&gt;三次 Bézier 曲线画出的近似四分之一圆弧 (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/jGXoWY?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;与圆弧近似的三次曲线的控制点在切线 &lt;var&gt;NP&lt;/var&gt; 和 &lt;var&gt;QP&lt;/var&gt; 上，与端点的距离为 &lt;code&gt;C·R&lt;/code&gt; ，其中 &lt;code&gt;C&lt;/code&gt; 是之前介绍的文章中所计算出的常量 &lt;code&gt;.551915&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;知道这些条件之后，现在开始计算创建出星形的端点和控制点坐标。&lt;/p&gt;
&lt;p&gt;基于我们选择的创建心形的方式，&lt;var&gt;TO&lt;sub&gt;0&lt;/sub&gt;SO&lt;sub&gt;1&lt;/sub&gt;&lt;/var&gt; (如以下图形所示) 是 &lt;a href=&quot;https://en.wikipedia.org/wiki/Square#Characterizations&quot;&gt;一个正方形&lt;/a&gt; ，因为它的所有边都相等（都等于两个相等圆的半径）并且对角线也相等（我们说过中心点之间的距离等于交点之间的距离）。其中， &lt;var&gt;O&lt;/var&gt; 是对角线的交点，&lt;var&gt;OT&lt;/var&gt; 是对角线 &lt;var&gt;ST&lt;/var&gt; 的一半。&lt;var&gt;T&lt;/var&gt; 和 &lt;var&gt;S&lt;/var&gt; 都位于 &lt;var&gt;y&lt;/var&gt; 轴，所以它们的 &lt;var&gt;x&lt;/var&gt; 坐标为 &lt;code&gt;0&lt;/code&gt; 。它们的 &lt;var&gt;y&lt;/var&gt; 坐标的绝对值等于 &lt;var&gt;OT&lt;/var&gt; 线段的长度，也是对角线（&lt;var&gt;OS&lt;/var&gt; 线段）的一半。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/heart_square_in.svg&quot; alt=&quot;Illustration showing how the central points and the intersection points of the two helper circles form a square.&quot;/&gt;&lt;span&gt;正方形 &lt;var&gt;TO&lt;sub&gt;0&lt;/sub&gt;SO&lt;sub&gt;1&lt;/sub&gt;&lt;/var&gt; (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/PJVmzG?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们将所有的正方形分解成边长为 &lt;code&gt;l&lt;/code&gt; 的两个等腰三角形，其中直角边等于正方形边长，斜边等于对角线长度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/square_diag.svg&quot; alt=&quot;Illustration showing how a square can be split into two congruent right isosceles triangles.&quot;/&gt;&lt;span&gt;任何正方形都可以分成两个全等的等腰直角三角形 (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/aLXjrJ?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过这些直角三角形，我们可以使用毕达哥拉斯定理（ &lt;code&gt;d² = l² + l²&lt;/code&gt; ）计算出斜边。通过边长计算正方形对角线的公式为 &lt;code&gt;d = √(2∙l) = l∙√2&lt;/code&gt; ( 相反地， 通过对角线计算边长的公式为 &lt;code&gt;l = d/√2&lt;/code&gt; )。同样地，对角线的一半为 &lt;code&gt;d/2 = (l∙√2)/2 = l/√2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;把这些公式应用到边长为 &lt;code&gt;R&lt;/code&gt; 的正方形 &lt;var&gt;TO&lt;sub&gt;0&lt;/sub&gt;SO&lt;sub&gt;1&lt;/sub&gt;&lt;/var&gt; 上，可以得到 &lt;var&gt;T&lt;/var&gt; 的 &lt;var&gt;y&lt;/var&gt; 坐标是 &lt;code&gt;-R/√2&lt;/code&gt; （绝对值等于正方形对角线的一半），&lt;var&gt;S&lt;/var&gt; 的 &lt;var&gt;y&lt;/var&gt; 坐标是 &lt;code&gt;R/√2&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/heart_square_in_coord.svg&quot; alt=&quot;Illustration showing the coordinates of the vertices of the TO₀SO₁ square.&quot;/&gt;&lt;span&gt;正方形 &lt;var&gt;TO&lt;sub&gt;0&lt;/sub&gt;SO&lt;sub&gt;1&lt;/sub&gt;&lt;/var&gt; 的所有点坐标(&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/qPgJbv?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;同样的，&lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 点位于 &lt;var&gt;x&lt;/var&gt; 轴，所以它们的 &lt;var&gt;y&lt;/var&gt; 坐标是 &lt;code&gt;0&lt;/code&gt; ，它们的 &lt;var&gt;x&lt;/var&gt; 坐标是对角线 &lt;var&gt;OO&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 长度的一半: &lt;code&gt;±R/√2&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;var&gt;TO&lt;sub&gt;0&lt;/sub&gt;SO&lt;sub&gt;1&lt;/sub&gt;&lt;/var&gt; 是一个正方形，所以它的所有角度都是 &lt;code&gt;90°&lt;/code&gt;（弧度为 &lt;code&gt;π/2&lt;/code&gt; ） 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/heart_square_lat.svg&quot; alt=&quot;Illustration showing TAₖBₖS quadrilaterals.&quot;/&gt;&lt;span&gt;四边形 &lt;var&gt;TA&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;S&lt;/var&gt;  (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/qPgwRx?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;上图中， &lt;var&gt;TB&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 线段是直径，所以 &lt;var&gt;TB&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 所对的弧是半圆弧，也就是 &lt;code&gt;180°&lt;/code&gt; 弧，并且 &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 将它分成了相等的两部分，每一部分是 &lt;code&gt;90°&lt;/code&gt; 弧 - &lt;var&gt;TA&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt;，它所对的是 &lt;code&gt;90°&lt;/code&gt; 角， &lt;var&gt;∠TO&lt;sub&gt;k&lt;/sub&gt;A&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;∠A&lt;sub&gt;k&lt;/sub&gt;O&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 。&lt;/p&gt;
&lt;p&gt;因为 &lt;var&gt;∠TO&lt;sub&gt;k&lt;/sub&gt;S&lt;/var&gt; 是 &lt;code&gt;90°&lt;/code&gt; 角而且 &lt;var&gt;∠TO&lt;sub&gt;k&lt;/sub&gt;A&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 也是 &lt;code&gt;90°&lt;/code&gt; 角，所以 &lt;var&gt;SA&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 线段也是直径。因此在四边形 &lt;var&gt;TA&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;S&lt;/var&gt; 中，对角线 &lt;var&gt;TB&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;SA&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 是垂直的，相等的，并且相交于中点 (&lt;var&gt;TO&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt;, &lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt;, &lt;var&gt;SO&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;A&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 相等，都是初始圆的半径 &lt;code&gt;R&lt;/code&gt;)。这说明四边形 &lt;var&gt;TA&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;S&lt;/var&gt; 是正方形并且对角线长为 &lt;code&gt;2∙R&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;现在我们可以获得四边形 &lt;var&gt;TA&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;S&lt;/var&gt; 的边长为 &lt;code&gt;2∙R/√2 = R∙√2&lt;/code&gt; 。因为所有角都是 &lt;code&gt;90°&lt;/code&gt; 并且 &lt;var&gt;TS&lt;/var&gt; 与竖轴重合，所以 &lt;var&gt;TA&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;SB&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 边是水平的，平行于 &lt;var&gt;x&lt;/var&gt; 轴并且它们的长度是 &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 点的 x 坐标： &lt;code&gt;±R∙√2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;因为 &lt;var&gt;TA&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;SB&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 是水平线，所以 &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 点的 &lt;var&gt;y&lt;/var&gt; 坐标是相等的，分别等于 &lt;var&gt;T&lt;/var&gt; (&lt;code&gt;-R/√2&lt;/code&gt;) 和 &lt;var&gt;S&lt;/var&gt; (&lt;code&gt;R/√2&lt;/code&gt;) 点坐标。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/heart_square_lat_coord.svg&quot; alt=&quot;Illustration showing the coordinates of the vertices of the TAₖBₖS squares.&quot;/&gt;&lt;span&gt;正方形 &lt;var&gt;TA&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;S&lt;/var&gt; 的所有点坐标(&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/Oxqbzb?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们还可以知道的一点是，因为 &lt;var&gt;TA&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;S&lt;/var&gt; 是正方形， &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 平行于 &lt;var&gt;TS，&lt;/var&gt;&lt;var&gt;TS&lt;/var&gt; 位于 &lt;var&gt;y&lt;/var&gt; (垂直) 轴，因此线段 &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 是垂直的。另外， 因为 &lt;var&gt;x&lt;/var&gt; 轴平行于线段 &lt;var&gt;TA&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;SB&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; ，并且平分 &lt;var&gt;TS&lt;/var&gt;，所以它也平分线段 &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 。&lt;/p&gt;
&lt;p&gt;现在让我们转到控制点。&lt;/p&gt;
&lt;p&gt;我们从底部曲线的重叠控制点开始。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/heart_square_low.svg&quot; alt=&quot;Illustration showing the TB₀CB₁ quadrilateral.&quot;/&gt;&lt;span&gt;四边形 &lt;var&gt;TB&lt;sub&gt;0&lt;/sub&gt;CB&lt;sub&gt;1&lt;/sub&gt;&lt;/var&gt; (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/GMerwx?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;四边形 &lt;var&gt;TB&lt;sub&gt;0&lt;/sub&gt;CB&lt;sub&gt;1&lt;/sub&gt;&lt;/var&gt; 所有角度都是 &lt;code&gt;90°&lt;/code&gt; (因为 &lt;var&gt;TO&lt;sub&gt;0&lt;/sub&gt;SO&lt;sub&gt;1&lt;/sub&gt;&lt;/var&gt; 是正方形，所以 &lt;var&gt;∠T&lt;/var&gt; 是直角；因为线段 &lt;var&gt;B&lt;sub&gt;k&lt;/sub&gt;C&lt;/var&gt; 在 &lt;var&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 点与圆相切，因此与半径 &lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 垂直，所以 &lt;var&gt;∠B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 是直角；最后，因为四边形内角和是 &lt;code&gt;360°&lt;/code&gt; 而其它三个角是&lt;code&gt;270°&lt;/code&gt; ，所以 &lt;var&gt;∠C&lt;/var&gt; 也是 &lt;code&gt;90°&lt;/code&gt;  )， 所以它是矩形。又因为 &lt;var&gt;TB&lt;sub&gt;0&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;TB&lt;sub&gt;1&lt;/sub&gt;&lt;/var&gt; 相等，都是初始圆的直径，因此都等于 &lt;code&gt;2∙R&lt;/code&gt; 。所以它是边长为 &lt;code&gt;2∙R&lt;/code&gt; 的正方形。&lt;/p&gt;
&lt;p&gt;现在，我们可以得出对角线 &lt;var&gt;TC&lt;/var&gt; 等于 &lt;code&gt;2∙R∙√2&lt;/code&gt; 。因为 &lt;var&gt;C&lt;/var&gt; 位于 &lt;var&gt;y&lt;/var&gt; 轴，它的 &lt;var&gt;x&lt;/var&gt; 坐标是 &lt;code&gt;0&lt;/code&gt; 。它的 &lt;var&gt;y&lt;/var&gt; 坐标等于线段 &lt;var&gt;OC&lt;/var&gt; 的长度。线段 &lt;var&gt;OC&lt;/var&gt; 等于线段 &lt;var&gt;TC&lt;/var&gt; 减去线段 &lt;var&gt;OT&lt;/var&gt; ： &lt;code&gt;2∙R∙√2 - R/√2 = 4∙R/√2 - R/√2 = 3∙R/√2&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/heart_square_low_coord.svg&quot; alt=&quot;Illustration showing the coordinates of the vertices of the TB₀CB₁ square.&quot;/&gt;&lt;span&gt;正方形 &lt;var&gt;TB&lt;sub&gt;0&lt;/sub&gt;CB&lt;sub&gt;1&lt;/sub&gt;&lt;/var&gt; 的顶点坐标 (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/WZmjgZ?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;因此我们得到了底部曲线两个相似控制点的坐标 &lt;code&gt;(0,3∙R/√2)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;为了获得其它曲线控制点的坐标，我们需要画出经过端点的切线，它们的交点是 &lt;var&gt;D&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;E&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/heart_square_out.svg&quot; alt=&quot;Illustration showing the TOₖAₖDₖ and AₖOₖBₖEₖ quadrilaterals.&quot;/&gt;&lt;span&gt;四边形 &lt;var&gt;TO&lt;sub&gt;k&lt;/sub&gt;A&lt;sub&gt;k&lt;/sub&gt;D&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;O&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;E&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt;  (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/XeGVdj?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在四边形 &lt;var&gt;TO&lt;sub&gt;k&lt;/sub&gt;A&lt;sub&gt;k&lt;/sub&gt;D&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 中，所有角都是 &lt;code&gt;90°&lt;/code&gt; (直角)，其中三个是已知的（&lt;var&gt;∠D&lt;sub&gt;k&lt;/sub&gt;TO&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;∠D&lt;sub&gt;k&lt;/sub&gt;A&lt;sub&gt;k&lt;/sub&gt;O&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 是半径分别在 &lt;var&gt;T&lt;/var&gt; 和 &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 点与切线的夹角，而 &lt;var&gt;∠TO&lt;sub&gt;k&lt;/sub&gt;A&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 四分之一圆弧 &lt;var&gt;TA&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 所对的角），第四个角是计算出来的（所有角的和是 &lt;code&gt;360°&lt;/code&gt; 而另外三个的和是  &lt;code&gt;270°&lt;/code&gt;）。所以 &lt;var&gt;TO&lt;sub&gt;k&lt;/sub&gt;A&lt;sub&gt;k&lt;/sub&gt;D&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 是矩形。又因为两个相邻边相等（线段&lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;T&lt;/var&gt; 和 &lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;A&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 都是半径的长 &lt;code&gt;R&lt;/code&gt;）， 因此它们都是正方形。&lt;/p&gt;
&lt;p&gt;所以对角线 &lt;var&gt;TA&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;D&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 等于 &lt;code&gt;R∙√2&lt;/code&gt; 。已知 &lt;var&gt;TA&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 是水平的，又因为正方形对角线垂直，所以线段 &lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;D&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 是垂直的。所以 &lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;D&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 点的 &lt;var&gt;x&lt;/var&gt; 坐标相等，我们已经计算过 &lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 点坐标是 &lt;code&gt;±R/√2&lt;/code&gt; 。因为已知 &lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;D&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 的长度，所以也可以求出 &lt;var&gt;y&lt;/var&gt; 坐标，等于对角线长度 (&lt;code&gt;R∙√2&lt;/code&gt;) ，前面有负号。&lt;/p&gt;
&lt;p&gt;同样的，在四边形 &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;O&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;E&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 中，所有角也都是 &lt;code&gt;90°&lt;/code&gt; (直角)， 其中三个是已知的（&lt;var&gt;∠E&lt;sub&gt;k&lt;/sub&gt;A&lt;sub&gt;k&lt;/sub&gt;O&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;∠E&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;O&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 是半径分别在 &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 点与切线的夹角，而 &lt;var&gt;∠A&lt;sub&gt;k&lt;/sub&gt;O&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 是四分之一圆弧 &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 所对的角），第四个角是计算出来的（所有角的和是 &lt;code&gt;360°&lt;/code&gt; 而另外三个的和是  &lt;code&gt;270°&lt;/code&gt;）， 所以 &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;O&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;E&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 是矩形。又因为两个相邻边相等（线段&lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;T&lt;/var&gt; 和 &lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;A&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 都是半径的长 &lt;code&gt;R&lt;/code&gt;）， 因此它们都是正方形。&lt;/p&gt;
&lt;p&gt;现在，我们知道了对角线 &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;E&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 的长度是 &lt;code&gt;R∙√2&lt;/code&gt; 。已知线段 &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 是垂直的，而且被水平轴平分，所以线段 &lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;E&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 位于 x 轴，因此 &lt;var&gt;E&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 点的 &lt;var&gt;y&lt;/var&gt; 坐标是 &lt;code&gt;0&lt;/code&gt; 。又因为&lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 点的 &lt;var&gt;x&lt;/var&gt; 坐标是 &lt;code&gt;±R/√2&lt;/code&gt; 而且线段 &lt;var&gt;O&lt;sub&gt;k&lt;/sub&gt;E&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 等于 &lt;code&gt;R∙√2&lt;/code&gt;， 所以可以计算出 &lt;var&gt;E&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 点坐标等于 &lt;code&gt;±3∙R/√2&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/10/heart_square_out_coord.svg&quot; alt=&quot;Illustration showing the coordinates of the newly computed vertices of the TOₖAₖDₖ and AₖOₖBₖEₖ squares.&quot;/&gt;&lt;span&gt;正方形 TOₖAₖDₖ 和 AₖOₖBₖEₖ 上新计算的点的坐标 (&lt;/span&gt;&lt;a href=&quot;https://codepen.io/thebabydino/pen/xXorRQ?editors=1000&quot;&gt;live&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;但是，这些切线交点并不是我们想要获得的近似圆弧的控制点。我们需要的控制点位于线段 &lt;var&gt;TD&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt;, &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;D&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt;, &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;E&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;B&lt;sub&gt;k&lt;/sub&gt;E&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 上，与（&lt;var&gt;T&lt;/var&gt;, &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt;, &lt;var&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt;）相聚大约 &lt;code&gt;55%&lt;/code&gt; 的位置（这个数值是通过之前文章中的 &lt;code&gt;C&lt;/code&gt; 计算出来的） 。所以端点到控制点的线段长为 &lt;code&gt;C∙R&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;在这种情况下，控制点坐标为 &lt;code&gt;1 - C&lt;/code&gt; 乘以 (&lt;var&gt;T&lt;/var&gt;, &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; and &lt;var&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt;) 点坐标，再加上 &lt;code&gt;C&lt;/code&gt; 乘以这些点的切线交点坐标 (&lt;var&gt;D&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;E&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt;)。&lt;/p&gt;
&lt;p&gt;赶快编写 JavaScript 代码吧!&lt;/p&gt;
&lt;p&gt;和编写星形代码一样，先写一个 &lt;code&gt;getStarPoints(f)&lt;/code&gt; 函数，需要传一个任意因子参数 (&lt;code&gt;f&lt;/code&gt;) ，用于从 &lt;code&gt;viewBox&lt;/code&gt; 的尺寸中获取辅助圆的半径。这个方法也会返回之后用到的插入点坐标数组。&lt;/p&gt;
&lt;p&gt;在函数内部，我们计算那些在整个函数中不会改变的常量。首先是辅助圆的半径。其次是小正方形的对角线，它的长度等于辅助圆半径，对角线一半也是它的外接圆半径。然后是三次曲线的端点坐标 ( &lt;var&gt;T&lt;/var&gt;, &lt;var&gt;A&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt;, &lt;var&gt;B&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 点)，沿水平方轴方向的绝对值。最后计算通过端点的切线交点坐标 ( &lt;var&gt;C&lt;/var&gt;, &lt;var&gt;D&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt;, &lt;var&gt;E&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 点)。这些点要么是与控制点一致 (&lt;var&gt;C&lt;/var&gt;)，要么可以帮助我们获得控制点 (可以参考计算 &lt;var&gt;D&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 和 &lt;var&gt;E&lt;sub&gt;k&lt;/sub&gt;&lt;/var&gt; 点的方法）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; getHeartPoints(f = .25&lt;span&gt;) {
  const R &lt;/span&gt;= f*D &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; helper circle radius  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;, 
        RC &lt;/span&gt;= Math.round(R/Math.SQRT2) /* circumradius of square of edge R */, 
        XT = 0, YT = -RC &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; coords of point T &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;, 
        XA &lt;/span&gt;= 2*RC, YA = -RC &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; coords of A points (x in abs value) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;, 
        XB &lt;/span&gt;= 2*RC, YB = RC &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; coords of B points (x in abs value) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;, 
        XC &lt;/span&gt;= 0, YC = 3*RC &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; coords of point C &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;, 
        XD &lt;/span&gt;= RC, YD = -2*RC &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; coords of D points (x in abs value) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;, 
        XE &lt;/span&gt;= 3*RC, YE = 0 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; coords of E points (x in abs value) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在下面的交互式演示中，可以点击查看这些点的坐标：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;25320&quot; data-slug-hash=&quot;bYGrjR&quot; data-default-tab=&quot;result&quot; data-user=&quot;thebabydino&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;heart structure - end and intersection points&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/thebabydino/pen/bYGrjR/&quot;&gt;heart structure - end and intersection points&lt;/a&gt; by Ana Tudor (&lt;a href=&quot;https://codepen.io/thebabydino&quot;&gt;@thebabydino&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;现在我们可以通过端点得到控制点以及切线交点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; getHeartPoints(f = .25&lt;span&gt;) {
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  const &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; const for cubic curve approx of quarter circle &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        C &lt;/span&gt;= .551915&lt;span&gt;, 
        CC &lt;/span&gt;= 1 -&lt;span&gt; C, 
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; coords of ctrl points on TD segs &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        XTD &lt;/span&gt;= Math.round(CC*XT + C*XD), YTD = Math.round(CC*YT + C*&lt;span&gt;YD), 
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; coords of ctrl points on AD segs &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        XAD &lt;/span&gt;= Math.round(CC*XA + C*XD), YAD = Math.round(CC*YA + C*&lt;span&gt;YD), 
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; coords of ctrl points on AE segs &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        XAE &lt;/span&gt;= Math.round(CC*XA + C*XE), YAE = Math.round(CC*YA + C*&lt;span&gt;YE), 
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; coords of ctrl points on BE segs &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        XBE &lt;/span&gt;= Math.round(CC*XB + C*XE), YBE = Math.round(CC*YB + C*&lt;span&gt;YE);

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，需要将这些点放到数组中，并返回数组。在制作星形的时候，我们从底部曲线开始，然后顺时针旋转，现在同样如此。对于每条曲线，都要写两组控制点坐标以及一组端点坐标。&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;25320&quot; data-slug-hash=&quot;WXeVRO&quot; data-default-tab=&quot;result&quot; data-user=&quot;thebabydino&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;star vs. heart: corresponding cubic Bézier curves (annotated, highlight on click)&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/thebabydino/pen/WXeVRO/&quot;&gt;star vs. heart: corresponding cubic Bézier curves (annotated, highlight on click)&lt;/a&gt; by Ana Tudor (&lt;a href=&quot;https://codepen.io/thebabydino&quot;&gt;@thebabydino&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;注意第一条曲线（底部）曲线，两条控制点是重合的，所以同一个坐标写了两次 。这段代码看上去不如星形的代码，但已经足够了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [
  [XC, YC], [XC, YC], [&lt;/span&gt;-&lt;span&gt;XB, YB], 
  [&lt;/span&gt;-XBE, YBE], [-XAE, YAE], [-&lt;span&gt;XA, YA], 
  [&lt;/span&gt;-XAD, YAD], [-&lt;span&gt;XTD, YTD], [XT, YT], 
  [XTD, YTD], [XAD, YAD], [XA, YA], 
  [XAE, YAE], [XBE, YBE], [XB, YB]
];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以参考星形的例子，同样使用 &lt;code&gt;getHeartPoints()&lt;/code&gt; 函数获得初始状态，没有旋转，使用红色 &lt;code&gt;fill&lt;/code&gt; 填充。然后，我们将当前状态设置为最终的形状，这样我们就能看到心形了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; fnStr(fname, farg) { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; `${fname}(${farg})` };

(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; init() {    
  _SVG.setAttribute(&lt;/span&gt;'viewBox', [-.5*D, -.5*D, D, D].join(' '&lt;span&gt;));
    
  O.d &lt;/span&gt;=&lt;span&gt; {
    ini: getStarPoints(), 
    fin: getHeartPoints(), 
    afn: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(pts) {
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; pts.reduce((a, c, i) =&amp;gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; a + (i%3 ? ' ' : 'C') +&lt;span&gt; c
      }, `M${pts[pts.length &lt;/span&gt;- 1&lt;span&gt;]}`)
    }
  };
    
  O.transform &lt;/span&gt;=&lt;span&gt; {
    ini: &lt;/span&gt;-180&lt;span&gt;, 
    fin: &lt;/span&gt;0&lt;span&gt;, 
    afn: (ang) &lt;/span&gt;=&amp;gt; fnStr('rotate'&lt;span&gt;, ang)
  };
    
  O.fill &lt;/span&gt;=&lt;span&gt; {
    ini: [&lt;/span&gt;255, 215, 0&lt;span&gt;], 
    fin: [&lt;/span&gt;220, 20, 60&lt;span&gt;], 
    afn: (rgb) &lt;/span&gt;=&amp;gt; fnStr('rgb'&lt;span&gt;, rgb)
  };
    
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; O) _SHAPE.setAttribute(p, O[p].afn(O[p].fin))
})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们有了一个漂亮的心：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;305&quot; data-theme-id=&quot;25320&quot; data-slug-hash=&quot;veqbrV&quot; data-default-tab=&quot;result&quot; data-user=&quot;thebabydino&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;make SVG heart shape&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/thebabydino/pen/veqbrV/&quot;&gt;make SVG heart shape&lt;/a&gt; by Ana Tudor (&lt;a href=&quot;https://codepen.io/thebabydino&quot;&gt;@thebabydino&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;但是如果将两个形状放到一起，不使用 &lt;code&gt;fill&lt;/code&gt; 或者 &lt;code&gt;transform&lt;/code&gt;，只有 &lt;code&gt;stroke&lt;/code&gt;， 可以看到两个形状并没有对齐：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;25320&quot; data-slug-hash=&quot;PJrLMp&quot; data-default-tab=&quot;result&quot; data-user=&quot;thebabydino&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;SVG star vs. heart alignment&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/thebabydino/pen/PJrLMp/&quot;&gt;SVG star vs. heart alignment&lt;/a&gt; by Ana Tudor (&lt;a href=&quot;https://codepen.io/thebabydino&quot;&gt;@thebabydino&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;解决这个问题最简单的方法是让心形根据辅助圆半径的大小缩放：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt; [ &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same coords &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; ].map(([x, y]) =&amp;gt; [x, y - .09*R])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在可以很好的对齐了， 不管怎样调整 &lt;code&gt;f&lt;/code&gt; 因数。在星形中，这个因数决定了相对于 &lt;code&gt;viewBox&lt;/code&gt; 尺寸的五角星外接圆半径 (默认是 &lt;code&gt;.5&lt;/code&gt;) ；在心形中，它决定了同样相对于 &lt;code&gt;viewBox&lt;/code&gt; 尺寸的辅助圆半径 (默认是 &lt;code&gt;.25&lt;/code&gt;)。&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;25320&quot; data-slug-hash=&quot;eGqaxd&quot; data-default-tab=&quot;result&quot; data-user=&quot;thebabydino&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;star-heart alignment for various f factors&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/thebabydino/pen/eGqaxd/&quot;&gt;star-heart alignment for various f factors&lt;/a&gt; by Ana Tudor (&lt;a href=&quot;https://codepen.io/thebabydino&quot;&gt;@thebabydino&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;我们希望点击时从一个形状变到另一个形状。为了做出这种效果，设置一个方向变量 &lt;code&gt;dir&lt;/code&gt;，星形变心形的时候值为 &lt;code&gt;1&lt;/code&gt; ，心形变星形的时候值为 &lt;code&gt;-1&lt;/code&gt; 。初始值为 &lt;code&gt;-1&lt;/code&gt;，好像刚从心形变到星形。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;_SHAPE&lt;/code&gt; 元素上添加一个 &lt;code&gt;'click'&lt;/code&gt; 事件监听器并编写这个状态下的代码，我们改变了方向变量 (&lt;code&gt;dir&lt;/code&gt;) 以及形状的属性，这样就可以实现从金星变红心或者红心变金星：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
let dir = -1&lt;span&gt;;

(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; init() {    
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    
  _SHAPE.addEventListener(&lt;/span&gt;'click', e =&amp;gt;&lt;span&gt; {
    dir &lt;/span&gt;*= -1&lt;span&gt;;
        
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; O)
      _SHAPE.setAttribute(p, O[p].afn(O[p][dir &lt;/span&gt;&amp;gt; 0 ? 'fin' : 'ini'&lt;span&gt;]));
  }, &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在，点击可以切换两个形状：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;25320&quot; data-slug-hash=&quot;wPwKMw&quot; data-default-tab=&quot;result&quot; data-user=&quot;thebabydino&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;toggle between star and heart on click&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/thebabydino/pen/wPwKMw/&quot;&gt;toggle between star and heart on click&lt;/a&gt; by Ana Tudor (&lt;a href=&quot;https://codepen.io/thebabydino&quot;&gt;@thebabydino&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;我们并不希望一个形状突变到另一个形状，而是过渡变化的。因此我们使用之前文章中使用的插入值技术去实现。&lt;/p&gt;
&lt;p&gt;我们首先确定过渡的总帧数 (&lt;code&gt;NF&lt;/code&gt;) ，然后选择合适的时间函数类型，从星形变心形的 &lt;code&gt;path&lt;/code&gt; 形状过渡使用 &lt;code&gt;ease-in-out&lt;/code&gt; 类型，旋转使用 &lt;code&gt;bounce-ini-fin&lt;/code&gt; 类型，而 &lt;code&gt;fill&lt;/code&gt; 使用 &lt;code&gt;ease-out&lt;/code&gt; 类型。暂时就这些，或许以后我们改变主意或者想探索其它参数的时候再添加其它类型。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
const NF &lt;/span&gt;= 50&lt;span&gt;, 
      TFN &lt;/span&gt;=&lt;span&gt; {
        &lt;/span&gt;'ease-out': &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(k) {
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 1 - Math.pow(1 - k, 1.675&lt;span&gt;)
        }, 
        &lt;/span&gt;'ease-in-out': &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(k) {
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; .5*(Math.sin((k - .5)*Math.PI) + 1&lt;span&gt;)
        },
        &lt;/span&gt;'bounce-ini-fin': &lt;span&gt;function&lt;/span&gt;(k, s = -.65*Math.PI, e = -&lt;span&gt;s) {
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (Math.sin(k*(e - s) + s) - Math.sin(s))/(Math.sin(e) - Math.sin(s))
&lt;span&gt;        }
      };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，为每个过渡属性指定一个时间函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; init() {    
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    
  O.d &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    tfn: &lt;/span&gt;'ease-in-out'&lt;span&gt;
  };
    
  O.transform &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    tfn: &lt;/span&gt;'bounce-ini-fin'&lt;span&gt;
  };
      
  O.fill &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    tfn: &lt;/span&gt;'ease-out'&lt;span&gt;
  };

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;继续添加请求 ID (&lt;code&gt;rID&lt;/code&gt;) 以及当前帧 (&lt;code&gt;cf&lt;/code&gt;) 变量，点击时首先调用 &lt;code&gt;update()&lt;/code&gt; 函数，然后刷新每次显示直到过渡结束，调用 &lt;code&gt;stopAni()&lt;/code&gt; 函数来结束动画循环。通过 &lt;code&gt;update()&lt;/code&gt; 函数，可以更新当前帧 &lt;code&gt;cf&lt;/code&gt;，计算进度 &lt;code&gt;k&lt;/code&gt; 以及在过渡结束时决定是否结束动画循环。&lt;/p&gt;
&lt;p&gt;我们还添加了一个乘数变量 &lt;code&gt;m&lt;/code&gt; ，当结束状态（心形）返回初始状态（星形）时不需要反转事件函数 。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
let rID = &lt;span&gt;null&lt;/span&gt;, cf = 0&lt;span&gt;, m;

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; stopAni() {
  cancelAnimationFrame(rID);
  rID &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;  
};

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; update() {
  cf &lt;/span&gt;+=&lt;span&gt; dir;
    
  let k &lt;/span&gt;= cf/NF;
  
  &lt;span&gt;if&lt;/span&gt;(!(cf%&lt;span&gt;NF)) {
    stopAni();
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;
  }
  
  rID &lt;/span&gt;=&lt;span&gt; requestAnimationFrame(update)
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后需要改变点击时的操作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
addEventListener('click', e =&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(rID) stopAni();
  dir &lt;/span&gt;*= -1&lt;span&gt;;
  m &lt;/span&gt;= .5*(1 -&lt;span&gt; dir);
  update();
}, &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 &lt;code&gt;update()&lt;/code&gt; 函数中，我们想将过渡属性设置成一些中间值 (取决于进度 &lt;code&gt;k&lt;/code&gt;) 。正如在之前文章中看到的， 在刚开始甚至设置监听器之前就计算结束值与初始值之间的范围会比较好，所以接下来： 创建一个计算数字（或者数组中的，无论层级多深）范围的函数，然后使用这个函数设置过渡属性值的范围。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; range(ini, fin) {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;typeof&lt;/span&gt; ini == 'number' ?&lt;span&gt; 
         fin &lt;/span&gt;-&lt;span&gt; ini : 
         ini.map((c, i) &lt;/span&gt;=&amp;gt;&lt;span&gt; range(ini[i], fin[i]))
};

(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; init() {    
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    
  &lt;span&gt;for&lt;/span&gt;(let p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; O) {
    O[p].rng &lt;/span&gt;=&lt;span&gt; range(O[p].ini, O[p].fin);
    _SHAPE.setAttribute(p, O[p].afn(O[p].ini));
  }
    
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在剩下的就是 update() 函数的插值部分。使用循环，我们可以将所有属性从一个状态平滑过渡到另一个状态。在这个循环中，我们将当前值设置成插值函数的返回值，该函数需要传入初始值(s), 当前属性(&lt;code&gt;ini&lt;/code&gt; 和 &lt;code&gt;rng&lt;/code&gt;) 的范围(s) ，时间函数 (&lt;code&gt;tfn&lt;/code&gt;) 以及进度 (&lt;code&gt;k&lt;/code&gt;)：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; update() {    
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    
  &lt;span&gt;for&lt;/span&gt;(let p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; O) {
    let c &lt;/span&gt;=&lt;span&gt; O[p];

    _SHAPE.setAttribute(p, c.afn(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;(c.ini, c.rng, TFN[c.tfn], k)));
  }
    
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后一步是编写这个插值函数。它和之前求范围值的函数非常类似：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;(ini, rng, tfn, k) {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;typeof&lt;/span&gt; ini == 'number' ?&lt;span&gt; 
         Math.round(ini &lt;/span&gt;+ (m + dir*tfn(m + dir*k))*&lt;span&gt;rng) : 
         ini.map((c, i) &lt;/span&gt;=&amp;gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;(ini[i], rng[i], tfn, k))
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终我们得到了一个形状，点击时从星心变心形，再次点击从心形变星形！&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;25320&quot; data-slug-hash=&quot;LOPpBM&quot; data-default-tab=&quot;result&quot; data-user=&quot;thebabydino&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;SVG + plain JS: star to heart &amp;amp; back (click)&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/thebabydino/pen/LOPpBM/&quot;&gt;SVG + plain JS: star to heart &amp;amp; back (click)&lt;/a&gt; by Ana Tudor (&lt;a href=&quot;https://codepen.io/thebabydino&quot;&gt;@thebabydino&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;这几乎是我们想要的结果——但还有一点小问题。对于角度这样的循环值，我们不希望在第二次点击时反方向转半个圆，而是继续朝同一个方向转半个圆。在第一次点击转半个圆之后，第二次点击时再加上半个圆，就可以得到一个完整的圆，这样我们就可以回到起始位置了。&lt;/p&gt;
&lt;p&gt;我们可以添加一个可变的连续性属性，只需要稍微修改一下更新函数和插值函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;(ini, rng, tfn, k, cnt) {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;typeof&lt;/span&gt; ini == 'number' ?&lt;span&gt; 
         Math.round(ini &lt;/span&gt;+ cnt*(m + dir*tfn(m + dir*k))*&lt;span&gt;rng) : 
         ini.map((c, i) &lt;/span&gt;=&amp;gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;(ini[i], rng[i], tfn, k, cnt))
};

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; update() {    
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    
  &lt;span&gt;for&lt;/span&gt;(let p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; O) {
    let c &lt;/span&gt;=&lt;span&gt; O[p];

    _SHAPE.setAttribute(p, c.afn(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(c.ini, c.rng, TFN[c.tfn], k, c.cnt ? dir : 1&lt;span&gt;)));
  }
    
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
};

(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; init() {    
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    
  O.transform &lt;/span&gt;=&lt;span&gt; {
    ini: &lt;/span&gt;-180&lt;span&gt;, 
    fin: &lt;/span&gt;0&lt;span&gt;, 
    afn: (ang) &lt;/span&gt;=&amp;gt; fnStr('rotate'&lt;span&gt;, ang),
    tfn: &lt;/span&gt;'bounce-ini-fin'&lt;span&gt;,
    cnt: &lt;/span&gt;1&lt;span&gt;
  };
    
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; same as before &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们得到了想要的结果：一个从金星过渡成红心的形状，每次按顺时针方向旋转半圈，从一个状态变化到另一个状态：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;446&quot; data-theme-id=&quot;25320&quot; data-slug-hash=&quot;LpqEmJ&quot; data-default-tab=&quot;result&quot; data-user=&quot;thebabydino&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;#CodeVember #15 - no library star or heart this?&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/thebabydino/pen/LpqEmJ/&quot;&gt;#CodeVember #15 - no library star or heart this?&lt;/a&gt; by Ana Tudor (&lt;a href=&quot;https://codepen.io/thebabydino&quot;&gt;@thebabydino&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Tue, 23 Jan 2018 02:27:00 +0000</pubDate>
<dc:creator>叙帝利</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nzbin/p/7811451.html</dc:identifier>
</item>
<item>
<title>大白话说Java泛型（二）：深入理解通配符 - 陈树义</title>
<link>http://www.cnblogs.com/chanshuyi/p/java_advanced_features_the_generic_part_two.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chanshuyi/p/java_advanced_features_the_generic_part_two.html</guid>
<description>[unable to retrieve full-text content]文章首发于 &quot;【博客园 陈树义】&quot; ，点击跳转到原文 &quot;《大白话说Java泛型（二）：深入理解通配符》&quot; 上篇文章 &quot;《大白话说Java泛型（一）：入门、原理、使用》&quot; ，我们讲了泛型的产生缘由以及其基本使用。但泛型还有更加复杂的应用，如： 上面的 extends 和 super 关键字其实就是泛型</description>
<pubDate>Tue, 23 Jan 2018 02:26:00 +0000</pubDate>
<dc:creator>陈树义</dc:creator>
<dc:identifier>http://www.cnblogs.com/chanshuyi/p/java_advanced_features_the_generic_part_two.html</dc:identifier>
</item>
<item>
<title>java线程间通信：一个小Demo完全搞懂 - WangLei_ClearHeart</title>
<link>http://www.cnblogs.com/leipDao/p/8310974.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leipDao/p/8310974.html</guid>
<description>&lt;p&gt;&lt;span&gt;版权声明：本文出自汪磊的博客，转载请务必注明出处。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Java线程系列文章只是自己知识的总结梳理，都是最基础的玩意，已经掌握熟练的可以绕过。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、从一个小Demo说起&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;上篇我们聊到了Java多线程的同步机制：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_1&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/leipDao/p/8295766.html&quot;&gt;Java多线程同步问题:一个小Demo完全搞懂。&lt;/a&gt;&lt;/span&gt;&lt;span&gt;这篇我们聊一下java多线程之间的通信机制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上一篇探讨java同步机制的时候我们举得例子输出log现象是:一段时间总是A线程输出而另一段时间总是B线程输出，有没有一种方式可以控制A,B线程交错输出呢？答案是当然可以了，这时候我们就要用到多线程的wait/notify机制了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;wait/notify机制&lt;/span&gt;就是当线程A执行到某一对象的wait()方法时，就会进入等待状态，此时线程A放弃持有的锁，其余线程可以竞争锁的持有权。当有其余线程调用notify()或者notifyAll()方法的时候就可能（当有多个线程的时候notify()方法只会唤醒处于等待状态线程中的一个）唤醒线程A，使其从wait状态醒来，继续向下执行业务逻辑。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来，我们通过一个小demo加以理解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、单生产者消费者模式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;demo很简单，就是开启两个线程，一个生产面包，另一个负责消费面包，并且生产一个就要消费一个，交替执行。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;首先看下BreadFactory类：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BreadFactory {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;生产面包个数计数器&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; count = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;线程的锁&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Object o = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; product() {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; (o) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                    o.wait();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                    e.printStackTrace();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 Thread.sleep(2000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                e.printStackTrace();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             System.out.println(Thread.currentThread().getName()+&quot;生产了第&quot; + (++count) + &quot;个面包&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            o.notify();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; consume() {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; (o) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;flag) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                    o.wait();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                    e.printStackTrace();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 Thread.sleep(2000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                e.printStackTrace();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             System.out.println(Thread.currentThread().getName()+&quot;消费第&quot; + count + &quot;个面包&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            o.notify();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;此类就是负责生产，消费面包，flag主要用于控制线程之间的切换。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来我们看下Producter，Consumer类：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Producter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; BreadFactory mBreadFactory;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Producter(BreadFactory mBreadFactory) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.mBreadFactory =&lt;span&gt; mBreadFactory;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            mBreadFactory.product();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }    
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;很简单，初始化的时候需要传递进来一个&lt;span&gt;BreadFactory实例对象，线程启动的时候调用&lt;span&gt;BreadFactory&lt;/span&gt;类中&lt;span&gt;product()&lt;/span&gt;方法不停生产面包。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Consumer类同理：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Consumer &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; BreadFactory mBreadFactory;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Consumer(BreadFactory mBreadFactory) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.mBreadFactory =&lt;span&gt; mBreadFactory;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            mBreadFactory.consume();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;最后看下main方法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;//
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         BreadFactory factory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BreadFactory();
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         Producter p1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Producter(factory);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;        p1.start();
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         Consumer c1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Consumer(factory);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;        c1.start();
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;没什么要多说的，就是初始化并启动线程，运行程序，输出如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Thread-&lt;span&gt;0生产了第1个面包
Thread&lt;/span&gt;-&lt;span&gt;1消费第1个面包
Thread&lt;/span&gt;-&lt;span&gt;0生产了第2个面包
Thread&lt;/span&gt;-&lt;span&gt;1消费第2个面包
Thread&lt;/span&gt;-&lt;span&gt;0生产了第3个面包
Thread&lt;/span&gt;-&lt;span&gt;1消费第3个面包
Thread&lt;/span&gt;-&lt;span&gt;0生产了第4个面包
Thread&lt;/span&gt;-1消费第4个面包&lt;br/&gt;。。。。。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、多生产者消费者模式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;似乎很顺利的就实现了啊，但是实际需求中怎么可能只有一个生产者，一个消费者，生产者，消费者是有多个的，我们试下多个生产者，消费者是什么现象，修改main中逻辑：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;//
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         BreadFactory factory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BreadFactory();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         Producter p1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Producter(factory);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        p1.start();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         Consumer c1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Consumer(factory);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        c1.start();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         Producter p2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Producter(factory);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        p2.start();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         Consumer c2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Consumer(factory);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        c2.start();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;我们就是只多添加了一个生产者和一个消费者，其余没任何变化。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;运行程序，输出信息如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;。。。
Thread&lt;/span&gt;-&lt;span&gt;2生产了第4个面包
Thread&lt;/span&gt;-&lt;span&gt;1消费第4个面包
Thread&lt;/span&gt;-&lt;span&gt;2生产了第5个面包
Thread&lt;/span&gt;-&lt;span&gt;1消费第5个面包
&lt;span&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span&gt;-2生产了第6个面包
Thread-1消费第6个面包
Thread-&lt;/span&gt;&lt;span&gt;&lt;span&gt;3消费第6个面包&lt;/span&gt;
Thread&lt;/span&gt;-&lt;span&gt;0生产了第7个面包
Thread&lt;/span&gt;-&lt;span&gt;3消费第7个面包
。。。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;咦？生产到第6个面包，竟然被消费了两次，这显然是不正常的，那是哪里出问题了呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;四、多生产者消费者模式问题产生原因分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;接下来，我们直接分析问题产生的原因，我们分析下BreadFactory中product()与consume()方法：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; product() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; (o) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                    o.wait();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;                    e.printStackTrace();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 Thread.sleep(100&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                e.printStackTrace();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             System.out.println(Thread.currentThread().getName()+&quot;生产了第&quot; + (++count) + &quot;个面包&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            o.notify();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; consume() {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; (o) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;flag) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                    o.wait();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                    e.printStackTrace();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 Thread.sleep(100&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                e.printStackTrace();
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             System.out.println(Thread.currentThread().getName()+&quot;消费第&quot; + count + &quot;个面包&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            o.notify();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;从线程启动顺序以及打印信息可以看出线程0,线程2负责生产面包，线程1，线程3负责消费面包。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;线程执行过程中，线程1消费掉第5个面包，此时flag置为false，执行notify()方法唤醒其余线程争取锁获取执行权。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;此时线程3获取线程执行权，执行consume（）业务逻辑flag此时为false，进入if(!flag)逻辑，执行wait()方法，此时线程3进入wait状态，&lt;span&gt;停留在25行代码处&lt;/span&gt;。释放锁资源，其余线程可以争取执行权。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;此时线程1获取执行权，和线程3一样，&lt;span&gt;最终停留在25行代码处&lt;/span&gt;。&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;释放锁资源，其余线程可以争取执行权。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;注意：此时线程1，线程3都停留在25行代码处，处于wait状态。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;接下来线程2获取执行权，执行生产业务，生产了第6个面包，然后&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;释放锁资源，其余线程可以争取执行权。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;然后线程1又获取执行权，上面说了线程1停留在25行代码处，现在获取执行权从25行代码处开始执行，消费掉第6个面包没问题，flag置为false。&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;然后&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;释放锁资源，其余线程可以争取执行权。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;此时线程3又获取执行权，上面分析时说了线程3处于25行代码处wait状态，现在&lt;span&gt;获取执行权从25行代码处开始执行&lt;/span&gt;，又消费了第6个面包，到这里面包6被消耗了两次。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;经过上面分析已经知道产生问题的原因了，线程获取执行权后直接从wait处开始继续执行，不在检查if条件是否成立，这里就是问题产生的原因了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;那怎么修改的呢？很简单了，将if判断改为while条件判断就可以了，这样线程获取执行权后还会再次检查while条件判断是否成立。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;运行程序打印Log如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;。。。
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; Thread-&lt;span&gt;1消费第19个面包
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; Thread-&lt;span&gt;0生产了第20个面包
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; Thread-&lt;span&gt;1消费第20个面包
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; Thread-2生产了第21个面包
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;看输出Log上面问题是解决了，生产一个面包只会消费一次，但是发现程序运行自己终止了，上面生产到第21个面包程序似乎不运行了没Log输出了，这是什么原因呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;五、&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;notify()&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;通知丢失问题以及notify()与&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;notifyAll()的区别&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;要想明白上述问题产生的原因我们就必须搞懂&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;notify()与&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;notifyAll()的区别。简单说就是&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;notify()只会唤醒同一监视器处于wait状态的一个线程(随机唤醒)，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;而notifyAll()会唤醒同一监视器处于wait状态的所有线程。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我们分析上面问题产生的原因：线程0，线程2负责生产面包，线程1，线程3负责消费面包，在程序运行过程存在如下情况:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;线程1,3处于consume()中的wait()处，线程0处于product()中wait()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;处，此时线程2生产完第21个面包执行notify()方法，通知处于同一监视器下处于wait状态线程，此时处于wait状态线程为线程1，线程3与线程0，按理说我们是想唤醒一个线程1,3中一个线程来消费刚刚生产的面包，但是程序可不知道啊，调用notify方法随机唤醒一个线程，碰巧此时唤醒的还是生产线程0，&lt;span&gt;这就是notify通知丢失问题&lt;/span&gt;，线程0执while判断又处于wait状态了，到这里就出现了控制台没有Log输出现象了，经过上面分析我们该明白问题出现的原因就是notify通知丢失问题，通知了一个我们不想通知的线程，那怎么解决呢？很简单了，程序中notify()方法改为notifyAll()就可以了，改为notifyAll()方法上述线程2通知的时候会一起唤醒线程0,1,3，也就是&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;唤醒同一监视器处于wait状态的所有线程，到这里运行程序就没有什么问题了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;六、notify()与notifyAll()性能问题&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;也许有些同学有疑问了，既然notify()方法会产生问题，那我就用notifyAll()不就完了，直接屏蔽掉&lt;span&gt;notify()方法。这样做当然是很Low的做法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假设有N个线程在wait状态下，调用notifyall会唤醒所有线程，然后这N个线程竞争同一个锁，最后只有一个线程能够得到锁，其它线程又回到wait状态。这意味每一次唤醒操作可能带来大量的竞争锁的请求。这对于频繁的唤醒操作而言性能上可能是一种灾难。如果说总是只有一个线程被唤醒后能够拿到锁，这种情况下使用notify的性能是要高于notifyall的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;七、JDK1.5中Condition通知机制&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;JDK1.5中Condition通知机制这里就不详细讲解了，&lt;span&gt;Condition中await(),signal(),signalAll()相当于传统线程通信机制中wait(),notify(),notifyAll()方法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我们修改BreadFactory类如下，其余类均不变：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BreadFactory {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 生产面包个数计数器&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; count = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 线程的锁&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Lock lock = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ReentrantLock();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Condition consumeCon =&lt;span&gt; lock.newCondition();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Condition productCon =&lt;span&gt; lock.newCondition();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; product() {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        lock.lock();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt;&lt;span&gt; (flag) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                    productCon.await();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                    e.printStackTrace();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 Thread.sleep(100&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                e.printStackTrace();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             System.out.println(Thread.currentThread().getName() + &quot;生产了第&quot;
&lt;span&gt;26&lt;/span&gt;                     + (++count) + &quot;个面包&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            consumeCon.signal();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;//
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            lock.unlock();
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; consume() {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        lock.lock();
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;flag) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                    consumeCon.await();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                 } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;                    e.printStackTrace();
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                 Thread.sleep(100&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;                e.printStackTrace();
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;             System.out.println(Thread.currentThread().getName() + &quot;消费第&quot; +&lt;span&gt; count
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                     + &quot;个面包&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;            productCon.signal();
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;             &lt;span&gt;//
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;            lock.unlock();
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;其强大之处就在于代码中6,7,15,28,40,53行代码处，我们并没有调用signalAll()方法，而是调用的signal()方法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这样我们就可以控制在生产完一个面包去唤醒消费的线程来消费面包，而不用连同生产线程一起唤醒，这就是其强大之处，这里就不详细分析了，不太熟悉的同学可自行搜索其余博客学习一下，比较简单，但是很基础很重要的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;关于线程间通信问题本篇到此就结束了，再说一次，多线程相关博客没什么新玩意，只是自己工作以来一次总结，虽然基础，枯燥，但是比较重要，希望本篇博客对您有用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 23 Jan 2018 02:02:00 +0000</pubDate>
<dc:creator>WangLei_ClearHeart</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leipDao/p/8310974.html</dc:identifier>
</item>
</channel>
</rss>