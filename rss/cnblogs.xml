<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>逻辑回归实例 - Jin_liang</title>
<link>http://www.cnblogs.com/jin-liang/p/9534801.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jin-liang/p/9534801.html</guid>
<description>&lt;p&gt;　　简介&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Logistic回归是一种机器学习分类算法，用于预测分类因变量的概率。 在逻辑回归中，因变量是一个二进制变量，包含编码为1（是，成功等）或0（不，失败等）的数据。 换句话说，逻辑回归模型预测P（Y = 1）是X的函数。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　该数据集来自&lt;a href=&quot;http://archive.ics.uci.edu/ml/index.php&quot; target=&quot;_blank&quot;&gt;UCI机器学习库&lt;/a&gt;，它与葡萄牙银行机构的直接营销活动（电话）有关。 分类目标是预测客户是否将购买定期存款（变量y）。 数据集可以从&lt;a href=&quot;https://raw.githubusercontent.com/madmashup/targeted-marketing-predictive-engine/master/banking.csv&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;下载或者&lt;a href=&quot;http://archive.ics.uci.edu/ml/machine-learning-databases/00222/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pandas as pd
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn &lt;span&gt;import&lt;/span&gt;&lt;span&gt; preprocessing
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib.pyplot as plt 
plt.rc(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;font&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, size=14&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.linear_model &lt;span&gt;import&lt;/span&gt;&lt;span&gt; LogisticRegression
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.cross_validation &lt;span&gt;import&lt;/span&gt;&lt;span&gt; train_test_split
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; seaborn as sns
sns.set(style&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;white&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
sns.set(style&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;whitegrid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, color_codes=True)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
data=pd.read_csv(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;F:/wd.jupyter/datasets/log_data/bank.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,delimiter=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
data&lt;/span&gt;=&lt;span&gt;data.dropna()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(data.shape)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(list(data.columns))

data.head()&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
(41188, 21)
['age', 'job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'day_of_week', 'duration', 'campaign', 'pdays', 'previous', 'poutcome', 'emp.var.rate', 'cons.price.idx', 'cons.conf.idx', 'euribor3m', 'nr.employed', 'y']
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　数据集提供银行客户的信息。 它包括41,188条记录和21个字段。&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;em&gt;&lt;span&gt;age (numeric)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;job : type of job (categorical: “admin”, “blue-collar”, “entrepreneur”, “housemaid”, “management”, “retired”, “self-employed”, “services”, “student”, “technician”, “unemployed”, “unknown”)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;marital : marital status (categorical: “divorced”, “married”, “single”, “unknown”)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;education (categorical: “basic.4y”, “basic.6y”, “basic.9y”, “high.school”, “illiterate”, “professional.course”, “university.degree”, “unknown”)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;default: has credit in default? (categorical: “no”, “yes”, “unknown”)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;housing: has housing loan? (categorical: “no”, “yes”, “unknown”)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;loan: has personal loan? (categorical: “no”, “yes”, “unknown”)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;contact: contact communication type (categorical: “cellular”, “telephone”)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;month: last contact month of year (categorical: “jan”, “feb”, “mar”, …, “nov”, “dec”)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;day_of_week: last contact day of the week (categorical: “mon”, “tue”, “wed”, “thu”, “fri”)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;duration: last contact duration, in seconds (numeric). Important note: this attribute highly affects the output target (e.g., if duration=0 then y=’no’). The duration is not known before a call is performed, also, after the end of the call, y is obviously known. Thus, this input should only be included for benchmark purposes and should be discarded if the intention is to have a realistic predictive model&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;previous: number of contacts performed before this campaign and for this client (numeric)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;poutcome: outcome of the previous marketing campaign (categorical: “failure”, “nonexistent”, “success”)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;emp.var.rate: employment variation rate — (numeric)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;cons.price.idx: consumer price index — (numeric)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;cons.conf.idx: consumer confidence index — (numeric)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;euribor3m: euribor 3 month rate — (numeric)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span&gt;nr.employed: number of employees — (numeric)&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;　　y - 客户是否订购了定期存款？ （二进制：“1”表示“是”，“0”表示“否”）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　数据集的教育列有许多类别，我们需要减少类别以获得更好的建模。 教育专栏有以下几类：&lt;/span&gt;&lt;span&gt;　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].unique()&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
array(['basic.4y', 'high.school', 'basic.6y', 'basic.9y',
       'professional.course', 'unknown', 'university.degree',
       'illiterate'], dtype=object)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　让我们将“basic.4y”，“basic.9y”和“basic.6y”组合在一起，称之为“basic”。&lt;/span&gt;&lt;span&gt;　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=np.where(data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;basic.4y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;basic&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=np.where(data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;basic.6y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;basic&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=np.where(data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;basic.9y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;basic&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].unique()&lt;/pre&gt;
&lt;pre&gt;
array(['basic', 'high.school', 'professional.course', 'unknown',
       'university.degree', 'illiterate'], dtype=object)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　如果不懂np.where函数，可以看&lt;a href=&quot;https://blog.csdn.net/oh5W6HinUg43JvRhhB/article/details/80796594&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　信息总览&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;data.info()

&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pandas.core.frame.DataFrame&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&lt;span&gt;
Int64Index: &lt;/span&gt;41188 entries, 0 to 41187&lt;span&gt;
Data columns (total &lt;/span&gt;21&lt;span&gt; columns):
age               &lt;/span&gt;41188 non-&lt;span&gt;null int64
job               &lt;/span&gt;41188 non-&lt;span&gt;null object
marital           &lt;/span&gt;41188 non-&lt;span&gt;null object
education         &lt;/span&gt;41188 non-&lt;span&gt;null object
default           &lt;/span&gt;41188 non-&lt;span&gt;null object
housing           &lt;/span&gt;41188 non-&lt;span&gt;null object
loan              &lt;/span&gt;41188 non-&lt;span&gt;null object
contact           &lt;/span&gt;41188 non-&lt;span&gt;null object
month             &lt;/span&gt;41188 non-&lt;span&gt;null object
day_of_week       &lt;/span&gt;41188 non-&lt;span&gt;null object
duration          &lt;/span&gt;41188 non-&lt;span&gt;null int64
campaign          &lt;/span&gt;41188 non-&lt;span&gt;null int64
pdays             &lt;/span&gt;41188 non-&lt;span&gt;null int64
previous          &lt;/span&gt;41188 non-&lt;span&gt;null int64
poutcome          &lt;/span&gt;41188 non-&lt;span&gt;null object
emp.var.rate      &lt;/span&gt;41188 non-&lt;span&gt;null float64
cons.price.idx    &lt;/span&gt;41188 non-&lt;span&gt;null float64
cons.conf.idx     &lt;/span&gt;41188 non-&lt;span&gt;null float64
euribor3m         &lt;/span&gt;41188 non-&lt;span&gt;null float64
nr.employed       &lt;/span&gt;41188 non-&lt;span&gt;null float64
y                 &lt;/span&gt;41188 non-&lt;span&gt;null object
dtypes: float64(&lt;/span&gt;5), int64(5), object(11&lt;span&gt;)
memory usage: &lt;/span&gt;6.9+ MB
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　可以看到，有5列float64数据，有5列int64数据，有11列object。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　把y变为数值型，并进行简单的统计。&lt;/span&gt;&lt;span&gt;　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
data.loc[data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=1&lt;span&gt;
data.loc[data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;no&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;0
data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].value_counts()

0    &lt;/span&gt;36548
1     4640&lt;span&gt;
Name: y, dtype: int64

sns.countplot(x&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,data=data,palette=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825204232064-1543090140.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　因变量中有36548个没有，4640个是。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　让我们深入了解这两个类别&lt;/span&gt;。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
data.groupby(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).mean()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825213846144-249044219.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　购买定期存款的客户的平均年龄高于未购买定期存款的客户的平均年龄。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　对于购买它的客户来说，pdays（自上次联系客户以来的日子）可以理解的更低。 pdays越低，最后一次通话的记忆越好，因此销售的机会就越大。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　令人惊讶的是，购买定期存款的客户的广告系列（compaign当前广告系列期间的联系人或通话次数）较低。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　我们可以计算其他分类变量（如教育和婚姻状况）的分类方法，以更详细地了解我们的数据。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
data.groupby(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).mean()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825213926492-1743264549.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
data.groupby(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;marital&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).mean() 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　工作和y的关系&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
pd.crosstab(data.job,data.y).plot(kind=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.title(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Purchase Frequency for Job Title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.xlabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Job&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.ylabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Frequency of Purchase&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;plt.savefig('purchase_fre_job')&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825214717876-539586728.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;购买存款的频率在很大程度上取决于职位。 因此，职称可以是结果变量的良好预测因子。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　婚姻状况与y的关系：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
table=&lt;span&gt;pd.crosstab(data.marital,data.y)
table.div(table.sum(axis&lt;/span&gt;=1).astype(float), axis=0).plot(kind=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, stacked=&lt;span&gt;True)
plt.title(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Stacked Bar Chart of Marital Status vs Purchase&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.xlabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Marital Status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.ylabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Proportion of Customers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825215731368-1017578837.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;婚姻状况似乎不是结果变量的强预测因子。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;教育情况与y的关系&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
table=&lt;span&gt;pd.crosstab(data.education,data.y)
table.div(table.sum(axis&lt;/span&gt;=1).astype(float),axis=0).plot(kind=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.title(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Stacked Bar Chart of Education Status vs Purchase&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.xlabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Education Status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.ylabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Proportion of Customers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825220528585-1316062876.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;教育似乎是良好预测指标。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;day_of_week与y的关系：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
pd.crosstab(data.day_of_week,data.y).plot(kind=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.title(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Purchase Frequency for Day of Week&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.xlabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Day of Week&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.ylabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Frequency of Purchase&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.savefig(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pur_dayofweek_bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825220806093-1763696035.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Day of week 或许不是一个良好的预测指标。&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;　　month与y的关系&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
pd.crosstab(data.month,data.y).plot(kind=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.title(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Purchase Frequency for Month&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.xlabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Month&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.ylabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Frequency of Purchase&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.savefig(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pur_fre_month_bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825221006569-1095500901.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Month是一个良好的预测指标。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　年龄的分布：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;data.age.hist()
plt.title(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Histogram of Age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.xlabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.ylabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Frequency&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825221113591-1912033134.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;该数据集中银行的大多数客户的年龄范围为30-40。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;poutcome与y的关系：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
pd.crosstab(data.poutcome,data.y).plot(kind=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.title(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Purchase Frequency for Poutcome&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.xlabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Poutcome&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.ylabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Frequency of Purchase&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825221231549-537528436.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;poutcome是一个良好的预测指标。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　这是只有两个值的变量，0和1。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　回顾我们数据集的信息，有11个object，其中y已经转化过来，另外有10个类别需要转化。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
cat_vars=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;job&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;marital&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;education&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;housing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contact&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;month&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;day_of_week&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;poutcome&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; var &lt;span&gt;in&lt;/span&gt;&lt;span&gt; cat_vars:
    cat_list&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+&lt;span&gt;var
    cat_list &lt;/span&gt;= pd.get_dummies(data[var], prefix=&lt;span&gt;var)
    data1&lt;/span&gt;=&lt;span&gt;data.join(cat_list)
    data&lt;/span&gt;=&lt;span&gt;data1
    

data_vars&lt;/span&gt;=&lt;span&gt;data.columns.values.tolist()
to_keep&lt;/span&gt;=[i &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; data_vars &lt;span&gt;if&lt;/span&gt; i &lt;span&gt;not&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; cat_vars]


data_final&lt;/span&gt;=&lt;span&gt;data[to_keep]
data_final.columns.values&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 最终的数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825222928281-802207703.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　分离特征与目标变量&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
data_final_vars=&lt;span&gt;data_final.columns.values.tolist()
y&lt;/span&gt;=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
X&lt;/span&gt;=[i &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; data_final_vars &lt;span&gt;if&lt;/span&gt; i &lt;span&gt;not&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; y]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　 &lt;span&gt;&lt;strong&gt;特征选择&lt;/strong&gt;　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　递归特征消除（&lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;http://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.RFE.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; data-href=&quot;http://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.RFE.html&quot;&gt;Recursive Feature Elimination&lt;/a&gt;，RFE）基于以下思想：&lt;/span&gt;&lt;span&gt; 首先，在初始特征集上训练估计器，并且通过coef_属性或通过feature_importances_属性获得每个特征的重要性。 然后，从当前的一组特征中删除最不重要的特征。 在修剪的集合上递归地重复该过程，直到最终到达所需数量的要选择的特征。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; sklearn &lt;span&gt;import&lt;/span&gt;&lt;span&gt; datasets
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.feature_selection &lt;span&gt;import&lt;/span&gt;&lt;span&gt; RFE
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.linear_model &lt;span&gt;import&lt;/span&gt;&lt;span&gt; LogisticRegression
logreg &lt;/span&gt;=&lt;span&gt; LogisticRegression()
rfe &lt;/span&gt;= RFE(logreg, 18&lt;span&gt;)
rfe &lt;/span&gt;=&lt;span&gt; rfe.fit(data_final[X], data_final[y] )
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(rfe.support_)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(rfe.ranking_)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825223931651-230159980.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据布尔值筛选我们想要的特征(&lt;a href=&quot;http://codewenda.com/%E6%A0%B9%E6%8D%AE%E5%B8%83%E5%B0%94%E5%80%BC%E5%88%97%E8%A1%A8%E8%BF%87%E6%BB%A4%E5%88%97%E8%A1%A8/&quot; target=&quot;_blank&quot;&gt;参考&lt;/a&gt;）：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; itertools &lt;span&gt;import&lt;/span&gt;&lt;span&gt; compress

cols&lt;/span&gt;=&lt;span&gt;list(compress(X,rfe.support_))
cols

或者：
cols&lt;/span&gt;= [i &lt;span&gt;for&lt;/span&gt; index,i &lt;span&gt;in&lt;/span&gt; list(enumerate(X)) &lt;span&gt;if&lt;/span&gt; rfe.support_[index] == True]
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; statsmodels.api as sm

X&lt;/span&gt;=&lt;span&gt;data_final[cols]
y&lt;/span&gt;=data_final[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]


logit_model&lt;/span&gt;=&lt;span&gt;sm.Logit(y,X)
logit_model.raise_on_perfect_prediction &lt;/span&gt;=&lt;span&gt; False
result&lt;/span&gt;=&lt;span&gt;logit_model.fit()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(result.summary().as_text)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825231044854-1845698612.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　大多数变量的p值小于0.05，因此，大多数变量对模型都很重要。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; sklearn.linear_model &lt;span&gt;import&lt;/span&gt;&lt;span&gt; LogisticRegression
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn &lt;span&gt;import&lt;/span&gt;&lt;span&gt; metrics

X_train, X_test, y_train, y_test &lt;/span&gt;= train_test_split(X, y, test_size=0.3, random_state=&lt;span&gt;0)
logreg &lt;/span&gt;=&lt;span&gt; LogisticRegression()
logreg.fit(X_train, y_train)
y_pred &lt;/span&gt;=&lt;span&gt; logreg.predict(X_test)
y_pred &lt;/span&gt;=&lt;span&gt; logreg.predict(X_test)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Accuracy of logistic regression classifier on test set: {:.2f}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(logreg.score(X_test, y_test))) 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　可以看到，准确率达到了0.9.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　交叉验证尝试避免过度拟合，同时仍然为每个观察数据集生成预测。 我们使用10折交叉验证来训练我们的Logistic回归模型。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; sklearn &lt;span&gt;import&lt;/span&gt;&lt;span&gt; model_selection
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.model_selection &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cross_val_score

kfold &lt;/span&gt;= model_selection.KFold(n_splits=10, random_state=7&lt;span&gt;)
modelCV &lt;/span&gt;=&lt;span&gt; LogisticRegression()
scoring &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;accuracy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
results &lt;/span&gt;= model_selection.cross_val_score(modelCV, X_train, y_train, cv=kfold, scoring=&lt;span&gt;scoring)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10-fold cross validation average accuracy: %.3f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (results.mean()))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825231827171-313423865.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;平均精度仍然非常接近Logistic回归模型的准确度; 因此，我们可以得出结论，我们的模型很好拟合了数据。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; sklearn.metrics &lt;span&gt;import&lt;/span&gt;&lt;span&gt; confusion_matrix

confusion_matrix &lt;/span&gt;=&lt;span&gt; confusion_matrix(y_test, y_pred)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(confusion_matrix)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825231937194-1175469904.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;结果告诉我们，我们有10848 + 2564个正确预测和1124 + 121个错误预测。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;精度是比率tp /（tp + fp），其中tp是真阳性的数量，fp是假阳性的数量。 精确度直观地是分类器如果是负的则不将样品标记为阳性的能力。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;召回是比率tp /（tp + fn）其中tp是真阳性的数量，fn是假阴性的数量。 召回直观地是分类器找到所有阳性样本的能力。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;F-beta分数可以解释为精确度和召回率的加权调和平均值，其中F-β分数在1处达到其最佳值，在0处达到最差分数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;F-beta评分对召回的重量超过精确度β因子。 beta = 1.0意味着召回和精确度同样重要。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;支持是y_test中每个类的出现次数。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; sklearn.metrics &lt;span&gt;import&lt;/span&gt;&lt;span&gt; classification_report

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(classification_report(y_test, y_pred))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825232517831-1025683588.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看出：在整个测试集中，88％的促销定期存款是客户喜欢的定期存款。 在整个测试集中，90％的客户首选定期存款。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　Macro F1 Score&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; sklearn.metrics &lt;span&gt;import&lt;/span&gt;&lt;span&gt; f1_score

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(f1_score(y_test, y_pred, average = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;macro&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
0.6217653450907061
&lt;/pre&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; sklearn.metrics &lt;span&gt;import&lt;/span&gt;&lt;span&gt; roc_auc_score
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.metrics &lt;span&gt;import&lt;/span&gt;&lt;span&gt; roc_curve

logit_roc_auc &lt;/span&gt;=&lt;span&gt; roc_auc_score(y_test, logreg.predict(X_test))
fpr, tpr, thresholds &lt;/span&gt;= roc_curve(y_test, logreg.predict_proba(X_test)[:,1&lt;span&gt;])
plt.figure()
plt.plot(fpr, tpr, label&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Logistic Regression (area = %0.2f)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; logit_roc_auc)
plt.plot([0, &lt;/span&gt;1], [0, 1],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r--&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.xlim([&lt;/span&gt;0.0, 1.0&lt;span&gt;])
plt.ylim([&lt;/span&gt;0.0, 1.05&lt;span&gt;])
plt.xlabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;False Positive Rate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.ylabel(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;True Positive Rate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.title(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Receiver operating characteristic&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
plt.legend(loc&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lower right&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;plt.savefig('Log_ROC')&lt;/span&gt;
plt.show()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345004/201808/1345004-20180825233342766-2073548060.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　ROC曲线是与二元分类器一起使用的另一种常用工具。 虚线表示纯随机分类器的ROC曲线; 一个好的分类器尽可能远离该线（朝左上角）。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 25 Aug 2018 15:53:00 +0000</pubDate>
<dc:creator>Jin_liang</dc:creator>
<og:description>简介 Logistic回归是一种机器学习分类算法，用于预测分类因变量的概率。 在逻辑回归中，因变量是一个二进制变量，包含编码为1（是，成功等）或0（不，失败等）的数据。 换句话说，逻辑回归模型预测P（</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jin-liang/p/9534801.html</dc:identifier>
</item>
<item>
<title>SpringBoot | 第二十五章：日志管理之自定义Appender - oKong_趔趄的猿</title>
<link>http://www.cnblogs.com/okong/p/springboot-twenty-five.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/okong/p/springboot-twenty-five.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;前面两章节我们介绍了一些日志框架的常见配置及使用实践。一般上，在开发过程中，像&lt;code&gt;log4j2&lt;/code&gt;、&lt;code&gt;logback&lt;/code&gt;日志框架都提供了很多&lt;code&gt;Appender&lt;/code&gt;，基本上可以满足大部分的业务需求了。但在一些特殊需求或者需要将日志进行集中管理(集群部署时，日志是分拆到不同服务器上的，不可能去每一台服务器上去下载文件的，也不便于日志检索)时，就需要自定义&lt;code&gt;Appender&lt;/code&gt;，将日志集中输出或者其他一些特殊需求。所以本章节就来简单介绍下关于&lt;code&gt;log4j2&lt;/code&gt;和&lt;code&gt;logback&lt;/code&gt;的自定义&lt;code&gt;Appender&lt;/code&gt;知识。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一点知识&quot;&gt;一点知识&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;编写自定义&lt;code&gt;Appender&lt;/code&gt;时，我们先来看看&lt;code&gt;log4j2&lt;/code&gt;和&lt;code&gt;logback&lt;/code&gt;自带了哪些&lt;code&gt;Appender&lt;/code&gt;，了解下是否可以满足我们的个性化需求，避免重复制造轮子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;log4j2自带appender&quot;&gt;log4j2自带Appender&lt;/h3&gt;
&lt;p&gt;先看一张&lt;a href=&quot;http://logging.apache.org/log4j/2.x/manual/appenders.html&quot; title=&quot;官网&quot;&gt;官网&lt;/a&gt;提供的&lt;code&gt;Appender&lt;/code&gt;说明：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://qiniu.xds123.cn/18-8-25/3966315.jpg&quot; alt=&quot;官方Appender&quot;/&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;20&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;AsyncAppender&lt;/td&gt;
&lt;td&gt;使用一个单独线程记录日志，实现异步处理日志事件。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;CassandraAppender&lt;/td&gt;
&lt;td&gt;将日志信息输出到一个Apache的Cassandra数据库&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;ConsoleAppender&lt;/td&gt;
&lt;td&gt;将日志信息输出到控制台&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;FailoverAppender&lt;/td&gt;
&lt;td&gt;包含其他appenders，按顺序尝试，直至成功或结尾&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;FileAppender&lt;/td&gt;
&lt;td&gt;一个OutputStreamAppender，将日志输出到文件&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;FlumeAppender&lt;/td&gt;
&lt;td&gt;将日志输出到Apache Flume系统&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;JDBCAppender&lt;/td&gt;
&lt;td&gt;将日志通过JDBC输出到关系型数据库&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;JMS Appender&lt;/td&gt;
&lt;td&gt;将日志输出到JMS（Java Message Service）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;JPAAppender&lt;/td&gt;
&lt;td&gt;将日志输出到JPA框架&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;HttpAppender&lt;/td&gt;
&lt;td&gt;通过HTTP输出日志&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;KafkaAppender&lt;/td&gt;
&lt;td&gt;将日志输出到Apache Kafka&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;MemoryMappedFileAppender&lt;/td&gt;
&lt;td&gt;将日志输出到一块文件关联的内存&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;OutputStreamAppender&lt;/td&gt;
&lt;td&gt;将日志输出到一个OutputStream&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;RandomAccessFileAppender&lt;/td&gt;
&lt;td&gt;性能比FileAppender高20%~200%的文件输出Appender&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;RewriteAppender&lt;/td&gt;
&lt;td&gt;允许对日志信息进行加工&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;RollingFileAppender&lt;/td&gt;
&lt;td&gt;按log文件最大长度限度生成新文件&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;RollingRandomAccessFA&lt;/td&gt;
&lt;td&gt;添加了缓存的RollingFileAppender&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;RoutingAppender&lt;/td&gt;
&lt;td&gt;将日志事件分类，按条件分配给子appender&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;SMTPAppender&lt;/td&gt;
&lt;td&gt;将日志输出到邮件&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SocketAppender&lt;/td&gt;
&lt;td&gt;将日志输出到一个Socket&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SyslogAppender&lt;/td&gt;
&lt;td&gt;是一个SocketAppender，将日志输出到远程系统日志&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;ZeroMQ/JeroMQ Appender&lt;/td&gt;
&lt;td&gt;使用JeroMQ库将日志输出到ZeroMQ终端&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;基本上已经覆盖了百分之九十的业务场景了。相关的详细说明或者配置大家自行搜索或者查看官网说明。&lt;br/&gt;官网地址：&lt;a href=&quot;http://logging.apache.org/log4j/2.x/manual/appenders.html&quot; class=&quot;uri&quot; title=&quot;http://logging.apache.org/log4j/2.x/manual/appenders.html&quot;&gt;http://logging.apache.org/log4j/2.x/manual/appenders.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;logback自带appender&quot;&gt;logback自带Appender&lt;/h3&gt;
&lt;p&gt;和&lt;code&gt;log4j2&lt;/code&gt;一样，自带的都差不多了。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;8.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;ConsoleAppender&lt;/td&gt;
&lt;td&gt;将日志输出到控制台&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;FileAppender&lt;/td&gt;
&lt;td&gt;将日志输出到文件&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;RollingFileAppender&lt;/td&gt;
&lt;td&gt;滚动文件生成，按条件生成不同文件，配合TriggeringPolicy使用&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SocketAppender&lt;/td&gt;
&lt;td&gt;输出日志到远程实例中，明文传输&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SSLSocketAppender&lt;/td&gt;
&lt;td&gt;输出日志到远程实例中，密文传输&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;SMTPAppender&lt;/td&gt;
&lt;td&gt;将日志输出到邮件&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;DBAppender&lt;/td&gt;
&lt;td&gt;日志事件插入数据库中，需要提前创建表&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SyslogAppender&lt;/td&gt;
&lt;td&gt;是一个SocketAppender，将日志输出到远程系统日志&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;SiftingAppender&lt;/td&gt;
&lt;td&gt;可基于任何给定的实时属性分开（或者筛选）日志，如基于用户会话分开日志事件&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;AmqpAppender&lt;/td&gt;
&lt;td&gt;将日志输出到MQ服务中&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;具体可查看：&lt;a href=&quot;https://blog.csdn.net/tianyaleixiaowu/article/details/73327752&quot; class=&quot;uri&quot; title=&quot;https://blog.csdn.net/tianyaleixiaowu/article/details/73327752&quot;&gt;https://blog.csdn.net/tianyaleixiaowu/article/details/73327752&lt;/a&gt; 很详细！&lt;/p&gt;
&lt;p&gt;或者查看官网：&lt;a href=&quot;https://logback.qos.ch/manual/appenders.html&quot; class=&quot;uri&quot; title=&quot;https://logback.qos.ch/manual/appenders.html&quot;&gt;https://logback.qos.ch/manual/appenders.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;自定义appender&quot;&gt;自定义Appender&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;自定义&lt;code&gt;Appender&lt;/code&gt;时，可以按实现的功能，适当的继承(&lt;code&gt;log4j2&lt;/code&gt;的&lt;code&gt;appender&lt;/code&gt;类基本上被设置成了&lt;code&gt;final&lt;/code&gt;无法继承)或者参考一些已有的功能，当然了也可以直接继承其基类接口的。以下就简单的示例下，没有实现特定的功能，⊙﹏⊙‖∣&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;log4j2自定义appender&quot;&gt;log4j2自定义Appender&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;按官网的扩展说明，我们来简单实现一个appender。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://qiniu.xds123.cn/18-8-25/17214462.jpg&quot; alt=&quot;extend appender&quot;/&gt;&lt;/p&gt;
&lt;p&gt;官网地址：&lt;a href=&quot;http://logging.apache.org/log4j/2.x/manual/extending.html#Appenders&quot; class=&quot;uri&quot; title=&quot;http://logging.apache.org/log4j/2.x/manual/extending.html#Appenders&quot;&gt;http://logging.apache.org/log4j/2.x/manual/extending.html#Appenders&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;0.编写自定义appender类，继承&lt;code&gt;AbstractAppender&lt;/code&gt;抽象实现类：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MyLog4j2Appender.java&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * 自定义log4j2输出源，简单的输出到控制台
 * @author oKong
 *
 */
//这里的 MyLog4j2 对应就是 xml中，
/**
 * 
 *  &amp;lt;appenders&amp;gt;
 *     &amp;lt;MyLog4j2 name=&quot;customAppender&quot; printString=&quot;一枚趔趄的猿&quot;&amp;gt;
 *     &amp;lt;/MyLog4j2&amp;gt;
 *  &amp;lt;/appenders&amp;gt;
 *
 */
@Plugin(name = &quot;MyLog4j2&quot;, category = &quot;Core&quot;, elementType = &quot;appender&quot;, printObject = true)
public class MyLog4j2Appender extends AbstractAppender {

    String printString;
   /**  
     *构造函数 可自定义参数 这里直接传入一个常量并输出
     * 
    */ 
    protected MyLog4j2Appender(String name, Filter filter, Layout&amp;lt;? extends Serializable&amp;gt; layout,String printString) {
        super(name, filter, layout);
        this.printString = printString;
    }

    @Override
    public void append(LogEvent event) {
         if (event != null &amp;amp;&amp;amp; event.getMessage() != null) {
             // 此处自定义实现输出             
             // 获取输出值：event.getMessage().toString()
             // System.out.print(event.getMessage().toString());
             // 格式化输出
             System.out.print(printString + &quot;：&quot; + getLayout().toSerializable(event));
          }
        
    }
    
    /**  接收配置文件中的参数 
     * 
     * @PluginAttribute 字面意思都知道，是xml节点的attribute值，如&amp;lt;oKong name=&quot;oKong&quot;&amp;gt;&amp;lt;/oKong&amp;gt; 这里的name 就是 attribute
     * @PluginElement：表示xml子节点的元素，
     * 如
     *     &amp;lt;oKong name=&quot;oKong&quot;&amp;gt;
     *         &amp;lt;PatternLayout pattern=&quot;[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n&quot;/&amp;gt;
     *     &amp;lt;/oKong&amp;gt;
     *   其中，PatternLayout就是 的 Layout，其实就是{@link Layout}的实现类。
     */ 
    @PluginFactory
    public static MyLog4j2Appender createAppender(
            @PluginAttribute(&quot;name&quot;) String name,
            @PluginElement(&quot;Filter&quot;) final Filter filter, 
            @PluginElement(&quot;Layout&quot;) Layout&amp;lt;? extends Serializable&amp;gt; layout,
            @PluginAttribute(&quot;printString&quot;) String printString) {
        
        if (name == null) {
            LOGGER.error(&quot;no name defined in conf.&quot;); 
            return null; 
        } 
        //默认使用 PatternLayout
        if (layout == null) { 
            layout = PatternLayout.createDefaultLayout(); 
        } 
        
        return new MyLog4j2Appender(name, filter, layout, printString);
    }
    
    @Override
    public void start() {
        System.out.println(&quot;log4j2-start方法被调用&quot;);
        super.start();
    }
    
    @Override
    public void stop() {
        System.out.println(&quot;log4j2-stop方法被调用&quot;);
        super.stop();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;简单说明下，相关注意点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;@Plugin&lt;/code&gt;注解：这个注解，是为了在之后配置&lt;code&gt;log4j2-spring.xml&lt;/code&gt;时，指定的Appender Tag。&lt;/li&gt;
&lt;li&gt;构造函数：除了使用父类的以外，也可以增加一些自己的配置。&lt;/li&gt;
&lt;li&gt;重写&lt;code&gt;append()&lt;/code&gt;方法：这里面需要实现具体的逻辑，日志的去向。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createAppender()&lt;/code&gt;方法：主要是接收&lt;code&gt;log4j2-spring.xml&lt;/code&gt;中的配置项。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;1.使用自定义的appender。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;log4j2-spring.xml&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
 &amp;lt;configuration status=&quot;WARN&quot; monitorInterval=&quot;30&quot; packages=&quot;cn.lqdev.learning&quot;&amp;gt;
     &amp;lt;!--定义appenders--&amp;gt;
     &amp;lt;appenders&amp;gt;
         &amp;lt;MyLog4j2 name=&quot;oKong&quot; printString=&quot;一枚趔趄的猿(log4j2)&quot;&amp;gt;
            &amp;lt;!--输出日志的格式--&amp;gt;
             &amp;lt;PatternLayout pattern=&quot;[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n&quot;/&amp;gt;
         &amp;lt;/MyLog4j2&amp;gt;
     &amp;lt;/appenders&amp;gt;
     &amp;lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&amp;gt;
     &amp;lt;loggers&amp;gt;
         &amp;lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--&amp;gt;
         &amp;lt;logger name=&quot;org.springframework&quot; level=&quot;INFO&quot;&amp;gt;&amp;lt;/logger&amp;gt;
         &amp;lt;logger name=&quot;org.mybatis&quot; level=&quot;INFO&quot;&amp;gt;&amp;lt;/logger&amp;gt;
         &amp;lt;!-- 自定义包下设置为INFO,则可以看见输出的日志不包含debug输出了 --&amp;gt;
         &amp;lt;logger name=&quot;cn.lqdev.learning&quot; level=&quot;INFO&quot;/&amp;gt;
         &amp;lt;root level=&quot;all&quot;&amp;gt;
             &amp;lt;appender-ref ref=&quot;oKong&quot;/&amp;gt;
         &amp;lt;/root&amp;gt;
     &amp;lt;/loggers&amp;gt;
 &amp;lt;/configuration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;这里需要注意，需要在&lt;code&gt;configuration&lt;/code&gt;中，加入属性&lt;code&gt;packages&lt;/code&gt;为自定类所在包名&lt;code&gt;cn.lqdev.learning&lt;/code&gt;才会被扫描生效，不知道是否还有其他方法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2.启动后，就可以看见相关输出了。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;...部分省略...
一枚趔趄的猿(log4j2)：[14:47:43:751] [INFO] - org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:180) - Using a shared selector for servlet write/read
一枚趔趄的猿(log4j2)：[14:47:43:761] [INFO] - org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:216) - Tomcat started on port(s): 8080 (http)
一枚趔趄的猿(log4j2)：[14:47:43:764] [INFO] - org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:57) - Started Chapter25Application in 2.03 seconds (JVM running for 3.164)
一枚趔趄的猿(log4j2)：[14:47:43:764] [INFO] - cn.lqdev.learning.springboot.chapter25.Chapter25Application.main(Chapter25Application.java:14) - Chapter25启动!&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不知道如何整合&lt;code&gt;log4j2&lt;/code&gt;的，可以查看：&lt;a href=&quot;http://blog.lqdev.cn/2018/08/22/springboot/chapter-twenty-three/&quot; title=&quot;《第二十三章：日志管理之整合篇》&quot;&gt;《第二十三章：日志管理之整合篇》&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;logback自定义appender&quot;&gt;logback自定义Appender&lt;/h3&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;code&gt;logback&lt;/code&gt;的自定义，也是类似的，都是基于一个基类&lt;code&gt;appender&lt;/code&gt;来实现。本身&lt;code&gt;logback&lt;/code&gt;提供了&lt;code&gt;AppenderBase&lt;/code&gt;和&lt;code&gt;UnsynchronizedAppenderBase&lt;/code&gt;两个抽象类(同步和非同步)，所以我们自定义时，只需要看实际业务继承其中的一个即可。先看下其类继承结构：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://qiniu.xds123.cn/18-8-25/97582640.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;0.编写自定义&lt;code&gt;appender&lt;/code&gt;类。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MyLogbackAppender.java&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Getter
@Setter
public class MyLogbackAppender extends UnsynchronizedAppenderBase&amp;lt;ILoggingEvent&amp;gt;{

    Layout&amp;lt;ILoggingEvent&amp;gt; layout;
    
    //自定义配置 
    String printString;

    
    
    @Override
    public void start(){
        //这里可以做些初始化判断 比如layout不能为null ,
        if(layout == null) {
            addWarn(&quot;Layout was not defined&quot;);
        }
        //或者写入数据库 或者redis时 初始化连接等等
         super.start();
    }
    

    @Override
    public void stop()
    {
       //释放相关资源，如数据库连接，redis线程池等等
        System.out.println(&quot;logback-stop方法被调用&quot;);
        if(!isStarted()) {
            return;
        }
        super.stop();
    }
    
    @Override
    public void append(ILoggingEvent event) {
        if (event == null || !isStarted()){
            return;
        }
             // 此处自定义实现输出             
             // 获取输出值：event.getFormattedMessage()
             // System.out.print(event.getFormattedMessage());
             // 格式化输出        
        System.out.print(printString + &quot;：&quot; + layout.doLayout(event));
          
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也简单说明下，相关注意点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;start&lt;/code&gt;方法：初始时调用。故在编写如数据库入库，连接缓存或者mq时，可以在这个方法里面进行初始化操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stop&lt;/code&gt;：当停止时，调用。可做些资源释放操作。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;1.使用自定义appender:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;logback-spring.xml&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;configuration debug=&quot;false&quot;&amp;gt;
    &amp;lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 --&amp;gt;
    &amp;lt;property name=&quot;LOG_HOME&quot; value=&quot;/home&quot; /&amp;gt;
    &amp;lt;!-- 控制台输出 --&amp;gt;
    &amp;lt;appender name=&quot;MyLogback&quot;
        class=&quot;cn.lqdev.learning.springboot.chapter25.config.MyLogbackAppender&quot;&amp;gt;
        &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&amp;gt;
            &amp;lt;!-- 日志收集最低日志级别 --&amp;gt;
            &amp;lt;level&amp;gt;INFO&amp;lt;/level&amp;gt;
        &amp;lt;/filter&amp;gt;
        &amp;lt;layout
            class=&quot;ch.qos.logback.classic.PatternLayout&quot;&amp;gt;
            &amp;lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 --&amp;gt;
            &amp;lt;pattern&amp;gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n&amp;lt;/pattern&amp;gt;
        &amp;lt;/layout&amp;gt;
        &amp;lt;!-- 自定义参数 --&amp;gt;
        &amp;lt;printString&amp;gt;一枚趔趄的猿(logback)&amp;lt;/printString&amp;gt;
    &amp;lt;/appender&amp;gt;

    &amp;lt;!-- 自定义包下设置为INFO,则可以看见输出的日志不包含debug输出了 --&amp;gt;
    &amp;lt;logger name=&quot;cn.lqdev.learning&quot; level=&quot;INFO&quot; /&amp;gt;

    &amp;lt;!-- 日志输出级别 --&amp;gt;
    &amp;lt;root level=&quot;INFO&quot;&amp;gt;
        &amp;lt;appender-ref ref=&quot;MyLogback&quot; /&amp;gt;
    &amp;lt;/root&amp;gt;
    
&amp;lt;/configuration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.应用启动，查看控制台输出，效果是一样的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;...部分省略...
一枚趔趄的猿(logback)：2018-08-25 15:01:57.486 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler [&quot;http-nio-8080&quot;]
一枚趔趄的猿(logback)：2018-08-25 15:01:57.497 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
一枚趔趄的猿(logback)：2018-08-25 15:01:57.520 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
一枚趔趄的猿(logback)：2018-08-25 15:01:57.523 [main] INFO  c.l.l.springboot.chapter25.Chapter25Application - Started Chapter25Application in 54.349 seconds (JVM running for 55.377)
一枚趔趄的猿(logback)：2018-08-25 15:01:57.524 [main] INFO  c.l.l.springboot.chapter25.Chapter25Application - Chapter25启动!&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;关于shutdownhook&quot;&gt;关于ShutdownHook&lt;/h3&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;当你运行了以上的自定义&lt;code&gt;appender&lt;/code&gt;后，停止应用时，你会发现定义的&lt;code&gt;stop&lt;/code&gt;方法并没有被执行。还需要配置一个&lt;code&gt;ShutdownHook&lt;/code&gt;系统钩子，使得在&lt;code&gt;jvm&lt;/code&gt;在退出时之前会调用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一点知识-1&quot;&gt;一点知识&lt;/h4&gt;
&lt;p&gt;我们知道，在&lt;code&gt;java&lt;/code&gt;中，注册一个关闭钩子是很简单的，使用&lt;code&gt;Runtime&lt;/code&gt;类即可，具体用法如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {

            @Override
            public void run() {
                // 执行资源释放操作

            }
        }));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而在&lt;code&gt;SpringBoot&lt;/code&gt;中，只需要配置&lt;code&gt;logging.register-shutdown-hook&lt;/code&gt;为&lt;code&gt;true&lt;/code&gt;即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;logging.register-shutdown-hook=true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于&lt;code&gt;logback&lt;/code&gt;而言，也可以在&lt;code&gt;logback-spring.xml&lt;/code&gt;中配置：&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;shutdownHook class=&quot;ch.qos.logback.core.hook.DelayingShutdownHook&quot;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也是可以的。再或者在启动类手动注册这个&lt;code&gt;DelayingShutdownHook&lt;/code&gt;也是可以的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里有个坑，&lt;code&gt;log4j2&lt;/code&gt;而言，配置失效了。谷歌了一圈也没有发现解决方法，网上的方案试了一遍都是不行。。很尴尬。要是使用&lt;code&gt;log4j2&lt;/code&gt;的话，可以取巧下，在&lt;code&gt;start()&lt;/code&gt;方法里面，注册钩子之后调用&lt;code&gt;stop&lt;/code&gt;方法。希望有知道的大神分享下如何解决！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/zhoucheng05_13/article/details/78494458&quot; class=&quot;uri&quot; title=&quot;https://blog.csdn.net/zhoucheng05_13/article/details/78494458&quot;&gt;https://blog.csdn.net/zhoucheng05_13/article/details/78494458&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://logging.apache.org/log4j/2.x/manual/appenders.html&quot; class=&quot;uri&quot; title=&quot;http://logging.apache.org/log4j/2.x/manual/appenders.html&quot;&gt;http://logging.apache.org/log4j/2.x/manual/appenders.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://logging.apache.org/log4j/2.x/manual/extending.html#Appenders&quot; class=&quot;uri&quot; title=&quot;http://logging.apache.org/log4j/2.x/manual/extending.html#Appenders&quot;&gt;http://logging.apache.org/log4j/2.x/manual/extending.html#Appenders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://logback.qos.ch/manual/appenders.html&quot; class=&quot;uri&quot; title=&quot;https://logback.qos.ch/manual/appenders.html&quot;&gt;https://logback.qos.ch/manual/appenders.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/hupoling/article/details/75353854&quot; class=&quot;uri&quot; title=&quot;https://blog.csdn.net/hupoling/article/details/75353854&quot;&gt;https://blog.csdn.net/hupoling/article/details/75353854&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;本文主要是简单介绍了&lt;code&gt;log4j2&lt;/code&gt;和&lt;code&gt;logback&lt;/code&gt;自定义&lt;code&gt;appender&lt;/code&gt;相关知识。实现起来是相对简单的，&lt;strong&gt;需要注意当涉及需要关闭释放相关资源时，需要确认下关闭前是否有被调用，不然可能造成连接未关闭等行为，避免不必要的问题。&lt;/strong&gt;关于最后使用&lt;code&gt;log4j2&lt;/code&gt;关闭钩子未生效问题，由于现在都默认使用&lt;code&gt;logback&lt;/code&gt;了，这个问题就不深究了，还望有知道的同学分享下解决方案！谢谢！同时由于没有对两个框架有过多的深入了解，只能点到为止了，若文中有误，还望指出！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;目前互联网上很多大佬都有&lt;code&gt;SpringBoot&lt;/code&gt;系列教程，如有雷同，请多多包涵了。&lt;strong&gt;原创不易，码字不易&lt;/strong&gt;，还希望大家多多支持。若文中有所错误之处，还望提出，谢谢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;老生常谈&quot;&gt;老生常谈&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;个人QQ：&lt;code&gt;499452441&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;公众号：&lt;code&gt;lqdevOps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://qiniu.xds123.cn/default/wxgzh8cm.jpg&quot; alt=&quot;公众号&quot;/&gt;&lt;/p&gt;
&lt;p&gt;个人博客：&lt;a href=&quot;http://blog.lqdev.cn/&quot; class=&quot;uri&quot; title=&quot;http://blog.lqdev.cn&quot;&gt;http://blog.lqdev.cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完整示例：&lt;a href=&quot;https://github.com/xie19900123/spring-boot-learning/tree/master/chapter-25&quot; class=&quot;uri&quot; title=&quot;https://github.com/xie19900123/spring-boot-learning/tree/master/chapter-25&quot;&gt;https://github.com/xie19900123/spring-boot-learning/tree/master/chapter-25&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://blog.lqdev.cn/2018/08/25/springboot/chapter-twenty-five/&quot; class=&quot;uri&quot;&gt;http://blog.lqdev.cn/2018/08/25/springboot/chapter-twenty-five/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 25 Aug 2018 15:53:00 +0000</pubDate>
<dc:creator>oKong_趔趄的猿</dc:creator>
<og:description>前言 前面两章节我们介绍了一些日志框架的常见配置及使用实践。一般上，在开发过程中，像 、`logback Appender Appender log4j2 logback Appender`知识。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/okong/p/springboot-twenty-five.html</dc:identifier>
</item>
<item>
<title>postgresql行转列 - 吃饭睡觉打逗逗</title>
<link>http://www.cnblogs.com/lurenjia1994/p/9535899.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lurenjia1994/p/9535899.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1046062/201808/1046062-20180825235958854-1973325843.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;问：怎么&lt;strong&gt;&lt;span&gt;分页&lt;/span&gt;&lt;/strong&gt;&amp;amp;&amp;amp;&lt;strong&gt;&lt;span&gt;按条件&lt;/span&gt;&lt;/strong&gt;&amp;amp;&amp;amp;&lt;strong&gt;&lt;span&gt;按顺序&lt;/span&gt;&lt;/strong&gt;&amp;amp;&amp;amp;&lt;span&gt;&lt;strong&gt;姓名&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;不重复&lt;/strong&gt;&lt;/span&gt;查出数据？&lt;/p&gt;
&lt;p&gt;答：其实就是行转列，那么，postgresql怎么进行转列呢，百度了下，大概有三种写法&lt;/p&gt;

&lt;h2&gt;写法1 &lt;/h2&gt;
&lt;h4&gt;group by + sum + case when&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt;&lt;span&gt; name,
sum(&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; when zbfm=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; then value &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; end) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; 年龄,
sum(&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; when zbfm=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;身高&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; then value &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; end) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; 身高,
sum(&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; when zbfm=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;体重&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; then value &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; end) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; 体重
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; test group by name
having name like &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; and length(name)=&lt;span&gt;4&lt;/span&gt; order by 年龄 desc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1046062/201808/1046062-20180825233711367-654981725.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1046062/201808/1046062-20180825232833796-1765452126.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;写法2&lt;/h2&gt;
&lt;h4&gt;用postgresql的crosstab交叉函数&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lurenjia1994/p/9535663.html&quot; target=&quot;_blank&quot;&gt;crosstab(unknown, unknown) does not exist&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt;&lt;span&gt;
crosstab(&lt;br/&gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;select name,zbfm,value from test where name like &lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;%1&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt; and length(name)=4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,$$values(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;身高&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;体重&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)$$)
&lt;/span&gt;&lt;span&gt;as&lt;/span&gt; score(name text, 年龄 &lt;span&gt;int&lt;/span&gt;, 身高 &lt;span&gt;int&lt;/span&gt;, 体重 &lt;span&gt;int&lt;/span&gt;&lt;span&gt;)
order by 年龄 desc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1046062/201808/1046062-20180825233903502-1086057566.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1046062/201808/1046062-20180825233124084-718406010.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;写法3&lt;/h2&gt;
&lt;h4&gt;group by + string_agg + split_part(分组，行转列，字符切割)&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt;&lt;span&gt; name, 
split_part(split_part(temp,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;),&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; 年龄,
split_part(split_part(temp,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;),&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; 身高,
split_part(split_part(temp,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;),&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; 体重
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;(
&lt;/span&gt;&lt;span&gt;select&lt;/span&gt; name, string_agg(zbfm||&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;||value,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; temp &lt;span&gt;from&lt;/span&gt;&lt;span&gt; test
group by name 
having name like &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; and length(name)=&lt;span&gt;4&lt;/span&gt;&lt;span&gt;
) &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; t order by 年龄 desc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1046062/201808/1046062-20180825234240202-1361501403.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1046062/201808/1046062-20180825234118721-1133248578.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;group by + string_agg&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; name, string_agg(zbfm||&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;||value,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt;&lt;span&gt; test
group by name 
having name like &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; and length(name)=&lt;span&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1046062/201808/1046062-20180825234344420-1654565508.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt; &lt;/h2&gt;
&lt;h2&gt;其他&lt;/h2&gt;
&lt;h4&gt;建表语句&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE TABLE test
(
  id serial NOT NULL,
  value integer,
  name character varying,
  zbfm character varying,
  CONSTRAINT pkey PRIMARY KEY (id)
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;插入数据(python)&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; psycopg2
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; random &lt;span&gt;import&lt;/span&gt;&lt;span&gt; random
conn &lt;/span&gt;= psycopg2.connect(database=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postgres&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, user=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postgres&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, password=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yess5678&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, host=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;119.29.218.235&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, port=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5432&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
cur &lt;/span&gt;=&lt;span&gt; conn.cursor()

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; insertData():
    names &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;路人甲&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;王尼玛&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;唐马儒&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    zbfms &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;身高&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;体重&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(100&lt;span&gt;):
        sqlstr &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;insert into test(name, zbfm, value) values&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; range(100&lt;span&gt;):
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; name &lt;span&gt;in&lt;/span&gt;&lt;span&gt; names:
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; zbfm &lt;span&gt;in&lt;/span&gt;&lt;span&gt; zbfms:
                    sqlstr &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;('%s','%s',%d),&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%(name+str(i*100+j),zbfm,int(100*&lt;span&gt;random()))
        cur.execute(sqlstr[:&lt;/span&gt;-1&lt;span&gt;])
        conn.commit()
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(i)

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    insertData()
    selectData()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;p class=&quot;title-article&quot;&gt;&lt;a href=&quot;https://blog.csdn.net/a258831020/article/details/48446213&quot; target=&quot;_blank&quot;&gt;PostgreSQL 实现交叉表（行列转换）的五种方法&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 25 Aug 2018 15:51:00 +0000</pubDate>
<dc:creator>吃饭睡觉打逗逗</dc:creator>
<og:description>问：怎么分页&amp;&amp;按条件&amp;&amp;按顺序&amp;&amp;姓名不重复查出数据？ 答：其实就是行转列，那么，postgresql怎么进行转列呢，百度了下，大概有三种写法 写法1</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lurenjia1994/p/9535899.html</dc:identifier>
</item>
<item>
<title>.net 信息采集ajax数据 - 泽少军</title>
<link>http://www.cnblogs.com/zeshao/p/9534861.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zeshao/p/9534861.html</guid>
<description>&lt;p&gt;.net 信息采集ajax数据&lt;/p&gt;
&lt;p&gt;关于.net信息采集的资料很多，但是如果采集的网站是ajax异步加载数据的模式，又如何采集呢？今天就把自己做信息采集时，所遇到的一些问题和心得跟大家分享一下。&lt;/p&gt;
&lt;p&gt;采集网站的几种方式与利弊：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;HttpWebRequest&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;利用系统自带HttpWebRequest对象，采集网站内容，优点是采集效率快，但是如果网站是ajax异步加载数据的方式，是采集不到网页内容的，并且网站没有采用ajax的方式，在网页中用到了javascript，比如说：网页内容用document.write的方式输出到网页中的，这种情况也是获取不到内容的。其次还需要知道对方网站的编码格式（就是网页头部中&amp;lt;meta charset=&quot;utf-8&quot;/&amp;gt;），如果采集时网站编码格式错误的话，会导致采集的内容是乱码。但这个是小问题，我自己当时查阅资料时找到了别人封装好的方法，但是很惭愧因为不知道作者是谁了，我会把相应的代码下载链接提供给大家。以上的问题是因为js和ajax是需要浏览器去解析的，所以导致了获取不到网页内容。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Help.HttpHelp.HttpRequest(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;采集的网址&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1bl4SpmdiS4opytdR5GrZIQ&quot; target=&quot;_blank&quot;&gt;源码下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;          2.浏览器控件&lt;/p&gt;
&lt;p&gt;因为当时我开发的时候，用的是cs模式，相信大家同样也会用cs的模式去开发这个功能。既然是cs模式（不考虑美观）的情况下肯定是WinForm，WinForm中有自带的浏览器控件，这个是不好用的，我当时用的是Geckofx，基于火狐内核的一款浏览器控件，但是这方面的资料很少，当时遇到了一些问题都找不到解决方法，但后来还是都解决了。用了该控件就可以获取到ajax异步加载的数据，在网页加载完成之后，延迟几秒钟获取网页内容，就可以很方便的获取到网页内容，缺点是相对第一种方案来说的话会慢一些，因为它是一个浏览器控件，需要渲染html和解析js等操作。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1tGG9799_a0qPg1kGdxdPwQ&quot; target=&quot;_blank&quot;&gt;Geckofx下载&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
GeckoWebBrowser webBrowser = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Form1_Load(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; xulrunnerPath = AppDomain.CurrentDomain.BaseDirectory + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            Xpcom.Initialize(xulrunnerPath);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置为3阻止所有的弹出窗口，&lt;/span&gt;
            GeckoPreferences.User[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;privacy.popups.disable_from_plugins&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;禁止加载图片&lt;/span&gt;
            GeckoPreferences.User[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;permissions.default.image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;

            webBrowser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GeckoWebBrowser();
            webBrowser.Navigate(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            webBrowser.DocumentCompleted &lt;/span&gt;+=&lt;span&gt; DocumentCompleted;
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; DocumentCompleted(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, Gecko.Events.GeckoDocumentCompletedEventArgs e)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; time = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; System.Windows.Forms.Timer();
            time.Interval &lt;/span&gt;= &lt;span&gt;2000&lt;/span&gt;&lt;span&gt;;
            time.Tick &lt;/span&gt;+= (a, b) =&amp;gt;&lt;span&gt;
            {
                time.Stop();
                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; html = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;页加载完成&lt;/span&gt;
                GeckoHtmlElement element = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; geckoDomElement =&lt;span&gt; webBrowser.Document.DocumentElement;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (geckoDomElement != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; geckoDomElement &lt;span&gt;is&lt;/span&gt;&lt;span&gt; GeckoHtmlElement)
                {
                    element &lt;/span&gt;=&lt;span&gt; (GeckoHtmlElement)geckoDomElement;
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;网页内容&lt;/span&gt;
                    html =&lt;span&gt; element.InnerHtml;
                    txtHtml.Text &lt;/span&gt;=&lt;span&gt; html;&lt;br/&gt;/*&lt;br/&gt;//通过xpath 查找class为btnLogin的元素&lt;br/&gt;GeckoNode btnLogin = webBrowser.Document.SelectFirst(&quot;.//*[@class='btnLogin']&quot;);&lt;br/&gt;if (btnLogin != null)&lt;br/&gt;{&lt;br/&gt;GeckoHtmlElement ie = btnLogin as GeckoHtmlElement;&lt;br/&gt;//手动触发点击事件&lt;br/&gt;ie.Click();&lt;br/&gt;}*/
                }
            };
            time.Start();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;         3.phantomjs&lt;/p&gt;
&lt;p&gt;phantomjs可以把它理解为也是一个浏览器控件，只不过它使用QtWebKit作为它核心浏览器的功能，使用webkit来编译解释执行JavaScript代码。利用该组件就可以很方便的获取到网页内容，同时也包括了ajax加载的数据，如果是分页的情况下，首次加载不需要延迟，如果获取第2页及以上内容的话同样也需要延迟才能获取到，并且它可以很方便的完成网页快照（就是网页截屏），至于其他的功能大家可以自己查阅一下资料。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1gT4szSlBTPqplomW6ZBF6Q&quot; target=&quot;_blank&quot;&gt;phantomjs下载地址&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
  IWebDriver driver = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; btnGo_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; phantomjsDire =&lt;span&gt; AppDomain.CurrentDomain.BaseDirectory;

            PhantomJSDriverService service &lt;/span&gt;=&lt;span&gt; PhantomJSDriverService.CreateDefaultService(phantomjsDire);
            service.IgnoreSslErrors &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            service.LoadImages &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            service.ProxyType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            driver &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PhantomJSDriver(phantomjsDire);
            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;IWindow iWindow = driver.Manage().Window;
            iWindow.Size = new Size(10,10);
            iWindow.Position = new Point(0, 600);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

            driver.Navigate().GoToUrl(textBox1.Text);
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; html =&lt;span&gt; driver.PageSource;
            txtHtml.Text &lt;/span&gt;=&lt;span&gt; html;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;driver.Close();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;driver.Quit();&lt;/span&gt;
&lt;span&gt;        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; btnPage_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  .&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;*[@class='next'][text()='下一页']
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  .&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;*[@class='text']
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  .&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;*[@class='button']
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IWebElement element = driver.FindElement(By.XPath(&quot;.&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;*[@class='text']&quot;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;给网页中文本框赋值
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;element.SendKeys(&quot;4&quot;);&lt;/span&gt;
&lt;span&gt;
            IWebElement btnElement &lt;/span&gt;= driver.FindElement(By.XPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.//*[@class='next'][text()='下一页']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            btnElement.Click();

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; time = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; System.Windows.Forms.Timer();
            time.Interval &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt; * &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;;
            time.Tick &lt;/span&gt;+= (a, b) =&amp;gt;&lt;span&gt;
            {
                time.Stop();
                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; html =&lt;span&gt; driver.PageSource;
                txtHtml.Text &lt;/span&gt;=&lt;span&gt; html;
            };
            time.Start();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 网站内容中url地址如果是相对地址的话，就是../../a.html，这种情况要想获取绝对地址的话，可以用以下方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取绝对url地址
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;baseUri&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;当前页地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;relativeUri&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;相对路径地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetRealUrl(&lt;span&gt;string&lt;/span&gt; baseUri, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; relativeUri)
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                baseUri &lt;/span&gt;=&lt;span&gt; System.Web.HttpUtility.UrlDecode(baseUri);
                relativeUri &lt;/span&gt;=&lt;span&gt; System.Web.HttpUtility.UrlDecode(relativeUri);
                Uri baseUriModel &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Uri(baseUri);
                Uri uri &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Uri(baseUriModel, relativeUri);
                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; result =&lt;span&gt; uri.ToString();
                baseUriModel &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                uri &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; relativeUri;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;  总结：&lt;/p&gt;
&lt;p&gt;以上说的第2、3种方式都可以获取到ajax异步加载的内容，同时还能通过xpath模式查找网页中的元素，例如分页标签和按钮，找到元素之后可以调用click点击事件，就能轻松的解决分页问题。好多网站分页分到最后一页的时候，处理的情况都不一样，需要自己去处理，例如有的隐藏下一页按钮、有的是禁用等等。&lt;/p&gt;
&lt;p&gt;获取到网页内容之后，要想获取自己需要的内容，可以通过HtmlAgilityPack插件，它是通过xpath的模式查找内容。&lt;/p&gt;
&lt;p&gt;以下我会将自己开发的信息采集系统截图发出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/803350/201808/803350-20180825233943399-1749948119.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/803350/201808/803350-20180825233956120-1853373364.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/803350/201808/803350-20180825234001656-1461151924.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/803350/201808/803350-20180825234006802-98874833.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/803350/201808/803350-20180825234012049-1358168158.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/803350/201808/803350-20180825234015662-232733168.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/803350/201808/803350-20180825234020635-1515429736.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;欢迎任何形式的转载，但请务必注明出处。&lt;/p&gt;
&lt;p&gt;文案功底有限，码字不易，不喜勿喷，如果文章和代码有表述不当之处，还请不吝赐教。&lt;/p&gt;

</description>
<pubDate>Sat, 25 Aug 2018 15:49:00 +0000</pubDate>
<dc:creator>泽少军</dc:creator>
<og:description>.net 信息采集ajax数据 关于.net信息采集的资料很多，但是如果采集的网站是ajax异步加载数据的模式，又如何采集呢？今天就把自己做信息采集时，所遇到的一些问题和心得跟大家分享一下。 采集网站</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zeshao/p/9534861.html</dc:identifier>
</item>
<item>
<title>开源项目推荐 Databot:  Python高性能数据驱动开发框架--爬虫案例 - kkyong</title>
<link>http://www.cnblogs.com/codemind/p/9535491.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/codemind/p/9535491.html</guid>
<description>&lt;p&gt;多年一直从事数据相关工作。对数据开发存在的各种问题深有体会。数据处理工作主要有： 爬虫，ETL,机器学习。开发过程是构建数据处理的管道Pipeline的过程.  将各种模块拼接起来。总结步骤有：获取数据，转化，合并，存储，发送。数据研发工作和业务系统研发有着很多的差别。数据项目更多是铺管道过程，各模块通过数据依赖，而业务系统开发是建大楼过程。很多情况爬虫工程师，算法工程师，写出来的数据处理代码，非常混乱。因为在看到真实数据前，无法做准确的设计，更不用说性能上的要求。  前段时间花了大量时间对Asyncio库深入研究。决定开发了数据驱动框架，从模块化，灵活度，性能方面来解决数据处理工作的问题。这就我创立Databot开源框架的初衷。&lt;/p&gt;
&lt;p&gt;花大半个月时间框架基本完成，能够解决处理数据处理工作，爬虫，ETL，量化交易。并有非常好的性能表现。欢迎大家使用和提意见。&lt;/p&gt;
&lt;p&gt;项目地址：https://github.com/kkyon/databot&lt;/p&gt;
&lt;p&gt;安装方法：pip3 install -U databot&lt;/p&gt;
&lt;p&gt;代码案例：https://github.com/kkyon/databot/tree/master/examples &lt;/p&gt;
&lt;h2&gt;多线程 VS 异步协程：&lt;/h2&gt;
&lt;p&gt;总的来说高并发的数据IO使用异步协程更具有优势。因为线程占用资源多，线程切换时候代价很大，所以建议的线程数都是cpu*2. Python由于GIL限制，通过多线程很难提升性能。&lt;/p&gt;
&lt;p&gt;而通过asyncio可以达到非常的吞吐量。并发数几乎没有限制。&lt;/p&gt;
&lt;p&gt;具体可以参考这篇文章：&lt;/p&gt;
&lt;p&gt;https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html&lt;/p&gt;
&lt;p&gt;在普通笔记本上 python asyncio 在9分钟 完成100万个网页请求。&lt;/p&gt;
&lt;h2&gt; &lt;/h2&gt;
&lt;h2&gt;Databot性能测试结果：&lt;/h2&gt;
&lt;p&gt;使用百度爬虫案例来作出：&lt;/p&gt;
&lt;p&gt;有一批关键词，需要在百度搜索引擎。记录前十页的文章标题。在SEO，舆情等场景经常要做类似事情。测试中使用了100个关键字（需要抓取1000个网页）大概三分钟就能完成。测试环境结果如下：&lt;/p&gt;
&lt;pre readability=&quot;11&quot;&gt;
# ---run result----&lt;br/&gt;&lt;strong&gt;HTTP返回在1秒左右&lt;/strong&gt;&lt;br/&gt;#post man test result for a page requrest ;1100ms&lt;p&gt;&lt;strong&gt;ping的是时间42ms&lt;/strong&gt;&lt;br/&gt;# PING www.a.shifen.com (180.97.33.108): 56 data bytes&lt;br/&gt;# 64 bytes from 180.97.33.108: icmp_seq=0 ttl=55 time=41.159 ms&lt;br/&gt;&lt;strong&gt;&lt;br/&gt;Databot测试结果：每秒能抓取50个条目，每秒能处理6个网页。&lt;br/&gt;&lt;/strong&gt;&lt;br/&gt;# got len item 9274 speed:52.994286 per second,total cost: 175s&lt;br/&gt;# got len item 9543 speed:53.016667 per second,total cost: 180s&lt;br/&gt;# got len item 9614 speed:51.967568 per second,total cost: 185s&lt;/p&gt;&lt;/pre&gt;


&lt;h2&gt;&lt;strong&gt;Python Asyncio 的问题：&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;asyncio本身，比如概念复杂，futrue,task,区别，ensure futer,crate_task。&lt;/p&gt;
&lt;p&gt;协程编写要求对工程师高，特别在数据项目中。&lt;/p&gt;
&lt;p&gt;asyncio支持的三方库有限，需要结合多线程和多进程来开发。&lt;/p&gt;

&lt;h2&gt;Databot理念和&lt;/h2&gt;
&lt;p&gt;数据工程师只关注核心逻辑，编写模块化函数，不需要考虑asyncio的特性。Databot将处理外部IO,并发，调度问题。&lt;/p&gt;

&lt;h2&gt;Databot基本概念：&lt;/h2&gt;
&lt;p&gt;Databot设计非常简洁，一共只有三个概念：Pipe,Route,Node&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pipe是主流程&lt;/strong&gt;，一个程序可以有多个Pipe，相互联系或独立。Route,Node,都是包含在pipe内部。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Route是路由器&lt;/strong&gt;，主要起数据路由，汇总合并作用。有Branch, Return,Fork,Join,BlockedJoin。其中Branch,Fork,不会改变主流程数据。Return,Join，会将处理后的数据放回到主流程中。可以通过嵌套Route，组合出复杂的数据网络。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Node是数据驱动节点&lt;/strong&gt;。 处理数据逻辑节点，一些HTTP,Mysql,AioFile ，客户自定义函数，Timer,Loop都是属于Node.&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/818151/201808/818151-20180825225810266-1555712659.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;如何安装Databot:&lt;/h2&gt;
&lt;p&gt;pip3 install -U databot&lt;/p&gt;

&lt;p&gt;github地址：https://github.com/kkyon/databot&lt;/p&gt;

&lt;h2&gt;爬虫代码解析：&lt;/h2&gt;
&lt;p&gt;更多例子参照：https://github.com/kkyon/databot/tree/master/examples&lt;/p&gt;

&lt;p&gt;针对百度爬虫例子，主流程代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;get_all_items，是客户编写函数用于解析网页上的条目。&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;get_all_page_url 是自定义编写函数用于获取网页上的翻页链接。&lt;/span&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;Loop通过循环列表把，链接发送到pipe中。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;HTTPLoader将读入URL,下载HTML.生成HTTP response对象放入Pipe中&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Branch会拷贝一份数据(Httpresponse)导入分支中，然后get_all_items会解析成最终结果，存入文件中。此时主流程数据不受影响。仍然有一份HTTP response&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Branch拷贝pipe中的Httpresponse到分支，然后通过get_all_page_url解析全部翻页链接。然后通过HTTPloader下载相应的网页，解析保持。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;以上每个步骤都会通过Databot框架调用和并发。&lt;/p&gt;
&lt;pre&gt;
BotFrame.render('baiduspider')函数可以用于生产pipe的结构图。需要安装https://www.graphviz.org/download/
&lt;/pre&gt;
&lt;pre&gt;
主函数代码：
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; main():
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     words = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;贸易战&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;世界杯&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     baidu_url = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.baidu.com/s?wd=%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     urls = [baidu_url % (word) &lt;span&gt;for&lt;/span&gt; word &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words]
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     outputfile=aiofile(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;baidu.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    Pipe(
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        Loop(urls),
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        HttpLoader(),
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        Branch(get_all_items,outputfile),
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        Branch(get_all_page_url, HttpLoader(), get_all_items, outputfile),
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    )
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;生成流程图&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     BotFrame.render(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;baiduspider&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    BotFrame.run()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; main()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;下列是生成的流程图&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/818151/201808/818151-20180825214157020-164663094.png&quot; alt=&quot;&quot; width=&quot;200&quot;/&gt;&lt;/p&gt;

&lt;p&gt;全部代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; databot.flow &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Pipe, Branch, Loop
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; databot.botframe &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BotFrame
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; bs4 &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BeautifulSoup
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; databot.http.http &lt;span&gt;import&lt;/span&gt;&lt;span&gt; HttpLoader
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; databot.db.aiofile &lt;span&gt;import&lt;/span&gt;&lt;span&gt; aiofile
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; logging
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; logging.basicConfig(level=&lt;span&gt;logging.DEBUG)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义解析结构&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ResultItem:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         self.id: str = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         self.name: str = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         self.url: str = &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         self.page_rank: int =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         self.page_no: int =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__repr__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;  &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s,%s,%d,%d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%&lt;span&gt;(str(self.id),self.name,self.page_no,self.page_rank)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 解析具体条目&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_all_items(response):
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     soup = BeautifulSoup(response.text, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lxml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     items = soup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div.result.c-container&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     result =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; rank, item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(items):
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;import&lt;/span&gt;&lt;span&gt; uuid
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         id =&lt;span&gt; uuid.uuid4()
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         r =&lt;span&gt; ResultItem()
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         r.id =&lt;span&gt; id
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         r.page_rank =&lt;span&gt; rank
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         r.name =&lt;span&gt; item.h3.get_text()
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        result.append(r)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 解析分页链接&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_all_page_url(response):
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     itemList =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     soup = BeautifulSoup(response.text, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lxml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     page = soup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div#page&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt; page[0].find_all(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         href = item.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         no =&lt;span&gt; item.get_text()
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;下一页&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; no:
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;         itemList.append(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; href)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; itemList
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; main():
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;     words = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;贸易战&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;世界杯&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;     baidu_url = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.baidu.com/s?wd=%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;     urls = [baidu_url % (word) &lt;span&gt;for&lt;/span&gt; word &lt;span&gt;in&lt;/span&gt;&lt;span&gt; words]
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt; 
&lt;span&gt;62&lt;/span&gt;     outputfile=aiofile(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;baidu.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;    Pipe(
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;        Loop(urls),
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;        HttpLoader(),
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;        Branch(get_all_items,outputfile),
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;        Branch(get_all_page_url, HttpLoader(), get_all_items, outputfile),
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; 
&lt;span&gt;69&lt;/span&gt; &lt;span&gt;    )
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;生成流程图&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt;     BotFrame.render(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;baiduspider&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;    BotFrame.run()
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; 
&lt;span&gt;74&lt;/span&gt; 
&lt;span&gt;75&lt;/span&gt; main()
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 25 Aug 2018 15:34:00 +0000</pubDate>
<dc:creator>kkyong</dc:creator>
<og:description>推荐我的开源项目， Databot :Python高性能数据驱动开发框架--爬虫案例</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/codemind/p/9535491.html</dc:identifier>
</item>
<item>
<title>Java设计模式学习记录-迭代器模式 - 纪莫</title>
<link>http://www.cnblogs.com/jimoer/p/9495070.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jimoer/p/9495070.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;这次要介绍的是迭代器模式，也是一种行为模式。我现在觉得写博客有点应付了，前阵子一天一篇，感觉这样其实有点没理解透彻就写下来了，而且写完后自己也没有多看几遍，上次在面试的时候被问到java中的I/O的各种实现用到了什么设计模式，我愣是想半天没想出来了，人家还给提示了我也没想出来，最后还是面试官给出的答案，是装饰模式，听到答案后就恍然大悟了，前两天刚看了装饰模式，还写下了I/O操作中的各种类都是用到了装饰模式，后来想想两方面原因造成的当时没回答出来，一是面试时紧张就容易想不起来，二是对设计模式理解的还是不够透彻。所以以后宁可写博客慢一些也要将自己写的东西理解透彻了。&lt;/p&gt;
&lt;h2&gt;迭代器模式&lt;/h2&gt;
&lt;h3&gt;概念介绍&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;迭代器模式，又称游标模式。这种模式提供一种方法访问一个容器对象中各个元素，而又不需要暴露该对象的内部细节&lt;/strong&gt;。这种模式其实我们日常开发中也很常见，例如下面的场景：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        java.util.Iterator&amp;lt;String&amp;gt; it =&lt;span&gt; list.iterator();
        
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (it.hasNext()){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;using &quot;it.next();&quot; do some business logic&lt;/span&gt;
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样来理解简单一些，下面还是通过具体的场景例子来实现迭代器模式。&lt;/p&gt;
&lt;h3&gt;举例&lt;/h3&gt;
&lt;p&gt;一个书架上放着好几本书，现在我想知道书架上都有哪些书，并且都把书名打印出来。那么书架就可以具有迭代的功能，能把它存放的所有书籍都迭代出来。用代码实现如下：&lt;/p&gt;
&lt;p&gt;定义一个迭代器接口，包含检测是否还有下一个元素的方法和获得下一个元素的方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 迭代器接口
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Iterator {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 检测是否还有下一个元素
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasNext();

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得下一个元素
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt;&lt;span&gt; Object next();

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义含有迭代器对象的接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 只有实现此接口的才可以获得迭代器对象
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Aggregate {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得迭代器对象
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt;&lt;span&gt; Iterator iterator();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;书籍类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 书籍类
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Book {
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;书籍名称&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; String name = &quot;&quot;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Book(String name){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得书籍名称
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;书架类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 书架类
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BookShelf &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Aggregate{

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Book[] books;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; last = 0&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; BookShelf(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; maxSize){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.books = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Book[maxSize];
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得书籍
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; index
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; Book getBookAt(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index){

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; books[index];

    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 添加书籍
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; book
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; appendBook(Book book){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.books[last] =&lt;span&gt; book;
        last&lt;/span&gt;++&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得书架上的书籍数量
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getLength(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; books.length;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得书架迭代器对象
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Iterator iterator(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BookShelfIterator(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;书架迭代器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 书架迭代器
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BookShelfIterator &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Iterator {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; BookShelf bookShelf;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; index;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BookShelfIterator(BookShelf bookShelf){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.bookShelf =&lt;span&gt; bookShelf;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.index = 0&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 检测是否还有下一本书
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasNext() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(index&amp;lt;&lt;span&gt;bookShelf.getLength()){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 返回下一本书
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object next() {
        Book book &lt;/span&gt;=&lt;span&gt; bookShelf.getBookAt(index);
        index&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; book;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Client {


    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个书架&lt;/span&gt;
        BookShelf bookShelf = &lt;span&gt;new&lt;/span&gt; BookShelf(5&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;向书架中添加书籍&lt;/span&gt;
        bookShelf.appendBook(&lt;span&gt;new&lt;/span&gt; Book(&quot;深入理解Java虚拟机&quot;&lt;span&gt;));
        bookShelf.appendBook(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Book(&quot;Java编程思想&quot;&lt;span&gt;));
        bookShelf.appendBook(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Book(&quot;高性能MySQL&quot;&lt;span&gt;));
        bookShelf.appendBook(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Book(&quot;Effective Java 中文版&quot;&lt;span&gt;));
        bookShelf.appendBook(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Book(&quot;数据结构与算法分析Java语言描述&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得书架迭代器&lt;/span&gt;
        Iterator iterator =&lt;span&gt; bookShelf.iterator();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;迭代&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt;&lt;span&gt; (iterator.hasNext()){
            Book book &lt;/span&gt;=&lt;span&gt; (Book) iterator.next();
            System.out.println(book.getName());
        }

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;深入理解Java虚拟机
Java编程思想
高性能MySQL
Effective Java 中文版
数据结构与算法分析Java语言描述&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的这个例子就是实现了迭代器模式，可以看出来是在客户端和容器间加入了迭代器，这样就很好的避免容器内部细节的暴露，而且也使得设计符合“单一职责原则”。&lt;/p&gt;
&lt;h3&gt;迭代器模式的结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/772743/201808/772743-20180825222627540-970219641.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;迭代器模式主要由以下角色组成&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;抽象迭代器角色（Iterator）&lt;/strong&gt;：抽象迭代器角色定义访问和遍历元素的接口。上面例子中的Iterator接口就是代表的这个角色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;具体迭代器角色（Concrete Iterator）&lt;/strong&gt;：具体迭代器角色要实现迭代器接口， 并要记录遍历中的当前位置。上面例子中BookShelfIterator类就是代表的这个角色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器角色（Aggregate）&lt;/strong&gt;：容器角色负责提供创建具体迭代器角色的接口。上面的例子中的Aggregate接口代表的就是这个角色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;具体容器角色（Concrete Aggregate）&lt;/strong&gt;：具体容器角色实现创建具体迭代器角色的接口，这个具体迭代器角色与该容器的结构相关。上面例子中书架类BookShelf&lt;/p&gt;
&lt;p&gt;代表的就是这个角色。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;迭代器模式是一种使用频率非常高的设计模式，通过引入迭代器可以将数据的遍历功能从聚合对象中分离出来，聚合对象只负责存储数据，而遍历数据由迭代器实现完成。Java语言类库中已经实现了迭代器模式，在实际开发中我们直接使用已经定义好的迭代器就可以了，像List、Set等集合都可以直接使用。&lt;/p&gt;
&lt;h3&gt;优点&lt;/h3&gt;
&lt;p&gt;1、它支持以不同的方式遍历一个聚合对象，在同一个聚合对象上可以定义多种遍历方式。替换迭代器就可以切换遍历方法。&lt;/p&gt;
&lt;p&gt;2、迭代器简化了聚合类。聚合对象可以不用自己再提供遍历方法。&lt;/p&gt;
&lt;p&gt;3、在迭代器模式中由于引入了抽象层，增加新的聚合类和迭代器类都很方便，无须修改原有代码，满足“开闭原则”的要求。&lt;/p&gt;
&lt;h3&gt;缺点&lt;/h3&gt;
&lt;p&gt;1、由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器来，类的个数成对增加，这在一定程度上增加了系统的复杂性。&lt;/p&gt;
&lt;p&gt;2、抽象迭代器设计难度相对较大，需要充分考虑到系统将来的扩展，，例如JDK内置迭代器Iterator就无法实现逆向遍历，如果需要实现逆向遍历，只能通过其子类ListIterator等来实现，而ListIterator迭代器无法用于操作Set类型的聚合对象。&lt;/p&gt;
&lt;h3&gt;适用场景&lt;/h3&gt;
&lt;p&gt;在以下情况可以考虑使用迭代器模式&lt;/p&gt;
&lt;p&gt;1、访问一个聚合对象的内容而无须暴露它的内部表示。将聚合对象的访问与内部数据的存储分离，使得访问聚合对象时无须了解其内部实现细节。&lt;/p&gt;
&lt;p&gt;2、需要为一个聚合对象提供多种遍历方式。&lt;/p&gt;
&lt;p&gt;3、为遍历不同聚合结构提供统一的接口，该接口的实现类中为不同的聚合结构提供不同的遍历方式，而客户端可以一致性的操作该接口。&lt;/p&gt;




&lt;p&gt;想了解更多的设计模式请查看&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/jimoer/p/9163426.html&quot;&gt;Java设计模式学习记录-GoF设计模式概述&lt;/a&gt;。&lt;/p&gt;


</description>
<pubDate>Sat, 25 Aug 2018 15:19:00 +0000</pubDate>
<dc:creator>纪莫</dc:creator>
<og:description>前言 这次要介绍的是迭代器模式，也是一种行为模式。我现在觉得写博客有点应付了，前阵子一天一篇，感觉这样其实有点没理解透彻就写下来了，而且写完后自己也没有多看几遍，上次在面试的时候被问到java中的I/</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jimoer/p/9495070.html</dc:identifier>
</item>
<item>
<title>给有C或C++基础的Python入门 ：Python Crash Course 4 操作列表 4.1--4.3 - mpeter</title>
<link>http://www.cnblogs.com/mpeter/p/9535255.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mpeter/p/9535255.html</guid>
<description>&lt;p&gt;操作列表，&lt;span&gt;也就是遍历列表&lt;/span&gt;。本章我们要学的就是如何遍历列表。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.1--4.2 遍历列表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;遍历列表，用for循环。&lt;/p&gt;
&lt;p&gt;不同于C++或者C语言的for循环，Python的for循环更容易让人理解。&lt;/p&gt;
&lt;p&gt;看一个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; fruits = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;apple&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;banana&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;orange&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; fruit &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fruits:
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I like &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + fruit.title() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I really love fruit!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其语法结构是for + 一个变量（自己定义的，在每次循环的时候从列表依次传递参数到这个变量，如第二行的fruit）+ 列表名（fruits）。&lt;/p&gt;
&lt;p&gt;　　这里要注意的两点：&lt;/p&gt;
&lt;p&gt;　　1. 是在for循环后面，没有缩进的代码都只执行一次，而不会重复执行。这里可以结合C中for循环结构体 ‘{}‘ 理解：&lt;/p&gt;
&lt;p&gt;　　即：&lt;span&gt;Python不同于C++，C++根据{}来代码行和前一个代码行的关系，而Python则根据缩进判断&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　2. 是别忘了加冒号！！！，python 的 for循环代码行&lt;span&gt;结束需要加冒号&lt;/span&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.3 创建数值列表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;5个函数：&lt;/p&gt;
&lt;p&gt;　　1. range()。&lt;/p&gt;
&lt;p&gt;　　2. list()。&lt;/p&gt;
&lt;p&gt;　　3. min()。&lt;/p&gt;
&lt;p&gt;　　4. max()。&lt;/p&gt;
&lt;p&gt;　　5. sum()。&lt;/p&gt;
&lt;p&gt;一， range()&lt;/p&gt;

&lt;p&gt;　　1.使用range()函数时要注意差一行为，也就是如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; value &lt;span&gt;in&lt;/span&gt; range(1, 5&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(value)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; value &lt;span&gt;in&lt;/span&gt; range(1, 6&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(value);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面代码的意图是依次打印出1到5数字，但是第一个代码只能打印1到4，这是&lt;span&gt;由于编程语言中经常看到的‘’差一行‘’行为&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;而第二个代码则达到了意图。&lt;/p&gt;

&lt;p&gt;　　2.  指定range()函数的步长：&lt;/p&gt;
&lt;p&gt;　　代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt; value &lt;span&gt;in&lt;/span&gt; range(2, 11, 2&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(value)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;意思：for(int i = 2; i &amp;lt; 11; i += 2 )  cout  &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl; -----学过C++的应该很明白。&lt;/p&gt;
&lt;p&gt;二，list()函数&lt;/p&gt;
&lt;p&gt;list()函数用于创建数字列表。其将range()的结果直接转化为列表。&lt;/p&gt;
&lt;p&gt;样例如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; numbers = list(range(1, 6&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(numbers)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; even_numbers = list(range(2, 11, 2&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(even_numbers)&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的两个样例结果是：[1, 2, 3, 4, 5] 和 [2, 4,  6, 8, 10]。&lt;/p&gt;
&lt;p&gt;本质就是&lt;span&gt;将range()得到的值压入栈中&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;三，三个用于对列表执行简单统计操作的函数&lt;/p&gt;
&lt;p&gt;类似C++中的max, min函数，但是这三个相当与遍历整个列表找到最大，最小以及和的值，功能强大。&lt;/p&gt;
&lt;p&gt;样例代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; digits = [1, 2, 3, 4, 5, 6, 7, 8, 9&lt;span&gt;, 0]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(min(digits))
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(max(digits))
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(sum(digits))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;四，列表解析&lt;/p&gt;
&lt;p&gt;代码解析书里的解释是：&lt;span&gt;将for循环和创建新元素的代码合并成一行，并自动附加新元素&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这样会使代码更为简洁。&lt;/p&gt;
&lt;p&gt;比如做一个平方数集，普通的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; squares =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; value &lt;span&gt;in&lt;/span&gt; range(1, 11&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     square = value**2
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    squares.append(square)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     
&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(squares)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; squares =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; value &lt;span&gt;in&lt;/span&gt; range(2, 11, 2&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     squares.append(value**2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(squares)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果经过代码解析，直接将for循环和创建步骤结合在一起：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
squares = [value**2 &lt;span&gt;for&lt;/span&gt; value &lt;span&gt;in&lt;/span&gt; range(1, 11&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(squares)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;非常简洁。但是，作为一个学习C++的人，先value*2 再for循环会感到逻辑紊乱。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　To be continued...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;如有错误，欢迎评论指正！&lt;/p&gt;

</description>
<pubDate>Sat, 25 Aug 2018 15:18:00 +0000</pubDate>
<dc:creator>mpeter</dc:creator>
<og:description>操作列表，也就是遍历列表。本章我们要学的就是如何遍历列表。 4.1--4.2 遍历列表 遍历列表，用for循环。 不同于C++或者C语言的for循环，Python的for循环更容易让人理解。 看一个例</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mpeter/p/9535255.html</dc:identifier>
</item>
<item>
<title>Vue入门---事件与方法详解 - 半指温柔乐</title>
<link>http://www.cnblogs.com/le220/p/9535754.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/le220/p/9535754.html</guid>
<description>&lt;h3&gt;一、 vue方法实现&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Vue方法与事件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;sayHi&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;点击我&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;这里使用@&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; myVue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                methods: {      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里使用methods&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                    sayHi: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                        alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;我被点击了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;二、 方法传参&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Vue方法与事件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;sayHi('你好')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;说你好&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;这里使用@&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;sayHi('我被点击了')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;说我被点击了&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;这里使用@&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; myVue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                methods: {      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里使用methods&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                    sayHi: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (message) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                        alert(message)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;三 、vue访问原生 DOM 事件&lt;/h3&gt;
&lt;p&gt;注意用&lt;span&gt;&lt;strong&gt;$event&lt;/strong&gt;&lt;/span&gt;获取&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Vue方法与事件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;changeColor('你好',$event)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;点击我&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;这里使用@&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;height: 100px;width: 100px;background-color: red;&quot;&lt;/span&gt;&lt;span&gt; @mouseover&lt;/span&gt;&lt;span&gt;=&quot;over('鼠标从我上面滑过',$event)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                鼠标从我上面滑过试试
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; myVue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                methods: {      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里使用methods&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                    changeColor: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (message, event) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                        alert(message&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;event);    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;弹出我被点击了,事件是[object MouseEvent]&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                    },
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                    over :&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (message, event) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                        alert(message&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;event);   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;弹出鼠标从我上面滑过,事件是[object MouseEvent]&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;四、 事件修饰符&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Vue方法与事件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click.stop&lt;/span&gt;&lt;span&gt;=&quot;sayHi('你好')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;说你好&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 阻止单击事件冒泡 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click.prevent&lt;/span&gt;&lt;span&gt;=&quot;sayHi('你好')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;说你好&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 提交事件不再重载页面 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click.stop.prevent&lt;/span&gt;&lt;span&gt;=&quot;sayHi('你好')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;说你好&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 阻止单击事件冒泡和提交事件不再重载页面 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click.capture&lt;/span&gt;&lt;span&gt;=&quot;sayHi('你好')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;说你好&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 添加事件侦听器时使用 capture 模式 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click.self&lt;/span&gt;&lt;span&gt;=&quot;sayHi('你好')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;说你好&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 只当事件在该元素本身（而不是子元素）触发时触发回调 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;@keyup.13&lt;/span&gt;&lt;span&gt;=&quot;sayHi('你好')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;说你好&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 只有在 keyCode 是 13 时调用 vm.submit() &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; myVue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                methods: {      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里使用methods&lt;/span&gt;
&lt;span&gt;                    sayHi: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (message) {
                        alert(message)
                    }
                }
            })
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt; 五、常用事件&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;　　v-on:click/mouseover......&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;　　简写的:    &lt;span&gt;&lt;strong&gt;@click=&quot;&quot; &lt;/strong&gt;&lt;/span&gt;  推荐&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　1、事件对象:&lt;/strong&gt;&lt;br/&gt;　　　&lt;strong&gt;　@click=&quot;show($event)&quot;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;　　2、事件冒泡:&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;　　　　阻止冒泡:&lt;/strong&gt;&lt;br/&gt;　　　　a). &lt;span&gt;&lt;strong&gt;ev.cancelBubble=true;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　　　b). &lt;span&gt;&lt;strong&gt;@click.stop&lt;/strong&gt;&lt;/span&gt; 推荐&lt;br/&gt;&lt;strong&gt;　　3、默认行为(默认事件):&lt;/strong&gt;&lt;br/&gt;　　　　阻止默认行为:&lt;br/&gt;　　　　　　a). &lt;span&gt;&lt;strong&gt;ev.preventDefault();&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　　　　　b). &lt;span&gt;&lt;strong&gt;@contextmenu.prevent&lt;/strong&gt;&lt;/span&gt; 推荐&lt;br/&gt;&lt;strong&gt;　　4、键盘:&lt;/strong&gt;&lt;br/&gt;　　　　&lt;strong&gt;@keydown $event ev.keyCode&lt;/strong&gt;&lt;br/&gt;　&lt;strong&gt;　　　@keyup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　常用键:&lt;br/&gt;　　　　　　&lt;span&gt;&lt;strong&gt;回车&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　　　　　a). &lt;span&gt;&lt;strong&gt;@keyup.13&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　　　　　b). &lt;span&gt;&lt;strong&gt;@keyup.enter&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　　　　　上、下、左、右&lt;br/&gt;　　　　　　@keyup/keydown.left  // 左&lt;br/&gt;　　　　　　@keyup/keydown.right  // 右&lt;br/&gt;　　　　　　@keyup/keydown.up // 上&lt;br/&gt;　　　　　　@keyup/keydown.down  // 下&lt;/p&gt;
</description>
<pubDate>Sat, 25 Aug 2018 14:57:00 +0000</pubDate>
<dc:creator>半指温柔乐</dc:creator>
<og:description>一、 vue方法实现 二、 方法传参 三 、vue访问原生 DOM 事件 注意用$event获取 四、 事件修饰符 五、常用事件 v-on:click/mouseover...... 简写的: @cl</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/le220/p/9535754.html</dc:identifier>
</item>
<item>
<title>Java并发编程-ReentrantLock - lingjiango</title>
<link>http://www.cnblogs.com/iou123lg/p/9535710.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iou123lg/p/9535710.html</guid>
<description>&lt;p&gt;　　上文已经总结了&lt;a href=&quot;https://www.cnblogs.com/iou123lg/p/9464385.html&quot; target=&quot;_blank&quot;&gt;AQS的前世今生&lt;/a&gt;，有了这个基础我们就可以来进一步学习并发工具类。首先我们要学习的就是ReentrantLock，本文将从ReentrantLock的产生背景、源码原理解析和应用来学习ReentrantLock这个并发工具类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt; &lt;strong&gt;产生背景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　前面我们已经学习过了&lt;a href=&quot;https://www.cnblogs.com/iou123lg/p/9190572.html&quot; target=&quot;_blank&quot;&gt;synchronized&lt;/a&gt;，这个关键字可以确保对象在并发访问中的原子性、可见性和有序性，这个关键字的底层交由了JVM通过C++来实现，既然是JVM实现，就依赖于JVM，程序员就无法在Java层面进行扩展和优化，肯定就灵活性不高，比如程序员在使用时就无法中断一个正在等待获取锁的线程，或者无法在请求一个锁时无限的等待下去。基于这样一个背景，Doug Lea构建了一个在内存语义上和synchronized一样效果的Java类，同时还扩展了其他一些高级特性，比如定时的锁等待、可中断的锁等待和公平性等，这个类就是ReentrantLock。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、&lt;/strong&gt; &lt;strong&gt;源码原理解析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1 可重入性原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　在&lt;a href=&quot;https://www.cnblogs.com/iou123lg/p/9190572.html&quot; target=&quot;_blank&quot;&gt;synchronized&lt;/a&gt;一文中，我们认为synchronized是一种重量级锁，它的实现对应的是C++的ObjectMonitor，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ObjectMonitor() {
    _header       &lt;/span&gt;=&lt;span&gt; NULL;
    _count        &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录线程获取锁的次数&lt;/span&gt;
    _waiters      = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    _recursions   &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;锁的重入次数&lt;/span&gt;
    _object       =&lt;span&gt; NULL;
    _owner        &lt;/span&gt;= NULL;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指向持有ObjectMonitor对象的线程&lt;/span&gt;
    _WaitSet      = NULL; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;等待条件队列 类似AQS的ConditionObject&lt;/span&gt;
    _WaitSetLock  = &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
    _Responsible  &lt;/span&gt;=&lt;span&gt; NULL ;
    _succ         &lt;/span&gt;=&lt;span&gt; NULL ;
    _cxq          &lt;/span&gt;=&lt;span&gt; NULL ;
    FreeNext      &lt;/span&gt;=&lt;span&gt; NULL ;
    _EntryList    &lt;/span&gt;= NULL ; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;同步队列 类似AQS的CLH队列&lt;/span&gt;
    _SpinFreq     = &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
    _SpinClock    &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
    OwnerIsThread &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
    _previous_owner_tid &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　从代码中可以看到synchronized实现的锁的重入依赖于JVM，JVM为每个对象的锁关联一个计数器_count和一个所有者线程_owner，当计数器为0的时候就认为锁没有被任何线程持有，当线程请求一个未被持有的锁时，JVM就记下锁的持有者，并将计数器的值设置为1，如果是同一个线程再次获取这个锁，计数器的值递增，而当线程退出时，计数器的值递减，直到计数器为0时，锁被释放。&lt;/p&gt;
&lt;p&gt;　　ReentrantLock实现了在内存语义上的synchronized，固然也是支持可重入的，那么ReentrantLock是如何支持的呢，让我们以非公平锁的实现看下ReentrantLock的可重入，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; nonfairTryAcquire(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; acquires) {
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; Thread current = Thread.currentThread();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前线程&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; c =&lt;span&gt; getState();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (c == 0) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;表示锁未被抢占&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (compareAndSetState(0, acquires)) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取到同步状态&lt;/span&gt;
                    setExclusiveOwnerThread(current); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前线程占有锁&lt;/span&gt;
                    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (current == getExclusiveOwnerThread()) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;线程已经占有锁了 重入&lt;/span&gt;
                &lt;span&gt;int&lt;/span&gt; nextc = c + acquires;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同步状态记录重入的次数&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (nextc &amp;lt; 0) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; overflow&lt;/span&gt;
                    &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Error(&quot;Maximum lock count exceeded&quot;&lt;span&gt;);
                setState(nextc);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; tryRelease(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; releases) {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; c = getState() - releases; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;既然可重入 就需要释放重入获取的锁&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (Thread.currentThread() !=&lt;span&gt; getExclusiveOwnerThread())
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IllegalMonitorStateException();
            &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; free = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (c == 0&lt;span&gt;) {
                free &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;只有线程全部释放才返回true&lt;/span&gt;
                setExclusiveOwnerThread(&lt;span&gt;null&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;同步队列的线程都可以去获取同步状态了&lt;/span&gt;
&lt;span&gt;            }
            setState(c); 
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; free;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　看到这也就明白了上文说的ReentrantLock类使用AQS同步状态来保存锁重复持有的次数。当锁被一个线程获取时，ReentrantLock也会记录下当前获得锁的线程标识，以便检查是否是重复获取，以及当错误的线程试图进行解锁操作时检测是否存在非法状态异常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 获取和释放锁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　如下是获取和释放锁的方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; lock() {
   sync.lock();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取锁&lt;/span&gt;
&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; unlock() {
   sync.release(&lt;/span&gt;1); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放锁&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　获取锁的时候依赖的是内部类Sync的lock()方法，该方法又有2个实现类方法，分别是非公平锁NonfairSync和公平锁FairSync，具体咱们下一小节分析。再来看下释放锁，释放锁的时候实际调用的是AQS的release方法，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; release(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; arg) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (tryRelease(arg)) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用子类的tryRelease 实际就是Sync的tryRelease&lt;/span&gt;
            Node h = head;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取同步队列的头节点&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (h != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; h.waitStatus != 0)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同步队列头节点不为空且不是初始状态&lt;/span&gt;
                unparkSuccessor(h);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放头节点 唤醒后续节点&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　Sync的tryRelease就是上一小节的重入释放方法，如果是同一个线程，那么锁的重入次数就依次递减，直到重入次数为0，此方法才会返回true,此时断开头节点唤醒后续节点去获取AQS的同步状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.3 公平锁和非公平锁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　公平锁还是非公平锁取决于ReentrantLock的构造方法，默认无参构造方法是NonfairSync，含参构造方法，入参true为FairSync，入参false为NonfairSync。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ReentrantLock() {
   sync &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NonfairSync();
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ReentrantLock(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; fair) {
   sync &lt;/span&gt;= fair ? &lt;span&gt;new&lt;/span&gt; FairSync() : &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NonfairSync();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　再分别来看看非公平锁和公平锁的实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NonfairSync &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Sync {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 7316153563782823691L&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * Performs lock.  Try immediate barge, backing up to normal
         * acquire on failure.
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;final&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; lock() {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (compareAndSetState(0, 1))&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过CAS来获取同步状态 也就是锁&lt;/span&gt;
                setExclusiveOwnerThread(Thread.currentThread());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取成功线程占有锁&lt;/span&gt;
            &lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                acquire(&lt;/span&gt;1);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取失败 进入AQS同步队列排队等待 执行AQS的acquire方法 &lt;/span&gt;
&lt;span&gt;        }

        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; tryAcquire(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; acquires) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nonfairTryAcquire(acquires);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在AQS的acquire方法中先调用子类tryAcquire，也就是nonfairTryAcquire，见2.1小节。可以看出非公平锁中，抢到AQS的同步状态的未必是同步队列的首节点，只要线程通过CAS抢到了同步状态或者在acquire中抢到同步状态，就优先占有锁，而相对同步队列这个严格的FIFO队列来说，所以会被认为是非公平锁。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FairSync &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Sync {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = -3000897897090466540L&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; lock() {
            acquire(&lt;/span&gt;1);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;严格按照AQS的同步队列要求去获取同步状态&lt;/span&gt;
&lt;span&gt;        }

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * Fair version of tryAcquire.  Don't grant access unless
         * recursive call or no waiters or is first.
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; tryAcquire(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; acquires) {
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; Thread current = Thread.currentThread();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前线程&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; c =&lt;span&gt; getState();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (c == 0) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;锁未被抢占&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (!hasQueuedPredecessors() &amp;amp;&amp;amp;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有前驱节点&lt;/span&gt;
                    compareAndSetState(0, acquires)) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;CAS获取同步状态&lt;/span&gt;
&lt;span&gt;                    setExclusiveOwnerThread(current);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (current == getExclusiveOwnerThread()) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;锁已被抢占且线程重入&lt;/span&gt;
                &lt;span&gt;int&lt;/span&gt; nextc = c + acquires;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同步状态为重入次数&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (nextc &amp;lt; 0&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Error(&quot;Maximum lock count exceeded&quot;&lt;span&gt;);
                setState(nextc);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　公平锁的实现直接调用AQS的acquire方法，acquire中调用tryAcquire。和非公平锁相比，这里不会执行一次CAS，接下来在tryAcquire去抢占锁的时候，也会先调用hasQueuedPredecessors看看前面是否有节点已经在等待获取锁了，如果存在则同步队列的前驱节点优先。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasQueuedPredecessors() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The correctness of this depends on head being initialized
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; before tail and on head.next being accurate if the current
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; thread is first in queue.&lt;/span&gt;
        Node t = tail; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Read fields in reverse initialization order 尾节点&lt;/span&gt;
        Node h = head;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;头节点&lt;/span&gt;
&lt;span&gt;        Node s;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; h != t &amp;amp;&amp;amp;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;头尾节点不是一个 即队列存在排队线程&lt;/span&gt;
            ((s = h.next) == &lt;span&gt;null&lt;/span&gt; || s.thread != Thread.currentThread());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;头节点的后续节点为空或者不是当前线程&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　虽然公平锁看起来在公平性上比非公平锁好，但是公平锁为此付出了大量线程切换的代价，而非公平锁在锁的获取上不能保证公平，就有可能出现锁饥饿，即有的线程多次获取锁而有的线程获取不到锁，没有大量的线程切换保证了非公平锁的吞吐量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、&lt;/strong&gt; &lt;strong&gt;应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1普通的线程锁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　标准形式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ReentrantLock lock = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ReentrantLock();
&lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
        lock.lock();
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;……&lt;/span&gt;
 }&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
     lock.unlock();
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这种用法和synchronized效果是一样的，但是必须显示的声明lock和unlock。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2 带限制的锁&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; tryLock()&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 尝试获取锁,立即返回获取结果 轮询锁&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; tryLock(&lt;span&gt;long&lt;/span&gt; timeout, TimeUnit unit)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;尝试获取锁,最多等待 timeout 时长 超时锁&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; lockInterruptibly()&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可中断锁,调用线程 interrupt 方法,则锁方法抛出 InterruptedException  中断锁&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　具体可查看github链接里面的ReentrantLockTest。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.3 等待/通知模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　内置队列存在一些缺陷，每个内置锁只能关联一个条件队列(_WaitSet)，这导致多个线程可能会在同一个条件队列上等待不同的条件谓词，如果每次使用notify唤醒条件队列，可能会唤醒错误的线程导致唤醒失败，但是如果使用notifyAll的话，能唤醒到正确的线程，因为所有的线程都会被唤醒，这也带来一个问题，就是不应该被唤醒的在被唤醒后发现不是自己等待的条件谓词转而又被挂起。这样的操作会带来系统的资源浪费，降低系统性能。这个时候推荐使用显式的Lock和Condition来替代内置锁和条件队列，从而控制多个条件谓词的情况，达到精确的控制线程的唤醒和挂起。具体后面再来分析下JVM的内置锁、条件队列模型和显式的Lock、Condition模型，实际上在&lt;a href=&quot;https://www.cnblogs.com/iou123lg/p/9464385.html&quot; target=&quot;_blank&quot;&gt;AQS&lt;/a&gt;里面也提到了Lock、Condition模型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.4 和synchronized比较&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　两者的区别大致如下：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;synchronized&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;ReentrantLock&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;使用Object本身的wait、notify、notifyAll调度机制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;与Condition结合进行线程的调度&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;显式的使用在同步方法或者同步代码块&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;显式的声明指定起始和结束位置&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;托管给JVM执行，不会因为异常、或者未释放而发生死锁&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;手动释放锁&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　Jdk1.6之前，ReentrantLock性能优于synchronized，不过1.6之后，synchronized做了大量的性能调优，而且synchronized相对程序员来说，简洁熟悉，如果不是synchronized无法实现的功能，如轮询锁、超时锁和中断锁等，推荐首先使用synchronized，而针对锁的高级功能，再使用ReentrantLock。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;参考资料:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/lingjiango/ConcurrentProgramPractice&quot;&gt;https://github.com/lingjiango/ConcurrentProgramPractice&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/j-jtp10264/index.html&quot;&gt;https://www.ibm.com/developerworks/cn/java/j-jtp10264/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/java/library/j-jtp10264/&quot;&gt;https://www.ibm.com/developerworks/java/library/j-jtp10264/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 25 Aug 2018 14:54:00 +0000</pubDate>
<dc:creator>lingjiango</dc:creator>
<og:description>上文已经总结了AQS的前世今生，有了这个基础我们就可以来进一步学习并发工具类。首先我们要学习的就是ReentrantLock，本文将从ReentrantLock的产生背景、源码原理解析和应用来学习Re</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iou123lg/p/9535710.html</dc:identifier>
</item>
<item>
<title>机器学习(五) 线性回归法 （上） - 本心依然</title>
<link>http://www.cnblogs.com/zhangtaotqy/p/9535656.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangtaotqy/p/9535656.html</guid>
<description>&lt;p&gt;一、简单额线性回归&lt;/p&gt;
&lt;p&gt;解决回归问题&lt;/p&gt;
&lt;p&gt;思想简单、实现容易&lt;/p&gt;
&lt;p&gt;许多强大的非线性模型的基础&lt;/p&gt;
&lt;p&gt;结果具有很好的可解释性&lt;/p&gt;
&lt;p&gt;蕴含机器学习中的很多重要思想&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825211751371-868826048.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825211756077-1174941314.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825211802695-1813868415.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825211809749-57115973.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825211813518-1365959073.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825211820131-702336116.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825211823553-1991728962.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825211826712-636534721.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;二、最小二乘法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825213057350-1317219297.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825213100787-1147986038.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825213103818-323745730.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825213106929-246864078.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825213110241-1224931654.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825213113166-547103100.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;三、简单线性回归的实现&lt;/p&gt;
&lt;p&gt; SimpleLinearRegression.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; SimpleLinearRegression1:

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;初始化Simple Linear Regression 模型&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        self.a_ &lt;/span&gt;=&lt;span&gt; None
        self.b_ &lt;/span&gt;=&lt;span&gt; None

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; fit(self, x_train, y_train):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;根据训练数据集x_train,y_train训练Simple Linear Regression模型&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;assert&lt;/span&gt; x_train.ndim == 1&lt;span&gt;, \
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Simple Linear Regressor can only solve single feature training data.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;assert&lt;/span&gt; len(x_train) ==&lt;span&gt; len(y_train), \
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;the size of x_train must be equal to the size of y_train&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

        x_mean &lt;/span&gt;=&lt;span&gt; np.mean(x_train)
        y_mean &lt;/span&gt;=&lt;span&gt; np.mean(y_train)

        num &lt;/span&gt;= 0.0&lt;span&gt;
        d &lt;/span&gt;= 0.0
        &lt;span&gt;for&lt;/span&gt; x, y &lt;span&gt;in&lt;/span&gt;&lt;span&gt; zip(x_train, y_train):
            num &lt;/span&gt;+= (x - x_mean) * (y -&lt;span&gt; y_mean)
            d &lt;/span&gt;+= (x - x_mean) ** 2&lt;span&gt;

        self.a_ &lt;/span&gt;= num /&lt;span&gt; d
        self.b_ &lt;/span&gt;= y_mean - self.a_ *&lt;span&gt; x_mean

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; predict(self, x_predict):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;给定待预测数据集x_predict，返回表示x_predict的结果向量&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;assert&lt;/span&gt; x_predict.ndim == 1&lt;span&gt;, \
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Simple Linear Regressor can only solve single feature training data.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;assert&lt;/span&gt; self.a_ &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; None &lt;span&gt;and&lt;/span&gt; self.b_ &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; None, \
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;must fit before predict!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

        &lt;span&gt;return&lt;/span&gt; np.array([self._predict(x) &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt;&lt;span&gt; x_predict])

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; _predict(self, x_single):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;给定单个待预测数据x，返回x的预测结果值&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; self.a_ * x_single +&lt;span&gt; self.b_

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__repr__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SimpleLinearRegression1()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825220015456-813050637.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825220028125-411439885.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825220032020-1394166428.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825220036309-369791318.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;四、向量化&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825221841629-2031406585.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825221846002-1382044302.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;pre&gt;
&lt;span&gt;SimpleLinearRegression.py&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; SimpleLinearRegression2:

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;初始化Simple Linear Regression模型&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        self.a_ &lt;/span&gt;=&lt;span&gt; None
        self.b_ &lt;/span&gt;=&lt;span&gt; None

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; fit(self, x_train, y_train):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;根据训练数据集x_train,y_train训练Simple Linear Regression模型&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;assert&lt;/span&gt; x_train.ndim == 1&lt;span&gt;, \
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Simple Linear Regressor can only solve single feature training data.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;assert&lt;/span&gt; len(x_train) ==&lt;span&gt; len(y_train), \
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;the size of x_train must be equal to the size of y_train&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

        x_mean &lt;/span&gt;=&lt;span&gt; np.mean(x_train)
        y_mean &lt;/span&gt;=&lt;span&gt; np.mean(y_train)

        self.a_ &lt;/span&gt;= (x_train - x_mean).dot(y_train - y_mean) / (x_train - x_mean).dot(x_train -&lt;span&gt; x_mean)
        self.b_ &lt;/span&gt;= y_mean - self.a_ *&lt;span&gt; x_mean

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; predict(self, x_predict):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;给定待预测数据集x_predict，返回表示x_predict的结果向量&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;assert&lt;/span&gt; x_predict.ndim == 1&lt;span&gt;, \
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Simple Linear Regressor can only solve single feature training data.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;assert&lt;/span&gt; self.a_ &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; None &lt;span&gt;and&lt;/span&gt; self.b_ &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; None, \
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;must fit before predict!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

        &lt;span&gt;return&lt;/span&gt; np.array([self._predict(x) &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt;&lt;span&gt; x_predict])

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; _predict(self, x_single):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;给定单个待预测数据x_single，返回x_single的预测结果值&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; self.a_ * x_single +&lt;span&gt; self.b_

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__repr__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SimpleLinearRegression2()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825222046303-2061429287.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825222050361-1752597332.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825222053747-1089025835.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;五、衡量线性回归法的指标：MSE、RMS 和 MAE&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825222935069-71718752.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825222938771-1242394911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825222942545-1737175681.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1071925/201808/1071925-20180825222945736-2057606437.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。 太晚了，明天继续。&lt;/p&gt;

</description>
<pubDate>Sat, 25 Aug 2018 14:31:00 +0000</pubDate>
<dc:creator>本心依然</dc:creator>
<og:description>一、简单额线性回归 解决回归问题 思想简单、实现容易 许多强大的非线性模型的基础 结果具有很好的可解释性 蕴含机器学习中的很多重要思想 二、最小二乘法 三、简单线性回归的实现 SimpleLinear</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangtaotqy/p/9535656.html</dc:identifier>
</item>
</channel>
</rss>