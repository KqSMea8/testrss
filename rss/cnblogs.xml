<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>改变this不要怕！！！ - 耗子圈码</title>
<link>http://www.cnblogs.com/929LF/p/8745385.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/929LF/p/8745385.html</guid>
<description>&lt;p&gt;在之前的学习和工作中，会不必要的涉及到 改变this的指向问题；&lt;/p&gt;
&lt;p&gt;　　脑子里会想到的是 apply, call, bind 这三个&lt;/p&gt;
&lt;p&gt;　　可逆知道他的区别吗？&lt;/p&gt;
&lt;p&gt;　　　　1. bind区别于 apply和call 是因为 bind 改变this指向的同时会执行当前的函数，而apply和call 则不会执行&lt;/p&gt;
&lt;p&gt;　　　　　　因此 bind 返回的是改变环境过后的函数，等待被调用，而apply和call则是执行后的结果&lt;/p&gt;
&lt;p&gt;　　　　2. apply,call 的区别在于，传入参数的区别，&lt;/p&gt;
&lt;p&gt;　　　　　　个人理解： &lt;/p&gt;
&lt;p&gt;　　　　　　　　call(靠)  当然很夸张的意思，就是需要每个参数都要列出来&lt;/p&gt;
&lt;p&gt;　　　　　　　　apply    则不需要每个参数都列出来&lt;/p&gt;


&lt;p&gt;　　　　到这里 改变this 你还怕吗？？？&lt;/p&gt;
</description>
<pubDate>Sun, 08 Apr 2018 07:46:00 +0000</pubDate>
<dc:creator>耗子圈码</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/929LF/p/8745385.html</dc:identifier>
</item>
<item>
<title>Python3 常用模块 - 1024python</title>
<link>http://www.cnblogs.com/zzzhfo/p/8745222.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zzzhfo/p/8745222.html</guid>
<description>&lt;h3&gt;一、time与datetime模块&lt;/h3&gt;
&lt;p&gt;在Python中，通常有这几种方式来表示时间：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;时间戳(timestamp)：通常来说，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量。我们运行“type(time.time())”，返回的是float类型。&lt;/li&gt;
&lt;li&gt;格式化的时间字符串(Format String)&lt;/li&gt;
&lt;li&gt;结构化的时间(struct_time)：struct_time元组共有9个元素共九个元素:(年，月，日，时，分，秒，一年中第几周，一年中第几天，夏令时)&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;&lt;span&gt; import time
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; #--------------------------&lt;span&gt;我们先以当前时间为准,让大家快速认识三种形式的时间
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; print(time.time()) # 时间戳:&lt;span&gt;1487130156.419527&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; print(time.strftime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%Y-%m-%d %X&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)) #格式化的时间字符串:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2017-02-15 11:40:53&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt;&lt;span&gt; print(time.localtime()) #本地时区的struct_time
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; print(time.gmtime())    #UTC时区的struct_time
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('cbffb364-9157-4118-b211-41a1a9358593')&quot; readability=&quot;39&quot;&gt;&lt;img id=&quot;code_img_closed_cbffb364-9157-4118-b211-41a1a9358593&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cbffb364-9157-4118-b211-41a1a9358593&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('cbffb364-9157-4118-b211-41a1a9358593',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cbffb364-9157-4118-b211-41a1a9358593&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
%&lt;span&gt;a    Locale’s abbreviated weekday name.     
&lt;/span&gt;%&lt;span&gt;A    Locale’s full weekday name.     
&lt;/span&gt;%&lt;span&gt;b    Locale’s abbreviated month name.     
&lt;/span&gt;%&lt;span&gt;B    Locale’s full month name.     
&lt;/span&gt;%&lt;span&gt;c    Locale’s appropriate date and time representation.     
&lt;/span&gt;%d    Day of the month &lt;span&gt;as&lt;/span&gt; a &lt;span&gt;decimal&lt;/span&gt; number [&lt;span&gt;01&lt;/span&gt;,&lt;span&gt;31&lt;/span&gt;&lt;span&gt;].     
&lt;/span&gt;%H    Hour (&lt;span&gt;24&lt;/span&gt;-hour clock) &lt;span&gt;as&lt;/span&gt; a &lt;span&gt;decimal&lt;/span&gt; number [&lt;span&gt;00&lt;/span&gt;,&lt;span&gt;23&lt;/span&gt;&lt;span&gt;].     
&lt;/span&gt;%I    Hour (&lt;span&gt;12&lt;/span&gt;-hour clock) &lt;span&gt;as&lt;/span&gt; a &lt;span&gt;decimal&lt;/span&gt; number [&lt;span&gt;01&lt;/span&gt;,&lt;span&gt;12&lt;/span&gt;&lt;span&gt;].     
&lt;/span&gt;%j    Day of the year &lt;span&gt;as&lt;/span&gt; a &lt;span&gt;decimal&lt;/span&gt; number [&lt;span&gt;001&lt;/span&gt;,&lt;span&gt;366&lt;/span&gt;&lt;span&gt;].     
&lt;/span&gt;%m    Month &lt;span&gt;as&lt;/span&gt; a &lt;span&gt;decimal&lt;/span&gt; number [&lt;span&gt;01&lt;/span&gt;,&lt;span&gt;12&lt;/span&gt;&lt;span&gt;].     
&lt;/span&gt;%M    Minute &lt;span&gt;as&lt;/span&gt; a &lt;span&gt;decimal&lt;/span&gt; number [&lt;span&gt;00&lt;/span&gt;,&lt;span&gt;59&lt;/span&gt;&lt;span&gt;].     
&lt;/span&gt;%p    Locale’s equivalent of either AM or PM.    (&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;%S    Second &lt;span&gt;as&lt;/span&gt; a &lt;span&gt;decimal&lt;/span&gt; number [&lt;span&gt;00&lt;/span&gt;,&lt;span&gt;61&lt;/span&gt;].    (&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;%U    Week number of the year (Sunday &lt;span&gt;as&lt;/span&gt; the first day of the week) &lt;span&gt;as&lt;/span&gt; a &lt;span&gt;decimal&lt;/span&gt; number [&lt;span&gt;00&lt;/span&gt;,&lt;span&gt;53&lt;/span&gt;]. All days &lt;span&gt;in&lt;/span&gt; a &lt;span&gt;new&lt;/span&gt; year preceding the first Sunday are considered to be &lt;span&gt;in&lt;/span&gt; week &lt;span&gt;0&lt;/span&gt;.    (&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;%w    Weekday &lt;span&gt;as&lt;/span&gt; a &lt;span&gt;decimal&lt;/span&gt; number [&lt;span&gt;0&lt;/span&gt;(Sunday),&lt;span&gt;6&lt;/span&gt;&lt;span&gt;].     
&lt;/span&gt;%W    Week number of the year (Monday &lt;span&gt;as&lt;/span&gt; the first day of the week) &lt;span&gt;as&lt;/span&gt; a &lt;span&gt;decimal&lt;/span&gt; number [&lt;span&gt;00&lt;/span&gt;,&lt;span&gt;53&lt;/span&gt;]. All days &lt;span&gt;in&lt;/span&gt; a &lt;span&gt;new&lt;/span&gt; year preceding the first Monday are considered to be &lt;span&gt;in&lt;/span&gt; week &lt;span&gt;0&lt;/span&gt;.    (&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;%&lt;span&gt;x    Locale’s appropriate date representation.     
&lt;/span&gt;%&lt;span&gt;X    Locale’s appropriate time representation.     
&lt;/span&gt;%y    Year without century &lt;span&gt;as&lt;/span&gt; a &lt;span&gt;decimal&lt;/span&gt; number [&lt;span&gt;00&lt;/span&gt;,&lt;span&gt;99&lt;/span&gt;&lt;span&gt;].     
&lt;/span&gt;%Y    Year with century &lt;span&gt;as&lt;/span&gt; a &lt;span&gt;decimal&lt;/span&gt;&lt;span&gt; number.     
&lt;/span&gt;%z    Time zone offset indicating a positive or negative time difference &lt;span&gt;from&lt;/span&gt; UTC/GMT of the form +HHMM or -HHMM, &lt;span&gt;where&lt;/span&gt; H represents &lt;span&gt;decimal&lt;/span&gt; hour digits and M represents &lt;span&gt;decimal&lt;/span&gt; minute digits [-&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;59&lt;/span&gt;, +&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;59&lt;/span&gt;&lt;span&gt;].     
&lt;/span&gt;%Z    Time zone name (no characters &lt;span&gt;if&lt;/span&gt;&lt;span&gt; no time zone exists).     
&lt;/span&gt;%%    A literal &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; character.
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;格式化字符串的时间格式&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;其中计算机认识的时间只能是'时间戳'格式，而程序员可处理的或者说人类能看懂的时间有: '格式化的时间字符串'，'结构化的时间' ，于是有了下图的转换关系&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1011251/201804/1011251-20180408144413187-951303554.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
#--------------------------&lt;span&gt;按图1转换时间
# localtime([secs])
# 将一个时间戳转换为当前时区的struct_time。secs参数未提供，则以当前时间为准。
time.localtime()
time.localtime(&lt;/span&gt;&lt;span&gt;1473525444.037215&lt;/span&gt;&lt;span&gt;)

# gmtime([secs]) 和localtime()方法类似，gmtime()方法是将一个时间戳转换为UTC时区（0时区）的struct_time。

# mktime(t) : 将一个struct_time转化为时间戳。
print(time.mktime(time.localtime()))#&lt;/span&gt;&lt;span&gt;1473525749.0&lt;/span&gt;&lt;span&gt;

# strftime(format[, t]) : 把一个代表时间的元组或者struct_time（如由time.localtime()和
# time.gmtime()返回）转化为格式化的时间字符串。如果t未指定，将传入time.localtime()。如果元组中任何一个
# 元素越界，ValueError的错误将会被抛出。
print(time.strftime(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%Y-%m-%d %X&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, time.localtime()))#&lt;span&gt;2016&lt;/span&gt;-&lt;span&gt;09&lt;/span&gt;-&lt;span&gt;11&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;49&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;&lt;span&gt;

# time.strptime(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[, format])
# 把一个格式化时间字符串转化为struct_time。实际上它和strftime()是逆操作。
print(time.strptime(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2011-05-05 16:37:06&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%Y-%m-%d %X&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
#time.struct_time(tm_year&lt;/span&gt;=&lt;span&gt;2011&lt;/span&gt;, tm_mon=&lt;span&gt;5&lt;/span&gt;, tm_mday=&lt;span&gt;5&lt;/span&gt;, tm_hour=&lt;span&gt;16&lt;/span&gt;, tm_min=&lt;span&gt;37&lt;/span&gt;, tm_sec=&lt;span&gt;6&lt;/span&gt;&lt;span&gt;,
#  tm_wday&lt;/span&gt;=&lt;span&gt;3&lt;/span&gt;, tm_yday=&lt;span&gt;125&lt;/span&gt;, tm_isdst=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
#在这个函数中，format默认为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%a %b %d %H:%M:%S %Y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1011251/201804/1011251-20180408144553560-2032632413.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; #--------------------------&lt;span&gt;按图2转换时间
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; # asctime([t]) : 把一个表示时间的元组或者struct_time表示为这种形式：&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Sun Jun 20 23:21:05 1993&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;。
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; # 如果没有参数，将会将time.localtime()作为参数传入。
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; print(time.asctime())#Sun Sep &lt;span&gt;11&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt; &lt;span&gt;2016&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt;&lt;span&gt; # ctime([secs]) : 把一个时间戳（按秒计算的浮点数）转化为time.asctime()的形式。如果参数未给或者为
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; # None的时候，将会默认time.time()为参数。它的作用相当于time.asctime(time.localtime(secs))。
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; print(time.ctime())  # Sun Sep &lt;span&gt;11&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;46&lt;/span&gt;:&lt;span&gt;38&lt;/span&gt; &lt;span&gt;2016&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; print(time.ctime(time.time()))  # Sun Sep &lt;span&gt;11&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;46&lt;/span&gt;:&lt;span&gt;38&lt;/span&gt; &lt;span&gt;2016&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; #--------------------------&lt;span&gt;其他用法
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; # sleep(secs)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; # 线程推迟指定的时间运行，单位为秒。
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;datetime模块&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#时间加减
import datetime

# print(datetime.datetime.now()) #返回 &lt;/span&gt;&lt;span&gt;2016&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt;-&lt;span&gt;19&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;47&lt;/span&gt;:&lt;span&gt;03.941925&lt;/span&gt;&lt;span&gt;
#print(datetime.date.fromtimestamp(time.time()) )  # 时间戳直接转成日期格式 &lt;/span&gt;&lt;span&gt;2016&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt;-&lt;span&gt;19&lt;/span&gt;&lt;span&gt;
# print(datetime.datetime.now() )
# print(datetime.datetime.now() &lt;/span&gt;+ datetime.timedelta(&lt;span&gt;3&lt;/span&gt;)) #当前时间+&lt;span&gt;3天
# print(datetime.datetime.now() &lt;/span&gt;+ datetime.timedelta(-&lt;span&gt;3&lt;/span&gt;)) #当前时间-&lt;span&gt;3天
# print(datetime.datetime.now() &lt;/span&gt;+ datetime.timedelta(hours=&lt;span&gt;3&lt;/span&gt;)) #当前时间+&lt;span&gt;3小时
# print(datetime.datetime.now() &lt;/span&gt;+ datetime.timedelta(minutes=&lt;span&gt;30&lt;/span&gt;)) #当前时间+&lt;span&gt;30分


#
# c_time  &lt;/span&gt;=&lt;span&gt; datetime.datetime.now()
# print(c_time.replace(minute&lt;/span&gt;=&lt;span&gt;3&lt;/span&gt;,hour=&lt;span&gt;2&lt;/span&gt;)) #时间替换
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;二、random模块&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import random

print(random.random())#(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;)----&lt;span&gt;float&lt;/span&gt;&lt;span&gt;    大于0且小于1之间的小数
 
print(random.randint(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;))  #[&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]    大于等于1且小于等于3之间的整数

print(random.randrange(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;)) #[&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)    大于等于1且小于3之间的整数
  
print(random.choice([&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,[&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;]]))#1或者23或者[&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;&lt;span&gt;]

print(random.sample([&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,[&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;]],&lt;span&gt;2&lt;/span&gt;&lt;span&gt;))#列表元素任意2个组合

print(random.uniform(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;))#大于1小于3的小数，如1.&lt;span&gt;927109612082716&lt;/span&gt;&lt;span&gt; 

 
item&lt;/span&gt;=[&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;9&lt;/span&gt;&lt;span&gt;]
random.shuffle(item) #打乱item的顺序,相当于&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;洗牌&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
print(item)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2bb0c170-0aa7-441d-a855-a25c9972a9d0')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_2bb0c170-0aa7-441d-a855-a25c9972a9d0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2bb0c170-0aa7-441d-a855-a25c9972a9d0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2bb0c170-0aa7-441d-a855-a25c9972a9d0',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2bb0c170-0aa7-441d-a855-a25c9972a9d0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import random
def make_code(n):
    res&lt;/span&gt;=&lt;span&gt;''&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(n):
        s1&lt;/span&gt;=chr(random.randint(&lt;span&gt;65&lt;/span&gt;,&lt;span&gt;90&lt;/span&gt;&lt;span&gt;))
        s2&lt;/span&gt;=str(random.randint(&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;9&lt;/span&gt;&lt;span&gt;))
        res&lt;/span&gt;+=&lt;span&gt;random.choice([s1,s2])
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; res

print(make_code(&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;生成随机验证码&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;三、os模块&lt;/h3&gt;
&lt;p&gt;os模块是与操作系统交互的一个接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;os.getcwd() 获取当前工作目录，即当前python脚本工作的目录路径
os.chdir(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dirname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)  改变当前脚本工作目录；相当于shell下cd
os.curdir  返回当前目录: (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
os.pardir  获取当前目录的父目录字符串名：(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
os.makedirs(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dirname1/dirname2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)    可生成多层递归目录
os.removedirs(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dirname1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)    若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推
os.mkdir(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dirname&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)    生成单级目录；相当于shell中mkdir dirname
os.rmdir(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dirname&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)    删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname
os.listdir(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dirname&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)    列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印
os.remove()  删除一个文件
os.rename(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;oldname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;newname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)  重命名文件/&lt;span&gt;目录
os.stat(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;path/filename&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  获取文件/&lt;span&gt;目录信息
os.sep    输出操作系统特定的路径分隔符，win下为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,Linux下为&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
os.linesep    输出当前平台使用的行终止符，win下为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,Linux下为&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
os.pathsep    输出用于分割文件路径的字符串 win下为;,Linux下为:
os.name    输出字符串指示当前使用平台。win&lt;/span&gt;-&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;nt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; Linux-&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;posix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
os.system(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bash command&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)  运行shell命令，直接显示
os.environ  获取系统环境变量
os.path.abspath(path)  返回path规范化的绝对路径
os.path.split(path)  将path分割成目录和文件名二元组返回
os.path.dirname(path)  返回path的目录。其实就是os.path.split(path)的第一个元素
os.path.basename(path)  返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素
os.path.exists(path)  如果path存在，返回True；如果path不存在，返回False
os.path.isabs(path)  如果path是绝对路径，返回True
os.path.isfile(path)  如果path是一个存在的文件，返回True。否则返回False
os.path.isdir(path)  如果path是一个存在的目录，则返回True。否则返回False
os.path.join(path1[, path2[, ...]])  将多个路径组合后返回，第一个绝对路径之前的参数将被忽略
os.path.getatime(path)  返回path所指向的文件或者目录的最后存取时间
os.path.getmtime(path)  返回path所指向的文件或者目录的最后修改时间
os.path.getsize(path) 返回path的大小&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;在Linux和Mac平台上，该函数会原样返回path，在windows平台上会将路径中所有字符转换为小写，并将所有斜杠转换为饭斜杠。
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.normcase(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c:/windows\\system32\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)   
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c:\\windows\\system32\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;   
   

规范化路径，如..和&lt;/span&gt;/
&amp;gt;&amp;gt;&amp;gt; os.path.normpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c://windows\\System32\\../Temp/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)   
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c:\\windows\\Temp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;   

&amp;gt;&amp;gt;&amp;gt; a=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/Users/jieli/test1/\\\a1/\\\\aa.py/../..&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; print(os.path.normpath(a))
&lt;/span&gt;/Users/jieli/test1
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;os路径处理
#方式一：推荐使用
import os
#具体应用
import os,sys
possible_topdir &lt;/span&gt;=&lt;span&gt; os.path.normpath(os.path.join(
    os.path.abspath(__file__),
    os.pardir, #上一级
    os.pardir,
    os.pardir
))
sys.path.insert(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,possible_topdir)


#方式二：不推荐使用
os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;四、sys模块&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sys.argv           命令行参数List，第一个元素是程序本身路径
sys.exit(n)        退出程序，正常退出时exit(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
sys.version        获取Python解释程序的版本信息
sys.maxint         最大的Int值
sys.path           返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值
sys.platform       返回操作系统平台名称&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;打印进度条&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50.5&quot;&gt;
&lt;pre&gt;
#=========知识储备==========&lt;span&gt;
#进度条的效果
[#             ]
[##            ]
[###           ]
[####          ]

#指定宽度
print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%-15s]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%-15s]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;'&lt;/span&gt;&lt;span&gt;##&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%-15s]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;'&lt;/span&gt;&lt;span&gt;###&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%-15s]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;'&lt;/span&gt;&lt;span&gt;####&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

#打印&lt;/span&gt;%&lt;span&gt;
print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s%%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %(&lt;span&gt;100&lt;/span&gt;)) #第二个%号代表取消第一个%&lt;span&gt;的特殊意义

#可传参来控制宽度
print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%%-%ds]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;50&lt;/span&gt;) #[%-&lt;span&gt;50s]
print((&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%%-%ds]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;50&lt;/span&gt;) %&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
print((&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%%-%ds]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;50&lt;/span&gt;) %&lt;span&gt;'&lt;/span&gt;&lt;span&gt;##&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
print((&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%%-%ds]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;50&lt;/span&gt;) %&lt;span&gt;'&lt;/span&gt;&lt;span&gt;###&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)


#&lt;/span&gt;=========实现打印进度条函数==========&lt;span&gt;
import sys
import time

def progress(percent,width&lt;/span&gt;=&lt;span&gt;50&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; percent &amp;gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;:
        percent&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    show_str&lt;/span&gt;=(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%%-%ds]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %width) %(&lt;span&gt;int&lt;/span&gt;(width*percent)*&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\r%s %d%%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %(show_str,&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;*percent)),file=sys.stdout,flush=True,end=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)


#&lt;/span&gt;=========应用==========&lt;span&gt;
data_size&lt;/span&gt;=&lt;span&gt;1025&lt;/span&gt;&lt;span&gt;
recv_size&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;
&lt;span&gt;while&lt;/span&gt; recv_size &amp;lt;&lt;span&gt; data_size:
    time.sleep(&lt;/span&gt;&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;) #模拟数据的传输延迟
    recv_size&lt;/span&gt;+=&lt;span&gt;1024&lt;/span&gt;&lt;span&gt; #每次收1024

    percent&lt;/span&gt;=recv_size/&lt;span&gt;data_size #接收的比例
    progress(percent,width&lt;/span&gt;=&lt;span&gt;70&lt;/span&gt;) #进度条的宽度70&lt;/pre&gt;
&lt;pre readability=&quot;6&quot;&gt;
优化版本：&lt;br/&gt;def progress(percent,width=50):&lt;br/&gt;if percent &amp;gt; 1:&lt;br/&gt;percent=1&lt;br/&gt;show_str=('[%%-%ds]' %width) %(int(width*percent) * '#')&lt;br/&gt;print('\r%s %d%%' %(show_str,int(100*percent)),end='')&lt;p&gt;import time&lt;br/&gt;recv_size=0&lt;br/&gt;total_size=100&lt;br/&gt;while recv_size &amp;lt; total_size:&lt;br/&gt;time.sleep(0.1)&lt;br/&gt;recv_size+=1&lt;br/&gt;percent=recv_size / total_size&lt;br/&gt;progress(percent)
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;五、shutil模块&lt;/h3&gt;
&lt;p&gt;高级的 文件、文件夹、压缩包 处理模块&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;shutil.copyfileobj(fsrc, fdst[, length])&lt;/strong&gt;&lt;br/&gt;将文件内容拷贝到另一个文件中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import shutil

shutil.copyfileobj(open(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;old.xml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;new.xml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;shutil.copyfile(src, dst)&lt;/strong&gt;&lt;br/&gt;拷贝文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
shutil.copyfile(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f1.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;f2.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) #目标文件无需存在
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;shutil.copymode(src, dst)&lt;/strong&gt;&lt;br/&gt;仅拷贝权限。内容、组、用户均不变&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
shutil.copymode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f1.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;f2.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) #目标文件必须存在
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;shutil.copystat(src, dst)&lt;/strong&gt;&lt;br/&gt;仅拷贝状态的信息，包括：mode bits, atime, mtime, flags&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
shutil.copystat(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f1.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;f2.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) #目标文件必须存在
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;shutil.copy(src, dst)&lt;/strong&gt;&lt;br/&gt;拷贝文件和权限&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import shutil

shutil.copy(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f1.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;f2.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;shutil.copy2(src, dst)&lt;/strong&gt;&lt;br/&gt;拷贝文件和状态信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import shutil

shutil.copy2(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f1.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;f2.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;shutil.ignore_patterns(*patterns)&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;shutil.copytree(src, dst, symlinks=False, ignore=None)&lt;/strong&gt;&lt;br/&gt;递归的去拷贝文件夹&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import shutil
  
shutil.copytree(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;folder1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;folder2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, ignore=shutil.ignore_patterns(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*.pyc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;tmp*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)) #目标目录不能存在，注意对folder2目录父级目录要有可写权限，ignore的意思是排除 
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0ad5dc7e-8ba2-4f8c-8b08-ed610f58eed6')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_0ad5dc7e-8ba2-4f8c-8b08-ed610f58eed6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0ad5dc7e-8ba2-4f8c-8b08-ed610f58eed6&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0ad5dc7e-8ba2-4f8c-8b08-ed610f58eed6',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0ad5dc7e-8ba2-4f8c-8b08-ed610f58eed6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import shutil

shutil.copytree(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;f2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, symlinks=True, ignore=shutil.ignore_patterns(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*.pyc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;tmp*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))

&lt;/span&gt;&lt;span&gt;'''
&lt;/span&gt;&lt;span&gt;通常的拷贝都把软连接拷贝成硬链接，即对待软连接来说，创建新的文件
&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;拷贝软链接&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;shutil.rmtree(path[, ignore_errors[, onerror]])&lt;/strong&gt;&lt;br/&gt;递归的去删除文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import shutil
 
shutil.rmtree(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;folder1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;shutil.move(src, dst)&lt;/strong&gt;&lt;br/&gt;递归的去移动文件，它类似mv命令，其实就是重命名。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import shutil
  
shutil.move(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;folder1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;folder3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;shutil.make_archive(base_name, format,...)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建压缩包并返回文件路径，例如：zip、tar&lt;/p&gt;
&lt;p&gt;创建压缩包并返回文件路径，例如：zip、tar&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;base_name： 压缩包的文件名，也可以是压缩包的路径。只是文件名时，则保存至当前目录，否则保存至指定路径，&lt;br/&gt;如 data_bak                       =&amp;gt;保存至当前路径&lt;br/&gt;如：/tmp/data_bak =&amp;gt;保存至/tmp/&lt;/li&gt;
&lt;li&gt;format： 压缩包种类，“zip”, “tar”, “bztar”，“gztar”&lt;/li&gt;
&lt;li&gt;root_dir： 要压缩的文件夹路径（默认当前目录）&lt;/li&gt;
&lt;li&gt;owner： 用户，默认当前用户&lt;/li&gt;
&lt;li&gt;group： 组，默认当前组&lt;/li&gt;
&lt;li&gt;logger： 用于记录日志，通常是logging.Logger对象&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
#将 /&lt;span&gt;data 下的文件打包放置当前程序目录
import shutil
ret &lt;/span&gt;= shutil.make_archive(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data_bak&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gztar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, root_dir=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
  
  
#将 &lt;/span&gt;/data下的文件打包放置 /tmp/&lt;span&gt;目录
import shutil
ret &lt;/span&gt;= shutil.make_archive(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/tmp/data_bak&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gztar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, root_dir=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;shutil 对压缩包的处理是调用 ZipFile 和 TarFile 两个模块来进行的，详细：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('571cbb84-2ef6-493f-808b-9ae70d9f6c31')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_571cbb84-2ef6-493f-808b-9ae70d9f6c31&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_571cbb84-2ef6-493f-808b-9ae70d9f6c31&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('571cbb84-2ef6-493f-808b-9ae70d9f6c31',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_571cbb84-2ef6-493f-808b-9ae70d9f6c31&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import zipfile

# 压缩
z &lt;/span&gt;= zipfile.ZipFile(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;laxi.zip&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
z.write(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
z.write(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data.data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
z.close()

# 解压
z &lt;/span&gt;= zipfile.ZipFile(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;laxi.zip&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
z.extractall(path&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
z.close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;zipfile压缩解压缩&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3a24f1a3-554e-409d-bf17-cf8f56ae1ad8')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_3a24f1a3-554e-409d-bf17-cf8f56ae1ad8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3a24f1a3-554e-409d-bf17-cf8f56ae1ad8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3a24f1a3-554e-409d-bf17-cf8f56ae1ad8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3a24f1a3-554e-409d-bf17-cf8f56ae1ad8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import tarfile

# 压缩
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; t=tarfile.open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/tmp/egon.tar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; t.add(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/test1/a.py&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,arcname=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.bak&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; t.add(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/test1/b.py&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,arcname=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b.bak&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; t.close()


# 解压
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; t=tarfile.open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/tmp/egon.tar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; t.extractall(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/egon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; t.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;tarfile压缩解压缩&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;六、json&amp;amp;pickle模块&lt;/h3&gt;
&lt;p&gt;之前我们学习过用eval内置方法可以将一个字符串转成python对象，不过，eval方法是有局限性的，对于普通的数据类型，json.loads和eval都能用，但遇到特殊类型的时候，eval就不管用了,所以eval的重点还是通常用来执行一个字符串表达式，并返回表达式的值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import json
x&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[null,true,false,1]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
print(eval(x)) #报错，无法解析null类型，而json就可以
print(json.loads(x)) &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;什么是序列化？&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们把对象(变量)从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling，在其他语言中也被称之为serialization，marshalling，flattening等等，都是一个意思。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;为什么要序列化？&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;1：持久保存状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需知一个软件/程序的执行就在处理一系列状态的变化，在编程语言中，'状态'会以各种各样有结构的数据类型(也可简单的理解为变量)的形式被保存在内存中。&lt;/p&gt;
&lt;p&gt;内存是无法永久保存数据的，当程序运行了一段时间，我们断电或者重启程序，内存中关于这个程序的之前一段时间的数据（有结构）都被清空了。&lt;/p&gt;
&lt;p&gt;在断电或重启程序之前将程序当前内存中所有的数据都保存下来（保存到文件中），以便于下次程序执行能够从文件中载入之前的数据，然后继续执行，这就是序列化。&lt;/p&gt;
&lt;p&gt;具体的来说，你玩使命召唤闯到了第13关，你保存游戏状态，关机走人，下次再玩，还能从上次的位置开始继续闯关。或如，虚拟机状态的挂起等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2：跨平台数据交互&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;序列化之后，不仅可以把序列化后的内容写入磁盘，还可以通过网络传输到别的机器上，如果收发的双方约定好实用一种序列化的格式，那么便打破了平台/语言差异化带来的限制，实现了跨平台数据交互。&lt;/p&gt;
&lt;p&gt;反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;如何&lt;span&gt;序列化之json和pickle:&lt;/span&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;json&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML，但更好的方法是序列化为JSON，因为JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。JSON不仅是标准格式，并且比XML更快，而且可以直接在Web页面中读取，非常方便。&lt;/p&gt;
&lt;p&gt;JSON表示的对象就是标准的JavaScript语言的对象，JSON和Python内置的数据类型对应如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1011251/201804/1011251-20180408150621432-1238409106.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1011251/201804/1011251-20180408150636979-1604045498.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Json模块提供了四个功能：dumps、dump、loads、load&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c3be83e9-e4b2-4764-bbdd-24f52dc0511a')&quot; readability=&quot;46.5&quot;&gt;&lt;img id=&quot;code_img_closed_c3be83e9-e4b2-4764-bbdd-24f52dc0511a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c3be83e9-e4b2-4764-bbdd-24f52dc0511a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c3be83e9-e4b2-4764-bbdd-24f52dc0511a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c3be83e9-e4b2-4764-bbdd-24f52dc0511a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;88&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import json
dic &lt;/span&gt;= {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
str_dic &lt;/span&gt;=&lt;span&gt; json.dumps(dic)  #序列化：将一个字典转换成一个字符串
print(type(str_dic),str_dic)  #&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;str&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt; {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;k3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;v3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;k1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;k2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
#注意，json转换完的字符串类型的字典中的字符串是由&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;表示的

dic2 &lt;/span&gt;=&lt;span&gt; json.loads(str_dic)  #反序列化：将一个字符串格式的字典转换成一个字典
#注意，要用json的loads功能处理的字符串类型的字典中的字符串必须由&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;表示
print(type(dic2),dic2)  #&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;dict&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt; {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;k2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;k3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;v3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}


list_dic &lt;/span&gt;= [&lt;span&gt;1&lt;/span&gt;,[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],&lt;span&gt;3&lt;/span&gt;,{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}]
str_dic &lt;/span&gt;=&lt;span&gt; json.dumps(list_dic) #也可以处理嵌套的数据类型 
print(type(str_dic),str_dic) #&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;str&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt; [&lt;span&gt;1&lt;/span&gt;, [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;], &lt;span&gt;3&lt;/span&gt;, {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;k1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;k2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}]
list_dic2 &lt;/span&gt;=&lt;span&gt; json.loads(str_dic)
print(type(list_dic2),list_dic2) #&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt; [&lt;span&gt;1&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;3&lt;/span&gt;, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;k2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}]
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;loads和dumps&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('41f7d2e9-e5aa-4f7c-8a03-c60bd34763fe')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_41f7d2e9-e5aa-4f7c-8a03-c60bd34763fe&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_41f7d2e9-e5aa-4f7c-8a03-c60bd34763fe&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('41f7d2e9-e5aa-4f7c-8a03-c60bd34763fe',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_41f7d2e9-e5aa-4f7c-8a03-c60bd34763fe&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import json
f &lt;/span&gt;= open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;json_file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
dic &lt;/span&gt;= {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
json.dump(dic,f)  #dump方法接收一个文件句柄，直接将字典转换成json字符串写入文件
f.close()

f &lt;/span&gt;= open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;json_file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
dic2 &lt;/span&gt;=&lt;span&gt; json.load(f)  #load方法接收一个文件句柄，直接将文件中的json字符串转换成数据结构返回
f.close()
print(type(dic2),dic2)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;load和dump&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('cb8bf34f-17ec-4bce-ae15-9f0897f0ee17')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_cb8bf34f-17ec-4bce-ae15-9f0897f0ee17&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cb8bf34f-17ec-4bce-ae15-9f0897f0ee17&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('cb8bf34f-17ec-4bce-ae15-9f0897f0ee17',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cb8bf34f-17ec-4bce-ae15-9f0897f0ee17&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import json
#dct&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{'1':111}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#json 不认单引号
#dct&lt;/span&gt;=str({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;111&lt;/span&gt;})#报错,因为生成的数据还是单引号:{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;}

dct&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{&quot;1&quot;:&quot;111&quot;}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
print(json.loads(dct))

#conclusion:
#        无论数据是怎样创建的，只要满足json格式，就可以json.loads出来,不一定非要dumps的数据才能loads&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;注意点&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;pickle&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1011251/201804/1011251-20180408150802428-731194294.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import pickle

dic&lt;/span&gt;={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alvin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}

print(type(dic))#&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;dict&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&lt;span&gt;
 
j&lt;/span&gt;=&lt;span&gt;pickle.dumps(dic)
print(type(j))#&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;bytes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&lt;span&gt;
 
f&lt;/span&gt;=open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;序列化对象_pickle&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)#注意是w是写入str,wb是写入bytes,j是&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bytes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
f.write(j)  #&lt;/span&gt;-------------------&lt;span&gt;等价于pickle.dump(dic,f)

f.close()
#&lt;/span&gt;-------------------------&lt;span&gt;反序列化
import pickle
f&lt;/span&gt;=open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;序列化对象_pickle&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
 
data&lt;/span&gt;=pickle.loads(f.read())#  等价于data=&lt;span&gt;pickle.load(f)
 
 
print(data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]) 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; Pickle的问题和所有其他编程语言特有的序列化问题一样，就是它只能用于Python，并且可能不同版本的Python彼此都不兼容，因此，只能用Pickle保存那些不重要的数据，不能成功地反序列化也没关系。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;七、logging模块&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h3&gt;日志级别&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
CRITICAL = &lt;span&gt;50&lt;/span&gt; #FATAL =&lt;span&gt; CRITICAL
ERROR &lt;/span&gt;= &lt;span&gt;40&lt;/span&gt;&lt;span&gt;
WARNING &lt;/span&gt;= &lt;span&gt;30&lt;/span&gt; #WARN =&lt;span&gt; WARNING
INFO &lt;/span&gt;= &lt;span&gt;20&lt;/span&gt;&lt;span&gt;
DEBUG &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;
NOTSET &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt; #不设置
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;默认级别为warning,默认打印到终端&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import logging

logging.debug(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;调试debug&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logging.info(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;消息info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logging.warning(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;警告warn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logging.error(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;错误error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logging.critical(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;严重critical&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;'''
&lt;/span&gt;&lt;span&gt;WARNING:root:警告warn
ERROR:root:错误error
CRITICAL:root:严重critical
&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;为logging模块指定全局配置，针对所有logger有效，控制打印到文件中&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;可在logging.basicConfig()函数中通过具体参数来更改logging模块默认行为，可用参数有
filename：用指定的文件名创建FiledHandler（后边会具体讲解handler的概念），这样日志会被存储在指定的文件中。
filemode：文件打开方式，在指定了filename时使用这个参数，默认值为“a”还可指定为“w”。
format：指定handler使用的日志显示格式。 
datefmt：指定日期时间格式。 
level：设置rootlogger（后边会讲解具体概念）的日志级别 
stream：用指定的stream创建StreamHandler。可以指定输出到sys.stderr,sys.stdout或者文件，默认为sys.stderr。若同时列出了filename和stream两个参数，则stream参数会被忽略。



#格式
&lt;/span&gt;%&lt;span&gt;(name)s：Logger的名字，并非用户名，详细查看

&lt;/span&gt;%&lt;span&gt;(levelno)s：数字形式的日志级别

&lt;/span&gt;%&lt;span&gt;(levelname)s：文本形式的日志级别

&lt;/span&gt;%&lt;span&gt;(pathname)s：调用日志输出函数的模块的完整路径名，可能没有

&lt;/span&gt;%&lt;span&gt;(filename)s：调用日志输出函数的模块的文件名

&lt;/span&gt;%&lt;span&gt;(module)s：调用日志输出函数的模块名

&lt;/span&gt;%&lt;span&gt;(funcName)s：调用日志输出函数的函数名

&lt;/span&gt;%&lt;span&gt;(lineno)d：调用日志输出函数的语句所在的代码行

&lt;/span&gt;%&lt;span&gt;(created)f：当前时间，用UNIX标准的表示时间的浮 点数表示

&lt;/span&gt;%&lt;span&gt;(relativeCreated)d：输出日志信息时的，自Logger创建以 来的毫秒数

&lt;/span&gt;%(asctime)s：字符串形式的当前时间。默认格式是 “&lt;span&gt;2003&lt;/span&gt;-&lt;span&gt;07&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;49&lt;/span&gt;:&lt;span&gt;45&lt;/span&gt;,&lt;span&gt;896&lt;/span&gt;&lt;span&gt;”。逗号后面的是毫秒

&lt;/span&gt;%&lt;span&gt;(thread)d：线程ID。可能没有

&lt;/span&gt;%&lt;span&gt;(threadName)s：线程名。可能没有

&lt;/span&gt;%&lt;span&gt;(process)d：进程ID。可能没有

&lt;/span&gt;%(message)s：用户输出的消息&lt;/pre&gt;
&lt;pre&gt;
format参数中可能用到的格式化串：
%(name)s Logger的名字
%(levelno)s 数字形式的日志级别
%(levelname)s 文本形式的日志级别
%(pathname)s 调用日志输出函数的模块的完整路径名，可能没有
%(filename)s 调用日志输出函数的模块的文件名
%(module)s 调用日志输出函数的模块名
%(funcName)s 调用日志输出函数的函数名
%(lineno)d 调用日志输出函数的语句所在的代码行
%(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示
%(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数
%(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒
%(thread)d 线程ID。可能没有
%(threadName)s 线程名。可能没有
%(process)d 进程ID。可能没有
%(message)s用户输出的消息




#========使用
import logging
logging.basicConfig(filename='access.log',
                    format='%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S %p',
                    level=10)

logging.debug('调试debug')
logging.info('消息info')
logging.warning('警告warn')
logging.error('错误error')
logging.critical('严重critical')





#========结果
access.log内容:
2017-07-28 20:32:17 PM - root - DEBUG -test:  调试debug
2017-07-28 20:32:17 PM - root - INFO -test:  消息info
2017-07-28 20:32:17 PM - root - WARNING -test:  警告warn
2017-07-28 20:32:17 PM - root - ERROR -test:  错误error
2017-07-28 20:32:17 PM - root - CRITICAL -test:  严重critical

part2: 可以为logging模块指定模块级的配置,即所有logger的配置
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;logging模块的Formatter,Handler，Logger，Filter对象&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;原理图：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1011251/201804/1011251-20180408151634527-584707929.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;logger：产生日志的对象
Filter:过滤日志的对象
Handler:接收日志然后控制打印到不同的地方，FileHandler用来打印到文件中，StreamHandler用来打印到终端
Formatter对象：可以定制不同的日志格式对象，然后绑定给不同的Handler对象使用，以此来控制不同的Handler的日志格式



&lt;/span&gt;&lt;span&gt;'''
&lt;/span&gt;critical=&lt;span&gt;50&lt;/span&gt;&lt;span&gt;
error &lt;/span&gt;=&lt;span&gt;40&lt;/span&gt;&lt;span&gt;
warning &lt;/span&gt;=&lt;span&gt;30&lt;/span&gt;&lt;span&gt;
info &lt;/span&gt;= &lt;span&gt;20&lt;/span&gt;&lt;span&gt;
debug &lt;/span&gt;=&lt;span&gt;10&lt;/span&gt;
&lt;span&gt;'''
&lt;/span&gt;&lt;span&gt;

import logging

#&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、logger对象：负责产生日志，然后交给Filter过滤，然后交给不同的Handler输出
logger&lt;/span&gt;=&lt;span&gt;logging.getLogger(__file__)

#&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;、Filter对象：不常用，略

#&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;、Handler对象：接收logger传来的日志，然后控制输出
h1&lt;/span&gt;=logging.FileHandler(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t1.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) #打印到文件
h2&lt;/span&gt;=logging.FileHandler(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t2.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) #打印到文件
h3&lt;/span&gt;=&lt;span&gt;logging.StreamHandler() #打印到终端

#&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;、Formatter对象：日志格式
formmater1&lt;/span&gt;=logging.Formatter(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    datefmt&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%Y-%m-%d %H:%M:%S %p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)

formmater2&lt;/span&gt;=logging.Formatter(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%(asctime)s :  %(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    datefmt&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%Y-%m-%d %H:%M:%S %p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)

formmater3&lt;/span&gt;=logging.Formatter(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%(name)s %(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)


#&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;、为Handler对象绑定格式
h1.setFormatter(formmater1)
h2.setFormatter(formmater2)
h3.setFormatter(formmater3)

#&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;、将Handler添加给logger并设置日志级别
logger.addHandler(h1)
logger.addHandler(h2)
logger.addHandler(h3)
logger.setLevel(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;)

#&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;、测试
logger.debug(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logger.info(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logger.warning(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;warning&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logger.error(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logger.critical(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;critical&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;Logger与Handler的级别&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;logger是第一级过滤，然后才能到handler，我们可以给logger和handler同时设置level，但是需要注意的是&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e271c160-3f98-489a-a4f8-5bae96714a1e')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_e271c160-3f98-489a-a4f8-5bae96714a1e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e271c160-3f98-489a-a4f8-5bae96714a1e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e271c160-3f98-489a-a4f8-5bae96714a1e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e271c160-3f98-489a-a4f8-5bae96714a1e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
Logger &lt;span&gt;is&lt;/span&gt; also the first to filter the message based on a level — &lt;span&gt;if&lt;/span&gt; you &lt;span&gt;set&lt;/span&gt; the logger to INFO, and all handlers to DEBUG, you still won&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t receive DEBUG messages on handlers — they&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;ll be rejected by the logger itself. If you &lt;span&gt;set&lt;/span&gt; logger to DEBUG, but all handlers to INFO, you won&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t receive any DEBUG messages either — because while the logger says &quot;ok, process this&quot;, the handlers reject it (DEBUG &amp;lt; INFO).&lt;/span&gt;
&lt;span&gt;


#验证
import logging


form&lt;/span&gt;=logging.Formatter(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    datefmt&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%Y-%m-%d %H:%M:%S %p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)

ch&lt;/span&gt;=&lt;span&gt;logging.StreamHandler()

ch.setFormatter(form)
# ch.setLevel(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;)
ch.setLevel(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;)

l1&lt;/span&gt;=logging.getLogger(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
# l1.setLevel(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;)
l1.setLevel(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;)
l1.addHandler(ch)

l1.debug(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;l1 debug&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;重要，重要，重要！！！&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;Logger的继承(了解)&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c82896c2-3e57-4531-b96c-a22988b5f0c5')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_c82896c2-3e57-4531-b96c-a22988b5f0c5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c82896c2-3e57-4531-b96c-a22988b5f0c5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c82896c2-3e57-4531-b96c-a22988b5f0c5',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c82896c2-3e57-4531-b96c-a22988b5f0c5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import logging

formatter&lt;/span&gt;=logging.Formatter(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    datefmt&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%Y-%m-%d %H:%M:%S %p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)

ch&lt;/span&gt;=&lt;span&gt;logging.StreamHandler()
ch.setFormatter(formatter)


logger1&lt;/span&gt;=logging.getLogger(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logger2&lt;/span&gt;=logging.getLogger(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root.child1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logger3&lt;/span&gt;=logging.getLogger(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root.child1.child2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)


logger1.addHandler(ch)
logger2.addHandler(ch)
logger3.addHandler(ch)
logger1.setLevel(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;)
logger2.setLevel(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;)
logger3.setLevel(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;)

logger1.debug(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;log1 debug&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logger2.debug(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;log2 debug&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logger3.debug(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;log3 debug&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;'''
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;07&lt;/span&gt;-&lt;span&gt;28&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; PM - root - DEBUG -&lt;span&gt;test:  log1 debug
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;07&lt;/span&gt;-&lt;span&gt;28&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; PM - root.child1 - DEBUG -&lt;span&gt;test:  log2 debug
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;07&lt;/span&gt;-&lt;span&gt;28&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; PM - root.child1 - DEBUG -&lt;span&gt;test:  log2 debug
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;07&lt;/span&gt;-&lt;span&gt;28&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; PM - root.child1.child2 - DEBUG -&lt;span&gt;test:  log3 debug
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;07&lt;/span&gt;-&lt;span&gt;28&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; PM - root.child1.child2 - DEBUG -&lt;span&gt;test:  log3 debug
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;07&lt;/span&gt;-&lt;span&gt;28&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; PM - root.child1.child2 - DEBUG -&lt;span&gt;test:  log3 debug
&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;了解即可&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;logging应用&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('bddb5b77-7e9a-48d1-bd8a-1776c833f37a')&quot; readability=&quot;45.5&quot;&gt;&lt;img id=&quot;code_img_closed_bddb5b77-7e9a-48d1-bd8a-1776c833f37a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bddb5b77-7e9a-48d1-bd8a-1776c833f37a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('bddb5b77-7e9a-48d1-bd8a-1776c833f37a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bddb5b77-7e9a-48d1-bd8a-1776c833f37a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;86&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;logging配置
&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;
import os
import logging.config

# 定义三种日志输出格式 开始

standard_format &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
                  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%(levelname)s][%(message)s]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; #其中name为getlogger指定的名字

simple_format &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

id_simple_format &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%(levelname)s][%(asctime)s] %(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

# 定义日志输出格式 结束

logfile_dir &lt;/span&gt;=&lt;span&gt; os.path.dirname(os.path.abspath(__file__))  # log文件的目录

logfile_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;all2.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;  # log文件名

# 如果不存在定义的日志目录就创建一个
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; not os.path.isdir(logfile_dir):
    os.mkdir(logfile_dir)

# log文件的全路径
logfile_path &lt;/span&gt;=&lt;span&gt; os.path.join(logfile_dir, logfile_name)

# log配置字典
LOGGING_DIC &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;disable_existing_loggers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: False,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;formatters&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;standard&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: standard_format
        },
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;simple&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: simple_format
        },
    },
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;filters&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {},
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;handlers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        #打印到终端的日志
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;console&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;logging.StreamHandler&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,  # 打印到屏幕
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;formatter&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;simple&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        },
        #打印到文件的日志,收集info及以上的日志
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;logging.handlers.RotatingFileHandler&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,  # 保存到文件
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;formatter&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;standard&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;filename&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: logfile_path,  # 日志文件
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;maxBytes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;1024&lt;/span&gt;*&lt;span&gt;1024&lt;/span&gt;*&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,  # 日志大小 5M
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;backupCount&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;encoding&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,  # 日志文件的编码，再也不用担心中文log乱码了
        },
    },
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loggers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        #logging.getLogger(__name__)拿到的logger配置
        &lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;handlers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;console&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],  # 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;propagate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: True,  # 向上（更高level的logger）传递
        },
    },
}


def load_my_logging_cfg():
    logging.config.dictConfig(LOGGING_DIC)  # 导入上面定义的logging配置
    logger &lt;/span&gt;=&lt;span&gt; logging.getLogger(__name__)  # 生成一个log实例
    logger.info(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;It works!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)  # 记录该文件的运行状态

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    load_my_logging_cfg()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;logging配置文件&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1a517688-68c6-4b8a-b02d-9fa3f0357ff2')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_1a517688-68c6-4b8a-b02d-9fa3f0357ff2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1a517688-68c6-4b8a-b02d-9fa3f0357ff2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1a517688-68c6-4b8a-b02d-9fa3f0357ff2',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1a517688-68c6-4b8a-b02d-9fa3f0357ff2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;MyLogging Test
&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;
import time
import logging
import my_logging  # 导入自定义的logging配置

logger &lt;/span&gt;=&lt;span&gt; logging.getLogger(__name__)  # 生成logger实例


def demo():
    logger.debug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;start range... time:{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(time.time()))
    logger.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;中文测试开始。。。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;):
        logger.debug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;i:{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(i))
        time.sleep(&lt;/span&gt;&lt;span&gt;0.2&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        logger.debug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;over range... time:{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(time.time()))
    logger.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;中文测试结束。。。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
    my_logging.load_my_logging_cfg()  # 在你程序文件的入口加载自定义logging配置
    demo()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;应用&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f07495f3-1dc5-4f1e-8103-c38cbac92f41')&quot; readability=&quot;42.5&quot;&gt;&lt;img id=&quot;code_img_closed_f07495f3-1dc5-4f1e-8103-c38cbac92f41&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f07495f3-1dc5-4f1e-8103-c38cbac92f41&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f07495f3-1dc5-4f1e-8103-c38cbac92f41',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f07495f3-1dc5-4f1e-8103-c38cbac92f41&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;80&quot;&gt;
&lt;pre&gt;
&lt;span&gt;注意注意注意：


#&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、有了上述方式我们的好处是：所有与logging模块有关的配置都写到字典中就可以了，更加清晰，方便管理


#&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;、我们需要解决的问题是：
    &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、从字典加载配置：logging.config.dictConfig(settings.LOGGING_DIC)

    &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;、拿到logger对象来产生日志
    logger对象都是配置到字典的loggers 键对应的子字典中的
    按照我们对logging模块的理解，要想获取某个东西都是通过名字，也就是key来获取的
    于是我们要获取不同的logger对象就是
    logger&lt;/span&gt;=logging.getLogger(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loggers子字典的key名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    
    但问题是：如果我们想要不同logger名的logger对象都共用一段配置，那么肯定不能在loggers子字典中定义n个key   
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loggers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {    
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;l1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;handlers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;console&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],  #
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;propagate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: True,  # 向上（更高level的logger）传递
        },
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;l2: {&lt;/span&gt;
            &lt;span&gt;'&lt;/span&gt;&lt;span&gt;handlers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;console&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ], 
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;propagate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: False,  # 向上（更高level的logger）传递
        },
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;l3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;handlers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;console&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],  #
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;propagate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: True,  # 向上（更高level的logger）传递
        },

}

    
#我们的解决方式是，定义一个空的key
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loggers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;handlers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;console&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;], 
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;propagate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: True, 
        },

}

这样我们再取logger对象时
logging.getLogger(__name__)，不同的文件__name__不同，这保证了打印日志时标识信息不同，但是拿着该名字去loggers里找key名时却发现找不到，于是默认使用key&lt;/span&gt;=&lt;span&gt;''&lt;/span&gt;的配置
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;!!!关于如何拿到logger对象的详细解释！！！&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
另外一个django的配置，瞄一眼就可以，跟上面的一样
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2f4161ab-5a50-4116-acf7-c8514b1e1894')&quot; readability=&quot;57.5&quot;&gt;&lt;img id=&quot;code_img_closed_2f4161ab-5a50-4116-acf7-c8514b1e1894&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2f4161ab-5a50-4116-acf7-c8514b1e1894&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2f4161ab-5a50-4116-acf7-c8514b1e1894',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2f4161ab-5a50-4116-acf7-c8514b1e1894&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;110&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#logging_config.py
LOGGING &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;disable_existing_loggers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: False,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;formatters&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;standard&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
                      &lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%(levelname)s][%(message)s]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;simple&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;collect&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        }
    },
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;filters&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;require_debug_true&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.utils.log.RequireDebugTrue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        },
    },
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;handlers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        #打印到终端的日志
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;console&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;filters&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;require_debug_true&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;logging.StreamHandler&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;formatter&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;simple&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        },
        #打印到文件的日志,收集info及以上的日志
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;INFO&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;logging.handlers.RotatingFileHandler&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,  # 保存到文件，自动切
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;filename&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: os.path.join(BASE_LOG_DIR, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xxx_info.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),  # 日志文件
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;maxBytes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;1024&lt;/span&gt; * &lt;span&gt;1024&lt;/span&gt; * &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,  # 日志大小 5M
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;backupCount&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;formatter&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;standard&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;encoding&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        },
        #打印到文件的日志:收集错误及以上的日志
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ERROR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;logging.handlers.RotatingFileHandler&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,  # 保存到文件，自动切
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;filename&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: os.path.join(BASE_LOG_DIR, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xxx_err.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),  # 日志文件
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;maxBytes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;1024&lt;/span&gt; * &lt;span&gt;1024&lt;/span&gt; * &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,  # 日志大小 5M
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;backupCount&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;formatter&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;standard&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;encoding&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        },
        #打印到文件的日志
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;collect&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;INFO&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;logging.handlers.RotatingFileHandler&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,  # 保存到文件，自动切
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;filename&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: os.path.join(BASE_LOG_DIR, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xxx_collect.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;maxBytes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;1024&lt;/span&gt; * &lt;span&gt;1024&lt;/span&gt; * &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,  # 日志大小 5M
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;backupCount&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;formatter&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;collect&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;encoding&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        }
    },
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loggers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        #logging.getLogger(__name__)拿到的logger配置
        &lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;handlers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;console&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;propagate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: True,
        },
        #logging.getLogger(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;collect&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)拿到的logger配置
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;collect&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;handlers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;console&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;collect&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;INFO&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        }
    },
}


# &lt;/span&gt;-----------&lt;span&gt;
# 用法:拿到俩个logger

logger &lt;/span&gt;=&lt;span&gt; logging.getLogger(__name__) #线上正常的日志
collect_logger &lt;/span&gt;= logging.getLogger(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;collect&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) #领导说,需要为领导们单独定制领导们看的日志
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 08 Apr 2018 07:26:00 +0000</pubDate>
<dc:creator>1024python</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zzzhfo/p/8745222.html</dc:identifier>
</item>
<item>
<title>c#+wpf项目性能优化之OutOfMemoryException解密 - MasonZhang</title>
<link>http://www.cnblogs.com/miketwais/p/wpf_OutOfMemoryException.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/miketwais/p/wpf_OutOfMemoryException.html</guid>
<description>&lt;p&gt;近期，使用c#+wpf开发的软件准备正式投入使用了，使用前进行了大量的测试，测试后发现了一些问题，其中最让人头疼的就是软件的性能问题（稳定性）。&lt;/p&gt;
&lt;p&gt;这里的稳定性具体表现在机器的cpu占有率和内存使用情况：&lt;/p&gt;
&lt;p&gt;1，CPU占用率节节攀升。&lt;/p&gt;
&lt;p&gt;2，可用内存越来越少，最后爆OutOfMemoryException。&lt;/p&gt;
&lt;p&gt;这两点足以影响软件的应用，一日不除，终日不得安宁！&lt;/p&gt;
&lt;p&gt;发现问题后，多方搜寻资料，最终问题解决，这里做一些记录，一来分享给各路开发者，二来记录以备自己查看。&lt;/p&gt;
&lt;p&gt;导致cpu占用率高：&lt;/p&gt;

&lt;p&gt;1.是否有textbox的不断循环中取值，赋值以及ScrollToend，解决方法：将TextBox控件换成ListBox,这样是一行一行插入&lt;/p&gt;
&lt;p&gt;2.搜索代码中是否有while死循环。解决方法：优化代码，删掉死循环，while循环中可以加入&lt;/p&gt;
&lt;p&gt;   system.application.doevent();&lt;/p&gt;
&lt;p&gt;   thread.sleep(100);&lt;/p&gt;
&lt;p&gt;我本人的项目中就是因为存在大量对textBox的操作，而导致的，我将TextBox控件换成ListBox后CPU占用率明显下降。&lt;/p&gt;

&lt;p&gt;导致可用内存越来越少的原因：&lt;/p&gt;
&lt;p&gt;1.界面上很多动画切换效果，如：gif动画的帧切换，解决方法gif动画暂用大量内存，需要及时释放，尽量少用gif&lt;/p&gt;
&lt;p&gt;2.界面上显示很多图片，图片资源未回收，解决方法：释放图片资源&lt;/p&gt;
&lt;p&gt; 　　　　一：将Image类转换成Bitmap类&lt;br/&gt;　　　　System.Drawing.Image img = System.Drawing.Image.FromFile(filepath);&lt;br/&gt;　　　　System.Drawing.Image bmp = new System.Drawing.Bitmap(img);&lt;br/&gt;　　　　img.Dispose();&lt;br/&gt;　　　　然后使用 bmp作为PictureBox的图片源&lt;br/&gt;　　　　二：从流中读取&lt;br/&gt;　　　　FileStream fileStream = new FileStream(&quot;文件名&quot;, FileMode.Open, FileAccess.Read);&lt;br/&gt;　　　　pictureBox1.Image = Image.FromStream(fileStream);&lt;br/&gt;　　　　fileStream.Close();&lt;br/&gt;　　　　fileStream.Dispose(); &lt;/p&gt;
&lt;p&gt;3.非托管资源及其内存回收，对可能多次调用的类，应该严格按照“清理模式”格式书写，保证类资源被及时释放：&lt;/p&gt;
&lt;p&gt;　　　　标准的清理模式(~dispose)写法：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_e6f8ac2a-6563-4d62-b849-6e854b2ce557&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e6f8ac2a-6563-4d62-b849-6e854b2ce557&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e6f8ac2a-6563-4d62-b849-6e854b2ce557&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;MyClass:IDisposable
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; disposed = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;~&lt;span&gt;MyClass()
        {
            Dispose(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
        }
    
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Dispose()
        {
           Dispose(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
           GC.SuppressFinalize(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        }
       
       &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Dispose(&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; disposing)
       {
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;（disposed == &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
          {
               &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;（disposing == &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
               {
                  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 释托管代码&lt;/span&gt;
&lt;span&gt;                  ......
               }
              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 释非代码&lt;/span&gt;
&lt;span&gt;             ......
          }
          disposed &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
       }
   }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;4.确保万无一失，使用using(){}来引用类，使用方法：&lt;/p&gt;
&lt;p&gt;　　　　using(classA a =new classA()){&lt;br/&gt;　　　　　　//用完后就释放&lt;br/&gt;　　　　}&lt;br/&gt;　　　　只有继承:IDisposable的类才能用using&lt;/p&gt;
&lt;p&gt;5.网上给出了一个强制回收内存的方法，貌似看起来内存占用是减少了，一调用内存就降下来。先别高兴太早，这其实是伪释放，只为暂时解决内存大量泄露导致系统崩溃而急需解决的情况。&lt;br/&gt;具体原因：&lt;a href=&quot;http://blog.sina.com.cn/s/blog_49f8960e0100081x.html&quot; target=&quot;_blank&quot;&gt;http://blog.sina.com.cn/s/blog_49f8960e0100081x.html&lt;/a&gt;，关键字：将物理内存转到虚拟内存，涉及磁盘读写。&lt;/p&gt;
&lt;p&gt;ps:为了好看一点，我们可以加进去！&lt;/p&gt;
&lt;p&gt;　　具体代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_91f546b0-d462-419f-a943-deefe627c384&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_91f546b0-d462-419f-a943-deefe627c384&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_91f546b0-d462-419f-a943-deefe627c384&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
[DllImport(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;kernel32.dll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, EntryPoint = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SetProcessWorkingSetSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; SetProcessWorkingSetSize(IntPtr process, &lt;span&gt;int&lt;/span&gt; minSize, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; maxSize);
&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 释放内存
&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ClearMemory()
{
    GC.Collect();
    GC.WaitForPendingFinalizers();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Environment.OSVersion.Platform ==&lt;span&gt; PlatformID.Win32NT)
    {
 SetProcessWorkingSetSize(System.Diagnostics.Process.GetCurrentProcess().Handle, &lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;6.最后的杀手锏，查看软件中是否调用过什么开源插件，升级插件到稳定版本。&lt;/p&gt;
&lt;p&gt;　　本人项目中就遇到这个问题，本人项目中使用了cefsharp插件，期初使用的是低版本，这次索性升级到最新版本，然后将.net框架也升级了（其中也遇到了一些问题，NuGet资源下载慢，.net升级后与原来的部分库文件不匹配等，打怪升级各个击破吧！），然后就奇迹的解决了问题，所以最后结论就是需要不断的尝试和改进，寻找一切可能的突破口来解决问题。&lt;/p&gt;

&lt;p&gt;-------------------------------分隔线-----------------------&lt;/p&gt;
&lt;p&gt;写在最后：对于c#程序的性能优化工作，我们可以多实用工具，工欲善其事必先利其器，如：&lt;/p&gt;
&lt;p&gt;1.vs自带的性能分析工具：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/489086/201804/489086-20180408145154615-444492557.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;分析-&amp;gt;诊断，按照指导操作。&lt;/p&gt;
&lt;p&gt;2.ANTS Performance Profiler和ANTS Memory Profiler，分别用来做性能分析和内存占用分析，讲具体操作方法自行百度，能够准确找到性能瓶颈所在。&lt;/p&gt;
&lt;p&gt;3.DotTrace,和上面的工具类似。&lt;/p&gt;
&lt;p&gt;4.可以安装.net reflection来查看dll具体方法（可能会导致vs无法调试）&lt;/p&gt;
</description>
<pubDate>Sun, 08 Apr 2018 07:00:00 +0000</pubDate>
<dc:creator>MasonZhang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/miketwais/p/wpf_OutOfMemoryException.html</dc:identifier>
</item>
<item>
<title>SpringBoot14 SpringBoot整合mybatis - NeverCtrl_C</title>
<link>http://www.cnblogs.com/NeverCtrl-C/p/8744851.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NeverCtrl-C/p/8744851.html</guid>
<description>
&lt;h2&gt;1 版本说明&lt;/h2&gt;
&lt;p&gt;　　springboot：2.0&lt;/p&gt;
&lt;p&gt;　　jdk：1.8&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201804/1057762-20180408132136915-356900391.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;2 创建springBoot项目&lt;/h3&gt;
&lt;p&gt;　　创建项目时勾选必要web，MySQL，mybatis相关依赖&lt;/p&gt;
&lt;p&gt;　　创建完成后再pom文件中添加自动部署、lombok相关依赖&lt;/p&gt;
&lt;h3&gt;　　2.1 编写测试类&lt;/h3&gt;
&lt;p&gt;　　　　技巧01：项目创建成功后先将mybatis和mysql相关的jar注释掉，在到控制层中创建一个简单的测试类来确认项目是否创建成功&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.test.demo.mybatis_demo02.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.GetMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 王杨帅
 * @create 2018-04-08 7:53
 * @desc 控制层测试类
 *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RestController
@RequestMapping(value &lt;/span&gt;= &quot;/test&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestController {

    @GetMapping(value &lt;/span&gt;= &quot;/test01&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String test01() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;HELLO BOY&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　2.2 配置文件信息&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server.port=9999
server.servlet.path=/dev

jdbc.driver=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://127.0.0.1:3306/testdemo?useUnicode=true&lt;/span&gt;&lt;span&gt;&amp;amp;characterEncoding&lt;/span&gt;=UTF-8&amp;amp;&lt;span&gt;&amp;amp;useSSL&lt;/span&gt;&lt;span&gt;=false
jdbc.username=root
jdbc.password=root

mabatis_config_file=mybatis-config.xml
mapper_path=/mapper/**.xml
entity_package=cn.test.demo.mybatis_demo02.entity&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;3 创建数据库&lt;/h2&gt;
&lt;p&gt;　　根据springboot的配置信息，创建一个数据库；并在数据库中创建一个表&lt;/p&gt;
&lt;p&gt;　　技巧01：必须在springboot配置文件中配置的那个数据库中进行数据表的创建&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
Navicat MySQL Data Transfer

Source Server         : mysql5.4
Source Server Version : 50540
Source Host           : localhost:3306
Source Database       : testdemo

Target Server Type    : MYSQL
Target Server Version : 50540
File Encoding         : 65001

Date: 2018-04-08 13:33:08
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;SET&lt;/span&gt; FOREIGN_KEY_CHECKS&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; Table structure for `tb_area`&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;
&lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;&lt;span&gt; `tb_area`;
&lt;/span&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `tb_area` (
  `area_id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
  `area_name` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;200&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `priority` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `create_time` &lt;/span&gt;&lt;span&gt;datetime&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `last_edit_time` &lt;/span&gt;&lt;span&gt;datetime&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`area_id`)
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;InnoDB AUTO_INCREMENT&lt;span&gt;=&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;&lt;span&gt;utf8mb4;

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; Records of tb_area&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;
&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `tb_area` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;东苑&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2018-03-07 08:50:37&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2018-04-08 13:28:58&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `tb_area` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;南苑&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2018-04-08 09:44:48&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2018-04-08 09:44:48&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;4 创建实体类&lt;/h2&gt;
&lt;p&gt;　　技巧01：可以利用mybatis提供的生成器来自动生成entity、dao、xml、service、controller对应的代码，具体步骤请参见上一篇博文&lt;/p&gt;
&lt;p&gt;　　技巧02：在编写代码时可以开启代码提示&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201804/1057762-20180408133841039-342638690.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_be36e421-8e69-4aa5-99b8-6304028aaa95&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_be36e421-8e69-4aa5-99b8-6304028aaa95&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_be36e421-8e69-4aa5-99b8-6304028aaa95&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.test.demo.mybatis_demo02.entity;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 王杨帅
 * @create 2018-04-08 8:40
 * @desc
 *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Area {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    @TableId(value=&quot;area_id&quot;, type= IdType.AUTO)&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer areaId;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    @TableField(&quot;area_name&quot;)&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String areaName;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer priority;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    @TableField(&quot;create_time&quot;)&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date createTime;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    @TableField(&quot;last_edit_time&quot;)&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date lastEditTime;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAreaId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; areaId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAreaId(Integer areaId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.areaId =&lt;span&gt; areaId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getAreaName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; areaName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAreaName(String areaName) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.areaName =&lt;span&gt; areaName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getPriority() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; priority;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPriority(Integer priority) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.priority =&lt;span&gt; priority;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Date getCreateTime() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; createTime;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCreateTime(Date createTime) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.createTime =&lt;span&gt; createTime;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Date getLastEditTime() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lastEditTime;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLastEditTime(Date lastEditTime) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.lastEditTime =&lt;span&gt; lastEditTime;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Area{&quot; +
                &quot;areaId=&quot; + areaId +
                &quot;, areaName='&quot; + areaName + '\'' +
                &quot;, priority=&quot; + priority +
                &quot;, createTime=&quot; + createTime +
                &quot;, lastEditTime=&quot; + lastEditTime +
                '}'&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;5 配置部分&lt;/h2&gt;
&lt;h3&gt;　　5.1 POM配置&lt;/h3&gt;
&lt;p&gt;　　　　保证pom.xml文件中有mybatis、mysql、mysql驱动这三个对应的依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;mysql数据库&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;runtime&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;数据库连接池&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.mchange&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;c3p0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.9.5.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;mybatis&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis.spring.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　5.2 mybatis相关配置&lt;/h3&gt;
&lt;p&gt;　　　　在ersources文件夹中创建一个mybatis-config.xml文件用来mybatis相关的配置&lt;/p&gt;
&lt;p&gt;　　　　技巧01：在项目启动的时候会自动加载resources中的文件进行全局的配置，所有mybatis的配置文件也会被加载&lt;/p&gt;
&lt;h4&gt;　　　　5.2.1 &amp;lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;true&quot;/&amp;gt;&lt;/h4&gt;
&lt;p&gt;　　　　　　开启JDBC的getGeneratedKeys获取数据库自增主键，即：当我们新增一条数据时会自动设置主键值&lt;/p&gt;
&lt;h4&gt;　　　　5.2.2 &amp;lt;setting name=&quot;useColumnLabel&quot; value=&quot;ture&quot; /&amp;gt;&lt;/h4&gt;
&lt;p&gt;　　　　　　使用列标签替换列别名&lt;/p&gt;
&lt;h4&gt;　　　　5.2.3 &amp;lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot; /&amp;gt;&lt;/h4&gt;
&lt;p&gt;　　　　　　开启驼峰转换，即：数据库中的字段名全部是小写和下划线组成，实体类中的属性全部使用驼峰原则时他们之间就会是一一对应的关系&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot; &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;使用JDBC的getGeneratedKeys获取数据库自增主键&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;useGeneratedKeys&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;使用列标签替换列别名&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;useColumnLabel&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;ture&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;开启驼峰转换&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;mapUnderscoreToCamelCase&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　5.3 DataSource配置和SqlSessionFactory配置&lt;/h3&gt;
&lt;p&gt;　　　　由于我们使用c3p0作为数据库连接池，所以我们在配置DataSource直接对成c3p0的连接信息进行配置即可&lt;/p&gt;
&lt;h4&gt;　　　　5.3.1 创建一个DataSourceConfiguration类来配置DataSource&lt;/h4&gt;
&lt;p&gt;　　　　　　注意：类名可以随便取&lt;/p&gt;
&lt;p&gt;　　　　　　技巧01：在启动类同一级别或启动类下面级别的地方创建一个config包来存放java配置类&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201804/1057762-20180408135339709-963468678.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　技巧02：java配置类需要在类上添加&lt;span&gt;@Configuration&lt;/span&gt;注解来指明该类是一个配置类&lt;/p&gt;
&lt;p&gt;　　　　　　技巧03：DataSourceConfiguration配置类说明&lt;/p&gt;
&lt;p&gt;　　　　　　　　》生成一个DataSource实例并注入到Bean容器中&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　技巧01：向数据库连接信息，我们可以把它放到springboot的全局配置文件中去，然后在需要用到的地方通过@Value注解来获取获取，这样就可以做到一改全改的作用　　&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201804/1057762-20180408140242334-1095742342.png&quot; alt=&quot;&quot;/&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201804/1057762-20180408140302483-418066832.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　技巧02：DataSource配置类上还需要利用&lt;span&gt;@MapperScan&lt;/span&gt;注解来配置mapper映射器的扫描路径，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
@MapperScan(&quot;cn.test.demo.mybatis_demo02.dao&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mapper映射器的扫描路径&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201804/1057762-20180408135903149-890917198.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_31ba2b31-977b-4ce2-a70e-3f0f8ec6791a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_31ba2b31-977b-4ce2-a70e-3f0f8ec6791a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_31ba2b31-977b-4ce2-a70e-3f0f8ec6791a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.test.demo.mybatis_demo02.config.dao;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.mchange.v2.c3p0.ComboPooledDataSource;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.mybatis.spring.annotation.MapperScan;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Value;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.sql.CommonDataSource;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.beans.PropertyVetoException;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 王杨帅
 * @create 2018-04-08 8:09
 * @desc DataSource配置
 *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Configuration
@MapperScan(&lt;/span&gt;&quot;cn.test.demo.mybatis_demo02.dao&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mapper映射器的扫描路径&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DataSourceConfiguration {

    @Value(&lt;/span&gt;&quot;${jdbc.driver}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String jdbcDriver;
    @Value(&lt;/span&gt;&quot;${jdbc.password}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String jdbcPassword;
    @Value(&lt;/span&gt;&quot;${jdbc.username}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String jdbcUsername;
    @Value(&lt;/span&gt;&quot;${jdbc.url}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String jdbcUrl;

    @Bean(name &lt;/span&gt;= &quot;dataSource&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ComboPooledDataSource createDataSource() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; PropertyVetoException {
        ComboPooledDataSource dataSource &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ComboPooledDataSource();
        dataSource.setDriverClass(jdbcDriver);
        dataSource.setJdbcUrl(jdbcUrl);
        dataSource.setUser(jdbcUsername);
        dataSource.setPassword(jdbcPassword);
        dataSource.setAutoCommitOnClose(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭连接后不会自动进行事务提交&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; dataSource;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　　　5.3.2 创建一个&lt;span&gt;crateSqlSessionFactoryBean&lt;/span&gt;类来配置S&lt;span&gt;qlSessionFactory&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　　　　　注意：类名可以随便取&lt;/p&gt;
&lt;p&gt;　　　　　　技巧01：java配置类需要在类上添加&lt;span&gt;@Configuration注解&lt;/span&gt;来指明该类是一个配置类&lt;/p&gt;
&lt;p&gt;　　　　　　技巧02：在配置SqlSessionFactoryBean时需要用到DataSrouce实例，所以需要在配置SqlSessionFactoryBean的配置类依赖注入DataSrouce实例，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Autowired
    @Qualifier(&lt;/span&gt;&quot;dataSource&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; DataSource dataSource;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　技巧03：配置说明&lt;/p&gt;
&lt;p&gt;　　　　　　　　》SqlSessionFactoryBean并注入到Bean容器中&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201804/1057762-20180408141144494-1455367901.png&quot; alt=&quot;&quot; width=&quot;865&quot; height=&quot;174&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_54c6e30a-e3c5-41df-8fc1-404503099ca6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_54c6e30a-e3c5-41df-8fc1-404503099ca6&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_54c6e30a-e3c5-41df-8fc1-404503099ca6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.test.demo.mybatis_demo02.config.dao;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.mybatis.spring.SqlSessionFactoryBean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.mybatis.spring.annotation.MapperScan;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Qualifier;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Value;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.core.io.ClassPathResource;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.core.io.support.PathMatchingResourcePatternResolver;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.sql.DataSource;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 王杨帅
 * @create 2018-04-08 8:22
 * @desc SessionFactory配置类
 *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Configuration
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@MapperScan&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SessionFactoryConfiguration {
    @Value(&lt;/span&gt;&quot;${mabatis_config_file}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String mybatisConfigFilePath;
    @Value(&lt;/span&gt;&quot;${mapper_path}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String mapperPath;
    @Value(&lt;/span&gt;&quot;${entity_package}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String entityPackage;

    @Autowired
    @Qualifier(&lt;/span&gt;&quot;dataSource&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; DataSource dataSource;

    @Bean(name &lt;/span&gt;= &quot;sqlSessionFactory&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; SqlSessionFactoryBean crateSqlSessionFactoryBean() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        SqlSessionFactoryBean sqlSessionFactoryBean &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SqlSessionFactoryBean(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建SqlSessionFactoryBean实例&lt;/span&gt;
        sqlSessionFactoryBean.setConfigLocation(&lt;span&gt;new&lt;/span&gt; ClassPathResource(mybatisConfigFilePath)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  扫描mybatis配置文件

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        设置mapper映射器对应的XML文件的扫描路径&lt;/span&gt;
        PathMatchingResourcePatternResolver resolver = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PathMatchingResourcePatternResolver();
        String packageSearchPath &lt;/span&gt;= PathMatchingResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +&lt;span&gt; mapperPath;
        sqlSessionFactoryBean.setMapperLocations(resolver.getResources(packageSearchPath));

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        设置数据库连接信息&lt;/span&gt;
&lt;span&gt;        sqlSessionFactoryBean.setDataSource(dataSource);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        设置实体类扫描路径&lt;/span&gt;
&lt;span&gt;        sqlSessionFactoryBean.setTypeAliasesPackage(entityPackage);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sqlSessionFactoryBean;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　　　》将扫描路径配置到springboot的全局配置配置文件中，然后利用@Value去获取即可，这样既可以实现一改全改的效果；例如：&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201804/1057762-20180408141956289-418927035.png&quot; alt=&quot;&quot;/&gt;   &lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201804/1057762-20180408142012090-514435977.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201804/1057762-20180408142109025-335529686.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　》@Autowired进行依赖注入的时候可以利用&lt;span&gt;@Qualifier&lt;/span&gt;指定名字，例如：　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Autowired
    @Qualifier(&lt;/span&gt;&quot;dataSource&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; DataSource dataSource;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;6 创建Dao层代码&lt;/h2&gt;
&lt;p&gt;　　Dao层在使用mybatis实现时也叫作Mapper映射器，其实Mapper映射器就是一个接口而已&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.test.demo.mybatis_demo02.dao;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.test.demo.mybatis_demo02.entity.Area;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.sun.applet2.preloader.event.InitEvent;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; 王杨帅
 * @create 2018-04-08 8:42
 * @desc
 *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; AreaDao {
    List&lt;/span&gt;&amp;lt;Area&amp;gt;&lt;span&gt; queryArea();
    Area queryById(Integer areaId);
    Integer insertArea(Area area);
    Integer updateArea(Area area);
    Integer deleteArea(Integer areaId);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;7 创建XML文件代码&lt;/h2&gt;
&lt;p&gt;　　一个XML文件和一个Mapper映射器对应，具体这么对应请参见mybatis先关博文&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_c902d6f7-3145-4880-9f30-59752649525f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c902d6f7-3145-4880-9f30-59752649525f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c902d6f7-3145-4880-9f30-59752649525f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;cn.test.demo.mybatis_demo02.dao.AreaDao&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;



    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 通用查询映射结果 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;org.ibase4j.entity.TbArea&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;id column=&quot;area_id&quot; property=&quot;areaId&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;result column=&quot;area_name&quot; property=&quot;areaName&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;result column=&quot;priority&quot; property=&quot;priority&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;result column=&quot;create_time&quot; property=&quot;createTime&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;result column=&quot;last_edit_time&quot; property=&quot;lastEditTime&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;/resultMap&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;


    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryArea&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;cn.test.demo.mybatis_demo02.entity.Area&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT
          *
        FROM
          tb_area
        ORDER BY
          priority
        DESC
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryById&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;cn.test.demo.mybatis_demo02.entity.Area&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        SELECT
          *
        FROM
          tb_area
        WHERE
          area_id = #{areaId}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;insertArea&quot;&lt;/span&gt;&lt;span&gt;
            useGeneratedKeys&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; keyProperty&lt;/span&gt;&lt;span&gt;=&quot;areaId&quot;&lt;/span&gt;&lt;span&gt; keyColumn&lt;/span&gt;&lt;span&gt;=&quot;area_id&quot;&lt;/span&gt;&lt;span&gt;
            parameterType&lt;/span&gt;&lt;span&gt;=&quot;cn.test.demo.mybatis_demo02.entity.Area&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      INSERT INTO
        tb_area(area_name, priority, create_time, last_edit_time)
      VALUES
        (#{areaName}, #{priority}, #{createTime}, #{lastEditTime})
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;updateArea&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;cn.test.demo.mybatis_demo02.entity.Area&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      UPDATE tb_area
      &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;areaName!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;area_name=#{areaName},&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;priority!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;priority=#{priority},&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;lastEditTime!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;last_edit_time=#{lastEditTime}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      WHERE
        area_id = #{areaId}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;delete &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;deleteArea&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      DELETE FROM
        tb_area
      WHERE
        area_id = #{areaId}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;h4&gt;8 创建Dao层测试类&lt;/h4&gt;
&lt;p&gt;　　坑01：在测试类中进行依赖注入时可能会报错，报错信息为：找不到相关的Bean&lt;/p&gt;
&lt;p&gt;　　原因：IDEA是一个比较智能的编辑器，所以在进行依赖注入的时候就会检查需要注入的Bean在容器中是否存在，如果不存在就会报出这样的错误；但是由于IDEA的该功能还不够完善所以即使Bean容器有对应的Bean也会报出找不到相关Bean的错误&lt;/p&gt;
&lt;p&gt;　　解决办法：将IDEA这个功能的报错级别调低，调成warning即可，例如：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201804/1057762-20180408143130745-2021093396.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_60c0c983-61ae-4f52-bd84-1cc07e01a30d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_60c0c983-61ae-4f52-bd84-1cc07e01a30d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_60c0c983-61ae-4f52-bd84-1cc07e01a30d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package cn.test.demo.mybatis_demo02.dao;

import cn.test.demo.mybatis_demo02.entity.Area;
import lombok.extern.slf4j.Slf4j;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;


import java.util.Date;
import java.util.List;

import static org.junit.Assert.*;

@RunWith(SpringRunner.class)
@SpringBootTest
@Slf4j
public class AreaDaoTest {

    @Autowired
    private AreaDao areaDao;

    @Test
    public void queryArea() throws Exception {
        List&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Area&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; areaList = areaDao.queryArea();
//        assertEquals(1, areaList.size());
        log.info(&quot;获取到的数据为：{}&quot;, areaList);
    }

    @Test
    public void queryById() throws Exception {
        Area area = areaDao.queryById(1);
        log.info(&quot;获取到的数据为：{}&quot;,area.toString());
    }

    @Test
//    @Ignore
    public void insertArea() throws Exception {
        Area area = new Area();
        area.setAreaName(&quot;南苑&quot;);
        area.setPriority(1);
        area.setCreateTime(new Date());
        area.setLastEditTime(new Date());
        Integer result = areaDao.insertArea(area);
        log.info(&quot;插入完成的数据为：{}&quot;, result);
    }

    @Test
    public void updateArea() throws Exception {
        Area area = new Area();
        area.setAreaName(&quot;东苑&quot;);
        area.setLastEditTime(new Date());
        area.setAreaId(1);
        Integer result = areaDao.updateArea(area);
        log.info(&quot;更新完成后得到的结果为：{}&quot;, result);
    }

    @Test
    public void deleteArea() throws Exception {
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 08 Apr 2018 06:33:00 +0000</pubDate>
<dc:creator>NeverCtrl_C</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NeverCtrl-C/p/8744851.html</dc:identifier>
</item>
<item>
<title>&quot;双非&quot;应届生校招如何获得大厂青睐?（内附技术岗超全求职攻略） - 海枯</title>
<link>http://www.cnblogs.com/haiku/p/8744608.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/haiku/p/8744608.html</guid>
<description>&lt;h2 id=&quot;写在前面的话&quot;&gt;写在前面的话&lt;/h2&gt;
&lt;p&gt;笔者从17年的2月份开始准备春招，其中遇到不少坑，也意识到自己走过的弯路。故写了这篇文章总结一番，本文适合主动学习的，对自己要学的课程不明确的，对面试有恐惧症的...等将来打算从事技术岗位的同学们。&lt;/p&gt;
&lt;h2 id=&quot;正文开始&quot;&gt;正文开始&lt;/h2&gt;
&lt;p&gt;为什么要准备校招？社招不一样能够进入大公司吗？对于一些不懂校招这个概念的人来说，经常会问这个问题。同时，大公司的校招薪水一般比工作2年经验社招的人还高，为什么企业会给一个没经验的应届毕业生这么高的薪水？理由何在？理清这些问题之前，我们先来看看校招是一个什么概念？&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;校园招聘是企业直接从学校招聘各类各层次应届毕业生。校招每年时间比较固定，即春季校招（三四月份）和秋季秋招（九到十二月份）。在原则上，春季校招大部分岗位是面向大三与研二（研三毕业）的同学，对这部分的同学提供实习的岗位。少部分企业由于秋招签约率不高或者业务剧增，会针对大四与研三的同学进行补招。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;而秋季秋招主要针对大四与研三的同学（这里以每年的九月份来分隔年级），对这部分同学提供的是毕业之后的正职工作。拿到秋招offer的同学，如确定入职需与用人单位签署三方协议，以保证双方的利益不受损失。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有校招需求的企业一般是发展规模较为成型的企业，不论是成熟运作的传统企业，或年轻但已然庞大的互联网公司。在较为成熟的企业管理下，分工细致，完善地各种福利补贴制度，以及专业的导师制培养人才的策略，这些因素无疑能带给应届生们更好的成长。&lt;/p&gt;
&lt;p&gt;同时，应届生在校空闲时间多，能学的东西更多，工作之后业务繁多能真正挤出来自主学习的时间太少，计算机基础的课程篇幅过多，出来工作之后就没时间、没精力学了。&lt;/p&gt;
&lt;p&gt;而这些计算机基础课程却是成为业界大牛的必经之路，没学这种基础知识，很多东西的底层原理我们是没办法摸透的，这也是为什么互联网BAT大厂重视计算机基础的一个原因。&lt;/p&gt;
&lt;p&gt;基础扎实工作之后很多东西很快就可以上手，所以很多互联网大厂宁愿把招聘精力放在校招，而不是社招；其二，应届生作为新鲜血液一般还没有成家，固然能为公司做更大的贡献。&lt;/p&gt;
&lt;h2 id=&quot;如何准备校招&quot;&gt;如何准备校招？&lt;/h2&gt;
&lt;p&gt;既然校招这么重要，那我们应该怎么准备校招呢？&lt;/p&gt;
&lt;p&gt;要想在校招中取胜，笔者觉得有几个方面是比较重要的：视野+专注+方法论+心态&lt;/p&gt;
&lt;h3 id=&quot;视野&quot;&gt;1.视野&lt;/h3&gt;
&lt;p&gt;视野的开阔指对一件事物认知的广度，要对业界有一定的了解，才能明确我们的求知方向；否则一味地蛮干，最后只会南辕北辙。举个例子：对于非一本学校的某些同学来说，可能都不知道校招是怎么一回事，身边的老师也没有跟同学们灌输这些思想，不关注技术社区的同学可能就不知道。导致的后果就是不清楚大厂注重的是哪方面的知识（大厂考察的知识一般来说对技术发展很有意义），水平停滞不前，最后毕业去了家不太理想的公司。&lt;/p&gt;
&lt;p&gt;很多东西都是这样，身边的人不可能全部传授给你，需要你带着一份热情不断地去挖掘。我们可以在空闲的时间里，去各种技术社区以及一些问答平台上刷刷动态从而不断地开阔我们的视野，比如说：在知乎平台上我们可以看到某些前辈的回答，一般这种回答都具有建设性意义，有时候抛开一些现成的观念，去接受一些新观念何妨不是一件好事呢？&lt;/p&gt;
&lt;p&gt;同时，我们可以在社交平台上结交一些应届生“大佬”，询问他们各种学习方法，一般“大佬”都会很热情的帮助你。混熟了以后，可以跟“大佬”交流下面试心得、学习心得等等的东西，不得不说与同类型的人交流是成长最快的一种方式。&lt;/p&gt;
&lt;h3 id=&quot;专注&quot;&gt;2.专注&lt;/h3&gt;
&lt;p&gt;专注是指在技术方面投入的时间成本。我们都不是圣人，只有不断地去学习与训练才能更大程度地去提升自我。当我们对一件事物有热情时，我们都愿意把所有时间花在它上面。就如我们看上了一个漂亮的女生，对她产生好感了，我们会想尽一切办法去讨好她。&lt;/p&gt;
&lt;p&gt;在技术方面也是这样的，对于我们不感兴趣的方向我们从不会主动地去学习，保持对技术的热情才能达到持续的产出。有一句话说的好：时间花在哪里，成就就在哪里。A同学在课后每天都花8小时专研技术，而B同学每天只在课堂上学习。很明显这两人的差距只会越来越大，放心地去努力吧，付出了肯定会有回报的，回报未到只是时候未到。&lt;/p&gt;
&lt;p&gt;专注还指对某一领域的专注程度。我们应该对自己以后想从事的职位有一个大概的方向，从而对这个方向应具备的技能进行钻研。有时候看到部分同学既写前端代码，又写PHP后端代码，又写一点硬件底层C语言代码，精力太分散了到最后很难做到每样东西都精通。大厂对应届生的要求还不至于做到全栈工程师的程度，能做到熟悉一领域的开发已经很不错了，当然懂的越多是一个加分项（但非必备）。&lt;/p&gt;
&lt;p&gt;反观大厂对应届生的要求是熟悉计算机专业的必修课，诸如：数据库原理、操作系统原理、数据结构与算法、计算机网络等，这类知识可能比较枯燥学起来没什么劲，但却是必备的，其能为以后工作发展铺路。当然每个岗位所要求的侧重点不同，但却百变不离其宗。对这种基础知识要学到哪种程度呢？&lt;/p&gt;
&lt;p&gt;是不是考试考到80分以上就代表这门课掌握得不错呢？不是这样的，考试的考点是有局限性的，我们应该通过看一些巨献读物来全面学习。看完之后我们可以通过看别人的面试经历（后面简称“面经”）来检测自己是否掌握这些知识点。&lt;/p&gt;
&lt;p&gt;对于不会的知识点，建议大家可以过一遍书本的内容，书本讲的内容一般比较详细。不建议通过搜索引擎查询这种与理论相关的内容，因为大部分搜出来的结果都是摘抄书本的文字。面试服务端开发时，经常会被问到数据库索引的底层实现原理。很多同学可能会问：“为什么要搞懂这些原理性的东西？我会怎么用不就行了吗？”。只懂使用API的人永远是搬运工，工程师最大的使命是去创造，研究原理的时候我们能了解到先人的设计初衷，从而能更快速地在线上出现性能问题的时候根据原理排查问题。&lt;/p&gt;
&lt;h3 id=&quot;方法论&quot;&gt;3.方法论&lt;/h3&gt;
&lt;p&gt;要想达成某个目标都有其特定的方法论，学习技术也不例外，掌握适当的学习方法才能事半功倍。&lt;br/&gt;我们需要形成一个完整的知识体系，强烈建议大家读一些巨献读物，其讲的内容很详细，不会漏掉某些知识点。&lt;br/&gt;读完一章节后建议大家可以做做笔记，坚持读完一本书你会发现受益匪浅，以下是一些巨献读物的推荐：&lt;/p&gt;
&lt;h4 id=&quot;javascript&quot;&gt;JavaScript&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;JavaScript高级程序设计（入门前端必读读物）&lt;/li&gt;
&lt;li&gt;你不知道的JavaScript系列（带你探索JavaScript的黑魔法）&lt;/li&gt;
&lt;li&gt;JavaScript设计模式与开发实践（让你的代码锦上添花）&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;计算机网络&quot;&gt;计算机网络&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;图解HTTP（Web开发必会）&lt;/li&gt;
&lt;li&gt;计算机网络（第五版）作者：谢希仁&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;数据结构&quot;&gt;数据结构&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;网易云课堂浙大的数据结构课程（推荐，基础视频，每节课的配套题目必须独立完成）&lt;/li&gt;
&lt;li&gt;大话数据结构（推荐，但是感觉不如浙大的视频讲解）&lt;/li&gt;
&lt;li&gt;算法4（推荐，书籍代码是Java语言，不影响理解）&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;算法&quot;&gt;算法&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;剑指offer（看完之后你会发现面试会遇到原题）&lt;/li&gt;
&lt;li&gt;程序员代码面试指南（作者：左程云，里面讲的比剑指深入一点）&lt;/li&gt;
&lt;li&gt;LeetCode（看完剑指可以进阶算法）&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;数据库&quot;&gt;数据库：&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;数据库概论（基础，重在了解概念）&lt;/li&gt;
&lt;li&gt;MySQL必知必会&lt;/li&gt;
&lt;li&gt;高性能MySQL&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;在准备面试的时候可以上&lt;a href=&quot;https://www.nowcoder.com/&quot;&gt;牛客网&lt;/a&gt;的讨论区看看面经，了解一下面试可能会被问到的问题，对于不会的问题要查漏补缺。当你看完好几篇面经你会发现面试很多问题都是重复的，也就是说这些问题是必须掌握的。同时，可以不断地向更深的层次学习，比如看看源码的实现等等，这些深层次的东西是面试的加分项。&lt;/p&gt;
&lt;p&gt;平时的积累也很重要，做项目或者学习知识点的时候可以把心得分享到博客上，一个好处是可以重新梳理知识点，在这个过程中你会对这些知识点印象更加深刻，同时也会给面试加分，面试官看了你的博客之后可以看出你是一个持续学习的人，这将会加大你面试的通过率。&lt;/p&gt;
&lt;p&gt;另个好处是在分享的过程中，可以提升自身的表达能力，毕竟把事情讲清楚与心里懂事情是怎么回事是两码事，这也为之后公司的内部分享会奠定基础。&lt;/p&gt;
&lt;h3 id=&quot;心态&quot;&gt;4.心态&lt;/h3&gt;
&lt;p&gt;在准备校招的过程中难免会遇到一些困难，比如：书本的内容看不懂，这时候可以从搜索引擎里搞清楚一些名词的意思，再把这些名词带入书本中反复地去理解。遇到困难的时候要保持一种愈战愈勇的心态，面试的过程也难免会失利，不要气馁。这时候的重点是把面试被问到不会的知识点搞清楚，争取下次被问到的时候能答上来。&lt;/p&gt;
&lt;h2 id=&quot;关于简历&quot;&gt;关于简历&lt;/h2&gt;
&lt;p&gt;书写简历也是门学问，优秀的简历能在内推批次脱颖而出直通面试。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;能缩减的信息尽量缩减，比如一些专业必修课的课程就没有必要写上去&lt;/li&gt;
&lt;li&gt;个人信息一定要写全，如姓名，电话，邮箱，求职意向（加分项：持续产出的博客与github）&lt;/li&gt;
&lt;li&gt;项目介绍用一句话概述，着重点在于技术点的描述，建议用一些显著性的数字注明成果（经过xxx，性能提高了30%等）&lt;/li&gt;
&lt;li&gt;对于业务型的项目，不要把那些CURD的功能写出来（太low了千篇一律），这种项目在编码的时候要多思考，看看哪些卓越的技术点可以提炼出来&lt;/li&gt;
&lt;li&gt;获奖情况方面可以把一些有代表性的比赛及名次写进去，最好不超过3个&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;关于简历投递&quot;&gt;关于简历投递&lt;/h2&gt;
&lt;p&gt;简历投递有几个比较重要的阶段：提前批、正式批、补招。建议大家前期要广投各种企业，这能一定几率地增大面试的可能性。面试多了就有了面试的感觉，拿offer的几率会更大，后期我们能更好地选择offer。&lt;/p&gt;
&lt;h4 id=&quot;提前批&quot;&gt;1.提前批&lt;/h4&gt;
&lt;p&gt;无论是春招还是秋招，提前批都会在校招正式开始前的1~2个月开始内推，一般互联网大厂都有提前批。提前批一般需要在职人员内推，有师兄师姐在名企可以让其帮忙推荐。没有的话也无需担心，一旦有内推在&lt;a href=&quot;https://www.nowcoder.com/discuss&quot;&gt;牛客网讨论区&lt;/a&gt;总会出现各种信息，把简历投到帖子的邮箱里也可以进行内推。在提前批里只要你的简历通过了筛选就能直通面试了，这就是为什么要提前准备校招。&lt;/p&gt;
&lt;h4 id=&quot;正式批&quot;&gt;2.正式批&lt;/h4&gt;
&lt;p&gt;正式批需要在校园招聘的官网上申请，一般来说会比提前批多一轮线上或线下的笔试，只有笔试过了才能有面试的资格。校招招聘信息可以在&lt;a href=&quot;http://www.wutongguo.com/&quot;&gt;梧桐果&lt;/a&gt;查看，里面还有宣讲会一栏，错过了提前批的同学可以找到符合自己需求的公司的宣讲会时间，某些公司在宣讲会结束后会进行当场的笔试，一般现场笔试通过后，第二天会进行现场的面试。&lt;/p&gt;
&lt;h4 id=&quot;补招&quot;&gt;3.补招&lt;/h4&gt;
&lt;p&gt;由于某些“收割机”的弃坑，这时候某些岗位可能还会有几个空缺的名额。招聘的形式与提前批相似，也通过员工内部推荐，简历通过后会进行面试。&lt;/p&gt;
&lt;h2 id=&quot;关于实习&quot;&gt;关于实习&lt;/h2&gt;
&lt;p&gt;最后说说找实习的事情，建议大家提前一年准备春招，这样拼进互联网知名大厂（百度、阿里、腾讯、滴滴、美团、京东等等）的可能性很大。实习的工作地点无非太在意，实习最重要的是镀金，有互联网知名大厂的实习经历，在秋招找工作是非常吃香的。&lt;/p&gt;
&lt;p&gt;因为实习经历绝大多数情况下决定了你的能力，HR在筛简历时就会认为你既然能被上一家大厂所认可，你的能力肯定不会差到哪里去，就会让你无需笔试直通面试，这样在秋招提前批拿到offer的几率更大！&lt;/p&gt;
</description>
<pubDate>Sun, 08 Apr 2018 06:00:00 +0000</pubDate>
<dc:creator>海枯</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/haiku/p/8744608.html</dc:identifier>
</item>
<item>
<title>麻省理工18年春软件构造课程阅读12“接口与枚举” - 李秋豪</title>
<link>http://www.cnblogs.com/liqiuhao/p/8744533.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liqiuhao/p/8744533.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;本文内容来自&lt;a href=&quot;http://web.mit.edu/6.031/www/sp18/&quot;&gt;MIT_6.031_sp18: Software Construction&lt;/a&gt;课程的Readings部分，采用&lt;a href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;CC BY-SA 4.0&lt;/a&gt;协议。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由于我们学校（哈工大）大二软件构造课程的大部分素材取自此，也是推荐的阅读材料之一，于是打算做一些翻译工作，自己学习的同时也能帮到一些懒得看英文的朋友。另外，该课程的阅读资料中有的练习题没有标准答案，所给出的“正确答案”为译者所写，有错误的地方还请指出。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;（更新：从第10章开始只翻译正确答案）&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;译者：&lt;a href=&quot;http://www.cnblogs.com/liqiuhao/&quot;&gt;李秋豪&lt;/a&gt; &lt;a href=&quot;http://jiangjiawei.pw/blog/&quot;&gt;江家伟&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;审校：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;V1.0 Sun Apr 8 13:29:19 CST 2018&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;本次课程的目标&quot;&gt;&lt;span&gt;本次课程的目标&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;本次课程的主题是接口：将抽象数据类型中的实现与抽象接口分离开，并在Java中运用&lt;code&gt;interface&lt;/code&gt;强制这种分离。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在这次课程后，你应该能够定义ADT的接口，并能够写出对应的实现类。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;译者注：本次阅读少部分说法基于Javase8及以后的版本。参考：&lt;a href=&quot;https://www.journaldev.com/2752/java-8-interface-changes-static-method-default-method&quot;&gt;Java 8 Interface Changes – static method, default method&lt;/a&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;接口&quot;&gt;&lt;span&gt;接口&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Java中的&lt;code&gt;interface&lt;/code&gt;（接口）是一种表示抽象数据类型的好方法。接口中是一连串的方法标识，但是没有方法体（定义）。如果想要写一个类来实现接口，我们必须给类加上&lt;code&gt;implements&lt;/code&gt;关键字，并且在类内部提供接口中方法的定义。所以接口+实现类也是Java中定义抽象数据类型的一种方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这种做法的一个优点就是接口只为使用者提供“契约”（contract），而使用者只需要读懂这个接口即可使用该ADT，他也不需要依赖ADT特定的实现/表示，因为实例化的变量不能放在接口中（具体实现被分离在另外的类中）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接口的另一个优点就是它允许了一种抽象类型能够有多种实现/表示，即一个接口可以有多个实现类（译者注：一个类也可以同时实现多个接口）。而当一个类型只用一个类来实现时，我们很难改变它的内部表示。例如之前阅读中的 &lt;a href=&quot;http://www.cnblogs.com/liqiuhao/p/8667447.html&quot;&gt;&lt;code&gt;MyString&lt;/code&gt;&lt;/a&gt;这个例子，我们对 &lt;code&gt;MyString&lt;/code&gt; 实现了两种表示方法，但是这两个类就不能同时存在于一个程序中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Java的静态检查会发现没有实现接口的错误，例如，如果程序员忘记实现接口中的某一个方法或者返回了一个错误的类型，编译器就会在编译期报错。不幸的是，编译器不会去检查我们的方法是否遵循了接口中的文档注释。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;2.6623376623377&quot;&gt;
&lt;p&gt;&lt;span&gt;关于定义接口的细节，请参考 &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html&quot;&gt;Java Tutorials section on interfaces&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;阅读小练习&quot;&gt;&lt;span&gt;阅读小练习&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Java interfaces&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;思考下面这个Java接口和实现类，它们尝试实现一个不可变的集合类型：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/** Represents an immutable set of elements of type E. */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; Set&amp;lt;E&amp;gt; {
        &lt;span class=&quot;co&quot;&gt;/** make an empty set */&lt;/span&gt;
A       &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Set();
        &lt;span class=&quot;co&quot;&gt;/** @return true if this set contains e as a member */&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;contains&lt;/span&gt;(E e);
        &lt;span class=&quot;co&quot;&gt;/** @return a set which is the union of this and that */&lt;/span&gt;
B       &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ArraySet&amp;lt;E&amp;gt; &lt;span class=&quot;fu&quot;&gt;union&lt;/span&gt;(Set&amp;lt;E&amp;gt; that);    
    }

&lt;span class=&quot;er&quot;&gt;    /** Implementation of Set&amp;lt;E&amp;gt;. */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ArraySet&amp;lt;E&amp;gt; &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Set&amp;lt;E&amp;gt; {
        &lt;span class=&quot;co&quot;&gt;/** make an empty set */&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ArraySet&lt;/span&gt;() { &lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;}
        &lt;span class=&quot;co&quot;&gt;/** @return a set which is the union of this and that */&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ArraySet&amp;lt;E&amp;gt; &lt;span class=&quot;fu&quot;&gt;union&lt;/span&gt;(Set&amp;lt;E&amp;gt; that) { &lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;}
        &lt;span class=&quot;co&quot;&gt;/** add e to this set */&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(E e) { &lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;}
    }&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;下面关于 &lt;code&gt;Set&amp;lt;E&amp;gt;&lt;/code&gt; 和 &lt;code&gt;ArraySet&amp;lt;E&amp;gt;&lt;/code&gt;的说法哪一个是正确的？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;A&lt;/code&gt; 标号处有问题，因为接口不能有构造方法。--&amp;gt; True&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The line labeled &lt;code&gt;B&lt;/code&gt; is a problem because &lt;code&gt;Set&lt;/code&gt; mentions &lt;code&gt;ArraySet&lt;/code&gt;, but &lt;code&gt;ArraySet&lt;/code&gt; also mentions &lt;code&gt;Set&lt;/code&gt;, which is circular. --&amp;gt; False&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;B&lt;/code&gt; 标号处有问题，因为它没有实现“表示独立”。--&amp;gt; True&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;ArraySet&lt;/code&gt; 并没有正确实现 &lt;code&gt;Set&lt;/code&gt;，因为它缺失了 &lt;code&gt;contains()&lt;/code&gt; 方法。--&amp;gt; True&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;ArraySet&lt;/code&gt; doesn’t correctly implement &lt;code&gt;Set&lt;/code&gt; because it includes a method that &lt;code&gt;Set&lt;/code&gt; doesn’t have. --&amp;gt; False&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;ArraySet&lt;/code&gt; 并没有正确实现 &lt;code&gt;Set&lt;/code&gt;，因为 &lt;code&gt;ArraySet&lt;/code&gt; 是可变的，但是 &lt;code&gt;Set&lt;/code&gt; 是不可变的。--&amp;gt; True&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;子类型&quot;&gt;&lt;span&gt;子类型&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;回忆一下，我们之前说过类型就是值的集合。Java中的 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/?java/util/List.html&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; 类型是通过接口定义的，如果我们想一下&lt;code&gt;List&lt;/code&gt;所有的可能值，它们都不是&lt;code&gt;List&lt;/code&gt;对象：我们不能通过接口实例化对象——这些值都是 &lt;code&gt;ArrayList&lt;/code&gt; 对象, 或 &lt;code&gt;LinkedList&lt;/code&gt; 对象，或者是其他&lt;code&gt;List&lt;/code&gt;实现类的对象。我们说，一个子类型就是父类型的子集，正如 &lt;code&gt;ArrayList&lt;/code&gt; 和 &lt;code&gt;LinkedList&lt;/code&gt;是&lt;code&gt;List&lt;/code&gt;的子类型一样。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“B是A的子类型”就意味着“每一个B都是A”，换句话说，“每一个B都满足了A的规格说明”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这也意味着B的规格说明至少强于A的规格说明。当我们声明一个接口的实现类时，编译器会尝试做这样的检查：它会检查类是否全部实现了接口中规定的函数，并且检查这些函数的标识是否对的上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是编译器不会检查我们是否通过其他形式弱化了规格说明：例如强化了某个方法输入的前置条件，或弱化了接口对于用户的保证（后置条件）。如果你在Java中定义了一个子类型——我们这里是实现接口——你必须要确保子类型的规格说明至少要比父类型强。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;阅读小练习-1&quot;&gt;&lt;span&gt;阅读小练习&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Immutable shapes&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;让我们为矩形定义一个接口：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** An immutable rectangle. */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; ImmutableRectangle {
    &lt;span class=&quot;co&quot;&gt;/** @return the width of this rectangle */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getWidth&lt;/span&gt;();
    &lt;span class=&quot;co&quot;&gt;/** @return the height of this rectangle */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getHeight&lt;/span&gt;();
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;而每一个正方形类型都是矩形类型：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** An immutable square. */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ImmutableSquare {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; side;
    &lt;span class=&quot;co&quot;&gt;/** Make a new side x side square. */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ImmutableSquare&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; side) { &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;side&lt;/span&gt; = side; }
    &lt;span class=&quot;co&quot;&gt;/** @return the width of this square */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getWidth&lt;/span&gt;() { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; side; }
    &lt;span class=&quot;co&quot;&gt;/** @return the height of this square */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getHeight&lt;/span&gt;() { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; side; }
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;ImmutableSquare.getWidth()&lt;/code&gt; 是否满足了 &lt;code&gt;ImmutableRectangle.getWidth()&lt;/code&gt;的规格说明? --&amp;gt; Yes&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;ImmutableSquare.getHeight()&lt;/code&gt; 是否满足了 &lt;code&gt;ImmutableRectangle.getHeight()&lt;/code&gt;的规格说明? --&amp;gt;Yes&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;ImmutableSquare&lt;/code&gt; 的规格说明是否满足了（至少强于） &lt;code&gt;ImmutableRectangle&lt;/code&gt; 的规格说明？ --&amp;gt; Yes&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Mutable shapes&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** A mutable rectangle. */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; MutableRectangle {
    &lt;span class=&quot;co&quot;&gt;// ... same methods as above ...&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/** Set this rectangle's dimensions to width x height. */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setSize&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; width, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; height);
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;现在每一个正方形类型还是矩形类型吗？&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** A mutable square. */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; MutableSquare {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; side;
    &lt;span class=&quot;co&quot;&gt;// ... same constructor and methods as above ...&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// TODO implement setSize(..)&lt;/span&gt;
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;对于下面的每一个 &lt;code&gt;MutableSquare.setSize(..)&lt;/code&gt; 实现，请判断它是否合理：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** Set this square's dimensions to width x height.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *  Requires width = height. */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setSize&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; width, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; height) { &lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;--&amp;gt; No – stronger precondition&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** Set this square's dimensions to width x height.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@throws BadSizeException &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;if width != height */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setSize&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; width, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; height) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; BadSizeException { &lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;--&amp;gt; Specifications are incomparable&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** If width = height, set this square's dimensions to width x height.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *  Otherwise, new dimensions are unspecified. */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setSize&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; width, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; height) { &lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;--&amp;gt; No – weaker postcondition&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** Set this square's dimensions to side x side. */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setSize&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; side) { &lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;--&amp;gt; Specifications are incomparable&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;例子-mystring&quot;&gt;&lt;span&gt;例子: &lt;code&gt;MyString&lt;/code&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;现在我们再来看一看 &lt;a href=&quot;http://www.cnblogs.com/liqiuhao/p/8667447.html&quot;&gt;&lt;code&gt;MyString&lt;/code&gt;&lt;/a&gt;这个例子，这次我们使用接口来定义这个ADT，以便创建多种实现类：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** MyString represents an immutable sequence of characters. */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; MyString { 

    &lt;span class=&quot;co&quot;&gt;// We'll skip this creator operation for now&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// /** @param b a boolean value&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//  *  @return string representation of b, either &quot;true&quot; or &quot;false&quot; */&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// public static MyString valueOf(boolean b) { ... }&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/** @return number of characters in this string */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;();

    &lt;span class=&quot;co&quot;&gt;/** @param i character position (requires 0 &amp;lt;= i &amp;lt; string length)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;character at position i */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;charAt&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i);

    &lt;span class=&quot;co&quot;&gt;/** Get the substring between start (inclusive) and end (exclusive).&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param start &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;starting index&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param end &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;ending index.  Requires 0 &amp;lt;= start &amp;lt;= end &amp;lt;= string length.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;string consisting of charAt(start)...charAt(end-1) */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; MyString &lt;span class=&quot;fu&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; start, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; end);
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;现在我们先跳过 &lt;code&gt;valueOf&lt;/code&gt; 这个方法，用我们在&lt;a href=&quot;http://www.cnblogs.com/liqiuhao/p/8667447.html&quot;&gt;“抽象数据类型”&lt;/a&gt;中学习到的知识去实现这个接口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面是我们的第一种实现类：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; SimpleMyString &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; MyString {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;[] a;

    &lt;span class=&quot;co&quot;&gt;/** Create a string representation of b, either &quot;true&quot; or &quot;false&quot;.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param b &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;a boolean value */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SimpleMyString&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; b) {
        a = b ? &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;[] { 't', 'r', 'u', 'e' } 
              : &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;[] { 'f', 'a', 'l', 's', 'e' };
    }

    &lt;span class=&quot;co&quot;&gt;// private constructor, used internally by producer operations&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SimpleMyString&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;[] a) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;a&lt;/span&gt; = a;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;() { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;; }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;charAt&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i) { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; a[i]; }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; MyString &lt;span class=&quot;fu&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; start, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; end) {
        &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;[] subArray = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;[end - start];
        System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;a&lt;/span&gt;, start, subArray, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, end - start);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SimpleMyString&lt;/span&gt;(subArray);
    }
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;而下面是我们优化过的实现类：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; FastMyString &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; MyString {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;[] a;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; start;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; end;

    &lt;span class=&quot;co&quot;&gt;/** Create a string representation of b, either &quot;true&quot; or &quot;false&quot;.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param b &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;a boolean value */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;FastMyString&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; b) {
        a = b ? &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;[] { 't', 'r', 'u', 'e' } 
              : &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;[] { 'f', 'a', 'l', 's', 'e' };
        start = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        end = a.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;;
    }

    &lt;span class=&quot;co&quot;&gt;// private constructor, used internally by producer operations.&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;FastMyString&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;[] a, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; start, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; end) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;a&lt;/span&gt; = a;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt; = start;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;end&lt;/span&gt; = end;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;() { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; end - start; }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;charAt&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i) { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; a[start + i]; }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; MyString &lt;span class=&quot;fu&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; start, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; end) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;FastMyString&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt; + start, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;end&lt;/span&gt; + end);
    }
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;与我们&lt;a href=&quot;http://web.mit.edu/6.031/www/sp18/classes/10-abstract-data-types/#example_different_representations_for_strings&quot;&gt;之前的实现相比&lt;/a&gt;，注意到之前的代码中&lt;code&gt;valueOf&lt;/code&gt;是静态方法，但是在这里就不是了。而这里也使用了指向实例内部表示的&lt;code&gt;this&lt;/code&gt;。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;同时要注意到 &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/annotations/predefined.html&quot;&gt;&lt;code&gt;@Override&lt;/code&gt;&lt;/a&gt;的使用，这个词是通知编译器这个方法必须和其父类中的某个方法的标识完全一样（覆盖）。但是由于实现接口时编译器会自动检查我们的实现方法是否遵循了接口中的方法标识，这里的 &lt;code&gt;@Override&lt;/code&gt; 更多是一种文档注释，它告诉读者这里的方法是为了实现某个接口，读者应该去阅读这个接口中的规格说明。同时，如果你没有对实现类（子类型）的规格说明进行强化，这里就不需要再写一遍规格说明了。（DRY原则）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;另外注意到我们添加了一个私有的构造方法，它是为 &lt;code&gt;substring(..)&lt;/code&gt; 这样的生产者服务的。它的参数是表示的域。我们之前并不需要写出构造方法，因为Java会在没有构造方法时自动构建一个空的构造方法，但是这里我们添加了一个接收 &lt;code&gt;boolean b&lt;/code&gt; 的构造方法，所以就必须显式声明另一个为生产者服务的构造方法了。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;那么使用者会如何用这个ADT呢？下面是一个例子：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;MyString s = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;FastMyString&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;The first character is: &quot;&lt;/span&gt; + s.&lt;span class=&quot;fu&quot;&gt;charAt&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;));&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这似乎和我们用Java的聚合类型时的代码很像，例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;List&amp;lt;String&amp;gt; s = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();
...&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;不幸的是，这种模式已经&lt;strong&gt;破坏了我们辛苦构建的抽象层次&lt;/strong&gt; 。使用者必须知道具体实现类的名字。因为Java接口中不能包含构造方法，它们必须通过调用实现类的构造方法来获取接口类型的对象，而接口中是不可能含有构造方法的规格说明的。另外，由于接口中没有对构造方法进行说明，所以我们甚至无法保证不同的实现类会提供同样的构造方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;幸运的是，Java8以后允许为接口定义静态方法，所以我们可以在接口&lt;code&gt;MyString&lt;/code&gt;中通过静态的&lt;a href=&quot;http://web.mit.edu/6.031/www/sp18/classes/10-abstract-data-types/#factory_method&quot;&gt;工厂方法&lt;/a&gt;来实现创建者&lt;code&gt;valueOf&lt;/code&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; MyString { 

    &lt;span class=&quot;co&quot;&gt;/** @param b a boolean value&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;string representation of b, either &quot;true&quot; or &quot;false&quot; */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; MyString &lt;span class=&quot;fu&quot;&gt;valueOf&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; b) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;FastMyString&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
    }

    &lt;span class=&quot;co&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;现在使用者可以在不破坏抽象层次的前提下使用ADT了：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;MyString s = MyString.&lt;span class=&quot;fu&quot;&gt;valueOf&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;The first character is: &quot;&lt;/span&gt; + s.&lt;span class=&quot;fu&quot;&gt;charAt&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;));&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;将实现完全英寸起来是一种“妥协”，因为有时候使用者会希望有对具体实现的选择权利。这也是为什么Java库中的&lt;code&gt;ArrayList&lt;/code&gt;和&lt;code&gt;LinkedList&lt;/code&gt;“暴露”给了用户，因为这两个实现在 &lt;code&gt;get()&lt;/code&gt; 和 &lt;code&gt;insert()&lt;/code&gt;这样的操作中会有性能上的差别。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;阅读小练习-2&quot;&gt;&lt;span&gt;阅读小练习&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Code review&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在让我们来审查以下 &lt;code&gt;FastMyString&lt;/code&gt;实现，下面是对这个实现的一些批评，你认为哪一些是对的？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;应该把抽象函数注释出来 --&amp;gt; True&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;应该把表示不变量注释出来 --&amp;gt; True&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;表示域应该使用关键词 &lt;code&gt;final&lt;/code&gt; 以便它们不能被重新改变索引 --&amp;gt; True&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The private constructor should be public so clients can use it to construct their own arbitrary strings --&amp;gt; False&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The &lt;code&gt;charAt&lt;/code&gt; specification should not expose that the rep contains individual characters --&amp;gt; False&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;charAt&lt;/code&gt; 应该对于大于字符串长度的 &lt;code&gt;i&lt;/code&gt; 有更好的处理 --&amp;gt; True&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;例子-泛型-sete&quot;&gt;&lt;span&gt;例子: 泛型 &lt;code&gt;Set&amp;lt;E&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Java中的聚合类型为“将接口和实现分离”提供了很好的例子。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在我们来思考一下java聚合类型中的&lt;code&gt;Set&lt;/code&gt; 。&lt;code&gt;Set&lt;/code&gt;是一个用来表示有着有限元素&lt;code&gt;E&lt;/code&gt;的集合。这里是&lt;code&gt;Set&lt;/code&gt;的一个简化的接口：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/** A mutable set.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param &amp;lt;E&amp;gt; &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;type of elements in the set */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; Set&amp;lt;E&amp;gt; {&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;Set&lt;/code&gt; 是一个泛型类型（generic type）：这种类型的规格说明中用一个占位符（以后会被作为参数输入）表示具体类型，而不是分开为不同类型例如 &lt;code&gt;Set&amp;lt;String&amp;gt;&lt;/code&gt;, &lt;code&gt;Set&amp;lt;Integer&amp;gt;&lt;/code&gt;, 进行说明。我们只需要设计实现一个 &lt;code&gt;Set&amp;lt;E&amp;gt;&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在我们分别实现/声明这个ADT的各个操作，从创建者开始：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;// example creator operation&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/** Make an empty set.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param &amp;lt;E&amp;gt; &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;type of elements in the set&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;a new set instance, initially empty */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &amp;lt;E&amp;gt; Set&amp;lt;E&amp;gt; &lt;span class=&quot;fu&quot;&gt;make&lt;/span&gt;() { &lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;} &lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里的&lt;code&gt;make&lt;/code&gt;是作为一个静态工厂方法实现的。使用者会像这样调用它：&lt;code&gt;Set&amp;lt;String&amp;gt; strings = Set.make();&lt;/code&gt; ，而编译器也会知道新的&lt;code&gt;Set&lt;/code&gt;会是一个包含&lt;code&gt;String&lt;/code&gt;对象元素的集合。（注意我们将&lt;code&gt;&amp;lt;E&amp;gt;&lt;/code&gt;写在函数标识前面，因为&lt;code&gt;make&lt;/code&gt;是一个静态方法，而&lt;code&gt;&amp;lt;E&amp;gt;&lt;/code&gt;是它的泛型类型）。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;// example observer operations&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/** Get size of the set.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;the number of elements in this set */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;();

    &lt;span class=&quot;co&quot;&gt;/** Test for membership.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param e &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;an element&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;true iff this set contains e */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;contains&lt;/span&gt;(E e);&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;接下来我们声明两个观察者。注意到规格说明中的提示，这里不应该提到具体某一个实现的细节或者它们的标识，而规格说明也应该适用于所有&lt;code&gt;Set&lt;/code&gt;ADT的实现。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;// example mutator operations&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/** Modifies this set by adding e to the set.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param e &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;element to add */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(E e);

    &lt;span class=&quot;co&quot;&gt;/** Modifies this set by removing e, if found.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *  If e is not found in the set, has no effect.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param e &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;element to remove */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;remove&lt;/span&gt;(E e);&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;对于改造者的要求也和观察者一样，我们依然要在接口抽象的层次书写规格说明。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;阅读参考：&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;阅读小练习-3&quot;&gt;&lt;span&gt;阅读小练习&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Collection interfaces &amp;amp; implementations&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假设下面的代码都是逐次执行的，并且不能被编译的代码都会被注释掉。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里的代码使用到了 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/?java/util/Collections.html&quot;&gt;&lt;code&gt;Collections&lt;/code&gt;&lt;/a&gt;中的两个方法，你可能需要阅读一些参考。请为下面的问题回答出最合理的答案。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;Set&amp;lt;String&amp;gt; set = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;String&amp;gt;();&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;set&lt;/code&gt; 现在指向： --&amp;gt; 一个HashSet对象&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;set = Collections.&lt;span class=&quot;fu&quot;&gt;unmodifiableSet&lt;/span&gt;(set);&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;set&lt;/code&gt; 现在指向： --&amp;gt; 一个实现了&lt;code&gt;Set&lt;/code&gt;接口的对象&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;set = Collections.&lt;span class=&quot;fu&quot;&gt;singleton&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;glorp&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;set&lt;/code&gt; 现在指向： --&amp;gt; 一个实现了&lt;code&gt;Set&lt;/code&gt;接口的对象&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;set = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Set&amp;lt;String&amp;gt;();&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;set&lt;/code&gt; 现在指向： --&amp;gt; 这一行不能被编译&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;List&amp;lt;String&amp;gt; list = set;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;set&lt;/code&gt; 现在指向： --&amp;gt; 这一行不能被编译&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;泛型接口的实现&quot;&gt;&lt;span&gt;泛型接口的实现&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;假设现在我们要实现上面的 &lt;code&gt;Set&amp;lt;E&amp;gt;&lt;/code&gt; 接口。我们既可以使用一个非泛型的实现（用一个特定的类型替代&lt;code&gt;E&lt;/code&gt;），也可以使用一个泛型实现（保留类型占位符）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先我们来看看&lt;strong&gt;泛型接口的非泛型实现：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在 &lt;a href=&quot;http://www.cnblogs.com/liqiuhao/p/8688759.html&quot;&gt;&lt;em&gt;抽象函数 &amp;amp; 表示不变量&lt;/em&gt;&lt;/a&gt; 我们实现了 &lt;code&gt;CharSet&lt;/code&gt;类型,它被用来表示字符的集合。其中 &lt;code&gt;CharSet1&lt;/code&gt;/&lt;code&gt;2&lt;/code&gt;/&lt;code&gt;3&lt;/code&gt; 这三种实现类都是 &lt;a href=&quot;https://github.com/6031-sp18/ex11-adt-examples/blob/master/src/charset/Set.java&quot;&gt;&lt;code&gt;Set&lt;/code&gt;接口&lt;/a&gt; 的子类型，它们的声明如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CharSet &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Set&amp;lt;Character&amp;gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;当在Set声明中提到 &lt;code&gt;E&lt;/code&gt;时，&lt;code&gt;Charset&lt;/code&gt;的实现将类型占位符&lt;code&gt;E&lt;/code&gt;替换为了&lt;code&gt;Character&lt;/code&gt; ：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; Set&amp;lt;E&amp;gt; {

    &lt;span class=&quot;co&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Test for membership.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param e &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;an element&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;true iff this set contains e&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;contains&lt;/span&gt;(E e);

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Modifies this set by adding e to the set.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param e &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;element to add&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(E e);

    &lt;span class=&quot;co&quot;&gt;// ...&lt;/span&gt;
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CharSet1 &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Set&amp;lt;Character&amp;gt; {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String s = &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;;


    &lt;span class=&quot;co&quot;&gt;// ...&lt;/span&gt;


    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;contains&lt;/span&gt;(Character e) {
        &lt;span class=&quot;fu&quot;&gt;checkRep&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; s.&lt;span class=&quot;fu&quot;&gt;indexOf&lt;/span&gt;(e) != -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(Character e) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;fu&quot;&gt;contains&lt;/span&gt;(e)) s += e;
        &lt;span class=&quot;fu&quot;&gt;checkRep&lt;/span&gt;();
    }
    &lt;span class=&quot;co&quot;&gt;// ...&lt;/span&gt;
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;CharSet1&lt;/code&gt;/&lt;code&gt;2&lt;/code&gt;/&lt;code&gt;3&lt;/code&gt; 的实现方法不适用于任意类型的元素，例如，由于它使用的是&lt;code&gt;String&lt;/code&gt;成员， &lt;code&gt;Set&amp;lt;Integer&amp;gt;&lt;/code&gt; 这种集合就无法直接表示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;接着我们再来看看泛型接口的泛型实现：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们也可以在实现 &lt;code&gt;Set&amp;lt;E&amp;gt;&lt;/code&gt; 接口的时候不对&lt;code&gt;E&lt;/code&gt;选择一个特定的类型。在这种情况下，我们会让使用者决定&lt;code&gt;E&lt;/code&gt;到底是什么。例如，Java的 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/?java/util/HashSet.html&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt; 就是这种实现，它的声明像这样：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; Set&amp;lt;E&amp;gt; {

    &lt;span class=&quot;co&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HashSet&amp;lt;E&amp;gt; &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Set&amp;lt;E&amp;gt; {

    &lt;span class=&quot;co&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;一个泛型实现只能依靠接口规格说明中对类型占位符的要求，我们会在以后的阅读中看到 &lt;code&gt;HashSet&lt;/code&gt; 是如何依靠每一个类型都要求实现的操作来实现它自己的，因为它没办法依赖于特定类型的操作。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;为什么要使用接口&quot;&gt;&lt;span&gt;为什么要使用接口？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在Java代码中，接口被用的很广泛（但也不是所有类都是接口的实现），这里列出来了几个使用接口的好处：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;接口对于编译器和读者来说都是重要的文档：&lt;/strong&gt;接口不仅会帮助编译器发现ADT实现过程中的错误，它也会帮助读者更容易/快速的理解ADT的操作——因为接口将ADT抽象到了更高的层次，用户不需要关心具体实现的各种方案。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;允许进行性能上的权衡：&lt;/strong&gt;接口使得ADT可以有不同的实现方案，而这些实现方案可能在不同环境下的性能或其他资源特性有很大差别。使用者可以根据自己的环境/需求选择合适的实现方案。但是，在我们选择特定的方案后，我们依旧要保持代码的表示独立性，即当ADT发生（内部）改变或更换实现方案后代码依然能正常运行。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;通过未决定的规格说明给实现者以定义方法的自由：&lt;/strong&gt;例如，当把一个有限集合转化为一个列表的时候，有一些实现可能是使用较慢的方法，但是它们确保这些元素在列表中是排好序的；而其他的实现可能是不管这些元素转换后在列表中的排序，但是它们的速度更快。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;一个类具有多种“视角”：&lt;/strong&gt;在Java中，一个类可以同时实现多个接口，例如，一个能够显示列表的窗口部件就可能是一个同时实现了窗口和列表这两个接口的类。这反映的是多种ADT特性同时存在的特殊情况。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;允许不同信任度的实现：&lt;/strong&gt;另一个多次实现一个接口的原因在于，你可以写一个简单但是非常可靠的实现，也可以写一个很“炫”但是bug存在的几率（稳定性）高一些的实现。而使用者可以根据实际情况选择相应的方案。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;阅读小练习-4&quot;&gt;&lt;span&gt;阅读小练习&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;假设你有一个有理数的类型，它现在是以类来表示的：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Rational {
    ...
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;现在你决定将 &lt;code&gt;Rational&lt;/code&gt; 换成Java接口，同时定义了一个实现类&lt;code&gt;IntFraction&lt;/code&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; Rational {
    ...
}

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; IntFraction &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Rational {
    ...
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;对于下面之前 &lt;code&gt;Rational&lt;/code&gt; 类中的代码，请你判定它们对应的身份，以及应该出现在新的接口或者新的实现类中？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Interface + implementation 1&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; numerator;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; denominator;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这段代码是（选中所有正确答案）：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;[ ] 抽象函数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 创建者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 改造者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 观察者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 生产者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[x] （成员）表示&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 表示不变量&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 规格说明&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;它应该位于：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;[ ] 接口&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;[x] 实现类&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;[ ] 都有&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Interface + implementation 2&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;//   denominator &amp;gt; 0&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//   numerator/denominator is in reduced form&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这段代码是（选中所有正确答案）：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;[ ] 抽象函数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 创建者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 改造者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 观察者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 生产者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] （成员）表示&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[x] 表示不变量&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 规格说明&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;它应该位于：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;[ ] 接口&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[x] 实现类&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 都有&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Interface + implementation 3&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;//   AF(numerator, denominator) = numerator / denominator&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这段代码是（选中所有正确答案）：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;[x] 抽象函数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 创建者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 改造者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 观察者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 生产者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] （成员）表示&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 表示不变量&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 规格说明&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;它应该位于：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;[ ] 接口&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[x] 实现类&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 都有&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Interface + implementation 4&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param that &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;another Rational&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;a Rational equal to (this / that)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这段代码是（选中所有正确答案）：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;[ ] 抽象函数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 创建者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 改造者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 观察者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[x] 生产者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] （成员）表示&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 表示不变量&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 规格说明&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;它应该位于：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;[x] 接口&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 实现类&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 都有&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Interface + implementation 5&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;isZero&lt;/span&gt;()&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这段代码是（选中所有正确答案）：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;[ ] 抽象函数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 创建者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 改造者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[x] 观察者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 生产者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] （成员）表示&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 表示不变量&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 规格说明&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;它应该位于：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;[ ] 接口&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 实现类&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[x] 都有&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Interface + implementation 6&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; numer == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这段代码是（选中所有正确答案）：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;[ ] 抽象函数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 创建者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 改造者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[x] 观察者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 生产者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] （成员）表示&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 表示不变量&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 规格说明&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;它应该位于：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;[ ] 接口&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[x] 实现类&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] 都有&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;枚举&quot;&gt;&lt;span&gt;枚举&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;有时候一个ADT的值域是一个很小的有限集，例如：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;一年中的月份: January, February, …&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;一周中的天数: Monday, Tuesday, …&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;方向: north, south, east, west&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;画线时的&lt;a href=&quot;https://www.w3.org/TR/svg-strokes/#LineCaps&quot;&gt;line caps&lt;/a&gt; : butt, round, square&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;这样的类型往往会被用来组成更复杂的类型（例如&lt;code&gt;DateTime&lt;/code&gt;或者&lt;code&gt;Latitude&lt;/code&gt;），或者作为一个改某个方法的行为的参数使用（例如&lt;code&gt;drawline&lt;/code&gt;）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当值域很小且有限时，将所有的值定义为被命名的常量是有意义的，这被称为&lt;strong&gt;枚举&lt;/strong&gt;(&lt;strong&gt;enumeration&lt;/strong&gt;)。JAVA用&lt;code&gt;enum&lt;/code&gt;使得枚举变得方便：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;enum&lt;/span&gt; Month { JANUARY, FEBRUARY, MARCH, ..., DECEMBER };&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这个&lt;code&gt;enum&lt;/code&gt;定义类一种新的类型名，&lt;code&gt;Month&lt;/code&gt;，这和使用&lt;code&gt;class&lt;/code&gt;以及&lt;code&gt;interface&lt;/code&gt;定义新类型名时是一样的。它也定义了一个被命名的值的集合，由于这些值实际上是&lt;code&gt;public static final&lt;/code&gt;,所以我们将这个集合中的每个值的每个字母都大写。所以你可以这么写：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;Month thisMonth = MARCH;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这种思想被称为枚举，因为你显式地列出了一个集合中的所有元素，并且JAVA为每个元素都分配了数字作为代表它们的值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在枚举类型最简单的使用场景中，你需要的唯一操作是比较两个值是否相等：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (day.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(SATURDAY) || day.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(SUNDAY)) {
    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;It's the weekend&quot;&lt;/span&gt;);
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;你可能也会看到这样的代码，它使用&lt;code&gt;==&lt;/code&gt;而不是&lt;code&gt;equals()&lt;/code&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (day == SATURDAY || day == SUNDAY) {
    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;It's the weekend&quot;&lt;/span&gt;);
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果使用&lt;code&gt;String&lt;/code&gt;类型来表示天数，那么这个代码是不安全的，因为&lt;code&gt;==&lt;/code&gt;检测两边的表达式是否引用的是同一个对象，对于任意的两个字符串&lt;code&gt;“Saturday”&lt;/code&gt;来说，这是不一定的。这也是为什么我们总是在比较两个对象时使用&lt;code&gt;equals()&lt;/code&gt;的原因。但是使用枚举类型的好处之一就是：实际上只有&lt;em&gt;一个&lt;/em&gt;对象来表示枚举类型的每个取值，且用户不可能创建更多的对象（没有构造者方法！）所以对于枚举类型来说，&lt;code&gt;==&lt;/code&gt;和&lt;code&gt;equals()&lt;/code&gt;的效果是一样的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在这个意义上，使用枚举就像使用原式的&lt;code&gt;int&lt;/code&gt;常量一样。JAVA甚至支持在&lt;code&gt;switch&lt;/code&gt;语句中使用枚举类型（&lt;code&gt;switch&lt;/code&gt;在其他情况下只允许使用原式的整型，而不能是对象）：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;switch&lt;/span&gt; (direction) {
    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; NORTH: &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;polar bears&quot;&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; SOUTH: &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;penguins&quot;&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; EAST:  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;elephants&quot;&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; WEST:  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;llamas&quot;&lt;/span&gt;;
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;但是和&lt;code&gt;int&lt;/code&gt;值不同的是，JAVA对枚举类型有更多的静态检查:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;Month firstMonth = MONDAY; &lt;span class=&quot;co&quot;&gt;// static error: MONDAY has type DayOfWeek, not type Month &lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;一个&lt;code&gt;enum&lt;/code&gt;声明中可以包含所有能在&lt;code&gt;class&lt;/code&gt;声明中常用字段和方法。所以你可以为这个ADT定义额外的操作，并且还定义你自己的表示（成员变量）。这里是一个声明了一个成员变量、一个观察者和一个生产者的枚举类型的例子：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;29&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;enum&lt;/span&gt; Month {
    &lt;span class=&quot;co&quot;&gt;// the values of the enumeration, written as calls to the private constructor below&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;JANUARY&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;FEBRUARY&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;28&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;MARCH&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;APRIL&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;MAY&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;JUNE&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;JULY&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;AUGUST&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;SEPTEMBER&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;OCTOBER&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;NOVEMBER&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;DECEMBER&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt;);

    &lt;span class=&quot;co&quot;&gt;// rep&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; daysInMonth;

    &lt;span class=&quot;co&quot;&gt;// enums also have an automatic, invisible rep field:&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//   private final int ordinal;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// which takes on values 0, 1, ... for each value in the enumeration.&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// rep invariant:&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//   daysInMonth is the number of days in this month in a non-leap year&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// abstraction function:&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//   AF(ordinal,daysInMonth) = the (ordinal+1)th month of the Gregorian calendar&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// safety from rep exposure:&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//   all fields are private, final, and have immutable types&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// Make a Month value. Not visible to clients, only used to initialize the&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// constants above.&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Month&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; daysInMonth) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;daysInMonth&lt;/span&gt; = daysInMonth;
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param isLeapYear &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;true iff the year under consideration is a leap year&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;number of days in this month in a normal year (if !isLeapYear) &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *                                           or leap year (if isLeapYear)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getDaysInMonth&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; isLeapYear) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt; == FEBRUARY &amp;amp;&amp;amp; isLeapYear) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; daysInMonth&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;;
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; daysInMonth;
        }
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;first month of the semester after this month&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Month &lt;span class=&quot;fu&quot;&gt;nextSemester&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; JANUARY:
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; FEBRUARY;
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; FEBRUARY:   &lt;span class=&quot;co&quot;&gt;// cases with no break or return&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; MARCH:      &lt;span class=&quot;co&quot;&gt;// fall through to the next case&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; APRIL:
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; MAY:
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; JUNE;
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; JUNE:
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; JULY:
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; AUGUST:
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; SEPTEMBER;
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; SEPTEMBER:
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; OCTOBER:
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; NOVEMBER:
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; DECEMBER:
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; JANUARY;
            &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt;:
                &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;st&quot;&gt;&quot;can't get here&quot;&lt;/span&gt;);
        }
    }
}&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;所有的&lt;code&gt;enum&lt;/code&gt;类型也都有一些内置的(automatically-provided)操作，这些操作在&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt;中定义：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;code&gt;ordinal()&lt;/code&gt; 是某个值在枚举类型中的索引值，因此 &lt;code&gt;JANUARY.ordinal()&lt;/code&gt; 返回 0.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;compareTo()&lt;/code&gt; 基于两个值的索引值来比较两个值.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;name()&lt;/code&gt; 返回字符串形式表示的当前枚举类型值，例如， &lt;code&gt;JANUARY.name()&lt;/code&gt; 返回&lt;code&gt;&quot;JANUARY&quot;&lt;/code&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;toString()&lt;/code&gt; 和 &lt;code&gt;name()&lt;/code&gt;是一样的.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;3.3098591549296&quot;&gt;
&lt;p&gt;&lt;span&gt;阅读JAVA教程中的&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/enum.html&quot;&gt;&lt;strong&gt;Enum Types&lt;/strong&gt;&lt;/a&gt; （1页）和 &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/nested.html&quot;&gt;&lt;strong&gt;Nested Classes&lt;/strong&gt;&lt;/a&gt;（1页）&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;阅读测试&quot;&gt;&lt;span&gt;阅读测试&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Semester&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;考虑这三种可选的方式来命名你将要注册的Semester：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;用一个字符串字面量:&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;startRegistrationFor&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Fall&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2023&lt;/span&gt;);&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;用一个命名的&lt;code&gt;String&lt;/code&gt;类型常量:&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String FALL = &lt;span class=&quot;st&quot;&gt;&quot;Fall&quot;&lt;/span&gt;;
...
&lt;span class=&quot;fu&quot;&gt;startRegistrationFor&lt;/span&gt;(FALL, &lt;span class=&quot;dv&quot;&gt;2023&lt;/span&gt;);&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;用一个枚举类型的值：&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;enum&lt;/span&gt; Semester { IAP, SPRING, SUMMER, FALL };
...
&lt;span class=&quot;fu&quot;&gt;startRegistrationFor&lt;/span&gt;(FALL, &lt;span class=&quot;dv&quot;&gt;2023&lt;/span&gt;);&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;下列关于每个方案的优缺点叙述正确的是：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;[x] 使用字符串字面量的方案不会快速报错，因为用户可能拼写错误的学期，而不会得到这样的静态错误信息:&lt;code&gt;startRegistrationFor(&quot;FAll&quot;, 2023)&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] The named string constant approach isn’t safe from bugs, because the name can be reassigned: &lt;code&gt;FALL = &quot;Spring&quot;&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[x] 命名的字符串常量方案不会快速报错，因为用户可能直接用不正确的字符串字面量来调用，但是却不会得到静态错误：&lt;code&gt;startRegistrationFor(&quot;Autumn&quot;, 2023)&lt;/code&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] The enumeration approach isn’t safe from bugs, because the client can define new semesters without getting a static error: &lt;code&gt;startRegistrationFor(new Semester(&quot;Autumn&quot;), 2023)&lt;/code&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;[ ] The enumeration approach isn’t safe from bugs, because the client can substitute a different enumeration type without getting a static error: &lt;code&gt;startRegistrationFor(JANUARY, 2023)&lt;/code&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;抽象数据类型在java中的实现&quot;&gt;&lt;span&gt;抽象数据类型在Java中的实现&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;现在我们完成了对&lt;a href=&quot;http://www.cnblogs.com/liqiuhao/p/8667447.html&quot;&gt;“抽象数据类型”&lt;/a&gt;中“Java中ADT实现”的理解：&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;抽象数据类型是由它支持的操作集合所定义的，而Java中的结构能够帮助我们形式化这种思想。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这能够使我们的代码：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;远离bug.&lt;/strong&gt; 一个ADT是由它的操作集合定义的，而接口就是做了这件事情。当使用者使用接口类型时，静态检查能够确保它们只使用了接口规定的方法。如果实现类写出了/暴露了其他方法——或者更糟糕，暴露了内部表示——，使用者也不会依赖于这些操作。当我们实现一个接口时，编译器会确保所有的方法标识都得到实现。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;易于理解.&lt;/strong&gt; 使用者和维护者都知道在哪里寻找ADT的规格说明。因为接口没有实例成员或者实例方法的函数体，所以它能更容易的将具体实现从规格说明中分离开。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;可改动.&lt;/strong&gt; 我们可以轻松地为已有的接口添加新的实现类。如果我们认为静态工厂方法比类构造方法更合适，使用者将只会看到这个接口。这意味着我们可以调整接口中工厂方法的实现类而不用改变使用者的代码。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Java的枚举类型能够定义一种只有少部分不可变值的ADT。和以前使用特殊的整数或者字符串相比，枚举类型能够帮助我们的代码：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;远离bug.&lt;/strong&gt; 静态检查能够确保使用者没有使用到规定集合外的值，或者是不同枚举类型的值。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;易于理解.&lt;/strong&gt; 将常量命名为枚举类型名字而非幻数（或其他字面量）能够更清晰的做自我注释。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;可改动.&lt;/strong&gt; 无&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sun, 08 Apr 2018 05:45:00 +0000</pubDate>
<dc:creator>李秋豪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liqiuhao/p/8744533.html</dc:identifier>
</item>
<item>
<title>ASP.NET MVC 5 SmartCode Scaffolding for Visual Studio.Net - 阿新</title>
<link>http://www.cnblogs.com/neozhu/p/8744414.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/neozhu/p/8744414.html</guid>
<description>&lt;p&gt;ASP.NET MVC 5 SmartCode Scaffolding是集成在Visual Studio.Net开发工具中一个ASP.NET MVC Web应用程序代码生成框架，使用SmartCode Scaffolding可以快速添加一整套View,Controller,Model,Service可以运行的交互式代码。减少程序员在系统开发过程中编写重复的代码行数（估计可以减少80%代码Coding）,同时有助于团队成员遵循统一的架构和规范进行开发，就算没有接触过MVC的程序员也能快速的进行团队开发。大大减少对基础功能的debug的时间，提高软件项目的开发效率。&lt;/p&gt;
&lt;p&gt;SmartCode Scaffolding是自定义扩展Visual Studio.Net ASP.NET Scaffolding并且实现了更多功能和生成更多的标准代码。非常适合快速原型法的开发过程。&lt;/p&gt;
&lt;p&gt;该项目从2014年一直默默的在做版本更新和持续完善,从最早Visual Sutdio.Net 2013到最新2017。并且完全开源 &lt;a href=&quot;https://github.com/neozhu/MVC5-Scaffolder&quot; target=&quot;_blank&quot;&gt;GITHUB SmartCode Scaffolding&lt;/a&gt;&lt;br/&gt;我的联系方式 QQ：28440117，email:&lt;a href=&quot;mailto:new163@163.com&quot; target=&quot;_blank&quot;&gt;new163@163.com&lt;/a&gt;,微信：neostwitter&lt;br/&gt;我的主页:&lt;a href=&quot;https://neozhu.github.io/WebSite/index.html&quot; target=&quot;_blank&quot;&gt;https://neozhu.github.io/WebSite/index.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11347576-9bd09484ed65aa0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; data-original-src=&quot;https://upload-images.jianshu.io/upload_images/11347576-9bd09484ed65aa0d.png?imageMogr2/auto-orient/strip&quot;/&gt;&lt;br/&gt;&lt;/div&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;需要要配合Demo中WebApp 项目来生成代码，因为其中引用了大量的css和html模板&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11347576-34058b57299789f1.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;Animation7.gif&quot; data-original-src=&quot;https://upload-images.jianshu.io/upload_images/11347576-34058b57299789f1.gif?imageMogr2/auto-orient/strip&quot;/&gt;&lt;br/&gt;&lt;/div&gt;

&lt;h4&gt;定义实体对象(Entity class)和属性&lt;/h4&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;span&gt;参考EntityFramewrok Code-First规范定义，定义的越规范，信息越多对后面的生成的代码就越完善。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下面代码定义一个Order，OrderDetail,一对多的关系，在创建Order类的Controller时会在controller，View，会根据关联的实体生成相应的代码，&lt;/p&gt;
&lt;p&gt;比如EditView，会同时生成对表头Order form表单的操作和明细表OrderDetail的datagrid操作。&lt;br/&gt;定义OrderDetail中引用了Product，多对一的关系。会在View部分生成Combox控件或DropdownList的控件和Controller层的查询方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义字段描述信息，字段长度，基本验证规则&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Order:Entity
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Order() {
            OrderDetails &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;OrderDetail&amp;gt;&lt;span&gt;();
        }
        [Key]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        [Required]
        [Display(Name &lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;客户名称&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,Description =&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;订单所属的客户&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,Order =&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)]
        [MaxLength(&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Customer { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        [Required]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;发货地址&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Description = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;发货地址&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Order = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)]
        [MaxLength(&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ShippingAddress { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;订单日期&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Description = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;订单日期默认当天&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Order = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime OrderDate { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关联订单明细 1-*&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; ICollection&amp;lt;OrderDetail&amp;gt; OrderDetails { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderDetail:Entity
    {
        [Key]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        [Required(ErrorMessage &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;必选&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [Display(Name &lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;商品&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Description =&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;商品&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,Order =&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ProductId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        [ForeignKey(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ProductId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;商品&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Description = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;商品&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Order = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Product Product { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        [Required(ErrorMessage&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;必填&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [Range(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;9999&lt;/span&gt;&lt;span&gt;)]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;数量&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Description = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;需求数量&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Order = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Qty { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        [Required(ErrorMessage &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;必填&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [Range(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;9999&lt;/span&gt;&lt;span&gt;)]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;单价&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Description = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;单价&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Order = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;decimal&lt;/span&gt; Price { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        [Required(ErrorMessage &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;必填&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [Range(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;9999&lt;/span&gt;&lt;span&gt;)]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;金额&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Description = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;金额(数量x单价)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Order = &lt;span&gt;6&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;decimal&lt;/span&gt; Amount { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;订单号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Description = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;订单号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Order = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; OrderId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关联订单表头&lt;/span&gt;
        [ForeignKey(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OrderId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;订单号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Description = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;订单号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Order = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Order Order { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;生成代码&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;添加controller&lt;/p&gt;
&lt;br/&gt;&lt;div class=&quot;image-package&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11347576-dfa57c1edbebb435.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;Animation.gif&quot; data-original-src=&quot;https://upload-images.jianshu.io/upload_images/11347576-dfa57c1edbebb435.gif?imageMogr2/auto-orient/strip&quot;/&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;生成以下代码&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Controllers\OrdersController.cs  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; MVC控制类 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
Repositories\Orders\OrderQuery.cs  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 定义与业务逻辑相关查询比如分页帅选，外键/主键查询 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
Repositories\Orders\OrderRepository.cs &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Repository模式  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
Services\Orders\IOrderService.cs &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 具体的业务逻辑接口  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
Services\Orders\OrderService.cs &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 具体的业务逻辑实现  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
Views\Orders\Index.cshtml &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 订单信息DataGrid包括查询/新增/删除/修改/导入/导出等功能  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
Views\Orders\_PopupDetailFormView.cshtml &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 订单信息弹出编辑框  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
Views\Orders\Create.cshtml &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 订单信息新增操作页面  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
Views\Orders\Edit.cshtml &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 订单信息编辑操作页面 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
Views\Orders\EditForm.cshtml &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 订单信息编辑表单  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h6&gt;index.html javascript代码片段&lt;/h6&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;146&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
var entityname = &quot;Order&quot;;


 //下载Excel导入模板
 function downloadtemplate() {
     //TODO: 修改下载模板的路径
     var url = &quot;/ExcelTemplate/Order.xlsx&quot;;
     $.fileDownload(url)
         .fail(function() {
             $.messager.alert(&quot;错误&quot;, &quot;没有找到模板文件! {&quot; + url + &quot;}&quot;);
         });

 }
 //打开Excel上传导入
 function importexcel() {
     $(&quot;#importwindow&quot;).window(&quot;open&quot;);
 }
 //执行Excel到处下载
 function exportexcel() {
     var filterRules = JSON.stringify($dg.datagrid(&quot;options&quot;).filterRules);
     //console.log(filterRules);
     $.messager.progress({
         title: &quot;正在执行导出！&quot;
     });
     var formData = new FormData();
     formData.append(&quot;filterRules&quot;, filterRules);
     formData.append(&quot;sort&quot;, &quot;Id&quot;);
     formData.append(&quot;order&quot;, &quot;asc&quot;);
     $.postDownload(&quot;/Orders/ExportExcel&quot;, formData, function(fileName) {
         $.messager.progress(&quot;close&quot;);
         console.log(fileName);

     })
 }
 //显示帮助信息
 function dohelp() {

 }
 //easyui datagrid 增删改查操作
 var $dg = $(&quot;#orders_datagrid&quot;).datagrid({
     rownumbers: true,
     checkOnSelect: true,
     selectOnCheck: true,
     idField: 'Id',
     sortName: 'Id',
     sortOrder: 'desc',
     remoteFilter: true,
     singleSelect: true,
     toolbar: '#orders_toolbar',
     url: '/Orders/GetData',
     method: 'get',
     onClickCell: onClickCell,
     pagination: true,
     striped: true,
     columns: [
         [
             /*{ field: 'ck', checkbox: true },*/
             {
                 field: '_operate1',
                 title: '操作',
                 width: 120,
                 sortable: false,
                 resizable: true,
                 formatter: showdetailsformatter
             },
             /*{field:'Id',width:80 ,sortable:true,resizable:true }*/
             {
                 field: 'Customer',
                 title: '@Html.DisplayNameFor(model =&amp;gt; model.Customer)',
                 width: 140,
                 editor: {
                     type: 'textbox',
                     options: {
                         prompt: '客户名称',
                         required: true,
                         validType: 'length[0,30]'
                     }
                 },
                 sortable: true,
                 resizable: true
             },
             {
                 field: 'ShippingAddress',
                 title: '@Html.DisplayNameFor(model =&amp;gt; model.ShippingAddress)',
                 width: 140,
                 editor: {
                     type: 'textbox',
                     options: {
                         prompt: '发货地址',
                         required: true,
                         validType: 'length[0,200]'
                     }
                 },
                 sortable: true,
                 resizable: true
             },
             {
                 field: 'OrderDate',
                 title: '@Html.DisplayNameFor(model =&amp;gt; model.OrderDate)',
                 width: 160,
                 align: 'right',
                 editor: {
                     type: 'datebox',
                     options: {
                         prompt: '订单日期',
                         required: true
                     }
                 },
                 sortable: true,
                 resizable: true,
                 formatter: dateformatter
             },

         ]
     ]

 });
 var editIndex = undefined;

 function reload() {
     if (endEditing()) {
         $dg.datagrid(&quot;reload&quot;);
     }
 }

 function endEditing() {
     if (editIndex == undefined) {
         return true
     }
     if ($dg.datagrid(&quot;validateRow&quot;, editIndex)) {

         $dg.datagrid(&quot;endEdit&quot;, editIndex);
         editIndex = undefined;


         return true;
     } else {
         return false;
     }
 }

 function onClickCell(index, field) {
     var _operates = [&quot;_operate1&quot;, &quot;_operate2&quot;, &quot;_operate3&quot;, &quot;ck&quot;]
     if ($.inArray(field, _operates) &amp;gt;= 0) {
         return;
     }
     if (editIndex != index) {
         if (endEditing()) {
             $dg.datagrid(&quot;selectRow&quot;, index)
                 .datagrid(&quot;beginEdit&quot;, index);
             editIndex = index;
             var ed = $dg.datagrid(&quot;getEditor&quot;, {
                 index: index,
                 field: field
             });
             if (ed) {
                 ($(ed.target).data(&quot;textbox&quot;) ? $(ed.target).textbox(&quot;textbox&quot;) : $(ed.target)).focus();
             }

         } else {
             $dg.datagrid(&quot;selectRow&quot;, editIndex);
         }
     }
 }

 function append() {
     if (endEditing()) {
         //$dg.datagrid(&quot;appendRow&quot;, { Status: 0 });
         //editIndex = $dg.datagrid(&quot;getRows&quot;).length - 1;
         $dg.datagrid(&quot;insertRow&quot;, {
             index: 0,
             row: {}
         });
         editIndex = 0;
         $dg.datagrid(&quot;selectRow&quot;, editIndex)
             .datagrid(&quot;beginEdit&quot;, editIndex);
     }
 }

 function removeit() {
     if (editIndex == undefined) {
         return
     }
     $dg.datagrid(&quot;cancelEdit&quot;, editIndex)
         .datagrid(&quot;deleteRow&quot;, editIndex);
     editIndex = undefined;
 }

 function accept() {
     if (endEditing()) {
         if ($dg.datagrid(&quot;getChanges&quot;).length) {
             var inserted = $dg.datagrid(&quot;getChanges&quot;, &quot;inserted&quot;);
             var deleted = $dg.datagrid(&quot;getChanges&quot;, &quot;deleted&quot;);
             var updated = $dg.datagrid(&quot;getChanges&quot;, &quot;updated&quot;);
             var effectRow = new Object();
             if (inserted.length) {
                 effectRow.inserted = inserted;
             }
             if (deleted.length) {
                 effectRow.deleted = deleted;
             }
             if (updated.length) {
                 effectRow.updated = updated;
             }
             //console.log(JSON.stringify(effectRow));
             $.post(&quot;/Orders/SaveData&quot;, effectRow, function(response) {
                 //console.log(response);
                 if (response.Success) {
                     $.messager.alert(&quot;提示&quot;, &quot;提交成功！&quot;);
                     $dg.datagrid(&quot;acceptChanges&quot;);
                     $dg.datagrid(&quot;reload&quot;);
                 }
             }, &quot;json&quot;).fail(function(response) {
                 //console.log(response);
                 $.messager.alert(&quot;错误&quot;, &quot;提交错误了！&quot;, &quot;error&quot;);
                 //$dg.datagrid(&quot;reload&quot;);
             });

         }

         //$dg.datagrid(&quot;acceptChanges&quot;);
     }
 }

 function reject() {
     $dg.datagrid(&quot;rejectChanges&quot;);
     editIndex = undefined;
 }

 function getChanges() {
     var rows = $dg.datagrid(&quot;getChanges&quot;);
     alert(rows.length + &quot; rows are changed!&quot;);
 }

 //datagrid 开启筛选功能
 $(function() {

     $dg.datagrid(&quot;enableFilter&quot;, [

         {
             field: &quot;Id&quot;,
             type: &quot;numberbox&quot;,
             op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
         },


         {
             field: &quot;OrderDate&quot;,
             type: &quot;dateRange&quot;,
             options: {
                 onChange: function(value) {
                     $dg.datagrid(&quot;addFilterRule&quot;, {
                         field: &quot;OrderDate&quot;,
                         op: &quot;between&quot;,
                         value: value
                     });

                     $dg.datagrid(&quot;doFilter&quot;);
                 }
             }
         },


     ]);
 })
 //-----------------------------------------------------
 //datagrid onSelect
 //-----------------------------------------------------
 function showdetailsformatter(value, row, index) {

     return '&amp;lt;a onclick=&quot;showDetailsWindow(' + row.Id + ')&quot; class=&quot;easyui-linkbutton&quot; href=&quot;javascript:void(0)&quot;&amp;gt;查看明细&amp;lt;/a&amp;gt;';

 }
 //弹出明细信息
 function showDetailsWindow(id) {
     //console.log(index, row);
     $.getJSON('/Orders/PopupEdit/' + id, function(data, status, xhr) {
         //console.log(data);
         $('#detailswindow').window('open');
         loadData(id, data);


     });

 }
&lt;/pre&gt;&lt;/div&gt;

&lt;h6&gt;OrderController.cs 代码片段&lt;/h6&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;120&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
 public class OrdersController : Controller
    {
        //private StoreContext db = new StoreContext();
        private readonly IOrderService _orderService;
        private readonly IUnitOfWorkAsync _unitOfWork;
        public OrdersController(IOrderService orderService, IUnitOfWorkAsync unitOfWork)
        {
            _orderService = orderService;
            _unitOfWork = unitOfWork;
        }
        // GET: Orders/Index
        [OutputCache(Duration = 360, VaryByParam = &quot;none&quot;)]
        public ActionResult Index()
        {
            return View();
        }
        // Get :Orders/PageList
        // For Index View Boostrap-Table load  data 
        [HttpGet]
        public async Task&amp;lt;ActionResult&amp;gt; GetData(int page = 1, int rows = 10, string sort = &quot;Id&quot;, string order = &quot;asc&quot;, string filterRules = &quot;&quot;)
        {
            var filters = JsonConvert.DeserializeObject&amp;lt;IEnumerable&amp;lt;filterRule&amp;gt;&amp;gt;(filterRules);
            var totalCount = 0;
            //int pagenum = offset / limit +1;
            var orders = await _orderService
       .Query(new OrderQuery().Withfilter(filters))
       .OrderBy(n =&amp;gt; n.OrderBy(sort, order))
       .SelectPageAsync(page, rows, out totalCount);
            var datarows = orders.Select(n =&amp;gt; new { Id = n.Id, Customer = n.Customer, ShippingAddress = n.ShippingAddress, OrderDate = n.OrderDate }).ToList();
            var pagelist = new { total = totalCount, rows = datarows };
            return Json(pagelist, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public async Task&amp;lt;ActionResult&amp;gt; SaveData(OrderChangeViewModel orders)
        {
            if (orders.updated != null)
            {
                foreach (var item in orders.updated)
                {
                    _orderService.Update(item);
                }
            }
            if (orders.deleted != null)
            {
                foreach (var item in orders.deleted)
                {
                    _orderService.Delete(item);
                }
            }
            if (orders.inserted != null)
            {
                foreach (var item in orders.inserted)
                {
                    _orderService.Insert(item);
                }
            }
            await _unitOfWork.SaveChangesAsync();
            return Json(new { Success = true }, JsonRequestBehavior.AllowGet);
        }
        //[OutputCache(Duration = 360, VaryByParam = &quot;none&quot;)]
        public async Task&amp;lt;ActionResult&amp;gt; GetOrders(string q = &quot;&quot;)
        {
            var orderRepository = _unitOfWork.RepositoryAsync&amp;lt;Order&amp;gt;();
            var data = await orderRepository.Queryable().Where(n =&amp;gt; n.Customer.Contains(q)).ToListAsync();
            var rows = data.Select(n =&amp;gt; new { Id = n.Id, Customer = n.Customer });
            return Json(rows, JsonRequestBehavior.AllowGet);
        }
        //[OutputCache(Duration = 360, VaryByParam = &quot;none&quot;)]
        public async Task&amp;lt;ActionResult&amp;gt; GetProducts(string q = &quot;&quot;)
        {
            var productRepository = _unitOfWork.RepositoryAsync&amp;lt;Product&amp;gt;();
            var data = await productRepository.Queryable().Where(n =&amp;gt; n.Name.Contains(q)).ToListAsync();
            var rows = data.Select(n =&amp;gt; new { Id = n.Id, Name = n.Name });
            return Json(rows, JsonRequestBehavior.AllowGet);
        }
        // GET: Orders/Details/5
        public async Task&amp;lt;ActionResult&amp;gt; Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var order = await _orderService.FindAsync(id);
            if (order == null)
            {
                return HttpNotFound();
            }
            return View(order);
        }
        // GET: Orders/Create
        public ActionResult Create()
        {
            var order = new Order();
            //set default value
            return View(order);
        }
        // POST: Orders/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task&amp;lt;ActionResult&amp;gt; Create([Bind(Include = &quot;OrderDetails,Id,Customer,ShippingAddress,OrderDate,CreatedDate,CreatedBy,LastModifiedDate,LastModifiedBy&quot;)] Order order)
        {
            if (ModelState.IsValid)
            {
                order.ObjectState = ObjectState.Added;
                foreach (var item in order.OrderDetails)
                {
                    item.OrderId = order.Id;
                    item.ObjectState = ObjectState.Added;
                }
                _orderService.InsertOrUpdateGraph(order);
                await _unitOfWork.SaveChangesAsync();
                if (Request.IsAjaxRequest())
                {
                    return Json(new { success = true }, JsonRequestBehavior.AllowGet);
                }
                DisplaySuccessMessage(&quot;Has append a Order record&quot;);
                return RedirectToAction(&quot;Index&quot;);
            }
            else
            {
                var modelStateErrors = String.Join(&quot;&quot;, this.ModelState.Keys.SelectMany(key =&amp;gt; this.ModelState[key].Errors.Select(n =&amp;gt; n.ErrorMessage)));
                if (Request.IsAjaxRequest())
                {
                    return Json(new { success = false, err = modelStateErrors }, JsonRequestBehavior.AllowGet);
                }
                DisplayErrorMessage(modelStateErrors);
            }
            return View(order);
        }
        // GET: Orders/PopupEdit/5
        [OutputCache(Duration = 360, VaryByParam = &quot;id&quot;)]
        public async Task&amp;lt;ActionResult&amp;gt; PopupEdit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var order = await _orderService.FindAsync(id);
            return Json(order, JsonRequestBehavior.AllowGet);
        }

        // GET: Orders/Edit/5
        public async Task&amp;lt;ActionResult&amp;gt; Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var order = await _orderService.FindAsync(id);
            if (order == null)
            {
                return HttpNotFound();
            }
            return View(order);
        }
        // POST: Orders/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task&amp;lt;ActionResult&amp;gt; Edit([Bind(Include = &quot;OrderDetails,Id,Customer,ShippingAddress,OrderDate,CreatedDate,CreatedBy,LastModifiedDate,LastModifiedBy&quot;)] Order order)
        {
            if (ModelState.IsValid)
            {
                order.ObjectState = ObjectState.Modified;
                foreach (var item in order.OrderDetails)
                {
                    item.OrderId = order.Id;
                    //set ObjectState with conditions
                    if (item.Id &amp;lt;= 0)
                        item.ObjectState = ObjectState.Added;
                    else
                        item.ObjectState = ObjectState.Modified;
                }

                _orderService.InsertOrUpdateGraph(order);
                await _unitOfWork.SaveChangesAsync();
                if (Request.IsAjaxRequest())
                {
                    return Json(new { success = true }, JsonRequestBehavior.AllowGet);
                }
                DisplaySuccessMessage(&quot;Has update a Order record&quot;);
                return RedirectToAction(&quot;Index&quot;);
            }
            else
            {
                var modelStateErrors = String.Join(&quot;&quot;, this.ModelState.Keys.SelectMany(key =&amp;gt; this.ModelState[key].Errors.Select(n =&amp;gt; n.ErrorMessage)));
                if (Request.IsAjaxRequest())
                {
                    return Json(new { success = false, err = modelStateErrors }, JsonRequestBehavior.AllowGet);
                }
                DisplayErrorMessage(modelStateErrors);
            }
            return View(order);
        }
        // GET: Orders/Delete/5
        public async Task&amp;lt;ActionResult&amp;gt; Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var order = await _orderService.FindAsync(id);
            if (order == null)
            {
                return HttpNotFound();
            }
            return View(order);
        }
        // POST: Orders/Delete/5
        [HttpPost, ActionName(&quot;Delete&quot;)]
        //[ValidateAntiForgeryToken]
        public async Task&amp;lt;ActionResult&amp;gt; DeleteConfirmed(int id)
        {
            var order = await _orderService.FindAsync(id);
            _orderService.Delete(order);
            await _unitOfWork.SaveChangesAsync();
            if (Request.IsAjaxRequest())
            {
                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            DisplaySuccessMessage(&quot;Has delete a Order record&quot;);
            return RedirectToAction(&quot;Index&quot;);
        }
        // Get Detail Row By Id For Edit
        // Get : Orders/EditOrderDetail/:id
        [HttpGet]
        public async Task&amp;lt;ActionResult&amp;gt; EditOrderDetail(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var orderdetailRepository = _unitOfWork.RepositoryAsync&amp;lt;OrderDetail&amp;gt;();
            var orderdetail = await orderdetailRepository.FindAsync(id);
            var orderRepository = _unitOfWork.RepositoryAsync&amp;lt;Order&amp;gt;();
            var productRepository = _unitOfWork.RepositoryAsync&amp;lt;Product&amp;gt;();
            if (orderdetail == null)
            {
                ViewBag.OrderId = new SelectList(await orderRepository.Queryable().ToListAsync(), &quot;Id&quot;, &quot;Customer&quot;);
                ViewBag.ProductId = new SelectList(await productRepository.Queryable().ToListAsync(), &quot;Id&quot;, &quot;Name&quot;);
                //return HttpNotFound();
                return PartialView(&quot;_OrderDetailEditForm&quot;, new OrderDetail());
            }
            else
            {
                ViewBag.OrderId = new SelectList(await orderRepository.Queryable().ToListAsync(), &quot;Id&quot;, &quot;Customer&quot;, orderdetail.OrderId);
                ViewBag.ProductId = new SelectList(await productRepository.Queryable().ToListAsync(), &quot;Id&quot;, &quot;Name&quot;, orderdetail.ProductId);
            }
            return PartialView(&quot;_OrderDetailEditForm&quot;, orderdetail);
        }
        // Get Create Row By Id For Edit
        // Get : Orders/CreateOrderDetail
        [HttpGet]
        public async Task&amp;lt;ActionResult&amp;gt; CreateOrderDetail()
        {
            var orderRepository = _unitOfWork.RepositoryAsync&amp;lt;Order&amp;gt;();
            ViewBag.OrderId = new SelectList(await orderRepository.Queryable().ToListAsync(), &quot;Id&quot;, &quot;Customer&quot;);
            var productRepository = _unitOfWork.RepositoryAsync&amp;lt;Product&amp;gt;();
            ViewBag.ProductId = new SelectList(await productRepository.Queryable().ToListAsync(), &quot;Id&quot;, &quot;Name&quot;);
            return PartialView(&quot;_OrderDetailEditForm&quot;);
        }
        // Post Delete Detail Row By Id
        // Get : Orders/DeleteOrderDetail/:id
        [HttpPost, ActionName(&quot;DeleteOrderDetail&quot;)]
        public async Task&amp;lt;ActionResult&amp;gt; DeleteOrderDetailConfirmed(int id)
        {
            var orderdetailRepository = _unitOfWork.RepositoryAsync&amp;lt;OrderDetail&amp;gt;();
            orderdetailRepository.Delete(id);
            await _unitOfWork.SaveChangesAsync();
            if (Request.IsAjaxRequest())
            {
                return Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            DisplaySuccessMessage(&quot;Has delete a Order record&quot;);
            return RedirectToAction(&quot;Index&quot;);
        }

        // Get : Orders/GetOrderDetailsByOrderId/:id
        [HttpGet]
        public async Task&amp;lt;ActionResult&amp;gt; GetOrderDetailsByOrderId(int id)
        {
            var orderdetails = _orderService.GetOrderDetailsByOrderId(id);
            if (Request.IsAjaxRequest())
            {
                var data = await orderdetails.AsQueryable().ToListAsync();
                var rows = data.Select(n =&amp;gt; new { OrderCustomer = (n.Order == null ? &quot;&quot; : n.Order.Customer), ProductName = (n.Product == null ? &quot;&quot; : n.Product.Name), Id = n.Id, ProductId = n.ProductId, Qty = n.Qty, Price = n.Price, Amount = n.Amount, OrderId = n.OrderId });
                return Json(rows, JsonRequestBehavior.AllowGet);
            }
            return View(orderdetails);
        }

        //导出Excel
        [HttpPost]
        public ActionResult ExportExcel(string filterRules = &quot;&quot;, string sort = &quot;Id&quot;, string order = &quot;asc&quot;)
        {
            var fileName = &quot;orders_&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;.xlsx&quot;;
            var stream = _orderService.ExportExcel(filterRules, sort, order);
            return File(stream, &quot;application/vnd.ms-excel&quot;, fileName);
        }
        private void DisplaySuccessMessage(string msgText)
        {
            TempData[&quot;SuccessMessage&quot;] = msgText;
        }
        private void DisplayErrorMessage(string msgText)
        {
            TempData[&quot;ErrorMessage&quot;] = msgText;
        }
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _unitOfWork.Dispose();
            }
            base.Dispose(disposing);
        }
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;注册UnityConfig.cs&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;        &lt;/code&gt;
&lt;/pre&gt;
&lt;h4&gt;运行生成的代码功能&lt;/h4&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11347576-894ea6a7eac3d8dd.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;Animation2-1.gif&quot; data-original-src=&quot;https://upload-images.jianshu.io/upload_images/11347576-894ea6a7eac3d8dd.gif?imageMogr2/auto-orient/strip&quot;/&gt;&lt;p&gt;Animation2-1.gif&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11347576-f1c4b88ae8ef1a8a.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;Animation3.gif&quot; data-original-src=&quot;https://upload-images.jianshu.io/upload_images/11347576-f1c4b88ae8ef1a8a.gif?imageMogr2/auto-orient/strip&quot;/&gt;
&lt;/div&gt;

&lt;p&gt;以上功能一键生成带带主从表关联的多表同时操作的页面功能和后台代码，包括必填，长度等输入校验规则&lt;/p&gt;
&lt;h4&gt;基础功能&lt;/h4&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;即时聊天功能&lt;br/&gt;系统账号管理&lt;br/&gt;菜单导航授权&lt;br/&gt;Excel导入导出配置&lt;br/&gt;枚举值维护&lt;br/&gt;系统日志&lt;br/&gt;消息通知&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11347576-81f4f0a5f4f4a3d0.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;Animation8.gif&quot; data-original-src=&quot;https://upload-images.jianshu.io/upload_images/11347576-81f4f0a5f4f4a3d0.gif?imageMogr2/auto-orient/strip&quot;/&gt;&lt;p&gt;Animation8.gif&lt;/p&gt;
&lt;/div&gt;
&lt;h4&gt;整个项目的系统架构和功能&lt;/h4&gt;
&lt;p&gt;主要组件&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li&gt;”Microsoft.AspNet.Mvc” version=&quot;5.2.4&quot;&lt;/li&gt;
&lt;li&gt;“Microsoft.AspNet.Razor“ version=&quot;3.2.4&quot;&lt;/li&gt;
&lt;li&gt;&quot;EasyUI&quot; version=&quot;1.4.5&quot;&lt;/li&gt;
&lt;li&gt;&quot;Hangfire&quot; version=&quot;1.6.17&quot;&lt;/li&gt;
&lt;li&gt;&quot;Unity.Mvc&quot; version=&quot;5.0.13&quot;&lt;/li&gt;
&lt;li&gt;&quot;Z.EntityFramework.Plus.EF6&quot; version=&quot;1.7.15&quot;&lt;/li&gt;
&lt;li&gt;SmartAdmin - Responsive WebApp v1.9.1&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;&quot;EntityFramework&quot; version=&quot;6.2.0&quot; 支持Oracle,MySql,Sql Server,PostgreSQL,SQLite,Sybase等&lt;/p&gt;
&lt;br/&gt;&lt;div class=&quot;image-package&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11347576-76f41ad3f31a229c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; data-original-src=&quot;https://upload-images.jianshu.io/upload_images/11347576-76f41ad3f31a229c.png?imageMogr2/auto-orient/strip&quot;/&gt;&lt;p&gt;image.png&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;实战项目&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://neozhu.github.io/WebSite/x-tms.html&quot; target=&quot;_blank&quot;&gt;x-TMS&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11347576-26ebf707db8023fb.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;Animation4.gif&quot; data-original-src=&quot;https://upload-images.jianshu.io/upload_images/11347576-26ebf707db8023fb.gif?imageMogr2/auto-orient/strip&quot;/&gt;&lt;p&gt;Animation4.gif&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;供应链协同平台&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11347576-a29dbb640c7d9fc6.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;Animation5.gif&quot; data-original-src=&quot;https://upload-images.jianshu.io/upload_images/11347576-a29dbb640c7d9fc6.gif?imageMogr2/auto-orient/strip&quot;/&gt;&lt;p&gt;Animation5.gif&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;MES系统&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11347576-d3cf0b232c66f610.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;Animation6.gif&quot; data-original-src=&quot;https://upload-images.jianshu.io/upload_images/11347576-d3cf0b232c66f610.gif?imageMogr2/auto-orient/strip&quot;/&gt;&lt;p&gt;Animation6.gif&lt;/p&gt;
&lt;/div&gt;

&lt;h3&gt;我们还能做&lt;/h3&gt;
&lt;p&gt;承接企业内部业务系统开发，组建企业私有云，虚拟化集群服务器部署。&lt;br/&gt;承接BizTalk B2B/EAI/EDI/AS/RosettaNet 开发工作&lt;/p&gt;
&lt;h3&gt;联系方式&lt;/h3&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11347576-efee6f04cb478991.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; data-original-src=&quot;https://upload-images.jianshu.io/upload_images/11347576-efee6f04cb478991.png?imageMogr2/auto-orient/strip&quot;/&gt;&lt;p&gt;image.png&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;捐助&lt;/h3&gt;
&lt;p&gt;如果这个项目对您有用，我们欢迎各方任何形式的捐助，也包括参与到项目代码更新或意见反馈中来。谢谢！&lt;/p&gt;

&lt;p&gt;资金捐助：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11347576-d884bcb748f8f6ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600&quot; alt=&quot;image.png&quot; data-original-src=&quot;https://upload-images.jianshu.io/upload_images/11347576-d884bcb748f8f6ea.png?imageMogr2/auto-orient/strip&quot;/&gt;&lt;p&gt;image.png&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;License&lt;/h3&gt;
</description>
<pubDate>Sun, 08 Apr 2018 05:19:00 +0000</pubDate>
<dc:creator>阿新</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/neozhu/p/8744414.html</dc:identifier>
</item>
<item>
<title>基于 Java NIO 实现简单的 HTTP 服务器 - coolblog.xyz</title>
<link>http://www.cnblogs.com/nullllun/p/8734696.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nullllun/p/8734696.html</guid>
<description>&lt;h2 id=&quot;简介&quot;&gt;1.简介&lt;/h2&gt;
&lt;p&gt;本文是&lt;a href=&quot;http://www.coolblog.xyz/2018/04/03/Java-NIO%E4%B9%8B%E9%80%89%E6%8B%A9%E5%99%A8/&quot;&gt;上一篇文章&lt;/a&gt;实践篇，在上一篇文章中，我分析了选择器 Selector 的原理。本篇文章，我们来说说 Selector 的应用，如标题所示，这里我基于 Java NIO 实现了一个简单的 HTTP 服务器。在接下来的章节中，我会详细讲解 HTTP 服务器实现的过程。另外，本文所对应的代码已经上传到 GitHub 上了，需要的自取，仓库地址为 &lt;a href=&quot;https://github.com/code4wt/toyhttpd&quot;&gt;toyhttpd&lt;/a&gt;。好了，废话不多说，进入正题吧。&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;2. 实现&lt;/h2&gt;
&lt;p&gt;本节所介绍的 HTTP 服务器是一个很简单的实现，仅支持 HTTP 协议极少的特性。包括识别文件后缀，并返回相应的 Content-Type。支持200、400、403、404、500等错误码等。由于支持的特性比较少，所以代码逻辑也比较简单，这里罗列一下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;处理请求，解析请求头&lt;/li&gt;
&lt;li&gt;响应请求，从请求头中获取资源路径, 检测请求的资源路径是否合法&lt;/li&gt;
&lt;li&gt;根据文件后缀匹配 Content-Type&lt;/li&gt;
&lt;li&gt;读取文件数据，并设置 Content-Length，如果文件不存在则返回404&lt;/li&gt;
&lt;li&gt;设置响应头，并将响应头和数据返回给浏览器。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;接下来我们按照处理请求和响应请求两步操作，来说说代码实现。先来看看核心的代码结构，如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * TinyHttpd&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@author &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;code4wt&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @date 2018-03-26 22:28:44&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; TinyHttpd {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; DEFAULT_PORT = &lt;span class=&quot;dv&quot;&gt;8080&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; DEFAULT_BUFFER_SIZE = &lt;span class=&quot;dv&quot;&gt;4096&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String INDEX_PAGE = &lt;span class=&quot;st&quot;&gt;&quot;index.html&quot;&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String STATIC_RESOURCE_DIR = &lt;span class=&quot;st&quot;&gt;&quot;static&quot;&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String META_RESOURCE_DIR_PREFIX = &lt;span class=&quot;st&quot;&gt;&quot;/meta/&quot;&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String KEY_VALUE_SEPARATOR = &lt;span class=&quot;st&quot;&gt;&quot;:&quot;&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String CRLF = &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; port;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;TinyHttpd&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;(DEFAULT_PORT);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;TinyHttpd&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; port) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;port&lt;/span&gt; = port;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException {
        &lt;span class=&quot;co&quot;&gt;// 初始化 ServerSocketChannel&lt;/span&gt;
        ServerSocketChannel ssc = ServerSocketChannel.&lt;span class=&quot;fu&quot;&gt;open&lt;/span&gt;();
        ssc.&lt;span class=&quot;fu&quot;&gt;socket&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; InetSocketAddress(&lt;span class=&quot;st&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, port));
        ssc.&lt;span class=&quot;fu&quot;&gt;configureBlocking&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;// 创建 Selector&lt;/span&gt;
        Selector selector = Selector.&lt;span class=&quot;fu&quot;&gt;open&lt;/span&gt;();
        
        &lt;span class=&quot;co&quot;&gt;// 注册事件&lt;/span&gt;
        ssc.&lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(selector, SelectionKey.&lt;span class=&quot;fu&quot;&gt;OP_ACCEPT&lt;/span&gt;);

        &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;) {
            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; readyNum = selector.&lt;span class=&quot;fu&quot;&gt;select&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (readyNum == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
                &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
            }

            Set&amp;lt;SelectionKey&amp;gt; selectedKeys = selector.&lt;span class=&quot;fu&quot;&gt;selectedKeys&lt;/span&gt;();
            Iterator&amp;lt;SelectionKey&amp;gt; it = selectedKeys.&lt;span class=&quot;fu&quot;&gt;iterator&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (it.&lt;span class=&quot;fu&quot;&gt;hasNext&lt;/span&gt;()) {
                SelectionKey selectionKey = it.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;();
                it.&lt;span class=&quot;fu&quot;&gt;remove&lt;/span&gt;();

                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (selectionKey.&lt;span class=&quot;fu&quot;&gt;isAcceptable&lt;/span&gt;()) {
                    SocketChannel socketChannel = ssc.&lt;span class=&quot;fu&quot;&gt;accept&lt;/span&gt;();
                    socketChannel.&lt;span class=&quot;fu&quot;&gt;configureBlocking&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
                    socketChannel.&lt;span class=&quot;fu&quot;&gt;register&lt;/span&gt;(selector, SelectionKey.&lt;span class=&quot;fu&quot;&gt;OP_READ&lt;/span&gt;);
                } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (selectionKey.&lt;span class=&quot;fu&quot;&gt;isReadable&lt;/span&gt;()) {
                    &lt;span class=&quot;co&quot;&gt;// 处理请求&lt;/span&gt;
                    &lt;span class=&quot;fu&quot;&gt;request&lt;/span&gt;(selectionKey);
                    selectionKey.&lt;span class=&quot;fu&quot;&gt;interestOps&lt;/span&gt;(SelectionKey.&lt;span class=&quot;fu&quot;&gt;OP_WRITE&lt;/span&gt;);
                } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (selectionKey.&lt;span class=&quot;fu&quot;&gt;isWritable&lt;/span&gt;()) {
                    &lt;span class=&quot;co&quot;&gt;// 响应请求&lt;/span&gt;
                    &lt;span class=&quot;fu&quot;&gt;response&lt;/span&gt;(selectionKey);
                }
            }
        }
    }
    
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;request&lt;/span&gt;(SelectionKey selectionKey) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException {...}
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Headers &lt;span class=&quot;fu&quot;&gt;parseHeader&lt;/span&gt;(String headerStr) {...}
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;response&lt;/span&gt;(SelectionKey selectionKey) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException {...}
    
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;handleOK&lt;/span&gt;(SocketChannel channel, String path) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException {...}
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;handleNotFound&lt;/span&gt;(SocketChannel channel)  {...}
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;handleBadRequest&lt;/span&gt;(SocketChannel channel) {...}
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;handleForbidden&lt;/span&gt;(SocketChannel channel) {...}
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;handleInternalServerError&lt;/span&gt;(SocketChannel channel) {...}
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;handleError&lt;/span&gt;(SocketChannel channel, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; statusCode) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException {...}
    
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; ByteBuffer &lt;span class=&quot;fu&quot;&gt;readFile&lt;/span&gt;(String path) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException {...}
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getExtension&lt;/span&gt;(String path) {...}
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;log&lt;/span&gt;(String ip, Headers headers, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; code) {}
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码是 HTTP 服务器的核心类的代码结构。其中 request 负责处理请求，response 负责响应请求。handleOK 方法用于响应正常的请求，handleNotFound 等方法用于响应出错的请求。readFile 方法用于读取资源文件，getExtension 则是获取文件后缀。&lt;/p&gt;
&lt;h3 id=&quot;处理请求&quot;&gt;2.1 处理请求&lt;/h3&gt;
&lt;p&gt;处理请求的逻辑比较简单，主要的工作是解析消息头。相关代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;request&lt;/span&gt;(SelectionKey selectionKey) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException {
    &lt;span class=&quot;co&quot;&gt;// 从通道中读取请求头数据&lt;/span&gt;
    SocketChannel channel = (SocketChannel) selectionKey.&lt;span class=&quot;fu&quot;&gt;channel&lt;/span&gt;();
    ByteBuffer buffer = ByteBuffer.&lt;span class=&quot;fu&quot;&gt;allocate&lt;/span&gt;(DEFAULT_BUFFER_SIZE);
    channel.&lt;span class=&quot;fu&quot;&gt;read&lt;/span&gt;(buffer);

    buffer.&lt;span class=&quot;fu&quot;&gt;flip&lt;/span&gt;();
    &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[buffer.&lt;span class=&quot;fu&quot;&gt;limit&lt;/span&gt;()];
    buffer.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(bytes);
    String headerStr = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String(bytes);
    &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
        &lt;span class=&quot;co&quot;&gt;// 解析请求头&lt;/span&gt;
        Headers headers = &lt;span class=&quot;fu&quot;&gt;parseHeader&lt;/span&gt;(headerStr);
        &lt;span class=&quot;co&quot;&gt;// 将请求头对象放入 selectionKey 中&lt;/span&gt;
        selectionKey.&lt;span class=&quot;fu&quot;&gt;attach&lt;/span&gt;(Optional.&lt;span class=&quot;fu&quot;&gt;of&lt;/span&gt;(headers));
    } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (InvalidHeaderException e) {
        selectionKey.&lt;span class=&quot;fu&quot;&gt;attach&lt;/span&gt;(Optional.&lt;span class=&quot;fu&quot;&gt;empty&lt;/span&gt;());
    }
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Headers &lt;span class=&quot;fu&quot;&gt;parseHeader&lt;/span&gt;(String headerStr) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (Objects.&lt;span class=&quot;fu&quot;&gt;isNull&lt;/span&gt;(headerStr) || headerStr.&lt;span class=&quot;fu&quot;&gt;isEmpty&lt;/span&gt;()) {
        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;InvalidHeaderException&lt;/span&gt;();
    }

    &lt;span class=&quot;co&quot;&gt;// 解析请求头第一行&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index = headerStr.&lt;span class=&quot;fu&quot;&gt;indexOf&lt;/span&gt;(CRLF);
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (index == -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) {
        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;InvalidHeaderException&lt;/span&gt;();
    }

    Headers headers = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Headers&lt;/span&gt;();
    String firstLine = headerStr.&lt;span class=&quot;fu&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, index);
    String[] parts = firstLine.&lt;span class=&quot;fu&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot; &quot;&lt;/span&gt;);

    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 请求头的第一行必须由三部分构成，分别为 METHOD PATH VERSION&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 比如：&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *     GET /index.html HTTP/1.1&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (parts.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; &amp;lt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;) {
        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;InvalidHeaderException&lt;/span&gt;();
    }

    headers.&lt;span class=&quot;fu&quot;&gt;setMethod&lt;/span&gt;(parts[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]);
    headers.&lt;span class=&quot;fu&quot;&gt;setPath&lt;/span&gt;(parts[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]);
    headers.&lt;span class=&quot;fu&quot;&gt;setVersion&lt;/span&gt;(parts[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]);

    &lt;span class=&quot;co&quot;&gt;// 解析请求头属于部分&lt;/span&gt;
    parts = headerStr.&lt;span class=&quot;fu&quot;&gt;split&lt;/span&gt;(CRLF);
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (String part : parts) {
        index = part.&lt;span class=&quot;fu&quot;&gt;indexOf&lt;/span&gt;(KEY_VALUE_SEPARATOR);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (index == -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
        }
        String key = part.&lt;span class=&quot;fu&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, index);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (index == -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; || index + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &amp;gt;= part.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;()) {
            headers.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(key, &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;);
            &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
        }
        String value = part.&lt;span class=&quot;fu&quot;&gt;substring&lt;/span&gt;(index + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
        headers.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(key, value);
    }

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; headers;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简单总结一下上面的代码逻辑，首先是从通道中读取请求头，然后解析读取到的请求头，最后将解析出的 Header 对象放入 selectionKey 中。处理请求的逻辑很简单，不多说了。&lt;/p&gt;
&lt;h3 id=&quot;响应请求&quot;&gt;2.2 响应请求&lt;/h3&gt;
&lt;p&gt;看完处理请求的逻辑，接下来再来看看响应请求的逻辑。代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;26&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;response&lt;/span&gt;(SelectionKey selectionKey) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException {
    SocketChannel channel = (SocketChannel) selectionKey.&lt;span class=&quot;fu&quot;&gt;channel&lt;/span&gt;();
    &lt;span class=&quot;co&quot;&gt;// 从 selectionKey 中取出请求头对象&lt;/span&gt;
    Optional&amp;lt;Headers&amp;gt; op = (Optional&amp;lt;Headers&amp;gt;) selectionKey.&lt;span class=&quot;fu&quot;&gt;attachment&lt;/span&gt;();

    &lt;span class=&quot;co&quot;&gt;// 处理无效请求，返回 400 错误&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!op.&lt;span class=&quot;fu&quot;&gt;isPresent&lt;/span&gt;()) {
        &lt;span class=&quot;fu&quot;&gt;handleBadRequest&lt;/span&gt;(channel);
        channel.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
    }

    String ip = channel.&lt;span class=&quot;fu&quot;&gt;getRemoteAddress&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;);
    Headers headers = op.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;();
    &lt;span class=&quot;co&quot;&gt;// 如果请求 /meta/ 路径下的资源，则认为是非法请求，返回 403 错误&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (headers.&lt;span class=&quot;fu&quot;&gt;getPath&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;startsWith&lt;/span&gt;(META_RESOURCE_DIR_PREFIX)) {
        &lt;span class=&quot;fu&quot;&gt;handleForbidden&lt;/span&gt;(channel);
        channel.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
        &lt;span class=&quot;fu&quot;&gt;log&lt;/span&gt;(ip, headers, FORBIDDEN.&lt;span class=&quot;fu&quot;&gt;getCode&lt;/span&gt;());
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
        &lt;span class=&quot;fu&quot;&gt;handleOK&lt;/span&gt;(channel, headers.&lt;span class=&quot;fu&quot;&gt;getPath&lt;/span&gt;());
        &lt;span class=&quot;fu&quot;&gt;log&lt;/span&gt;(ip, headers, OK.&lt;span class=&quot;fu&quot;&gt;getCode&lt;/span&gt;());
    } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (FileNotFoundException e) {
        &lt;span class=&quot;co&quot;&gt;// 文件未发现，返回 404 错误&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;handleNotFound&lt;/span&gt;(channel);
        &lt;span class=&quot;fu&quot;&gt;log&lt;/span&gt;(ip, headers, NOT_FOUND.&lt;span class=&quot;fu&quot;&gt;getCode&lt;/span&gt;());
    } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
        &lt;span class=&quot;co&quot;&gt;// 其他异常，返回 500 错误&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;handleInternalServerError&lt;/span&gt;(channel);
        &lt;span class=&quot;fu&quot;&gt;log&lt;/span&gt;(ip, headers, INTERNAL_SERVER_ERROR.&lt;span class=&quot;fu&quot;&gt;getCode&lt;/span&gt;());
    } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
        channel.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
    }
}

&lt;span class=&quot;co&quot;&gt;// 处理正常的请求&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;handleOK&lt;/span&gt;(SocketChannel channel, String path) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException {
    ResponseHeaders headers = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ResponseHeaders&lt;/span&gt;(OK.&lt;span class=&quot;fu&quot;&gt;getCode&lt;/span&gt;());

    &lt;span class=&quot;co&quot;&gt;// 读取文件&lt;/span&gt;
    ByteBuffer bodyBuffer = &lt;span class=&quot;fu&quot;&gt;readFile&lt;/span&gt;(path);
    &lt;span class=&quot;co&quot;&gt;// 设置响应头&lt;/span&gt;
    headers.&lt;span class=&quot;fu&quot;&gt;setContentLength&lt;/span&gt;(bodyBuffer.&lt;span class=&quot;fu&quot;&gt;capacity&lt;/span&gt;());
    headers.&lt;span class=&quot;fu&quot;&gt;setContentType&lt;/span&gt;(ContentTypeUtils.&lt;span class=&quot;fu&quot;&gt;getContentType&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getExtension&lt;/span&gt;(path)));
    ByteBuffer headerBuffer = ByteBuffer.&lt;span class=&quot;fu&quot;&gt;wrap&lt;/span&gt;(headers.&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getBytes&lt;/span&gt;());

    &lt;span class=&quot;co&quot;&gt;// 将响应头和资源数据一同返回&lt;/span&gt;
    channel.&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ByteBuffer[]{headerBuffer, bodyBuffer});
}

&lt;span class=&quot;co&quot;&gt;// 处理请求资源未发现的错误&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;handleNotFound&lt;/span&gt;(SocketChannel channel)  {
    &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
        &lt;span class=&quot;fu&quot;&gt;handleError&lt;/span&gt;(channel, NOT_FOUND.&lt;span class=&quot;fu&quot;&gt;getCode&lt;/span&gt;());
    } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
        &lt;span class=&quot;fu&quot;&gt;handleInternalServerError&lt;/span&gt;(channel);
    }
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;handleError&lt;/span&gt;(SocketChannel channel, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; statusCode) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException {
    ResponseHeaders headers = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ResponseHeaders&lt;/span&gt;(statusCode);
    &lt;span class=&quot;co&quot;&gt;// 读取文件&lt;/span&gt;
    ByteBuffer bodyBuffer = &lt;span class=&quot;fu&quot;&gt;readFile&lt;/span&gt;(String&lt;span class=&quot;fu&quot;&gt;.format&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;.html&quot;&lt;/span&gt;, statusCode));
    &lt;span class=&quot;co&quot;&gt;// 设置响应头&lt;/span&gt;
    headers.&lt;span class=&quot;fu&quot;&gt;setContentLength&lt;/span&gt;(bodyBuffer.&lt;span class=&quot;fu&quot;&gt;capacity&lt;/span&gt;());
    headers.&lt;span class=&quot;fu&quot;&gt;setContentType&lt;/span&gt;(ContentTypeUtils.&lt;span class=&quot;fu&quot;&gt;getContentType&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;html&quot;&lt;/span&gt;));
    ByteBuffer headerBuffer = ByteBuffer.&lt;span class=&quot;fu&quot;&gt;wrap&lt;/span&gt;(headers.&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getBytes&lt;/span&gt;());

    &lt;span class=&quot;co&quot;&gt;// 将响应头和资源数据一同返回&lt;/span&gt;
    channel.&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ByteBuffer[]{headerBuffer, bodyBuffer});
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码略长，不过逻辑仍然比较简单。首先，要判断请求头存在，以及资源路径是否合法。如果都合法，再去读取资源文件，如果文件不存在，则返回 404 错误码。如果发生其他异常，则返回 500 错误。如果没有错误发生，则正常返回响应头和资源数据。这里只贴了核心代码，其他代码就不贴了，大家自己去看吧。&lt;/p&gt;
&lt;h3 id=&quot;效果演示&quot;&gt;2.3 效果演示&lt;/h3&gt;
&lt;p&gt;分析完代码，接下来看点轻松的吧。下面贴一张代码的运行效果图，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-pictures.oss-cn-shanghai.aliyuncs.com/tinyhttpd1_wm.gif&quot; alt=&quot;tinyhttpd1_w&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;3.总结&lt;/h2&gt;
&lt;p&gt;本文所贴的代码是我在学习 Selector 过程中写的，核心代码不到 300 行。通过动手写代码，也使得我加深了对 Selector 的了解。在学习 JDK 的过程中，强烈建议大家多动手写代码。通过写代码，并踩一些坑，才能更加熟练运用相关技术。这个是我写 NIO 系列文章的一个感触。&lt;/p&gt;
&lt;p&gt;好了，本文到这里结束。谢谢阅读！&lt;/p&gt;
&lt;blockquote readability=&quot;5.0279329608939&quot;&gt;
&lt;p&gt;本文在知识共享许可协议 4.0 下发布，转载需在明显位置处注明出处&lt;br/&gt;作者：coolblog&lt;br/&gt;本文同步发布在我的个人博客：&lt;a href=&quot;http://www.coolblog.xyz/?r=cb&quot; class=&quot;uri&quot;&gt;http://www.coolblog.xyz/?r=cb&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;&lt;img src=&quot;http://blog-pictures.oss-cn-shanghai.aliyuncs.com/cc.png&quot; alt=&quot;cc&quot;/&gt;&lt;/a&gt;&lt;br/&gt;本作品采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议&lt;/a&gt;进行许可。&lt;/p&gt;
</description>
<pubDate>Sun, 08 Apr 2018 04:05:00 +0000</pubDate>
<dc:creator>coolblog.xyz</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nullllun/p/8734696.html</dc:identifier>
</item>
<item>
<title>如何在小程序上增加音视频？ - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/8743887.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/8743887.html</guid>
<description>&lt;p&gt;欢迎大家前往&lt;a href=&quot;https://cloud.tencent.com/developer?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;腾讯云&lt;/a&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;+社区&lt;/a&gt;，获取更多腾讯海量技术实践干货哦&lt;span lang=&quot;EN-US&quot;&gt;~&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;本文首发在云+社区，未经许可，不得转载。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作者：常青|腾讯视频云终端技术负责人&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;2017年第四季度，腾讯云终端团队和微信合作，将腾讯云多年积累以SDK的形式落到微信上，从而开放了音视频能力。&lt;/strong&gt;&lt;span&gt;今天我主要跟大家介绍一下关于小程序的音视频，然后先做一下自我介绍。我也是腾讯云的同学，我们有一个非常不错的视频云，大家看到的直播、点播包括实时通话等场景应用都是在腾讯视频云落地的。我这边主要负责视频云终端技术这一块的事情，这一块今天也是围绕着老本行，跟大家谈一谈我们怎么样把音视频技术在小程序上进行落地。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p2.pstatp.com/large/pgc-image/1523155157914449bc6e9f7&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;今天主要是这几个部分，首先我们为什么要干这个事情？因为很多朋友就说腾讯云讲这个东西一点不感兴趣我不要听，因为并没有那个需求。其实我们可以看一下再说，这里面有很多细分的场景，有很多的商业价值和挖掘空间的。&lt;/p&gt;
&lt;p&gt;值得注意的是今天的主题主要讲原理，讲一下技术路线。这一块主要是分享了，没有太多打广告的意思。如果大家有时间可以耐心的听下来，我觉得是不错的。如果你之前没有了解过，我估计听下来你也可以成为半个音视频专家。最后我讲一讲快速的落地，黄老师刚说的WEBRTC我一直在用，它可以实现一个目标，让我一个人可以搞定一个很不错的东西，在此之前至少是两个人，一个前台一个后台。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小程序的优势大家都知道，没有安装成本，比如说平时去刷的百度的贴吧，你点开广告你就没有欲望去继续下载了。这些广告都是需要闪现的，到底有多少人装？这是一个数学游戏。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还有一些&lt;strong&gt;低频刚需的场景&lt;/strong&gt;，如果你真的解决了APP的安装问题，比如说刚才黄老师也讲的摩拜单车，你以前没装APP，如果在多装这个APP真的会崩溃。所以这个时候这个场景就很有用。还有一个其实刚才说过，广告效应非常好，大家有没有刷朋友圈的时候遇到长按扫描二维码进入我们的介绍页或者介绍的小程序的情况，有很多的广告在小程序就是通过这个方式进行传播的。第一是在朋友圈传播的效果其实会容易，第二信息的传递比较好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p2.pstatp.com/large/pgc-image/1523155303266468f71abe7&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;它既然有那么多好处，我这边自然会想我们的音视频这一块田地怎么去结合，如何去做这么好的场景？说我们有直播、点播还有音视频的应用。直播如映客、花椒、斗鱼等，点播如优酷、土豆、爱奇艺，还有视频，微信上大家开视频会议。这些场景结合微信小程序有很大的市场前景？&lt;/p&gt;

&lt;p&gt;说一下&lt;strong&gt;双面音视频&lt;/strong&gt;，如果两个人聊就是两个朋友或者关系很好的人，这叫交友。但是如果放在企业里面，放在客服系统上这就完全不一样了，比如在线的客服系统，就有很大的优势，相比于传统的一些电话系统。我们可以看这样一个场景，早晨开车上班，迟到了老板没有等到回报，很着急。这时候车擦了，你等着定审的人过来，堵塞交通一两千就罚掉了。这个时候特别希望在线视频就可以解决。我们有很多客户尝试使用APP解决相关问题。但是很多用户抵触心理很强。如果这个时候你跟他说点个链接，在小程序里面搜一个什么什么保险，就可以完成这个简单的流程，后续接入视频通话，在这里拍一个照，然后那边定损人员一看你权责，他权责，这样保险公司和用户都很喜欢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p2.pstatp.com/large/pgc-image/152315534439774522363c9&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再讲一个&lt;strong&gt;远程评审&lt;/strong&gt;，之前我们跟法院合作还有这样的案例。法院在大城市里，原告被告分别是农村两个小伙子，因为一点琐碎的事情吵架。其实法院只需要简单远程做一个事情，这么一点小事，你非到大城市里面打官司，一场官司没有那么容易打的。后续还要来回跑好几趟。现在农村4G和WIFI覆盖面也不错，法院只需要远程解决的事情，这里面有很大的商业空间和利润空间。&lt;/p&gt;
&lt;p&gt;这些场景有很多的可以结合的点，我们的功能非常多，直播、点播都有，这个成本很低。&lt;/p&gt;

&lt;p&gt;我今天的重点就是讲一下原理，这一部分其实是重头戏。&lt;/p&gt;
&lt;p&gt;这一块实际上在讲这个东西之前先说一下故事，跟微信团队也是有一个合作，当时我们希望腾讯云的技术直接放在微信的APP里面去。微信的同学就说我们提一些要求，就是像美国的国防部给别人去提要求，你需要达到多少技术指标，要求非常高的。微信提了几个标准，第一简单易用，第二要可扩展、可定制，我们的开发者可以拿到做各种场景的需求，第三实现音视频直播，第四，第五、第六、第七、第八、第九，我觉得这个需求太夸张了。&lt;/p&gt;
&lt;p&gt;我这个人喜欢被挑战。你知道前苏联卡拉斯克夫曾经做了一把很牛的枪，这个武器在当时越南打阻击主要的武器，其实很大一个就是在设计理念上简单。像阿富汗那个小作坊几个老头就可以做。第二可靠；从不卡壳，关键时刻站住，一按就出来。不像印度造的枪，该打的时候打不出火来。威力很厉害。这把枪的设计理念我们应该去延续。&lt;/p&gt;
&lt;p&gt;我们也在想，我们能不能去想想怎么设计这样一个理念，做这样很有优势的一个解决方案。最后结果当然比较理想，我们算是朝这个方向做了一些努力，也做了一些成绩。&lt;/p&gt;
&lt;p&gt;首先技术架构就不说了，说说我们在微信里面内嵌了音视频组件吧，它是一个免费使用的版本，这个产品我们已经打磨了已经有两年多了，而且现在每个月都一两次更新。而且这里面SDK有两部分组成的，一个是音视频上行，另一个是音视频下行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p2.pstatp.com/large/pgc-image/1523155158110638220516c&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上行解决什么问题？上行叫推流，就是把本地的画面经过采集然后进行预处理，有人可能问处理要干什么？比如说美颜，这个很接地气的需求。再有要降噪，声音也需要降噪，可能音频其他背景很不好的情况下，听着也很不舒服了。然后再进行编码，我们需要以数量级十倍、二十倍把这个数据量压下去。再最后通过网络模块传到云端上去，现在基本上音视频研发都是依赖于这个的，但是效果和稳定性都比较查，不过现在网络成本已经开始降下来了，所以没必要再这样做了，现在直接就可以使用腾讯云。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p2.pstatp.com/large/pgc-image/1523155362816dede3cd06f&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后下行，俗称拉流。原来上去的，现在下来，这个就叫播放。播放的话，其实就是从上至下，尤其是网速时快时慢时候，你会发现播放一卡一卡的，这种效果优化就不好，所以一定要加一个缓存，像一个蓄水池一样，合适的时候在优化，再进行解码，进行渲染。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p2.pstatp.com/large/pgc-image/15231553726392a4b170924&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有了上行，有了下行，有了播放，这就是架构。&lt;/strong&gt;微信里面从标签到下面的SDK，再到网络再到另一端，这样就把这个链路串起来了。有了链路之后我们相当于有了两个基本的原则，就可以组合成多彩的事件。&lt;/p&gt;
&lt;p&gt;技术演化，第一个就是播放对应上行，有了这两个标签之后我们靠云在中间就进行直播功能，就是大家看到映客、斗鱼、花椒等可以体验一下，基本上可以把该有的东西都做到，包括各方面的这些消息、还有各方面的延迟都是很好的，但是全屏效果不如做的原来的做的好。&lt;/p&gt;
&lt;p&gt;这个方案为什么我说要加个云呢？我手里的这个麦，是整个会场的音频系统的一个部分，它负责把声音采过去，其实就像我刚才说的推流，进行一个处理。我估计在这个地方会有一个数字处理电路，会对声音进行一些清洗相应的整合，然后再教给后面的系统进行逐级放大。逐级放大是什么程序？可能我们腾讯云的全国上万台机器，全国各地都要看要扩大到一万台机器。你可以把云当成信号放大器，将一个单点的圆，无限的拷贝，让每一个人都能在就近的一个机房里面拉到一个高质量的音视频流，这样就可以解决卡顿的问题和流畅性的问题。&lt;/p&gt;
&lt;p&gt;当您有了这样一个放大器之后，加上上行和下行，才能构建出一个高并发的解决方案。好处是比较便宜，像腾讯云价格可以看一下，价格很低。再加上它的质量很不错，而且可以做多清晰度的切换，但是因为有很大的数据，所以延迟至少2秒以上。&lt;/p&gt;
&lt;p&gt;接下来我们就开始做能力+，做升级。直播场景搞出来了，但是DS场景还需要做的。DS场景什么时候需要？我现在要做远程调控，2017年在线夹娃娃场景，要求是极其苛刻，这个延迟是极高的，300毫秒行不行？如果你能做到100毫秒真的很牛，所以我们要加科技点了。我们想了两个方案，一个是UDP加速，一个延时控制。娃娃机是一个远程遥控，正常看是2到5秒，真正的机器要求是500毫秒以内把它传递到机器那面过去。这个其实我们要需要做什么样额外的科技点的积累呢？UDP协议当时设计者设计的时候是本着天下为公的理念。所以大家的理念就是你让一让，我让一让，这个场景就变成一个问题，稍微一堵，它就开始网速就下来了。你来做高延时的场景是会被伤掉的，有时候非常希望脾气硬一点。那怎么办呢？我们可能要换一下，我用UDP。当网络差我也要继续发。第二个颜色控制，这个功能其实让我们腾讯云在去年年底做风险大会的时候，解决方案是傲视群雄的，延迟控制不用对着时间戳，因此我们保证了直播到观众的延迟控制在3s以内。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p2.pstatp.com/large/pgc-image/1523155473434140cde97b9&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有了这样一个链路，远程的遥控、远程的互动都可以做，但是这还是单向的。&lt;/p&gt;
&lt;p&gt;有了单向的东西，又延迟又很低，我跟你一路延迟很低的单向，你再跟我一路，咱们这个事情是不是就搞定了？所以专业音视频功能就出来了？其实没有那么简单，我们还需要修很多的科技点。噪声、消除、回音抑制等。&lt;/p&gt;
&lt;p&gt;咱们先说一路上行，一路下行是单向，两路就RTC模式，现在模式选择RTC之后，两边的延迟都是500毫秒，双向通话就可以解决了，背后在技术层面我们需要做这样一个东西。比如说假设我的延迟有点大，那么延迟控制小一点不行吗？但是数据丢了效果一定非常差。大学的时候老师会说音视频解决方案你用UDP就行了，但是压缩后的编码和数据真要丢了就解不出来了，所以真不能丢。那怎么办呢？我们可能就是要在你察觉不到的地方把时间给缩回去。我现在在说四五十分钟的演讲，中间漏掉一两个字大家都能接受。我们做的是删掉多余的时间空隙，人说话里面是有大量的空隙是可以做文章的。比如说我们可以在这各点上做点文章，把我们认为不太重要的数据切掉，这样的情况下声音也没有褶皱，，感觉跟原来有一点点不一样，但是内容很正常。所以在这种情况下我们的时间也压回去了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p2.pstatp.com/large/pgc-image/1523155499349403512eac9&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;双向音视频的时候有时候会有破音、爆音的问题，解决这种问题的时候功能学的角度也是比较简单的，我要把声音变的柔和一点，做一些回声抑制，比如说我现在说话，你看他没有一个劲的循环，其实里面是有回音消除的电子元件的。我们要上就是软件解决方案，就是把本来播出去的声音给它消除掉，这样就会做到回声抑制，否则两个人打电话就会听到无限回声。&lt;/p&gt;
&lt;p&gt;以上声学处理的部分不是一两天能搞定的，，这一块以你可能要养一个研发团队，这个团队有很多声学专家、音视频专家，现在小程序有好处就是RTC搞定。我觉得我们还是做了一件相对比较技术普世的东西。&lt;/p&gt;
&lt;p&gt;有了这个双向音视频之后，我们继续把技术往上提，把房间这个IM也拉下来。因为双人你一路我一路，很简单，很清晰，多人的时候，就很麻烦，所以不能这样玩，所以需要一个总控系统，去协调各个端的状态，协调各个端的输出，然后包括谁说话，谁不说话进行一些协调，这个就需要有一个房间的概念，房间的管理。再加上IM，做的程序，就可以把多人的解决方案搞定了。&lt;/p&gt;
&lt;p&gt;其实多人解决方案里面服务端要多做一些事情，还需要一个类似于房间管理的概念，把A、B、C三个人拉里面，进行状态同步。我们其实在小程序里面没有内置这么多的东西，其实有一点是说微信以简单为主，不要搞的那么复杂。所以就提了一个rtcroom解决方案，就是附及一些额外的逻辑，这一块在腾讯云移动直播解决方案里面是可以找到相应的东西的，或者在小程序音视频里面也可以找到相应的资料。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p2.pstatp.com/large/pgc-image/15231555157847447ecdb96&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;pgc-img-caption&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p2.pstatp.com/large/pgc-image/15231555271499d3a643fb9&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;​这一部分说完我们整个技术路线就走下来了，从简单的直播到DNS再到双向，其实大部分音视频的场景都可以涵盖了。但是这个时候有人跳出来跟我说，我们做Webrtc的，苹果也跟它搞在一起了。这个时候我们想说一下区别，然后我们是怎么优化Webrtc的。&lt;/p&gt;
&lt;p&gt;区别的话，现在你如果直接在微信里面去做Webrtc还是有很多限制的，第一个浏览器内核，在不同的手机可能不太一致，碎片化严重。苹果是内嵌，如果这个东西你要用的话，小程序没办法实施。目前在Webrtc这一块它的任何功能的加持都是苹果和谷歌两边达成一致，这个过程是很漫长的过程。所以在小程序这一块就是做一些接地气功能，不会去看苹果爷爷和谷歌爸爸的眼色。&lt;/p&gt;
&lt;p&gt;再有就是说在设计理念上也会有一些不同，Webrtc很多理念都是基于不可靠链构的，我们小程序是可以用比较廉价的云解决的，这是跟Webrtc的对比。&lt;/p&gt;
&lt;p&gt;我们不是竞争，我们其实是可以跟Webrtc可以搞成一家的。腾讯云后台最近打算把两套系统打通，微信4月份版本发布之后，你们就可以在小程序上和Chrome进行互通。这一部分有点难，有兴趣的朋友可以看一下解决方案还是有技术含量的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p2.pstatp.com/large/pgc-image/152315555871446f1dfa9ae&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;说到打通之后，这涉及到另一套解决方案，小程序+Webrtc，这一块在原来基础上把协议换成rom打头的就可以了。&lt;/p&gt;
&lt;p&gt;快速上手，原来需要给他搭后台，搭前台，非常痛苦，现在大家可以直接在黄老师的系统上直接可以找到相应的包，我们可以把里面的包传上去。而且调试特别方便。我今天分享就到这儿，看看大家有什么问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q：我作为一个个人开发者，比如看有时候个人开发者一些开放内幕，比如说音视频相关的这些没有开放，我想开发这样的产品，它需要办理资质的成本很高。所以小程序在音视频这方面将来会不会更开放，让成本更低一点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：好像有一些比较简单的，你看直播内幕是很难。实际上我是非常希望它全开放的，我也主动找了好几次微信的领导谈这个事情。微信的同学给我说了一个很现实的担忧，以前做APP如果出现涉黄涉政跟APP没关系，所以这个问题他们是非常谨慎的。这里面其实资质的提交核心就是一个问题，如果出现问题靠这个资质我们会在这边做一个控制手段，它只是想做一个自保的方案。个人开发者是个人相关调试的能力，还有一些内幕的话，相应来说其实是比较容易去提交上去的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：点播和直播都会在中间加上缓存做吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：实际上缓存是比较少的，像优酷、土豆是点播，视频是传上去，你可以从中间看，开头看，这是点播。直播是我现在摄象头开着，实时往上传，如果你多了之后可能产生跟高的延迟。腾讯内网是打通的，没必要做那么多缓存，真正缓存主要是大家刚刚看到播放这一块，这一块会有我们的缓存区，这里面有一系列的优化算法，这个是多大然后来去做缓存。其实整个系统里面唯一的缓存就这一块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：我刚才想加缓存就是延迟性变高了。还有常老师提到涉黄涉政这一块，您在演讲的时候说对声音处理就可以做到每秒钟间隔就可以停调了，做视频的时候，会有一些美颜，这样这些内容你们的把控性其实很高的。这样的话，在中间到了类似于关卡那种，检测出涉黄涉政的直接就可以屏蔽掉了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：现在有这种系统，这种系统需要人为干预。我现在是这样一个态度，目前还没到完全撒手不管的状态，现在是有误报的，主持人可能是我的状比较黄，所以涉黄了，这就需要人为过一道，这里面就有延迟。先把人为举报到检测系统，观众越多的线路，你误报产生的代价越高。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：因为在做直播的话，虽然可以做一些涉黄、视频的处理，通过一些AI和监控，我们有没有可能做一些录播，如果一旦出现什么事情的话我们还要出现一些举证。您说的东西在我们平台上是有直接的需求的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：是录播吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：直播的情况下有没有可能录播？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：这个肯定没问题，因为所有过云的，只要您说开一个按钮开了就可以全录下来，或者说从几点到几点录这个都是没问题的。但是在云解决方案的时候你可以把它搬过来，就是在技术含量比较高的地方，你要把音视频重新缓一下，比如说金融开户、还有法院都是录下来的，唯一问题是录是有成本的，是需要付费的。我们相应推录制的时候政用是开放的，商用就不是开放的。 其实像我们很多大客户一年成本带宽占一部分，还有他存一个月，这个量非常大。&lt;/p&gt;

&lt;blockquote readability=&quot;1.1447963800905&quot;&gt;
&lt;p&gt;&lt;strong&gt;问答&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;ask-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/ask/61013?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;短视频可以通过什么技术接入小程序？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相关阅读&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1084910?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;刘翌：如何利用小程序技术解决企业销售难题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1084822?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;李明：微信小游戏技术分享&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1084724?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;余国良：微信小游戏的架构设计与开发&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;col-article-title&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;strong&gt;&lt;span data-sheets-value=&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Unity引擎与C#脚本简介&amp;quot;}&quot; data-sheets-userformat=&quot;{&amp;quot;2&amp;quot;:1,&amp;quot;3&amp;quot;:[null,0]}&quot;&gt;此文已由作者授权腾讯云+社区发布，原文链接：https://cloud.tencent.com/developer/article/1084503?fromSource=waitui&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;strong&gt;&lt;span data-sheets-value=&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Unity引擎与C#脚本简介&amp;quot;}&quot; data-sheets-userformat=&quot;{&amp;quot;2&amp;quot;:1,&amp;quot;3&amp;quot;:[null,0]}&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1112679/201803/1112679-20180330104936874-1573429539.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 08 Apr 2018 03:22:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/8743887.html</dc:identifier>
</item>
<item>
<title>React 深入系列２：组件分类 - iKcamp</title>
<link>http://www.cnblogs.com/ikcamp/p/8743807.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ikcamp/p/8743807.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;文：徐超，《React进阶之路》作者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;授权发布，转载请注明作者及出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;h3 id=&quot;react-深入系列2组件分类&quot;&gt;React 深入系列2：组件分类&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;React 深入系列，深入讲解了React中的重点概念、特性和模式等，旨在帮助大家加深对React的理解，以及在项目中更加灵活地使用React。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;React 组件有很多种分类方式，常见的分类方式有函数组件和类组件，无状态组件和有状态组件，展示型组件和容器型组件。好吧，这又是一篇咬文嚼字的文章。但是，真正把这几组概念咬清楚、嚼明白后，对于页面的组件划分、组件之间的解耦是大有裨益的。&lt;/p&gt;
&lt;h4 id=&quot;函数组件和类组件&quot;&gt;函数组件和类组件&lt;/h4&gt;
&lt;p&gt;函数组件(Functional Component )和类组件(Class Component)，划分依据是根据组件的定义方式。函数组件使用函数定义组件，类组件使用ES6 class定义组件。下面是函数组件和类组件的简单示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 函数组件
function Welcome(props) {
  return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;;
}

// 类组件
class Welcome extends React.Component {
  render() {
    return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;;
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的两种写法是等价的，但函数组件的写法要比类组件简洁，不过类组件比函数组件功能更加强大。类组件可以维护自身的状态变量，即组件的state，类组件还有不同的生命周期方法，可以让开发者能够在组件的不同阶段（挂载、更新、卸载），对组件做更多的控制。&lt;/p&gt;
&lt;p&gt;类组件有这么多优点，是不是我们在开发中应该首选使用类组件呢？其实不然。函数组件更加专注和单一，承担的职责也更加清晰，它只是一个返回React 元素的函数，只关注对应UI的展现。函数组件接收外部传入的props，返回对应UI的DOM描述，仅此而已。当然，如上面例子所示，使用只包含一个render方法的类组件，可以实现和函数组件相同的效果。但函数组件的使用可以从思想上迫使你在设计组件时多做思考，更加关注逻辑和显示的分离，设计出更加合理的页面上组件树的结构。实际操作上，当一个组件不需要管理自身状态时，可以把它设计成函数组件，当你有足够的理由发现它需要“升级”为类组件时，再把它改造为类组件。因为函数组件“升级”为类组件是有一定成本的，这样就会要求你做这个改造前更认真地思考其合理性，而不是仅仅为了一时的方便就使用类组件。&lt;/p&gt;
&lt;h4 id=&quot;无状态组件和有状态组件&quot;&gt;无状态组件和有状态组件&lt;/h4&gt;
&lt;p&gt;无状态组件(Stateless Component )和有状态组件(Stateful Component)，划分依据是根据组件内部是否维护state。无状态组件内部不使用state，只根据外部组件传入的props返回待渲染的React 元素。有状态组件内部使用state，维护自身状态的变化，有状态组件根据外部组件传入的props和自身的state，共同决定最终返回的React 元素。&lt;/p&gt;
&lt;p&gt;很容易知道，函数组件一定是无状态组件，类组件则既可以充当无状态组件，也可以充当有状态组件。但如上文所述，当一个组件不需要管理自身状态时，也就是无状态组件，应该优先设计为函数组件。&lt;/p&gt;
&lt;h4 id=&quot;展示型组件和容器型组件&quot;&gt;展示型组件和容器型组件&lt;/h4&gt;
&lt;p&gt;展示型组件(Presentational Component)和容器型组件(Container Component)，划分依据是根据组件的职责。&lt;/p&gt;
&lt;p&gt;展示型组件的职责是：组件UI长成什么样。展示型组件不关心组件使用的数据是如何获取的，以及组件数据应该如何修改，它只需要知道有了这些数据后，组件UI是什么样子的即可。外部组件通过props传递给展示型组件所需的数据和修改这些数据的回调函数，展示型组件只是它们的使用者。展示型组件一般是无状态组件，不需要state，因为展示型组件不需要管理数据，但当展示型组件需要管理自身的UI状态时，例如控制组件内部弹框的显示与隐藏，是可以使用state的，这时的state属于UI state。既然大部分情况下展示型组件不需要state，应该优先考虑使用函数组件实现展示型组件。&lt;/p&gt;
&lt;p&gt;容器型组件的职责是：组件数据如何工作。容器型组件需要知道如何获取子组件所需数据，以及这些数据的处理逻辑，并把数据和逻辑通过props提供给子组件使用。容器型组件一般是有状态组件，因为它们需要管理页面所需数据。&lt;/p&gt;
&lt;p&gt;例如，下面的例子中，UserListContainer是一个容器型组件，它获取用户列表数据，然后把用户列表数据传递给展示型组件UserList，由UserList负责UI的展现。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class UserListContainer extends React.Component{
  constructor(props){
    super(props);
    this.state = {
      users: []
    }
  }
  
  componentDidMount() {
    var that = this;
    fetch('/path/to/user-api').then(function(response) {
      response.json().then(function(data) {
        that.setState({users: data})
      });
    });
  }

  render() {
    return (
      &amp;lt;UserList users={this.state.users} /&amp;gt;
    )
  }
}

function UserList(props) {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;ul className=&quot;user-list&quot;&amp;gt;
        {props.users.map(function(user) {
          return (
            &amp;lt;li key={user.id}&amp;gt;
              &amp;lt;span&amp;gt;{user.name}&amp;lt;/span&amp;gt;
            &amp;lt;/li&amp;gt;
          );
        })}
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
  )  
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;展示型组件和容器型组件是可以互相嵌套的，展示型组件的子组件既可以包含展示型组件，也可以包含容器型组件，容器型组件也是如此。例如，当一个容器型组件承担的数据管理工作过于复杂时，可以在它的子组件中定义新的容器型组件，由新组件分担数据的管理。展示型组件和容器型组件的划分完全取决于组件所做的事情。&lt;/p&gt;
&lt;h4 id=&quot;总结&quot;&gt;总结&lt;/h4&gt;
&lt;p&gt;通过上面的介绍，可以发现这三组概念有很多重叠部分。这三组概念都体现了关注点分离的思想：UI展现和数据逻辑的分离。函数组件、无状态组件和展示型组件主要关注UI展现，类组件、有状态组件和容器型组件主要关注数据逻辑。但由于它们的划分依据不同，它们并非完全等价的概念。它们之间的关联关系可以归纳为：函数组件一定是无状态组件，展示型组件一般是无状态组件；类组件既可以是有状态组件，又可以是无状态组件，容器型组件一般是有状态组件。&lt;/p&gt;
&lt;h4 id=&quot;下篇预告&quot;&gt;下篇预告：&lt;/h4&gt;
&lt;p&gt;React 深入系列3：State 和 Props&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;新书推荐《React进阶之路》&lt;/p&gt;
&lt;p&gt;作者：徐超&lt;/p&gt;
&lt;p&gt;毕业于浙江大学，硕士，资深前端工程师，长期就职于能源物联网公司远景智能。8年软件开发经验，熟悉大前端技术，拥有丰富的Web前端和移动端开发经验，尤其对React技术栈和移动Hybrid开发技术有深入的理解和实践经验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/4/4/1628e5ca2fd17f5b?w=297&amp;amp;h=387&amp;amp;f=png&amp;amp;s=70401&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/8/31/434a88713a614c84b89fb683b85d2c9e&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;美团点评广告平台大前端团队招收2019\2020年前端实习生&lt;/p&gt;
&lt;p&gt;有意者邮件：&lt;a href=&quot;mailto:yao.zhou@meituan.com&quot;&gt;yao.zhou@meituan.com&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 08 Apr 2018 03:12:00 +0000</pubDate>
<dc:creator>iKcamp</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ikcamp/p/8743807.html</dc:identifier>
</item>
</channel>
</rss>