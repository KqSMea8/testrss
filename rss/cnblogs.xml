<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>开源纯C#工控网关+组态软件(九)定制Visual Studio - 老坏猫</title>
<link>http://www.cnblogs.com/evilcat/p/8859223.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/evilcat/p/8859223.html</guid>
<description>&lt;div&gt;
&lt;p class=&quot;PublishStatus&quot;&gt;&lt;span&gt; &lt;strong&gt;一、  &lt;/strong&gt; &lt;strong&gt;引子&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;因为最近很忙（lan），很久没发博了。不少朋友对那个右键弹出菜单和连线的功能很感兴趣，因为VS本身是不包含这种功能的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/43917/201804/43917-20180416231356034-47530619.png&quot; alt=&quot;&quot;/&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/43917/201804/43917-20180416231344438-1025451272.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;大家想这是什么鬼，怎么我的设计器没有，其实这是一个微软黑科技，如果用好，VS可以打造为你专用的神兵利器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为什么我要扩展Visual Studio的界面设计器？当时我在设计组态软件的时候面临最大的困难大概就是设计器了。一套成熟的组态设计器包括：&lt;strong&gt;界面设计器&lt;/strong&gt;（包括工具栏、设计器、属性管理器）、&lt;strong&gt;脚本编辑器&lt;/strong&gt;（各种语法高亮、语法检查、自动完成等等等等）、&lt;strong&gt;编译&lt;/strong&gt;（解释）&lt;strong&gt;器&lt;/strong&gt;、&lt;strong&gt;调试器&lt;/strong&gt;、&lt;strong&gt;解决方案管理器&lt;/strong&gt;（如何组织项目、导入/导出文件、添加资源、添加引用等等等等），说出来吓死人，这些功能绝对不是我这类单兵作战人员能搞定的。那是微软、西门子这种级别的巨型公司以按人年计算的成本完成的。也曾经想过套用网上开源设计器，搜了半天，得出一个结论：网上的都是一些简单的DEMO或者原型设计，和我想实现的目标还差的太远，完善的好东西一般是不会开源的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是仔细想一下我上面列举的功能，不就是Visual Studio现成的功能吗?放着这个宇宙第一IDE不用，想自己重新造轮子，估计写到老都没有什么结果。于是我想能不能通过扩展VS，去实现一些组态软件的特殊要求功能，比如常用的变量组态编辑器、连线这类的功能？万能的谷歌让我找到了我想要的技术： WPF（含Blend） 设计器扩展。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、  &lt;/strong&gt; &lt;strong&gt;什么是WPF设计器扩展&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;WPF设计器，常规的界面就是 工具栏+XAML编辑器+界面设计器。界面设计器包括右键编辑菜单、设计器装饰（如锚点进行缩放、旋转），属性编辑器等。这些功能已经很强大，完善了；但考虑到用户的特殊需求，VS提供    了强大的扩展功能，参考&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/windows/desktop/bb675306(v=vs.90).aspx&quot;&gt;https://msdn.microsoft.com/zh-cn/library/windows/desktop/bb675306(v=vs.90).aspx&lt;/a&gt; 的介绍：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;WPF 设计器基于一个具有可扩展的体系结构的框架，用户可以扩展这种框架以创建自己的自定义设计体验。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;通过扩展 WPF 设计器对象模型，可以在很大程度上自定义 WPF 内容的设计时外观和行为。&lt;/strong&gt;例如，可以通过下列方式扩展 WPF 设计器：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;利用增强的图形自定义移动并调整标志符号的大小。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;向设计图面添加一个标志符号，在鼠标移动时该标志符号可以使所选控件倾斜。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;在不同工具之间修改控件的设计时外观和行为。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;WPF 设计器 体系结构支持 WPF 的所有表现力。这样便可以创建很多以前不可能拥有的可视化设计体验。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;也就是说，WPF设计器扩展提供了一套API，可以自定义装饰器（如点选控件出现的旋转、拖放、拉伸、定位锚点）、右键菜单（如编辑、排序、对齐、剪切）、属性编辑器，并控制它们的行为；甚至可以改变设计器的外观。是不是很强大？然而这一黑科技很少人知道，而且为了实现设计器扩展，你必须严格遵守一些特殊的规则，而且设计器扩展的调试方式也很特殊。同时，在WPF设计器的扩展基本可以不修改就移植到Blend。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、  &lt;/strong&gt; &lt;strong&gt;如何实现设计器扩展&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;API总体架构&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/43917/201804/43917-20180416231432531-973831461.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;VS的状态分为&lt;strong&gt;设计时&lt;/strong&gt;和&lt;strong&gt;运行时&lt;/strong&gt;。设计时就是你打开VS，拖拽控件，界面布局，属性设置，代码编写，打交道的对象是Visual Studio；运行时就是你编译运行自己的exe文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;WPF的界面设计器，其核心目标就是对控件（&lt;span&gt;Contorl&lt;/span&gt;）的控制，包括对控件的拖放、旋转、移动、属性编辑等。而在设计时如果要操作控件，首先要在设计、编辑过程中通过一些API“发现”要操作的控件，并使其能与VS设计器互动。API这里使用了一个 “提供者模式”来实现：对装饰器、菜单、属性编辑器等的操作功能，提供了相应的&lt;span&gt;Provider&lt;/span&gt;来实现，如装饰器的&lt;span&gt;AdornerProvider&lt;/span&gt;,右键菜单的&lt;span&gt;ContextMenuProvider&lt;/span&gt; 等。所有的&lt;span&gt;Provider&lt;/span&gt;都遵循这样的场景：当你做了一个“选择”的动作（比如拖动一个控件旋转-对应&lt;span&gt;AdornerProvider&lt;/span&gt;的Active事件；或点了某个右键菜单-对应&lt;span&gt;ContextMenuProvider&lt;/span&gt;的&lt;span&gt;Execute&lt;/span&gt;事件），进而通过动作事件的&lt;span&gt;PrimarySelection&lt;/span&gt;参数获取相对应的&lt;span&gt;ModelItem&lt;/span&gt;-控件在设计时的“马甲”，进而通过&lt;span&gt;ModelItem&lt;/span&gt;的&lt;span&gt;GetCurrentValue&lt;/span&gt;方法找到你选择的对象。大家也许会问，设计器扩展为何要多此一举的对控件加一层外壳&lt;span&gt;ModelItem&lt;/span&gt;，直接操作控件不就行了吗？回答是，你对控件的设计时操作，例如对控件的激活，使之成为设计器选中的控件，这一行为在控件本身并没有定义；而设计器也要通过自己“理解”的上下文才能与控件交互。&lt;span&gt;ModelItem&lt;/span&gt;将用户对控件的操作反馈给设计器，或者将设计的动作告知用户，起了关键的中介作用。而设计器本身的“马甲”是&lt;span&gt;DesignerView&lt;/span&gt;，可以通过这个类获取设计器当前设置，如当前界面大小、缩放比例等。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;如何实现&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;要实现一个完整的设计器扩展，要经历以下过程：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;定义元数据，设计器需要知道哪些控件具有哪些扩展。这是通过&lt;span&gt;Metadata&lt;/span&gt; 类来实现的：&lt;span&gt;Metadata&lt;/span&gt; 类有一个&lt;span&gt;AttributeTable&lt;/span&gt;方法，在其中构建了控件和功能（即相应的Provider）的映射关系。&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li readability=&quot;4.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Windows.Design.Features;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Windows.Design.Metadata;
 
 
[assembly: ProvideMetadata(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(HMIControl.VisualStudio.Design.Metadata))]
&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; HMIControl.VisualStudio.Design
{
    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Metadata : IProvideAttributeTable
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Accessed by the designer to register any design-time metadata.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; AttributeTable AttributeTable
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                AttributeTableBuilder builder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AttributeTableBuilder();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;InitializeAttributes(builder);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add the adorner provider to the design-time metadata.&lt;/span&gt;
&lt;span&gt;                builder.AddCustomAttributes(
                    &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(LinkableControl),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FeatureAttribute(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(ControlAdornerProvider))
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;new FeatureAttribute(typeof(TagComplexContextMenuProvider))&lt;/span&gt;
&lt;span&gt;                    );
                builder.AddCustomAttributes(
                  &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(HMIControlBase),
                  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;new FeatureAttribute(typeof(LinkLineAdornerProvider)),&lt;/span&gt;
                  &lt;span&gt;new&lt;/span&gt; FeatureAttribute(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TagComplexContextMenuProvider)));
                builder.AddCustomAttributes(
                    &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(LinkLine),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FeatureAttribute(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(LinkLineAdornerProvider)),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FeatureAttribute(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TagComplexContextMenuProvider)));
                builder.AddCustomAttributes(
                    &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(ButtonBase),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FeatureAttribute(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TagWriterContextMenuProvider)));
                builder.AddCustomAttributes(
                  &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(HMIButton),
                  &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FeatureAttribute(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TagWindowContextMenuProvider)),
                  &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FeatureAttribute(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TagComplexContextMenuProvider)),
                  &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FeatureAttribute(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TagWriterContextMenuProvider)));
                builder.AddCustomAttributes(
                  &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(FromTo),
                  &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FeatureAttribute(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TagWindowContextMenuProvider)));
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; builder.CreateTable();
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;定义具体的&lt;span&gt;Provider&lt;/span&gt;，所有的&lt;span&gt;Provider&lt;/span&gt;都执行如下次序：根据用户选择，找到相关控件，并进行操作，将操作结果反馈给设计器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据设计器扩展的默认规则，在正确的位置使用正确的命名方式，否则你的扩展不会出现在设计器。这些默认规则包括：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;命名空间规则&lt;/strong&gt;：将设计器扩展项目的命名空间设置为&lt;span&gt;HMIControl.VisualStudio.Design&lt;/span&gt;(&lt;span&gt;HMIControl&lt;/span&gt;即控件库的命名空间)，以便设计器能够发现元数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;项目路径规则&lt;/strong&gt;：将项目的输出路径设置为“&lt;span&gt;..\HMIControl\bin\&lt;/span&gt;”(HMIControl即控件库的项目路径)。 使控件的程序集与元数据程序集位于同一文件夹中，从而可为设计器启用元数据发现。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;如何调试&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;一段不能加断点调试的代码会给编写者带来很大困扰。但设计器扩展有一个特殊性：没法在运行时加断点。好在微软早就为我们安排好了一切。具体可参考&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/sqlserver/bb514636&quot;&gt;https://msdn.microsoft.com/zh-cn/sqlserver/bb514636&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;即调试时需要更改项目的属性，设置启动程序为VS的可执行文件： devenv.exe.相当于再打开一个新的VS作为运行时。调试时打开你的设计器操作，会发现第一个打开的VS中已经命中断点了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/43917/201804/43917-20180416231453838-276757414.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、  &lt;/strong&gt; &lt;strong&gt;组态定制需求的实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据组态软件的特殊需求，有两个重要功能是通过WPF设计器扩展实现的：控件连线和右键弹出表达式编辑器，具体代码在&lt;span&gt;LinkableControlDesign&lt;/span&gt;项目中。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;界面连线的实现&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;设计目标&lt;/strong&gt;：实现两个HMI控件的连线。每个控件最多有上下左右四个位置（即锚点，也可以少于四个甚至没有），连线从A控件任一位置引出，自动寻找路径，连到B控件的任一位置；路径不能穿越其他控件，而应自动绕开。连线均为直线，不能为圆弧线或斜线；在控件位置改变时，连线重新计算并绘制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;设计过程&lt;/strong&gt;：具有锚点的控件均继承&lt;span&gt;LinkableControl&lt;/span&gt;类。锚点装饰器类为&lt;span&gt;ControlAdorner&lt;/span&gt;，是一个控件容器，包含上下左右四个锚点，每个锚点由PinAdorner 定义，包含锚点的外形、自动生成路径等功能。路径发现由&lt;span&gt;PathFinder&lt;/span&gt;类实现。与设计器交互通过继承&lt;span&gt;AdornerProvider&lt;/span&gt; 类实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;运行过程&lt;/strong&gt;：通过&lt;span&gt;AdornerProvider&lt;/span&gt; 类的&lt;span&gt;Activate&lt;/span&gt;事件，获取当前点击（激活）的控件并转换为&lt;span&gt;LinkableControl&lt;/span&gt;，并找到控件的父容器&lt;span&gt;Panel&lt;/span&gt;、控件的装饰器&lt;span&gt;ControlAdorner&lt;/span&gt;及其包含的每个&lt;span&gt;PinAdorner&lt;/span&gt;、设计器包装&lt;span&gt;DesignerView&lt;/span&gt;。在每个&lt;span&gt;PinAdorner&lt;/span&gt;的鼠标点击和拖放事件内，可探索到其他控件的锚点、规划路径、生成连线&lt;span&gt;LinkLine&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同时要考虑设计器进行缩放时路径的变化，在&lt;span&gt;DesignerView&lt;/span&gt;的&lt;span&gt;ZoomLevelChanged&lt;/span&gt;事件中处理。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;右键菜单的实现&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;设计目标&lt;/strong&gt;：组态软件一般都有自己的变量表达式编辑器，用来实现对界面控件的动画效果。如果要求设计者手工输入表达式，容易出错，也没有语法检查，很麻烦。但VS并没有提供这个功能，因此我想到了点选控件，弹出的右键菜单加上一个编辑项。这就要用到&lt;span&gt;ContextMenuProvider&lt;/span&gt;的功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;设计过程&lt;/strong&gt;：&lt;span&gt;TagComplexContextMenuProvider&lt;/span&gt; 继承了&lt;span&gt;ContextMenuProvider&lt;/span&gt;，如果菜单“&lt;span&gt;ComplexEditor&lt;/span&gt;”被激活，触发&lt;span&gt;Exeute&lt;/span&gt;事件，则弹出窗体&lt;span&gt;TagComplexEditor&lt;/span&gt;，以设置控件的动画关联的变量表达式；操作结果将写回控件的&lt;span&gt;TagReadText&lt;/span&gt; 属性。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;未来改进&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;编辑器改进：&lt;/strong&gt;支持命令自动完成、语法高亮、更完善的语法检查。。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;快捷键编辑&lt;/strong&gt;：目前的右键弹出编辑器菜单方式操作还可以进一步改进为快捷键方式。但似乎WPF扩展没有提供快捷键弹出的API，期待进一步完善。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;五、  &lt;/strong&gt; &lt;strong&gt;下面的计划&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;写一系列帖子，把架构、原理讲清楚。大致如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;github地址：&lt;a href=&quot;https://github.com/GavinYellow/SharpSCADA&quot; target=&quot;_blank&quot;&gt;https://github.com/GavinYellow/SharpSCADA&lt;/a&gt;。QQ群：102486275&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 16 Apr 2018 15:24:00 +0000</pubDate>
<dc:creator>老坏猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/evilcat/p/8859223.html</dc:identifier>
</item>
<item>
<title>WPF 自定义TreeView控件样式，仿QQ联系人列表 - 小明GG</title>
<link>http://www.cnblogs.com/xiaomingg/p/8765802.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaomingg/p/8765802.html</guid>
<description>&lt;h2&gt;一、前言&lt;/h2&gt;
&lt;p&gt;TreeView控件在项目中使用比较频繁，普通的TreeView并不能满足我们的需求。因此我们需要滴对TreeView进行改造。下面的内容将介绍仿QQ联系人TreeView样式及TreeView数据绑定方法。&lt;/p&gt;
&lt;h2&gt;二、TreeView仿QQ联系人列表&lt;/h2&gt;
&lt;p&gt;准确的说不是仿QQ联系人列表，这个TreeView样式作为组织架构来使用更好。废话不多说，&lt;span&gt;先看效果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1366553/201804/1366553-20180409232420570-21281577.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 2.1、基本思路&lt;/h3&gt;
&lt;p&gt;像这种联系人列表一般涉及到多层级数据，而且有很多数据是需要动态更新的，如果通过手动一条条增加数据反而更复杂，而且不方便。因此为了绑定数据方便我们使用分层模板HierarchicalDataTemplate。&lt;/p&gt;
&lt;p&gt;分层模板中存在两种样式，一种是分组样式，一种是人员样式。不管是分组还是人员绑定的都是对象，这样我们在对象中添加一个属性来辨别是否为分组-IsGrouping。&lt;/p&gt;
&lt;p&gt;默认的TreeView控件四周会有边距，因此需要设置下TreeView的样式。另外鼠标经过和鼠标选中的背景色需要变化，因此还需要设置TreeViewItem的样式。&lt;/p&gt;
&lt;p&gt;根据思路，我们需要设置三个样式，TreeView样式，TreeViewItem样式，HierarchicalDataTemplate分层模板样式。另外为了自动计算下一级的边距，我们需要添加一个转换器IndentConverter。还需要一个转换器需要将布尔类型的IsGrouping转换为Visibility，还需要一个转换器来对Visibility取反。&lt;/p&gt;
&lt;p&gt;这样三个样式，三个转换器。就可以实现我们上面的效果，另外还可以进行动态数据绑定。&lt;/p&gt;
&lt;h3&gt;2.2、样式代码&lt;/h3&gt;
&lt;p&gt;HierarchicalDataTemplate分层模板样式代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;HierarchicalDataTemplate &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;ItemNode&quot;&lt;/span&gt;&lt;span&gt; ItemsSource&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Children,Mode=TwoWay}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid  &lt;/span&gt;&lt;span&gt;Background&lt;/span&gt;&lt;span&gt;=&quot;Transparent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid.Resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;convert:BoolToVisible &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;boolToVisible&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;convert:VisibleToReverse &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;visibleToReverse&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid.Resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;MinHeight&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt;&lt;span&gt; x:Name&lt;/span&gt;&lt;span&gt;=&quot;userinfo&quot;&lt;/span&gt;&lt;span&gt; Background&lt;/span&gt;&lt;span&gt;=&quot;Transparent&quot;&lt;/span&gt;&lt;span&gt; Margin&lt;/span&gt;&lt;span&gt;=&quot;-5 0 0 0&quot;&lt;/span&gt;&lt;span&gt; Visibility&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Visibility,ElementName=groupinginfo,Converter={StaticResource visibleToReverse}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; x:Name&lt;/span&gt;&lt;span&gt;=&quot;grid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Border &lt;/span&gt;&lt;span&gt;Background&lt;/span&gt;&lt;span&gt;=&quot;#62acf9&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;40&quot;&lt;/span&gt;&lt;span&gt; Height&lt;/span&gt;&lt;span&gt;=&quot;40&quot;&lt;/span&gt;&lt;span&gt; CornerRadius&lt;/span&gt;&lt;span&gt;=&quot;4&quot;&lt;/span&gt;&lt;span&gt; HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Left&quot;&lt;/span&gt;&lt;span&gt; Margin&lt;/span&gt;&lt;span&gt;=&quot;0 0 0 0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding SurName}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; FontSize&lt;/span&gt;&lt;span&gt;=&quot;23&quot;&lt;/span&gt;&lt;span&gt; Foreground&lt;/span&gt;&lt;span&gt;=&quot;White&quot;&lt;/span&gt;&lt;span&gt; VerticalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt; HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Border&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Margin&lt;/span&gt;&lt;span&gt;=&quot;50 7 0 0&quot;&lt;/span&gt;&lt;span&gt; FontSize&lt;/span&gt;&lt;span&gt;=&quot;13&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Info}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Foreground&lt;/span&gt;&lt;span&gt;=&quot;#808080&quot;&lt;/span&gt;&lt;span&gt; Margin&lt;/span&gt;&lt;span&gt;=&quot;50 30 0 0&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Count,StringFormat={}{0}人}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Foreground&lt;/span&gt;&lt;span&gt;=&quot;#808080&quot;&lt;/span&gt;&lt;span&gt; HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Right&quot;&lt;/span&gt;&lt;span&gt; VerticalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt; Margin&lt;/span&gt;&lt;span&gt;=&quot;0 0 5 0&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;StackPanel &lt;/span&gt;&lt;span&gt;MinHeight&lt;/span&gt;&lt;span&gt;=&quot;25&quot;&lt;/span&gt;&lt;span&gt; x:Name&lt;/span&gt;&lt;span&gt;=&quot;groupinginfo&quot;&lt;/span&gt;&lt;span&gt; Orientation&lt;/span&gt;&lt;span&gt;=&quot;Horizontal&quot;&lt;/span&gt;&lt;span&gt; Background&lt;/span&gt;&lt;span&gt;=&quot;Transparent&quot;&lt;/span&gt;&lt;span&gt; HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Left&quot;&lt;/span&gt;&lt;span&gt; Visibility&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding IsGrouping,Converter={StaticResource boolToVisible}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Text&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding DisplayName}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Margin&lt;/span&gt;&lt;span&gt;=&quot;3 0&quot;&lt;/span&gt;&lt;span&gt; VerticalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt; HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Left&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;StackPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;HierarchicalDataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TreeViewItem样式代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style  &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;DefaultTreeViewItem&quot;&lt;/span&gt;&lt;span&gt; TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type TreeViewItem}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;MinHeight&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;25&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Background&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Transparent&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;SnapsToDevicePixels&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Margin&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Template&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ControlTemplate &lt;/span&gt;&lt;span&gt;TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type TreeViewItem}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ControlTemplate.Resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;convert:IndentConverter  &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;indentConverter&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ControlTemplate.Resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;Background&lt;/span&gt;&lt;span&gt;=&quot;Transparent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid.RowDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RowDefinition&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid.RowDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Border &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;itemBackground&quot;&lt;/span&gt;&lt;span&gt; Background&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding Background}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  
                                BorderBrush&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding BorderBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  
                                BorderThickness&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding BorderThickness}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  
                                Padding&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding Padding}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;Background&lt;/span&gt;&lt;span&gt;=&quot;Transparent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;ItemRoot&quot;&lt;/span&gt;&lt;span&gt; Margin&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Converter={StaticResource indentConverter},RelativeSource={RelativeSource TemplatedParent}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Background&lt;/span&gt;&lt;span&gt;=&quot;Transparent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;16&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;*&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ToggleButton &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;Expander&quot;&lt;/span&gt;&lt;span&gt; HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Left&quot;&lt;/span&gt;&lt;span&gt; ClickMode&lt;/span&gt;&lt;span&gt;=&quot;Press&quot;&lt;/span&gt;&lt;span&gt; IsChecked&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ToggleButton.Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style &lt;/span&gt;&lt;span&gt;TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type ToggleButton}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Focusable&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Width&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;16&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Height&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;16&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Template&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ControlTemplate &lt;/span&gt;&lt;span&gt;TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type ToggleButton}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Border &lt;/span&gt;&lt;span&gt;Background&lt;/span&gt;&lt;span&gt;=&quot;Transparent&quot;&lt;/span&gt;&lt;span&gt; Height&lt;/span&gt;&lt;span&gt;=&quot;16&quot;&lt;/span&gt;&lt;span&gt; Padding&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;16&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Path &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;ExpandPath&quot;&lt;/span&gt;&lt;span&gt; Data&lt;/span&gt;&lt;span&gt;=&quot;M0,0 L0,6 L6,0 z&quot;&lt;/span&gt;&lt;span&gt; Fill&lt;/span&gt;&lt;span&gt;=&quot;#66645e&quot;&lt;/span&gt;&lt;span&gt; Stroke&lt;/span&gt;&lt;span&gt;=&quot;#66645e&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Path.RenderTransform&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RotateTransform &lt;/span&gt;&lt;span&gt;Angle&lt;/span&gt;&lt;span&gt;=&quot;135&quot;&lt;/span&gt;&lt;span&gt; CenterY&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt; CenterX&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Path.RenderTransform&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Path&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Border&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ControlTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Trigger &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsChecked&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;RenderTransform&quot;&lt;/span&gt;&lt;span&gt; TargetName&lt;/span&gt;&lt;span&gt;=&quot;ExpandPath&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RotateTransform &lt;/span&gt;&lt;span&gt;Angle&lt;/span&gt;&lt;span&gt;=&quot;180&quot;&lt;/span&gt;&lt;span&gt; CenterY&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt; CenterX&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Fill&quot;&lt;/span&gt;&lt;span&gt; TargetName&lt;/span&gt;&lt;span&gt;=&quot;ExpandPath&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;#66645e&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Stroke&quot;&lt;/span&gt;&lt;span&gt; TargetName&lt;/span&gt;&lt;span&gt;=&quot;ExpandPath&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;#66645e&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Trigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Trigger &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsMouseOver&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Stroke&quot;&lt;/span&gt;&lt;span&gt; TargetName&lt;/span&gt;&lt;span&gt;=&quot;ExpandPath&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;#66645e&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Fill&quot;&lt;/span&gt;&lt;span&gt; TargetName&lt;/span&gt;&lt;span&gt;=&quot;ExpandPath&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;#66645e&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Trigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MultiTrigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MultiTrigger.Conditions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Condition &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsMouseOver&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Condition &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsChecked&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MultiTrigger.Conditions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Stroke&quot;&lt;/span&gt;&lt;span&gt; TargetName&lt;/span&gt;&lt;span&gt;=&quot;ExpandPath&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;#66645e&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Fill&quot;&lt;/span&gt;&lt;span&gt; TargetName&lt;/span&gt;&lt;span&gt;=&quot;ExpandPath&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;#66645e&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MultiTrigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ControlTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ControlTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ToggleButton.Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ToggleButton&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ContentPresenter &lt;/span&gt;&lt;span&gt;Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; x:Name&lt;/span&gt;&lt;span&gt;=&quot;PART_Header&quot;&lt;/span&gt;&lt;span&gt; ContentSource&lt;/span&gt;&lt;span&gt;=&quot;Header&quot;&lt;/span&gt;&lt;span&gt;  
                                                 HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Stretch&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;

                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ContentPresenter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Border&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ItemsPresenter &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;ItemsHost&quot;&lt;/span&gt;&lt;span&gt; Grid.Row&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ControlTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTrigger &lt;/span&gt;&lt;span&gt;Binding&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding IsGrouping}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Visibility&quot;&lt;/span&gt;&lt;span&gt; TargetName&lt;/span&gt;&lt;span&gt;=&quot;Expander&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Hidden&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTrigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Trigger &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;HasItems&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Visibility&quot;&lt;/span&gt;&lt;span&gt; TargetName&lt;/span&gt;&lt;span&gt;=&quot;Expander&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Collapsed&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Trigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Trigger &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsExpanded&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Visibility&quot;&lt;/span&gt;&lt;span&gt; TargetName&lt;/span&gt;&lt;span&gt;=&quot;ItemsHost&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Collapsed&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Trigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Trigger &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsSelected&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Background&quot;&lt;/span&gt;&lt;span&gt; TargetName&lt;/span&gt;&lt;span&gt;=&quot;itemBackground&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;#FAE388&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Trigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MultiTrigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MultiTrigger.Conditions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Condition &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsFocused&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Condition &lt;/span&gt;&lt;span&gt;SourceName&lt;/span&gt;&lt;span&gt;=&quot;itemBackground&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;IsMouseOver&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MultiTrigger.Conditions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Background&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot; #fceeb9&quot;&lt;/span&gt;&lt;span&gt; TargetName&lt;/span&gt;&lt;span&gt;=&quot;itemBackground&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MultiTrigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Trigger &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsEnabled&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Foreground&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Trigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ControlTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ControlTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TreeView样式代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;DefaultTreeView&quot;&lt;/span&gt;&lt;span&gt; TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type TreeView}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;ScrollViewer.CanContentScroll&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;VirtualizingStackPanel.IsVirtualizing&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;VirtualizingStackPanel.VirtualizationMode&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Recycling&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;ScrollViewer.IsDeferredScrollingEnabled&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;ItemContainerStyle&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource DefaultTreeViewItem}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Padding&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;ItemsPanel&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ItemsPanelTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;VirtualizingStackPanel &lt;/span&gt;&lt;span&gt;IsItemsHost&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt; Margin&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ItemsPanelTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.3、转换器代码&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; IndentConverter : IValueConverter
    {

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; Convert(&lt;span&gt;object&lt;/span&gt; value, Type targetType, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; parameter, CultureInfo culture)
        {
            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; colunwidth = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; left = &lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;;


            UIElement element &lt;/span&gt;= value &lt;span&gt;as&lt;/span&gt;&lt;span&gt; TreeViewItem;
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (element.GetType() != &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TreeView))
            {
                element &lt;/span&gt;=&lt;span&gt; (UIElement)VisualTreeHelper.GetParent(element);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (element.GetType() == &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TreeViewItem))
                    left &lt;/span&gt;+=&lt;span&gt; colunwidth;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Thickness(left, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; ConvertBack(&lt;span&gt;object&lt;/span&gt; value, Type targetType, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; parameter, CultureInfo culture)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }

    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BoolToVisible : IValueConverter
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; Convert(&lt;span&gt;object&lt;/span&gt; value, Type targetType, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; parameter, CultureInfo culture)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((&lt;span&gt;bool&lt;/span&gt;&lt;span&gt;)value)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Visibility.Visible;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Visibility.Collapsed;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; ConvertBack(&lt;span&gt;object&lt;/span&gt; value, Type targetType, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; parameter, CultureInfo culture)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; VisibleToReverse : IValueConverter
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; Convert(&lt;span&gt;object&lt;/span&gt; value, Type targetType, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; parameter, CultureInfo culture)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((Visibility)value ==&lt;span&gt; Visibility.Visible)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Visibility.Collapsed;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Visibility.Visible;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; ConvertBack(&lt;span&gt;object&lt;/span&gt; value, Type targetType, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; parameter, CultureInfo culture)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.4、引用示例&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TreeView &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;TreeViewOrg&quot;&lt;/span&gt;&lt;span&gt; BorderThickness&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; BorderBrush&lt;/span&gt;&lt;span&gt;=&quot;#BBB&quot;&lt;/span&gt;&lt;span&gt; Background&lt;/span&gt;&lt;span&gt;=&quot;Transparent&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;280&quot;&lt;/span&gt;&lt;span&gt; Height&lt;/span&gt;&lt;span&gt;=&quot;500&quot;&lt;/span&gt;&lt;span&gt; Margin&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt; ItemTemplate&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource ItemNode}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Style&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource DefaultTreeView}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;TreeView&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.5、初始化数据源及绑定对象&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MainWindow()
        {
            InitializeComponent();
            OrgList &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ObservableCollection&amp;lt;OrgModel&amp;gt;&lt;span&gt;()
            {
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; OrgModel()
                {
                    IsGrouping&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                    DisplayName&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;单位名称(3/7)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    Children&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; ObservableCollection&amp;lt;OrgModel&amp;gt;&lt;span&gt;()
                    {
                        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; OrgModel(){
                            IsGrouping&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                            DisplayName&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;未分组联系人(2/4)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                            Children&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; ObservableCollection&amp;lt;OrgModel&amp;gt;&lt;span&gt;()
                            {
                                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; OrgModel(){
                                    IsGrouping&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                                    SurName&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;刘&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                                    Name&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;刘棒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                                    Info&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我要走向天空！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                                    Count&lt;/span&gt;=&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
                                }
                            }
                        }
                    },
                }

            };
            TreeViewOrg.ItemsSource &lt;/span&gt;=&lt;span&gt; OrgList;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ObservableCollection&amp;lt;OrgModel&amp;gt; OrgList { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrgModel
        {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsGrouping { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ObservableCollection&amp;lt;OrgModel&amp;gt; Children { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; DisplayName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SurName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Info { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Count { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 16 Apr 2018 15:19:00 +0000</pubDate>
<dc:creator>小明GG</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaomingg/p/8765802.html</dc:identifier>
</item>
<item>
<title>老刘 Yii2 源码学习笔记之 Component 类 - 掸尘</title>
<link>http://www.cnblogs.com/liuzhang/p/8857544.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuzhang/p/8857544.html</guid>
<description>&lt;h2&gt; 类图关系&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/353089/201804/353089-20180416181800962-1354274428.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt; 属性与方法&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;51&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
class Component extends BaseObject
{
    
    private $_events = [];
    private $_eventWildcards = [];
    private $_behaviors;

    
    public function __get($name)
    public function __set($name, $value)
    public function __isset($name)
    public function __unset($name)
    public function __call($name, $params)
    public function __clone()

    
    public function hasProperty($name, $checkVars = true, $checkBehaviors = true)
    public function canGetProperty($name, $checkVars = true, $checkBehaviors = true)
    public function canSetProperty($name, $checkVars = true, $checkBehaviors = true)
    public function hasMethod($name, $checkBehaviors = true)
    public function behaviors()
    public function hasEventHandlers($name)
        
    public function on($name, $handler, $data = null, $append = true)
    public function off($name, $handler = null)
    public function trigger($name, Event $event = null)
    public function getBehavior($name)
    public function getBehaviors()
    public function attachBehavior($name, $behavior)
    public function attachBehaviors($behaviors)
    public function detachBehavior($name)
    public function detachBehaviors()
    public function ensureBehaviors()
    private function attachBehaviorInternal($name, $behavior)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了className() 方法，BaseObject 父类的方法已经全部重写，因为 BaseObject 只是一个单独的基类，Component 类与 Event 和 Behavior 有更复杂的关联。&lt;/p&gt;
&lt;h2&gt; 事件&lt;/h2&gt;
&lt;p&gt; 事件的代码可以先看 on 方法。[$handler, $data] 数组 0 是 handler  2 是 data 参数 &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
    /**
     * @param $name 事件名称
     * @param $handler 处理回调
     * @param null $data 参数
     * @param bool $append 是否追加
     */
    public function on($name, $handler, $data = null, $append = true)
    {
        //初始化行为
        $this-&amp;gt;ensureBehaviors();

        if (strpos($name, '*') !== false) {
            if ($append || empty($this-&amp;gt;_eventWildcards[$name])) {
                $this-&amp;gt;_eventWildcards[$name][] = [$handler, $data];
            } else {
                array_unshift($this-&amp;gt;_eventWildcards[$name], [$handler, $data]);
            }
            return;
        }
        // 如果已经存在事件名称追加
        if ($append || empty($this-&amp;gt;_events[$name])) {
            $this-&amp;gt;_events[$name][] = [$handler, $data];
        } else {
            array_unshift($this-&amp;gt;_events[$name], [$handler, $data]);
        }
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 事件的执行，下面的代码可以看到 如果 $event 为 NULL， 会 new Event， 并设置 sender 属性为当前 类， $event-&amp;gt;data 为 on 的data 参数，  方法的最后一行， Event::trigger($this, $name, $event)  会执行类级别的事件&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
 public function trigger($name, Event $event = null)
    {
        $this-&amp;gt;ensureBehaviors();

        $eventHandlers = [];
        foreach ($this-&amp;gt;_eventWildcards as $wildcard =&amp;gt; $handlers) {
            if (StringHelper::matchWildcard($wildcard, $name)) {
                $eventHandlers = array_merge($eventHandlers, $handlers);
            }
        }

        if (!empty($this-&amp;gt;_events[$name])) {
            $eventHandlers = array_merge($eventHandlers, $this-&amp;gt;_events[$name]);
        }

        if (!empty($eventHandlers)) {
            if ($event === null) {
                $event = new Event();
            }
            if ($event-&amp;gt;sender === null) {
                $event-&amp;gt;sender = $this;
            }
            $event-&amp;gt;handled = false;
            $event-&amp;gt;name = $name;
            foreach ($eventHandlers as $handler) {
                $event-&amp;gt;data = $handler[1];
                call_user_func($handler[0], $event);
                // stop further handling if the event is handled
                if ($event-&amp;gt;handled) {
                    return;
                }
            }
        }

        // invoke class-level attached handlers
        Event::trigger($this, $name, $event);
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以举个例子, 可以看一下，全部都执行了，可以把 $event 打印一下看一下data&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
namespace app\events;
use yii\base\Event;

class MyEvent extends Event {
    public $message;

    function __construct($message)
    {
        parent::__construct();
        $this-&amp;gt;message = $message;
    }
}


class SiteController extends Controller
{
    const EVENT_TEST = 'test';

    /**
     * {@inheritdoc}
     */
    function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this-&amp;gt;on(self::EVENT_TEST, [new \app\models\EventTest(), 'add'],  ['a', 'b']);
        Event::on(SiteController::className(), self::EVENT_TEST,  function () { echo 'class level event';});
    }&lt;br/&gt;public function actionTest()
    {
        $event = new MyEvent('implements');
        $this-&amp;gt;trigger(self::EVENT_TEST, $event);
        echo 'done';
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;  行为&lt;/h2&gt;
&lt;p&gt; 使用行为（behavior）可以在不修改现有类的情况下，对类的功能进行扩充。 通过将行为绑定到一个类，可以使类具有行为本身所定义的属性和方法，就好像类本来就有这些属性和方法一样。 而且不需要写一个新的类去继承或包含现有类。把行为注入到类中。举个例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
class MyClass extends yii\base\Component
{
    // 空的
}

// Step 2: 定义一个行为类，他将绑定到MyClass上
class MyBehavior extends yii\base\Behavior
{
    // 行为的一个属性
    public $property1 = 'This is property in MyBehavior.';

    // 行为的一个方法
    public function method1()
    {
        return 'Method in MyBehavior is called.';
    }
}

$myClass = new MyClass();
$myBehavior = new MyBehavior();

// Step 3: 将行为绑定到类上
$myClass-&amp;gt;attachBehavior('myBehavior', $myBehavior);

// Step 4: 访问行为中的属性和方法，就和访问类自身的属性和方法一样
echo $myClass-&amp;gt;property1;
echo $myClass-&amp;gt;method1();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上是怎么做到呢， 可以看 Component  里的魔术方法 set、get、call ，对行为对象的属性和方法进行了注入。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
public function __get($name)
{
    //其他省略
    // behavior property
    $this-&amp;gt;ensureBehaviors();
    foreach ($this-&amp;gt;_behaviors as $behavior) {
        if ($behavior-&amp;gt;canGetProperty($name)) {
            return $behavior-&amp;gt;$name;
        }
    }
    //其他省略
}

public function __set($name, $value)
{
    //其他省略
    // behavior property 
    $this-&amp;gt;ensureBehaviors();
    foreach ($this-&amp;gt;_behaviors as $behavior) {
        if ($behavior-&amp;gt;canSetProperty($name)) {
            $behavior-&amp;gt;$name = $value;
            return;
        }
    }
    //其他省略
}

public function __call($name, $params)
{
    $this-&amp;gt;ensureBehaviors();
    foreach ($this-&amp;gt;_behaviors as $object) {
        if ($object-&amp;gt;hasMethod($name)) {
            return call_user_func_array([$object, $name], $params);
        }
    }
    throw new UnknownMethodException('Calling unknown method: ' . get_class($this) . &quot;::$name()&quot;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; Behavior 类中可以绑定事件, 如下面的代码,继承 Behavior并设置 events 属性. &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
public function attach($owner)
    {
        $this-&amp;gt;owner = $owner;
        foreach ($this-&amp;gt;events() as $event =&amp;gt; $handler) {
            $owner-&amp;gt;on($event, is_string($handler) ? [$this, $handler] : $handler);
        }
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;举个具体的例子,下面的代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
namespace app\component;

use Yii;
use yii\base\Controller;
use yii\base\Behavior;

class MyBehavior extends Behavior
{
    public $param;

    public function events()
    {
        return [
            Controller::EVENT_BEFORE_ACTION =&amp;gt; 'handlerBeforeAction'
        ];
    }

    public function handlerBeforeAction()
    {
        echo '由行为注册的组件事件, 执行 beforeAction &amp;lt;br&amp;gt;';
    }

    public function behaviorMethod()
    {
        echo '行为中的定义的方法';
    }
}


namespace app\controllers;

use Yii;
use yii\web\Controller;
use app\component\MyBehavior;



/**
 * Class  CurdController
 * @package app\controllers
 */
class BehaviorController extends Controller
{
    public function behaviors()
    {
        return [
            'access' =&amp;gt; [
                'class' =&amp;gt; MyBehavior::className(),
                'param' =&amp;gt; 'behavior param'
            ]
        ];
    }


    public function actionIndex()
    {
        echo '行为中的属性: '.$this-&amp;gt;param.'&amp;lt;br&amp;gt;';
        $this-&amp;gt;behaviorMethod();
        echo '&amp;lt;br&amp;gt;';
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果为:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
由行为注册的组件事件, 执行 beforeAction 
行为中的属性: behavior param
行为中的定义的方法
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;行为设计灵活,  遵循设计原则对修改关闭,对扩展开放. 行为与 &lt;a href=&quot;http://www.php.net/traits&quot;&gt;traits&lt;/a&gt; 区别可以参考文档核心概念. 行为的添加删除具体可以阅读类里面的详细内容.&lt;/p&gt;
&lt;h2&gt; 属性&lt;/h2&gt;
&lt;p&gt;属性的设置可以参考魔术方法 set 和 get, 非常方便的像调用属性一样调用方法.&lt;/p&gt;
</description>
<pubDate>Mon, 16 Apr 2018 15:04:00 +0000</pubDate>
<dc:creator>掸尘</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuzhang/p/8857544.html</dc:identifier>
</item>
<item>
<title>确定稳定的 Spring Cloud 相关环境版本 - 田园里的蟋蟀</title>
<link>http://www.cnblogs.com/xishuai/p/spring-cloud-spring-boot-jdk-jre-version.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xishuai/p/spring-cloud-spring-boot-jdk-jre-version.html</guid>
<description>&lt;p&gt;开发部署 Spring Cloud 微服务框架，需要先确定 Spring Cloud 的相关环境版本，主要包含：Spring Cloud、Spring Cloud Netflix、JDK、JRE、Java Version等相关版本，以及环境的配置。&lt;/p&gt;
&lt;p&gt;现在最新版本 Java 10、Spring Boot 2.0、Spring Cloud Finchley.M9，但这些版本还不太稳定，而且相关的兼容也不是很好，问题的解决方案也比较少。&lt;/p&gt;
&lt;p&gt;今天花了大概一天的时间，尝试了各种版本的兼容，以及使用部署的问题，最终确定了下面这套版本，比较相对稳定。&lt;/p&gt;
&lt;p&gt;如果使用其他版本的话，会出现一些问题，比如下面：&lt;/p&gt;
&lt;h2 id=&quot;服务器配置-jre-环境&quot;&gt;服务器配置 JRE 环境&lt;/h2&gt;
&lt;p&gt;使用 &lt;a href=&quot;http://www.souvc.com/?p=1569&quot;&gt;wget&lt;/a&gt; 命令，在&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads&quot;&gt;官网&lt;/a&gt;下载对应的 Server JRE。&lt;/p&gt;
&lt;p&gt;创建安装目录：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;sudo&lt;/span&gt; mkdir -p /usr/local/java&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解压文件到指定目录：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;sudo&lt;/span&gt; tar -zxvf serverjre-9.0.1_linux-x64_bin.tar.gz -C /usr/local/java/ --strip-components=1&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编辑配置文件：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;sudo&lt;/span&gt; vi /etc/profile&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将下面配置添加到配置文件中：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;# JRE configuration&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;JAVA_HOME=&lt;/span&gt;/usr/local/java
&lt;span class=&quot;kw&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;JRE_HOME=${JAVA_HOME}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;CLASSPATH=&lt;/span&gt;.:&lt;span class=&quot;ot&quot;&gt;${JAVA_HOME}&lt;/span&gt;/lib:&lt;span class=&quot;ot&quot;&gt;${JRE_HOME}&lt;/span&gt;/lib
&lt;span class=&quot;kw&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;PATH=${JAVA_HOME}&lt;/span&gt;/bin:&lt;span class=&quot;ot&quot;&gt;$PATH&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;# End JDK configuration&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生效及测试：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;source&lt;/span&gt; /etc/profile
$ &lt;span class=&quot;kw&quot;&gt;java&lt;/span&gt; -version&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;mac-配置-jdk-环境&quot;&gt;Mac 配置 JDK 环境&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;官网&lt;/a&gt;下载对应的 Mac JDK 版本。&lt;/p&gt;
&lt;p&gt;直接安装成功后（目录：&lt;code&gt;/Library/Java/JavaVirtualMachines/jdk1.8.0_162.jdk&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;编辑配置文件：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;sudo&lt;/span&gt; vi /etc/profile&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将下面配置添加到配置文件中：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;# JDK configuration&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;JAVA_HOME=&lt;/span&gt;/Library/Java/JavaVirtualMachines/jdk1.8.0_162.jdk/Contents/Home
&lt;span class=&quot;kw&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;JRE_HOME=${JAVA_HOME}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;CLASSPATH=&lt;/span&gt;.:&lt;span class=&quot;ot&quot;&gt;${JAVA_HOME}&lt;/span&gt;/lib:&lt;span class=&quot;ot&quot;&gt;${JRE_HOME}&lt;/span&gt;/lib
&lt;span class=&quot;kw&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;PATH=${JAVA_HOME}&lt;/span&gt;/bin:&lt;span class=&quot;ot&quot;&gt;$PATH&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;# End JDK configuration&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生效及测试：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;source&lt;/span&gt; /etc/profile
$ &lt;span class=&quot;kw&quot;&gt;java&lt;/span&gt; -version&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;IntelliJ IDEA 选择添加 JDK 即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/435188/201804/435188-20180416223941551-2141959597.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;IntelliJ IDEA 修改当前项目的 JDK 版本：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/435188/201804/435188-20180416223949144-444506623.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;a href=&quot;http://www.cnblogs.com/eagle6688/p/8463700.html&quot;&gt;CentOS 7 安装 serverjre 9&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 16 Apr 2018 14:49:00 +0000</pubDate>
<dc:creator>田园里的蟋蟀</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xishuai/p/spring-cloud-spring-boot-jdk-jre-version.html</dc:identifier>
</item>
<item>
<title>QT-第一个程序 Hello QT , 以及QT creator介绍 - LifeYx</title>
<link>http://www.cnblogs.com/lifexy/p/8859062.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lifexy/p/8859062.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;第一个程序 - &lt;/strong&gt;Hello QT&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;首先写main.cpp:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
#include &amp;lt;QApplication&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QMainWindow&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QPushButton&amp;gt;

&lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;char&lt;/span&gt;*&lt;span&gt; argv[])
{
　　QApplication a(argc, argv);    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Qapplication表示一个应用程序,而它的成员函数exec()则用来执行程序以及消息处理&lt;br/&gt;&lt;/span&gt;&lt;span&gt;
　　QMainWindow w;                 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个QmainWindow主窗口对象w&lt;/span&gt;
&lt;span&gt;
　　QPushButton b(&lt;/span&gt;&amp;amp;w);             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过&amp;amp;w,在主窗口上定义QpushButton按钮对象b&lt;/span&gt;&lt;br/&gt;&lt;span&gt;
　　b.setText(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello QT!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过b对象的成员函数setText(),设置按钮名字为Hello QT&lt;/span&gt;&lt;span&gt;

　　w.show();                      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示主窗口&lt;br/&gt;&lt;/span&gt;
&lt;span&gt;　　return&lt;/span&gt; a.exec();               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过exec()执行程序以及消息处理&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;win&lt;/strong&gt;&lt;strong&gt;平台上,&lt;/strong&gt;&lt;strong&gt;命令行编译&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;进入main.cpp所在目录&lt;strong&gt;&lt;span&gt;“1.Hello QT”&lt;/span&gt;&lt;/strong&gt;,输入:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
qmake   -project                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过-project参数,将源码生成(*.pro)工程文件&lt;/span&gt;&lt;span&gt;
qmake                                         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据工程文件生成makefile&lt;/span&gt;&lt;span&gt;
make                                          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据makefile进行编译,生成debug文件夹&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来,进入&lt;span&gt;&lt;strong&gt;debug&lt;/strong&gt;&lt;/span&gt;文件,运行&lt;span&gt;&lt;strong&gt;1.exe&lt;/strong&gt;&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180416222821128-1177905293.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果想删除配置：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
make clean                                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除配置文件,如果想再次编译,只需要make即可&lt;/span&gt;&lt;span&gt;
make distclean                                  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除配置文件以及make,如果想再次编译,可以通过qmake和make&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;linux&lt;/strong&gt;&lt;strong&gt;平台上,&lt;/strong&gt;&lt;strong&gt;命令行编译&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;同样输入:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
qmake   -project                                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过-project参数,将源码生成(*.pro)工程文件&lt;/span&gt;&lt;span&gt;
qmake                                              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据工程文件生成makefile&lt;/span&gt;&lt;span&gt;
make                                               &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据makefile进行编译,生成可执行文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180416222830126-2077245946.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;strong&gt;使用Qt creator&lt;/strong&gt;&lt;strong&gt;编译&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;/span&gt;构建项目时,&lt;span&gt;&lt;strong&gt;如果出现以下问题&lt;/strong&gt;&lt;/span&gt;,则可能环境变量未设置好,或者环境变量的qt路径前面有 “(” 或 “)” 字符,从而导致:&lt;span&gt;&lt;strong&gt;Interrupt/Exception caught code = 0xc00000fd&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180416222839838-861468993.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;调试&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;调试分为两种&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;打印调试&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;头文件 &lt;span&gt;&lt;strong&gt;#include &amp;lt;QDebug&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;比如打印5&lt;/strong&gt;&lt;/span&gt;,代码里输入:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
qDebug()&amp;lt;&amp;lt;&lt;span&gt;5&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;断点调试&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;除了设置普通断点外,还可以&lt;span&gt;&lt;strong&gt;设置条件断点&lt;/strong&gt;&lt;/span&gt;(指程序满足条件,将会暂停)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如下图所示,在&lt;span&gt;第17行处设断点&lt;/span&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180416223053229-2105918375.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然后设置17行处的断点的条件为&lt;span&gt;i==3&lt;/span&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180416223112967-1864073932.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开始调试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从打印处可以看到,代码运行到&lt;span&gt;&lt;strong&gt;i=3&lt;/strong&gt;&lt;/span&gt;时便暂停了:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180416223126416-1908691566.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;QT creator介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;构建(bulid)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;对项目中所有文件进行编译,最终&lt;span&gt;&lt;strong&gt;生成可执行程序&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Debug&lt;/strong&gt;&lt;strong&gt;版&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;用来进行调试的版本,程序中会&lt;strong&gt;&lt;span&gt;包含调试信息&lt;/span&gt;&lt;/strong&gt;,所以&lt;span&gt;&lt;strong&gt;运行效率低&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Release&lt;/strong&gt;&lt;strong&gt;版&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最终发布的版本,&lt;strong&gt;&lt;span&gt;无调试信息&lt;/span&gt;&lt;/strong&gt;,&lt;strong&gt;&lt;span&gt;运行效率高&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;QT Creator&lt;/strong&gt;&lt;strong&gt;工程介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180416223156365-608857449.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;.pro&lt;/strong&gt;&lt;strong&gt;项目描述文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其本质就是一个&lt;span&gt;&lt;strong&gt;简化的Makefile&lt;/strong&gt;&lt;/span&gt;,通过&lt;span&gt;&lt;strong&gt;不同平台的qmake&lt;/strong&gt;&lt;/span&gt;生成不同平台的&lt;span&gt;&lt;strong&gt;Makefile&lt;/strong&gt;&lt;/span&gt;,如下图所示:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180416223205119-1449027417.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;.pro&lt;/strong&gt;&lt;strong&gt;项目描述文件介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;基本构成&lt;/strong&gt;&lt;/span&gt;如下图所示:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180416223214717-1651318498.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;高级变量&lt;/strong&gt;&lt;/span&gt;如下图所示:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180416223255863-50341210.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;其中CONFIG&lt;/strong&gt;&lt;strong&gt;的常用选项有:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;debug&lt;/strong&gt;  &lt;/span&gt;:  构建debug版本的可执行程序&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;release&lt;/strong&gt;&lt;/span&gt; : 构建release版本的可执行程序&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;debug_and_release &lt;/strong&gt;&lt;/span&gt; :  同时构建debug和release版本&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;wran_on&lt;/strong&gt;  &lt;/span&gt;:  尽可能多的输出警告信息&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;wran_off&lt;/strong&gt;  &lt;/span&gt;:  不输出警告信息&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;通过上面的学习,我们就能看懂下面的&lt;span&gt;.pro&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;项目描述文件了:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;QT &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt;&lt;span&gt; core gui                     &lt;span&gt; #添加core和gui模块(QT不仅只涉及显示模块,还有数据库,多线程,网络等等)&lt;/span&gt;

greaterThan(QT_MAJOR_VERSION, &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;): QT += widgets  &lt;span&gt;#如果当前版本大于4.0&lt;/span&gt;&lt;span&gt;&lt;span&gt;,则需要widgets模块&lt;/span&gt;

TARGET &lt;/span&gt;=&lt;span&gt; HelloWorld            &lt;span&gt;#以win平台为例,生成的程序为:HelloWorld.exe&lt;/span&gt;

TEMPLATE &lt;/span&gt;=&lt;span&gt; app                &lt;span&gt; #声明编译出来的是app程序,而不是库文件&lt;/span&gt;

INCLUDEPATH &lt;/span&gt;+= E:/BCC/&lt;span&gt;include \       &lt;span&gt; #指定头文件路径&lt;/span&gt;
               E:&lt;/span&gt;/VC/&lt;span&gt;include

SOURCES &lt;/span&gt;+=&lt;span&gt; Main.cpp \                &lt;span&gt; #源文件&lt;/span&gt;
           HelloWorld.cpp

HEADERS &lt;/span&gt;+=&lt;span&gt; HelloWorld.h              &lt;span&gt;#头文件名&lt;/span&gt;

FORMS   &lt;/span&gt;+=&lt;span&gt; HelloWorld.ui              &lt;span&gt;#指定界面描述文件&lt;/span&gt;

RC_FILE &lt;/span&gt;+=&lt;span&gt; MyIco.rc               &lt;span&gt; #指定资源文件,比如图片&lt;/span&gt;

LIBS    &lt;/span&gt;+= -LE:/vlc-&lt;span&gt;1.11&lt;/span&gt;/sdk/&lt;span&gt;lib           &lt;span&gt;#指定外部库&lt;/span&gt;

CONFIG  &lt;/span&gt;+=&lt;span&gt; warn_on debug                   &lt;span&gt;#构建debug版本,并输出警告信息&lt;/span&gt;

#
# &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; option &lt;span&gt;is&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; CONFIG
#
CONFIG(debug) {                              &lt;span&gt; #如果CONFIG有debug选项&lt;/span&gt;
    DEFINES &lt;/span&gt;+= DEBUG_LOG                     &lt;span&gt; #则定义: #define DEBUG_LOG&lt;/span&gt;&lt;span&gt;
    SOURCES &lt;/span&gt;+=&lt;span&gt; DebugLog.cpp                   &lt;span&gt;#并添加debug相关文件&lt;/span&gt;
    HEADERS &lt;/span&gt;+=&lt;span&gt; DebugLog.h
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;QT Creator&lt;/strong&gt;&lt;/span&gt;生成的&lt;span&gt;&lt;strong&gt;.pro.user&lt;/strong&gt;&lt;/span&gt;文件,包含的是与平台相关的配置信息,与我们无关,不需要修改该文件&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;移植项目时需要删除&lt;span&gt;&lt;strong&gt;.pro.user&lt;/strong&gt;&lt;/span&gt;这个文件,需要时,再由QT Creator自动生成即可&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;接下来,下章继续学习QT中的部件与坐标~&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 16 Apr 2018 14:47:00 +0000</pubDate>
<dc:creator>LifeYx</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lifexy/p/8859062.html</dc:identifier>
</item>
<item>
<title>Glide v4版本用法探究.md - 一粒尘_android</title>
<link>http://www.cnblogs.com/prophet-it/p/8859031.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/prophet-it/p/8859031.html</guid>
<description>&lt;ol&gt;&lt;li&gt;本博客是基于Glide4.0+进行探究和学习&lt;/li&gt;
&lt;li&gt;使用配置&lt;/li&gt;
&lt;li&gt;用法比对&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;android-studio-使用项目gradle配置&quot;&gt;1. Android studio 使用项目gradle配置&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;dependencies {
    //glide
    compile 'com.github.bumptech.glide:glide:4.6.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.6.1'
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;配置要求和可能出现的错误&quot;&gt;2. 配置要求和可能出现的错误&lt;/h2&gt;
&lt;p&gt;Glide4.0要求使用sdk api级别为 27,所以需要将项目的sdk为27,如果配置后还是报java.lang.NoSuchMethodError: No static method这个错误,你再检查下你的v4和v7包,这个依赖也要升到27,下面贴出我的配置&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;com.android.support:appcompat-v7:27.0.2'&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;当然因为glide的特性你也应该再权限请求里面添加相关权限&quot;&gt;3. 当然因为glide的特性,你也应该再权限请求里面添加相关权限&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&amp;gt;
&amp;lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&amp;gt;
&amp;lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&amp;gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;多数情况情况下一行代码足以搞定&quot;&gt;1. 多数情况情况下,一行代码足以搞定;&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;Glide.with(fragment)
    .load(myUrl)
    .into(imageView);&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;各种使用方法的介绍&quot;&gt;3. 各种使用方法的介绍&lt;/h2&gt;
&lt;p&gt;几种占位符&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;placeholder 表示预先占位符&lt;/li&gt;
&lt;li&gt;error 错误图&lt;/li&gt;
&lt;li&gt;fallback 后背回调符 在请求的url/model为 null 时展示。设计 fallback Drawable 的主要目的是允许用户指示 null 是否为可接受的正常情况&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1115942/201804/1115942-20180416224024912-408611041.png&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;加载方式&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;CenterCrop 缩放宽和高都到达View的边界，有一个参数在边界上，另一个参数可能在边界上，也可能超过边界&lt;/li&gt;
&lt;li&gt;CenterInside 如果宽和高都在View的边界内，那就不缩放，否则缩放宽和高都进入View的边界，有一个参数在边界上，另一个参数可能在边界上，也可能在边界内&lt;/li&gt;
&lt;li&gt;CircleCrop 圆形且结合了CenterCrop的特性&lt;/li&gt;
&lt;li&gt;FitCenter 缩放宽和高都进入View的边界，有一个参数在边界上，另一个参数可能在边界上，也可能在边界内&lt;/li&gt;
&lt;li&gt;RoundedCorners 圆角&lt;/li&gt;
&lt;li&gt;thumbnail 缩略图加载&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;多重变换&quot;&gt;4. 多重变换&lt;/h2&gt;
&lt;p&gt;这里指的是比如我们获得的是一张灰色的正方形图片,当是我们最后需要显示的是圆角红色图片,这个时候就可以进行多重变换,这里就需要用到 transform这个方法,现将图片变成圆的,再将图片背景变成红色,Glide给我们提供了圆形图片的方法 new CircleCrop(),这里推荐一个glide自定义库,基本上大部分的变化已经帮我们实现了 &lt;a href=&quot;https://github.com/wasabeef/glide-transformations&quot; class=&quot;uri&quot;&gt;https://github.com/wasabeef/glide-transformations&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; GlideApp.with(activity)
                .load(&quot;https://img3.doubanio.com/lpic/s23119932.jpg&quot;)
                .transform(new MultiTransformation&amp;lt;Bitmap&amp;gt;(new FitCenter(),new CircleCrop(),new CenterInside())) //我们可以自定义变化
                .placeholder(R.drawable.ic_launcher_background)
                .into(image_3);&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;动画添加&quot;&gt;5. 动画添加&lt;/h2&gt;
&lt;p&gt;在v4当中,它的动画是和你要加载的资源类型决定的,所以如果是bitmap就用&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;GenericTransitionOptions 貌似是通用文件&lt;/li&gt;
&lt;li&gt;DrawableTransitionOptions 针对drawable类型文件&lt;/li&gt;
&lt;li&gt;BitmapTransitionOptions 针对bitmap类型文件&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;GlideApp.with(activity)
        .load(&quot;https://img3.doubanio.com/lpic/s23119932.jpg&quot;)
        .placeholder(R.drawable.ic_launcher_background)
        .transition(DrawableTransitionOptions.withCrossFade()) //加载系统的动画
        .into(image_4);
GlideApp.with(activity)
        .load(&quot;https://img3.doubanio.com/lpic/s23119932.jpg&quot;)
        .placeholder(R.drawable.ic_launcher_background)
        .transition(GenericTransitionOptions.with(android.R.anim.slide_in_left)) //加载anim动画
        .into(image_5);&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;从内存中加载也使用动画&quot;&gt;6. 从内存中加载也使用动画&lt;/h2&gt;
&lt;p&gt;Glide的默认时从内存中不使用动画的,这个问题可以通过添加new RequestListener监听实现它的onResourceready()这个方法去实现&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;RequestBuilder&amp;lt;Drawable&amp;gt; requestBuilder = Glide.with(activity)
        .load(&quot;https://img3.doubanio.com/lpic/s23119932.jpg&quot;);
requestBuilder
        .listener(new RequestListener&amp;lt;Drawable&amp;gt;() {
            @Override
            public boolean onLoadFailed(@Nullable GlideException e, Object model, Target&amp;lt;Drawable&amp;gt; target, boolean isFirstResource) {
                return false;
            }

            @Override
            public boolean onResourceReady(Drawable resource, Object model, Target&amp;lt;Drawable&amp;gt; target, DataSource dataSource, boolean isFirstResource) {
                //如果是从缓存加载，设置动画效果
                image_1.startAnimation(AnimationUtils.loadAnimation(activity, android.R.anim.slide_in_left));
                Log.d(&quot;onResourceReady&quot;, &quot;in put &quot; + isFirstResource);
                return false;
            }
        })
        .transition(GenericTransitionOptions.with(android.R.anim.slide_in_left))
        .into(image_1);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后这里有个小tips需要注意: 关于动画只加载一次的问题,要使用startAnimation启动动画而不是setAnimation;&lt;/p&gt;
</description>
<pubDate>Mon, 16 Apr 2018 14:42:00 +0000</pubDate>
<dc:creator>一粒尘_android</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/prophet-it/p/8859031.html</dc:identifier>
</item>
<item>
<title>面向对象精要-理解对象 - BluesQian</title>
<link>http://www.cnblogs.com/QianBoy/p/8859036.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/QianBoy/p/8859036.html</guid>
<description>&lt;h2&gt;1、创建对象&lt;/h2&gt;
&lt;p&gt;创建对象的两种方法：&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;使用Object构造函数&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; person2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object();
person2.name&lt;/span&gt;=&quot;Qian&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;使用对象的字面形式&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; person1=&lt;span&gt;{
    name:&lt;/span&gt;&quot;Qian&quot;&lt;span&gt;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对象添加以及修改时JavaScript会在对象上调用&lt;strong&gt;[[Put]]&lt;/strong&gt;和&lt;strong&gt;[[Set]]&lt;/strong&gt;方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/755438/201804/755438-20180416220040345-1707121041.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2、属性探测&lt;/h2&gt;
&lt;h3&gt;2.1、使用“in”操作符&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
console.log(&quot;name&quot; &lt;span&gt;in&lt;/span&gt; person1)&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.2、使用“hasOwnProperty()”方法&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
console.log(person1.hasOwnProperty(&quot;name&quot;))&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3、删除属性&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; person1=&lt;span&gt;{
    name:&lt;/span&gt;&quot;Qian&quot;&lt;span&gt;
};
&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt; person1.name;
console.log(person1.hasOwnProperty(&lt;/span&gt;&quot;name&quot;))&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/755438/201804/755438-20180416220528866-1845625044.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt; 4、枚举属性&lt;/h2&gt;
&lt;p&gt; for-in：可枚举属性的内部特征都被设置为true，for-in循环会枚举一个对象所有的可没经验属性并将属性名赋给一个变量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; person1 =&lt;span&gt; {
    name:&lt;/span&gt;&quot;Qian&quot;&lt;span&gt;,
    age:&lt;/span&gt;12&lt;span&gt;
}
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; person1){
    console.log(item)&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;name    age&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Object.keys()：获取一个对象的属性列表已备程序使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; person1 =&lt;span&gt; {
    name:&lt;/span&gt;&quot;Qian&quot;&lt;span&gt;,
    age:&lt;/span&gt;12&lt;span&gt;
};
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; properties =&lt;span&gt; Object.keys(person1);
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;properties.length;i++&lt;span&gt;){
    console.log(i)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;5、属性类型&lt;/h2&gt;
&lt;p&gt;数据属性：包含一个&lt;strong&gt;值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;访问器属性：包含一个&lt;strong&gt;函数&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;6、属性特征&lt;/h2&gt;
&lt;h3&gt;通用特征：&lt;/h3&gt;
&lt;p&gt;是否可遍历：&lt;strong&gt;[[Enumerable]]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是否可配置：&lt;strong&gt;[[Configurable]]&lt;/strong&gt;----------&amp;gt;可以用delete删除&lt;/p&gt;
&lt;p&gt;修改属性特征：&lt;strong&gt;Object.defineProperty()&lt;/strong&gt;方法&lt;/p&gt;
&lt;p&gt;例：修改某个对象属性使其变成不可以枚举且不可配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Object.defineProperty(person1,&quot;name&quot;&lt;span&gt;,{
    enumerable:&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    configurable:&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
});
console.log(person1.propertyIsEnumerable(&lt;/span&gt;&quot;name&quot;))&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;数据属性特征：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;[[Value]]：创建对象时该特征自动赋值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[[Writable]]：布尔值，默认可以写&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义完整的数据属性：&lt;/strong&gt;Object.defineProperty()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; person1 =&lt;span&gt; {}
Object.defineProperty(person1,&lt;/span&gt;&quot;name&quot;&lt;span&gt;,{
    value:&lt;/span&gt;&quot;Qian&quot;&lt;span&gt;,
    enumerable:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    configurable:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    writable:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;访问器属性特征：&lt;/h3&gt;
&lt;p&gt;[[Get]]&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[[Set]]&lt;/p&gt;
&lt;p&gt;定义多重属性&lt;/p&gt;
&lt;p&gt;Object.defieProperties()方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; person1 =&lt;span&gt; {}
Object.defineProperties(person1, {
    _name:{
        value: &lt;/span&gt;&quot;Qian&quot;&lt;span&gt;,
        enumerable: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        configurable: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        writable: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    },
    name:{
        get:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            console.log(&lt;/span&gt;&quot;Reading me&quot;&lt;span&gt;)
        }
    }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;获取属性特征：&lt;/h3&gt;
&lt;p&gt;Object.getOwnPropertyDescriptor()方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; person1 =&lt;span&gt; {
    name:&lt;/span&gt;&quot;Qian&quot;&lt;span&gt;
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; deseciptor = Object.getOwnPropertyDescriptor(person1,&quot;name&quot;&lt;span&gt;);
console.log(deseciptor.enumerable)&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;7、禁止修改对象&lt;/h2&gt;
&lt;p&gt;[[Extensible]]：布尔值，设置为false，禁止新属性的添加&lt;/p&gt;
&lt;h3&gt;7.1、禁止扩展&lt;/h3&gt;
&lt;p&gt;方法：使用Object.preventExtensions()&lt;/p&gt;
&lt;p&gt;检测方法：使用Object.isExtensible()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; person1 =&lt;span&gt; {
    name:&lt;/span&gt;&quot;Qian&quot;&lt;span&gt;
}
Object.preventExtensions(person1);
console.log(Object.isExtensible(person1))&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;7.2、封印对象&lt;/h3&gt;
&lt;p&gt;方法：Object.seal()&lt;/p&gt;
&lt;p&gt;检测方法：使用Object.isSealed()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; person1 =&lt;span&gt; {
    name:&lt;/span&gt;&quot;Qian&quot;&lt;span&gt;
};
Object.seal(person1);
console.log(Object.isSealed(person1))&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;7.3、冻结对象&lt;/h3&gt;
&lt;p&gt;方法：Object.freeze()&lt;/p&gt;
&lt;p&gt;检测方法：Object.isFrozen()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; person1 =&lt;span&gt; {
    name:&lt;/span&gt;&quot;Qian&quot;&lt;span&gt;
};
Object.freeze(person1);
console.log(Object.isFrozen(person1))&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;总结：&lt;/h2&gt;
&lt;p&gt;1、将属性视为键值对，对象视为属性的哈希表有助于理解JavaScript对象。&lt;/p&gt;
&lt;p&gt;2、你可以用点好或者中括号访问对象的属性&lt;/p&gt;
&lt;p&gt;3、用in操作符检测某个属性是否存在&lt;/p&gt;
&lt;p&gt;4、属性的两种类型：数据属性和访问器属性&lt;/p&gt;
&lt;p&gt;5、属性的特征&lt;/p&gt;
&lt;p&gt;6、锁定对象的3中方式&lt;/p&gt;
</description>
<pubDate>Mon, 16 Apr 2018 14:42:00 +0000</pubDate>
<dc:creator>BluesQian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/QianBoy/p/8859036.html</dc:identifier>
</item>
<item>
<title>【图解数据结构】 栈&amp;队列 - 喜欢天黑却怕鬼</title>
<link>http://www.cnblogs.com/songwenjie/p/8858972.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/songwenjie/p/8858972.html</guid>
<description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;勤于总结，持续输出！&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;栈的定义&quot;&gt;1.1栈的定义&lt;/h2&gt;
&lt;p&gt;栈（stack）是限定在&lt;strong&gt;表尾进行插入和删除&lt;/strong&gt;的操作的&lt;strong&gt;线性表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们把允许插入和删除的一端称为栈顶（top），另一端称为栈底（bottom）,不包含任何数据元素的栈称为空栈。栈又称为&lt;strong&gt;后进先出&lt;/strong&gt;（Last In First Out）的线性表，简称LIFO结构。&lt;/p&gt;
&lt;p&gt;栈的插入操作，叫做进栈，也称压栈、入栈。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180407/3BAHIdf0IL.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;栈的删除操作，叫做出栈，也称弹栈。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180407/ke0dca4gaC.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;栈的顺序存储结构及实现&quot;&gt;1.2栈的顺序存储结构及实现&lt;/h2&gt;
&lt;p&gt;既然栈是线性表的特例，那么栈的顺序存储其实也是线性表顺序存储的简化。&lt;/p&gt;
&lt;p&gt;用数组实现，下标为0的一端作为栈底比较好，因为首元素都存在栈底。&lt;/p&gt;
&lt;p&gt;栈的结构定义：&lt;/p&gt;
&lt;p&gt;定义一个top变量来指示&lt;strong&gt;栈顶元素在数组中的位置&lt;/strong&gt;，若存储栈的长度为SackSize,则栈顶位置top必须小于SackSize。当栈存在一个元素时，top等于0，因此通常把空栈的判定条件为top=-1。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; SElemType;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; 
{
    SElemType data[MAXSIZE];
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; top;        &lt;span class=&quot;co&quot;&gt;/*用于栈顶指针*/&lt;/span&gt;
} SqStack;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;栈的顺序存储结构进栈操作&quot;&gt;1.3栈的顺序存储结构——进栈操作&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;ot&quot;&gt;#define MAXSIZE 5&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define OK 1&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define ERROR 0&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/*插入元素e为新的栈顶元素*/&lt;/span&gt;
Status Push(SqStack *S, SElemType e)
{
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (S-&amp;gt;top == MAXSIZE - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;/*栈满*/&lt;/span&gt;
    {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ERROR;
    }
    S-&amp;gt;top++;
    S-&amp;gt;data[S-&amp;gt;top] = e;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; OK;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;测试代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()
{
    SqStack stack = { {&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;},&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; }; &lt;span class=&quot;co&quot;&gt;/*初始化栈内有两个元素，top=1*/&lt;/span&gt;
    Push(&amp;amp;stack, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180408/fJAbClBiaj.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;栈的顺序存储结构出栈操作&quot;&gt;1.4栈的顺序存储结构——出栈操作&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;ot&quot;&gt;#define MAXSIZE 5&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define OK 1&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define ERROR 0&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/*若栈不为空，则删除S的栈顶元素，用e返回其值*/&lt;/span&gt;
Status Pop(SqStack *S, SElemType *E)
{
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (S-&amp;gt;top == -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
    {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ERROR;
    }
    *E = S-&amp;gt;data[S-&amp;gt;top];
    S-&amp;gt;data[S-&amp;gt;top] = NULL;
    S-&amp;gt;top--;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; OK;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;测试代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()
{
    SElemType e;
    SqStack stack = { {&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;},&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; }; &lt;span class=&quot;co&quot;&gt;/*初始化栈内有两个元素，top=1*/&lt;/span&gt;
    Push(&amp;amp;stack, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;);
    Pop(&amp;amp;stack, &amp;amp;e);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180408/f3fjbIhKKg.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;验证了&lt;strong&gt;栈&lt;/strong&gt;是&lt;strong&gt;后进先出&lt;/strong&gt;的结构。&lt;/p&gt;
&lt;h2 id=&quot;栈的链式存储结构及实现&quot;&gt;1.5栈的链式存储结构及实现&lt;/h2&gt;
&lt;p&gt;栈的链式存储结构，简称为栈链。由于单链表有头指针，而栈顶指针也是必须的，那么便可以让它俩合二为一。以为就是说栈顶放在单链表的头部。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180408/A27BkGGb94.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于链栈来说，基本不存在栈满的情况，除非内存已经没有可以使用的空间。但是对于空栈来说，链表原定义是头指针指向空，那么链栈的空其实就是top=NULL。&lt;/p&gt;
&lt;p&gt;栈链的结构代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; SElemType;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; StackNode
{
    SElemType data;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; StackNode  *next;
} StackNode;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; StackNode *LinkStackPtr;

&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; LinkStatck
{
    LinkStackPtr top;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; count;
}LinkStatck;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;栈的链式存储结构进栈操作&quot;&gt;1.6栈的链式存储结构——进栈操作&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180408/ll5BIJ9kmm.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;ot&quot;&gt;#define OK 1&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define ERROR 0&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; Status;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; SElemType;

&lt;span class=&quot;co&quot;&gt;/*插入元素e为新的栈顶元素*/&lt;/span&gt;
Status Push(LinkStatck *S, SElemType e)
{
    LinkStackPtr s = (LinkStackPtr)malloc(&lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(StackNode));
    s-&amp;gt;data = e;
    s-&amp;gt;next = S-&amp;gt;top;
    S-&amp;gt;top = s; &lt;span class=&quot;co&quot;&gt;/*将新的节点s赋值给栈顶指针*/&lt;/span&gt;
    S-&amp;gt;count++;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; OK;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;测试代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()
{
    LinkStatck stack = { NULL ,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;}; &lt;span class=&quot;co&quot;&gt;/*初始化一个空链栈*/&lt;/span&gt;
    Push(&amp;amp;stack, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
    Push(&amp;amp;stack, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;);
    Push(&amp;amp;stack, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180408/d16Aa8aGAm.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动画模拟：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180408/9A1bDd7Bdi.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;栈的链式存储结构出栈操作&quot;&gt;1.7栈的链式存储结构——出栈操作&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180408/3BAl16g5H7.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;ot&quot;&gt;#define OK 1&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define ERROR 0&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; Status;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; SElemType;

&lt;span class=&quot;co&quot;&gt;/*若栈不为空，则删除S的栈顶元素，用e返回其值*/&lt;/span&gt;
Status Pop(LinkStatck *S, SElemType *e)
{
    LinkStackPtr p;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (S-&amp;gt;count == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
    {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ERROR;
    }
    *e = S-&amp;gt;top-&amp;gt;data;
    p = S-&amp;gt;top; &lt;span class=&quot;co&quot;&gt;/*将栈顶节点赋值给p*/&lt;/span&gt;
    S-&amp;gt;top = S-&amp;gt;top-&amp;gt;next;  &lt;span class=&quot;co&quot;&gt;/*使栈顶指针下移一位，指向后一节点*/&lt;/span&gt;
    free(p);        &lt;span class=&quot;co&quot;&gt;/*释放节点p*/&lt;/span&gt;
    S-&amp;gt;count--;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; OK;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;测试代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()
{
    LinkStatck stack = { NULL ,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;}; &lt;span class=&quot;co&quot;&gt;/*初始化一个空链栈*/&lt;/span&gt;
    Push(&amp;amp;stack, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
    Push(&amp;amp;stack, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;);
    Push(&amp;amp;stack, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;);
    SElemType e;
    Pop(&amp;amp;stack, &amp;amp;e);
    Pop(&amp;amp;stack, &amp;amp;e);
    Pop(&amp;amp;stack, &amp;amp;e);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180408/EAla6Db819.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动画模拟：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180408/hAAJ4b82fc.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;队列的定义&quot;&gt;2.1队列的定义&lt;/h2&gt;
&lt;p&gt;队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。&lt;/p&gt;
&lt;p&gt;队列是一种先进先出（First In First Out）的线性表，简称FIFO。允许插入的一端称为队尾，允许删除的一端称为队头。&lt;/p&gt;
&lt;h2 id=&quot;队列的顺序存储结构&quot;&gt;2.2队列的顺序存储结构&lt;/h2&gt;
&lt;p&gt;我们假设一个队列有n个元素，则顺序存储的队列需建立一个大于n的数组。&lt;/p&gt;
&lt;p&gt;现在进行入队操作，就是在队尾插入一个元素，不需要移动任何元素，因此时间复杂度是O[1]。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180416/EklCm6JGea.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;出队操作是在队头，那么队列中所有的元素都要向前移动一个位置，确保下标为0的位置不为空，时间复杂度是O[n]，这是个问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180416/EIL08jIhEF.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果不限定出队操作时所有的元素都要向前移动，也就是说队头不一定必须在下标为0 的位置，出队的性能就会大大增加。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180416/Abcdf4jAb6.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是这样又会出现另一个问题——假溢出，就是假设队列前面的位置是空着的，但是从队尾入队已经满了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180416/974E0hB0bl.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;循环队列可以解决这一个问题，后面满了，就从头再开始，也就是头尾相接的循环，这种头尾相接的顺序存储结构称为循环队列。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180416/1K3C2Gg46f.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是循环队列还是会面临着数组溢出的问题。&lt;/p&gt;
&lt;h2 id=&quot;队列的链式存储结构及实现&quot;&gt;2.3队列的链式存储结构及实现&lt;/h2&gt;
&lt;p&gt;队列的链式存储结构，其实就是线性表的单链表，只不过它能尾进头出而已，简称链队列。&lt;/p&gt;
&lt;p&gt;队头指针指向链队列的头节点，而队尾指针指向终端节点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180416/ld55BkfH32.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;空队列时都指向头节点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180416/8lDh51eJl9.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;链队列的结构如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; QElemType;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; QNode &lt;span class=&quot;co&quot;&gt;/*结点结构*/&lt;/span&gt;
{
    QElemType data;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; QNode *next;
}QNode,*QueuePtr;

&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/*队列的链表结构*/&lt;/span&gt;
{
    QueuePtr front, rear;   &lt;span class=&quot;co&quot;&gt;/*队头、队尾指针*/&lt;/span&gt;
} LinkQueue;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;队列的链式存储结构入队操作&quot;&gt;2.4队列的链式存储结构——入队操作&lt;/h2&gt;
&lt;p&gt;入队操作，在队尾插入新元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;ot&quot;&gt;#define OK 1&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define ERROR 0&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; Status;
&lt;span class=&quot;co&quot;&gt;/*插入元素e为Q的新的队尾元素*/&lt;/span&gt;
Status EnQueue(LinkQueue *Q, QElemType e)
{
    QueuePtr s = (QueuePtr)malloc(&lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(QNode));
    s-&amp;gt;data = e;
    s-&amp;gt;next = NULL;

    Q-&amp;gt;rear-&amp;gt;next = s;      &lt;span class=&quot;co&quot;&gt;/*把拥有元素e新节点s赋值给原队尾结点的后继*/&lt;/span&gt;
    Q-&amp;gt;rear = s;        &lt;span class=&quot;co&quot;&gt;/*把s设置为队尾结点，rear指向s*/&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; OK;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;测试代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()
{
    &lt;span class=&quot;co&quot;&gt;/*头结点*/&lt;/span&gt;
    QueuePtr head = (QueuePtr)malloc(&lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(QNode));
    head-&amp;gt;data = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    head-&amp;gt;next = NULL;

    LinkQueue q = { head ,head }; &lt;span class=&quot;co&quot;&gt;//空队列，队头、队尾指针都指向头结点&lt;/span&gt;
    
    EnQueue(&amp;amp;q, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
    EnQueue(&amp;amp;q, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180416/Hk79gAkh30.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动画模拟：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180416/C1CIdk5Ff3.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;队列的链式存储结构出队操作&quot;&gt;2.4队列的链式存储结构——出队操作&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;ot&quot;&gt;#define OK 1&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define ERROR 0&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; Status;
&lt;span class=&quot;co&quot;&gt;/*若队列不为空，删除Q的队头元素，用e返回其值*/&lt;/span&gt;
Status DeQueue(LinkQueue *Q, QElemType *e)
{
    QueuePtr p;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (Q-&amp;gt;front == Q-&amp;gt;rear)
    {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ERROR;
    }
    p = Q-&amp;gt;front-&amp;gt;next;  &lt;span class=&quot;co&quot;&gt;/*将欲删除的队头节点暂存给p*/&lt;/span&gt;
    *e = p-&amp;gt;data;
    Q-&amp;gt;front-&amp;gt;next = p-&amp;gt;next;    &lt;span class=&quot;co&quot;&gt;/*将原队头结点后继赋值给头结点后继*/&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (Q-&amp;gt;rear == p) &lt;span class=&quot;co&quot;&gt;/*若队头是队尾，则删除后将rear指向头结点*/&lt;/span&gt;
    {
        Q-&amp;gt;rear = Q-&amp;gt;front;
    }

    free(p);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; OK;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;测试代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()
{
    &lt;span class=&quot;co&quot;&gt;/*头结点*/&lt;/span&gt;
    QueuePtr head = (QueuePtr)malloc(&lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(QNode));
    head-&amp;gt;data = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    head-&amp;gt;next = NULL;

    LinkQueue q = { head ,head };
    
    EnQueue(&amp;amp;q, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
    EnQueue(&amp;amp;q, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;);
    QElemType e;
    DeQueue(&amp;amp;q, &amp;amp;e);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180416/fAeaKmLFiK.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动画模拟：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180416/4BH6clAf62.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考：《大话数据结构》&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;本文为博主学习感悟总结，水平有限，如果不当，欢迎指正。&lt;/p&gt;
&lt;p&gt;如果您认为还不错，不妨点击一下下方的&lt;span onclick=&quot;Digg();&quot;&gt;【&lt;span&gt;推荐&lt;/span&gt;】&lt;/span&gt;按钮，谢谢支持。&lt;/p&gt;
&lt;p&gt;转载与引用请注明出处。&lt;/p&gt;
</description>
<pubDate>Mon, 16 Apr 2018 14:30:00 +0000</pubDate>
<dc:creator>喜欢天黑却怕鬼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/songwenjie/p/8858972.html</dc:identifier>
</item>
<item>
<title>自行实现高性能MVC WebAPI - YSWALLE</title>
<link>http://www.cnblogs.com/yswenli/p/8858669.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yswenli/p/8858669.html</guid>
<description>&lt;p&gt;　　wcf虽然功能多、扩展性强但是也面临配置忒多，而且restful的功能相当怪异，并且目前没法移植。asp.net core虽然支持webapi，但是功能也相对繁多、配置复杂。就没有一个能让码农们安安心心的写webapi，无需考虑性能、配置、甚至根据问题场景自行设计、改造等问题的方案么？当然不是，特别是在dnc2.0已经相当强大的此时，完全可以自行设计一套简洁、高效的webapi框架！说到自行写一套框架，很多码农们就可能会想到开发工作量难以想像，事实真的如此么？面对日益强大的dnc，本人就不是很信这个邪，所以就亲自编了一个试试。&lt;/p&gt;
&lt;p&gt;      设计的编码思路就是仿asp.net mvc，原因就是asp.net mvc成功发展了这么多年，有着大量的码农习惯了这套优良的编码方式，那么最终实现效果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;***************************************************************************
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;*Copyright (c) 2018 Microsoft All Rights Reserved.
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;*CLR版本： 4.0.30319.42000
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;*机器名称：WENLI-PC
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;*公司名称：Microsoft
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;*命名空间：SAEA.WebAPITest.Controllers
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;*文件名： HomeController
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;*唯一标识：e00bb57f-e3ee-4efe-a7cf-f23db767c1d0
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;*当前的用户域：WENLI-PC
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;*创建人： yswenli
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;*电子邮箱：wenguoli_520@qq.com
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;*创建时间：2018/4/10 16:43:26
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;*=====================================================================
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;*修改标记
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;*修改时间：2018/4/10 16:43:26
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;*修改人： yswenli
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;****************************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Mvc;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.WebAPITest.Attrubutes;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SAEA.WebAPITest.Controllers
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    [LogAtrribute]
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HomeController : Controller
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Index()
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Content(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello,I'm SAEA.WebAPI！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; ActionResult Get(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Json(&lt;span&gt;new&lt;/span&gt; { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yswenli&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Sex = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Show()
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; response =&lt;span&gt; HttpContext.Response;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;             response.Content_Type = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html; charset=utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt;             response.Write(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;h3&amp;gt;测试一下那个response对象使用情况！&amp;lt;/h3&amp;gt;参考消息网4月12日报道外媒称，法国一架“幻影-2000”&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);            
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            response.End();
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Empty();
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Download()
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; File(HttpContext.Server.MapPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/Content/Image/c984b2fb80aeca7b15eda8c004f2e0d4.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　从上面的代码风格出发，那么需要考虑的问题有tcp、http、request、response、server、controller、actionresult、routetable等，下面就一一来解决这个问题。&lt;/p&gt;
&lt;p&gt;　　一、&lt;strong&gt;Tcp：&lt;/strong&gt;这个当然采用IOCP来提高吞吐量，本人之前在做&lt;span&gt;&lt;a href=&quot;https://github.com/yswenli/SAEA/blob/master/Src/SAEA.RedisSocketTest/Program.cs&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Redis Client&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;等的时候就使用这个IOCP Socket的框架，此时正好也可以用上&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;***************************************************************************
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;*Copyright (c) 2018 Microsoft All Rights Reserved.
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;*CLR版本： 4.0.30319.42000
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;*机器名称：WENLI-PC
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;*公司名称：Microsoft
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;*命名空间：SAEA.WebAPI.Http.Net
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;*文件名： ServerSocket
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;*唯一标识：ab912b9a-c7ed-44d9-8e48-eef0b6ff86a2
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;*当前的用户域：WENLI-PC
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;*创建人： yswenli
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;*电子邮箱：wenguoli_520@qq.com
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;*创建时间：2018/4/8 17:11:15
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;*=====================================================================
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;*修改标记
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;*修改时间：2018/4/8 17:11:15
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;*修改人： yswenli
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;****************************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.Sockets.Core;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.Sockets.Interface;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Net;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Http.Net
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ServerSocket : BaseServerSocket
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;event&lt;/span&gt; Action&amp;lt;IUserToken, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; OnRequested;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; ServerSocket(&lt;span&gt;int&lt;/span&gt; bufferSize = &lt;span&gt;1024&lt;/span&gt; * &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt; count = &lt;span&gt;10000&lt;/span&gt;) : &lt;span&gt;base&lt;/span&gt;(&lt;span&gt;new&lt;/span&gt; HContext(), bufferSize, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, count)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; OnReceiveBytes(IUserToken userToken, &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] data)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             HCoder coder =&lt;span&gt; (HCoder)userToken.Coder;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;             coder.GetRequest(data, (result) =&amp;gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                 OnRequested?&lt;span&gt;.Invoke(userToken, result);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Reply(IUserToken userToken, &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] data)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;             &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.Send(userToken, data);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;             &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.Disconnected(userToken);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　二、&lt;strong&gt;Http：&lt;/strong&gt;这个只需要了解一下相关的传输就行，本人的做法就是用Chrome的开发人员工具来查看相关network详情，这样的话就可以实现tcp传输的解码问题了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; GetRequest(&lt;span&gt;byte&lt;/span&gt;[] data, Action&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; onUnpackage)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;lock&lt;/span&gt;&lt;span&gt; (_locker)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; str =&lt;span&gt; Encoding.UTF8.GetString(data);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; index =&lt;span&gt; str.IndexOf(ENDSTR);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (index &amp;gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; s = str.Substring(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, index);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                    _result.Append(s);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                    onUnpackage.Invoke(_result.ToString());
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                    _result.Clear();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (str.Length &amp;gt; index + &lt;span&gt;4&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                         _result.Append(str.Substring(index + &lt;span&gt;4&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                    _result.Append(str);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　解决了tcp的问题，还得简单分析http的解码，http的内容其实就是字符回车分隔。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; HttpRequest(Stream stream)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;._dataStream =&lt;span&gt; stream;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; data =&lt;span&gt; GetRequestData(_dataStream);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; rows =&lt;span&gt; Regex.Split(data, Environment.NewLine);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Request URL &amp;amp; Method &amp;amp; Version&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; first = Regex.Split(rows[&lt;span&gt;0&lt;/span&gt;], &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;(\s+)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 .Where(e =&amp;gt; e.Trim() != &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                .ToArray();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (first.Length &amp;gt; &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;this&lt;/span&gt;.Method = first[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (first.Length &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.Query = first[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.Query.Contains(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; qarr = &lt;span&gt;this&lt;/span&gt;.Query.Split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     &lt;span&gt;this&lt;/span&gt;.URL = qarr[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     &lt;span&gt;this&lt;/span&gt;.Params = GetRequestParameters(qarr[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     &lt;span&gt;this&lt;/span&gt;.URL = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Query;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; uarr = &lt;span&gt;this&lt;/span&gt;.URL.Split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;long&lt;/span&gt;.TryParse(uarr[uarr.Length - &lt;span&gt;1&lt;/span&gt;], &lt;span&gt;out&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; id))
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                     &lt;span&gt;this&lt;/span&gt;.URL = &lt;span&gt;this&lt;/span&gt;.URL.Substring(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;.URL.LastIndexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                     &lt;span&gt;this&lt;/span&gt;.Params.Set(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, id.ToString());
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (first.Length &amp;gt; &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;this&lt;/span&gt;.Protocols = first[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Request Headers&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.Headers =&lt;span&gt; GetRequestHeaders(rows);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Request &quot;GET&quot;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.Method == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.Body =&lt;span&gt; GetRequestBody(rows);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Request &quot;POST&quot;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.Method == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.Body =&lt;span&gt; GetRequestBody(rows);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; contentType =&lt;span&gt; GetHeader(RequestHeaderType.ContentType);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; isUrlencoded = contentType == &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;application/x-www-form-urlencoded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (isUrlencoded) &lt;span&gt;this&lt;/span&gt;.Params = GetRequestParameters(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Body);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　看到上面，有人肯定会说你这个传文件咋办？一个呢本人这个是针对webapi；另外一个，如真有这个场景，可以用Chrome的开发人员工具来查看相关network详情，也可以使用httpanalyzerstd、httpwatch等众多工具分析下，然后自行扩展~&lt;/p&gt;
&lt;p&gt;　　三、Reponse这个是webapi服务端相当重要的一个组件，本人也是尽可能方便并且按asp.net的命名来实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9214b1cd-df15-4591-b627-0cf185a8bc0b')&quot; readability=&quot;45&quot;&gt;&lt;img id=&quot;code_img_closed_9214b1cd-df15-4591-b627-0cf185a8bc0b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9214b1cd-df15-4591-b627-0cf185a8bc0b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9214b1cd-df15-4591-b627-0cf185a8bc0b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9214b1cd-df15-4591-b627-0cf185a8bc0b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;85&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;***************************************************************************
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;*Copyright (c) 2018 Microsoft All Rights Reserved.
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;*CLR版本： 4.0.30319.42000
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;*机器名称：WENLI-PC
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;*公司名称：Microsoft
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;*命名空间：SAEA.WebAPI.Http
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;*文件名： HttpResponse
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;*唯一标识：2e43075f-a43d-4b60-bee1-1f9107e2d133
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;*当前的用户域：WENLI-PC
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;*创建人： yswenli
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;*电子邮箱：wenguoli_520@qq.com
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;*创建时间：2018/4/8 16:46:40
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;*=====================================================================
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;*修改标记
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;*修改时间：2018/4/8 16:46:40
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;*修改人： yswenli
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;****************************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.Commom;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.Sockets.Interface;
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Http.Base;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Mvc;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Net;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; 
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Http
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HttpResponse : BaseHeader
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; HttpStatusCode Status { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } =&lt;span&gt; HttpStatusCode.OK;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; 
&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[] Content { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt; 
&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;internal&lt;/span&gt; HttpServer HttpServer { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; 
&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;internal&lt;/span&gt; IUserToken UserToken { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 创建一个HttpRequest实例
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;httpServer&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;userToken&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;stream&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;         &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; HttpResponse CreateInstance(HttpServer httpServer, IUserToken userToken)
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;             HttpResponse httpResponse = &lt;span&gt;new&lt;/span&gt; HttpResponse(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;             httpResponse.HttpServer =&lt;span&gt; httpServer;
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;             httpResponse.UserToken =&lt;span&gt; userToken;
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; httpResponse;
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 设置回复内容
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;httpResponse&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;result&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; SetResult(HttpResponse httpResponse, ActionResult result)
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;             httpResponse.Content_Encoding =&lt;span&gt; result.ContentEncoding.EncodingName;
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;             httpResponse.Content_Type =&lt;span&gt; result.ContentType;
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;             httpResponse.Status =&lt;span&gt; result.Status;
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (result &lt;span&gt;is&lt;/span&gt;&lt;span&gt; EmptyResult)
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; 
&lt;span&gt; 76&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (result &lt;span&gt;is&lt;/span&gt;&lt;span&gt; FileResult)
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; f = result &lt;span&gt;as&lt;/span&gt;&lt;span&gt; FileResult;
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; 
&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;                httpResponse.SetContent(f.Content);
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; 
&lt;span&gt; 82&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; 
&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;            httpResponse.SetContent(result.Content);
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; 
&lt;span&gt; 88&lt;/span&gt; 
&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; HttpResponse(&lt;span&gt;string&lt;/span&gt; content) : &lt;span&gt;this&lt;/span&gt;(content, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json; charset=utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, HttpStatusCode.OK)
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; 
&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; 
&lt;span&gt; 94&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; HttpResponse(&lt;span&gt;string&lt;/span&gt; content, &lt;span&gt;string&lt;/span&gt; encoding, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; contentType, HttpStatusCode status)
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.Content_Encoding =&lt;span&gt; encoding;
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.Content_Type =&lt;span&gt; contentType;
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.Status =&lt;span&gt; status;
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.SetContent(content);
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; 
&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;internal&lt;/span&gt; HttpResponse SetContent(&lt;span&gt;byte&lt;/span&gt;[] content, Encoding encoding = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.Content =&lt;span&gt; content;
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.Encoding = encoding != &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; encoding : Encoding.UTF8;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.Content_Length =&lt;span&gt; content.Length.ToString();
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; 
&lt;span&gt;110&lt;/span&gt;         &lt;span&gt;internal&lt;/span&gt; HttpResponse SetContent(&lt;span&gt;string&lt;/span&gt; content, Encoding encoding = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化内容&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt;             encoding = encoding != &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; encoding : Encoding.UTF8;
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; SetContent(encoding.GetBytes(content), encoding);
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; 
&lt;span&gt;117&lt;/span&gt; 
&lt;span&gt;118&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetHeader(ResponseHeaderType header)
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.GetHeader(header);
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; 
&lt;span&gt;123&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SetHeader(ResponseHeaderType header, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; value)
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;             &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.SetHeader(header, value);
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; 
&lt;span&gt;128&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 构建响应头部
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; BuildHeader()
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;             StringBuilder builder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;             builder.Append(Protocols + SPACE + Status.ToNVString() +&lt;span&gt; ENTER);
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;             builder.AppendLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Server: Wenli's Server&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;             builder.AppendLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Keep-Alive: timeout=20&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;             builder.AppendLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Date: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + DateTimeHelper.Now.ToFString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; 
&lt;span&gt;140&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Content_Type))
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;                 builder.AppendLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Type:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Content_Type);
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; 
&lt;span&gt;143&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;支持跨域&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt;             builder.AppendLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;             builder.AppendLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Access-Control-Allow-Origin: *&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;             builder.AppendLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Access-Control-Allow-Headers: Content-Type,X-Requested-With,Accept,yswenli&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可自行增加额外的header&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt;             builder.AppendLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Access-Control-Request-Methods: GET, POST, PUT, DELETE, OPTIONS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; 
&lt;span&gt;149&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.Headers != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;.Headers.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;                 &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; Headers.Names)
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;                     builder.AppendLine($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{key}: {Headers[key]}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; 
&lt;span&gt;157&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; builder.ToString();
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; 
&lt;span&gt;160&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 生成数据
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;163&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] ToBytes()
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;             List&amp;lt;&lt;span&gt;byte&lt;/span&gt;&amp;gt; list = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;byte&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送响应头&lt;/span&gt;
&lt;span&gt;167&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; header =&lt;span&gt; BuildHeader();
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt;[] headerBytes = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Encoding.GetBytes(header);
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt; &lt;span&gt;            list.AddRange(headerBytes);
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt; 
&lt;span&gt;171&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送空行&lt;/span&gt;
&lt;span&gt;172&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt;[] lineBytes = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Encoding.GetBytes(System.Environment.NewLine);
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt; &lt;span&gt;            list.AddRange(lineBytes);
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt; 
&lt;span&gt;175&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送内容&lt;/span&gt;
&lt;span&gt;176&lt;/span&gt; &lt;span&gt;            list.AddRange(Content);
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt; 
&lt;span&gt;178&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; list.ToArray();
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt; 
&lt;span&gt;181&lt;/span&gt; 
&lt;span&gt;182&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Write(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; str)
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt; &lt;span&gt;            SetContent(str);
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt; 
&lt;span&gt;187&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; BinaryWrite(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] data)
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt; &lt;span&gt;            SetContent(data);
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt; 
&lt;span&gt;192&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Clear()
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.Write(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt; 
&lt;span&gt;197&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; End()
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt;             HttpServer.Replay(UserToken, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ToBytes());
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt; &lt;span&gt;            HttpServer.Close(UserToken);
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt; 
&lt;span&gt;203&lt;/span&gt; 
&lt;span&gt;204&lt;/span&gt; 
&lt;span&gt;205&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　四、&lt;strong&gt;HttpServer：&lt;/strong&gt;这个就是承载webapi的容器；有人说不是有IIS和Apache么？本人想说的是：有self-host方便么？有无需安装，无需配置、随便高性能开跑好么？asp.net core里面都有了这个，没这个就没有逼格....(此处省略一万字)，前面还研究tcp、http这个当然不能少了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;***************************************************************************
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;*Copyright (c) 2018 Microsoft All Rights Reserved.
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;*CLR版本： 4.0.30319.42000
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;*机器名称：WENLI-PC
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;*公司名称：Microsoft
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;*命名空间：SAEA.WebAPI.Http
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;*文件名： HttpServer
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;*唯一标识：914acb72-d4c4-4fa1-8e80-ce2f83bd06f0
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;*当前的用户域：WENLI-PC
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;*创建人： yswenli
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;*电子邮箱：wenguoli_520@qq.com
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;*创建时间：2018/4/10 13:51:50
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;*=====================================================================
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;*修改标记
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;*修改时间：2018/4/10 13:51:50
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;*修改人： yswenli
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;****************************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.Sockets.Interface;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Common;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Http.Net;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Http
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HttpServer
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        ServerSocket _serverSocket;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; HttpServer()
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             _serverSocket = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServerSocket();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             _serverSocket.OnRequested +=&lt;span&gt; _serverSocket_OnRequested;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Start(&lt;span&gt;int&lt;/span&gt; port = &lt;span&gt;39654&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;            _serverSocket.Start(port);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; _serverSocket_OnRequested(IUserToken userToken, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; htmlStr)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; httpContext = HttpContext.CreateInstance(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, userToken, htmlStr);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; response =&lt;span&gt; httpContext.Response;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;            response.End();
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Replay(IUserToken userToken, &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] data)
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;            _serverSocket.Reply(userToken, data);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt;         &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Close(IUserToken userToken)
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;            _serverSocket.Disconnected(userToken);
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; 
&lt;span&gt;69&lt;/span&gt; 
&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　五、&lt;strong&gt;Controller：&lt;/strong&gt;为了实现类似于mvc的效果，代码量与实现都是其次，但是Controller这个大名鼎鼎的当然不能少了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;***************************************************************************
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;*Copyright (c) 2018 Microsoft All Rights Reserved.
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;*CLR版本： 4.0.30319.42000
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;*机器名称：WENLI-PC
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;*公司名称：Microsoft
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;*命名空间：SAEA.WebAPI.Mvc
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;*文件名： Controller
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;*唯一标识：a303db7d-f83c-4c49-9804-032ec2236232
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;*当前的用户域：WENLI-PC
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;*创建人： yswenli
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;*电子邮箱：wenguoli_520@qq.com
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;*创建时间：2018/4/10 13:58:08
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;*=====================================================================
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;*修改标记
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;*修改时间：2018/4/10 13:58:08
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;*修改人： yswenli
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;****************************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Http;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Mvc
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; WebApi控制器
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Controller
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; HttpContext HttpContext { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 返回Json
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;data&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; JsonResult Json(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; data)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JsonResult(data);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 自定义内容
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;data&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; ContentResult Content(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; data)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ContentResult(data);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 小文件
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;filePath&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; FileResult File(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; filePath)
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileResult(filePath);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 空结果
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;70&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; EmptyResult Empty()
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EmptyResult();
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　六、&lt;strong&gt;ActionResult：&lt;/strong&gt;是mvc里面针对reponse结果进行了一个http格式的封装，本人主要实现了ContentResult、JsonResult、FileResult三个，至于其他的在WebAPI里基本上用不到，所以还是以JsonResult为主&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;***************************************************************************
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;*Copyright (c) 2018 Microsoft All Rights Reserved.
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;*CLR版本： 4.0.30319.42000
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;*机器名称：WENLI-PC
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;*公司名称：Microsoft
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;*命名空间：SAEA.WebAPI.Mvc
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;*文件名： JsonResult
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;*唯一标识：340c3ef0-2e98-4f25-998f-2bb369fa2794
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;*当前的用户域：WENLI-PC
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;*创建人： yswenli
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;*电子邮箱：wenguoli_520@qq.com
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;*创建时间：2018/4/10 16:48:06
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;*=====================================================================
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;*修改标记
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;*修改时间：2018/4/10 16:48:06
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;*修改人： yswenli
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;****************************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Common;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Net;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Mvc
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JsonResult : ActionResult
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; JsonResult(&lt;span&gt;object&lt;/span&gt; model) : &lt;span&gt;this&lt;/span&gt;&lt;span&gt;(SerializeHelper.Serialize(model))
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; JsonResult(&lt;span&gt;string&lt;/span&gt; json) : &lt;span&gt;this&lt;/span&gt;&lt;span&gt;(json, Encoding.UTF8)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; JsonResult(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; json, HttpStatusCode status)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.Content =&lt;span&gt; json;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.ContentEncoding =&lt;span&gt; Encoding.UTF8;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.ContentType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json; charset=utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.Status =&lt;span&gt; status;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; JsonResult(&lt;span&gt;string&lt;/span&gt; json, Encoding encoding, &lt;span&gt;string&lt;/span&gt; contentType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json; charset=utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.Content =&lt;span&gt; json;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.ContentEncoding =&lt;span&gt; encoding;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.ContentType =&lt;span&gt; contentType;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　七、&lt;strong&gt;RouteTable：&lt;/strong&gt;MVC里面有一个相当重要的概念叫约定优先，即为Controller、Action的名称是按某种规则来写编码的，其中将URL与自定义Controller对应起来的缓存映射就是RouteTable，并且作为缓存，也能极大的提升访问性能。当然这里并没有严格按照asp.net mvc里面的routetable来设计，而是根据只是实现webapi，并使用缓存提升性能来实现的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;***************************************************************************
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;*Copyright (c) 2018 Microsoft All Rights Reserved.
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;*CLR版本： 4.0.30319.42000
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;*机器名称：WENLI-PC
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;*公司名称：Microsoft
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;*命名空间：SAEA.WebAPI.Mvc
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;*文件名： RouteTable
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;*唯一标识：1ed5d381-d7ce-4ea3-b8b5-c32f581ad49f
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;*当前的用户域：WENLI-PC
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;*创建人： yswenli
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;*电子邮箱：wenguoli_520@qq.com
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;*创建时间：2018/4/12 10:55:31
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;*=====================================================================
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;*修改标记
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;*修改时间：2018/4/12 10:55:31
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;*修改人： yswenli
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;****************************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Reflection;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; 
&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Mvc
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; SAEA.WebAPI路由表
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RouteTable
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;         &lt;span&gt;static&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; _locker = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; 
&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;static&lt;/span&gt; List&amp;lt;Routing&amp;gt; _list = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Routing&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; 
&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取routing中的缓存
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 若不存在则创建
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;controllerType&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;controllerName&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;actionName&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;isPost&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Routing TryGet(Type controllerType, &lt;span&gt;string&lt;/span&gt; controllerName, &lt;span&gt;string&lt;/span&gt; actionName, &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; isPost)
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;             &lt;span&gt;lock&lt;/span&gt;&lt;span&gt; (_locker)
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; list = _list.Where(b =&amp;gt; b.ControllerName.ToLower() == controllerName.ToLower() &amp;amp;&amp;amp; b.ActionName.ToLower() == actionName.ToLower() &amp;amp;&amp;amp; b.IsPost ==&lt;span&gt; isPost).ToList();
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (list == &lt;span&gt;null&lt;/span&gt; || list.Count == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; routing = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Routing()
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;                         ControllerName =&lt;span&gt; controllerName,
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;                         ActionName =&lt;span&gt; actionName,
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;                         IsPost =&lt;span&gt; isPost
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;                    };
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; 
&lt;span&gt; 66&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; actions = controllerType.GetMethods().Where(b =&amp;gt; b.Name.ToLower() ==&lt;span&gt; actionName.ToLower()).ToList();
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; 
&lt;span&gt; 68&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (actions == &lt;span&gt;null&lt;/span&gt; || actions.Count == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;                         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{controllerName}/{actionName}找不到此action!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (actions.Count &amp;gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;                         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{controllerName}/{actionName}有多个重复的的action!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;                    {                        
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;                         routing.Instance =&lt;span&gt; System.Activator.CreateInstance(controllerType);
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; 
&lt;span&gt; 80&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;类上面的过滤&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;                         &lt;span&gt;var&lt;/span&gt; attrs = controllerType.GetCustomAttributes(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (attrs != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt; attr = attrs.Where(b =&amp;gt; b.GetType().BaseType.Name == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ActionFilterAttribute&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).FirstOrDefault();
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; 
&lt;span&gt; 87&lt;/span&gt;                             routing.Atrr =&lt;span&gt; attr;
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; 
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;                         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;                             routing.Atrr = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; 
&lt;span&gt; 95&lt;/span&gt;                         routing.Action = actions[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; 
&lt;span&gt; 97&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;action上面的过滤&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (routing.Atrr == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;                             attrs = actions[&lt;span&gt;0&lt;/span&gt;].GetCustomAttributes(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; 
&lt;span&gt;102&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt; (attrs != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;                            {
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;                                 &lt;span&gt;var&lt;/span&gt; attr = attrs.Where(b =&amp;gt; b.GetType().BaseType.Name == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ActionFilterAttribute&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).FirstOrDefault();
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; 
&lt;span&gt;106&lt;/span&gt;                                 routing.Atrr =&lt;span&gt; attr;
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;                             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt; &lt;span&gt;                            {
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;                                 routing.Atrr = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;                    _list.Add(routing);
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; routing;
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (list.Count &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;500&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; list.FirstOrDefault();
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; 
&lt;span&gt;127&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在MVC的思想里面ActionFilterAtrribute的这个AOP设计也一直伴随左右，比如记日志、黑名单、权限、验证、限流等等功能，所以路由的时候也会缓存这个。至此一些关键性的地方都已经弄的差不多了，为了更好的了解上面说的这些，下面是vs2017中项目的结构截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/542396/201804/542396-20180416215953110-1221298078.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　接下来就是按asp.net mvc命名方式，写个测试webapi看看情况，首先还是测试项目结构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/542396/201804/542396-20180416220221468-1712425500.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　program里面启动一下服务：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; MvcApplication mvcApplication = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MvcApplication();
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; mvcApplication.Start();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　HomeController里面按asp.net mvc的习惯来编写代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;***************************************************************************
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;*Copyright (c) 2018 Microsoft All Rights Reserved.
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;*CLR版本： 4.0.30319.42000
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;*机器名称：WENLI-PC
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;*公司名称：Microsoft
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;*命名空间：SAEA.WebAPITest.Controllers
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;*文件名： HomeController
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;*唯一标识：e00bb57f-e3ee-4efe-a7cf-f23db767c1d0
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;*当前的用户域：WENLI-PC
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;*创建人： yswenli
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;*电子邮箱：wenguoli_520@qq.com
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;*创建时间：2018/4/10 16:43:26
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;*=====================================================================
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;*修改标记
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;*修改时间：2018/4/10 16:43:26
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;*修改人： yswenli
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;****************************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Mvc;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.WebAPITest.Attrubutes;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SAEA.WebAPITest.Controllers
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    [LogAtrribute]
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HomeController : Controller
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Index()
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Content(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello,I'm SAEA.WebAPI！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; ActionResult Get(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Json(&lt;span&gt;new&lt;/span&gt; { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yswenli&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Sex = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Show()
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; response =&lt;span&gt; HttpContext.Response;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;             response.Content_Type = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html; charset=utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt;             response.Write(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;h3&amp;gt;测试一下那个response对象使用情况！&amp;lt;/h3&amp;gt;参考消息网4月12日报道外媒称，法国一架“幻影-2000”&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);            
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            response.End();
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Empty();
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Download()
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; File(HttpContext.Server.MapPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/Content/Image/c984b2fb80aeca7b15eda8c004f2e0d4.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　增加一个LogAtrribute打印一些内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;***************************************************************************
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;*Copyright (c) 2018 Microsoft All Rights Reserved.
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;*CLR版本： 4.0.30319.42000
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;*机器名称：WENLI-PC
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;*公司名称：Microsoft
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;*命名空间：SAEA.WebAPITest.Common
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;*文件名： LogAtrribute
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;*唯一标识：2a261731-b8f6-47de-b2e4-aecf2e0e0c0f
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;*当前的用户域：WENLI-PC
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;*创建人： yswenli
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;*电子邮箱：wenguoli_520@qq.com
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;*创建时间：2018/4/11 13:46:42
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;*=====================================================================
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;*修改标记
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;*修改时间：2018/4/11 13:46:42
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;*修改人： yswenli
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;*版本号： V1.0.0.0
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;*描述：
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;****************************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.Commom;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Http;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; SAEA.WebAPI.Mvc;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SAEA.WebAPITest.Attrubutes
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogAtrribute : ActionFilterAttribute
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 执行前
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;httpContext&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;返回值true为继续，false为终止&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; OnActionExecuting(HttpContext httpContext)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 执行后
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;httpContext&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;result&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnActionExecuted(HttpContext httpContext, ActionResult result)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             ConsoleHelper.WriteLine($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请求地址：{httpContext.Request.Query},回复内容：{result.Content}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　最后F5跑起来看看效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/542396/201804/542396-20180416220900164-1081361005.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　使用Apache ab.exe压测一下性能如何：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/542396/201804/542396-20180416221018589-1220212412.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　至此，一个简洁、高效的WebApi就初步完成了！&lt;/p&gt;


&lt;p&gt;转载请标明本文来源：&lt;a href=&quot;http://www.cnblogs.com/yswenli/p/8858669.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/yswenli/p/8858669.html&lt;/a&gt;&lt;br/&gt;更多内容欢迎star作者的github：&lt;a href=&quot;https://github.com/yswenli/SAEA&quot; target=&quot;_blank&quot;&gt;https://github.com/yswenli/SAEA&lt;/a&gt;&lt;br/&gt;如果发现本文有什么问题和任何建议，也随时欢迎交流~&lt;/p&gt;

</description>
<pubDate>Mon, 16 Apr 2018 14:15:00 +0000</pubDate>
<dc:creator>YSWALLE</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yswenli/p/8858669.html</dc:identifier>
</item>
<item>
<title>【Python3.6+Django2.0+Xadmin2.0系列教程之一】环境搭建及项目创建 - 纵世科技</title>
<link>http://www.cnblogs.com/v88v/p/8858853.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/v88v/p/8858853.html</guid>
<description>&lt;p&gt;&lt;span&gt;由于工作需要，接触了大半年时间的Django+xadmin框架，一直没空对这块对进行相关的梳理。最近在同事的怂恿下，就在这分享下笔者的学习及工作经验吧。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;好了，话不多说，下面开始进入正题：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;环境需求：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;笔者的工作系统环境：Mac 10.13.4+Python3.6.x+Django2.0.x+Xadmin2.0&lt;/p&gt;
&lt;p&gt;因此本系列教程均是以此组合为基础展开讲解。其他系统版本也基本适用，有小部分不兼容之处请自行测试。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、Django及xadmin安装&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可以使用pip命令进行安装，或者直接下载安装包用python命令安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;pip3 install Django

pip3 install git&lt;/span&gt;+git://github.com/sshwsfc/xadmin.git@django2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由于xadmin2.0官方版本存在一些兼容性bug，笔者对其源码进行了部分改动&lt;/p&gt;
&lt;p&gt;在装完官方版的Django和xadmin之后，将笔者的&lt;a title=&quot;xadmin修复版本&quot; href=&quot;https://github.com/vip68/xadmin_bugfix&quot; target=&quot;_blank&quot;&gt;xadmin修复版本&lt;/a&gt;替换到xadmin的原安装目录下即可。&lt;/p&gt;
&lt;p&gt;更详细安装过程不再赘述，要细说的话得花一整天时间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、使用Pycharm创建项目&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、打开pycharm，第一次创建项目，我们就选择create new project&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/824940/201804/824940-20180416201611467-219849258.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2、按图上的顺序配置好，Location及Application name可以根据自己需要自定义，项目解析器笔者此处选择了系统环境路径。全部设置好之后创建项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/824940/201804/824940-20180416202203412-1877011909.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3、创建好的项目长得是这个样子的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/824940/201804/824940-20180416202244882-1975327771.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;4、点右上角的绿色启动箭头，OK，我们的项目已经正常跑起来了。&lt;/p&gt;
&lt;p&gt;同时，我们也可以在项目目录下，执行命令来运行项目&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
python3 manage.py runserver &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/824940/201804/824940-20180416204353109-186036240.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;万里长征迈出了胜利的第一步，接下来要来嫁接xadmin。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/824940/201804/824940-20180416203009795-1123698886.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、 改造Django项目，适配xadmin&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1、首先，看看项目的结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/824940/201804/824940-20180416205148263-421350527.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;manage.py是网站的启动文件，一般不需要改动。&lt;br/&gt;demo文件夹是网站配置文件夹，我们需要操作的文件主要有：settings.py和urls.py&lt;br/&gt;settings.py是网站的主要配置文件&lt;br/&gt;urls.py是路由文件&lt;br/&gt;app文件夹是创建项目时默认创建的模块，主要的开发在这里。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2、下面开始着手改造，先来修改url.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; from django.contrib import admin&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; xadmin
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; path
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.conf &lt;span&gt;import&lt;/span&gt;&lt;span&gt; settings
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.conf.urls.static &lt;span&gt;import&lt;/span&gt;&lt;span&gt; static

urlpatterns &lt;/span&gt;=&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; path('admin/', admin.site.urls),&lt;/span&gt;
    path(r&lt;span&gt;''&lt;/span&gt;&lt;span&gt;, xadmin.site.urls),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3、接着是修改settings.py，将127.0.0.1加入白名单&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ALLOWED_HOSTS = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;4、修改INSTALLED_APPS，加入xadmin相关组件&lt;/p&gt;
&lt;p&gt;在最上面加入app.apps.AppConfig，接着添加xadmin及crispy_forms&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
INSTALLED_APPS =&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app.apps.AppConfig&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xadmin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.auth&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.contenttypes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.sessions&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.messages&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.staticfiles&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;crispy_forms&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;5、这样，我们便能够让xadmin项目跑起来了。试试看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/824940/201804/824940-20180416210656410-2019911981.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击登录，会发现报了一个错&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/824940/201804/824940-20180416210802276-587056336.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面的提示是，没有用户表。原来，我们还没有对数据库进行初始化。&lt;/p&gt;

&lt;p&gt;6、初始化数据库&lt;/p&gt;
&lt;p&gt;项目创建好时默认的是使用sqlite3数据库，我们也可以指定它使用MySQL数据库，修改 DATABASES&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
DATABASES =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 'ENGINE': 'django.db.backends.sqlite3',&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),&lt;/span&gt;
        &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ENGINE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.db.backends.mysql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,  &lt;span&gt;#&lt;/span&gt; 数据库引擎
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;demo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;USER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PASSWORD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;HOST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PORT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3306&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;OPTIONS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;init_command&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SET sql_mode='STRICT_TRANS_TABLES';&lt;/span&gt;&lt;span&gt;&quot;  &lt;span&gt;#&lt;/span&gt; 初始化数据库的命令&lt;/span&gt;&lt;span&gt;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行数据库迁移命令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
python3 manage.py migrate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/824940/201804/824940-20180416213910638-1337524630.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;7、此外，我们还要建立一个超级管理员帐号，设置好帐号密码邮箱信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
python3 manage.py createsuperuser
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/824940/201804/824940-20180416214242247-2050012045.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 8、好了，万事具备，下面可以顺利的进入管理界面了&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/824940/201804/824940-20180416214401269-1463109236.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;9、现在这个界面是英文的，看起来是不是有点不太习惯呢？下面我们就要让它显示中文。&lt;/p&gt;
&lt;p&gt;在settings.py文件开头添加一行代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.utils.translation &lt;span&gt;import&lt;/span&gt; ugettext_lazy as _
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改 LANGUAGE_CODE 和 LANGUAGES&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
LANGUAGE_CODE = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;zh-hans&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

LANGUAGES &lt;/span&gt;=&lt;span&gt; [
    (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;en&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, _(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;English&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
    (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;zh-hans&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, _(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Simplified Chinese&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
    (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;zh-hant&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, _(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Traditional Chinese&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;10、重新运行一下，OK，我们熟悉的中文界面呈现在眼前。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/824940/201804/824940-20180416215141029-1251490476.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;好了，不早了，该下班回家了。 下一节，我们将创建模型。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 16 Apr 2018 14:03:00 +0000</pubDate>
<dc:creator>纵世科技</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/v88v/p/8858853.html</dc:identifier>
</item>
</channel>
</rss>