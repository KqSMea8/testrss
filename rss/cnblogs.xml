<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Spring Boot实战之数据库操作 - liuxiaopeng</title>
<link>http://www.cnblogs.com/paddix/p/8178943.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/paddix/p/8178943.html</guid>
<description>&lt;p&gt;　　上篇文章中已经通过一个简单的HelloWorld程序讲解了Spring boot的基本原理和使用。本文主要讲解如何通过spring boot来访问数据库，本文会演示三种方式来访问数据库，第一种是JdbcTemplate，第二种是JPA，第三种是Mybatis。之前已经提到过，本系列会以一个博客系统作为讲解的基础，所以本文会讲解文章的存储和访问（但不包括文章的详情），因为最终的实现是通过MyBatis来完成的，所以，对于JdbcTemplate和JPA只做简单演示，MyBatis部分会完整实现对文章的增删改查。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、准备工作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　在演示这几种方式之前，需要先准备一些东西。第一个就是数据库，本系统是采用MySQL实现的，我们需要先创建一个tb_article的表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;44&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
DROP TABLE IF EXISTS `tb_article`;

CREATE TABLE `tb_article` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL DEFAULT '',
  `summary` varchar(1024) NOT NULL DEFAULT '',
  `status` int(11) NOT NULL DEFAULT '0',
  `type` int(11) NOT NULL,
  `user_id` bigint(20) NOT NULL DEFAULT '0',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `public_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　后续的演示会对这个表进行增删改查，大家应该会看到这个表里面并没有文章的详情，原因是文章的详情比较长，如果放在这个表里面容易影响查询文章列表的效率，所以文章的详情会单独存在另外的表里面。此外我们需要配置数据库连接池，这里我们使用druid连接池，另外配置文件使用yaml配置，即application.yml（你也可以使用application.properties配置文件，没什么太大的区别，如果对ymal不熟悉，有兴趣也可以查一下，比较简单）。连接池的配置如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
spring:
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/blog?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false
    driverClassName: com.mysql.jdbc.Driver
    username: root
    password: 123456
    type: com.alibaba.druid.pool.DruidDataSource
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　最后，我们还需要建立与数据库对应的POJO类，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class Article {
    private Long id;
    private String title;
    private String summary;
    private Date createTime;
    private Date publicTime;
    private Date updateTime;
    private Long userId;
    private Integer status;&lt;br/&gt;private Integer type;&lt;p&gt;}
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　好了，需要准备的工作就这些，现在开始实现数据库的操作。&lt;/p&gt;

&lt;p&gt; &lt;span&gt;&lt;strong&gt;二、与JdbcTemplate集成&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　首先，我们先通过JdbcTemplate来访问数据库，这里只演示数据的插入，上一篇文章中我们已经提到过，Spring boot提供了许多的starter来支撑不同的功能，要支持JdbcTemplate我们只需要引入下面的starter就可以了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;dependency&amp;gt;
       &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
       &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　现在我们就可以通过JdbcTemplate来实现数据的插入了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;56&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public interface ArticleDao {
    Long insertArticle(Article article);
}

@Repository
public class ArticleDaoJdbcTemplateImpl implements ArticleDao {

    @Autowired
    private NamedParameterJdbcTemplate jdbcTemplate;

    @Override
    public Long insertArticle(Article article) {
        String sql = &quot;insert into tb_article(title,summary,user_id,create_time,public_time,update_time,status) &quot; +
                &quot;values(:title,:summary,:userId,:createTime,:publicTime,:updateTime,:status)&quot;;
        Map&amp;lt;String, Object&amp;gt; param = new HashMap&amp;lt;&amp;gt;();
        param.put(&quot;title&quot;, article.getTitle());
        param.put(&quot;summary&quot;, article.getSummary());
        param.put(&quot;userId&quot;, article.getUserId());
        param.put(&quot;status&quot;, article.getStatus());
        param.put(&quot;createTime&quot;, article.getCreateTime());
        param.put(&quot;publicTime&quot;, article.getPublicTime());
        param.put(&quot;updateTime&quot;, article.getUpdateTime());
        return (long) jdbcTemplate.update(sql, param);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们通过JUnit来测试上面的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = Application.class)
public class ArticleDaoTest {

    @Autowired
    private ArticleDao articleDao;

    @Test
    public void testInsert() {
        Article article = new Article();
        article.setTitle(&quot;测试标题&quot;);
        article.setSummary(&quot;测试摘要&quot;);
        article.setUserId(1L);
        article.setStatus(1);
        article.setCreateTime(new Date());
        article.setUpdateTime(new Date());
        article.setPublicTime(new Date());
        articleDao.insertArticle(article);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 要支持上面的测试程序，也需要引入一个starter：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
 &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
        &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
 &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　从上面的代码可以看出，其实除了引入jdbc的start之外，基本没有配置，这都是spring boot的自动帮我们完成了配置的过程。上面的代码需要注意的Application类的位置，该类必须位于Dao类的父级的包中，比如这里Dao都位于com.pandy.blog.dao这个包下，现在我们把Application.java这个类从com.pandy.blog这个包移动到com.pandy.blog.app这个包中，则会出现如下错误：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.pandy.blog.dao.ArticleDao' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1493)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1104)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066)
        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:585)
        ... 28 more
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　也就是说，找不到ArticleDao的实现，这是什么原因呢？上一篇博文中我们已经看到@SpringBootApplication这个注解继承了@ComponentScan，其默认情况下只会扫描Application类所在的包及子包。因此，对于上面的错误，除了保持Application类在Dao的父包这种方式外，也可以指定扫描的包来解决：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@SpringBootApplication
@ComponentScan({&quot;com.pandy.blog&quot;})
public class Application {
    public static void main(String[] args) throws Exception {
        SpringApplication.run(Application.class, args);
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、与JPA集成&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　现在我们开始讲解如何通过JPA的方式来实现数据库的操作。还是跟JdbcTemplate类似，首先，我们需要引入对应的starter：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;dependency&amp;gt;
       &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
       &amp;lt;artifactId&amp;gt;spring-boot-starter-data-jpa&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后我们需要对POJO类增加Entity的注解，并指定表名（如果不指定，默认的表名为article），然后需要指定ID的及其生成策略，这些都是JPA的知识，与Spring boot无关，如果不熟悉的话可以看下JPA的知识点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@Entity(name = &quot;tb_article&quot;)
public class Article {
    @Id
    @GeneratedValue
    private Long id;
    private String title;
    private String summary;
    private Date createTime;
    private Date publicTime;
    private Date updateTime;
    private Long userId;
    private Integer status;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　最后，我们需要继承JpaRepository这个类，这里我们实现了两个查询方法，第一个是符合JPA命名规范的查询，JPA会自动帮我们完成查询语句的生成，另一种方式是我们自己实现JPQL（JPA支持的一种类SQL的查询）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public interface ArticleRepository extends JpaRepository&amp;lt;Article, Long&amp;gt; {

    public List&amp;lt;Article&amp;gt; findByUserId(Long userId);

    @Query(&quot;select art from com.pandy.blog.po.Article art where title=:title&quot;)
    public List&amp;lt;Article&amp;gt; queryByTitle(@Param(&quot;title&quot;) String title);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　好了，我们可以再测试一下上面的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = Application.class)
public class ArticleRepositoryTest {
    @Autowired
    private ArticleRepository articleRepository;

    @Test
    public void testQuery(){
        List&amp;lt;Article&amp;gt; articleList = articleRepository.queryByTitle(&quot;测试标题&quot;);
        assertTrue(articleList.size()&amp;gt;0);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意，这里还是存在跟JdbcTemplate类似的问题，需要将Application这个启动类未于Respository和Entity类的父级包中，否则会出现如下错误：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.pandy.blog.dao.ArticleRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1493)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1104)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066)
        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:585)
        ... 28 more
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当然，同样也可以通过注解@EnableJpaRepositories指定扫描的JPA的包，但是还是不行，还会出现如下错误：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
Caused by: java.lang.IllegalArgumentException: Not a managed type: class com.pandy.blog.po.Article
        at org.hibernate.jpa.internal.metamodel.MetamodelImpl.managedType(MetamodelImpl.java:210)
        at org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.&amp;lt;init&amp;gt;(JpaMetamodelEntityInformation.java:70)
        at org.springframework.data.jpa.repository.support.JpaEntityInformationSupport.getEntityInformation(JpaEntityInformationSupport.java:68)
        at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getEntityInformation(JpaRepositoryFactory.java:153)
        at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:100)
        at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:82)
        at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:199)
        at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.initAndReturn(RepositoryFactoryBeanSupport.java:277)
        at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:263)
        at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:101)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1687)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1624)
        ... 39 more
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个错误说明识别不了Entity，所以还需要通过注解@EntityScan来指定Entity的包，最终的配置如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@SpringBootApplication
@ComponentScan({&quot;com.pandy.blog&quot;})
@EnableJpaRepositories(basePackages=&quot;com.pandy.blog&quot;)
@EntityScan(&quot;com.pandy.blog&quot;)
public class Application {
    public static void main(String[] args) throws Exception {
        SpringApplication.run(Application.class, args);
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、与MyBatis集成&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　最后，我们再看看如何通过MyBatis来实现数据库的访问。同样我们还是要引入starter：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;1.1.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　由于该starter不是spring boot官方提供的，所以版本号于Spring boot不一致，需要手动指定。&lt;/p&gt;
&lt;p&gt;　　MyBatis一般可以通过XML或者注解的方式来指定操作数据库的SQL，个人比较偏向于XML，所以，本文中也只演示了通过XML的方式来访问数据库。首先，我们需要配置mapper的目录。我们在application.yml中进行配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
mybatis:
  config-locations: mybatis/mybatis-config.xml
  mapper-locations: mybatis/mapper/*.xml
  type-aliases-package: com.pandy.blog.po
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里配置主要包括三个部分，一个是mybatis自身的一些配置，例如基本类型的别名。第二个是指定mapper文件的位置，第三个POJO类的别名。这个配置也可以通过 Java configuration来实现，由于篇幅的问题，我这里就不详述了，有兴趣的朋友可以自己实现一下。&lt;/p&gt;
&lt;p&gt;　　配置完后，我们先编写mapper对应的接口：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public interface ArticleMapper {

    public Long insertArticle(Article article);

    public void updateArticle(Article article);

    public Article queryById(Long id);

    public List&amp;lt;Article&amp;gt; queryArticlesByPage(@Param(&quot;article&quot;) Article article, @Param(&quot;pageSize&quot;) int pageSize,
                                             @Param(&quot;offset&quot;) int offset);

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　该接口暂时只定义了四个方法，即添加、更新，以及根据ID查询和分页查询。这是一个接口，并且和JPA类似，可以不用实现类。接下来我们编写XML文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;57&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &amp;gt;
&amp;lt;mapper namespace=&quot;com.pandy.blog.dao.ArticleMapper&quot;&amp;gt;

    &amp;lt;resultMap id=&quot;articleMap&quot; type=&quot;com.pandy.blog.po.Article&quot;&amp;gt;
        &amp;lt;id column=&quot;id&quot; property=&quot;id&quot; jdbcType=&quot;INTEGER&quot;/&amp;gt;
        &amp;lt;result column=&quot;title&quot; property=&quot;title&quot; jdbcType=&quot;VARCHAR&quot;/&amp;gt;
        &amp;lt;result column=&quot;summary&quot; property=&quot;summary&quot; jdbcType=&quot;VARCHAR&quot;/&amp;gt;
        &amp;lt;result column=&quot;user_id&quot; property=&quot;userId&quot; jdbcType=&quot;INTEGER&quot;/&amp;gt;
        &amp;lt;result column=&quot;status&quot; property=&quot;status&quot; jdbcType=&quot;INTEGER&quot;/&amp;gt;
        &amp;lt;result column=&quot;create_time&quot; property=&quot;createTime&quot; jdbcType=&quot;TIMESTAMP&quot;/&amp;gt;
        &amp;lt;result column=&quot;update_time&quot; property=&quot;updateTime&quot; jdbcType=&quot;TIMESTAMP&quot;/&amp;gt;
        &amp;lt;result column=&quot;public_time&quot; property=&quot;publicTime&quot; jdbcType=&quot;TIMESTAMP&quot;/&amp;gt;
    &amp;lt;/resultMap&amp;gt;

    &amp;lt;sql id=&quot;base_column&quot;&amp;gt;
      title,summary,user_id,status,create_time,update_time,public_time
    &amp;lt;/sql&amp;gt;

    &amp;lt;insert id=&quot;insertArticle&quot; parameterType=&quot;Article&quot;&amp;gt;
        INSERT INTO
        tb_article(&amp;lt;include refid=&quot;base_column&quot;/&amp;gt;)
        VALUE
        (#{title},#{summary},#{userId},#{status},#{createTime},#{updateTime},#{publicTime})
    &amp;lt;/insert&amp;gt;

    &amp;lt;update id=&quot;updateArticle&quot; parameterType=&quot;Article&quot;&amp;gt;
        UPDATE tb_article
        &amp;lt;set&amp;gt;
            &amp;lt;if test=&quot;title != null&quot;&amp;gt;
                title = #{title},
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;summary != null&quot;&amp;gt;
                summary = #{summary},
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;status!=null&quot;&amp;gt;
                status = #{status},
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;publicTime !=null &quot;&amp;gt;
                public_time = #{publicTime},
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;updateTime !=null &quot;&amp;gt;
                update_time = #{updateTime},
            &amp;lt;/if&amp;gt;
        &amp;lt;/set&amp;gt;
        WHERE id = #{id}
    &amp;lt;/update&amp;gt;

    &amp;lt;select id=&quot;queryById&quot; parameterType=&quot;Long&quot; resultMap=&quot;articleMap&quot;&amp;gt;
        SELECT id,&amp;lt;include refid=&quot;base_column&quot;&amp;gt;&amp;lt;/include&amp;gt; FROM tb_article
        WHERE id = #{id}
    &amp;lt;/select&amp;gt;

    &amp;lt;select id=&quot;queryArticlesByPage&quot; resultMap=&quot;articleMap&quot;&amp;gt;
        SELECT id,&amp;lt;include refid=&quot;base_column&quot;&amp;gt;&amp;lt;/include&amp;gt; FROM tb_article
        &amp;lt;where&amp;gt;
            &amp;lt;if test=&quot;article.title != null&quot;&amp;gt;
                title like CONCAT（'%',${article.title},'%'）
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;article.userId != null&quot;&amp;gt;
                user_id = #{article.userId}
            &amp;lt;/if&amp;gt;
        &amp;lt;/where&amp;gt;
        limit #{offset},#{pageSize}

    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　最后，我们需要手动指定mapper扫描的包：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@SpringBootApplication
@MapperScan(&quot;com.pandy.blog.dao&quot;)
public class Application {
    public static void main(String[] args) throws Exception {
        SpringApplication.run(Application.class, args);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　好了，与MyBatis的集成也完成了，我们再测试一下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = Application.class)
public class ArticleMapperTest {

    @Autowired
    private ArticleMapper mapper;

    @Test
    public void testInsert() {
        Article article = new Article();
        article.setTitle(&quot;测试标题2&quot;);
        article.setSummary(&quot;测试摘要2&quot;);
        article.setUserId(1L);
        article.setStatus(1);
        article.setCreateTime(new Date());
        article.setUpdateTime(new Date());
        article.setPublicTime(new Date());
        mapper.insertArticle(article);
    }

    @Test
    public void testMybatisQuery() {
        Article article = mapper.queryById(1L);
        assertNotNull(article);
    }

    @Test
    public void testUpdate() {
        Article article = mapper.queryById(1L);
        article.setPublicTime(new Date());
        article.setUpdateTime(new Date());
        article.setStatus(2);
        mapper.updateArticle(article);
    }

    @Test
    public void testQueryByPage(){
        Article article = new Article();
        article.setUserId(1L);
        List&amp;lt;Article&amp;gt; list = mapper.queryArticlesByPage(article,10,0);
        assertTrue(list.size()&amp;gt;0);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　本文演示Spring boot与JdbcTemplate、JPA以及MyBatis的集成，整体上来说配置都比较简单，以前做过相关配置的同学应该感觉比较明显，Spring boot确实在这方面给我们提供了很大的帮助。后续的文章中我们只会使用MyBatis这一种方式来进行数据库的操作，这里还有一点需要说明一下的是，MyBatis的分页查询在这里是手写的，这个分页在正式开发中可以通过插件来完成，不过这个与Spring boot没什么关系，所以本文暂时通过这种手动的方式来进行分页的处理。&lt;/p&gt;

</description>
<pubDate>Tue, 02 Jan 2018 23:48:00 +0000</pubDate>
<dc:creator>liuxiaopeng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/paddix/p/8178943.html</dc:identifier>
</item>
<item>
<title>学习 Kubernetes 的 Why 和 How - 每天5分钟玩转 Docker 容器技术（114） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8178483.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8178483.html</guid>
<description>&lt;p&gt;&lt;span&gt;这是一个系统学习 Kubernetes 的教程，有下面两个特点：&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;系统讲解当前最流行的容器编排引擎 Kubernetes&lt;br/&gt;包括了安装部署、应用管理、网络、存储、监控、日志管理等多各个方面。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;重实践并兼顾理论&lt;br/&gt;通过大量实验和操作带领大家学习 Kubernetes。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span&gt;因为 &lt;span&gt;Kubernetes 太热门了&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2017 年 9 月，Mesosphere 宣布 支持 Kubernetes；10 月，Docker 宣布将在新版本中加入对 Kubernetes 的原生支持。至此，容器编排引擎领域的三足鼎立时代结束，Kubernetes 赢得全面胜利。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其实早在 2015 年 5 月，Kubernetes 在 Google 上的的搜索热度就已经超过了 Mesos 和 Docker Swarm，从那儿之后更是一路飙升，将对手甩开了十几条街。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;569.5.png&quot; src=&quot;https://i.imgsafe.org/b5/b5c99dd63a.png&quot; alt=&quot;569.5.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;目前，AWS、Azure、Google、阿里云、腾讯云等主流公有云提供的是基于 Kubernetes 的容器服务；Rancher、CoreOS、IBM、Mirantis、Oracle、Red Hat、VMWare 等无数厂商也在大力研发和推广基于 Kubernetes 的容器 CaaS 或 PaaS 产品。可以说，Kubernetes 是当前容器行业最炙手可热的明星。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每一轮新技术的兴起，无论对公司还是个人既是机会也是挑战。如果这项新技术未来必将成为主流，那么作为 IT 从业者，正确的做法就 &lt;span&gt;尽快掌握&lt;/span&gt;。因为：&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;新技术意味着新的市场和新的需求。&lt;br/&gt;初期掌握这种技术的人不会很多，而市场需求会越来越大，因而会形成供不应求的卖方市场，物以稀为贵，这对技术人员将是一个难得的价值提升机会。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;学习新技术需要时间和精力，早起步早成材。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;机会讲过了，咱们再来看看挑战。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;新技术往往意味着技术上的突破和创新，会有不少新的概念和方法。&lt;br/&gt;对于 Kubernetes 这项平台级技术，覆盖的技术范围非常广，包括了计算、网络、存储、高可用、监控、日志管理等多个方面，要掌握这些新技术对 IT 老兵尚有不小难度，更别说新人了。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这套教程的目标读者包括：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;IT 实施和运维工程师&lt;/span&gt;&lt;br/&gt;越来越多的应用将以容器的方式在开发、测试和生产环境中运行。掌握基于 Kubernetes 的容器平台运维能力将成为实施和运维工程师的核心竞争力。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;软件开发人员&lt;/span&gt;&lt;br/&gt;基于容器的微服务架构（Microservice Architecture）会逐渐成为开发应用系统的主流。而 Kubernetes 将是运行微服务应用的理想平台，市场将需要大量具备 Kubernetes 技能的应用程序开发人员。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这个教程将通过大量实例系统讲解 Kubernetes 的核心技术。大家一定要跟着教程实践，这样才能把知识变成自己的。如果仅仅是看一遍最多能记住几个概念，在工作中是用不起来的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;理论一定要联系实际&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;CloudMan 希望通过这个教程降低大家的学习曲线，真正掌握 Kubernetes。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://www.cnblogs.com/Users/wanglei/百度云同步盘/容器/images/480.png?v=1510821977521&quot; alt=&quot;&quot;/&gt;&lt;span&gt;&lt;strong&gt;书籍：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 02 Jan 2018 23:46:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8178483.html</dc:identifier>
</item>
<item>
<title>【ASP.NET MVC系列】浅谈NuGet在VS中的运用 - Alan_beijing</title>
<link>http://www.cnblogs.com/wangjiming/p/8177821.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangjiming/p/8177821.html</guid>
<description>&lt;p&gt; &lt;span&gt;一     概述&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在我们讲解NuGet前，我们先来看看一个例子。&lt;/p&gt;
&lt;p&gt;1.例子：&lt;/p&gt;
&lt;p&gt; 假设现在开发一套系统，其中前端框架我们选择Bootstrap,由于选择Bootstrap作为前端框架，因此，在项目中，我们需要引入Bootstrap相关文件，大致会执行如下操作。&lt;/p&gt;
&lt;p&gt;步骤一：下载Bootstrap文件&lt;/p&gt;
&lt;p&gt;输入Bootstrap官网域名   http://v3.bootcss.com/&lt;/p&gt;
&lt;p&gt; 输入域名，进入官网&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102185034971-241464948.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;步骤二：选择合适的版本，下载Bootstrap包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102185215596-1701352905.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;步骤三：将包引入到项目中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102185522924-1084347309.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;关于将Bootstrap包引入到Project中，过程似乎比较麻烦，更可怕的的是，当在项目中的Bootstrap包需要更新时，需要做重复的工作，这是非常繁琐的，很好的是，VS自带的NuGet包管理器很好地&lt;/p&gt;
&lt;p&gt;帮助我们解决了此类问题。&lt;/p&gt;
&lt;p&gt;2.何为Nuget包管理器？&lt;/p&gt;
&lt;p&gt;对于.NET和VS而言，NuGet是一个.NET包管理系统，它可以很容易地响应运用程序中添加、更新和删除外部库文件及其依赖。&lt;/p&gt;
&lt;p&gt;除此之外，我们可以通过创建包，发布包实现包之间的共享，使共享得以实现。&lt;/p&gt;
&lt;p&gt;站在微软的角度：要尽可能地尝试，不要指望Microsoft为我们提供所需要的每一段代码，在.NET平台上进行开发的开发人员多大数百万甚至上千万，而每一个开发人员都有其独特的技术和有待解决&lt;/p&gt;
&lt;p&gt;的问题，等待Microsoft去解决每个开发人员的每个问题，既形不成规模，也没有意义。值得庆幸的是，他们可以通过网上发布的一些库莱解决他们或他们客户遇到的问题。然而，面对网上的这些有&lt;/p&gt;
&lt;p&gt;用的库我们面临三大挑战：发现，安装和维护。但庆幸的是，NuGet却很好地解决了此类问题。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二    将包添加到库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;将包添加到库，有许多方式，常用方式为Manage NuGet Package 和 Package Manager Console，下面将结合VS2017和基于ASP.NET MVC模板讲解该两种方式。&lt;/p&gt;
&lt;p&gt;（一）Manage  NuGet  Packages&lt;/p&gt;
&lt;p&gt;1.准备好VS2017开发环境，并用VS的MVC模板创建一个默认项目：NuGetDemo&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102155559018-2014290807.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;分析：&lt;/p&gt;
&lt;p&gt;细心的你会发现，在上图中出项了packages.config文件，其实，它就是NuGet包的配置文件，因为我们在选择基于MVC模板创建项目时，默认的引入了第三方库文件，如Bootstrap,Jquery等；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102160217799-957675204.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.打开NuGet包管理器&lt;/p&gt;
&lt;p&gt;引用=&amp;gt;管理Nuget程序包&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102160627128-178807823.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.打开NuGet包管理器后，我们可执行如下操作&lt;/p&gt;
&lt;p&gt;(1)浏览包  (2)查看当前系统已安装包  (3)更新包  (4)在搜索框中搜索包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102161405299-1509915289.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4.查看包的详细信息&lt;/p&gt;
&lt;p&gt;我们以log4net为例&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102161657565-870026605.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;分析：&lt;/p&gt;
&lt;p&gt;包的基本信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102163011174-1460115988.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 5.安装&lt;/p&gt;
&lt;p&gt;在安装AnyLog.Log4Net之前，先选择好安装版本，然后再安装。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102164019956-755627034.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6.查看安装情况&lt;/p&gt;
&lt;p&gt;(1)查看控制台输出安装信息情况 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102163944112-1040548467.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; (2)查看NuGet包已安装情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102164318737-1263756132.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(3)查看项目引用情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102164438393-901352082.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(4)查看packages.config文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102164804565-1387748562.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7.更新包&lt;/p&gt;
&lt;p&gt;NuGet包管理器不仅能帮助我们安装包，而且还能帮助我们维护包，我们可以借助NuGet包管理器来更新包。&lt;/p&gt;
&lt;p&gt;注意：当我们更新包时，这个操作也会更新该包的所以依赖，以确保只安装依赖的兼容保本。&lt;/p&gt;
&lt;p&gt;在以下例子中，我们在项目NuGet中安装了Log4net  2.0.3版本，现在，我们将其更新都最新版本2.0.8，选择“更新”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102170214190-1972376972.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击确认。&lt;/p&gt;
&lt;p&gt;注意，此步会更新运用程序中与Log4net相关所有内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102170432534-626316071.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看更新结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102170633924-425731348.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 8.包恢复&lt;/p&gt;
&lt;p&gt;NuGet默认的工作流程是把包文件夹提交到版本控制，这样做的一个好处是可从版本控制检索解决方案，以确保构建解决方案的每个包都能够安装，而且这些包还不需要从其他位置检索。&lt;/p&gt;
&lt;p&gt;但是，这样做也是有弊端的，Packages文件夹不是VS解决方案的一部分，因此，通过VS集成管理版本控制的开发人员需要进行一个额外的步骤以确保Packages文件夹能够提交。&lt;/p&gt;
&lt;p&gt;(1)TFS可以自动提交Packages文件夹&lt;/p&gt;
&lt;p&gt;(2)分布式版本控制系统(如Git)，不建议把Packages文件夹提交到版本控制，因为分布式版本控制系统不擅长处理二进制文件，如果项目中大量的包都有变化，分布式版本控制系统库就会&lt;/p&gt;
&lt;p&gt;变得很庞大。&lt;/p&gt;
&lt;p&gt;可喜的是，NuGet 1.6引入的包修复功能来处理这些问题，这样就支持一个新的个工作流程，我们就不需要把Packages文件夹提交到源代码控制了。&lt;/p&gt;
&lt;p&gt;这个过程需要手动执行几个步骤：对每个项目都需要执行单独的一步操作，以启用包恢复(在NuGet2.0~2.6中，每个开发人员还需要配置VS来允许包恢复)&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;         现在NuGet包恢复时自动启用的，但是在VS的Package Manager设置中使用下面两个选项，可以禁用包恢复功能：&lt;/p&gt;
&lt;p&gt;          a.允许NuGet下载缺少包；&lt;/p&gt;
&lt;p&gt;          b.在VS中构建运用程序时，自动检查缺少的包；&lt;/p&gt;
&lt;p&gt;通过NuGet 2.7 自动包恢复功能。&lt;/p&gt;
&lt;p&gt;（二）Package Manager Console&lt;/p&gt;
&lt;p&gt;Package Manager Console是Visual Studio 中基于PowerShell的控制台，不仅提供了强大的功能来查找和安装包，而且还支持Manager NuGet Packages对话框不支持的一些功能。&lt;/p&gt;
&lt;p&gt;1.启动控制台&lt;/p&gt;
&lt;p&gt;工具=&amp;gt;NuGet包管理器=&amp;gt;程序包管理器控制台&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102175627721-1100913108.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.查看当前项目已安装的包&lt;/p&gt;
&lt;p&gt;在控制台中输入Get--Package，可以查看当前项目已安装的包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102181107534-1483460895.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;拓展：&lt;/p&gt;
&lt;p&gt;(1)以前版本，可以通过以下命令来过滤包&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
Get-Package -ListAvailable -Filter Route
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102232101784-761208425.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(2)可以采用如下命令代替Get-Package -ListAvailable -Filter 命令&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
Find-Package [-Id]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102232612346-1202607332.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3.安装包&lt;/p&gt;
&lt;p&gt;在控制台中通过：Install-Package 包名  &lt;/p&gt;
&lt;p&gt;下图中，我们在项目中安装Log4net,因此输入Install-Package Log4net,由于我已在项目中安装了Log4net,因此提示已经安装。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102181035440-869911372.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;拓展：&lt;/p&gt;
&lt;p&gt;(1)PowerShell命令的支持扩展功能，相当于智能感应。输入命令部分字符，按Tab键就可以查看输入的内容，从而实现智能感应。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102233430237-867870472.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(2) PowerShell支持复合命令，比如通过将一个命令管道传输到另一个命令。&lt;/p&gt;
&lt;p&gt;如下命令向解决方案中每一个项目安装一个包。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Get-Project -ALL | Install-Package  log4net
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102182707362-74134014.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(3)PowerShell也支持动态添加新命令&lt;/p&gt;
&lt;p&gt;PowerShell强大之处在于，安装的一些包可以为shell添加新命令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102235536956-2099112960.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（三）其他方式启动NuGet&lt;/p&gt;
&lt;p&gt; 如在项目名称中添加，这里不论述，核心内容还是在如上的（一）和（二）部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180102222732206-1153586757.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 4.关于包源和项目的选择&lt;/p&gt;
&lt;p&gt; 通过选择程序包源右边的齿轮，即可查看该包及对包的基本操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180103000341628-338934350.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5.NuGet包管理器概述&lt;/p&gt;
&lt;p&gt;(1)NuGe包管理器基本界面&lt;/p&gt;
&lt;p&gt;在控制台操作中，由两大部分组成：常规和程序包源&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180103003455768-1249776797.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(2)程序包源概述&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180103004258534-1032715757.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;拓展：&lt;/p&gt;
&lt;p&gt;在Manage  NuGet  Packages 操作包方式中，与如上对应的操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180103004554846-2022329619.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;例子讲解：&lt;/p&gt;
&lt;p&gt;下面我们讲解基于如上两种模式添加autofac包的操作过程&lt;/p&gt;
&lt;p&gt;Manage  NuGet  Packages 方式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180103004752299-396690535.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;控制台操作方式&lt;/p&gt;
&lt;p&gt;(1)找到autofac包的NuGet地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180103004938018-1398418560.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(2)添加autofac包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180103005242487-2034805025.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三    创建包&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;篇幅有限，以后专门写一篇文章概述......&lt;/p&gt;
&lt;p&gt;&lt;span&gt;四    发布包&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;篇幅有限，以后专门写一篇文章概述......&lt;/p&gt;
&lt;p&gt;&lt;span&gt;五    参考文献&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;【01】ASP.NET MVC5 高级编程(Jon Galloway,Brad Wilson,K.Scott Allen,David Matson ,孙远帅 译)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;六   版权区&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;感谢您的阅读，若有不足之处，欢迎指教，共同学习、共同进步。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;博主网址：http://www.cnblogs.com/wangjiming/。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;极少部分文章利用读书、参考、引用、抄袭、复制和粘贴等多种方式整合而成的，大部分为原创。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如您喜欢，麻烦推荐一下；如您有新想法，欢迎提出，邮箱：2016177728@qq.com。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可以转载该博客，但必须著名博客来源。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 02 Jan 2018 16:57:00 +0000</pubDate>
<dc:creator>Alan_beijing</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangjiming/p/8177821.html</dc:identifier>
</item>
<item>
<title>在html中使用js - happynood</title>
<link>http://www.cnblogs.com/xuyan1/p/js.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuyan1/p/js.html</guid>
<description>&lt;p&gt;1.使用defer属性可以让脚本在文档完全呈现出来之后在执行，延迟脚本总是按照制定他们的顺序进行。&lt;/p&gt;
&lt;p&gt;2.使用async属性可以表示当前脚本不必等待其他脚本，也不必阻塞文档呈现，不能保证异步顺序按照它们在页面中出现的顺序执行&lt;/p&gt;
&lt;p&gt;3.在body里使用noscript标签，标签内内容会在不支持js的浏览器显示出来。&lt;/p&gt;
</description>
<pubDate>Tue, 02 Jan 2018 15:34:00 +0000</pubDate>
<dc:creator>happynood</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuyan1/p/js.html</dc:identifier>
</item>
<item>
<title>vue.js之过滤器，自定义指令，自定义键盘信息以及监听数据变化 - 蜜迷</title>
<link>http://www.cnblogs.com/15fj/p/8179737.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/15fj/p/8179737.html</guid>
<description>&lt;p&gt;一、监听数据变化&lt;/p&gt;
&lt;p&gt;　　1、监听数据变化有两种，深度和浅度，形式如下：&lt;/p&gt;
&lt;p&gt;　　　　vm.$watch(name,fnCb); //浅度&lt;br/&gt;　　　　vm.$watch(name,fnCb,{deep:true}); //深度监视&lt;/p&gt;
&lt;p&gt;　　2、实例用法&lt;/p&gt;
&lt;p&gt;　　　　2.1-1浅度监听：&lt;span&gt;当点击页面，弹出发生变化了，a的值变为1，b的值变为101&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;浅度监听1&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;


        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                data:{
                    a:&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;&lt;span&gt;,
                    b:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
                }
            });

            vm.$watch(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;发生变化了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.b&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.a&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
            });

            document.onclick&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                vm.a&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            };
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{a}}
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{b}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　2.1-2浅度监听：点击页面之后，弹出“发生变化了”，页面变为&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102215759831-323351516.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;浅度监听2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;


        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                data:{
                    &lt;span&gt;json:{name:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;strive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,age:&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;},&lt;/span&gt;
                    b:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
                }
            });

            vm.$watch(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;发生变化了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            });

            document.onclick&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                &lt;span&gt;vm.json.name&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;aaa&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;
            };
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{json | json}}
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{b}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2.2深度监听：可以监视对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;深度监听&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;


        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                data:{
                    json:{name:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;strive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,age:&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;},
                    b:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
                }
            });

            vm.$watch(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;发生变化了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            },{deep:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;});

            document.onclick&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                vm.json.name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;aaa&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            };
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{json | json}}
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{b}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102220252393-1726668724.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;二、自定义指令&lt;/p&gt;
&lt;p&gt;vue中自带的指令往往有时候满足不了我们实际的需求，例如当小于9时显示为09，当大于9时显示为原本的数。所以我们这个时候就需要自己定义一些指令&lt;/p&gt;
&lt;p&gt;1、基本语法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;自定义指令:
    属性:

    Vue.directive(指令名称,function(参数){
        this.el    -&amp;gt; 原生DOM元素
    });

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-red&lt;/span&gt;&lt;span&gt;=&quot;参数&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

    指令名称:     v-red  -&amp;gt;  red

    * 注意: 必须以 v-开头      &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2、基本用法&lt;/p&gt;
&lt;p&gt;　　2.1 v-red -&amp;gt; red&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自定义指令&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        Vue.directive(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){　　　　　　　　　　　　//和下面的v-red相对应
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.el.style.background&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        });

        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                data:{
                    msg:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                }
            });
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-red&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            asdfasd
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102221049893-1853987479.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　2.2、自定义指令参数为变量的用法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自定义指令参数用法&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        Vue.directive(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(&lt;span&gt;color&lt;/span&gt;){　　　　　　　　//将下面的a的值传给color
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.el.style.background&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&lt;span&gt;color&lt;/span&gt;;
        });

        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                data:{
                   &lt;span&gt; a&lt;/span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                }
            });
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-red&lt;/span&gt;&lt;span&gt;=&quot;a&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;　　　　　　　　//是上面的变量a&lt;/span&gt;&lt;span&gt;
            asdfasd
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102221611315-18792895.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2.3参数为值的用法&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;参数为值的用法&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        Vue.directive(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(color){
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.el.style.background&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;color;
        });

        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
            });
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-red&lt;/span&gt;&lt;span&gt;=&quot;'blue'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;　　　　　　　　　　　　//这里的blue就是普通的值&lt;/span&gt;&lt;span&gt;
            asdfasd
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102221900799-273943866.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.4自定义指令就是默认绑定的bind&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自定义指令&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        Vue.directive(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,{
            bind:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.el.style.background&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;
            }
        });&lt;/span&gt;

        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
            });
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-red&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            asdfasd
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102222057440-1831505964.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.5自定指令进行拖拽小实例：可以进行拖拽&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自定义指令--拖拽小实例&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        Vue.directive(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;drag&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; oDiv&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.el;
            oDiv.onmousedown&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(ev){
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; disX&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;ev.clientX&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;oDiv.offsetLeft;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; disY&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;ev.clientY&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;oDiv.offsetTop;

                document.onmousemove&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(ev){
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; l&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;ev.clientX&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;disX;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; t&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;ev.clientY&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;disY;
                    oDiv.style.left&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    oDiv.style.top&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                };
                document.onmouseup&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    document.onmousemove&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                    document.onmouseup&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;
                };
            };
        });&lt;/span&gt;

        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                data:{
                    msg:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                }
            });
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-drag :style&lt;/span&gt;&lt;span&gt;=&quot;{width:'100px', height:'100px', background:'blue', position:'absolute', right:0, top:0}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-drag :style&lt;/span&gt;&lt;span&gt;=&quot;{width:'100px', height:'100px', background:'red', position:'absolute', left:0, top:0}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 三、过滤器&lt;/p&gt;
&lt;p&gt;　　3.1、配合事件使用的过滤器：debounce—&amp;gt;延迟执行事件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;debounce--延迟执行&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; @keyup&lt;/span&gt;&lt;span&gt;=&quot;&lt;span&gt;show | debounce 2000&lt;/span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;　　　　　　//按键之后，将过2秒弹出1&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            data:{

            },
            methods:{
                show:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    alert(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                }
            }
        }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 3.2配合数据使用的过滤器&lt;/p&gt;
&lt;p&gt;　　3.2.1：limitBy用法&lt;/p&gt;
&lt;p&gt;　　　　基本用法　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        limitBy    限制几个
        limitBy 参数(取几个)
        limitBy 取几个  从哪开始                &lt;/span&gt;　
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;limitBy    限制几个，&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;limitBy 参数(取几个)&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;limitBy 限制几个&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;&lt;span&gt;val in arr | limitBy 2&lt;/span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;　　　　　　　　//限制显示为2个，也可改为参数&lt;/span&gt;&lt;span&gt;
                {{val}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            data:{
                arr:[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;]
            },
            methods:{

            }
        }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102223023737-560283063.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;pre&gt;
&lt;span&gt;  limitBy 取几个  从哪开始       &lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;limitBy&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;val in arr | &lt;span&gt;limitBy 2 arr.length-2&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                {{val}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            data:{
                arr:[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;]
            },
            methods:{

            }
        }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：&lt;span&gt;取2个，从数组的倒数第二个开始取&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102223508878-1793750759.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 3.2.2、filterBy 过滤数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;filterBy的用法&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;a&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;val in arr | filterBy a&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                {{val}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            data:{
                arr:[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;background&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;orange&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
                a:&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;
            },
            methods:{

            }
        }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：当在文本框输入w时只会出现width,其余的都将被过滤掉&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102223859878-233897092.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.2.3、orderBy:倒序还是正序排列&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;orderBy倒序排列，1为正序，-1为倒序&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;a&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;val in arr | orderBy -1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;　　　　　　　　　　//这里的-1也可为变量&lt;/span&gt;&lt;span&gt;
                {{val}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            data:{
                arr:[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;background&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;orange&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
                a:&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;
            },
            methods:{

            }
        }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102224345378-882168959.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;四、自定义过滤器&lt;/p&gt;
&lt;p&gt;　　1、基本语法　　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;自定义过滤器:  model -&amp;gt;过滤 -&amp;gt; view
        &lt;span&gt;Vue.filter(name,function(input){
            
        });&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　2.基本用法&lt;/p&gt;
&lt;p&gt;&lt;em&gt;　　　　&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自定义过滤器&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{&lt;span&gt;a&lt;/span&gt; | &lt;span&gt;toDou&lt;/span&gt;}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        Vue.filter(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;toDou&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(input){　　　　　　　　　　//自定义过滤器
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; input&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;input:&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;input;
        });
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            data:{
                a:&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;
            },
            methods:{

            }
        }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102224744862-1248613700.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3、自定义时间转化器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自定义时间转化器&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{&lt;span&gt;a&lt;/span&gt; | &lt;span&gt;date&lt;/span&gt;}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        Vue.filter(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(input){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; oDate&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(input);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; oDate.getFullYear()&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;(oDate.getMonth()&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;oDate.getDate()&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;oDate.getHours()&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;oDate.getMinutes()&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;oDate.getSeconds();
        });

        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            data:{
              &lt;span&gt;  a:Date.now()&lt;/span&gt;
            },
            methods:{

            }
        }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102225403284-756619294.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;五、自定义键盘信息&lt;/p&gt;
&lt;p&gt;1、基本 语法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;自定义键盘信息:
Vue.directive('on').keyCodes.ctrl=17;
Vue.directive('on').keyCodes.myenter=13;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;自定义&lt;/span&gt;键盘信息&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ctrl-&amp;gt;17&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;document.onkeydown=function(ev){
            console.log(ev.keyCode);
        };&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Vue.directive(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).keyCodes.ctrl&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;;  &lt;/span&gt;&lt;span&gt;//　　　　ctrl
&lt;/span&gt;&lt;span&gt;        Vue.directive(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).keyCodes.myenter&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;;　　　　//enter

        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                data:{
                    a:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                },
                methods:{
                    show:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                        alert(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                    }
                }
            });
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; @keydown.myenter&lt;/span&gt;&lt;span&gt;=&quot;show | debounce 2000&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 运行结果：当按下enter键之后过2秒弹出1&lt;/p&gt;

</description>
<pubDate>Tue, 02 Jan 2018 14:56:00 +0000</pubDate>
<dc:creator>蜜迷</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/15fj/p/8179737.html</dc:identifier>
</item>
<item>
<title>深入学习rollup来进行打包 - 龙恩0707</title>
<link>http://www.cnblogs.com/tugenhua0707/p/8179686.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tugenhua0707/p/8179686.html</guid>
<description>&lt;p&gt;深入学习rollup来进行打包&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阅读目录&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一：什么是Rollup?&lt;/p&gt;
&lt;p&gt;  rollup是一款用来es6模块打包代码的构建工具(支持css和js打包)。当我们使用ES6模块编写应用或者库时，它可以打包成一个单独文件提供浏览器和Node.js来使用。&lt;br/&gt;&lt;strong&gt;它的优点有如下&lt;/strong&gt;：&lt;br/&gt;  1. 能组合我们的脚本文件。&lt;br/&gt;  2. 移除未使用的代码(仅仅使用ES6语法中)。&lt;br/&gt;  3. 在浏览器中支持使用 Node modules。&lt;br/&gt;  4. 压缩文件代码使文件大小尽可能最小化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rollup最主要的优点是&lt;/strong&gt; 它是基于ES2015模块的，相比于webpack或Browserify所使用的CommonJS模块更加有效率，因为Rollup使用一种叫做&lt;br/&gt;tree-shaking的特性来移除模块中未使用的代码，这也就是说当我们引用一个库的时候，我们只用到一个库的某一段的代码的时候，它不会把所有的代码打包进来，而仅仅打包使用到的代码(webpack2.0+貌似也引入了tree-shaking)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：Rollup只会在ES6模块中支持tree-shaking特性。目前按照CommonJS模块编写的jquery不能被支持tree-shaking.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rollup 的应用场景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在目前流行的打包有 gulp 和 webpack，那么与前面两个对比，我觉得rollup更适合打包js库，但是对于打包一个项目的整个应用的话，我到觉得webpack更适合，比如打包一些图片，字体等资源文件的时候，webpack很适合，目前貌似没有看到rollup可以做到这些。&lt;br/&gt;之所以我来研究rollup，是因为最近在看vuex的源码的时候，看到它的js库就是使用rollup来进行打包的。&lt;/p&gt;

&lt;p&gt;二：如何使用Rollup来处理并打包JS文件？&lt;/p&gt;
&lt;p&gt;2-1 安装Rollup并创建配置文件，通过如下命令安装：&lt;br/&gt;      进入项目根目录后，运行命令： npm install --save-dev rollup&lt;/p&gt;
&lt;p&gt;2-2 在项目的根目录下新建一个新文件 rollup.config.js, 之后再在文件中添加如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
export &lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面再来了解一下各个配置的含义：&lt;br/&gt;&lt;strong&gt;input：&lt;/strong&gt; rollup先执行的入口文件。&lt;br/&gt;&lt;strong&gt;output：&lt;/strong&gt;rollup 输出的文件。&lt;br/&gt;&lt;strong&gt;output.format:&lt;/strong&gt; rollup支持的多种输出格式(有amd,cjs, es, iife 和 umd, 具体看 &lt;a href=&quot;http://www.cnblogs.com/tugenhua0707/p/8150915.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/tugenhua0707/p/8150915.html&lt;/a&gt;)&lt;br/&gt;&lt;strong&gt;sourceMap&lt;/strong&gt; —— 如果有 sourcemap 的话，那么在调试代码时会提供很大的帮助，这个选项会在生成文件中添加 sourcemap，来让事情变得更加简单。&lt;/p&gt;
&lt;p&gt;我们在package.json代码下 添加如下脚本。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&quot;scripts&quot;&lt;span&gt;: {
  &lt;/span&gt;&quot;build&quot;: &quot;rollup -c&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因此我们只要在命令行中 输入命令：npm run build 即可完成打包；&lt;/p&gt;
&lt;p&gt;我们再看下各个文件下的代码：&lt;/p&gt;
&lt;p&gt;src/js/a.js 代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
export &lt;span&gt;function&lt;/span&gt;&lt;span&gt; a(name) {
  const temp &lt;/span&gt;= `Hello, ${name}!&lt;span&gt;`;
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; temp;
}
export &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; b(name) {
  const temp &lt;/span&gt;= `Later, ${name}!&lt;span&gt;`;
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; temp;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;src/js/b.js代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Adds all the values in an array.
 * @param  {Array} arr an array of numbers
 * @return {Number}    the sum of all the array values
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
const addArray &lt;/span&gt;= arr =&amp;gt;&lt;span&gt; {
  const result &lt;/span&gt;= arr.reduce((a, b) =&amp;gt; a + b, 0&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
};
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; addArray;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;src/main.js代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
import { a } from './js/a'&lt;span&gt;;
import addArray from &lt;/span&gt;'./js/b'&lt;span&gt;;

const res1 &lt;/span&gt;= a('kongzhi'&lt;span&gt;);
const res2 &lt;/span&gt;= addArray([1, 2, 3, 4&lt;span&gt;]);

console.log(res1);
console.log(res2);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终会在项目的根目录下生成文件 dist/js/main.min.js, 代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;'use strict'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; a(name) {
  const temp &lt;/span&gt;= `Hello, ${name}!&lt;span&gt;`;
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; temp;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Adds all the values in an array.
 * @param  {Array} arr an array of numbers
 * @return {Number}    the sum of all the array values
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
const addArray &lt;/span&gt;= arr =&amp;gt;&lt;span&gt; {
  const result &lt;/span&gt;= arr.reduce((a, b) =&amp;gt; a + b, 0&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
};

const res1 &lt;/span&gt;= a('kongzhi'&lt;span&gt;);
const res2 &lt;/span&gt;= addArray([1, 2, 3, 4&lt;span&gt;]);

console.log(res1);
console.log(res2);

}());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上可以看到 在 src/js/a.js 下的 b函数没有被使用到，所以打包的时候没有被打包进来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：在上面代码打包后，只有现代浏览器会正常工作，如果要让不支持ES2015的旧版本浏览器下也正常工作的话，我们需要添加一些插件。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;三：设置Babel来使旧浏览器也支持ES6的代码&lt;/p&gt;
&lt;p&gt;如上打包后的代码，我们可以在现代浏览器下运行了，但是如果我们使用老版本的浏览器的话，就会产生错误。幸运的是，Babel已经提供了支持。&lt;br/&gt;我们首先需要安装一些依赖项如下命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
npm install --save-&lt;span&gt;dev 
babel&lt;/span&gt;-core babel-preset-env babel-plugin-external-&lt;span&gt;helpers 
babel&lt;/span&gt;-plugin-transform-runtime babel-preset-stage-2&lt;span&gt; 
babel&lt;/span&gt;-register rollup-plugin-babel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意：Babel preset 是一个有关Babel插件的集合，它会告诉Babel我们需要转译什么。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2 创建 .babelrc文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来需要在项目的根目录下创建 .babelrc的新文件了，它内部添加如下JSON代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;presets&quot;&lt;span&gt;: [
    [&lt;/span&gt;&quot;env&quot;&lt;span&gt;, {
      &lt;/span&gt;&quot;modules&quot;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&quot;targets&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;browsers&quot;: [&quot;&amp;gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &amp;lt;= 8&quot;&lt;span&gt;]
      }
    }],
    &lt;/span&gt;&quot;stage-2&quot;&lt;span&gt;
  ],
  &lt;/span&gt;&quot;plugins&quot;: [&quot;transform-runtime&quot;, &quot;external-helpers&quot;]  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 配置runtime，不设置会报错&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它会告诉Babel应该使用哪种preset来转译代码。&lt;/p&gt;
&lt;p&gt;因此我们再更新下 rollup.config.js，我们需要Babel插件，将它添加到一个新的配置选项plugins中，他会管控一个数组形式的插件列表，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Rollup plugins&lt;/span&gt;
import babel from 'rollup-plugin-babel'&lt;span&gt;;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  },
  plugins: [
    babel({
      exclude: &lt;/span&gt;'node_modules/**'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排除node_module下的所有文件&lt;/span&gt;
&lt;span&gt;    })
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了避免转译第三方脚本，我们需要设置一个 exclude 的配置选项来忽略掉 node_modules 目录下的所有文件。安装完成后，我们重新运行命令；然后打包后代码变成如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;'use strict'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; a(name) {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; temp = &quot;Hello, &quot; + name + &quot;!&quot;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; temp;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Adds all the values in an array.
 * @param  {Array} arr an array of numbers
 * @return {Number}    the sum of all the array values
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; addArray = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; addArray(arr) {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = arr.reduce(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (a, b) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; a +&lt;span&gt; b;
  }, &lt;/span&gt;0&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
};

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; res1 = a('kongzhi'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; res2 = addArray([1, 2, 3, 4&lt;span&gt;]);

console.log(res1);
console.log(res2);

}());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们对比下代码，可以看到 addArray 的箭头函数解析成真正的函数了。 在转译运行完成后，代码也差不多一样的，只是代码已经支持&lt;br/&gt;了IE9之前的浏览器了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意： Babel也提供了 babel-polyfill， 也可以让IE8之前的浏览器能够顺利执行。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;四：添加一个debug包来记录日志&lt;/p&gt;
&lt;p&gt; 为了查看日志，我们将在代码中添加一个debug包来记录下日志信息。通过如下命令安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
npm install --save debug
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们可以在 src/main.js中，添加一些简单的日志记录：如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
import { a } from './js/a'&lt;span&gt;;
import addArray from &lt;/span&gt;'./js/b'&lt;span&gt;;
import debug from &lt;/span&gt;'debug'&lt;span&gt;;
const log &lt;/span&gt;= debug('app:log'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable the logger.&lt;/span&gt;
debug.enable('*'&lt;span&gt;);
log(&lt;/span&gt;'Logging is enabled!'&lt;span&gt;);

const res1 &lt;/span&gt;= a('kongzhi'&lt;span&gt;);
const res2 &lt;/span&gt;= addArray([1, 2, 3, 4&lt;span&gt;]);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Print the results on the page.&lt;/span&gt;
const printTarget = document.getElementsByClassName('debug__output')[0&lt;span&gt;];

printTarget.innerText &lt;/span&gt;= `sayHelloTo('Jason') =&amp;gt;&lt;span&gt; ${res1}\n\n`;
printTarget.innerText &lt;/span&gt;+= `addArray([1, 2, 3, 4]) =&amp;gt; ${res2}`;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index.html 代码变成如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;doctype html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt;
        content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width,minimum-scale=1,initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Learning Rollup&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Learning Rollup&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    Let’s learn how to use &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;http://rollupjs.org/&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Rollup&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;.
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; JS-generated output will be added here. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pre &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;debug&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;code &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;debug__output&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pre&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; This is the bundle generated by rollup.js &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./dist/js/main.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们直接访问index.html后，浏览器控制台报错了，错误信息如下：&lt;br/&gt;Uncaught ReferenceError: debug is not defined，然后我们可以继续查看，打包后的main.min.js的代码变为如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (debug) {
&lt;/span&gt;'use strict'&lt;span&gt;;

debug &lt;/span&gt;= debug &amp;amp;&amp;amp; debug.hasOwnProperty('default') ? debug['default'&lt;span&gt;] : debug;

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; a(name) {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; temp = &quot;Hello, &quot; + name + &quot;!&quot;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; temp;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Adds all the values in an array.
 * @param  {Array} arr an array of numbers
 * @return {Number}    the sum of all the array values
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; addArray = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; addArray(arr) {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = arr.reduce(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (a, b) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; a +&lt;span&gt; b;
  }, &lt;/span&gt;0&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
};

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; log = debug('app:log'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable the logger.&lt;/span&gt;
debug.enable('*'&lt;span&gt;);
log(&lt;/span&gt;'Logging is enabled!'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; res1 = a('kongzhi'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; res2 = addArray([1, 2, 3, 4&lt;span&gt;]);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Print the results on the page.&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; printTarget = document.getElementsByClassName('debug__output')[0&lt;span&gt;];

printTarget.innerText &lt;/span&gt;= 'sayHelloTo(\'Jason\') =&amp;gt; ' + res1 + '\n\n'&lt;span&gt;;
printTarget.innerText &lt;/span&gt;+= 'addArray([1, 2, 3, 4]) =&amp;gt; ' +&lt;span&gt; res2;

}(debug));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也就是说 浏览器报错是因为打包后的debug是 undefined，这是因为一般的情况下，第三方node模块并不会被Rollup正确加载。&lt;br/&gt;Node模块使用的是CommonJS, 它不会被Rollup兼容因此不能直接被使用，为了解决这个问题，我们需要添加一些插件来&lt;br/&gt;处理Node依赖和CommonJS模块。&lt;br/&gt;为了解决上面的两个问题，我们需要在Rollup中添加如下两个插件：&lt;br/&gt;&lt;strong&gt;1. rollup-plugin-node-resolve&lt;/strong&gt; 该插件会允许加载在 node_modules中的第三方模块。&lt;br/&gt;&lt;strong&gt;2. rollup-plugin-commonjs&lt;/strong&gt; 它会将CommonJS模块转换为ES6来为Rollup获得兼容。&lt;/p&gt;
&lt;p&gt;因此如下命令即可安装：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;npm install --save-dev rollup-plugin-node-resolve rollup-plugin-commonjs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然后我们继续更新下 rollup.config.js 代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Rollup plugins&lt;/span&gt;
import babel from 'rollup-plugin-babel'&lt;span&gt;;
import resolve from &lt;/span&gt;'rollup-plugin-node-resolve'&lt;span&gt;;
import commonjs from &lt;/span&gt;'rollup-plugin-commonjs'&lt;span&gt;;
import json from &lt;/span&gt;'rollup-plugin-json'&lt;span&gt;;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  },
  plugins: [
    resolve({
      jsnext: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该属性是指定将Node包转换为ES2015模块&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; main 和 browser 属性将使插件决定将那些文件应用到bundle中&lt;/span&gt;
      main: &lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: true &lt;/span&gt;
      browser: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: false&lt;/span&gt;
&lt;span&gt;    }),
    commonjs(),
    json(),
    babel({
      exclude: &lt;/span&gt;'node_modules/**'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排除node_modules 下的文件&lt;/span&gt;
&lt;span&gt;    })
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到目前为止一切顺利，但是当我们运行index.html时候， rollup 时我们会得到一个日志信息：&lt;/p&gt;
&lt;p&gt;在控制台如下日志信息：&lt;br/&gt;app:log Logging is enabled! +0ms&lt;/p&gt;
&lt;p&gt;index.html 页面上显示如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Learning Rollup
Let’s learn how to use Rollup.

sayHelloTo(&lt;/span&gt;'Jason') =&amp;gt; Hello, kongzhi!&lt;span&gt;

addArray([&lt;/span&gt;1, 2, 3, 4]) =&amp;gt; 10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上代码，我们看到引入了 rollup-plugin-json 插件了，该插件的作用是读取json信息的，比如我读取package.json的信息:&lt;/p&gt;
&lt;p&gt;然后我把main.js中引入对应代码。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
import { a } from './js/a'&lt;span&gt;;
import addArray from &lt;/span&gt;'./js/b'&lt;span&gt;;
import debug from &lt;/span&gt;'debug'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加json&lt;/span&gt;
import pkg from '../package.json'&lt;span&gt;;
console.log( `running version ${pkg.version}` ); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 控制台输出 running version 1.0.0&lt;/span&gt;
&lt;span&gt;
const log &lt;/span&gt;= debug('app:log'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable the logger.&lt;/span&gt;
debug.enable('*'&lt;span&gt;);
log(&lt;/span&gt;'Logging is enabled!'&lt;span&gt;);

const res1 &lt;/span&gt;= a('kongzhi'&lt;span&gt;);
const res2 &lt;/span&gt;= addArray([1, 2, 3, 4&lt;span&gt;]);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Print the results on the page.&lt;/span&gt;
const printTarget = document.getElementsByClassName('debug__output')[0&lt;span&gt;];

printTarget.innerText &lt;/span&gt;= `sayHelloTo('Jason') =&amp;gt;&lt;span&gt; ${res1}\n\n`;
printTarget.innerText &lt;/span&gt;+= `addArray([1, 2, 3, 4]) =&amp;gt; ${res2}`;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在控制台输出如下信息：&lt;br/&gt;控制台输出 running version 1.0.0&lt;/p&gt;

&lt;p&gt;五：添加插件来替代环境变量&lt;/p&gt;
&lt;p&gt; 环境变量能为我们的开发流程提供很大的帮助，我们可以通过它来执行关闭或开启日志，注入开发环境脚本等功能。&lt;br/&gt;因此我们可以在main.js中添加基础配置的ENV。让我们添加一个环境变量来使我们的日志脚本只在非 production环境下才会执行&lt;br/&gt;。如下main.js代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
import { a } from './js/a'&lt;span&gt;;
import addArray from &lt;/span&gt;'./js/b'&lt;span&gt;;
import debug from &lt;/span&gt;'debug'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加json&lt;/span&gt;
import pkg from '../package.json'&lt;span&gt;;
console.log( `running version ${pkg.version}` ); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 控制台输出 running version 1.0.0&lt;/span&gt;
&lt;span&gt;
const log &lt;/span&gt;= debug('app:log'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果是正式环境的话，不输出日志信息&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (ENV !== 'production'&lt;span&gt;) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable the logger.&lt;/span&gt;
  debug.enable('*'&lt;span&gt;);
  log(&lt;/span&gt;'Logging is enabled!'&lt;span&gt;);
} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
  debug.disable();
}

const res1 &lt;/span&gt;= a('kongzhi'&lt;span&gt;);
const res2 &lt;/span&gt;= addArray([1, 2, 3, 4&lt;span&gt;]);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Print the results on the page.&lt;/span&gt;
const printTarget = document.getElementsByClassName('debug__output')[0&lt;span&gt;];

printTarget.innerText &lt;/span&gt;= `sayHelloTo('Jason') =&amp;gt;&lt;span&gt; ${res1}\n\n`;
printTarget.innerText &lt;/span&gt;+= `addArray([1, 2, 3, 4]) =&amp;gt; ${res2}`;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后打包完成后，在浏览器查看 发现报错了，如下错误信息：&lt;br/&gt;Uncaught ReferenceError: ENV is not defined&lt;br/&gt;这也很正常，因为我们并没有定义它，现在我们还需要一个插件来将我们的环境变量用到bundle中。&lt;/p&gt;
&lt;p&gt;5-1 先安装 &lt;strong&gt;rollup-plugin-replcae&lt;/strong&gt;，该插件是一个用来查找和替换的工作，我们只需要找到目前的环境变量并且使用实际&lt;br/&gt;的值替代就可以了。先安装如下：&lt;br/&gt;&lt;strong&gt;npm install --save-dev rollup-plugin-replace&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后我们再来更新一下 rollup.config.js, 配置是我们可以添加一个 key:value 的配对表，key值是准备被替换的键，而value是将要被替换的值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Rollup plugins&lt;/span&gt;
import babel from 'rollup-plugin-babel'&lt;span&gt;;
import resolve from &lt;/span&gt;'rollup-plugin-node-resolve'&lt;span&gt;;
import commonjs from &lt;/span&gt;'rollup-plugin-commonjs'&lt;span&gt;;
import json from &lt;/span&gt;'rollup-plugin-json'&lt;span&gt;;
import replace from &lt;/span&gt;'rollup-plugin-replace'&lt;span&gt;;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  },
  plugins: [
    resolve({
      jsnext: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该属性是指定将Node包转换为ES2015模块&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; main 和 browser 属性将使插件决定将那些文件应用到bundle中&lt;/span&gt;
      main: &lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: true &lt;/span&gt;
      browser: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: false&lt;/span&gt;
&lt;span&gt;    }),
    commonjs(),
    json(),
    babel({
      exclude: &lt;/span&gt;'node_modules/**'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排除node_modules 下的文件&lt;/span&gt;
&lt;span&gt;    }),
    replace({
      ENV: JSON.stringify(process.env.NODE_ENV &lt;/span&gt;|| 'development'&lt;span&gt;)
    })
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们现在运行 npm run build 的时候还是有日志信息的，因为默认的环境就是 development， 但是当我们在命令&lt;br/&gt;行中使用如下命令：&lt;strong&gt;`NODE_ENV=production ./node_modules/.bin/rollup -c`(mac系统下的命令)&lt;/strong&gt;， 然后打包&lt;br/&gt;后，刷新浏览器 就不会有日志记录信息了。&lt;br/&gt;&lt;strong&gt;注意：在winodw环境下，运行如下命令： SET NODE_ENV=production ./node_modules/.bin/rollup -c&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;六：添加 UglifyJS来压缩我们js的代码&lt;/p&gt;
&lt;p&gt; 安装插件 rollup-plugin-uglify&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令如下安装：&lt;br/&gt;npm install --save-dev rollup-plugin-uglify&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再在 rollup.config.js 配置代码，为了在开发中使代码更具可读性，我们只在生产环境压缩代码：&lt;br/&gt;rollup.config.js配置代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Rollup plugins&lt;/span&gt;
import babel from 'rollup-plugin-babel'&lt;span&gt;;
import resolve from &lt;/span&gt;'rollup-plugin-node-resolve'&lt;span&gt;;
import commonjs from &lt;/span&gt;'rollup-plugin-commonjs'&lt;span&gt;;
import json from &lt;/span&gt;'rollup-plugin-json'&lt;span&gt;;
import replace from &lt;/span&gt;'rollup-plugin-replace'&lt;span&gt;;
import uglify from &lt;/span&gt;'rollup-plugin-uglify'&lt;span&gt;;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  },
  plugins: [
    resolve({
      jsnext: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该属性是指定将Node包转换为ES2015模块&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; main 和 browser 属性将使插件决定将那些文件应用到bundle中&lt;/span&gt;
      main: &lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: true &lt;/span&gt;
      browser: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: false&lt;/span&gt;
&lt;span&gt;    }),
    commonjs(),
    json(),
    babel({
      exclude: &lt;/span&gt;'node_modules/**'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排除node_modules 下的文件&lt;/span&gt;
&lt;span&gt;    }),
    replace({
      ENV: JSON.stringify(process.env.NODE_ENV &lt;/span&gt;|| 'development'&lt;span&gt;)
    }),
    (process.env.NODE_ENV &lt;/span&gt;=== 'production' &amp;amp;&amp;amp;&lt;span&gt; uglify())
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们在mac系统下运行命令 `NODE_ENV=production ./node_modules/.bin/rollup -c` 后，代码被压缩了，当我们运行&lt;br/&gt;npm run build 的时候，代码未被压缩。&lt;/p&gt;

&lt;p&gt;七：监听文件变化的插件 --- rollup-watch&lt;/p&gt;
&lt;p&gt;如下安装命令：&lt;br/&gt;&lt;strong&gt;npm install --save-dev rollup-watch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后在package.json 中设置 scripts属性即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&quot;scripts&quot;&lt;span&gt;: {
  &lt;/span&gt;&quot;dev&quot;: &quot;rollup -c -w&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;build&quot;: &quot;rollup -c&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们在 src/main.js 代码下 加入一句代码后 ： console.log(1122); 然后在浏览器下刷新下即可在控制台可以看到打印输出 1122这样的就可以监听到了。不需要重新打包即可。&lt;/p&gt;

&lt;p&gt;八：开启本地服务的插件 --- rollup-plugin-serve&lt;/p&gt;
&lt;p&gt; 安装命令如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;npm install --save-dev rollup-plugin-serve&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在rollup.config.js 配置代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Rollup plugins&lt;/span&gt;
import babel from 'rollup-plugin-babel'&lt;span&gt;;
import resolve from &lt;/span&gt;'rollup-plugin-node-resolve'&lt;span&gt;;
import commonjs from &lt;/span&gt;'rollup-plugin-commonjs'&lt;span&gt;;
import json from &lt;/span&gt;'rollup-plugin-json'&lt;span&gt;;
import replace from &lt;/span&gt;'rollup-plugin-replace'&lt;span&gt;;
import uglify from &lt;/span&gt;'rollup-plugin-uglify'&lt;span&gt;;
import serve from &lt;/span&gt;'rollup-plugin-serve'&lt;span&gt;;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  },
  plugins: [
    resolve({
      jsnext: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该属性是指定将Node包转换为ES2015模块&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; main 和 browser 属性将使插件决定将那些文件应用到bundle中&lt;/span&gt;
      main: &lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: true &lt;/span&gt;
      browser: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: false&lt;/span&gt;
&lt;span&gt;    }),
    commonjs(),
    json(),
    babel({
      exclude: &lt;/span&gt;'node_modules/**'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排除node_modules 下的文件&lt;/span&gt;
&lt;span&gt;    }),
    replace({
      ENV: JSON.stringify(process.env.NODE_ENV &lt;/span&gt;|| 'development'&lt;span&gt;)
    }),
    (process.env.NODE_ENV &lt;/span&gt;=== 'production' &amp;amp;&amp;amp;&lt;span&gt; uglify()),
    serve({
      open: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否打开浏览器&lt;/span&gt;
      contentBase: './', &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 入口html的文件位置&lt;/span&gt;
      historyApiFallback: &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set to true to return index.html instead of 404&lt;/span&gt;
      host: 'localhost'&lt;span&gt;,
      port: &lt;/span&gt;10001&lt;span&gt;
    })
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后重启命令 npm run build 就可以会自动打开 http://localhost:10001/ 页面了。&lt;br/&gt;&lt;strong&gt;注意： 这边port配置的端口号是五位数，不是四位数。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;九：实时刷新页面 --- rollup-plugin-livereload&lt;/p&gt;
&lt;p&gt;命令安装如下：&lt;br/&gt;&lt;strong&gt;npm install --save-dev rollup-plugin-livereload&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注入LiveReload脚本&lt;/strong&gt;&lt;br/&gt;在LiveReload工作前，需要向页面中注入一段脚本用于和LiveReload的服务器建立连接。&lt;br/&gt;在src/main.js 中加入如下一段代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable LiveReload&lt;/span&gt;
&lt;span&gt;document.write(
  &lt;/span&gt;'&amp;lt;script src=&quot;http://' + (location.host || 'localhost').split(':')[0] +
  ':35729/livereload.js?snipver=1&quot;&amp;gt;&amp;lt;/' + 'script&amp;gt;'&lt;span&gt;
);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;src/main.js所有代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
import { a } from './js/a'&lt;span&gt;;
import addArray from &lt;/span&gt;'./js/b'&lt;span&gt;;
import debug from &lt;/span&gt;'debug'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加json&lt;/span&gt;
import pkg from '../package.json'&lt;span&gt;;
console.log( `running version ${pkg.version}` ); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 控制台输出 running version 1.0.0&lt;/span&gt;
&lt;span&gt;
const log &lt;/span&gt;= debug('app:log'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果不是正式环境的话，不输出日志信息&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (ENV !== 'production'&lt;span&gt;) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable the logger.&lt;/span&gt;
  debug.enable('*'&lt;span&gt;);
  log(&lt;/span&gt;'Logging is enabled!'&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable LiveReload&lt;/span&gt;
&lt;span&gt;  document.write(
    &lt;/span&gt;'&amp;lt;script src=&quot;http://' + (location.host || 'localhost').split(':')[0] +
    ':35729/livereload.js?snipver=1&quot;&amp;gt;&amp;lt;/' + 'script&amp;gt;'&lt;span&gt;
  );
} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
  debug.disable();
}

const res1 &lt;/span&gt;= a('kongzhi'&lt;span&gt;);
const res2 &lt;/span&gt;= addArray([1, 2, 3, 4&lt;span&gt;]);
console.log(&lt;/span&gt;1122&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Print the results on the page.&lt;/span&gt;
const printTarget = document.getElementsByClassName('debug__output')[0&lt;span&gt;];

printTarget.innerText &lt;/span&gt;= `sayHelloTo('Jason') =&amp;gt;&lt;span&gt; ${res1}\n\n`;
printTarget.innerText &lt;/span&gt;+= `addArray([1, 2, 3, 4]) =&amp;gt; ${res2}`;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行 LiveReload&lt;/strong&gt;&lt;br/&gt;LiveReload安装好并且脚本注入到文档中后，我们可以运行它去监听build目录：&lt;br/&gt;如下命令：&lt;br/&gt;&lt;strong&gt;./node_modules/.bin/livereload 'build/'&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运行完成后 发现报错了 Error: listen EADDRINUSE :::35729；通过百度才发现端口被占用了，需要换端口，因此我直接把这个进程杀掉不就可以了，&lt;br/&gt;首先我们先使用如下命令来查看下进程：&lt;br/&gt;&lt;strong&gt;lsof -n -i4TCP:35729&lt;/strong&gt;&lt;br/&gt;看到信息如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
COMMAND  PID     USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
node    1452 tugenhua   15u  IPv6 0xb0e27d409cc55a1b      0t0  TCP *:35729 (LISTEN)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行如下命令杀掉：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;kill -9 1452&lt;/strong&gt;&lt;br/&gt;再在命令行输入 &lt;strong&gt;./node_modules/.bin/livereload 'src/'&lt;/strong&gt; 即可看到如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
$ ./node_modules/.bin/livereload 'src/'&lt;span&gt;
Starting LiveReload v0.6.3 for /Users/tugenhua/个人demo/vue1204/rollup-build/src on port 35729.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意：./node_modules/.bin/livereload 'src/'&lt;/strong&gt; 这句代码的含义是 监听src文件夹的文件，因此index.html内会&lt;br/&gt;监听到，我们可以打开 src/index.html后，然后在index.html修改内容后，保存一下就可以看到页面会自动刷新内容了。&lt;/p&gt;
&lt;p&gt;如上虽然改变 src/index.html的内容后会自动刷新页面，但是感觉每次 都需要输入 ./node_modules/.bin/livereload 'src/' 这么一段命令，有点麻烦，因此我们可以在 package.json 脚本中来简化这个过程，在package.json下scripts加上如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&quot;scripts&quot;&lt;span&gt;: {
  &lt;/span&gt;&quot;dev&quot;: &quot;rollup -c -w&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;build&quot;: &quot;rollup -c&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;reload&quot;: &quot;livereload 'src/'&quot;&lt;span&gt;
}, &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们在命令行中 运行 npm run reload 也可以监听到了。但是我们监听不到 src/js 或 src/css 下的文件的变化，&lt;br/&gt;因为它不会自动打包，而只是监听src下的文件变化而已。但是我们又不能同时打开 watcher 和 Livereload，会报错端口被占用的情况。&lt;br/&gt;因此我们需要看第10条来解决这个问题哦；&lt;/p&gt;

&lt;p&gt;十. 安装同时运行watcher 和 Livereload的工具&lt;/p&gt;
&lt;p&gt; 为了能同时执行 Rollup和LiveReload, 我们需要使用一个叫做 npm-run-all 的工具。它的含义是一个终端可以执行多个任务。&lt;/p&gt;
&lt;p&gt;安装命令如下：&lt;br/&gt;&lt;strong&gt;npm install --save-dev npm-run-all&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后我们要在package.json中再加入一条调用npm-run-all的脚本。在scripts代码块内，添加如下内容:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&quot;scripts&quot;&lt;span&gt;: {
  &lt;/span&gt;&quot;dev&quot;: &quot;rollup -c -w&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;build&quot;: &quot;rollup -c&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;reload&quot;: &quot;livereload 'src/'&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;watch&quot;: &quot;npm-run-all --parallel dev&quot;&lt;span&gt;
},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;watch 就是新增的。因此我们可以在终端运行 npm run watch命令了，然后刷新浏览器(http://localhost:10002/src/index.html)，改变一下js或者css，浏览器会自动加载更新后的代码了。&lt;/p&gt;

&lt;p&gt;十一. rollup+PostCSS打包样式文件并添加 LiveReload&lt;/p&gt;
&lt;p&gt; 1. 在main.js中加载样式： 在main.js 中加入如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Import styles (automatically injected into &amp;lt;head&amp;gt;).&lt;/span&gt;
import './css/index.css'&lt;span&gt;;
所有的代码如下：
import &lt;/span&gt;'./css/index.css'&lt;span&gt;;

import { a } from &lt;/span&gt;'./js/a'&lt;span&gt;;
import addArray from &lt;/span&gt;'./js/b'&lt;span&gt;;
import debug from &lt;/span&gt;'debug'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加json&lt;/span&gt;
import pkg from '../package.json'&lt;span&gt;;
console.log( `running version ${pkg.version}` ); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 控制台输出 running version 1.0.0&lt;/span&gt;
&lt;span&gt;
const log &lt;/span&gt;= debug('app:log'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果不是正式环境的话，不输出日志信息&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (ENV !== 'production'&lt;span&gt;) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable the logger.&lt;/span&gt;
  debug.enable('*'&lt;span&gt;);
  log(&lt;/span&gt;'Logging is enabled!'&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable LiveReload&lt;/span&gt;
&lt;span&gt;  document.write(
    &lt;/span&gt;'&amp;lt;script src=&quot;http://' + (location.host || 'localhost').split(':')[0] +
    ':35729/livereload.js?snipver=1&quot;&amp;gt;&amp;lt;/' + 'script&amp;gt;'&lt;span&gt;
  );
} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
  debug.disable();
}

const res1 &lt;/span&gt;= a('kongzhi222'&lt;span&gt;);
const res2 &lt;/span&gt;= addArray([1, 2, 3, 4&lt;span&gt;]);
console.log(&lt;/span&gt;11222211&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Print the results on the page.&lt;/span&gt;
const printTarget = document.getElementsByClassName('debug__output')[0&lt;span&gt;];

printTarget.innerText &lt;/span&gt;= `sayHelloTo('Jason') =&amp;gt;&lt;span&gt; ${res1}\n\n`;
printTarget.innerText &lt;/span&gt;+= `addArray([1, 2, 3, 4]) =&amp;gt; ${res2}`;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2. 安装PostCss插件&lt;/strong&gt;&lt;br/&gt;首先需要安装Rollup版本的PostCss插件，使用命令如下安装：&lt;br/&gt;&lt;strong&gt;npm install --save-dev rollup-plugin-postcss&lt;/strong&gt;&lt;br/&gt;然后 添加插件到 rollup.config.js中去：&lt;br/&gt;添加代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Rollup plugins&lt;/span&gt;
import babel from 'rollup-plugin-babel'&lt;span&gt;;
import resolve from &lt;/span&gt;'rollup-plugin-node-resolve'&lt;span&gt;;
import commonjs from &lt;/span&gt;'rollup-plugin-commonjs'&lt;span&gt;;
import json from &lt;/span&gt;'rollup-plugin-json'&lt;span&gt;;
import replace from &lt;/span&gt;'rollup-plugin-replace'&lt;span&gt;;
import uglify from &lt;/span&gt;'rollup-plugin-uglify'&lt;span&gt;;
import serve from &lt;/span&gt;'rollup-plugin-serve'&lt;span&gt;;
import livereload from &lt;/span&gt;'rollup-plugin-livereload'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新增的postcss&lt;/span&gt;
import postcss from 'rollup-plugin-postcss'&lt;span&gt;;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  },
  plugins: [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新增的postcss&lt;/span&gt;
&lt;span&gt;    postcss({
      extensions: [&lt;/span&gt;'.css'&lt;span&gt;]
    }),
    resolve({
      jsnext: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该属性是指定将Node包转换为ES2015模块&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; main 和 browser 属性将使插件决定将那些文件应用到bundle中&lt;/span&gt;
      main: &lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: true &lt;/span&gt;
      browser: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: false&lt;/span&gt;
&lt;span&gt;    }),
    commonjs(),
    json(),
    babel({
      exclude: &lt;/span&gt;'node_modules/**'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排除node_modules 下的文件&lt;/span&gt;
&lt;span&gt;    }),
    replace({
      ENV: JSON.stringify(process.env.NODE_ENV &lt;/span&gt;|| 'development'&lt;span&gt;)
    }),
    (process.env.NODE_ENV &lt;/span&gt;=== 'production' &amp;amp;&amp;amp;&lt;span&gt; uglify()),
    serve({
      open: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否打开浏览器&lt;/span&gt;
      contentBase: './', &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 入口html的文件位置&lt;/span&gt;
      historyApiFallback: &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set to true to return index.html instead of 404&lt;/span&gt;
      host: 'localhost'&lt;span&gt;,
      port: &lt;/span&gt;10002&lt;span&gt;
    }),
    livereload()
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行npm run build 后，可以看到生成的 dist/js/main.min.js 中的代码，在文件开头几行，可以看到一个名叫__$styleInject()的新函数；&lt;br/&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; __$styleInject(css, returnValue) {
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; document === 'undefined'&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; returnValue;
  }
  css &lt;/span&gt;= css || ''&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; head = document.head || document.getElementsByTagName('head')[0&lt;span&gt;];
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; style = document.createElement('style'&lt;span&gt;);
  style.type &lt;/span&gt;= 'text/css'&lt;span&gt;;
  head.appendChild(style);
  
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (style.styleSheet){
    style.styleSheet.cssText &lt;/span&gt;=&lt;span&gt; css;
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    style.appendChild(document.createTextNode(css));
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; returnValue;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个函数创建了一个&amp;lt;style&amp;gt;元素并设置样式，然后添加到文档的&amp;lt;head&amp;gt;标签中。&lt;br/&gt;但现在这些样式并没有真正地被处理；PostCSS只是直接地传输了我们的样式。让我们添加一些需要的PostCSS插件，使得样式能在目标浏览器上工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 安装必要的 PostCSS插件&lt;/strong&gt;&lt;br/&gt;下面需要安装四个插件，如下插件：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;postcss-simple-vars&lt;/strong&gt; 可以使用Sass风格的变量(e.g. $myColor: #fff;，color: $myColor;)而不是冗长的CSS语法(e.g. :root {--myColor: #fff}，color: var(--myColor))。&lt;br/&gt;&lt;strong&gt;postcss-nested&lt;/strong&gt; 允许使用嵌套规则。实际上我不用它写嵌套规则；&lt;br/&gt;&lt;strong&gt;postcss-cssnext&lt;/strong&gt; 这个插件集使得大多数现代CSS语法(通过最新的CSS标准)可用，编译后甚至可以在不支持新特性的旧浏览器中工作。&lt;br/&gt;&lt;strong&gt;cssnano&lt;/strong&gt; — 压缩，减小输出CSS文件大小。相当于JavaScript中对应的UglifyJS。&lt;/p&gt;
&lt;p&gt;使用如下命令安装即可：&lt;br/&gt;&lt;strong&gt;npm install --save-dev postcss-simple-vars postcss-nested postcss-cssnext cssnano&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们再来更下 rollup.config.js&lt;br/&gt;现在我们可以在rollup.config.js 中引入 postcss插件了，在配置对象的plugins属性上添加一个postcss。&lt;br/&gt;如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Rollup plugins&lt;/span&gt;
import babel from 'rollup-plugin-babel'&lt;span&gt;;
import resolve from &lt;/span&gt;'rollup-plugin-node-resolve'&lt;span&gt;;
import commonjs from &lt;/span&gt;'rollup-plugin-commonjs'&lt;span&gt;;
import json from &lt;/span&gt;'rollup-plugin-json'&lt;span&gt;;
import replace from &lt;/span&gt;'rollup-plugin-replace'&lt;span&gt;;
import uglify from &lt;/span&gt;'rollup-plugin-uglify'&lt;span&gt;;
import serve from &lt;/span&gt;'rollup-plugin-serve'&lt;span&gt;;
import livereload from &lt;/span&gt;'rollup-plugin-livereload'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新增 rollup-plugin-postcss 插件&lt;/span&gt;
import postcss from 'rollup-plugin-postcss'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新增 postcss plugins&lt;/span&gt;
import simplevars from 'postcss-simple-vars'&lt;span&gt;;
import nested from &lt;/span&gt;'postcss-nested'&lt;span&gt;;
import cssnext from &lt;/span&gt;'postcss-cssnext'&lt;span&gt;;
import cssnano from &lt;/span&gt;'cssnano'&lt;span&gt;;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  },
  plugins: [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新增的&lt;/span&gt;
&lt;span&gt;    postcss({
      extensions: [&lt;/span&gt;'.css'&lt;span&gt;],
      plugins: [
        simplevars(),
        nested(),
        cssnext({ warnForDuplicates: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;, }),
        cssnano()
      ]
    }),
    resolve({
      jsnext: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该属性是指定将Node包转换为ES2015模块&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; main 和 browser 属性将使插件决定将那些文件应用到bundle中&lt;/span&gt;
      main: &lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: true &lt;/span&gt;
      browser: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: false&lt;/span&gt;
&lt;span&gt;    }),
    commonjs(),
    json(),
    babel({
      exclude: &lt;/span&gt;'node_modules/**'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排除node_modules 下的文件&lt;/span&gt;
&lt;span&gt;    }),
    replace({
      ENV: JSON.stringify(process.env.NODE_ENV &lt;/span&gt;|| 'development'&lt;span&gt;)
    }),
    (process.env.NODE_ENV &lt;/span&gt;=== 'production' &amp;amp;&amp;amp;&lt;span&gt; uglify()),
    serve({
      open: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否打开浏览器&lt;/span&gt;
      contentBase: './', &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 入口html的文件位置&lt;/span&gt;
      historyApiFallback: &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set to true to return index.html instead of 404&lt;/span&gt;
      host: 'localhost'&lt;span&gt;,
      port: &lt;/span&gt;10002&lt;span&gt;
    }),
    livereload()
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们再来运行 npm run build, 后再打开浏览器就可以看到了head里面新增样式了，并且已经压缩的。&lt;/p&gt;
&lt;p&gt;注意：在cssnext()中配置了{ warnForDuplicates: false }是因为它和cssnano()都使用了Autoprefixer，会导致一个警告。 我们只需要知道它被执行了两次(在这个例子中没什么坏处)并且取消了警告。&lt;/p&gt;
&lt;p&gt;同理我们运行命令 npm run watch 后，修改css，也能实时加载到最新的css了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.rollupjs.com/&quot; target=&quot;_blank&quot;&gt;更多可以查看rollup中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tugenhua0707/rollup-demo&quot; target=&quot;_blank&quot;&gt;github项目rollup打包查看&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 02 Jan 2018 14:39:00 +0000</pubDate>
<dc:creator>龙恩0707</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tugenhua0707/p/8179686.html</dc:identifier>
</item>
<item>
<title>移动端适配 - 叫我小红依吧</title>
<link>http://www.cnblogs.com/huyuzhu/p/8179524.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huyuzhu/p/8179524.html</guid>
<description>&lt;p&gt;作为一个前端开发人员，我们的任务是将UI设计师的图稿运用计算机语言呈现在用户面前。而现在的设备大小尺寸不一，近年来智能手机的普及更是让网页的用户大部分来源与手机，所以让不同大小的移动端屏幕都能较好的还原设计稿就成了一个前端开发者需要解决的当务之急。我查阅了大量资料和进行了一些实践，下面是我对移动端适配的一些认识。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;首先我们来谈谈我们在电脑端用的字体单位px和em&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在国内的网站中大多都是使用px作为字体单位，只有百度做了个可调的表率。而在大洋彼岸，几乎所有的主流站点都使用em作为字体单位，也就是可调的。他们为什么要用em作为单位呢，主要有一下几个原因&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li&gt;IE无法调整那些使用px作为单位的字体大小;&lt;/li&gt;
&lt;li&gt;国外的大部分网站能够调整的原因在于其使用了em作为字体单位;&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;Firefox能够调整px和em，但是96%以上的中国网民使用IE浏览器(或内核)。&lt;/p&gt;
&lt;h4 id=&quot;px和em概念&quot;&gt;px和em概念&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;px像素(Pixel):&lt;/strong&gt; 相对长度单位。像素px是相对于显示器屏幕分辨率而言的。&lt;br/&gt;__em:__是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明 Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。&lt;/p&gt;
&lt;p&gt;em有如下特点：&lt;br/&gt;　　1. em的值并不是固定的;&lt;br/&gt;　　2. em会继承父级元素的字体大小。&lt;br/&gt;所以我们在写CSS的时候，需要注意两点：&lt;br/&gt;　　1. body选择器中声明Font-size=62.5%;&lt;br/&gt;　　2. 将你的原来的px数值除以10，然后换上em作为单位;&lt;br/&gt;　　3. 重新计算那些被放大的字体的em数值。避免字体大小的重复声明。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;下面我们来谈谈移动端的适配方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先讲讲一个基本概念&lt;/p&gt;
&lt;h4 id=&quot;视窗-viewport&quot;&gt;视窗 viewport&lt;/h4&gt;
&lt;p&gt;移动前端中常说的 viewport （视口）就是浏览器显示页面内容的屏幕区域。&lt;/p&gt;
&lt;p&gt;移动端的viewport太窄，为了能更好为CSS布局服务，所以提供了两个viewport:虚拟的visual viewport和布局的layout viewport。&lt;/p&gt;
&lt;h5 id=&quot;layout-viewport布局视口&quot;&gt;layout viewport（布局视口）&lt;/h5&gt;
&lt;p&gt;一般移动设备的浏览器都默认设置了一个viewport 元标签，定义一个虚拟的layout viewport（布局视口），用于解决早期的页面在手机上显示的问题。iOS, Android基本都将这个视口分辨率设置为 980px，所以pc上的网页基本能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。&lt;/p&gt;
&lt;p&gt;这里是一个小demo，分别是加了和没加页面的效果&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5349028-5bfd96af89a8e0a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;加了&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5349028-95b7d5963ae6d518.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;没加&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;visual-viewport视觉视口和物理像素&quot;&gt;visual viewport（视觉视口）和物理像素&lt;/h5&gt;
&lt;p&gt;visual viewport（视觉视口）备物理屏幕的可视区域，屏幕显示器的物理像素，同样尺寸的屏幕，像素密度大的设备，硬件像素会更多。例如iPhone的物理像素：&lt;/p&gt;
&lt;p&gt;dip （设备逻辑像素）跟设备的硬件像素无关的。一个 dip 在任意像素密度的设备屏幕上都占据相同的空间。&lt;/p&gt;
&lt;p&gt;比如MacBook Pro的 Retina （视网膜）屏显示器硬件像素是：2880 * 1800。当你设置屏幕分辨率为 1920 * 1200 的时候，ideal viewport（理想视口）的宽度值是1920像素， 那么 dip 的宽度值就是1920。设备像素比是1.5（2880/1920）。设备的逻辑像素宽度和物理像素宽度（像素分辨率）的关系满足如下公式：&lt;/p&gt;
&lt;p&gt;逻辑像素宽度*倍率 = 物理像素宽度&lt;/p&gt;
&lt;p&gt;而移动端手机屏幕通常不可以设置分辨率，一般都是设备厂家默认设置的固定值，换句话说 dip 的值就是 ideal viewport（理想视口）（也就是分辨率）的值，比如，iPhone的屏幕分辨率：&lt;/p&gt;
&lt;p&gt;iPhone5 ：分辨率 320 * 568，物理像素 640 * 1136，@2x&lt;br/&gt;iPhone6：分辨率 375 * 667，物理像素 750 * 1334，@2x&lt;br/&gt;iPhone6 Plus ：分辨率 414 * 736，物理像素1242 * 2208，@3x&lt;/p&gt;
&lt;p&gt;所以我们需要使用viewport元标签控制布局&lt;/p&gt;
&lt;p&gt;通常用到的适配代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里是每个属性的详细介绍&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5349028-8f2e97dcb2b59e53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;width&quot;&gt;width&lt;/h5&gt;
&lt;p&gt;为了是适应布局，我们一般将width设为device-width。&lt;/p&gt;
&lt;p&gt;width=device-width 也就是将layout viewport（布局视口）的宽度设置 ideal viewport（理想视口）的宽度。网页缩放比例为100%时，一个CSS像素就对应一个 dip（设备逻辑像素），而layout viewport（布局视口）的宽度，ideal viewport（理想视口）的宽度（通常说的分辨率），dip 的宽度值是相等的。&lt;/p&gt;
&lt;h5 id=&quot;initial-scale&quot;&gt;initial-scale&lt;/h5&gt;
&lt;p&gt;initial-scale用于指定页面的初始缩放比例：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;initial-scale=1 表示将layout viewport（布局视口）的宽度设置为 ideal viewport（理想视口）的宽度，&lt;/li&gt;
&lt;li&gt;initial-scale=1.5 表示将layout viewport（布局视口）的宽度设置为 ideal viewport（理想视口）的宽度的1.5倍。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因为分辨率和物理像素的关系，所以我们就需要通过js来确定页面的初始缩放比例，下面是控制初始缩放比例的代码。后面会进行解释&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var i = e.navigator.appVersion.match(/iphone/gi) ? e.devicePixelRatio :1, 
    a = 1 / i, &lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;然后我们谈谈rem&quot;&gt;然后我们谈谈rem&lt;/h4&gt;
&lt;p&gt;rem其实和em非常相似，在w3c中是这样描述rem的&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;font size of the root element.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它的用法和em差不多，区别是em是针对父元素的font-size做计算，而rem是相对与根元素做计算。我们在移动端使用rem作为所有大小的单位来解决适配的问题。&lt;/p&gt;
&lt;p&gt;我们设置根元素font-size的大小，应该是不同屏幕设置不一样的。比如一个740大的屏幕，我们会把它的font-size设为76px；而一个370大的屏幕，我们会把它的font-size设为34px，这要根据屏幕大小而言。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;所以，我们需要编写一个js文件来适应不同的屏幕&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是某个网站的移动适配js，这里通过这个文件做一些解释&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;!function(e) {
    function t() {
        e.rem = d.getBoundingClientRect().width / 16, d.style.fontSize = e.rem + &quot;px&quot;;
    }
    var n, 
        i = e.navigator.appVersion.match(/iphone/gi) ? e.devicePixelRatio :1, 
        a = 1 / i, 
        d = document.documentElement, 
        o = document.createElement(&quot;meta&quot;);
    if (e.dpr = i, 
        e.addEventListener(&quot;resize&quot;, function() {
        clearTimeout(n), n = setTimeout(t, 300);
    }, !1), 
        e.addEventListener(&quot;pageshow&quot;, function(e) {
        e.persisted &amp;amp;&amp;amp; (clearTimeout(n), n = setTimeout(t, 300));
    }, !1), 
        d.setAttribute(&quot;data-dpr&quot;, i), o.setAttribute(&quot;name&quot;, &quot;viewport&quot;), 
        o.setAttribute(&quot;content&quot;, &quot;initial-scale=&quot; + a + &quot;, maximum-scale=&quot; + a + &quot;, minimum-scale=&quot; + a + &quot;, user-scalable=no&quot;), d.firstElementChild) 
        d.firstElementChild.appendChild(o); 
    else {
        var m = document.createElement(&quot;div&quot;);
        m.appendChild(o), document.write(m.innerHTML);
    }
    t();
}(window), document.addEventListener(&quot;DOMContentLoaded&quot;, function() {
    var e = document.createElement(&quot;input&quot;);
    e.type = &quot;hidden&quot;, 
    e.value = '{&quot;platform&quot;: &quot;qq_qzone_weixin_weibo_copy&quot;,&quot;title&quot;:&quot;&quot;,&quot;desc&quot;: &quot;&quot;,&quot;image&quot;:&quot;&quot;,&quot;comment&quot;: &quot;&quot;, &quot;url&quot;:&quot;&quot;,&quot;callback&quot;:&quot;shareCallback()&quot;}', 
    e.id = &quot;app_share_conf&quot;, document.getElementsByTagName(&quot;body&quot;)[0].appendChild(e);
}, !1);
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;把视觉稿中的px转换成rem&quot;&gt;把视觉稿中的px转换成rem&lt;/h4&gt;
&lt;p&gt;我们在开发过程中拿到的设计稿都是以px作为单位的，那我们在进行移动端编程的时候该怎样对应rem大小呢?&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;e.rem = d.getBoundingClientRect().width / 16&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这段代码的意思是把屏幕分成16份，根元素的font-size就等于屏幕大小/分成份数。当然我们不一定要把屏幕分成16份，比如淘宝的Flexible.js将屏幕分成10份。&lt;/p&gt;
&lt;h4 id=&quot;缩放比例&quot;&gt;缩放比例&lt;/h4&gt;
&lt;p&gt;前面已经提到，针对不同的设备，屏幕分辨率和物理像素的倍速不同所以我们要通过获取设备来设置缩放比例。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var  i = e.navigator.appVersion.match(/iphone/gi) ? e.devicePixelRatio :1, 
     a = 1 / i,&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;关于移动适配的meta标签，我们是不用事先编写的，通过这个js文件，将自动创建meta标签。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Tue, 02 Jan 2018 14:00:00 +0000</pubDate>
<dc:creator>叫我小红依吧</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huyuzhu/p/8179524.html</dc:identifier>
</item>
<item>
<title>剖析大数据平台的数据存储 - 张逸</title>
<link>http://www.cnblogs.com/wayfarer/p/data-storage-for-big-data.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wayfarer/p/data-storage-for-big-data.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;我在一次社区活动中做过一次分享，演讲题目为《大数据平台架构技术选型与场景运用》。在演讲中，我主要分析了大数据平台架构的生态环境，并主要以数据源、数据采集、数据存储与数据处理四个方面展开分析与讲解，并结合具体的技术选型与需求场景，给出了我个人对大数据平台的理解。本文讲解数据存储部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数据作为一种资产，若少了存储，就成了无根之木，失去了后续挖掘的价值。在小数据时代，受存储容量与CPU处理能力限制，在现在看来相当小的数据，在当时其实也可以认为是“大数据”了。正如在蒸汽机时代，创造了时速126英里(203公里)纪录的Mallard蒸汽火车就可以被视为极速火车了。那么，为何在当时没人提出Big Data概念，得到业界关注并催生出一波数据浪潮呢？&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Big Data概念是1998年由SGI首席科学家John Masey在USENIX大会上提出的。他当时发表了一篇名为Big Data and the Next Wave of Infrastress的论文，使用了Big Data来描述数据爆炸的现象。但大数据真正得到业界关注，则是其后多年的事情了。其中大数据最重要的发酵素则是2003-2006年Google发布的GFS、MapReduce和BigTable三篇论文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在我看来，小数据时代的数据量虽然在逐年增加，但是当时突破存储容量的解决办法依旧是垂直伸缩，即通过寻求更大容量的存储介质来解决这个问题。由于互联网业务不够流行，Web 2.0还未开始（更谈不上移动应用与物联网），当时IT系统要处理的数据结构相当单一，都是相对规整的关系型数据（结构数据）。因而在小数据时代，存储世界是关系数据库一统天下的时代。&lt;/p&gt;
&lt;p&gt;当存储技术的发展变得步履蹒跚，赶不上数据发展的速度时，分布式存储成为了必然选择，非结构型数据也对存储格式提出了新的要求。层出不穷的数据源也使得数据量产生了井喷似的迅猛增长。&lt;/p&gt;
&lt;p&gt;此时，分布式存储与NoSQL的诞生回应了这样的需求，解决了大数据存储的根本难题。&lt;/p&gt;
&lt;p&gt;数据存储工具如百花盛开，一时仿佛来到了数据存储的盛世。然而，乱花渐欲迷人眼，我们反而不知道该怎么选择合适的数据存储技术了。正如设计需要结合业务场景，对数据存储的技术决策同样需要结合具体的场景。决定的因素包括：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数据源的类型与数据的采集方式&lt;/li&gt;
&lt;li&gt;采集后数据的格式与规模&lt;/li&gt;
&lt;li&gt;分析数据的应用场景&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果数据的采集是针对业务历史数据的同步与备份，那么HDFS可能就是最好的存储选择；如果数据的格式为文档型结构，那么诸如MongoDB之类的文档型数据库就可能是我们首要考虑的目标；如果存储的数据是要应对全文本搜索的应用场景，那么ElasticSearch可能才是我们的心头所爱。&lt;/p&gt;
&lt;p&gt;倘若存在某种业务场景，使得这几种决定因素互相冲突，例如既需要分布式的文档数据库，又需要支持高性能的统计分析，该怎么应对呢？这就引出了大数据平台数据存储的一个重要特征：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;相同的业务数据会以多种不同的表现形式，存储在不同类型的数据库中，形成polyglot-db这种产生数据冗余的生态环境。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;没有哪一款存储工具擅长应对所有的数据处理场景。&lt;/p&gt;
&lt;p&gt;在对数据存储进行技术决策时，我们需要充分了解各种存储工具的优缺点，然后结合业务场景对其进行选择。就像足球教练那样，要对各个球员的技术特点了如指掌，才能将他们安排在合适的位置上。&lt;/p&gt;
&lt;p&gt;在大数据存储领域，HDFS或许就是我们最放心的守门员，全量的历史数据都可以交给他。你几乎不用害怕他会“丢球”，而他守门的技巧是可以横向扩展的，再多再猛烈的射门他都能挡得住。&lt;/p&gt;
&lt;p&gt;PostgreSQL是保守型的后场选手，他技术全面，在保持数据一致性方面他能做到近乎完美的万无一失。性格稳重，以符合大多数教练对后防需求的思维方式来踢球。&lt;/p&gt;
&lt;p&gt;HBase属于后腰型选手，既能在防守上给PostgreSQL以协助，又不时通过列式存储的技术特点传出让人拍案叫绝的好球。&lt;/p&gt;
&lt;p&gt;Redis是中场提速器，他不仅能够加快球队的传球效率为球队提速，而且还以极高的传球命中率著称，偶尔传出的致命一击更能帮助球队攻城拔寨。Redis还是最好的团队成员，可以与各种类型的球员打出漂亮配合，他还不抢风头，只在自己最擅长的领域默默地展现自己的才华。&lt;/p&gt;
&lt;p&gt;ElasticSearch或许可以称得上是“中场大师”，因为他能为各种类型的前锋提供传球支持，并能保证球权处理的高效性。他的各种盘球技法（支持各式各样的查询）让人眼花缭乱。兴之所至时，他的盘带与传球真如水银泻地一般，No look pass的传球总是出人意料的精彩。&lt;/p&gt;
&lt;p&gt;诸如Parquet、Neo4j、Pilosa之类的数据库都可以称得上是剑走偏锋的前锋球员.他们不善于应对阵地战靠着稳扎稳打通过硬实力硬吃对手，而是像刺客一般伺机而动，对手稍有不慎，迎接他的就是一剑封喉的绝杀。&lt;/p&gt;
&lt;p&gt;对于polyglot-db这种解决方案，我们还需要细心处理好数据一致性问题，即当数据源的数据发生变化时，我们如何将这些数据变化反应到各种存储工具中。如果数据是以immutable形式存储，满足数据的一致就变得容易多了。因此在polyglot-db的场景下，我们倾向于数据保持不变。如果业务场景确实不支持，同步就会变得更复杂。在前面讲解数据采集时，我已经给出了不够完美的解决方案，庶几能解决数据同步问题。&lt;/p&gt;
&lt;p&gt;数据存储就是数据平台工程师手中的工具百宝箱，你需要熟悉各种工具的利弊，他们擅长处理的场景，然后再将好钢用在刀刃上，以求最大性的发挥工具的潜力。记住，在大数据平台中，&lt;strong&gt;不是数据驱动而是业务场景驱动你对数据存储的技术决策&lt;/strong&gt;。&lt;/p&gt;
</description>
<pubDate>Tue, 02 Jan 2018 13:42:00 +0000</pubDate>
<dc:creator>张逸</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wayfarer/p/data-storage-for-big-data.html</dc:identifier>
</item>
<item>
<title>Spring之DAO一 - 社会主义接班人</title>
<link>http://www.cnblogs.com/5ishare/p/8179110.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/5ishare/p/8179110.html</guid>
<description>&lt;p&gt;前面博客把bean、aop简单了解了一下，今天主要是了解Spring中DAO层，如果使用传统的JDBC时需要创建连接、打开、执行sql、关闭连接这一系列的步骤，Spring框架对JDBC进行了封装，我们只需使用封装好的JdbcTemplate执行sql语句。主要还是继承了Spring提供的JdbcDaoSupport。下面主要是用来演示怎么使用JdbcDaoSupport。&lt;/p&gt;
&lt;p&gt;一、创建Model&lt;/p&gt;
&lt;p&gt;这里创建一个User类，作为model。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_038e2788-713c-407f-9aea-9abfd20423a0&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_038e2788-713c-407f-9aea-9abfd20423a0&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_038e2788-713c-407f-9aea-9abfd20423a0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Model;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; userId;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getUserId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userId;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setUserId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; userId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.userId =&lt;span&gt; userId;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; money;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; getMoney() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; money;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setMoney(&lt;span&gt;float&lt;/span&gt;&lt;span&gt; money) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.money =&lt;span&gt; money;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;二、创建DAO接口并实现接口&lt;/p&gt;
&lt;p&gt;1.这里创建IUserDAO接口，声明了两个方法，一个是获取所有的User，一个是新增User。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_86f98932-a58c-4edb-a4df-575d4a634e62&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_86f98932-a58c-4edb-a4df-575d4a634e62&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_86f98932-a58c-4edb-a4df-575d4a634e62&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.IDao;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Model.User;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IUserDAO {
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt;QueryAllUser();
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Boolean AddUser(String name,&lt;span&gt;float&lt;/span&gt;&lt;span&gt; money);
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;2.这里实现接口IUserDAO,并且继承JdbcDaoSupport。在下面的代码中能找到getJdbcTemplate()，其实我们右键选择Open declaration 时可以定位到抽象类JdbcDaoSupport，JdbcDaoSupport里面有一个JdbcTemplate属性，而且还有get或set JDBC DataSource，然后选中JdbcTemplate，再Open declaration,发现JdbcTemplate的构造函数需要DataSource，JdbcDaoSupport提供JdbcTemplate对象，并维护着JdbcTemplate对象需要的DataSource。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_755a1ac7-ce74-4720-82ae-7cbf76aa00c1&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_755a1ac7-ce74-4720-82ae-7cbf76aa00c1&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_755a1ac7-ce74-4720-82ae-7cbf76aa00c1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Dao;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.jdbc.core.support.JdbcDaoSupport;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.IDao.IUserDAO;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Model.User;


&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserDAO &lt;span&gt;extends&lt;/span&gt; JdbcDaoSupport &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IUserDAO {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt; QueryAllUser() {
        
        String sql&lt;/span&gt;=&quot;select id,name,money from tb_user&quot;&lt;span&gt;;
        List&lt;/span&gt;&amp;lt;Map&amp;lt;String,Object&amp;gt;&amp;gt; list=&lt;span&gt;getJdbcTemplate().queryForList(sql);
        List&lt;/span&gt;&amp;lt;User&amp;gt; userList=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;User&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(Map&amp;lt;String,Object&amp;gt;&lt;span&gt; row:list)
        {
            User user&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
            user.setUserId((Integer)row.get(&lt;/span&gt;&quot;id&quot;&lt;span&gt;));
            user.setName((String)row.get(&lt;/span&gt;&quot;name&quot;&lt;span&gt;));
            user.setMoney((Float)row.get(&lt;/span&gt;&quot;money&quot;&lt;span&gt;));
            userList.add(user);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userList;
        
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Boolean AddUser(String name,&lt;span&gt;float&lt;/span&gt;&lt;span&gt; money) {
        String sql&lt;/span&gt;=&quot;insert into tb_user (name,money) values (?,?)&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; row=getJdbcTemplate().update(sql, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object[]{name,money});
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(row&amp;gt;0&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_bce60634-4aa1-4411-9534-ffad313d5e70&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bce60634-4aa1-4411-9534-ffad313d5e70&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bce60634-4aa1-4411-9534-ffad313d5e70&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; JdbcTemplate(DataSource dataSource) {
        setDataSource(dataSource);
        afterPropertiesSet();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;3.上下文配置&lt;/p&gt;
&lt;p&gt;上面DataSource从哪里来呢?就需要在上下文中配置。首先配置DataSource，然后由于UserDAO继承了抽象类JdbcDaoSupport，所以也需要设置属性dataSource&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_19c43202-3a6d-4d59-9d22-f8d8beb9274f&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_19c43202-3a6d-4d59-9d22-f8d8beb9274f&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_19c43202-3a6d-4d59-9d22-f8d8beb9274f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;span&gt;
xmlns:context&lt;/span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;span&gt;
xmlns:mvc&lt;/span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;span&gt;
xmlns:xsi&lt;/span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
xmlns:aop&lt;/span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;span&gt;
xsi:schemaLocation&lt;/span&gt;=&lt;span&gt;&quot;
&lt;/span&gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/beans&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/beans/spring-beans.xsd&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context/spring-context.xsd&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/mvc&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/mvc/spring-mvc.xsd&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/aop&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/aop/spring-aop.xsd&lt;/span&gt;
&quot;&amp;gt;
&amp;lt;bean id=&quot;dataSource&quot; &lt;span&gt;class&lt;/span&gt;=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&amp;gt;
  &amp;lt;property name=&quot;driverClassName&quot;&amp;gt; 
          &amp;lt;value&amp;gt;com.mysql.jdbc.Driver&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property name=&quot;url&quot;&amp;gt;
          &amp;lt;value&amp;gt;jdbc:mysql:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:3306/spring&amp;lt;/value&amp;gt;&lt;/span&gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property name=&quot;username&quot;&amp;gt;
          &amp;lt;value&amp;gt;root&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property name=&quot;password&quot;&amp;gt;
      &amp;lt;value&amp;gt;123456&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt; 
&amp;lt;/bean&amp;gt; 
&amp;lt;bean id=&quot;userDao&quot; &lt;span&gt;class&lt;/span&gt;=&quot;Cuiyw.Spring.Dao.UserDAO&quot; depends-on=&quot;dataSource&quot;&amp;gt;
    &amp;lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;4.Mysql新增数据库和表&lt;/p&gt;
&lt;p&gt;上面2中UserDAO执行了两个sql，涉及到表tb_user，字段id、name、money。在3上下文配置mysql时指定了数据库名spring。所以按照上面的创建。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733213/201801/733213-20180102211456518-1023663471.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5.实验&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_2de3fd7f-545d-4ef0-a68f-a500019bbb1b&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2de3fd7f-545d-4ef0-a68f-a500019bbb1b&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2de3fd7f-545d-4ef0-a68f-a500019bbb1b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
        ApplicationContext context=&lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&lt;span&gt;new&lt;/span&gt; String[]{&quot;ApplicationContext.xml&quot;&lt;span&gt;});
        BeanFactory factory&lt;/span&gt;=&lt;span&gt;context;
        IUserDAO userDao&lt;/span&gt;=(IUserDAO)factory.getBean(&quot;userDao&quot;&lt;span&gt;);
        userDao.AddUser(&lt;/span&gt;&quot;cuiywA&quot;,888&lt;span&gt;);
    
        userDao.AddUser(&lt;/span&gt;&quot;cuiywB&quot;,666&lt;span&gt;);
        List&lt;/span&gt;&amp;lt;User&amp;gt; list=&lt;span&gt;userDao.QueryAllUser(); 
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(User u:list)
        {
            System.out.println(&lt;/span&gt;&quot;name:&quot;+u.getName()+&quot; money: &quot;+&lt;span&gt;u.getMoney());
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733213/201801/733213-20180102211731924-1305263402.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6.错误&lt;/p&gt;
&lt;p&gt;在实现上面的步骤时报了好几个错误，有因为我疏忽的，还有数据类型和数据库不一直的，最重要的两个我这里也记录了下来。&lt;/p&gt;
&lt;p&gt;1.下面的错误是由于缺少commons-dbcp.jar、commons-pool.jar导致的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Cannot find &lt;span&gt;class&lt;/span&gt; [org.apache.commons.dbcp.BasicDataSource] &lt;span&gt;for&lt;/span&gt; bean with name 'dataSource' defined in &lt;span&gt;class&lt;/span&gt; path resource [ApplicationContext.xml]; nested exception is java.lang.ClassNotFoundException: org.apache.commons.dbcp.BasicDataSource
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.还有就是我在UserDAO中继承了JdbcDaoSupport，但就是没自动提示要引入的包，这个第一次没经验，百度了才指定需要引入spring-jdbc.jar.&lt;/p&gt;
&lt;p&gt;3.忘记引入mysql驱动&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Failed to obtain JDBC Connection; nested exception is org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver &lt;span&gt;class&lt;/span&gt; 'com.mysql.jdbc.Driver'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的错误都是没有引入jar包，这里把pom.xml也放进来，留着以后好用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2a7589ae-107f-48b0-bdd8-c877de55c5c7&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2a7589ae-107f-48b0-bdd8-c877de55c5c7&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2a7589ae-107f-48b0-bdd8-c877de55c5c7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
  xsi:schemaLocation&lt;/span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

  &amp;lt;groupId&amp;gt;Cuiyw&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;SpringAop&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
  &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;

  &amp;lt;name&amp;gt;SpringAop&amp;lt;/name&amp;gt;
  &amp;lt;url&amp;gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;maven.apache.org&amp;lt;/url&amp;gt;&lt;/span&gt;

  &amp;lt;properties&amp;gt;
    &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
      &amp;lt;spring.version&amp;gt;5.0.0.RELEASE&amp;lt;/spring.version&amp;gt;
  &amp;lt;/properties&amp;gt;

  &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
       
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;commons-dbcp&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;commons-dbcp&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.4&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;commons-pool&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;commons-pool&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.6&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!-- https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mvnrepository.com/artifact/mysql/mysql-connector-java --&amp;gt;&lt;/span&gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;5.1.6&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;
          &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
            &amp;lt;!-- https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mvnrepository.com/artifact/aspectj/aspectjweaver --&amp;gt;&lt;/span&gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;aspectj&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;aspectjweaver&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.5.4&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
            &amp;lt;!-- https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mvnrepository.com/artifact/aspectj/aspectjrt --&amp;gt;&lt;/span&gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;aspectj&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;aspectjrt&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.5.4&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    
  &amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 02 Jan 2018 13:30:00 +0000</pubDate>
<dc:creator>社会主义接班人</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/5ishare/p/8179110.html</dc:identifier>
</item>
<item>
<title>自己动手写把”锁”之---JMM和volatile - metoy</title>
<link>http://www.cnblogs.com/qingquanzi/p/8179042.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qingquanzi/p/8179042.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、JAVA内存模型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;关于Java内存模型的文章，网上真的数不胜数。在这里我就不打算说的很详细、很严谨了。只力求大家能更好的理解和运用，为后边的技术点做铺垫。&lt;/p&gt;

&lt;p&gt;内存模型并不是Java独有的概念，而是我们的计算机硬件平台的一个概念。内存模型描述了程序中变量如何在从内存读出、以及何时写会内存的底层细节。&lt;/p&gt;

&lt;p&gt;我们知道，程序运行其实就是CPU和内存的频繁交互的过程。随着CPU的快速发展，CPU的执行速度越来越快，但是内存却很难跟上CPU的执行速度，为了解决这一矛盾，CPU厂商就为每颗CPU加了高速缓存，用来缓解这个速度不匹配的问题。因此，CPU和内存的交互变成了这个样子：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1287675/201801/1287675-20180102203025549-344338965.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/85B805F85A0A44788B2FBE67E0C5B555&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;以上只是在CPU和内存之间加了个高速缓存，其实也还没什么问题。那内存模型这个概念是怎么产生的呢？继续往下看。&lt;/p&gt;

&lt;p&gt;CPU虽然在不停的发展，但单个CPU的主频速度不可能无限制的增长，为了进一步提高计算性能就引入了多核技术。由于每个cpu都有自己的高速缓存，当多个CPU操作同一个内存数据时，就产生了缓存不一致的问题。如下图：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1287675/201801/1287675-20180102203122831-1096995048.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/178CB4466AD1464F84EC0248387620A5&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;为了解决这个不一致的问题，就需要处理器在运行时要遵循某些协议，这类协议包括MSI、MESI、MOSI等等。到这里就有了内存模型这个概念，它就是用来描述数据在各个高级缓存以及内存之间的交互细节。不同的硬件处理器架构，就会有不同的内存模型。所以用c/c++开发多线程程序时，就需要考虑不同操作平台下的内存模型。&lt;/p&gt;

&lt;p&gt;所幸我们是学Java的，Java平台为了屏蔽不同硬件平台的不同内存模型给开发人员带来的成本，引入了Java内存模型，即JAVA Memory Model，简称JMM。&lt;/p&gt;

&lt;p&gt;要想深入掌握JAVA多线程并发编程，Java内存模型是必须要了解的。Java内存模型定义了多线程之间共享变量的可见性以及如何在需要的时候对共享变量进行同步。直白点说就是：同一个变量，被多个cpu上执行的多个线程访问，每个cpu的高速缓存都缓存了这个变量，当某个线程修改了高速缓存里的变量，何时通知给其他的cpu线程让它可见，以及何时将变量同步回内存(主存)。如下图：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1287675/201801/1287675-20180102203227346-819183598.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/509DFDAD2F1944479953709CBE56BDB4&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Java虚拟机的内存模型和计算机硬件的内存模型基本一致。在Java内存模型中，分为线程私有的本地内存和线程共享的主内存，线程在读写变量时会把主内存里的变量缓存到本地内存，换句话说，本地内存存放了主内存中变量的副本。主内存和本地内存其实是一种逻辑上的划分，并不是实际的物理内存。&lt;/p&gt;

&lt;p&gt;这里需要强调一下，这里的变量指的是分配到堆上的变量，即线程之间可以共享的变量。本地变量是线程私有的，所以不会有可见性问题。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、volatile&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Java内存模型中说到了线程间共享变量的可见性问题。可见性问题其实就是缓存不一致的问题。如下图：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1287675/201801/1287675-20180102203303815-2125562857.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/16F2F9275DDC4276AC779C5EBF042598&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;线程B读取变量X，并缓存到了自己的本地内存中，线程A也将变量X缓存到本地内存中并修改为2，这时线程B并不知道变量X修改为2。这就是线程间不可见的问题。为了解决这个问题，就引入了volatile关键字，被volatile修饰的变量将不会在本地内存缓存，线程直接通过主内存来读写变量。虽然解决了不可见的问题，但也是以牺牲性能为代价的。&lt;/p&gt;

&lt;p&gt;volatile关键字相信你已经理解了，但是在Java中volatile并不仅仅是这个功能。在这里我通过与c语言中的volatile对比扩展下。&lt;/p&gt;
&lt;p&gt;有的时候我们可能会面临这么个场景，线程1执行某些业务逻辑，线程2判断线程1是否执行完，执行完了则线程2执行另一个逻辑，如下伪代码：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1287675/201801/1287675-20180102203337862-1369204950.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/F6CD4C8E225B438D877EA9877128348B&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;我们通过一个flag变量来标识线程1是否执行完相关逻辑，为了保证flag的改变对线程2可见，这里使用了volatile关键字修饰。如果这个伪代码采用Java实现，这是没问题的，如果c实现，则就会有坑。&lt;/p&gt;
&lt;p&gt;这个坑主要是源于指令重排。为了提高执行效率减少内存的交互，编译器会根据情况对执行的指令做一个重排序。所以线程1中执行相关业务逻辑后，再将flag设置为true的逻辑，极有可能重排为：先设置flag=true然后再执行相关业务逻辑。这也是c语言为啥不提倡使用volatile的原因。&lt;/p&gt;

&lt;p&gt;但是为什么在Java中就不会有这个坑呢，难道Java没有指令重排序吗？&lt;/p&gt;
&lt;p&gt;当然不是，Java也会有重排序，不过Java对volatile做了如下的极大增强：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;所有对volatile变量的写操作之前的针对其他变量的读写操作，经过编译器、cpu优化后，都不会被重排到对voltile变量的写操作之后。&lt;/li&gt;
&lt;li&gt;所有对volatile变量的读操作之后的针对其他变量的读写操作，经过编译器、cpu优化后，都不会被重排到对voltile变量的读操作之前。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面试中，有面试官比较喜欢问这么一个问题：能否用volatile修饰的整数变量n，通过n++操作实现计数的功能？这个问题就是考查应试者对volatile的理解。我这里简单地说一下。&lt;/p&gt;
&lt;p&gt;答案肯定是不能。volatile实现的是线程间共享变量的可见性，并不是原子性操作。++操作其实可以拆分为这么几个步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;读取主内存里的变量&lt;/li&gt;
&lt;li&gt;cpu完成变量的++,然后写会主内存。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;所以可以想象这么一个执行顺序：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;线程A读取volatile变量X=0&lt;/li&gt;
&lt;li&gt;线程B读取volatile变量X=0&lt;/li&gt;
&lt;li&gt;线程A完成++操作，然后将X=1写回主存。&lt;/li&gt;
&lt;li&gt;线程B也完成++操作将X=1写回主存。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在这么一个执行顺序下，对X进行了++两次，但值却只增加了1。&lt;/p&gt;


&lt;p&gt;关于如何实现原子性操作，我将在下一节进行讨论。&lt;/p&gt;



</description>
<pubDate>Tue, 02 Jan 2018 12:35:00 +0000</pubDate>
<dc:creator>metoy</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qingquanzi/p/8179042.html</dc:identifier>
</item>
</channel>
</rss>