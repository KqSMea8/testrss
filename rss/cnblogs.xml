<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Spring IOC容器启动流程源码解析(一)——容器概念详解及源码初探 - takumiCX</title>
<link>http://www.cnblogs.com/takumicx/p/9757492.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/takumicx/p/9757492.html</guid>
<description>&lt;p class=&quot;toc&quot;&gt;目录&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;1. 前言&lt;/h2&gt;
&lt;h3 id=&quot;ioc容器到底是什么&quot;&gt;1.1 IOC容器到底是什么&lt;/h3&gt;
&lt;p&gt;IOC和AOP是Spring框架的核心功能,而IOC又是AOP实现的基础,因而可以说IOC是整个Spring框架的基石。那么什么是IOC？IOC即控制反转,通俗的说就是让Spring框架来帮助我们完成对象的依赖管理和生命周期控制等等工作。从面向对象的角度来说,具有这种行为,完成这种工作的主体就可以形象的称之为IOC容器。从代码角度来看,IOC容器不过是Spring中定义的具有IOC基本功能的一些类的统称,这些类都遵循一些共同的接口规范,所以我们可以说实现某些接口的具体的实现类就是IOC容器。而IOC容器的启动流程,说白了就是创建并初始化一个该实现类的实例的过程,在这个过程中要进行诸如配置文件的加载解析,核心组件的注册,bean 实例的创建等一系列繁琐复杂的操作,因而整个过程显得相对漫长,逻辑也相对复杂。&lt;/p&gt;
&lt;h3 id=&quot;beanfactory和applicationcontext的联系以及区别&quot;&gt;1.2 BeanFactory和ApplicationContext的联系以及区别&lt;/h3&gt;
&lt;p&gt;前面说到Spring中为容器类定义了一些接口规范,如下图所示&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1422237/201810/1422237-20181008215817959-1853766918.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;具体而言,Spring中的容器类可以分为两大类。&lt;/p&gt;
&lt;ul readability=&quot;8&quot;&gt;&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;一类是由BeanFactory接口定义的核心容器。BeanFactory位于整个容器类体系结构的顶端,其基本实现类为DefaultListableBeanFactory。之所以称其为核心容器,是因为该类容器实现IOC的核心功能:比如配置文件的加载解析,Bean依赖的注入以及生命周期的管理等。BeanFactory作为Spring框架的基础设施,面向Spring框架本身,一般不会被用户直接使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;另一类则是由ApplicationContext接口定义的容器,通常译为应用上下文,不过称其为应用容器可能更形象些。它在BeanFactory提供的核心IOC功能之上作了扩展。通常ApplicationContext的实现类内部都持有一个BeanFactory的实例,IOC容器的核心功能会交由它去完成。而ApplicationContext本身,则专注于在应用层对BeanFactory作扩展,比如提供对国际化的支持,支持框架级的事件监听机制以及增加了很多对应用环境的适配等。ApplicationContext面向的是使用Spring框架的开发者。开发中经常使用的ClassPathXmlApplicationContext就是典型的Spring的应用容器,也是要进行解读的IOC容器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;解读ioc容器启动流程的意义&quot;&gt;1.3 解读IOC容器启动流程的意义&lt;/h3&gt;
&lt;ul readability=&quot;8.5&quot;&gt;&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;1.IOC模块是整个Spring框架的核心,是实现其他模块的基础。IOC容器在启动时会注册并初始化Spring框架的所有基础组件,这些组件不仅在IOC模块中被用到,也会被AOP等模块使用。因而熟悉IOC容器的启动流程不仅是掌握IOC模块的关键,也是理解整个Spring框架的前提。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;2.Spring是个很灵活的框架,允许用户在原有功能上进行扩展或者进行满足业务需求的个性化设置,比如对容器和Bean的生命周期过程进行增强,进行事件监听等等。要更好的使用Spring的这些特性,必须了解其工作原理,而答案就在IOC容器的启动过程中。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;3.Spring框架在实现时使用了大量的设计模式,体现了很多优秀的设计思想。其IOC容器的启动源码就是供开发者学习这种设计经验的绝佳样板。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;长求总:为了更好的理解和使用Spring框架并从它优秀的设计和实现经验中进行学习。&lt;/p&gt;
&lt;h3 id=&quot;如何有效的阅读源码&quot;&gt;1.4 如何有效的阅读源码&lt;/h3&gt;
&lt;p&gt;Spring框架经过多年的发展,随着功能特性的增加,其实现也越来越复杂和抽象,要彻底弄清楚框架实现的每一个细节并不是一件简单的事。因而,对于Spring源码的解读,不必死抠每个方法和实现细节,这样太浪费时间,毕竟对于绝大分开发者而言,阅读Spring源码并不是为了成为Spring框架的开发者,而是为了更好的理解和使用Spring框架,或者从更高的角度,学习Spring的设计经验和思想,并将其运用到自己的项目实践中。&lt;br/&gt;由于Spring容器的启动流程十分冗长,内容实在太多,全部放在一篇进行讲解实在太臃肿,也十分影响阅读体验。因而采取化整为零的策略,将整个IOC容器的启动流程划分为若干个阶段,每篇只对其中一个阶段进行详细讲解,因而对于容器启动源码的解读,主要抓住以下两个要点：&lt;/p&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;1.对容器启动流程的梳理&lt;br/&gt;容器启动流程分为哪几个阶段,在每个阶段容器做了哪些工作,初始化了哪些组件,执行了哪些用户自定义的回调函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;2.对设计模式和设计思想的学习&lt;br/&gt;在实现这个功能时采用了哪些设计模式,遵循了哪些设计思想,这么做有哪些好处。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;初探ioc容器启动源码&quot;&gt;2. 初探IOC容器启动源码&lt;/h2&gt;
&lt;p&gt;本次源码阅读的Spring版本为4.3.10.RELEASE。&lt;/p&gt;
&lt;p&gt;启动Spring容器,本质上是创建并初始化一个具体的容器类的过程,以常见的容器类ClassPathXmlApplicationContext为例,启动一个Spring容器可以用以下代码表示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;尽管只有短短的一行代码,但已经创建并启动了一个Spring的IOC容器。为了后面更好的理解,先来看下ClassPathXmlApplicationContext的类继承结构&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1422237/201810/1422237-20181008215837775-355870697.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关键的几个类已经用红色箭头标注了出来。&lt;/p&gt;
&lt;ul readability=&quot;6&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;AbstractApplicationContext&lt;br/&gt;ApplicationContext接口的抽象实现类,能够自动检测并注册各种后置处理器(PostProcessor)和事件监听器(Listener),以模板方法模式定义了一些容器的通用方法,比如启动容器的真正方法refresh()就是在该类中定义的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;AbstractRefreshableApplicationContext&lt;br/&gt;继承AbstractApplicationContext的抽象类。内部持有一个DefaultListableBeanFactory 的实例,使得继承AbstractRefreshableApplicationContext的Spring的应用容器内部默认有一个Spring的核心容器,那么Spring容器的一些核心功能就可以委托给内部的核心容器去完成。AbstractRefreshableApplicationContext在内部定义了创建,销毁以及刷新核心容器BeanFactory的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;ClassPathXmlApplicationContext&lt;br/&gt;最常用的Spring的应用容器之一。在启动时会加载类路径下的xml文件作为容器的配置信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面就正式开始容器启动流程的源码阅读&lt;br/&gt;进入ClassPathXmlApplicationContext的构造方法,首先调用了重载构造函数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * Create a new ClassPathXmlApplicationContext, loading the definitions
 * from the given XML file and automatically refreshing the context.
 * @param configLocation resource location
 * @throws BeansException if context creation failed
 */
public ClassPathXmlApplicationContext(String configLocation) throws BeansException {
   this(new String[] {configLocation}, true, null);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里有两点需要注意下:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1.创建ClassPathXmlApplicationContext时需要指定xml文件的路径作为参数,尽管我们在创建时只指定了一个,但其实可以同时指定多个。&lt;/li&gt;
&lt;li&gt;2.Spring容器有父子容器的概念,通过HierarchicalBeanFactory接口定义了具有层级关系的容器体系。而在抽象实现类AbstractApplicationContext类的内部,有一个表示父容器的成员变量&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;/** Parent context */
private ApplicationContext parent;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重载函数的第三个参数即表示要创建的ClassPathXmlApplicationContext的父容器,不过这里只需要设置为null。关于Spring的父子容器,还有一些独特的访问规则,子容器可以访问父容器中的Bean,父容器不可以访问子容器中的Bean。不知道这个规则在使用Spring做web开发时可能会碰到一些匪夷所思的问题。&lt;/p&gt;
&lt;p&gt;继续跟进源码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//设置父容器
super(parent);
//设置xml文件的路径参数
setConfigLocations(configLocations);
if (refresh) { //默认为true
    //启动Spring容器
    refresh();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;设置完父容器和xml文件的路径信息后,终于看到了refresh()方法,正如前面提到的,这是真正启动Spring容器的方法,想要知道Spring IOC容器的启动流程,就要知道该方法内部都做了什么。&lt;/p&gt;
&lt;h3 id=&quot;启动容器的真正入口refresh&quot;&gt;2.1 启动容器的真正入口refresh()&lt;/h3&gt;
&lt;p&gt;refresh()是定义在AbstractApplicationContext类中的模板方法,定义了容器启动的基本流程,并留下钩子方法供子类进行扩展。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Override
public void refresh() throws BeansException, IllegalStateException {
   synchronized (this.startupShutdownMonitor) {
      // Prepare this context for refreshing.
      prepareRefresh();

      // Tell the subclass to refresh the internal bean factory.
      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

      // Prepare the bean factory for use in this context.
      prepareBeanFactory(beanFactory);

      try {
         // Allows post-processing of the bean factory in context subclasses.
         postProcessBeanFactory(beanFactory);

         // Invoke factory processors registered as beans in the context.
         invokeBeanFactoryPostProcessors(beanFactory);

         // Register bean processors that intercept bean creation.
         registerBeanPostProcessors(beanFactory);

         // Initialize message source for this context.
         initMessageSource();

         // Initialize event multicaster for this context.
         initApplicationEventMulticaster();

         // Initialize other special beans in specific context subclasses.
         onRefresh();

         // Check for listener beans and register them.
         registerListeners();

         // Instantiate all remaining (non-lazy-init) singletons.
         finishBeanFactoryInitialization(beanFactory);

         // Last step: publish corresponding event.
         finishRefresh();
      }

      catch (BeansException ex) {
         if (logger.isWarnEnabled()) {
            logger.warn(&quot;Exception encountered during context initialization - &quot; +
                  &quot;cancelling refresh attempt: &quot; + ex);
         }

         // Destroy already created singletons to avoid dangling resources.
         destroyBeans();

         // Reset 'active' flag.
         cancelRefresh(ex);

         // Propagate exception to caller.
         throw ex;
      }

      finally {
         // Reset common introspection caches in Spring's core, since we
         // might not ever need metadata for singleton beans anymore...
         resetCommonCaches();
      }
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动容器的方法之所以用refresh(刷新)来命名,是为了形象的表达容器可以被重启这层含义。为了防止并发环境下多个线程同时启动IOC容器,整个过程使用同步代码块来进行同步。容器的启动从方法内容上来看并不复杂,流程也十分清晰,从方法名上大概就可以猜到每一步做了什么。&lt;/p&gt;
&lt;h3 id=&quot;容器启动流程的不同阶段&quot;&gt;2.2 容器启动流程的不同阶段&lt;/h3&gt;
&lt;p&gt;为了更好的进行讲解,可以将容器启动的整个流程划分为以下五个阶段&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1422237/201810/1422237-20181009142607492-65989011.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;容器启动前的准备工作&quot;&gt;3 容器启动前的准备工作&lt;/h2&gt;
&lt;p&gt;容器启动前的准备工作定义在下面的方法中&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;prepareRefresh();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;进去一探究竟&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * Prepare this context for refreshing, setting its startup date and
 * active flag as well as performing any initialization of property sources.
 */
protected void prepareRefresh() {
    //记录容器的启动时间
    this.startupDate = System.currentTimeMillis();
    //将容器的关闭标志置位false
    this.closed.set(false);
    //将容器的启动标记置位true
    this.active.set(true);

    if (logger.isInfoEnabled()) {
        logger.info(&quot;Refreshing &quot; + this);
    }

    // Initialize any placeholder property sources in the context environment
    //空实现的钩子方法,供子类重写
    initPropertySources();

    // Validate that all properties marked as required are resolvable
    // see ConfigurablePropertyResolver#setRequiredProperties
    //对必须的系统环境变量进行校验,如果不存在将抛出异常
    getEnvironment().validateRequiredProperties();

    // Allow for the collection of early ApplicationEvents,
    // to be published once the multicaster is available...
    this.earlyApplicationEvents = new LinkedHashSet&amp;lt;ApplicationEvent&amp;gt;();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;首先记录了容器的启动时间和对容器的状态进行了标记。之后来到了容器为用户提供的第一个扩展点:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;initPropertySources();&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;protected void initPropertySources() {
   // For subclasses: do nothing by default.
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是一个默认空实现的钩子方法,用户在自定义IOC容器时可以重写,完成一些环境变量属性的初始化工作。&lt;br/&gt;之后会对一些必要的环境变量信息进行校验&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;getEnvironment().validateRequiredProperties();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果必须的环境变量信息不存在,则会抛出异常&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Override
public void validateRequiredProperties() {
   MissingRequiredPropertiesException ex = new MissingRequiredPropertiesException(); //异常信息集合
   for (String key : this.requiredProperties) {
      if (this.getProperty(key) == null) {
         ex.addMissingRequiredProperty(key); //加入异常信息
      }
   }
   if (!ex.getMissingRequiredProperties().isEmpty()) {
      throw ex;  //抛出异常信息集合
   }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结合前面的钩子initPropertySources(),用户在自定义IOC容器时可以完成一些个性化需求,比如要求容器在启动时必须从环境变量中加载某属性值,若该属性值不存在则启动失败。重写initPropertySources()如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Override
protected void initPropertySources() {
    getEnvironment().setRequiredProperties(&quot;XXXX&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;若环境变量不存在则会抛出以下异常&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1422237/201810/1422237-20181008220021522-1384464423.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;总结下容器启动前的准备工作:主要是对容器状态进行标记,初始化环境变量信息并对必要的环境变量进行校验。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;4. 总结&lt;/h2&gt;
&lt;p&gt;这篇文章的主要内容&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1.讲解IOC容器的概念和类结构&lt;/li&gt;
&lt;li&gt;2.找到容器启动流程的真正入口refresh()方法,将容器启动流程划分为了5个阶段:启动前的准备阶段,初始化核心容器阶段,初始化基础组件阶段,创建单实例bean阶段以及容器启动的收尾阶段&lt;/li&gt;
&lt;li&gt;3.对容器启动前的准备阶段进行了源码解读&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;可以看到容器启动源码中对模板方法模式的合理运用。容器启动的流程以模板方法模式定义在了抽象容器类AbstractApplicationContext中,并留下了钩子函数供子类重写。用户实现自定义容器时,可以通过继承并重写钩子函数的方法对原有容器的功能进行扩展,而无需多做其他改动。这样既为用户扩展Spring容器开放了接口,又为用户屏蔽了容器实现的复杂性,很好的实现了Spring容器通用性和扩展性的统一。&lt;/p&gt;
</description>
<pubDate>Tue, 09 Oct 2018 07:28:00 +0000</pubDate>
<dc:creator>takumiCX</dc:creator>
<og:description>[TOC] 1. 前言 1.1 IOC容器到底是什么 IOC和AOP是Spring框架的核心功能,而IOC又是AOP实现的基础,因而可以说IOC是整个Spring框架的基石。那么什么是IOC？IOC即</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/takumicx/p/9757492.html</dc:identifier>
</item>
<item>
<title>&quot;人机&quot;对战：电脑太简单了，我是射手 skr~skr~skr - 又拍云</title>
<link>http://www.cnblogs.com/upyun/p/9760255.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/upyun/p/9760255.html</guid>
<description>&lt;p&gt;9月17日，2018 世界人工智能大会在上海拉开帷幕。在 SAIL 榜单入围项目中，我看到了小爱同学、小马智行、微软小冰、腾讯觅影等等，这不仅让我大开了眼界，也不禁让我感慨 AI 的发展神速。犹记得去年在中国乌镇围棋峰会上，AlphaGo 与排名世界第一的世界围棋冠军柯洁对战，以 3 比 0 的总比分获胜，那时候只感觉这条“狗”真牛。&lt;/p&gt;
&lt;p&gt;这也让我回想起了更年少打“人机”的时光——“人机”模式总是很简单，电脑很弱，给玩家的体验并不好。我也曾给设计师出过加强电脑实力的主意——这些主意听起来不错，但不足以延长游戏体验的时间。&lt;/p&gt;
&lt;p&gt;直到最近，我觉得 AI 是一种能够提高“人机”对战体验的途径——让电脑更聪明，而不是预先设定更多的套路。&lt;/p&gt;

&lt;h2&gt;人机对战的不足：电脑太弱&lt;/h2&gt;
&lt;p&gt;我曾经有三个一起玩人机的室友。其中一个叫做二狗子，他提议周五晚上去云蛟网吧开黑玩“人机”大战。&lt;/p&gt;
&lt;p&gt;“四瓶可乐，服务员。你和小胖都没玩过，今天玩人机熟悉一下吧。”二狗子皮肤有点黑，头转过来一边和我说着，一边登上了自己的账号。&lt;/p&gt;
&lt;p&gt;“电脑都很傻的，你随便打就好了，选个远程，勾引过来用技能耗。这个辅助和射手就是等会和你对线的，小胖中路打这个法师，上路对这个，打野的话你就当他不存在吧，我等会会来帮你的。”按着二狗子说的，我选了一个看上去很厉害（漂亮）的打射手。&lt;/p&gt;
&lt;p&gt;果然“人机”对战里的电脑都很傻。每盘射手和辅助都会固定前往三条路线中的下路，而且在游戏难度模式不变的情况下，射手的英雄都是固定两位更替，似乎电脑端只会使用这两套技能。&lt;/p&gt;
&lt;p&gt;英雄之间也几乎看不出有任何配合，辅助和射手各自作战，有技能放技能，血量低于一定量的时候会立刻“光速”释放保命技能逃跑。对我这个不熟悉操作的倒是一个难题，每当残血时的快速逃跑，让我很难击败对面英雄获得点数。&lt;/p&gt;
&lt;p&gt;还有一个特点是，电脑从来不会冒险追击，电脑控制的人物都有自己的巡逻范围，设下陷阱后再引诱，往往会在中招前早早的折返回去。就像我找到了一个位置，刚好我能击中对方，而对方准备还击时，却因为超出范围，折返回去，以此慢慢消耗对方，但往往会触发对方的逃跑机制。&lt;/p&gt;
&lt;p&gt;二狗子把游戏改到困难模式后，电脑的英雄变得多样，释放技能更加频繁，甚至还有多人合作。开局我就被打得节节退败，但失败多次后简单总结观察，掌握了电脑方的套路后，简简单单又赢了。&lt;/p&gt;

&lt;h2&gt;并不靠谱的主意：多套路，加数值&lt;/h2&gt;
&lt;p&gt;“果然人机都很傻。”赢了之后，我总结道。“不过这人机的设计师，似乎还真的有点本事。许多看上去很傻的行为，现在想想都有点道理，”&lt;/p&gt;
&lt;p&gt;我开了另一瓶可乐，发出哧溜的气响，“要是我来设计，肯定不这样。”&lt;/p&gt;
&lt;p&gt;“首先，大量收集每场战斗的数据，作为一个样本。之后，根据玩家选择的英雄来选择电脑英雄的作战方式，比如碰到闪避型的玩家英雄，根据之前数据的统计，采取防御守塔的方式，消磨对方的耐心，对面就算闪来闪去操作灵活，但短时间内也无法立即攻破。碰到防御型的玩家英雄，则采取进攻欲望强的方式，抢占先机。&lt;/p&gt;
&lt;p&gt;之后就是套路，遇到玩家在固定地点埋伏等待时，立刻更改行军路线，并根据失败率较低的样本来规划路线。&lt;/p&gt;
&lt;p&gt;最后就是加强电脑英雄的能力，在身体素质上压制，毕竟在霸道的力量面前，大部分的策略都是以卵击石。”&lt;/p&gt;
&lt;p&gt;我讲得似乎很来劲，但是二狗子只是敷衍地嗯嗯，然后说了一句：“我偷塔不就好了。”&lt;/p&gt;
&lt;p&gt;到现在我还是没有办法反驳二狗子的话，因为人类玩家总有办法靠套路获胜，纵使电脑端不断采取获胜概率较大的方案——电脑在“吸取教训”后，也就是所谓的机器学习，给玩家会有很直观的体验，觉得电脑变聪明了，但这一学习方法很快就会遇到瓶颈，玩家也会随机固定出一套打法，人机游戏体验也就到了尽头。&lt;/p&gt;
&lt;p&gt;直到最近，我觉得似乎有理由反驳二狗子的话了，虽然都到了喝轻怡可乐的年数。&lt;/p&gt;

&lt;h2&gt;人机对战的进阶：人工神经网络&lt;/h2&gt;
&lt;p&gt;“你打开这个视频看看，DOTA 2 国际赛上这个 OpenAI，就很强。才过去这么几年，现在拿来虐虐我一点问题都没有。”&lt;/p&gt;
&lt;p&gt;二狗子直接丢了一句“懒得看”，并立马贴了一篇文章给我。&lt;/p&gt;
&lt;p&gt;“笔记记得再厚，概率算得再准是没用的，你那一套思路最多只能把游戏从困难变成超级困难，之后提升难度只能靠改名字来唬人，人家大厂几年前就用‘人工神经网络’来优化 AI 了。”&lt;/p&gt;
&lt;p&gt;“也就是，人造英雄对抗人？”&lt;/p&gt;
&lt;p&gt;“是的，我给你讲讲大概原理，你听不听？“二狗子发了个“大兵”表情，并处于“正在输入中”：&lt;/p&gt;
&lt;p&gt;“人工神经网络通过前向传播对输入值，进行权值运算，最后一层层传下去得到最终输出预测的值。再通过反向传播，与真实值做对比修正前向传播的权值和偏置。你看看这个图理解一下。”二狗子马上发了一个奇怪的图——&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-766e272cc08f8310a9f0a8e024e94696_hd.jpg&quot; alt=&quot;&quot; width=&quot;594&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;594&quot; data-rawheight=&quot;422&quot; data-original=&quot;https://pic4.zhimg.com/v2-766e272cc08f8310a9f0a8e024e94696_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-766e272cc08f8310a9f0a8e024e94696_b.jpg&quot;/&gt;&lt;/p&gt;

&lt;p&gt;“不懂。你再说详细一点。”&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-21502c2b843240222dab6f1b8b5dc3c2_hd.jpg&quot; alt=&quot;&quot; width=&quot;662&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;662&quot; data-rawheight=&quot;319&quot; data-original=&quot;https://pic4.zhimg.com/v2-21502c2b843240222dab6f1b8b5dc3c2_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-21502c2b843240222dab6f1b8b5dc3c2_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;二狗子：“上面这图提到的就是反向传播，反向传播在不断的更新参数 W 和 B 通过梯度下降的算法，运用梯度下降的算法可以找出一组 W 和 B，使得函数 C 最小，在样本上找到最优或者近似最优的 W 和 B ，之后使用 W 和 B 进行预测。你再看看这个图理解一下。”&lt;/p&gt;
&lt;p&gt;“哦！哦！！原来是这样啊，也就是比赛 AI 那边还坐着一排游戏选手对吧。“&lt;/p&gt;
&lt;p&gt;二狗子继续：“差不多，您是不是感觉视频里就跟真人玩家互相竞赛一样呢？这种体验才是能延长人机游戏生命周期的关键。首先从数据上，样本采集自然是不可或缺的，但是样本采集后不是死的，得活用起来，你就好比用样本来塑造一个职业选手的形象，红色样本代表进攻较强并取得胜利的对战数据，再用这个红色样本堆砌成一名红色选手，命名为好战的斯巴达，然后此基础上，让斯巴达有一定计算能力，分析游戏开始 15 分钟这一时间段的各类数据，再接着比较使用特洛伊还是长坂坡等方案的胜率。”&lt;/p&gt;
&lt;p&gt;“我更喜欢沉稳的杰尼龟。”我总觉得得说点什么，不然显得我不如二狗子，“那就是电脑计算能力够强，5 分钟总结一次，1 分钟总结一次，那岂不是天下第一了。我还可以预知一下人类玩家的策略，这类竞技游戏套路全都输入到数据库后，比如一看见三名玩家聚在一起，我先综合比较一下战局的优劣势，AI 优势则 4 人围剿，一人守家，AI 劣势则 4 人防守，一人偷塔。AI 也要你尝尝被偷塔的滋味。”&lt;/p&gt;

&lt;h2&gt;深度学习三要素：数据、模型、计算&lt;/h2&gt;
&lt;p&gt;“恩，反正差不多这个意思，深度学习实际上就这三点：数据、模型、计算。竞技游戏像 DOTA 这种就十分考究这三点的综合程度。但往往日常功能里，按照这个框架走，就有很好的效果。你看又拍云的这个内容识别功能，就是深度学习的经典案例。你看看这个，我先去开瓶可乐。”二狗子发了一张图给我，我仿佛听见电脑的那一段，“哧溜”的气泡声。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-b081f58416b8de5ec699c461bf1f770d_hd.jpg&quot; alt=&quot;&quot; width=&quot;677&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;677&quot; data-rawheight=&quot;376&quot; data-original=&quot;https://pic4.zhimg.com/v2-b081f58416b8de5ec699c461bf1f770d_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-b081f58416b8de5ec699c461bf1f770d_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图片中的内容，应该就是他所说的经典三点式：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;视频直播，视频点播，图片，文本，就是数据；&lt;/li&gt;
&lt;li&gt;人工处理，训练平台得到模型；&lt;/li&gt;
&lt;li&gt;内容识别系统，就是计算的过程；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;我尝试上传几张图片之后，马上就能得出结果了，像这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/585973/201810/585973-20181009144813390-1653227811.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;不知道二狗子可乐喝光了没有，我还是挺想和他有空再去玩人机对战的。对，就像那天在云蛟网吧里面的一局，电脑英雄斯维因拿了我和小胖 25 个击杀后，又轻松把二狗子秒杀的神奇局。&lt;/p&gt;
&lt;p&gt;“要不是你们这两个猪队友，送成这样我会打不过？晚上可乐你买单。”&lt;/p&gt;
</description>
<pubDate>Tue, 09 Oct 2018 06:48:00 +0000</pubDate>
<dc:creator>又拍云</dc:creator>
<og:description>9月17日，2018 世界人工智能大会在上海拉开帷幕。在 SAIL 榜单入围项目中，我看到了小爱同学、小马智行、微软小冰、腾讯觅影等等，这不仅让我大开了眼界，也不禁让我感慨 AI 的发展神速。犹记得去</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/upyun/p/9760255.html</dc:identifier>
</item>
<item>
<title>从壹开始前后端分离 [.netCore 填坑 ] 三十二║ 四种方法快速实现项目的半自动化搭建 - 老张的哲学</title>
<link>http://www.cnblogs.com/laozhang-is-phi/p/9757999.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laozhang-is-phi/p/9757999.html</guid>
<description>&lt;p&gt;哈喽大家周二好呀，这个国庆过的真是懒洋洋呀，不知道大家的学习动力咋样了，刚一上班本人手中的项目也增加了，但是还是要抽出时间学习哒，为了不让老板大大天天催，所以更新会慢点儿 [ 哭笑 ] :&lt;span class=&quot;name&quot; data-alternative-name=&quot;classy, bow, face, formal, fashion, suit, magic, circus&quot;&gt;bowtie:&lt;/span&gt;，不过在我的推荐下，公司下一个项目要我负责前后端分离，终于可以将这些派上用场了，中间的坑也会在以后的文章中，慢慢补充出来。&lt;/p&gt;
&lt;p&gt;这几天简单想了想，还没有想好要开什么系列，就想到QQ群里有小伙伴问的较多的一些问题以及前边系列文章中的提到的，但是没有深入讲到的，再填一下坑，这样才是完整的嘛，大家要是看到之前的有任何不清楚的，或者想扩展的，可以在群里说一下，或者留言，我都会说到的。今天呢，就说说如果半自动化搭建项目，这个坑来自于之前的项目搭建文章《&lt;a id=&quot;post_title_link_9516890&quot; href=&quot;https://www.cnblogs.com/laozhang-is-phi/p/9516890.html&quot;&gt;框架之六 || API项目整体搭建 6.1 仓储模式&lt;/a&gt;》的伏笔之一 —— 如何使用 T4 模板搭建项目。当然，我们不仅是简单说说实体类的创建，也会横向和纵向的讨论下，一个项目如何通过代码实现半自动化搭建。&lt;/p&gt;
&lt;p&gt;说到这里大家应该已经明白了这篇文章的写作意图，就是搭建项目的问题，相信大家已经开发了几年了，都有自己的一套行之有效的办法或者是经验，当然这里就不说付费的了，付费的框架何其多，比如迪西客，普元或者力软等等，这都是好用的功能强大的付费框架，既然说技术，就不说付费的，咱们自己写，这里简单概括下今天要说到的：&lt;/p&gt;
&lt;blockquote readability=&quot;16&quot;&gt;
&lt;p&gt;0、手动粘贴复制 —— 可能现在还有小伙伴在用这个办法，效率是真的很低，虽然我偶尔也用哈哈，这里就不说了&lt;/p&gt;
&lt;p&gt;1、动软代码生成器 —— 这个我入门的时候使用的神器，用了好久&lt;/p&gt;
&lt;p&gt;2、通过 VSTO 来编写 Excel ，实现每一层的代码设计 —— 我没用过，但是见过，一个不错的思路&lt;/p&gt;
&lt;p&gt;3、T4 模板 —— 这个是我这两年遇到的又一个神器，也是一直使用的，强烈推荐的&lt;/p&gt;
&lt;p&gt;4、SqlSuagr（ORM）—— 自封装的一套逻辑，当然其他ORM也有，比如EF就很好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天咱们这几个方法都会说到，主要还是说一下通过 T4 模板，来把我们的整体框架半自动化起来。最终的效果截图是这样的：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;框架截图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181009113050090-1277365274.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;相信很多的小伙伴应该使用过这个工具，还是很不错的，我也是用了有一段时间，虽然很小，但是功能确实很丰富，无论是生成实体类，还是生成简单三层，还是工厂模式等等，都可以使用，不仅支持单个表文件的操作，也支持整个数据库的批量生成，这里具体的不做叙述，因为不是本篇文章的重点，这里简单的说下使用方法以及效果图：&lt;/p&gt;
&lt;h3&gt;1、安装与使用&lt;/h3&gt;
&lt;p&gt;地址：&lt;a href=&quot;http://www.maticsoft.com/download.aspx&quot; target=&quot;_blank&quot;&gt;http://www.maticsoft.com/download.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装还是很简单的，就是普通的 next ，想用的可以试试，这里就不做叙述了。&lt;/p&gt;
&lt;p&gt;安装成功后，我们可以看到，通过连接相应的服务器，找到适当的数据库，就可以操作了，主要还是通过一套 cmt 模板来生成对应的 .cs 类文件，这些模板我们可以使用系统自带的（比如工厂模式模板），也可以自定义编辑，以满足我们不同项目的具体需求，我这里就演示下，如何把我的博客数据库（还是咱们一直用的这个数据库），生成简单工程框架。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181008234649031-1237969659.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 经过短暂的等待后，我们的全部框架就这么出来了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181008235128584-1075572999.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;当然这些后缀名等都可以配置，这里就不细说了，咱们随便看一下数据访问层的内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('53e37b76-5c3a-41f9-80eb-863a2355feb7')&quot; readability=&quot;103&quot;&gt;&lt;img id=&quot;code_img_closed_53e37b76-5c3a-41f9-80eb-863a2355feb7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_53e37b76-5c3a-41f9-80eb-863a2355feb7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('53e37b76-5c3a-41f9-80eb-863a2355feb7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_53e37b76-5c3a-41f9-80eb-863a2355feb7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;201&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*  版本信息模板在安装目录下，可自行修改。
* BlogArticle.cs
*
* 功 能： N/A
* 类 名： BlogArticle
*
* Ver    变更日期             负责人  变更内容
* ───────────────────────────────────
* V0.01  2018/10/8 23:46:56   N/A    初版
*
* Copyright (c) 2012 Maticsoft Corporation. All rights reserved.
*┌──────────────────────────────────┐
*│　此技术信息为本公司机密信息，未经本公司书面同意禁止向第三方披露．　│
*│　版权所有：动软卓越（北京）科技有限公司　　　　　　　　　　　　　　│
*└──────────────────────────────────┘
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Data;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Data.SqlClient;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Maticsoft.IDAL;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; Maticsoft.DBUtility;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Please add references&lt;/span&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Maticsoft.SQLServerDAL
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 数据访问类:BlogArticle
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BlogArticle:IBlogArticle
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BlogArticle()
        {}
        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt;  BasicMethod

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 得到最大ID
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; GetMaxId()
        {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; DbHelperSQL.GetMaxID(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BlogArticle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); 
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 是否存在该记录
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; Exists(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; bID)
        {
            StringBuilder strSql&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select count(1) from BlogArticle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; where bID=@bID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            SqlParameter[] parameters &lt;/span&gt;=&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.Int,&lt;span&gt;4&lt;/span&gt;&lt;span&gt;)
            };
            parameters[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;].Value =&lt;span&gt; bID;

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; DbHelperSQL.Exists(strSql.ToString(),parameters);
        }


        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 增加一条数据
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Add(Maticsoft.Model.BlogArticle model)
        {
            StringBuilder strSql&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;insert into BlogArticle(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bsubmitter,btitle,bcategory,bcontent,btraffic,bcommentNum,bUpdateTime,bCreateTime,bRemark)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; values (&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bsubmitter,@btitle,@bcategory,@bcontent,@btraffic,@bcommentNum,@bUpdateTime,@bCreateTime,@bRemark)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;select @@IDENTITY&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            SqlParameter[] parameters &lt;/span&gt;=&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bsubmitter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.NVarChar,&lt;span&gt;60&lt;/span&gt;&lt;span&gt;),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@btitle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.NVarChar,&lt;span&gt;256&lt;/span&gt;&lt;span&gt;),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bcategory&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.NVarChar,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bcontent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, SqlDbType.Text),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@btraffic&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.Int,&lt;span&gt;4&lt;/span&gt;&lt;span&gt;),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bcommentNum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.Int,&lt;span&gt;4&lt;/span&gt;&lt;span&gt;),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bUpdateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, SqlDbType.DateTime),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bCreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, SqlDbType.DateTime),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bRemark&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.NVarChar,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)};
            parameters[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;].Value =&lt;span&gt; model.bsubmitter;
            parameters[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;].Value =&lt;span&gt; model.btitle;
            parameters[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;].Value =&lt;span&gt; model.bcategory;
            parameters[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;].Value =&lt;span&gt; model.bcontent;
            parameters[&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;].Value =&lt;span&gt; model.btraffic;
            parameters[&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;].Value =&lt;span&gt; model.bcommentNum;
            parameters[&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;].Value =&lt;span&gt; model.bUpdateTime;
            parameters[&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;].Value =&lt;span&gt; model.bCreateTime;
            parameters[&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;].Value =&lt;span&gt; model.bRemark;

            &lt;/span&gt;&lt;span&gt;object&lt;/span&gt; obj =&lt;span&gt; DbHelperSQL.GetSingle(strSql.ToString(),parameters);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (obj == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Convert.ToInt32(obj);
            }
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 更新一条数据
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; Update(Maticsoft.Model.BlogArticle model)
        {
            StringBuilder strSql&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;update BlogArticle set &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bsubmitter=@bsubmitter,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btitle=@btitle,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bcategory=@bcategory,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bcontent=@bcontent,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btraffic=@btraffic,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bcommentNum=@bcommentNum,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bUpdateTime=@bUpdateTime,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bCreateTime=@bCreateTime,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bRemark=@bRemark&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; where bID=@bID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            SqlParameter[] parameters &lt;/span&gt;=&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bsubmitter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.NVarChar,&lt;span&gt;60&lt;/span&gt;&lt;span&gt;),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@btitle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.NVarChar,&lt;span&gt;256&lt;/span&gt;&lt;span&gt;),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bcategory&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.NVarChar,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bcontent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, SqlDbType.Text),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@btraffic&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.Int,&lt;span&gt;4&lt;/span&gt;&lt;span&gt;),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bcommentNum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.Int,&lt;span&gt;4&lt;/span&gt;&lt;span&gt;),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bUpdateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, SqlDbType.DateTime),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bCreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, SqlDbType.DateTime),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bRemark&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.NVarChar,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.Int,&lt;span&gt;4&lt;/span&gt;&lt;span&gt;)};
            parameters[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;].Value =&lt;span&gt; model.bsubmitter;
            parameters[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;].Value =&lt;span&gt; model.btitle;
            parameters[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;].Value =&lt;span&gt; model.bcategory;
            parameters[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;].Value =&lt;span&gt; model.bcontent;
            parameters[&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;].Value =&lt;span&gt; model.btraffic;
            parameters[&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;].Value =&lt;span&gt; model.bcommentNum;
            parameters[&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;].Value =&lt;span&gt; model.bUpdateTime;
            parameters[&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;].Value =&lt;span&gt; model.bCreateTime;
            parameters[&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;].Value =&lt;span&gt; model.bRemark;
            parameters[&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;].Value =&lt;span&gt; model.bID;

            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; rows=&lt;span&gt;DbHelperSQL.ExecuteSql(strSql.ToString(),parameters);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (rows &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 删除一条数据
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; Delete(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; bID)
        {
            
            StringBuilder strSql&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete from BlogArticle &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; where bID=@bID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            SqlParameter[] parameters &lt;/span&gt;=&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.Int,&lt;span&gt;4&lt;/span&gt;&lt;span&gt;)
            };
            parameters[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;].Value =&lt;span&gt; bID;

            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; rows=&lt;span&gt;DbHelperSQL.ExecuteSql(strSql.ToString(),parameters);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (rows &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 批量删除数据
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; DeleteList(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; bIDlist )
        {
            StringBuilder strSql&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete from BlogArticle &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; where bID in (&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+bIDlist + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; rows=&lt;span&gt;DbHelperSQL.ExecuteSql(strSql.ToString());
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (rows &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
        }


        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 得到一个对象实体
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; Maticsoft.Model.BlogArticle GetModel(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; bID)
        {
            
            StringBuilder strSql&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select  top 1 bID,bsubmitter,btitle,bcategory,bcontent,btraffic,bcommentNum,bUpdateTime,bCreateTime,bRemark from BlogArticle &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; where bID=@bID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            SqlParameter[] parameters &lt;/span&gt;=&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@bID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.Int,&lt;span&gt;4&lt;/span&gt;&lt;span&gt;)
            };
            parameters[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;].Value =&lt;span&gt; bID;

            Maticsoft.Model.BlogArticle model&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Maticsoft.Model.BlogArticle();
            DataSet ds&lt;/span&gt;=&lt;span&gt;DbHelperSQL.Query(strSql.ToString(),parameters);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ds.Tables[&lt;span&gt;0&lt;/span&gt;].Rows.Count&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; DataRowToModel(ds.Tables[&lt;span&gt;0&lt;/span&gt;].Rows[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            }
        }


        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 得到一个对象实体
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Maticsoft.Model.BlogArticle DataRowToModel(DataRow row)
        {
            Maticsoft.Model.BlogArticle model&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Maticsoft.Model.BlogArticle();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (row != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]!=&lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].ToString()!=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
                {
                    model.bID&lt;/span&gt;=&lt;span&gt;int&lt;/span&gt;.Parse(row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString());
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bsubmitter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    model.bsubmitter&lt;/span&gt;=row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bsubmitter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString();
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btitle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    model.btitle&lt;/span&gt;=row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btitle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString();
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bcategory&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    model.bcategory&lt;/span&gt;=row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bcategory&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString();
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bcontent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    model.bcontent&lt;/span&gt;=row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bcontent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString();
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btraffic&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]!=&lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btraffic&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].ToString()!=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
                {
                    model.btraffic&lt;/span&gt;=&lt;span&gt;int&lt;/span&gt;.Parse(row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btraffic&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString());
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bcommentNum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]!=&lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bcommentNum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].ToString()!=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
                {
                    model.bcommentNum&lt;/span&gt;=&lt;span&gt;int&lt;/span&gt;.Parse(row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bcommentNum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString());
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bUpdateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]!=&lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bUpdateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].ToString()!=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
                {
                    model.bUpdateTime&lt;/span&gt;=DateTime.Parse(row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bUpdateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString());
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bCreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]!=&lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bCreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].ToString()!=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
                {
                    model.bCreateTime&lt;/span&gt;=DateTime.Parse(row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bCreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString());
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bRemark&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    model.bRemark&lt;/span&gt;=row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bRemark&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString();
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; model;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获得数据列表
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; DataSet GetList(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; strWhere)
        {
            StringBuilder strSql&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select bID,bsubmitter,btitle,bcategory,bcontent,btraffic,bcommentNum,bUpdateTime,bCreateTime,bRemark &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; FROM BlogArticle &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(strWhere.Trim()!=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
            {
                strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;strWhere);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; DbHelperSQL.Query(strSql.ToString());
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获得前几行数据
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; DataSet GetList(&lt;span&gt;int&lt;/span&gt; Top,&lt;span&gt;string&lt;/span&gt; strWhere,&lt;span&gt;string&lt;/span&gt;&lt;span&gt; filedOrder)
        {
            StringBuilder strSql&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(Top&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; top &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;Top.ToString());
            }
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; bID,bsubmitter,btitle,bcategory,bcontent,btraffic,bcommentNum,bUpdateTime,bCreateTime,bRemark &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; FROM BlogArticle &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(strWhere.Trim()!=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
            {
                strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;strWhere);
            }
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; order by &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; filedOrder);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; DbHelperSQL.Query(strSql.ToString());
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取记录总数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; GetRecordCount(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; strWhere)
        {
            StringBuilder strSql&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select count(1) FROM BlogArticle &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(strWhere.Trim()!=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
            {
                strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; where &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;strWhere);
            }
            &lt;/span&gt;&lt;span&gt;object&lt;/span&gt; obj =&lt;span&gt; DbHelperSQL.GetSingle(strSql.ToString());
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (obj == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Convert.ToInt32(obj);
            }
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 分页获取数据列表
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; DataSet GetListByPage(&lt;span&gt;string&lt;/span&gt; strWhere, &lt;span&gt;string&lt;/span&gt; &lt;span&gt;orderby&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt; startIndex, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; endIndex)
        {
            StringBuilder strSql&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SELECT * FROM ( &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; SELECT ROW_NUMBER() OVER (&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(&lt;span&gt;orderby&lt;/span&gt;&lt;span&gt;.Trim()))
            {
                strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;order by T.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + &lt;span&gt;orderby&lt;/span&gt;&lt;span&gt; );
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;order by T.bID desc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)AS Row, T.*  from BlogArticle T &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(strWhere.Trim()))
            {
                strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; WHERE &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; strWhere);
            }
            strSql.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ) TT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            strSql.AppendFormat(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; WHERE TT.Row between {0} and {1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, startIndex, endIndex);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; DbHelperSQL.Query(strSql.ToString());
        }

        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
        /// &amp;lt;summary&amp;gt;
        /// 分页获取数据列表
        /// &amp;lt;/summary&amp;gt;
        public DataSet GetList(int PageSize,int PageIndex,string strWhere)
        {
            SqlParameter[] parameters = {
                    new SqlParameter(&quot;@tblName&quot;, SqlDbType.VarChar, 255),
                    new SqlParameter(&quot;@fldName&quot;, SqlDbType.VarChar, 255),
                    new SqlParameter(&quot;@PageSize&quot;, SqlDbType.Int),
                    new SqlParameter(&quot;@PageIndex&quot;, SqlDbType.Int),
                    new SqlParameter(&quot;@IsReCount&quot;, SqlDbType.Bit),
                    new SqlParameter(&quot;@OrderType&quot;, SqlDbType.Bit),
                    new SqlParameter(&quot;@strWhere&quot;, SqlDbType.VarChar,1000),
                    };
            parameters[0].Value = &quot;BlogArticle&quot;;
            parameters[1].Value = &quot;bID&quot;;
            parameters[2].Value = PageSize;
            parameters[3].Value = PageIndex;
            parameters[4].Value = 0;
            parameters[5].Value = 0;
            parameters[6].Value = strWhere;    
            return DbHelperSQL.RunProcedure(&quot;UP_GetRecordByPage&quot;,parameters,&quot;ds&quot;);
        }&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;#endregion&lt;/span&gt;  BasicMethod
        &lt;span&gt;#region&lt;/span&gt;  ExtensionMethod

        &lt;span&gt;#endregion&lt;/span&gt;  ExtensionMethod&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt; 提示：如果你不想下载改软件，又想看看具体的代码，我已经提交到咱们的git 了，在wwwroot 文件夹中，大家可以看看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;截图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181009112853424-1060220082.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;打开看一下，基本的 CURD 方法都有，也有一些存储过程的调用等，而且可以自定义扩展，不得不说是一个神器，如果要开发 ADO.NET 多层，这个方法也不失为一个好的方案。&lt;/p&gt;
&lt;p&gt;优点大家都看到了，快速，内容简洁丰富，各种存储过程分页方法很方便，不言而喻；&lt;/p&gt;
&lt;p&gt;但是缺点也是有的，最大的就是不能像其他ORM框架那样，实现 Code First ，只能单纯的讲数据库信息提取出来；而且在编辑模板方面也没有 T4 那么容易操作，修改模板代码不是很方便，学习的难度稍微大了一些。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：如果不想用 T4 模板手动写模板代码，又不想引入框架，只想用 ADO.NET 搭建多层框架，动软代码生成器是一个不错的选择。&lt;/strong&gt;&lt;/p&gt;


&lt;h3&gt;1、什么是VSTO？&lt;/h3&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt; VSTO（Visual Studio Tools For Office）就像名字一样，是Visual Studio开发Office的工具集。只是一套工具，用于简化.NET的Office开发。能够生成com组件或者标准dll的都能开发Office，比如c/c++，VB6，Delphi等等。原生.NET当然也可以。微软觉得.net开发Office不够方便，VSTO便诞生了。&lt;/p&gt;
&lt;p&gt;1.决定要用.NET开发Office&lt;/p&gt;
&lt;p&gt;2.在所有.NET开发Office的途径（原始，各种工具）中，选择了VSTO&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;2、如何新建一个 VSTO 项目&lt;/h3&gt;
&lt;p&gt;网上有一个栗子，大家可以参看着自己玩一玩：&lt;a href=&quot;https://www.cnblogs.com/crhdyl/p/5289307.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/crhdyl/p/5289307.html&lt;/a&gt;。 对于这个方法，大家自己玩一玩就好了，这里就不说具体的教程了，毕竟不是本文重点。&lt;/p&gt;
&lt;p&gt;QQ群里有一个小伙伴大神，他通过 VSTO 来写的一个框架，其实就是通过命令来将固定的格式进行输出，这里盗用一下他的图，应该还好吧，因为不知道他的博客园账号，就先不@他了，个人感觉这个还是很不错的，看着很溜&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181009001719286-251912758.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 这个方法我现在也在学，不过只是做一个知识扩展来用，好处是，我们自己做一个Excel 工具后，走到哪里都可以使用，还很方便，自己随便自定义，不用受项目或者数据库的环境影响，特别是做展示的时候，很直观，比如开项目研讨会的时候，几个人讨论数据库表结构呀，生成的方法呀，总不能一个个软件都打开吧；&lt;/p&gt;
&lt;p&gt;但是也有一些问题，毕竟局限性有些强，比如好像不能直接操作数据库，在大数据结构中，效率不高，而且不能直接生成文件，需要拷贝操作等；&lt;/p&gt;
&lt;p&gt;通过上边两个栗子可以看出来，一个是连接数据库快捷，文件生成方便；一个自定义逻辑性强，展示直观，那有没有办法可以将两个优点结合起来呢，没错，就是T4模板了，耐心看完下边的讲解，你会发现很强大。&lt;/p&gt;

&lt;h3&gt;1、什么是 T4 模板&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt; T4 (Text Template Transformation Toolkit) &lt;/strong&gt;是微软官方在 VisualStudio 2008+ 中开始使用的代码生成引擎。在 Visual Studio 中，“T4 文本模板”是由一些文本块和控制逻辑组成的混合模板，它可以生成文本文件。 在 Visual C# 或 Visual Basic 中，控制逻辑编写为程序代码的片段。生成的文件可以是任何类型的文本，例如网页、资源文件或任何语言的程序源代码。现在的VS中只要与代码生成相关的场景基本上都能找T4的身影，比如&lt;strong&gt;MVC的视图模板&lt;/strong&gt;，&lt;strong&gt;Entity Framwork的DataContext&lt;/strong&gt;模板等等。&lt;/p&gt;

&lt;h3&gt;2、在项目中通过T4实现数据库生成实体类&lt;/h3&gt;
&lt;p&gt; 这里就不具体讲解 T4 语法了，大家可以自行学习，其实很简单，主要还是 C# 代码，下边你看过之后就能懂了，咱们首先先实现之前留下的一个伏笔 —— 将我们的数据库表利用T4 模板生成实体类，也就是 DbFirst。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、首先在我们的项目中，新建一个类库 Blog.Core.FrameWork &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、在该类库下，新建文件夹 Blog.Core.FrameWork.Entity，用于单独存放我们的模板以及生成的实体类文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181009120805597-939560280.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3、在类库的根目录新建 ModelAuto.ttinclude 模板文件，用来控制我们的文件生成配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以直接新建一个文本文档，然后重命名即可&lt;/p&gt;
&lt;blockquote readability=&quot;5.4545454545455&quot;&gt;
&lt;p&gt;提示：初始状态下，代码不是高亮的，大家可以安装插件：&lt;a href=&quot;https://t4-editor.tangible-engineering.com/Download_T4Editor_Plus_ModelingTools.html&quot; target=&quot;_blank&quot;&gt;下载地址&lt;/a&gt;，不过个人感觉并不是很好用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入命名空间&lt;/span&gt;
&amp;lt;#@ assembly name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Core&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;#&amp;gt;
&amp;lt;#@ assembly name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EnvDTE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;#&amp;gt;
&amp;lt;#@ import &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Collections.Generic&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;#&amp;gt;
&amp;lt;#@ import &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.IO&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;#&amp;gt;
&amp;lt;#@ import &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;#&amp;gt;
&amp;lt;#@ import &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Microsoft.VisualStudio.TextTemplating&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;#&amp;gt;

&amp;lt;#+
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义管理者 manager 实体类&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Manager
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个 block 块，主要是应用在批量生产中&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Block {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String Name;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Start, Length;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Block&amp;gt; blocks = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Block&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Block currentBlock;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Block footerBlock = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Block();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Block headerBlock = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Block();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ITextTemplatingEngineHost host;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ManagementStrategy strategy;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; StringBuilder template;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String OutputPath { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造函数，包含 host主机，模板，输出路径，创建管理策略&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; Manager(ITextTemplatingEngineHost host, StringBuilder template, &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; commonHeader) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.host =&lt;span&gt; host;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.template =&lt;span&gt; template;
        OutputPath &lt;/span&gt;=&lt;span&gt; String.Empty;
        strategy &lt;/span&gt;=&lt;span&gt; ManagementStrategy.Create(host);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;开辟一个 block 块&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; StartBlock(String name) {
        currentBlock &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Block { Name = name, Start =&lt;span&gt; template.Length };
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; StartFooter() {
        footerBlock.Start &lt;/span&gt;=&lt;span&gt; template.Length;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; EndFooter() {
        footerBlock.Length &lt;/span&gt;= template.Length -&lt;span&gt; footerBlock.Start;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; StartHeader() {
        headerBlock.Start &lt;/span&gt;=&lt;span&gt; template.Length;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; EndHeader() {
        headerBlock.Length &lt;/span&gt;= template.Length -&lt;span&gt; headerBlock.Start;
    }    

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; EndBlock() {
        currentBlock.Length &lt;/span&gt;= template.Length -&lt;span&gt; currentBlock.Start;
        blocks.Add(currentBlock);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义进程，用来将所有的 blocks 块执行出来&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Process(&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; split) {
        String header &lt;/span&gt;=&lt;span&gt; template.ToString(headerBlock.Start, headerBlock.Length);
        String footer &lt;/span&gt;=&lt;span&gt; template.ToString(footerBlock.Start, footerBlock.Length);
        blocks.Reverse();
        &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(Block block &lt;span&gt;in&lt;/span&gt; blocks) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出文件&lt;/span&gt;
            String fileName =&lt;span&gt; Path.Combine(OutputPath, block.Name);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (split) {
                String content &lt;/span&gt;= header + template.ToString(block.Start, block.Length) +&lt;span&gt; footer;
                strategy.CreateFile(fileName, content);
                template.Remove(block.Start, block.Length);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                strategy.DeleteFile(fileName);
            }
        }
    }
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义管理策略类&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; ManagementStrategy
{
    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; ManagementStrategy Create(ITextTemplatingEngineHost host) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (host &lt;span&gt;is&lt;/span&gt; IServiceProvider) ? &lt;span&gt;new&lt;/span&gt; VSManagementStrategy(host) : &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ManagementStrategy(host);
    }

    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt;&lt;span&gt; ManagementStrategy(ITextTemplatingEngineHost host) { }

    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; CreateFile(String fileName, String content) {
        File.WriteAllText(fileName, content);
    }

    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; DeleteFile(String fileName) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (File.Exists(fileName))
            File.Delete(fileName);
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; VSManagementStrategy : ManagementStrategy
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; EnvDTE.ProjectItem templateProjectItem;

    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; VSManagementStrategy(ITextTemplatingEngineHost host) : &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(host) {
        IServiceProvider hostServiceProvider &lt;/span&gt;=&lt;span&gt; (IServiceProvider)host;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (hostServiceProvider == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Could not obtain hostServiceProvider&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        EnvDTE.DTE dte &lt;/span&gt;= (EnvDTE.DTE)hostServiceProvider.GetService(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(EnvDTE.DTE));
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (dte == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Could not obtain DTE from host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        templateProjectItem &lt;/span&gt;=&lt;span&gt; dte.Solution.FindProjectItem(host.TemplateFile);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建文件&lt;/span&gt;
    &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; CreateFile(String fileName, String content) {
        &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.CreateFile(fileName, content);
        ((EventHandler)&lt;/span&gt;&lt;span&gt;delegate&lt;/span&gt; { templateProjectItem.ProjectItems.AddFromFile(fileName); }).BeginInvoke(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除文件&lt;/span&gt;
    &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; DeleteFile(String fileName) {
        ((EventHandler)&lt;/span&gt;&lt;span&gt;delegate&lt;/span&gt; { FindAndDeleteFile(fileName); }).BeginInvoke(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据文件名删除文件&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; FindAndDeleteFile(String fileName) {
        &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(EnvDTE.ProjectItem projectItem &lt;span&gt;in&lt;/span&gt;&lt;span&gt; templateProjectItem.ProjectItems) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (projectItem.get_FileNames(&lt;span&gt;0&lt;/span&gt;) ==&lt;span&gt; fileName) {
                projectItem.Delete();
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
        }
    }
}#&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4、还是在类库根目录下新建 DbHelper.ttinclude 模板，主要是数据库操作类&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d0890e5d-b73f-47a9-8b1e-64f4ad653a0f')&quot; readability=&quot;57&quot;&gt;&lt;img id=&quot;code_img_closed_d0890e5d-b73f-47a9-8b1e-64f4ad653a0f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d0890e5d-b73f-47a9-8b1e-64f4ad653a0f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d0890e5d-b73f-47a9-8b1e-64f4ad653a0f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d0890e5d-b73f-47a9-8b1e-64f4ad653a0f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;109&quot;&gt;
&lt;pre&gt;
&amp;lt;#+ 
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义数据库帮助类&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DbHelper
    {
        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; 获取数据库表结构

        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;DbTable&amp;gt; GetDbTables(&lt;span&gt;string&lt;/span&gt; connectionString, &lt;span&gt;string&lt;/span&gt; database, &lt;span&gt;string&lt;/span&gt; tables = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(tables))
            {
                tables &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; and obj.name in ('{0}')&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, tables.Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;','&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            }
            &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; 执行sql命令
            &lt;span&gt;string&lt;/span&gt; sql = &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;SELECT
                                    obj.name tablename,
                                    schem.name schemname,
                                    idx.rows,
                                    CAST
                                    (
                                        CASE 
                                            WHEN (SELECT COUNT(1) FROM sys.indexes WHERE object_id= obj.OBJECT_ID AND is_primary_key=1) &amp;gt;=1 THEN 1
                                            ELSE 0
                                        END 
                                    AS BIT) HasPrimaryKey                                         
                                    from {0}.sys.objects obj 
                                    inner join {0}.dbo.sysindexes idx on obj.object_id=idx.id and idx.indid&amp;lt;=1
                                    INNER JOIN {0}.sys.schemas schem ON obj.schema_id=schem.schema_id
                                    where type='U' {1}
                                    order by obj.name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, database, tables);
            &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;&lt;span&gt;
            DataTable dt &lt;/span&gt;=&lt;span&gt; GetDataTable(connectionString, sql);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; dt.Rows.Cast&amp;lt;DataRow&amp;gt;().Select(row =&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbTable
            {
                TableName &lt;/span&gt;= row.Field&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tablename&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                SchemaName &lt;/span&gt;= row.Field&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;schemname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                Rows &lt;/span&gt;= row.Field&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rows&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                HasPrimaryKey &lt;/span&gt;= row.Field&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HasPrimaryKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            }).ToList();
        }
        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;#region&lt;/span&gt; 获取表字段信息

        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;DbColumn&amp;gt; GetDbColumns(&lt;span&gt;string&lt;/span&gt; connectionString, &lt;span&gt;string&lt;/span&gt; database, &lt;span&gt;string&lt;/span&gt; tableName, &lt;span&gt;string&lt;/span&gt; schema = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; 执行sql命令
            &lt;span&gt;string&lt;/span&gt; sql = &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;
                                    WITH indexCTE AS
                                    (
                                        SELECT 
                                        ic.column_id,
                                        ic.index_column_id,
                                        ic.object_id    
                                        FROM {0}.sys.indexes idx
                                        INNER JOIN {0}.sys.index_columns ic ON idx.index_id = ic.index_id AND idx.object_id = ic.object_id
                                        WHERE  idx.object_id =OBJECT_ID(@tableName) AND idx.is_primary_key=1
                                    )
                                    select
                                    colm.column_id ColumnID,
                                    CAST(CASE WHEN indexCTE.column_id IS NULL THEN 0 ELSE 1 END AS BIT) IsPrimaryKey,
                                    colm.name ColumnName,
                                    systype.name ColumnType,
                                    colm.is_identity IsIdentity,
                                    colm.is_nullable IsNullable,
                                    cast(colm.max_length as int) ByteLength,
                                    (
                                        case 
                                            when systype.name='nvarchar' and colm.max_length&amp;gt;0 then colm.max_length/2 
                                            when systype.name='nchar' and colm.max_length&amp;gt;0 then colm.max_length/2
                                            when systype.name='ntext' and colm.max_length&amp;gt;0 then colm.max_length/2 
                                            else colm.max_length
                                        end
                                    ) CharLength,
                                    cast(colm.precision as int) Precision,
                                    cast(colm.scale as int) Scale,
                                    prop.value Remark
                                    from {0}.sys.columns colm
                                    inner join {0}.sys.types systype on colm.system_type_id=systype.system_type_id and colm.user_type_id=systype.user_type_id
                                    left join {0}.sys.extended_properties prop on colm.object_id=prop.major_id and colm.column_id=prop.minor_id
                                    LEFT JOIN indexCTE ON colm.column_id=indexCTE.column_id AND colm.object_id=indexCTE.object_id                                        
                                    where colm.object_id=OBJECT_ID(@tableName)
                                    order by colm.column_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, database);
            &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;&lt;span&gt;
            SqlParameter param &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SqlParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@tableName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SqlDbType.NVarChar, &lt;span&gt;100&lt;/span&gt;) { Value = &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0}.{1}.{2}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, database, schema, tableName) };
            DataTable dt &lt;/span&gt;=&lt;span&gt; GetDataTable(connectionString, sql, param);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; dt.Rows.Cast&amp;lt;DataRow&amp;gt;().Select(row =&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbColumn()
            {
                ColumnID &lt;/span&gt;= row.Field&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ColumnID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                IsPrimaryKey &lt;/span&gt;= row.Field&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsPrimaryKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                ColumnName &lt;/span&gt;= row.Field&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ColumnName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                ColumnType &lt;/span&gt;= row.Field&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ColumnType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                IsIdentity &lt;/span&gt;= row.Field&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsIdentity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                IsNullable &lt;/span&gt;= row.Field&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsNullable&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                ByteLength &lt;/span&gt;= row.Field&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ByteLength&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                CharLength &lt;/span&gt;= row.Field&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CharLength&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                Scale &lt;/span&gt;= row.Field&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Scale&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                Remark &lt;/span&gt;= row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Remark&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString()
            }).ToList();
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;#region&lt;/span&gt; 获取 DataTable

        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; DataTable GetDataTable(&lt;span&gt;string&lt;/span&gt; connectionString, &lt;span&gt;string&lt;/span&gt; commandText, &lt;span&gt;params&lt;/span&gt;&lt;span&gt; SqlParameter[] parms)
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (SqlConnection connection = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection(connectionString))
            {
                SqlCommand command &lt;/span&gt;=&lt;span&gt; connection.CreateCommand();
                command.CommandText &lt;/span&gt;=&lt;span&gt; commandText;
                command.Parameters.AddRange(parms);
                SqlDataAdapter adapter &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlDataAdapter(command);

                DataTable dt &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataTable();
                adapter.Fill(dt);

                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dt;
            }
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;#region&lt;/span&gt; 获取主键
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetPrimaryKey(List&amp;lt;DbColumn&amp;gt;&lt;span&gt; dbColumns)
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; primaryKey = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (dbColumns!=&lt;span&gt;null&lt;/span&gt;&amp;amp;&amp;amp;dbColumns.Count&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; dbColumns)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (item.IsPrimaryKey==&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
                    {
                        primaryKey &lt;/span&gt;=&lt;span&gt; item.ColumnName;
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; primaryKey;
        }
        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;&lt;span&gt;
    }

    &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; DbTable
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 表结构
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DbTable
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 表名称
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TableName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 表的架构
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SchemaName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 表的记录数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Rows { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 是否含有主键
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; HasPrimaryKey { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
    &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

    &lt;span&gt;#region&lt;/span&gt; DbColumn
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 表字段结构
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DbColumn
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 字段ID
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ColumnID { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 是否主键
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsPrimaryKey { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 字段名称
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ColumnName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 字段类型
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ColumnType { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 数据库类型对应的C#类型
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; CSharpType
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; SqlServerDbTypeMap.MapCsharpType(ColumnType);
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Type CommonType
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; SqlServerDbTypeMap.MapCommonType(ColumnType);
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 字节长度
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ByteLength { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 字符长度
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; CharLength { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 小数位
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Scale { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 是否自增列
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsIdentity { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 是否允许空
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsNullable { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 描述
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Remark { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
    &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

    &lt;span&gt;#region&lt;/span&gt; 数据库和c#的数据类型map

    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SqlServerDbTypeMap
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; MapCsharpType(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; dbtype)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(dbtype)) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; dbtype;
            dbtype &lt;/span&gt;=&lt;span&gt; dbtype.ToLower();
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (dbtype)
            {
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bigint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;binary&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;byte[]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;datetime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;datetime2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;datetimeoffset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DateTimeOffset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;decimal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;decimal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;byte[]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;decimal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nchar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ntext&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;numeric&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;decimal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nvarchar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;real&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Single&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;smalldatetime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;smallint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;smallmoney&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;decimal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sql_variant&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sysname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TimeSpan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timestamp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;byte[]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tinyint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uniqueidentifier&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Guid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;varbinary&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;byte[]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;: csharpType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; csharpType;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Type MapCommonType(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; dbtype)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(dbtype)) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Type.Missing.GetType();
            dbtype &lt;/span&gt;=&lt;span&gt; dbtype.ToLower();
            Type commonType &lt;/span&gt;= &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;object&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (dbtype)
            {
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bigint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;long&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;binary&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;byte&lt;/span&gt;[]); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;bool&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(DateTime); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;datetime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(DateTime); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;datetime2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(DateTime); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;datetimeoffset&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(DateTimeOffset); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;decimal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;decimal&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;double&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;byte&lt;/span&gt;[]); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;decimal&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nchar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ntext&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;numeric&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;decimal&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nvarchar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;real&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(Single); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;smalldatetime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(DateTime); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;smallint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;short&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;smallmoney&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;decimal&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sql_variant&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;object&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sysname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;object&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(TimeSpan); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timestamp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;byte&lt;/span&gt;[]); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tinyint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;byte&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uniqueidentifier&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(Guid); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;varbinary&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;byte&lt;/span&gt;[]); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;: commonType = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;object&lt;/span&gt;); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; commonType;
        }
    }
    &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;&lt;span&gt;
 #&lt;/span&gt;&amp;gt;

&amp;lt;#+
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义配置类，可以批量生产，默认空，则全部生产
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;也可以单一生产，只需要在 TableName 写上指定的表名即可只生成一个&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; config
    {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接字符串格式    
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;public static readonly string ConnectionString = &quot;Data Source=.;Initial Catalog=WMBlogDB;User ID=sa;Password=666;&quot;;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ConnectionString = File.ReadAllText(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;D:\my-file\dbCountPsw2.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).Trim();
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; DbDatabase = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TableName = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果想针对某一个表生成，可以填写表名&lt;/span&gt;
&lt;span&gt;    }
#&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;具体的代码就不细讲了，直接拷贝，或者下载我写好的代码即可。再次说明下，本文不会对 T4 语法继续深入研究。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181009130841676-1588562984.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5、实现生成全部实体类的模型设计，在Blog.Core.FrameWork.Entity文件夹下，新建 Blog.Core.FrameWork.Entity.tt 模板&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181009130952307-792862533.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;填写代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果要获取主机信息，记得把 hostspecific 设置成true&lt;/span&gt;
&amp;lt;#@ template debug=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; hostspecific=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; language=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C#&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; #&amp;gt;
&amp;lt;#@ output extension=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.cs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; #&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;导入命名空间组件&lt;/span&gt;
&amp;lt;#@ assembly name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; #&amp;gt;
&amp;lt;#@ assembly name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; #&amp;gt;
&amp;lt;#@ import &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Collections.Generic&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; #&amp;gt;
&amp;lt;#@ import &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Data.SqlClient&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; #&amp;gt;
&amp;lt;#@ import &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; #&amp;gt;
&amp;lt;#@ assembly name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Core.dll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; #&amp;gt;
&amp;lt;#@ assembly name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Data.DataSetExtensions.dll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; #&amp;gt;
&amp;lt;#@ import &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; #&amp;gt;
&amp;lt;#@ import &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; #&amp;gt;
&amp;lt;#@ import &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Linq&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; #&amp;gt;
&amp;lt;#@ import &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.Collections.Generic&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; #&amp;gt;
&amp;lt;#@ import &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System.IO&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; #&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入我们的公共模板文件&lt;/span&gt;
&amp;lt;#@ include file=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$(ProjectDir)DbHelper.ttinclude&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  #&amp;gt;
&amp;lt;#@ include file=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$(ProjectDir)ModelAuto.ttinclude&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;    #&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义我们的输出文件夹&lt;/span&gt;
&amp;lt;&lt;span&gt;# 
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; OutputPath1 = Path.GetDirectoryName(Host.TemplateFile)+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\work&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;Directory.Exists(OutputPath1))
    {
        Directory.CreateDirectory(OutputPath1);
    }
     &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; manager = &lt;span&gt;new&lt;/span&gt; Manager(Host, GenerationEnvironment, &lt;span&gt;true&lt;/span&gt;) { OutputPath =&lt;span&gt; OutputPath1 }; 
#&lt;/span&gt;&amp;gt;


&lt;span&gt;//&lt;/span&gt;&lt;span&gt;--------------------------------------------------------------------
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     此代码由T4模板自动生成
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    老张的哲学 生成时间 &amp;lt;#=DateTime.Now.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;)#&amp;gt; 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     注意更新后会改变相应代码。
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;--------------------------------------------------------------------&lt;/span&gt;
&amp;lt;&lt;span&gt;# 
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tableName=config.TableName;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取config配置中的表名，为单一生产使用&lt;/span&gt;
 #&amp;gt;
&amp;lt;&lt;span&gt;# 
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tableName!=&lt;span&gt;&quot;&quot;&lt;/span&gt;){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果表名有值，表示是生成单一文件&lt;/span&gt;
    #&amp;gt;  
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引用命名空间&lt;/span&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Blog.Core.FrameWork.Entity
{    
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;#=tableName#&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;    
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &amp;lt;#=tableName#&amp;gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以在这里加上基类等&lt;/span&gt;
&lt;span&gt;    {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将全部字段遍历出来&lt;/span&gt;
&amp;lt;# &lt;span&gt;foreach&lt;/span&gt;(DbColumn column &lt;span&gt;in&lt;/span&gt; DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, config.TableName)){#&amp;gt;
      &lt;span&gt;public&lt;/span&gt; &amp;lt;#= column.CSharpType#&amp;gt;&amp;lt;# &lt;span&gt;if&lt;/span&gt;(column.CommonType.IsValueType &amp;amp;&amp;amp; column.IsNullable){#&amp;gt;?&amp;lt;#}#&amp;gt; &amp;lt;#=column.ColumnName#&amp;gt; { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&amp;lt;#}#&amp;gt;&lt;span&gt; 
    }
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果为空，表示要将整个数据库都生成出来&lt;/span&gt;
&amp;lt;&lt;span&gt;# 
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{ 

    #&lt;/span&gt;&amp;gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接数据库，打开 connect 连接&lt;/span&gt;
&amp;lt;&lt;span&gt;# 
    SqlConnection conn &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection(config.ConnectionString); 
    conn.Open(); 
    System.Data.DataTable schema &lt;/span&gt;= conn.GetSchema(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TABLES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); 
 #&lt;/span&gt;&amp;gt;
 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历全部数据库表&lt;/span&gt;
&amp;lt;&lt;span&gt;# 
    &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(System.Data.DataRow row &lt;span&gt;in&lt;/span&gt;&lt;span&gt; schema.Rows) 
    {  #&lt;/span&gt;&amp;gt;   

    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;开始启动block块，参数是实体类文件名&lt;/span&gt;
    &amp;lt;&lt;span&gt;# 
        manager.StartBlock(row[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TABLE_NAME&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.cs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
     #&lt;/span&gt;&amp;gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;----------&amp;lt;#=row[&quot;TABLE_NAME&quot;].ToString()#&amp;gt;开始----------&lt;/span&gt;
    
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Blog.Core.FrameWork.Entity
{    
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;#=tableName#&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;    
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &amp;lt;#=row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TABLE_NAME&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].ToString()#&amp;gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以在这里加上基类等&lt;/span&gt;
&lt;span&gt;    {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将该表下的字段都遍历出来，可以自定义获取数据描述等信息&lt;/span&gt;
&amp;lt;# &lt;span&gt;foreach&lt;/span&gt;(DbColumn column &lt;span&gt;in&lt;/span&gt; DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, row[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TABLE_NAME&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].ToString() )){ #&amp;gt;

      &lt;span&gt;public&lt;/span&gt; &amp;lt;#= column.CSharpType#&amp;gt; &amp;lt;# &lt;span&gt;if&lt;/span&gt;(column.CommonType.IsValueType &amp;amp;&amp;amp; column.IsNullable){#&amp;gt; ?&amp;lt;#}#&amp;gt; &amp;lt;#=column.ColumnName #&amp;gt; { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&amp;lt;#}#&amp;gt;&lt;span&gt; 

    }
}
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;----------&amp;lt;#=row[&quot;TABLE_NAME&quot;].ToString()#&amp;gt;结束----------&lt;/span&gt;
    &amp;lt;&lt;span&gt;# 
        manager.EndBlock(); 
        } 
        manager.Process(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
    }
    #&lt;/span&gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里我写的比较凌乱，大概就是这个逻辑，其实和 C# 特别相像，主要简单的看一看，就都会明白，这个时候我们保存文件 ctrl+S，如果你连接数据库正确的话，会发现已经生成了全部实体类文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181009132847046-2069841797.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;随便打开一个实体类，就可以发现，和我们自己写的是一样的：是不是很方便！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;----------BlogArticle开始----------&lt;/span&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Blog.Core.FrameWork.Entity
{    
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; BlogArticle
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;    
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BlogArticle&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以在这里加上基类等&lt;/span&gt;
&lt;span&gt;    {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将该表下的字段都遍历出来，可以自定义获取数据描述等信息&lt;/span&gt;
      &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;  bID { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
      &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;  bsubmitter { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
      &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;  btitle { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
      &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;  bcategory { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
      &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;  bcontent { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
      &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;  btraffic { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
      &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;  bcommentNum { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
      &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime  bUpdateTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
      &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime  bCreateTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
      &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;  bRemark { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
 
    }
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;----------BlogArticle结束----------&lt;/span&gt;
    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这个时候你会问，这个既然这么好，能全部生成其他层么？没错，答案当然是肯定的！&lt;/p&gt;

&lt;h3&gt;3、实现整个系统框架模板&lt;/h3&gt;
&lt;p&gt; 因为篇幅的问题，这里就不把代码粘贴出来了，大家自己去Github 上获取即可，最终的效果是酱紫的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181009133805944-1814869852.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;是不是很神器！整个系统框架就在一瞬间就加载出来了，大家下载好后，只需要 ctrl + S 保存一下 tt 模板文件，就能全部生成，只需要把精力放到 Base 基类/基接口即可，以后数据库表结构无论如何变化都不怕！&lt;/p&gt;


&lt;p&gt; 总结来说，其实一般的 ORM 框架，都是集成的 T4模板，EF是如此，咱们的SqlSugar 也是这样，已经封装好了相应的逻辑代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (SqlSugarClient db =&lt;span&gt;SqlSugarInstance.GetInstance())
            {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; db.CodeFirst.InitTables(typeof(实体类model));&lt;/span&gt;
                     db.DbFirst.Where(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;数据库表名&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).CreateClassFile(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\\Demo\\2.cs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成文件的·地址 &lt;/span&gt;
&lt;span&gt;                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
                {
                }
              
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;还记得咱们 Repisitory 层中的 DbContext.cs 文件么，里边我已经封装好了，直接在 BaseRepository.cs 或者自己写的任何文件中调用就行，只不过这里仅仅是 Model 层的。这里就不多说了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468246/201810/1468246-20181009134800695-1842864868.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt; 今天也是在忙碌中，抽出时间写了写，主要是给大家分享了下，如何快速的半自动化的实现项目搭建，也算是一个小技巧了，重点说明了下 T4模板搭建全部层文件，个人感觉还是可行的，主要是灵活性很强，需要的小伙伴可以好好的研究一下，继续奋斗中!!!&lt;/p&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/anjoy8/Blog.Core&quot; target=&quot;_blank&quot;&gt;https://github.com/anjoy8/Blog.Core&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 09 Oct 2018 05:51:00 +0000</pubDate>
<dc:creator>老张的哲学</dc:creator>
<og:description>缘起 哈喽大家周二好呀，这个国庆过的真是懒洋洋呀，不知道大家的学习动力咋样了，刚一上班本人手中的项目也增加了，但是还是要抽出时间学习哒，为了不让老板大大天天催，所以更新会慢点儿 [ 哭笑 ] </og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/laozhang-is-phi/p/9757999.html</dc:identifier>
</item>
<item>
<title>Hierarchical Attention Based Semi-supervised Network Representation Learning - 超然haha</title>
<link>http://www.cnblogs.com/chaoran/p/9720763.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chaoran/p/9720763.html</guid>
<description>&lt;h2 id=&quot;8696-1537695362552&quot;&gt;1. 任务&lt;/h2&gt;
&lt;p&gt;给定：节点信息网络&lt;/p&gt;
&lt;p&gt;目标：为每个节点生成一个低维向量&lt;/p&gt;

&lt;p&gt;基于半监督的分层关注网络嵌入方法&lt;/p&gt;
&lt;h2 id=&quot;2828-1537690974956&quot;&gt;2. 创新点：&lt;/h2&gt;
&lt;p&gt;以半监督的方式结合外部信息&lt;/p&gt;
&lt;p&gt;1. 提出SHANE 模型，集成节点结构，文本和标签信息，并以半监督的方式学习网络嵌入&lt;/p&gt;
&lt;p&gt;2. 使用分层注意网络学习节点的文本特征， 两层双向GRU 提取单词和句子的潜在特征&lt;/p&gt;

&lt;h2 id=&quot;3026-1537694544127&quot;&gt;3. 背景&lt;/h2&gt;
&lt;p&gt;1. 现有方法通常基于单词获取节点的文本特征矩阵，忽略分层结构（单词、句子）&lt;/p&gt;
&lt;p&gt;2. 不同单词和句子包含不同数量信息，如何评估节点内容的差异性&lt;/p&gt;
&lt;p&gt;3. 标签，也是重要的监督信息&lt;/p&gt;
&lt;p&gt;4. 网络中存在大量未标记节点，如何合理利用&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/273E0A15781240B1B8872F7650CE9A64/2500&quot; alt=&quot;&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/273E0A15781240B1B8872F7650CE9A64/2500&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;

&lt;h2 id=&quot;7825-1537695343017&quot;&gt;4. 模型&lt;/h2&gt;
&lt;p&gt;整合节点的结构，文本和标签信息&lt;/p&gt;

&lt;p&gt;基于文本的表示学习&lt;/p&gt;
&lt;p&gt;使用分层注意机制&lt;/p&gt;

&lt;h3 id=&quot;7088-1537705457151&quot;&gt;4.1. 问题定义&lt;/h3&gt;
&lt;p&gt;G = (V, E, T, L）&lt;/p&gt;
&lt;p&gt;（ V： 节点集&lt;/p&gt;
&lt;p&gt;E： 边集合&lt;/p&gt;
&lt;p&gt;T： 节点的文本信息&lt;/p&gt;
&lt;p&gt;L： 标签节点信息 ）&lt;/p&gt;

&lt;p&gt;节点u 的文本信息Du = （Su1, Su2,...,Suq)&lt;/p&gt;
&lt;p&gt;句子信息 Sui = （Wui..)&lt;/p&gt;

&lt;p&gt;给定信息网络，目标：为每个节点u 整合其结构和文本信息 学习一个低维向量 u，&lt;/p&gt;
&lt;h3 id=&quot;2283-1537705513514&quot;&gt;4.2. 基于文本的表示&lt;/h3&gt;
&lt;p&gt;分层学习可获取不同粒度的文本信息&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;词嵌入：捕获词汇特征&lt;/li&gt;
&lt;li&gt;句子嵌入： 捕获文本特征&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;4283-1537705468866&quot;&gt;4.2.1. word 编码器&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;使用双向 GRU 编码单词序列&lt;/li&gt;
&lt;li&gt;使用注意力机制识别重要单词&lt;/li&gt;
&lt;li&gt;类似：使用双向GRU 编码句子&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设节点 u 包含 q 个句子， 每个句子包含 m 个单词，通过查询获取句子 Sui 的词语序列&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/760D73E88C29415F8409310FB6C3C1DF/2535&quot; alt=&quot;&quot; width=&quot;210&quot; height=&quot;25&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/760D73E88C29415F8409310FB6C3C1DF/2535&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;

&lt;p&gt;使用双向 GRU 编码单词序列&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/FBF0A45A1A7849D0B4BDF113C8E2ADFD/2566&quot; alt=&quot;&quot; width=&quot;442&quot; height=&quot;65&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/FBF0A45A1A7849D0B4BDF113C8E2ADFD/2566&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;

&lt;p&gt;（ 通过连接以上两个方向的 h 可包含两个方向的信息，使用注意机制识别词语的重要性，如下）&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/BD7ECEC120964BEDAA246747B2ABAAF8/2555&quot; alt=&quot;&quot; width=&quot;448&quot; height=&quot;149&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/BD7ECEC120964BEDAA246747B2ABAAF8/2555&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;（ Sui 是节点 u 第 i 个句子的嵌入， Cw 是全局的词语向量，a 是用于句子表示，融合单词嵌入的权重）&lt;/p&gt;

&lt;h4 id=&quot;4449-1537706195667&quot;&gt;4.2.2. 句子编码器&lt;/h4&gt;
&lt;p&gt;类似单词编码器，类似的双向GRU ，得到分层编码的文本嵌入 ut&lt;/p&gt;
&lt;p&gt;为了避免新的表示与原始文本的偏差，获取分层关注网络的嵌入后，添加该节点词嵌入的平均值向量 Uta，得到节点 u 的文本表示 ut&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/D2B4D3495D8F4E9BBE4F7A791F9FFE7D/2588&quot; alt=&quot;&quot; width=&quot;341&quot; height=&quot;29&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/D2B4D3495D8F4E9BBE4F7A791F9FFE7D/2588&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;

&lt;h3 id=&quot;9837-1537706777919&quot;&gt;4.3. 基于结构的表示&lt;/h3&gt;
&lt;p&gt;含有边的两个节点结构相似&lt;/p&gt;
&lt;p&gt;CANE 中将每个部分的对数似然表示为&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/A63FA80CE831411399F4BCA4978538EB/2601&quot; alt=&quot;&quot; width=&quot;466&quot; height=&quot;214&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/A63FA80CE831411399F4BCA4978538EB/2601&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;

&lt;p&gt;（ u 与 v 相连接， Wu，v为权重，Us 是基于结构的嵌入）&lt;/p&gt;
&lt;p&gt;u 生成 v 的条件概率为&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/216819A1EFB843DB9E7C4EE7FF79F089/2610&quot; alt=&quot;&quot; width=&quot;434&quot; height=&quot;56&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/216819A1EFB843DB9E7C4EE7FF79F089/2610&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;

&lt;p&gt;节点 u 的基于结构的嵌入区别于所连接的节点，结构的最终嵌入为与不同节点连接所得的平均值&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/B90ADE396216430382DF99D0321D09F7/2616&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;58&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/B90ADE396216430382DF99D0321D09F7/2616&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;（ E 为 u 的边）&lt;/p&gt;

&lt;h3 id=&quot;2460-1537707193789&quot;&gt;4.4. 半监督的分层网络嵌入&lt;/h3&gt;
&lt;p&gt;未标记的节点：只考虑结构和文本特征&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/D13D4EB7BF3340AAB1898B0E574EDF04/2625&quot; alt=&quot;&quot; width=&quot;558&quot; height=&quot;63&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/D13D4EB7BF3340AAB1898B0E574EDF04/2625&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;

&lt;p&gt;为了匹配标签丢失的节点，我们通过全连接层将节点的嵌入映射到标签空间，可预测节点的标签分布&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/53151E579C46472DB8D31512DD817A18/2634&quot; alt=&quot;&quot; width=&quot;499&quot; height=&quot;29&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/53151E579C46472DB8D31512DD817A18/2634&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;

&lt;p&gt;（ Ll 表示有标签的节点子集，有标签的节点的目标函数为：）&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/C077B076F28D4C1490514386C4E14D8D/2638&quot; alt=&quot;&quot; width=&quot;540&quot; height=&quot;62&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/C077B076F28D4C1490514386C4E14D8D/2638&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;（ lamda 是标签损失权重）&lt;/p&gt;

&lt;p&gt;SHANE 的全局目标函数：&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/29B62F1E899B462796120F70A08A7106/2645&quot; alt=&quot;&quot; width=&quot;483&quot; height=&quot;50&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/29B62F1E899B462796120F70A08A7106/2645&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;

&lt;h2 id=&quot;3451-1537708691251&quot;&gt;5. 实验&lt;/h2&gt;
&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/482B307080E348AB9493CC13D466E88D/2650&quot; alt=&quot;&quot; width=&quot;440&quot; height=&quot;630&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/482B307080E348AB9493CC13D466E88D/2650&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;

&lt;div&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/8C3EAFC692EF49299D4047FA271ACCB1/2652&quot; alt=&quot;&quot; width=&quot;646&quot; height=&quot;290&quot; data-original=&quot;https://note.youdao.com/yws/public/resource/d4fef803be9ff6328b3e88d1be64e403/xmlnote/8C3EAFC692EF49299D4047FA271ACCB1/2652&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 09 Oct 2018 04:55:00 +0000</pubDate>
<dc:creator>超然haha</dc:creator>
<og:description>现有方法通常基于单词获取节点的文本特征矩阵，忽略分层结构（单词、句子），该文提出SHANE 模型，集成节点结构，文本和标签信息，并以半监督的方式学习网络嵌入，使用分层注意网络学习节点的文本特征， 两层</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chaoran/p/9720763.html</dc:identifier>
</item>
<item>
<title>SpringBoot 之集成邮件服务. - JMCui</title>
<link>http://www.cnblogs.com/jmcui/p/9758442.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jmcui/p/9758442.html</guid>
<description>&lt;h2&gt;一、前言&lt;/h2&gt;
&lt;p&gt;    Spring Email 抽象的核心是 MailSender 接口，MailSender 的实现能够把 Email 发送给邮件服务器，由邮件服务器实现邮件发送的功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1153954/201810/1153954-20181009085625430-902351939.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    Spring 自带了一个 MailSender 的实现 JavaMailSenderImpl，它会使用 JavaMail API 来发送 Email。Spring 或 SpringBoot 应用在发送 Email 之前，我们必须要 JavaMailSenderImpl 装配为 Spring应用上下文的一个 bean。&lt;/p&gt;
&lt;h2&gt;二、配置&lt;/h2&gt;
&lt;h3&gt;    1、pom.xml &lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-mail&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;    2、application.yml&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;spring&lt;/span&gt;:
  &lt;span&gt;mail&lt;/span&gt;:
    host: smtp.163.com
    port: 25
    username: 159****2662@163.com
    password: ***********&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    host 属性默认是 JavaMail 会话的主机；port 端口默认监听标准的 SMTP 端口25；如果邮件服务器需要认证的，还需要设置 userrname 和 password。&lt;/p&gt;
&lt;p&gt;    这里我用的是 163 的邮件服务器，需要在 163 邮箱中开启客户端授权密码，否则会报 550 认证错误。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://img2018.cnblogs.com/blog/1153954/201810/1153954-20181009090826741-1044217409.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;    3、EmailConfig.java&lt;/h3&gt;
&lt;p&gt;    在这里，我们把 JavaMailSenderImpl 装配为 Spring 应用上下文的一个 Bean。同时需要注意的是，这里使用了&lt;strong&gt;@ConfigurationProperties&lt;/strong&gt; 注解，该注解需要属性有 setter 方法并在启动类中使用 @EnableConfigurationProperties 注解使之生效。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Configuration
@ConfigurationProperties(prefix &lt;/span&gt;= &quot;spring.mail&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; EmailConfig {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String host;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer port;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String username;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MailSender javaMailSender() {
        JavaMailSenderImpl javaMailSender &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JavaMailSenderImpl();
        javaMailSender.setHost(host);
        javaMailSender.setPort(port);
        javaMailSender.setUsername(username);
        javaMailSender.setPassword(password);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; javaMailSender;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setHost(String host) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.host =&lt;span&gt; host;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPort(Integer port) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.port =&lt;span&gt; port;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUsername(String username) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPassword(String password) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;三、发送&lt;/h2&gt;
&lt;p&gt;    有了 javaMailSender，那么邮件发送就是一件再简单不过的事情了。我们只需要将 javaMailSender 的 Bean 注入到我们自己的实现类中，然后使用 JavaMail API 来发送 Email。&lt;/p&gt;
&lt;h3&gt;    1、文本邮件发送&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sendSimpleEmail() {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 构造Email消息&lt;/span&gt;
    SimpleMailMessage message = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleMailMessage();
    message.setFrom(&lt;/span&gt;&quot;159****2662@163.com&quot;&lt;span&gt;);
    message.setTo(&lt;/span&gt;&quot;****@qianxx.com&quot;&lt;span&gt;);
    message.setSubject(&lt;/span&gt;&quot;邮件主题&quot;&lt;span&gt;);
    message.setText(&lt;/span&gt;&quot;邮件内容&quot;&lt;span&gt;);
    javaMailSender.send(message);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    纯文本的 Email 在于构造 SimpleMailMessage 实例，这个对象可以很便捷地发送Email消息。&lt;/p&gt;
&lt;h3&gt;    2、附件邮件发送&lt;/h3&gt;
&lt;p&gt;    Spring 的 Email 功能并不局限于纯文本的 Email。我们还可以添加附件。如果要发送带有附件的 Email，关键技巧是创建 multipart 类型的消息 ———— Email由多个部分组成，其中一部分是 Email 体，其他部分是附件。为了发送 multipart 类型的 Email，你需要创建一个MIME（Multipurpose Internet Mail Extensions）的消息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; mimeEmail() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; MessagingException {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; MimeMessage 本身的 API 有些笨重，我们可以使用 MimeMessageHelper&lt;/span&gt;
    MimeMessage mimeMessage =&lt;span&gt; javaMailSender.createMimeMessage();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第二个参数是 true ，表明这个消息是 multipart类型的/&lt;/span&gt;
    MimeMessageHelper mimeMessageHelper = &lt;span&gt;new&lt;/span&gt; MimeMessageHelper(mimeMessage, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
    mimeMessageHelper.setFrom(&lt;/span&gt;&quot;159****2662@163.com&quot;&lt;span&gt;);
    mimeMessageHelper.setTo(&lt;/span&gt;&quot;****@qianxx.com&quot;&lt;span&gt;);
    mimeMessageHelper.setSubject(&lt;/span&gt;&quot;附件邮件主题&quot;&lt;span&gt;);
    mimeMessageHelper.setText(&lt;/span&gt;&quot;附件邮件内容&quot;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加附件,第一个参数表示添加到 Email 中附件的名称，第二个参数是图片资源&lt;/span&gt;
    mimeMessageHelper.addAttachment(&quot;boot.png&quot;, &lt;span&gt;new&lt;/span&gt; ClassPathResource(&quot;public/images/boot.png&quot;&lt;span&gt;));
    javaMailSender.send(mimeMessage);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;    3、富文本邮件发送&lt;/h3&gt;
&lt;p&gt;     Spring 的 Email 功能除了可以添加附件外，甚至可以使用 HTML 来美化消息体的内容。发送富文本的 Email 与发送简单文本的 Email 并没有太大区别，关键是将setText() 方法的消息文本设置为 HTML，并将第二个参数设置为 true，表示这是 HTML 的富文本。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; htmlEmail() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; MessagingException {
    MimeMessage mimeMessage &lt;/span&gt;=&lt;span&gt; javaMailSender.createMimeMessage();
    MimeMessageHelper mimeMessageHelper &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; MimeMessageHelper(mimeMessage, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
    mimeMessageHelper.setFrom(&lt;/span&gt;&quot;159****2662@163.com&quot;&lt;span&gt;);
    mimeMessageHelper.setTo(&lt;/span&gt;&quot;****@qianxx.com&quot;&lt;span&gt;);
    mimeMessageHelper.setSubject(&lt;/span&gt;&quot;富文本邮件主题&quot;&lt;span&gt;);
    String html &lt;/span&gt;= &quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h4&amp;gt;Hello,SpringBoot&amp;lt;/h4&amp;gt;&amp;lt;img src='cid:boot' /&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;span&gt;;
    mimeMessageHelper.setText(html, &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置内嵌元素 cid，第一个参数表示内联图片的标识符，第二个参数标识资源引用&lt;/span&gt;
    mimeMessageHelper.addInline(&quot;boot&quot;, &lt;span&gt;new&lt;/span&gt; ClassPathResource(&quot;public/images/boot.png&quot;&lt;span&gt;));
    javaMailSender.send(mimeMessage);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;四、结语&lt;/h2&gt;
&lt;p&gt;    HTML 标签的字符串拼接是一件很棘手的事。因为在你的大脑中解析HTML标签并想象它在渲染时会是什么样子是挺困难的。而将HTML混合在Java代码中又会使得这个问题更加复杂。&lt;/p&gt;
&lt;p&gt;    因此 Spring 给出的解决方案是 使用模板生成Email，有多种模板方案可供选择，包括Apache Velocity和Thymeleaf。（由于对这两个模板语法不是很擅长，就不多做介绍了）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;演示源代码：&lt;/strong&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/JMCuixy/Boot&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://github.com/JMCuixy/Boot&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 09 Oct 2018 04:55:00 +0000</pubDate>
<dc:creator>JMCui</dc:creator>
<og:description>一、前言 Spring Email 抽象的核心是 MailSender 接口，MailSender 的实现能够把 Email 发送给邮件服务器，由邮件服务器实现邮件发送的功能。 Spring 自带了一</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jmcui/p/9758442.html</dc:identifier>
</item>
<item>
<title>通过代码审计找出网站中的XSS漏洞实战(三) - idaxia</title>
<link>http://www.cnblogs.com/tangqingsong/p/9759694.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tangqingsong/p/9759694.html</guid>
<description>&lt;h2 id=&quot;一背景&quot;&gt;一、背景&lt;/h2&gt;
&lt;p&gt;笔者此前录制了一套XSS的视频教程，在漏洞案例一节中讲解手工挖掘、工具挖掘、代码审计三部分内容,准备将内容用文章的形式再次写一此,前两篇已经写完，内容有一些关联性，其中手工XSS挖掘篇地址为&lt;a href=&quot;https://segmentfault.com/a/1190000016095198&quot;&gt;快速找出网站中可能存在的XSS漏洞实践(一)&lt;/a&gt;&lt;code&gt;https://segmentfault.com/a/1190000016095198&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;本文主要记录通过代码审计的方式进行XSS漏洞挖掘，分为了找出关键位置，正向审计，反向审计三个部分，审计的系统为&lt;code&gt;permeate渗透测试系统&lt;/code&gt;，测试系统的搭建可以参考笔者的第一篇文章。&lt;/p&gt;
&lt;h2 id=&quot;二操作概要&quot;&gt;二、操作概要&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;找出关键位置&lt;/li&gt;
&lt;li&gt;正向审计&lt;/li&gt;
&lt;li&gt;反向审计&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;三找出关键位置&quot;&gt;三、找出关键位置&lt;/h2&gt;
&lt;p&gt;打蛇打七寸，说明在关键位置做事效率会更高，代码审计找出漏洞也是同理，因此笔者需要找出XSS关键的位置;对于目前的大多数Web应用来说，MVC模式是非常主流的一种形式，因此笔者这里将找到对应的控制器和模板，在这一节当中主要讲解找出位置的思路&lt;/p&gt;
&lt;h3 id=&quot;找出控制器&quot;&gt;3.1 找出控制器&lt;/h3&gt;
&lt;p&gt;找出控制器的方式通常是通过主入口文件与URL地址两块去分析，现在笔者打开首页，发现URL地址为&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;http://permeate.songboy.net/home/index.php&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当点击板块后，URL地址变成了如下地址&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;http://permeate.songboy.net/home/index.php?m=tiezi&amp;amp;a=index&amp;amp;bk=6&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从URL地址中可以看到不管首页还是板块页面，都经过URL地址&lt;code&gt;home/index.php&lt;/code&gt;,因此笔者接下来便可以通过打开&lt;code&gt;home/index.php&lt;/code&gt;文件来查看控制器所存放的位置,打开后代码如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?php
require_once &quot;../core/common.php&quot;;
include &quot;./public/header.php&quot;;
includeAction(&quot;$model&quot;,&quot;$action&quot;);
include &quot;./public/footer.php&quot;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再次打开&lt;code&gt;../core/common.php&lt;/code&gt;文件，代码如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function includeAction($model, $action)
{
    //判断控制器是否存在
    $filePath = &quot;./action/$model.php&quot;;
    if (is_readable($filePath)) {
        require_once $filePath;
        $class = new $model;
        if (is_callable(array($class, $action))) {
            $class-&amp;gt;$action();
            return true;
        }
    }

    //如果没有找到对应的控制器，直接调用模板文件
    $tplFilePath = &quot;./tpl/$model/$action.php&quot;;
    if (is_readable($tplFilePath)) {
        require_once $tplFilePath;
        return true;
    }

    echo '控制器或模板文件' . $filePath . '不存在!';
    die;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从代码中可以看出，其控制器文件存放在&lt;code&gt;home/action/&lt;/code&gt;下，此时笔者打开此文件夹，可以看到几个php文件，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/xss3/1.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;回想刚才笔者所看到的URL地址如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;http://permeate.songboy.net/home/index.php?m=tiezi&amp;amp;a=index&amp;amp;bk=6&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;联想起来其控制器文件为&lt;code&gt;tiezi.php&lt;/code&gt;,将其打开一看&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?php

class tiezi
{
    function __construct()
    {

    }

    public function index()
    {
        .....
        $data['count'] = $count;
        $data['page_size'] = $page_size;
        $data['page_count'] = $page_count;
        $data['page_num'] = $page_num;
        displayTpl('tiezi/index', $data);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;果然发现了index方法&lt;/p&gt;
&lt;h3 id=&quot;找出模板&quot;&gt;3.2 找出模板&lt;/h3&gt;
&lt;p&gt;得到控制器之后，笔者还需要找到模板存放的位置，通常模板与控制器是息息相关，因此可以控制其中找到蛛丝马迹，比如上面的代码当中，最后一行代码为&lt;code&gt;displayTpl&lt;/code&gt;函数，从字面意思上可以理解为显示模板，因此笔者通过PHPStorm的跳转功能直接跳过去查看该函数的具体流程，找到代码如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * 加载模板文件
 * @param $tplPath
 */
function displayTpl($tplPath, $data = [])
{
    $filePath = &quot;./tpl/$tplPath.php&quot;;
    if (!is_readable($filePath)) {
        echo '模板文件' . $filePath . '不存在!';
        die;
    }

    foreach ($data as $key =&amp;gt; $val) {
        $$key = $val;
    }

    require_once $filePath;

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面代码当中可以看出模板存放于&lt;code&gt;home/tpl&lt;/code&gt;目录下，通过文件夹打开查看，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/xss3/2.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;验证位置&quot;&gt;3.3 验证位置&lt;/h3&gt;
&lt;p&gt;通过上面的操作流程已经基本确定控制器与模板的位置，但为了防止意外，还是准确验证一下，在控制器中输出一个字符串1111111，在模板中输出字符串222222222，如果按照笔者之前所预想的，那么这两组字符串都会被输出，参考代码如下&lt;/p&gt;
&lt;p&gt;在控制器中加入的测试代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public function index()
{
    
    echo '11111111111';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在模板文件中加入的测试代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;222222222222222
&amp;lt;?php
$get = $_GET;
?&amp;gt;
&amp;lt;section class=&quot;section&quot;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在会到浏览器，在当前页面单击鼠标右键，选中查看源代码，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/xss3/3.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在源代码当中，搜索字符串&lt;code&gt;11111&lt;/code&gt;,果然搜索到字符串，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/xss3/4.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;四正向审计&quot;&gt;四、正向审计&lt;/h2&gt;
&lt;p&gt;在找到关键位置之后，笔者便可以针对性的去进行代码审计，XSS的代码审计主要有两种方式，正向代码审计，反向代码审计；正向代码审计的意思是从参数的接收到参数最后的使用这个流程进行检查，而反向审计则是相反从变量使用的位置上推到参数接收&lt;/p&gt;
&lt;h3 id=&quot;接收参数位置&quot;&gt;4.1 接收参数位置&lt;/h3&gt;
&lt;p&gt;首先通过正向方式来进行代码审计，正向代码审计是从接收参数进行排查，因此找到控制器当中，通过编辑器的搜索功能，笔者在控制器文件当中搜索了关键字 **$_GET** 找到了&lt;code&gt;tiezi.php&lt;/code&gt;控制器中的&lt;code&gt;index&lt;/code&gt;方法，代码如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public function index()
    {
        $id = $_GET['bk'];
        $bk = &amp;amp;$id;
     
        //开始分页大小
        $page_size = 15;

        //获取当前页码
        $page_num = empty($_GET['page']) ? 1 : $_GET['page'];

        //中间代码.................省略
       
        $data['bk'] = $bk;
        $data['count'] = $count;
        $data['page_size'] = $page_size;
        $data['page_count'] = $page_count;
        $data['page_num'] = $page_num;
        displayTpl('tiezi/index', $data);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;模板位置是否过滤&quot;&gt;4.2 模板位置是否过滤&lt;/h3&gt;
&lt;p&gt;从上面代码当中可以看出参数&lt;code&gt;bk&lt;/code&gt;并没有进行任何过滤，便直接放到了模板当中，这便留下安全隐患，如果在模板当中也没用进行安全过滤，那么就存在着反射型XSS漏洞，打开模板文件并搜索关键词&lt;code&gt;bk&lt;/code&gt;，代码如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;div class=&quot;post-list-controller&quot;&amp;gt;
    &amp;lt;div style=&quot;float: right&quot;&amp;gt;
        &amp;lt;a class=&quot;btn btn-primary&quot; href=&quot;fatie.php?bk=&amp;lt;?php echo $bk ?&amp;gt;&quot;&amp;gt;发帖&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看出，模板中确实没有进行安全过滤&lt;/p&gt;
&lt;h3 id=&quot;漏洞验证&quot;&gt;4.3 漏洞验证&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;http://permeate.songboy.net/home/index.php?m=tiezi&amp;amp;a=index&amp;amp;bk=6%22%3E%3Cscript%3Ealert(123)%3C/script%3E&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/xss3/5.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;五反向审计&quot;&gt;五、反向审计&lt;/h2&gt;
&lt;p&gt;反向审计则从模板中找出使用了那些变量，并反推变量的来源，以及是否进行了安全过滤&lt;/p&gt;
&lt;h3 id=&quot;找出模板中的变量&quot;&gt;5.1 找出模板中的变量&lt;/h3&gt;
&lt;p&gt;通过PHPStrom编辑器的正则表达式功能匹配变量，正则表达式如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;echo \$([a-z]*)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个正则表达式是匹配输出变量,比如匹配字符&lt;code&gt;echo $zhangsan&lt;/code&gt;，用PHPStorm匹配到的结果如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/xss3/6.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;双击鼠标左键打开对应代码文件&lt;code&gt;/home/search.php&lt;/code&gt;，代码如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/xss3/7.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在代码中可以看出变量直接放在模板当中，如果在控制器当中也没有转义此变量的来源，那么很有可能会存在XSS问题。&lt;/p&gt;
&lt;h3 id=&quot;查找变量来源&quot;&gt;5.2 查找变量来源&lt;/h3&gt;
&lt;p&gt;追踪变量&lt;code&gt;$keyword&lt;/code&gt;,找到变量来源&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?php
include &quot;public/header.php&quot;;
include &quot;../core/common.php&quot;;

$keywords = $_REQUEST['keywords'];
if (!empty($keywords)) {
    $where = &quot; where title like '%$keywords%' &quot;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上面的代码当中可以看出变量&lt;code&gt;$keywords&lt;/code&gt;并没有进行任何过滤，因此可以笃定此处也存在这XSS漏洞问题&lt;/p&gt;
&lt;h3 id=&quot;漏洞验证-1&quot;&gt;5.3 漏洞验证&lt;/h3&gt;
&lt;p&gt;从代码的位置发现与前面的唯一入口不同，此代码文件并不是类文件，因此尝试直接访问，构造出URL地址如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;http://permeate.songboy.net/home/search.php?keywords=%E6%B5%8B%E8%AF%95%3Cscript%3Ealert(123)%3C/script%3E&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过火狐浏览器访问此URL地址之后，出现结果如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/xss3/8.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在提示框当中果然弹出了&lt;code&gt;123&lt;/code&gt;的提示&lt;/p&gt;
&lt;h2 id=&quot;六新书推荐&quot;&gt;六、新书推荐&lt;/h2&gt;
&lt;p&gt;如果对笔者的Web安全文章较为感兴趣，可以关注笔者更多文章内容，新书《PHP Web安全开发实战》，现已在各大网点销售，封面如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/xss2/19.png?1&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;作者：汤青松&lt;/p&gt;
&lt;p&gt;微信：songboy8888&lt;/p&gt;
&lt;p&gt;日期：2018-10-09&lt;/p&gt;
</description>
<pubDate>Tue, 09 Oct 2018 04:52:00 +0000</pubDate>
<dc:creator>idaxia</dc:creator>
<og:description>一、背景 笔者此前录制了一套XSS的视频教程，在漏洞案例一节中讲解手工挖掘、工具挖掘、代码审计三部分内容,准备将内容用文章的形式再次写一此,前两篇已经写完，内容有一些关联性，其中手工XSS挖掘篇地址为</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tangqingsong/p/9759694.html</dc:identifier>
</item>
<item>
<title>亚马逊EC2服务器申请+NODE服务器部署+阿里云域名申请+SSL证书使用 - Bowen Huang</title>
<link>http://www.cnblogs.com/huangbx/p/awsec2-nodejs-ssl.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangbx/p/awsec2-nodejs-ssl.html</guid>
<description>&lt;p&gt;最近，由于项目需要，自己申请了一台亚马逊用于部署网站测试，在使用期间，发现网上没有一篇非常完整的文章讲解从服务器申请到域名解析，SSL证书申请的整个流程。所以自己总结一下，以供大家学习！&lt;/p&gt;

&lt;p&gt;为什么选择申请亚马逊的服务器？只是因为项目需要而已，我本意是想申请阿里云的的服务器的（毕竟是阿里的员工），并且亚马逊提供一年的免费EC2服务器。&lt;/p&gt;
&lt;p&gt;打开地址：&lt;a href=&quot;https://aws.amazon.com/cn/ec2/?hp=tile&amp;amp;so-exp=below&quot; target=&quot;_blank&quot;&gt;https://aws.amazon.com/cn/ec2/?hp=tile&amp;amp;so-exp=below&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008180200766-1875484484.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;点击“免费试用Amazon EC2”&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后会跳转到登录页面，自己注册一个账号即可，注册需要使用信用卡号。注册之后进入EC2 Dashboard,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008182318317-1978549270.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;点击“启动实例”按钮&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008182457655-2109141644.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;勾选“仅免费套餐”&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后选择合适你自己的服务器，我选择的是Ubuntu Server 18.04 LTS (HVM), SSD Volume Type ，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008182658831-1786392724.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;进入选择实例类型界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008183126375-220622710.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;全部使用默认的选择，直接点击“审核和启动”按钮&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进入到核查实例启动的页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008184038451-1462429552.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按照上图步骤操作后，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;点击“启动实例”按钮&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008185257603-40311387.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;点击“查看实例”，进入实例面板，这里可以查看服务器的静态IP，这个IP就是外网可访问地址&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008201155085-1773912674.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;现在如果尝试ping这个ip会发现超时&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008201614879-1996752443.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如果要想可以正常ping IP，需要打开ICMP的入站规则&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;选择网络与安全-安全组，选中你的实例（launch-wizard-xxx）,选中入站，点击“编辑按钮”&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008202015991-976109096.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后添加如下一条：&lt;/span&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008202237255-110112278.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;再次在自己的电脑终端中ping IP:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008202341660-299908348.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到目前为止，AWS EC2的一条免费的测试服务器就申请好啦。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还有一点切记，如果你不想付费，在免费到期前，一定要终止服务器，不然，会扣你信用卡中的美金的！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008202526146-1802926433.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;将上面申请到的ssh密钥copy到文件夹.ssh下，在终端输入命令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ssh -i“webserver.pem”ubuntu@ec2-xxx-xxx-xxx-xxx.ap-south-1.compute.amazonaws.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
webserver.pem: ssh密钥&lt;br/&gt;ubuntu: ec2服务器用户名&lt;br/&gt;ubuntu@ec2-xxx-xxx-xxx-xxx.ap-south-1.compute.amazonaws.com：ec2服务器共有DNS(IPv4)&lt;br/&gt;登录成功后如下图:
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008204714237-1043860183.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;br/&gt;有些同学觉得直接使用终端不是很方便，有些功能，比如rz这种上传文件命令也用不了，那么推荐使用SecureCRT，链接方式如下：
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008205149394-253259092.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008205156650-1039726405.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Hostname:对应EC2 公有DNS（IPv4）
Port:22
Username:ubuntu
PublicKey：选择EC2配置中生成的ssh密钥&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当这些都完成后，你发现可能登录不成功，这个就是22的端口没有开，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;在 网络与安全-安全组，入站规则中添加如下规则：&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181008205619485-75734630.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之后，就可以在SecureCRT中登录服务器啦。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在服务器申请成功后，就要开始搭建node环境了。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;1. 开始前的准备&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;获取root权限，这样可以避免一些文件的创建，写入的权限问题&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先获取系统更新, 并且安装curl工具&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sudo apt-get update&lt;br/&gt;sudo apt-get install curl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. 安装node.js&lt;/h3&gt;
&lt;p&gt;我们一般不建议使用apt-get node来安装node.js，因为直接安装会安装最新版的，也许会和开发环境的不一致，照成一些兼容问题。&lt;/p&gt;
&lt;p&gt;这里推荐一个管理不同版本node.js的工具：nvm，官网: &lt;a href=&quot;https://link.jianshu.com/?t=https://github.com/creationix/nvm&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/creationix/nvm&lt;/a&gt; ；&lt;/p&gt;
&lt;p&gt;使用curl安装nvm&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装完nvm后，就可以通过nvm来指定安装node.js版本了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 列出可以安装的node版本号&lt;/span&gt;
nvm ls-&lt;span&gt;remote

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 安装指定版本的node (当前最新版本为v10.11.0, LTS版是v8.12.0)&lt;/span&gt;
nvm install v8.&lt;span&gt;10.0&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后通过node -v可以查看当前版本号&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009103443727-746500105.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在node服务就安装好啦，我们用最简单的代码来测试node是否可用, 创建一个test.js文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir&lt;/span&gt;&lt;span&gt; demo
cd demo
touch test&lt;/span&gt;.&lt;span&gt;js
sudo vi test&lt;/span&gt;.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将一下代码复制到test.js文件中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
const http = require('http'&lt;span&gt;);
const hostname &lt;/span&gt;= '127.0.0.1'&lt;span&gt;;
const port &lt;/span&gt;= 3000&lt;span&gt;;

const server &lt;/span&gt;= http.createServer((req, res) =&amp;gt;&lt;span&gt; {
  res.statusCode &lt;/span&gt;= 200&lt;span&gt;;
  res.setHeader(&lt;/span&gt;'Content-Type', 'text/plain'&lt;span&gt;);
  res.end(&lt;/span&gt;'Hello World\n'&lt;span&gt;);
});

server.listen(port, hostname, () &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(`Server running at http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;${hostname}:${port}/`);&lt;/span&gt;
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存文件并退出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存文件并退出&lt;/span&gt;
:wq
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动node服务器：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009103641591-1455107397.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当前服务器访问地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009103611719-1940816936.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是我们在浏览器通过AWS EC2服务器的共有IP并不能访问成功，当我们在入站规则中开放3000端口后，就可以访问成功&lt;/p&gt;
&lt;h3&gt;3. 安装nginx&lt;/h3&gt;
&lt;p&gt;但是我们通常访问网站是直接域名访问，也就是外部只请求80端口。那么这里，我们就需要通过反向代理来实现多端口的分发工作。&lt;/p&gt;
&lt;p&gt;安装nginx，并查看版本号&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sudo apt-get install nginx
nginx -v&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进入nginx配置目录（/etc/nginx），查看文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009105323365-800615783.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过公有IP访问，页面返回如下信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009111127509-1746317869.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这说明，我们的nginx服务安装成功，并且已经成功启动，现在来给http://127.0.0.1:3000做一个代理&lt;/p&gt;
&lt;p&gt;在/etc/nginx中添加nginx配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd conf.d
touch test.conf
sudo vi test.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;复制一下代码到test.conf中，保存退出文件，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server {
    &lt;/span&gt;&lt;span&gt;listen&lt;/span&gt;       &lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
    server_name  xxx&lt;/span&gt;.xxx.xxx.xxx; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;当前使用ip访问，所有直接配置共有IP&lt;/span&gt;
    location /&lt;span&gt; {  
        proxy_pass  https&lt;/span&gt;://&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;3000&lt;/span&gt;;  # &lt;span&gt;被代理的服务器的域名
    }
}　&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 在目录 /etc/nginx中执行以下命令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 检测配置是否正确&lt;/span&gt;
nginx -&lt;span&gt;t
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 重启服务器&lt;/span&gt;
nginx -s reload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009111619129-16964193.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;浏览器通过公网IP访问，页面正常返回&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009111826176-1640249183.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;上面可以通过IP访问网站已经成功，但是IP不是一个实用易记的地址，现在就需要通过申请域名来绑定当前服务器IP，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在阿里云上申请一个域名： &lt;a href=&quot;https://wanwang.aliyun.com/domain&quot; target=&quot;_blank&quot;&gt;https://wanwang.aliyun.com/domain&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;搜索注册一个你想要的域名，付款后，进入域名列表，选中你刚买的域名，点击“解析”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009112456277-1734029355.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在解析设置中，点击添加记录，在记录值中填写AWS EC2的共有IP，点击“确定”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009112749815-1194236290.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在我们在浏览器中输入域名，我们就会看到“welcome to nginx”的页面，这个说明域名已经解析成功。&lt;/p&gt;
&lt;p&gt;之后修改nginx配置，将域名绑定到端口为3000的站点上即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server {
    &lt;/span&gt;&lt;span&gt;listen&lt;/span&gt;       &lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
    server_name  www&lt;/span&gt;.yourdomain.com; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 这里改成你的域名&lt;/span&gt;
    location /&lt;span&gt; {  
        proxy_pass  https&lt;/span&gt;://&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;;  
    }
}　　&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在通过浏览器访问，你就可以看到熟悉的hello world页面啦。&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;1.申请FreeSSL证书&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;到现在我们当然还是不能满足，为了网站的访问安全，并且现在各种搜索引擎对https协议都开始采用优先排名，因此申请SSL是必要的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在有一些机构提供一些免费的SSL证书供大家使用，推荐FreeSSL.org：&lt;a href=&quot;https://freessl.org/&quot; target=&quot;_blank&quot;&gt;https://freessl.org/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果只是用于测试，免费证书完全可以满足我们的要求，输入你的域名，选择一个品牌，点击“创建免费的SSL证书”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009113551170-749956298.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之后选择证书类型，验证类型，点击“点击创建”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009113741901-1375073787.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之后会生成DNS验证记录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009113822920-1395299714.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;进入阿里云的域名管理，在解析设置中点击“添加记录”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009113939393-1639350235.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 在弹窗中添加freessl中的dns验证信息，点击“确认”按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009114151412-1554651228.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之后，回到FreeSSL.org的验证界面，点击“点击验证”按钮&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009114413226-2038672007.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;验证成功后，会生成CA证书，证书文件，证书密钥&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意，这里点击“证书下载”，下载的文件必须保存好，不要丢失了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009115152946-2014834767.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再次进入阿里云的域名列表，点击需要配置的域名，进入域名的基本信息页面，点击“免费开启SSL证书”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009115356133-460804230.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在申请证书的页面，点击右上角的“上传原有证书”按钮，打开弹窗，填写对应的 证书文件，证书密钥，点击上传&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009115628523-1181183643.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之后，点击“返回证书控制台”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009115748098-2113097047.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;点击“我的证书”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009115813047-1377459539.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;你会看到刚添加的指纹&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009115850940-1641153409.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2. AWS EC2中添加https入站规则&lt;/h3&gt;
&lt;p&gt;先在入站规则中添加类型为https，端口为443，来源为任意位置的规则&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009122947913-1126038538.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3. 配置ssl证书到nginx&lt;/h3&gt;
&lt;p&gt;将前面下载的ssl证书上传到AWS EC2中, 我放的地址为：/etc/nginx/ssl/yourdomain.com/&lt;/p&gt;
&lt;p&gt;修改nginx配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server {
        &lt;/span&gt;&lt;span&gt;listen&lt;/span&gt; &lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
        server_name www&lt;/span&gt;.yourdomain.&lt;span&gt;com;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;301&lt;/span&gt;    https://&lt;span&gt;$host$request_uri&lt;/span&gt;&lt;span&gt;;
}
server {
        &lt;/span&gt;&lt;span&gt;listen&lt;/span&gt; &lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
        server_name yourdomain&lt;/span&gt;.&lt;span&gt;com;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;301&lt;/span&gt;    https://&lt;span&gt;$host$request_uri&lt;/span&gt;&lt;span&gt;;
}

server {
        &lt;/span&gt;&lt;span&gt;listen&lt;/span&gt;       &lt;span&gt;443&lt;/span&gt;&lt;span&gt;;
        server_name  www&lt;/span&gt;.yourdomain.&lt;span&gt;com;
        ssl          on;&lt;/span&gt;
&lt;span&gt;
        location &lt;/span&gt;/&lt;span&gt; {
                proxy_pass http&lt;/span&gt;://&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;;
        }

        error_log &lt;/span&gt;/home/ubuntu/logs/nginx/www.yourdomain.com/error.&lt;span&gt;log&lt;/span&gt;&lt;span&gt; error;
        access_log &lt;/span&gt;/home/ubuntu/logs/nginx/www.yourdomain.com/access.&lt;span&gt;log&lt;/span&gt;&lt;span&gt;;

        ssl_certificate   &lt;/span&gt;/etc/nginx/ssl/yourdomain.com/full_chain.&lt;span&gt;pem;
        ssl_certificate_key  &lt;/span&gt;/etc/nginx/ssl/yourdomain.com/private.&lt;span&gt;key;
        ssl_session_timeout 5m;
        ssl_protocols TLSv1 TLSv1&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; TLSv1.&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
        ssl_ciphers AESGCM&lt;/span&gt;:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!&lt;span&gt;eNULL;
        ssl_prefer_server_ciphers on;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存退出配置文件，重启nginx服务器，这时再通过域名访问，就会看到安全的状态&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009123557355-510983863.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击安全，可以查看证书：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/431820/201810/431820-20181009123544050-1847173104.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;ok, 到此，一个基本的node网站部署就完成了。&lt;/p&gt;



&lt;p&gt;参考资料：&lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/jjihuang/article/details/80777306&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/jjihuang/article/details/80777306&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/fengff/p/8892590.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/fengff/p/8892590.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 09 Oct 2018 04:38:00 +0000</pubDate>
<dc:creator>Bowen Huang</dc:creator>
<og:description>aws ec2免费服务器，nginx+node服务器配置，阿里云域名申请，FreeSSL https证书申请，nginx ssl证书配置</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangbx/p/awsec2-nodejs-ssl.html</dc:identifier>
</item>
<item>
<title>利用阿里云搭建私有Git服务器 - 悠鸣海</title>
<link>http://www.cnblogs.com/yominhi/p/9759246.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yominhi/p/9759246.html</guid>
<description>&lt;p&gt;服务器系统：Centos 6 （查看centos版本命令：&lt;code&gt;lsb_release -a&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;客户端系统：Windows 7&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、服务器端安装Git&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;==通常centos上使用yum源安装的git版本过低==&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 检查系统上是否已经安装git，若已有则卸载&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 查看当前git版本&lt;/span&gt;
# git --&lt;span&gt;version
git version &lt;/span&gt;&lt;span&gt;1.7&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 卸载旧版本&lt;/span&gt;
# &lt;span&gt;yum&lt;/span&gt; remove -y git
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2. 安装依赖包，下载最新版本git源码&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel &lt;span&gt;perl&lt;/span&gt;-&lt;span&gt;devel
# &lt;/span&gt;&lt;span&gt;wget&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/git/git/archive/v2.13.2.tar.gz&lt;/span&gt;
# &lt;span&gt;tar&lt;/span&gt; zxf v2.&lt;span&gt;13.2&lt;/span&gt;.&lt;span&gt;tar&lt;/span&gt;.gz
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3. 安装git，配置环境变量&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
# cd git-&lt;span&gt;2.13&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
# &lt;/span&gt;&lt;span&gt;make&lt;/span&gt; prefix=/usr/local/&lt;span&gt;git all
# &lt;/span&gt;&lt;span&gt;make&lt;/span&gt; prefix=/usr/local/git &lt;span&gt;install&lt;/span&gt;&lt;span&gt;
# &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;export PATH=$PATH:/usr/local/git/bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/&lt;span&gt;bashrc
# source &lt;/span&gt;/etc/bashrc    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实时生效 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4. 查看git版本号，正确显示则安装成功&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
# git --&lt;span&gt;version
git version &lt;/span&gt;&lt;span&gt;2.13&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;5. 若编译时报错如下&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
libgit.a(utf8.o): In &lt;span&gt;function&lt;/span&gt; `reencode_string_iconv&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
/usr/local/src/git-&lt;span&gt;2.13&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;/utf8.c:&lt;span&gt;463&lt;/span&gt;: undefined reference to `libiconv&lt;span&gt;'
&lt;/span&gt;libgit.a(utf8.o): In &lt;span&gt;function&lt;/span&gt; `reencode_string_len&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
/usr/local/src/git-&lt;span&gt;2.13&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;/utf8.c:&lt;span&gt;524&lt;/span&gt;: undefined reference to `libiconv_open&lt;span&gt;'
&lt;/span&gt;/usr/local/src/git-&lt;span&gt;2.13&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;/utf8.c:&lt;span&gt;535&lt;/span&gt;: undefined reference to `libiconv_close&lt;span&gt;'
&lt;/span&gt;/usr/local/src/git-&lt;span&gt;2.13&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;/utf8.c:&lt;span&gt;529&lt;/span&gt;: undefined reference to `libiconv_open&lt;span&gt;'
&lt;/span&gt;collect2: &lt;span&gt;ld&lt;/span&gt; returned &lt;span&gt;1&lt;/span&gt;&lt;span&gt; exit status
&lt;/span&gt;&lt;span&gt;make&lt;/span&gt;: *** [git-credential-store] Error &lt;span&gt;1&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以按照如下方式解决&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对之前git的make 操作进行 make clean&lt;/span&gt;
# &lt;span&gt;make&lt;/span&gt;&lt;span&gt; clean
# &lt;/span&gt;&lt;span&gt;wget&lt;/span&gt; http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz&lt;/span&gt;
# &lt;span&gt;tar&lt;/span&gt; zxf libiconv-&lt;span&gt;1.14&lt;/span&gt;.&lt;span&gt;tar&lt;/span&gt;&lt;span&gt;.gz
# cd libiconv&lt;/span&gt;-&lt;span&gt;1.14&lt;/span&gt;&lt;span&gt;
# .&lt;/span&gt;/configure --prefix=/usr/local/&lt;span&gt;libiconv
# &lt;/span&gt;&lt;span&gt;make&lt;/span&gt; &amp;amp;&amp;amp; &lt;span&gt;make&lt;/span&gt; &lt;span&gt;install&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建一个软链接到/usr/lib&lt;/span&gt;
# &lt;span&gt;ln&lt;/span&gt; -s /usr/local/lib/libiconv.so /usr/&lt;span&gt;lib
# &lt;/span&gt;&lt;span&gt;ln&lt;/span&gt; -s /usr/local/lib/libiconv.so.&lt;span&gt;2&lt;/span&gt; /usr/lib
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;make&lt;/span&gt;&lt;span&gt; configure
# .&lt;/span&gt;/configure --prefix=/usr/local/git --with-iconv=/usr/local/libiconv/&lt;span&gt;
# &lt;/span&gt;&lt;span&gt;make&lt;/span&gt; &amp;amp;&amp;amp; &lt;span&gt;make&lt;/span&gt; &lt;span&gt;install&lt;/span&gt;&lt;span&gt;
# &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;export PATH=$PATH:/usr/local/git/bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/&lt;span&gt;bashrc
# source &lt;/span&gt;/etc/bashrc
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;6. 配置git 用户名及邮箱(客户机安装后也要配置，在这里略过windows的git安装过程)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
# git config --global user.name &lt;span&gt;'&lt;/span&gt;&lt;span&gt;your name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
# git config &lt;/span&gt;--global user.email &lt;span&gt;'&lt;/span&gt;&lt;span&gt;your email address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、服务器设置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、添加一个git用户&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
# useradd git
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2、初始化一个项目目录为一个仓库&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;su&lt;/span&gt;&lt;span&gt; git
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;git的~的实际地址为/home/git&lt;/span&gt;
cd ~
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;yourName为自定义的仓库名称&lt;/span&gt;
&lt;span&gt;mkdir&lt;/span&gt;&lt;span&gt; yourName.git
cd yourName.git
git init &lt;/span&gt;--bare
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 至此，我们的仓库完整地址为/home/git/yourName.git&lt;/p&gt;
&lt;p&gt;【问题】：建立远程仓库使用 git init 命令，也可以增加 --bare 参数。写不写 --bare 参数有什么区别呢？&lt;/p&gt;
&lt;p&gt;【答案】：&lt;/p&gt;
&lt;p&gt;　　我们知道，一般从远程 clone 下来的仓库会生成一个独立的目录，在这个目录下有当前分支最新版本的文件，同时还有一个 .git 文件夹，与 .git 同级的文件夹称为我们的“工作目录”，我们的修改都在这个目录中进行。而 .git 就是我们 Git 本地仓库的工作目录，我们 add 和 commit 的东西都会被提交到这个目录中。对 git init 命令添加 --bare 参数就表示初始化 Git 仓库的时候不要创建本地工作目录，所以相当于 .git 文件夹下的所有内容直接创建到当前目录下，而不是被放到 .git 目录下。在 Git 服务器上建立好仓库以后，用户就可以克隆这个仓库了。等等。。还没配置用户 SSH 公钥呢，这么就让用户去下载，肯定还是要输入密码才行的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3、在 Git 服务器上为用户配置 SSH 公钥&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 还是先在 Git 服务器上使用 authorized_keys 文件来管理所有用户的 SSH 公钥。（密钥登录的方式比密码登录更安全、更便捷，注意保管好自己的私钥，下面会讲到如何生成秘钥对）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
git@Linux:~$ &lt;span&gt;mkdir&lt;/span&gt; .&lt;span&gt;ssh&lt;/span&gt;&lt;span&gt;
git@Linux:&lt;/span&gt;~$ &lt;span&gt;touch&lt;/span&gt; .&lt;span&gt;ssh&lt;/span&gt;/&lt;span&gt;authorized_keys
git@Linux:&lt;/span&gt;~$ &lt;span&gt;chmod&lt;/span&gt; &lt;span&gt;600&lt;/span&gt; .&lt;span&gt;ssh&lt;/span&gt;/&lt;span&gt;authorized_keys 
git@Linux:&lt;/span&gt;~$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：这里的authorized_keys跟配置好的centos的证书方式ssh登录不同（如已配置），我们git的证书文件路径为/home/git/.ssh/authorized_keys（ssh终端登录所用证书文件路径为/etc/ssh/authorized_keys，一般使用xshell或者putty等工具用的证书登录ssh所用的pub密钥信息都在里面）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4、打开服务器的RSA认证&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
# vim /etc/&lt;span&gt;ssh&lt;/span&gt;/&lt;span&gt;sshd_config
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 找到下面3行并去掉注释&lt;/span&gt;
 &lt;span&gt;1&lt;/span&gt;&lt;span&gt;. RSAAuthentication yes     
 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;. PubkeyAuthentication yes     
 &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;. AuthorizedKeysFile  .&lt;span&gt;ssh&lt;/span&gt;/authorized_keys
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 重启sshd&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
service sshd restart
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;5、为安全起见禁用git用户shell登录&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 为安全起见，禁用 git 用户的 shell 登录&lt;/span&gt;
# vim /etc/&lt;span&gt;passwd&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 修改 git 用户的 shell 为 git-shell，路径使用 which git-shell 查看
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 找到如下一行&lt;/span&gt;
git:x:&lt;span&gt;1001&lt;/span&gt;:&lt;span&gt;1001&lt;/span&gt;::/home/git:/bin/&lt;span&gt;bash
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 修改成如下&lt;/span&gt;
git:x:&lt;span&gt;1001&lt;/span&gt;:&lt;span&gt;1001&lt;/span&gt;::/home/git:/usr/local/git/bin/git-shell
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 重启sshd服务&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
service sshd restart
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、客户端开始使用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、打开git bash&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、生成秘钥对&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　2.1 客户机执行以下命令将在windows的“用户目录/.ssh”下得到秘钥对&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd ~/.&lt;span&gt;ssh&lt;/span&gt;
&lt;span&gt;ssh-keygen&lt;/span&gt; -t rsa -C “youremail@example.com” 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　2.2上传公共秘钥到git服务器有以下2种方式：&lt;/p&gt;
&lt;p&gt;　　①复制到git服务器的/home/git/.ssh/authorized_keys文件末尾中；&lt;/p&gt;
&lt;p&gt;　　②通过ftp等方式上传后，执行以下命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cat&lt;/span&gt; 源秘钥文件路径 &amp;gt;&amp;gt; /home/git/.&lt;span&gt;ssh&lt;/span&gt;/authorized_keys
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;2、任意新建一个工作区文件夹&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、执行clone命令（输入自己的IP地址，端口默认为22，如有不同就加上去）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
git clone git@&lt;span&gt;ip&lt;/span&gt;:/home/git/yourname.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4、随便新建个文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、提交&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd 项目文件下下
git add .
git commit &lt;/span&gt;-m &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;本次提交的备注&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
git push&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;6、服务器端验证是否上传成功&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd /home/git/yourName.git/&lt;span&gt;branches
git log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;成功信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;commit&lt;/span&gt; &lt;span&gt;087966c9f3f73f4aee153213213212132132ac191a7 &lt;/span&gt;&lt;span&gt;(&lt;span&gt;HEAD&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; master&lt;/span&gt;)
Author: upLoadUserName &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;yourEmailAddress&amp;gt;
Date:   Tue Oct 9 08:59:21 2018 +0800&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/flyingfishzxf/article/details/74859560&quot;&gt;1.搭建私有git服务器进行版本控制&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/kobe2408/p/5236360.html&quot;&gt;2.向git服务器添加shh公钥&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/li1107068356/article/details/53814993&quot;&gt;3.搭建Git服务器遇到的那些坑&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 09 Oct 2018 04:31:00 +0000</pubDate>
<dc:creator>悠鸣海</dc:creator>
<og:description>服务器系统：Centos 6 （查看centos版本命令：lsb_release -a） 客户端系统：Windows 7 一、服务器端安装Git ==通常centos上使用yum源安装的git版本过低</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yominhi/p/9759246.html</dc:identifier>
</item>
<item>
<title>mysql replace into 的使用情况 - DB乐之者</title>
<link>http://www.cnblogs.com/wenBlog/p/9759569.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wenBlog/p/9759569.html</guid>
<description>&lt;h3 data-source-line=&quot;1&quot;&gt;replace into的存在的几种情况&lt;/h3&gt;
&lt;ul data-source-line=&quot;3&quot;&gt;&lt;li&gt;当表存在主键并且存在唯一键的时候
&lt;ul&gt;&lt;li&gt;如果只是主键冲突&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
mysql&amp;gt; &lt;span&gt;select *&lt;span&gt; from auto;
+----+---+------+---------+
| &lt;span&gt;id | k | v    | extra   |
+----+---+------+---------+
|  &lt;span&gt;2 | &lt;span&gt;2 | &lt;span&gt;2    | extra &lt;span&gt;2 |
|  &lt;span&gt;3 | &lt;span&gt;3 | &lt;span&gt;3    | extra &lt;span&gt;3 |
|  &lt;span&gt;4 | &lt;span&gt;1 | &lt;span&gt;1-&lt;span&gt;1  | NULL    |
+----+---+------+---------+
&lt;span&gt;3 rows &lt;span&gt;in set (&lt;span&gt;0.00&lt;span&gt; sec)

mysql&amp;gt;&lt;span&gt; 
mysql&amp;gt;&lt;span&gt; show create table auto\G
*************************** &lt;span&gt;1. row ***************************&lt;span&gt;
       Table: auto
Create Table: CREATE TABLE `auto` (
  `&lt;span&gt;id` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL AUTO_INCREMENT,
  `k` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL,
  `v` varchar(&lt;span&gt;100&lt;span&gt;) DEFAULT NULL,
  `extra` varchar(&lt;span&gt;200&lt;span&gt;) DEFAULT NULL,
  PRIMARY KEY (`&lt;span&gt;id&lt;span&gt;`),
  UNIQUE KEY `uk_k` (`k`)
) ENGINE=InnoDB AUTO_INCREMENT=&lt;span&gt;5 DEFAULT CHARSET=&lt;span&gt;latin1
&lt;span&gt;1 row &lt;span&gt;in set (&lt;span&gt;0.00 sec)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-source-line=&quot;30&quot;&gt;这里我们插入一条主键已经存在的4的数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
mysql&amp;gt; replace into auto(&lt;span&gt;id,k)values(&lt;span&gt;4,&lt;span&gt;5&lt;span&gt;);
Query OK, &lt;span&gt;2 rows affected (&lt;span&gt;0.01&lt;span&gt; sec)

mysql&amp;gt; &lt;span&gt;select *&lt;span&gt; from auto;
+----+---+------+---------+
| &lt;span&gt;id | k | v    | extra   |
+----+---+------+---------+
|  &lt;span&gt;2 | &lt;span&gt;2 | &lt;span&gt;2    | extra &lt;span&gt;2 |
|  &lt;span&gt;3 | &lt;span&gt;3 | &lt;span&gt;3    | extra &lt;span&gt;3 |
|  &lt;span&gt;4 | &lt;span&gt;5 | NULL | NULL    |
+----+---+------+---------+
&lt;span&gt;3 rows &lt;span&gt;in set (&lt;span&gt;0.00&lt;span&gt; sec)

mysql&amp;gt;&lt;span&gt; show create table auto \G
*************************** &lt;span&gt;1. row ***************************&lt;span&gt;
       Table: auto
Create Table: CREATE TABLE `auto` (
  `&lt;span&gt;id` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL AUTO_INCREMENT,
  `k` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL,
  `v` varchar(&lt;span&gt;100&lt;span&gt;) DEFAULT NULL,
  `extra` varchar(&lt;span&gt;200&lt;span&gt;) DEFAULT NULL,
  PRIMARY KEY (`&lt;span&gt;id&lt;span&gt;`),
  UNIQUE KEY `uk_k` (`k`)
) ENGINE=InnoDB AUTO_INCREMENT=&lt;span&gt;5 DEFAULT CHARSET=&lt;span&gt;latin1
&lt;span&gt;1 row &lt;span&gt;in set (&lt;span&gt;0.00 sec)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-source-line=&quot;59&quot;&gt; 发现，auto_increment并没有+1，而是针对原来的那一条id=4的记录进行了update，因为没有指定其他列(v,extra)的值，所以，update的时候都使用了默认值.&lt;/p&gt;
&lt;ul data-source-line=&quot;60&quot;&gt;&lt;li&gt;如果主键跟唯一键都冲突并且在同一行里&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
mysql&amp;gt; &lt;span&gt;select *&lt;span&gt; from auto;
+----+---+------+---------+
| &lt;span&gt;id | k | v    | extra   |
+----+---+------+---------+
|  &lt;span&gt;2 | &lt;span&gt;2 | &lt;span&gt;2    | extra &lt;span&gt;2 |
|  &lt;span&gt;3 | &lt;span&gt;3 | &lt;span&gt;3    | extra &lt;span&gt;3 |
|  &lt;span&gt;4 | &lt;span&gt;5 | NULL | NULL    |
|  &lt;span&gt;5 | &lt;span&gt;6 | &lt;span&gt;6    | NULL    |
+----+---+------+---------+
&lt;span&gt;4 rows &lt;span&gt;in set (&lt;span&gt;0.00&lt;span&gt; sec)

mysql&amp;gt;&lt;span&gt; show create table auto \G
*************************** &lt;span&gt;1. row ***************************&lt;span&gt;
       Table: auto
Create Table: CREATE TABLE `auto` (
  `&lt;span&gt;id` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL AUTO_INCREMENT,
  `k` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL,
  `v` varchar(&lt;span&gt;100&lt;span&gt;) DEFAULT NULL,
  `extra` varchar(&lt;span&gt;200&lt;span&gt;) DEFAULT NULL,
  PRIMARY KEY (`&lt;span&gt;id&lt;span&gt;`),
  UNIQUE KEY `uk_k` (`k`)
) ENGINE=InnoDB AUTO_INCREMENT=&lt;span&gt;6 DEFAULT CHARSET=&lt;span&gt;latin1
&lt;span&gt;1 row &lt;span&gt;in set (&lt;span&gt;0.00&lt;span&gt; sec)

mysql&amp;gt;&lt;span&gt; 
mysql&amp;gt;&lt;span&gt; 
mysql&amp;gt; replace into auto(&lt;span&gt;id,k,extra)values(&lt;span&gt;5,&lt;span&gt;6,&lt;span&gt;77&lt;span&gt;);
Query OK, &lt;span&gt;2 rows affected (&lt;span&gt;0.01&lt;span&gt; sec)

mysql&amp;gt; &lt;span&gt;select *&lt;span&gt; from auto;
+----+---+------+---------+
| &lt;span&gt;id | k | v    | extra   |
+----+---+------+---------+
|  &lt;span&gt;2 | &lt;span&gt;2 | &lt;span&gt;2    | extra &lt;span&gt;2 |
|  &lt;span&gt;3 | &lt;span&gt;3 | &lt;span&gt;3    | extra &lt;span&gt;3 |
|  &lt;span&gt;4 | &lt;span&gt;5 | NULL | NULL    |
|  &lt;span&gt;5 | &lt;span&gt;6 | NULL | &lt;span&gt;77      |
+----+---+------+---------+
&lt;span&gt;4 rows &lt;span&gt;in set (&lt;span&gt;0.00&lt;span&gt; sec)

mysql&amp;gt;&lt;span&gt; show create table auto \G
*************************** &lt;span&gt;1. row ***************************&lt;span&gt;
       Table: auto
Create Table: CREATE TABLE `auto` (
  `&lt;span&gt;id` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL AUTO_INCREMENT,
  `k` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL,
  `v` varchar(&lt;span&gt;100&lt;span&gt;) DEFAULT NULL,
  `extra` varchar(&lt;span&gt;200&lt;span&gt;) DEFAULT NULL,
  PRIMARY KEY (`&lt;span&gt;id&lt;span&gt;`),
  UNIQUE KEY `uk_k` (`k`)
) ENGINE=InnoDB AUTO_INCREMENT=&lt;span&gt;6 DEFAULT CHARSET=&lt;span&gt;latin1
&lt;span&gt;1 row &lt;span&gt;in set (&lt;span&gt;0.00 sec)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-source-line=&quot;115&quot;&gt;我们发现，auto_increment也并没有+1，而是针对原来的那一条id=6的记录进行了update，因为没有指定其他列(v)的值，所以，update的时候都v使用了默认值变成了null&lt;/p&gt;
&lt;ul data-source-line=&quot;116&quot;&gt;&lt;li&gt;如果主键跟唯一键都冲突不在同一行，对应2条记录呢&lt;/li&gt;
&lt;/ul&gt;&lt;p data-source-line=&quot;118&quot;&gt;我们来看下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
mysql&amp;gt;&lt;span&gt; show create table auto \G
*************************** &lt;span&gt;1. row ***************************&lt;span&gt;
       Table: auto
Create Table: CREATE TABLE `auto` (
  `&lt;span&gt;id` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL AUTO_INCREMENT,
  `k` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL,
  `v` varchar(&lt;span&gt;100&lt;span&gt;) DEFAULT NULL,
  `extra` varchar(&lt;span&gt;200&lt;span&gt;) DEFAULT NULL,
  PRIMARY KEY (`&lt;span&gt;id&lt;span&gt;`),
  UNIQUE KEY `uk_k` (`k`)
) ENGINE=InnoDB AUTO_INCREMENT=&lt;span&gt;7 DEFAULT CHARSET=&lt;span&gt;latin1
&lt;span&gt;1 row &lt;span&gt;in set (&lt;span&gt;0.00&lt;span&gt; sec)

mysql&amp;gt; &lt;span&gt;select *&lt;span&gt; from auto;
+----+---+------+---------+
| &lt;span&gt;id | k | v    | extra   |
+----+---+------+---------+
|  &lt;span&gt;2 | &lt;span&gt;2 | &lt;span&gt;2    | extra &lt;span&gt;2 |
|  &lt;span&gt;3 | &lt;span&gt;3 | &lt;span&gt;3    | extra &lt;span&gt;3 |
|  &lt;span&gt;4 | &lt;span&gt;5 | NULL | NULL    |
|  &lt;span&gt;6 | &lt;span&gt;6 | &lt;span&gt;66   | NULL    |
+----+---+------+---------+
&lt;span&gt;4 rows &lt;span&gt;in set (&lt;span&gt;0.00&lt;span&gt; sec)

mysql&amp;gt; replace into auto(&lt;span&gt;id,k,v)values(&lt;span&gt;6,&lt;span&gt;2,&lt;span&gt;88&lt;span&gt;);
Query OK, &lt;span&gt;3 rows affected (&lt;span&gt;0.03 sec)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-source-line=&quot;148&quot;&gt;像上面的，主键id=6对应一条记录，唯一索引k=2对应id=2的另外一条记录，所以我们当前插入的记录就会跟2行数据有冲突，我们replace into 看看会有什么结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
mysql&amp;gt; replace into auto(&lt;span&gt;id,k,v)values(&lt;span&gt;6,&lt;span&gt;2,&lt;span&gt;88&lt;span&gt;);
Query OK, &lt;span&gt;3 rows affected (&lt;span&gt;0.03&lt;span&gt; sec)

mysql&amp;gt; &lt;span&gt;select *&lt;span&gt; from auto;
+----+---+------+---------+
| &lt;span&gt;id | k | v    | extra   |
+----+---+------+---------+
|  &lt;span&gt;3 | &lt;span&gt;3 | &lt;span&gt;3    | extra &lt;span&gt;3 |
|  &lt;span&gt;4 | &lt;span&gt;5 | NULL | NULL    |
|  &lt;span&gt;6 | &lt;span&gt;2 | &lt;span&gt;88   | NULL    |
+----+---+------+---------+
&lt;span&gt;3 rows &lt;span&gt;in set (&lt;span&gt;0.00&lt;span&gt; sec)

mysql&amp;gt;&lt;span&gt; show create table auto \G
*************************** &lt;span&gt;1. row ***************************&lt;span&gt;
       Table: auto
Create Table: CREATE TABLE `auto` (
  `&lt;span&gt;id` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL AUTO_INCREMENT,
  `k` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL,
  `v` varchar(&lt;span&gt;100&lt;span&gt;) DEFAULT NULL,
  `extra` varchar(&lt;span&gt;200&lt;span&gt;) DEFAULT NULL,
  PRIMARY KEY (`&lt;span&gt;id&lt;span&gt;`),
  UNIQUE KEY `uk_k` (`k`)
) ENGINE=InnoDB AUTO_INCREMENT=&lt;span&gt;7 DEFAULT CHARSET=&lt;span&gt;latin1
&lt;span&gt;1 row &lt;span&gt;in set (&lt;span&gt;0.00 sec)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-source-line=&quot;177&quot;&gt;我们发现auto_increment并没有+1，MySQL把原来的id=6的这条记录上进行uppdate，但是发现唯一索引k出现了冲突，所以就把对应冲突的那条数据删除，再进行更新，由于没有指定更新字段extra的数据，所以就把extra更新为默认数据&lt;/p&gt;
&lt;ul data-source-line=&quot;178&quot;&gt;&lt;li&gt;如果仅仅是唯一键冲突呢？&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
mysql&amp;gt; &lt;span&gt;select *&lt;span&gt; from auto;
+----+---+------+---------+
| &lt;span&gt;id | k | v    | extra   |
+----+---+------+---------+
|  &lt;span&gt;2 | &lt;span&gt;2 | &lt;span&gt;2    | extra &lt;span&gt;2 |
|  &lt;span&gt;3 | &lt;span&gt;3 | &lt;span&gt;3    | extra &lt;span&gt;3 |
|  &lt;span&gt;4 | &lt;span&gt;5 | NULL | NULL    |
|  &lt;span&gt;5 | &lt;span&gt;6 | NULL | &lt;span&gt;77      |
+----+---+------+---------+
&lt;span&gt;4 rows &lt;span&gt;in set (&lt;span&gt;0.00&lt;span&gt; sec)

mysql&amp;gt;&lt;span&gt; show create table auto \G
*************************** &lt;span&gt;1. row ***************************&lt;span&gt;
       Table: auto
Create Table: CREATE TABLE `auto` (
  `&lt;span&gt;id` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL AUTO_INCREMENT,
  `k` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL,
  `v` varchar(&lt;span&gt;100&lt;span&gt;) DEFAULT NULL,
  `extra` varchar(&lt;span&gt;200&lt;span&gt;) DEFAULT NULL,
  PRIMARY KEY (`&lt;span&gt;id&lt;span&gt;`),
  UNIQUE KEY `uk_k` (`k`)
) ENGINE=InnoDB AUTO_INCREMENT=&lt;span&gt;6 DEFAULT CHARSET=&lt;span&gt;latin1
&lt;span&gt;1 row &lt;span&gt;in set (&lt;span&gt;0.00&lt;span&gt; sec)

mysql&amp;gt;&lt;span&gt; 
mysql&amp;gt; replace into auto(k,v)values(&lt;span&gt;6,&lt;span&gt;66&lt;span&gt;);
Query OK, &lt;span&gt;2 rows affected (&lt;span&gt;0.04&lt;span&gt; sec)

mysql&amp;gt; &lt;span&gt;select *&lt;span&gt; from auto;
+----+---+------+---------+
| &lt;span&gt;id | k | v    | extra   |
+----+---+------+---------+
|  &lt;span&gt;2 | &lt;span&gt;2 | &lt;span&gt;2    | extra &lt;span&gt;2 |
|  &lt;span&gt;3 | &lt;span&gt;3 | &lt;span&gt;3    | extra &lt;span&gt;3 |
|  &lt;span&gt;4 | &lt;span&gt;5 | NULL | NULL    |
|  &lt;span&gt;6 | &lt;span&gt;6 | &lt;span&gt;66   | NULL    |
+----+---+------+---------+
&lt;span&gt;4 rows &lt;span&gt;in set (&lt;span&gt;0.00&lt;span&gt; sec)

mysql&amp;gt;&lt;span&gt; show create table auto \G
*************************** &lt;span&gt;1. row ***************************&lt;span&gt;
       Table: auto
Create Table: CREATE TABLE `auto` (
  `&lt;span&gt;id` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL AUTO_INCREMENT,
  `k` &lt;span&gt;int(&lt;span&gt;10&lt;span&gt;) unsigned NOT NULL,
  `v` varchar(&lt;span&gt;100&lt;span&gt;) DEFAULT NULL,
  `extra` varchar(&lt;span&gt;200&lt;span&gt;) DEFAULT NULL,
  PRIMARY KEY (`&lt;span&gt;id&lt;span&gt;`),
  UNIQUE KEY `uk_k` (`k`)
) ENGINE=InnoDB AUTO_INCREMENT=&lt;span&gt;7 DEFAULT CHARSET=&lt;span&gt;latin1
&lt;span&gt;1 row &lt;span&gt;in set (&lt;span&gt;0.00 sec)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-source-line=&quot;232&quot;&gt;这时候，我们发现，，auto_increment已经+1了。MySQL这时候的执行步骤是，首先往表里面插入一条数据，这时候auto_increment+1,但是在插入的时候发现唯一索引的k冲突了，然后把冲突的这条数据删除，然后重新插入，对于没有指定其他列(extra)的值，如extra都使用了默认值变成了null&lt;/p&gt;
&lt;p data-source-line=&quot;234&quot;&gt;现在我们可以下结论了：&lt;/p&gt;
&lt;ol data-source-line=&quot;235&quot;&gt;&lt;li&gt;当replace into 记录只与主键冲突的时候，auto_increment不会增加，它会对与主键冲突的那一条记录进行更新，没有指定的列将会被更新为默认值&lt;/li&gt;
&lt;li&gt;当replace into 记录与主键跟唯一索引同时冲突的时候，auto_increment不会增加
&lt;ol&gt;&lt;li&gt;如果冲突的主键和索引在同一行记录，则replace into只做更新，对于没有指定值的其他列，将会被更新为默认值，&lt;/li&gt;
&lt;li&gt;如果冲突的主键和索引分别对应2行数据，则MySQL将会删除唯一索引的那一行记录，更新对应主键的那一行记录。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;当replace into 记录只与唯一索引进行冲突的时候，auto_increment + 1，再对数据进行更新。&lt;/li&gt;
&lt;/ol&gt;&lt;ul data-source-line=&quot;241&quot;&gt;&lt;li&gt;最后我们可以对总结分析下，MySQL对replace into的操作是首先是insert操作，如果insert失败，则对insert失败的这条记录进行update，如果update还是失败，则会进行delete操作之后再update。&lt;/li&gt;
&lt;li&gt;具体流程是这样的：insert记录，发现主键冲突，则update这一行，update的时候发现存在唯一键冲突，则delete对应的唯一键的行后再进行update。如果insert成功，auto_increment自然+1了，然后对这条记录进行update，update的时候发现存在唯一键冲突，则delete对应的唯一键的行后再进行update。&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Tue, 09 Oct 2018 04:00:00 +0000</pubDate>
<dc:creator>DB乐之者</dc:creator>
<og:description>replace into的存在的几种情况 当表存在主键并且存在唯一键的时候 如果只是主键冲突 mysql&gt; select * from auto; + + + + + | id | k | v</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wenBlog/p/9759569.html</dc:identifier>
</item>
<item>
<title>RxSwift 中的调度器 - l4y</title>
<link>http://www.cnblogs.com/xjshi/p/9759551.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xjshi/p/9759551.html</guid>
<description>&lt;p&gt;与 ReactiveCocoa 相比，Rx 的一大优势就是更丰富的并发模型。提到并发，就不得不提多线程。在 RxSwift 中，与线程对应的概念就是调度器，本文就调度器做些介绍，包括并发调度器、串行调度器、RxSwift 内置的调度器，及自定义调度器。&lt;/p&gt;
&lt;p&gt;文章地址：&lt;a href=&quot;https://www.cnblogs.com/xjshi/p/9759551.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/xjshi/p/9759551.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;调度器抽象出了执行工作的机制，可以不怎么准确的认为调度器对应原本的线程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;observeOn&lt;/code&gt; 、 &lt;code&gt;subscribeOn&lt;/code&gt; 这两个操作符可以与调度器配合使用。&lt;/p&gt;
&lt;p&gt;如果你想在一个不同的调度器执行工作，那就使用 &lt;code&gt;observeOn(scheduler)&lt;/code&gt; 操作符。&lt;/p&gt;
&lt;p&gt;如果没有显式指定 &lt;code&gt;observerOn&lt;/code&gt; ，那么工作会在产生元素的调度器来执行。&lt;/p&gt;
&lt;p&gt;下边是一个使用 &lt;code&gt;observeOn&lt;/code&gt; 的例子：&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt;sequence1
  .observeOn(backgroundScheduler)
  .map { n in
      print(&quot;This is performed on the background scheduler&quot;)
  }
  .observeOn(MainScheduler.instance)
  .map { n in
      print(&quot;This is performed on the main scheduler&quot;)
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果想要序列在指定调度器上生成（&lt;code&gt;subscribe&lt;/code&gt; 方法）和 dispose，可以使用 &lt;code&gt;subscribeOn(scheduler)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果没有明确指定 &lt;code&gt;subscribeOn&lt;/code&gt;，那么将在调用 &lt;code&gt;subscribe(onNext:)&lt;/code&gt; 或 &lt;code&gt;subscribe&lt;/code&gt; 的同一调度器上调用 &lt;code&gt;subscribe&lt;/code&gt; 闭包（传递给 &lt;code&gt;Observable.create&lt;/code&gt; 的闭包）。&lt;/p&gt;
&lt;p&gt;如果没有明确指定 &lt;code&gt;subscribeOn&lt;/code&gt;，那么将在启动 disposing 的同一调度器上调用 &lt;code&gt;dispose&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;简而言之，如果没有显式的选择调度器，那么将在当前调度器上调用这些方法。&lt;/p&gt;
&lt;h2 id=&quot;串行调度器-vs-并发调度器&quot;&gt;串行调度器 vs 并发调度器&lt;/h2&gt;
&lt;p&gt;由于调度器可以是任何东西，并且所有转换序列的操作副都需要有额外的保证，因此你创建的是哪种调度器非常重要。&lt;/p&gt;
&lt;blockquote readability=&quot;11.614678899083&quot;&gt;
&lt;p&gt;这里的保证是指，对所有的序列（Observable）而言，不论它在那个线程上产生元素，如果序列通过 &lt;code&gt;observer.ron(.next(nextElement))&lt;/code&gt; 将一个元素发送给观察者，那么序列在 &lt;code&gt;observer.on&lt;/code&gt; 方法执行结束前不能发送下一个元素。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;.next&lt;/code&gt; 方法没有执行完成，序列也不能发送终止命令，如 &lt;code&gt;.completed&lt;/code&gt; 或 &lt;code&gt;.error&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;这部分内容在&lt;a href=&quot;https://www.cnblogs.com/xjshi/p/9755095.html&quot;&gt;RxSwift 入门&lt;/a&gt;一文中介绍过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果调度器是并发的，Rx 的 &lt;code&gt;observeOn&lt;/code&gt; 和 &lt;code&gt;subscribeOn&lt;/code&gt; 操作符将确保一切正常。&lt;/p&gt;
&lt;p&gt;如果你使用Rx可以证明是串行的调度器，它能够执行额外的优化。&lt;/p&gt;
&lt;p&gt;在串行调度器的情况下， &lt;code&gt;observeOn&lt;/code&gt; 被优化为一个简单的 &lt;code&gt;dispatch_async&lt;/code&gt; 调用。&lt;/p&gt;
&lt;h2 id=&quot;自定义调度器&quot;&gt;自定义调度器&lt;/h2&gt;
&lt;p&gt;除了当前的调度器，你也可以实现自己的调度器。&lt;/p&gt;
&lt;p&gt;如果你想要描述立即执行工作的调度器，可以实现 &lt;code&gt;ImmediateScheduler&lt;/code&gt; 协议。&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt;public protocol ImmediateScheduler {
    func schedule&amp;lt;StateType&amp;gt;(state: StateType, action: (/*ImmediateScheduler,*/ StateType) -&amp;gt; RxResult&amp;lt;Disposable&amp;gt;) -&amp;gt; RxResult&amp;lt;Disposable&amp;gt;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果你想要支持基于事件的操作，那么你可以实现 &lt;code&gt;Scheduler&lt;/code&gt; 协议：&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt;public protocol Scheduler: ImmediateScheduler {
    associatedtype TimeInterval
    associatedtype Time

    var now : Time {
        get
    }

    func scheduleRelative&amp;lt;StateType&amp;gt;(state: StateType, dueTime: TimeInterval, action: (StateType) -&amp;gt; RxResult&amp;lt;Disposable&amp;gt;) -&amp;gt; RxResult&amp;lt;Disposable&amp;gt;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果你想有周期执行的能力，你可以通过实现 &lt;code&gt;PeriodicScheduler&lt;/code&gt; 协议来通知 Rx。&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt;public protocol PeriodicScheduler : Scheduler {
    func schedulePeriodic&amp;lt;StateType&amp;gt;(state: StateType, startAfter: TimeInterval, period: TimeInterval, action: (StateType) -&amp;gt; StateType) -&amp;gt; RxResult&amp;lt;Disposable&amp;gt;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;内置的调度器&quot;&gt;内置的调度器&lt;/h2&gt;
&lt;p&gt;上边我们提到 Rx 可以使用所有类型的调度器，但如果 Rx 可以证明调度器是串行的，那么会执行额外的优化&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;CurrentThreadScheduler：它是一个串行调度器，表示当前执行工作的调度器。&lt;/li&gt;
&lt;li&gt;MainScheduler：抽象了需要在主线程执行的工作，当然也是一个串行调度器。&lt;/li&gt;
&lt;li&gt;SerialDispatchQueueScheduler：是一个串行调度器，抽象需要在一个 &lt;code&gt;dispatch_queue_t&lt;/code&gt; 上执行的工作，它将确保即时传递并发调度队列（concurrent dispatch queue），它也会转换为串行队列。主调度器 也是 SerialDispatchQueueScheduler 的一个示例。&lt;/li&gt;
&lt;li&gt;ConcurrentDispatchQueueScheduler：是一个并发调度器，抽象需要在一个 &lt;code&gt;dispatch_queue_t&lt;/code&gt; 上执行的工作。当一些任务需要在后台执行时，使用这个调度器。&lt;/li&gt;
&lt;li&gt;OperationQueueScheduler：抽象需要在 &lt;code&gt;NSOperationQueue&lt;/code&gt; 上执行的工作。适用于需要在后台执行大量工作，并希望通过使用 &lt;code&gt;maxConcurrentOpeartionCount&lt;/code&gt; 来调整并发处理的情况。&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;&lt;p&gt;本文中的部分表示 与 Rx 中的对照：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;调度器&lt;/td&gt;
&lt;td&gt;scheduler&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;串行调度器&lt;/td&gt;
&lt;td&gt;serial scheduler&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;并发调度器&lt;/td&gt;
&lt;td&gt;concurrent scheduler&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Tue, 09 Oct 2018 03:59:00 +0000</pubDate>
<dc:creator>l4y</dc:creator>
<og:description>与 ReactiveCocoa 相比，Rx 的一大优势就是更丰富的并发模型。提到并发，就不得不提多线程。在 RxSwift 中，与线程对应的概念就是调度器，本文就调度器做些介绍，包括并发调度器</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xjshi/p/9759551.html</dc:identifier>
</item>
</channel>
</rss>