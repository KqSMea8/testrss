<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>架构师入门：搭建基本的Eureka架构（从项目里抽取） - hsm_computer</title>
<link>http://www.cnblogs.com/JavaArchitect/p/8471364.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JavaArchitect/p/8471364.html</guid>
<description>&lt;p&gt;没有废话，直接上干货，理论部分大家可以看其它资料。&lt;/p&gt;
&lt;p&gt;这里是部分关键代码，如果需要全部可运行的代码，请给本人留言。&lt;/p&gt;
&lt;p&gt;在后继，还将给出搭建高可用Eureka架构的方式。&lt;/p&gt;
&lt;h4&gt;&lt;span lang=&quot;EN-US&quot;&gt;1 Eureka的框架图&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201802/1226172-20180226071842765-104634897.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;    在Eureka的服务器里，包含着记录当前所有服务列表的注册中心，而服务提供者和调用者所在的机器均被称为“Eureka客户端”。&lt;/p&gt;
&lt;p&gt;    服务提供者会和服务器进行如下的交互：第一，注册本身能提供的服务，第二，定时发送心跳，以此证明本服务处于生效状态。而服务调用者一般会从服务器查找服务，并根据找到的结果从服务提供者这端调用服务。&lt;/p&gt;

&lt;h4&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.1搭建&lt;span lang=&quot;EN-US&quot;&gt;Eureka服务器&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;    这里我们将在EurekaBasicDemo-Server项目里编写Eureka服务器的代码。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;    第一步，当我们创建完Maven类型的项目后，需要在pom.xml里编写该项目所需要的依赖包，关键代码如下。 &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
1    &amp;lt;dependencyManagement&amp;gt;
2         &amp;lt;dependencies&amp;gt;
3             &amp;lt;dependency&amp;gt;
4                 &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; 
5    &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt; 
6                 &amp;lt;version&amp;gt;Brixton.SR5&amp;lt;/version&amp;gt; 
7                 &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; 
8                 &amp;lt;scope&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/scope&amp;gt; 
9             &amp;lt;/dependency&amp;gt; 
10         &amp;lt;/dependencies&amp;gt;
11      &amp;lt;/dependencyManagement&amp;gt;
12      &amp;lt;dependencies&amp;gt;
13        &amp;lt;dependency&amp;gt;
14            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
15    &amp;lt;artifactId&amp;gt;spring-cloud-starter-eureka-server&amp;lt;/artifactId&amp;gt;
16        &amp;lt;/dependency&amp;gt;
17    &amp;lt;/project&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    从第1到第11行，我们引入了版本号是Brixton.SR5的Spring Cloud包，这个包里包含着Eureka的支持包，在第13到16行的代码里，引入了Eureka Server端的支持包，引入后，我们才能在项目的java文件里使用Eureka的特性。&lt;/p&gt;
&lt;p&gt;    第二步，在application.yml里，需要配置Eureka服务端的信息，代码如下。    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;    server:
&lt;/span&gt;2      port: 8888
3&lt;span&gt;    eureka:
&lt;/span&gt;4&lt;span&gt;      instance:
&lt;/span&gt;5&lt;span&gt;        hostname: localhost
&lt;/span&gt;6&lt;span&gt;      client:
&lt;/span&gt;7        register-with-eureka: &lt;span&gt;false&lt;/span&gt;
8        fetch-registry: &lt;span&gt;false&lt;/span&gt; 
9&lt;span&gt;        serviceUrl:
&lt;/span&gt;10          defaultZone: http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:8888/eureka/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;    &lt;/span&gt;&lt;/span&gt;从第2和第5行里，我们指定了Eureka服务端使用的主机地址和端口号，这里分别是localhost和8888，也就是说让服务端运行在本地8888号端口，在第10行里，我们指定了服务端所在的url地址。&lt;/p&gt;
&lt;p&gt;    由于这已经是服务器端，所以我们通过第7行的代码，指定无需向Eureka注册中心注册自己，同理，服务器端的职责是维护服务列表而不是调用服务，所以通过第8行的代码指定本端无需检索服务。&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;    第三步，在RegisterCenterApp.java里编写Eureka启动代码。&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;    省略必要的package和import代码
&lt;/span&gt;2    @EnableEurekaServer &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定本项目是Eureka服务端&lt;/span&gt;
3&lt;span&gt;    @SpringBootApplication
&lt;/span&gt;4    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RegisterCenterApp
&lt;/span&gt;5&lt;span&gt;    {
&lt;/span&gt;6        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main( String[] args )
&lt;/span&gt;7        {SpringApplication.run(RegisterCenterApp.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);}
&lt;/span&gt;8    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    在第6行的main函数里，我们还是通过run方法启动Eureka服务。&lt;/p&gt;
&lt;p&gt;    运行App.java启动Eureka服务器端后，在浏览器里输入localhost:8888后，可以看到如下图所示的Eureka服务器端的信息面板，其中Instances currently registered with Eureka目前是空的，说明尚未有服务注册到本服务器的注册中心。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201802/1226172-20180226072325891-1683391855.png&quot; alt=&quot;&quot;/&gt;    &lt;/p&gt;
&lt;h4&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.2 编写作为服务提供者的&lt;span lang=&quot;EN-US&quot;&gt;Eureka客户端&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;    这里我们将在EurekaBasicDemo-ServerProvider项目里编写Eureka客户端的代码，在这个项目里，我们将提供一个SayHello的服务。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;    第一步，创建完Maven类型的项目后，我们需要在pom.xml里写入本项目的依赖包，关键代码如下。本项目所用到的依赖包之前都用过，所以这里就不展开讲了。 &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
1    &amp;lt;dependencyManagement&amp;gt;
2         &amp;lt;dependencies&amp;gt;
3             &amp;lt;dependency&amp;gt;
4                 &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;              &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt; 
5                 &amp;lt;version&amp;gt;Brixton.SR5&amp;lt;/version&amp;gt; 
6                 &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; 
7                 &amp;lt;scope&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/scope&amp;gt; 
8             &amp;lt;/dependency&amp;gt; 
9         &amp;lt;/dependencies&amp;gt;
10      &amp;lt;/dependencyManagement&amp;gt;
11      &amp;lt;dependencies&amp;gt;
12        &amp;lt;dependency&amp;gt;
13                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
14                &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
15                &amp;lt;version&amp;gt;1.5.4.RELEASE&amp;lt;/version&amp;gt;
16        &amp;lt;/dependency&amp;gt;
17        &amp;lt;dependency&amp;gt;
18            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
19            &amp;lt;artifactId&amp;gt;spring-cloud-starter-eureka&amp;lt;/artifactId&amp;gt;
20        &amp;lt;/dependency&amp;gt; 
21      &amp;lt;/dependencies&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    第二步，在application.yml里编写针对服务提供者的配置信息，代码如下。    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;    server:
&lt;/span&gt;2      port: 1111
3&lt;span&gt;    spring:
&lt;/span&gt;4&lt;span&gt;      application:
&lt;/span&gt;5&lt;span&gt;        name: sayHello
&lt;/span&gt;6&lt;span&gt;    eureka:  
&lt;/span&gt;7&lt;span&gt;      client:
&lt;/span&gt;8&lt;span&gt;        serviceUrl:
&lt;/span&gt;9          defaultZone: http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:8888/eureka/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    从第2行里，我们能看到本服务将启用1111号端口，在第5行，我们指定了本服务的名字，叫sayHello，在第9行，我们把本服务注册到了Eureka服务端，也就是注册中心里。&lt;/p&gt;
&lt;p&gt;    第三步，在Controller.java里，编写控制器部分的代码，在其中实现对外的服务。    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
1    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;省略必要的package和import代码&lt;/span&gt;
2    @RestController &lt;span&gt;//&lt;/span&gt;&lt;span&gt;说明这是个控制器&lt;/span&gt;
3    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Controller {
&lt;/span&gt;4        @Autowired &lt;span&gt;//&lt;/span&gt;&lt;span&gt;描述Eureka客户端信息的类&lt;/span&gt;
5        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; DiscoveryClient client;
&lt;/span&gt;6        @RequestMapping(value = &quot;/hello/{username}&quot;, method =&lt;span&gt; RequestMethod.GET    )
&lt;/span&gt;7        &lt;span&gt;public&lt;/span&gt; String hello(@PathVariable(&quot;username&quot;&lt;span&gt;) String username) {        
&lt;/span&gt;8            ServiceInstance instance =&lt;span&gt; client.getLocalServiceInstance();
&lt;/span&gt;9             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出服务相关的信息&lt;/span&gt;
10            System.out.println(&quot;host is:&quot; +&lt;span&gt; instance.getHost());
&lt;/span&gt;11            System.out.println(&quot;port is:&quot; +&lt;span&gt; instance.getPort());
&lt;/span&gt;12            System.out.println(&quot;ServiceID is:&quot; +&lt;span&gt; instance.getServiceId() );
&lt;/span&gt;13            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回字符串&lt;/span&gt;
14            &lt;span&gt;return&lt;/span&gt; &quot;hello &quot; +&lt;span&gt; username;
&lt;/span&gt;15&lt;span&gt;        }
&lt;/span&gt;16    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    我们通过第6和第7行的代码，指定了能触发hello方法的url格式，在这个方法里，我们首先通过第10到12行的代码，输出了主机名、端口号和ServiceID等信息，并在第14行里，返回了一个字符串。&lt;/p&gt;
&lt;p&gt;    第四步，编写Spring Boot的启动类ServiceProviderApp.java，代码如下。    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
1    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;省略必要的package和import代码&lt;/span&gt;
2&lt;span&gt;    @SpringBootApplication
&lt;/span&gt;3&lt;span&gt;    @EnableEurekaClient
&lt;/span&gt;4    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ServiceProviderApp {
&lt;/span&gt;5        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main( String[] args )
&lt;/span&gt;6        {SpringApplication.run(ServiceProviderApp.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);}
&lt;/span&gt;7    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    由于这是处于Eureka的客户端，所以加入第3行所示的注解，在main函数里，我们依然是通过run方法启动Spring Boot服务。    &lt;/p&gt;
&lt;h4&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.3 编写服务调用者的代码&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;    &lt;/span&gt;启动Eureka服务器端的RegisterApp.java和服务提供者端的ServiceProviderApp.java，在浏览器里输入&lt;a href=&quot;http://localhost:8888/&quot;&gt;http://localhost:8888/&lt;/a&gt;后，在Eureka的信息面板里能看到SayHello服务，如下图所示。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201802/1226172-20180226072637931-430585756.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;    如果这时我们在浏览器里输入&lt;a href=&quot;http://localhost:1111/hello/Mike&quot;&gt;http://localhost:1111/hello/Mike&lt;/a&gt;，能直接调用服务，同时能看浏览器里看到“hello Mike”的输出。不过在大多数的场景里，我们一般是在程序里调用服务，而不是简单地通过浏览器调用，在下面的EurekaBasicDemo-ServiceCaller项目里，我们将演示在Eureka客户端调用服务的步骤。&lt;/p&gt;
&lt;p&gt;    第一步。在这个Maven项目里，我们编写如下的pom.xml配置，关键代码如下。    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
1    &amp;lt;dependencyManagement&amp;gt;
2         &amp;lt;dependencies&amp;gt;
3             &amp;lt;dependency&amp;gt;
4                 &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;         &lt;br/&gt;&amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt; 
5                 &amp;lt;version&amp;gt;Brixton.SR5&amp;lt;/version&amp;gt; 
6                 &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; 
7                 &amp;lt;scope&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/scope&amp;gt; 
8             &amp;lt;/dependency&amp;gt; 
9         &amp;lt;/dependencies&amp;gt;
10      &amp;lt;/dependencyManagement&amp;gt;
11      &amp;lt;dependencies&amp;gt;
12        &amp;lt;dependency&amp;gt;
13            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
14            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
15            &amp;lt;version&amp;gt;1.5.4.RELEASE&amp;lt;/version&amp;gt;
16        &amp;lt;/dependency&amp;gt;   
17        &amp;lt;dependency&amp;gt;
18            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
19            &amp;lt;artifactId&amp;gt;spring-cloud-starter-eureka&amp;lt;/artifactId&amp;gt;
20        &amp;lt;/dependency&amp;gt;
21        &amp;lt;dependency&amp;gt;
22           &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; 
23           &amp;lt;artifactId&amp;gt;spring-cloud-starter-ribbon&amp;lt;/artifactId&amp;gt; 
24        &amp;lt;/dependency&amp;gt;
25      &amp;lt;/dependencies&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    请大家注意，从第21到24行，我们需要引入 ribbon的依赖包，通过它我们可以实现负载均衡。而其它的依赖包我们之前都已经见过，所以就不再解释了。&lt;/p&gt;
&lt;p&gt;    第二步，在application.yml里，我们编写针对本项目的配置信息，代码如下。    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;    spring:
&lt;/span&gt;2&lt;span&gt;      application:
&lt;/span&gt;3&lt;span&gt;        name: callHello
&lt;/span&gt;4&lt;span&gt;    server:
&lt;/span&gt;5      port: 8080
6&lt;span&gt;    eureka: 
&lt;/span&gt;7&lt;span&gt;      client:
&lt;/span&gt;8&lt;span&gt;        serviceUrl:
&lt;/span&gt;9          defaultZone: http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:8888/eureka/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    在第3行里，我们指定了本服务的名字叫callHello，在第5行里我们指定了本服务是运行在8080端口，在第9行里，我们把本服务注册到Eureka服务器上。&lt;/p&gt;
&lt;p&gt;    第三步，编写提供服务的控制器类，在其中调用服务提供者的提供的服务，代码如下。    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
1    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;省略必要的package和import代码&lt;/span&gt;
2&lt;span&gt;    @RestController
&lt;/span&gt;3&lt;span&gt;    @Configuration
&lt;/span&gt;4    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Controller {
&lt;/span&gt;5&lt;span&gt;        @Bean
&lt;/span&gt;6&lt;span&gt;        @LoadBalanced
&lt;/span&gt;7        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; RestTemplate getRestTemplate()
&lt;/span&gt;8        { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RestTemplate();   }
&lt;/span&gt;9    
10        @RequestMapping(value = &quot;/hello&quot;, method =&lt;span&gt; RequestMethod.GET    )
&lt;/span&gt;11        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String hello() {        
&lt;/span&gt;12            RestTemplate template =&lt;span&gt; getRestTemplate();
&lt;/span&gt;13            String retVal = template.getForEntity(&quot;http://sayHello/hello/Eureka&quot;, String.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;).getBody();
&lt;/span&gt;14            &lt;span&gt;return&lt;/span&gt; &quot;In Caller, &quot; +&lt;span&gt; retVal;
&lt;/span&gt;15&lt;span&gt;        }
&lt;/span&gt;16    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    在第7行的getRestTemplate方法上，我们启动了@LoadBalanced（负载均衡）的注解。关于负载均衡的细节将在后面章节里详细描述，这里我们引入@LoadBalanced注解的原因是，RestTemplate类型的对象本身不具备调用远程服务的能力，也就是说，如果我们去掉这个注解，程序未必能跑通。只有当我们引入该注解，该方法所返回的对象才能具备调用远程服务的能力。&lt;/p&gt;
&lt;p&gt;    在提供服务的第11行的hello方法里，我们是通过第13行的代码，用RestTemplate类型对象的getForEntity方法，调用服务提供者sayHello提供的hello方法。&lt;/p&gt;
&lt;p&gt;    这里我们是通过&lt;a href=&quot;http://sayhello/hello/Eureka&quot;&gt;http://sayHello/hello/Eureka&lt;/a&gt;这个url去发现对应的服务，在这个url里，只包含了服务名sayHello，并没有包含服务所在的主机名和端口号，换句话说，该url其实是通过注册中心定位到sayHello服务的物理位置的。&lt;/p&gt;
&lt;p&gt;    至于这个url和该服务物理位置的绑定关系，是在Eureka内部实现的，这也是Eureka可以被称作“服务发现框架”的原因。&lt;/p&gt;
&lt;p&gt;    第四步，在ServiceCallerApp.java方法里，我们编写启动本服务的代码，这我们已经很熟悉了，所以就不再讲述了。    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
1    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;省略必要的package和import代码&lt;/span&gt;
2&lt;span&gt;    @EnableDiscoveryClient
&lt;/span&gt;3&lt;span&gt;    @SpringBootApplication
&lt;/span&gt;4    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ServiceCallerApp 
&lt;/span&gt;5&lt;span&gt;    {
&lt;/span&gt;6        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main( String[] args )
&lt;/span&gt;7        {SpringApplication.run(ServiceCallerApp.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args); }
&lt;/span&gt;8    }
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.4 通过服务调用者调用服务&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;    当我们依次启动Eureka服务器（也就是注册中心）、服务提供者和服务调用者的Spring Boot启动程序后，在浏览器里输入&lt;a href=&quot;http://localhost:8888/&quot;&gt;http://localhost:8888/&lt;/a&gt;后，能在信息面板里看到有两个服务，分别是服务提供者SayHello和服务调用者CallHello，如下图所示。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201802/1226172-20180226072939829-650923573.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    由于服务调用者运行在8080端口上，所以如果我们在浏览器里输入&lt;a href=&quot;http://localhost:8080/hello&quot;&gt;http://localhost:8080/hello&lt;/a&gt;，能看到在浏览器里输出“In Caller, hello Eureka”，这就说明它确实已经调用了服务提供者SayHello里的hello方法。&lt;/p&gt;
&lt;p&gt;    此外，我们还能在服务提供者所在的控制台里看到host、port和ServiceID的输出，如下图所示，这能进一步验证了服务提供者里控制器类里的hello方法被服务调用者调到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201802/1226172-20180226073005548-359706617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 25 Feb 2018 23:32:00 +0000</pubDate>
<dc:creator>hsm_computer</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JavaArchitect/p/8471364.html</dc:identifier>
</item>
<item>
<title>并行执行 Job - 每天5分钟玩转 Docker 容器技术（134） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8468533.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8468533.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;span&gt;有时，我们希望能同时运行多个 Pod，提高 Job 的执行效率。这个可以通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;parallelism&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 设置。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201802/775365-20180225065308180-1785377375.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里我们将并行的 Pod 数量设置为 2，实践一下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201802/775365-20180225065319568-1592843931.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Job 一共启动了两个 Pod，而且 &lt;/span&gt;&lt;code&gt;&lt;span&gt;AGE&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 相同，可见是并行运行的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;我们还可以通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;completions&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 设置 Job 成功完成 Pod 的总数：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201802/775365-20180225065331662-290456936.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面配置的含义是：每次运行两个 Pod，直到总共有 6 个 Pod 成功完成。实践一下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201802/775365-20180225065344139-203138608.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;DESIRED&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;SUCCESSFUL&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 均为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;6&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，符合预期。如果不指定 &lt;/span&gt;&lt;code&gt;&lt;span&gt;completions&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;parallelism&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，默认值均为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面的例子只是为了演示 Job 的并行特性，实际用途不大。不过现实中确实存在很多需要并行处理的场景。比如批处理程序，每个副本（Pod）都会从任务池中读取任务并执行，副本越多，执行时间就越短，效率就越高。这种类似的场景都可以用 Job 来实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下一节我们讨论如何定时执行 Job。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;书籍：&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;br/&gt;&lt;/span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 25 Feb 2018 22:59:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8468533.html</dc:identifier>
</item>
<item>
<title>SQL查询练习一(From LeetCode) - 月上贺兰</title>
<link>http://www.cnblogs.com/luhuajun/p/8471107.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/luhuajun/p/8471107.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt; 请选用MySQL进行测试.&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1.找出后一天比前一天温度高的日期(E)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180225225249239-816568138.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;思路:将该表进行自关联,然后选择出日期靠后的一天,最后选择温度高的日期&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_6c6e67bf-4763-4a43-9de7-bce6735df092&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6c6e67bf-4763-4a43-9de7-bce6735df092&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6c6e67bf-4763-4a43-9de7-bce6735df092&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt;&lt;span&gt; Weather.Id
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; Weather &lt;span&gt;join&lt;/span&gt;&lt;span&gt; Weather w
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; &lt;span&gt;datediff&lt;/span&gt;(Weather.Date,w.Date) &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; Weather.Temperature &lt;span&gt;&amp;gt;&lt;/span&gt; w.Temperature
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;2.找出人口在3百万或者领土面积在25百万的国家(E)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180225230500643-528462065.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180225230617548-1054744166.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;思路:使用where进行条件过筛选,or进行或判断&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_a19e9919-7673-4274-9fc1-622a1b54ae24&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a19e9919-7673-4274-9fc1-622a1b54ae24&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a19e9919-7673-4274-9fc1-622a1b54ae24&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt;&lt;span&gt; name,population,area
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; World
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; area &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;3000000&lt;/span&gt; &lt;span&gt;or&lt;/span&gt; population &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;25000000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_opened_d32fbda5-fc07-4dda-becd-b947b3054cdf&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d32fbda5-fc07-4dda-becd-b947b3054cdf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt;&lt;span&gt; name,population,area
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; World
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; area &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;3000000&lt;/span&gt; &lt;span&gt;or&lt;/span&gt; population &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;2500000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;3.判断是否是三角形(E)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180225231144342-946823739.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;思路,使用case when进行搭配,使用三角形定义进行判断x+y&amp;gt;z,x+z&amp;gt;y,y+z&amp;gt;x&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_3fe17529-1d28-470b-b02a-452d00ca3531&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3fe17529-1d28-470b-b02a-452d00ca3531&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3fe17529-1d28-470b-b02a-452d00ca3531&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt;&lt;span&gt; x,y,z,
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;case&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;when&lt;/span&gt; x&lt;span&gt;+&lt;/span&gt;y&lt;span&gt;&amp;gt;&lt;/span&gt;z &lt;span&gt;and&lt;/span&gt; y&lt;span&gt;+&lt;/span&gt;z&lt;span&gt;&amp;gt;&lt;/span&gt;x &lt;span&gt;and&lt;/span&gt; x&lt;span&gt;+&lt;/span&gt;z&lt;span&gt;&amp;gt;&lt;/span&gt;y &lt;span&gt;then&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Yes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;No&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; triangle 
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; triangle 
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 4.找出薪水第二高的员工&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180225231512903-131241618.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;思路:先找出最多的薪水的员工,在把他的薪水小于最大的工资即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_0adfa1ec-0d2c-4526-bb1b-c5799f4f2d7c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0adfa1ec-0d2c-4526-bb1b-c5799f4f2d7c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0adfa1ec-0d2c-4526-bb1b-c5799f4f2d7c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;Max&lt;/span&gt;(Salary) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; SecondHighestSalary 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; Employee 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; Salary &lt;span&gt;&amp;lt;&lt;/span&gt; (&lt;span&gt;select&lt;/span&gt; &lt;span&gt;Max&lt;/span&gt;(Salary) &lt;span&gt;from&lt;/span&gt; Employee)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;5.找出每个学科都有多少名学生(&lt;span&gt;M&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180225232411000-929466372.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;思路:将两张表进行左连接,一department表作为主表,然后按照dept_name进行分组,最后按照人数进行降序排列&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_44ebb7cd-a2f4-4d2f-9a3d-709b5323539e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_44ebb7cd-a2f4-4d2f-9a3d-709b5323539e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_44ebb7cd-a2f4-4d2f-9a3d-709b5323539e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; d.dept_name,&lt;span&gt;count&lt;/span&gt;(student_id) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; student_number
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; department d &lt;span&gt;left&lt;/span&gt; &lt;span&gt;join&lt;/span&gt;&lt;span&gt; Student s
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; d.dept_id &lt;span&gt;=&lt;/span&gt;&lt;span&gt; s.dept_id
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt;&lt;span&gt; d.dept_name
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; student_number &lt;span&gt;desc&lt;/span&gt;,d.dept_name
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;6.找出每个部门薪水最高的员工(&lt;span&gt;M&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180225232716239-1809571243.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;思路:将两张表进行连接,内层查询根据department表的name进行分组,每组的最大值,既是每个部门的薪水最大值,然后传递给外层的部门id和薪水即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_3ea4d676-9393-45c4-b785-3a8efee52eaf&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3ea4d676-9393-45c4-b785-3a8efee52eaf&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3ea4d676-9393-45c4-b785-3a8efee52eaf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; d.Name &lt;span&gt;as&lt;/span&gt; Department,e.Name &lt;span&gt;as&lt;/span&gt; Employee,e.Salary &lt;span&gt;as&lt;/span&gt;&lt;span&gt; Salary
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; Department d &lt;span&gt;join&lt;/span&gt;&lt;span&gt; Employee e
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; e.DepartmentId &lt;span&gt;=&lt;/span&gt;&lt;span&gt; d.Id
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; (e.DepartmentId,e.Salary) &lt;span&gt;in&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;(
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;select&lt;/span&gt; DepartmentId,&lt;span&gt;max&lt;/span&gt;&lt;span&gt;(Salary)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;from&lt;/span&gt;&lt;span&gt; Employee
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     &lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt;&lt;span&gt; DepartmentId
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; )
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;7.找出至少有5名下属的领导(&lt;span&gt;M&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180225233240754-1219995282.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;思路:使用内层查询查找出有5名下属的ManagerId然后,将外层查询的员工Id=ManagerId就是查询的结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_37dfd44d-d6b7-491a-9848-baf6e5799092&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_37dfd44d-d6b7-491a-9848-baf6e5799092&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_37dfd44d-d6b7-491a-9848-baf6e5799092&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt;&lt;span&gt; e1.Name
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; Employee e1
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;join&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;(
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;select&lt;/span&gt; ManagerId &lt;span&gt;from&lt;/span&gt;&lt;span&gt; Employee
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt;&lt;span&gt; ManagerId
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;having&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;) &lt;span&gt;&amp;gt;=&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; ) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; e2
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; e1.Id &lt;span&gt;=&lt;/span&gt; e2.ManagerId
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;8.找出得票最多的候选人(&lt;span&gt;M&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180225234433384-719145137.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;思路:先在内层查询中找出最受欢迎的候选人,然后将中间表的候选人Id既是赢家的候选人id,两者相等即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_96dbdbbf-85d7-4095-a801-7888a5fcb53b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_96dbdbbf-85d7-4095-a801-7888a5fcb53b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_96dbdbbf-85d7-4095-a801-7888a5fcb53b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt;&lt;span&gt; c.Name
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; Candidate c
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;join&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;(
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;select&lt;/span&gt; CandidateId  &lt;span&gt;from&lt;/span&gt;&lt;span&gt; Vote
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt;&lt;span&gt; CandidateId  
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;) &lt;span&gt;desc&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     limit &lt;span&gt;1&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; ) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; winner
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; c.id &lt;span&gt;=&lt;/span&gt; winner.CandidateId;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;9.根据Score计算等级(&lt;span&gt;M&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180225235622155-1449403367.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;思路:将两张表进行自连接,根据Id进行分组,最后根据Rank进行排序&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_d1772c4b-ec2c-4a22-a5a7-7b7b583bee8f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d1772c4b-ec2c-4a22-a5a7-7b7b583bee8f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d1772c4b-ec2c-4a22-a5a7-7b7b583bee8f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; s.Score,&lt;span&gt;count&lt;/span&gt;(&lt;span&gt;distinct&lt;/span&gt; t.Score) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; Rank
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; Scores s &lt;span&gt;join&lt;/span&gt;&lt;span&gt; Scores t
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; s.Score &lt;span&gt;&amp;lt;=&lt;/span&gt;&lt;span&gt; t.Score
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt;&lt;span&gt; s.Id
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; Rank 
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;10.找出二叉树的节点分布(&lt;span&gt;M&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180226000547472-763845619.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;思路:使用case when的结构进行循环判断输出&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_5deea2d5-d079-4ca6-9146-77f6af464c43&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5deea2d5-d079-4ca6-9146-77f6af464c43&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5deea2d5-d079-4ca6-9146-77f6af464c43&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt;&lt;span&gt; id,
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;case&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;when&lt;/span&gt; tree.id &lt;span&gt;=&lt;/span&gt; (&lt;span&gt;select&lt;/span&gt; atree.id &lt;span&gt;from&lt;/span&gt; tree atree &lt;span&gt;where&lt;/span&gt; atree.p_id &lt;span&gt;is&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;then&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;when&lt;/span&gt; tree.id &lt;span&gt;in&lt;/span&gt; (&lt;span&gt;select&lt;/span&gt; atree.p_id &lt;span&gt;from&lt;/span&gt;&lt;span&gt; tree atree)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;then&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Inner&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Leaf&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; Type
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; tree
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; id
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;11.找出每个部门薪水排前三名的员工(&lt;span&gt;H&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180226002307673-257683976.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;思路:先进行表连接,将内层查询的结果和外部的表的Salary相比较,选择前面3个&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_5d3af2fe-db80-4b29-b309-af516df3d735&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5d3af2fe-db80-4b29-b309-af516df3d735&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5d3af2fe-db80-4b29-b309-af516df3d735&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; d.Name &lt;span&gt;as&lt;/span&gt; Department,e.Name &lt;span&gt;as&lt;/span&gt;&lt;span&gt; Employee,e.Salary
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; Employee e &lt;span&gt;join&lt;/span&gt;&lt;span&gt; Department d
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; e.DepartmentId &lt;span&gt;=&lt;/span&gt;&lt;span&gt; d.Id
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;(
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;select&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;distinct&lt;/span&gt;&lt;span&gt; e2.Salary)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;from&lt;/span&gt;&lt;span&gt; Employee e2
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;where&lt;/span&gt; e2.Salary &lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; e.Salary
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;and&lt;/span&gt; e.DepartmentId &lt;span&gt;=&lt;/span&gt;&lt;span&gt; e2.DepartmentId
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; )
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;12.找出2013-10-01到2013-10-03之间的网约车的取消率(&lt;span&gt;H&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180226003438650-718473297.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180226003457948-1645865706.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;思路:计算取消率,使用case when语法,找出Trips中Status变量以canceled_开头的比例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_c39d6a0f-165d-4185-af48-e1bd0834e080&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c39d6a0f-165d-4185-af48-e1bd0834e080&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c39d6a0f-165d-4185-af48-e1bd0834e080&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; t.Request_at &lt;span&gt;as&lt;/span&gt; &lt;span&gt;Day&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;round&lt;/span&gt;(&lt;span&gt;sum&lt;/span&gt;(&lt;span&gt;case&lt;/span&gt; &lt;span&gt;when&lt;/span&gt; t.Status &lt;span&gt;like&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cancelled_%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;)&lt;span&gt;/&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;),&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; &quot;Cancellation Rate&quot;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; Trips t &lt;span&gt;join&lt;/span&gt;&lt;span&gt; Users u
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; t.Client_Id &lt;span&gt;=&lt;/span&gt;&lt;span&gt; u.Users_Id  
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; u.Banned &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;No&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; t.Request_at &lt;span&gt;between&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-10-01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2013-10-03&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; t.Request_at
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;13.找出每个部门员工薪水的中位数(&lt;span&gt;H&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180226004754059-418257192.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;思路:将此表进行自关联,计算工资的中位数,使用case when计算中间表的中位数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_7504cc3b-d5ba-4170-843a-490e7b67dcd2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7504cc3b-d5ba-4170-843a-490e7b67dcd2&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7504cc3b-d5ba-4170-843a-490e7b67dcd2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt;&lt;span&gt; e.Id,e.Company,e.Salary
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; Employee e &lt;span&gt;join&lt;/span&gt;&lt;span&gt; Employee aliens
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; e.Company &lt;span&gt;=&lt;/span&gt;&lt;span&gt; aliens.Company
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt;&lt;span&gt; e.Company,e.Salary
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;having&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(&lt;span&gt;case&lt;/span&gt; &lt;span&gt;when&lt;/span&gt; e.Salary &lt;span&gt;=&lt;/span&gt; aliens.Salary &lt;span&gt;then&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;) &lt;span&gt;&amp;gt;=&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;abs&lt;/span&gt;(&lt;span&gt;sum&lt;/span&gt;(&lt;span&gt;sign&lt;/span&gt;(e.Salary&lt;span&gt;-&lt;/span&gt;&lt;span&gt;aliens.Salary)))
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; e.Id
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 25 Feb 2018 16:55:00 +0000</pubDate>
<dc:creator>月上贺兰</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/luhuajun/p/8471107.html</dc:identifier>
</item>
<item>
<title>Java中InputStream装饰器模式的大家族 - Pushy</title>
<link>http://www.cnblogs.com/Pushy/p/8471286.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Pushy/p/8471286.html</guid>
<description>&lt;blockquote readability=&quot;5.1153846153846&quot;&gt;
&lt;p&gt;你好！欢迎阅读我的博文，你可以跳转到&lt;a href=&quot;http://blog.pushy.site/posts/1519577691&quot;&gt;我的个人博客网站&lt;/a&gt;，会有更好的排版效果和功能。&lt;br/&gt;此外，本篇博文为本人Pushy原创，如需转载请注明出处：&lt;a href=&quot;http://blog.pushy.site/posts/1519577691&quot; class=&quot;uri&quot;&gt;http://blog.pushy.site/posts/1519577691&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5.6132075471698&quot;&gt;
&lt;p&gt;本文写在po主初学JAVA时，在学习inputStream摸不着头脑，受&lt;a href=&quot;https://mp.weixin.qq.com/s/hDJs6iG_YPww7yeiPxmZLw&quot;&gt;Java IO-InputStream家族 -装饰者模式&lt;/a&gt;一文启发，所以在理清思路时写下本文。因为初学，如有错误，望指正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为和输入流与之对应的还有输出流（即OutputStream），在此只针对输入流InputStream讨论。&lt;/p&gt;
&lt;h2 id=&quot;家族老大&quot;&gt;1. 家族老大：&lt;/h2&gt;
&lt;p&gt;一说起家族中的老大，&lt;code&gt;InputStream&lt;/code&gt;自然是当仁不让，在java的输入流操作的类中，衍生出的基本子类有，可以理解为这些都是&lt;code&gt;InputStream&lt;/code&gt;它的孩子（子类）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pan.pushy.site/_uploads/files/inputStreampic2.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;InputStream&lt;/code&gt;作为所有输入流中的超类，包含从输入流读取数据的基本方法，所有的具体类都包含了这些方法，例如&lt;code&gt;read()&lt;/code&gt;方法，它将读取一个字节并将其以&lt;code&gt;int&lt;/code&gt;类型返回，当到达输入流的结尾时，返回&lt;code&gt;-1&lt;/code&gt;，因此我们常常这样操作：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt; data;
&lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; ((data = (&lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;) bis.&lt;span class=&quot;fu&quot;&gt;read&lt;/span&gt;()) != -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) {
    &lt;span class=&quot;co&quot;&gt;// 当没有达到输入流的结尾时，继续读取并打印转换成char类型的字符：&lt;/span&gt;
    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt;((&lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;) data);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码不了解不要紧，现在我们开始正式介绍InputStream家族。&lt;/p&gt;
&lt;h2 id=&quot;家族孩子&quot;&gt;2. 家族孩子：&lt;/h2&gt;
&lt;p&gt;家族中的子类各司其职，老大&lt;code&gt;FileInputStream&lt;/code&gt;处理文件流，老二&lt;code&gt;ByteArrayInputStream&lt;/code&gt;处理字节数组流...&lt;/p&gt;
&lt;p&gt;例如，我们来看下老大是怎么工作的：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import java.io.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Date;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; FileInputStreamTest {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception{
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;// 创建FileInputStream对象：&lt;/span&gt;
            FileInputStream fis = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span class=&quot;st&quot;&gt;&quot;E:&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;text.txt&quot;&lt;/span&gt;);
            &lt;span class=&quot;co&quot;&gt;// 得到起始时间：&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; start = System.&lt;span class=&quot;fu&quot;&gt;currentTimeMillis&lt;/span&gt;( );
            &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt; byteData;
            &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; ((byteData = (&lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;) bis.&lt;span class=&quot;fu&quot;&gt;read&lt;/span&gt;()) != -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) {
                System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt;((&lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;) byteData);
            }
            &lt;span class=&quot;co&quot;&gt;// 得到读取后的结束时间：&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; end = System.&lt;span class=&quot;fu&quot;&gt;currentTimeMillis&lt;/span&gt;( );
            &lt;span class=&quot;co&quot;&gt;// 计算出读取的时间：&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; diff = end - start;
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;读取的时间时间共：&quot;&lt;/span&gt; +  diff);
            fis.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
            e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;工作完成后，我们可以得到老大干完活的花费的时间为：&lt;code&gt;1097&lt;/code&gt;，但是家族老大嫌这家伙干活太慢了。老大无奈，叫来了它的弟弟老二&lt;code&gt;BufferedInputStream&lt;/code&gt;，俗话说啊，兄弟齐心，其利断金。果不其然，兄弟俩一块干活效率果然加快了不少：&lt;/p&gt;
&lt;p&gt;在如下的代码中我们可以看到，通过将&lt;code&gt;FileInputStream&lt;/code&gt;放到&lt;code&gt;BufferedInputStream&lt;/code&gt;中的构造方法中去创建&lt;code&gt;BufferedInputStream&lt;/code&gt;对象，这样&lt;code&gt;FileInputStream&lt;/code&gt;也就具有了缓存的输入流功能。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; BufInputStream {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception{
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;// 通过缓冲区数据向输入流添加功能，维护一个内部缓冲区以存储从底层输入流读取的字节：&lt;/span&gt;
            BufferedInputStream bis  = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; BufferedInputStream(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span class=&quot;st&quot;&gt;&quot;E:&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;text.txt&quot;&lt;/span&gt;));
            &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; start = System.&lt;span class=&quot;fu&quot;&gt;currentTimeMillis&lt;/span&gt;( );
            &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt; byteData;
            &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; ((byteData = (&lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;) fis.&lt;span class=&quot;fu&quot;&gt;read&lt;/span&gt;()) != -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) {
                System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt;((&lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;) byteData);
            }
            &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; end = System.&lt;span class=&quot;fu&quot;&gt;currentTimeMillis&lt;/span&gt;( );
            &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; diff = end - start;
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;读取的时间时间共：&quot;&lt;/span&gt; +  diff);
            bis.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
            e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们来看下兄弟俩一块工作花费的时间吧：&lt;code&gt;281&lt;/code&gt;。嘿！果然快了不少！看来增加缓冲流的功能的效果的确十分明显。&lt;/p&gt;
&lt;p&gt;这下老二在家族的名声增大了不少，许多的兄弟都找他搭档干活了。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;3. 总结：&lt;/h2&gt;
&lt;p&gt;通过上文的假设，我们可以明白了在&lt;code&gt;io-InputStream&lt;/code&gt;的家族中，采用了装饰者的设计模式，即不改变原类文件和使用继承的前提下，动态地扩展一个对象的功能（比如说这里的支持缓冲流），通过创建一个包装对象（这里的&lt;code&gt;BufferedInputStream&lt;/code&gt;），也就是装饰包裹真实的对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pan.pushy.site/_uploads/files/inputstremampic.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;例如我们还可以也&lt;code&gt;ByteArrayInputStream&lt;/code&gt;中修饰&lt;code&gt;PushbackInputStream&lt;/code&gt;类：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;PushbackInputStream  pbi = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; PushbackInputStream (&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ByteArrayInputStream(b));&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ByteArrayInputStream&lt;/code&gt;是处理字节数组流；&lt;code&gt;PushbackInputStream&lt;/code&gt;是向输入流中添加功能，允许使用&lt;code&gt;unread()&lt;/code&gt;方法推回读取的字节。这样我们就可以使用&lt;code&gt;pbi&lt;/code&gt;对象处理字节数组，还具有推回读取字节的功能了：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import java.io.*;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; BAStreamAndPBStream {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException{
        &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[] b = {&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;};
        PushbackInputStream  pbi = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; PushbackInputStream (&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ByteArrayInputStream(b));
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; result;
        &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; ((result = pbi.&lt;span class=&quot;fu&quot;&gt;read&lt;/span&gt;()) != -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) {
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt;(result + &lt;span class=&quot;st&quot;&gt;&quot; &quot;&lt;/span&gt;);
            pbi.&lt;span class=&quot;fu&quot;&gt;unread&lt;/span&gt;(result);
            pbi.&lt;span class=&quot;fu&quot;&gt;read&lt;/span&gt;();
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt;(result + &lt;span class=&quot;st&quot;&gt;&quot; &quot;&lt;/span&gt;);
        }
        pbi.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
    }
}

&lt;span class=&quot;co&quot;&gt;// 运行结果为：&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 1 1 2 2 3 3 &lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，有关&lt;code&gt;InputStream&lt;/code&gt;的大家族到这里介绍完了！如果你还有不明白的，可以阅读一下文章&lt;a href=&quot;https://mp.weixin.qq.com/s/hDJs6iG_YPww7yeiPxmZLw&quot;&gt;Java IO-InputStream家族 -装饰者模式&lt;/a&gt;。&lt;/p&gt;
</description>
<pubDate>Sun, 25 Feb 2018 16:52:00 +0000</pubDate>
<dc:creator>Pushy</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Pushy/p/8471286.html</dc:identifier>
</item>
<item>
<title>xBIM WeXplorer xViewer的导航，相机、剖切、隐藏 等操作 - 在 水 一 方</title>
<link>http://www.cnblogs.com/w2011/p/8471164.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/w2011/p/8471164.html</guid>
<description>&lt;h3&gt;   目录&lt;/h3&gt;
&lt;h5&gt;  &lt;span&gt;  基础&lt;/span&gt;&lt;/h5&gt;
&lt;h5&gt;&lt;span&gt;     高级应用&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;xBIM 综合使用案例与 ASP.NET MVC 集成（一）&lt;/li&gt;
&lt;li&gt;xBIM 综合使用案例与 ASP.NET MVC 集成（二）&lt;/li&gt;
&lt;li&gt;xBIM 综合使用案例与 ASP.NET MVC 集成（三）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;     在本次我们探讨&lt;span&gt;xViewer&lt;/span&gt; 的导航、剖切、隐藏、相机位置。这应该足以让用户通过所有缩放、平移和隐藏可能的障碍物来检查建筑物内部。&lt;/p&gt;
&lt;h4&gt; 1、相机位置&lt;/h4&gt;
&lt;p&gt;     根据产品的ID设置相机目标很容易。可能最常见的方法是根据用户操作设置一个目标。这些需要用户选择按钮或者鼠标操作来设置。如下例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
viewer.on('pick', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (args) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; id =&lt;span&gt; args.id;
    viewer.setCameraTarget(id);
    pickedId &lt;/span&gt;=&lt;span&gt; id;
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    使用 &lt;span&gt;setCameraTarget()&lt;/span&gt; 方法设置相机位置也很容易，如下实例将使用HTML输入来设置值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;camX&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;-15000&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;camY&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;-15000&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;camZ&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;15000&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;SetCamera()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Set camera&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; SetCamera() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (viewer) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; iX &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;camX&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; iY &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;camY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; iZ &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;camZ&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            viewer.setCameraPosition([iX.value, iY.value, iZ.value]);
        }
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;     能够向模型或零件显示默认轴对齐视图总是很重要的。&lt;/span&gt;&lt;span&gt;这是xViewer的内置功能。&lt;/span&gt;&lt;span&gt;它始终根据&lt;/span&gt;&lt;/span&gt;&lt;span&gt;setCameraTarget（）&lt;/span&gt;&lt;span&gt;&lt;span&gt;方法&lt;/span&gt;&lt;span&gt;设置的原点和距离进行操作&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;在该示例中，每当用户选择如上所列的元素时，相机目标被设置。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.show('front');&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;前&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.show('back');&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;后&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.show('top');&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;上&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.show('bottom');&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;下&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.show('left');&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;左&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.show('right');&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;右&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;      xViewer 只使用浏览器的默认导航功能，&lt;span&gt;这些功能在鼠标左键轨道上运行，平移中键和放大滚动键。&lt;/span&gt;&lt;span&gt;这应该是 直观的。&lt;/span&gt;&lt;span&gt;请注意，查看器的最佳做法是将其放在一个没有垂直滚动条的页面上。&lt;/span&gt;&lt;span&gt;因为缩放模型并同时滚动网站，缩放很难。&lt;/span&gt;&lt;span&gt;如果您希望这样做，可以使用以下代码更改左按钮的默认行为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.navigationMode = 'orbit';&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 旋转 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.navigationMode = 'free-orbit';&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 自由旋转 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.navigationMode = 'pan';&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 平移 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.navigationMode = 'zoom';&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 缩放 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.navigationMode = 'none';&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 完全禁用默认导航 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;     当模型绕Z轴旋转时，默认轨道模式是固定的旋转。&lt;/span&gt;&lt;span&gt;您也可以使用围绕实际轴旋转模型的自由旋转，因此更自由。&lt;/span&gt;&lt;span&gt;你可以用这个从不同寻常的角度看模型。&lt;/span&gt;&lt;span&gt;就像提示一样 - 如果需要的话，画圆圈来调整水平面。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;2、剖切&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;     剖切我们会经常使用，用户想要看到建筑物内部深处的东西。建筑物内部的导航可能会很容易变得复杂，&lt;/span&gt;但如果您可以剖切建筑物并看到内部，则可以让用户的操作变得更加轻松。这也是默认情况下在查看器中构建的。如果您将平面上的点和平面上的点传递给方法，您可以使用&lt;span&gt;clip(）&lt;/span&gt;方法自己设置裁剪平面，或者如果您调用没有参数的方法，您可以让用户以交互方式定义裁剪平面。使用&lt;span&gt;unclip()&lt;/span&gt;方法比完全放弃剪辑。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.clip();&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;开始剖切&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.unclip();&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;取消剖切&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;clipOrigX&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;clipOrigY&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;clipOrigZ&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;clipNormX&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;-1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;clipNormY&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;clipNormZ&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;Clip()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;剖切&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Clip() {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; oX &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;clipOrigX&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; oY &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;clipOrigY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; oZ &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;clipOrigZ&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; nX &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;clipNormX&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; nY &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;clipNormY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; nZ &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;clipNormZ&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value;

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (viewer)
            viewer.clip([oX, oY, oZ], [nX, nY, nZ]);
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt; 3、隐藏&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;      有时你也需要隐藏一个元素或一种元素，让我们说所有的墙壁。&lt;/span&gt;&lt;span&gt;这可以通过使用&lt;/span&gt;&lt;/span&gt;&lt;span&gt;setState（）&lt;/span&gt;&lt;span&gt;方法设置产品的状态来实现。使用&lt;/span&gt;&lt;span&gt;resetStates（）&lt;/span&gt;&lt;span&gt;&lt;span&gt;方法将所有状态重置为默认状态。&lt;/span&gt;&lt;span&gt;此方法有一个可选参数，您可以使用它来显示空格。&lt;/span&gt;&lt;span&gt;这些都是默认隐藏的，除非您将它们显示为manualy。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;cmbHide&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;noAction&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;无操作&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;hideProduct&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;隐藏产品&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;hideType&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;隐藏类型&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;highlight&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;高亮&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.resetStates()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;显示所有&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; initHiding() {
        viewer.on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pick&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (args) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; cmb &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cmbHide&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; option &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; cmb.value;
            &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (option) {
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hideProduct&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                    viewer.setState(xState.HIDDEN, [args.id]);
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hideType&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; type &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; viewer.getProductType(args.id);
                    viewer.setState(xState.HIDDEN, type);
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;highlight&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                    viewer.setState(xState.HIGHLIGHTED, [args.id]);
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
        });
    };
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 25 Feb 2018 16:19:00 +0000</pubDate>
<dc:creator>在 水 一 方</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/w2011/p/8471164.html</dc:identifier>
</item>
<item>
<title>程序结构 - 学海无涯...继续学</title>
<link>http://www.cnblogs.com/learn-now/p/8471014.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/learn-now/p/8471014.html</guid>
<description>&lt;p&gt;名称：&lt;/p&gt;
&lt;p&gt;go语言中函数、变量、常量、类型、语句标签和包的名称规则：字母或下划线开头，后跟任意数量的字符、数字、下划线，&lt;span&gt;区分大小写&lt;/span&gt;，即heapSort和heapsort是不通名称；&lt;/p&gt;
&lt;p&gt;部分预声明的常量、类型和函数,可以重新声明，但有冲突风险；&lt;/p&gt;
&lt;p&gt;如果一个实体在函数中声明，则他只在函数局部有效。在函数外声明则对包里所有源文件可见。实体首字母大写则跨包可见且可访问；&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1305220/201802/1305220-20180225233507162-978061161.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 25 Feb 2018 15:28:00 +0000</pubDate>
<dc:creator>学海无涯...继续学</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/learn-now/p/8471014.html</dc:identifier>
</item>
<item>
<title>浮动元素的高度怎么撑起 - 小僵尸</title>
<link>http://www.cnblogs.com/yigexiaojiangshi/p/8471130.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yigexiaojiangshi/p/8471130.html</guid>
<description>&lt;p&gt;&lt;strong&gt;当我们给子元素设置float不为none的属性值时，会导致父元素高度塌陷的两种情况&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;其父元素刚好没有设置高度；那么此时的父元素是没有高度的。&lt;/li&gt;
&lt;li&gt;其父元素设置的高度不够，导致子元素溢出；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当我们给li 元素高度，并都向左浮动时，ul 的高度为0&lt;/p&gt;
&lt;p&gt;如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031157/201802/1031157-20180225230938425-2081894865.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决办法：&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;18&quot;&gt;
&lt;p&gt;&lt;strong&gt;开启BFC：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　设置该元素overflow属性为除去visible的属性值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                  设置元素的float属性为除去 none 的属性值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                  将元素设置为绝对定位absolute&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                  将元素的display属性设置为:inline-block或table-cell,flex,inline-flex&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;清除浮动&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;给父元素增加合适的高度&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/h4&gt;
&lt;/div&gt;

</description>
<pubDate>Sun, 25 Feb 2018 15:25:00 +0000</pubDate>
<dc:creator>小僵尸</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yigexiaojiangshi/p/8471130.html</dc:identifier>
</item>
<item>
<title>js到底new了点啥 - 阿尔卑斯de秘密</title>
<link>http://www.cnblogs.com/lunlunshiwo/p/8466902.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lunlunshiwo/p/8466902.html</guid>
<description>&lt;p&gt;　　在最开始学习js的时候，我看书上写着，创建一个数组，一个对象通常使用new，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt;  arr=&lt;span&gt;new&lt;/span&gt; Array(),&lt;span&gt;//&lt;/span&gt;&lt;span&gt;arr=[]&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;      obj=&lt;span&gt;new&lt;/span&gt; Object();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;obj={}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　到了后来，我们开始进行面向对象的学习的时候就开始遇到下面的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Qwe(id) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; Qwe.prototype.name = 'qwe'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; Qwe.prototype.age=18;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; asd = &lt;span&gt;new&lt;/span&gt; Qwe(2);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　有一点基础的同学就可以得知我们按照&lt;strong&gt;Qwe&lt;/strong&gt;的样子制作了一个&lt;strong&gt;asd&lt;/strong&gt;，并且给了他一个独一无二的&lt;strong&gt;id&lt;/strong&gt;为&lt;strong&gt;2&lt;/strong&gt;。在这简单的几个代码中，我们就完成了对一个数组或者对象的创建，而new究竟在其中做了点啥呢？&lt;/p&gt;
&lt;p&gt;　　根据英语的字面意思翻译，new的意思是新的，也就是说创建arr，并且给arr赋值为新的数组（obj同理）。其实不然，我们在new的过程中只是模仿一个&lt;strong&gt;模子&lt;/strong&gt;（Array也好，Object也罢）新建了一个对象，并且继承了我们所使用的模子的一些方法和内容。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Qwe(id) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; Qwe.prototype.name = 'qwe'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; Qwe.prototype.age=18&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; asd = &lt;span&gt;new&lt;/span&gt; Qwe(2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; asd.id&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; asd.name&lt;span&gt;//&lt;/span&gt;&lt;span&gt;'qwe'&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; asd.age&lt;span&gt;//&lt;/span&gt;&lt;span&gt;18&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　就拿上面的asd来说，它的id是构造函数Qwe设置的，除此之外所有的属性和方法都是继承自Qwe的原型对象——prototype属性。&lt;/p&gt;
&lt;p&gt;　　如果你上面的没看懂，那我就用通俗的语言来讲解一下。&lt;/p&gt;
&lt;p&gt;　　高中的时候其实很学渣，渣到上课天天玩手机（至于后来奋发图强混进一本院校是后话），当时玩了一款qq家园里面叫《江湖ol》的游戏。当时我玩的那个区是五区，仗着网速好手机好在那个区也算是排行榜前几的玩家。当时情人节搞活动，抽奖送坐骑情情兔，现在看来只不过是一堆可能有规律的乱码而已。因为时间过去很久了，我也无法完全想起所有，大概就是：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;情情兔
编号：&lt;/span&gt;00001&lt;span&gt;
速度：&lt;/span&gt;50&lt;span&gt;
防御：&lt;/span&gt;37&lt;span&gt;
敏捷：&lt;/span&gt;21&lt;span&gt;
攻击力：&lt;/span&gt;37&lt;span&gt;
生命值：&lt;/span&gt;500
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　因为我获得的是当时的全区第一个情情兔，所以我的编号是00001。用现在的眼光来看，无非是以下的样子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
情情兔 =&lt;span&gt; {
     编号: &lt;/span&gt;00001&lt;span&gt;,
     速度速度: &lt;/span&gt;50&lt;span&gt;,
     防御: &lt;/span&gt;37&lt;span&gt;,
     敏捷: &lt;/span&gt;21&lt;span&gt;,
     攻击力: &lt;/span&gt;37&lt;span&gt;,
     生命值: &lt;/span&gt;500&lt;span&gt;,
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当我后来研究我和我朋友的装备的时候，我发现我的天字一号马和朋友的天字n号马的属性居然只有编号的差别！！！那么，无良的同行在制作这个坐骑的时候大概就是改一下编号吧：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; 情情兔数组=[];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;安置情情兔坐骑&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;1000;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 　  &lt;span&gt;var&lt;/span&gt;&lt;span&gt; 情情兔 ;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;      情情兔 =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;           编号: i,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;差别在此&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;           速度速度: 50&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;           防御: 37&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;           敏捷: 21&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;           攻击力: 37&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;           生命值: 500&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    } 
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    情情兔数组.push(情情兔);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 加载生产(情情兔数组);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;制作了大批量的有编号的情情&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　但是问题是，在这个伪代码中，我们要重复创建1000次的情情兔，然后给它赋值的对象值的属性仅仅有一个是不同的，这样就造成了一定意义上的浪费。作为一个勤（lan）奋（duo）的程序员，这种问题我们应为这样去做：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; 情情兔数组=[];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;安置情情兔坐骑&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;1000;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 　  &lt;span&gt;var&lt;/span&gt;&lt;span&gt; 情情兔 ;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;      情情兔=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; 情情兔模板(i);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;    情情兔数组.push(情情兔);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; 加载生产(情情兔数组);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;制作了大批量的有编号的情情&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　因此，我们可以先创造一个坐骑原型——情情兔模板，在这个里面的prototype呢我们放置所有相同数值的属性为新创建的对象提供可以继承属性的路径或者说目标。我们用new来实现一下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function &lt;/span&gt;情情兔模板&lt;span&gt;(id){&lt;br/&gt;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id=&lt;span&gt;id &lt;br/&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;情情兔模板&lt;/span&gt;&lt;span&gt;.prototype.速度&lt;/span&gt;=50
&lt;/pre&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;span&gt;情情兔模板&lt;/span&gt;&lt;span&gt;.prototype.防御&lt;/span&gt;=37&lt;p&gt;情情兔模板&lt;span&gt;.prototype敏捷&lt;/span&gt;=21
&lt;/p&gt;&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;情情兔模板&lt;/span&gt;.prototype攻击力=37
&lt;/pre&gt;
&lt;pre&gt;
情情兔模板.prototype生命值=500
&lt;/pre&gt;
&lt;pre&gt;
var 情情兔1=new 情情兔模板(1)
&lt;/pre&gt;
&lt;pre&gt;
&lt;strong&gt;//情情兔1={编号：1，速度速度：50，防御：37，敏捷：21，攻击力：37，生命值：500}&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　OK，一个简单的情情兔模板就诞生了。&lt;/p&gt;
&lt;p&gt;　　但是到了这里，有的同学就要问了，既然是下面都是属性，那么为什么不直接就写一个&lt;strong&gt;LoveRabbit.prototype={速度速度=50，防御=37，敏捷=21，攻击力=37，生命值=500}&lt;/strong&gt;呢？其实当我们打印很多对象或者别的东西的prototype时候，会发现有一个叫做constructor的属性，字面翻译的意思就是构造函数，这个属性的值呢就是new后面的字样，也就是说，其实我们看到的种种都是一个构造函数，毕竟在js的世界中，后缀是（）的大部分都是一个运行的函数。&lt;/p&gt;
&lt;p&gt;　　那么我们就可以猜测了：在这个函数中，一开始呢我们肯定会创建一个新的对象，对象没有prototype属性，只有函数有prototype属性。每个对象的__proto__属性指向自身构造函数的prototype，也就是我们把新制造的对象的__proto__赋值为构造函数的prototype。当然呢，我们会给这个对象新加别的属性。&lt;/p&gt;
&lt;p&gt;　　因此，在上一步的情情兔模板的new的函数中，其实应该是这样的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; 情情兔模板(id){
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; 新情情兔 =&lt;span&gt; {}
  新情情兔 .__proto__ &lt;/span&gt;= 情情兔模板.prototy'&lt;span&gt;pe
  新情情兔 .id= id
  return 新情情兔 
}
情情兔模板.prototy&lt;/span&gt;pe =&lt;span&gt; {&lt;br/&gt;　　constructor:&lt;/span&gt;情情兔模板,//非常重要的一条，因为我们要知道构造函数，也就是来源。&lt;br/&gt;　　速度速度：50，&lt;br/&gt;　　防御：37，&lt;br/&gt;　　敏捷：21，&lt;br/&gt;　　攻击力：37,&lt;br/&gt;　　生命值：500&lt;br/&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在上面我们可以看出区别，new在这个构造函数中做了啥呢：&lt;/p&gt;
&lt;p&gt;　　　　1.首先，先创建了一个新的对象。&lt;/p&gt;
&lt;p&gt;　　　　2.然后呢，把构造函数的公共的属性复制了一份给这个新对象，这也就是prototype——原型。&lt;/p&gt;
&lt;p&gt;　　　　4.接着把私有属性赋赋值，毕竟创建就要造个独一无二的。&lt;/p&gt;
&lt;p&gt;　　　　3.返回这个新的对象。&lt;/p&gt;
&lt;p&gt;　　终于，我们就可以愉快地通过new来大批量的创建各种新的对象了。&lt;/p&gt;
&lt;p&gt;　　由此观之，new就是一个&lt;strong&gt;语法糖&lt;/strong&gt;，为了更好地节省代码，来体现程序员的聪（lan）明（duo）。&lt;/p&gt;

&lt;p&gt;　　如果您觉得我的博文有用，请不要吝啬您的&lt;strong&gt;赞&lt;/strong&gt;和&lt;strong&gt;关注&lt;/strong&gt;。如需&lt;strong&gt;转载&lt;/strong&gt;，请&lt;strong&gt;标明出处&lt;/strong&gt;，谢谢。&lt;/p&gt;

</description>
<pubDate>Sun, 25 Feb 2018 15:21:00 +0000</pubDate>
<dc:creator>阿尔卑斯de秘密</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lunlunshiwo/p/8466902.html</dc:identifier>
</item>
<item>
<title>NGUI的新手引导的实现 - 捡贝壳的小孩</title>
<link>http://www.cnblogs.com/lyrers/p/8471074.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lyrers/p/8471074.html</guid>
<description>&lt;p&gt;　　先声明一下，UNITY新手，如果说的有不对的地方，欢迎各位大神指正。&lt;/p&gt;
&lt;p&gt;　　最近在项目需要实现新手引导，最基础的需求就是需要一个带黑色遮罩的引导UI，类似下图这种:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282439/201802/1282439-20180225222313199-1371569302.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　对，就是这么敷衍的UI，因为是我随手做的。&lt;/p&gt;
&lt;p&gt;　　这里有两个关键点:&lt;/p&gt;
&lt;p&gt;　　1. 黑色的遮罩要怎么做，才能挡住其他部分而留出目标的按钮&lt;/p&gt;
&lt;p&gt;　　2.点击事件要怎么处理&lt;/p&gt;
&lt;p&gt;　　我找到过一种解决方案: 添加一个顶层UI，添加一个黑色半透明的UIWidget，然后COPY一份要引导的空间的GameObject, 然后加到这个引导的UI上，只要这个COPY的GAMEOBJECT的深度比半透明黑的要高就行了。然后收到点击时间后，再去模拟点击原来的控件。这个方案应该是可行的，但是我没有采纳，主要是不想要这个拷贝的步骤，点击事件的模拟也不是一件开心的事情。我决定用另外一个方案，上层的遮罩的黑色半透明区域和boxcolider都只覆盖目标以外的部分，点击事件的话直接添加原来的事件监听里，来省下GameObject的拷贝的过程。&lt;/p&gt;

&lt;p&gt;　　实现我想要的黑色的遮罩的效果，最早我是想用一个笨办法：加4个UIWidget和4个BoxColider，就能彻底围住目标控件。这么做也不是不行，实在是有些丑陋，所幸我发现已经有人分享这样的控件: http://blog.csdn.net/lzdidiv/article/details/72293727&lt;/p&gt;
&lt;p&gt;　　感谢这位作者，我测试过，效果完全没问题。&lt;/p&gt;
&lt;p&gt;　　接下来是点击事件的问题。我添加了一个脚本NavControl，用来定位目标控件和做点击事件的添加的:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
using System;
using System.Collections.Generic;
using UnityEngine;

public class NavControl : MonoBehaviour
{
    public static List&amp;lt;NavControl&amp;gt; activeControlList = new List&amp;lt;NavControl&amp;gt;();

    public string nodeId;
    public UIWidget targetWidget;

    private UIEventListener.VoidDelegate clickCallback;
    public bool AddOnClickEvent(UIEventListener.VoidDelegate callback)
    {
        if (callback == null)
            return false;

        UIEventListener listener = this.gameObject.GetComponent&amp;lt;UIEventListener&amp;gt;();
        if (listener == null)
        {
            UIToggle toggle = this.gameObject.GetComponent&amp;lt;UIToggle&amp;gt;();
            if (toggle)
            {
                EventDelegate.Add(toggle.onChange, onClick2);
            }
            else
            {
                Debug.LogError(string.Format(&quot;onAddClickEvent Can't not find event listener:{0}&quot;, this.nodeId));
                return false;
            }
        }
        else
        {
            listener.onClick += onClick;
        }

        clickCallback = callback;
        return true;
    }

    public void RemoveOnClickEvent()
    {
        UIEventListener listener = this.gameObject.GetComponent&amp;lt;UIEventListener&amp;gt;();
        if (listener == null)
        {
            UIToggle toggle = this.gameObject.GetComponent&amp;lt;UIToggle&amp;gt;();
            if (toggle)
            {
                EventDelegate.Remove(toggle.onChange, onClick2);
            }
            else
            {
                Debug.LogError(string.Format(&quot;onRemoveClickEvent Can't not find event listener:{0}&quot;, this.nodeId));
            }
            return;
        }
        else
        {
            listener.onClick -= onClick;
        }
    }

    public static NavControl getNavControl(string key)
    {
        for(int i = 0; i &amp;lt; activeControlList.Count; ++i)
        {
            if (activeControlList[i].nodeId == key)
            {
                return activeControlList[i];
            }
        }

        return null;
    }

    private void onClick(GameObject go1)
    {
        if (clickCallback == null || targetWidget == null)
            return;

        clickCallback(targetWidget.gameObject);
    }

    private void onClick2()
    {
        if (clickCallback == null || targetWidget == null)
            return;

        clickCallback(targetWidget.gameObject);
    }

    void Awake()
    {
        if (targetWidget == null)
        {
            targetWidget = this.gameObject.GetComponent&amp;lt;UIWidget&amp;gt;();
        }
    }

    void OnEnable()
    {
        activeControlList.Add(this);
    }

    void OnDisable()
    {
        activeControlList.Remove(this);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在AddOnClickEvent函数里面，可以看到我支持了两种情况的点击事件的插入:  UIEventListener和UIToggle, 在我的项目里，这两种已经足够覆盖新手引导的需求，如果有其他的需求，扩展这里的逻辑就是。&lt;/p&gt;
&lt;p&gt;　　在这个脚本里面，有一个nodeId的变量，nodeId必须是全局唯一的，这个是用到标记新手引导对应的控件。而另外一个成员targetWidget, 是用来做遮罩的对位的，如果没有设置，会默认从当前的GameObject上获取UIWidget&lt;/p&gt;
&lt;p&gt;　　接下来我写了个贼简单的demo，提供我的思路给大家参考。&lt;/p&gt;
&lt;p&gt;　　如第一个敷衍的图，上面有三个按钮, 现在我需要引导玩家依次点击按钮111，按钮222和按钮Close, prefabe结构如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282439/201802/1282439-20180225225219421-655901807.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在btn1,btn2和btn3上，我都添加NavControl的脚本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282439/201802/1282439-20180225225335507-2031813687.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里的NodeId我设置成和GameObject的名字一样，以示区分。&lt;/p&gt;
&lt;p&gt;在nav的gameObject下我添加UIMaskWidget的脚本。&lt;/p&gt;
&lt;p&gt;TestUI挂上了一个简单的测试脚本，代码如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class TestNav : MonoBehaviour {
    private GameObject btn1;
    private GameObject btn2;
    private GameObject btn3;
    private GameObject btnStart;
    private UIMaskWidget maskWidget;
    private Queue&amp;lt;string&amp;gt; navQueue = new Queue&amp;lt;string&amp;gt;();

        // Use this for initialization
        void Start () {
        navQueue.Enqueue(&quot;btn1&quot;);
        navQueue.Enqueue(&quot;btn2&quot;);
        navQueue.Enqueue(&quot;btn3&quot;);

        btn1 = gameObject.transform.FindChild(&quot;btn1&quot;).gameObject;
        btn2 = gameObject.transform.FindChild(&quot;btn2&quot;).gameObject;
        btn3 = gameObject.transform.FindChild(&quot;btn3&quot;).gameObject;
        btnStart = gameObject.transform.FindChild(&quot;btnStart&quot;).gameObject;
        maskWidget = gameObject.transform.FindChild(&quot;nav&quot;).GetComponent&amp;lt;UIMaskWidget&amp;gt;();

        UIEventListener.Get(btnStart).onClick += (GameObject go1) =&amp;gt;
        {
            btn1.SetActive(true);
            btn2.SetActive(true);
            btn3.SetActive(true);
            maskWidget.gameObject.SetActive(true);

            btnStart.SetActive(false);

            showNextNav();
        };

        UIEventListener.Get(btn1).onClick += (GameObject go) =&amp;gt;
        {

        };

        UIEventListener.Get(btn2).onClick += (GameObject go) =&amp;gt;
        {

        };

        UIEventListener.Get(btn3).onClick += (GameObject go) =&amp;gt;
        {

        };
        }

    void showNextNav()
    {
        if (navQueue.Count == 0)
        {
            maskWidget.gameObject.SetActive(false);
            return;
        }

        string key = navQueue.Dequeue();
        NavControl control = NavControl.getNavControl(key);
        if (control != null)
        {
            if (control.targetWidget != null)
            {
                this.maskWidget.transform.position = control.targetWidget.transform.position;
                this.maskWidget.width = control.targetWidget.width;
                this.maskWidget.height = control.targetWidget.height;

                control.AddOnClickEvent((GameObject btnGo) =&amp;gt; {
                    showNextNav();
                    }
                );
            }
        }
    }
        
        // Update is called once per frame
        void Update () {
        
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　关键的逻辑就在showNextNav这个函数里面, 调用NavControl的静态函数获取目标控件，然后设置UIMaskWidget的位置和遮罩的区域。&lt;/p&gt;
&lt;p&gt;　　代码比较简单，只是演示我的思路，有疑问或者异议，欢迎讨论。&lt;/p&gt;
&lt;p&gt;　　我的代码是基于unity5.3.4, ngui 3.8.2, 测试工程链接: https://files.cnblogs.com/files/lyrers/NavControl.zip。&lt;/p&gt;

</description>
<pubDate>Sun, 25 Feb 2018 15:04:00 +0000</pubDate>
<dc:creator>捡贝壳的小孩</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lyrers/p/8471074.html</dc:identifier>
</item>
<item>
<title>我的2017年终总结（PF项目框架设计心得分享 1.0rc new） - 恋月</title>
<link>http://www.cnblogs.com/lianyue/p/8470821.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lianyue/p/8470821.html</guid>
<description>&lt;p&gt;　　所得：在工作中我能涉及到许多我以前认为十分复杂的领域，结果发现它们并没有想象中的困难。从这一点里我学习到一切看似困难的东西，只是我们自己胆怯造成的，在没有尝试之前就妄下结论是多么愚蠢啊。之前我在另一个城市里就是因为不相信自己，而丧失了许多的机会，如果有了这些机会我事业上恐怕不会如今天这般不顺。所以我希望所有在困难面前畏首畏尾的朋友，你们大胆一点放开你们的怀抱，去拥抱那即将靠近的梦想，虽然无法保证结果可能是一次惨痛的失败。可是你不趁着你还敢梦想的年纪，那么后面的生活你就只能活在遗憾当中了。&lt;/p&gt;&lt;p&gt;　　所失：忙碌让我的神经麻木，甚至身体也有点力不从心，这就造成我在自己理想面前放慢了脚步。在此我也希望各位朋友要重视自己的健康，就算工作再怎么幸苦也不能因为拼命而轻视了它，别将生活的压力想象的太大。毕竟只有一个完好的人，才能体会到美好的生活，而工作只不过是为了生活而服务的。&lt;/p&gt;&lt;p&gt;　　虽然自己的确因为时间和身体的原因，在这个框架上花费的时间少了许多，可是我却没有停止我对它的期许，那便是做到真正的简单易用。为了做到这个我从2015年开始到现在几乎花了三年时间修改了两次结构，而PF框架现在的版本已经到了2.1，其基本的功能和性能得到了一定的保证。其中过程的艰辛，恐怕没有几个人能体会到。&lt;/p&gt;&lt;p&gt;　　PF改动：plain server（2014）-&amp;gt; plain framework 1（2015-2016） -&amp;gt; plain framework 2(2017) -&amp;gt; plain framework new(2018)&lt;/p&gt;&lt;p&gt;　　我只有一个简单的年份和版本变化来表示PF框架的蜕变过程，其实是一场非常不容易的变化。一开始这个还不能称之框架，那个时候我只是想简单的应付工作上的事情，为服务器打造一个稳定的底层库，即2014年的plain server。接着我发现只争对服务器来说根本无法满足我的要求，于是我重新修改了结构让它能够支持几乎所有的常见应有。接着说道现在比较稳定的版本PF2，它的改动最大的就是从语法上直接用到了C++11，使得框架本身能够支持更多新特性。然而PF2还是不能满足我，我将要进行各大一步的调整，在PF2的基础上我修改了框架的目录结构，让它看起来更加清晰易懂。&lt;/p&gt;&lt;p&gt;　　PFnew的新特性：快速安装（框架、插件）、单元测试（框架、应用）、灵活封装（接口）&lt;/p&gt;&lt;p&gt;　　对于现在的PFnew的快速安装目前只支持UNIX/LINUX的平台，当然后续会想办法支持WINDOWS系统。而单元测试则使用了gtest，目的是让一些问题更能及早的发现，这一点我也会征求更多的意见，因为我之前虽然接触过这个框架，只是一直没有使用，而对这个测试框架来说也不知道它的优缺点。至于灵活封装就是移除了核心接口中的许多依赖，我将这部分东西移到了插件中，现在的插件中就有如脚本插件（lua）、数据库插件（odbc）、网络协议插件（google protobuf），而这些插件可以根据应用的需要又框架本身提供接口来加载使用。而且如果有人用心的话，可能会在框架里发现一个有趣的模块，那就是数据库的语法封装部分（DB QUERY BUILDER），会支持大部分的数据库语法，这样使得我们想要随意切换不同数据库提供了良好的支持，当然这部分仍旧是尝试阶段。而且关于这个语法封装器，我参考了Laravel（PHP框架）的代码，有兴趣的同仁可以去了解一下。&lt;/p&gt;&lt;p&gt;　　在这里贴一段代码来看看我们PFnew的数据库语法的支持以及单元测试示例：&lt;/p&gt;&lt;div readability=&quot;237&quot;&gt;
&lt;pre&gt;
#include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gtest/gtest.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pf/engine/kernel.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pf/db/query/grammars/grammar.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pf/db/query/grammars/mysql_grammar.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pf/db/connection.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pf/db/query/builder.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pf/support/helpers.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;enum&lt;/span&gt;&lt;span&gt; {
  kDBTypeODBC &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
};

&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; pf_db::query;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; pf_basic::type;

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; DBQueryBuilder : &lt;span&gt;public&lt;/span&gt;&lt;span&gt; testing::Test {

 &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
   &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; SetUpTestCase() {
     
     GLOBALS[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;log.print&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;First forbid the log print.&lt;/span&gt;
&lt;span&gt;
     GLOBALS[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default.db.open&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
     GLOBALS[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default.db.type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; kDBTypeODBC;
     GLOBALS[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default.db.name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pf_test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
     GLOBALS[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default.db.user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
     GLOBALS[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default.db.password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

     engine_.add_libraryload(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pf_plugin_odbc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, {kDBTypeODBC});

     engine_.init();

     auto connection &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; pf_db::Connection(engine_.get_db());
     unique_move(pf_db::Connection, connection, connection_);
     auto builder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Builder(connection_.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(), nullptr);
     unique_move(Builder, builder, builder_);
     
     auto mysql_grammar &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; grammars::MysqlGrammar();
     unique_move(grammars::Grammar, mysql_grammar, mysql_grammar_);
     auto mysql_builder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Builder(connection_.&lt;span&gt;get&lt;/span&gt;(), mysql_grammar_.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;());
     unique_move(Builder, mysql_builder, mysql_builder_);
   }

   &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TearDownTestCase() {
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;std::cout &amp;lt;&amp;lt; &quot;TearDownTestCase&quot; &amp;lt;&amp;lt; std::endl;&lt;/span&gt;
&lt;span&gt;   }

 &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
   &lt;/span&gt;&lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; SetUp() {
     builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;clear();
     mysql_builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;clear();
   }
   &lt;/span&gt;&lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TearDown() {
   }

 &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
   &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; pf_engine::Kernel engine_;
   &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; std::unique_ptr&amp;lt;pf_db::Connection&amp;gt;&lt;span&gt; connection_;
   &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; std::unique_ptr&amp;lt;grammars::Grammar&amp;gt;&lt;span&gt; mysql_grammar_;
   &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; std::unique_ptr&amp;lt;Builder&amp;gt;&lt;span&gt; builder_;
   &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; std::unique_ptr&amp;lt;Builder&amp;gt;&lt;span&gt; mysql_builder_;

};

pf_engine::Kernel DBQueryBuilder::engine_;
std::unique_ptr&lt;/span&gt;&amp;lt;pf_db::Connection&amp;gt;&lt;span&gt; DBQueryBuilder::connection_{nullptr};
std::unique_ptr&lt;/span&gt;&amp;lt;Builder&amp;gt;&lt;span&gt; DBQueryBuilder::builder_{nullptr};
std::unique_ptr&lt;/span&gt;&amp;lt;Builder&amp;gt;&lt;span&gt; DBQueryBuilder::mysql_builder_{nullptr};
std::unique_ptr&lt;/span&gt;&amp;lt;grammars::Grammar&amp;gt;&lt;span&gt; DBQueryBuilder::mysql_grammar_{nullptr};

TEST_F(DBQueryBuilder, construct) {
  Builder &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;(nullptr, nullptr);
  pf_db::Connection connection(engine_.get_db());
  Builder builder_test1(&lt;/span&gt;&amp;amp;&lt;span&gt;connection, nullptr);
  grammars::Grammar grammar;
  Builder builder_test2(&lt;/span&gt;&amp;amp;connection, &amp;amp;&lt;span&gt;grammar);
}

TEST_F(DBQueryBuilder, testBasicSelect) {
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, builder_-&amp;gt;&lt;span&gt;to_sql().c_str());
}

TEST_F(DBQueryBuilder, testBasicSelectWithGetColumns) {
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).&lt;span&gt;get&lt;/span&gt;&lt;span&gt;();
  ASSERT_TRUE(builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;columns_.empty());
  
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, builder_-&amp;gt;&lt;span&gt;to_sql().c_str());
  ASSERT_TRUE(builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;columns_.empty());
}

TEST_F(DBQueryBuilder, testBasicSelectUseWritePdo) {

}

TEST_F(DBQueryBuilder, testBasicTableWrappingProtectsQuotationMarks) {
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;some\&quot;table&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;some\&quot;\&quot;table\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, builder_-&amp;gt;&lt;span&gt;to_sql().c_str());
}

TEST_F(DBQueryBuilder, testAliasWrappingAsWholeConstant) {
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x.y as foo.bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;baz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select \&quot;x\&quot;.\&quot;y\&quot; as \&quot;foo.bar\&quot; from \&quot;baz\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
}

TEST_F(DBQueryBuilder, testAliasWrappingWithSpacesInDatabaseName) {
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w x.y.z as foo.bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;baz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select \&quot;w x\&quot;.\&quot;y\&quot;.\&quot;z\&quot; as \&quot;foo.bar\&quot; from \&quot;baz\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
}

TEST_F(DBQueryBuilder, testAddingSelects) {
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}).
            add_select({&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).add_select({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;baz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;boom&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;baz\&quot;, \&quot;boom\&quot; from \&quot;users\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
}

TEST_F(DBQueryBuilder, testBasicSelectWithPrefix) {
  builder_&lt;/span&gt;-&amp;gt;get_grammar()-&amp;gt;set_table_prefix(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;prefix_&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;prefix_users\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
}

TEST_F(DBQueryBuilder, testBasicSelectDistinct) {
  builder_&lt;/span&gt;-&amp;gt;distinct().&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select distinct \&quot;foo\&quot;, \&quot;bar\&quot; from \&quot;users\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
}

TEST_F(DBQueryBuilder, testBasicAlias) {
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo as bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select \&quot;foo\&quot; as \&quot;bar\&quot; from \&quot;users\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
}

TEST_F(DBQueryBuilder, testAliasWithPrefix) {
  builder_&lt;/span&gt;-&amp;gt;get_grammar()-&amp;gt;set_table_prefix(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;prefix_&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users as people&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;prefix_users\&quot; as \&quot;prefix_people\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
}

TEST_F(DBQueryBuilder, testJoinAliasesWithPrefix) {
  builder_&lt;/span&gt;-&amp;gt;get_grammar()-&amp;gt;set_table_prefix(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;prefix_&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;services&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).join(
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;translations AS t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;t.item_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;services.id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
   ASSERT_STREQ(
       &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;prefix_services\&quot; inner join \&quot;prefix_translations\&quot; \&lt;/span&gt;
&lt;span&gt;as&lt;/span&gt; \&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;prefix_t\&quot; on \&quot;prefix_t\&quot;.\&quot;item_id\&quot; = \&quot;prefix_services\&quot;.\&quot;id\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
       builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
}

TEST_F(DBQueryBuilder, testBasicTableWrapping) {
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;public.users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;public\&quot;.\&quot;users\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
}

TEST_F(DBQueryBuilder, testWhenCallback) {
  auto callback &lt;/span&gt;= [](Builder *query, &lt;span&gt;const&lt;/span&gt; variable_t &amp;amp;&lt;span&gt;condition) {
    ASSERT_TRUE(condition.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;&lt;span&gt;());
    query&lt;/span&gt;-&amp;gt;&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
  };
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).when(&lt;span&gt;true&lt;/span&gt;, callback).&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot; where \&quot;id\&quot; = ? and \&quot;email\&quot; = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());

  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;clear();
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).when(&lt;span&gt;false&lt;/span&gt;, callback).&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot; where \&quot;email\&quot; = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
}

TEST_F(DBQueryBuilder, testWhenCallbackWithReturn) {

}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; assertEquals(
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; variable_array_t &amp;amp;a, &lt;span&gt;const&lt;/span&gt; variable_array_t &amp;amp;b, int32_t line = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (line != -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
    std::cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;assertEquals: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; line &amp;lt;&amp;lt;&lt;span&gt; std::endl;
  ASSERT_TRUE(a.size() &lt;/span&gt;==&lt;span&gt; b.size());
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; a.size(); ++&lt;span&gt;i)
    ASSERT_STREQ(a[i].data.c_str(), b[i].data.c_str());
}

TEST_F(DBQueryBuilder, testWhenCallbackWithDefault) {
  auto callback &lt;/span&gt;= [](Builder *query, &lt;span&gt;const&lt;/span&gt; variable_t &amp;amp;&lt;span&gt;condition) {
    ASSERT_STREQ(condition.c_str(), &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;truthy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    query&lt;/span&gt;-&amp;gt;&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
  };
  auto def &lt;/span&gt;= [](Builder *query, &lt;span&gt;const&lt;/span&gt; variable_t &amp;amp;&lt;span&gt;condition) {
    ASSERT_TRUE(condition &lt;/span&gt;== &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
    query&lt;/span&gt;-&amp;gt;&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
  };

  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}).
            &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).when(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;truthy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, callback, def).&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot; where \&quot;id\&quot; = ? and \&quot;email\&quot; = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());

  assertEquals({&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}, builder_-&amp;gt;&lt;span&gt;get_bindings(), __LINE__);

  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;clear();

  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}).
            &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).when(&lt;span&gt;0&lt;/span&gt;, callback, def).&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot; where \&quot;id\&quot; = ? and \&quot;email\&quot; = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());

  assertEquals({&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}, builder_-&amp;gt;&lt;span&gt;get_bindings(), __LINE__);
}

TEST_F(DBQueryBuilder, testUnlessCallback) {
  auto callback &lt;/span&gt;= [](Builder *query, &lt;span&gt;const&lt;/span&gt; variable_t &amp;amp;&lt;span&gt;condition) {
    ASSERT_FALSE(condition.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;&lt;span&gt;());
    query&lt;/span&gt;-&amp;gt;&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
  };

  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}).
            &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).unless(&lt;span&gt;false&lt;/span&gt;, callback).&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot; where \&quot;id\&quot; = ? and \&quot;email\&quot; = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());


  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;clear();
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}).
            &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).unless(&lt;span&gt;true&lt;/span&gt;, callback).&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot; where \&quot;email\&quot; = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());

}

TEST_F(DBQueryBuilder, testUnlessCallbackWithReturn) {

}

TEST_F(DBQueryBuilder, testUnlessCallbackWithDefault) {
  auto callback &lt;/span&gt;= [](Builder *query, &lt;span&gt;const&lt;/span&gt; variable_t &amp;amp;&lt;span&gt;condition) {
    ASSERT_TRUE(condition &lt;/span&gt;== &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
    query&lt;/span&gt;-&amp;gt;&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
  };
  auto def &lt;/span&gt;= [](Builder *query, &lt;span&gt;const&lt;/span&gt; variable_t &amp;amp;&lt;span&gt;condition) {
    ASSERT_STREQ(condition.c_str(), &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;truthy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    query&lt;/span&gt;-&amp;gt;&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
  };

  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}).
            &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).unless(&lt;span&gt;0&lt;/span&gt;, callback, def).&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot; where \&quot;id\&quot; = ? and \&quot;email\&quot; = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());

  assertEquals({&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}, builder_-&amp;gt;&lt;span&gt;get_bindings(), __LINE__);

  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;clear();

  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}).
            &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).unless(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;truthy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, callback, def).&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot; where \&quot;id\&quot; = ? and \&quot;email\&quot; = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());

  assertEquals({&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}, builder_-&amp;gt;&lt;span&gt;get_bindings(), __LINE__);
}

TEST_F(DBQueryBuilder, testTapCallback) {
  auto callback &lt;/span&gt;= [](Builder *&lt;span&gt;query) {
    query&lt;/span&gt;-&amp;gt;&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
  };

  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).tap(callback).&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); 
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot; where \&quot;id\&quot; = ? and \&quot;email\&quot; = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
}

TEST_F(DBQueryBuilder, testBasicWheres) {
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot; where \&quot;id\&quot; = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
  assertEquals({&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;}, builder_-&amp;gt;&lt;span&gt;get_bindings());
}

TEST_F(DBQueryBuilder, testMySqlWrappingProtectsQuotationMarks) {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
  builder_-&amp;gt;select({&quot;*&quot;}).from(&quot;some`table&quot;);
  ASSERT_STREQ(&quot;select * from `some``table`&quot;,
               builder_-&amp;gt;to_sql().c_str());
*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
}

TEST_F(DBQueryBuilder, testDateBasedWheresAcceptsTwoArguments) {
  auto builder &lt;/span&gt;= mysql_builder_.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;();
  builder&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).where_date(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;created_at&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from `users` where date(`created_at`) = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());

  builder&lt;/span&gt;-&amp;gt;&lt;span&gt;clear();
  builder&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).where_day(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;created_at&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from `users` where day(`created_at`) = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());

  builder&lt;/span&gt;-&amp;gt;&lt;span&gt;clear();
  builder&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).where_month(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;created_at&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from `users` where month(`created_at`) = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());

  builder&lt;/span&gt;-&amp;gt;&lt;span&gt;clear();
  builder&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).where_year(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;created_at&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from `users` where year(`created_at`) = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
}

TEST_F(DBQueryBuilder, testWhereDayMySql) {
  auto builder &lt;/span&gt;= mysql_builder_.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;();
  builder&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).where_day(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;created_at&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from `users` where day(`created_at`) = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
  assertEquals({&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;}, builder-&amp;gt;&lt;span&gt;get_bindings());
}

TEST_F(DBQueryBuilder, testWhereMonthMySql) {
  auto builder &lt;/span&gt;= mysql_builder_.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;();
  builder&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).where_month(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;created_at&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from `users` where month(`created_at`) = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
  assertEquals({&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;}, builder-&amp;gt;&lt;span&gt;get_bindings());
}

TEST_F(DBQueryBuilder, testWhereYearMySql) {
  auto builder &lt;/span&gt;= mysql_builder_.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;();
  builder&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).where_year(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;created_at&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;2018&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from `users` where year(`created_at`) = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
  assertEquals({&lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;}, builder-&amp;gt;&lt;span&gt;get_bindings());
}

TEST_F(DBQueryBuilder, testWhereTimeMySql) {
  auto builder &lt;/span&gt;= mysql_builder_.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;();
  builder&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).where_time(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;created_at&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;22:00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from `users` where time(`created_at`) = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
  assertEquals({&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;22:00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}, builder-&amp;gt;&lt;span&gt;get_bindings());
}

TEST_F(DBQueryBuilder, testWhereDatePostgres) {

}

TEST_F(DBQueryBuilder, testWhereDayPostgres) {

}

TEST_F(DBQueryBuilder, testWhereMonthPostgres) {

}

TEST_F(DBQueryBuilder, testWhereYearPostgres) {

}

TEST_F(DBQueryBuilder, testWhereDaySqlite) {

}

TEST_F(DBQueryBuilder, testWhereMonthSqlite) {

}

TEST_F(DBQueryBuilder, testWhereYearSqlite) {

}

TEST_F(DBQueryBuilder, testWhereDaySqlServer) {

}

TEST_F(DBQueryBuilder, testWhereMonthSqlServer) {

}

TEST_F(DBQueryBuilder, testWhereYearSqlServer) {

}

TEST_F(DBQueryBuilder, testWhereBetweens) {
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).where_between(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, {&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;});
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot; where \&quot;id\&quot; between ? and ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
  assertEquals({&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;}, builder_-&amp;gt;&lt;span&gt;get_bindings());

  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;clear();
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}).&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).where_notbetween(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, {&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;});
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot; where \&quot;id\&quot; not between ? and ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
  assertEquals({&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;}, builder_-&amp;gt;&lt;span&gt;get_bindings());
}

TEST_F(DBQueryBuilder, testBasicOrWheres) {
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}).
            &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;).or_where(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot; where \&quot;id\&quot; = ? or \&quot;email\&quot; = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
  assertEquals({&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}, builder_-&amp;gt;&lt;span&gt;get_bindings());
}

TEST_F(DBQueryBuilder, testRawWheres) {
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}).
            &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).where_raw(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id = ? or email = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, {&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;});
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot; where id = ? or email = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
  assertEquals({&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}, builder_-&amp;gt;&lt;span&gt;get_bindings());
}

TEST_F(DBQueryBuilder, testRawOrWheres) {
  builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;select&lt;/span&gt;({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}).
            &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;).or_where_raw(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;});
  ASSERT_STREQ(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from \&quot;users\&quot; where \&quot;id\&quot; = ? or email = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
               builder_&lt;/span&gt;-&amp;gt;&lt;span&gt;to_sql().c_str());
  assertEquals({&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}, builder_-&amp;gt;&lt;span&gt;get_bindings());
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description>
<pubDate>Sun, 25 Feb 2018 13:51:00 +0000</pubDate>
<dc:creator>恋月</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lianyue/p/8470821.html</dc:identifier>
</item>
</channel>
</rss>