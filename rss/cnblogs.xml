<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Spring Boot应用 打包与部署指南 - heycoder</title>
<link>http://www.cnblogs.com/heycoder/p/springboot-package-deploy.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/heycoder/p/springboot-package-deploy.html</guid>
<description>&lt;p&gt;一、前言 Spring Boot的打包与部署有何特点？ Java Web应用在Spring Boot之前，通常是打包成war（Web application ARchive）包，结合Tomcat来完成部署。 对于Spring Boot，Spring官方的建议是将Spring Boot应用打包成一个fat jar（Java ARchive）,通过java命令来启动运行。这个fat jar会把Tomcat内置进来，所以部署时也不需要单独配置Tomcat。 Spring官方的打包说明： https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#getting-started-first-application-executable-jar 本篇环境信息 开发环境： 用途 工具&amp;amp;版本 操作系统 Windows 10 开发工具 IntelliJ IDEA 2017 打包工具 Maven 3.X JDK 1.8.x 传输工具 FlashFxp 生产环境： 用途 工具&amp;amp;版本 操作系统 CentOS 7 JDK 1.8.x 传输工具 Vsftp CentOS 7快速上手教程：https://ken.io/serie/centos7-quickstart 二、打包 打包工具的话如前面提到的，我们使用的是Maven 首先需要在pom.xml文件build节点增加如下配置： springboot-courseorg.springframework.bootspring-boot-maven-plugin 另外，需要确认pom.xml文件的package节点配置： jar 本篇ken.io会介绍两种打包方式，一个是Maven命令打包。一个是IDEA+Maven插件打包。 1、 Maven命令打包 准备工作 配置Java、Maven环境变量 参考：http://wiki.jikexueyuan.com/project/maven/environment-setup.html cmd：进入项目目录 本次项目目录是：D:\Projects\GitHub\springboot-course\package-maven d: &amp;amp; cd D:\Projects\GitHub\springboot-course\package-maven 清理package #清理已存在的编译结果 mvn clean #清理成功后输出信息示例 [INFO] ----------------------------------------------------------- [INFO] BUILD SUCCESS [INFO] ----------------------------------------------------------- 打包 #打包 mvn package #清理成功后输出信息示例 [INFO] ----------------------------------------------------------- [INFO] BUILD SUCCESS [INFO] ----------------------------------------------------------- #清理成功后会在项目根目录生成target文件夹 #查看是否生成target文件夹 ls #查看是否生了jar文件 ls target #根据pom.xml文件的配置，生成的jar文件名是：springboot-course.jar 2、IDEA + Maven插件打包 通过View-&amp;gt;Tool Windows-&amp;gt;Maven projects 呼出Maven工具栏 或者通过IDEA右侧工具栏呼出Maven工具栏 Maven工具栏 图形化操作就很简单了。两个步骤： clean package 成功之后也会在IDEA 控制台显示以下输出： [INFO] -------------------------------------------------------------------- [INFO] BUILD SUCCESS [INFO] -------------------------------------------------------------------- [INFO] Total time: 7.839 s [INFO] Finished at: 2017-12-09T13:36:40+08:00 [INFO] Final Memory: 21M/218M [INFO] -------------------------------------------------------------------- 生成的jar包路径：项目根目录\target\springboot-course.jar 3、本地运行测试 通过java命令运行jar包 #进入jar包所在目录 d: &amp;amp; cd D:\Projects\GitHub\springboot-course\package-maven\target #执行 java -jar springboot-course.jar #运行成功后会输出如下信息（部分信息略去） [main] o.s.j.e.a.AnnotationMBeanExporter : Registering beans for JMX exposure on startup [main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http) [main] i.k.springboot.course.CourseApplication : Started CourseApplication in 5.569 seconds (JVM running for 6.363) 通过浏览器访问：localhost:8080，验证是否正常 端口号 在/src/main/resources下新建配置文件application.yml 文件内容： server: port: 8081 配置完成之后，重新打包即可 参考：https://ken.io/note/springboot-course-basic-helloworld 三、部署 1、 准备工作 JDK 1.8部署 https://ken.io/note/centos-java-setup FTP服务端部署 https://ken.io/note/centos-quickstart-ftpserver 通过FTP将jar包上传到CentOS的 /webroot/helloweb 目录 创建日志目录： #创建应用目录&amp;amp;日志目录 sudo mkdir /webroot/helloweb sudo mkdir /webroot/helloweb/logs #修改文件夹权限 sudo chmod 777 /webroot/helloweb sudo chmod 777 /webroot/helloweb/logs 开放端口 #添加可访问端口 sudo firewall-cmd --add-port=8081/tcp --permanent #重新加载防火墙策略 sudo firewall-cmd --reload 2、启动&amp;amp;停止脚本 创建启动脚本 #创建启动脚本start.sh sudo vi /webroot/helloweb/start.sh 脚本内容： #!/bin/sh #指定JDK目录&amp;amp;AppName export JAVA_HOME=/usr/java/jdk1.8.0_151 APP_NAME=springboot-course.jar echo $JAVA_HOME echo $APP_NAME #nohup命令后台启动jar包并写入日志 nohup java -jar $APP_NAME &amp;gt;&amp;gt;logs/start.log 2&amp;gt;&amp;gt;logs/startError.log &amp;amp; #sleep等待15秒后，判断包含AppName的线程是否存在 sleep 15 if test $(pgrep -f $APP_NAME|wc -l) -eq 0 then echo &quot;Start Failed&quot; else echo &quot;Start Successed&quot; fi 创建停止脚本 #创建停止脚本文件 sudo vi /webroot/helloweb/stop.sh 脚本内容： #!/bin/sh #指定AppName APP_NAME=springboot-course.jar #找到包含AppName的进程 PROCESS=`ps -ef|grep $APP_NAME|grep -v grep |awk '{ print $2}'` #循环停用进程直到成功 while : do kill -9 $PROCESS &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 if [ $? -ne 0 ];then break else continue fi done echo 'Stop Successed' 启动/停止站点 #启动 sh /webroot/helloweb/start.sh #停止 sh /webroot/helloweb/stop.sh 3、CentOS 7 开机自动Spring Boot应用 将站点启动脚本标记为可执行文件 chmod +x /webroot/helloweb/start.sh 将/etc/rc.d/rc.local标记为可执行文件 CentOS 7中，默认/etc/rc.d/rc.local文件加载时不能执行可执行文件 chmod +x /etc/rc.d/rc.local 将启动文件添加到/etc/rc.d/rc.local文件中 #修改文件 vi /etc/rc.d/rc.local #增加以下内容 /webroot/helloweb/start.sh 本篇文章所用到的源代码：https://github.com/ken-io/springboot-course/tree/master/package-maven&lt;/p&gt;
</description>
<pubDate>Mon, 11 Dec 2017 07:52:00 +0000</pubDate>
<dc:creator>heycoder</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/heycoder/p/springboot-package-deploy.html</dc:identifier>
</item>
<item>
<title>JAVA设计模式 --- --- 策略模式 - 胡子叔叔</title>
<link>http://www.cnblogs.com/bearduncle/p/8023428.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bearduncle/p/8023428.html</guid>
<description>&lt;p&gt;开发一款游戏，里面有各种鸭子，这些鸭子有共同点：会游泳、会叫；&lt;/p&gt;
&lt;p&gt;1.设计超类Duck，里面有swim()方法和quack()方法，所有鸭子继承此超类，那么继承的对象便都有了游泳和叫的技能；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Duck {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;所有的鸭子都会游泳&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; swim() {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         System.out.println(&quot;I can swim&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;所有的鸭子都会叫&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; quack() {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         System.out.println(&quot;I can quack&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2.需求变更：增加三种叫的方法，不同的鸭子叫声不同，有“吱吱叫”、“呱呱叫”，还有不会叫；那么可以覆写每个子类quack()方法，使鸭子叫声不同。&lt;/p&gt;
&lt;p&gt;3.需求变更：鸭子得会飞；那么可以为超类Duck增加fly()方法，所有继承的子类便有了飞的技能；&lt;/p&gt;
&lt;p&gt;4.需求变更：有些鸭子不会飞；那么覆写每个鸭子的fly()方法，使不会飞的鸭子不能飞；&lt;/p&gt;
&lt;p&gt;这里已经存在一些问题：每当有新的鸭子出现，都需要检查fly()方法和quack()方法，确认是否需要覆写。这种继承 and 覆写的方法很糟糕。&lt;/p&gt;

&lt;p&gt;改变：&lt;/p&gt;
&lt;p&gt;继承或许不可取，改用接口；可以把fly和quack提取为两个接口，会飞的实现flyable接口，会叫的实现quackable接口；&lt;/p&gt;
&lt;p&gt;改用接口带来的麻烦：每个实现flyable或quackable的子类，都需要去覆写fly()方法和quack()方法，代码根本不能复用，导致做很多重复工作。&lt;/p&gt;

&lt;p&gt;问题分析：鸭子的fly和quack的行为在子类中不断的变化，让子类都具有这些行为是不恰当的；使用flyable和quackable接口，虽然可以解决一部分问题，但是fly()和quack()方法需在每个子类中覆写，代码不能复用，会增加很多重复工作。&lt;/p&gt;

&lt;p&gt;有种设计原则很适合这样的情况：&lt;/p&gt;
&lt;p&gt;一、找出需求中可能变化之处，把它们独立出来，不和不变的代码混在一起；（可以把易于变化的代码封装起来，以便可以轻易的改动和扩充此部分，而不影响不需要改动的其它部分）。&lt;/p&gt;
&lt;p&gt;二、针对接口编程而非针对实现。&lt;/p&gt;

&lt;p&gt;开始将fly行为和quack行为独立出来：&lt;/p&gt;
&lt;p&gt;准备组建两组类（完全脱离Duck），一组是fly相关的(实现FlyBehavior接口)，一组是quack相关的(实现QuackBehavior接口)。有：会飞(FlyWithWings)、不会飞(FlyNoWay)、呱呱叫(Quack)、吱吱叫(Squeak)、安静(MuteQuack)等类；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;会飞&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FlyWithWings &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; FlyBehavior {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; fly() {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         System.out.println(&quot;I'm flying.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;不会飞&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FlyNoWay &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; FlyBehavior {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; fly() {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         System.out.println(&quot;I can't fly.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;呱呱叫&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Quack &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; QuackBehavior {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; quack() {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         System.out.println(&quot;呱！呱！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;吱吱叫&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Squeak &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; QuackBehavior {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; quack() {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         System.out.println(&quot;吱！吱！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;不会叫&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MuteQuack &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; QuackBehavior {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; quack() {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         System.out.println(&quot;&amp;lt;&amp;lt; Silence &amp;gt;&amp;gt;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新设计中，鸭子的子类将使用接口(FlyBehavior和QuackBehavior)所表示的行为，子类不需要去实现特定的行为，而是由FlyBehavior和QuackBehavior的实现类来实现特定的行为。&lt;/p&gt;

</description>
<pubDate>Mon, 11 Dec 2017 07:47:00 +0000</pubDate>
<dc:creator>胡子叔叔</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bearduncle/p/8023428.html</dc:identifier>
</item>
<item>
<title>（翻译）使用Api分析器与Windows兼容包来编写智能的跨平台.NET Core应用 - huanent</title>
<link>http://www.cnblogs.com/huanent/p/8013221.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huanent/p/8013221.html</guid>
<description>&lt;p&gt;本文翻译自Scott Hanselman博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.hanselman.com/blog/WritingSmarterCrossplatformNETCoreAppsWithTheAPIAnalyzerAndWindowsCompatibilityPack.aspx&quot; target=&quot;_blank&quot;&gt;https://www.hanselman.com/blog/WritingSmarterCrossplatformNETCoreAppsWithTheAPIAnalyzerAndWindowsCompatibilityPack.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;正文：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/779972/201712/779972-20171209232248576-191105994.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是最近这几周你应该知道的一对.Net Core界的优秀工具。我们在编写或者移植跨平台代码时，它们非常有帮助。&lt;/p&gt;
&lt;h2&gt;.NET API 分析器&lt;/h2&gt;
&lt;p&gt;首先是&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/&quot; target=&quot;_blank&quot;&gt;API 分析器&lt;/a&gt;。如你所知，有时候我们会遇到过时的API，或者一个方法你可以在Windows下使用，但是在Linux下却不能工作。API分析器是一个Roslyn（Roslyn是C#/.NET编译器的名称）分析器，它可以很容易地添加到你的项目，通过一个&lt;a href=&quot;https://www.nuget.org/packages/Microsoft.DotNet.Analyzers.Compatibility/&quot; target=&quot;_blank&quot;&gt;NuGet包&lt;/a&gt;。你所要做的就是添加这个包，之后你将立即得到警告，或者波浪线表示API有问题。&lt;/p&gt;
&lt;p&gt;看看这个简单地例子。我将生成一个简单地控制台应用，它已经添加了&lt;a href=&quot;https://www.nuget.org/packages/Microsoft.DotNet.Analyzers.Compatibility/&quot; target=&quot;_blank&quot;&gt;API分析器&lt;/a&gt;。注意这个版本号是目前的，以后会改变。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
C:\supercrossplatapp&amp;gt; dotnet &lt;span&gt;new&lt;/span&gt;&lt;span&gt; console
C:\supercrossplatapp&lt;/span&gt;&amp;gt; dotnet add package Microsoft.DotNet.Analyzers.Compatibility --version &lt;span&gt;0.1&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;-alpha
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后我将使用一个只能在Windows下使用的API。但是我依旧希望在任何平台下都可以运行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
{
    Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
 
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; w =&lt;span&gt; Console.WindowWidth;
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Console Width is {w}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后我使用“dotnet build”命令（或者运行命令，运行也包含build动作）然后我得到了一个漂亮的警告，这个API不能工作在所有平台下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
C:\supercrossplatapp&amp;gt;&lt;span&gt; dotnet build

Program.cs(&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;,&lt;span&gt;33&lt;/span&gt;): warning PC001: Console.WindowWidth isn&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t supported on Linux, MacOSX [C:\Users\scott\Desktop\supercr&lt;/span&gt;
&lt;span&gt;ossplatapp\supercrossplatapp.csproj]
  supercrossplatapp &lt;/span&gt;-&amp;gt; C:\supercrossplatapp\bin\Debug\netcoreapp2.&lt;span&gt;0&lt;/span&gt;&lt;span&gt;\supercrossplatapp.dll

Build succeeded.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.NET团队的&lt;a href=&quot;https://twitter.com/Olia_Gi&quot; target=&quot;_blank&quot;&gt;Olia&lt;/a&gt;做了一个很好的YouTube视频，她的视频展示了API分析器是如何工作的。&lt;a href=&quot;https://github.com/dotnet/platform-compat&quot; target=&quot;_blank&quot;&gt;API分析器的代码&lt;/a&gt;已经上传到Github。如果你发现了bug请在上面提issue！&lt;/p&gt;
&lt;h2&gt;.NET CORE的windows兼容包&lt;/h2&gt;
&lt;p&gt;第二个，&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/&quot; target=&quot;_blank&quot;&gt;.NET Core的Windows兼容包&lt;/a&gt;是一个很好的补充技术。当.NET Core 2.0开发完成并推出后，它包含3.2万个很好地兼容现有.NET Framework代码的API。实际上，它们确实兼容地非常好，我之前可以很容易地将一个1&lt;a href=&quot;https://www.hanselman.com/blog/PortingA15YearOldNET11VirtualCPUTinyOperatingSystemSchoolProjectToNETCore20.aspx&quot; target=&quot;_blank&quot;&gt;5年前的.NET程序&lt;/a&gt;移植到.NET Core2.0上，这个过程中都没有碰到什么麻烦。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;从.NET Standard1.6的1.3万个api到.NET Standard2.0的3.2万个API，他们增加了一倍多的可用API&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;.NET Standard非常的酷炫，因为它&lt;a href=&quot;https://github.com/dotnet/standard/blob/master/docs/versions.md&quot; target=&quot;_blank&quot;&gt;支持如下平台&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;.NET Framework 4.6.1&lt;/li&gt;
&lt;li&gt;.NET Core 2.0&lt;/li&gt;
&lt;li&gt;Mono 5.4&lt;/li&gt;
&lt;li&gt;Xamarin.iOS 10.14&lt;/li&gt;
&lt;li&gt;Xamarin.Mac 3.8&lt;/li&gt;
&lt;li&gt;Xamarin.Android 7.5&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当你迁移代码到.NET Core时会有大量的Windows平台特有的依赖，你可能会遇到有些API在.NET Standard找不到的情况。这时，这个新的NuGet包&lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Windows.Compatibility&quot;&gt;Microsoft.Windows.Compatibility&lt;/a&gt;（预览），它可以提供原先只在.NET Framework可用的API。&lt;/p&gt;
&lt;p&gt;在这个兼容包里面的API会包含两种类型。一种是这个API原先就是Windows的一部分，但是也可以跨平台工作。另外一种是只能在windows下工作，因为他们是操作系统特有的。例如，API访问WIndows注册表这是Windows下独有的。但是System.DirectoryServices或者System.Drawing他们却可以在任何平台都工作的很好。Windows兼容包在.NET Core现在可用Api的基础上新增呢20000多个API。可以参阅&lt;a href=&quot;https://channel9.msdn.com/Events/Connect/2017/T123?ocid=player&quot; target=&quot;_blank&quot;&gt;Immol录制的视频&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;问题在于，如果这些不可用API是你使用.NET Core的拦路虎，那么现在你可以借助兼容包，耶！但是你要知道你为什么需要迁移到.NET Core。.NET Core与完整版.NET Framework都可以在Windows上工作。如果你的程序目前工作的很好，并且不需要.NET Core的新特性，那么就不需要移植到.NET Core。这是&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/choosing-core-framework-server&quot; target=&quot;_blank&quot;&gt;规则列表&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;使用.NET Core的情况：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;你有跨平台需求&lt;/li&gt;
&lt;li&gt;你的目标是微服务&lt;/li&gt;
&lt;li&gt;你使用Dorcker容器&lt;/li&gt;
&lt;li&gt;你有高性能与可拓展需求&lt;/li&gt;
&lt;li&gt;你需要同步.NET版本&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;使用.NET Core的情况：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;你的程序当前使用.NET Framework（推荐采用拓展来替代迁移）&lt;/li&gt;
&lt;li&gt;你的程序使用第三方.NET库或者NuGet包，它们的.NET Core版本还不可用&lt;/li&gt;
&lt;li&gt;你所使用的.NET技术在.NET Core上还没有支持&lt;/li&gt;
&lt;li&gt;你的程序所使用的操作系统平台目前.NET Core还不支持&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Mon, 11 Dec 2017 07:41:00 +0000</pubDate>
<dc:creator>huanent</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huanent/p/8013221.html</dc:identifier>
</item>
<item>
<title>WPF自定义产品框架 - 未雨先惆</title>
<link>http://www.cnblogs.com/BeiJing-Net-DaiDai/p/8023264.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/BeiJing-Net-DaiDai/p/8023264.html</guid>
<description>&lt;p&gt;本次主要讲解一下WPF业务类产品开发架构。&lt;/p&gt;
&lt;p&gt;产品架构分为WPF客户端程序和WCF服务端程序，分离的目的也是为了，在扩展其他业务终端的时候都可以通过同一个服务端去访问，一定程度上减少开发工作量。&lt;/p&gt;
&lt;p&gt;在讲解之前先看一下效果，有助于理解：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/548093/201712/548093-20171211142607759-529749580.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/548093/201712/548093-20171211142621665-7458219.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/548093/201712/548093-20171211142630727-1804214723.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/548093/201712/548093-20171211142640415-1887711529.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/548093/201712/548093-20171211142658805-913565859.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/548093/201712/548093-20171211142709680-1031806943.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是客户端的效果图。整个产品分为两部分：1.WPF开发的展示效果的客户端   2.WCF开发的提供数据服务接口的服务端   本章主要讲解一下实际中开发WPF开发客户端所使用的框架，结合WCF服务端应用。&lt;/p&gt;
&lt;p&gt;我们先看下&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第一部分WPF客户端结构&lt;/strong&gt;&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/548093/201712/548093-20171211144023993-582386193.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;简单的说下几个比较重要的DLL&lt;/p&gt;
&lt;p&gt;CommonLib：这个是基于原有的Window模块扩展的窗体，实现了界面模板的自定义，重新实现了窗体的关闭的打开效果，做了个动画处理&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/548093/201712/548093-20171211144402477-481217871.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是两套自定义窗体（一套包含一个主窗体和一个子窗体）&lt;/p&gt;
&lt;p&gt;CommonTool：具备一些通用性功能：如访问服务端请求代码、XML操作类、JSON序列化、文件上传下载&lt;/p&gt;
&lt;p&gt;BimCollege：界面模块。界面结构采用内嵌的方式，每个内嵌的板块只负责自己板块内功能和数据，从外层向内数据通过属性传递，由内向外通过事件将提示信息通过公用控件抛出。效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/548093/201712/548093-20171211145307493-916704428.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;结构介绍：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/548093/201712/548093-20171211145537055-1653628254.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里有自定义控件   扩展控件   以及界面模块的包装后的用户控件  在Theme中有一些原生控件和自定义控件的样式模板：包含动画  触发器  等等&lt;/p&gt;
&lt;p&gt;在这个里面基本包含了wpf大部分内容&lt;/p&gt;


&lt;p&gt;BLL：三层结构中的业务逻辑层，不同的是我们做了基础功能的包装，只需要实现特定业务的操作就行，基础功能在父级函数中已经处理&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/548093/201712/548093-20171211150223118-1084577735.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; BusinessModel：界面中绑定的Model，区分开界面和与服务器对应的Model主要是界面的Model基本都会因为界面数据绑定和数据显示的原因进行一些扩展，而这些服务器是不需要的。&lt;/p&gt;
&lt;p&gt;Server：通过Server访问服务器接口，包装参数传递给特定的接口，返回的json进行反序列化读取。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/548093/201712/548093-20171211150531665-1287257166.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在构造内的接口名称是公共类中提供的通过id去删除数据，不需要再去写方法。下面的保存功能在公共功能中不具备的需要新加。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第二部分WCF服务端结构&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://images2017.cnblogs.com/blog/548093/201712/548093-20171211151301540-1816231938.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是服务端程序，一部分和客户端是通用的，只是具备了数据库操作功能和对客户端提供了数据访问服务支持。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;软件环境：VS2013+Sql Server2008&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本套产品源码出售详细请加我哦。。。。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;欢迎各位我QQ ：1031017817    或者在页面下方加群   入群后@群主    期待你~~~~&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 11 Dec 2017 07:23:00 +0000</pubDate>
<dc:creator>未雨先惆</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/BeiJing-Net-DaiDai/p/8023264.html</dc:identifier>
</item>
<item>
<title>iOS 视频播放方式整理 - Zxiao..旭</title>
<link>http://www.cnblogs.com/taoxu/p/7308200.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/taoxu/p/7308200.html</guid>
<description>
&lt;p&gt;&lt;strong&gt;初衷&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      多媒体这整个系列的文章自己也准备好开始整理了，先从视频音频最简单也是最常用的播放出发慢慢的往下深究，探索到底层的编码解码等等，这篇文章就从视频的播放这个最简单的说起。&lt;/p&gt;
&lt;p&gt;      iOS的视频播放方式有几种？其实要是只是简单的想播放一段视频并且对UI没什么要求的话的确比较简单，很容易搞定，但我相信这猴子那个情况除了你的Demo一般是不会出现的，对播放UI的定义以及可能有各种不同的需求对应着你是不能随便写个播放器就没事了的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最原始的播放&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      要不是刚接触iOS开发的同学应该是知道MediaPlayer这个框架的，要是想简单的使用它播放视频，可能几行代码就能搞定了，它里面有一个MPMoviePlayerViewController，利用起来简单的不要不要的。&lt;/p&gt;
&lt;p&gt;      不过遗憾的是自从iOS 9.0开始，它是被Apple遗弃了的，9.0之后的项目建议用的我们下面再说，你要是有维护9.0之前的项目，可能它你也有必要了解一下，我们也介绍一个它的基本的使用，以及它里面的整个播放的代码逻辑。&lt;/p&gt;
&lt;p&gt;      36氪的工程师以前写过一个三方，&lt;a href=&quot;https://github.com/36Kr-Mobile/KRVideoPlayer&quot; data-pjax=&quot;#js-repo-pjax-container&quot;&gt;KRVideoPlayer&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author&quot;&gt;      这个播放器就是基于MediaPlayer框架写的，里面就两个文件，代码也是相当的简单，你直接把它源码下载下来之后我们当一个了解MediaPlayer的Demo简单的说一下。下满是它git上面展示的gif Demo图片：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;author&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/739006/201712/739006-20171205140810128-1481124759.gif&quot; alt=&quot;&quot; width=&quot;284&quot; height=&quot;506&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author&quot;&gt;     &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;      你在看看它源码里面的文件：只有 KRVideoPlayerControlView 和 KRVideoPlayerController 两个，简单分析它们：&lt;/p&gt;
&lt;p&gt;      1、KRVideoPlayerControlView 继承自 UIView&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author&quot;&gt;          说白了这个文件写的就是播放器的UI，包括一些播放按钮，进度条，以及全屏切换等等&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author&quot;&gt;      2、&lt;/span&gt;KRVideoPlayerController   集成自 MPMoviePlayerController  &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author&quot;&gt;          继承之后直接使用MPMoviePlayerController来播放视频，是在它初始化的时候在self.view 上添加 KRVideoPlayerControlView 这个自定义的UI，你可以看到下面的代码：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
// 初始化KRVideoPlayerController
- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super init];
    if (self) {
        self.view.frame = frame;
        self.view.backgroundColor = [UIColor blackColor];
        self.controlStyle = MPMovieControlStyleNone;
        [self.view addSubview:self.videoControl];
        self.videoControl.frame = self.view.bounds;
        [self configObserver];
        [self configControlAction];
    }
    return self;
}

// 懒加载KRVideoPlayerControlView
- (KRVideoPlayerControlView *)videoControl
{
    if (!_videoControl) {
        _videoControl = [[KRVideoPlayerControlView alloc] init];
    }
    return _videoControl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;      关于MediaPlayer还有下面的需要你留意一下：&lt;/p&gt;
&lt;p&gt;      1、关于播放或者暂停等的方法都是在MPMediaPlayback协议里面的&lt;/p&gt;
&lt;p&gt;      2、MPMoviePlayerController就是遵守了上面说的MPMediaPlayback协议，下面的MPMoviePlayerController源码:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/739006/201712/739006-20171205143635691-1566005174.png&quot; alt=&quot;&quot; width=&quot;907&quot; height=&quot;83&quot;/&gt;&lt;/p&gt;

&lt;p&gt;      3、在给MPMoviePlayerController写的类别MPMovieProperties、MPMoviePlayerThumbnailGeneration、MPMoviePlayerTimedMetadataAdditions包含了这个播放器几乎所有的功能，淡然这部分的方法代代码都是在MPMoviePlayerController.h中，有兴趣或者需要的可以command进去了解。&lt;/p&gt;
&lt;p&gt;      4、上面介绍的三方提供给大家的不仅仅是一份代码，希望我们都能理解一个思路，就是自定义的播放器我们该怎么去理解去动手做。这点后面我还会再提。&lt;/p&gt;
&lt;p&gt;      关于MediaPlayer的暂时就提这么多，有问题欢迎交流。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;该升级一下了&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      嗯，该升级一下了，说到这里就的说我们前面说到的9.0系统之后的播放器，这说这个之前顺便提一个自己的见解，以前我们开发应用的时候我记得最开始适配的最低版本是7.0以上的，到前两年发展到8.0以上，按照我自己的理解，在11系统发布后我们要是做新应用或者旧的项目项目维护的时候应该要慢慢的舍弃7.0以及8.0的了，也就是最低版本按照9.0开始，因为不管是7.0还是8.0,用户所占的比例真的是很小很下了，并且一些新鲜的功能在我们的低版本是不支持的， 维护的成本也会慢慢的变得越来越大，当然这些也都不是空穴来风，可以上网去搜一下8.0之前版本系统占得比例，以及8.0、7.0给整个维护带来的成本，我在最近逛一些论坛的时候也有同行在说这个问题了。好了回到正题！&lt;/p&gt;
&lt;p&gt;      说我们的正题：9.0之后Apple建议用的： AVKit框架，首先AVKit框架是8.0之后出现的，它是建立在我们熟悉的AVFoundation框架之上的.&lt;/p&gt;
&lt;p&gt;      利用AVKit进行视频播放时我们整理一下我们需要的大致都在这几个类或者协议当中：&lt;/p&gt;
&lt;p&gt;      1、AVPlayerItem                          （视频要播放的元素）&lt;/p&gt;
&lt;p&gt;      2、AVPlayerLayer                        （播放显示视频的图层界面）&lt;/p&gt;
&lt;p&gt;      3、AVPlayer                                （用于播放音视频）&lt;/p&gt;
&lt;p&gt;      4、AVPlayerViewController            （控制器）&lt;/p&gt;
&lt;p&gt;      5、AVPlayerViewControllerDelegate（协议）&lt;/p&gt;
&lt;p&gt;      要是想要彻底的了解AVFoundation这个框架是不容易的，这个框架的确很庞大，有一本书叫做 《AV Foundation 开发秘籍》有兴趣的可以去购买看看，自己也在学习当中，后续的文章全都会整理在这个系列当中。&lt;/p&gt;
&lt;p&gt;      这篇文章就等于是给这个系列开一个头，这个框架的学习之路应该是漫长的，也希望自己能坚持完吧这个系列文章全都总结出来。下面把上面说的各个类分别说一下：&lt;/p&gt;
&lt;p&gt;      1、AVPlayerItem&lt;/p&gt;
&lt;p&gt;      在我们使用AVPlayer播放视频的时候，提供视频信息的就是AVPlayerItem，一个AVPlayerItem对应着你提供的一个视频Url资源，这个理解它的时候可以把它比作一个Model, 你初始化了AVPlayerItem之后，并不是马上就可以使用它了，因为凡是和Url网络扯上关系的，都需要时间，等AVPlayerItem加载好之后就可以使用它了，那这一步我们怎么处理呢？&lt;/p&gt;
&lt;p&gt;      1&amp;gt; : 答案是利用KVO观察statues属性为 AVPlayerStatusReadyToPlay，看看这个属性的定义：&lt;/p&gt;
&lt;p&gt;           @property (nonatomic, readonly) AVPlayerStatus status  它是一个只读属性，这点也需要注意，其实也就理解利用KVO的原因。&lt;/p&gt;
&lt;p&gt;      2&amp;gt;: 顺便总结要是你要显示当前视屏的缓存进度，你需要监测它的loadedTimeRanges属性。&lt;/p&gt;
&lt;p&gt;      2、AVPlayerLayer&lt;/p&gt;
&lt;p&gt;      它主要负责的就是视频的显示，继承自CALayer,其实你可以把它理解成我们的View。我们自定义的那些播放时候的控件就是添加在它上面的，比如我们能看到的播放按钮，停止按钮，或者播放进度条等等。&lt;/p&gt;
&lt;p&gt;      3、 AVPlayer  &lt;/p&gt;
&lt;p&gt;      它主要负责的是管理视频播放，暂停等等，相当于一个视频管理器，要是类比的话他就是一个ViewController（当然不是真正的ViewController）,这三者就基本含括了一个基本的视频播，基于着三者我们总结一下播放一个视频的基本的过程：&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;首先，得到视频的URL&lt;/li&gt;
&lt;li&gt;根据URL创建AVPlayerItem&lt;/li&gt;
&lt;li&gt;把AVPlayerItem 提供给 AVPlayer&lt;/li&gt;
&lt;li&gt;AVPlayerLayer 显示视频。&lt;/li&gt;
&lt;li&gt;AVPlayer 控制视频， 播放， 暂停， 跳转 等等。&lt;/li&gt;
&lt;li&gt;播放过程中获取缓冲进度，获取播放进度。&lt;/li&gt;
&lt;li&gt;视频播放完成后做些什么，是暂停还是循环播放，还是获取最后一帧图像。&lt;code&gt;                     &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;      4、AVPlayerViewController&lt;/p&gt;
&lt;p&gt;      它是Apple 帮我们封装好的可以一个视频播放控制器，它就有一个  @property (nonatomic, strong, nullable) AVPlayer *player 的属性，前面的AVPlayer也就像相应的需要赋值给它，它里面还有一些我们需要理解一下的属性，我们也把它写出来，具体代码我们下面再看：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;player：                                    设置播放器&lt;/li&gt;
&lt;li&gt;showsPlaybackControls：           设置是否显示媒体播放组件，默认YES&lt;/li&gt;
&lt;li&gt;videoGravity：                           设置视频拉伸模式&lt;/li&gt;
&lt;li&gt;allowsPictureInPicturePlayback： 设置是否允许画中画回放，默认YES&lt;/li&gt;
&lt;li&gt;delegate：                                设置代理&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;      5、AVPlayerViewControllerDelegate&lt;/p&gt;
&lt;p&gt;      这个代理就是前面说的AVPlayerViewController的协议，它主要的是为画中画的设置的代理，前面介绍 AVPlayerViewController 的时候有看到过一个是否允许画中画的属性，具体什么是画中画相信大家都了解，看过直接的朋友应该都看到了这个技术点的具体应用。我们看看它里面的饭法规主要都干了些什么？&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
// 1、即将开始画中画
- (void)playerViewControllerWillStartPictureInPicture:(AVPlayerViewController *)playerViewController;
// 2、开始画中画
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController *)playerViewController;
// 3、画中画失败
- (void)playerViewController:(AVPlayerViewController *)playerViewController failedToStartPictureInPictureWithError:(NSError *)error;
// 4、即将结束画中画
- (void)playerViewControllerWillStopPictureInPicture:(AVPlayerViewController *)playerViewController;
// 5、结束画中画
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController *)playerViewController;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;我们看一个简单的Demo &lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      我们先不说关于AVFoundation复杂的东西，因为自己也是在学习这个 AVFoundation当中，我们先看一些很简单的Demo，就简单的利用一下AVFoundation 播放一下视频：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/739006/201712/739006-20171207141654706-1020626088.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;       我们在简单的看一下我们写的这部分的代码，简单的先使用了一下我们说的上面的一些知识点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    self.view.backgroundColor = [UIColor whiteColor];
    
    self.avPlayerItem   = [AVPlayerItem playerItemWithURL:[NSURL URLWithString:MovieURL]];
    self.avPlayer       = [[AVPlayer alloc]initWithPlayerItem:self.avPlayerItem];
    self.avPlayerLayer  = [AVPlayerLayer playerLayerWithPlayer:self.avPlayer];
    self.avPlayerLayer.frame = CGRectMake(10, 100, 355, 200);
    [self.view.layer addSublayer:self.avPlayerLayer];
    // 添加观察者
    [self addObserverWithAVPlayerItem];
}

#pragma mark --
#pragma mark -- KVO
-(void)addObserverWithAVPlayerItem{
    
    //状态添加观察者
    [self.avPlayerItem  addObserver:self forKeyPath:@&quot;status&quot; options:(NSKeyValueObservingOptionNew) context:nil];
    // 缓存进度添加观察者
    [self.avPlayerItem  addObserver:self forKeyPath:@&quot;loadedTimeRanges&quot; options:NSKeyValueObservingOptionNew context:nil];
}

-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&amp;lt;NSKeyValueChangeKey,id&amp;gt; *)change context:(void *)context{
    
    AVPlayerItem * avplayeritem = (AVPlayerItem *)object;
    if ([keyPath isEqualToString:@&quot;status&quot;]) {
        
        AVPlayerStatus status = [[change objectForKey:@&quot;new&quot;] intValue];
        if (status == AVPlayerStatusReadyToPlay) {
            
            NSLog(@&quot;准备好播放&quot;);
            CMTime duration = avplayeritem.duration;
            NSLog(@&quot;视频总时长:%.2f&quot;,CMTimeGetSeconds(duration));
            // 播放
            [self.avPlayer play];
            
        }else if (status == AVPlayerStatusFailed){
            NSLog(@&quot;视频准备发生错误&quot;);
        }else{
            NSLog(@&quot;位置错误&quot;);
        }
    }else if ([keyPath isEqualToString:@&quot;loadedTimeRanges&quot;]){
        
         // 可以自定义缓存进度
         NSTimeInterval timeInterval = [self alreadyCacheVideoProgress];
         NSLog(@&quot;视频已经缓存的时长:%.2f&quot;,timeInterval);
    }
}

#pragma mark --
#pragma mark -- alreadyCacheVideoProgress
-(NSTimeInterval)alreadyCacheVideoProgress{
    
    // 先获取到它的缓存的进度
    NSArray * cacheVideoTime = [self.avPlayerItem loadedTimeRanges];
    // CMTimeRange 结构体 start duration 表示起始位置 和 持续时间
    // 获取缓冲区域
    CMTimeRange timeRange = [cacheVideoTime.firstObject CMTimeRangeValue];
    float startSeconds    = CMTimeGetSeconds(timeRange.start);
    float durationSeconds = CMTimeGetSeconds(timeRange.duration);
    // 计算总缓冲时间 = start + duration
    NSTimeInterval result = startSeconds + durationSeconds;
    return result;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这些点我们有必要注意一下&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      1、CMTime  一个专门用于标识视频时间的结构体&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
/*!
        @typedef        CMTime
        @abstract       Rational time value represented as int64/int32.
*/
typedef struct
{
        CMTimeValue     value;          /*! @field value The value of the CMTime. value/timescale = seconds. 帧数 */
        CMTimeScale     timescale;      /*! @field timescale The timescale of the CMTime. value/timescale = seconds.&lt;code&gt;帧率（影片每秒有几帧）&lt;/code&gt;*/&lt;br/&gt;CMTimeFlags flags; /*! @field flags The flags, eg. kCMTimeFlags_Valid, kCMTimeFlags_PositiveInfinity, etc. */ &lt;br/&gt;CMTimeEpoch epoch; /*! @field epoch Differentiates between equal timestamps that are actually different because of looping, multi-item sequencing, etc.        Will be used during comparison: greater epochs happen after lesser ones. Additions/subtraction is only possible within a single epoch, however, since epoch length may be unknown/variable. */&lt;br/&gt;} CMTime;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;      前面的代码中我们看到有一个获取视频总长度的方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
      CMTime duration = avplayeritem.duration;
      NSLog(@&quot;视频总时长:%.2f&quot;,CMTimeGetSeconds(duration));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;      可以看到CMTimeGetSeconds这个函数把一个CMTime类型转化成一个浮点型，如果一个影片为60帧/每秒， 当前想要跳转到120帧的位置，也就是两秒的位置，那么就可以创建一个 CMTime 类型数据。它通常可以用下面两个函数来创建.&lt;/p&gt;
&lt;p&gt;      1&amp;gt;： CMTimeMake(int64_t value, int32_t scale)                          Eg: CMTime time1 = CMTimeMake(120, 60);&lt;/p&gt;
&lt;p&gt;      2&amp;gt;：CMTimeMakeWithSeconds(Flout64 seconds, int32_t scale)   Eg: CMTime time2 = CMTimeWithSeconds(120, 60);&lt;/p&gt;
&lt;div readability=&quot;41.049288061336&quot;&gt;
&lt;p&gt;      CMTimeMakeWithSeconds 和 CMTimeMake 区别在于，第一个函数的第一个参数可以是float，其他一样。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
  - (id)addPeriodicTimeObserverForInterval:(CMTime)interval queue:(nullable dispatch_queue_t)queue usingBlock:(void (^)(CMTime time))block;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;     &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      比如说：我们把时间间隔设置为， 1/ 10 秒，然后 block 里面更新 UI。就是一秒钟更新10次UI，我们验证一下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
  [self.avPlayer addPeriodicTimeObserverForInterval:CMTimeMake(1, 10) queue:dispatch_get_main_queue() usingBlock:^(CMTime time) {
        
          // CMTime的timescale的定义帮助理解下面代码
          // @field timescale The timescale of the CMTime. value/timescale = seconds.
          float currentPlayTime = (double)self.avPlayerItem.currentTime.value/ self.avPlayerItem.currentTime.timescale;
          NSLog(@&quot;当前播放进度：%f&quot;,currentPlayTime);
    }];
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;      我们随便截取出一段打印的日志，看一下结果就可以验证：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/739006/201712/739006-20171207162155925-102666625.png&quot; alt=&quot;&quot; width=&quot;557&quot; height=&quot;208&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;      2、AVPlayerItem  视频播放结束通知&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
/* Note that NSNotifications posted by AVPlayerItem may be posted on a different thread from the one on which the observer was registered. */

// notifications                                                                                description
AVF_EXPORT NSString *const AVPlayerItemTimeJumpedNotification                    NS_AVAILABLE(10_7, 5_0);       // the item's current time has changed discontinuously
AVF_EXPORT NSString *const AVPlayerItemDidPlayToEndTimeNotification      NS_AVAILABLE(10_7, 4_0);   // item has played to its end time
AVF_EXPORT NSString *const AVPlayerItemFailedToPlayToEndTimeNotification NS_AVAILABLE(10_7, 4_3);   // item has failed to play to its end time
AVF_EXPORT NSString *const AVPlayerItemPlaybackStalledNotification       NS_AVAILABLE(10_9, 6_0);    // media did not arrive in time to continue playback
AVF_EXPORT NSString *const AVPlayerItemNewAccessLogEntryNotification     NS_AVAILABLE(10_9, 6_0);       // a new access log entry has been added
AVF_EXPORT NSString *const AVPlayerItemNewErrorLogEntryNotification              NS_AVAILABLE(10_9, 6_0);       // a new error log entry has been added

// notification userInfo key                                                                    type
AVF_EXPORT NSString *const AVPlayerItemFailedToPlayToEndTimeErrorKey     NS_AVAILABLE(10_7, 4_3);   // NSError
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;      3、这些个三方框架&lt;/p&gt;
&lt;p&gt;           (1):  &lt;a href=&quot;https://link.jianshu.com/?t=https://github.com/viki-org/VKVideoPlayer&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;VKVideoPlayer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;           (2): &lt;a href=&quot;https://link.jianshu.com/?t=https://github.com/lobianco/ALMoviePlayerController&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;ALMoviePlayerController&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;           (3): &lt;a href=&quot;https://link.jianshu.com/?t=https://github.com/piemonte/PBJVideoPlayer&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;PBJVideoPlayer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;           (4): 还有这个比较厉害的&lt;a href=&quot;http://www.jianshu.com/p/1721cd8622f0&quot; target=&quot;_blank&quot;&gt;MobileVLCKit&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;      关于上面上的这些三方都给出了连接，最后一个给的是一篇帮助我们集成的文章，这些三方在后面这个系列文章的总结中会一点点慢慢的全都说一下，在这里只提一下有这些框架在，有兴趣可以先了解，后面我在总结。&lt;/p&gt;
&lt;p&gt;      我的博客即将同步至腾讯云+社区，邀请大家一同入驻。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 11 Dec 2017 07:17:00 +0000</pubDate>
<dc:creator>Zxiao..旭</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/taoxu/p/7308200.html</dc:identifier>
</item>
<item>
<title>JavaWeb框架_Struts2_(七)-----&gt;文件的上传和下载 - Mairr</title>
<link>http://www.cnblogs.com/Mairr/p/8005178.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Mairr/p/8005178.html</guid>
<description>
&lt;p&gt; 　　这个章节是Struts2框架应用最广泛的三个版块（上传下载、国际化、校验输入）之一，所以这一版块的学习还蛮重要的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 章节目录&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Struts2文件上传
&lt;ul&gt;&lt;li&gt;单文件上传&lt;/li&gt;
&lt;li&gt;拦截器实现文件过滤&lt;/li&gt;
&lt;li&gt;文件上传常量配置&lt;/li&gt;
&lt;li&gt;Struts2多文件上传&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Struts2文件下载&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.  具体内容&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.1Struts2文件上传&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.1.1单文件上传&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　本小节通过一个示例讲解Struts2如何实现单文件的上传。&lt;/p&gt;
&lt;p&gt;（1） 先写一个选择上传单文件页面（select.jsp）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;%@ taglib &lt;/span&gt;&lt;span&gt;prefix&lt;/span&gt;&lt;span&gt;=&quot;s&quot;&lt;/span&gt;&lt;span&gt; uri&lt;/span&gt;&lt;span&gt;=&quot;/struts-tags&quot;&lt;/span&gt;&lt;span&gt; %&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;%--
  &lt;/span&gt;&lt;span&gt;Created by IntelliJ IDEA.
  User: mairr
  Date: 17-12-7
  Time: 下午9:04
  To change this template use File | Settings | File Templates.
--%&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;%@ page &lt;/span&gt;&lt;span&gt;contentType&lt;/span&gt;&lt;span&gt;=&quot;text/html;charset=UTF-8&quot;&lt;/span&gt;&lt;span&gt; import&lt;/span&gt;&lt;span&gt;=&quot;java.util.*&quot;&lt;/span&gt;&lt;span&gt; language&lt;/span&gt;&lt;span&gt;=&quot;java&quot;&lt;/span&gt;&lt;span&gt; pageEncoding&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt; %&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;upload_test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;s:form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;upload&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt; theme&lt;/span&gt;&lt;span&gt;=&quot;simple&quot;&lt;/span&gt;&lt;span&gt; enctype&lt;/span&gt;&lt;span&gt;=&quot;multipart/form-data&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        输入帐号：&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;s:textfield &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uid&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        选择头像：&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;s:file &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;headImage&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;s:submit &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;提交&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;br/&gt;　　　　&lt;br/&gt;　　　　　&lt;span&gt;&amp;lt;&lt;span&gt;s&lt;span&gt;:fielderror&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;　　　　&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;s:form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如下所示的一个上传选择界面框：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201712/1194681-20171208133303296-1660901034.png&quot; alt=&quot;&quot; width=&quot;234&quot; height=&quot;150&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2） 当文件上传页面提交请求时，请求发送到upload.action，这是一个Struts2的Action，该Action处理上传请求，具体的UploadAction类代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; action;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.io.FileUtils;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.struts2.ServletActionContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.File;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UploadAction &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport {&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; String uid;        　　　　　　　　　&lt;span&gt;//&lt;span&gt; 封装帐号（uid）请求参数属性&lt;/span&gt;&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; File headImage;     　　　　　　　　&lt;span&gt;//&lt;span&gt; 封装上传文件域属性&lt;/span&gt;&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; String headImageContentType;     &lt;span&gt;//&lt;span&gt; 封装上传文件类型的属性&lt;/span&gt;&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String headImageFileName;　　　 　&lt;span&gt;//&lt;span&gt; 封装上传文件属性&lt;/span&gt;&lt;/span&gt;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUid() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; uid;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUid(String uid) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.uid =&lt;span&gt; uid;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; File getHeadImage() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; headImage;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setHeadImage(File headImage) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.headImage =&lt;span&gt; headImage;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getHeadImageContentType() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; headImageContentType;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setHeadImageContentType(String headImageContentType) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.headImageContentType =&lt;span&gt; headImageContentType;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getHeadImageFileName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; headImageFileName;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setHeadImageFileName(String headImageFileName) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.headImageFileName =&lt;span&gt; headImageFileName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String execute() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 上传文件的保存位置在“/image”,该位置在tomcat服务器的“webapps”之中&lt;/span&gt;
        String  realpath= ServletActionContext.getServletContext().getRealPath(&quot;/image&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 声明文件目录image，如果文件名不存在就建一个呗～&lt;/span&gt;
        File file = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(realpath);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;file.exists()){
            file.mkdirs();
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实现文件上传，也就是做了一个方法调用～&lt;/span&gt;
        FileUtils.copyFile(headImage,&lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(file,headImageFileName));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; SUCCESS;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　需要注意的是，上面的Action除了包含两个表单域的name属性外，还包含headImageContentType和headImageFileName两个属性，这两个属性分别能用于封装上传文件的文件类型、上传文件的文件名。可以这样认为：如果表单中包含一个name属性为xxx的文件域，则对应的Action需要使用3个属性来封装文件域信息：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;类型为java.io.File的xxx属性来封装&lt;span&gt;&lt;em&gt;&lt;strong&gt;文件域的信息&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;;&lt;/li&gt;
&lt;li&gt;类型为String的xxxFileName属性封装了该文件域对应的&lt;span&gt;&lt;em&gt;&lt;strong&gt;文本内容&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;;&lt;/li&gt;
&lt;li&gt;类型为String的xxxContentType属性封装了该文件域对应的&lt;span&gt;&lt;em&gt;&lt;strong&gt;文件类型&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　 所以，在Action的execute方法中，可以直接通过这3个属性获取上传文件的文件名、文件类型和文件内容。&lt;/p&gt;
&lt;p&gt;（3） 接下来进行UploadAction的配置（struts.xml文件配置），具体代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE struts PUBLIC
        &quot;-//Apache Software Foundation//DTD Struts Configuration 2.5//EN&quot;
        &quot;http://struts.apache.org/dtds/struts-2.5.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;struts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;指定国际化资源文件（下一章会讲到）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constant &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;struts.custom.i18n.resources&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;messageResource&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;设置Struts应用的解码集&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constant &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;struts.i18n.encoding&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
　　 &lt;br/&gt;　　&lt;span&gt;&amp;lt;!-- ---  &lt;span&gt;包配置  ---- &lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;default&quot;&lt;/span&gt;&lt;span&gt; namespace&lt;/span&gt;&lt;span&gt;=&quot;/&quot;&lt;/span&gt;&lt;span&gt; extends&lt;/span&gt;&lt;span&gt;=&quot;struts-default&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;action &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;upload&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;action.UploadAction&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/uploadSuccess.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;struts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（4） 最后写一个上传成功页面（uploadSuccess.jsp）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;%@ page &lt;/span&gt;&lt;span&gt;contentType&lt;/span&gt;&lt;span&gt;=&quot;text/html;charset=UTF-8&quot;&lt;/span&gt;&lt;span&gt; language&lt;/span&gt;&lt;span&gt;=&quot;java&quot;&lt;/span&gt;&lt;span&gt; %&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;上传初始页&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    上传成功!&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;输入表单里的用户帐号属性&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;
    用户帐号：&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;s:property &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;uid&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;根据上传文件名字,显示上传头像&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;
    您的头像：&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;&amp;lt;s:property value=&quot;&lt;/span&gt;&lt;span&gt;'image/' + headImageFileName&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt; &quot; alt=&quot;图像无法显示&quot;/&amp;gt;
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上传过程图：&lt;/p&gt;
&lt;p&gt;　　（a）选择图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201712/1194681-20171208141210609-1512168274.png&quot; alt=&quot;&quot; width=&quot;519&quot; height=&quot;263&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（b）确认选择&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201712/1194681-20171208141443562-1819671348.png&quot; alt=&quot;&quot; width=&quot;349&quot; height=&quot;199&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　（c）提交之后，显示上传成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201712/1194681-20171208141544281-1474917433.png&quot; alt=&quot;&quot; width=&quot;488&quot; height=&quot;403&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.1.2 拦截器实现文件的过滤&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　Struts2提供了一个名为fileUpload拦截器，通过配置该拦截器可以轻松地实现文件过滤。为了让fileUpload拦截器起作用，只需要在处理文件上传的Action中配置该拦截器引用即可。&lt;br/&gt;　　配置fileUpload拦截器时可以指定如下两个参数：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;allowTypes：该参数指定允许上传文件的类型，多个文件类型之间以英文逗号隔开;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;maximumSize：该参数指定允许上传文件的大小，单位是字节。&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　当文件过滤失败后，系统自动转入input逻辑视图，因此必须为Action配置名为input的逻辑视图。&lt;/p&gt;
&lt;p&gt;（1） 通过拦截器来实现文件过滤的struts.xml配置文件如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE struts PUBLIC
        &quot;-//Apache Software Foundation//DTD Struts Configuration 2.5//EN&quot;
        &quot;http://struts.apache.org/dtds/struts-2.5.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;struts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;指定国际化资源文件（下一讲会讲到）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constant &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;struts.custom.i18n.resources&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;messageResource&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;设置Struts应用的解码集&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constant &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;struts.i18n.encoding&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;package中加入拦截器&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;default&quot;&lt;/span&gt;&lt;span&gt; namespace&lt;/span&gt;&lt;span&gt;=&quot;/&quot;&lt;/span&gt;&lt;span&gt; extends&lt;/span&gt;&lt;span&gt;=&quot;struts-default&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;interceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置拦截器栈(在拦截器章节有讲述)&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;interceptor-stack &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;myStack&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置fileUpload拦截器&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;interceptor-ref &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;fileUpload&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置允许上传文件的类型（此处要注意的是png图片在ie浏览器中是image/x-png类型）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;allowedTypes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;image/x-png,image/bmp,image/gif,image/jpeg,image/jpg&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置允许上传文件大小拦截器，单位是字节（2的16次幂=65536（64k））&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maximumSize&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;65536&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;interceptor-ref&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;interceptor-ref &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;defaultStack&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;interceptor-stack&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;interceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;action &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;upload&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;action.UploadAction&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;使用拦截器栈&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;interceptor-ref &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;myStack&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/uploadSuccess.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;过滤失败，系统会转入input逻辑视图，这里配置其返回选择界面&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;input&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/select.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;struts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　格式不对和容量大于64kb会上传失败，直接返回重新选择的界面。如果上传失败，系统需要回应上传失败信息。因此，需要在文件上传页selectFile.jsp页面中加上“&amp;lt;s:filederror/&amp;gt;”-------&amp;gt;(我直接加到了selectFile.jsp代码中，你可以回看上面)&lt;/p&gt;
&lt;p&gt;（a） 文件格式不对&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201712/1194681-20171208162502562-521188248.png&quot; alt=&quot;&quot; width=&quot;251&quot; height=&quot;150&quot;/&gt;&lt;/p&gt;
&lt;p&gt;------(提交之后)-------&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201712/1194681-20171208162529124-222086442.png&quot; alt=&quot;&quot; width=&quot;617&quot; height=&quot;155&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（b） 文件大小超过了限额&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201712/1194681-20171208162748452-1909860869.png&quot; alt=&quot;&quot; width=&quot;471&quot; height=&quot;258&quot;/&gt;&lt;/p&gt;
&lt;p&gt;-------（提交之后）-----&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201712/1194681-20171208162840187-1389536282.png&quot; alt=&quot;&quot; width=&quot;712&quot; height=&quot;147&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.1.3  文件上传的常量配置&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 　　&lt;/strong&gt;上传文件时，系统默认使用web服务器的工作路径作为临时路径。为了避免文件上传时候使用Web服务器的工作路径作为临时路径，则应该设置struts.multipart.saveDir常量。该常量指定上传文件的临时保存路径。该常量配置示例如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constant &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;struts.multipart.saveDir&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;HOME/....(写上路径)...&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　此外，还有一个文件上传的常量struts.multipart.maxSize。该常量指定struts.mutipart.maxSize。该常量指定在struts2文件上传中整个请求内容所允许的最大字节数，默认为2097152（即2MB）。该常量配置示例如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constant &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;struts.multipart.maxSize&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;209971520&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2.1.4  Struts2多文件上传&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;在Struts2应用中，如果一个页面有多个文件域需要实现上传，则可以为每个文件域提供三个属性，分别封装该文件域对应的文件名、文件类型和文件内容。多文件上传与单文件上传没有什么区别，仅仅是&lt;strong&gt;&lt;em&gt;&lt;span&gt;利用数组同时上传多个文件&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;的方式。&lt;/p&gt;
&lt;p&gt;　　在处理多文件上传时，要注意改变的是，&lt;span&gt;&lt;em&gt;&lt;strong&gt;在Action类中，需要使用三个数组分别封装文件名、文件类型和文件内容&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实现单文件上传代码如下：&lt;/span&gt;
FileUtils.copyFile(headImage,&lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(file,headImageFileName));

        
 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实现多文件下载代码如下：&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; headImage.length(); i++&lt;span&gt;){
    File uploadImage &lt;/span&gt;=&lt;span&gt; headImage[i];
    FileUtils.copyFile(uploadImage,&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(file,headImageFileName[i]));
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;span&gt;&lt;strong&gt;2.2  Struts2文件下载&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/span&gt;利用Struts2来处理文件的下载的问题时，能够解决下载文件的文件名为中英文等等都不出现乱码。此外，还能够在用户下载之前进行检查，判断用户是否有足够的权限来下载该文件等。下面用一个示例来讲解文件的下载：&lt;/p&gt;

&lt;p&gt;（1） 先写一个下载页面：(index.jsp)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;%--
  &lt;/span&gt;&lt;span&gt;Created by IntelliJ IDEA.
  User: mairr
  Date: 17-12-9
  Time: 下午2:20
  To change this template use File | Settings | File Templates.
--%&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;%@ page &lt;/span&gt;&lt;span&gt;language&lt;/span&gt;&lt;span&gt;=&quot;java&quot;&lt;/span&gt;&lt;span&gt; import&lt;/span&gt;&lt;span&gt;=&quot;java.util.*&quot;&lt;/span&gt;&lt;span&gt; pageEncoding&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test_download&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  　　请下载中文课件：&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;downLoad.action?downPath=第一章节.doc&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;中&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  　　请下载英文课件：&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;downLoad.action?downPath=chapter01.doc&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;英&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2） 在Struts2框架文件下载Action类中，需要提供一个返回InputStream流方法，该输入流代表了被下载文件的入口。该Action类代码如下所示：（DownLoadAction.java）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; action;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.struts2.ServletActionContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; util.MyUtil;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.UnsupportedEncodingException;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DownLoadAction &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport{

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String downPath;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 下载时的文件名&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; String contentType;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保存文件类型&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; String filename;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保存时的文件名&lt;/span&gt;

    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getContentType() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; contentType;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setContentType(String contentType) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.contentType =&lt;span&gt; contentType;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getFilename() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; filename;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setFilename(String filename) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.filename =&lt;span&gt; filename;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getDownPath() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; downPath;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setDownPath(String downPath) {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 解决下载时候的中文文件乱码问题&lt;/span&gt;
            downPath = &lt;span&gt;new&lt;/span&gt; String(downPath.getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;&lt;span&gt;);
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (UnsupportedEncodingException e){
            e.printStackTrace();
        }
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.downPath =&lt;span&gt; downPath;
    }

   &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
    *下载用的Action返回一个InputString实例，该方法对应Action配置
    *里面的result的inputName参数，值为inputString
    *
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

   &lt;span&gt;public&lt;/span&gt;&lt;span&gt; InputStream getInputString(){
       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ServletActionContext.getServletContext().getResourceAsStream(downPath);
   }

   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String execute(){
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 下载保存时的文件名和被下载的文件名一样&lt;/span&gt;
       filename =&lt;span&gt; downPath;
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 下载的文件路径，请在webapps目录下创建images&lt;/span&gt;
       downPath = &quot;images/&quot; +&lt;span&gt; downPath;
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保存文件的类型&lt;/span&gt;
&lt;span&gt;
       contentType &lt;/span&gt;= &quot;application/x-msdownload&quot;&lt;span&gt;;

       &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
        *对下载的文件名按照UTF-8进行编码，解决下载窗口中的中文乱码问题
        * 其中,MyUtil是自己定义的一个类
        &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

       filename &lt;/span&gt;=&lt;span&gt; MyUtil.toUTF8String(filename);
       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; SUCCESS;
   }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(3) 在上述的Action类中定义了一个工具类MyUtil，该类中有一个静态方法toUTF8String实现对下载的文件名按照UTF-8进行编码，解决下载窗口中中文乱码的问题：（MyUtil.java）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; util;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.UnsupportedEncodingException;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyUtil {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对下载文件按照 UTF-8 进行编码&lt;/span&gt;

    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String toUTF8String(String str){
        StringBuffer sb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; str.length();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; len; i++&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 取出字符中的每个字符&lt;/span&gt;
            &lt;span&gt;char&lt;/span&gt; c =&lt;span&gt; str.charAt(i);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Unicode码值在0～255之间，不做处理&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(c&amp;gt;=0 &amp;amp;&amp;amp; c &amp;lt;= 255&lt;span&gt;){
                sb.append(c);
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 转换 UTF-8 编码&lt;/span&gt;
                &lt;span&gt;byte&lt;/span&gt;&lt;span&gt; b[];
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                    b &lt;/span&gt;= Character.toString(c).getBytes(&quot;UTF-8&quot;&lt;span&gt;);
                }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(UnsupportedEncodingException e){
                    e.printStackTrace();
                    b &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 转换为%HH的字符串形式&lt;/span&gt;
                &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j = 0;j &amp;lt; b.length ; j++&lt;span&gt;){
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; k =&lt;span&gt; b[j];
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(k &amp;lt; 0&lt;span&gt;){
                        k &lt;/span&gt;&amp;amp;= 255&lt;span&gt;;
                    }
                    sb.append(&lt;/span&gt;&quot;%&quot; +&lt;span&gt; Integer.toHexString(k).toUpperCase());
                }
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sb.toString();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(4) 最后，完成Action的配置，关键是要配置一个类型为stream的结果，配置时需要指定如下四个属性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;contentType:  指定被下载文件的文件类型;&lt;/li&gt;
&lt;li&gt;inputName:  指定被下载文件的入口输入流;&lt;/li&gt;
&lt;li&gt;contentDisposition：  指定下载的文件名;&lt;/li&gt;
&lt;li&gt;bufferSize：  指定下载文件时的缓冲大小。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　具体代码如下：（struts.xml）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE struts PUBLIC
        &quot;-//Apache Software Foundation//DTD Struts Configuration 2.5//EN&quot;
        &quot;http://struts.apache.org/dtds/struts-2.5.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;struts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;default&quot;&lt;/span&gt;&lt;span&gt; namespace&lt;/span&gt;&lt;span&gt;=&quot;/&quot;&lt;/span&gt;&lt;span&gt; extends&lt;/span&gt;&lt;span&gt;=&quot;struts-default&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;action &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;downLoad&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;action.DownLoadAction&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;结果类型为String&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;stream&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;contentType&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${contentType}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;默认就是inputStream,它将会指示StreamResult通过
                  inputName属性值的getter和setter方法，如这里就是
                  getInputStream()来获取下载文件的内容,意味着Action
                  要有这个方法
                  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;inputName&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;inputStream&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                 &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;默认为inline（在线打开）,设置为attachment将会告诉浏览器下载
                     该文件,filename指定下载文件时的文件名，若未指定将会以浏览器
                     页面名作为文件名,如：以download.action作为文件名
                   &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;contentDisposition&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;attachment;filename=${filename}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;指定下载文件的缓冲大小&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;bufferSize&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4096&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(5)  最后的下载窗口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201712/1194681-20171211145959227-501463987.png&quot; alt=&quot;&quot; width=&quot;436&quot; height=&quot;195&quot;/&gt;&lt;/p&gt;


</description>
<pubDate>Mon, 11 Dec 2017 07:07:00 +0000</pubDate>
<dc:creator>Mairr</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Mairr/p/8005178.html</dc:identifier>
</item>
<item>
<title>Android开发之漫漫长途 番外篇——内存泄漏分析与解决 - 忘了12138</title>
<link>http://www.cnblogs.com/wangle12138/p/8023080.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangle12138/p/8023080.html</guid>
<description>&lt;p&gt;&lt;em&gt;该文章是一个系列文章，是本人在Android开发的漫漫长途上的一点感想和记录，我会尽量按照先易后难的顺序进行编写该系列。该系列引用了《Android开发艺术探索》以及《深入理解Android 卷Ⅰ，Ⅱ，Ⅲ》中的相关知识，另外也借鉴了其他的优质博客，在此向各位大神表示感谢，膜拜！！！另外，本系列文章知识可能需要有一定Android开发基础和项目经验的同学才能更好理解，也就是说该系列文章面向的是Android中高级开发工程师。&lt;/em&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;上一篇我们主要上了一个实例来把读者带进自定义ViewGroup的大门，只是带进大门，自定义View的内容还有很多，我之后碰到一些好的自定义View的话一定还来这里分享。本篇内容我们来分析App运行过程中出现的内存泄漏及如何解决。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;内存泄漏通俗的讲是一个本该被回收的对象却因为某些原因导致其不能回收。&lt;/strong&gt;我们都知道对象是有生命周期的，从生到死，当对象的任务完成之后，由Android系统进行垃圾回收。我们知道Android系统为某个App分配的内存是有限的（这个可能根据机型的不同而不同），当一个应用中产生的内存泄漏比较多时，就难免会导致应用所需要的内存超过这个系统分配的内存限额，最终导致OOM(OutOfMemory)使程序崩溃。&lt;/p&gt;

&lt;p&gt;早在使用Eclipse的时候我们就知道了MAT性能分析工具，使用MAT当然能检查内存泄漏，不过使用稍微有些麻烦，我这里介绍另一个工具，同时呢，我们也抛弃了Eclipse，拥抱Android Studio。这个工具名叫LeakCanary。为什么要使用这个工具呢，当然因为其简单，傻瓜式操作。这个工具是在Github开源的，是Square公司出品的，不是有一句话嘛，Square出品必属精品，&lt;a href=&quot;https://github.com/square/leakcanary&quot; class=&quot;uri&quot; title=&quot;传送门&quot;&gt;https://github.com/square/leakcanary&lt;/a&gt;我们可以方便的引用它&lt;/p&gt;
&lt;p&gt;In your build.gradle:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;dependencies {
   debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.4'
   releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
 }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In your Application class:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class ExampleApplication extends Application {

  @Override public void onCreate() {
    super.onCreate();
    if (LeakCanary.isInAnalyzerProcess(this)) {
      // This process is dedicated to LeakCanary for heap analysis.
      // You should not init your app in this process.
      return;
    }
    LeakCanary.install(this);
    // Normal app init code...
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;就是如此简单，那么下面我们就来用一下把 结合下面的内存泄漏场景应用。&lt;/p&gt;

&lt;p&gt;在我们平时的开发中可能已经造成了内存泄漏而不自知，下面就罗列其中几种，看看你的程序里是不是有这样的代码。&lt;/p&gt;
&lt;h3 id=&quot;静态变量造成的内存泄漏&quot;&gt;静态变量造成的内存泄漏&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;public class MainActivity extends Activity{
    private static final String TAG = &quot;MainActivity&quot;;

    private static Context sContext;
    
    private static View sView;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        //这里直接把当前Activity赋值给了静态变量sContext
        sContext = this;
        //这种写法和上面的类似
        sView = new View(this);

    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面这种方法估计小学生都知道会造成内存泄漏，原因是当MainActivity对象完成任务需要回收时，却有一个静态变量引用它(静态变量的生命周期与Application相同)，造成内存泄漏。我们使用LeakCanary分析就是如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/UbMW9sY.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当我们的App发生内存泄漏时会在通知栏显示通知，点击该通知可得到内存泄漏的详细信息，或者点击上图中的Leaks图标获得App运行过程中所有的内存泄漏，上面例子中得到的内存泄漏信息如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/9EhvINN.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;单例模式造成的内存泄漏&quot;&gt;单例模式造成的内存泄漏&lt;/h3&gt;
&lt;p&gt;上面的内存泄漏太明显，估计大家都不会这样写，但是单例模式就不一样了，我们往往会忽略掉错误使用单例模式而造成的泄漏。比如说我们常在开发中用到的dp转px，px转dp等往往会封装成一个单例类。如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class DisplayUtils {
    private static volatile DisplayUtils instance = null;
    private Context mContext;
    private DisplayUtils(Context context){
        this.mContext = context;
    }
    public static DisplayUtils getInstance(Context context){
        if (instance != null){
            synchronized (DisplayUtils.class){
                if (instance !=null){
                    instance = new DisplayUtils(context);
                }
            }
        }

        return instance;
    }

    public int dip2px(float dpValue) {
        final float scale = mContext.getResources().getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后我们去调用它&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class SingleActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_single);
        //这里我们把当前SingleActivity传入
        DisplayUtils.getInstance(this).dip2px(5);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;就这样内存泄漏产生了，我们可以看图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/wlFPWYd.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个图和上面的内存泄漏的图很相像。但是我们常常忽略了这种内存泄漏，是因为我们没有直接使用静态变量指向传递进来的参数，解决办法要保证Context和AppLication的生命周期一样，修改后代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class DisplayUtils {
    private static volatile DisplayUtils instance = null;
    private Context mContext;
    private DisplayUtils(Context context){
        //这里变化了，把当前Context指向个应用程序的Context
        this.mContext = context.getApplicationContext();
    }
    public static DisplayUtils getInstance(Context context){
        if (instance != null){
            synchronized (DisplayUtils.class){
                if (instance !=null){
                    instance = new DisplayUtils(context);
                }
            }
        }

        return instance;
    }

    public int dip2px(float dpValue) {
        final float scale = mContext.getResources().getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;非静态内部类创建静态实例造成的内存泄漏&quot;&gt;非静态内部类创建静态实例造成的内存泄漏&lt;/h3&gt;
&lt;p&gt;我们在程序中基本上不能避免使用ListView或者RecyclerView，谈到这些列表展示的类，那么我们的Adapter基本上也是不可缺少，我们在优化ListView的Adapter的时候会使用ViewHolder（RecyclerView本身已经做了优化），我们在使用ViewHolder的使用建议使用&lt;strong&gt;静态内部类&lt;/strong&gt;。那么为什么会由此建议呢？这就是我们下面要谈到的。&lt;strong&gt;非静态内部类创建静态实例可能造成的内存泄漏&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class NonStaticActivity extends AppCompatActivity {
    private static Config sConfig;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_non_static);
        //Config类并不是静态类，
        sConfig = new Config();
    
    }
    
    class Config {
    
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;造成内存泄漏的原因是&lt;strong&gt;内部类会隐式持有外部类的引用&lt;/strong&gt;，这里的外部类是NonStaticActivity，然而内部类sConfig又是static静态变量其生命周期与Application生命周期一样，所以在NonStaticActivity关闭的时候，内部类静态实例依然持有对NonStaticActivity的引用，导致NonStaticActivity无法被回收释放，引发内存泄漏。&lt;br/&gt;&lt;strong&gt;解决办法就是把内部类生命为静态内部类，与外部类解耦。&lt;/strong&gt;，这也是在使用ViewHolder的使用建议使用&lt;strong&gt;静态内部类&lt;/strong&gt;的原因。&lt;/p&gt;
&lt;h3 id=&quot;webview造成的内存泄漏&quot;&gt;WebView造成的内存泄漏&lt;/h3&gt;
&lt;p&gt;对于使用Android的WebView造成的内存泄漏。我在此建议使用&lt;a href=&quot;https://github.com/delight-im/Android-AdvancedWebView&quot; class=&quot;uri&quot;&gt;https://github.com/delight-im/Android-AdvancedWebView&lt;/a&gt;，使用这个优化后的WebView，按照提示进行操作。&lt;/p&gt;
&lt;h3 id=&quot;handler造成的内存泄漏&quot;&gt;Handler造成的内存泄漏&lt;/h3&gt;
&lt;p&gt;我在我的项目中使用了handler，此时mHandler会隐式地持有一个外部类对象引用这里就是MainActivity，当执行postDelayed方法时，该方法会将你的Handler装入一个Message，并把这条Message推到MessageQueue中，MessageQueue是在一个Looper线程中不断轮询处理消息，那么当这个Activity退出时消息队列中还有未处理的消息或者正在处理消息，而消息队列中的Message持有mHandler实例的引用，mHandler又持有Activity的引用，所以导致该Activity的内存资源无法及时回收，引发内存泄漏。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class HandlerActivity extends AppCompatActivity {
    private Handler mHandler = new Handler();
    private TextView mTextView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_handler);

        mTextView = (TextView) findViewById(R.id.text);//模拟内存泄露
        mHandler.postDelayed(new Runnable() {
            @Override
            public void run() {
                mTextView.setText(&quot;test&quot;);
            }
        }, 5 * 60 * 1000);

    }


}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用LeakCanary可以看到类似下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/SvIsRu1.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;解决办法是 在HandlerActivity onDestroy里面移除消息队列中所有消息和所有的Runnable。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Override
protected void onDestroy() {
    super.onDestroy();
    mHandler.removeCallbacksAndMessages(null);
    mHandler = null;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;其他原因造成的内存泄漏&quot;&gt;其他原因造成的内存泄漏&lt;/h3&gt;
&lt;p&gt;造成内存泄漏的原因有很多，我们这里只是列举了其中比较典型的几种，当然还有好多原因会造成内存泄漏，比如资源开启但是未关闭、多线程等等等等。但是我们有LeakCanary这个利器哈。&lt;/p&gt;

&lt;p&gt;本篇只是稍微介绍了下LeakCanary以及几种常见的内存泄漏，内存泄漏以及内存性能优化是个持久的过程。我这里只是向你们介绍其中一种方法。编程无止境，性能优化也是。&lt;/p&gt;

&lt;p&gt;好了，我们下一篇介绍正篇Android的消息机制Looper、Handler、MessageQueue,Message&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;此致，敬礼&lt;/p&gt;
</description>
<pubDate>Mon, 11 Dec 2017 06:52:00 +0000</pubDate>
<dc:creator>忘了12138</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangle12138/p/8023080.html</dc:identifier>
</item>
<item>
<title>Python函数篇（3）-内置函数、文件处理 - 无敌小怪兽</title>
<link>http://www.cnblogs.com/Chen-Zhipeng/p/8021870.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Chen-Zhipeng/p/8021870.html</guid>
<description>&lt;h2&gt;1.内置函数&lt;/h2&gt;
&lt;p&gt;　　上一篇文章中，我重点写了reduce、map、filter3个内置函数，在本篇章节中，会补充其他的一些常规内置函数，并重点写max，min函数，其他没有说明的函数，会在后面写到类和面向对象的文章中具体写出。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;abs()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
a=-2           
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(abs(a))         取绝对值，传入变量的数据类型必须是数字。否则程序报错
运行结果：
&lt;/span&gt;2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;　all()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
a=[1,2,3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(all(a))       遍历传入的每一个元素，返回一个布尔值，如果元素中存在0，None或空，则返回结果为False，否则返回Ture；如果传入的可迭代对象为空，仍然返回Ture
运行结果：
True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;　any()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
a=[1,2,3&lt;span&gt;,0]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(any(a))       遍历传入的每一个元素，返回一个布尔值,元素中只要有一个为真，就会返回Ture.
运行结果：
True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;　bin();hex();oct()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(bin(2))      十进制转二进制&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; print(hex(2))      十进制转十六进制&lt;/span&gt;&lt;span&gt;
# &lt;/span&gt;&lt;span&gt;print(oct(2))      十进制转八进制    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;bool()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(bool(0))      返回一个布尔值(0,None或空，返回False，否则，返回Ture)
运行结果：
False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;　　bytes()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt;(bytes(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你好&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).decode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;))  将字符串转化为字节，需要使用关键字encoding指定编码类型，如想返回，通过decode解码，默认解码类型为utf-8&lt;span&gt;
运行结果：
你好&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;　chr();ord()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt;(chr(97&lt;span&gt;))      将传入的值按ASCII码表输出
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(ord(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))     输入一个字符，显示出在ASCII表中对应的值是什么
运行结果：
a
&lt;/span&gt;97
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;　dir();help()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(dir(chr))      目录，在chr函数后传入另一个函数，可以显示出传入函数内部都有哪些方法
help(all)            与dir()不同，help中传入参数，可以查看该函数的具体使用方法，不过一般通过ctrl加鼠标左键，点击函数就可以查看。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;　divmod()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt;(divmod(10,3&lt;span&gt;))   取商得余数,这个方法可以用来做分页，后面会应用到
运行结果：
(&lt;/span&gt;3, 1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;　　eval()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[1,2,3,]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(name)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(eval(name))            第一个功能：将字符串中的数据结构提取出来
运行结果：（对比一下区别）
[&lt;/span&gt;1,2,3&lt;span&gt;,]
[&lt;/span&gt;1, 2, 3]
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3*2*1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(eval(name))            第二个功能：将字符串中数学运算运行一遍
运行结果：
&lt;/span&gt;6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;hash():&lt;/strong&gt;可hash的就是不可变的数据类型，对于一个变量来说，只要改变量的值未发生变化，那么它对应的hash值也是不变的&lt;/p&gt;
&lt;p&gt;　&lt;strong&gt;　id():&lt;/strong&gt;打印对象的内存地址&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;isinstance()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt;(isinstance(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;czp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,str))     判断数据类型
运行结果：                         判断&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;czp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;是否是字符串类型，返回值的类型为布尔值
True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;　　global():&lt;/strong&gt;打印都有哪些全局变量&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;locals():&lt;/strong&gt;打印都有哪些局部变量　&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;pow()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt;(pow(10,3))        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;10**3，还可以传入3个参数，如pow（10，3，2） 意思就是10**3&amp;amp;2&lt;/span&gt;
&lt;span&gt;运行结果：
&lt;/span&gt;1000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 　 reversed()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
name=[1,2,3,4&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(list(reversed((name))))           将列表中的元素 反转输出
运行结果：
[&lt;/span&gt;4, 3, 2, 1]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;round():&lt;/strong&gt;四舍五入，传入两个参数&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;sorted():&lt;/strong&gt;排序，排序的过程其实就是比较大小，使用方法参考max()&lt;/p&gt;
&lt;p&gt;　   &lt;strong&gt;str():&lt;/strong&gt;转变为字符串形式&lt;/p&gt;
&lt;p&gt;　  &lt;strong&gt; type():&lt;/strong&gt;查看数据类型&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;vars():&lt;/strong&gt;将列表转化为字典，如果没有参数，就相当于locals的用法，打印的是局部变量的值，如果传入一个函数，会将该函数下的所有方法以字典的形式打印出来&lt;/p&gt;
&lt;p&gt;　　下面主要讲3个内置函数，zip();max();min()的用法&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;1.zip()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt;(list(zip((&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),(1,2,3&lt;span&gt;))))    传入两个序列类型的参数（列表，元组等），输出一一对应的结果，传入的两个序列元素数量不相等，程序也并不会报错
运行结果：
[(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 1), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 2), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 3)]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;2.max()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;max()函数中必须传入一个可迭代的对象，（可迭代对象可以理解为可以使用for循环的对象）取出每一个元素进行比较，在比较的时候，从元素的第一个位置从左往右对每一个元素进行比较，如果在某一位比出了大小，后面的元素就不需要再进行比较（不同数据类型之间不能进行max比较，程序会报错）&lt;/p&gt;
&lt;p&gt;　　先说一个最简单的使用方法：取出字符串中最大的元素　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
num=[1,2,3,4&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(max(num))
运行结果：
&lt;/span&gt;4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　而如果数据类型是一个字典呢？我要取出name={&quot;1_age&quot;:8,&quot;2_age&quot;:19,&quot;3_age&quot;:17}这个字典中，年龄最大的那个key，这时该怎么做？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
name={&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1_age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:8,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2_age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:19,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3_age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:17&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(max(name))
运行结果：
3_age&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　显然 ，直接用max()函数计算出来的最大值是不对的，这是因为max()函数在判断字典数据类型的时候，默认是对Key进行比较，需求是比较年龄，然后输入该年龄对应的Key，此时可以用上面提到的zip方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
name={&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1_age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:18,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2_age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:19,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3_age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:17&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(max(zip(name.values(),name.keys())))
运行结果：
(&lt;/span&gt;19, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2_age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　对于列表中嵌套字典的，用这种方法：&lt;/p&gt;
&lt;p&gt;　　max()中可以传入两个值，（*args，key=None），默认key是None，我们也可以通过匿名函数，指定需要比较的字典values&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
name=[{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:18&lt;span&gt;},
      {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:3&lt;span&gt;},]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(max(name,key=&lt;span&gt;lambda&lt;/span&gt; dict:dict[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]))&lt;br/&gt;运行结果：&lt;br/&gt;{'name': 'c', 'age': 18}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;　3.min():&lt;/strong&gt;取最小值，使用方法与max()相同，就不重复介绍了&lt;/p&gt;
&lt;h2&gt; 2.文件操作&lt;/h2&gt;
&lt;p&gt;　　文件的处理流程简单来说就三步：1）打开一个文件（通过open()函数，文件打开方式主要是&quot;r&quot;（只读）、&quot;w&quot;（只写）、&quot;a&quot;（读写）三种模式，默认的打开方式只读模式&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　2）通过文件句柄执行相关操作&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　    3）关闭文件&lt;/p&gt;
&lt;p&gt;　　通常读取一个文件的正常流程如下：假设现在有一个尼古拉斯赵四的文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
f=open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;尼古拉斯赵四&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)       打开文件方式：open(&quot;文件名”,&quot;打开方式（r\w\a）&quot;,&quot;编码方式&quot;)，默认是只读（r）模式
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(f.read())　　　　　　　　　　　　　　　　　通过open()打开文件后，使用文件名.read()的方式读取内容
f.close()
运行结果：
输出的就是&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;尼古拉斯赵四&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; 这个文件中的内容　　　　  在读取文件内容后，使用close()方法 关闭文件释放内存
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;　r&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　以上是正常的读取一个文件的流程，r（只读模式），顾名思义就是只有读的权限，不可以修改文件，如下是读取文件的其他方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;f.readable()         判断是否是只读
f.readline()         一次读一行，通过这种方式读取出来会有换行，因为文件每一句后会加回车，可以在最后加end&lt;/span&gt;=&lt;span&gt;”“来取消换行
f.readlines()        一次性读取全部文件内容，放在一个列表中&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;　w&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　写模式，可以修改文件，但不可以读取源文件，如果文件存在，会直接清空掉文件中的所有内容，文件不存在，会新建一个新的文件（慎用）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
f=open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;尼古拉斯赵四&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　写文件的一些常规方法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
f.write(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;写入的内容\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)       内容必须是&lt;span&gt;字符串，如果写成f.write(3),程序会报错&lt;/span&gt;
&lt;span&gt;f.writable()                 判断是否只写
f.writelines([写入的内容])    写入一个列表的内容，输出的内容是列表形式&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;a&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;追加模式，在此模式下，可通过f.write()方法  将内容写到最后&lt;/p&gt;
&lt;p&gt;　&lt;strong&gt;　r+&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;可读可写，写的时候，就是从光标的位置开始写入，解释一下这个意思：所谓的从光标写入，在没有读取一个文件的时候，光标的位置就是在最前面，而如果我通过readline方法读取了一行内容后，光标位置实际上就是移动到了第一行的最后面，而此时我再执行write（）操作，内容就会插入到第一行的后面。这个一定要理解。&lt;/p&gt;
&lt;p&gt;　　其他的方式还有像w+，a+等等，感兴趣的自己可以了解一下&lt;/p&gt;
&lt;p&gt;　　最后在本篇文章中再提最后一个点，如果每次都用close()关闭文件会不会觉得很麻烦？用以下方式完美的避免这一问题：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
with open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;尼古拉斯赵四&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as f:        通过with open() as 文件名的方式，执行完操作后会自动关闭文件以释放内存
      &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(f.read())
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 11 Dec 2017 06:44:00 +0000</pubDate>
<dc:creator>无敌小怪兽</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Chen-Zhipeng/p/8021870.html</dc:identifier>
</item>
<item>
<title>ASP.NET MVC5+EF6+EasyUI 后台管理系统（88）-Excel导入和导出-主从表结构导出 - ymnets</title>
<link>http://www.cnblogs.com/ymnets/p/7977189.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ymnets/p/7977189.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;blockquote readability=&quot;9.4736842105263&quot;&gt;
&lt;p&gt;前面一篇详细讲解了导入导出，本节演示混合结构的导出功能！同时提供代码下载..&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;https://files.cnblogs.com/files/ymnets/CloseXMLTest.7z&quot; target=&quot;_blank&quot;&gt;代码下载&lt;/a&gt; &lt;span&gt;vs2015+无数据库&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;先看效果图：&lt;strong&gt;这个一个混合的Excel，列表与自定义信息的混合！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/439652/201712/439652-20171205092535472-1140625551.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;　　我们的步骤大概分为以下几步&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;1.模拟数据库数据&lt;/li&gt;
&lt;li&gt;2.创建工作簿&lt;/li&gt;
&lt;li&gt;3.填充固定数据&lt;/li&gt;
&lt;li&gt;4.合并单元格&lt;/li&gt;
&lt;li&gt;5.处理动态数据&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;　　数据及环境准备&lt;/h3&gt;
&lt;p&gt;　　创建一个新的Asp.Net MVC5项目，并从Nuget包安装ClosedXML&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/439652/201712/439652-20171204154354747-390281397.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　为了更好的跟真实数据结合，我们需要模拟一些静态数据，新建2个模型来保存数据&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SchoolClass
    {

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;班级标示&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;班级名称&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Manager { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;班主任姓名&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Manager2 { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;副班主任姓名&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; PhoneNumber { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;班主任联系电话&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; PhoneNumber2 { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;副主任联系电话&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Remark { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } &lt;span&gt;//&lt;/span&gt;&lt;span&gt;班级说明&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; List&amp;lt;Students&amp;gt; stuList { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一个班级对应多个学生&lt;/span&gt;
&lt;span&gt;    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Students
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;学号&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Sex { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;性别&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;年龄&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Point { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;年度得分&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; PhoneNumber { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;电话&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注：从模型看出，这是一个班级信息表，一个班级对应多个学生的信息！&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;1.新建一个控制器并填充数据&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Index()
 {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟数据库赋值，一个班级对应多个学生&lt;/span&gt;
            SchoolClass model = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SchoolClass();
            model.Id &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CLS0001&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            model.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;三年二班&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            model.Manager &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;黄SIR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            model.PhoneNumber &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13800138000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            model.Manager2 &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李SIR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            model.PhoneNumber2 &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13888138666&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            model.Remark &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这是一段有很多个字的班级说明，只有足够长的字，才能证明这段文字很长，如果100个字还不够长，那么就再来100个字！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            model.stuList &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;Students&amp;gt;&lt;span&gt;();
            model.stuList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Students() { Id = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;STU0001&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;牛掰掰&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Sex = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,Point=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13545678547&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
            model.stuList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Students() { Id = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;STU0002&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Sex = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;女&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Point = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13545654874&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
            model.stuList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Students() { Id = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;STU0003&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李四&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Sex = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;女&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Point = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13545633552&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
            model.stuList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Students() { Id = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;STU0004&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;王五&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Sex = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Point = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13566885541&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
            model.stuList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Students() { Id = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;STU0005&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;林蛋大&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Sex = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Point = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;95&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13821298458&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
            model.stuList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Students() { Id = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;STU0006&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;刘丽丽&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Sex = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;女&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Point = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;95&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13821298458&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2.创建作业本并填充表头&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/439652/201712/439652-20171205094515550-1749943380.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;红框中表示表示表头位置，我们Excel大家都知道是按位置标示的，比如我点中的三年二班表示的是B3（左上角显示），所有我们填充表头也是这么做&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;var&lt;/span&gt; wb = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XLWorkbook();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ws = wb.Worksheets.Add(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;班级&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = model.Name+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;班级信息表&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标题&lt;/span&gt;
            ws.Cell(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;班级代号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;班级名称&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;班主任&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;联系电话&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;副班主任&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;F2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;联系电话&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主表内容&lt;/span&gt;
            ws.Cell(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value =&lt;span&gt; model.Id;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value =&lt;span&gt; model.Name;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value =&lt;span&gt; model.Manager;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value =&lt;span&gt; model.PhoneNumber;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value =&lt;span&gt; model.Manager2;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;F3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value =&lt;span&gt; model.PhoneNumber2;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = model.Remark;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;说明

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;明细表标题&lt;/span&gt;
            ws.Cell(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;学号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;性别&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;得分&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;F5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;电话号码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以位置决定内容，填充表头后。我们再填充列表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; model.stuList.Count(); i++&lt;span&gt;)
            {
                ws.Cell(i &lt;/span&gt;+ &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;).Value =&lt;span&gt; model.stuList[i].Id;
                ws.Cell(i &lt;/span&gt;+ &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;).Value =&lt;span&gt; model.stuList[i].Name;
                ws.Cell(i &lt;/span&gt;+ &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;).Value =&lt;span&gt; model.stuList[i].Sex;
                ws.Cell(i &lt;/span&gt;+ &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;).Value =&lt;span&gt; model.stuList[i].Age;
                ws.Cell(i &lt;/span&gt;+ &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;).Value =&lt;span&gt; model.stuList[i].PhoneNumber;
                ws.Cell(i &lt;/span&gt;+ &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;).Value =&lt;span&gt; model.stuList[i].PhoneNumber;
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于我们列表数据是动态并不是固定的，工作簿也是支持二维数组位置填充！看代码从第6行开始，一行一行填充！&lt;/p&gt;
&lt;h3&gt;3.合并和填充&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 　　　　　　&lt;span&gt;var&lt;/span&gt; rngTable = ws.Range(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A1:F&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + (model.stuList.Count() + &lt;span&gt;5&lt;/span&gt;&lt;span&gt;));

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;合并表头&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; rngHeaders = rngTable.Range(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A1:F1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            ws.Row(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;).Height = &lt;span&gt;20&lt;/span&gt;&lt;span&gt;;
            rngHeaders.FirstCell().Style
             .Font.SetBold()
             .Fill.SetBackgroundColor(XLColor.Buff)
             .Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
            rngHeaders.FirstRow().Merge();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二行表头样式&lt;/span&gt;
            rngHeaders = rngTable.Range(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A2:F2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The address is relative to rngTable (NOT the worksheet)&lt;/span&gt;
            rngHeaders.Style.Alignment.Horizontal =&lt;span&gt; XLAlignmentHorizontalValues.Center;
            rngHeaders.Style.Font.Bold &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rngHeaders.Style.Font.FontColor = XLColor.DarkBlue;&lt;/span&gt;
            rngHeaders.Style.Fill.BackgroundColor =&lt;span&gt; XLColor.Aqua;


            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;合并说明&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; rngRemark = rngTable.Range(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A4:F4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            ws.Row(&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;).Height = &lt;span&gt;30&lt;/span&gt;&lt;span&gt;;
            rngRemark.Style.Alignment.WrapText &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            rngRemark.FirstCell().Comment.Style.Size.SetAutomaticSize();
            rngRemark.FirstRow().Merge();

            rngTable &lt;/span&gt;= ws.Range(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A5:F&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + (model.stuList.Count() + &lt;span&gt;5&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; excelTable =&lt;span&gt; rngTable.CreateTable();

            ws.Columns().AdjustToContents(); &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后我们要做：填充颜色，合并单元格就好，比如说明:说明内容我们是填充在A4，但是我们要合并A1-F4的位置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('09231470-5ad6-4d1d-b032-31e0d0b0a801')&quot; readability=&quot;52.5&quot;&gt;&lt;img id=&quot;code_img_closed_09231470-5ad6-4d1d-b032-31e0d0b0a801&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_09231470-5ad6-4d1d-b032-31e0d0b0a801&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('09231470-5ad6-4d1d-b032-31e0d0b0a801',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_09231470-5ad6-4d1d-b032-31e0d0b0a801&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;100&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Index()
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟数据库赋值，一个班级对应多个学生&lt;/span&gt;
            SchoolClass model = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SchoolClass();
            model.Id &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CLS0001&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            model.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;三年二班&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            model.Manager &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;黄SIR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            model.PhoneNumber &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13800138000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            model.Manager2 &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李SIR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            model.PhoneNumber2 &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13888138666&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            model.Remark &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这是一段有很多个字的班级说明，只有足够长的字，才能证明这段文字很长，如果100个字还不够长，那么就再来100个字！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            model.stuList &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;Students&amp;gt;&lt;span&gt;();
            model.stuList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Students() { Id = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;STU0001&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;牛掰掰&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Sex = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,Point=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13545678547&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
            model.stuList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Students() { Id = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;STU0002&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Sex = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;女&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Point = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13545654874&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
            model.stuList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Students() { Id = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;STU0003&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李四&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Sex = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;女&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Point = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13545633552&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
            model.stuList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Students() { Id = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;STU0004&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;王五&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Sex = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Point = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13566885541&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
            model.stuList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Students() { Id = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;STU0005&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;林蛋大&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Sex = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Point = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;95&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13821298458&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
            model.stuList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Students() { Id = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;STU0006&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;刘丽丽&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Sex = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;女&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Point = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;95&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, PhoneNumber = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13821298458&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });



            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; wb = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XLWorkbook();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ws = wb.Worksheets.Add(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;班级&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = model.Name+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;班级信息表&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标题&lt;/span&gt;
            ws.Cell(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;班级代号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;班级名称&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;班主任&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;联系电话&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;副班主任&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;F2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;联系电话&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主表内容&lt;/span&gt;
            ws.Cell(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value =&lt;span&gt; model.Id;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value =&lt;span&gt; model.Name;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value =&lt;span&gt; model.Manager;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value =&lt;span&gt; model.PhoneNumber;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value =&lt;span&gt; model.Manager2;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;F3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value =&lt;span&gt; model.PhoneNumber2;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = model.Remark;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;说明

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;明细表标题&lt;/span&gt;
            ws.Cell(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;学号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;性别&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;得分&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.Cell(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;F5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;电话号码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

   

            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; model.stuList.Count(); i++&lt;span&gt;)
            {
                ws.Cell(i &lt;/span&gt;+ &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;).Value =&lt;span&gt; model.stuList[i].Id;
                ws.Cell(i &lt;/span&gt;+ &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;).Value =&lt;span&gt; model.stuList[i].Name;
                ws.Cell(i &lt;/span&gt;+ &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;).Value =&lt;span&gt; model.stuList[i].Sex;
                ws.Cell(i &lt;/span&gt;+ &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;).Value =&lt;span&gt; model.stuList[i].Age;
                ws.Cell(i &lt;/span&gt;+ &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;).Value =&lt;span&gt; model.stuList[i].PhoneNumber;
                ws.Cell(i &lt;/span&gt;+ &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;).Value =&lt;span&gt; model.stuList[i].PhoneNumber;
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; rngTable = ws.Range(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A1:F&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + (model.stuList.Count() + &lt;span&gt;5&lt;/span&gt;&lt;span&gt;));

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;合并表头&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; rngHeaders = rngTable.Range(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A1:F1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            ws.Row(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;).Height = &lt;span&gt;20&lt;/span&gt;&lt;span&gt;;
            rngHeaders.FirstCell().Style
             .Font.SetBold()
             .Fill.SetBackgroundColor(XLColor.Buff)
             .Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
            rngHeaders.FirstRow().Merge();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二行表头样式&lt;/span&gt;
            rngHeaders = rngTable.Range(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A2:F2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The address is relative to rngTable (NOT the worksheet)&lt;/span&gt;
            rngHeaders.Style.Alignment.Horizontal =&lt;span&gt; XLAlignmentHorizontalValues.Center;
            rngHeaders.Style.Font.Bold &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rngHeaders.Style.Font.FontColor = XLColor.DarkBlue;&lt;/span&gt;
            rngHeaders.Style.Fill.BackgroundColor =&lt;span&gt; XLColor.Aqua;


            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;合并说明&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; rngRemark = rngTable.Range(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A4:F4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            ws.Row(&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;).Height = &lt;span&gt;30&lt;/span&gt;&lt;span&gt;;
            rngRemark.Style.Alignment.WrapText &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            rngRemark.FirstCell().Comment.Style.Size.SetAutomaticSize();
            rngRemark.FirstRow().Merge();

            rngTable &lt;/span&gt;= ws.Range(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A5:F&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + (model.stuList.Count() + &lt;span&gt;5&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; excelTable =&lt;span&gt; rngTable.CreateTable();

            ws.Columns().AdjustToContents(); 

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; exportFileName = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Concat(
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExcelSample&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    DateTime.Now.ToString(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyyMMddHHmmss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.xlsx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ExportExcelResult(wb)
            {
                SheetName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;人员列表&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                FileName &lt;/span&gt;=&lt;span&gt; exportFileName,
                Workbook &lt;/span&gt;=&lt;span&gt; wb
            };


        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Index完整代码&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/439652/201712/439652-20171205101340144-1018357496.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;代码不难看懂，基本情景我都用到：比如合并、高度、自动换行、等等，是一篇值得参考的文章，同时也见证ClosedXML的强大&lt;/p&gt;
&lt;p&gt;参考代码：https://github.com/closedxml/closedxml&lt;/p&gt;
&lt;/blockquote&gt;

</description>
<pubDate>Mon, 11 Dec 2017 06:36:00 +0000</pubDate>
<dc:creator>ymnets</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ymnets/p/7977189.html</dc:identifier>
</item>
<item>
<title>mysql 系统性浅聊 myisam 存储引擎【原创】 - H-大叔</title>
<link>http://www.cnblogs.com/sunshine-H/p/8022960.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sunshine-H/p/8022960.html</guid>
<description>&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;》》思维导图&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233383/201712/1233383-20171211121656149-428675873.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;》》介绍
&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　mysql中的存储引擎都是以插件的形式存在，目前用的最多存储引擎就是innodb和myisam。MySQL5.5.5以后（包括5.5.5）默认使用&lt;strong&gt;InnoDB&lt;/strong&gt;存储引擎，之前的版本基本就是&lt;strong&gt;MyISAM&lt;/strong&gt;的了。现在有很多人都在网上问，innodb作为存储引擎之后，myisam引擎是不是要被淘汰了？其实它们两者之间各有优势，暂时还不能说谁替代谁，不存在滴。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;》》存储结构
&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　创建一个myisam数据表&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
mysql&amp;gt; create table myisam(
    -&amp;gt; id int not null primary key auto_increment,
    -&amp;gt; cs varchar(50) not null comment 'test'
    -&amp;gt; )engine=myisam default charset=utf8;
Query OK, 0 rows affected (0.10 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　查看表结构（具体的查看和操作，请看上篇&lt;a href=&quot;http://www.cnblogs.com/sunshine-H/p/8022283.html&quot; target=&quot;_blank&quot;&gt;MySQL查看和修改表的存储引擎&lt;/a&gt;）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
mysql&amp;gt; show create table myisam;
+--------+----------------------------------------------------------------------
--------------------------------------------------------------------------------
-----------------+
| Table  | Create Table

                 |
+--------+----------------------------------------------------------------------
--------------------------------------------------------------------------------
-----------------+
| myisam | CREATE TABLE `myisam` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `cs` varchar(50) NOT NULL COMMENT 'test',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 |
+--------+----------------------------------------------------------------------
--------------------------------------------------------------------------------
-----------------+
1 row in set (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　再具体看下底层的myisam数据表的文件组成：&lt;/p&gt;
&lt;p&gt;windows下的表结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233383/201712/1233383-20171211131301290-712979374.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;linux下的表结构是一样的，我就不贴出来了。&lt;/p&gt;
&lt;p&gt;看到myisam表是由.frm, .MYD, .MYI三个文件组成：&lt;/p&gt;
&lt;p&gt;.frm 是表结构文件&lt;/p&gt;
&lt;p&gt;.MYD 是数据文件&lt;/p&gt;
&lt;p&gt;.MYI 是索引文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;》》特性--不支持事务
&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　例子如下：&lt;/p&gt;
&lt;p&gt;--》上面已经创建了一个myisam表，表结构如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
mysql&amp;gt; desc myisam;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| id    | int(11)     | NO   | PRI | NULL    | auto_increment |
| cs    | varchar(50) | NO   |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+
2 rows in set (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;--》操作如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233383/201712/1233383-20171211132311696-1557044586.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;--》好吧！没有对比就没有伤害！下面试下I&lt;strong&gt;nnodb&lt;/strong&gt;是否成功：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233383/201712/1233383-20171211133050727-1716451787.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
&lt;strong&gt;&lt;span&gt;》》特性--修复表
&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;　　主要两个SQL操作语句：&lt;/p&gt;
&lt;p&gt;　　check table YOUR_TABLE_NAME&lt;/p&gt;
&lt;p&gt;　　repair table YOUR_TABLE_NAME&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 实例如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233383/201712/1233383-20171211133537665-586944980.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：这里的修复表，并不是说可以将之前删除的数据找回来，切记切记！&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;》》特性--加锁和并发&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　加锁:对整张表进行加锁，而不是行。&lt;/p&gt;
&lt;p&gt;         　　并发:在读数据的时候，所有的表上都可以获得共享锁（读锁），每个连接都不互相干扰。&lt;/p&gt;
&lt;p&gt;                在写数据的时候，获得排他锁，会把整个表进行加锁，而其他的连接请求(读，写请求)都处于等待中。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;注意：这里就是为什么MyISAM表不适合做频繁的读写操作的数据表的存储引擎！&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;c_body&quot; readability=&quot;87&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;》》特性--列索引以及延迟索引
&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　列索引，其实在这里我并不想写太多，后面我会专门写一篇关于如何建立索引，注意事项以及如何优化索引。&lt;/p&gt;
&lt;p&gt;　　这里我主要想讲的是延迟索引这个参数，挺有意思的，&lt;strong&gt;myisam专有物&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;　　延迟更新索引，MYISAM 默认把DELAY_KEY_WRITE开启, 整个选项是MYISAM引擎独有的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233383/201712/1233383-20171211135144102-124909776.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;很多人都知道在建立索引上的表进行写操作时，插入大量数据的速度会非常慢，很多办法是先关闭索引，然后插入数据，再打开索引。其实将delay_key_write选项打开，可以得到一定程度的插入速度优化。如果你的某个表有很多update操作，这个参数的优势会很好的体现出来。因为这个参数能延迟更新索引到表关闭。再提醒一次：&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;注意：DELAY_KEY_WRITE选项是MYISAM存储引擎的专有的&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;》》特性--表压缩
&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主要使用myisampack命令&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233383/201712/1233383-20171211141129774-1582666670.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由于这张表是空表，所以在压缩的时候加了-f，表示强制压缩。下面看下压缩后的文件大小：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233383/201712/1233383-20171211141311134-73763431.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;大家有没有发现多了一个&lt;strong&gt;OLD文件，&lt;/strong&gt;这是对原来MYI文件的一个备份，之前是0kb，然后再看下新的MYI文件，目前是1.0K，压缩后的文件没有变小反而变大了，为什么呢？&lt;/p&gt;
&lt;p&gt;这是由于原文件是个空文件，强制压缩之后肯定会比原文件大的，多了一些乱七八糟的东西在里面啦。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：压缩后的文件再执行写操作时会报错，这是由于压缩后的文件会变成&lt;strong&gt;只读状态&lt;/strong&gt;！！切记啊。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;》》基础限制
&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在版本 &amp;lt; MySQL 5.0 时默认表的大小为4G，这对于一些大业务的数据来说是不够的。&lt;/p&gt;
&lt;p&gt;　　有什么办法可以扩展吗？有的。&lt;/p&gt;
&lt;p&gt;　　如存储大表则要修改MAX_Rows 和 AVG_ROW_LENGTH这两个选项。但是一定配置了这两个参数后，表会立刻重写。&lt;/p&gt;
&lt;p&gt;　　所以最好的建议就是更新MySQL的版本啦。&lt;/p&gt;
&lt;p&gt;　　在版本 &amp;gt; MySQL 5.0 时默认表的大小为256TB，这对于我们绝大部分的业务来说都是足够的了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;》》应用场景
&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　最后来说下myisam存储引擎适合使用在哪些应用场景下：&lt;/p&gt;
&lt;p&gt;　　1.看了上面的特性，其实我们很容易知道，需要用到事务型的应用都不适合，只能&lt;span&gt;&lt;strong&gt;使用在非事务型应用&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　2.对于锁表而不是锁行的行为，同样的myisam不适合用在频繁操作写的应用下，这会造成阻塞，最好&lt;span&gt;&lt;strong&gt;用在只读类应用下。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　 &lt;/strong&gt;&lt;/span&gt; &lt;strong&gt; &lt;/strong&gt;&lt;span&gt;3.这个就比较特殊了，上面也没提到过，&lt;span&gt;&lt;strong&gt;空间类应用，&lt;/strong&gt;&lt;span&gt;在MySQL 5.7只前，myisam是唯一支持空间函数的存储引擎，如果想存储空间数据例如GPS数据，或者使用空间函数运算的话，只能使用MyISAM存储引擎。&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;欢迎留言。O(∩_∩)O哈哈~&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
</description>
<pubDate>Mon, 11 Dec 2017 06:32:00 +0000</pubDate>
<dc:creator>H-大叔</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sunshine-H/p/8022960.html</dc:identifier>
</item>
</channel>
</rss>