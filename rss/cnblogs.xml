<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Spring 框架系列之事务管理 - compassblog</title>
<link>http://www.cnblogs.com/compassblog/p/8503565.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/compassblog/p/8503565.html</guid>
<description>&lt;h4 id=&quot;h1&quot;&gt;1、事务回顾&lt;/h4&gt;
&lt;h5 id=&quot;h1-1&quot;&gt;（1）、什么是事务：&lt;/h5&gt;
&lt;p&gt;事务是逻辑上的一组操作，组成这组操作的各个逻辑单元，要么一起成功，要么一起失败。&lt;/p&gt;
&lt;h5 id=&quot;h2acid&quot;&gt;（2）、事务特性（ACID）&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;原子性 ：强调事务的不可分割&lt;/li&gt;
&lt;li&gt;一致性 ：事务的执行的前后数据的完整性保持一致&lt;/li&gt;
&lt;li&gt;隔离性 ：一个事务执行的过程中，不应该受到其他事务的干扰&lt;/li&gt;
&lt;li&gt;持久性 ：事务一旦结束，数据就持久到数据库&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;h3&quot;&gt;（3）、事务并发安全性问题&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;脏读 ：一个事务读到了另一个事务的未提交的数据&lt;/li&gt;
&lt;li&gt;不可重复读 ：一个事务读到了另一个事务已经提交的 update 的数据导致多次查询结果不一致&lt;/li&gt;
&lt;li&gt;幻读 ：一个事务读到了另一个事务已经提交的 insert 的数据导致多次查询结果不一致&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;h4&quot;&gt;（4）、事务隔离级别&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;未提交读 ：脏读，不可重复读，幻读都有可能发生&lt;/li&gt;
&lt;li&gt;已提交读 ：避免脏读，但是不可重复读和幻读有可能发生&lt;/li&gt;
&lt;li&gt;可重复读 ：避免脏读和不可重复读，但是幻读有可能发生&lt;/li&gt;
&lt;li&gt;串行化 ：避免以上所有读问题&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;h5&quot;&gt;（5）、常见数据库默认事务隔离级别&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;MySQL：可重复读&lt;/li&gt;
&lt;li&gt;Oracle：读已提交&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;h2spring&quot;&gt;2、Spring 事务管理&lt;/h4&gt;
&lt;h5 id=&quot;h1-2&quot;&gt;（1）、基本事务操作&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;打开事务&lt;/li&gt;
&lt;li&gt;提交事务&lt;/li&gt;
&lt;li&gt;回滚事务&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;h2&quot;&gt;（2）、事务操作对象&lt;/h5&gt;
&lt;p&gt;Spring 事务管理中提供了 PlatformTransactionManager 接口操作事务，其中最为核心的对象是 TransactionManager 对象。&lt;/p&gt;
&lt;h5 id=&quot;h3spring&quot;&gt;（3）、Spring 事务隔离级别&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;读未提交&lt;/li&gt;
&lt;li&gt;读已提交&lt;/li&gt;
&lt;li&gt;可重复读&lt;/li&gt;
&lt;li&gt;串行化&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;h4spring&quot;&gt;（4）、Spring 事务传播行为&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;保证同一个事务中&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PROPAGATION_REQUIRED ：支持当前事务，如果不存在 就新建一个(默认)&lt;/li&gt;
&lt;li&gt;PROPAGATION_SUPPORTS ：支持当前事务，如果不存在，就不使用事务&lt;/li&gt;
&lt;li&gt;PROPAGATION_MANDATORY ：支持当前事务，如果不存在，抛出异常&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;保证不在同一个事务中&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PROPAGATION_REQUIRES_NEW ：如果有事务存在，挂起当前事务，创建一个新的事务&lt;/li&gt;
&lt;li&gt;PROPAGATION_NOT_SUPPORTED ：以非事务方式运行，如果有事务存在，挂起当前事务&lt;/li&gt;
&lt;li&gt;PROPAGATION_NEVER ：以非事务方式运行，如果有事务存在，抛出异常&lt;/li&gt;
&lt;li&gt;PROPAGATION_NESTED ：如果当前事务存在，则嵌套事务执行&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;h3spring-1&quot;&gt;3、Spring 事务管理方式&lt;/h4&gt;
&lt;h5 id=&quot;h1-3&quot;&gt;（1）、编码式&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;将核心事务管理器配置到 Spring 容器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;/&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;配置TransactionTemplate模板&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;/&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;将事务模板注入Service&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;/&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;在Service中调用模板&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;h2xml&quot;&gt;（2）、xml 配置方式&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;/&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;将通知织入目标&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;/&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;h3-1&quot;&gt;（3）、注解配置方式&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;/&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;在具体业务中使用注解&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;扫描关注微信公众号，了解更多&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201803/1322792-20180304001448573-1009121842.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 03 Mar 2018 16:15:00 +0000</pubDate>
<dc:creator>compassblog</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/compassblog/p/8503565.html</dc:identifier>
</item>
<item>
<title>服务器性能指标与内核参数优化 - demon_gdy</title>
<link>http://www.cnblogs.com/demon89/p/mysql_optimization.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/demon89/p/mysql_optimization.html</guid>
<description>&lt;h2 id=&quot;mysql相关的优化&quot;&gt;MySQL相关的优化&lt;/h2&gt;
&lt;h3 id=&quot;一cpu资源和可用内存大小&quot;&gt;一、CPU资源和可用内存大小&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;1、如何选用CPU
     问？我们需要更快的cpu还是更多的cpu
     答：我们想要更快的cpu还要更多的cpu颗数(痴心做梦)
    
     解答：首先我们需要判断我们的服务是否为cpu密集型的业务，如果是，则应该选择更快的cpu，以加快SQL语句的查询速度。其次我们应该考虑我们系统的并发量的问题，单个cpu无法利用多核心的资源，我们要提高系统的吞吐量和并发量应该选择更多的cpu，再有我们应该考虑我们本身业务需要使用过的MySQL的版本，对于5.0以前的MySQL，并不能充分的使用多核心cpu。建议使用5.6+的版本
    
     注意：如果服务器的性能很好，别手残的选择安装32位的操作系统，因为pow(2, 32)=4G,也是我们艹内存，只能最多艹4G，多余的4G的内存无法使用
    
2、内存
     问？内存应该怎么优化
     答：内存越多越好，但是对性能影响有限并不能无限的增加性能

     解答：服务器的内存，我们应该组成购买升级，并且每个通道的内存应选择相同品牌、颗粒、频率、电压、校验技术和型号，另外我们需要根据数据库的大小来选择内存，另外应该配置更多内存以避免内存不足造成性能下降（选用128G或者256G以上的内存）！
    &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;二磁盘的配置和选择&quot;&gt;二、磁盘的配置和选择&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;可用选择：
 1、使用传统机器硬盘
    优点：存储空间大、价格低廉
    缺点：读写速度较慢，但是选择使用的较多
    需要考虑的点：存储容量、传统速度、访问时间、主轴的转速(7200转或更高的转速)、物理磁盘的尺寸

 2、使用RAID增强传统机器磁盘的性能
     简介：RAID是磁盘冗余队列的简称(Readundant Arrays of Independent Disks),简单来说就是RAID的作用就是可以把多个容量小的磁盘组成一组容量更大的磁盘，并提供数据完整性的技术
      raid0:具有读写加速的技术，磁盘使用率是3块磁盘的和，但是磁盘的损坏率是一块盘的n倍(N块磁盘)，适用于MySQL的salve端
      raid1:具有冗余的功能，磁盘利用率为n/2，因为需要把另外的一半磁盘作为备份盘使用，适用对数据要求安全速度无要求的业务，例如日志或者传统的监控系统
      raid5:通过分布式奇偶校验块的把数据分散到多个磁盘上，这样如果任何一块盘数据失效，都可以从奇偶盘中重建，如果两块盘挂掉了，整个磁盘阵列就GG了！比较中庸的解决方案，需要损失一块盘的空间作为奇偶校验盘~
      raid10:它是对磁盘先做raid1以后再对两组raid1磁盘做raid0，所以对读写都有良好的性能，相对于raid5重建起来更简单，速度也更快！适用于存储的主节点或者MySQL的主节点~
        
 3、使用固态存储SSD和PCIE卡
      优点：相比机械磁盘固态磁盘有更好的随机读写性能，相比机械磁盘能更好的支持并发
      缺点：更容易的损坏，成本高
      使用场景：适用于大量的随机I/O的场景，使用于解决单线程负载的I/O瓶颈
        
      注意：
          如果只有一块固态磁盘，我们应该给他放到主服务器还是从服务上？
          如果只有一块固态磁盘的话，建议放到从服务器上，以减少主从同步的时间，减少固态的读写&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;三centos系统参数调优&quot;&gt;三、CentOS系统参数调优&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;相关的参数调整：
 1、内核相关的参数(/etc/sysctl.conf)
    net.coro.somaxconn=65535
    net.coro.netdev_max_backlog=65535
    net.ipv4.tcp_max_syn_backlog=65535
    net.ipv4.tcp_fin_timeout=10
    net.ipv4.tcp_tw__reuse=1
    net.ipv4.tcp_tw_revycle=1
    net.core.wmem_default=87380
    net.core.wmem_max=16777216
    net.core.rmem_default=87380
    net.core.rmem_max=16777216
    net.ipv4.tcp_keepalive_time=120
    net.ipv4.tcp_keppalive_intvl=30
    net.ipv4.tcp_keepalive_probes=3
    kernel.shmmax=4294967295
    注意：这个值的大小对于64位的Linux系统，可取的最大值为物理内存值-1byte,建议值为大于物理内存的一半，一般取值大于Innodb缓存池的大小即可，可以取物理内存-1bytes
            
 2、增加资源限制(/etc/security/limit.conf)
     * soft nofile 65535
     * hard nofile 65535
     解释：
       *       表示对所有用户有效
       soft    指的是当前系统生效的设置
       hard    表明系统中所能设定的最大值
       nofile  表示所限的资源是打开文件的最大数目
       65536   就是限制的数量  
        
 3、磁盘调度策略(/sys/block/devname/queue/scheduler)
        cat /sys/block/sda/queue/scheduler
        noop anticipatory deadline [cfq]
        
  noop(电梯式调度策略):
    NOOP实现了一个FIFO队列，它像是电梯的工作方法一样对I/O请求进行组织，当有一个新的请求过来时，它将请求合并到最近的请求以后，以此来保证请求同一个介质，NOOP倾向于饿死读而利于写，因此NOOP对于闪存设备、RAM及嵌入式系统是最好的选择。

  deadline(截止时间调度策略)
    Deadline确保了在一个截止时间内服务请求，这个截止时间是可调整的，而默认读期限短与写期限。这样就能防止写操作因为不能被读取而饿死的现象，Deadline对数据库类是最好的选择
 
  anticipatory(预料I/O调度策略)
    本质上与Deadline一样，但是最后一次读操作后，要等待6ms,才能继续进行对其他I/O请求进行调度。它会在每个6ms，才能中插入新的I/O操作，而会将一些小写入流合并为一个大写入流，用写入延迟换取最大的写入吞吐量。AS时而好与写入较多的环境，比如文件系统，AS对数据库表现极差！
    
  更改调度策略的方法:
      echo &quot;schedulername&quot; /sys/block/devname/deque/scheudler&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;四文件系统对性能的相应&quot;&gt;四、文件系统对性能的相应&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;EXT3/4系统的挂载参数(/etc/fstab)
   data = writeback | ordered | journal
     writeback：非同步的写入，速度最快
     ordered:   不记录元数据，但是提供了一致性的保证，在写原元数据之前，先写入数据，使他们保存一致，稍慢与writebak
     journal:   日志

   noatime, nodiratime （挂载选项的时候可以设置的相关参数，例如不更新访问时间，目录的时间，以提升I/O的性能）
    
   /dev/sda1/ etx4 notime, nodiratime, data=writeback 1  1  (fstab中的优化参数)
    
   可以通过追加重定向的命令把参数传递到fstab中
      #] echo &quot;/dev/sda1/ etx4 notime, nodiratime, data=writeback 1  1&quot; &amp;gt;&amp;gt; /etc/fstab&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;原创作品，转载请注明出处：&lt;a href=&quot;http://www.cnblogs.com/demon89/p/mysql_optimization.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/demon89/p/mysql_optimization.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 03 Mar 2018 16:05:00 +0000</pubDate>
<dc:creator>demon_gdy</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/demon89/p/mysql_optimization.html</dc:identifier>
</item>
<item>
<title>关于C语言文件操作 - Andrew_qian</title>
<link>http://www.cnblogs.com/qsyll0916/p/8503552.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qsyll0916/p/8503552.html</guid>
<description>&lt;p&gt;关于C语言的文件操作之前我也写过一篇博客来介绍，但是当时写的很不全面，只是简单的使用了一下 ，今天再从新学习一下。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、文件的写&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;首先还是先看一个简单的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
include&amp;lt;stdio.h&amp;gt;

&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    FILE &lt;/span&gt;*fp;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明一个文件指针，指向文件缓冲区的首地址  &lt;/span&gt;
    &lt;span&gt;char&lt;/span&gt;&lt;span&gt; ch;
&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;( (fp = fopen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;file_1.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)) == NULL ) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;w+打开可读写文件，若文件存在则清零，不存在则新建文件,a 模式不清零 &lt;/span&gt;
&lt;span&gt;    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cannot open file, press any key to exit!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件无法打开  &lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;
     printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Input a string:\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt; ((ch = getchar()) != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; )
    {
        putc(ch,fp);    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;该函数将字符写入文件，与 fputc 的区别？ &lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;
    fclose(fp);    
                
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个例子就是实现打开或新建一个文本文件，然后写入用户在控制台输入的数据。&lt;/p&gt;
&lt;p&gt;关于文件操作首先是：&lt;/p&gt;

&lt;p&gt;这个&lt;strong&gt;FILE&lt;/strong&gt;是文件类型标识符，是C编译系统定义好的一个&lt;strong&gt;结构体类型&lt;/strong&gt;，结构体中含有文件名、文件状态等信息。&lt;br/&gt;其定义一个&lt;strong&gt;指针变量fp&lt;/strong&gt;，该变量用于指向一个文件，存放的是文件缓冲区的首地址。该指针又叫&lt;strong&gt;文件指针&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;文件指针是一个指向文件开头的指针。使用文件指针，我们可以打开或者关闭一个文件，同时，我们也可以使用文件指针将数据的读写位置移动到文件的任意字节位置。&lt;/p&gt;
&lt;p&gt;然后使用fopen函数打开或新建一个文件：&lt;/p&gt;
&lt;p&gt;fopen() 函数用来打开一个文件，该函数接受两个字符串类型的参数：文件名（filename）、打开模式（open mode）&lt;br/&gt;fopen(&quot;filename&quot;,&quot;open mode&quot;)&lt;br/&gt;当使用该函数打开一个文件时，返回一个指针，该指针指向文件的开始位置，称为文件指针，&lt;br/&gt;那么为了接收它返回的文件指针，我们需要事先声明一个文件指针： FILE *fp&lt;br/&gt;如果因为某些系统内部原因导致文件无法打开，则函数返回空指针 NULL&lt;br/&gt;所以为了避免文件打开失败导致的程序异常，打开文件一般按照如下格式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;if&lt;/span&gt;( (fp = fopen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;file_1.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)) == NULL ) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;w+打开可读写文件，若文件存在则清零，不存在则新建文件,a 模式不清零 &lt;/span&gt;
&lt;span&gt;    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cannot open file, press any key to exit!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件无法打开  &lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于文件打开的模式，我在上一篇文件操作的博客中详细介绍了，链接：&lt;a href=&quot;http://www.cnblogs.com/qsyll0916/p/7892738.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/qsyll0916/p/7892738.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在下面就是获取用户输入，使用一个while循环持续的获取输入，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;while&lt;/span&gt; ((ch = getchar()) != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; )
    {
        putc(ch,fp);    
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再此使用 \n 作为结束标志，即只能在控制台输入一行字符串，&lt;br/&gt;若使用EOF，则可以多行输入，用 ctrl+z 表示输入结束，该组合键代表标准输入文件的结束。&lt;/p&gt;
&lt;p&gt;下一句   putc(ch,fp);  就是吧用户输入的字符写入文件，注意这里是一个字符一个字符写入的，因为输入用的是getchar函数，如果是字符串输入写入的话，可以使用 fputc（）函数直接写入一个字符串。&lt;/p&gt;
&lt;p&gt;最后也是非常重要的一部，对文件读写完毕后需要关闭文件，防止文件打开过多造成的文件读写混乱。&lt;/p&gt;
&lt;p&gt;使用  fclose（）函数关闭一个文件，&lt;/p&gt;
&lt;p&gt;关闭文件，正常关闭时返回0，否则返回1&lt;br/&gt;关闭时，系统会清除缓冲区，并把数据输出到磁盘文件，释放缓冲单元，使文件指针与具体文件脱钩。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
    fclose(fp);    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、文件的读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;到这里关于文件的写操作就基本上是这些，下面是关于文件的读操作，其实和写差不多。&lt;/p&gt;
&lt;p&gt;还是先看一下完整的代码，方便和上面的写操作对比：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre readability=&quot;7&quot;&gt;
#include &amp;lt;stdio.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stdlib.h&amp;gt;

&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    FILE &lt;/span&gt;*&lt;span&gt;fp;
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; ch; 
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; str[&lt;span&gt;80&lt;/span&gt;&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; file_name[&lt;span&gt;15&lt;/span&gt;];    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输入文件名称缓冲 
        
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果文件和本程序在同一个文件下面，则直接输入txt文件名即可 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果不在同一目录下面，则需要输入完整文件路径格式  
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如  ： e:\\test.txt    &lt;/span&gt;
&lt;span&gt;     
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;please enter the filename: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意输入文件名时需要带上文件的后缀.txt &lt;/span&gt;
&lt;span&gt;    
    gets(file_name);    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;gets函数用来读取用户输入的字符串，专门针对字符串处理设计的  &lt;/span&gt;
    
     &lt;span&gt;if&lt;/span&gt;((fp = fopen(file_name,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)) == NULL ) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;r模式不能写入数据，只能读取  &lt;/span&gt;
&lt;span&gt;    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cannot open file, press any key to exit!\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件无法打开  &lt;/span&gt;
        exit(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);    
    }

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;    
    while( (ch = getc(fp)) != EOF )     //getc函数从文件中读取单个字符  
    {
        putchar(ch);                    //循环输出单个字符 
    }
    putchar('\n');  //输出一个换行  
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;    &lt;p&gt;&lt;span&gt;while&lt;/span&gt;((fgets(str,&lt;span&gt;80&lt;/span&gt;,fp)) !=&lt;span&gt; NULL) 
        puts(str);         &lt;/span&gt;
&lt;span&gt;        
    fclose(fp);
}&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;开始的打开文件方式和写操作的差不多，就是多了一个用户自己输入文件的路径和名称。&lt;/p&gt;
&lt;p&gt;然后程序用了两种方式来读取文件内容，一个是使用fgetc函数读取单个字符，然后输出，一直循环，直到读取到文件的末尾。&lt;/p&gt;
&lt;p&gt;另一种方式是使用特殊的   fgets（）  函数来一次性读取80个字节的内容：&lt;/p&gt;
&lt;p&gt;fgets   函数从 fp 文件中读取 80 个字节的数据到str数组中，然后用 puts 函数输出。&lt;/p&gt;
&lt;p&gt;当到达文件末尾时， 函数返回 NULL，若要持续读出字符串，则循环检测每次读出80个字节后是否到达文件末尾。&lt;/p&gt;

&lt;p&gt;关于文件的操作还有很多深入的内容，后面学习了之后再继续分享。。。。。。。&lt;/p&gt;
</description>
<pubDate>Sat, 03 Mar 2018 15:59:00 +0000</pubDate>
<dc:creator>Andrew_qian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qsyll0916/p/8503552.html</dc:identifier>
</item>
<item>
<title>OpenCV 之 空间滤波 - 胡马依北风</title>
<link>http://www.cnblogs.com/xinxue/p/8494300.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xinxue/p/8494300.html</guid>
<description>&lt;h2&gt;1.1  基本概念&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;  &lt;span&gt;空间域&lt;/span&gt;，在图像处理中，指的是像平面本身； &lt;span&gt;空间滤波&lt;/span&gt;，则是在像平面内，对像素值所进行的滤波处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/890227/201803/890227-20180302185826500-937312001.png&quot; alt=&quot;&quot; width=&quot;218&quot; height=&quot;190&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  如上图所示，假设点 (x, y) 为图像 f 中的任意点，中间正方形是该点的 3x3 邻域 (也称为 “滤波器”)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  当该邻域，从图像的左上角开始，以水平扫描的方式，逐个像素移动，最后到右下角时，便会产生一幅新的图像。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1.2  滤波机制&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; 若输入图像为 f(x, y)，则经空间滤波后，输出图像 g(x, y) 为&lt;/p&gt;
&lt;p&gt; $\quad g(x, y) = \sum \limits_{s=-a}^a \: \sum \limits_{t=-b}^b {w(s, t)\:f(x+s, y+t)} $，其中 w(s, t) 为滤波器模板&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/890227/201803/890227-20180302194314273-425105922.png&quot; alt=&quot;&quot; width=&quot;316&quot; height=&quot;266&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 更形象的解释，如下图：卷积核(也即滤波器模板) 像手电筒一样，对图像 f(x, y) 中的像素，从左至右从上到下，逐个扫描计算后，便得到了输出图像 g(x, y)&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/890227/201803/890227-20180302194844819-960254186.png&quot; alt=&quot;&quot; width=&quot;459&quot; height=&quot;246&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1.3  相关和卷积&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;  空间滤波中，相关和卷积，是两个容易混淆的概念，以下面的输入图像 f(x,y) 和 滤波器模板 w(x, y) 为例：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/890227/201803/890227-20180302213500327-1699172654.png&quot; alt=&quot;&quot; width=&quot;284&quot; height=&quot;130&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  &lt;span&gt;相关 (Correlation)&lt;/span&gt;，和上述的滤波机制一样，即滤波器模板逐行扫描图像，并计算&lt;span&gt;每个位置像素乘积和&lt;/span&gt;的过程。&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/890227/201803/890227-20180302213606563-881946005.png&quot; alt=&quot;&quot; width=&quot;392&quot; height=&quot;136&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  &lt;span&gt;卷积 (Convolution)&lt;/span&gt;，和 &quot;相关&quot; 过程类似，但是要首先旋转 180°，然后再执行和 “相关” 一样的操作。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  二维中的旋转 180°，等于沿一个坐标轴翻转该模板，然后再沿另一个坐标轴再次翻转该模板。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/890227/201803/890227-20180302213640524-786047869.png&quot; alt=&quot;&quot; width=&quot;388&quot; height=&quot;143&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    &lt;span&gt;注意&lt;/span&gt;：如果&lt;span&gt;滤波器模板是对称&lt;/span&gt;的，则相关和卷积得到的结果是一样的。&lt;/p&gt;


&lt;p&gt;  OpenCV 中，用户可自定义滤波器模板，然后使用 &lt;span&gt;filter2D()&lt;/span&gt; 函数，对图像进行空间滤波&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;  filter2D&lt;/span&gt; &lt;/strong&gt;(
    InputArray    src,
    OutputArray   dst,
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;           ddepth,
    InputArray    kernel,
    Point       anchor &lt;/span&gt;= Point(-&lt;span&gt;1&lt;/span&gt;,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;),
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;      delta = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;         borderType =&lt;span&gt; BORDER_DEFAULT 
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 其公式如下：&lt;/p&gt;
&lt;p&gt; $ dst(x, y) = \sum \limits_{0 &amp;lt; x' &amp;lt;kernel.cols, \\ 0&amp;lt;y'&amp;lt;kernel.rows} \: kernel(x', y') * src(x+x'-anchor.x,  y+y'-anchor.y) $&lt;/p&gt;
&lt;p&gt; 可以看出，锚点 $(anchor.x, anchor.y)$ 并不是 kernel 的镜像中心。&lt;/p&gt;
&lt;p&gt; 要想得到真正的卷积 (convolution)，首先，使用 &lt;span&gt;flip()&lt;/span&gt; 函数翻转 kernel，然后，设置新的锚点为 $(kernel.cols - anchor.x - 1, kernel.rows -anchor.y -1)$&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;  flip&lt;/span&gt; &lt;/strong&gt;(
    InputArray   src,
    OutputArray  dst,
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;          flipCode &lt;span&gt;// 0, flip around x-axis; 1,flip around y-axis; -1, flip around both axes &lt;/span&gt;
);    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;  下面详细阐述，如何设计滤波器模板，配合 filter2D() 函数，实现图像的一阶和二阶偏导运算。&lt;/p&gt;
&lt;p&gt;  在 x 方向上，一阶和二阶偏导数的计算结果，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/890227/201803/890227-20180303181342753-1389036352.png&quot; alt=&quot;&quot; width=&quot;436&quot; height=&quot;204&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.1 一阶偏导&lt;/h2&gt;
&lt;p&gt;  图像在 x 和 y 方向的一阶偏导如下：&lt;/p&gt;
&lt;p&gt;  $\frac {\partial f}{\partial x} = f(x+1,y) - f(x,y)$&lt;/p&gt;
&lt;p&gt;  $\frac {\partial f}{\partial y} = f(x, y+1) - f(x, y)$&lt;/p&gt;
&lt;p&gt;  则对应的滤波器模板为 $K_{x} = \begin{bmatrix} -1 &amp;amp; 1 \end{bmatrix} $，$K_{y} = \begin{bmatrix} -1 \\ 1 \end{bmatrix} $&lt;/p&gt;
&lt;h2&gt;3.2  二阶偏导&lt;/h2&gt;
&lt;p&gt;  同样的，在 x 和 y 方向的二阶偏导如下：&lt;/p&gt;
&lt;p&gt;  $\frac {\partial f^2} {\partial x^2} = f(x+1, y) + f(x-1, y)- 2f(x,y)$&lt;/p&gt;
&lt;p&gt;  $\frac {\partial f^2}{\partial y^2} = f(x, y+1) + f(x, y-1)- 2f(x,y)$&lt;/p&gt;
&lt;p&gt;  $\frac {\partial f^2}{\partial x \partial y} = f(x+1, y+1) - f(x+1, y) - f(x, y+1)+ f(x,y)$&lt;/p&gt;
&lt;p&gt;  则各自的滤波器模板为 $K_{xx} = \begin{bmatrix} 1 &amp;amp; -2 &amp;amp; 1 \end{bmatrix} $，$K_{yy} = \begin{bmatrix} 1 \\ -2 \\ 1 \end{bmatrix} $，$K_{xy} = \begin{bmatrix} 1 &amp;amp; -1 \\ -1 &amp;amp; 1 \end{bmatrix} $&lt;/p&gt;
&lt;h2&gt; 3.3 代码实现&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
#include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;opencv2/imgproc.hpp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;opencv2/highgui.hpp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; cv;

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 读取图像&lt;/span&gt;
    Mat src = imread(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.bmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(src.empty()) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    }
    cvtColor(src, src, CV_BGR2GRAY);

    Mat kx &lt;/span&gt;= (Mat_&amp;lt;&lt;span&gt;float&lt;/span&gt;&amp;gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;) &amp;lt;&amp;lt; -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1行2列的 dx 模板&lt;/span&gt;
    Mat ky = (Mat_&amp;lt;&lt;span&gt;float&lt;/span&gt;&amp;gt;(&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;) &amp;lt;&amp;lt; -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2行2列的 dy 模板&lt;/span&gt;
&lt;span&gt;
    Mat kxx &lt;/span&gt;= (Mat_&amp;lt;&lt;span&gt;float&lt;/span&gt;&amp;gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1行3列的 dxx 模板&lt;/span&gt;
    Mat kyy = (Mat_&amp;lt;&lt;span&gt;float&lt;/span&gt;&amp;gt;(&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3行1列的 dyy 模板&lt;/span&gt;
    Mat kxy = (Mat_&amp;lt;&lt;span&gt;float&lt;/span&gt;&amp;gt;(&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2行2列的 dxy 模板

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 一阶偏导&lt;/span&gt;
&lt;span&gt;    Mat dx, dy;
    filter2D(src, dx, CV_32FC1, kx);
    filter2D(src, dy, CV_32FC1, ky);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 二阶偏导&lt;/span&gt;
&lt;span&gt;    Mat dxx, dyy, dxy;
    filter2D(src, dxx, CV_32FC1, kxx);
    filter2D(src, dyy, CV_32FC1, kyy);
    filter2D(src, dxy, CV_32FC1, kxy);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 显示图像&lt;/span&gt;
    imshow(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, dx);
    imshow(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, dy);
    imshow(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dxx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, dxx);
    imshow(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dyy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, dyy);
    imshow(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dxy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, dxy);

    waitKey(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 图像的测试效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/890227/201803/890227-20180303230242194-346935236.png&quot; alt=&quot;&quot; width=&quot;1348&quot; height=&quot;386&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;参考资料：&lt;/h2&gt;
&lt;p&gt;  OpenCV Tutorials / imgproc module / &lt;a href=&quot;https://docs.opencv.org/master/d4/dbd/tutorial_filter_2d.html&quot; target=&quot;_blank&quot;&gt;Making your own linear filters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &amp;lt;数字图像处理&amp;gt; 冈萨雷斯, 第3章 灰度变换与空间滤波&lt;/p&gt;

</description>
<pubDate>Sat, 03 Mar 2018 15:19:00 +0000</pubDate>
<dc:creator>胡马依北风</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xinxue/p/8494300.html</dc:identifier>
</item>
<item>
<title>理解 Git - kidney</title>
<link>http://www.cnblogs.com/kidney/p/8469659.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kidney/p/8469659.html</guid>
<description>&lt;h3&gt;Git 如何保存文件&lt;/h3&gt;
&lt;p&gt;其它版本管理系统通常会保存所有文件及其历次提交的差异（diff / revision），通过 merge 原始文件与各阶段的差异就能获取任何版本的状态&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/925891/201802/925891-20180225145443084-175247534.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而 Git 保存的是每一次提交时&lt;strong&gt;所有&lt;/strong&gt;文件的快照（snapshot），对于发生改变（modified）的文件会生成新的快照，而对于未发生改变的文件，其新版本快照为上一个版本的快照的索引（图中虚线框所示），这样可以减小版本库的体积&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/925891/201802/925891-20180225150549755-897936628.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里比较费解的是：快照究竟是什么？&lt;/p&gt;
&lt;p&gt;简单的理解：快照就是压缩文件，只不过 git 会将文件内容压缩为 blob 格式，例如仅含一段 hello world 的 txt 文件压缩后的内容为：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7801 4bca c94f 5230 3462 c848 cdc9 c957&lt;/span&gt;&lt;br/&gt;&lt;span&gt;28cf 2fca 49e1 0200 4411 0689&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;所有文件快照都会被储存在 .git 仓库文件夹下的 objects 目录中&lt;/p&gt;
&lt;p&gt;经测试，一份 200k 的未经压缩的代码文件，其文件快照大小约 65k&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/925891/201802/925891-20180225160233097-1474738766.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;文件名 eef...542 是根据内容生成的 40 位哈希字符串，文件名 + 文件本身就构成了一组键值对。所有文件都以这种形式保存，而 objects 目录就是一个以键值对形式保存文件的数据库&lt;/p&gt;
&lt;p&gt;可以想象，随着版本不断迭代，.git 仓库目录的体积往往会超过工作区所有文件的体积之和，因为哪怕只做了一丁点的改变，git 都会重新生成快照。如下图所示，我仅仅删掉了 vue.runtime.js 的一行注释，然后执行 `git add -A`，.git 中就重新生成了一份快照&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/925891/201802/925891-20180225160610555-1627975103.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一个长期维护的代码库，其代码总量可能只有几 MB，但 .git 完全可能大到以 G 计&lt;/p&gt;
&lt;p&gt;比起其它版本管理系统仅仅记录差异，git 的这种做法不是显得更浪费空间吗？git 之所这么设计，是出于“空间换时间”的考虑。用过 SVN 的人都知道要从一个几百 MB 的项目库开出一个分支是多么费时，而使用 git 开分支，无论体积有多大，都是一瞬间的事情&lt;/p&gt;

&lt;h3&gt;Git 如何保存文件版本&lt;/h3&gt;
&lt;p&gt;理解了 git 保存文件的方式，就很容易理解其保存版本的方式：采用一个树对象来表示目录结构与文件&lt;/p&gt;
&lt;p&gt;root: {&lt;/p&gt;
&lt;p&gt;  sub1: {&lt;/p&gt;
&lt;p&gt;     hash&lt;/p&gt;
&lt;p&gt;     hash&lt;/p&gt;
&lt;p&gt;     ...&lt;/p&gt;
&lt;p&gt;  }&lt;/p&gt;
&lt;p&gt;  sub2: {&lt;/p&gt;
&lt;p&gt;     hash&lt;/p&gt;
&lt;p&gt;     hash&lt;/p&gt;
&lt;p&gt;     ...&lt;/p&gt;
&lt;p&gt;  }&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;根据文件索引就可以直接从数据库中取出文件，然后再按树对象表征的目录结构进行组合排列，就很容易恢复出一套文件版本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/925891/201803/925891-20180303214837204-151066377.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;每次 commit 除了保存树对象以外，还会记录提交的作者、批注、上一次提交的索引等信息，每个 commit 都会根据内容生成一个 hash 作为其唯一的索引&lt;/p&gt;
&lt;p&gt;可以看到，所有的 commit 形成了一个链表，而这个链表有一个形象的名称：分支&lt;/p&gt;

&lt;h3&gt;Git 开分支的原理&lt;/h3&gt;
&lt;p&gt;git 分支的本质，就是指向某个特定 commit 的指针，假设当前只有一个分支，默认就叫做 master，当前已经是第三个提交了：&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  master: commit-3&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;那么开一个分支，无非就是新创建一个指针：&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  master: commit-3&lt;/p&gt;
&lt;p&gt;  dev: commit-3&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;当前用户处于哪个分支，需要用另一个指针来表示：&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  HEAD: master&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;执行 `git checkout dev` 切换分支后：&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  HEAD: dev&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;在 dev 分支提交一次 commit 后：&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  master: commit-3&lt;/p&gt;
&lt;p&gt;  dev: commit-4&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;切回 master，执行 `git branch -d dev` 删除分支：&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  master: commit-3&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;master 分支其实并没有什么特殊之处，它和其它分支本质是一样的，只不过它是初始化项目时的默认分支，同时在项目开发中约定作为主分支&lt;/p&gt;

&lt;h3&gt;Git 合并分支的策略&lt;/h3&gt;
&lt;p&gt;两个分支的合并只有两种情况：无分叉、有分叉&lt;/p&gt;
&lt;p&gt;无分叉的情形最简单，合并分支就把 master 指向的 commit 更换为最新的 commit&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  master: commit-3&lt;/p&gt;
&lt;p&gt;  dev: commit-4&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;merge：&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  master: commit-4&lt;/p&gt;
&lt;p&gt;  dev: commit-4&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/925891/201803/925891-20180303222907627-87068653.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这种策略被称为 fast forward&lt;/p&gt;
&lt;p&gt;有分叉的情况稍微麻烦一些，git 会将两个分支的分叉点和头部的 commit 做一次三方合并，然后形成一个新的 commit：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/925891/201803/925891-20180303223326807-1155748006.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;显然第一种方式最简便，那有没有办法在分叉的情况下仍然采用 fast forward 的策略呢，有&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/925891/201803/925891-20180303230423504-1888019486.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在 experiment 分支上执行 `git rebase master`，首先会计算出分叉点与 experiment 分支头部的两个 commit 的差异，然后以 C3 为新的基础，整合之前计算出的差异，得到一个新的 commit&lt;/p&gt;
&lt;p&gt;    &lt;span&gt;var patch = C4 - C2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  var C4` = C3 + patch&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  C4`.parent = C3&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;rebase 就是改变基础的意思。这下回到 master 分支执行 merge 操作，就可以实现 fast forward 了&lt;/p&gt;

</description>
<pubDate>Sat, 03 Mar 2018 15:18:00 +0000</pubDate>
<dc:creator>kidney</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kidney/p/8469659.html</dc:identifier>
</item>
<item>
<title>聊聊JavaScript-闭包 - 石志凯</title>
<link>http://www.cnblogs.com/shizk/p/8503255.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shizk/p/8503255.html</guid>
<description>&lt;p&gt;　&lt;span&gt;　今天聊聊闭包，网上五花八门的定义和解释很多很多，是不是搞得你很懵逼；每次看闭包，都不同，本来自己懂，看完别人的之后就开始怀疑自己了。在我看来，闭包简单的说就是函数里面套函数，再往大了说就是我函数外面想知道你函数里面的变量。怎么知道？我在你函数内部再写个函数2，把我想要得到的值获取到函数2中；然后我在函数外面在获取函数2中的值，完事，函数2就成了闭包。废话多了，直接开讲&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;要理解闭包，首先要知道js特殊变量和作用域&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、变量的作用域&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;变量的作用域有什么？局部变量、全局变量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;js的特殊之处就是函数内部可以获取全局变量，&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
var a = 'shizhikai'；
function  func(){
    console.log(a)
}
func() ；//控制台打印  shizhikai
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1145511/201803/1145511-20180303213936850-1256144284.jpg&quot; alt=&quot;&quot;/&gt;　&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;而外部是无法获取函数内的局部变量&lt;/strong&gt;　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
function  func(){
    var a = 'shizhikai'
}&lt;br/&gt;func()；
console.log(a)  //报错：a is not defined　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1145511/201803/1145511-20180303214249356-1718334790.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;这里注意一点是，如果函数内部变量不用var声明，那实际上就声明了个全局变量&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
function  func(){
    a = 'shizhikai';
}
func()；
console.log(a) ;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1145511/201803/1145511-20180303214554684-1062566468.jpg&quot; alt=&quot;&quot;/&gt;　&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、怎么获取func函数内部的局部变量？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就是我刚才上面说的，在函数内部在套一个函数2，函数2获取func中的局部变量&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
function  func(){
            var a = 'shizhikai';
            function func2(){
                console.log(a)
            }
            return func2;
        }
        var b = func()
        b() ;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1145511/201803/1145511-20180303215647841-1886155193.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看到了，我们外部获取到了函数内部的局部变量了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、什么是闭包？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面那个func2就是一个闭包。&lt;/p&gt;
&lt;p&gt;咳咳，这下好好定义一下：&lt;strong&gt;&lt;span&gt;闭包就是能够读取其他函数内部变量的函数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4、闭包的应用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;• 应用闭包的主要场合是：&lt;span&gt;设计私有的方法和变量。&lt;/span&gt;&lt;br/&gt;任何在函数中定义的变量，都可以认为是私有变量，因为不能在函数外部访问这些变量。私有变量包括函数的参数、局部变量和函数内定义的其他函数。&lt;/p&gt;
&lt;p&gt;• &lt;span&gt;匿名函数最大的用途是创建闭包&lt;/span&gt;，并且还可以构建命名空间，以减少全局变量的使用。从而使用闭包模块化代码，减少全局变量的污染。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
var objEvent = objEvent || {};
(function(){ 
    var addEvent = function(){ 
     
    };
    function removeEvent(){
      
    }

    objEvent.addEvent = addEvent;
    objEvent.removeEvent = removeEvent;
})();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在这段代码中函数 addEvent 和 removeEvent 都是局部变量，但我们可以通过全局变量 objEvent 使用它，这就大大减少了全局变量的使用，增强了网页的安全性。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;5、闭包的缺陷&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;• 闭包的缺点就是常驻内存会增大内存使用量，并且使用不当很容易造成内存泄露。&lt;br/&gt;• 如果不是因为某些特殊任务而需要闭包，在没有必要的情况下，在其它函数中创建函数是不明智的，因为闭包对脚本性能具有负面影响，包括处理速度和内存消耗。&lt;/p&gt;

</description>
<pubDate>Sat, 03 Mar 2018 14:22:00 +0000</pubDate>
<dc:creator>石志凯</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shizk/p/8503255.html</dc:identifier>
</item>
<item>
<title>浅谈CDN、SEO、XSS、CSRF - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8503208.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8503208.html</guid>
<description>&lt;h2 id=&quot;什么是cdn&quot;&gt;什么是CDN&lt;/h2&gt;
&lt;p&gt;初学Web开发的时候，多多少少都会听过这个名词-&amp;gt;CDN。&lt;/p&gt;
&lt;p&gt;CDN在我没接触之前，它给我的印象是用来优化网络请求的，我第一次用到CDN的时候是在找JS文件时。当时找不到相对应的JS文件下载地址(之前一般我都是把JS下载下来，然后在项目中引用的。PS:当然了，我觉得大部分初学者都一样)&lt;/p&gt;
&lt;p&gt;找着找着发现了这个网站：&lt;a href=&quot;http://www.bootcdn.cn/&quot; class=&quot;uri&quot;&gt;http://www.bootcdn.cn/&lt;/a&gt;，发现它这个搜索引擎收录了很多的JS文件，直接在项目中引入它的地址就行了！&lt;/p&gt;
&lt;p&gt;后来，在购买服务器的时候也发现了广告：CDN加速之类的...&lt;/p&gt;
&lt;p&gt;当时觉得还没用到，就不管它了。&lt;/p&gt;
&lt;p&gt;今天，在整理笔记的时候又看到了CDN这个名词了，于是决定去好好学习一番。&lt;/p&gt;
&lt;p&gt;那么我讲了一大堆，CDN到底是什么？&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;CDN的全称是Content Delivery Network，&lt;strong&gt;即内容分发网络&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;为什么要使用cdn&quot;&gt;为什么要使用CDN？&lt;/h2&gt;
&lt;p&gt;从我上面的经历而言，&lt;strong&gt;CDN肯定是能够加快我们的访问网站的速度的&lt;/strong&gt;(因为有CDN服务器卖)，那JS引入绝对的路径和我们自己下载下来，使用相对路径引入有什么区别呢？？？&lt;/p&gt;
&lt;p&gt;在我们的应用中，我们一般采用：&lt;strong&gt;应用服务器和资源服务器进行分离&lt;/strong&gt;的方式&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;应用服务器主要是我们的代码（JS、CSS不放在应用服务器上)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源服务器主要是一些静态的资源，而CDN就是作为我们的资源服务器了。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;CDN主要用于存储JS、CSS文件，能够加快我们获取JS、CSS的内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;

&lt;h2 id=&quot;什么是seo&quot;&gt;什么是SEO&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;SEO（search engine optimization 搜索引擎优化）&lt;br/&gt;SEM（search engine marketing 搜索引擎营销）&lt;br/&gt;SEM包括搜索引擎优化(SEO)、付费排名、精准广告以及付费收录，SEM包括SEO和竞价，SEO也是SEM的一种方式。&lt;br/&gt;SEM要钱的(简单理解：百度的广告就是SEM)、SEO不用钱的(自己配置提高搜索引擎的权重)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;SEO是一种技术，主要是用于提高网站浏览量而做的优化手段&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么需要seo&quot;&gt;为什么需要SEO？&lt;/h2&gt;
&lt;p&gt;我们搜一下Java微信公众号：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/HSJRygd.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现排名是有先后的，博客园、CSDN都是靠前的。可是平台那么多，还有开源中国啊、简书啊等等平台为啥就排不到前面呢？就是SEO没有博客园、CSDN做得好&lt;/p&gt;
&lt;p&gt;想要提高在搜索引擎的权重(自己的网站排得更前)就需要学习SEO。&lt;/p&gt;
&lt;h2 id=&quot;提高权重的方法&quot;&gt;提高权重的方法&lt;/h2&gt;
&lt;p&gt;那么提高在搜索引擎的权重有什么办法的呢？？可以看下面的图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/PF48b8F.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然了，跟我们编写的代码质量也是有很大的关系的：&lt;/p&gt;
&lt;p&gt;A、title标题：强调重点&lt;br/&gt;B、meta keywords关键词：列举几个关键词&lt;br/&gt;C、meta description网页描述：高度概括网页的内容&lt;br/&gt;以上信息不要堆积、重复&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语义话代码（HTML 标签有自己的意义，在适当的位置用适当的标签）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1、h1~h6 多用于标题&lt;/li&gt;
&lt;li&gt;2、ul 多用于无序列表&lt;/li&gt;
&lt;li&gt;3、ol 多用于有序列表&lt;/li&gt;
&lt;li&gt;4、dl 用于定义数据列表&lt;/li&gt;
&lt;li&gt;5、em、strong 表示强调&lt;/li&gt;
&lt;li&gt;div、span 是 html 标签中最没有语义的&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;有利搜索引擎:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1、a：访问外部链接时要加上 rel=&quot;nofollow&quot;，告诉搜索引擎外部链接无需追踪，加上 title 说明&lt;/li&gt;
&lt;li&gt;2、h1：搜索引擎外认为 h1 最重要，使用 css 调整，网页正文标题用 h1，副标题用 h2，其他不要乱用 h 标签&lt;/li&gt;
&lt;li&gt;3、br 用于文本间的换行，用在 p 内，也可以用 &lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;表示空行&lt;/li&gt;
&lt;li&gt;4、caption：表格标题&lt;/li&gt;
&lt;li&gt;5、img：使用 title、alt 说明&lt;/li&gt;
&lt;li&gt;6、&lt;code&gt;&amp;lt;strong&amp;gt;&amp;lt;em&lt;/code&gt;&amp;gt;表示强调，&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;的权重仅次于&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;,如果只想表示加粗斜体，建议使用&lt;code&gt;&amp;lt;b&amp;gt;&amp;lt;i&amp;gt;&lt;/code&gt;,表示强调则使用&lt;code&gt;&amp;lt;strong&amp;gt;&amp;lt;i&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;7、重要内容 HTML 代码放在最前面（使用 css 改变布局）&lt;/li&gt;
&lt;li&gt;8、重要内容不要用 JS 输出（搜索引擎看不懂 JS）&lt;/li&gt;
&lt;li&gt;9、尽量少使用 iframe 框架（搜索引擎不喜欢）&lt;/li&gt;
&lt;li&gt;10、谨慎使用 display:none（搜索引擎会过滤掉其内容，设置 z-index 代替）&lt;/li&gt;
&lt;li&gt;11、精简代码&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;页面结构：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;结构布局优化：用扁平化结构（层次结构超过三层小蜘蛛就不愿意爬了）&lt;/li&gt;
&lt;li&gt;控制首页链接数量（中小网站100以内，页面导航、底部导航、锚文字链接等）&lt;/li&gt;
&lt;li&gt;扁平化的目录层次（小蜘蛛跳转3次可以到达网站内任何一个内页，网站的设计主页、栏目、内容页，不要用纵线性的结构）&lt;/li&gt;
&lt;li&gt;导航seo优化（头部、底部、内容部分，主导航、副导航、分类导航，尽量用文字，面包屑导航，在每个网站上留下面包屑，使用户可以了解网站组织形式，放于正文的左上方）&lt;/li&gt;
&lt;li&gt;内容页面的布局细节
&lt;ul&gt;&lt;li&gt;左面正文，右面热门文章、相关文章，下面是版权信息及链接，栏目排布： 首页123456789下拉选择最赞）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;网站的加载速度会影响小蜘蛛的爬行，页面最好不要超过100k&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/rfIEBlc.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;

&lt;h2 id=&quot;什么是xss&quot;&gt;什么是XSS？&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;跨站脚本（cross site script）为了避免与样式css混淆，所以简称为XSS。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;XSS是一种经常出现在web应用中的计算机安全漏洞&lt;/strong&gt;，也是web中最主流的攻击方式。那么什么是XSS呢？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;XSS是指恶意攻击者利用&lt;strong&gt;网站没有对用户提交数据进行转义处理或者过滤不足的缺点，进而添加一些代码，嵌入到web页面中去。使别的用户访问都会执行相应的嵌入代码。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;XSS跟SQL注入是类似的，它攻击有两种方式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;反射型&lt;/li&gt;
&lt;li&gt;存储型&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/YiQbaaC.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/zVAkX5M.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;XSS攻击的危害是很大的，注入&lt;code&gt;script&lt;/code&gt;可以执行任何的JS代码(意味着可以获取cookie等信息了)，注入&lt;code&gt;style&lt;/code&gt;可以把页面全部弄崩&lt;/p&gt;
&lt;h2 id=&quot;防范xss攻击&quot;&gt;防范XSS攻击&lt;/h2&gt;
&lt;p&gt;最重要的是：&lt;strong&gt;不要相信客户端发送过来的任何数据！&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;评论功能就最容易发生XSS攻击了&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;防范XSS攻击可简单分成三个步骤：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;编码(对特殊的字符进行编码,&lt;code&gt;&amp;lt;&lt;/code&gt;,&lt;code&gt;'&lt;/code&gt;,&lt;code&gt;&amp;gt;&lt;/code&gt;等特殊字符&lt;/li&gt;
&lt;li&gt;过滤(过滤掉一切可能被调用的属性，标签。比如：onclick,onerror,iframe等等)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NRTpiEW.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/HHbqyWo.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/j8TZU1q.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/E5kKtCZ.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;

&lt;h2 id=&quot;什么是csrf&quot;&gt;什么是CSRF&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;CSRF的全名为Cross-site request forgery，它的中文名为 跨站请求伪造（伪造跨站请求【这样读顺口一点】）&lt;br/&gt;CSRF是一种夹持用户在已经登陆的web应用程序上执行非本意的操作的攻击方式。&lt;strong&gt;相比于XSS，CSRF是利用了系统对页面浏览器的信任，XSS则利用了系统对用户的信任。&lt;/strong&gt;&lt;br/&gt;CSRF攻击是源于Web的隐式身份验证机制！Web的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来源：&lt;a href=&quot;http://www.cnblogs.com/phpstudy2015-6/p/6771239.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/phpstudy2015-6/p/6771239.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;防御csrf攻击&quot;&gt;防御CSRF攻击&lt;/h2&gt;
&lt;p&gt;抵御CSRF攻击的关键在于：&lt;strong&gt;在请求中放入攻击者所不能伪造的信息，并且该信息不存在于Cookie之中&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么我们在提交表单时添加一个token并验证就行了，很简单&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章，想要获取更多的Java资源的同学，可以&lt;strong&gt;关注微信公众号:Java3y&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 03 Mar 2018 14:04:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8503208.html</dc:identifier>
</item>
<item>
<title>编写React组件的最佳实践 - Mr 布鲁斯</title>
<link>http://www.cnblogs.com/sunshine-anycall/p/8503183.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sunshine-anycall/p/8503183.html</guid>
<description>&lt;p&gt;此文翻译自&lt;a href=&quot;https://engineering.musefind.com/our-best-practices-for-writing-react-components-dec3eb5c3fc8&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;当我刚开始写React的时候，我看过很多写组件的方法。一百篇教程就有一百种写法。虽然React本身已经成熟了，但是如何使用它似乎还没有一个“正确”的方法。所以我（作者）把我们团队这些年来总结的使用React的经验总结在这里。希望这篇文字对你有用，不管你是初学者还是老手。&lt;/p&gt;
&lt;p&gt;开始前：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;我们使用ES6、ES7语法&lt;/li&gt;
&lt;li&gt;如果你不是很清楚展示组件和容器组件的区别，建议您从阅读这篇&lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.kuvqndiqq&quot;&gt;文章&lt;/a&gt;开始&lt;/li&gt;
&lt;li&gt;如果您有任何的建议、疑问都清在评论里留言&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;基于类的组件&quot;&gt;基于类的组件&lt;/h2&gt;
&lt;p&gt;现在开发React组件一般都用的是基于类的组件。下面我们就来一行一样的编写我们的组件：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; observer &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mobx-react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ExpandableForm &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./ExpandableForm'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./styles/ProfileContainer.css'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我很喜欢&lt;a href=&quot;https://medium.freecodecamp.org/a-5-minute-intro-to-styled-components-41f40eb7cd55&quot;&gt;css in javascript&lt;/a&gt;。但是，这个写样式的方法还是太新了。所以我们在每个组件里引入css文件。而且本地引入的import和全局的import会用一个空行来分割。&lt;/p&gt;
&lt;h2 id=&quot;初始化state&quot;&gt;初始化State&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; observer &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mobx-react'&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ExpandableForm &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./ExpandableForm'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./styles/ProfileContainer.css'&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ProfileContainer &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  state &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您可以使用了老方法在&lt;code&gt;constructor&lt;/code&gt;里初始化&lt;code&gt;state&lt;/code&gt;。更多相关可以看&lt;a href=&quot;https://stackoverflow.com/questions/35662932/react-constructor-es6-vs-es7&quot;&gt;这里&lt;/a&gt;。但是我们选择更加清晰的方法。&lt;br/&gt;同时，我们确保在类前面加上了&lt;code&gt;export default&lt;/code&gt;。（译者注：虽然这个在使用了redux的时候不一定对）。&lt;/p&gt;
&lt;h2 id=&quot;proptypes-and-defaultprops&quot;&gt;propTypes and defaultProps&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; observer &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mobx-react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; string&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; object &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'prop-types'&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ExpandableForm &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./ExpandableForm'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./styles/ProfileContainer.css'&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ProfileContainer &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  state &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
 
  &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; propTypes &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isRequired&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
 
  &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; defaultProps &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Your Name'&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;co&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;propTypes&lt;/code&gt;和&lt;code&gt;defaultProps&lt;/code&gt;是静态属性。尽可能在组件类的的前面定义，让其他的开发人员读代码的时候可以立刻注意到。他们可以起到文档的作用。&lt;/p&gt;
&lt;p&gt;如果你使用了React 15.3.0或者更高的版本，那么需要另外引入&lt;code&gt;prop-types&lt;/code&gt;包，而不是使用&lt;code&gt;React.PropTypes&lt;/code&gt;。更多内容移步&lt;a href=&quot;https://github.com/facebook/prop-types&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;你所有的组件都应该有&lt;strong&gt;prop types&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;方法&quot;&gt;方法&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; observer &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mobx-react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; string&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; object &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'prop-types'&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ExpandableForm &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./ExpandableForm'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./styles/ProfileContainer.css'&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ProfileContainer &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  state &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
 
  &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; propTypes &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isRequired&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
 
  &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; defaultProps &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Your Name'&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  handleSubmit &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (e) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;preventDefault&lt;/span&gt;()
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;save&lt;/span&gt;()
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
  handleNameChange &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (e) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;changeName&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
  handleExpand &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (e) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;preventDefault&lt;/span&gt;()
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setState&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;expanded&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;co&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在类组件里，当你把方法传递给子组件的时候，需要确保他们被调用的时候使用的是正确的&lt;strong&gt;this&lt;/strong&gt;。一般都会在传给子组件的时候这么做：&lt;code&gt;this.handleSubmit.bind(this)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用ES6的箭头方法就简单多了。它会自动维护正确的上下文（&lt;code&gt;this&lt;/code&gt;）。&lt;/p&gt;
&lt;h2 id=&quot;给setstate传入一个方法&quot;&gt;给setState传入一个方法&lt;/h2&gt;
&lt;p&gt;在上面的例子里有这么一行：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setState&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;expanded&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;setState&lt;/code&gt;其实是异步的！React为了提高性能，会把多次调用的&lt;code&gt;setState&lt;/code&gt;放在一起调用。所以，调用了&lt;code&gt;setState&lt;/code&gt;之后state不一定会立刻就发生改变。&lt;/p&gt;
&lt;p&gt;所以，调用&lt;code&gt;setState&lt;/code&gt;的时候，你不能依赖于当前的state值。因为i根本不知道它是值会是神马。&lt;/p&gt;
&lt;p&gt;解决方法：给&lt;code&gt;setState&lt;/code&gt;传入一个方法，把调用前的state值作为参数传入这个方法。看看例子：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setState&lt;/span&gt;(prevState &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;prevState&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;expanded&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;感谢&lt;a href=&quot;https://medium.com/@indiesquidge&quot;&gt;Austin Wood&lt;/a&gt;的帮助。&lt;/p&gt;
&lt;h2 id=&quot;拆解组件&quot;&gt;拆解组件&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; observer &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mobx-react'&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; string&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; object &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'prop-types'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ExpandableForm &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./ExpandableForm'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./styles/ProfileContainer.css'&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ProfileContainer &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  state &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
 
  &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; propTypes &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isRequired&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
 
  &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; defaultProps &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Your Name'&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  handleSubmit &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (e) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;preventDefault&lt;/span&gt;()
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;save&lt;/span&gt;()
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
  handleNameChange &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (e) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;changeName&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
  handleExpand &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (e) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;preventDefault&lt;/span&gt;()
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setState&lt;/span&gt;(prevState &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;prevState&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;expanded&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;))
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      model&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      title
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; ( 
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;ExpandableForm 
        onSubmit&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;handleSubmit&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; 
        expanded&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; 
        onExpand&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;handleExpand&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;op&quot;&gt;&amp;gt;{&lt;/span&gt;title&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;          &amp;lt;input&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            type=&quot;text&quot;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            value={model.name}&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            onChange={this.handleNameChange}&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            placeholder=&quot;Your Name&quot;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      &amp;lt;/ExpandableForm&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    )
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有多行的&lt;code&gt;props&lt;/code&gt;的，每一个prop都应该单独占一行。就如上例一样。要达到这个目标最好的方法是使用一套工具：&lt;code&gt;Prettier&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;装饰器decorator&quot;&gt;装饰器（Decorator）&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;@observer
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ProfileContainer &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你了解某些库，比如&lt;em&gt;mobx&lt;/em&gt;，你就可以使用上例的方式来修饰类组件。装饰器就是把类组件作为一个参数传入了一个方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javascript.info/call-apply-decorators&quot;&gt;装饰器&lt;/a&gt;可以编写更灵活、更有可读性的组件。如果你不想用装饰器，你可以这样：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ProfileContainer &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// Component code&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;observer&lt;/span&gt;(ProfileContainer)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;闭包&quot;&gt;闭包&lt;/h2&gt;
&lt;p&gt;尽量避免在子组件中传入闭包，如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;input
  type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;
  value&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// onChange={(e) =&amp;gt; { model.name = e.target.value }}&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// ^ Not this. Use the below:&lt;/span&gt;
  onChange&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;handleChange&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  placeholder&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Your Name&quot;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果&lt;code&gt;input&lt;/code&gt;是一个React组件的话，这样自动触发它的重绘，不管其他的props是否发生了改变。&lt;/p&gt;
&lt;p&gt;一致性检验是React最消耗资源的部分。不要把额外的工作加到这里。处理上例中的问题最好的方法是传入一个类方法，这样还会更加易读，更容易调试。如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; observer &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mobx-react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; string&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; object &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'prop-types'&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// Separate local imports from dependencies&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ExpandableForm &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./ExpandableForm'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./styles/ProfileContainer.css'&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// Use decorators if needed&lt;/span&gt;
@observer
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ProfileContainer &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  state &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// Initialize state here (ES7) or in a constructor method (ES6)&lt;/span&gt;
 
  &lt;span class=&quot;co&quot;&gt;// Declare propTypes as static properties as early as possible&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; propTypes &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isRequired&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;co&quot;&gt;// Default props below propTypes&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; defaultProps &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Your Name'&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;co&quot;&gt;// Use fat arrow functions for methods to preserve context (this will thus be the component instance)&lt;/span&gt;
  handleSubmit &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (e) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;preventDefault&lt;/span&gt;()
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;save&lt;/span&gt;()
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
  handleNameChange &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (e) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
  handleExpand &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (e) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;preventDefault&lt;/span&gt;()
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setState&lt;/span&gt;(prevState &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;prevState&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;expanded&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;))
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// Destructure props for readability&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      model&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      title
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; ( 
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;ExpandableForm 
        onSubmit&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;handleSubmit&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; 
        expanded&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; 
        onExpand&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;handleExpand&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// Newline props if there are more than two&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;op&quot;&gt;&amp;gt;{&lt;/span&gt;title&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;          &amp;lt;input&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            type=&quot;text&quot;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            value={model.name}&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            // onChange={&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; { model.name = e.target.value }}&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            // Avoid creating new closures in the render method- use methods like below&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            onChange={this.handleNameChange}&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            placeholder=&quot;Your Name&quot;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      &amp;lt;/ExpandableForm&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    )
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;方法组件&quot;&gt;方法组件&lt;/h2&gt;
&lt;p&gt;这类组件没有state没有props，也没有方法。它们是纯组件，包含了最少的引起变化的内容。经常使用它们。&lt;/p&gt;
&lt;h3 id=&quot;proptypes&quot;&gt;propTypes&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; observer &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mobx-react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; func&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; bool &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'prop-types'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./styles/Form.css'&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;ExpandableForm&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;onSubmit&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;func&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isRequired&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; bool
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// Component declaration&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们在组件的声明之前就定义了&lt;code&gt;propTypes&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;分解props和defaultprops&quot;&gt;分解Props和defaultProps&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; observer &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mobx-react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; func&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; bool &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'prop-types'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./styles/Form.css'&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;ExpandableForm&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;onSubmit&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;func&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isRequired&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; bool&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;onExpand&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;func&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isRequired&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ExpandableForm&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; formStyle &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;expanded&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'auto'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; : &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;form style&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;formStyle&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; onSubmit&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onSubmit&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onExpand&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;Expand&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;/form&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
  )
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们的组件是一个方法。它的参数就是&lt;code&gt;props&lt;/code&gt;。我们可以这样扩展这个组件：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; observer &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mobx-react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; func&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; bool &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'prop-types'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./styles/Form.css'&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;ExpandableForm&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;onSubmit&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;func&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isRequired&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; bool&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;onExpand&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;func&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isRequired&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ExpandableForm&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; onExpand&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; expanded &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; children&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; onSubmit &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; formStyle &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; expanded &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'auto'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; : &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;form style&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;formStyle&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; onSubmit&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;onSubmit&lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;onExpand&lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;Expand&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;/form&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
  )
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们也可以使用默认参数来扮演默认props的角色，这样有很好的可读性。如果&lt;code&gt;expanded&lt;/code&gt;没有定义，那么我们就把它设置为&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但是，尽量避免使用如下的例子：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; ExpandableForm &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; onExpand&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; expanded&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; children &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看起来很现代，但是这个方法是未命名的。&lt;/p&gt;
&lt;p&gt;如果你的Babel配置正确，未命名的方法并不会是什么大问题。但是，如果Babel有问题的话，那么这个组件里的任何错误都显示为发生在 &amp;lt;&amp;gt;里的，这调试起来就非常麻烦了。&lt;/p&gt;
&lt;p&gt;匿名方法也会引起Jest其他的问题。由于会引起各种难以理解的问题，而且也没有什么实际的好处。我们推荐使用&lt;code&gt;function&lt;/code&gt;，少使用&lt;code&gt;const&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;装饰方法组件&quot;&gt;装饰方法组件&lt;/h3&gt;
&lt;p&gt;由于方法组件没法使用装饰器，只能把它作为参数传入别的方法里。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; observer &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mobx-react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; func&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; bool &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'prop-types'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./styles/Form.css'&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;ExpandableForm&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;onSubmit&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;func&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isRequired&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; bool&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;onExpand&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;func&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isRequired&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ExpandableForm&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; onExpand&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; expanded &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; children&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; onSubmit &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; formStyle &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; expanded &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'auto'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; : &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;form style&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;formStyle&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; onSubmit&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;onSubmit&lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;onExpand&lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;Expand&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;/form&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
  )
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;observer&lt;/span&gt;(ExpandableForm)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只能这样处理：&lt;code&gt;export default observer(ExpandableForm)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这就是组件的全部代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; observer &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mobx-react'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; func&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; bool &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'prop-types'&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// Separate local imports from dependencies&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./styles/Form.css'&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// Declare propTypes here, before the component (taking advantage of JS function hoisting)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// You want these to be as visible as possible&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;ExpandableForm&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;onSubmit&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;func&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isRequired&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; bool&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;onExpand&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;func&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isRequired&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// Destructure props like so, and use default arguments as a way of setting defaultProps&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ExpandableForm&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; onExpand&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; expanded &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; children&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; onSubmit &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; formStyle &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; expanded &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'auto'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; : &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;form style&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;formStyle&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; onSubmit&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;onSubmit&lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;onExpand&lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;Expand&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;/form&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
  )
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// Wrap the component instead of decorating it&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;observer&lt;/span&gt;(ExpandableForm)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;条件判断&quot;&gt;条件判断&lt;/h2&gt;
&lt;p&gt;某些情况下，你会做很多的条件判断：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div id&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;lb-footer&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;downloadMode&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; currentImage &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;currentImage&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;currentImage&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;blogText&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;currentImage&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;submitted&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;currentImage&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;posted&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;Please contact us &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; content usage&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    : currentImage &amp;amp;&amp;amp; currentImage.selected&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; &amp;lt;button onClick={props.onSelectImage} className=&quot;btn btn-selected&quot;&amp;gt;Deselect&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
      : currentImage &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;currentImage&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;submitted&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button className&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;btn btn-submitted&quot;&lt;/span&gt; disabled&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;Submitted&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        : currentImage &amp;amp;&amp;amp; currentImage.posted&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; &amp;lt;button className=&quot;btn btn-posted&quot; disabled&amp;gt;Posted&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
          : &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onSelectImage&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; className&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;btn btn-unselected&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;Select post&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/div&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这么多层的条件判断可不是什么好现象。&lt;/p&gt;
&lt;p&gt;有第三方库&lt;a href=&quot;https://github.com/AlexGilleran/jsx-control-statements&quot;&gt;JSX-Control Statements&lt;/a&gt;可以解决这个问题。但是与其增加一个依赖，还不如这样来解决：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div id&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;lb-footer&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    (() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(downloadMode &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;videoSrc) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(isApproved &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; isPosted) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;Right click image and select &lt;span class=&quot;st&quot;&gt;&quot;Save Image As..&quot;&lt;/span&gt; to download&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        } else {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;          return &amp;lt;p&amp;gt;Please contact us for content usage&amp;lt;/p&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;co&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)()
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用大括号包起来的&lt;a href=&quot;https://stackoverflow.com/questions/8228281/what-is-the-function-construct-in-javascript&quot;&gt;IIFE&lt;/a&gt;，然后把你的&lt;code&gt;if&lt;/code&gt;表达式都放进去。返回你要返回的组件。&lt;/p&gt;
&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;再次，希望本文对你有用。如果你有什么好的意见或者建议的话请写在下面的评论里。谢谢！&lt;/p&gt;
</description>
<pubDate>Sat, 03 Mar 2018 13:58:00 +0000</pubDate>
<dc:creator>Mr 布鲁斯</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sunshine-anycall/p/8503183.html</dc:identifier>
</item>
<item>
<title>3.数码相框-通过freetype库实现矢量显示 - LifeYx</title>
<link>http://www.cnblogs.com/lifexy/p/8503070.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lifexy/p/8503070.html</guid>
<description>&lt;p align=&quot;left&quot;&gt;本章主要内容如下:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;1)&lt;/strong&gt;&lt;/span&gt;矢量字体原理&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;2)&lt;/strong&gt;&lt;/span&gt;使用freetype库实现矢量字体显示&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;&lt;span&gt;1. 矢量字体原理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;   将汉字的笔划边缘用直线段描述成封闭的曲线，并将线段各端点的坐标经压缩存储,&lt;strong&gt;&lt;span&gt;如下图所示:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;       &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201803/1182576-20180303202729970-1586329154.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;                                       &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;由于每个汉字的笔划不一样，从而每个汉字数据长度也不同,所以只能采用索引的方法。因而每种矢量字库都是&lt;strong&gt;&lt;span&gt;由两部分组成&lt;/span&gt;&lt;/strong&gt;，一部分是&lt;span&gt;汉字的索引信息&lt;/span&gt;,一部分是&lt;span&gt;汉字的字形(glyph)数据.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当显示文字时,便提取出各端点,并通过贝塞尔曲线来连接各个坐标,最后填充封闭空间.&lt;/p&gt;
&lt;p&gt;接下来便使用freetype库制作矢量字体&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2. freetype-2.4.10库&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;freetype库是一个开源的字体引擎,支持多种字符集编码&lt;span&gt;(utf-8等)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;freetype库下载: &lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://sourceforge.net/projects/freetype/files/freetype2/2.4.10/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://sourceforge.net/projects/freetype/files/freetype2/2.4.10/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;freetyoe英文参考文档下载:&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://sourceforge.net/projects/freetype/files/freetype-docs/2.4.10/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://sourceforge.net/projects/freetype/files/freetype-docs/2.4.10/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; FreeType 中文使用参考:&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;http://wenku.baidu.com/view/2d24be10cc7931b765ce155b.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://wenku.baidu.com/view/2d24be10cc7931b765ce155b.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://wenku.baidu.com/view/e7149f6748d7c1c708a14574.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://wenku.baidu.com/view/e7149f6748d7c1c708a14574.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.1如何来使用freetype&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1)包含头文件:&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
#include &amp;lt;ft2build.h&amp;gt;&lt;span&gt;
#include FT_FREETYPE_H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2) 初始化库:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;strong&gt;&lt;span&gt;FT_Init_FreeType()&lt;/span&gt;&lt;/strong&gt;函数初始化一个FT_Library类型的变量,例如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
FT_LIBRARY library;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;库的句柄&lt;/span&gt;
&lt;span&gt;
error &lt;/span&gt;= FT_Init_FreeType( &amp;amp;&lt;span&gt;library );   
if ( error )
{
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化失败&lt;/span&gt;&lt;span&gt;
}

... ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3)加载face对象:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;span&gt;&lt;strong&gt;FT_NEW_Face()&lt;/strong&gt;&lt;/span&gt;打开一个字体文件，然后提取该文件的一个FT_Face类型的face变量,&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
FT_LIBRARY library;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;库的句柄&lt;/span&gt;
&lt;span&gt;
FT_Face face;                        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; face对象的句柄 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;


error &lt;/span&gt;= FT_Init_FreeType ( &amp;amp;&lt;span&gt;library );   
if ( error )
{... ...}

... ...

error &lt;/span&gt;=&lt;span&gt; FT_New_Face( library,
&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/usr/share/fonts/truetype/arial.ttf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,    //字形文件
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&amp;amp;face );   
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4)设置字体大小(参考freetype-2.4.10/docs/reference/ft2-base_interface.html):&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;方法1:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;FT_Set_Char_Size( FT_Face     face,

                  FT_F26Dot6  char_width,  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;字符宽度,单位为1/64点&lt;/span&gt;
&lt;span&gt;
                  FT_F26Dot6  char_height, &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;字符高度,单位为1/64点&lt;/span&gt;
&lt;span&gt;
                  FT_UInt     horz_resolution, &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;水平分辨率&lt;/span&gt;
&lt;span&gt;
                  FT_UInt     vert_resolution ); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;垂直分辨率&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符宽度和高度以1/64点为单位表示。点是物理上的距离,一个点代表1/72英寸(2.54cm)&lt;/p&gt;
&lt;p&gt;分辨率以dpi(dots per inch)为单位表示,表示一个英寸有多少个像素&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
error = FT_Set_Char_Size( face, &lt;span&gt;50&lt;/span&gt; * &lt;span&gt;64&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;,&lt;span&gt;100&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt; );    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;0表示与另一个尺寸值相等。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得出:&lt;/p&gt;
&lt;p&gt;字符物理大小为: 50*64* (1/64) * (1/72)英寸&lt;/p&gt;
&lt;p&gt;字符的像素为: 50*64* (1/64) * (1/72)*100&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;方法2:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;FT_Set_Pixel_Sizes(   FT_Face  face,
                      FT_UInt  pixel_width,     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;像素宽度&lt;/span&gt;
                      FT_UInt  pixel_height );  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;像素高低&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如: &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
error = FT_Set_Pixel_Sizes( face, &lt;span&gt;0&lt;/span&gt;,&lt;span&gt;16&lt;/span&gt;);      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;把字符像素设置为16*16像素, 0表示与另一个尺寸值相等。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;5)设置字体位置,以及旋转度数:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
error =&lt;span&gt; FT_Set_Transform(

face, &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 目标face对象 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&amp;amp;matrix, &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 指向2x2矩阵的指针,写0表示不旋转,使用正矩形 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&amp;amp;delta ); &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;字体坐标位置(用的笛卡尔坐标),以1/64像素为单位表示&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于我们&lt;strong&gt;&lt;span&gt;LCD的坐标&lt;/span&gt;&lt;/strong&gt;原点是位于左上方&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;笛卡尔坐标:&lt;/strong&gt;&lt;/span&gt;表示坐标原点位于左下方(与LCD的y轴相反)&lt;/p&gt;
&lt;p&gt;所以转换之前填写坐标时,需要转换一下y轴值(总高度-y)&lt;/p&gt;
&lt;p&gt;转换成功后还需要转换回来(总高度-y)&lt;/p&gt;

&lt;p&gt;比如,旋转25,并在(300,200)处显示:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
FT_Vector     pen;                    &lt;span&gt;/*&lt;/span&gt;   &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
FT_Matrix     matrix;                 &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; transformation matrix &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;


angle         &lt;/span&gt;= ( &lt;span&gt;25.0&lt;/span&gt; / &lt;span&gt;360&lt;/span&gt; ) * &lt;span&gt;3.14159&lt;/span&gt; * &lt;span&gt;2&lt;/span&gt;;      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; use 25 degrees  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将该文字坐标转为笛卡尔坐标&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  pen.x &lt;/span&gt;= &lt;span&gt;300&lt;/span&gt; * &lt;span&gt;64&lt;/span&gt;&lt;span&gt;;                                         
  pen.y &lt;/span&gt;= ( target_height - &lt;span&gt;200&lt;/span&gt; ) * &lt;span&gt;64&lt;/span&gt;;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; target_height: LCD总高度


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置 矩形参数&lt;/span&gt;&lt;span&gt;
  matrix.xx &lt;/span&gt;= (FT_Fixed)( cos( angle ) * &lt;span&gt;0x10000L&lt;/span&gt;&lt;span&gt; );
  matrix.xy &lt;/span&gt;= (FT_Fixed)(-sin( angle ) * &lt;span&gt;0x10000L&lt;/span&gt;&lt;span&gt; );
  matrix.yx &lt;/span&gt;= (FT_Fixed)( sin( angle ) * &lt;span&gt;0x10000L&lt;/span&gt;&lt;span&gt; );
  matrix.yy &lt;/span&gt;= (FT_Fixed)( cos( angle ) * &lt;span&gt;0x10000L&lt;/span&gt;&lt;span&gt; );

FT_Set_Transform( face, &lt;/span&gt;&amp;amp;matrix, &amp;amp;pen );
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;6)加载字形图像&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;a.获取编码的索引&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;span&gt;FT_Get_Char_Inde()&lt;/span&gt;函数将Unicode字符编码转换为一个字形(glyph)索引,例如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
glyph_index = FT_Get_Char_Index( face, charcode );        
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;若glyph_index为NULL,表示没找到字形(glyph)索引&lt;/p&gt;
&lt;p&gt;如果使用其它字符编码,则通过&lt;span&gt;FT_Select_CharMap()&lt;/span&gt;来获取,例如获取big5编码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
error =&lt;span&gt; FT_Select_CharMap(
face,                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 目标face对象 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
FT_ENCODING_BIG5 ); &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; big5编码 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;FT_ENCODING_BIG5枚举定义在FT_FREETYPE_H中&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;b.通过索引,从face中加载字形&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;获得字形索引后,接下来便根据字形索引,来将字形图像存储到字形槽(glyph slot)中.&lt;/p&gt;
&lt;p&gt;字形槽:每次只能存储一个字形图像,每个face对象都有一个字形槽,位于face-&amp;gt;glyph&lt;/p&gt;
&lt;p&gt;通过&lt;span&gt;FT_Load_Glyph()&lt;/span&gt;来加载一个字形图像到字形槽:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
error =&lt;span&gt; FT_Load_Glyph(

face, &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; face对象的句柄 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

glyph_index, &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 字形索引 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

load_flags ); &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 装载标志，一般填FT_LOAD_DEFAULT&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;并更新face-&amp;gt;glyph下的其它成员,比如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    FT_Int            bitmap_left;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;该字形图像的最左边的X值&lt;/span&gt;&lt;span&gt;
    FT_Int            bitmap_top;            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;该字形图像的最上边的Y值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;c.转为位图&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;span&gt;FT_Render_Glyph()&lt;/span&gt;函数,将字形槽的字形图像转为位图,并存到 face-&amp;gt;glyph-&amp;gt;bitmap-&amp;gt;buffer[]里&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
error = FT_Render_Glyph( face-&amp;gt;glyph, &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 字形槽 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

render_mode ); &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 渲染模式 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;并更新face-&amp;gt;glyph-&amp;gt;bitmap下的其它成员,比如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt;             rows;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;该位图总高度,有多少行&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt;             width;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;改位图总宽度,有多少列&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;d.&lt;/span&gt;也可以直接使用&lt;span&gt;FT_Load_Char()&lt;/span&gt;&lt;/strong&gt;来&lt;span&gt;&lt;strong&gt;代替&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;FT_Get_Char_Index()&lt;/span&gt;、&lt;span&gt;FT_Get_Load_Glyph()&lt;/span&gt;和&lt;span&gt;FT_Render_Glyph().&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;例如: &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
error = FT_Load_Char( face, charcode, FT_LOAD_RENDER );
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中&lt;span&gt;FT_LOAD_RENDER&lt;/span&gt;:表示直接将图像转为位图,所以不需要使用FT_Render_Glyph()函数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2参考example1.c&lt;/strong&gt;&lt;strong&gt;例程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;example1.c位于freetype-doc-2.4.10.tar.bz2\freetype-2.4.10\docs\tutorial下&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.在PC&lt;/strong&gt;&lt;strong&gt;虚拟机里编译例程:example1.c&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1安装freetype到/usr/local/里(拿给PC用)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
tar -xjf freetype-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt;&lt;span&gt;.tar.bz2

mv freetype&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt;   freetype-&lt;span&gt;2.4&lt;/span&gt;&lt;span&gt;.10_pc

cd freetype&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.10_pc/&lt;span&gt;

.&lt;/span&gt;/configure                                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置&lt;/span&gt;
&lt;span&gt;
make                                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;编译&lt;/span&gt;
&lt;span&gt;
sudo make install                           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接将库安装到根目录/usr/local/里,所以需要加sudo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于example1.c的打印范围是&lt;span&gt;640*480&lt;/span&gt;,而我们secureCRT没有那么大,所以&lt;span&gt;修改example1.c.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;将:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#define&lt;/span&gt; WIDTH   640
&lt;span&gt;#define&lt;/span&gt; HEIGHT  480
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改为:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#define&lt;/span&gt; WIDTH   80
&lt;span&gt;#define&lt;/span&gt; HEIGHT  80
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后将&lt;span&gt;&lt;strong&gt;119行处&lt;/strong&gt;&lt;/span&gt;的文字显示坐标:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
  pen.x = &lt;span&gt;300&lt;/span&gt; * &lt;span&gt;64&lt;/span&gt;&lt;span&gt;;
  pen.y &lt;/span&gt;= ( target_height - &lt;span&gt;200&lt;/span&gt; ) * &lt;span&gt;64&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改为:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
  pen.x = &lt;span&gt;0&lt;/span&gt; * &lt;span&gt;64&lt;/span&gt;;                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在坐标(0,40)处显示&lt;/span&gt;&lt;span&gt;
  pen.y &lt;/span&gt;= ( target_height - &lt;span&gt;40&lt;/span&gt; ) * &lt;span&gt;64&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2 编译运行&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
gcc -o example1 example1.c
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;编译出错:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201803/1182576-20180303202950089-326315382.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过ls,发现又有这个文件:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201803/1182576-20180303203016581-1817935163.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;所以通过&lt;strong&gt;&lt;span&gt;-I&lt;/span&gt;&lt;/strong&gt;,直接指定头文件目录:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
gcc -o example1 example1.c  -I /usr/local/include/freetype2/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;编译再次出错:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201803/1182576-20180303203011458-498145629.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现这些出错的都是函数,其中FT开头的是freetype库的函数,cos等都是数学库的函数,&lt;/p&gt;
&lt;p&gt;freetype库的文件名是 &lt;strong&gt;&lt;span&gt;libfreetype.so&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数学库的文件名是&lt;span&gt;&lt;strong&gt;libm.so&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;所以编译时,加上-l,指定库文件:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
gcc -o example1 example1.c  -I /usr/local/include/freetype2/   -lfreetype  -lm
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.3 运行example1&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;将C:\Windows\Fonts下的&lt;span&gt;simsun.ttc(宋体)&lt;/span&gt;字体文件拷到虚拟机里,输入&lt;strong&gt;&lt;span&gt;./example1   simsun.ttc  agf&lt;/span&gt;&lt;/strong&gt;,发现是斜的:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201803/1182576-20180303203025863-1787257379.png&quot; alt=&quot;&quot; width=&quot;382&quot; height=&quot;310&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是因为example1.c里通过&lt;span&gt;FT_Set_Transform()&lt;/span&gt;设置了字体旋转&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.4 继续修改example1.c&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;关闭字体旋转,将&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
FT_Set_Transform( face, &amp;amp;matrix, &amp;amp;pen );
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
FT_Set_Transform( face, &lt;span&gt;0&lt;/span&gt;, &amp;amp;pen );
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;修改字体大小,将&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
error = FT_Set_Char_Size( face, &lt;span&gt;50&lt;/span&gt; * &lt;span&gt;64&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt; );
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改为:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
error = FT_Set_Pixel_Sizes( face, &lt;span&gt;24&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt; );             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;24*24像素&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;编译运行:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201803/1182576-20180303203040490-585365147.png&quot; alt=&quot;&quot; width=&quot;218&quot; height=&quot;223&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.5 显示汉字&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果用char存储汉字英文等,则还需要判断数据类型,而wchar_t刚好可以放一个unicode字符。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;/span&gt;wchar_t在windows占&lt;span&gt;&lt;strong&gt;2byte&lt;/strong&gt;&lt;/span&gt;,在&lt;em&gt;linux&lt;/em&gt;占&lt;span&gt;&lt;strong&gt;4bytes&lt;/strong&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;宽字符:&lt;span&gt;&lt;strong&gt;wchar_t&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;头文件: &lt;span&gt;&lt;strong&gt;#include&amp;lt;wchar.h&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;span&gt;&lt;strong&gt;wcslen()&lt;/strong&gt;&lt;/span&gt;判断wchar_t数组大小&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;修改example1.c&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;...
#include&lt;/span&gt;&amp;lt;wchar.h&amp;gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加此行&lt;/span&gt;
&lt;span&gt;
...
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; main( &lt;span&gt;int&lt;/span&gt; argc,&lt;span&gt;char&lt;/span&gt;**&lt;span&gt;  argv )
{
  ... ...
  wchar_t  &lt;/span&gt;*chinese_str=L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;韦东山g&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加此行&lt;/span&gt;
&lt;span&gt;
  ... ...
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( n = &lt;span&gt;0&lt;/span&gt;; n &amp;lt;wcslen(chinese_str); n++ )  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改此行&lt;/span&gt;&lt;span&gt;
{
FT_Set_Transform( face, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &amp;amp;pen );     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;字体转换&lt;/span&gt;

 

    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; load glyph image into the slot (erase previous one) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
error &lt;/span&gt;= FT_Load_Char( face, chinese_str[n], FT_LOAD_RENDER );    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改此行&lt;/span&gt;
&lt;span&gt;... ...

} 
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}            &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过另存为文件,来看看文件本身是什么编码格式&lt;/p&gt;
&lt;p&gt;如下图所示,看到是ANSI编码, 对于中文PC,ANSI编码对应的是GBK编码:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201803/1182576-20180303203056708-1812767801.png&quot; alt=&quot;&quot; width=&quot;495&quot; height=&quot;139&quot;/&gt;&lt;/p&gt;
&lt;p&gt;linux默认是utf-8编码,所以编译时,需要指定字符集:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
gcc -o example1 example1.c  -I /usr/local/include/freetype2/   -lfreetype  -lm -finput-charset=GBK  -fexec-charset=utf-&lt;span&gt;8&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; -finput-charset:告诉编译器,文件里的字符是GBK格式
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;-fexec-charset:告诉编译器,需要先将里面的内容转换为utf-8格式后,再来编译&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;运行代码:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201803/1182576-20180303203111147-403146610.png&quot; alt=&quot;&quot; width=&quot;314&quot; height=&quot;217&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;添加坐标打印信息:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201803/1182576-20180303203121790-101166773.png&quot; alt=&quot;&quot; width=&quot;256&quot; height=&quot;206&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201803/1182576-20180303203133837-221365029.png&quot; alt=&quot;&quot; width=&quot;434&quot; height=&quot;260&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现,我们打印坐标是在(40,0),为什么文字坐标还会超过原点?,参考以下图所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201803/1182576-20180303203202025-499944894.png&quot; alt=&quot;&quot; width=&quot;378&quot; height=&quot;262&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;advance:&lt;/strong&gt;&lt;/span&gt; 位于&lt;span&gt;face-&amp;gt;glyph-&amp;gt; advance&lt;/span&gt;,用来存放每个文字之间的间隔信息,每当加载一个新的图像时,系统便会更新该数据.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.6 获取位图文字的信息&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当我们每次将新的字形图像(face-&amp;gt;glyph)转为位图后,而存放的前一个字形图像就会被删除.&lt;/p&gt;
&lt;p&gt;当有时候,有可能需要提取字形图像的坐标,&lt;span&gt;&lt;strong&gt;该怎么做?&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1)首先添加头文件:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
#include FT_GLYPH_H
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2)&lt;/strong&gt;&lt;/span&gt;通过&lt;span&gt;FT_Get_Glyph()&lt;/span&gt;将一个字形图像(face-&amp;gt;glyph)存到FT_Glyph类型的变量里,例如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
FT_Glyph  glyph;    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; a handle to the glyph image &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
...

  error &lt;/span&gt;=&lt;span&gt; FT_Load_Glyph( face, glyph_index, FT_LOAD_NORMAL );
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过字符编码,获取字形图像存到face-&amp;gt;glyph里,并转为位图存到face-&amp;gt;glyph-&amp;gt;bitmap-&amp;gt;buffer[]里&lt;/span&gt;

  &lt;span&gt;if&lt;/span&gt;&lt;span&gt; ( error ) { ... }

  error &lt;/span&gt;= FT_Get_Glyph( face-&amp;gt;glyph, &amp;amp;glyph );         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将字形图像(face-&amp;gt;glyph)存到glyph里&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; ( error ) { ... }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3)&lt;/strong&gt;&lt;/span&gt; 通过&lt;span&gt;FT_Glyph_Get_CBox()&lt;/span&gt;获取文字的xMin, xMax, yMin, yMax坐标信息&lt;/p&gt;
&lt;p&gt;参考: /freetype-2.4.10/docs/reference/ft2-index.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
FT_Glyph_Get_CBox( FT_Glyph  glyph,                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;该值通过FT_Get_Glyph()来获取&lt;/span&gt;&lt;span&gt;
                     FT_UInt   bbox_mode,        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模式,填入FT_GLYPH_BBOX_TRUNCATE即可&lt;/span&gt;&lt;span&gt;
                     FT_BBox  &lt;/span&gt;*acbox );        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用来存放获取到的xMin, xMax, yMin, yMax信息&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中&lt;span&gt;FT_GLYPH_BBOX_TRUNCATE&lt;/span&gt;表示:获取的坐标信息是像素坐标,而不是点坐标&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;修改example1.c,使它能打印每个汉字的坐标信息:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
#include FT_GLYPH_H      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加此行&lt;/span&gt;&lt;span&gt;
... ...

&lt;/span&gt;&lt;span&gt;int &lt;/span&gt;&lt;span&gt;main( &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;     argc, &lt;span&gt;char&lt;/span&gt;**&lt;span&gt;  argv )
{
  FT_Glyph  glyph;
  FT_BBox   acbox;
... ...

&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( n = &lt;span&gt;0&lt;/span&gt;; n &amp;lt; wcslen(chinese_str); n++&lt;span&gt; )
{ 
 ... ...

error &lt;/span&gt;=&lt;span&gt; FT_Load_Char( face,chinese_str[n], FT_LOAD_RENDER );
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ( error )
      &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; ignore errors &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

error &lt;/span&gt;= FT_Get_Glyph( face-&amp;gt;glyph, &amp;amp;glyph );                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加此行&lt;/span&gt;&lt;span&gt;
FT_Glyph_Get_CBox(  glyph,FT_GLYPH_BBOX_TRUNCATE,&lt;/span&gt;&amp;amp;acbox );     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加此行&lt;/span&gt;&lt;span&gt;
printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0x%x:xMin=%ld,xMax=%ld,yMin=%ld,yMax=%ld\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,chinese_str[n],acbox.xMin,acbox.xMax,acbox.yMin,acbox.yMax);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加此行&lt;p&gt;... ...&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译运行:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201803/1182576-20180303203227295-1336054549.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;表示韦字(97e6)的X坐标在0~23,y坐标在37~60,是个24*24字体.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.在LCD上显示矢量文字&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;安装freetype到交叉编译目录里&lt;span&gt;(供arm-linux-gcc编译)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.1首先查看,需要安装到哪个lib和include目录&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1)&lt;/span&gt;通过&lt;span&gt;$PATH&lt;/span&gt;找到arm-linu-gcc交叉编译位于:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
/work/tools/arm-linux-gcc-&lt;span&gt;4.3&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;/usr/local/arm/&lt;span&gt;4.3&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;/bin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后进入.../arm/4.3.2/目录,通过&lt;span&gt;&lt;strong&gt;find&lt;/strong&gt;&lt;/span&gt;查找stdio.h文件,找到:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201803/1182576-20180303203239901-540926350.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以编译出来的头文件应该放入：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;/work/tools/arm-linux-gcc-4.3.2/usr/local/arm/4.3.2/arm-none-linux-gnueabi/libc/usr/include&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;2)&lt;/span&gt;通过&lt;span&gt;find&lt;/span&gt;查找lib,找到:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201803/1182576-20180303203250702-886664849.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由于ARM9属于&lt;span&gt;ARMv4T架构&lt;/span&gt;，所以编译出来的库文件应该放入：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;/work/tools/arm-linux-gcc-4.3.2/usr/local/arm/4.3.2/arm-none-linux-gnueabi/libc/armv4t/lib&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.2安装&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;参考:freetype-2.4.10/docs/&lt;span&gt;INSTALL.CROSS&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
tar -xjf freetype-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt;&lt;span&gt;.tar.bz2   
mv freetype&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt; freetype-&lt;span&gt;2.4&lt;/span&gt;&lt;span&gt;.10_arm
cd freetype&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;&lt;span&gt;.10_arm
mkdir   tmp                                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建安装的临时目录,后面会拷贝到交叉编译目录里&lt;/span&gt;&lt;span&gt;
.&lt;/span&gt;/configure --host=arm-linux  --prefix=$PWD/tmp  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置交叉编译,安装前缀&lt;/span&gt;&lt;span&gt;
make
make install
 
cd tmp&lt;/span&gt;/&lt;span&gt;

cp  .&lt;/span&gt;/include/*  /work/tools/arm-linux-gcc-&lt;span&gt;4.3&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;/usr/local/arm/&lt;span&gt;4.3&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;/arm-none-linux-gnueabi/libc/usr/include/ -rfd &lt;br/&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将include下的头文件拷贝到交叉编译里去&lt;/span&gt;
&lt;span&gt;
cp lib&lt;/span&gt;/*  /work/tools/arm-linux-gcc-&lt;span&gt;4.3&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;/usr/local/arm/&lt;span&gt;4.3&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;/arm-none-linux-gnueabi/libc/armv4t/lib/  -rfd &lt;br/&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将lib下的库文件拷贝到交叉编译里去&lt;/span&gt;
&lt;span&gt;
cp lib&lt;/span&gt;/ * /work/nfs_root/&lt;span&gt;3&lt;/span&gt;.4_fs_mini_mdev/lib/  -rfd    &lt;br/&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将lib下的库文件拷贝到nfs文件系统去&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为什么不拷贝头文件? 因为编译好了freetype程序后,头文件会被gcc展开存到可执行文件里,所以运行时,只会用到库文件.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.3写代码(参考上章代码和example1.c)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;117&quot;&gt;
&lt;pre&gt;
#include &amp;lt;stdio.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;sys/types.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;sys/stat.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;fcntl.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;unistd.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;sys/mman.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;sys/ioctl.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;linux/fb.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;math.h&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;wchar.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;ft2build.h&amp;gt;&lt;span&gt;
#include FT_FREETYPE_H
#include FT_GLYPH_H

unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;fbmem;
unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;hzkmem;

&lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; fb_var_screeninfo fb_var;
&lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; fb_fix_screeninfo fb_fix;

unsigned &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; screensize;
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; FONTDATAMAX 4096

&lt;span&gt;static&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; fontdata_8x16[FONTDATAMAX] =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ASCII码点阵太长,省略...&lt;/span&gt;
&lt;span&gt;};&lt;br/&gt;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;rgb565&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; pixel_show(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt; y, unsigned &lt;span&gt;int&lt;/span&gt;&lt;span&gt; color)
{
       unsigned &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; red,green,blue;
       &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;(fb_var.bits_per_pixel)        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;rgb   像素&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;32&lt;/span&gt;&lt;span&gt;:
            {
                unsigned &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;  *addr=(unsigned &lt;span&gt;int&lt;/span&gt;  *)fbmem+(fb_var.xres*y+&lt;span&gt;x);
                &lt;/span&gt;*addr=&lt;span&gt;color;   
                 &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;24&lt;/span&gt;&lt;span&gt;:
           {
                unsigned &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;  *addr=(unsigned &lt;span&gt;int&lt;/span&gt;  *)fbmem+(fb_var.xres*y+&lt;span&gt;x);
                &lt;/span&gt;*addr=&lt;span&gt;color;
                 &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
           }
           &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将RGB888 转为RGB565&lt;/span&gt;&lt;span&gt;
           {
                unsigned &lt;/span&gt;&lt;span&gt;short&lt;/span&gt;  *addr=(unsigned &lt;span&gt;short&lt;/span&gt;  *)fbmem+(fb_var.xres*y+&lt;span&gt;x);
                red   &lt;/span&gt;= (color &amp;gt;&amp;gt; &lt;span&gt;16&lt;/span&gt;) &amp;amp; &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;;
                green &lt;/span&gt;= (color &amp;gt;&amp;gt; &lt;span&gt;8&lt;/span&gt;) &amp;amp; &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;;
                blue  &lt;/span&gt;= (color &amp;gt;&amp;gt; &lt;span&gt;0&lt;/span&gt;) &amp;amp; &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;;
                color &lt;/span&gt;= ((red &amp;gt;&amp;gt; &lt;span&gt;3&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;11&lt;/span&gt;) | ((green &amp;gt;&amp;gt; &lt;span&gt;2&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;5&lt;/span&gt;) | (blue &amp;gt;&amp;gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;*addr =&lt;span&gt; color;
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
           }
           &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;8&lt;/span&gt;&lt;span&gt;:
          {
               unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;  *addr=(unsigned &lt;span&gt;char&lt;/span&gt;  *)fbmem+(fb_var.xres*y+&lt;span&gt;x);
               &lt;/span&gt;*addr = (unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;)color;
               &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
          }

          &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
         {
            printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;can't  surport %dbpp \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,fb_var.bits_per_pixel);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
         }
       }
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;显示ascii码&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; lcd_put_char(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt; y, unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;  s)
{
     unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;  *index=(unsigned &lt;span&gt;char&lt;/span&gt; *)&amp;amp;fontdata_8x16[s*&lt;span&gt;16&lt;/span&gt;&lt;span&gt;];
     unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; i,j;
      &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;16&lt;/span&gt;;i++)          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;8*16&lt;/span&gt;
      &lt;span&gt;for&lt;/span&gt;(j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;&lt;span&gt;8&lt;/span&gt;;j++&lt;span&gt;)           
    {
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从高位到低&lt;/span&gt;
         &lt;span&gt;if&lt;/span&gt;(index[i]&amp;amp;(&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(&lt;span&gt;7&lt;/span&gt;-j)))         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;亮&lt;/span&gt;&lt;span&gt;
                pixel_show(x&lt;/span&gt;+j,y+i, &lt;span&gt;0xffffff&lt;/span&gt;);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;白色&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;灭&lt;/span&gt;&lt;span&gt;
                pixel_show(x&lt;/span&gt;+j,y+i, &lt;span&gt;0x0&lt;/span&gt;);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;黑色   &lt;/span&gt;&lt;span&gt;    
    }
}
 
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;显示GBK码&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; lcd_put_chinese(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt; y, unsigned &lt;span&gt;char&lt;/span&gt;  *&lt;span&gt;s)
{
    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; i,j,k;  
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将编码转为区码&lt;/span&gt;&lt;span&gt;
    unsigned &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;   index=(s[&lt;span&gt;0&lt;/span&gt;]-&lt;span&gt;0xA1&lt;/span&gt;)*&lt;span&gt;94&lt;/span&gt;+(s[&lt;span&gt;1&lt;/span&gt;]-&lt;span&gt;0xA1&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转为点阵码(每个汉字32字节)&lt;/span&gt;&lt;span&gt;
    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;  *dots=hzkmem+index*&lt;span&gt;32&lt;/span&gt;&lt;span&gt;;

     &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;16&lt;/span&gt;;i++)          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;16*16&lt;/span&gt;
     &lt;span&gt;for&lt;/span&gt;(k=&lt;span&gt;0&lt;/span&gt;;k&amp;lt;&lt;span&gt;2&lt;/span&gt;;k++&lt;span&gt;)
     &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;&lt;span&gt;8&lt;/span&gt;;j++&lt;span&gt;)
    {
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;((dots[i*&lt;span&gt;2&lt;/span&gt;+k]&amp;gt;&amp;gt;(&lt;span&gt;7&lt;/span&gt;-j))&amp;amp;&lt;span&gt;0X01&lt;/span&gt;)         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;亮&lt;/span&gt;&lt;span&gt;
               pixel_show(x&lt;/span&gt;+&lt;span&gt;8&lt;/span&gt;*k+j,y+i, &lt;span&gt;0xffffff&lt;/span&gt;);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;白色&lt;/span&gt;

          &lt;span&gt;else&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;灭&lt;/span&gt;&lt;span&gt;
                pixel_show(x&lt;/span&gt;+&lt;span&gt;8&lt;/span&gt;*k+j,y+i, &lt;span&gt;0x0&lt;/span&gt;);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;黑色   &lt;/span&gt;&lt;span&gt;
       }
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; lcd_put(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt; y, unsigned &lt;span&gt;char&lt;/span&gt;  *&lt;span&gt;s)
{
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(*&lt;span&gt;s)
   {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(*s&amp;lt;&lt;span&gt;0xA1&lt;/span&gt;)         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ASCII码8*16&lt;/span&gt;&lt;span&gt;
        {
           printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ASCII %x  \r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,*&lt;span&gt;s  );
            lcd_put_char(x,y,&lt;/span&gt;*&lt;span&gt;s);
            s&lt;/span&gt;+=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            x&lt;/span&gt;+=&lt;span&gt;8&lt;/span&gt;&lt;span&gt;;       
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;GB2313   16*16&lt;/span&gt;&lt;span&gt;
        {
           printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GBK %x %x\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,*s, *(s+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;));
           lcd_put_chinese(x,y,s);       
           s&lt;/span&gt;+=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
           x&lt;/span&gt;+=&lt;span&gt;16&lt;/span&gt;&lt;span&gt;; 
        }
   }
}

&lt;/span&gt;&lt;span&gt;void &lt;/span&gt;&lt;span&gt;draw_bitmap( FT_Bitmap&lt;/span&gt;*&lt;span&gt;  bitmap,
             FT_Int      x,
             FT_Int      y)
{
  FT_Int  i, j, p, q;  
  FT_Int  x_max &lt;/span&gt;= x + bitmap-&amp;gt;width;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;x:当前X位置， bitmap-&amp;gt;width:该字宽度&lt;/span&gt;&lt;span&gt;
  FT_Int  y_max &lt;/span&gt;= y + bitmap-&amp;gt;&lt;span&gt;rows;

  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( i = x, p = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; x_max; i++, p++ )   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;i:lcd的x轴&lt;/span&gt;&lt;span&gt;
  {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( j = y, q = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; y_max; j++, q++ )  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;j:lcd的y轴&lt;/span&gt;&lt;span&gt;
    {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( i &amp;lt; &lt;span&gt;0&lt;/span&gt;      || j &amp;lt; &lt;span&gt;0&lt;/span&gt;       ||&lt;span&gt;
           i &lt;/span&gt;&amp;gt;= fb_var.xres || j &amp;gt;=&lt;span&gt; fb_var.yres )
        &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        pixel_show( i, j,  bitmap&lt;/span&gt;-&amp;gt;buffer[q * bitmap-&amp;gt;width +&lt;span&gt; p]);
    }
  }
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; lcd_vector_show(&lt;span&gt;char&lt;/span&gt; *argv,wchar_t  *&lt;span&gt;str)
{
    FT_Library    library;
    FT_Face       face;
    FT_GlyphSlot  slot;
    FT_Vector     pen;                    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; untransformed origin  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; error;
    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;  n,font_size;&lt;br/&gt;error &lt;/span&gt;= FT_Init_FreeType( &amp;amp;library );              &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; initialize library &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(error)
       {
            printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FT_Init_FreeType ERROR\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
        }

     error &lt;/span&gt;= FT_New_Face( library, argv, &lt;span&gt;0&lt;/span&gt;, &amp;amp;face ); &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; create face object &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(error)
        {
            printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FT_New_Face ERROR\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
        }

     slot &lt;/span&gt;= face-&amp;gt;&lt;span&gt;glyph;

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;显示坐标(从LCD中间显示)
      *x=fb_var.xres /2
      *y=fb_var.yres-fb_var.yres/2-16   (减16,是因为笛卡尔坐标以左下方开始计算坐标值的)
      &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
     pen.x &lt;/span&gt;= fb_var.xres /&lt;span&gt;2&lt;/span&gt;* &lt;span&gt;64&lt;/span&gt;&lt;span&gt;;
     pen.y &lt;/span&gt;= ( fb_var.yres/&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;16&lt;/span&gt;) * &lt;span&gt;64&lt;/span&gt;&lt;span&gt;;  

     &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( n = &lt;span&gt;0&lt;/span&gt;; n &amp;lt; wcslen(str); n++&lt;span&gt; )
  {
    font_size&lt;/span&gt;=(n%&lt;span&gt;6&lt;/span&gt;)*&lt;span&gt;4&lt;/span&gt;+&lt;span&gt;20&lt;/span&gt;;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 20*20  24*24  28*28  32*32  36*36 40*40&lt;/span&gt;&lt;span&gt;  

    error &lt;/span&gt;= FT_Set_Pixel_Sizes( face, &lt;span&gt;0&lt;/span&gt;,font_size);     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; set character size &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    FT_Set_Transform( face, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &amp;amp;&lt;span&gt;pen );

    error &lt;/span&gt;=&lt;span&gt; FT_Load_Char( face,str[n], FT_LOAD_RENDER );
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ( error )
         {
         printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FT_Load_Char ERROR\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); 
         &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;; 
        }

        draw_bitmap( &lt;/span&gt;&amp;amp;slot-&amp;gt;&lt;span&gt;bitmap,
                 slot&lt;/span&gt;-&amp;gt;&lt;span&gt;bitmap_left,
                 fb_var.yres&lt;/span&gt;- slot-&amp;gt;&lt;span&gt;bitmap_top );

    pen.x &lt;/span&gt;+= slot-&amp;gt;&lt;span&gt;advance.x;
    pen.y &lt;/span&gt;+= slot-&amp;gt;&lt;span&gt;advance.y;
   }
    FT_Done_Face( face );
     FT_Done_FreeType( library );
}

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc,&lt;span&gt;char&lt;/span&gt; **&lt;span&gt;argv)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; fd_fb,fd_hzk;
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; stat  hzk_start;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;HZK16文件信息&lt;/span&gt;&lt;span&gt;

    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;  s[]=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc 中国chinese&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    wchar_t  &lt;/span&gt;*chinese_str=L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;韦东山g h &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( argc != &lt;span&gt;2&lt;/span&gt;&lt;span&gt; )
    {
      printf (&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;usage: %s  font_file \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, argv[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] );
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }

    fd_hzk&lt;/span&gt;=open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HZK16&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,O_RDONLY);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(fd_hzk&amp;lt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;can't open HZK16 \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(fstat(fd_hzk,&amp;amp;hzk_start)&amp;lt;&lt;span&gt;0&lt;/span&gt;)         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取HZK16文件信息&lt;/span&gt;&lt;span&gt;
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;can't get fstart \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }

    hzkmem &lt;/span&gt;=(unsigned &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;)mmap(NULL,hzk_start.st_size, PROT_READ,MAP_SHARED,
                  fd_hzk, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;);                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;映射HZK16文件&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;hzkmem)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;can't map HZK16 \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }
 
    fd_fb&lt;/span&gt;=open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/dev/fb0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, O_RDWR);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(fd_fb&amp;lt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;can't open /dev/fb0 \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
     }

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ioctl(fd_fb,FBIOGET_VSCREENINFO,&amp;amp;fb_var)&amp;lt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;can't get var \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }

   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ioctl(fd_fb,FBIOGET_FSCREENINFO,&amp;amp;fb_fix)&amp;lt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;can't get fix \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }

    screensize&lt;/span&gt;=fb_var.xres*fb_var.yres*(fb_var.bits_per_pixel/&lt;span&gt;8&lt;/span&gt;);       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;显存大小&lt;/span&gt;&lt;span&gt;

    fbmem &lt;/span&gt;=(unsigned &lt;span&gt;char&lt;/span&gt; *)mmap(NULL,screensize, PROT_READ|&lt;span&gt;PROT_WRITE,MAP_SHARED,
                  fd_fb, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;);                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;映射fb0&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;fbmem)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;can't map /dev/fb0 \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }
    memset(fbmem, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, screensize);            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;清屏黑色&lt;/span&gt;

    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;显示数据&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    lcd_put(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,fb_var.yres/&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,s);     

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;显示矢量文字&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    lcd_vector_show(argv[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;], chinese_str);

    munmap(hzkmem,hzk_start.st_size);
    munmap(fbmem,screensize);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.4编译程序&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;编译报错: &lt;span&gt;56:38: error: freetype/config/ftheader.h: No such file or directory&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;strong&gt;&lt;span&gt;find&lt;/span&gt;&lt;/strong&gt;找到ftheader.h的位置是位于:&lt;strong&gt;&lt;span&gt;../include/freetype2/freetype/config/ftheader.h&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
cd ./arm-none-linux-gnueabi/libc/usr/include/&lt;span&gt;freetype2
mv freetype&lt;/span&gt;/ ../freetype                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将freetype2下的freetype移到include目录下&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;编译:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
arm-linux-gcc -o show_font show_font.c  -lfreetype  -lm -finput-charset=GBK  -fexec-charset=GBK
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行: &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201803/1182576-20180303203313030-1164957907.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; (发现,显示16*16字体时,会乱码)&lt;/p&gt;


&lt;p&gt;&lt;span&gt;未完待续~&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 03 Mar 2018 13:22:00 +0000</pubDate>
<dc:creator>LifeYx</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lifexy/p/8503070.html</dc:identifier>
</item>
<item>
<title>由select引发的思考 - calvin_xhk</title>
<link>http://www.cnblogs.com/xinghuaikang/p/8502983.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xinghuaikang/p/8502983.html</guid>
<description>&lt;p&gt;一、前言&lt;/p&gt;
&lt;p&gt;　　网络编程里一个经典的问题，&lt;span class=&quot;15&quot;&gt;selec,poll和epoll的区别？这个问题刚学习编程时就接触了，当时看了材料很不明白，许多概念和思想没有体会，现在在这个阶段，再重新回头看这个问题，有一种豁然开朗的感觉，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;把目前我所能理解到的记录下来。&lt;/p&gt;
&lt;p&gt;　　参考资料：https://www.cnblogs.com/zingp/p/6863170.html&lt;/p&gt;
&lt;p&gt;　　　　　　　http://blog.csdn.net/a837199685/article/details/45954349&lt;/p&gt;
&lt;p&gt;　　　　　　　https://www.zhihu.com/question/32163005&lt;/p&gt;
&lt;p&gt;　　　　　　　http://shmilyaw-hotmail-com.iteye.com/blog/1896683&lt;/p&gt;
&lt;p&gt;　　　　　　　http://www.cnblogs.com/my_life/articles/3968782.html&lt;/p&gt;
&lt;p&gt;　　　　　　　https://www.cnblogs.com/Anker/p/3265058.html&lt;/p&gt;
&lt;p&gt;二、从操作系统开始谈起&lt;/p&gt;
&lt;p&gt;　　有几个以后一直谈到的概念，有必要先了解，以前就是这个步骤没做，学习的时候一脸懵逼。&lt;/p&gt;

&lt;p&gt;　　1. 用户空间和内核空间&lt;/p&gt;
&lt;p&gt;　　　　目前操作系统寻址模式为虚拟寻址，即处理器产生虚拟地址，之后翻译成物理地址，总线到物理地址处理，处理器拿到处理后的数据&lt;/p&gt;
&lt;p&gt;　　　　操作系统 的核心为内核，可以访问受保护的内存空间，可以访问底层硬件设施，可以做任何事情。所以为了系统的稳定，讲道理内核应该被保护起来。&lt;/p&gt;
&lt;p&gt;　　　　所以虚拟空间被分为内核空间和用户空间。内核空间在最高的1G中，用户空间在剩下的内存中。&lt;/p&gt;
&lt;p&gt;　　　　多数我们所用的进程在用户空间处理，把请求发给内核，在内核空间中操作硬件。&lt;/p&gt;

&lt;p&gt;　　2. 进程上下文切换（进程切换）&lt;/p&gt;
&lt;p&gt;　　　　挂起当前进程，恢复某个进程，大家都知道这是个开销大的过程，那具体有哪些步骤呢？&lt;/p&gt;
&lt;p&gt;　　　　首先，保存当前进程一些必要信息用以日后恢复，如描绘地址空间的页表，进程表，文件表等等。&lt;/p&gt;
&lt;p&gt;　　　　然后切换页全局目录，安装一个新的地址空间&lt;/p&gt;
&lt;p&gt;　　　　最后回复目标进程的上下文&lt;/p&gt;

&lt;p&gt;　　3. 文件描述符（fd）&lt;/p&gt;
&lt;p&gt;　　　　计算机的一个术语，指向文件对象的一个抽象表示。形式上是一个非负整数的索引值，指向文件表中的文件&lt;/p&gt;
&lt;p&gt;　　　　当程序打开或创建一个文件时，内核向进程返回一个文件描述符，代表该文件。&lt;/p&gt;
&lt;p&gt;　　　　通过操作文件描述符，我们实现真实操作文件的目的&lt;/p&gt;

&lt;p&gt;　　4.  进程阻塞（process block）&lt;/p&gt;
&lt;p&gt;　　　　当某个进程等待一个执行结果时，自身阻塞（不干事），直到得到结果，再继续往下，&lt;/p&gt;
&lt;p&gt;　　　　重点是：这个是进程自身行为，且阻塞时不占用cpu资源（cpu也不干事），&lt;/p&gt;
&lt;p&gt;　　　　所以I/O请求最拉低性能，俗话说占着茅坑不拉屎，在计算机里也是存在的，所以人们设计了多线程，多进程等方案来解决这个问题。&lt;/p&gt;

&lt;p&gt;　　5.  I/O过程&lt;/p&gt;
&lt;p&gt;　　　　一般有两种模式，直接 I/O，缓存 I/O（默认），&lt;/p&gt;
&lt;p&gt;　　　　缓存 I/O：&lt;/p&gt;
&lt;p&gt;　　　　　　进程发起系统调用（通知系统我要读写了！）&lt;/p&gt;
&lt;p&gt;　　　　　　写： 进程（数据） -------》 进程缓冲池   ------------》 内核缓冲池 ----------》存储设备&lt;/p&gt;
&lt;p&gt;　　　　　　读： 存储设备（数据）---------》内核缓冲池 ----------》进程缓冲池 ---------》进程&lt;/p&gt;

&lt;p&gt;　　　　直接 I/O（进程缓存池消失了！）：　　　　　　&lt;/p&gt;
&lt;p&gt;　　　　　　进程发起系统调用（通知系统我要读写了！）&lt;/p&gt;
&lt;p&gt;　　　　　　写： 进程（数据）    ------------》 内核缓冲池 ----------》存储设备&lt;/p&gt;
&lt;p&gt;　　　　　　读： 存储设备（数据）---------》内核缓冲池  ---------》进程&lt;/p&gt;
&lt;p&gt;　　　　以上每个步骤之间都是有可能进程会有阻塞（block）发生，根据不同位置的阻塞，就产生了多种网络模式，以适应于不同场景。&lt;/p&gt;


&lt;p&gt;三、 I/O模式（以读为例）&lt;/p&gt;
&lt;p&gt;　　　1.  block I/O &lt;/p&gt;
&lt;p&gt;　　　　过程 ：  &lt;/p&gt;
&lt;p&gt;　　　　　　进程发起系统调用（通知系统我要读写了！）&lt;/p&gt;
&lt;p&gt;　　　　　　读： 存储设备（数据）---------》内核缓冲池  ---------》进程------------》内核通知进程ok，进程解除阻塞&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　 进程阻塞                   进程阻塞&lt;/p&gt;
&lt;p&gt;　　　　解释：&lt;/p&gt;
&lt;p&gt;　　　　　　进程一直等文件准备好，再继续下一步。&lt;/p&gt;
&lt;p&gt;　　　　应用场景：&lt;/p&gt;
&lt;p&gt;　　　　　　以上原理是一个用户连接的情况，很容易理解。&lt;/p&gt;
&lt;p&gt;　　　　　　当一个服务器对接多个客户端的时候：&lt;/p&gt;
&lt;p&gt;　　　　　　初级方案：开多进程（大数据或长时间任务、开销大，更安全）或多线程（很多连接，开销低，数据放一起不太安全）为每一个客户端建立一个连接来处理。&lt;/p&gt;
&lt;p&gt;　　　　　　不足：高并发的情况就体现出开销大，性能低。一个是多线程切换，上下文切换的性能开销，另一个是多线程数量大，会占据大量系统资源&lt;/p&gt;

&lt;p&gt;　　　　　　优化方案：采用线程池（减少创建和销毁线程的频率）或连接池（维持连接的缓存池，尽量重用已有的连接），降低系统开销&lt;/p&gt;
&lt;p&gt;　　　　　　不足：降低开销还是有限度的，在这个时代，高并发大，很容易到达瓶颈。&lt;/p&gt;

&lt;p&gt;　　　2. non-block I/O 　　&lt;/p&gt;
&lt;p&gt;　　　　过程 ：  &lt;/p&gt;
&lt;p&gt;　　　　　　发起系统调用（通知系统我要读写了！）&lt;/p&gt;
&lt;p&gt;　　　　　　读： 存储设备（数据）-------------》内核缓冲池  -----------》进程-------------》内核通知进程ok，进程解除阻塞&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　 非阻塞                              阻塞&lt;/p&gt;
&lt;p&gt;　　　　解释：&lt;/p&gt;
&lt;p&gt;　　　　　　在内核准备数据阶段，立即返回一个error给进程，&lt;/p&gt;
&lt;p&gt;　　　　　　因此进程知道内核还没准备好，&lt;/p&gt;
&lt;p&gt;　　　　　　所以进程再问内核，内核再回error，直到内核准备好，被询问时返回准备好的信号，进程再接触阻塞，&lt;/p&gt;
&lt;p&gt;　　　　应用场景：&lt;/p&gt;
&lt;p&gt;　　　　　　连接量小，没差别，&lt;/p&gt;
&lt;p&gt;　　　　　　当连接数大的时候，这个模式理论上可以用一个线程实现多个连接：&lt;/p&gt;
&lt;p&gt;　　　　　　由于非阻塞，这个线程可以循环去询问所有连接目标有没有准备好，内核都是立马回复，error往下，准备好就交给进程，所以不会浪费时间，&lt;/p&gt;
&lt;p&gt;　　　　　　但是，（凡事都有但是），这个简单的实现方案，效率还是很低的，毕竟从内核空间到用户空间还是block的，而且会极大推高cpu占用率。&lt;/p&gt;
&lt;p&gt;　　　　　　特别是当响应事件（读取或者其他）庞大的时候，执行速度就会很缓慢。&lt;/p&gt;
&lt;p&gt;　　　　　　下面的select等就是基于此想法的发展。&lt;/p&gt;

&lt;p&gt;　　　3. I/O multiplexing&lt;/p&gt;
&lt;p&gt;　　　　目标：低开销，高效率得处理高并发请求&lt;/p&gt;
&lt;p&gt;　　　　方案：select 、poll、epoll 三种实现方案&lt;/p&gt;
&lt;p&gt;　　　　本质：用 select、poll、epoll 去监听所有 socket对象，当socket对象发生变化时，通知用户进程处理。&lt;/p&gt;
&lt;p&gt;　　　　特征：&lt;/p&gt;
&lt;p&gt;　　　　　　　select（最早出现）：多平台支持&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　通过轮询，效率较低&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　处理连接数量有限制，默认1024个，&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　大量用户态和内核态fd的拷贝，性能低，&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　返回的是所有句柄列表，没有告诉是哪一个发生变化，用户进程还得再次遍历。&lt;/p&gt;
&lt;p&gt;　　　　　　　poll（略微改进）：改进了数量连接限制，做到了数量无限制&lt;/p&gt;
&lt;p&gt;　　　　　　　epoll（改进所有缺点）：当socket变化时，通知进程哪一个完成了，&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　数量无限制（为系统最大打开文件数量）&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　fd句柄只拷贝一次，性能高&lt;/p&gt;
&lt;p&gt;　　　　性能对比：&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1302322/201803/1302322-20180303192344089-1670884351.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　横坐标是连接数，Dead Connections 是软件命名的，纵坐标是此时处理连接数&lt;/p&gt;
&lt;p&gt;　　　　　　可以看出 epoll 性能比较稳定，而且性能较优。&lt;/p&gt;
&lt;p&gt;　　　　仔细过程讨论：&lt;/p&gt;
&lt;p&gt;　　　　　　　　这里只讨论大致原理，具体实现不同语言有不同的差别。（不是因为我没做过，不是的）&lt;/p&gt;
&lt;p&gt;　　　　　　　　首先。在多路复用模型中，对于每一个 socket，一般都设置成为 non-blocking，但是，整个用户的 process 其实是一直被 block 的&lt;/p&gt;
&lt;p&gt;　　　　　　　　即用户进程被select、poll阻塞，但是select、poll是非阻塞的，他们不断轮询、挂起来完成工作。&lt;/p&gt;

&lt;p&gt;　　　　　　　　select：&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　1. 从用户态拷贝 fd_set 至内核空间（告诉内核要监听的socket）&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　2..注册回调函数pollwait（将进程挂到等待队列中，当socket准备好后（执行mask状态码判断），再唤醒进程）&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　3. 内核遍历fd，调用每一个的poll方法（本质上是pollwait回调函数，返回值socket的mask状态掩码，即现在准备好了没，给fd_set赋值）&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　4. 当无可读写mask码（没有任何准备好的），select睡眠，等睡眠时间到，再次醒来轮询fd-set&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　5. 有值时返回fd_set（已经赋值完，例如可以读的value为1）、将其拷贝至用户空间&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　6. 用户进程循环fd_set,&lt;/p&gt;
&lt;p&gt;　　　　　　　　分析：&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　每次循环都要执行上面流程，&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　一次循环两次拷贝fi_set，即每次监听都重新告诉内核要监听的事件，在用户量很大的时候是一个很大的开销&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　返回所有的fd_set，却没有告诉进程哪一个是完成的，进程还得循环判断，用户量很大（十万，百万）的时候，性能太低&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　因此，select只支持1024个连接。&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　这也解释了上图中为什么连接量越大，性能越低的现象，许多时间用来处理无活跃的连接、循环判断中，在高并发低活跃的场景中尤为如此。&lt;/p&gt;
&lt;p&gt;　　　　　　　　poll：&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　将fd_set结构改为pollfd结构，可以不限数量，但是其他问题咩有解决。&lt;/p&gt;
&lt;p&gt;　　　　　　　　epoll：&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　改进：&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　fd只拷贝一次（开始就告诉内核所有注册事件，监听对象）。&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　只返回包含所有变化的fd的链表。&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　连接无限制&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　epoll提供三个函数&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　epoll_create（句柄），开始是有size参数，说明fd数量，现在内核动态分配，&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　epoll_ctl（注册事件类型），注册监听事件&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　epoll_wait（等待事件发生），捕捉fd信号，&lt;/p&gt;
&lt;p&gt;　　　　三者区别小结：&lt;/p&gt;
&lt;p&gt;　　　　　　select、poll 孪生兄弟，有许多缺点，优点不多，应用场景也不多。是时代的产物&lt;/p&gt;
&lt;p&gt;　　　　　　epoll  是进阶版，但是只有Linux有，&lt;/p&gt;
&lt;p&gt;　　　　　　具体情况具体分析。&lt;/p&gt;

&lt;p&gt;　　4. 异步io&lt;/p&gt;
&lt;p&gt;　　　　解释：进程完全不阻塞，请求发完就去做其他事，等数据全部准备好，内核发消息给进程，进程接着处理，&lt;/p&gt;
&lt;p&gt;　　　　实现：听说很复杂，没研究。&lt;/p&gt;

&lt;p&gt;四、总结和挖坑&lt;/p&gt;
&lt;p&gt;　　研究了一些操作系统的概念，研究了I/O模式，着重研究了select、poll、epoll 的区别，&lt;/p&gt;
&lt;p&gt;　　有时间 具体实现和操作，实践出真知，许多细节可能还有谬误，待以后水平上升，再来修改。&lt;/p&gt;





</description>
<pubDate>Sat, 03 Mar 2018 12:53:00 +0000</pubDate>
<dc:creator>calvin_xhk</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xinghuaikang/p/8502983.html</dc:identifier>
</item>
</channel>
</rss>