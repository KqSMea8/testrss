<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>第三节：框架前期准备篇之利用Newtonsoft.Json改造MVC默认的JsonResult - Yaopengfei</title>
<link>http://www.cnblogs.com/yaopengfei/p/9518725.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yaopengfei/p/9518725.html</guid>
<description>&lt;p&gt;&lt;span&gt;一. 背景&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在MVC框架中，我们可能经常会用到 return Json()，而Json方法内部又是一个JsonResult类，那么JsonResult内部又是什么原理呢？在MVC框架中，各种xxxResult便捷了我们的开发，但这些都不是本节的重点，在这里我们只需要知道JsonResult内部的原理即可。&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　JsonResult内部原理是基于 JavaScriptSerializer来做的序列化，在使用过程中，有这么几个弊端：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　①：DateTime类型返回给前端是这个玩意：\/Date(1535009968228)\/ ，相当别扭。（PS：前端有很多办法处理的）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　②：对于前端而言，对于属性名可能更倾向于小写开头，但在C#中，很多都是大写，但JsonResult将原结果默认返回给前端，前端人员可能会有点小不爽。(PS：这也可以算作是一个习惯问题，没有明确的对错)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　③：循环引用的问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　关于使用Newtonsoft.Json改造MVC默认的JsonResult，有很多种方式，本节仅是整理了一下在我日常开发中的使用方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;这里简单的分析一下JsonResult的源码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; ①：继承了ActionResult, 实现了ExecuteResult方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; ②：解读源码可知，JsonResult内部实现原理是调用了JavaScriptSerializer对象中的Serialize方法,将Json对象转换成了Json字符串，通过：response.Write(javaScriptSerializer.Serialize(this.Data)); 传递给前台。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; ③：默认是禁止Get请求访问的. JsonRequestBehavior.DenyGet。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; ④：在MVC的Action中,return Json(),这里的Json通过源码可知，即new了一个JsonResult对象而已,并且MVC中封装了很多重载。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180827105013895-1254340133.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180827105028124-2095954007.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　本节涉及到的知识点有：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　1. MVC中的各种Result，可参考：&lt;a href=&quot;http://www.cnblogs.com/yaopengfei/p/7910767.html&quot;&gt;http://www.cnblogs.com/yaopengfei/p/7910767.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　2. MVC中的过滤器，可参考：&lt;a href=&quot;https://www.cnblogs.com/yaopengfei/p/7910763.html&quot;&gt;https://www.cnblogs.com/yaopengfei/p/7910763.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二. 测试JsonResult的弊端&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;这里主要测试一下DateTime类型“乱码”问题和默认大小写问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;后台代码：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Json1()
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;        &lt;span&gt;var&lt;/span&gt; msg = &lt;span&gt;new&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;       {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;           ID = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;           Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ypf1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;           time =&lt;span&gt; DateTime.Now
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;       };
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Json(msg);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;前台代码：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;   $(&quot;#btn1&quot;).on(&quot;click&quot;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;        $.post(&quot;Json1&quot;, {}, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;             console.log(data);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;       });
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;    });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;测试结果：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180827105941706-2074660751.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;下面提供一种解决时间乱码的问题，使用该js文件，对Date类型进行扩展，代码如下：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4e301efd-3656-4397-8513-bd4478e31080')&quot; readability=&quot;41&quot;&gt;&lt;img id=&quot;code_img_closed_4e301efd-3656-4397-8513-bd4478e31080&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4e301efd-3656-4397-8513-bd4478e31080&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4e301efd-3656-4397-8513-bd4478e31080',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4e301efd-3656-4397-8513-bd4478e31080&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*     
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * 对Date的扩展，将 Date 转化为指定格式的String     
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符     
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)     
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * eg:     
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * (new Date()).pattern(&quot;yyyy-MM-dd hh:mm:ss.S&quot;) ==&amp;gt; 2006-07-02 08:09:04.423     
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * (new Date()).pattern(&quot;yyyy-MM-dd E HH:mm:ss&quot;) ==&amp;gt; 2009-03-10 二 20:09:04     
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * (new Date()).pattern(&quot;yyyy-MM-dd EE hh:mm:ss&quot;) ==&amp;gt; 2009-03-10 周二 08:09:04     
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * (new Date()).pattern(&quot;yyyy-MM-dd EEE hh:mm:ss&quot;) ==&amp;gt; 2009-03-10 星期二 08:09:04     
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * (new Date()).pattern(&quot;yyyy-M-d h:m:s.S&quot;) ==&amp;gt; 2006-7-2 8:9:4.18     
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;使用：(eval(value.replace(/\/Date\((\d+)\)\//gi, &quot;new Date($1)&quot;))).pattern(&quot;yyyy-M-d h:m:s.S&quot;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; Date.prototype.pattern = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (fmt) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; o =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &quot;M+&quot;: &lt;span&gt;this&lt;/span&gt;.getMonth() + 1, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;月份        &lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &quot;d+&quot;: &lt;span&gt;this&lt;/span&gt;.getDate(), &lt;span&gt;//&lt;/span&gt;&lt;span&gt;日        &lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &quot;h+&quot;: &lt;span&gt;this&lt;/span&gt;.getHours() % 12 == 0 ? 12 : &lt;span&gt;this&lt;/span&gt;.getHours() % 12, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;小时        &lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &quot;H+&quot;: &lt;span&gt;this&lt;/span&gt;.getHours(), &lt;span&gt;//&lt;/span&gt;&lt;span&gt;小时        &lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &quot;m+&quot;: &lt;span&gt;this&lt;/span&gt;.getMinutes(), &lt;span&gt;//&lt;/span&gt;&lt;span&gt;分        &lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &quot;s+&quot;: &lt;span&gt;this&lt;/span&gt;.getSeconds(), &lt;span&gt;//&lt;/span&gt;&lt;span&gt;秒        &lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &quot;q+&quot;: Math.floor((&lt;span&gt;this&lt;/span&gt;.getMonth() + 3) / 3), &lt;span&gt;//&lt;/span&gt;&lt;span&gt;季度        &lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &quot;S&quot;: &lt;span&gt;this&lt;/span&gt;.getMilliseconds() &lt;span&gt;//&lt;/span&gt;&lt;span&gt;毫秒        &lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; week =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &quot;0&quot;: &quot;/u65e5&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &quot;1&quot;: &quot;/u4e00&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &quot;2&quot;: &quot;/u4e8c&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &quot;3&quot;: &quot;/u4e09&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &quot;4&quot;: &quot;/u56db&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &quot;5&quot;: &quot;/u4e94&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &quot;6&quot;: &quot;/u516d&quot;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (/(y+)/&lt;span&gt;.test(fmt)) {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         fmt = fmt.replace(RegExp.$1, (&lt;span&gt;this&lt;/span&gt;.getFullYear() + &quot;&quot;).substr(4 - RegExp.$1&lt;span&gt;.length));
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (/(E+)/&lt;span&gt;.test(fmt)) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         fmt = fmt.replace(RegExp.$1, ((RegExp.$1.length &amp;gt; 1) ? (RegExp.$1.length &amp;gt; 2 ? &quot;/u661f/u671f&quot; : &quot;/u5468&quot;) : &quot;&quot;) + week[&lt;span&gt;this&lt;/span&gt;.getDay() + &quot;&quot;&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; k &lt;span&gt;in&lt;/span&gt;&lt;span&gt; o) {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;new&lt;/span&gt; RegExp(&quot;(&quot; + k + &quot;)&quot;&lt;span&gt;).test(fmt)) {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((&quot;00&quot; + o[k]).substr((&quot;&quot; +&lt;span&gt; o[k]).length)));
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; fmt;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在前端这么使用，就可以将时间转换成正常的显示：（详细的见上面的代码）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180827110206694-775213777.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三. 自我改造&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;有了前面的JsonResult的代码分析，这里先写一种最简单粗暴的改造方式，当然需要实现安装 Newtonsoft.Json程序集。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;改造方案一：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;新建YpfSimpleJsonResult类，继承ActionResult类，利用构造函数传递数据，override ExecuteResult方法，在里面利用Newtonsoft进行改写，代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 简洁版的改写，只是替换了实现方式
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; YpfSimpleJsonResult : ActionResult
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; _Data = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; YpfSimpleJsonResult(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; data)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;._Data =&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ExecuteResult(ControllerContext context)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             context.HttpContext.Response.ContentType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             context.HttpContext.Response.Write(JsonConvert.SerializeObject(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;._Data));
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;测试接口：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Json3()
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; msg = &lt;span&gt;new&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                 ID = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ypf1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 time =&lt;span&gt; DateTime.Now
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; YpfSimpleJsonResult(msg);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;测试结果：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180827112001252-569462950.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;改造方案二：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　有了上面的方案的基础，下面深度改造一下，新建YpfJsonResult类，直接继承高层封装JsonResult类，并配置引用问题、默认小写问题、自定义时间格式，代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; YpfJsonResult : JsonResult
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; YpfJsonResult()
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             Settings = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JsonSerializerSettings
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1. 忽略循环引用问题，建议设置为Error，这样的话遇到循环引用的时候报错&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;                 ReferenceLoopHandling =&lt;span&gt; ReferenceLoopHandling.Ignore,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2. 日期格式化，这里可以将Newtonsoft默认的格式进行修改&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;                 DateFormatString = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyy-MM-dd HH:mm:ss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3. 设置属性为开头字母小写的驼峰命名&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;                 ContractResolver = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; JsonSerializerSettings Settings { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ExecuteResult(ControllerContext context)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (context == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.JsonRequestBehavior == JsonRequestBehavior.DenyGet &amp;amp;&amp;amp; &lt;span&gt;string&lt;/span&gt;.Equals(context.HttpContext.Request.HttpMethod, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET is not allowed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             HttpResponseBase response =&lt;span&gt; context.HttpContext.Response;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             response.ContentType = &lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(&lt;span&gt;this&lt;/span&gt;.ContentType) ? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ContentType;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.ContentEncoding != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 response.ContentEncoding = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ContentEncoding;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.Data == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; scriptSerializer = JsonSerializer.Create(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Settings);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             scriptSerializer.Serialize(response.Output, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Data);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;测试接口：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Json2()
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;   {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;       &lt;span&gt;var&lt;/span&gt; msg = &lt;span&gt;new&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;       {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;           ID = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;           Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ypf1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;           time =&lt;span&gt; DateTime.Now
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;       };
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意：这里的Data是JsonResult类中的一个获取和设置数据的属性。&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;       &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; YpfJsonResult() { Data =&lt;span&gt; msg };
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;测试结果：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180827112854525-1341722242.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;strong&gt;&lt;span&gt;虽然我们通过第二套方案已经达到了我们的目的，但它存在一个弊端，就是侵入性太强，每个方法中都要改写，那么有没有一种方式可以全局控制呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　显然是有的，可以考虑使用全局过滤器。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;四. 全局处理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　&lt;span&gt;　这里换一种思路，通过注册一个全局过滤器，对每个Action进行监测，如果使用的是JsonResult，就把JsonResult替换成自己编写的YpfJsonResult，这样的话业务中的调用代码，不需要发生任何变化，仍然可以使用 return Json()方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;特别注意：这里的过滤器要使用行为过滤器，并且要在OnActionExecuted方法中进行业务的编写。(这是过滤器执行顺序决定的)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;代码分享：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d6d3993a-d749-43a4-883b-976720534bb3')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_d6d3993a-d749-43a4-883b-976720534bb3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d6d3993a-d749-43a4-883b-976720534bb3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d6d3993a-d749-43a4-883b-976720534bb3',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d6d3993a-d749-43a4-883b-976720534bb3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;   &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; YpfJsonFilter: ActionFilterAttribute
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnActionExecuted(ActionExecutedContext filterContext)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (filterContext.Result &lt;span&gt;is&lt;/span&gt;&lt;span&gt; JsonResult
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &amp;amp;&amp;amp; !(filterContext.Result &lt;span&gt;is&lt;/span&gt;&lt;span&gt; YpfJsonResult))
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 JsonResult jsonResult =&lt;span&gt; (JsonResult)filterContext.Result;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 YpfJsonResult jsonNetResult = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; YpfJsonResult();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 jsonNetResult.ContentEncoding =&lt;span&gt; jsonResult.ContentEncoding;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 jsonNetResult.ContentType =&lt;span&gt; jsonResult.ContentType;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 jsonNetResult.Data =&lt;span&gt; jsonResult.Data;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 jsonNetResult.JsonRequestBehavior =&lt;span&gt; jsonResult.JsonRequestBehavior;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 jsonNetResult.MaxJsonLength =&lt;span&gt; jsonResult.MaxJsonLength;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 jsonNetResult.RecursionLimit =&lt;span&gt; jsonResult.RecursionLimit;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 filterContext.Result =&lt;span&gt; jsonNetResult;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;过滤器代码&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;编写完过滤器后，需要全局注册一下：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;可以在在FilterConfig文件中注册 filters.Add(new YpfJsonFilter());&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　或者直接去：Global文件中：GlobalFilters.Filters.Add(new YpfJsonFilter()); 代码来注册，道理都一样&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;接口代码，不需要做任何改变，继续沿用return Json()即可。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180827115508318-529834247.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;测试结果：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180827115605435-1014318217.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;





&lt;div&gt;

&lt;div&gt;
&lt;ul&gt;&lt;li&gt;作       者 : &lt;span&gt;Yaopengfei(姚鹏飞)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;博客地址 : &lt;a href=&quot;http://www.cnblogs.com/yaopengfei/&quot;&gt;&lt;span&gt;http://www.cnblogs.com/yaopengfei/&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;声     明1 : 本人才疏学浅，用郭德纲的话说“我是一个小学生”，如有错误，欢迎讨论，请勿谩骂^_^。&lt;/li&gt;
&lt;li&gt;声     明2 : 原创博客请在转载时保留原文链接或在文章开头加上本人博客地址，否则保留追究法律责任的权利。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Mon, 27 Aug 2018 23:36:00 +0000</pubDate>
<dc:creator>Yaopengfei</dc:creator>
<og:description>一. 背景 在MVC框架中，我们可能经常会用到 return Json()，而Json方法内部又是一个JsonResult类，那么JsonResult内部又是什么原理呢？在MVC框架中，各种xxxRe</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yaopengfei/p/9518725.html</dc:identifier>
</item>
<item>
<title>多元线性回归公式推导及R语言实现 - 知然</title>
<link>http://www.cnblogs.com/zhiranok/p/xianxinghuigui.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhiranok/p/xianxinghuigui.html</guid>
<description>&lt;h2 id=&quot;多元线性回归模型&quot;&gt;多元线性回归模型&lt;/h2&gt;
&lt;p&gt;实际中有很多问题是一个因变量与多个自变量成线性相关，我们可以用一个多元线性回归方程来表示。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/282357/201808/282357-20180812104552018-1155558715.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了方便计算，我们将上式写成矩阵形式:&lt;/p&gt;
&lt;p&gt;Y = XW&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;假设自变量维度为N&lt;/li&gt;
&lt;li&gt;W为自变量的系数，下标0 - N&lt;/li&gt;
&lt;li&gt;X为自变量向量或矩阵，X维度为N,为了能和W0对应，X需要在第一行插入一个全是1的列。&lt;/li&gt;
&lt;li&gt;Y为因变量&lt;br/&gt;那么问题就转变成，已知样本X矩阵以及对应的因变量Y的值，求出满足方程的W，一般不存在一个W是整个样本都能满足方程，毕竟现实中的样本有很多噪声。最一般的求解W的方式是最小二乘法。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;最小二乘法&quot;&gt;最小二乘法&lt;/h2&gt;
&lt;p&gt;我们希望求出的W是最接近线性方程的解的，最接近我们定义为残差平方和最小，残差的公式和残差平方和的公式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/282357/201808/282357-20180812104621648-1260933428.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面的公式用最小残差平方和的方式导出的，还有一种思路用最大似然的方式也能推导出和这个一样的公式，首先对模型进行一些假设：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;误差等方差不相干假设，即每个样本的误差期望为0，每个样本的误差方差都为相同值假设为σ&lt;/li&gt;
&lt;li&gt;误差密度函数为正态分布 e ~ N(0, σ^2)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;简单推导如下:&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/282357/201808/282357-20180812104635827-1160637046.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由此利用最大似然原理导出了和最小二乘一样的公式。&lt;/p&gt;
&lt;h2 id=&quot;最小二乘法求解&quot;&gt;最小二乘法求解&lt;/h2&gt;
&lt;p&gt;二次函数是个凸函数，极值点就是最小点。只需要求导数=0解出W即可。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/282357/201808/282357-20180823101512671-426252816.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;模拟数据&quot;&gt;模拟数据&lt;/h2&gt;
&lt;p&gt;我们这里用R语言模拟实践一下，由于我们使用的矩阵运算，这个公式一元和多元都是兼容的，我们为了可视化方便一点，我们就用R语言自带的women数据做一元线性回归，和多元线性回归的方式基本一样。&lt;br/&gt;women数据如下&lt;/p&gt;
&lt;pre class=&quot;r&quot;&gt;
&lt;code&gt;&amp;gt; women
   height weight
1      58    115
2      59    117
3      60    120
4      61    123
5      62    126
6      63    129
7      64    132
8      65    135
9      66    139
10     67    142
11     68    146
12     69    150
13     70    154
14     71    159
15     72    164&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;体重和身高具有线性关系，我们做一个散点图可以看出来：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/282357/201808/282357-20180812104651524-1024697287.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们用最小二乘推导出来的公式计算w如下&lt;/p&gt;
&lt;pre class=&quot;r&quot;&gt;
&lt;code&gt;X &amp;lt;- cbind(rep(1, nrow(women)), women$height)
X.T &amp;lt;- t(X)
w &amp;lt;- solve(X.T %*% X) %*% X.T %*% y
&amp;gt; w
          [,1]
[1,] -87.51667
[2,]   3.45000
&amp;gt; lm.result &amp;lt;- lm(women$weight~women$height)
&amp;gt; lm.result

Call:
lm(formula = women$weight ~ women$height)

Coefficients:
 (Intercept)  women$height  
      -87.52          3.45&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的R代码w使我们利用公式计算出来的，下边是R语言集成的线性回归函数拟合出来的，可以看出我们的计算结果是正确的，lm的只是小数点取了两位而已，将回归出来的函数画到图中看下回归的效果。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/282357/201808/282357-20180812104705496-67150394.png&quot;/&gt;&lt;br/&gt;画图对应的R代码如下，用R的感觉.....太飘逸了。&lt;/p&gt;
&lt;pre class=&quot;r&quot;&gt;
&lt;code&gt;&amp;gt; png(file=&quot;chart2.png&quot;)
&amp;gt; plot(women$height, women$weight)
&amp;gt; lines(women$height, X %*% w)
&amp;gt; dev.off()&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;梯度下降法&quot;&gt;梯度下降法&lt;/h2&gt;
&lt;p&gt;除了用正规方程方式求解W，也可以用最常见的梯度下降法求得W，因为最小二乘是个凸函数，所以这里找到的极小点就是最小点。下面这段代码用R写还是非常容易的，但是刚开始step步长参数调的太大了，导致一直不收敛，我还&lt;br/&gt;以为是程序错误，后来怎么看也没写错，就把参数调了个很小值，结果就收敛了。step的这个取值其实应该是变化的，先大后下比较科学，我这个调的很小，需要接近500万次才能收敛。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;初始化W 为全0向量，也可以随机一个向量&lt;/li&gt;
&lt;li&gt;设置最大迭代次数，本例为了收敛设置了一个很大的数&lt;/li&gt;
&lt;li&gt;设置步长step，小了收敛很慢，大了不收敛.......&lt;/li&gt;
&lt;li&gt;求损失函数的梯度&lt;/li&gt;
&lt;li&gt;W(k+1) 为 W(k) + 损失函数负梯度 * 步长step&lt;/li&gt;
&lt;li&gt;循环，直到梯度接近0&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/282357/201808/282357-20180823101526678-255938302.jpg&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;r&quot;&gt;
&lt;code&gt;X &amp;lt;- cbind(rep(1, nrow(women)), women$height)
Y &amp;lt;- women$weight
maxIterNum &amp;lt;- 5000000;
step &amp;lt;- 0.00003;
W &amp;lt;- rep(0, ncol(X))
for (i in 1:maxIterNum){
    grad &amp;lt;- t(X) %*% (X %*% W -  Y);
    if (sqrt(as.numeric(t(grad) %*% grad)) &amp;lt; 1e-3){
        print(sprintf('iter times=%d', i));
        break;
    }
    W &amp;lt;- W - grad * step;
}
print(W);&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;输出&quot;&gt;输出&lt;/h3&gt;
&lt;p&gt;[1] &quot;iter times=4376771&quot;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;print(W);&lt;br/&gt;[,1]&lt;br/&gt;[1,] -87.501509&lt;br/&gt;[2,] 3.449768&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 27 Aug 2018 22:54:00 +0000</pubDate>
<dc:creator>知然</dc:creator>
<og:description>有很多问题是一个因变量与多个自变量成线性相关，我们可以用一个多元线性回归方程来表示。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhiranok/p/xianxinghuigui.html</dc:identifier>
</item>
<item>
<title>java封装实现Excel建表读写操作 - yumiaoxa</title>
<link>http://www.cnblogs.com/yumiaoxia/p/9545750.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yumiaoxia/p/9545750.html</guid>
<description>&lt;p&gt;  对 Excel 进行读写操作是生产环境下常见的业务，网上搜索的实现方式都是基于POI和JXL第三方框架，但都不是很全面。小编由于这两天刚好需要用到，于是就参考手写了一个封装操作工具，基本涵盖了Excel表（分有表头和无表头）的创建，并对它们进行读写操作。为方便大家，有需要者可以点击文后点解下载直接使用哦，当然也可以根据自己需求举一反三自己定制，相信对于聪明的你也不是什么难事。话不多说，直接贴源码&lt;/p&gt;
&lt;p&gt;pom.xml 文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;maven.compiler.source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;maven.compiler.source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;maven.compiler.target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;maven.compiler.target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.poi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;poi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.17&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.projectlombok&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;lombok&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.18.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;provided&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.slf4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;slf4j-log4j12&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8.0-beta2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.17&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.slf4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;slf4j-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8.0-beta2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;建表工具类：ExcelBuider.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 建表工具类
         * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Sherman
         * email:1253950375@qq.com
         * created in 2018/8/24
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        @Slf4j
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ExcelBuilder {

            &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; HSSFSheet sheet;
            &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; HSSFWorkbook wb;
            &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasHeader;

            &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
             * 初始化
             * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; excellName 表名
             &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ExcelBuilder(String excellName) {
                wb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HSSFWorkbook();
                sheet &lt;/span&gt;=&lt;span&gt; wb.createSheet(excellName);
            }

            &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
             *  设置表头，装配表头数据
             * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; value 字符串数组，用来作为表头的值
             *
             &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ExcelBuilder header(String... value) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (value != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; value.length != 0&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置表头样式&lt;/span&gt;
                    HSSFCellStyle cellStyle =&lt;span&gt; wb.createCellStyle();
                    cellStyle.setFont(font(&lt;/span&gt;&quot;黑体&quot;, &lt;span&gt;true&lt;/span&gt;, 12&lt;span&gt;));
                    HSSFRow row &lt;/span&gt;= sheet.createRow(0&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; value.length; i++&lt;span&gt;) {
                        HSSFCell cell &lt;/span&gt;=&lt;span&gt; row.createCell(i);
                        cell.setCellValue(value[i]);
                        cell.setCellStyle(cellStyle);
                    }
                    hasHeader &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * excel 表内容装配
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; content 待装配表格内容的二维数组
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; ExcelBuilder content(List&amp;lt;List&amp;lt;Object&amp;gt;&amp;gt;&lt;span&gt; content) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (content != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span&gt;content.isEmpty()) {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; content.size(); i++&lt;span&gt;) {
                index &lt;/span&gt;= hasHeader == &lt;span&gt;false&lt;/span&gt; ? i : i + 1&lt;span&gt;;
                HSSFRow row &lt;/span&gt;=&lt;span&gt; sheet.createRow(index);
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; content.get(i).size(); j++&lt;span&gt;) {
                    String r &lt;/span&gt;= &quot;&quot;&lt;span&gt;;
                    Object value &lt;/span&gt;=&lt;span&gt; content.get(i).get(j);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据数据类型装配&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; String) {
                        r &lt;/span&gt;=&lt;span&gt; (String) value;
                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; Number) {
                        r &lt;/span&gt;=&lt;span&gt; String.valueOf(value);
                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; BigDecimal) {
                        r &lt;/span&gt;=&lt;span&gt; String.valueOf(value);
                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!(value &lt;span&gt;instanceof&lt;/span&gt; Date) &amp;amp;&amp;amp; !(value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; Timestamp)) {
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!(value &lt;span&gt;instanceof&lt;/span&gt; ZonedDateTime) &amp;amp;&amp;amp; !(value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; LocalDateTime)) {
                                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; Enum) {
                                    r &lt;/span&gt;=&lt;span&gt; ((Enum) value).name();
                                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (value != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {

                                   log.info(&lt;/span&gt;&quot;Error of create row, Unknow field type: &quot; +&lt;span&gt; value.getClass().getName());
                                }
                            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                                DateTimeFormatter formatter &lt;/span&gt;= DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;&lt;span&gt;);
                                r &lt;/span&gt;=&lt;span&gt; formatter.format((TemporalAccessor) value);
                            }
                        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                            DateFormat sdf &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;yyyy-MM-dd&quot;&lt;span&gt;);
                            r &lt;/span&gt;=&lt;span&gt; sdf.format(value);
                        }
                    }

                    row.createCell(j).setCellValue(r);
                }
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 自动调整列宽大小
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ExcelBuilder autoColumnWidth() {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; sheet.getRow(0).getLastCellNum(); j++&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; maxLength = 0&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt;= sheet.getLastRowNum(); i++&lt;span&gt;) {
                String value &lt;/span&gt;=&lt;span&gt; sheet.getRow(i).getCell(j).getStringCellValue();
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; length = 0&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (value != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    length &lt;/span&gt;=&lt;span&gt; value.getBytes().length;
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (length &amp;gt;&lt;span&gt; maxLength) {
                    maxLength &lt;/span&gt;=&lt;span&gt; length;
                }
            }
            sheet.setColumnWidth(j, maxLength &lt;/span&gt;&amp;gt; 30 ? (30 * 256 + 186) : (maxLength * 256 + 186&lt;span&gt;));
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 实例化
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; hasHeader 是否有表头
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; Excel表格
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; AbstractExcel build(Boolean hasHeader) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; hasHeader ? &lt;span&gt;new&lt;/span&gt; HeaderExcel(sheet) : &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NoHeaderExcel(sheet);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; fontName 字体名字
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; isBold  是否粗体
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; fontSize 字体大小
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; 字体
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; HSSFFont font(String fontName, &lt;span&gt;boolean&lt;/span&gt; isBold, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; fontSize) {
        HSSFFont font &lt;/span&gt;=&lt;span&gt; wb.createFont();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (fontName != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) font.setFontName(fontName);
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; font.setFontName(&quot;黑体&quot;&lt;span&gt;);
        font.setBold(isBold);
        font.setFontHeightInPoints((&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt;) fontSize);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; font;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;excel的抽象父类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Sherman
 * created in 2018/8/24
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AbstractExcel {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; HSSFSheet sheet;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AbstractExcel() {
        HSSFWorkbook wb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HSSFWorkbook();
        sheet &lt;/span&gt;=&lt;span&gt; wb.createSheet();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AbstractExcel(String sheetName){
        HSSFWorkbook wb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HSSFWorkbook();
        sheet &lt;/span&gt;=&lt;span&gt; wb.createSheet(sheetName);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AbstractExcel(HSSFSheet sheet) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sheet =&lt;span&gt; sheet;
    }



    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; List&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt;&lt;span&gt; getPayload();


    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; write(OutputStream op) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        sheet.getWorkbook().write(op);
        sheet.getWorkbook().close();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getStringFormatCellValue(HSSFCell cell) {
        String cellVal &lt;/span&gt;= &quot;&quot;&lt;span&gt;;
        DecimalFormat df &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; DecimalFormat(&quot;#&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (cell.getCellTypeEnum()) {
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; STRING:
                cellVal &lt;/span&gt;=&lt;span&gt; cell.getStringCellValue();
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; NUMERIC:
                String dataFormat &lt;/span&gt;=&lt;span&gt; cell.getCellStyle().getDataFormatString();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (DateUtil.isCellDateFormatted(cell)) {
                    cellVal &lt;/span&gt;=&lt;span&gt; df.format(cell.getDateCellValue());
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&quot;@&quot;&lt;span&gt;.equals(dataFormat)) {
                    cellVal &lt;/span&gt;=&lt;span&gt; df.format(cell.getNumericCellValue());
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    cellVal &lt;/span&gt;=&lt;span&gt; String.valueOf(cell.getNumericCellValue());
                    df &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; DecimalFormat(&quot;#.#########&quot;&lt;span&gt;);
                    cellVal &lt;/span&gt;=&lt;span&gt; df.format(Double.valueOf(cellVal));
                }
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; BOOLEAN:
                cellVal &lt;/span&gt;=&lt;span&gt; String.valueOf(cell.getBooleanCellValue());
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; FORMULA:
                cellVal &lt;/span&gt;=&lt;span&gt; String.valueOf(cell.getCellFormula());
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                cellVal &lt;/span&gt;= &quot;&quot;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cellVal;
    }


}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有表头实现类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Sherman
 * created in 2018/8/24
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HeaderExcel &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractExcel {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; hasHeader = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; HSSFSheet sheet;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; HeaderExcel(HSSFSheet sheet) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(sheet);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sheet =&lt;span&gt; sheet;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; HeaderExcel(String sheetName, String excelPath) {
        HSSFWorkbook wb &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            wb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; HSSFWorkbook(&lt;span&gt;new&lt;/span&gt; POIFSFileSystem(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInputStream(excelPath)));
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
            e.printStackTrace();
        }
        sheet &lt;/span&gt;= sheetName == &lt;span&gt;null&lt;/span&gt; || sheetName.isEmpty() ? wb.getSheetAt(0&lt;span&gt;) : wb.getSheet(sheetName);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt;&lt;span&gt; getPayload() {
        List&lt;/span&gt;&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt; payLoad = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        HSSFRow headRow &lt;/span&gt;= sheet.getRow(0&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 1; i &amp;lt;= sheet.getLastRowNum(); i++&lt;span&gt;) {
            HSSFRow currentRow &lt;/span&gt;=&lt;span&gt; sheet.getRow(i);
            Map&lt;/span&gt;&amp;lt;String, String&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; sheet.getRow(i).getLastCellNum(); j++&lt;span&gt;) {
                map.put(getStringFormatCellValue(headRow.getCell(j)), getStringFormatCellValue(currentRow.getCell(j)));
            }
            payLoad.add(map);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; payLoad;
    }


}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;无表头实现类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Sherman
 * created in 2018/8/24
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NoHeaderExcel &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractExcel {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; hasHeader = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; HSSFSheet sheet;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; NoHeaderExcel(HSSFSheet sheet) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(sheet);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sheet =&lt;span&gt; sheet;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; NoHeaderExcel(String sheetName, String excelPath) {
        HSSFWorkbook wb &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            wb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; HSSFWorkbook(&lt;span&gt;new&lt;/span&gt; POIFSFileSystem(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInputStream(excelPath)));
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
            e.printStackTrace();
        }
        sheet &lt;/span&gt;= sheetName == &lt;span&gt;null&lt;/span&gt; || sheetName.isEmpty() ? wb.getSheetAt(0&lt;span&gt;) : wb.getSheet(sheetName);
    }


    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt;&lt;span&gt; getPayload() {
        List&lt;/span&gt;&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt; payLoad = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; sheet.getLastRowNum(); i++&lt;span&gt;) {
            HSSFRow currentRow &lt;/span&gt;=&lt;span&gt; sheet.getRow(i);
            Map&lt;/span&gt;&amp;lt;String, String&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt;= sheet.getRow(i).getLastCellNum(); j++&lt;span&gt;) {
                map.put(String.valueOf(j), getStringFormatCellValue(currentRow.getCell(j)));
            }
            payLoad.add(map);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; payLoad;
    }


}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试工具类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Unit test for simple App.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AppTest 
{
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 测试建表，写表操作
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testExportExcel()
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;测试数据&lt;/span&gt;
     String[] headers = &lt;span&gt;new&lt;/span&gt; String[]{&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;&lt;span&gt;};
         List&lt;/span&gt;&amp;lt;List&amp;lt;Object&amp;gt;&amp;gt; valueList = &lt;span&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;char&lt;/span&gt; i = 'A'; i &amp;lt;= 'E' ; i++&lt;span&gt;) {
            List&lt;/span&gt;&amp;lt;Object&amp;gt; rowList = &lt;span&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt;= 4; j++&lt;span&gt;) {
                rowList.add(i&lt;/span&gt;+&lt;span&gt;String.valueOf(j));
            }
            valueList.add(rowList);
        }

    AbstractExcel excel &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ExcelBuilder(&quot;报名表&quot;&lt;span&gt;)
            .header(headers)
            .content(valueList)
            .autoColumnWidth()
            .build(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            File file &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; File(&quot;E:\\excel\\test.xls&quot;&lt;span&gt;);
            FileOutputStream op &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileOutputStream(file);
            excel.write(op);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
            e.printStackTrace();
        }
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 测试读取表数据操作
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testImportExcel(){
        AbstractExcel excel &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; HeaderExcel(&lt;span&gt;null&lt;/span&gt;,&quot;E:/excel/test.xls&quot;&lt;span&gt;);
       List&lt;/span&gt;&amp;lt;Map&amp;lt;String,String&amp;gt;&amp;gt; values =&lt;span&gt; excel.getPayload();
       values.forEach(stringStringMap &lt;/span&gt;-&amp;gt;&lt;span&gt; {
           stringStringMap.entrySet().forEach(stringStringEntry &lt;/span&gt;-&amp;gt;&lt;span&gt; {
               System.out.println(stringStringEntry.getKey()&lt;/span&gt;+&quot;----&amp;gt;&quot;+&lt;span&gt;stringStringEntry.getValue());
           });

       });
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;附图：&lt;/p&gt;
&lt;p&gt;测试1&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1157286/201808/1157286-20180828014032181-1395454700.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;测试二：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1157286/201808/1157286-20180828014243941-1838956708.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 看起来效果还不错，当然还有很多不完善的地方，有需要的朋友可以在此基础上扩展定制，例如读取表数据结构方式，实现行数增删改查据或者创建表标题等等。&lt;/p&gt;
&lt;p&gt;或者有朋友有更好的实现方案，欢迎前来交流！&lt;/p&gt;
&lt;p&gt;最后的最后，当然忘不了附上笨工具的源码啦！&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://github.com/yumiaoxia/excel-commom-demo.git&quot; target=&quot;_blank&quot;&gt;https://github.com/yumiaoxia/excel-commom-demo.git&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 27 Aug 2018 18:15:00 +0000</pubDate>
<dc:creator>yumiaoxa</dc:creator>
<og:description>对 Excel 进行读写操作是生产环境下常见的业务，网上搜索的实现方式都是基于POI和JXL第三方框架，但都不是很全面。小编由于这两天刚好需要用到，于是就参考手写了一个封装操作工具，基本涵盖了Exce</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yumiaoxia/p/9545750.html</dc:identifier>
</item>
<item>
<title>使用cookie来做身份认证 - Sheldon_Lou</title>
<link>http://www.cnblogs.com/sheldon-lou/p/9545726.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sheldon-lou/p/9545726.html</guid>
<description>&lt;p&gt;文章是msdn的官方文档，&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie?view=aspnetcore-2.1&amp;amp;tabs=aspnetcore2x&quot;&gt;链接&lt;/a&gt;在这里。其实也有中文的&lt;a href=&quot;https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/cookie?view=aspnetcore-2.1&amp;amp;tabs=aspnetcore2x&quot;&gt;文档&lt;/a&gt;，这里还是想做一个记录。&lt;/p&gt;
&lt;p&gt;文章有asp.net core 2.x 和1.x 版本，我这里就忽略1.x了。&lt;/p&gt;
&lt;p&gt;下面先说几点额外的东西有助于理解。&lt;/p&gt;
&lt;h3 id=&quot;authentication-和-authorization&quot;&gt;Authentication 和 Authorization&lt;/h3&gt;
&lt;p&gt;这里先讲一下Authentication和Authorization两个词的区别。&lt;/p&gt;
&lt;p&gt;Authentication：认证。&lt;/p&gt;
&lt;p&gt;Authorization：授权。&lt;/p&gt;
&lt;p&gt;简单来说，认证是用来证明一个人的身份，比如说他是一个学生，一个老师，一个boss，那么就需要这么一个认证。授权是用来表示这个用户能做什么事情，比如admin可以修改删除数据，normal user只能查看数据。&lt;/p&gt;
&lt;h3 id=&quot;issuer-和-audience&quot;&gt;Issuer 和 Audience&lt;/h3&gt;
&lt;p&gt;Issuer：发行者，这里来说就是 cookie 是谁分发的。&lt;/p&gt;
&lt;p&gt;Audience：听众，这个 cookie 的受众是谁。&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;p&gt;就像你&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/security/authentication/?view=aspnetcore-2.1&quot;&gt;前面&lt;/a&gt;看到认证相关的主题，&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-2.1&quot;&gt;Asp.net core Identity&lt;/a&gt; 是一个创建用户和维护用户登录的完备的认证解决方案。但有时你可能也想要自己的基于cookie的认证方式。你可以在不使用Asp.net core Identity的情况下使用cookie来实现一种独立的认证服务。&lt;/p&gt;
&lt;p&gt;示例源码在&lt;a href=&quot;https://github.com/aspnet/Docs/tree/master/aspnetcore/security/authentication/cookie/samples&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;因为我们这里只是做一个demo程序，所以写死一个假设的用户Maria Rodriguez到系统里面。邮箱相关的用户名是“maria.rodriguez@contoso.com”，密码任意。用户通过&lt;code&gt;Pages/Account/Login.cshtml.cs&lt;/code&gt;文件中的&lt;code&gt;AuthenticateUser&lt;/code&gt;方法做认证。现实环境中应该基于数据库。&lt;/p&gt;
&lt;p&gt;更多如何从ASP.net Core 1.x 到2.0的信息参考&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x/identity-2x?view=aspnetcore-2.1#cookie-based-authentication&quot;&gt;这里&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;想使用ASP.net Core Identity，参考&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-2.1&quot;&gt;这里&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;配置&quot;&gt;配置&lt;/h3&gt;
&lt;p&gt;如果程序没有使用&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/metapackage-app?view=aspnetcore-2.1&quot;&gt;Microsoft.AspNetCore.App元程序包&lt;/a&gt;,给程序引用一下&lt;a href=&quot;https://www.nuget.org/packages/Microsoft.AspNetCore.Authentication.Cookies/&quot;&gt;Microsoft.AspNetCore.Authentication.Cookies&lt;/a&gt;(版本≥2.1.0)。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;ConfigureServices&lt;/code&gt;中，通过&lt;code&gt;Authentication&lt;/code&gt;和&lt;code&gt;AddCookie&lt;/code&gt;方法添加一下认证服务。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;传给&lt;code&gt;AddAuthentication&lt;/code&gt;的&lt;code&gt;AuthenticationScheme&lt;/code&gt;值设置了程序默认使用的认证方案。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AuthenticationScheme&lt;/code&gt;在你有多个 cookie 认证实例或者你系统用某种特定的方案来做认证的时候是非常有用的。设置成为&lt;code&gt;CookieAuthenticationDefaults.AuthenticationScheme&lt;/code&gt;就表示用‘Cookies’来作为一个方案。你可以设置任意的 string 类型的值来区分不同的方案。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Configure&lt;/code&gt;方法中，使用&lt;code&gt;UseAuthentication&lt;/code&gt;来调用认证中间件用于设置&lt;code&gt;HttpContext.User&lt;/code&gt;属性。应在&lt;code&gt;UseMvcWithDefaultRoute&lt;/code&gt;和&lt;code&gt;UseMvc&lt;/code&gt; 方法之前调用&lt;code&gt;UseAuthentication&lt;/code&gt;方法。&lt;/p&gt;
&lt;h4 id=&quot;addcookie-设置选项&quot;&gt;AddCookie 设置选项&lt;/h4&gt;
&lt;p&gt;大致是这么设置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;services
    .AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(options =&amp;gt;
    {
        options.ClaimsIssuer = &quot;test&quot;;
        options.ClaimsIssuer = &quot;aa&quot;;
        //以及其他...
    });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;具体详细的通过&lt;code&gt;CookieAuthenticationOptions&lt;/code&gt;来设置相关的选项。着重看几个关键的设置，比如 AccessDeniedPath, LoginPath, LogoutPath, Domain, Name,&lt;code&gt;ExpireTimeSpan&lt;/code&gt;。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;29&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;AccessDeniedPath&lt;/td&gt;
&lt;td&gt;当&lt;code&gt;HttpContext.ForbidAsync&lt;/code&gt;触发302时的跳转地址，默认&lt;code&gt;/Account/AccessDenied&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;ClaimsIssuer&lt;/td&gt;
&lt;td&gt;用于设置 cookie 的Issuer 属性。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;td&gt;Cookie.Domain&lt;/td&gt;
&lt;td&gt;cookie的有效域。默认是请求的服务器名。浏览器只会给符合的服务器发送 cookie。你可能会希望设置这个值来调整他的作用域。举个例子，设置成&lt;code&gt;.contoso.com&lt;/code&gt;他的作用域就包括&lt;code&gt;contoso.com&lt;/code&gt;,&lt;code&gt;www.contoso.com&lt;/code&gt;,&lt;code&gt;staging.www.contoso.com&lt;/code&gt;等。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Cookie.Expiration&lt;/td&gt;
&lt;td&gt;获取或设置cookie的有效期。core 2.1+不建议使用。建议是使用&lt;code&gt;ExpireTimeSpan&lt;/code&gt;来设置 cookie 的失效时间。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Cookie.HttpOnly&lt;/td&gt;
&lt;td&gt;设置 cookie 是否是只能被服务器访问，默认 true，可以设置成 false 给客户端js 脚本访问，但是有可能会造成XSS（跨站脚本攻击）。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Cookie.Name&lt;/td&gt;
&lt;td&gt;cookie 的名字。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;Cookie.Path&lt;/td&gt;
&lt;td&gt;用来隔离同一个服务器下面的不同站点。比如站点是运行在&lt;code&gt;/app1&lt;/code&gt;下面，设置这个属性为&lt;code&gt;/app1&lt;/code&gt;，那么这个 cookie 就只在 app1下有效。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;Cookie.SameSite&lt;/td&gt;
&lt;td&gt;表示浏览器是否允许 cookie 被附加到相同的站点。有几种枚举：&lt;code&gt;SameSiteMode.Strict&lt;/code&gt;，只允许相同的站点。&lt;code&gt;SameSiteMode.Lax&lt;/code&gt;允许以安全的 http方式附加到不同站点或相同站点。为了支持 OAuth 认证，需要设置成&lt;code&gt;SameSiteMode.Lax&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Cookie.SecurePolicy&lt;/td&gt;
&lt;td&gt;设置是否只允许 https。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;DataProtectionProvider&lt;/td&gt;
&lt;td&gt;用于设置创建&lt;code&gt;TicketDataFormat&lt;/code&gt;（在表格最后）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;Events&lt;/td&gt;
&lt;td&gt;设置一些时间的处理程序。比如&lt;code&gt;OnSignedIn&lt;/code&gt;,&lt;code&gt;OnSigningOut&lt;/code&gt;等，默认是不做任何操作。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;EventsType&lt;/td&gt;
&lt;td&gt;Events的类型。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;ExpireTimeSpan&lt;/td&gt;
&lt;td&gt;设置存储在 cookie 里面的认证票据的过期时间。服务端会验证加密的 ticket 的有效性。在设置了&lt;code&gt;IsPersistent&lt;/code&gt;之后也能在 Set-Cookie 头里面返回。默认的过期时间是14天。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;7&quot;&gt;&lt;td&gt;LoginPath&lt;/td&gt;
&lt;td&gt;&lt;code&gt;HttpContext.ChallengeAsync&lt;/code&gt;方法触发302跳转时候的地址。假设设置成&lt;code&gt;/account/login&lt;/code&gt;,比如当前访问&lt;code&gt;/secure&lt;/code&gt; 返回401，那么会跳转地址&lt;code&gt;/account/login?returnUrl=/secure&lt;/code&gt;,当 login 页面生成一个新的登录身份之后，浏览器会跳转到 secure 页面。默认值是&lt;code&gt;/Account/login&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;LogoutPath&lt;/td&gt;
&lt;td&gt;登出地址。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;ReturnUrlParameter&lt;/td&gt;
&lt;td&gt;登录或登出之后页面可以做一个跳转，这个跳转地址作为一个参数传过去，这个就用来设置这个参数的名字。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;SessionStore&lt;/td&gt;
&lt;td&gt;用来保存跨站点请求的身份信息。设置了之后只有 session 的标识符会发送到客户端。当身份标识比较多的时候可以用。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;8&quot;&gt;&lt;td&gt;SlidingExpiration&lt;/td&gt;
&lt;td&gt;滑动过期。标识一个有新的过期时间的新 cookie是否可以被动态的分发。可以在&lt;code&gt;SignInAsync&lt;/code&gt;方法里面使用&lt;code&gt;AuthenticationProperties&lt;/code&gt;。使用绝对的 cookie 有效期时间来增加应用的安全性。举个例子：&lt;code&gt;await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(claimsIdentity), new AuthenticationProperties { IsPersistent = true, ExpiresUtc = DateTime.UtcNow.AddMinutes(20) });&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;TicketDataFormat&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Validate&lt;/td&gt;
&lt;td&gt;验证当前 option是否是有效的。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;cookie-policy-middleware&quot;&gt;Cookie Policy Middleware&lt;/h3&gt;
&lt;p&gt;Cookie 策略中间件。用于设置应用的 cookie的兼容性。和顺序有关，只会影响程序管道他后面的设置。如下方式使用。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;app.UseCookiePolicy(cookiePolicyOptions);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.cookiepolicyoptions&quot;&gt;CookiePolicyOptions&lt;/a&gt;提供了程序全局特性相关的设置。并且可以在 cookie 添加或者删除的时候挂钩一些处理程序。 有以下一些属性。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;6.5079365079365&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.8279569892473&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.cookiepolicyoptions.httponly&quot;&gt;HttpOnly&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;设置 cookie 是否是只能通过服务器访问的。默认是&lt;code&gt;HttpOnlyPolicy.None&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2.546218487395&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.cookiepolicyoptions.checkconsentneeded?view=aspnetcore-2.1#Microsoft_AspNetCore_Builder_CookiePolicyOptions_CheckConsentNeeded&quot;&gt;CheckConsentNeeded&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一个返回 bool 的函数，如果返回 true 会在弹出一个页面让用户确认使用 cookie&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.5094339622642&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.cookiepolicyoptions.consentcookie?view=aspnetcore-2.1#Microsoft_AspNetCore_Builder_CookiePolicyOptions_ConsentCookie&quot;&gt;ConsentCookie&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;（这个文档上也没说。。。）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2.3225806451613&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.cookiepolicyoptions.minimumsamesitepolicy&quot;&gt;MinimumSameSitePolicy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;同站点策略，默认是&lt;code&gt;SameSiteMode.Lax&lt;/code&gt;, Asp.net Core2.0+ 可用。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.4285714285714&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.cookiepolicyoptions.onappendcookie&quot;&gt;OnAppendCookie&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;cookie 被追加的时候调用。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;1.4285714285714&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.cookiepolicyoptions.ondeletecookie&quot;&gt;OnDeleteCookie&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;cookie 被删除的时候调用。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.7142857142857&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.cookiepolicyoptions.secure&quot;&gt;Secure&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;标识 cookie 是否必须是https.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;创建一个认证-cookie&quot;&gt;创建一个认证 cookie&lt;/h3&gt;
&lt;p&gt;创建一个包含用户信息的 cookie需要构造一个&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.security.claims.claimsprincipal&quot;&gt;ClaimsPrincipal&lt;/a&gt;。用户信息会被序列化然后保存在cookie 里面。&lt;/p&gt;
&lt;p&gt;用必要的 Claim来构造一个&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.security.claims.claimsidentity&quot;&gt;ClaimsIdentity&lt;/a&gt;，然后调用 &lt;code&gt;SignInAsync&lt;/code&gt; 方法。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;var claims = new List&amp;lt;Claim&amp;gt;
{
    new Claim(ClaimTypes.Name, user.Email),
    new Claim(&quot;FullName&quot;, user.FullName),
    new Claim(ClaimTypes.Role, &quot;Administrator&quot;),
};

var claimsIdentity = new ClaimsIdentity(
    claims, CookieAuthenticationDefaults.AuthenticationScheme);

var authProperties = new AuthenticationProperties
{
    //AllowRefresh = &amp;lt;bool&amp;gt;,
    // Refreshing the authentication session should be allowed.

    //ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(10),
    //cookie 的绝对过期时间，会覆盖ExpireTimeSpan的设置。

    //IsPersistent = true,
    //表示 cookie 是否是持久化的以便它在不同的 request 之间传送。设置了ExpireTimeSpan或ExpiresUtc是必须的。

    //IssuedUtc = &amp;lt;DateTimeOffset&amp;gt;,
    //  凭证认证的时间。

    //RedirectUri = &amp;lt;string&amp;gt;
    //http 跳转的时候的路径。
};

await HttpContext.SignInAsync(
    CookieAuthenticationDefaults.AuthenticationScheme, 
    new ClaimsPrincipal(claimsIdentity), 
    authProperties);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;SignInAsync&lt;/code&gt;方法创建一个加密过的 cookie 然后把他添加到当前的 response 中。没有设置AuthenticationScheme的话会使用默认的 scheme。&lt;/p&gt;
&lt;p&gt;加密是基于asp.net core 的&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/using-data-protection?view=aspnetcore-2.1#security-data-protection-getting-started&quot;&gt;Data Protection&lt;/a&gt;系统实现的，所以，如果程序是部署在多台机器或者做了负载均衡上的话，需要&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/overview?view=aspnetcore-2.1&quot;&gt;配置 data protection&lt;/a&gt;（和当年 asp.net 里面的类似。）&lt;/p&gt;
&lt;h3 id=&quot;登出&quot;&gt;登出&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SignOutAsync&lt;/code&gt;用来登出当前用户并且删除 cookie。代码如下。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;await HttpContext.SignOutAsync(
    CookieAuthenticationDefaults.AuthenticationScheme);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;登录和登出需要使用相同的方案名称。也就是一样的AuthenticationScheme。&lt;/p&gt;
&lt;h3 id=&quot;对后台的改变作出反应&quot;&gt;对后台的改变作出反应&lt;/h3&gt;
&lt;p&gt;当 cookie 被创建之后，它就成了身份标识的唯一来源。即使在后台禁用了当前用户，因为 已经分发的cookie 无法知晓，所以用户依旧可以保持登录状态直到 cookie 失效。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.cookies.cookieauthenticationevents.validateprincipal&quot;&gt;ValidatePrincipal&lt;/a&gt;事件可以用来拦截或者覆盖 cookie 的身份验证。这可以减少被收回权限的用户对系统损害的风险。可以通过如下方式实现这个功能。&lt;/p&gt;
&lt;p&gt;首先修改一下 SignInAsync 方法里面获取到的用户相关的 claim。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;var claims = new List&amp;lt;Claim&amp;gt;
{
    new Claim(ClaimTypes.Name, user.Email),
    new Claim(&quot;LastChanged&quot;, {数据库的值})//增加一个LastChanged，然后记录一下值
};

var claimsIdentity = new ClaimsIdentity(
    claims, 
    CookieAuthenticationDefaults.AuthenticationScheme);

await HttpContext.SignInAsync(
    CookieAuthenticationDefaults.AuthenticationScheme, 
    new ClaimsPrincipal(claimsIdentity));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后创建一个&lt;code&gt;CustomCookieAuthenticationEvents&lt;/code&gt;继承自&lt;code&gt;CookieAuthenticationEvents&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;

public class CustomCookieAuthenticationEvents : CookieAuthenticationEvents
{
    private readonly IUserRepository _userRepository;

    public CustomCookieAuthenticationEvents(IUserRepository userRepository)
    {
        // 从DI 里面获取用户相关的.
        _userRepository = userRepository;
    }

    public override async Task ValidatePrincipal(CookieValidatePrincipalContext context)
    {
        var userPrincipal = context.Principal;

        // 查找上面的LastChanged相关的claim.
        var lastChanged = (from c in userPrincipal.Claims
                           where c.Type == &quot;LastChanged&quot;
                           select c.Value).FirstOrDefault();

        if (string.IsNullOrEmpty(lastChanged) ||
            !_userRepository.ValidateLastChanged(lastChanged))//调用的ValidateLastChanged来判断这个lastChanged 相关的额 cookie是否是一个有效的cookie
        {
            context.RejectPrincipal();//拒绝这个 cookie

            await context.HttpContext.SignOutAsync(
                CookieAuthenticationDefaults.AuthenticationScheme);// 自动登出
        }
    }
    //其他的方法，都可以设置
    public override Task SignedIn(CookieSignedInContext context)
    {
        return base.SignedIn(context);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后通过&lt;code&gt;EventsType&lt;/code&gt;来调用这个设置，然后注入这个&lt;code&gt;CustomCookieAuthenticationEvents&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(options =&amp;gt;
    {
        options.EventsType = typeof(CustomCookieAuthenticationEvents);
    });

services.AddScoped&amp;lt;CustomCookieAuthenticationEvents&amp;gt;();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;考虑一种情况，如果说这个用户更新了之后不影响系统的安全，可以考虑替换&lt;code&gt;context.RejectPrincipal()&lt;/code&gt; 为&lt;code&gt;context.ReplacePrincipal&lt;/code&gt;，并且设置&lt;code&gt;context.ShouldRenew=true&lt;/code&gt;来无损的更新用户的principal。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;上面的实现方法会在每个请求的时候都触发，所以会对系统的性能造成一定的影响。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;持久化-cookie&quot;&gt;持久化 cookie&lt;/h3&gt;
&lt;p&gt;你可能想要持久化 cookie 让他可以在浏览器的不同进程之间使用。cookie 的持久化应该用类似在界面上显示“记住我”的复选框，然后让用户点击的方式来实现。其他类似的机制也行。&lt;/p&gt;
&lt;p&gt;下面的代码用来实现 cookie 持久化。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;await HttpContext.SignInAsync(
    CookieAuthenticationDefaults.AuthenticationScheme,
    new ClaimsPrincipal(claimsIdentity),
    new AuthenticationProperties
    {
        IsPersistent = true
    });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果 cookie 在浏览器关闭期间过期了，浏览器会在下次启动的时候自动删除 cookie。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.authenticationproperties?view=aspnetcore-2.0&quot;&gt;AuthenticationProperties&lt;/a&gt;在 &lt;code&gt;Microsoft.AspNetCore.Authentication&lt;/code&gt;命名空间里面。&lt;/p&gt;
&lt;h3 id=&quot;绝对过期时间&quot;&gt;绝对过期时间&lt;/h3&gt;
&lt;p&gt;可以用&lt;code&gt;ExpiresUtc&lt;/code&gt;来设置绝对过期时间，但必须同时设置&lt;code&gt;IsPersistent&lt;/code&gt;，否者这个这个参数会被忽略，同时，这个 cookie 只是当前回话有效。&lt;/p&gt;
&lt;p&gt;当在 SignInAsync 方法里面设置了&lt;code&gt;ExpiresUtc&lt;/code&gt;，它会覆盖&lt;code&gt;CookieAuthenticationOptions&lt;/code&gt;设置了的&lt;code&gt;ExpireTimeSpan&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面的代码设置了一个20min 有效期的持久化 cookie，其他有效期相关的设置都会被忽略。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;await HttpContext.SignInAsync(
    CookieAuthenticationDefaults.AuthenticationScheme,
    new ClaimsPrincipal(claimsIdentity),
    new AuthenticationProperties
    {
        IsPersistent = true,
        ExpiresUtc = DateTime.UtcNow.AddMinutes(20)
    });&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;最后就是感慨一下msdn-好强大&quot;&gt;最后就是感慨一下，msdn 好强大。&lt;/h3&gt;
</description>
<pubDate>Mon, 27 Aug 2018 17:21:00 +0000</pubDate>
<dc:creator>Sheldon_Lou</dc:creator>
<og:description>文章是msdn的官方文档，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sheldon-lou/p/9545726.html</dc:identifier>
</item>
<item>
<title>经典卷积神经网络结构——LeNet-5、AlexNet、VGG16 - wuliytTaotao</title>
<link>http://www.cnblogs.com/wuliytTaotao/p/9544625.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuliytTaotao/p/9544625.html</guid>
<description>&lt;p&gt;　　经典卷积神经网络的结构一般满足如下表达式：&lt;/p&gt;
&lt;p&gt;输出层 -&amp;gt; （卷积层+ -&amp;gt; 池化层？）+  -&amp;gt; 全连接层+&lt;/p&gt;
&lt;p&gt;上述公式中，“+”表示一个或者多个，“？”表示一个或者零个，如“卷积层+”表示一个或者多个卷积层，“池化层？”表示一个或者零个池化层。“-&amp;gt;”表示 forward 方向。&lt;/p&gt;
&lt;p&gt;　　下面将分别介绍 &lt;a href=&quot;http://www.cnblogs.com/wuliytTaotao/p/9544625.html#LeNet-5&quot;&gt;LeNet-5&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/wuliytTaotao/p/9544625.html#AlexNet&quot;&gt;AlexNet&lt;/a&gt; 和 &lt;a href=&quot;http://www.cnblogs.com/wuliytTaotao/p/9544625.html#VGG-16&quot;&gt;VGG-16&lt;/a&gt; 结构。&lt;/p&gt;

&lt;h2 id=&quot;LeNet-5&quot;&gt;1. LeNet-5（modern）&lt;/h2&gt;
&lt;h2&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1351564/201808/1351564-20180827204056354-1429986291.png&quot; alt=&quot;&quot; width=&quot;854&quot; height=&quot;196&quot;/&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;图 1  LeNet-5&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;1.1 LeNet-5 结构：&lt;/h3&gt;
&lt;p&gt;图片大小为 32×32×1，其中 1 表示为黑白图像，只有一个 channel。&lt;/p&gt;
&lt;p&gt;filter 大小 5×5，filter 深度（个数）为 6，padding 为 0， 卷积步长 $s=1$，输出矩阵大小为 28×28×6，其中 6 表示 filter 的个数。&lt;/p&gt;
&lt;p&gt;average pooling，filter 大小 2×2（即 $f=2$），步长 $s=2$，no padding，输出矩阵大小为 14×14×6。&lt;/p&gt;
&lt;p&gt;filter 大小 5×5，filter 个数为 16，padding 为 0， 卷积步长 $s=1$，输出矩阵大小为 10×10×16，其中 16 表示 filter 的个数。&lt;/p&gt;
&lt;p&gt;average pooling，filter 大小 2×2（即 $f=2$），步长 $s=2$，no padding，输出矩阵大小为 5×5×16。注意，在该层结束，需要将 5×5×16 的矩阵flatten 成一个 400 维的向量。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;全连接层（Fully Connected layer，FC）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;neuron 数量为 120。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;全连接层（Fully Connected layer，FC）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;neuron 数量为 84。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;全连接层，输出层&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;现在版本的 LeNet-5 输出层一般会采用 softmax 激活函数，在 LeNet-5 提出的论文中使用的激活函数不是 softmax，但其现在不常用。该层神经元数量为 10，代表 0～9 十个数字类别。（图 1 其实少画了一个表示全连接层的方框，而直接用 $\hat{y}$ 表示输出层。）&lt;/p&gt;

&lt;h3&gt;1.2 LeNet-5 一些性质：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;如果输入层不算神经网络的层数，那么 LeNet-5 是一个 7 层的网络。（有些地方也可能把 卷积和池化 当作一个 layer）&lt;/li&gt;
&lt;li&gt;LeNet-5 大约有 60,000 个参数。&lt;/li&gt;
&lt;li&gt;随着网络越来越深，图像的高度和宽度在缩小，与此同时，图像的 channel 数量一直在增加。&lt;/li&gt;
&lt;li&gt;现在常用的 LeNet-5 结构和 &lt;a title=&quot;Gradient-based learning applied to document recognition&quot; href=&quot;http://yann.lecun.com/exdb/publis/pdf/lecun-01a.pdf&quot; target=&quot;_blank&quot;&gt;Yann LeCun 教授在 1998 年论文&lt;/a&gt;中提出的结构在某些地方有区别，比如激活函数的使用，现在一般使用 ReLU 作为激活函数，输出层一般选择 softmax。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;AlexNet&quot;&gt;2. AlexNet&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1351564/201808/1351564-20180827231301025-1617508598.png&quot; alt=&quot;&quot; width=&quot;846&quot; height=&quot;324&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图 2  AlexNet&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;2.1 AlexNet 结构：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;输入层：图像大小为 227×227×3，其中 3 表示输入图像的 channel 数（R，G，B）为 3。&lt;/li&gt;
&lt;li&gt;卷积层：filter 大小 11×11，filter 个数 96，卷积步长 $s = 4$。（filter 大小只列出了宽和高，filter矩阵的 channel 数和输入图片的 channel 数一样，在这里没有列出）&lt;/li&gt;
&lt;li&gt;池化层：max pooling，filter 大小 3×3，步长 $s = 2$。&lt;/li&gt;
&lt;li&gt;卷积层：filter 大小 5×5，filter 个数 256，步长 $s = 1$，padding 使用 same convolution，即使得卷积层输出图像和输入图像在宽和高上保持不变。&lt;/li&gt;
&lt;li&gt;池化层：max pooling，filter 大小 3×3，步长 $s = 2$。&lt;/li&gt;
&lt;li&gt;卷积层：filter 大小 3×3，filter 个数 384，步长 $s = 1$，padding 使用 same convolution。&lt;/li&gt;
&lt;li&gt;卷积层：filter 大小 3×3，filter 个数 384，步长 $s = 1$，padding 使用 same convolution。&lt;/li&gt;
&lt;li&gt;卷积层：filter 大小 3×3，filter 个数 256，步长 $s = 1$，padding 使用 same convolution。&lt;/li&gt;
&lt;li&gt;池化层：max pooling，filter 大小 3×3，步长 $s = 2$；池化操作结束后，将大小为  6×6×256 的输出矩阵 flatten 成一个 9216 维的向量。&lt;/li&gt;
&lt;li&gt;全连接层：neuron 数量为 4096。&lt;/li&gt;
&lt;li&gt;全连接层：neuron 数量为 4096。&lt;/li&gt;
&lt;li&gt;全连接层，输出层：softmax 激活函数，neuron 数量为 1000，代表 1000 个类别。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2.2 AlexNet 一些性质：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;大约 60million 个参数；&lt;/li&gt;
&lt;li&gt;使用 ReLU 作为激活函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;VGG-16&quot;&gt;3. VGG-16&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1351564/201808/1351564-20180828000337456-1859663756.png&quot; alt=&quot;&quot; width=&quot;878&quot; height=&quot;387&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图 3  VGG-16&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3.1 VGG-16 结构：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;输入层&lt;/li&gt;
&lt;li&gt;&lt;span&gt;卷积层&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;卷积层&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;池化层&lt;/li&gt;
&lt;li&gt;&lt;span&gt;卷积层&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;卷积层&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;池化层&lt;/li&gt;
&lt;li&gt;&lt;span&gt;卷积层&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;卷积层&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;卷积层&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;池化层&lt;/li&gt;
&lt;li&gt;&lt;span&gt;卷积层&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;卷积层&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;卷积层&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;池化层&lt;/li&gt;
&lt;li&gt;&lt;span&gt;卷积层&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;卷积层&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;卷积层&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;池化层&lt;/li&gt;
&lt;li&gt;全连接层&lt;/li&gt;
&lt;li&gt;全连接层&lt;/li&gt;
&lt;li&gt;全连接层，输出层&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.2 VGG-16 一些性质：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;VGG-16 中的 16 表示整个网络中有 trainable 参数的层数为 16 层。（trainable 参数指的是可以通过 back-propagation 更新的参数）&lt;/li&gt;
&lt;li&gt;VGG-16 大约有 138million 个参数。&lt;/li&gt;
&lt;li&gt;VGG-16 中所有卷积层 filter 宽和高都是 3，步长为 1，padding 都使用 same convolution；所有池化层的 filter 宽和高都是 2，步长都是 2。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://mooc.study.163.com/learn/2001281004?tid=2001392030#/learn/content?type=detail&amp;amp;id=2001728691&amp;amp;cid=2001724511&quot; target=&quot;_blank&quot;&gt;Course 4 Convolutional Neural Networks by Anderw Ng&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《TensorFLow实战Google深度学习框架》&lt;/p&gt;

</description>
<pubDate>Mon, 27 Aug 2018 16:54:00 +0000</pubDate>
<dc:creator>wuliytTaotao</dc:creator>
<og:description>经典卷积神经网络的结构一般满足如下表达式：输出层 -&gt; （卷积层+ -&gt; 池化层？）+ -&gt; 全连接层+。上述公式中，“+”表示一个或者多个，“？”表示一个或者零个，如“卷积层+”表示一个或者多个卷</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuliytTaotao/p/9544625.html</dc:identifier>
</item>
<item>
<title>C#常见金额优选类型及其三种常用的取整方式 - 追逐时光</title>
<link>http://www.cnblogs.com/Can-daydayup/p/9545665.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Can-daydayup/p/9545665.html</guid>
<description>&lt;p&gt;&lt;span&gt;这两天一直在做一个商城后台的对账方面的工作，忽然发现C#真的有很多值的学习的东西：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、C#常用的三种取整方式（主要适用于double、decimal、float这一类型的数据）：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Math.Round():为四舍六入五取整
Math.ceilling():为向上取整（只要有小数存在都会加1）
Math.Floor():向下取整，有小数都会舍去&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;二、Decimal、double、float数据类型介绍：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;前言：之前在做金额计算的时候发现很多小数问题总是与实际金额有所偏差，还好是项目测试阶段要是等项目正式上线了，数量一大的话那就不可估量的损失呀，别看一单只有那么的几分钱但是多了的话那可不可估量的损失，之前一直是使用double进行计算而后来及时发现了bug改成了使用decimal进行金额数量之间的计算。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、Decimal数据类型：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-ttu-id=&quot;48d18-103&quot;&gt;　　保存有符号表示 96 位 （12 个字节） 整数变量 10 的幂缩放的数字的 128 位 （16 个字节） 值。 &lt;span data-ttu-id=&quot;48d18-104&quot;&gt;缩放因子指定数字的小数点; 右侧数它的范围介于 0 到 28。 &lt;span data-ttu-id=&quot;48d18-105&quot;&gt;小数位数为 0 （没有小数位），最大可能值为 + 79228162514264337593543950335 / (+ /-7.9228162514264337593543950335E + 28)。 &lt;span data-ttu-id=&quot;48d18-106&quot;&gt;带 28 个小数的最大值是 + /-7.9228162514264337593543950335，和的最小的非零值为 + /-0.0000000000000000000000000001 （+ /-1E-28)。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span data-ttu-id=&quot;48d18-108&quot;&gt;&lt;code&gt;　　Decimal&lt;/code&gt;数据类型提供大量的最大有效位数数。 &lt;span data-ttu-id=&quot;48d18-109&quot;&gt;它支持最多 29 个有效位，并且可表示值超出 7.9228 x 10 ^28。 &lt;span data-ttu-id=&quot;48d18-110&quot;&gt;它是特别适合于计算，如财务、，需要大量的数字，但不能容忍舍入误差。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;x-hidden-focus&quot; data-ttu-id=&quot;48d18-111&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt; 的默认值为 0。初始化方式：&lt;span class=&quot;hljs-keyword&quot;&gt;decimal myMoney = &lt;span class=&quot;hljs-number&quot;&gt;300.5m;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;x-hidden-focus&quot; data-ttu-id=&quot;48d18-111&quot;&gt;2、Double数据类型（双精准浮点型）：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;x-hidden-focus&quot;&gt;&lt;span class=&quot;x-hidden-focus&quot; data-ttu-id=&quot;2a7d1-103&quot;&gt;　　保留带符号的 IEEE 64 位 （8 字节） 双精度浮点数，从-1.79769313486231570 e + 308 到-的值的范围 4.94065645841246544 e-324 负值和 4.94065645841246544 e-324 1.79769313486231570 e + 308 到正值。 &lt;span class=&quot;x-hidden-focus&quot; data-ttu-id=&quot;2a7d1-104&quot;&gt;双精度数字存储实际数目的近似值。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-ttu-id=&quot;2a7d1-106&quot;&gt;&lt;code&gt;Double&lt;/code&gt;数据类型提供了大量的最大和最小可能大量度。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;x-hidden-focus&quot;&gt;&lt;span data-ttu-id=&quot;2a7d1-107&quot;&gt;&lt;code&gt;Double&lt;/code&gt; 的默认值为 0。初始化方式：double d=0.3D;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;x-hidden-focus&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;x-hidden-focus&quot;&gt;&lt;span&gt;3、Float数据类型（单精准浮点型）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-ttu-id=&quot;ef363-103&quot;&gt;&lt;code&gt;float&lt;/code&gt; 关键字表示存储 32 位浮点值的简单类型。 &lt;span data-ttu-id=&quot;ef363-104&quot;&gt;下表显示了 &lt;code&gt;float&lt;/code&gt; 类型的精度和大致范围。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-ttu-id=&quot;ef363-112&quot;&gt;默认情况下，赋值运算符右侧的实数被视为 &lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/double&quot; data-linktype=&quot;relative-path&quot;&gt;double&lt;/a&gt;。 &lt;span data-ttu-id=&quot;ef363-113&quot;&gt;因此，若要初始化浮点型变量，请使用后缀 &lt;code&gt;f&lt;/code&gt; 或 &lt;code&gt;F&lt;/code&gt;，如以下示例中所示：&lt;/span&gt;&lt;/span&gt;&lt;code class=&quot;lang-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;float x = &lt;span class=&quot;hljs-number&quot;&gt;3.5F;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-ttu-id=&quot;ef363-114&quot;&gt;如果不在前面的声明中使用后缀，则会收到编译错误，因为你正尝试将 &lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/double&quot; data-linktype=&quot;relative-path&quot;&gt;double&lt;/a&gt; 值存储到 &lt;code&gt;float&lt;/code&gt; 变量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;微软字符类型详解：&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/decimal&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/decimal&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;从小事做起，从点滴做起！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 27 Aug 2018 16:30:00 +0000</pubDate>
<dc:creator>追逐时光</dc:creator>
<og:description>这两天一直在做一个商城后台的对账方面的工作，忽然发现C#真的有很多值的学习的东西： 一、C#常用的三种取整方式（主要适用于double、decimal、float这一类型的数据）： 二、Decimal</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Can-daydayup/p/9545665.html</dc:identifier>
</item>
<item>
<title>14.0 native webview H5切换 - 佬贰</title>
<link>http://www.cnblogs.com/pythontest/p/9545624.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pythontest/p/9545624.html</guid>
<description>&lt;p&gt;在讲这章之前先说明一个问题，那就是 native webview 都是属于原生的...webview目前用的比较多的是谷歌内核和腾讯X5内核  H5是网页！&lt;/p&gt;


&lt;p&gt;&lt;span&gt;还是安卓市场&lt;/span&gt;---&lt;span&gt;直接写好脚本进入个人中心&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;点击热门活动下的一张图片即可进入&lt;/span&gt;&lt;span&gt;webview&lt;/span&gt;&lt;span&gt;页面！如图所示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180827234825432-509192876.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;用模拟器进入页面之后&lt;/span&gt;-&lt;span&gt;我们利用&lt;/span&gt;&lt;span&gt;uiautomator&lt;/span&gt;&lt;span&gt;看下！很明显这是一个&lt;/span&gt;&lt;span&gt;webview&lt;/span&gt;&lt;span&gt;页面，在这个页面上评论和分享都是定位不鸟的，您可以试一下！（安卓6.0+除外....这里就不管能不能定位，都先假装定位不鸟）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180827235019255-2130382465.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个时候直接打开电脑谷歌输入&lt;/span&gt; chrome://inspect/#devices&lt;span&gt;：会发现如下类容&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180827235050764-726808892.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这里注意了：如果你是真机操作安卓市场，进入这个&lt;/span&gt;webview&lt;span&gt;页面，你会发现，谷歌发打开之后，没有获取到内容！这是因为 安卓市场 它本身的&lt;/span&gt;&lt;span&gt;webview&lt;/span&gt;&lt;span&gt;的调试模式没有打开所以获取不到手机上的&lt;/span&gt;&lt;span&gt;webview&lt;/span&gt;&lt;span&gt;页面&lt;/span&gt;&lt;span&gt;....Genymotion&lt;/span&gt;&lt;span&gt;模拟器是经过大神处理了，才可以获取&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;这个记住就好。原理就没得讲了&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;境界还不够&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当然如果是自己公司的&lt;/span&gt;app&lt;span&gt;。直接让开发把&lt;/span&gt;&lt;span&gt;webview&lt;/span&gt;&lt;span&gt;的调试模式打开就好了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那现在就先讲模拟器：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;谷歌浏览器进入这个页面之后&lt;/span&gt;-&lt;span&gt;点击&lt;/span&gt;&lt;span&gt;inspect,&lt;/span&gt;&lt;span&gt;正确效果如下图所示：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180827235140622-637012943.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;但是你的肯定是一片空白，这个是因为第一次需要翻一下墙，才可以打开&lt;/span&gt;....&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在我们就可以定位了，那我们就从&lt;/span&gt;native&lt;span&gt;切换到&lt;/span&gt;&lt;span&gt;webview或者H5页面&lt;/span&gt;&lt;span&gt;，然后点击评论进入登录页面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先不做切换直接点击：提示找不到元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180827235231877-323003134.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;切换之后：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先print（list_page）--执行脚本，复制我需要切换的页面 -----然后才&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;写下一句脚本driver.switch_to.context('页面')&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180827235304900-405397668.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; appium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; selenium.webdriver.support.ui &lt;span&gt;import&lt;/span&gt;&lt;span&gt; WebDriverWait
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; selenium.webdriver.support &lt;span&gt;import&lt;/span&gt;&lt;span&gt; expected_conditions as EC
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; appium.webdriver.common.touch_action &lt;span&gt;import&lt;/span&gt; TouchAction &lt;span&gt;#&lt;/span&gt;&lt;span&gt;导入Touch Action类&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time,re,os
Start&lt;/span&gt;=&lt;span&gt;{}
Start[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;platformName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;设备型号  android或者ios&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;platformVersion&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5.1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;安卓设备版本号&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;deviceName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;192.168.176.101:5555&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;安卓设备名称&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\Users\Administrator\Desktop\xuexi\apk\anzhuoshichang_16793302.apk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;设备路径  pc电脑存放apk包的路径&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;上面的路径不推荐这种写法，但是目前先这么写！后续告诉大家正确的写法&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;appPackage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;com.hiapk.marketpho&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;包名&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;appActivity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;com.baidu.appsearch.LauncherActivity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;容器&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;noReset&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;           &lt;span&gt;#&lt;/span&gt;&lt;span&gt;是否重新安装app  True不重新安装&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;unicodeKeyboard&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;是否禁用手机键盘  True禁用手机输入法&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;resetKeyboard&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;是否启动appium自带键盘 True开始手机输入法&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;automationName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;uiautomator2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;可选模式  本教程默认 Uiautomator2&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;newCommandTimeout&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;400&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;超时时间（s）&lt;/span&gt;
driver = webdriver.Remote(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://127.0.0.1:4723/wd/hub&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,Start)
driver.implicitly_wait(&lt;/span&gt;10)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;隐式等待十秒&lt;/span&gt;
time.sleep(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;上面还是原来的味道&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;先找到安卓市场上的webview页面---在个人中心里面有一个&lt;/span&gt;
head=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;com.hiapk.marketpho:id/person_center_btn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
driver.find_element_by_id(head).click()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;点击头像图标进入个人中心&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;点击个人中心/热门活动下的第一张图片&lt;/span&gt;
driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;com.hiapk.marketpho:id/entry_left&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).click()
time.sleep(&lt;/span&gt;3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;切换webview&lt;/span&gt;
list_page=driver.contexts &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取所有页面返回一个list&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(list_page) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;打印list&lt;/span&gt;
driver.switch_to.context(list_page[1]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;切换到webview页面&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(driver.current_context) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取当前的环境&lt;/span&gt;
driver.find_element_by_xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/html/body/div[5]/div/div/div/div[1]/span[2]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).click()&lt;span&gt;#&lt;/span&gt;&lt;span&gt;点击评论&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;如果是真机呢：大家会发现我这款模拟器既没有下载谷歌，安卓市场的&lt;/span&gt;webview&lt;span&gt;调试模式也没有打开，但是就是可以操作！&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用真机操作&lt;/span&gt;webview&lt;span&gt;页面：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1.&lt;span&gt;手机打开调试模式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;span&gt;手机上下载谷歌浏览器，版本建议大于&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;span&gt;软件&lt;/span&gt;&lt;span&gt;webvewi&lt;/span&gt;&lt;span&gt;调试模式打开&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4.pc&lt;span&gt;上的&lt;/span&gt;&lt;span&gt;chromedriver&lt;/span&gt;&lt;span&gt;与&lt;/span&gt;&lt;span&gt;webview&lt;/span&gt;&lt;span&gt;使用的谷歌版本一致&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;5.&lt;span&gt;如果软件使用的是腾讯&lt;/span&gt;&lt;span&gt;X5&lt;/span&gt;&lt;span&gt;内核，那么需要进入微信任意输入框输入&lt;/span&gt;http://&lt;em&gt;debugx5&lt;/em&gt;.qq.com&lt;span&gt;打开&lt;/span&gt;TBS调试模式&lt;/p&gt;

&lt;p&gt;&lt;span&gt;第一个点，如果手机调试模式不打开&lt;/span&gt;----手机都获取不到-不存在自动化了&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第二个点，手机上如果没有写下载谷歌浏览器&lt;/span&gt;--webview页面是无法在谷歌上展示的&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第三个点，软件&lt;/span&gt;webview调试模式未打开，pc端谷歌上不会展示软件里面的webview页面，如图所示：&lt;/p&gt;
&lt;p&gt;Custom Phone是模拟器     Redmi Note 5A是我的红米5A安卓测试机&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180827235748615-750298364.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第四个点，&lt;/span&gt;pc上的chromedriver与webview版本不一致，会导致切换webview的时候切换不过去，长时间后报错，提示版本问题，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么&lt;/span&gt;chromedriver这个用什么版本呢--第三点中的图片可以看到模拟器的是谷歌39版本的，把chromedriver（chromedriver对应版本及下载地址：https://blog.csdn.net/cz9025/article/details/70160273/）换成对应39版本的就可以切换成功了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180827235832656-831465162.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果是&lt;/span&gt;npm&lt;span&gt;安装的默认地址应该是在：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;C:\Users\Administrator\AppData\Roaming\npm\node_modules\appium\node_modules\appium-chromedriver\chromedriver\win&lt;/p&gt;

&lt;p&gt;&lt;span&gt;其他方式安装的或者更改路径了的，自行寻找即可&lt;/span&gt;----&lt;span&gt;然后下载对应软件内核版本的驱动替换即可，因为安卓市场的webview调试模式没打开这里就不做演示了，和模拟器切换的方式一样，您可以用自家公司的app感受一下！&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;另外&lt;/span&gt;WEBIVEW &lt;span&gt;安卓&lt;/span&gt;&lt;span&gt;6.0&lt;/span&gt;&lt;span&gt;以上，是可以直接使用&lt;/span&gt;&lt;span&gt;uiautomator&lt;/span&gt;&lt;span&gt;定位元素的，&lt;/span&gt;&lt;span&gt;webview&lt;/span&gt;&lt;span&gt;是原生页面，安卓&lt;/span&gt;&lt;span&gt;6.0+&lt;/span&gt;&lt;span&gt;之后是支持把&lt;/span&gt;&lt;span&gt;webview&lt;/span&gt;&lt;span&gt;页面解析成若干个&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;，当然如果是&lt;/span&gt;&lt;span&gt;H5&lt;/span&gt;&lt;span&gt;的网页，这里就必须用谷歌去定位元素了  如图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180827235921120-426125345.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;pre&quot;&gt;&lt;span&gt;这种直接根据&lt;/span&gt;driver.find_element_by_xpath('//*[@text=&quot;评论&quot;]').click()&lt;span&gt;定位就可以了&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 27 Aug 2018 16:04:00 +0000</pubDate>
<dc:creator>佬贰</dc:creator>
<og:description>在讲这章之前先说明一个问题，那就是 native webview 都是属于原生的...webview目前用的比较多的是谷歌内核和腾讯X5内核 H5是网页！ 还是安卓市场 直接写好脚本进入个人中心/点击</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pythontest/p/9545624.html</dc:identifier>
</item>
<item>
<title>MySQL InnoDB 修改表列Online DDL - 悠悠i</title>
<link>http://www.cnblogs.com/youyoui/p/9545621.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/youyoui/p/9545621.html</guid>
<description>&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;一般来说数据库结构一经设计，不能轻易更改，因为更改&lt;code&gt;DDL&lt;/code&gt;（Data Definition Language）操作代价很高，所以在进行数据库结构设计时需要谨慎。&lt;/p&gt;
&lt;p&gt;但是业务发展是未知的，特别是那些变化很大的业务，所以不可避免的需要修改数据库结构，本文主要对&lt;strong&gt;MySQL5.6+ InnoDB存储引擎&lt;/strong&gt;字段的修改进行探讨。&lt;/p&gt;
&lt;p&gt;对于不同的场景，所使用的方式也会大不相同，尤其是修改百万级，千万级的表字段时，要特别注意。&lt;/p&gt;
&lt;h3 id=&quot;ddl操作类型&quot;&gt;DDL操作类型&lt;/h3&gt;
&lt;p&gt;数据库结构的DDL操作总体来说有如下几种：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;索引操作（Index Operations）&lt;/li&gt;
&lt;li&gt;键操作（Primary Key Operations）&lt;/li&gt;
&lt;li&gt;列操作（Column Operations）&lt;/li&gt;
&lt;li&gt;外键操作（Foreign Key Operations）&lt;/li&gt;
&lt;li&gt;表操作（Table Operations）&lt;/li&gt;
&lt;li&gt;分区操作（Partitioning Operations）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;本文主要对列操作（Column Operations）进行探讨，其他更详细的信息&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/innodb-create-index-overview.html&quot;&gt;参考MySQL官方英文文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;online-ddl操作&quot;&gt;Online DDL操作&lt;/h2&gt;
&lt;h3 id=&quot;简述&quot;&gt;简述&lt;/h3&gt;
&lt;p&gt;本文探讨的是&lt;code&gt;Online DDL&lt;/code&gt;操作，MySQL5.6以上支持，相较于一般&lt;code&gt;DDL&lt;/code&gt;，它在实现修改表结构的同时，依然允许&lt;code&gt;DML&lt;/code&gt;操作（SELECT,INSERT,UPDATE,DELETE）。&lt;/p&gt;
&lt;p&gt;Online DDL主要有两种方式：&lt;code&gt;IN PLACE&lt;/code&gt;和&lt;code&gt;COPY&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;IN PLACE&lt;/code&gt;：直接在原表上进行修改，相比于&lt;code&gt;COPY&lt;/code&gt;方式可以避免重建表带来的IO和CPU消耗，有更好的性能并支持并发DML操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COPY&lt;/code&gt;：创建修改后的临时表，然后将原表的数据复制到临时表，执行期间不允许并发&lt;code&gt;DML&lt;/code&gt;写操作，否则会导致脏数据。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在MySQL之前，我们一般使用&lt;code&gt;COPY&lt;/code&gt;的方式，借助临时表，手动修改。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要注意的是：并不是所有的Online DDL操作都支持&lt;code&gt;IN PLACE&lt;/code&gt;方式。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;mysql-innodb数据存储方式&quot;&gt;MySQL InnoDB数据存储方式&lt;/h3&gt;
&lt;p&gt;在MySQL中，一张表的数据分为两种，一种是结构数据，记录者站表包含哪些字段，哪些数据类型，另一种是记录数据，保存每天记录的原始数据。它们是用不同的文件进行存储的。&lt;/p&gt;
&lt;p&gt;在mysql指定的&lt;code&gt;data_dir&lt;/code&gt;数据存储目录可以看到每张表对应一个&lt;code&gt;frm&lt;/code&gt;文件，这个文件就是存放着表的结构数据。&lt;/p&gt;
&lt;h3 id=&quot;inplace方式详细介绍&quot;&gt;&lt;code&gt;INPLACE&lt;/code&gt;方式详细介绍&lt;/h3&gt;
&lt;p&gt;对于添加索引，添加/删除列、修改列&lt;code&gt;NULL/NOT NULL&lt;/code&gt;属性等操作，需要修改MySQL内部的数据记录，对这类操作进行&lt;code&gt;Online DDL&lt;/code&gt;操作时，需要重建表（rebuild）。&lt;/p&gt;
&lt;p&gt;相反，对于删除索引，修改列默认值，修改列名等操作不需要修改MySQL内部的数据记录，只需要修改结构数据&lt;code&gt;frm&lt;/code&gt;文件，而不需要重建表（no-rebuild）。&lt;/p&gt;
&lt;p&gt;另外，在进行&lt;code&gt;Online DDL&lt;/code&gt;操作期间，不同的操作可以选择不同的锁机制。主要有以下几种锁机制：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;LOCK=DEFAULT&lt;/code&gt;：默认方式，MySQL自行判断使用哪种LOCK模式，尽量不锁表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOCK=NONE&lt;/code&gt;：无锁：允许&lt;code&gt;Online DDL&lt;/code&gt;期间进行并发读写操作。如果&lt;code&gt;Online DDL&lt;/code&gt;操作不支持对表的继续写入，则DDL操作失败，对表修改无效&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOCK=SHARED&lt;/code&gt;：共享锁：&lt;code&gt;Online DDL&lt;/code&gt;操作期间堵塞写入，不影响读取&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOCK=EXCLUSIVE&lt;/code&gt;：排它锁：&lt;code&gt;Online DDL&lt;/code&gt;操作期间不允许对锁表进行任何操作&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;无论任何模式下，&lt;code&gt;Online DDL&lt;/code&gt;操作开始都需要一小段时间的排它锁来准备环境，用于等待该表上的其他操作执行完毕，此时&lt;code&gt;Online DDL&lt;/code&gt;操作会提示：waiting meta data lock。&lt;/p&gt;
&lt;p&gt;同样在&lt;code&gt;Online DDL&lt;/code&gt;操作结束之前，也会等待&lt;code&gt;Online DDL&lt;/code&gt;操作期间的事务完成，此时也会出现排它锁。&lt;/p&gt;
&lt;p&gt;所以需要确保在执行&lt;code&gt;Online DDL&lt;/code&gt;之前和执行期间没有大型&lt;code&gt;DML&lt;/code&gt;事务占用该表，否则会出现长时间锁表甚至死锁。&lt;/p&gt;
&lt;h3 id=&quot;online-ddl各种列操作情况&quot;&gt;Online DDL各种列操作情况&lt;/h3&gt;
&lt;p&gt;从上面的介绍可以看出，不同的DDL操作，执行的具体细节大不相同，详见下表：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Adding a column&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes*&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Dropping a column&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Renaming a column&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes*&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Reordering columns&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Setting a column default value&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Changing the column data type&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Extending VARCHAR column size&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Dropping the column default value&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Changing the auto-increment value&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No*&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Making a column NULL&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes*&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Making a column NOT NULL&lt;/td&gt;
&lt;td&gt;Yes*&lt;/td&gt;
&lt;td&gt;Yes*&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Modifying the definition of an ENUM or SET column&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;其中各列指标解释如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;In Place&lt;/code&gt;：是否支持&lt;code&gt;In Place&lt;/code&gt;方式，Yes为优选方案&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Re Builds Table&lt;/code&gt;：是否需要重建表，不重建（No）为优选方案&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Permits Concurrent DML&lt;/code&gt;：是否允许并发&lt;code&gt;DML&lt;/code&gt;操作，允许（Yes）为优选方案&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Only Modifies Metadata&lt;/code&gt;：是否值修改表结构数据，即只修改&lt;code&gt;frm&lt;/code&gt;文件&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;列操作方式&quot;&gt;列操作方式&lt;/h2&gt;
&lt;p&gt;下面列举常用的列操作的执行方法以及注意事项。&lt;/p&gt;
&lt;h3 id=&quot;添加列adding-a-column&quot;&gt;添加列（Adding a column）&lt;/h3&gt;
&lt;p&gt;为表添加一列的方法如下：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;ALTER TABLE tbl_name 
ADD COLUMN column_name column_definition, ALGORITHM=INPLACE, LOCK=NONE;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加列时如果附加&lt;code&gt;auto increment&lt;/code&gt;选项，则不允许并发DML操作，此操作会重建表，开销巨大。最优化选项是指定：&lt;code&gt;ALGORITHM=INPLACE, LOCK=SHARED&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;删除列dropping-a-column&quot;&gt;删除列（Dropping a column）&lt;/h3&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;ALTER TABLE tbl_name 
DROP COLUMN column_name, ALGORITHM=INPLACE, LOCK=NONE;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;重命名列名renaming-a-column&quot;&gt;重命名列名（Renaming a column）&lt;/h3&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;ALTER TABLE tbl 
CHANGE old_col_name new_col_name data_type, ALGORITHM=INPLACE, LOCK=NONE;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果你的目的只是修改列名，一定要保证修改后的列的数据类型，&lt;code&gt;NULL/NOT NULL&lt;/code&gt;等属性和原来的列一致。&lt;/p&gt;
&lt;p&gt;该操作建议指定&lt;code&gt;INPLACE&lt;/code&gt;方式，这样只会更新&lt;code&gt;frm&lt;/code&gt;文件，即使修改的列名是外键。&lt;/p&gt;
&lt;h3 id=&quot;重新排列列顺序reordering-columns&quot;&gt;重新排列列顺序（Reordering columns）&lt;/h3&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;ALTER TABLE tbl_name 
MODIFY COLUMN col_name column_definition FIRST, ALGORITHM=INPLACE, LOCK=NONE;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;该操作费力不讨好，不建议对数据量超过百万级的大表进行操作，它会对表重建。&lt;/p&gt;
&lt;h3 id=&quot;修改列数据类型changing-the-column-data-type&quot;&gt;修改列数据类型（Changing the column data type）&lt;/h3&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;ALTER TABLE tbl_name 
CHANGE c1 c1 BIGINT, ALGORITHM=COPY;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改数据类型只支持&lt;code&gt;COPY&lt;/code&gt;方式。&lt;/p&gt;
&lt;h3 id=&quot;修改列的默认值setting-a-column-default-value&quot;&gt;修改列的默认值（Setting a column default value）&lt;/h3&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;ALTER TABLE tbl 
ALTER COLUMN col DROP DEFAULT, ALGORITHM=INPLACE, LOCK=NONE;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;修改列的自增熟悉changing-the-auto-increment-value&quot;&gt;修改列的自增熟悉（Changing the auto-increment value）&lt;/h3&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;ALTER TABLE table 
AUTO_INCREMENT=next_value, ALGORITHM=INPLACE, LOCK=NONE;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;该操作用于修改下一条记录的自增值，只会修改内存中的值，而不会修改数据文件。&lt;/p&gt;
&lt;p&gt;对于分布式系统，经常需要手动制定开始自增的值，可以使用该方法。&lt;/p&gt;
&lt;h3 id=&quot;修改nullnot-null属性making-a-column-null-and-making-a-column-not-null&quot;&gt;修改NULL/NOT NULL属性（Making a column NULL and Making a column NOT NULL）&lt;/h3&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;-- Making a column NULL
ALTER TABLE tbl_name 
MODIFY COLUMN column_name data_type NULL, ALGORITHM=INPLACE, LOCK=NONE;

-- Making a column NOT NULL
ALTER TABLE tbl_name 
MODIFY COLUMN column_name data_type NOT NULL, ALGORITHM=INPLACE, LOCK=NONE;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因为设置列为&lt;code&gt;NULL&lt;/code&gt;时，该列在原有数据类型空间的基础上增加一个直接来存储是否为&lt;code&gt;NULL&lt;/code&gt;，所以需要重建表。&lt;/p&gt;
&lt;p&gt;当把&lt;code&gt;NULL&lt;/code&gt;的列设为&lt;code&gt;NOT NULL&lt;/code&gt;时，如果有记录为&lt;code&gt;NULL&lt;/code&gt;，则该操作会失败。&lt;/p&gt;
&lt;h3 id=&quot;修改enum或set的定义modifying-the-definition-of-an-enum-or-set-column&quot;&gt;修改ENUM或SET的定义（Modifying the definition of an ENUM or SET column）&lt;/h3&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;CREATE TABLE t1 (c1 ENUM('a', 'b', 'c'));
ALTER TABLE t1 MODIFY COLUMN c1 ENUM('a', 'b', 'c', 'd'), ALGORITHM=INPLACE, LOCK=NONE;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;该方式用于修改一个枚举或者集合的值，对于在尾部增加枚举或者集合值的情况，如果增加之后存储空间没有变化，就可以使用IN PLACE方式。&lt;/p&gt;
&lt;p&gt;反之如果存储空间发生变化，如从2个字节便到三个字节，或者在中间添加值，那么就需要&lt;code&gt;COPY&lt;/code&gt;的方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于那种值的个数不确定或者枚举名称变化的场景，建议使用&lt;code&gt;tinyint&lt;/code&gt;代替&lt;code&gt;ENUM&lt;/code&gt;或者&lt;code&gt;SET&lt;/code&gt;来进行存储。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;实际中如何执行ddl修改&quot;&gt;实际中如何执行DDL修改&lt;/h2&gt;
&lt;p&gt;综合上述，可以得出常用的三种方法。&lt;/p&gt;
&lt;h3 id=&quot;online-ddl&quot;&gt;Online DDL&lt;/h3&gt;
&lt;p&gt;通过执行ALTER等命令直接修改。适用的情况如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;表中数据量较小，低于百万级别&lt;/li&gt;
&lt;li&gt;需要MySQL5.6+以上&lt;/li&gt;
&lt;li&gt;能够忍受长时间不提供服务的百万级表，需要一小时以内&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;手动修改frm文件&quot;&gt;手动修改&lt;code&gt;frm&lt;/code&gt;文件&lt;/h3&gt;
&lt;p&gt;该方式适用于不支持&lt;code&gt;Online DDL&lt;/code&gt;的场景，只能执行&lt;code&gt;Only Modifies Metadata&lt;/code&gt;部分的&lt;code&gt;DDL&lt;/code&gt;修改。修改方法如下：&lt;/p&gt;
&lt;p&gt;首先找到MySQL数据存储路径，可从进程信息中查看：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;# 查找mysql进程信息
ps aux|grep mysql&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查到当前数据库的数据存储目录，然后cd到所看到的&lt;code&gt;frm&lt;/code&gt;表结构文件目录，备份需要处理的&lt;code&gt;frm&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;在数据库创建一个类似的数据表，然后修改该表，再把该表的&lt;code&gt;frm&lt;/code&gt;文件和原来的表的&lt;code&gt;frm&lt;/code&gt;文件替换。&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;-- mysql中创建临时表
create table tbl_temp like tbl;
 
-- 修改临时表
ALTER TABLE tbl
ADD COLUMN `count`  bigint(20) NOT NULL DEFAULT 0 COMMENT '';
-- 锁表
flush tables with write lock;
 
-- 备份源文件
cp tbl.frm tbl.frm.bak
# 替换数据结构文件frm
cp tbl_temp.frm tbl.frm
 
-- mysql移除读锁
unlock tables;
 
-- 测试修改是否成功
select * from tbl limit 1;
 
-- 如果出现错误，导致连接丢失等，可以回滚
flush tables with write lock;
cp tbl.frm.bak tbl.frm
unlock tables;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;手动执行copy方式&quot;&gt;手动执行COPY方式&lt;/h3&gt;
&lt;p&gt;通过复制临时表，然后修改临时表，再把原表中的数据复制到临时表中，并切换临时表和原表。&lt;/p&gt;
&lt;p&gt;当需要对原表中数据进行额外的处理时，只能选择此方式，该方式会造成大量的磁盘IO，并且执行期间不允许写入。&lt;/p&gt;
&lt;p&gt;对于千万级别的表，可以分批进行复制，使用一些策略来允许迁移过程中的写入。&lt;/p&gt;
&lt;h3 id=&quot;执行修改时需要考虑的因素&quot;&gt;执行修改时需要考虑的因素&lt;/h3&gt;
&lt;p&gt;首先需要对执行的表数据量进行确认，如果数据量超过百万级甚至千万级，需要检查下面的事项：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当前系统内存容量充足&lt;/li&gt;
&lt;li&gt;当前系统内存使用情况良好&lt;/li&gt;
&lt;li&gt;当前系统CPU使用空闲&lt;/li&gt;
&lt;li&gt;执行修改期间是否允许停止服务&lt;/li&gt;
&lt;li&gt;是否有其他关联的数据库，保证数据一致性&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果有一些遗漏的点，欢迎大家补充，这样也能够在以后遇到类似问题的时候提供参考。&lt;/p&gt;
&lt;p&gt;文章已经同步到个人博客：&lt;a href=&quot;http://uusama.com/866.html&quot; class=&quot;uri&quot;&gt;http://uusama.com/866.html&lt;/a&gt;，过两天把其他的Online DDL操作测试之后再加上。（个把月没写文章了，已然懒得像一坨咸鱼）&lt;/p&gt;
</description>
<pubDate>Mon, 27 Aug 2018 16:03:00 +0000</pubDate>
<dc:creator>悠悠i</dc:creator>
<og:description>你有没有遇到在业务中让你添加几个字段，等你一看表，那家伙几百万甚至千万的数据，这个时候修改表结构不得不考虑更多的问题。本文从各个方面介绍执行表结构尤其表列修改的时候需要注意的一些细节。希望能够给你带来</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/youyoui/p/9545621.html</dc:identifier>
</item>
<item>
<title>xhprof扩展安装与使用 - 才鱼</title>
<link>http://www.cnblogs.com/renzhicai/p/9545614.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/renzhicai/p/9545614.html</guid>
<description>&lt;p class=&quot;toc&quot;&gt;目录&lt;/p&gt;
&lt;h3 id=&quot;一xhprof扩展安装步骤&quot;&gt;一、xhprof扩展安装步骤&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;xhprof是PHP的一个扩展，最好也直接安装上graphviz图形绘制工具（用于xhprof分析结果以直观的图形方式显示），废话不多说，直奔正题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;安装&quot;&gt;1、安装&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;PHP5版本的安装&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;wget http://pecl.php.net/get/xhprof-0.9.4.tgz
tar -zxvf xhprof-0.9.4.tgz 
cd xhprof-0.9.4
cd extension/
phpize
./configure
make
make install&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;PHP7版本的安装&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;unzip xhprof-php7.zip 
cd xhprof-php7/extension/
phpize 
./configure --with-php-config=/usr/local/php/bin/php-config 
make
make install&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;修改php.ini配置文件&quot;&gt;2、修改php.ini配置文件&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;在php.ini配置文件中追加下面配置，并创建目录&lt;code&gt;/home/wwwroot/default/xhprof_data&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[xhprof]
extension = xhprof.so
// xhprof分析结果文件存放根目录
xhprof.output_dir = /home/wwwroot/default/xhprof_data&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;添加一个环境变量xhprof_root_path&quot;&gt;3、添加一个环境变量&lt;code&gt;XHPROF_ROOT_PATH&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;为了后期每个项目都能使用xhprof来进行性能分析，建议给PHP加一个环境变量，这样之后，在任何项目代码里都可以很方便的调用xhprof来分析性能瓶颈，请执行如下操作：&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim /usr/local/php/etc/php-fpm.conf
env[XHPROF_ROOT_PATH]=/usr/local/php/include/xhprof/&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;将xhprof核心源代码复制到上述xhprof_root_path环境变量所指定的目录下&quot;&gt;4、将xhprof核心源代码复制到上述&lt;code&gt;XHPROF_ROOT_PATH&lt;/code&gt;环境变量所指定的目录下&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;cp -r xhprof_lib /usr/local/php/include/xhprof/xhprof_lib&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;将下面两个目录复制到xhprof_data的同级目录下最好都放到web根目录下&quot;&gt;5、将下面两个目录复制到&lt;code&gt;xhprof_data&lt;/code&gt;的同级目录下（最好都放到web根目录下）&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;查看分析结果文件有用，如下图所示：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/640833/201808/640833-20180827222404514-333898976.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//执行
cp -r xhprof_html /home/wwwroot/default/xhprof_html
cp -r xhprof_lib /home/wwwroot/default/xhprof_lib

//改变xhprof_data目录拥有者，为了浏览器访问时能在xhprof_data目录下写入文件
chown -R www:www xhprof_data&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;访问xhprof根目录&quot;&gt;6、访问xhprof根目录&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;配置demo.com域名根目录为&lt;code&gt;/home/wwwroot/default/&lt;/code&gt;，则可访问如下链接查看xhprof结果分析根目录&lt;code&gt;http://demo.com/xhprof_data/&lt;/code&gt;，如下图所示：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/640833/201808/640833-20180827215104714-1468363886.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;形象化的查看分析结果&quot;&gt;7、形象化的查看分析结果&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;安装图形绘制工具，后面的分析结果可以通过该工具以图形显示,更直观&lt;br/&gt;执行安装命令：&lt;code&gt;yum install graphviz&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;二xhprof的使用&quot;&gt;二、xhprof的使用&lt;/h3&gt;
&lt;h4 id=&quot;xhprof性能分析小demo&quot;&gt;1、xhprof性能分析小demo&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;下面写的三种方式实现阶乘的代码&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?php

xhprof_enable(XHPROF_FLAGS_CPU | XHPROF_FLAGS_MEMORY);

$n = 5;

echo jc($n);
echo '&amp;lt;br&amp;gt;';

echo jc($n);
echo '&amp;lt;br&amp;gt;';

echo jc($n);
echo '&amp;lt;br&amp;gt;';

function jc($n){
    if($n == 1){
        return 1;
    }
    
    return $n * jc($n-1);
}

function jc2($n){
    $m = 1;
    for($i=1; $i&amp;lt;=$n; $i++){
        $m = $m * $i;
    }
    
    return $m;
}

function jc3($n){
    $arr = [];
    $arr[1] = 1;
    
    for($i = 2; $i&amp;lt;=$n; $i++){
        $arr[$i] = $i * $arr[$i-1];
    }
    
    return $arr[$n];
}


$data = xhprof_disable();
//$_SERVER['XHPROF_ROOT_PATH'] 这就是第三步添加的那个环境变量
include_once $_SERVER['XHPROF_ROOT_PATH'] . &quot;xhprof_lib/utils/xhprof_lib.php&quot;;
include_once $_SERVER['XHPROF_ROOT_PATH'] . &quot;xhprof_lib/utils/xhprof_runs.php&quot;;
$x = new XHProfRuns_Default();

//拼接文件名
$xhprofFilename = date('Ymd_His');

//print_r($data);die;//此处的打印数据看起来非常不直观，所以需要安装yum install graphviz 图形化界面显示,更直观
$x-&amp;gt;save_run($data, $xhprofFilename);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;上述小demo执行后，会在xhprof_data目录下生成一个分析结果保存文件，网页端访问结果文件，如下图：&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/640833/201808/640833-20180827232048168-722724078.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/640833/201808/640833-20180827232140972-1748772709.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;当我在点&lt;code&gt;[View Full Callgraph]&lt;/code&gt;查看图形分析界面时，问题出现了，如下图：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/640833/201808/640833-20180827233038500-56265885.png&quot;/&gt;&lt;br/&gt;好在网上查到原因是，php配置文件中有个disable_functions禁用函数列表，把里面的&lt;code&gt;proc_open&lt;/code&gt;去掉即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;图形分析结果显示如下&lt;/em&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/640833/201808/640833-20180827233623842-527533615.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;实际项目中该如何引入xhprof&quot;&gt;2、实际项目中该如何引入xhprof&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;请参考如下截图所示引入思路（在项目控制器基类构造方法和析构方法里做手脚），思路技巧仅供学习参考，如下图：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/640833/201808/640833-20180827220650910-567841418.png&quot;/&gt;&lt;br/&gt;&lt;strong&gt;下面是我在项目（以Yii2为框架）下引入xhprof代码一览&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;php&quot;&gt;
&lt;code&gt;&amp;lt;?php
namespace backend\component;

use Yii;
use common\component\baseController;

class backendBaseController extends baseController
{
    public $layout = &quot;/content&quot;;
    public $enableCsrfValidation = false;

    public static $profiling = 0;

    public function init(){
        parent::init();
        
        self::$profiling = 1;// !(mt_rand() % 9);
        if  (self::$profiling) {
            xhprof_enable(XHPROF_FLAGS_CPU | XHPROF_FLAGS_MEMORY);
        }
    }

    public function __destruct()
    {
        if(self::$profiling){
            $data = xhprof_disable();
            //$_SERVER['XHPROF_ROOT_PATH'] 该环境变量由第3步得来
            include_once $_SERVER['XHPROF_ROOT_PATH'] . &quot;/xhprof_lib/utils/xhprof_lib.php&quot;;
            include_once $_SERVER['XHPROF_ROOT_PATH'] . &quot;/xhprof_lib/utils/xhprof_runs.php&quot;;
            $x = new XHProfRuns_Default();

            //当前路由
            $routeName = Yii::$app-&amp;gt;requestedRoute;
            //路由为空，则说明是首页
            if (empty($routeName)){
                $routeName = Yii::$app-&amp;gt;defaultRoute;
            }

            //拼接xhprof分析结果保存文件名
            $xhprofFilename = str_replace('/', '_', $routeName).'_'.date('Ymd_His');
            $x-&amp;gt;save_run($data, $xhprofFilename);
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;xhprof是一个分析PHP代码性能瓶颈，提高PHP代码效率的有利工具,通过xhprof，可以看到代码慢在哪里，哪里还有优化的空间等等。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后分享一个关于&lt;code&gt;xhprof&lt;/code&gt;不错的资料 &lt;a href=&quot;https://pan.baidu.com/s/1EPuKunXlI1gvmtLICHyCxw&quot;&gt;ipc2015-xhprof.pdf&lt;/a&gt; 下载链接：&lt;a href=&quot;https://pan.baidu.com/s/1EPuKunXlI1gvmtLICHyCxw&quot; class=&quot;uri&quot;&gt;https://pan.baidu.com/s/1EPuKunXlI1gvmtLICHyCxw&lt;/a&gt; 密码：11p0&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000003509917&quot;&gt;1.使用XHProf查找PHP性能瓶颈&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_5f54f0be0102v995.html&quot;&gt;2.PHP性能分析工具 xhprof&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.04007.cn/article/340.html&quot;&gt;3.xhprof安装了graphviz还报错failed to execute cmd &quot; dot -Tpng&quot;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 27 Aug 2018 15:58:00 +0000</pubDate>
<dc:creator>才鱼</dc:creator>
<og:description>[TOC] 一、xhprof扩展安装步骤 xhprof是PHP的一个扩展，最好也直接安装上graphviz图形绘制工具（用于xhprof分析结果以直观的图形方式显示），废话不多说，直奔正题。 1、安装</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/renzhicai/p/9545614.html</dc:identifier>
</item>
<item>
<title>『发呆』.Net 2.0 ~ .Net 4.0 所实现了那些底层 - InkFx</title>
<link>http://www.cnblogs.com/shuxiaolong/p/DotNetFx_20_40.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shuxiaolong/p/DotNetFx_20_40.html</guid>
<description>&lt;p&gt;随着时间的推移，程序越写越大，代码越写越少。&lt;/p&gt;
&lt;p&gt;今天突然发呆，就想比较全面的汇总一下 .Net 2.0 和 .Net 4.0 都实现的功能。&lt;/p&gt;

&lt;p&gt;.Net 2.0 的大部分常见程序集 （已经过滤掉了一部分和常见业务无关的程序集）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201808/166267-20180827221229425-199553523.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;.Net 4.0 的大部分常见程序集 （已经过滤掉了一部分和常见业务无关的程序集）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201808/166267-20180827225903124-2126243621.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;.Net 4.0 WPF （.Net 3.5 就有了 WPF）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201808/166267-20180827230019340-436133306.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;.Net 4.0 WCF （.Net 3.5 就有了 WCF）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201808/166267-20180827230140105-159038882.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;.Net 4.0 Task 异步编程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201808/166267-20180827231209489-1081045867.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;.Net 4.0 Workflow &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201808/166267-20180827230308954-2089930361.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;.Net 4.0 加解密 （.Net 2.0 就已经存在）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201808/166267-20180827230359590-686926687.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;.Net 4.0 IO （.Net 2.0 已经存在，.Net 4.0 增加了文件的 zip 加解压 等）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201808/166267-20180827230530020-1603190196.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;.Net 4.0 网络 （.Net 2.0 已经存在）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201808/166267-20180827230628279-776354066.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;.Net 4.0 EF （.Net 3.5 就已经存在）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201808/166267-20180827230747791-914146961.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;汇总一下吧：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;.Net 2.0 （最经典的一个版本） 包含如下功能：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt; 数据库操作 （SqlServer、Oracle、OleDb操作Access）&lt;/p&gt;
&lt;p&gt;&amp;gt; GDI+ Image 绘图&lt;/p&gt;
&lt;p&gt;&amp;gt; WinForm 桌面程序&lt;/p&gt;
&lt;p&gt;&amp;gt; Asp.Net Web程序&lt;/p&gt;
&lt;p&gt;&amp;gt; App.config 配置 文件读取&lt;/p&gt;
&lt;p&gt;&amp;gt; XML 读写、正反序列化、JSON正反序列化（基于System.Web）&lt;/p&gt;
&lt;p&gt;&amp;gt; 正则表达式&lt;/p&gt;
&lt;p&gt;&amp;gt; 分布式事物&lt;/p&gt;
&lt;p&gt;&amp;gt; 加解密&lt;/p&gt;
&lt;p&gt;&amp;gt; 消息队列&lt;/p&gt;
&lt;p&gt;&amp;gt; 网络通讯、TCP/IP、UDP、Http请求 等&lt;/p&gt;
&lt;p&gt;&amp;gt; Binary 正反序列化、Remoting 远程对象&lt;/p&gt;
&lt;p&gt;&amp;gt; Thread 多线程&lt;/p&gt;
&lt;p&gt;&amp;gt; IO 文件读写、输入输出&lt;/p&gt;
&lt;p&gt;&amp;gt; 反射、Emit高速反射&lt;/p&gt;
&lt;p&gt;&amp;gt; 系统、硬件 等的基本控制&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;.Net 4.0 （最完善的一个版本） 增加如下功能：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt; Linq 表达式、Linq 集合操作&lt;/p&gt;
&lt;p&gt;&amp;gt; dynamic 动态对象&lt;/p&gt;
&lt;p&gt;&amp;gt; BigIntger 大数值 （我没有用过）&lt;/p&gt;
&lt;p&gt;&amp;gt; MVC Web程序&lt;/p&gt;
&lt;p&gt;&amp;gt; WPF 窗体程序&lt;/p&gt;
&lt;p&gt;&amp;gt; WCF 通讯（顺带还支持了新的 JSON正反序列化）&lt;/p&gt;
&lt;p&gt;&amp;gt; 网络通讯 增加了 HttpListener （可以用 控制台、服务、窗体程序 实现自己的 Web服务端）&lt;/p&gt;
&lt;p&gt;&amp;gt; 增加了一些其他的 输入输出流，IO 增加了 Zip文件支持 （而我依然在使用 ICSharpCode.SharpZipLib.dll）&lt;/p&gt;
&lt;p&gt;&amp;gt; EF ORM数据库实体框架 （假如我说，我的很多项目依然还是在用 SqlHelper 会不会有人笑我？ 那几十几百行 一坨坨的 sql 脚本，实体框架似乎真心不太适用）&lt;/p&gt;
&lt;p&gt;&amp;gt; Workflow 工作流 （没用过）&lt;/p&gt;
&lt;p&gt;&amp;gt; 反射、Emit高速反射、Expression表达式树&lt;/p&gt;
&lt;p&gt;&amp;gt; Task 异步多线程编程 （Task异步编程的巅峰完善是 .Net 4.5）&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;其实，.Net 4.0 比 .Net 2.0 多出来的部分大多是：&lt;/span&gt;&lt;span&gt;对数据操作的完善&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt; 比如 Linq 简化集合数据&lt;/p&gt;
&lt;p&gt;&amp;gt; 比如 EF实体框架 简化数据库数据&lt;/p&gt;
&lt;p&gt;&amp;gt; Task 异步编程 加快数据处理&lt;/p&gt;
&lt;p&gt;&amp;gt; Expression 表达式树 简化动态数据逻辑&lt;/p&gt;
&lt;p&gt;&amp;gt; Workfolow 控制数据流转&lt;/p&gt;
&lt;p&gt;&amp;gt; 对 Zip 文件等的支持&lt;/p&gt;
&lt;p&gt;&amp;gt; 增加各种 线程安全的、可以排序等的 List、Hash 结构 （其实，我还是再用 List&amp;lt;T&amp;gt;  Dictionary&amp;lt;K, V&amp;gt;  Hashtable —— 虽然知道有新的 List Hash，但只是听过没用过）&lt;/p&gt;
&lt;p&gt;&amp;gt; 增加了 大数值 支持&lt;/p&gt;
&lt;p&gt;&amp;gt; 增加了 动态对象&lt;/p&gt;
&lt;p&gt;&amp;gt; 更好的支持了 JSON类型 （.Net 2.0 基于 System.Web 的JSON 是真心不好用）&lt;/p&gt;
&lt;p&gt;—— 似乎除了 WPF、MVC 是功能型框架外、其余 .Net 4.0 增加的东西 都是在为 数据服务。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;其他我之前没见过 也没用过的 .Net 4.0 程序集：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201808/166267-20180827234930217-34514139.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;—— 这些程序集，看名字 似懂非懂，真心是没有用过。&lt;/p&gt;




&lt;p&gt;                                                                                                                                                           InkFx&lt;/p&gt;
&lt;p&gt;                                                                                                                                                 2018-08-27 23:50&lt;/p&gt;

</description>
<pubDate>Mon, 27 Aug 2018 15:56:00 +0000</pubDate>
<dc:creator>InkFx</dc:creator>
<og:description>.Net 2.0 （最经典的一个版本） 包含如下功能： &gt; 数据库操作 （SqlServer、Oracle、OleDb操作Access） &gt; GDI+ Image 绘图 &gt; WinF</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shuxiaolong/p/DotNetFx_20_40.html</dc:identifier>
</item>
</channel>
</rss>