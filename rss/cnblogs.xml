<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>RoportNG报表显示中文乱码和TestNG显示中文乱码实力解决办法 - 温一壶清酒</title>
<link>http://www.cnblogs.com/hong-fithing/p/7684712.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hong-fithing/p/7684712.html</guid>
<description>&lt;p&gt;最近在进军测试自动化框架学习阶段，但无意间总是会伴随小问题的困扰，比如中文乱码，而导致显示总是不舒服，个人觉得，就一定要解决，似乎有点点强迫症。所以遇到RoportNG报表显示中文乱码和TestNG显示中文乱码，自己苦寻解决办法，终于得到解决。可能这是最基础的问题，但还是想记录下，也希望能让以后的朋友少走弯路，少些烦恼。&lt;/p&gt;

&lt;p&gt;Maven是一个采用纯Java编写的软件项目管理和综合工具。Maven采用了一种被称之为project object model (POM)概念来管理项目， 所有的项目配置信息都被定义在一个叫做pom.xml的文件中，通过该文件，Maven可以管理项目的整个声明周期，包括编译，构建，测试，发布，报告等等。目前Apache下绝大多数项目都已经采用Maven进行管理， 而Maven本身还支持多种插件，可以方便更灵活的控制项目。&lt;/p&gt;
&lt;h2&gt;Maven安装&lt;/h2&gt;
&lt;p&gt;Maven下载地址：&lt;/p&gt;
&lt;p&gt;打开&lt;a href=&quot;http://maven.apache.org/download.cgi&quot;&gt;http://maven.apache.org/download.cgi&lt;/a&gt;，下载apache-maven-3.5.0-bin.zip，将下载的zip包解压在本地硬盘， 如C盘。&lt;/p&gt;
&lt;p&gt;环境变量配置如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
MAVEN_HOME: C:\apache-maven-3.3.9&lt;span&gt;
MAVEN: &lt;/span&gt;%MAVEN_HOME%&lt;span&gt;\bin
MAVEN_OPTS: &lt;/span&gt;-Xms256m -&lt;span&gt;Xmx512m
在path最前面加上： &lt;/span&gt;%MAVEN%;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置好环境变量后，验证maven是否安装成功，输入mvn -version验证，出现如下所示表示成功：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017225507068-2135023965.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span class=&quot;fontstyle0&quot;&gt;Maven&lt;span class=&quot;fontstyle1&quot;&gt;配置：&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;给&lt;span class=&quot;fontstyle0&quot;&gt;Maven&lt;span class=&quot;fontstyle1&quot;&gt;添加本地仓库，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;在&lt;span class=&quot;fontstyle0&quot;&gt;Maven&lt;span class=&quot;fontstyle1&quot;&gt;的安装路径中的&lt;span class=&quot;fontstyle0&quot;&gt;conf&lt;span class=&quot;fontstyle1&quot;&gt;文件夹中配置&lt;span class=&quot;fontstyle0&quot;&gt;settings.xml：&lt;span class=&quot;fontstyle1&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017225759287-106327086.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;在文中找到&lt;span class=&quot;fontstyle0&quot;&gt;localRepository&lt;span class=&quot;fontstyle1&quot;&gt;注释行并添加如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&amp;lt;localRepository&amp;gt;F:\maven-dependcies&amp;lt;/localRepository&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017225851537-1135580599.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;备注： F:\maven-dependcies&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;为手动建立， 配置好该项后， 以后&lt;span class=&quot;fontstyle2&quot;&gt;Maven&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;用到的所有资源文件都会存储到该目录， 相当于本地仓库。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span class=&quot;fontstyle1&quot;&gt;Maven&lt;span class=&quot;fontstyle0&quot;&gt;配置&lt;span class=&quot;fontstyle1&quot;&gt;mirror&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;mirror&lt;span class=&quot;fontstyle0&quot;&gt;就是镜像， 主要提供一个方便地切换远程仓库地址的途径。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;在&lt;span class=&quot;fontstyle1&quot;&gt;Maven&lt;span class=&quot;fontstyle0&quot;&gt;的安装路径中的&lt;span class=&quot;fontstyle1&quot;&gt;conf&lt;span class=&quot;fontstyle0&quot;&gt;文件夹中配置&lt;span class=&quot;fontstyle1&quot;&gt;settings.xml&lt;span class=&quot;fontstyle0&quot;&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;在文中找到&lt;span class=&quot;fontstyle1&quot;&gt;&amp;lt;mirrors&amp;gt;&lt;span class=&quot;fontstyle0&quot;&gt;行并在其中添加如下： &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017230137724-375402630.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;国内OSChina提供的镜像：
&lt;/span&gt;&amp;lt;mirror&amp;gt;
&amp;lt;id&amp;gt;CN&amp;lt;/id&amp;gt;
&amp;lt;name&amp;gt;OSChina Central&amp;lt;/name&amp;gt;
&amp;lt;url&amp;gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;maven.oschina.net/content/groups/public/&amp;lt;/url&amp;gt;&lt;/span&gt;
&amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;
&amp;lt;/mirror&amp;gt;&lt;span&gt;
aliyun阿里云提供的镜像：
&lt;/span&gt;&amp;lt;mirror&amp;gt;
&amp;lt;id&amp;gt;nexus-aliyun&amp;lt;/id&amp;gt;
&amp;lt;mirrorOf&amp;gt;*&amp;lt;/mirrorOf&amp;gt;
&amp;lt;name&amp;gt;Nexus aliyun&amp;lt;/name&amp;gt;
&amp;lt;url&amp;gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;maven.aliyun.com/nexus/content/groups/public&amp;lt;/url&amp;gt;&lt;/span&gt;
&amp;lt;/mirror&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;备注： 配置这两者中的其中一个即可， 如果不配置mirror， 将会使用默认国外的mirror， jar包下载很慢，建议配置阿里云镜像。&lt;/p&gt;
&lt;h3&gt;Eclipse中安装Maven插件&lt;/h3&gt;
&lt;p&gt;1.&lt;span class=&quot;fontstyle0&quot;&gt;打开&lt;span class=&quot;fontstyle1&quot;&gt;Eclipse,&lt;span class=&quot;fontstyle0&quot;&gt;进入&lt;span class=&quot;fontstyle1&quot;&gt;help -- &amp;gt;Install New Software...，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;点&lt;span class=&quot;fontstyle1&quot;&gt;Add&lt;span class=&quot;fontstyle0&quot;&gt;按钮输入：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;m2e，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;http://download.eclipse.org/technology/m2e/releases，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;然后点击&lt;span class=&quot;fontstyle1&quot;&gt;next&lt;span class=&quot;fontstyle0&quot;&gt;直到安装完成。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017230430427-942178933.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017230606287-1567733515.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;span class=&quot;fontstyle0&quot;&gt;设置&lt;span class=&quot;fontstyle1&quot;&gt;Maven&lt;span class=&quot;fontstyle0&quot;&gt;插件所关联的&lt;span class=&quot;fontstyle1&quot;&gt;Maven&lt;span class=&quot;fontstyle0&quot;&gt;程序 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;选择&lt;span class=&quot;fontstyle1&quot;&gt;Eclipse&lt;span class=&quot;fontstyle0&quot;&gt;菜单栏的&lt;span class=&quot;fontstyle1&quot;&gt;Window--&amp;gt;Preferences--&amp;gt;Maven--Installations&lt;span class=&quot;fontstyle0&quot;&gt;菜单项， 点&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;击&lt;span class=&quot;fontstyle1&quot;&gt;add,&lt;span class=&quot;fontstyle0&quot;&gt;选择&lt;span class=&quot;fontstyle1&quot;&gt;Maven&lt;span class=&quot;fontstyle0&quot;&gt;的具体安装目录 ，如下所示：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017230733537-953619559.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;span class=&quot;fontstyle0&quot;&gt;设置自定义的本地仓库 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;选择&lt;span class=&quot;fontstyle1&quot;&gt;Eclipse&lt;span class=&quot;fontstyle0&quot;&gt;菜单栏的&lt;span class=&quot;fontstyle1&quot;&gt;Window--&amp;gt;Preferences--&amp;gt;Maven--UserSettings&lt;span class=&quot;fontstyle0&quot;&gt;菜单项， 修&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;改为我们自定义仓库位置下的&lt;span class=&quot;fontstyle1&quot;&gt;settings.xml&lt;span class=&quot;fontstyle0&quot;&gt;文件， 修改好后点击&lt;span class=&quot;fontstyle1&quot;&gt;OK&lt;span class=&quot;fontstyle0&quot;&gt;按钮。 如下所示：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017230919381-199186105.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;新建Maven工程&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;打开&lt;span class=&quot;fontstyle1&quot;&gt;eclipse&lt;span class=&quot;fontstyle0&quot;&gt;， 右击左边空白处&lt;span class=&quot;fontstyle1&quot;&gt;--new--Other...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;在弹出的对话框中， 选择&lt;span class=&quot;fontstyle1&quot;&gt;Maven&lt;span class=&quot;fontstyle0&quot;&gt;文件夹下的第三个&lt;span class=&quot;fontstyle1&quot;&gt;Maven Project&lt;span class=&quot;fontstyle0&quot;&gt;， 点击&lt;span class=&quot;fontstyle1&quot;&gt;Next，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;下一个对话框页面选择， 点击&lt;span class=&quot;fontstyle1&quot;&gt;Next，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;下一个对话框中填入&lt;span class=&quot;fontstyle1&quot;&gt;groupid&lt;span class=&quot;fontstyle0&quot;&gt;、 &lt;span class=&quot;fontstyle1&quot;&gt;Artifactid&lt;span class=&quot;fontstyle0&quot;&gt;、 &lt;span class=&quot;fontstyle1&quot;&gt;name &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017231111193-244331293.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017231248318-2082249534.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;建出来的工程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017231327224-594570096.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;说了这么多，Maven终于搭好，因为后续工作是建立在Maven的基础上，所以啰嗦了些。&lt;/p&gt;

&lt;p&gt;要使用RoportNG报表，需要依赖如下三个jar包，velocity-dep-1.4.jar，reportng-1.1.4.jar，guice-4.0.jar，需要在Maven工程下pom.xml文件下配置，配置如下。至于如何得到这些配置信息，就不再啰嗦了，可看这篇随笔，里面介绍很详细：&lt;a href=&quot;http://www.cnblogs.com/hong-fithing/p/7622215.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/hong-fithing/p/7622215.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017231500349-1956352017.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;保存pom.xml文件即可，自动下载。&lt;/p&gt;
&lt;p&gt;回归正题，在testng.xml文件下配置如下信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE suite SYSTEM &quot;http://beust.com/testng/testng-1.0.dtd&quot; &amp;gt;
&amp;lt;suite name=&quot;suite1&quot;&amp;gt;
    &amp;lt;test name=&quot;test1&quot;&amp;gt;
        &amp;lt;classes&amp;gt;
            &amp;lt;&lt;span&gt;class&lt;/span&gt; name=&quot;com.selenium.model_datadriver.baiduSearchTest&quot; /&amp;gt;
        &amp;lt;/classes&amp;gt;
    &amp;lt;/test&amp;gt;
  &lt;span&gt;  &amp;lt;listeners&amp;gt;
      &amp;lt;listener class-name=&quot;org.uncommons.reportng.HTMLReporter&quot; /&amp;gt; 
      &amp;lt;listener class-name=&quot;org.uncommons.reportng.JUnitXMLReporter&quot; /&amp;gt;
    &amp;lt;/listeners&amp;gt;&lt;/span&gt;
&amp;lt;/suite&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存，右键运行该testng.xml文件，由于是在该文件中配置的，所以需要运行该文件即可。在工程路径下，查看如下文件夹下信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017232302318-366636618.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;打开index.html文件，就是刚生成的报表，如果没有配置上述代码，是不会生成html文件夹的。打开index.html文件即可查看报表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017232411365-99044257.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;很无奈的是，用例全通过，但有中文乱码，很是伤心，这样看起来也很是不爽，解决办法是：更改roportng.jar包信息，这样也麻烦，我找到了一个已经修改好了的jar包，下载地址如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pan.baidu.com/s/1pLdZdt5&quot;&gt;http://pan.baidu.com/s/1pLdZdt5&lt;/a&gt;，密码：fctu。下载后，替换掉之前的reportng-1.1.4.jar包即可。&lt;/p&gt;
&lt;p&gt;如何找到reportng-1.1.4.jar路径，如下所示即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017232733990-32338874.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;替换好后，再次执行testng.xml文件，去查看报表，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017232835990-938913364.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样是不是好看多了，个人觉得看着就舒服。为何不适应testng自动生成的报表呢，首先还是roportng产生的报表还是有优势些，还可以自己给日志添加css样式，让报表更加漂亮。比如，用例出错，提示信息就很完美。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017233040396-1044133801.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在报表中加自定义日志，首先在java文件中导入该包：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt; org.testng.Reporter;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在想写入日志信息的地方输入：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Reporter.log(&quot;启动谷歌浏览器&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reporter.log就表示日志信息。&lt;/p&gt;
&lt;p&gt;刚才说的，还可以添加css样式，如何添加呢？一起来看。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
System.setProperty(&quot;org.uncommons.reportng.escape-output&quot;, &quot;false&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在java文件中的方法中添加如上代码，就可以添加样式了，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Reporter.log(&quot;&amp;lt;span style=\&quot;color:#16A05D\&quot;&amp;gt;谷歌浏览器驱动路径是：&quot;+path+&quot;&amp;lt;/span&amp;gt;&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;去查看报表中的日志信息，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017233805771-1150045544.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样是不是就很好区分信息了，个人觉得还是很方便的。如果不添加org.testng.Reporter包的话，报表中是不会有Log Output信息的。&lt;/p&gt;

&lt;p&gt;TestNG显示中文乱码的问题很好解决，首先先来看用例执行完后的显示结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017234054756-59415910.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样看起来是真的丑，而且还是很别扭，我是实在受不了。解决办法是在eclipse的根目录下，有个eclipse.ini配置文件，加上该信息即可：-Dfile.encoding=UTF-8。如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017234218896-1017221960.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017234224506-778633021.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;添加好后，&lt;span&gt;重启eclipse&lt;/span&gt;，再次运行代码，再次查看结果，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171017234302381-517709950.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;个人觉得是美观多了，这样是不是更有动力敲代码呢？&lt;/p&gt;
&lt;p&gt;很弱的问题，困扰了自己大半天，希望能对以后的朋友有所帮助。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;29.483394833948&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;本文仅代表作者观点，系作者@温一壶清酒发表。&lt;br/&gt;欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。&lt;br/&gt;文章出处：&lt;a href=&quot;http://www.cnblogs.com/hong-fithing/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/hong-fithing/&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 17 Oct 2017 15:47:00 +0000</pubDate>
<dc:creator>温一壶清酒</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hong-fithing/p/7684712.html</dc:identifier>
</item>
<item>
<title>Hadoop（七）HDFS容错机制详解 - 苦水润喉</title>
<link>http://www.cnblogs.com/zhangyinhua/p/7681146.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangyinhua/p/7681146.html</guid>
<description>&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;　　HDFS（Hadoop Distributed File System）是一个分布式文件系统。它具有高容错性并提供了高吞吐量的数据访问，非常适合大规模数据集上的应用，它提供了一个高度容错性和高吞吐量的海量数据存储解决方案。&lt;/p&gt;
&lt;p&gt;　　优点是：&lt;/p&gt;
&lt;p&gt;　　　　高吞吐量访问：HDFS的每个Block分布在不同的Rack上，在用户访问时，HDFS会计算使用最近和访问量最小的服务器给用户提供。&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　   由于Block在不同的Rack上都有备份，所以不再是单数据访问，所以速度和效率是非常快的。另外HDFS可以并行从服务器集群中读写，增加了文件读写的访问带宽。&lt;br/&gt;　　　　高容错性：系统故障是不可避免的，如何做到故障之后的数据恢复和容错处理是至关重要的。&lt;/p&gt;
&lt;p&gt;　　　　　　　　　HDFS通过多方面保证数据的可靠性，多份复制并且分布到物理位置的不同服务器上，数据校验功能、后台的连续自检数据一致性功能都为高容错提供了可能。&lt;br/&gt;　　　　线性扩展：因为HDFS的Block信息存放到NameNode上，文件的Block分布到DataNode上，当扩充的时候仅仅添加DataNode数量，系统可以在不停止服务的情况下做扩充，不需要人工干预。　&lt;/p&gt;

&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017122446256-986617333.png&quot; alt=&quot;&quot; width=&quot;357&quot; height=&quot;258&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.1、故障类型（三类故障）&lt;/h2&gt;
&lt;p&gt;　　1）节点失败&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017122553084-1740967680.png&quot; alt=&quot;&quot; width=&quot;303&quot; height=&quot;211&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2）网络故障&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017122619193-864269184.png&quot; alt=&quot;&quot; width=&quot;306&quot; height=&quot;219&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3）数据损坏（脏数据）&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017122653584-1139165689.png&quot; alt=&quot;&quot; width=&quot;349&quot; height=&quot;201&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.2、故障检测机制&lt;/h2&gt;
&lt;p&gt;　　1）节点失败检测机制&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017122749099-1557704034.png&quot; alt=&quot;&quot; width=&quot;331&quot; height=&quot;201&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017122812224-54117187.png&quot; alt=&quot;&quot; width=&quot;337&quot; height=&quot;207&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017122843943-1794497033.png&quot; alt=&quot;&quot; width=&quot;334&quot; height=&quot;219&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2）通信故障检测机制&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017122925740-1631174388.png&quot; alt=&quot;&quot; width=&quot;324&quot; height=&quot;241&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3）数据错误检测机制&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017123007568-1855708205.png&quot; alt=&quot;&quot; width=&quot;353&quot; height=&quot;257&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017123031771-571051692.png&quot; alt=&quot;&quot; width=&quot;351&quot; height=&quot;200&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017123101521-744260452.png&quot; alt=&quot;&quot; width=&quot;357&quot; height=&quot;254&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.3、回复：心跳信息和数据块报告&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017123250349-1081070131.png&quot; alt=&quot;&quot; width=&quot;506&quot; height=&quot;211&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　HDFS存储理念是以最少的钱买最烂的机器并实现最安全、难度高的分布式文件系统(高容错性低成本)。&lt;/p&gt;
&lt;p&gt;　　从上可以看出，HDFS认为机器故障是种常态，所以在设计时充分考虑到单个机器故障，单个磁盘故障，单个文件丢失等情况。&lt;/p&gt;
&lt;h2&gt;1.4、读写容错&lt;/h2&gt;
&lt;p&gt;　　1）写容错&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017130736881-877914479.png&quot; alt=&quot;&quot; width=&quot;403&quot; height=&quot;221&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017130808068-50225562.png&quot; alt=&quot;&quot; width=&quot;412&quot; height=&quot;206&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017130834943-531887290.png&quot; alt=&quot;&quot; width=&quot;410&quot; height=&quot;244&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017130905115-722450396.png&quot; alt=&quot;&quot; width=&quot;410&quot; height=&quot;271&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2）读容错&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017131002240-947110555.png&quot; alt=&quot;&quot; width=&quot;394&quot; height=&quot;257&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017131028146-1208044573.png&quot; alt=&quot;&quot; width=&quot;397&quot; height=&quot;226&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.5、数据节点（DN）失效&lt;/h2&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017131124943-1832701263.png&quot; alt=&quot;&quot; width=&quot;359&quot; height=&quot;299&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017131157302-65849177.png&quot; alt=&quot;&quot; width=&quot;366&quot; height=&quot;239&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017131243052-65338856.png&quot; alt=&quot;&quot; width=&quot;216&quot; height=&quot;274&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017131305427-9457110.png&quot; alt=&quot;&quot; width=&quot;220&quot; height=&quot;273&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017131338849-810055510.png&quot; alt=&quot;&quot; width=&quot;371&quot; height=&quot;259&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017131413021-2060816792.png&quot; alt=&quot;&quot; width=&quot;348&quot; height=&quot;260&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017131523709-813940191.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　1）机架与数据节点&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017131556459-888588387.png&quot; alt=&quot;&quot; width=&quot;369&quot; height=&quot;220&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2）副本放置策略&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017131631068-1860658653.png&quot; alt=&quot;&quot; width=&quot;355&quot; height=&quot;165&quot;/&gt;　&lt;/p&gt;
&lt;p&gt;　　　　数据块的第一个副本优先放在写入数据块的客户端所在的节点上，但是如果这个客户端上的数据节点空间不足或者是当前负载过重，则应该从该数据节点所在的机架中选择一个合适的数据节点作为本地节点。&lt;br/&gt;　　　　如果客户端上没有一个数据节点的话，则从整个集群中随机选择一个合适的数据节点作为此时这个数据块的本地节点。&lt;/p&gt;
&lt;p&gt;　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017131724177-1419783064.png&quot; alt=&quot;&quot; width=&quot;395&quot; height=&quot;222&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　HDFS的存放策略是将一个副本存放在本地机架节点上，另外两个副本放在不同机架的不同节点上。&lt;br/&gt;　　　　这样集群可在完全失去某一机架的情况下还能存活。同时，这种策略减少了机架间的数据传输，提高了写操作的效率，因为数据块只存放在两个不同的机架上，&lt;/p&gt;
&lt;p&gt;　　　　　　减少了读取数据时需要的网络传输总带宽。这样在一定程度上兼顾了数据安全和网络传输的开销。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017131825334-291096645.png&quot; alt=&quot;&quot; width=&quot;323&quot; height=&quot;175&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171017131851052-1687834576.png&quot; alt=&quot;&quot; width=&quot;317&quot; height=&quot;250&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 17 Oct 2017 15:37:00 +0000</pubDate>
<dc:creator>苦水润喉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangyinhua/p/7681146.html</dc:identifier>
</item>
<item>
<title>JAVA提高五：注解Annotation - pony1223</title>
<link>http://www.cnblogs.com/pony1223/p/7679315.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pony1223/p/7679315.html</guid>
<description>&lt;p&gt;&lt;span&gt;今天我们学习JDK5.0中一个非常重要的特性，叫做注解。是现在非常流行的一种方式，可以说因为配置XML 比较麻烦或者比容易查找出错误，现在越来越多的框架开始支持注解方式，比如注明的Spring 框架，常用的注解：&lt;a class=&quot;link&quot; title=&quot;5.9.1 @Required&quot;&gt;@Required&lt;/a&gt;， @Autowired, @PostConstruct, @PreDestory；可见注解的重要性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、什么是注解（Annotation）和 元数据（metadata）？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Annotation（注解）就是Java提供了一种为程序元素关联任何信息或任何元数据（metadata）的途径和方法&lt;/span&gt;。&lt;/strong&gt;Annotion(注解)是一个接口，程序可以通过反射来获取指定程序元素的Annotion对象，然后通过Annotion对象来获取注解里面的元数据。&lt;span&gt;简单一点说：就是为程序打上了某种标记，可以加在类，包，字段 ，方法，方法的参数及局部变量上。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Annotation的成员在Annotation类型中以无参数的方法的形式被声明（比如：String color() default &quot;blue&quot;;）。&lt;strong&gt;其方法名和返回值定义了该成员的名字和类型&lt;/strong&gt;。在此有一个特定的默认语法：允许声明任何Annotation成员的默认值。一个Annotation可以将name=value对作为没有定义默认值的Annotation成员的值，当然也可以使用name=value对来覆盖其它成员默认值。这一点有些近似类的继承特性，父类的构造函数可以作为子类的默认构造函数，但是也可以被子类覆盖。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面讲了这么多概念，我们来看一个实际的例子：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;This is String Representation of current object.&quot;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;上面的代码中，我重写了&lt;code&gt;toString()&lt;/code&gt;方法并使用了&lt;code&gt;@Override&lt;/code&gt;注解。但是，即使我不使用&lt;code&gt;@Override注解标记代码，程序也能够正常执行。那么加上与不加上又有什么区别呢？&lt;/code&gt;事实上，&lt;/span&gt;@Override&lt;code&gt;告诉编译器这个方法是一个重写方法(描述方法的元数据)，如果父类中不存在该方法，编译器便会报错，提示该方法没有重写父类中的方法。如果我不小心拼写错误，例如将toString()&lt;/code&gt;写成了&lt;code&gt;toStrring(){double r}&lt;/code&gt;，而且我也没有使用&lt;code&gt;@Override&lt;/code&gt;注解，那程序依然能编译运行。但运行结果会和我期望的大不相同。现在我们了解了什么是注解，并且使用注解有助于阅读程序。也理解了注解实际上就是在源程序上面加上了标签。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;元数据从metadata一词译来，就是“关于数据的数据”的意思。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在Java中元数据以标签的形式存在于Java代码中，元数据标签的存在并不影响程序代码的编译和执行，&lt;strong&gt;它只是被用来生成其它的文件或在运行时获取被运行代码的描述信息&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、注解的分类（JDK内置系统注解、元注解、自定义注解）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;在学习注解的分类之前，我们先了解下 &lt;strong&gt;Annotation和Annotation类型。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Annotation：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Annotation使用了在java5.0所带来的新语法，它的行为十分类似public、final这样的修饰符。每个Annotation具有一个名字和成员个数&amp;gt;=0。每个Annotation的成员具有被称为name=value对的名字和值（就像javabean一样），name=value装载了Annotation的信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如：&lt;/span&gt;@Override&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Annotation类型：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;Annotation类型定义了Annotation的名字、类型、成员默认值。&lt;strong&gt;一个Annotation类型可以说是一个特殊的java接口，它的成员变量是受限制的，而声明Annotation类型时需要使用新语法。当我们通过java反射api访问Annotation时，返回值将是一个实现了该annotation类型接口的对象，通过访问这个对象我们能方便的访问到其Annotation成员。&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如：Override&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Target(ElementType.METHOD)
@Retention(RetentionPolicy.SOURCE)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Override {
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注解的分类：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据注解参数的个数，我们可以将注解分为三类：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　1.标记注解：一个没有成员定义的Annotation类型被称为标记注解。这种Annotation类型仅使用自身的存在与否来为我们提供信息。比如后面的系统注解@Override;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　2.单值注解&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　3.完整注解　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据注解使用方法和用途，我们可以将Annotation分为三类：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　1.JDK内置系统注解&lt;br/&gt;　　　　2.元注解&lt;br/&gt;　　　　3.自定义注解&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.JDK内置系统注解：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;注解的语法比较简单，除了@符号的使用外，他基本与Java固有的语法一致，JavaSE中内置三个标准注解，定义在java.lang中：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　@Override：用于修饰此方法覆盖了父类的方法；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　@Deprecated：用于修饰已经过时的方法；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　@SuppressWarnnings:用于通知java编译器禁止特定的编译警告。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;下面我们依次看看三个内置标准注解的作用和使用场景。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们最熟悉的应该是：@Override, 它的定义如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Indicates that a method declaration is intended to override a
 * method declaration in a supertype. If a method is annotated with
 * this annotation type compilers are required to generate an error
 * message unless at least one of the following conditions hold:
 * The method does override or implement a method declared in a
 * supertype.
 * The method has a signature that is override-equivalent to that of
 * any public method declared in Object.
 *
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt;  Peter von der Ah&amp;amp;eacute;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt;  Joshua Bloch
 * @jls 9.6.1.4 @Override
 * &lt;/span&gt;&lt;span&gt;@since&lt;/span&gt;&lt;span&gt; 1.5
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.SOURCE)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Override {
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;从注释，我们可以看出，@Override的作用是，提示编译器，使用了@Override注解的方法必须override父类或者java.lang.Object中的一个同名方法。我们看到@Override的定义中使用到了 @Target, @Retention，它们就是所谓的“&lt;strong&gt;元注解&lt;/strong&gt;”——就是定义注解的注解。我们看下&lt;strong&gt;@Retention&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Indicates how long annotations with the annotated type are to
 * be retained.  If no Retention annotation is present on
 * an annotation type declaration, the retention policy defaults to
 * RetentionPolicy.CLASS.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.ANNOTATION_TYPE)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Retention {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Returns the retention policy.
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; the retention policy
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    RetentionPolicy value();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;@Retention用于提示注解被保留多长时间（简单点说就是生命周期），有三种取值：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; RetentionPolicy {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Annotations are to be discarded by the compiler.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    SOURCE,
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Annotations are to be recorded in the class file by the compiler
     * but need not be retained by the VM at run time.  This is the default
     * behavior.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    CLASS,
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Annotations are to be recorded in the class file by the compiler and
     * retained by the VM at run time, so they may be read reflectively.
     *
     * &lt;/span&gt;&lt;span&gt;@see&lt;/span&gt;&lt;span&gt; java.lang.reflect.AnnotatedElement
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    RUNTIME
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;RetentionPolicy.SOURCE 保留在源码级别，被编译器抛弃(@Override就是此类)； RetentionPolicy.CLASS被编译器保留在编译后的类文件级别，但是被虚拟机丢弃；&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;RetentionPolicy.RUNTIME保留至运行时，可以被反射读取。&lt;br/&gt;再看 &lt;strong&gt;@Target&lt;/strong&gt;:&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; java.lang.annotation;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Indicates the contexts in which an annotation type is applicable. The
 * declaration contexts and type contexts in which an annotation type may be
 * applicable are specified in JLS 9.6.4.1, and denoted in source code by enum
 * constants of java.lang.annotation.ElementType
 * &lt;/span&gt;&lt;span&gt;@since&lt;/span&gt;&lt;span&gt; 1.5
 * @jls 9.6.4.1 @Target
 * @jls 9.7.4 Where Annotations May Appear
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.ANNOTATION_TYPE)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Target {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Returns an array of the kinds of elements an annotation type
     * can be applied to.
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; an array of the kinds of elements an annotation type
     * can be applied to
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    ElementType[] value();
}
复制代码
 @Target用于提示该注解使用的地方，取值有：

复制代码
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; ElementType {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Class, interface (including annotation type), or enum declaration &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    TYPE,
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Field declaration (includes enum constants) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    FIELD,
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Method declaration &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    METHOD,
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Formal parameter declaration &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    PARAMETER,
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Constructor declaration &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    CONSTRUCTOR,
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Local variable declaration &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    LOCAL_VARIABLE,
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Annotation type declaration &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    ANNOTATION_TYPE,
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Package declaration &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    PACKAGE,
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Type parameter declaration
     * &lt;/span&gt;&lt;span&gt;@since&lt;/span&gt;&lt;span&gt; 1.8
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    TYPE_PARAMETER,
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Use of a type
     * &lt;/span&gt;&lt;span&gt;@since&lt;/span&gt;&lt;span&gt; 1.8
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    TYPE_USE
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;分别表示该注解可以被使用的地方：1)类,接口，注解，enum; 2)属性域；3）方法；4）参数；5）构造函数；6）局部变量；7）注解类型；8）包&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Target(ElementType.METHOD)
@Retention(RetentionPolicy.SOURCE)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Override {
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;表示 @Override 只能使用在方法上，保留在源码级别，被编译器处理，然后抛弃掉。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;@Override 是一个标记注解类型，它被用作标注方法。它说明了被标注的方法重载了父类的方法，起到了断言的作用。如果我们使用了这种Annotation在一个没有覆盖父类方法的方法时，java编译器将以一个编译错误来警示。这个annotaton常常在我们试图覆盖父类方法而又写错了方法名时发挥威力。使用方法极其简单：在使用此annotation时只要在被修饰的方法前面加上@Override即可。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;@Deprecated，标记已过时：同 样Deprecated也是一个标记注解。当一个类型或者类型成员使用@Deprecated修饰的话，编译器将不鼓励使用这个被标注的程序元素。而且这种修饰具有一定的 “延续性”：&lt;/strong&gt;如果我们在代码中通过继承或者覆盖的方式使用了这个过时的类型或者成员，虽然继承或者覆盖后的类型或者成员并不是被声明为 @Deprecated，但编译器仍然要报警。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;@SuppressWarnnings，抑制编译器警告：&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;@SuppressWarnings 被用于有选择的关闭编译器对类、方法、成员变量、变量初始化的警告。在java5.0，sun提供的javac编译器为我们提供了-Xlint选项来使编译器对合法的程序代码提出警告，此种警告从某种程度上代表了程序错误。例如当我们使用一个generic collection类而又没有提供它的类型时，编译器将提示出&quot;unchecked warning&quot;的警告。通常当这种情况发生时，我们就需要查找引起警告的代码。如果它真的表示错误，我们就需要纠正它。例如如果警告信息表明我们代码中的switch语句没有覆盖所有可能的case，那么我们就应增加一个默认的case来避免这种警告。&lt;br/&gt;有时我们无法避免这种警告，例如，我们使用必须和非generic的旧代码交互的generic collection类时，我们不能避免这个unchecked warning。此时@SuppressWarning就要派上用场了，在调用的方法前增加@SuppressWarnings修饰，告诉编译器停止对此方法的警告。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;@SuppressWarning不是一个标记注解。它有一个类型为String[]的成员，这个成员的值为被禁止的警告名。对于javac编译器来讲，被-Xlint选项有效的警告名也同样对@SuppressWarings有效，同时编译器忽略掉无法识别的警告名。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;annotation语法允许在annotation名后跟括号，括号中是使用逗号分割的name=value对用于为annotation的成员赋值。实例如下：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study.javaenhance;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FruitService {
    @SuppressWarnings(value &lt;/span&gt;= { &quot;rawtypes&quot;, &quot;unchecked&quot;&lt;span&gt; })
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;String&amp;gt;&lt;span&gt; getFruitList() {
        List&lt;/span&gt;&amp;lt;String&amp;gt; fruitList = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; fruitList;
    }

    @SuppressWarnings( { &lt;/span&gt;&quot;rawtypes&quot;, &quot;unchecked&quot;&lt;span&gt; })
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;String&amp;gt;&lt;span&gt; getFruit() {
        List&lt;/span&gt;&amp;lt;String&amp;gt; fruitList = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; fruitList;
    }

    @SuppressWarnings(&lt;/span&gt;&quot;unused&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;String&amp;gt; strList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;&lt;span&gt;();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;在这个例子中SuppressWarnings annotation类型只定义了一个单一的成员，所以只有一个简单的value={...}作为name=value对。又由于成员值是一个数组，故使用大括号来声明数组值。&lt;strong&gt;注意：我们可以在下面的情况中缩写annotation：当annotation只有单一成员，并成员命名为&quot;value=&quot;。这时可以省去&quot;value=&quot;。比如将上面方法getFruit()的SuppressWarnings annotation就是缩写的。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SuppressWarnings注解的常见参数值的简单说明：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　1. deprecation：使用了不赞成使用的类或方法时的警告；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　2. unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　3. fallthrough：当switch程序块直接通往下一种情况而没有 Break 时的警告;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　4. path：在类路径、源文件路径等中有不存在的路径时的警告; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　5. serial：当在可序列化的类上缺少serialVersionUID定义时的警告; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　6. finally：任何finally子句不能正常完成时的警告; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　7. all：关于以上所有情况的警告。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.元注解&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;元注解的作用就是负责注解其他注解（注解的注解）。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它annotation类型作说明。&lt;/strong&gt;Java5.0定义的元注解：&lt;strong&gt;@Target,@Retention,@Documented,@Inherited&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这些类型和它们所支持的类在java.lang.annotation包中可以找到。下面我们看一下每个元注解的作用和相应分参数的使用说明。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;@Target：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;取值(ElementType)有：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.CONSTRUCTOR：用于描述构造器&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2.FIELD：用于描述域&lt;/span&gt;&lt;br/&gt;&lt;span&gt;3.LOCAL_VARIABLE：用于描述局部变量&lt;/span&gt;&lt;br/&gt;&lt;span&gt;4.METHOD：用于描述方法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;5.PACKAGE：用于描述包&lt;/span&gt;&lt;br/&gt;&lt;span&gt;6.PARAMETER：用于描述参数&lt;/span&gt;&lt;br/&gt;&lt;span&gt;7.TYPE：用于描述类、接口(包括注解类型) 或enum声明&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;@Retention：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;@Retention&lt;/strong&gt;定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;取值（RetentionPoicy）有：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.SOURCE：在源文件中有效（即源文件保留）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2.CLASS：在class文件中有效（即class保留）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;3.RUNTIME：在运行时有效（即运行时保留）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;@Documented:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;@&lt;/strong&gt;&lt;/strong&gt;Documented用于描述其它的annotation类型应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。简单一点说：表示注解是否能被 javadoc 处理并保留在文档中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;@Inherited：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。&lt;strong&gt;如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：@Inherited annotation类型会被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.自定义注解&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本小节也是最重要的，我们通过会自己定义注解用于去为源程序打上标签，比如toString 方法我们想要过滤掉某些敏感信息不打印，那么我们可以加上注解然后识别到这个注解的信息，我们就不去打印这个信息等等用途。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口（单继承特性）。&lt;strong&gt;@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;定义注解格式：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　public @interface 注解名 {定义体}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注解参数的可支持数据类型：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　1. 所有基本数据类型（int,float,boolean,byte,double,char,long,short)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　2. String类型&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　3. Class类型&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　4. enum类型&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　5. Annotation类型&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　6. 以上所有类型的数组&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Annotation类型里面的参数该怎么设定：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　第一, &lt;strong&gt;只能用public或默认(default)这两个访问权修饰。&lt;/strong&gt;例如，String value();这里把方法设为defaul默认类型；　 　&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　第二, 参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和String, Enum, Class, annotations等数据类型，以及这一些类型的数组。例如String value();这里的参数成员就为String；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　第三, &lt;strong&gt;如果只有一个参数成员，最好把参数名称设为&quot;value&quot;，后加小括号。&lt;/strong&gt;例如下面的例子FruitName注解就只有一个参数成员。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;简单的自定义注解和使用注解实例：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study.javaenhance;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.ElementType;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.Retention;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.RetentionPolicy;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.Target;

@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; FruitName 
{
    String value() &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &quot;&quot;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study.javaenhance;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.ElementType;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.Retention;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.RetentionPolicy;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.Target;

@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; FruitColor
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; Color
    {
        BULE,RED,GREEN;
    }
    
    Color fruitColor() &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; Color.BULE;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study.javaenhance;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.ElementType;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.Retention;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.RetentionPolicy;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.Target;

@Target(ElementType.FIELD)  
@Retention(RetentionPolicy.RUNTIME)  
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; FruitProvider
{
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 
     * 供应商编号 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt; 
     &lt;span&gt;*/&lt;/span&gt;  
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id() &lt;span&gt;default&lt;/span&gt; -1&lt;span&gt;;  
      
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 
     * 供应商名称 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt; 
     &lt;span&gt;*/&lt;/span&gt;  
    &lt;span&gt;public&lt;/span&gt; String name() &lt;span&gt;default&lt;/span&gt; &quot;&quot;&lt;span&gt;;  
      
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 
     * 供应商地址 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt; 
     &lt;span&gt;*/&lt;/span&gt;  
    &lt;span&gt;public&lt;/span&gt; String address() &lt;span&gt;default&lt;/span&gt; &quot;&quot;&lt;span&gt;;  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;说明：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.注解元素的默认值：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;注解元素必须有确定的值，要么在定义注解的默认值中指定，要么在使用注解时指定，非基本类型的注解元素的值不可为null。因此，使用空字符串或0作为默认值是一种常用的做法。&lt;/strong&gt;这个约束使得处理器很难表现一个元素的存在或缺失的状态，因为每个注解的声明中，所有元素都存在，并且都具有相应的值，为了绕开这个约束，我们只能定义一些特殊的值，例如空字符串或者负数，以表示某个元素不存在，在定义注解时，这已经成为一个习惯用法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.注解用处：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;定义了注解，并在需要的时候给相关类，类属性加上注解信息，如果没有响应的注解信息处理流程，注解可以说是没有实用价值。如何让注解真真的发挥作用，主要就在于注解处理方法，下一步我们将学习注解信息的获取和处理！&lt;/span&gt;&lt;br/&gt;&lt;span&gt;如果没有用来读取注解的方法和工作，那么注解也就不会比注释更有用处了。使用注解的过程中，很重要的一部分就是创建于使用注解处理器。Java SE5扩展了反射机制的API，以帮助程序员快速的构造自定义注解处理器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.&lt;strong&gt;注解处理器类库(java.lang.reflect.AnnotatedElement)：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Java使用Annotation接口来代表程序元素前面的注解，该接口是所有Annotation类型的父接口。除此之外，Java在java.lang.reflect 包下新增了AnnotatedElement接口，该接口代表程序中可以接受注解的程序元素，该接口主要有如下几个实现类：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Class：类定义    AccessibleObject：访问控制   Constructor：构造器定义　　Field：类的成员变量定义&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;　　Method：类的方法定义&lt;/em&gt;&lt;/em&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;　　Package：类的包定义&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201710/401339-20171017225942802-437523743.png&quot; alt=&quot;&quot;/&gt;&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;java.lang.reflect 包下主要包含一些实现反射功能的工具类，实际上，java.lang.reflect 包所有提供的反射API扩充了读取运行时Annotation信息的能力。当一个Annotation类型被定义为运行时的Annotation后，该注解才能是运行时可见，当class文件被装载时被保存在class文件中的Annotation才会被虚拟机读取。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;AnnotatedElement 接口是所有程序元素（Class、Method和Constructor）的父接口，所以程序通过反射获取了某个类的AnnotatedElement对象之后，程序就可以调用该对象的如下四个个方法来访问Annotation信息：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201710/401339-20171017230129974-1356891868.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;案例如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study.javaenhance;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Field;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FruitInfoUtil 
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; getFruitInfo(Class&amp;lt;?&amp;gt;&lt;span&gt; clazz) {
        String strFruitName &lt;/span&gt;= &quot; 水果名称：&quot;&lt;span&gt;;
        String strFruitColor &lt;/span&gt;= &quot; 水果颜色：&quot;&lt;span&gt;;
        String strFruitProvicer &lt;/span&gt;= &quot;供应商信息：&quot;&lt;span&gt;;
        Field[] fileds &lt;/span&gt;=&lt;span&gt; clazz.getDeclaredFields();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Field field : fileds) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (field.isAnnotationPresent(FruitName.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)) {
                FruitName fruitName &lt;/span&gt;=&lt;span&gt; (FruitName) field
                        .getAnnotation(FruitName.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
                strFruitName &lt;/span&gt;= strFruitName + fruitName.value(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到注解的参数值&lt;/span&gt;
&lt;span&gt;                System.out.println(strFruitName);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (field.isAnnotationPresent(FruitColor.&lt;span&gt;class&lt;/span&gt;)) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取FruitColor注解&lt;/span&gt;
                FruitColor fruitColor =&lt;span&gt; (FruitColor) field
                        .getAnnotation(FruitColor.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
                strFruitColor &lt;/span&gt;=&lt;span&gt; strFruitColor
                        &lt;/span&gt;+&lt;span&gt; fruitColor.fruitColor().toString();
                System.out.println(strFruitColor);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (field.isAnnotationPresent(FruitProvider.&lt;span&gt;class&lt;/span&gt;)) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取FruitProvider注解&lt;/span&gt;
                FruitProvider fruitProvider =&lt;span&gt; (FruitProvider) field
                        .getAnnotation(FruitProvider.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
                strFruitProvicer &lt;/span&gt;= &quot; 供应商编号：&quot; + fruitProvider.id() + &quot; 供应商名称：&quot;
                        + fruitProvider.name() + &quot; 供应商地址：&quot;
                        +&lt;span&gt; fruitProvider.address();
                System.out.println(strFruitProvicer);
            }
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、为什么使用注解？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 在JAVA应用中，我们常遇到一些需要使用模版代码。例如，为了编写一个JAX-RPC web service，我们必须提供一对接口和实现作为模版代码。如果使用annotation对远程访问的方法代码进行修饰的话，这个模版就能够使用工具自动生成。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;另外，一些API需要使用与程序代码同时维护的附属文件。例如，JavaBeans需要一个BeanInfo Class与一个Bean同时使用/维护，而EJB则同样需要一个部署描述符。此时在程序中使用annotation来维护这些附属文件的信息将十分便利而且减少了错误。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、注解的工作方式和使用方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在5.0版之前的Java平台已经具有了一些ad hocannotation(即时注解)机制。比如，使用transient修饰符来标识一个成员变量在序列化子系统中应被忽略。而@deprecated这个javadoc tag也是一个ad hocannotation用来说明一个方法已过时。从Java5.0版发布以来，&lt;strong&gt;5.0平台提供了一个正式的annotation功能：允许开发者定义、使用自己的annoatation类型。此功能由一个定义annotation类型的语法和一个描述annotation声明的语法，读取annotaion的API，一个使用annotation修饰的class文件，一个annotation处理工具（apt）组成。&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;annotation并不直接影响代码语义，但是它能够工作的方式被看作类似程序的工具或者类库，它会反过来对正在运行的程序语义有所影响。annotation可以从源文件、class文件或者以在运行时反射的多种方式被读取。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;当然annotation在某种程度上使javadoc tag更加完整。一般情况下，如果这个标记对java文档产生影响或者用于生成java文档的话，它应该作为一个javadoc tag；否则将作为一个annotation。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Annotation使用方法：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、类型声明方式：&lt;br/&gt;　　通常，应用程序并不是必须定义annotation类型，但是定义annotation类型并非难事。Annotation类型声明于一般的接口声明极为类似，区别只在于它在interface关键字前面使用“@”符号。&lt;br/&gt;　　annotation类型的每个方法声明定义了一个annotation类型成员，但方法声明不必有参数或者异常声明；方法返回值的类型被限制在以下的范围：primitives、String、Class、enums、annotation和前面类型的数组；方法可以有默认值。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; RequestForEnhancement {  
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;    id();  
    String synopsis();  
    String engineer() &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &quot;[unassigned]&quot;&lt;span&gt;;   
    String date();    &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &quot;[unimplemented]&quot;&lt;span&gt;;   
}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2、annotation使用时候声明方式：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;annotation是一种修饰符，能够如其它修饰符（如public、static、final）一般使用。习惯用法是annotaions用在其它的修饰符前面。&lt;strong&gt;annotations由“@+annotation类型+带有括号的成员-值列表”组成。这些成员的值必须是编译时常量（即在运行时不变）。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
@RequestForEnhancement( id= 2868724, synopsis = &quot;Enable time-travel&quot;, engineer = &quot;Mr. Peabody&quot;,  date     = &quot;4/1/3007&quot;&lt;span&gt; )  
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; travelThroughTime(Date destination) 
{
    ... 

} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当声明一个没有成员的annotation类型声明时，可使用以下方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 
 * Indicates that the specification of the annotated API element 
 * is preliminary and subject to change. 
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;  
&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt; Preliminary { }  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;如果在annotations中只有唯一一个成员，则该成员应命名为value：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Copyright {  
    String value();  
}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更为方便的是对于具有唯一成员且成员名为value的annotation（如上文），在其使用时可以忽略掉成员名和赋值号（=）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
@Copyright(&quot;2002 Yoyodyne Propulsion Systems&quot;&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; OscillationOverthruster { ... }  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是一个复杂的Annotataion类型声明，其成员是Annotation类型的数组：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt; java.lang.annotation.*&lt;span&gt;;  
          
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 
 * Reviews annotation类型只有一个成员， 
 * 由Review annotation组成的数组 
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;  
@Retention(RetentionPolicy.RUNTIME)  
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Reviews {  
    Review[] value();  
}  
  
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 
 * Review annotation类型有3个成员：  
 * 枚举类型成员grade 
 * 表示Review名称的字符串类型成员Reviewer 
 * 具有默认值的字符串类型成员Comment。 
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;  
&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Review {  
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 内嵌的枚举类型  &lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; Grade { EXCELLENT, SATISFACTORY, UNSATISFACTORY };  
  
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 下面的方法定义了annotation的成员  &lt;/span&gt;
&lt;span&gt;    Grade grade();                  
    String reviewer();            
    String comment() &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &quot;&quot;&lt;span&gt;;    
}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Reviews annotation类型只有一个成员，但是这个成员的类型是复杂的：由Review annotation组成的数组。Review annotation类型有3个成员：枚举类型成员grade、表示Review名称的字符串类型成员Reviewer、具有默认值的字符串类型成员Comment。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Annotation类型的成员不能是generic。只有返回值类型是Class的方法可以在annotation类型中使用generic，因为此方法能够用类转换将各种类型转换为Class。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后，我们来定义一个annotation方法用于罗列出类运行中所有的unchecked异常（这种情况不一定是错误）。这个annotation类型将一个数组作为了唯一的成员。数组中的每个元素都是异常类。为了加强对未检查的异常（此类异常都是在运行时抛出）进行报告，我们可以在代码中对异常的类型进行限制：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、注解A&lt;strong&gt;nnotation实例分析&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;结合上面所讲的，我们在这里建立一个简单的基于annotation测试框架。首先我们需要一个annotation类型来表示某个方法是一个应该被测试工具运行的测试方法。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt; java.lang.annotation.*&lt;span&gt;;  
  
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 
 * Indicates that the annotated method is a test method. 
 * This annotation should be used only on parameterless static methods. 
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;  
@Retention(RetentionPolicy.RUNTIME)  
@Target(ElementType.METHOD)  
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt; Test { }  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;值得注意的是annotaion类型声明是可以标注自己的，这样的annotation被称为“meta-annotations”。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;在上面的代码中，@Retention(RetentionPolicy.RUNTIME)这个meta-annotation表示了此类型的annotation将被虚拟机保留使其能够在运行时通过反射被读取。而@Target(ElementType.METHOD)表示此类型的annotation只能用于修饰方法声明。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面是一个简单的程序，其中部分方法被上面的annotation所标注：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo {  
    
@Test 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; m1() { }  
      
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; m2() { }  
      
    @Test 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; m3() {  
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(&quot;Boom&quot;&lt;span&gt;);  
    }  
      
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; m4() { }  
      
    @Test
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; m5() { }  
      
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; m6() { }  
      
    @Test 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; m7() {  
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(&quot;Crash&quot;&lt;span&gt;);  
    }  
      
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; m8() { }  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用测试：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt; java.lang.reflect.*&lt;span&gt;;  
  
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RunTests {  
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {  
      &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; passed = 0, failed = 0&lt;span&gt;;  
      &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Method m : Class.forName(args[0&lt;span&gt;]).getMethods()) {  
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (m.isAnnotationPresent(Test.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)) {  
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {  
               m.invoke(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);  
               passed&lt;/span&gt;++&lt;span&gt;;  
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable ex) {  
               System.out.printf(&lt;/span&gt;&quot;Test %s failed: %s %n&quot;&lt;span&gt;, m, ex.getCause());  
               failed&lt;/span&gt;++&lt;span&gt;;  
            }  
         }  
      }  
      System.out.printf(&lt;/span&gt;&quot;Passed: %d, Failed %d%n&quot;&lt;span&gt;, passed, failed);  
   }  
} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这个程序从命令行参数中取出类名，并且遍历此类的所有方法，尝试调用其中被上面的测试annotation类型标注过的方法。在此过程中为了找出哪些方法被annotation类型标注过，需要使用反射的方式执行此查询。如果在调用方法时抛出异常，此方法被认为已经失败，并打印一个失败报告。最后，打印运行通过/失败的方法数量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注解在很多框架、类库中有广泛的应用。如JUnit测试框架, Spring, Hibernate, EJB等等。这也是开发人员所常常用到的一种方式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面的介绍说明了annotation的使用方法、定义方式、分类。初学者可以通过以上的说明制作简单的annotation程序，但是对于一些高级的annotation应用（例如使用自定义annotation生成javabean映射xml文件）还需要进一步的研究和探讨。同时，&lt;strong&gt;annotation运行存在两种方式：运行时、编译时。上文中讨论的都是在运行时的annotation应用，但在编译时的annotation应用还没有涉及，因为编译时的annotation要使用annotation processing tool(APT)&lt;/strong&gt;。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;annotation本身使用时十分简便。例如一个本地变量可以被一个以NonNull命名的annotation类型所标注，来作为对这个本地变量不能被赋予null值的断言。而我们可以编写与之配套的一个annotation代码分析工具，使用它来对具有前面变量的代码进行解析，并且尝试验证这个断言。当然这些代码并不必自己编写。在JDK安装后，在JDK/bin目录中可以找到名为“apt”的工具，它提供了处理annotation的框架：它启动后扫描源代码中的annotation，并调用我们定义好的annotation处理器完成我们所要完成的工作（比如验证前面例子中的断言）。说到这里，annotation的强大功能似乎可以替代XDoclet这类的工具了，随着我们的深入，大家会更加坚信这一点。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;注：详细描述请参看JSR 250规范 &lt;a href=&quot;http://www.jcp.org/aboutJava/communityprocess/pfd/jsr250/&quot; target=&quot;_blank&quot;&gt;http://www.jcp.org/aboutJava/communityprocess/pfd/jsr250/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;七、总结&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;引用网上的一张图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://img.blog.csdn.net/20140623132746640&quot; alt=&quot;注解总结&quot; width=&quot;1418&quot; height=&quot;1339&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;http://blog.csdn.net/zhoudaxia/article/details/33456147&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;http://blog.csdn.net/zhoudaxia/article/details/33731583&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 17 Oct 2017 15:36:00 +0000</pubDate>
<dc:creator>pony1223</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pony1223/p/7679315.html</dc:identifier>
</item>
<item>
<title>MyServer - 沉迷学习，日渐消瘦</title>
<link>http://www.cnblogs.com/lyrand/p/7684669.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lyrand/p/7684669.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1113952/201710/1113952-20171017232431881-1964387056.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; //一、设置一个8089端口的本地IP服务器&lt;br/&gt;1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; myserver;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.ServerSocket;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.Socket;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyServer {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; MyServer() {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             ServerSocket socket = &lt;span&gt;new&lt;/span&gt; ServerSocket(8089&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 Socket s =&lt;span&gt; socket.accept();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SocketThread(s);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyServer();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; //二、多线程监听客户端连接&lt;br/&gt;1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; myserver;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.OutputStream;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.Socket;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SocketThread &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Runnable{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Socket socket;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SocketThread(Socket socket) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.socket =&lt;span&gt; socket;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         
&lt;span&gt;14&lt;/span&gt;         Thread th = &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        th.start();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         InputStream in = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         OutputStream out = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             in = socket.getInputStream();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取文件读取流&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             out = socket.getOutputStream();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取文件写入流&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             Response response = &lt;span&gt;new&lt;/span&gt; Response(out);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;相应数据到浏览器&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             Request request = &lt;span&gt;new&lt;/span&gt; Request(in);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从网页获取数据&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             System.out.println(&quot;********&quot;+&lt;span&gt;request);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             String url = request.getUrl();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取URL路径
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;response.sendMessage(&quot;hello&quot;);&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            response.sendFile(url);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            out.flush();
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         }&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                out.close();
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                in.close();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                socket.close();
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                e.printStackTrace();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            }    
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; //三、请求相应处理&lt;br/&gt;1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; myserver;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.File;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileInputStream;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileNotFoundException;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.OutputStream;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Response {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; OutputStream out;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Response(OutputStream out) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.out =&lt;span&gt; out;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送消息到浏览器&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sendMessage(String msg) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            out.write(msg.getBytes());
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; sendFile(String filePath) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         File f = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(filePath);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (f.exists() == &lt;span&gt;false&lt;/span&gt;) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断文件是否存在&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         InputStream in = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             in = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInputStream(filePath);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt;[] by = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[1024&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; len = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; ((len=in.read(by)) != -1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 out.write(by, 0, len);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取1024字节并写入到浏览器&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (FileNotFoundException e) {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         }&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            in.close();
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//接受客户端请求&lt;br/&gt;1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; myserver;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashMap;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Request {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String url;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;封装表单数据&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Map&amp;lt;String,String&amp;gt; paramMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String,String&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Request(InputStream in) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;byte&lt;/span&gt;[] by = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[1024&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            in.read(by);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             String str = &lt;span&gt;new&lt;/span&gt; String(by).trim();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;去掉两边空格&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            System.out.println(str);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             
&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (str.startsWith(&quot;GET&quot;)){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;GET开头的流数据&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getGet(str);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;{&lt;span&gt;//&lt;/span&gt;&lt;span&gt;POST开头的流数据&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getPOST(str);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        } 
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; getPOST(String str) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取POST的URL和表单数据&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         String[] s = str.split(&quot;\\s+&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按空格割分字符串为字符串数组&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.url = s[1].substring(1);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;表单的POST提交&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         getMap(s[s.length-1]);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取表单数据&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; getGet(String str) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取GET的URL和表单数据&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         String[] s = str.split(&quot;\\s+&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按空格割分字符串为字符串数组&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (s[1].indexOf(&quot;?&quot;) == -1&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.url = s[1].substring(1);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文本的GET提交&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             String s1 = s[1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;表单的GET提交&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.url = s1.split(&quot;[?]&quot;)[0].substring(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.getMap(s1.split(&quot;[?]&quot;)[1]);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取表单数据&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;GET /url    POST|GET /url?userName=&quot;&quot;&amp;amp;pwd=&quot;&quot;&amp;amp;age=&quot;&quot;&amp;amp;sex=&quot;&quot;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Map&amp;lt;String,String&amp;gt; getMap(String string) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取表单数据&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;         String[] s = string.split(&quot;[&amp;amp;]&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String str : s) {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.paramMap.put(str.split(&quot;[=]&quot;)[0], str.split(&quot;[=]&quot;)[1&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.paramMap;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUrl() {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.url;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;Request [url=&quot; + url + &quot;, paramMap=&quot; + paramMap + &quot;]&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; //模拟GET，POST请求表单提交的登录界面&lt;br/&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;login&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;1.jpg&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;300&quot;&lt;/span&gt;&lt;span&gt; height&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;1.jpg&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;300&quot;&lt;/span&gt;&lt;span&gt; height&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;智商不够，努力来凑&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;login&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;PUT&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;userName&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;pwd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;登录&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相应的数据流信息如下：&lt;/p&gt;
&lt;p&gt;GET /login.html HTTP/1.1&lt;br/&gt;Accept: application/x-ms-application, image/jpeg, application/xaml+xml, image/gif, image/pjpeg, application/x-ms-xbap, */*&lt;br/&gt;Accept-Language: zh-CN&lt;br/&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C)&lt;br/&gt;UA-CPU: AMD64&lt;br/&gt;Accept-Encoding: gzip, deflate&lt;br/&gt;Host: localhost:8089&lt;br/&gt;Connection: Keep-Alive&lt;br/&gt;********Request [url=login.html, paramMap={}]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;GET /1.jpg HTTP/1.1&lt;br/&gt;Accept: */*&lt;br/&gt;Referer: http://localhost:8089/login.html&lt;br/&gt;Accept-Language: zh-CN&lt;br/&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C)&lt;br/&gt;UA-CPU: AMD64&lt;br/&gt;Accept-Encoding: gzip, deflate&lt;br/&gt;Host: localhost:8089&lt;br/&gt;Connection: Keep-Alive&lt;br/&gt;********Request [url=1.jpg, paramMap={}]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;GET /login?userName=123&amp;amp;pwd=123 HTTP/1.1&lt;br/&gt;Accept: application/x-ms-application, image/jpeg, application/xaml+xml, image/gif, image/pjpeg, application/x-ms-xbap, */*&lt;br/&gt;Referer: http://localhost:8089/login.html&lt;br/&gt;Accept-Language: zh-CN&lt;br/&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C)&lt;br/&gt;UA-CPU: AMD64&lt;br/&gt;Accept-Encoding: gzip, deflate&lt;br/&gt;Host: localhost:8089&lt;br/&gt;Connection: Keep-Alive&lt;br/&gt;********Request [url=login, paramMap={userName=123, pwd=123}]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;GET /login?userName=123&amp;amp;pwd=123 HTTP/1.1&lt;br/&gt;Accept: application/x-ms-application, image/jpeg, application/xaml+xml, image/gif, image/pjpeg, application/x-ms-xbap, */*&lt;br/&gt;Accept-Language: zh-CN&lt;br/&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C)&lt;br/&gt;UA-CPU: AMD64&lt;br/&gt;Accept-Encoding: gzip, deflate&lt;br/&gt;Host: localhost:8089&lt;br/&gt;Connection: Keep-Alive&lt;br/&gt;********Request [url=login, paramMap={userName=123, pwd=123}]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;GET /a.txt HTTP/1.1&lt;br/&gt;Accept: application/x-ms-application, image/jpeg, application/xaml+xml, image/gif, image/pjpeg, application/x-ms-xbap, */*&lt;br/&gt;Accept-Language: zh-CN&lt;br/&gt;Cache-Control: no-cache&lt;br/&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C)&lt;br/&gt;UA-CPU: AMD64&lt;br/&gt;Accept-Encoding: gzip, deflate&lt;br/&gt;Host: localhost:8089&lt;br/&gt;Connection: Keep-Alive&lt;br/&gt;********Request [url=a.txt, paramMap={}]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;GET /1.jpg HTTP/1.1&lt;br/&gt;Accept: application/x-ms-application, image/jpeg, application/xaml+xml, image/gif, image/pjpeg, application/x-ms-xbap, */*&lt;br/&gt;Accept-Language: zh-CN&lt;br/&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C)&lt;br/&gt;UA-CPU: AMD64&lt;br/&gt;Accept-Encoding: gzip, deflate&lt;br/&gt;Host: localhost:8089&lt;br/&gt;Connection: Keep-Alive&lt;br/&gt;********Request [url=1.jpg, paramMap={}]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;GET / HTTP/1.1&lt;br/&gt;Accept: application/x-ms-application, image/jpeg, application/xaml+xml, image/gif, image/pjpeg, application/x-ms-xbap, */*&lt;br/&gt;Accept-Language: zh-CN&lt;br/&gt;Cache-Control: no-cache&lt;br/&gt;User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C)&lt;br/&gt;UA-CPU: AMD64&lt;br/&gt;Accept-Encoding: gzip, deflate&lt;br/&gt;Host: localhost:8089&lt;br/&gt;Connection: Keep-Alive&lt;br/&gt;********Request [url=, paramMap={}]&lt;/p&gt;

&lt;p&gt;总结：以上是用代码模拟实现的一个tomcat。&lt;/p&gt;

</description>
<pubDate>Tue, 17 Oct 2017 15:35:00 +0000</pubDate>
<dc:creator>沉迷学习，日渐消瘦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lyrand/p/7684669.html</dc:identifier>
</item>
<item>
<title>JAVA基础-反射 - 阿拉巴洞</title>
<link>http://www.cnblogs.com/0813lichenyu/p/7684573.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/0813lichenyu/p/7684573.html</guid>
<description>&lt;p&gt;一、反射的介绍&lt;/p&gt;
&lt;p&gt;    JAVA反射机制是在运行状态中,能够获取任意一个类的所有属性和方法，对于任意一个对象,都能够调用它的任意&lt;br/&gt;一个方法。这种动态获取的以及动态调用对象的方法的功能称为java语言的反射机制。JAVA编译时是先获取到类，然&lt;br/&gt;后才是类里边的属性和方法，而反射则和编译相反，他是先获取类里边的对象和方法然后在告诉他是哪个类里的。简单&lt;br/&gt;来说, 就可以把.class文件比做动物的尸体, 而反射技术就是对尸体的一种解剖.通过反射技术, 我们可以拿到该字节码&lt;br/&gt;文件中所有的东西, 例如成员变量, 成员方法, 构造方法, 而且还包括私有。想要反射首先要获取到程序的“尸体”也就&lt;br/&gt;是.class文件。&lt;/p&gt;
&lt;p&gt;二、字节码文件的获取 &lt;/p&gt;
&lt;p&gt;    获取字节码对象有3种方式：&lt;br/&gt;1、类名.class - 这是一个静态的属性, 只要知道类名, 就可以获取&lt;br/&gt;2、对象名.getClass() - Object类里的getClass()方法，对象已经存在的情况下, 可以使用这种方式&lt;br/&gt;3、Claire.forName(&quot;类的全类名(包名+类名)&quot;) - 通过Class类里的静态方法forName来获取节码对象&lt;br/&gt;  举例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ClassNotFoundException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过Object的getClass()方法获取，必须要有对象&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; Student s = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Student();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; Class clazz =&lt;span&gt; s.getClass();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过类名获取字节码对象&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; Class clazz2 = Student.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过Class类里的静态方法forName来获取节码对象&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; Class clazz3 = Class.forName(&quot;com.fanshe.Student&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; System.out.println(clazz ==&lt;span&gt; clazz2);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; System.out.println(clazz ==&lt;span&gt; clazz3);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;System.out.println(clazz);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    字节码文件其实就是描述.class文件的对象。&lt;/p&gt;
&lt;p&gt;三、对构造方法的操作&lt;/p&gt;
&lt;p&gt;    *通过反射获取公有构造方法的两种方式：&lt;br/&gt;1、返回一个 Constructor 对象，它反映此 Class 对象所表示的类的指定公共构造方法，可以获取无参构造也可以&lt;br/&gt;根据传入的类型来匹配对应的构造方法：getConstructor(Class&amp;lt;?&amp;gt;... parameterTypes)&lt;br/&gt;2、返回一个包含某些 Constructor 对象的数组，这些对象反映此 Class 对象所表示的类的所有公共构造方法：&lt;br/&gt;                                                               getConstructors()&lt;br/&gt;3、创建此 Class 对象所表示的类的一个新实例：&lt;br/&gt;                                                               newInstance()&lt;/p&gt;&lt;p&gt;    *暴力获取（可以获取全部权限的）：&lt;br/&gt;1、返回一个 Constructor 对象，该对象反映此 Class 对象所表示的类或接口的指定构造方法：&lt;br/&gt;                                 getDeclaredConstructor(Class&amp;lt;?&amp;gt;... parameterTypes)&lt;br/&gt;2、返回 Constructor 对象的一个数组，这些对象反映此 Class 对象表示的类声明的所有构造方法：&lt;br/&gt;                                 getDeclaredConstructors()&lt;br/&gt;  举例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ReflectiveOperationException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Class.forName()获取字节码对象&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; Class&amp;lt;?&amp;gt; forName = Class.forName(&quot;com.fanshe.Student&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取所有公共构造方法&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; Constructor&amp;lt;?&amp;gt;[] constructors =&lt;span&gt; forName.getConstructors();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; (Constructor&amp;lt;?&amp;gt;&lt;span&gt; constructor : constructors) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;System.out.println(constructor);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; System.out.println(&quot;--------------------------------------&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 暴力获取，可以获取所有的构造方法（包括私有的）&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; Constructor&amp;lt;?&amp;gt; c1 =&lt;span&gt; forName.getDeclaredConstructor();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; c1.setAccessible(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;System.out.println(c1);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取有参构造&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; Constructor&amp;lt;?&amp;gt; c2 = forName.getConstructor(String.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;System.out.println(c2);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;四、对成员变量和方法的操作&lt;/p&gt;
&lt;p&gt;    *公有成员变量获取方法：&lt;br/&gt;1、返回一个 Field 对象，它反映此 Class 对象所表示的类或接口的指定公共成员字段：&lt;br/&gt;                          getField(String name) - 参数为要返回的变量名&lt;br/&gt;2、返回一个包含某些 Field 对象的数组，这些对象反映此 Class 对象所表示的类或接口的所有可访问公共字段：&lt;br/&gt;                          getFields() - 参数为要返回的变量名&lt;/p&gt;&lt;p&gt;    *任意成员变量获取方法：&lt;br/&gt;1、返回一个 Field 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明字段：&lt;br/&gt;                          getDeclaredField(String name) - 参数为要返回的变量名&lt;br/&gt;2、返回 Field 对象的一个数组，这些对象反映此 Class 对象所表示的类或接口所声明的所有字段：&lt;br/&gt;                         getDeclaredFields() - 参数为要返回的变量名&lt;br/&gt; &lt;br/&gt;    *获取公有的方法：&lt;br/&gt;1、返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法：&lt;br/&gt;                         getMethod(String name, Class&amp;lt;?&amp;gt;... parameterTypes) - name 方法名、parameterTypes 参数列表&lt;br/&gt;2、返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口&lt;br/&gt;声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法：&lt;br/&gt;                         getMethods()&lt;/p&gt;&lt;p&gt;    *暴力获取方法：&lt;br/&gt;1、 返回一个 Method 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法：&lt;br/&gt;                         getDeclaredMethod(String name, Class&amp;lt;?&amp;gt;... parameterTypes) - name 方法名、parameterTypes&lt;br/&gt;参数列表&lt;br/&gt;2、返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、&lt;br/&gt;默认（包）访问和私有方法，但不包括继承的方法：&lt;br/&gt;                        getDeclaredMethods()&lt;br/&gt;    需要注意的是想要获取私有的变量或者方法时应使用AccessibleObject类里的setAccessible(boolean flag)方法 - 参数&lt;br/&gt;值为 true 则指示反射的对象在使用时应该取消 Java 语言访问检查。值为 false 则指示反射的对象应该实施 Java 语言访问&lt;br/&gt;检查。&lt;br/&gt;    Constructor, Field, Method都是AccessibleObject的子类所以可以直接使用父类的setAccessible(boolean flag)方法。&lt;/p&gt;&lt;p&gt;    **通过反射获得变量的流程：&lt;br/&gt;1. 通过反射获取该类的字节码对象&lt;br/&gt;2. 创建该类对象&lt;br/&gt;3. 获取该类中需要操作的字段(成员变量) &lt;br/&gt;4. 通过字段对象中的方法修改属性值&lt;/p&gt;
&lt;p&gt;    **通过反射执行方法的流程&lt;br/&gt;1. 通过反射获取该类的字节码对象&lt;br/&gt;2. 创建该类对象&lt;br/&gt;3. 调用getMethod方法获取Method对象, 方法形参接受方法的名字&lt;br/&gt;4. 调用Method方法中的invoke()将方法运行&lt;br/&gt;  举例：&lt;br/&gt;*被反射的学生01类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student01 {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String name;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Student01() {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated constructor stub&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; Student01(String name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; name() {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; System.out.println(&quot;测试&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getAge() {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setAge(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; age) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; mane1() {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; System.out.println(&quot;这是个萌萌哒私有的&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &quot;Student01 [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  *对学生01类进行反射&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ReflectiveOperationException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取字节码对象&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; Class&amp;lt;?&amp;gt; clazz = Class.forName(&quot;com.fanshe.Student01&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建该类的对象&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; Object stu =&lt;span&gt; clazz.newInstance();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; System.out.println(stu);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取学生类的name变量&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; Field f1 = clazz.getField(&quot;name&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;* set将指定对象变量上此 Field 对象表示的字段设置为指定的新值。
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;* 为stu对象里的name变量赋值
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; f1.set(stu, &quot;李四&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; get()返回指定对象上此 Field 表示的字段的值。&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; Object name =&lt;span&gt; f1.get(stu);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 暴力获取age字段&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; Field f2 = clazz.getDeclaredField(&quot;age&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;System.out.println(f2);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 让jvm不检查权限&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; f2.setAccessible(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 为其赋值&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; f2.set(stu, 24&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取stu对象的f2字段的值&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; Object age =&lt;span&gt; f2.get(stu);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;System.out.println(name);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;System.out.println(age);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 公有无参无返回值，name()&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; Method method = clazz.getMethod(&quot;name&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用Method类的invoke方法执行name方法&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;method.invoke(stu);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 公有代参无返回值,参数为String类型&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; Method m2 = clazz.getMethod(&quot;setName&quot;, String.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行stu对象的setName方法，传入参数&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; m2.invoke(stu, &quot;李晨宇&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 公有无参有返回值&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; Method m3 = clazz.getMethod(&quot;getName&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回值为invoke&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; Object invoke =&lt;span&gt; m3.invoke(stu);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;System.out.println(invoke);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 私有&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; Method m4 = clazz.getDeclaredMethod(&quot;mane1&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 让jvm不检查权限&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; m4.setAccessible(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行stu对象的mane1方法&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;m4.invoke(stu);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    需要注意的是，反射无参构造时被反射的类一定要有无参构造方法，默认生成的也算。&lt;br/&gt;五、反射的应用&lt;/p&gt;
&lt;p&gt;    我们在开发的时候，由于要考虑到代码的重用性，就会用反射来处理一些问题。而JAVA的一些常用jar包和主流框架的配置&lt;br/&gt;都用到了反射的原理，学习反射有助于我们对源码的阅读和理解。BeanUtils工具类（Apache开发的便于操作JavaBeen的工具类）&lt;br/&gt;就用到了反射的方法。&lt;br/&gt;  *BeanUtils的部分实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyBeanUtils {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;因为是工具类，不需要实例化。所以私有构造方法&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt; MyBeanUtils() {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated constructor stub&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;* 给对象中的属性赋值 传入类的对象类型，和要修改的属性的值不确定所以用Object类型，属性名用String类型
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setProrerty(Object object, String name, Object values)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ReflectiveOperationException, SecurityException {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取传入对象的字节码文件&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; Class clazz =&lt;span&gt; object.getClass();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据传入的属性获取Field对象，因为不确定属性的权限，用的暴力反射&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; Field field =&lt;span&gt; clazz.getDeclaredField(name);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 让jvm不检查权限&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; field.setAccessible(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 为object对象里的name属性赋值&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;field.set(object, values);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取对象中的属性&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String getProrerty(Object object, String name)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ReflectiveOperationException, SecurityException {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取传入对象的字节码文件&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; Class clazz =&lt;span&gt; object.getClass();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据传入的属性获取Field对象，因为不确定属性的权限，用的暴力反射&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; Field field =&lt;span&gt; clazz.getDeclaredField(name);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 让jvm不检查权限&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; field.setAccessible(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取name属性的值&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; Object object2 =&lt;span&gt; field.get(object);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; System.out.println(object);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将值返回&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;&lt;span&gt; object2.toString();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 给对象中的属性赋值(通过Map的方式)，Map里key存的是属性名，value存的是要赋的值&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; populat(Object object, Map map) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ReflectiveOperationException, SecurityException {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取传入对象的字节码文件&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; Class clazz =&lt;span&gt; object.getClass();
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回此集合中的key集合&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; Set keySet =&lt;span&gt; map.keySet();
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历key&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Object object2 : keySet) {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获得value值&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; Object value =&lt;span&gt; map.get(object2);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据传入的key(属性)获取Field对象，因为不确定属性的权限，用的暴力反射&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; Field field =&lt;span&gt; clazz.getDeclaredField(object2.toString());
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 让jvm不检查权限&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; field.setAccessible(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 赋值&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;field.set(object, value);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (NoSuchFieldException e) {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 出现异常，给出友好型提示&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt; System.out.println(&quot;Mdzz,属性都记不住&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  *测试工具类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; RuntimeException, ReflectiveOperationException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建学生01对象&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; Student01 s1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Student01();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用MyBeanUtils工具类为学生01对象对象赋值&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; MyBeanUtils.setProrerty(s1, &quot;name&quot;, &quot;啦啦&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; MyBeanUtils.setProrerty(s1, &quot;age&quot;, 15&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用MyBeanUtils工具类为学生01对象对象取值&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; String name = MyBeanUtils.getProrerty(s1, &quot;name&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; String age = MyBeanUtils.getProrerty(s1, &quot;age&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印出来&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;System.out.println(name);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;System.out.println(age);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; System.out.println(&quot;------------------------------------ &quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建HashMap作为数据源&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; HashMap&amp;lt;String, Object&amp;gt; hashMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 为HashMap赋值&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; hashMap.put(&quot;qqqqq&quot;, &quot;大大的&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 属性不存在会给出友好型提示&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; hashMap.put(&quot;name&quot;, &quot;大大的&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; hashMap.put(&quot;age&quot;, 110&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用MyBeanUtils工具类为学生01对象对象fu赋值&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;MyBeanUtils.populat(s1, hashMap);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;System.out.println(s1);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 17 Oct 2017 15:25:00 +0000</pubDate>
<dc:creator>阿拉巴洞</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/0813lichenyu/p/7684573.html</dc:identifier>
</item>
<item>
<title>爱剪辑初使用 - 卡卡真的很卡</title>
<link>http://www.cnblogs.com/orchidbaby/p/7684566.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/orchidbaby/p/7684566.html</guid>
<description>&lt;p&gt;清晨时候做了个美梦，梦到了欢欢 ~ ~&lt;br/&gt;入住博客园第三天。 醒来时候发现微信好几条信息，一条是我姐让我写外国游记，一条是我堂哥问我要PPT模板，以及将一部BGM视频转高清。先是用狸窝将视频质量调高了点，但距离高清还差得远。于是想着将视频中出现的曲目，用网易云将MV下载下来，然后选择所要部分，剪切合并。由于没有剪辑的经验，所以抛弃Adobe的Pr选择了便捷上手的爱剪辑。道路是曲折的。以下是初设步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;下载全部曲目MV&lt;/li&gt;
&lt;li&gt;各自剪裁&lt;/li&gt;
&lt;li&gt;各自去水印&lt;/li&gt;
&lt;li&gt;各自加歌曲信息&lt;/li&gt;
&lt;li&gt;设置转场动画&lt;/li&gt;
&lt;li&gt;合并各个片段&lt;/li&gt;
&lt;li&gt;片头片尾过渡&lt;/li&gt;
&lt;li&gt;剪掉自带的片头片尾&lt;/li&gt;
&lt;li&gt;导出视频&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;下载全部曲目MV：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;下载1080pMV要积分。&lt;/li&gt;
&lt;li&gt;有些曲目网易云没有资源。&lt;/li&gt;
&lt;li&gt;有些曲目没有MV&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;积分是什么？反正能下的都下了，确实画质很棒。找不到资源的，我是用西林街搜索，找到了The Dawn的原画MV。至于有些没MV的，就只能找类似的替代了，后面会提到。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;各自剪裁：&lt;/strong&gt;&lt;br/&gt;打开爱剪辑，可以了解大概用法，就是将几部视频拼凑输出，本身自带一分钟黑白幕布。双击添加MV，然后可以进行初步大概剪裁&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/CgRSCGg.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击播放进行预览，走到你想开始剪的地方，点击下面开始时间后面的圆形箭头按钮，就能标记。同理，结束点也一样。然后点击播放所选片段可预览，并通过前进后退按钮进行微调。剪错也没事，后面还可以编辑。勾上淡入淡出，不然承接会显得突兀。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TAJKzyL.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各自去水印：&lt;/strong&gt;&lt;br/&gt;点击上方菜单栏的叠加素材，选择侧栏的去水印，添加水印区域，由于水印不是一直存在，所以选择第二个，可设置时间，第一个是一整段都覆盖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Np9xqhy.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各自加歌曲信息：&lt;/strong&gt;&lt;br/&gt;选择最上方菜单的字幕，然后在右侧播放视频，找到合适时间暂停，双击进行插入字幕，然后可以设置字幕的出现，持续，消失时间长度，调整位置，并设置效果参数。最上方的好莱坞特效只允许8个字，包括字母。不然会被截断。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/m3Cd0c0.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设置转场动画：&lt;/strong&gt;&lt;br/&gt;转场指的是后一部视频承接上一部视频，所以第一部设置不了转场。点击某一部视频，然后点击上方的转场特效。以及相关的效果参数，2-5秒内为佳。收起可以看全部分类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;合并各个片段：&lt;/strong&gt;&lt;br/&gt;这步骤就不需要了，因为软件自带结构就是这样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;片头片尾过渡：&lt;/strong&gt;&lt;br/&gt;添加两端黑幕，各自剪裁5秒钟，分别拖到开头和结尾。同时设置转场及勾上淡入淡出。最好首尾视频（非黑幕）的开头结尾都取声音平缓微弱，作为过渡效果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;剪掉自带的片头片尾：&lt;/strong&gt;&lt;br/&gt;这里我使用视频编辑专家，缺点是精确度不够高，但还凑合。其他软件没尝试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;导出视频：&lt;/strong&gt;&lt;br/&gt;不说。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;特殊操作&quot;&gt;特殊操作&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;给图片加动态：&lt;/strong&gt;&lt;br/&gt;有一首Victory是只有封面图的，所以给它加上动态。点击最上方菜单的画面风格，选择侧栏动景，选额效果，设置时间就可以了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/vVvV5ps.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给音乐换MV：&lt;/strong&gt;&lt;br/&gt;两首歌是没有MV的，所以找了其他类似的MV，混剪进去。先将MV添加进去，然后使用音轨设置为“原片无音轨”，然后在最上方音频添加两首歌。根据MV截的长度进行适应，最好音频和mv长度一致。过长会与下一首歌重叠，过短就是部分MV无声音。然后设置音频的起止时间（对应各自MV的起止时间）。&lt;br/&gt;&lt;strong&gt;添加图片：&lt;/strong&gt;&lt;br/&gt;如果想像上面那样播放一张图片，只需先播放视频，在想插入位置暂停，然后点击菜单栏叠加素材，选择添加贴图，找到本地目标图片，添加进去，调整覆盖设置起止时间。如果想另开一段，则先添加一段视频，设置无声，直接用白色幕布，重复操作即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/hYFbI8u.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;这是我最终作品的链接：&lt;a href=&quot;https://www.bilibili.com/video/av15484129/&quot; class=&quot;uri&quot; title=&quot;燃の殿堂级BGM合集&quot;&gt;https://www.bilibili.com/video/av15484129/&lt;/a&gt;&lt;br/&gt;已经上传到B站了，超清无广告。先给AB站点个赞，竟然连嗅探也屏蔽了，非常强调版权，以及对投稿者的尊重。包括整个网站的架构，界面，体验，运行机制都很人性化（除了升级VIP答题）。&lt;br/&gt;对于爱剪辑这个软件，应该说“麻雀虽小，五脏俱全”。自然是比不过pr,但是处理简单-中等的编辑还是游刃有余的。毕竟草榴（外网）上面的很多视频也是用爱剪辑加工的。（懂的人自然懂）而且由于社区资源的不断扩大，能够直接使用的轮子和特效也越来越丰富，闲暇之余玩一玩挺不错的。&lt;br/&gt;明天还会不会做梦？&lt;/p&gt;
</description>
<pubDate>Tue, 17 Oct 2017 15:23:00 +0000</pubDate>
<dc:creator>卡卡真的很卡</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/orchidbaby/p/7684566.html</dc:identifier>
</item>
<item>
<title>[js高手之路]html5 canvas动画教程 - 自己动手做一个类似windows的画图软件 - ghostwu</title>
<link>http://www.cnblogs.com/ghostwu/p/7684379.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ghostwu/p/7684379.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt;  2&lt;/span&gt;     &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
&lt;span&gt;  3&lt;/span&gt;     &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;
&lt;span&gt;  4&lt;/span&gt;     &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&amp;gt;
&lt;span&gt;  5&lt;/span&gt;     &amp;lt;title&amp;gt;windows简易画图工具 - by ghostwu&amp;lt;/title&amp;gt;
&lt;span&gt;  6&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;  9&lt;/span&gt;     &amp;lt;div class=&quot;paint&quot;&amp;gt;
&lt;span&gt; 10&lt;/span&gt;         &amp;lt;div class=&quot;paint-header&quot;&amp;gt;
&lt;span&gt; 11&lt;/span&gt;             &amp;lt;ul&amp;gt;
&lt;span&gt; 12&lt;/span&gt;                 &amp;lt;li class=&quot;active&quot;&amp;gt;形状&amp;lt;/li&amp;gt;
&lt;span&gt; 13&lt;/span&gt;                 &amp;lt;li&amp;gt;颜色&amp;lt;/li&amp;gt;
&lt;span&gt; 14&lt;/span&gt;                 &amp;lt;li&amp;gt;绘制类型&amp;lt;/li&amp;gt;
&lt;span&gt; 15&lt;/span&gt;                 &amp;lt;li&amp;gt;线条宽度&amp;lt;/li&amp;gt;
&lt;span&gt; 16&lt;/span&gt;                 &amp;lt;li&amp;gt;橡皮擦&amp;lt;/li&amp;gt;
&lt;span&gt; 17&lt;/span&gt;             &amp;lt;/ul&amp;gt;
&lt;span&gt; 18&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt; 19&lt;/span&gt;         &amp;lt;div class=&quot;paint-body&quot;&amp;gt;
&lt;span&gt; 20&lt;/span&gt;             &amp;lt;div class=&quot;siderbar&quot;&amp;gt;
&lt;span&gt; 21&lt;/span&gt;                 &amp;lt;div class=&quot;item active&quot; data-type=&quot;paint-shape&quot;&amp;gt;
&lt;span&gt; 22&lt;/span&gt;                     &amp;lt;ul&amp;gt;
&lt;span&gt; 23&lt;/span&gt;                         &amp;lt;li class=&quot;active&quot; data-role=&quot;line&quot;&amp;gt;线条&amp;lt;/li&amp;gt;
&lt;span&gt; 24&lt;/span&gt;                         &amp;lt;li data-role=&quot;circle&quot;&amp;gt;圆形&amp;lt;/li&amp;gt;
&lt;span&gt; 25&lt;/span&gt;                         &amp;lt;li data-role=&quot;rect&quot;&amp;gt;矩形&amp;lt;/li&amp;gt;
&lt;span&gt; 26&lt;/span&gt;                         &amp;lt;li data-role=&quot;polygon&quot;&amp;gt;正多边形&amp;lt;/li&amp;gt;
&lt;span&gt; 27&lt;/span&gt;                         &amp;lt;li data-role=&quot;arrow&quot;&amp;gt;箭头&amp;lt;/li&amp;gt;
&lt;span&gt; 28&lt;/span&gt;                     &amp;lt;/ul&amp;gt;
&lt;span&gt; 29&lt;/span&gt;                 &amp;lt;/div&amp;gt;
&lt;span&gt; 30&lt;/span&gt;                 &amp;lt;div class=&quot;item&quot; data-type=&quot;paint-color&quot;&amp;gt;
&lt;span&gt; 31&lt;/span&gt;                     &amp;lt;ul&amp;gt;
&lt;span&gt; 32&lt;/span&gt;                         &amp;lt;li data-role=&quot;strokeStyle&quot;&amp;gt;
&lt;span&gt; 33&lt;/span&gt;                             &amp;lt;input type=&quot;color&quot; data-role=&quot;strokeStyle&quot;&amp;gt;
&lt;span&gt; 34&lt;/span&gt;                         &amp;lt;/li&amp;gt;
&lt;span&gt; 35&lt;/span&gt;                         &amp;lt;li data-role=&quot;fillStyle&quot;&amp;gt;
&lt;span&gt; 36&lt;/span&gt;                             &amp;lt;input type=&quot;color&quot; data-role=&quot;fillStyle&quot;&amp;gt;
&lt;span&gt; 37&lt;/span&gt;                         &amp;lt;/li&amp;gt;
&lt;span&gt; 38&lt;/span&gt;                     &amp;lt;/ul&amp;gt;
&lt;span&gt; 39&lt;/span&gt;                 &amp;lt;/div&amp;gt;
&lt;span&gt; 40&lt;/span&gt;                 &amp;lt;div class=&quot;item&quot; data-type=&quot;paint-type&quot;&amp;gt;
&lt;span&gt; 41&lt;/span&gt;                     &amp;lt;ul&amp;gt;
&lt;span&gt; 42&lt;/span&gt;                         &amp;lt;li data-role=&quot;stroke&quot;&amp;gt;描边&amp;lt;/li&amp;gt;
&lt;span&gt; 43&lt;/span&gt;                         &amp;lt;li data-role=&quot;fill&quot;&amp;gt;填充&amp;lt;/li&amp;gt;
&lt;span&gt; 44&lt;/span&gt;                     &amp;lt;/ul&amp;gt;
&lt;span&gt; 45&lt;/span&gt;                 &amp;lt;/div&amp;gt;
&lt;span&gt; 46&lt;/span&gt;                 &amp;lt;div class=&quot;item&quot; data-type=&quot;paint-line&quot;&amp;gt;
&lt;span&gt; 47&lt;/span&gt;                     &amp;lt;ul&amp;gt;
&lt;span&gt; 48&lt;/span&gt;                         &amp;lt;li data-role=&quot;1&quot;&amp;gt;小号&amp;lt;/li&amp;gt;
&lt;span&gt; 49&lt;/span&gt;                         &amp;lt;li data-role=&quot;4&quot;&amp;gt;中号&amp;lt;/li&amp;gt;
&lt;span&gt; 50&lt;/span&gt;                         &amp;lt;li data-role=&quot;7&quot;&amp;gt;大号&amp;lt;/li&amp;gt;
&lt;span&gt; 51&lt;/span&gt;                         &amp;lt;li&amp;gt;
&lt;span&gt; 52&lt;/span&gt;                             &amp;lt;input type=&quot;number&quot; data-role=&quot;line-size&quot; placeholder=&quot;请输入数字&quot;&amp;gt;
&lt;span&gt; 53&lt;/span&gt;                         &amp;lt;/li&amp;gt;
&lt;span&gt; 54&lt;/span&gt;                     &amp;lt;/ul&amp;gt;
&lt;span&gt; 55&lt;/span&gt;                 &amp;lt;/div&amp;gt;
&lt;span&gt; 56&lt;/span&gt;                 &amp;lt;div class=&quot;item&quot; data-type=&quot;paint-erase&quot;&amp;gt;
&lt;span&gt; 57&lt;/span&gt;                     &amp;lt;ul&amp;gt;
&lt;span&gt; 58&lt;/span&gt;                         &amp;lt;li&amp;gt;
&lt;span&gt; 59&lt;/span&gt;                             &amp;lt;input type=&quot;number&quot; data-role=&quot;erase-size&quot; placeholder=&quot;请输入数字&quot;&amp;gt;
&lt;span&gt; 60&lt;/span&gt;                         &amp;lt;/li&amp;gt;
&lt;span&gt; 61&lt;/span&gt;                     &amp;lt;/ul&amp;gt;
&lt;span&gt; 62&lt;/span&gt;                 &amp;lt;/div&amp;gt;
&lt;span&gt; 63&lt;/span&gt;             &amp;lt;/div&amp;gt;
&lt;span&gt; 64&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt; 65&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt; 66&lt;/span&gt;     &amp;lt;script&amp;gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &amp;lt;![CDATA[&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; oPaintBody = document.querySelector( '.paint-body'&lt;span&gt; );
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; oC = document.createElement( 'canvas'&lt;span&gt; );
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         oC.setAttribute( 'width', '830'&lt;span&gt; );
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;         oC.setAttribute( 'height', '500'&lt;span&gt; );
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;        oPaintBody.appendChild( oC );
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; aHeaderLi = document.querySelectorAll('.paint-header li'&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;             aItem = document.querySelectorAll('.paint-body .item'&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;             oCanvas = document.querySelector('.paint canvas'&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;             oGc = oCanvas.getContext('2d'&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;             cWidth = oCanvas.width, cHeight =&lt;span&gt; oCanvas.height,
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;             curItem = aItem[0&lt;span&gt;],
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;             aItemLi = curItem.querySelectorAll('li'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; 
&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (let i = 0, len = aHeaderLi.length; i &amp;lt; len; i++) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;头部选项卡切换功能&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;             aHeaderLi[i].onclick = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (let j = 0; j &amp;lt; len; j++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                     aHeaderLi[j].classList.remove('active'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;                     aItem[j].style.display = 'none'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                 aItem[i].style.display = &quot;block&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.classList.add('active'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;                 curItem =&lt;span&gt; aItem[i];
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;                 aItemLi = curItem.querySelectorAll('li'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;                activeItem(aItemLi);
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;        activeItem(aItemLi);
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; role = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt; activeItem(aItemLi) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;canvas左侧选项卡切换功能&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (let i = 0, len = aItemLi.length; i &amp;lt; len; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;                 aItemLi[i].onclick = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;                     checkPaintType(&lt;span&gt;this&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制类型&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (let j = 0; j &amp;lt; len; j++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;                         aItemLi[j].classList.remove('active'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;                     &lt;span&gt;this&lt;/span&gt;.classList.add('active'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Shape(canvasObj, cxtObj, w, h) {
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.oCanvas =&lt;span&gt; canvasObj;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.oGc =&lt;span&gt; cxtObj;
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.oCanvas.width =&lt;span&gt; w;
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.oCanvas.height =&lt;span&gt; h;
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.fillStyle = '#000'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.storkeStyle = '#000'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.lineWidth = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.drawType = 'line'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.paintType = 'stroke'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.nums = 6; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;正多边形的边数&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; 
&lt;span&gt;120&lt;/span&gt;         Shape.prototype =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;             init: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.oGc.fillStyle = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.fillStyle;
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.oGc.strokeStyle = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.strokeStyle;
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.oGc.lineWidth = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.lineWidth;
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;             draw: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; _this = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.oCanvas.onmousedown = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (ev) {
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;                    _this.init();
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; oEvent = ev ||&lt;span&gt; event,
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;                         startX = oEvent.clientX -&lt;span&gt; _this.oCanvas.offsetLeft,
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;                         startY = oEvent.clientY -&lt;span&gt; _this.oCanvas.offsetTop;
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;                     _this.oCanvas.onmousemove = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (ev) {
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;                         _this.oGc.clearRect(0, 0&lt;span&gt;, _this.oCanvas.width, _this.oCanvas.height);
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;                         &lt;span&gt;var&lt;/span&gt; oEvent = ev ||&lt;span&gt; event,
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;                             endX = oEvent.clientX -&lt;span&gt; _this.oCanvas.offsetLeft,
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;                             endY = oEvent.clientY -&lt;span&gt; _this.oCanvas.offsetTop;
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;                        _this[_this.drawType](startX, startY, endX, endY);
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;                    };
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;                     _this.oCanvas.onmouseup = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;                         _this.oCanvas.onmousemove = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;                         _this.oCanvas.onmouseup = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;             line: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (x1, y1, x2, y2) {
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.oGc.beginPath();
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.oGc.moveTo(x1, y1);
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.oGc.lineTo(x2, y2);
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.oGc.closePath();
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.oGc.stroke();
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;             circle: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (x1, y1, x2, y2) {
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.oGc.beginPath();
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; r = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.oGc.arc(x1, y1, r, 0, 2 * Math.PI, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.oGc.closePath();
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.oGc[&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.paintType]();
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;             rect: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (x1, y1, x2, y2) {
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.oGc.beginPath();
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.oGc.rect(x1, y1, x2 - x1, y2 -&lt;span&gt; y1);
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.oGc[&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.paintType]();
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;             polygon: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (x1, y1, x2, y2) {
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; angle = 360 / &lt;span&gt;this&lt;/span&gt;.nums * Math.PI / 180;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;边对应的角的弧度&lt;/span&gt;
&lt;span&gt;167&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; r = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.oGc.beginPath();
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; &lt;span&gt;this&lt;/span&gt;.nums; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;                     &lt;span&gt;this&lt;/span&gt;.oGc.lineTo(x1 + r * Math.cos(angle * i), y1 + r * Math.sin(angle *&lt;span&gt; i));
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.oGc.closePath();
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.oGc[&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.paintType]();
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt; 
&lt;span&gt;177&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; oShape = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Shape(oCanvas, oGc, cWidth, cHeight);
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; checkPaintType(liType) {
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; dataType =&lt;span&gt; liType.parentNode.parentNode.dataset.type;
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; curType =&lt;span&gt; liType.dataset.role;
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (dataType) {
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; 'paint-shape': &lt;span&gt;//&lt;/span&gt;&lt;span&gt;形状&lt;/span&gt;
&lt;span&gt;183&lt;/span&gt;                     oShape.drawType =&lt;span&gt; curType;
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (curType == 'polygon'&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;                         oShape.nums = prompt(&quot;请输入边数&quot;, 6&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt; &lt;span&gt;                    oShape.draw();
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; 'paint-color': &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制颜色&lt;/span&gt;
&lt;span&gt;190&lt;/span&gt;                     liType.children[0].onchange = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt;                         oShape[&lt;span&gt;this&lt;/span&gt;.dataset.role] = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value;
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt; &lt;span&gt;                    oShape.draw();
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; 'paint-type': &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制类型&lt;/span&gt;
&lt;span&gt;196&lt;/span&gt;                     oShape.paintType =&lt;span&gt; curType;
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt; &lt;span&gt;                    oShape.draw();
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ]]&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span&gt;202&lt;/span&gt;     &amp;lt;style&amp;gt;
&lt;span&gt;203&lt;/span&gt;         .paint *&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt;             margin: 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt;             padding: 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt; 
&lt;span&gt;208&lt;/span&gt; &lt;span&gt;        .paint ul,
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt; &lt;span&gt;        .paint li {
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt;             list-&lt;span&gt;style: none;
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt; 
&lt;span&gt;213&lt;/span&gt; &lt;span&gt;        .paint li:hover {
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt; &lt;span&gt;            cursor: pointer;
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt; 
&lt;span&gt;217&lt;/span&gt; &lt;span&gt;        .paint {
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt; &lt;span&gt;            width: 980px;
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt; &lt;span&gt;            margin: 20px auto;
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt; &lt;span&gt;            border: 1px solid #ccc;
&lt;/span&gt;&lt;span&gt;221&lt;/span&gt; &lt;span&gt;            overflow: hidden;
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt; 
&lt;span&gt;224&lt;/span&gt;         .paint .paint-&lt;span&gt;header ul {
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt; &lt;span&gt;            width: 980px;
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt; &lt;span&gt;            height: 40px;
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt;             line-&lt;span&gt;height: 40px;
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt;             border-&lt;span&gt;bottom: 1px solid #ccc;
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt; 
&lt;span&gt;231&lt;/span&gt;         .paint .paint-&lt;span&gt;header li {
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt;             &lt;span&gt;float&lt;/span&gt;&lt;span&gt;: left;
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt; &lt;span&gt;            width: 120px;
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt; &lt;span&gt;            height: 40px;
&lt;/span&gt;&lt;span&gt;235&lt;/span&gt;             line-&lt;span&gt;height: 40px;
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt;             text-&lt;span&gt;align: center;
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt; 
&lt;span&gt;239&lt;/span&gt; &lt;span&gt;        .paint li.active {
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt;             box-shadow: #666&lt;span&gt; 0px 1px 8px inset;
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt; 
&lt;span&gt;243&lt;/span&gt;         .paint .paint-&lt;span&gt;body .siderbar {
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt;             &lt;span&gt;float&lt;/span&gt;&lt;span&gt;: left;
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt; &lt;span&gt;            width: 150px;
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt; &lt;span&gt;            height: 500px;
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt; 
&lt;span&gt;249&lt;/span&gt;         .paint .paint-&lt;span&gt;body .item {
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt; &lt;span&gt;            width: 150px;
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt; &lt;span&gt;            overflow: hidden;
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt; &lt;span&gt;            display: none;
&lt;/span&gt;&lt;span&gt;253&lt;/span&gt; &lt;span&gt;            height: 500px;
&lt;/span&gt;&lt;span&gt;254&lt;/span&gt;             border-&lt;span&gt;right: 1px solid #ccc;
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;256&lt;/span&gt; 
&lt;span&gt;257&lt;/span&gt;         .paint .paint-&lt;span&gt;body canvas {
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt;             &lt;span&gt;float&lt;/span&gt;&lt;span&gt;: right;
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt; 
&lt;span&gt;261&lt;/span&gt;         .paint .paint-&lt;span&gt;body .item li {
&lt;/span&gt;&lt;span&gt;262&lt;/span&gt; &lt;span&gt;            height: 40px;
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt;             text-&lt;span&gt;align: center;
&lt;/span&gt;&lt;span&gt;264&lt;/span&gt;             border-&lt;span&gt;bottom: 1px solid #ccc;
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt;             line-&lt;span&gt;height: 40px;
&lt;/span&gt;&lt;span&gt;266&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;267&lt;/span&gt; 
&lt;span&gt;268&lt;/span&gt;         .paint .paint-&lt;span&gt;body .active {
&lt;/span&gt;&lt;span&gt;269&lt;/span&gt; &lt;span&gt;            display: block;
&lt;/span&gt;&lt;span&gt;270&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;271&lt;/span&gt;     &amp;lt;/style&amp;gt;
&lt;span&gt;272&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 17 Oct 2017 15:02:00 +0000</pubDate>
<dc:creator>ghostwu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ghostwu/p/7684379.html</dc:identifier>
</item>
<item>
<title>我是怎么如何开始自己信息技术之路的之一 - 孤荷凌寒</title>
<link>http://www.cnblogs.com/lhghroom/p/7684143.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lhghroom/p/7684143.html</guid>
<description>&lt;p&gt;从今天起，开始正式回顾并记录自己从一个 电脑都没有见过的无知少年如何成长为一位对信息技术如痴如狂的追随者的整个经历。&lt;/p&gt;
&lt;p&gt;我自小学五年级起就有坚持记日记的习惯，这些连续的日志的回顾与撰写得益于对过往日记本的查阅，在些，首先感激我的小学老师，是你们教会了我认识并能书写这一切汉字。&lt;/p&gt;
&lt;p&gt;今天是回顾日志的第一天，谈谈我第一次看到电脑并怎样痴恋着它及第一次对编程的认识经历。&lt;/p&gt;
&lt;p&gt;2000年，我所在的中等师范学校，学校终于有了自己的几间计算机教室，运行着WIN95及部分WIN98系统，还有一些WIN32系统及纯DOC系统。·&lt;/p&gt;
&lt;p&gt;天生对科学的无限好奇，虽然因为家庭困难而没能进入大学的殿堂，但对科学的爱却仍然如蜜糖吸引着蚂蚁一般吸引着我，而当时这样的高科技竟然已来到身边，当时那种心情真如饿狼撞上的倒霉的兔子一般急不可耐，虽然学校每周开设了一节计算机课，但这完全无法了决心中的渴望，得知当时学校管理中心有付费使用机房的规定后，我大有置生死于不顾的冲动了。&lt;/p&gt;
&lt;p&gt;为什么要置生死于不顾呢？&lt;/p&gt;
&lt;p&gt;其实真不是夸张，当年生活费非常拮据，家里非常困难，如果非要去学这种在当时 看来并不是主流的东西，没有多少人会支持，但我却对自己狠了狠心，连续两个月多数每天只吃两餐，硬是到机房自己摸索了两个月，学会了——打字，还是五笔的，直到今天都要感激当时的对自己的狠心，若不然各位可能就不会那么快看到这些文章了。&lt;/p&gt;
&lt;p&gt;半年后，中师毕业，17岁的青春少年便如一棵野草被扔进了社会的大河之中，我到一所乡村小学当了一名小学老师，望着孤零零立在青山竹林中的学校，四顾茫茫之际，大有被抛弃的错觉。&lt;/p&gt;
&lt;p&gt;学校自然不会有计算机。&lt;/p&gt;
&lt;p&gt;学校也是在三年后才终于有了计算机室，但机遇与改变就此展开，如一个已快饿死的人，突然看到天上落下一只烤熟的火鸡一般，我咬住那只野鸡，再也没有松口——厚尽脸皮也要进计算机房去学习，抢着半夜去学习，兴奋得好像自己真的是机器人一般，可以不吃不喝。&lt;/p&gt;
&lt;p&gt;很快我复习恢复了飞速的打字速度，学习了一些基本的电脑操作，算是真正步入了信息技术的殿堂。&lt;/p&gt;
&lt;p&gt;那些个夜晚，春秋季节乡村水多，蚊虫将人团团围着咬；冬天冷得披着被子才能不发抖。在别人娱乐着、谈笑着的时候，我就这样渡过了一年。&lt;/p&gt;
&lt;p&gt;2004年的夏季，我拿着自己撙衣节食——那真的是撙衣节食啊——两年都不敢使劲吃肉，衣服 都没有买过一件新的（那时工资才600多一月）——我拿着六千元钱从重庆石桥铺电脑广场买回了属于自己的第一台电脑 。多少让人想起了胡适先生说过的“凡是要作学问的，撙衣节食也会去做。”&lt;/p&gt;
&lt;p&gt;正是在回程的路上，在泥泞的城乡结合部的道路上，我捡到了一本浑身是泥的破书——《VISUAL BASIC程序设计》，书皮过脏，只好撕掉，只留下内页尚还完整如初，这本书一直被我保存至今——&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1246771/201710/1246771-20171017214658193-626616075.jpg&quot; alt=&quot;&quot; width=&quot;897&quot; height=&quot;1197&quot;/&gt;&lt;/p&gt;
&lt;p&gt;后来看起来，这本书在编写上并不详尽，有很多内容根本没有详细 的讲，大概这书应当是作为大学的教材用的——因为老师将会讲解未写入书中的内容，更糟糕的，这可能 真的是一本盗版的图书，由于采用的是扫描录入文字再次编辑的方法重新排版盗版，因而在扫描识别文字时，很多关键 的代码居然是错的！是的，书中作为例子的代码有些居然是错的！&lt;/p&gt;
&lt;p&gt;那时自己能有一台电脑已经是全学校第一大的新闻了，没有网络，也无法拥有网络，2004年重庆乡村，尚且没有任何运营商会给你提供网络，我所拥有的就只有一本破书，和一个为爱书而痴迷了的头脑。&lt;/p&gt;
&lt;p&gt;记得那是2004年暑假的一天，电脑终于弄回来安装完成，且被 自己激动的心情反复将会的功能用了又用，已是晚上12点，但心情还无法平静，又捧起那本捡来的书，是夜，便已阅读过半——尽管其中很多内容根本就无法理解——试想一个对编程概念完全没有了解过的人，怎么能够理解呢？&lt;/p&gt;
&lt;p&gt;但纵然如此，也许是因缘如此，亦或自己优秀的数学能力帮助，我每次明白了编程中变量的意义，第一次的感觉是，变量就如同代数中的代表数的符号，只是不明白，为什么一个变量的值会在代码中可以不停的改变，这个问题直到多日后才被慢慢习惯。写在这里，以备正步入编程殿堂的朋友们一起感慨之，这又觉得如果能有一个好老师是多么重要。&lt;/p&gt;
&lt;p&gt;想想 今天的朋友 们，你们拥有那么好的网络条件，拥有搜索不尽的网络资源，拥有随时可以请教的网络大师，学习将是多么的容易。&lt;/p&gt;
&lt;p&gt;今天就将我与信息技术中编程的邂逅经历回顾于此，并无意表现自己能在无网环境下自学编程成功的的神奇自夸于此的意思 ，仅表达人若爱学，必将有置之于死地而后生的勇气。&lt;/p&gt;
</description>
<pubDate>Tue, 17 Oct 2017 13:50:00 +0000</pubDate>
<dc:creator>孤荷凌寒</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lhghroom/p/7684143.html</dc:identifier>
</item>
<item>
<title>如何开发webpack loader - 潇湘待雨</title>
<link>http://www.cnblogs.com/pqjwyn/p/7684010.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pqjwyn/p/7684010.html</guid>
<description>&lt;h2 id=&quot;关于webpack&quot;&gt;关于webpack&lt;/h2&gt;
&lt;p&gt;作为近段时间风头正盛的打包工具，webpack基本占领了前端圈。相信你都不好意思说不知道webpack。&lt;br/&gt;有兴趣的同学可以参考下我很早之前的&lt;a href=&quot;http://www.cnblogs.com/pqjwyn/p/5380689.html&quot;&gt;webpack简介&lt;/a&gt; .&lt;br/&gt;确实webpack万事万物皆模块的思路真是极大的方便了我们的开发，将css，图片等文件都能打包的功能离不开形形色色的loader。&lt;br/&gt;对于一个事情要知其然更要知其所以然，抱着这个心态我们一起来看下loader的相关知识及如何开发。&lt;/p&gt;
&lt;h4 id=&quot;学习方法&quot;&gt;学习方法&lt;/h4&gt;
&lt;p&gt;对于一个新事物最好的学习方法，我认为是其官方文档。对于loader，将其官方文档看一遍，就知道如何开发最简单的loader了。&lt;br/&gt;只是其官方文档是英文的，我就顺手翻译了一下，一方面加深自己理解。另一方面为其他同学提供个参考。&lt;br/&gt;我相信看完文档你就知道如何开发一个loader了。&lt;/p&gt;
&lt;h2 id=&quot;什么是loader&quot;&gt;什么是loader&lt;/h2&gt;
&lt;p&gt;loader是一个对面暴露一个方法的node包.当遇到某些资源需要被转换时调用该方法。&lt;/p&gt;
&lt;h4 id=&quot;简单情况&quot;&gt;简单情况&lt;/h4&gt;
&lt;p&gt;只有一个loader来处理某个文件时，该loader被调用时只有一个参数，这个参数是该文件的内容转化之后的字符串。&lt;/p&gt;
&lt;p&gt;loader在function执行时可以通过this context来访问laoder API 以便更高效的开发。&lt;/p&gt;
&lt;p&gt;一个仅仅需要一个值的同步loader可以简单的return 自己。其他情况下，loader可以通过this.callback(err, values...)返回一系列的值。error同样传递给this.callback或者在loader中抛出。&lt;/p&gt;
&lt;p&gt;loader期望返回1-2个值，第一个是处理之后作为string或者buffer返回的js代码。第二个是SourceMap或者js 对象&lt;/p&gt;
&lt;h4 id=&quot;复杂情况&quot;&gt;复杂情况:&lt;/h4&gt;
&lt;p&gt;当多个loader被链式调用时，只有最后一个loader获得资源文件。&lt;br/&gt;同时只有第一个loader被期望返回1-2个值(即上面提到的JavaScript和SourceMap)。&lt;br/&gt;其他loader接收值由上一个loader传递。&lt;/p&gt;
&lt;p&gt;换句话说，链式loader执行顺序从右至左或者自下而上。&lt;br/&gt;举个栗子：下面这段代码的执行顺序就是自下而上 foo-loader==&amp;gt;bar-loader&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;module&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;js/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
        &lt;span class=&quot;st&quot;&gt;'bar-loader'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;'foo-loader'&lt;/span&gt;
      ]
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  ]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;注意当前weboack只会在nodemodules文件夹下面搜索你指定的loader&quot;&gt;注意：当前weboack只会在nodemodules文件夹下面搜索你指定的loader&lt;/h4&gt;
&lt;p&gt;如果你的文件夹不在该目录下需要在config下面增加一项配置:&lt;br/&gt;即默认访问node_modules，你的文件夹不在的话就需要手动在配置文件里加上了。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    resolveLoader&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'node_modules'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(__dirname&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'loaders'&lt;/span&gt;)]
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;温馨提示&quot;&gt;温馨提示&lt;/h4&gt;
&lt;p&gt;ps：经过自身实践发现这样写是错的，不需要通过path去解析，直接将文件目录写入即可。&lt;br/&gt;一般来说loader都会发布到npm上进行管理，这种状况不用担心，但是开发阶段如果要自行测试，就面对这种情况了。&lt;br/&gt;例如，我手写的myloader在loaders下面，例子如下。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;     resolveLoader&lt;span class=&quot;op&quot;&gt;:{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'node_modules'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'loader'&lt;/span&gt;]
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;
&lt;p&gt;就这么简单就是个普通的loader&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(source&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;map)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cacheable&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cacheable&lt;/span&gt;()
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; source
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'/*copy@ xiaoxiangdaiyu*/'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(source)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;开发指南&quot;&gt;开发指南&lt;/h2&gt;
&lt;p&gt;loader需要遵循以下事项。&lt;br/&gt;以下事项按优先级排列，第一条具有最高优先级。&lt;/p&gt;
&lt;h4 id=&quot;一单一任务&quot;&gt;一、单一任务&lt;/h4&gt;
&lt;p&gt;loaders可以被链式调用，为每一步创建一个loader而非一个loader做所有事情&lt;br/&gt;也就是说，在非必要的状况下没有必要将他们转换为js。&lt;/p&gt;
&lt;p&gt;例如：通过查询字符串将一个字符串模板转化为html。&lt;br/&gt;如果你写了个loader做了所有事情那么你违背了loader的第一条要求。&lt;br/&gt;你应该为每一个task创建一个loader并且通过管道来使用它们&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;jade-loader: 转换模板为一个module&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;apply-loader: 创建一个module并通过查询参数来返回结果&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;html-loade: 创建一个处理html并返回一个string的模块&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;二创建moulde话的模块即正常的模块&quot;&gt;二、创建moulde话的模块，即正常的模块&lt;/h4&gt;
&lt;p&gt;loader产出的module应该和遵循和普通的module一样的设计原则。&lt;br/&gt;举个例子，下面这样设计是不好的，没有模块化，依赖全局状态&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;any-template-language-loader!./xyz.atl&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; html &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;anyTemplateLanguage&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;xyz&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;三尽量表明该loader是否可以缓存&quot;&gt;三、尽量表明该loader是否可以缓存&lt;/h4&gt;
&lt;p&gt;大部分loaders是cacheable，所以应该标明是否cacheable。&lt;br/&gt;只需要在loader里面调用即可&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;co&quot;&gt;// Cacheable identity loader&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(source) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cacheable&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; source&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;四不要在运行和模块之间保存状态&quot;&gt;四、不要在运行和模块之间保存状态&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;一个loader相对于其他编译后的模块应该是独立的。 除非其可以自己处理这些状态&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;一个loader相对于同一模块之前的编译过程应该是独立的。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;五标明依赖&quot;&gt;五、标明依赖&lt;/h4&gt;
&lt;p&gt;如果该loader引用了其他资源（例如文件系统）， 必须声明它们。这些信息用来是缓存的loader失效并且重新编译它们&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; path &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;path&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(source) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cacheable&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; callback &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;async&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; headerPath &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;header.js&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addDependency&lt;/span&gt;(headerPath)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;readFile&lt;/span&gt;(headerPath&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(err&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; header) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(err) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;callback&lt;/span&gt;(err)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; header &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; source)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;六解析依赖&quot;&gt;六、解析依赖&lt;/h4&gt;
&lt;p&gt;很多语言都提供了一些规范来声明依赖，例如css中的 @import 和 url(...)。这些依赖应该被模块系统所解析。&lt;/p&gt;
&lt;h5 id=&quot;下面是两种解决方式&quot;&gt;下面是两种解决方式：&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;1、将它们转化成require&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;2、 用this.resolve方法来解析路径&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;下面是两个示例&quot;&gt;下面是两个示例&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;1、css-loader: 将依赖转化成require，&lt;a href=&quot;mailto:即用require来替换@import和&quot;&gt;即用require来替换@import和&lt;/a&gt; url(...)，解析对其他样式文件的依赖&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;2、less-loader: 不能像css-loader那样做，因为所有的less文件需要一起编译来解析变量和mixins。因此其通过一个公共的路径逻辑来扩展less编译过程。这个公共的逻辑使用this.resolve来解析带有module系统配置项的文件。例如aliasing, custom module directories等。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果语言仅仅接受相对urls（如css中url(file) 总是代表./file），使用~来说明成模块依赖.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;url&lt;/span&gt;(file) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;./file&quot;&lt;/span&gt;)
    &lt;span class=&quot;at&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;~&lt;/span&gt;module) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;module&quot;&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;七抽离公共代码&quot;&gt;七、抽离公共代码&lt;/h4&gt;
&lt;p&gt;extract common code 我感觉还是翻译成上面的标题比较好。其实所有语言都遵循该思想，即封装&lt;br/&gt;不要写出来很多每个模块都在使用的代码，在loader中创建一个runtime文件，将公共代码放在其中&lt;/p&gt;
&lt;h4 id=&quot;八避免写入绝对路径&quot;&gt;八、避免写入绝对路径&lt;/h4&gt;
&lt;p&gt;不要把绝对路径写入到模块代码中。它们将会破坏hash的过程当项目的根目录发生改变的时候。应该使用loader-utils的 stringifyRequest方法来绝对路径转化为相对路径。&lt;br/&gt;例子：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; loaderUtils &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;loader-utils&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;var runtime = require(&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;loaderUtils&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringifyRequest&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;!&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;require&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;module/runtime&quot;&lt;/span&gt;)) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;);&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;九使用peerdependencies来指明依赖的库&quot;&gt;九、使用peerDependencies来指明依赖的库&lt;/h4&gt;
&lt;p&gt;使用peerDependency允许应用开发者去在package.json里说明依赖的具体版本。这些依赖应该是相对开放的允许工具库升级而不需要重新发布loader版本。简而言之，对于peerDependency依赖的库应该是松耦合的，当工具库版本变化的时候不需要重新变更loader版本。&lt;/p&gt;
&lt;h4 id=&quot;十可编程对象作为查询项&quot;&gt;十、可编程对象作为查询项&lt;/h4&gt;
&lt;p&gt;有些情况下，loader需要某些可编程的对象但是不能作为序列化的query参数被方法解析。例如less-loader通过具体的less-plugin提供了这种可能。这种情况下，loader应该允许扩展webpack的options对象去获得具体的option。为了避免名字冲突，基于loader的命名空间来命名是很必要的。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;     &lt;span class=&quot;co&quot;&gt;// webpack.config.js&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        ...
    &lt;span class=&quot;dt&quot;&gt;lessLoader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;lessPlugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;LessPluginCleanCSS&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;advanced&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
        ]
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;结束语&quot;&gt;结束语&lt;/h4&gt;
&lt;p&gt;至此，如何开发一个webpack loader 我相信大家已经知道了，如果还不太清楚的话，可以移步&lt;a href=&quot;https://github.com/xiaoxiangdaiyu/w-loader&quot;&gt;w-loader&lt;/a&gt;查看。&lt;br/&gt;另外，对于我这种英语渣渣来说，翻译起来确实难度蛮大的。此处抛砖引玉，希望大家共同探讨学习。&lt;/p&gt;
&lt;h6 id=&quot;此文为原创文章转载请注明出处&quot;&gt;此文为原创文章，转载请注明出处！&lt;/h6&gt;
</description>
<pubDate>Tue, 17 Oct 2017 13:43:00 +0000</pubDate>
<dc:creator>潇湘待雨</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pqjwyn/p/7684010.html</dc:identifier>
</item>
<item>
<title>android6.0 SerialPort 服务 - hackfun</title>
<link>http://www.cnblogs.com/hackfun/p/7683512.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hackfun/p/7683512.html</guid>
<description>

&lt;p&gt;    &lt;strong&gt;&lt;span&gt;上&lt;/span&gt;&lt;/strong&gt;一篇博客描述了一个简单的串口应用程序和驱动程序，了解了应用程序访问串口的基本操作，如&lt;br/&gt;打开串口，设置串口，写串口，读串口，关闭串口等。和Linux串口驱动的基本框架。这里将了解Android&lt;br/&gt;下的串口系统框架，仍然使用上一篇博客中的tiny_serial.c作为本例的驱动，本例实现的功能不变，无&lt;br/&gt;论应用程序写任何数据到串口，都能从该串口中读回。&lt;br/&gt;    关于Android系统服务基本框架，可以参考http://www.cnblogs.com/hackfun/p/7612617.html博客，&lt;br/&gt;Android串口(serial port)服务框架与该例子十分类似，这里作简单描述。当然也有些不同的地方，后面会分析。&lt;/p&gt;
&lt;p&gt;(A) 串口服务的基本框架&lt;br/&gt;    1. 注册驱动&lt;br/&gt;    2. 注册hal&lt;br/&gt;    3. 注册JNI&lt;br/&gt;    4. 注册和添加SerialService&lt;br/&gt;    5. 串口管理SerialManager&lt;/p&gt;&lt;p&gt;(B) 打开串口&lt;br/&gt;(C) 设置权限&lt;br/&gt;(D) 测试串口&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;(A) 串口服务的基本框架&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;1. 注册驱动&lt;/strong&gt;&lt;br/&gt;    通过加载kernel/driver/tty/serial/tiny_serial.c驱动，生成/dev/ttytiny0节点，应用通过访问&lt;br/&gt;该节点，实现的对串口的open、read、write、close等操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 注册hal&lt;/strong&gt;&lt;br/&gt;    在Android串口服务中，省略了hal层，即通过JNI直接访问驱动。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. 注册JNI&lt;/strong&gt;&lt;br/&gt;    通过frameworks/base/services/core/jni/com_android_server_SerialService.cpp和&lt;br/&gt;frameworks/base/core/jni/android_hardware_SerialPort.cpp两个JNI文件对驱动访问，&lt;br/&gt;为JAVA提供底层驱动访问的接口，如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt;&lt;span&gt; native ParcelFileDescriptor native_open(String path);

&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; native &lt;span&gt;void&lt;/span&gt; native_open(FileDescriptor pfd, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; speed) throws IOException;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; native &lt;span&gt;void&lt;/span&gt;&lt;span&gt; native_close();
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; native &lt;span&gt;int&lt;/span&gt; native_read_array(&lt;span&gt;byte&lt;/span&gt;[] buffer, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) throws IOException;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; native &lt;span&gt;int&lt;/span&gt; native_read_direct(ByteBuffer buffer, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) throws IOException;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; native &lt;span&gt;void&lt;/span&gt; native_write_array(&lt;span&gt;byte&lt;/span&gt;[] buffer, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) throws IOException;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; native &lt;span&gt;void&lt;/span&gt; native_write_direct(ByteBuffer buffer, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) throws IOException;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; native &lt;span&gt;void&lt;/span&gt; native_send_break();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4. 注册和添加SerialService&lt;/strong&gt;&lt;br/&gt;    frameworks/base/services/core/java/com/android/server/SerialService.java的SerialService类&lt;br/&gt;中提供了服务端通过JNI放问驱动的接口，如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String[] getSerialPorts()
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ParcelFileDescriptor openSerialPort(String path)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过向frameworks/base/services//java/com/android/server/SystemServer.java的服务管理器ServiceManager&lt;br/&gt;添加服务：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
serial = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SerialService(context);
ServiceManager.addService(Context.SERIAL_SERVICE, serial);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;并且，通过frameworks/base/core/java/android/app/SystemServiceRegistry.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; registerService(Context.SERIAL_SERVICE, SerialManager.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;new&lt;/span&gt; CachedServiceFetcher&amp;lt;SerialManager&amp;gt;&lt;span&gt;() {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SerialManager createService(ContextImpl ctx) {
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     IBinder b =&lt;span&gt; ServiceManager.getService(Context.SERIAL_SERVICE);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SerialManager(ctx, ISerialManager.Stub.asInterface(b));
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; }});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以访问串口服务SerialService，客户端通过获得SerialService，就能远程调用getSerialPorts()和&lt;br/&gt;openSerialPort(String path)接口&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. 串口管理SerialManager&lt;/strong&gt;&lt;br/&gt;    frameworks/base/core/java/android/hardware/SerialManager.java中SerialManager对串口操作进一步管理，&lt;br/&gt;客户端只要实例化一个SerialManager对象，使用该对象的方法访问串口。不过，该对象只对&lt;br/&gt;openSerialPort(String name, int speed)管理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;(B) 打开串口&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;    通过以上简单分析Android串口服务框架之后，这里进一步分析串口的打开open操作流程。&lt;br/&gt;    在http://www.cnblogs.com/hackfun/p/7612617.html&lt;br/&gt;博客中，只有服务端调用JNI访问底层驱动，而在串口服务中，客户端也调用JNI直接访问底层驱动。服务端&lt;br/&gt;只负责对串口的open操作，在frameworks/base/services/core/jni/com_android_server_SerialService.cpp中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; jobject android_server_SerialService_open(JNIEnv *env, jobject &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; thiz &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;, jstring path)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *pathStr = env-&amp;gt;&lt;span&gt;GetStringUTFChars(path, NULL);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开/dev/tty*节点&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; fd = open(pathStr, O_RDWR |&lt;span&gt; O_NOCTTY);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (fd &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         ALOGE(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;could not open %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, pathStr);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         env-&amp;gt;&lt;span&gt;ReleaseStringUTFChars(path, pathStr);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }   
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     env-&amp;gt;&lt;span&gt;ReleaseStringUTFChars(path, pathStr);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     jobject fileDescriptor =&lt;span&gt; jniCreateFileDescriptor(env, fd);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (fileDescriptor ==&lt;span&gt; NULL) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回文件描述符，用于跨进程访问文件&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; env-&amp;gt;&lt;span&gt;NewObject(gParcelFileDescriptorOffsets.mClass,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        gParcelFileDescriptorOffsets.mConstructor, fileDescriptor);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而read、write、close等相关操作在frameworks/base/core/jni/android_hardware_SerialPort.cpp中，&lt;br/&gt;其中android_hardware_SerialPort_open只对串口进行相关设置，如波特，数据位等。由此看出&lt;br/&gt;frameworks/base/services/core/jni/com_android_server_SerialService.cpp和&lt;br/&gt;frameworks/base/core/jni/android_hardware_SerialPort.cpp可能处于两个不同的线程中，这两个不&lt;br/&gt;同的线程对同一个文件进行访问，需要对文件描述符进行转换。&lt;br/&gt;在frameworks/base/core/jni/android_hardware_SerialPort.cpp中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; android_hardware_SerialPort_open(JNIEnv *&lt;span&gt;env, jobject thiz, jobject fileDescriptor, jint speed)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    ......
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; fd =&lt;span&gt; jniGetFDFromFileDescriptor(env, fileDescriptor);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; duplicate the file descriptor, since ParcelFileDescriptor will eventually close its copy&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     fd =&lt;span&gt; dup(fd);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (fd &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         jniThrowException(env, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java/io/IOException&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Could not open serial port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    ......
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;(C) 设置权限&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;device/sprd/scx35l/common/rootdir/root/ueventd.sc8830.rc&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;......
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; /dev/ttytiny0             &lt;span&gt;0660&lt;/span&gt;&lt;span&gt;     system  system
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; ......
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;device/sprd/scx35l/common/sepolicy/file_contexts&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;......
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; /dev/&lt;span&gt;ttytiny0        u:object_r:serial_device:s0
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; ......
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;device/sprd/scx35l/common/sepolicy/system_app.te&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;......
allow system_app serial_device:chr_file { open read write ioctl};
......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;(D) 测试串口&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;    这里引用Android6.0源码目录下的一个串口测试app，还要添加一些权限等设置才能正常使用。&lt;br/&gt;串口测试APP源码：frameworks/base/tests/SerialChat&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 设置权限：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;frameworks/base/tests/SerialChat/Android.mk&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;......
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; LOCAL_CERTIFICATE :=&lt;span&gt; platform
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; ......
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;frameworks/base/tests/SerialChat/AndroidManifest.xml&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;......
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;lt;manifest xmlns:android=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://schemas.android.com/apk/res/android&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     package=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.android.serialchat&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     android:sharedUserId=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.uid.system&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;5&lt;/span&gt; ......
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2. 添加串口节点名称&lt;/strong&gt;&lt;br/&gt;    应用程序根据这个名称来打开对应的串口。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;frameworks/base/core/res/res/values/config.xml&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;......
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;lt;&lt;span&gt;string&lt;/span&gt;-array translatable=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;config_serialPorts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;3&lt;/span&gt;            &amp;lt;item&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/dev/ttytiny0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;/item&amp;gt;
&lt;span&gt;4&lt;/span&gt; &amp;lt;/&lt;span&gt;string&lt;/span&gt;-array&amp;gt;
&lt;span&gt;5&lt;/span&gt; ......
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    用mmm frameworks/base/tests/SerialChat -B 编译出的SerialChat.apk push到机器之后，就可以&lt;br/&gt;进行测试了。&lt;/p&gt;
&lt;p&gt;    a.点击打开SerialChat.apk：&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;http://images2017.cnblogs.com/blog/994502/201710/994502-20171017193828006-438061843.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;    b.输入要发送的内容&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;http://images2017.cnblogs.com/blog/994502/201710/994502-20171017193904349-1536675904.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;    c.点击确定（打钩的位置）发送，并且接收显示在上方。&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;http://images2017.cnblogs.com/blog/994502/201710/994502-20171017193930615-488132872.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 17 Oct 2017 11:42:00 +0000</pubDate>
<dc:creator>hackfun</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hackfun/p/7683512.html</dc:identifier>
</item>
</channel>
</rss>