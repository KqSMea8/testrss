<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>python 3.x 爬虫基础---http headers详解 - 王延领</title>
<link>http://www.cnblogs.com/kmonkeywyl/p/8435533.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kmonkeywyl/p/8435533.html</guid>
<description>&lt;p class=&quot;postTitle&quot;&gt;　　上一篇文章 &lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/kmonkeywyl/p/8409715.html&quot;&gt;python 爬虫入门案例----爬取某站上海租房图片&lt;/a&gt; 中有对headers的讲解，可能是对爬虫了解的不够深刻，所以老觉得这是一项特别简单的技术，也可能是简单所以网上对爬虫系统的文档，书和视频感觉都好少，故此准备接下这段时间对爬虫涉及到的点做个系统的学习与总结。&lt;/p&gt;

&lt;p&gt;打开浏览器，按F12(开发调试工具)------》查看网络工作（Network）------》选择你访问的页面地址------》headers。就可以看到你想要的信息，如下图（【白眼】这些有点开发基础的应该都知道吧）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/688939/201802/688939-20180209153409060-2132560048.png&quot; alt=&quot;&quot; width=&quot;697&quot; height=&quot;336&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如图所示我们可以看出heades包含（通用）request headers（请求） 与response headers（响应）。从名字上我们大概就能知道它们相应的作用是什么吧。这一块知识可以去学习http 协议去了解，记得以前买过一本书叫做《图解http》，有兴趣的看一去看一下。&lt;/p&gt;

&lt;p&gt;　　爬虫第一步应该就是要获取页面信息，但是那往往别人是不想让你爬它们的网站的至于为什么？请用脚指头想一想，其实我以前的项目也做过防止爬虫的功能，&lt;a href=&quot;https://github.com/kmonkey9006/SecurityGuard&quot; target=&quot;_blank&quot;&gt;net mvc防网络攻击案例&lt;/a&gt; ,那么存在压迫就会有反抗，其中反爬虫的方式headers的伪造就是第一步。其中我主要提一下Host，Connection，Accept，Accept-Encoding，Accept-Language，User-Agent，Referrer这7个请求头。&lt;/p&gt;
&lt;h2&gt;Host详解&lt;/h2&gt;
&lt;p&gt;　　大家应该知道host是在http1-1之后才有的，也就是以前没有host只存在ip网站也是能够正常运行的，但是为什要加入host的呢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/688939/201802/688939-20180209165256420-1697702463.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　如上图我们去ping host。host：csblogs.com 对应的ip是104.27.132.253，那么我在这就要问了，有没有可能blogs.com也对应104.27.132.253这个ip地址？答案是肯定的，做过web开发的人员应该都在自己电脑上部署过多个web站点。只需要我们用不同的端口就行。是的host就是域名吗。他主要就是实现一对多的功能。一台虚拟主机上的一个ip可以放成千上万个网站。当对这些网站的请求到来时，服务器根据Host这一行中的值来确定本次请求的是哪个具体的网站，就是域名解析。&lt;/p&gt;
&lt;h2&gt;Connection详解&lt;/h2&gt;
&lt;p&gt;　　如下图有没有发现请求与相应都存在Connection，那么它到底有什么用呢？控制HTTP C/S直接是否可以进行长连接。HTTP1.1规定了默认保持长连接，但是python爬虫的时候有可能会出现短链接。那么什么是长连接？&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;数据传输完成了保持TCP连接不断开（不发RST包、不四次握手），等待在同域名下继续用这个通道传输数据；相反的就是短连接。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/688939/201802/688939-20180209171740123-563781430.png&quot; alt=&quot;&quot; width=&quot;516&quot; height=&quot;309&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中一下可以对其进行简单的设置，进行传递。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Connection: Keep-&lt;span&gt;alive#长连接
Connection:close#短链接&lt;br/&gt;Keep-Alive: timeout=20#tcp通道保持20s&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Accept详解&lt;/h2&gt;
&lt;p&gt;　　指定客户端能够接受的内容类型，在这唯一要提醒的就是它只是建议服务器，而并非就是你写成什么他就返回给你什么。&lt;/p&gt;
&lt;h2&gt;Accept-Encoding详解&lt;/h2&gt;
&lt;p&gt;　　浏览器发给服务器,声明浏览器支持的编码类型的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
Accept-Encoding: compress, gzip　　　　　　　　　　　　  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;支持compress 和gzip类型 &lt;/span&gt;
Accept-Encoding:　　　　　　　　　　　　　　　　　　　     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认是identity &lt;/span&gt;
Accept-Encoding: *　　　　　　　　　　　　　　　　　　     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;支持所有类型 &lt;/span&gt;
Accept-Encoding: compress;q=&lt;span&gt;0.5&lt;/span&gt;, gzip;q=&lt;span&gt;1.0&lt;/span&gt;　　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按顺序支持 gzip , compress &lt;/span&gt;
Accept-Encoding: gzip;q=&lt;span&gt;1.0&lt;/span&gt;, identity; q=&lt;span&gt;0.5&lt;/span&gt;, *;q=&lt;span&gt;0&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 按顺序支持 gzip , identity &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;&lt;code&gt;Accept-Language详解&lt;/code&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　请求头允许客户端声明它可以理解的自然语言，以及优先选择的区域方言。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
Accept-Language: Zh-CN, zh;q=&lt;span&gt;0.8&lt;/span&gt;, en-gb;q=&lt;span&gt;0.8&lt;/span&gt;, en;q=&lt;span&gt;0.7&lt;/span&gt;#最佳语言为中文-中国（默认权重为1），其次为中文，权重为0.&lt;span&gt;8&lt;/span&gt;,再次为英国英语，权重为0.&lt;span&gt;8&lt;/span&gt;，最后为通用英语，权重0.&lt;span&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;user_agent详解&lt;/h2&gt;
&lt;p&gt;　　向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识。通过这个标识，用户所访问的网站可以显示不同的排版从而为用户提供更好的体验或者进行信息统计；例如用手机访问谷歌和电脑访问是不一样的，这些是谷歌根据访问者的UA来判断的，这个应该所有接触爬虫不管不知道它什么意思都会用到它，因为如果没有它，大部分都会没反应。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;user_agent 集合&lt;/span&gt;
user_agent_list =&lt;span&gt; [
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
  &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Chrome/45.0.2454.85 Safari/537.36 115Browser/6.0.3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;随机选择一个&lt;/span&gt;
 user_agent =&lt;span&gt; random.choice(user_agent_list)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;传递给header&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;headers = { 'User-Agent': user_agent }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为什么要随机传递一个不行吗？其实大部分时候我都是用一个。其实就是你伪造的越不想爬虫就越是越好的爬虫。&lt;/p&gt;
&lt;h2&gt;Referer详解&lt;/h2&gt;
&lt;p&gt;　　当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器籍此可以获得一些信息用于处理。用于统计访问量、防外连接等。这个怎么说呢，就是你如果你想查看去看有没有火车票，那么你就要先登入12306网站。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 对付“反盗链”(服务器会识别headers中的referer是不是它自己,如果不是则不响应),构建以下headers  &lt;/span&gt;
headers =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,  
&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Referer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;https://www.cnblogs.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}                &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;其他&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt;：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cookie&lt;/strong&gt;：这是最重要的请求头信息之一；一般可以直接复制，对于一些变化的可以选择构造（python中的一些库也可以实现）&lt;/p&gt;
&lt;p&gt;　　　　（&lt;strong&gt;这个我准备单独介绍&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;From&lt;/strong&gt;：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If-Modified-Since&lt;/strong&gt;：只有当所请求的内容在指定的日期之后又经过修改才返回它，否则返回304“Not Modified”应答；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pragma&lt;/strong&gt;：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UA-Pixels，UA-Color，UA-OS，UA-CPU&lt;/strong&gt;：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Origin&lt;/strong&gt;：Origin字段里只包含是谁发起的请求，并没有其他信息。跟Referer不一样的 是Origin字段并没有包含涉及到用户隐私的URL路径和请求内容，这个尤其重要。&lt;/p&gt;
&lt;p&gt;并且Origin字段只存在于POST请求，而Referer则存在于所有类型的请求;&lt;/p&gt;

&lt;p&gt;　　那么就先写到这里了，上篇文章说春节前最后一篇，结果没压抑住，在这就祝大家新年快乐了。来年大家一起努力吧。&lt;/p&gt;

</description>
<pubDate>Sat, 10 Feb 2018 18:26:00 +0000</pubDate>
<dc:creator>王延领</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kmonkeywyl/p/8435533.html</dc:identifier>
</item>
<item>
<title>使用mongoose和bcrypt实现用户密码加密 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/8440272.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/8440272.html</guid>
<description>&lt;h2&gt;前面的话&lt;/h2&gt;
&lt;p&gt;　　最近在做的个人项目中，需要对密码进行加密保存，对该操作的详细步骤记录如下&lt;/p&gt;

&lt;h3&gt;介绍&lt;/h3&gt;
&lt;p&gt;　　关于&lt;a href=&quot;http://www.cnblogs.com/xiaohuochai/p/7215067.html&quot; target=&quot;_blank&quot;&gt;mongoose&lt;/a&gt;已经写过博客就不再赘述，下面主要介绍bcrypt&lt;/p&gt;
&lt;p&gt;　　bcrypt是一个由两个外国人根据Blowfish加密算法所设计的密码散列函数。实现中bcrypt会使用一个加盐的流程以防御彩虹表攻击，同时bcrypt还是适应性函数，它可以借由增加迭代之次数来抵御暴力破解法&lt;/p&gt;
&lt;p&gt;　　使用npm安装即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm install --save bcrypt
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;用户模型&lt;/h3&gt;
&lt;p&gt;　　下面来创建代码用户user的schema，用户名不能重复&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; mongoose = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mongoose&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    Schema &lt;/span&gt;=&lt;span&gt; mongoose.Schema,
    bcrypt &lt;/span&gt;= require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bcrypt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; UserSchema = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Schema({
    username: { type: String, required: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, index: { unique: &lt;span&gt;true&lt;/span&gt;&lt;span&gt; } },
    password: { type: String, required: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt; }
});

module.exports &lt;/span&gt;= mongoose.model(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, UserSchema);
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;加密&lt;/h3&gt;
&lt;p&gt;　　下面加入用户模型的是Mongoose的中间件，该中间件使用pre前置钩子，在密码保存之前，自动地把密码变成hash。详细代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
let SALT_WORK_FACTOR = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;
UserSchema.pre(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;save&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function(next) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;产生密码hash当密码有更改的时候(或者是新密码)&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (!user.isModified(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; next();

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 产生一个salt&lt;/span&gt;
&lt;span&gt;    bcrypt.genSalt(SALT_WORK_FACTOR, function(err, salt) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (err) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; next(err);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  结合salt产生新的hash&lt;/span&gt;
&lt;span&gt;        bcrypt.hash(user.password, salt, function(err, hash) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (err) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; next(err);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用hash覆盖明文密码&lt;/span&gt;
            user.password =&lt;span&gt; hash;
            next();
        });
    });
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在node.bcrypt.js中SALT_WORK_FACTOR默认使用的是10，这里设置为5&lt;/p&gt;

&lt;h3&gt;验证&lt;/h3&gt;
&lt;p&gt;　　加密之后，密码原文被替换为密文了。我们无法解密，只能通过bcrypt的compare方法，对再次传入的密码和数据库中保存的加密后的密码进行比较，如果匹配，则登录成功&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
UserSchema.methods.comparePassword =&lt;span&gt; function(candidatePassword, cb) {
    bcrypt.compare(candidatePassword, &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.password, function(err, isMatch) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (err) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cb(err);
        cb(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, isMatch);
    });
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　把上面的几个步骤串在一起，完整代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; mongoose = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mongoose&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    Schema &lt;/span&gt;=&lt;span&gt; mongoose.Schema,
    bcrypt &lt;/span&gt;= require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bcrypt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    SALT_WORK_FACTOR &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; UserSchema = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Schema({
    username: { type: String, required: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, index: { unique: &lt;span&gt;true&lt;/span&gt;&lt;span&gt; } },
    password: { type: String, required: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt; }
});

UserSchema.pre(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;save&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function(next) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; only hash the password if it has been modified (or is new)&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (!user.isModified(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; next();

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; generate a salt&lt;/span&gt;
&lt;span&gt;    bcrypt.genSalt(SALT_WORK_FACTOR, function(err, salt) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (err) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; next(err);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; hash the password using our new salt&lt;/span&gt;
&lt;span&gt;        bcrypt.hash(user.password, salt, function(err, hash) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (err) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; next(err);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; override the cleartext password with the hashed one&lt;/span&gt;
            user.password =&lt;span&gt; hash;
            next();
        });
    });
});

UserSchema.methods.comparePassword &lt;/span&gt;=&lt;span&gt; function(candidatePassword, cb) {
    bcrypt.compare(candidatePassword, &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.password, function(err, isMatch) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (err) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cb(err);
        cb(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, isMatch);
    });
};

module.exports &lt;/span&gt;= mongoose.model(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, UserSchema);
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;测试&lt;/h3&gt;
&lt;p&gt;　　把上面的代码保存成user-model.js，然后运行下面代码来实际测试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; mongoose = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mongoose&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    User &lt;/span&gt;= require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./user-model&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; connStr = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mongodb://localhost:27017/mongoose-bcrypt-test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
mongoose.connect(connStr, function(err) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (err) &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; err;
    console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Successfully connected to MongoDB&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
});

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; create a user a new user&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; testUser = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User({
    username: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;jmar777&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    password: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Password123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
});

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; save user to database&lt;/span&gt;
&lt;span&gt;testUser.save(function(err) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (err) &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; err;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; fetch user and test password verification&lt;/span&gt;
    User.findOne({ username: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;jmar777&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; }, function(err, user) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (err) &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; err;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; test a matching password&lt;/span&gt;
        user.comparePassword(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Password123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function(err, isMatch) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (err) &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; err;
            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Password123:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, isMatch); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -&amp;gt; Password123: true&lt;/span&gt;
&lt;span&gt;        });

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; test a failing password&lt;/span&gt;
        user.comparePassword(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123Password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function(err, isMatch) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (err) &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; err;
            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123Password:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, isMatch); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -&amp;gt; 123Password: false&lt;/span&gt;
&lt;span&gt;        });
    });
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　控制台中输入如下数据：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/740839/201802/740839-20180211003925216-1218969117.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　数据库数据如下：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/740839/201802/740839-20180211004009295-1338946400.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 10 Feb 2018 16:42:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuochai/p/8440272.html</dc:identifier>
</item>
<item>
<title>介绍一种非常好用汇总数据的方式GROUPING SETS - DB乐之者</title>
<link>http://www.cnblogs.com/wenBlog/p/8440200.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wenBlog/p/8440200.html</guid>
<description>&lt;div readability=&quot;47&quot;&gt;
&lt;p&gt;&lt;span&gt;　　对于任何人而言，用T-SQL语句来写聚会查询都是工作中重要的一环。我们大家也都很熟悉GROUP BY子句来实现聚合表达式，但是如果打算在一个结果集中包含多种不同的汇总结果，可能会比较麻烦。我将举例展示给大家使用GROUPING SETS操作符来完成这个“混合的结果集”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　或许当我们在打算分析较大规模的数据集时，不知道从何下手，此时处理这种情况最好的方式就是汇总数据，快速的得到一个数据预览。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在T-SQL中，使用GROUP BY子句在一个聚合查询中来汇总需要的数据。这个子句由一组表达式定义的分组构成。结果集中每一行返回GROUP BY 子句中表达式的唯一值或者组合，并且聚合函数，像COUNT或者SUM等可以对查询中的任何行进行聚合。但是，如果你想要多种不同组合的聚合时，一般有两种方式：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1.将不懂组合聚合的结果集UNIONALL在一起。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2.使用 &lt;strong&gt;GROUPING SETS&lt;/strong&gt;操作符，结合GROUP BY一起在一个语句中实现。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;&lt;div readability=&quot;97.683473891979&quot;&gt;
&lt;p&gt;&lt;span&gt;本文中，我会展示如何使用&lt;strong&gt;GROUPING SETS&lt;/strong&gt;来实现这一目的。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;准备数据集&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;本文中所有的查询都使用AdventureWorks2012 数据库中的数据，这里提供一个下载地址方便使用（&lt;a href=&quot;https://msftdbprodsamples.codeplex.com/downloads/get/165399&quot; target=&quot;_blank&quot;&gt;AdventureWorks2012&lt;/a&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;实例: Data Analyst at Adventure Works&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;比如你是一个数据分析师，对于公司今年的收入很感兴趣。这意味着你需要分组汇总公司的每一年的收入，查询语句如下:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Query 1. &lt;/strong&gt;汇总每年收入&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;crayon-5a7e850c48b7f898900804&quot; class=&quot;crayon-syntax crayon-theme-ssms2012-simple-talk crayon-font-courier-new crayon-os-pc print-yes notranslate crayon-wrapped&quot; data-settings=&quot; minimize scroll-mouseover disable-anim wrap&quot;&gt;
&lt;div class=&quot;crayon-plain-wrap&quot; readability=&quot;7&quot;&gt;&lt;span&gt; &lt;/span&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;USE&lt;/span&gt;&lt;span&gt; AdventureWorks2012;
&lt;/span&gt;&lt;span&gt;GO&lt;/span&gt;
 
&lt;span&gt;SELECT&lt;/span&gt;
&lt;span&gt;YEAR&lt;/span&gt;(OrderDate) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; OrderYear,
&lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(SubTotal) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; Income
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; Sales.SalesOrderHeader
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;YEAR&lt;/span&gt;&lt;span&gt;(OrderDate)
&lt;/span&gt;&lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; OrderYear;
&lt;/span&gt;&lt;span&gt;GO&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Query 1 返回结果集:&lt;/span&gt;&lt;/p&gt;
&lt;table class=&quot;table--tight&quot; border=&quot;5&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;OrderYear&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Income&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2005&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;11331809&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2006&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;30674773.2&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2007&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;42011037.2&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2008&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;25828762.1&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;caption&quot;&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;根据这个结果集，可知该公2005到2008年的收入情况。这类数据信息对于商业分析来说很常见。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是，如果你想要更多关于收入的信息，比如其他汇总条件，你必须要重新运行一个GROUP BY子句。比如查询返回公司每个月的收入情况。查询语句如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Query 2.&lt;/strong&gt; 公司每个月的收入&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;crayon-5a7e850c48b88379304028&quot; class=&quot;crayon-syntax crayon-theme-ssms2012-simple-talk crayon-font-courier-new crayon-os-pc print-yes notranslate crayon-wrapped&quot; data-settings=&quot; minimize scroll-mouseover disable-anim wrap&quot;&gt;
&lt;div class=&quot;crayon-main&quot; readability=&quot;33.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;SELECT&lt;/span&gt;
&lt;span&gt;YEAR&lt;/span&gt;(OrderDate) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; OrderYear,
&lt;/span&gt;&lt;span&gt;MONTH&lt;/span&gt;(OrderDate) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; OrderMonth,
&lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(SubTotal) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; Income
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; Sales.SalesOrderHeader
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;YEAR&lt;/span&gt;(OrderDate), &lt;span&gt;MONTH&lt;/span&gt;&lt;span&gt;(OrderDate)
&lt;/span&gt;&lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; OrderYear, OrderMonth;
&lt;/span&gt;&lt;span&gt;GO&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;结果集如下:&lt;/span&gt;&lt;/p&gt;
&lt;table class=&quot;table--tight&quot; border=&quot;5&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;OrderYear&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;OrderMonth&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Income&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2005&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;7&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;962716.742&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2005&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;8&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2044600&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2005&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;9&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;1639840.11&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2005&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;10&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;1358050.47&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2005&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;11&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2868129.2&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2005&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;12&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2458472.43&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2006&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;1309863.25&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2006&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2451605.62&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2006&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2099415.62&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2006&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;4&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;1546592.23&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2006&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;5&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2942672.91&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2006&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;6&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;1678567.42&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2006&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;7&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2894054.68&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2006&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;8&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;4147192.18&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2006&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;9&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;3235826.19&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2006&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;10&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2217544.45&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2006&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;11&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;3388911.41&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2006&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;12&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2762527.22&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2007&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;1756407.01&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2007&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2873936.93&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2007&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2049529.87&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2007&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;4&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2371677.7&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2007&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;5&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;3443525.25&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2007&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;6&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2542671.93&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2007&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;7&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;3554092.32&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2007&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;8&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;5068341.51&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2007&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;9&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;5059473.22&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2007&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;10&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;3364506.26&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2007&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;11&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;4683867.05&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2007&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;12&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;5243008.13&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2008&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;3009197.42&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2008&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;4167855.43&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2008&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;4221323.43&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2008&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;4&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;3820583.49&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2008&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;5&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;5194121.52&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2008&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;6&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;5364840.18&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;2008&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;7&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;50840.63&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;caption&quot;&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这个结果集要比之前的更详细一点。可以得到具体某个月的收入汇总。显然GROUP BY 后面的列越多其越详细，结果一般也越多（除非有传递依赖键）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果你仔细观察两个查询，你会发现他们都是根据个子的分组表达式进行分组汇总的。前面的是按照年，后面的是按照年和月。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假如我想查看两种汇总结果在一个结果集中应该怎么处理那？为了实现这个目标，我们前面说了两个方案，方案1就是使用UNION ALL,代码如下： &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;Query 3.&lt;/strong&gt; 公司收入（每年|每月）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;crayon-5a7e850c48b8d443267091&quot; class=&quot;crayon-syntax crayon-theme-ssms2012-simple-talk crayon-font-courier-new crayon-os-pc print-yes notranslate crayon-wrapped&quot; data-settings=&quot; minimize scroll-mouseover disable-anim wrap&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;crayon-main&quot; readability=&quot;35.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;SELECT&lt;/span&gt;
&lt;span&gt;YEAR&lt;/span&gt;(OrderDate) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; OrderYear,
&lt;/span&gt;&lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; OrderMonth, &lt;span&gt;--&lt;/span&gt;&lt;span&gt;Dummy Column&lt;/span&gt;
&lt;span&gt;SUM&lt;/span&gt;(SubTotal) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; Incomes
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; Sales.SalesOrderHeader
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;YEAR&lt;/span&gt;&lt;span&gt;(OrderDate)
&lt;/span&gt;&lt;span&gt;UNION&lt;/span&gt; &lt;span&gt;ALL&lt;/span&gt;
&lt;span&gt;SELECT&lt;/span&gt;
&lt;span&gt;YEAR&lt;/span&gt;(OrderDate) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; OrderYear,
&lt;/span&gt;&lt;span&gt;MONTH&lt;/span&gt;(OrderDate) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; OrderMonth,
&lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(SubTotal) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; Incomes
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; Sales.SalesOrderHeader
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;YEAR&lt;/span&gt;(OrderDate), &lt;span&gt;MONTH&lt;/span&gt;&lt;span&gt;(OrderDate)
&lt;/span&gt;&lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; OrderYear, OrderMonth;
&lt;/span&gt;&lt;span&gt;GO&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;结果集如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/306519/201802/306519-20180210201035154-170405904.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中红色框内为按照年的汇总数据。蓝色框内为按照年和月的分组汇总。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如图所示两个结果集被合并在一起了。注意。此时NULL出现在里面，使用NULL作为假列来标识order year分组的结果。因为按年分组没有这个列。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;尽管你已经获得了想要的结果，但是这样需要完成两次的语句，接下来我们尝试一下grouping set，方案2。因为我们都是懒人吗，所以这个方式一定要更加简单。目的就是“更少代码，相同结果”。接下来我们详细看一下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Query 4.使用&lt;/strong&gt; GROUPING SETS实现相同结果 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;crayon-5a7e850c48b93132497109&quot; class=&quot;crayon-syntax crayon-theme-ssms2012-simple-talk crayon-font-courier-new crayon-os-pc print-yes notranslate crayon-wrapped&quot; data-settings=&quot; minimize scroll-mouseover disable-anim wrap&quot;&gt;
&lt;div class=&quot;crayon-plain-wrap&quot; readability=&quot;9&quot;&gt;&lt;span&gt; &lt;/span&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;SELECT&lt;/span&gt;
&lt;span&gt;YEAR&lt;/span&gt;(OrderDate) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; OrderYear,
&lt;/span&gt;&lt;span&gt;MONTH&lt;/span&gt;(OrderDate) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; OrderMonth,
&lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(SubTotal) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; Incomes
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; Sales.SalesOrderHeader
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;
&lt;span&gt;GROUPING&lt;/span&gt;&lt;span&gt; SETS
(
&lt;/span&gt;&lt;span&gt;YEAR&lt;/span&gt;(OrderDate), &lt;span&gt;--&lt;/span&gt;&lt;span&gt;1st grouping set&lt;/span&gt;
(&lt;span&gt;YEAR&lt;/span&gt;(OrderDate),&lt;span&gt;MONTH&lt;/span&gt;(OrderDate)) &lt;span&gt;--&lt;/span&gt;&lt;span&gt;2nd grouping set&lt;/span&gt;
&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;GO&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;结果集跟之前的一模一样。但是新的代码要少很多。GROUPING SETS 操作符要和GROUP  BY 子句在一起使用。并且允许我们可以做一个多分组的查询。尽管如此，我们要仔细检查指定的分组集。例如假如一个分组包含两个列，假设列A和B，两个列都需要包含在括号内：(column A, column B)。如果没有括号，这个子句将会被定义为独立的分组，结果就不同了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面语句的结果如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img class=&quot;wp-image-75954&quot; src=&quot;https://www.red-gate.com/simple-talk/wp-content/uploads/2017/11/http-www-sqlservercentral-com-images-33650-jpg.jpeg&quot; alt=&quot;http://www.sqlservercentral.com/Images/33650.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;顺便说一下，如果我们打算聚合整个结果集（不分组聚合所有数据），只需要添加有一个空的括号在分组集里面即可。查询语句如下:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Query 5.&lt;/strong&gt; 加入总体汇总结果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;crayon-5a7e850c48b96986866654&quot; class=&quot;crayon-syntax crayon-theme-ssms2012-simple-talk crayon-font-courier-new crayon-os-pc print-yes notranslate crayon-wrapped&quot; data-settings=&quot; minimize scroll-mouseover disable-anim wrap&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;crayon-main&quot; readability=&quot;34.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;SELECT&lt;/span&gt;
&lt;span&gt;YEAR&lt;/span&gt;(OrderDate) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; OrderYear,
&lt;/span&gt;&lt;span&gt;MONTH&lt;/span&gt;(OrderDate) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; OrderMonth,
&lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(SubTotal) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; Incomes
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; Sales.SalesOrderHeader
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;
&lt;span&gt;GROUPING&lt;/span&gt;&lt;span&gt; SETS
(
&lt;/span&gt;&lt;span&gt;YEAR&lt;/span&gt;(OrderDate), &lt;span&gt;--&lt;/span&gt;&lt;span&gt;1st grouping set&lt;/span&gt;
(&lt;span&gt;YEAR&lt;/span&gt;(OrderDate),&lt;span&gt;MONTH&lt;/span&gt;(OrderDate)), &lt;span&gt;--&lt;/span&gt;&lt;span&gt;2nd grouping set&lt;/span&gt;
() &lt;span&gt;--&lt;/span&gt;&lt;span&gt;3rd grouping set (grand total)&lt;/span&gt;
&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;GO&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;结果如图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/306519/201802/306519-20180211001449341-1313145397.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意最下方的42行，年月都为null，这个查询汇总了郑铁的所有收入，因为没有进行任何分组。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意，需要强调一个十强，一定要确保分组列字段部位NULL，因此NULLS不能被用作分组列在&lt;strong&gt;GROUPING SETS中使用。&lt;/strong&gt;如果非要那个为空字段，需要使用 &lt;strong&gt;GROUPING&lt;/strong&gt; 或者 &lt;strong&gt;GROUPING_ID&lt;/strong&gt; &lt;strong&gt;函数判断是否NULL&lt;/strong&gt;来自&lt;strong&gt;GROUPING SETS&lt;/strong&gt; 操作符。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;本篇文章中，主要介绍如何使用另一种聚合查询方式来实现多种分组聚合结果的合并。熟悉后你会发现这种方式对于总结汇总数据非常有帮助，大大提高了我们代码的效率。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;</description>
<pubDate>Sat, 10 Feb 2018 16:25:00 +0000</pubDate>
<dc:creator>DB乐之者</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wenBlog/p/8440200.html</dc:identifier>
</item>
<item>
<title>salesforce零基础学习（八十六）Ajax Toolkit （VF页面中使用及javascript action使用） - zero.zhang</title>
<link>http://www.cnblogs.com/zero-zyq/p/8421640.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zero-zyq/p/8421640.html</guid>
<description>&lt;p&gt;Ajax Toolkit 参考文档：&lt;a href=&quot;https://resources.docs.salesforce.com/212/latest/en-us/sfdc/pdf/apex_ajax.pdf&quot; target=&quot;_blank&quot;&gt;https://resources.docs.salesforce.com/212/latest/en-us/sfdc/pdf/apex_ajax.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在项目中，我们有时会在自定义button或者action上使用javascript进行一些SOQL或者DML操作处理；有时会在VF页面中获取相关数据进行逻辑处理，或者进行简单的DML操作，这时候就会使用到Ajax Toolkit。&lt;/p&gt;
&lt;p&gt;因为Ajax Toolkit操作数据信息是在浏览器端的，进行复杂的逻辑或者对大量数据处理会影响前端的性能，所以不是所有的场景都适合使用ajax toolkit。可以在以下情景（不仅限于以下）下使用：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;展示或者更新单条数据&lt;/li&gt;
&lt;li&gt;在一些数据中展示一两列信息&lt;/li&gt;
&lt;li&gt;执行简单的业务逻辑&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因为使用在浏览器端，所以保证数据量越少，业务逻辑越少，是最好的。以下从两个方面进行Ajax Toolkit介绍：VF / JavaScript Action&lt;/p&gt;
&lt;p&gt;Ajax Toolkit 可以分成三步走：链接Ajax Toolkit API，嵌入API Call，对结果进行处理。接下来会将后两步揉成一步进行处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一.链接到Ajax Toolkit API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;VF：在页面中引入js，其中42.0代表version，这个值代表着当前connection.js的版本号。你也可以设置成41.0，40.0等等。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;script src=&quot;../../soap/ajax/42.0/connection.js&quot; &lt;span&gt;type&lt;/span&gt;=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;&lt;span&gt;
sforce.connection.sessionId&lt;/span&gt;='{!GETSESSIONID()}'&lt;span&gt;;
//TODO
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; onclick javascript:引用{!requireScript(&quot;/soap/ajax/42.0/connection.js&quot;)}&lt;/p&gt;
&lt;p&gt;当引入的javascript执行后，toolkit便会被加载并创建了一个全局的对象sforce.connection，你可以通过这个对象访问所有的API call以及ajax toolkit toolkit的方法。toolkit支持所有的SOAP API calls.&lt;/p&gt;
&lt;p&gt;可用的核心API介绍链接：&lt;a href=&quot;https://developer.salesforce.com/docs/atlas.en-us.212.0.api.meta/api/sforce_api_calls_list.htm&quot; target=&quot;_blank&quot;&gt;https://developer.salesforce.com/docs/atlas.en-us.212.0.api.meta/api/sforce_api_calls_list.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二.在javascript中嵌入API Call并进行结果处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ajax Toolkit 支持同步和异步两种调用。&lt;/p&gt;
&lt;p&gt;同步调用和异步调用的区别为：同步调用为当向服务器端发送请求后，需要一直等到服务器端返回结果，并针对结果进行后期的处理；异步调用为当向服务器发送请求后，可以继续进行其他的处理，当服务器有调用返回结果后，再进行结果处理。异步调用需要在API call中添加一个参数用来做call back的函数处理。&lt;/p&gt;
&lt;p&gt;同步调用格式：&lt;br/&gt;sforce.connection.method(&quot;argument1&quot;,&quot;argument2&quot;,...);&lt;/p&gt;
&lt;p&gt;异步调用格式：&lt;br/&gt;sforce.connection.method(&quot;argument1&quot;,&quot;argument2&quot;,...,&quot;callback_function&quot;);&lt;/p&gt;
&lt;p&gt;因为调用有可能出现异常，同步和异步的异常处理如下：&lt;br/&gt;同步异常处理为在调用处使用try catch 来捕获异常&lt;/p&gt;
&lt;p&gt;异步异常处理为异步的callback result提供了一个onFailure配置，当出现异常后，会执行onFailure配置的方法，成功会执行onsuccess方法&lt;br/&gt;因为异步调用为结果什么时候返回，客户端什么时候处理，当后台处理特别慢的情况下，前端等待时间太长会很不友好，异步调用提供了一个timeout配置属性，用来设置异步调用最长时间，单位是以毫秒为单位，最小值为1&lt;br/&gt;完整异步调用格式&lt;br/&gt;var callback = {onSuccess: handleSuccess, onFailure: handleFailure,timeout:1000};&lt;br/&gt;function handleSuccess(result) {}&lt;br/&gt;function handleFailure(error) {}&lt;br/&gt;sforce.connection.query(&quot;Select name from Account&quot;, callback);&lt;/p&gt;

&lt;p&gt;ajax toolkit call 不论当前搜索的数据字段在表结构中是什么类型，使用ajax toolkit query返回的数据类型均为string类型，如果搜索的字段在数据库中存储的value为null，则获取到的值为null，如果当前没有搜索此字段，但是在前台js中有引用到，则值为undefined.&lt;/p&gt;
&lt;p&gt; 除了针对数据的CRUD外，ajax toolkit 还支持很多操作，比如 提交审批 / 通过Schema获取sObject以及Field的相关元数据信息 / 发送邮件等功能&lt;/p&gt;
&lt;p&gt;同步调用举例：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.salesforce.com/docs/atlas.en-us.ajax.meta/ajax/sforce_api_ajax_more_samples_asynch.htm&quot; target=&quot;_blank&quot;&gt;https://developer.salesforce.com/docs/atlas.en-us.ajax.meta/ajax/sforce_api_ajax_more_samples.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;异步调用举例：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.salesforce.com/docs/atlas.en-us.ajax.meta/ajax/sforce_api_ajax_more_samples_asynch.htm&quot; target=&quot;_blank&quot;&gt;https://developer.salesforce.com/docs/atlas.en-us.ajax.meta/ajax/sforce_api_ajax_more_samples_asynch.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 我们有时还需要调用相关类的方法。如果需要调用apex 相关类的方法，需要引入apex.js&lt;/p&gt;
&lt;p&gt;VF写法：&amp;lt;script src=&quot;/soap/ajax/41.0/apex.js&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/p&gt;
&lt;p&gt;action写法：{!requireScript(&quot;/soap/ajax/41.0/apex.js&quot;)}&lt;/p&gt;
&lt;p&gt;调用的类的方法必须声明称webservice，方法的参数需要为 基本数据类型，sObject类型或者是两者数据类型的List&lt;/p&gt;
&lt;p&gt;js端调用结构为(如果有结果返回，则接收；如果无结果返回，则不需要接收)&lt;/p&gt;
&lt;p&gt;var result = sforce.apex.execute(&quot;className&quot;,&quot;methodName&quot;,&quot;{param1Key:param1Value,param2Key:param2Value}&quot;);&lt;/p&gt;
&lt;p&gt;如果调用的方法没有参数，则调用结构为&lt;/p&gt;
&lt;p&gt;var reuslt = sforce.apex.execute(&quot;className&quot;,&quot;methodName&quot;,&quot;{}&quot;);&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三.举例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需求：客户上面有多个联系人，如果没有选择联系人，则提示需要选择至少一个联系人。选择的联系人要求联系人的邮箱必须都不能为空。点击按钮后更新联系人Is_Checked__c设置为true。&lt;/p&gt;
&lt;p&gt;1.Contact上创建字段Is_Checked__c&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/910966/201802/910966-20180210225113966-1418841744.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.创建webservice类，参数为ContactList，将参数中所有的Contact的Is_Checked__c更新为true&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
global without sharing &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ContactController {
    
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; webservice Boolean changeContactsStatus(List&amp;lt;Contact&amp;gt;&lt;span&gt; contactList) {
        List&lt;/span&gt;&amp;lt;Contact&amp;gt; updateContactList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Contact&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(Contact c : contactList) {
            Contact tempContact &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Contact();
            tempContact.Id &lt;/span&gt;=&lt;span&gt; c.Id;
            tempContact.Is_Checked__c &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            updateContactList.add(tempContact);
        }
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(updateContactList.size() &amp;gt; 0&lt;span&gt;) {
                update updateContactList;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception e) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.Contact创建custom action,设置类型为List Button，勾选Display Checkboxes，Behavor选择为execute javascript&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/910966/201802/910966-20180210225610091-1912383647.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对应的javascript代码如下（函数描述：&lt;a href=&quot;https://help.salesforce.com/articleView?err=1&amp;amp;id=customize_functions.htm&amp;amp;type=5&quot; target=&quot;_blank&quot;&gt;https://help.salesforce.com/articleView?err=1&amp;amp;id=customize_functions.htm&amp;amp;type=5&lt;/a&gt;）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
{!requireScript(&quot;/soap/ajax/41.0/connection.js&quot;&lt;span&gt;)}
{&lt;/span&gt;!requireScript(&quot;/soap/ajax/41.0/apex.js&quot;&lt;span&gt;)}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; selectedIds = {!&lt;span&gt;GETRECORDIDS($ObjectType.Contact)};
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; contactIds = ''&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(selectedIds.length == 0&lt;span&gt;) {
  alert(&lt;/span&gt;'You have to choose at least one item'&lt;span&gt;);
} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
  selectedIds.forEach(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(item,index){
    contactIds &lt;/span&gt;+= '\'' + item + '\''&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(index != selectedIds.length-1&lt;span&gt;) {
      contactIds &lt;/span&gt;+= ','&lt;span&gt;;
    }
  });

  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; contactQuery = &quot;SELECT ID,Name,Email,LastModifiedDate,CreatedDate FROM Contact WHERE ID in (&quot; + contactIds + &quot;)&quot;&lt;span&gt;;
  result &lt;/span&gt;=&lt;span&gt; sforce.connection.query(contactQuery);                                
  records &lt;/span&gt;= result.getArray(&quot;records&quot;&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; isSuccess = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
  records.forEach(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(item,index){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(item.Email == &lt;span&gt;null&lt;/span&gt; || item.Email == ''&lt;span&gt;) {
       isSuccess &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
  })
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(isSuccess) {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; executeResult = sforce.apex.execute(&quot;ContactController&quot;,&quot;changeContactsStatus&quot;&lt;span&gt;,{contactList:records});
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(executeResult) {
        alert(&lt;/span&gt;'Operate Success!'&lt;span&gt;);
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        alert(&lt;/span&gt;'Operate Failed!'&lt;span&gt;);
      }
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    alert(&lt;/span&gt;'The Items you selected have empty email.please check it again'&lt;span&gt;);
  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;strong&gt;效果展示：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.不选情况下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/910966/201802/910966-20180210231224763-1184699534.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.正常操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/910966/201802/910966-20180210231301466-508061333.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;针对Ajax Toolkit,如果数据量不多并且需要在前台处理情况下，可以考虑使用此种方式。不过lightning不支持action使用javascript，所以此种方式只支持classic的action 方式的javascript。&lt;/p&gt;

</description>
<pubDate>Sat, 10 Feb 2018 16:03:00 +0000</pubDate>
<dc:creator>zero.zhang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zero-zyq/p/8421640.html</dc:identifier>
</item>
<item>
<title>verilog实验2：基于FPGA的59秒计时器设计 - amberwang2018</title>
<link>http://www.cnblogs.com/amberwang2018/p/8440085.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/amberwang2018/p/8440085.html</guid>
<description>&lt;p&gt;一、实验任务&lt;/p&gt;
&lt;p&gt;       利用四个数码管显示59秒计时器。&lt;/p&gt;
&lt;p&gt;二、代码实现&lt;/p&gt;
&lt;p&gt;       将开发板的48M晶振分频出1M，然后计数器累加，将计数器结果显示在数码管上。低位逢十进一，第二位逢五进一，依次构成59秒计时器。&lt;/p&gt;
&lt;p&gt;       部分代码展示：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;module&lt;/span&gt;&lt;span&gt; cnt59(clk,rst_n,dataout,en);

&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt; clk,rst_n;
&lt;/span&gt;&lt;span&gt;output&lt;/span&gt;[&lt;span&gt;7&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] dataout;
&lt;/span&gt;&lt;span&gt;output&lt;/span&gt;[&lt;span&gt;3&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;] en;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;COM使能输出&lt;/span&gt;

&lt;span&gt;reg&lt;/span&gt;[&lt;span&gt;7&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;] dataout;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;各段数据输出&lt;/span&gt;
&lt;span&gt;reg&lt;/span&gt;[&lt;span&gt;3&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] en;

&lt;/span&gt;&lt;span&gt;reg&lt;/span&gt;[&lt;span&gt;15&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;] cnt_scan;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;扫描频率计数器&lt;/span&gt;
&lt;span&gt;reg&lt;/span&gt;[&lt;span&gt;3&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] dataout_buf;

&lt;/span&gt;&lt;span&gt;wire&lt;/span&gt;&lt;span&gt; clk1m;
&lt;/span&gt;&lt;span&gt;wire&lt;/span&gt;&lt;span&gt; clk1000;
&lt;/span&gt;&lt;span&gt;wire&lt;/span&gt;&lt;span&gt; clk1;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;产生时钟&lt;/span&gt;
&lt;span&gt;defparam&lt;/span&gt; Gen_ClkDiv3.divdFACTOR=&lt;span&gt;500&lt;/span&gt;,Gen_ClkDiv3.divdWIDTH=&lt;span&gt;8&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;分频时钟&lt;/span&gt;
div Gen_ClkDiv3(.reset(rst_n),.clkin(clk1000),.clkout(clk1));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;端口名称关联&lt;/span&gt;

&lt;span&gt;always&lt;/span&gt;@(&lt;span&gt;posedge&lt;/span&gt; clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt;&lt;span&gt;  rst_n)
&lt;/span&gt;&lt;span&gt;begin&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;rst_n) 
        &lt;/span&gt;&lt;span&gt;begin&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;低电平复位&lt;/span&gt;
            cnt_scan&amp;lt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
         &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt; 
        &lt;span&gt;begin&lt;/span&gt;&lt;span&gt;
            cnt_scan&lt;/span&gt;&amp;lt;=cnt_scan+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;always&lt;/span&gt; @(cnt_scan)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;段码扫描频率&lt;/span&gt;
&lt;span&gt;begin&lt;/span&gt; 
  &lt;span&gt;case&lt;/span&gt;(cnt_scan[&lt;span&gt;15&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt;&lt;span&gt;])
      &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b00 :&lt;/span&gt;
          en = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1110;&lt;/span&gt;
      &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b01 :&lt;/span&gt;
          en = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1101;&lt;/span&gt;
      &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b10 :&lt;/span&gt;
          en = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1011;&lt;/span&gt;
      &lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b11 :&lt;/span&gt;
          en = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0111;&lt;/span&gt;
      &lt;span&gt;default&lt;/span&gt;&lt;span&gt; :
          en &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1110;&lt;/span&gt;
    &lt;span&gt;endcase&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;3&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] cnt1;
&lt;/span&gt;&lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;3&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] cnt2;
&lt;/span&gt;&lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;3&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] cnt3;
&lt;/span&gt;&lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;3&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] cnt4;

&lt;/span&gt;&lt;span&gt;always&lt;/span&gt;@(&lt;span&gt;posedge&lt;/span&gt; clk1 &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt;&lt;span&gt;  rst_n)
&lt;/span&gt;&lt;span&gt;begin&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;rst_n)
    &lt;/span&gt;&lt;span&gt;begin&lt;/span&gt;&lt;span&gt;
    cnt1 &lt;/span&gt;&amp;lt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0000;&lt;/span&gt;
    cnt2 &amp;lt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0000;&lt;/span&gt;
    cnt3 &amp;lt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0000;&lt;/span&gt;
    cnt4 &amp;lt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0000;&lt;/span&gt;
    &lt;span&gt;end&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt; 
    &lt;span&gt;begin&lt;/span&gt;&lt;span&gt;
    cnt1 &lt;/span&gt;&amp;lt;= (cnt1&amp;lt;&lt;span&gt;9&lt;/span&gt;)? cnt1+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1:4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d0;
    cnt2 &lt;/span&gt;&amp;lt;= (cnt2&amp;lt;&lt;span&gt;5&lt;/span&gt;)? (cnt1==&lt;span&gt;9&lt;/span&gt;)?cnt2+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1:cnt2 : (cnt1==9)?4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d0:cnt2;
    cnt3 &lt;/span&gt;&amp;lt;= (cnt3&amp;lt;&lt;span&gt;9&lt;/span&gt;)? (cnt2==&lt;span&gt;5&lt;/span&gt; &amp;amp;&amp;amp; cnt1==&lt;span&gt;9&lt;/span&gt;)?cnt3+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1:cnt3 : (cnt2==5 &amp;amp;&amp;amp; cnt1==9)?4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d0:cnt3;
    cnt4 &lt;/span&gt;&amp;lt;= (cnt4&amp;lt;&lt;span&gt;5&lt;/span&gt;)? (cnt3==&lt;span&gt;9&lt;/span&gt; &amp;amp;&amp;amp; cnt2==&lt;span&gt;5&lt;/span&gt; &amp;amp;&amp;amp; cnt1==&lt;span&gt;9&lt;/span&gt;)?cnt4+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1:cnt4 : (cnt3==9 &amp;amp;&amp;amp; cnt2==5 &amp;amp;&amp;amp; cnt1==9)?4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d0:cnt4;
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;    

&lt;span&gt;always&lt;/span&gt;@(en) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对应COM信号给出各段数据，段码&lt;/span&gt;
&lt;span&gt;begin&lt;/span&gt;
    &lt;span&gt;case&lt;/span&gt;&lt;span&gt;(en)
        &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1110:&lt;/span&gt;
            dataout_buf&amp;lt;=cnt1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输入将要显示的数字&lt;/span&gt;
        &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1101:&lt;/span&gt;
            dataout_buf&amp;lt;=&lt;span&gt;cnt2;
        &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1011:&lt;/span&gt;
            dataout_buf&amp;lt;=&lt;span&gt;cnt3;
        &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0111:&lt;/span&gt;
            dataout_buf&amp;lt;=&lt;span&gt;cnt4;   
        &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
            dataout_buf&lt;/span&gt;&amp;lt;=&lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
     &lt;/span&gt;&lt;span&gt;endcase&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;always&lt;/span&gt;&lt;span&gt;@(dataout_buf)
&lt;/span&gt;&lt;span&gt;begin&lt;/span&gt;
    &lt;span&gt;case&lt;/span&gt;(dataout_buf)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将要显示的数字译成段码&lt;/span&gt;
        &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0000://0&lt;/span&gt;
            dataout=&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0000_0011;&lt;/span&gt;
        &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0001://1&lt;/span&gt;
            dataout=&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1001_1111;&lt;/span&gt;
        &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0010://2&lt;/span&gt;
            dataout=&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0010_0101;&lt;/span&gt;
        &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0011://3&lt;/span&gt;
            dataout=&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0000_1101;&lt;/span&gt;
        &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0100://4&lt;/span&gt;
            dataout=&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1001_1001;&lt;/span&gt;
        &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0101://5&lt;/span&gt;
            dataout=&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0100_1001;&lt;/span&gt;
        &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0110://6&lt;/span&gt;
            dataout=&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0100_0001;&lt;/span&gt;
        &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0111://7&lt;/span&gt;
            dataout=&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0001_1111;&lt;/span&gt;
        &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1000://8&lt;/span&gt;
            dataout=&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0000_0001;&lt;/span&gt;
        &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1001://9&lt;/span&gt;
            dataout=&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0000_1001;&lt;/span&gt;
       &lt;span&gt;default&lt;/span&gt;:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里仅编译了0-9这几个数字&lt;/span&gt;
            dataout=&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1111_1111;//全灭&lt;/span&gt;
     &lt;span&gt;endcase&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;三、感悟&lt;/p&gt;
&lt;p&gt;       相比于其他小程序来说，这篇是一个很简单的应用，包括程序也很简单。但是在编写之时，会有一些细节没有把握住，致使烧写结果出问题。希望自己以后思考问题可以更加全面。比如59秒在进位时，是要有两个判断条件，一位为5一位为9才能进位，而由于自己的粗心大意，编程时只想着为5就进位，结果9秒为5的时候一直在进位。这也为我以后思考问题提了个醒。如何更为全面细致认真的思考。就比如说如果要实现一个功能，要同时满足几个条件。这也是程序员思维缜密之所在。加油。&lt;/p&gt;

</description>
<pubDate>Sat, 10 Feb 2018 15:57:00 +0000</pubDate>
<dc:creator>amberwang2018</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/amberwang2018/p/8440085.html</dc:identifier>
</item>
<item>
<title>[Cpp] 面向对象程序设计 C++ - farwish</title>
<link>http://www.cnblogs.com/farwish/p/8099721.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/farwish/p/8099721.html</guid>
<description>
&lt;p&gt;初始化列表（包括成员对象初始化）&lt;/p&gt;
&lt;p&gt;  初始化列表 ( 推荐 ) :&lt;br/&gt;  可以初始化任何类型的数据, 不管是不是普通类型还是对象，都建议用.&lt;br/&gt;  不再需要在构造器中赋值了, 而且初始化列表比构造函数要早执行.&lt;br/&gt;  成员初始化次序取决于成员在类中的声明次序.&lt;/p&gt;&lt;p&gt;  当类成员有其它对象时，构造器内给对象赋值会触发成员对象的默认构造函数(无参数的)，如果成员对象没有默认构造函数编译报错.&lt;br/&gt;  所以有成员变量为对象这种场景下，要用 initializer list.&lt;/p&gt;
&lt;p&gt;Source：&lt;a href=&quot;https://github.com/farwish/unix-lab/blob/master/cpp/Initializer_list.cc&quot; target=&quot;_blank&quot;&gt;https://github.com/farwish/unix-lab/blob/master/cpp/Initializer_list.cc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;继承&lt;/p&gt;
&lt;p&gt;  复用的一种方式，还有上面介绍过的 &quot;对象组合&quot;（成员变量为其他对象）&lt;/p&gt;
&lt;p&gt;  私有属性只能由父类自己访问；受保护的属性可以由子类访问，别人都无法访问.&lt;/p&gt;
&lt;p&gt;  当实例化子类时，会先调用父类的构造函数，当父类没有默认构造函数时又没有初始化自己的构造函数时，编译报类似 &quot;no matching function AA::AA( )&quot;，所以在子类中只能用 initializer list 对父类成员初始化.&lt;/p&gt;
&lt;p&gt;  析构的调用次序则反过来，先子类后父类.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/farwish/unix-lab/blob/master/cpp/Extends.cc&quot; target=&quot;_blank&quot;&gt;https://github.com/farwish/unix-lab/blob/master/cpp/Extends.cc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;函数重载（Function overload）和默认参数（Default argument）&lt;/p&gt;
&lt;p&gt;  同名函数通过拥有不同的参数表实现重载. void print( );   void print ( int i )&lt;/p&gt;
&lt;p&gt;  默认参数是在头文件中给原型的默认参数值，唯一的好处是某些情况下少打字；但是在调用时容易造成阅读困难，另外也不安全，如果我们不 include 头文件而是自己写一个函数声明，把默认参数值设为其它的，那么就和设计者的意图不一样。所以建议不使用 Default argument 如 void f (int i , int j = 10); &lt;/p&gt;

&lt;p&gt;内联函数（Inline functions）&lt;/p&gt;
&lt;p&gt;  当函数前面有 inline 时，它就是一个 declaration，而不再是 defination，因此不需要担心重复定义的问题。&lt;/p&gt;
&lt;p&gt;  内联函数的 body 放在头文件里就可以了，不需要 .cpp 文件，和传统的一个 .h 对应一个 .cpp 不同。&lt;/p&gt;
&lt;p&gt;  因为内联函数有类型检查，因此比做同样事情的宏要好。 &lt;/p&gt;
&lt;p&gt;  ( 使用场合：函数只有2~3行的，需要重复调用的；不适合的：函数比较大，递归 )&lt;/p&gt;
&lt;p&gt;  成员函数在 class 声明时如果给出了 body，那么这些都是 inline 函数，只要有一个头文件就够了。&lt;/p&gt;
&lt;p&gt;  另一种写法是保持 class 声明干净，而为单独实现的成员函数前面加 inline.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/farwish/unix-lab/blob/master/cpp/Inline.h&quot; target=&quot;_blank&quot;&gt;https://github.com/farwish/unix-lab/blob/master/cpp/Inline.h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/farwish/unix-lab/blob/master/cpp/Inline_main.cc&quot; target=&quot;_blank&quot;&gt;https://github.com/farwish/unix-lab/blob/master/cpp/Inline_main.cc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;const; 不可修改的对象（对象成员）&lt;/p&gt;
&lt;p&gt;成员函数 const 的用法：&lt;/p&gt;
&lt;p&gt;  在声明和定义的地方要一起用. &lt;/p&gt;
&lt;p&gt;  　　int getData( ) const;&lt;/p&gt;
&lt;p&gt;  　　int getData( ) const { return data }&lt;/p&gt;
&lt;p&gt;  不修改数据的成员函数应该被定义为 const.&lt;/p&gt;
&lt;p&gt;  如果类有 const 成员变量 或者 实例一个 const 对象，那么一定要在 initialize list 里面初始化变量，否则编译无法通过，因为后面无法修改它 (成员变量)。&lt;/p&gt;
&lt;p&gt;  func( ) { } 和 func( ) const { } 是不一样的，它们构成重载( overload )，因为它们相当于是 func( A* this ) 与 func( const A* this )，参数表不一样。&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/farwish/unix-lab/blob/master/cpp/Const_class.cc&quot; target=&quot;_blank&quot;&gt;https://github.com/farwish/unix-lab/blob/master/cpp/Const_class.cc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;引用（C++数据类型）&lt;/p&gt;
&lt;p&gt;  char c; char* p = &amp;amp;c; char&amp;amp; r = c;&lt;/p&gt;
&lt;p&gt;  本地变量或全局变量，必须有初始值，type&amp;amp; name = 'name'　　&lt;/p&gt;
&lt;p&gt;  　　int x = 3;&lt;/p&gt;
&lt;p&gt;　　  int&amp;amp; y = x;            # 赋初值&lt;/p&gt;
&lt;p&gt; 　　 const int&amp;amp; z = x;  # z 不能做左值，但是可以通过修改 x 来修改 z&lt;/p&gt;
&lt;p&gt;  作为参数和成员变量时，可以没有初始值，因为它们会在构造对象时被调用者初始化，type&amp;amp; name;&lt;/p&gt;
&lt;p&gt;　　  void f ( int&amp;amp; x )&lt;/p&gt;
&lt;p&gt;  　　f ( y );      # 在函数调用时初始化&lt;/p&gt;
&lt;p&gt;  指针和引用的区别：&lt;/p&gt;
&lt;p&gt;  　　引用不能为 null.　　　　　　　　　　　　　 指针可以为 null.&lt;/p&gt;
&lt;p&gt;  　　引用依赖另一个变量，是一个变量的别名.　　指针独立于已存在的对象.&lt;/p&gt;
&lt;p&gt;　　  引用不能指向一个新的地址.　　　　　　　　指针可以更改指向不同的地址.&lt;/p&gt;
&lt;p&gt;  　　cpp内存模型的复杂性体现在：三个地方放对象（堆，栈，全局数据区），访问对象的方式（变量放对象，指针访问，引用访问）。&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/farwish/unix-lab/blob/master/cpp/Reference.cc&quot; target=&quot;_blank&quot;&gt;https://github.com/farwish/unix-lab/blob/master/cpp/Reference.cc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;引用再研究&lt;/p&gt;
&lt;p&gt;  引用作为类的成员时，声明时没有办法给初始值，因为它需要和另外一个变量捆绑在一起，作为别名；所以必须在构造函数的 initializer list 里初始化。&lt;/p&gt;
&lt;p&gt;  函数可以返回一个引用，但不能引用本地变量。&lt;/p&gt;
&lt;p&gt;  参数前的 const 的引用，const 保证不被修改，引用使传参高效，好处是函数中不用使用 * 号。 &lt;/p&gt;
&lt;p&gt;  参数传引用，这说明参数是一个可以做左值的东西，传参不能使用变量非const的表达式。&lt;/p&gt;
&lt;p&gt;  　　void func(int &amp;amp;); func(i * 3); // error:invalid initialization of non-const reference of type 'int&amp;amp;' from a temporary of type 'int'   error: in passing argument 1 of 'void f (int &amp;amp;)'&lt;/p&gt;
&lt;p&gt;  　　void func(const int&amp;amp;); int i = 3; func(i * 3); // 区别仅在于参数是const的，正确输出9&lt;/p&gt;
&lt;p&gt;  不能对函数返回的对象做左值，编译会报错，error: using temporary as lvalue [-fpermissive]。&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/farwish/unix-lab/blob/master/cpp/Reference_2.cc&quot; target=&quot;_blank&quot;&gt;https://github.com/farwish/unix-lab/blob/master/cpp/Reference_2.cc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;向上造型（Upcasting）&lt;/p&gt;
&lt;p&gt;  子类的对象当做父类的对象来看，叫做向上造型，因为一般习惯把父类画在上面；Upcasting 一定是安全的，最多子类拥有的被无视。&lt;/p&gt;
&lt;p&gt;  父类的对象当做子类的对象看，叫做向下造型，Downcasting 有风险，因为父类不一定拥有子类的东西。&lt;/p&gt;
&lt;p&gt;  类型转换和造型的区别，类型转换原来的值转换完就变了，而造型数据没变，子类的对象还是子类的对象，只是看待的眼光不一样。&lt;/p&gt;
&lt;p&gt;  Persion John('JOHN');&lt;/p&gt;
&lt;p&gt;  Animal* p = &amp;amp;John;  // Upcast,  因为Person是Animal的一种, 但反过来就是 Downcast&lt;/p&gt;
&lt;p&gt;  Animal&amp;amp; q = John;   // Upcast&lt;/p&gt;

&lt;p&gt;多态性（polymorphism）：Upcast 和 Dynamic binding 两个条件构成多态性&lt;/p&gt;
&lt;p&gt;  Upcast: 把派生类当做基类使用。&lt;/p&gt;
&lt;p&gt;  Dynamic binding: 调用对象的函数。&lt;/p&gt;
&lt;p&gt;  　　（Static binding: 调用代码写明的函数）&lt;/p&gt;
&lt;pre&gt;
/**
 * 通用函数，对任何 Shape 和其子类都通用.
 *
 * 动态绑定，调用的 render 在运行时决定:
 *  p 有一个静态类型和动态类型，如果 p 的 render 函数是 virtual 的，那么是动态绑定，不是 virtual 则是静态绑定。
 *  所以动态绑定还是静态绑定取决于 render 函数，而不是对象 p；如果我们调用的是 move 函数，那么就是静态绑定。
 */
void render(Shape*&lt;span&gt; p)
{
    p-&amp;gt;&lt;span&gt;render();
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/farwish/unix-lab/blob/master/cpp/Polymorphism.cc&quot; target=&quot;_blank&quot;&gt;https://github.com/farwish/unix-lab/blob/master/cpp/Polymorphism.cc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;虚 析构函数&lt;/p&gt;
&lt;p&gt;  Shape的析构不是 virtual 时，默认是静态绑定，delete p 时，只有 Shape 的析构会被调用，Ellipse 的不会调用。&lt;/p&gt;
&lt;p&gt;  Shape的析构是 virtual 时，表示动态绑定，delete p 时，会先调子类的析构，在调父类的析构。&lt;/p&gt;
&lt;p&gt;  　　Shape* p = new Ellipse(100.0, 110.0);&lt;br/&gt;  　　delete p;&lt;/p&gt;
&lt;p&gt;  其它 OOP 语言默认就是 virtual 的，也就是动态绑定的，而C++默认是静态绑定的，动态绑定需要手动加 virtual。&lt;/p&gt;
&lt;p&gt;  如果一个类里有一个 virtual 函数，它的析构函数就必须是 virtual 的。&lt;/p&gt;
&lt;p&gt;  如果父类和子类有名字相同、参数表相同的 virtual 函数，那么子类成员函数就对父类构成了重写/覆盖。&lt;/p&gt;
&lt;p&gt;  子类成员函数中调用父类的同名函数用 Base::func( ) 的方式。&lt;/p&gt;
&lt;p&gt;  父类里有两个 virtual 的重载(overload)函数，那么子类里也要实现两个 overloaded 的函数，否则另一个函数会发生 name hidden，只有 C++ 会发生函数的隐藏。&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/farwish/unix-lab/blob/master/cpp/Polymorphism.cc&quot; target=&quot;_blank&quot;&gt;https://github.com/farwish/unix-lab/blob/master/cpp/Polymorphism.cc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;拷贝构造&lt;/p&gt;
&lt;p&gt;  拷贝构造的唯一形式：T::T(const T&amp;amp;)&lt;/p&gt;
&lt;p&gt;  拷贝构造什么时候被调用？&lt;br/&gt;  　　1.用对象进行初始化时，Person p = p1 或 Person p(p1)，这两种写法相同，注意它不是 assignment 而是 initialization (因为变量前有类型)。&lt;br/&gt;  　　2.调用一个函数，函数的参数是一个对象时，void func(Person p);&lt;br/&gt;  　　3.用返回对象的函数返回值进行初始化。&lt;/p&gt;
&lt;p&gt;  Construction vs Assignment&lt;br/&gt;  每个对象只能构造一次，每个对象应该被析构一次，&lt;br/&gt;  对象一旦被构造，它可以是被赋值的目标，前头有类型就是 initialization，没有类型就是 assignment.&lt;/p&gt;&lt;p&gt;  Copy constructor guidelines&lt;br/&gt;  写一个类就先写三个函数 default constructor, virtual distructor, copy constructor。&lt;br/&gt;  如果确实不需要拷贝构造，那么就声明为私有，不建议这么做，限制了很多事不能做。&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/farwish/unix-lab/blob/master/cpp/Copy_constructor.cc&quot; target=&quot;_blank&quot;&gt;https://github.com/farwish/unix-lab/blob/master/cpp/Copy_constructor.cc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;静态对象&lt;/p&gt;
&lt;p&gt;  static两个基本的含义：&lt;/p&gt;
&lt;p&gt;  　　静态存储，本地变量是static，这个本地变量具有持久存储（事实上static的本地变量就是全局变量）。&lt;/p&gt;
&lt;p&gt;  　　名字可见性，全局变量、函数的static，那么这个全局变量、函数只在当前文件中可用。&lt;/p&gt;
&lt;p&gt;  static 在 C++ 中的使用：&lt;/p&gt;
&lt;p&gt;  　　静态本地变量 - 持久存储。&lt;/p&gt;
&lt;p&gt;　　  静态成员变量 - 所有对象间共享。&lt;/p&gt;
&lt;p&gt;  　　静态成员函数 - 所有对象间共享，它只能访问静态成员变量。&lt;/p&gt;
&lt;p&gt;　　  对象是静态的 - 除了遵守两个基本法则（存储、可见性），保证只构造析构一次。&lt;/p&gt;
&lt;p&gt;  静态初始化的依赖&lt;/p&gt;
&lt;p&gt;  　　多个 cpp 文件都有自己的全局变量的情况，没人保证初始化顺序先后；&lt;/p&gt;
&lt;p&gt;　　  如果一个变量的初始化依赖另一个变量的值作为参数，那么需要先初始化那另一个变量，但是跨文件的初始化是不存在的。所以解决方案是，1. 别这么干。 2. 逻辑上许可的话，把所有有依赖的全局变量放到一个地方。&lt;/p&gt;
&lt;p&gt;Source：&lt;a href=&quot;https://github.com/farwish/unix-lab/blob/master/cpp/Static_members.cc&quot; target=&quot;_blank&quot;&gt;https://github.com/farwish/unix-lab/blob/master/cpp/Static_members.cc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link：&lt;a href=&quot;http://www.cnblogs.com/farwish/p/8099721.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/farwish/p/8099721.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 10 Feb 2018 15:42:00 +0000</pubDate>
<dc:creator>farwish</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/farwish/p/8099721.html</dc:identifier>
</item>
<item>
<title>好用的开源库（二）——uCrop 图片裁剪 - Stars-one</title>
<link>http://www.cnblogs.com/kexing/p/8440072.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kexing/p/8440072.html</guid>
<description>&lt;p&gt;&lt;span&gt;最近想要实现图片裁剪的功能，在Github上找到了这个uCrop,star的人挺多的，便是决定入坑，结果长达一个小时的看资料+摸索，终于是在项目中实现了图片裁剪的功能，今天便是来介绍一下uCrop的使用方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Yalantis/uCrop&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;uCrop&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;目录：&lt;/span&gt;&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;
&lt;h3&gt;&lt;span&gt;配置&lt;/span&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;&lt;span&gt;流程介绍&lt;/span&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;&lt;span&gt;使用&lt;/span&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;配置&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1.添加依赖&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code&gt;maven { url &quot;https://jitpack.io&quot; }&lt;br/&gt;&lt;code&gt;compile 'com.github.yalantis:ucrop:2.2.1'&lt;/code&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1210268/201802/1210268-20180210220457560-1315138150.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1210268/201802/1210268-20180210220528357-1029440363.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2.配置Androidmanifest文件&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;activity
            &lt;/span&gt;&lt;span&gt;android:name&lt;/span&gt;&lt;span&gt;=&quot;com.yalantis.ucrop.UCropActivity&quot;&lt;/span&gt;&lt;span&gt;
            android:screenOrientation&lt;/span&gt;&lt;span&gt;=&quot;portrait&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;screenOrientation是屏幕方向，由于是在手机上使用的，这里便设置为竖直方向&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt; 3.还有读写权限的声明&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1210268/201802/1210268-20180210221709763-1701526944.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;PS：这里Write权限其实是包括了读和写的权限，所以我们只需要声明一个就行了，多声明写的权限也是没有问题的&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;简单流程介绍：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;使用之前我们来了解一下剪切图片的过程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先，Ucrop构造函数有两个参数，分别是需要裁剪的图片的Uri和裁剪之后的Uri，裁剪之后的Uri需要我们创建，之后对Ucrop进行一些设置，如裁剪框的宽高大小，设置裁剪框的竖线数量或者输出的图片格式等等&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;完成设置后就可以进入到裁剪的那个Activity进行裁剪的操作，结束裁剪之后会有返回码，我们在onActivityResult方法中对其进行截取就可以获得裁剪之后的Uri，之后我们就可以利用这个Uri获得裁剪之后的图片&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;使用：&lt;/h2&gt;
&lt;h3&gt;1.新建一个输出的Uri，mDestinationUri&lt;/h3&gt;
&lt;h3&gt;2.新建一个Ucrop类，相关设置如图片中代码&lt;/h3&gt;
&lt;p&gt;参数传入的是需要裁剪的图片的Uri&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1210268/201802/1210268-20180210231956326-13769087.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.在onActivityResult中截取裁剪图片输出的Uri&lt;/h3&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1210268/201802/1210268-20180210232829060-1374203129.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;4.处理图片&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1210268/201802/1210268-20180210232919779-123566490.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里直接使用Uri的toString方法将Uri转换为String&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt; 5.显示图片&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;这里使用IO流，具体可以看看代码理解理解（其实直接用刚才获得的那个Uri也行，不用转换成String类型）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1210268/201802/1210268-20180210233013654-277781535.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;可能出现的问题：&lt;/h2&gt;
&lt;h3&gt;出现应用已停止：&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;原因：在使用裁剪的当前的Activity使用了actionbar，在Androidmanifest文件中将该activity的theme改为Noactionbar即可&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 10 Feb 2018 15:41:00 +0000</pubDate>
<dc:creator>Stars-one</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kexing/p/8440072.html</dc:identifier>
</item>
<item>
<title>xBIM WeXplorer - 在 水 一 方</title>
<link>http://www.cnblogs.com/w2011/p/8440062.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/w2011/p/8440062.html</guid>
<description>&lt;h3&gt;   目录&lt;/h3&gt;
&lt;h4&gt;    基础&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/w2011/p/8440062.html&quot;&gt;&lt;span&gt;xBIM WeXplorer 简要介绍&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;xBIM WeXplorer xViewer 基本应用&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;xBIM WeXplorer xViewer 浏览器检查&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;xBIM WeXplorer xViewer的导航，裁剪和隐藏&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;xBIM WeXplorer  设置模型颜色&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;&lt;span&gt;    类&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;OrthogonalCamera&lt;/li&gt;
&lt;li&gt;PerspectiveCamera&lt;/li&gt;
&lt;li&gt;Prerequisities&lt;/li&gt;
&lt;li&gt;xBrowser&lt;/li&gt;
&lt;li&gt;xNavigationCube&lt;/li&gt;
&lt;li&gt;xNavigationHome&lt;/li&gt;
&lt;li&gt;xViewer&lt;/li&gt;
&lt;li&gt;xVisualAssignmentSet&lt;/li&gt;
&lt;li&gt;xVisualAttribute&lt;/li&gt;
&lt;li&gt;xVisualEntity&lt;/li&gt;
&lt;li&gt;xVisualModel&lt;/li&gt;
&lt;li&gt;xVisualProperty&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;&lt;span&gt;    事件&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;entityActive&lt;/li&gt;
&lt;li&gt;entityClick&lt;/li&gt;
&lt;li&gt;entityDblclick&lt;/li&gt;
&lt;li&gt;entityMouseDown&lt;/li&gt;
&lt;li&gt;entityMouseMove&lt;/li&gt;
&lt;li&gt;entityMouseUp&lt;/li&gt;
&lt;li&gt;entityTouch&lt;/li&gt;
&lt;li&gt;loaded&lt;/li&gt;
&lt;li&gt;clipped&lt;/li&gt;
&lt;li&gt;dblclick&lt;/li&gt;
&lt;li&gt;error&lt;/li&gt;
&lt;li&gt;fps&lt;/li&gt;
&lt;li&gt;frame&lt;/li&gt;
&lt;li&gt;loaded&lt;/li&gt;
&lt;li&gt;mouseDown&lt;/li&gt;
&lt;li&gt;pick&lt;/li&gt;
&lt;li&gt;unclipped&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;&lt;span&gt;     高级应用&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;xBIM 综合使用案例与 ASP.NET MVC 集成（一）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;xBIM 综合使用案例与 ASP.NET MVC 集成（二）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;xBIM 综合使用案例与 ASP.NET MVC 集成（三）&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt; 简介       &lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;      WeXplorer是xBIM工具包的可视化部分，它使用预处理的wexBIM文件处理Web上IFC数据的可视化。&lt;/span&gt;&lt;span&gt;它使用WebGL等尖端的网络技术，所以它不应该在旧的浏览器版本中运行，&lt;span&gt;但自2011年以来，Chrome或Mozzilla，IE11和其他支持该技术的应用程序都可以很好地工作。&lt;/span&gt;&lt;span&gt;使用&lt;span&gt;xBIM Essentials&lt;/span&gt;和xBIM几何来创建可视化的优化和压缩的wexBIM文件。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;WeXplorer还包含&lt;span&gt;Xbrowser&lt;/span&gt;&lt;a href=&quot;http://docs.xbim.net/XbimWebUI/xBrowser.html&quot;&gt;中&lt;/a&gt;从JSON COBieLite数据的可视化。&lt;/p&gt;
&lt;p&gt;      它公开所有必要的API调用主类&lt;span&gt;xViewer&lt;/span&gt;三维可视化和浏览器之间&lt;span&gt;的距离COBIE语义数据的可视化。&lt;/span&gt;&lt;span&gt;这些是唯一需要以wexBIM格式加载和渲染IFC模型的两个类，并浏览相关的语义数据。&lt;/span&gt;&lt;span&gt;如果您有一个支持WebGL的浏览器，并且正在查看此文档，则应该可以在此页面的底部看到3D浏览器的示例。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;      此查看器是xBIM工具包的一部分，可用于从IFC，ifcZIP和ifcXML创建wexBIM文件。&lt;/span&gt;&lt;span&gt;WexBIM文件经过高度优化，可以传输互联网和渲染性能。&lt;/span&gt;&lt;span&gt;&lt;span&gt;Viewer&lt;/span&gt;使用WebGL技术进行硬件加速3D渲染和SVG进行某些类型的用户交互。&lt;/span&gt;&lt;span&gt;这意味着它不适用于IE10等过时的和不符合标准的浏览器。&lt;/span&gt;&lt;span&gt;COBieLite JSON文件也可以使用&lt;/span&gt;&lt;/span&gt;xBIM&lt;span&gt;&lt;span&gt;创建&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;&lt;span&gt;xBIM&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;     xBIM&lt;/span&gt;&lt;span&gt;&lt;span&gt;是&lt;/span&gt;&lt;span&gt;开发基于IFC的应用程序的&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;开源工具包&lt;/span&gt;&lt;/span&gt;&lt;span&gt;（BuildingSmart Data model）。它根据Ifc2x3模式为读写几何，拓扑和数据提供全面的支持。xBIM读取和写入IFC，IfcXMl和IfcZip格式。xBIM项目提供了在英国和美国文化中将IFC模型转换为COBie电子表格的软件包，以及一系列用于Windows窗体，WPF，WEBGL和OpenGL平台的3D查看控件。IOS和Android版本正在开发中。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;简单实例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hello building!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/xbim-viewer.debug.bundle.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;canvas &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;viewer&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;500&quot;&lt;/span&gt;&lt;span&gt; height&lt;/span&gt;&lt;span&gt;=&quot;300&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;canvas&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; viewer &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; xViewer(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;viewer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            viewer.load(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data/SampleHouse.wexbim&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            viewer.start();
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/w2011/p/8424426.html&quot; target=&quot;_blank&quot;&gt;wexbim 文件是通过xBIM Essentials  转换保存&lt;/a&gt;。&lt;/p&gt;
</description>
<pubDate>Sat, 10 Feb 2018 15:35:00 +0000</pubDate>
<dc:creator>在 水 一 方</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/w2011/p/8440062.html</dc:identifier>
</item>
<item>
<title>自兴人工智能------Python语言的变量认识及操作 - Causal因</title>
<link>http://www.cnblogs.com/zhongsiyi/p/8440060.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhongsiyi/p/8440060.html</guid>
<description>&lt;p&gt;今天我给大家介绍的是python中的Number变量,与c++,java有些不同,下面让来为大家介绍:&lt;/p&gt;
&lt;p&gt;在python中是不用声明变量类型的,不过在使用变量前需要对其赋值,没有值得变量是没有意义的,编译器也不会通过&lt;/p&gt;
&lt;p&gt;一 : 整型-----int:&lt;/p&gt;
&lt;p&gt;int 在python中的用法与c++大致是一样的:&lt;/p&gt;
&lt;p&gt;a=12&lt;/p&gt;
&lt;p&gt;print a&lt;/p&gt;
&lt;p&gt;打印的结果就是:12&lt;/p&gt;
&lt;p&gt;在这里我要首先向大家介绍几个函数&lt;/p&gt;
&lt;p&gt;type():返回括号中的数据类型 &lt;/p&gt;
&lt;p&gt;        a='hello'&lt;/p&gt;
&lt;p&gt;        print type(a)&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;type 'string'&amp;gt;&lt;/p&gt;

&lt;p&gt;len():返回括号中的变量的长度&lt;/p&gt;
&lt;p&gt;注:使用len()方法是不能用int类型&lt;/p&gt;
&lt;p&gt;       a='hello world'&lt;/p&gt;
&lt;p&gt;       print len(a)&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt; &amp;gt;11&lt;/p&gt;
&lt;p&gt;二 : 浮点型------float&lt;/p&gt;
&lt;p&gt;浮点型由整数部分与小数部分组成,也可以用科学计数法表示&lt;/p&gt;
&lt;p&gt;   a=1.23&lt;/p&gt;
&lt;p&gt;  print type(a)&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt; &amp;lt;type 'float'&amp;gt;&lt;/p&gt;

&lt;p&gt;三　：复数&lt;/p&gt;
&lt;p&gt;复数是由实数部分和虚数部分构成,可以用a+bj或comple(a,b),复数的实部a和虚部b都是浮点型&lt;/p&gt;

&lt;p&gt;四: 数据类型转换&lt;/p&gt;
&lt;p&gt;int(x) : 将x转换为一个整数&lt;/p&gt;
&lt;p&gt;float(x) : 将x转换为一个浮点数&lt;/p&gt;
&lt;p&gt;complex(x) ：将ｘ转换为一个复数，实数部分为ｘ，虚数部分为０&lt;/p&gt;
&lt;p&gt;         a=1.23&lt;/p&gt;
&lt;p&gt;         print complex(a)&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;(1.23+0j)&lt;/p&gt;
&lt;p&gt;complex(x,y) :　将ｘ和ｙ转换为一个复数，实数部分为ｘ，ｘ和ｙ是数字表达式&lt;/p&gt;

&lt;p&gt;五:　常量&lt;/p&gt;
&lt;p&gt;ｐython中有两个比较常见的常量,即PI和E&lt;/p&gt;
&lt;p&gt;PI:数学常量pi(圆周率)&lt;/p&gt;
&lt;p&gt;E:数学常量e.即自然数&lt;/p&gt;

&lt;p&gt;好了,今天的介绍到此结束,希望能帮到你们&lt;/p&gt;










&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 10 Feb 2018 15:34:00 +0000</pubDate>
<dc:creator>Causal因</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhongsiyi/p/8440060.html</dc:identifier>
</item>
<item>
<title>当我们刚开始我们的码农生涯时，我们该做些什么 - 赵孤鸿</title>
<link>http://www.cnblogs.com/zhaoguhong/p/8439547.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhaoguhong/p/8439547.html</guid>
<description>&lt;p&gt;最近公司新来了一个妹子，老大让我带。妹子大大的眼睛，一眨一眨的，灰常可爱。从她身上我仿佛看到了两年前的自己，从面对业务的各种懵逼，到完不成任务时主动加班，蓦然有一种恍如隔日的感觉。所以想和大家聊聊当我们刚开始我们的码农生涯时，我们该做些什么？&lt;/p&gt;
&lt;h3 id=&quot;写在前面&quot;&gt;写在前面&lt;/h3&gt;
&lt;p&gt;先聊一下带妹子这两周的趣事，感觉很有意思。记得当老大说让我带妹子的时候，我的心情是这样的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1161430/201802/1161430-20180210190110170-907437034.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后事情并非总朝着预料中的方向发展，妹子对我说的最多的一句话居然是&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;大哥，我eclipse炸了&lt;br/&gt;大哥，我eclipse又炸了&lt;br/&gt;大哥，我eclipse又又炸了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还好妹子没叫我大叔，我想对妹子说的是，虽然我长的有点着急，但头发少代表着睿智，真不代表年龄&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1161430/201802/1161430-20180210190218560-547592566.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;妹子奉行着初入江湖无所畏惧的精神，刚来一周就光荣的提交了一个bug上线了，加班填坑的事就不说了，吓得我对妹子提交的代码必须要review，然后就有了下面的对话&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;我：分号为什么不换行？&lt;br/&gt;妹子：别人都没换，，，&lt;br/&gt;我：你怎么知道这个地方能取到值？&lt;br/&gt;妹子：我猜的，，，&lt;br/&gt;我：记笔记咱能不能记到电脑上？&lt;br/&gt;妹子：，，，&lt;br/&gt;我：同样的代码你为啥要写四遍，不能抽象出来吗？&lt;br/&gt;妹子：，，，&lt;br/&gt;我：你这1，2，3是什么意思，这是魔术数字知不知道？&lt;br/&gt;妹子：，，，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后，我想对妹子说，不是哥哥针对你，是因为你桌子上放的糖，总是不让我吃。额不，是因为你要打好基础，我都是为了你好，嗯，是这样的。&lt;/p&gt;
&lt;h3 id=&quot;主动出击&quot;&gt;主动出击&lt;/h3&gt;
&lt;p&gt;我说的可不是主动出击追妹子，而是当你以菜鸟的身份初入职场时。要主动出击了解公司的各种规章制度和项目流程。对于整个项目的开发流程，各种开发环境，版本控制管理，都要有所了解。&lt;/p&gt;
&lt;p&gt;不能糊里糊涂什么都等着别人安排，不然等到代码提交错分支或者连错数据库等问题时徒增尴尬。殊不知，或许这些信息项目的文档里都有，只是你没去看而已。&lt;/p&gt;
&lt;h3 id=&quot;取人之长补己之短&quot;&gt;取人之长,补己之短&lt;/h3&gt;
&lt;p&gt;无知不可怕，可怕的是不自知。初入职场，遇到问题，虚心的像别人请教是快速成长的不二法门。或者你纠结了几天的问题，老司机一句话就点醒了你。&lt;/p&gt;
&lt;p&gt;但问问题要讲究方法，最起码是自己尝试过解决之后再去问。例如，项目启动不了，你要告诉给你解决问题的人：最近有没有改过什么东西；自己尝试过哪些解决办法；以及自己判断是什么原因造成的等。而不是简单一句：我项目启动不了了，帮我看看呗。&lt;/p&gt;
&lt;p&gt;善于学习而不迷信。多看看老司机写的代码，想一想如果自己的话该如何写，取其精华，去其糟粕。不加分辨一味地去模仿是不可取的。要养成自己独立思考的习惯。&lt;/p&gt;
&lt;h3 id=&quot;承担责任&quot;&gt;承担责任&lt;/h3&gt;
&lt;p&gt;不要因为自己是菜鸟而怕担责任，也不要因为给你分了简单的任务而暗自窃喜。回想自己的两年多码农生涯，让我成长最多的不是分分钟就写完的简单业务代码，也不是上来就可以复制粘贴的增删改查，而是折磨了我无数次的变态需求，还有那些加班加点的奋战。&lt;/p&gt;
&lt;p&gt;如果分任务的时候，每次你拿到的都是最轻松的，最简单的，恰恰也说明了你是团队中最无能的。如果你能主动承担相对麻烦的，有难度的任务，也许你会为此付出更多时间，会踩更多的坑，但这也恰恰是你成才的机会。&lt;/p&gt;
&lt;h3 id=&quot;持续学习&quot;&gt;持续学习&lt;/h3&gt;
&lt;p&gt;曾经，我认为“码农”二字只是对程序员的一句调侃而已，现如今却发现是不能再真的事实。如今的程序员犹如过江之鲫，何止百万。如若不能脱颖而出，必然要成为所谓三十五岁被辞退的一员。而持续学习则是不被淘汰的必经之路。&lt;/p&gt;
&lt;p&gt;如果你每天晚上有两个小时的空闲时间，以前全部都在打王者农药，现在你可以尝试分出来一个小时去学习。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果你把一个小时交给了自由和享受，也不要忘了把另外一个小时交给梦想和责任。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;写在最后&quot;&gt;写在最后&lt;/h3&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;听说你们公司新来了一个妹子让你带啊&lt;br/&gt;是啊&lt;br/&gt;妹子哪的人呢&lt;br/&gt;额，，，&lt;br/&gt;有男朋友吗？&lt;br/&gt;额，，，&lt;br/&gt;有啥爱好？&lt;br/&gt;额，，，&lt;/p&gt;
&lt;p&gt;这些你不知道，你说你知道啥&lt;br/&gt;我知道妹子昨天提交的代码第168行多了一个分号&lt;/p&gt;
&lt;p&gt;这么说你是有对象喽&lt;br/&gt;那个，new的算吗&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 10 Feb 2018 11:14:00 +0000</pubDate>
<dc:creator>赵孤鸿</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhaoguhong/p/8439547.html</dc:identifier>
</item>
</channel>
</rss>