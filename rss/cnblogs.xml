<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Linux Redis集群搭建与集群客户端实现(Python) - 扎心了老铁</title>
<link>http://www.cnblogs.com/kangoroo/p/7657616.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kangoroo/p/7657616.html</guid>
<description>&lt;p&gt;&lt;strong&gt;硬件环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文适用的硬件环境如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Linux版本：CentOS release &lt;span&gt;6.7&lt;/span&gt;&lt;span&gt; (Final)
Redis版本：&lt;/span&gt;&lt;span&gt;3.2&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Redis已经成功安装，安装路径为/home/idata/yangfan/local/redis-3.2.1。&lt;/p&gt;
&lt;p&gt;我们要在单台机器上搭建Redis集群，方式是通过不同的TCP端口启动多个实例，然后组成集群。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;1、启动Redis多个实例&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们在Redis安装目录下创建目录cluster，并编写7000.conf~7005.conf 6个配置文件，这6个配置文件用来启动6个实例，后面将使用这6个实例组成集群。&lt;/p&gt;
&lt;p&gt;以7000.conf为例，配置文件需要填写如下几项。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;port  7000                                        //端口7000,7002,7003        
bind 10.93.84.53                                     //默认ip为127.0.0.1 需要改为其他节点机器可访问的ip 否则创建集群时无法访问对应的端口，无法创建集群
daemonize    yes                               //redis后台运行
pidfile  ./redis_7000.pid          //pidfile文件对应7000,7001,7002
cluster-enabled  yes                           //开启集群  把注释#去掉
cluster-config-file  nodes_7000.conf   //集群的配置  配置文件首次启动自动生成 7000,7001,7002
cluster-node-timeout  15000                //请求超时  默认15秒，可自行设置
appendonly  yes                           //aof日志开启  有需要就开启，它会每次写操作都记录一条日志　&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分别启动6个实例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;./bin/redis-server cluster/conf/7000.conf
./bin/redis-server cluster/conf/7001.conf 
./bin/redis-server cluster/conf/7002.conf 
./bin/redis-server cluster/conf/7003.conf 
./bin/redis-server cluster/conf/7004.conf 
./bin/redis-server cluster/conf/7005.conf &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动成功后，看一下进程&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
# ps -ef | grep redis | grep&lt;span&gt; cluster
idata    15711 22329  0 18:40 pts/10   00:00:00 ./bin/redis-server 10.93.84.53:7000&lt;span&gt; [cluster]
idata    15740 22329  0 18:40 pts/10   00:00:00 ./bin/redis-server 10.93.84.53:7001&lt;span&gt; [cluster]
idata    15810 22329  0 18:40 pts/10   00:00:00 ./bin/redis-server 10.93.84.53:7002&lt;span&gt; [cluster]
idata    17023 22329  0 18:42 pts/10   00:00:00 ./bin/redis-server 10.93.84.53:7003&lt;span&gt; [cluster]
idata    17030 22329  0 18:42 pts/10   00:00:00 ./bin/redis-server 10.93.84.53:7004&lt;span&gt; [cluster]
idata    17035 22329  0 18:42 pts/10   00:00:00 ./bin/redis-server 10.93.84.53:7005 [cluster]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，ip=10.93.84.53机器上创建了6个实例，端口号为port=7000~7005。&lt;/p&gt;

&lt;p&gt;Redis 3.0以上的集群方式是通过Redis安装目录下的bin/redis-trib.rb脚本搭建。&lt;/p&gt;
&lt;p&gt;这个脚本是用Ruby编写的，尝试运行，如果打印如下，你可以跳过本文的第二部分。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
idata@qa-f1502-xg01.xg01:~/yangfan/local/redis-&lt;span&gt;3.2&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;/bin$ ruby redis-&lt;span&gt;trib.rb 
Usage: redis&lt;/span&gt;-trib &amp;lt;command&amp;gt; &amp;lt;options&amp;gt; &amp;lt;arguments ...&amp;gt;&lt;span&gt;

  create          host1:port1 ... hostN:portN
                  &lt;/span&gt;--replicas &amp;lt;arg&amp;gt;&lt;span&gt;
  check           host:port
  &lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;            host:port
  fix             host:port
                  &lt;/span&gt;--timeout &amp;lt;arg&amp;gt;&lt;span&gt;
  reshard         host:port
                  &lt;/span&gt;--from &amp;lt;arg&amp;gt;
                  --to &amp;lt;arg&amp;gt;
                  --slots &amp;lt;arg&amp;gt;
                  --&lt;span&gt;yes
                  &lt;/span&gt;--timeout &amp;lt;arg&amp;gt;
                  --pipeline &amp;lt;arg&amp;gt;&lt;span&gt;
  rebalance       host:port
                  &lt;/span&gt;--weight &amp;lt;arg&amp;gt;
                  --auto-&lt;span&gt;weights
                  &lt;/span&gt;--use-empty-&lt;span&gt;masters
                  &lt;/span&gt;--timeout &amp;lt;arg&amp;gt;
                  --&lt;span&gt;simulate
                  &lt;/span&gt;--pipeline &amp;lt;arg&amp;gt;
                  --threshold &amp;lt;arg&amp;gt;&lt;span&gt;
  add&lt;/span&gt;-&lt;span&gt;node        new_host:new_port existing_host:existing_port
                  &lt;/span&gt;--&lt;span&gt;slave
                  &lt;/span&gt;--master-&lt;span&gt;id&lt;/span&gt; &amp;lt;arg&amp;gt;&lt;span&gt;
  del&lt;/span&gt;-&lt;span&gt;node        host:port node_id
  set&lt;/span&gt;-&lt;span&gt;timeout     host:port milliseconds
  call            host:port command arg arg .. arg
  import          host:port
                  &lt;/span&gt;--from &amp;lt;arg&amp;gt;
                  --&lt;span&gt;copy
                  &lt;/span&gt;--&lt;span&gt;replace
  help            (show this help)

For check, fix, reshard, del&lt;/span&gt;-node, set-timeout you can specify the host and port of any working node &lt;span&gt;in&lt;/span&gt; the cluster.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果执行失败，那么不幸的是你的机器没有Ruby运行的环境，那么你需要安装Ruby。进入第二部分。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;2、安装ruby&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下面的过程都是在root权限下完成的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）yum安装ruby和依赖的包。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;yum&lt;/span&gt; -y &lt;span&gt;install&lt;/span&gt; ruby ruby-devel rubygems rpm-build 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般来说，这一步是能正常完成的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）使用gem这个命令来安装redis接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;gem是ruby的一个工具包&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
# gem &lt;span&gt;install&lt;/span&gt; redis 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装过程出错&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;singleposttitle&quot; href=&quot;http://www.cnblogs.com/carryping/p/7447823.html&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1061021/201710/1061021-20171012174253855-788152672.png&quot; alt=&quot;&quot; width=&quot;1378&quot; height=&quot;50&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;郁闷，看样子要升级ruby版本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）升级Ruby的版本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装rvm，我不知道这是个什么东西，但是感觉像是Ruby的一个包管理器。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
# curl -L get.rvm.io | bash -s stable 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;WTF，又出问题了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1061021/201710/1061021-20171012174712262-309614231.png&quot; alt=&quot;&quot; width=&quot;1018&quot; height=&quot;311&quot;/&gt;&lt;/p&gt;
&lt;p&gt;气急败坏的照着他说的做&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
# gpg2 --recv-&lt;span&gt;keys 409B6B1796C275462A1703113804BB82D39DC0E3
gpg: keyring `&lt;/span&gt;/root/.gnupg/secring.gpg&lt;span&gt;'&lt;/span&gt;&lt;span&gt; created&lt;/span&gt;
&lt;span&gt;gpg: requesting key D39DC0E3 from hkp server keys.gnupg.net
gpg: &lt;/span&gt;/root/.gnupg/&lt;span&gt;trustdb.gpg: trustdb created
gpg: key D39DC0E3: public key &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Michal Papis (RVM signing) &amp;lt;mpapis@gmail.com&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; imported
gpg: no ultimately trusted keys found
gpg: Total number processed: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
gpg:               imported: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;  (RSA: &lt;span&gt;1&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后重新下载rvm安装，成功了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
# curl -L get.rvm.io | bash -&lt;span&gt;s stable 
  &lt;/span&gt;% Total    % Received %&lt;span&gt; Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;24090&lt;/span&gt;  &lt;span&gt;100&lt;/span&gt; &lt;span&gt;24090&lt;/span&gt;    &lt;span&gt;0&lt;/span&gt;     &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;18023&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;01&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;01&lt;/span&gt; --:--:--&lt;span&gt;  129k
Downloading https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/rvm/rvm/archive/1.29.3.tar.gz&lt;/span&gt;&lt;span&gt;
Downloading https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/rvm/rvm/releases/download/1.29.3/1.29.3.tar.gz.asc&lt;/span&gt;
gpg: Signature made Mon &lt;span&gt;11&lt;/span&gt; Sep &lt;span&gt;2017&lt;/span&gt; &lt;span&gt;04&lt;/span&gt;:&lt;span&gt;59&lt;/span&gt;:&lt;span&gt;21&lt;/span&gt;&lt;span&gt; AM CST using RSA key ID BF04FF17
gpg: Good signature from &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Michal Papis (RVM signing) &amp;lt;mpapis@gmail.com&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
gpg:                 aka &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Michal Papis &amp;lt;michal.papis@toptal.com&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
gpg:                 aka &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[jpeg image of size 5015]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
gpg: WARNING: This key is not certified with a trusted signature&lt;/span&gt;!&lt;span&gt;
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 409B 6B17 96C2 &lt;/span&gt;&lt;span&gt;7546&lt;/span&gt; 2A17  &lt;span&gt;0311&lt;/span&gt; &lt;span&gt;3804&lt;/span&gt;&lt;span&gt; BB82 D39D C0E3
     Subkey fingerprint: 62C9 E5F4 DA30 0D94 AC36  166B E206 C29F BF04 FF17
GPG verified &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/usr/local/rvm/archives/rvm-1.29.3.tgz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
Creating group &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rvm&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

Installing RVM to &lt;/span&gt;/usr/local/rvm/&lt;span&gt;
Installation of RVM &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; /usr/local/rvm/&lt;span&gt; is almost complete:

  &lt;/span&gt;* First you need to add all users that will be using rvm to &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rvm&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; group,
    and logout &lt;/span&gt;- &lt;span&gt;login&lt;/span&gt; again, anyone using rvm will be operating with `umask u=rwx,g=rwx,o=&lt;span&gt;rx`.

  &lt;/span&gt;* To start using RVM you need to run `source /etc/profile.d/rvm.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;`
    &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; all your open shell windows, &lt;span&gt;in&lt;/span&gt; rare cases you need to reopen all shell windows.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着，source环境，让rvm可用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
# source /usr/local/rvm/scripts/rvm
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看Ruby可用版本&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# rvm list known
# MRI Rubies
[ruby&lt;/span&gt;-]&lt;span&gt;1.8&lt;/span&gt;.&lt;span&gt;6&lt;/span&gt;[-&lt;span&gt;p420]
[ruby&lt;/span&gt;-]&lt;span&gt;1.8&lt;/span&gt;.&lt;span&gt;7&lt;/span&gt;[-&lt;span&gt;head&lt;/span&gt;] # security released on &lt;span&gt;head&lt;/span&gt;&lt;span&gt;
[ruby&lt;/span&gt;-]&lt;span&gt;1.9&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;[-&lt;span&gt;p431]
[ruby&lt;/span&gt;-]&lt;span&gt;1.9&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;[-&lt;span&gt;p330]
[ruby&lt;/span&gt;-]&lt;span&gt;1.9&lt;/span&gt;.&lt;span&gt;3&lt;/span&gt;[-&lt;span&gt;p551]
[ruby&lt;/span&gt;-]&lt;span&gt;2.0&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;[-&lt;span&gt;p648]
[ruby&lt;/span&gt;-]&lt;span&gt;2.1&lt;/span&gt;[.&lt;span&gt;10&lt;/span&gt;&lt;span&gt;]
[ruby&lt;/span&gt;-]&lt;span&gt;2.2&lt;/span&gt;[.&lt;span&gt;7&lt;/span&gt;&lt;span&gt;]
[ruby&lt;/span&gt;-]&lt;span&gt;2.3&lt;/span&gt;[.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;]
[ruby&lt;/span&gt;-]&lt;span&gt;2.4&lt;/span&gt;[.&lt;span&gt;1&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到最新的版本是2.4.1，那么我们装最新的吧。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
# rvm &lt;span&gt;install&lt;/span&gt; &lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
Searching &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; binary rubies, this might take some &lt;span&gt;time&lt;/span&gt;&lt;span&gt;.
No binary rubies available &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;: centos/&lt;span&gt;6&lt;/span&gt;/x86_64/ruby-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.
Continuing with compilation. Please read &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rvm help mount&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; to get &lt;span&gt;more&lt;/span&gt;&lt;span&gt; information on binary rubies.
Checking requirements &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; centos.
Installing requirements &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; centos.
Installing required packages: libffi&lt;/span&gt;-devel, libyaml-&lt;span&gt;devel......
Requirements installation successful.
Installing Ruby from source to: &lt;/span&gt;/usr/local/rvm/rubies/ruby-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;, this may take a &lt;span&gt;while&lt;/span&gt;&lt;span&gt; depending on your cpu(s)...
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; - #downloading ruby-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;, this may take a &lt;span&gt;while&lt;/span&gt;&lt;span&gt; depending on your connection...

curl: (&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;&lt;span&gt;) SSL connect error
There was an error(&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;&lt;span&gt;).
Checking fallback: https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ftp.ruby-lang.org/pub/ruby/2.4/ruby-2.4.1.tar.bz2&lt;/span&gt;
  % Total    % Received %&lt;span&gt; Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;11.9M&lt;/span&gt;  &lt;span&gt;100&lt;/span&gt; &lt;span&gt;11.9M&lt;/span&gt;    &lt;span&gt;0&lt;/span&gt;     &lt;span&gt;0&lt;/span&gt;  1753k      &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;07&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;07&lt;/span&gt; --:--:--&lt;span&gt; 2919k
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; - #extracting ruby-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; to /usr/local/rvm/src/ruby-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;&lt;span&gt;....
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; - #applying &lt;span&gt;patch&lt;/span&gt; /usr/local/rvm/patches/ruby/&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;/random_c_using_NR_prefix.&lt;span&gt;patch&lt;/span&gt;&lt;span&gt;.
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; -&lt;span&gt; #configuring..................................................................
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; - #post-&lt;span&gt;configuration..
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; -&lt;span&gt; #compiling..............................................................................................
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; -&lt;span&gt; #installing.........................
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; -&lt;span&gt; #making binaries executable..
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; - #downloading rubygems-&lt;span&gt;2.6&lt;/span&gt;.&lt;span&gt;14&lt;/span&gt;
  % Total    % Received %&lt;span&gt; Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;  751k  &lt;span&gt;100&lt;/span&gt;  751k    &lt;span&gt;0&lt;/span&gt;     &lt;span&gt;0&lt;/span&gt;   443k      &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;01&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;01&lt;/span&gt; --:--:--&lt;span&gt;  628k
No checksum &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; downloaded archive, recording checksum &lt;span&gt;in&lt;/span&gt;&lt;span&gt; user configuration.
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; - #extracting rubygems-&lt;span&gt;2.6&lt;/span&gt;.&lt;span&gt;14&lt;/span&gt;&lt;span&gt;....
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; -&lt;span&gt; #removing old rubygems.........
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; - #installing rubygems-&lt;span&gt;2.6&lt;/span&gt;.&lt;span&gt;14&lt;/span&gt;&lt;span&gt;...........................
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; - #gemset created /usr/local/rvm/gems/ruby-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;&lt;span&gt;@global
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; - #importing gemset /usr/local/rvm/gemsets/&lt;span&gt;global.gems...............................................
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; -&lt;span&gt; #generating global wrappers........
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; - #gemset created /usr/local/rvm/gems/ruby-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; - #importing gemsetfile /usr/local/rvm/gemsets/&lt;span&gt;default.gems evaluated to empty gem list
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; -&lt;span&gt; #generating default wrappers........
ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; - #adjusting #shebangs &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (gem irb erb ri rdoc testrb rake).
Install of ruby&lt;/span&gt;-&lt;span&gt;2.4&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt; -&lt;span&gt; #complete 
Ruby was built without documentation, to build it run: rvm docs generate&lt;/span&gt;-ri
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，我们升级了Ruby的版本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4）安装gem redis接口，成功！&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
gem &lt;span&gt;install&lt;/span&gt;&lt;span&gt; redis
Fetching: redis&lt;/span&gt;-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;.gem (&lt;span&gt;100&lt;/span&gt;%&lt;span&gt;)
Successfully installed redis&lt;/span&gt;-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
Parsing documentation &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; redis-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
Installing ri documentation &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; redis-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
Done installing documentation &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; redis after &lt;span&gt;0&lt;/span&gt;&lt;span&gt; seconds
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; gem installed
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;5）安装rubygems，成功！&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; -&lt;span&gt;y rubygems
Loaded plugins: fastestmirror, security
Setting up Install Process
Loading mirror speeds from cached hostfile
base                                                                                                                                                   &lt;/span&gt;| &lt;span&gt;3.7&lt;/span&gt; kB     &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;     
didi_jenkins_enable                                                                                                                                    &lt;/span&gt;| &lt;span&gt;1.5&lt;/span&gt; kB     &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;     
didi_op_toa_enable                                                                                                                                     &lt;/span&gt;| &lt;span&gt;1.5&lt;/span&gt; kB     &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;     
didi_txjenkins_enable                                                                                                                                  &lt;/span&gt;| &lt;span&gt;1.5&lt;/span&gt; kB     &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;     
didi_update                                                                                                                                            &lt;/span&gt;| &lt;span&gt;1.5&lt;/span&gt; kB     &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;     
epel                                                                                                                                                   &lt;/span&gt;| &lt;span&gt;4.3&lt;/span&gt; kB     &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;     
extras                                                                                                                                                 &lt;/span&gt;| &lt;span&gt;3.4&lt;/span&gt; kB     &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;     
tmprepo                                                                                                                                                &lt;/span&gt;| &lt;span&gt;1.5&lt;/span&gt; kB     &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;     
updates                                                                                                                                                &lt;/span&gt;| &lt;span&gt;3.4&lt;/span&gt; kB     &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;     
Package rubygems&lt;/span&gt;-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;7&lt;/span&gt;-&lt;span&gt;5&lt;/span&gt;&lt;span&gt;.el6.noarch already installed and latest version
Nothing to &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，我们的Ruby和运行redis-trib.rb需要的环境安装完成了。 &lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;3、Redis集群搭建&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;有了Ruby执行环境，可以开始将之前的6个实例组建成集群了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令方式：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
ruby ./bin/redis-trib.rb create --replicas &lt;span&gt;1&lt;/span&gt; &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt; &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt; &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt; &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7003&lt;/span&gt; &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7004&lt;/span&gt; &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7005&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre readability=&quot;5&quot;&gt;
--replicas 1表示为集群的master节点创建1个副本。那么6个实例里，有三个master，有三个是slave。&lt;p&gt;后面跟上6个实例就好了，形式就是ip:port
&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;执行情况：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
# ruby ./bin/redis-trib.rb create --replicas &lt;span&gt;1&lt;/span&gt; &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt; &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt; &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt; &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7003&lt;/span&gt; &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7004&lt;/span&gt; &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7005&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; Creating cluster
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Performing hash slots allocation on &lt;span&gt;6&lt;/span&gt;&lt;span&gt; nodes...
Using &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; masters:
&lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;
&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt;
&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt;&lt;span&gt;
Adding replica &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7003&lt;/span&gt; to &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&lt;span&gt;
Adding replica &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7004&lt;/span&gt; to &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt;&lt;span&gt;
Adding replica &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7005&lt;/span&gt; to &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt;&lt;span&gt;
M: 6346ae8c7af7949658619fcf4021cc7aca454819 &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&lt;span&gt;
   slots:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;5460&lt;/span&gt; (&lt;span&gt;5461&lt;/span&gt;&lt;span&gt; slots) master
M: 5ac973bceab0d486c497345fe884ff54d1bb225a &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt;&lt;span&gt;
   slots:&lt;/span&gt;&lt;span&gt;5461&lt;/span&gt;-&lt;span&gt;10922&lt;/span&gt; (&lt;span&gt;5462&lt;/span&gt;&lt;span&gt; slots) master
M: cc46a4a1c0ec3f621b6b5405c6c10b7cffe73932 &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt;&lt;span&gt;
   slots:&lt;/span&gt;&lt;span&gt;10923&lt;/span&gt;-&lt;span&gt;16383&lt;/span&gt; (&lt;span&gt;5461&lt;/span&gt;&lt;span&gt; slots) master
S: 92f62ec93a0550d962f81213ca7e9b3c9c996afd &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7003&lt;/span&gt;&lt;span&gt;
   replicates 6346ae8c7af7949658619fcf4021cc7aca454819
S: 942c9f97dc68198c39f425d13df0d8e3c40c5a58 &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7004&lt;/span&gt;&lt;span&gt;
   replicates 5ac973bceab0d486c497345fe884ff54d1bb225a
S: a92a81532b63652bbd862be6f19a9bd8832e5e05 &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7005&lt;/span&gt;&lt;span&gt;
   replicates cc46a4a1c0ec3f621b6b5405c6c10b7cffe73932
Can I set the above configuration&lt;/span&gt;? (type &lt;span&gt;'&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; to accept): yes
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; Nodes configuration updated
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; Assign a different config epoch to each node
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Sending CLUSTER MEET messages to &lt;span&gt;join&lt;/span&gt;&lt;span&gt; the cluster
Waiting &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; the cluster to &lt;span&gt;join&lt;/span&gt;&lt;span&gt;...
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Performing Cluster Check (using node &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&lt;span&gt;)
M: 6346ae8c7af7949658619fcf4021cc7aca454819 &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&lt;span&gt;
   slots:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;5460&lt;/span&gt; (&lt;span&gt;5461&lt;/span&gt;&lt;span&gt; slots) master
   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; additional replica(s)
S: a92a81532b63652bbd862be6f19a9bd8832e5e05 &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7005&lt;/span&gt;&lt;span&gt;
   slots: (&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; slots) slave
   replicates cc46a4a1c0ec3f621b6b5405c6c10b7cffe73932
M: 5ac973bceab0d486c497345fe884ff54d1bb225a &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt;&lt;span&gt;
   slots:&lt;/span&gt;&lt;span&gt;5461&lt;/span&gt;-&lt;span&gt;10922&lt;/span&gt; (&lt;span&gt;5462&lt;/span&gt;&lt;span&gt; slots) master
   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; additional replica(s)
S: 942c9f97dc68198c39f425d13df0d8e3c40c5a58 &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7004&lt;/span&gt;&lt;span&gt;
   slots: (&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; slots) slave
   replicates 5ac973bceab0d486c497345fe884ff54d1bb225a
S: 92f62ec93a0550d962f81213ca7e9b3c9c996afd &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7003&lt;/span&gt;&lt;span&gt;
   slots: (&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; slots) slave
   replicates 6346ae8c7af7949658619fcf4021cc7aca454819
M: cc46a4a1c0ec3f621b6b5405c6c10b7cffe73932 &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt;&lt;span&gt;
   slots:&lt;/span&gt;&lt;span&gt;10923&lt;/span&gt;-&lt;span&gt;16383&lt;/span&gt; (&lt;span&gt;5461&lt;/span&gt;&lt;span&gt; slots) master
   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; additional replica(s)
[OK] All nodes agree about slots configuration.
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Check &lt;span&gt;for&lt;/span&gt;&lt;span&gt; open slots...
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; Check slots coverage...
[OK] All &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt; slots covered.
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;second&quot;&gt; 可以看到16384个slot都已经创建完成，并且建立了3个master和对应的replica:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Using &lt;span&gt;3&lt;/span&gt;&lt;span&gt; masters:
&lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;
&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt;
&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt;&lt;span&gt;
Adding replica &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7003&lt;/span&gt; to &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&lt;span&gt;
Adding replica &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7004&lt;/span&gt; to &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt;&lt;span&gt;
Adding replica &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7005&lt;/span&gt; to &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7002&lt;p&gt;。。。&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;[OK] All 16384 slots covered.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;second&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;second&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;4、验证集群状态&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;second&quot;&gt;登录集群客户端，-c标识以集群方式登录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./bin/redis-cli -h &lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt; -p &lt;span&gt;7000&lt;/span&gt; -c
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;second&quot;&gt;查看集群状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&amp;gt; cluster &lt;span&gt;info&lt;/span&gt;&lt;span&gt;
cluster_state:ok
cluster_slots_assigned:&lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;&lt;span&gt;
cluster_slots_ok:&lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;&lt;span&gt;
cluster_slots_pfail:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
cluster_slots_fail:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
cluster_known_nodes:&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;
cluster_size:&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
cluster_current_epoch:&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
cluster_my_epoch:&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
cluster_stats_messages_sent:&lt;/span&gt;&lt;span&gt;215&lt;/span&gt;&lt;span&gt;
cluster_stats_messages_received:&lt;/span&gt;&lt;span&gt;215&lt;/span&gt;
&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&amp;gt;&lt;span&gt; cluster nodes
942c9f97dc68198c39f425d13df0d8e3c40c5a58 &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7004&lt;/span&gt; slave 5ac973bceab0d486c497345fe884ff54d1bb225a &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1507806791940&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt; connected
5ac973bceab0d486c497345fe884ff54d1bb225a &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt; master - &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1507806788937&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; connected &lt;span&gt;5461&lt;/span&gt;-&lt;span&gt;10922&lt;/span&gt;&lt;span&gt;
a92a81532b63652bbd862be6f19a9bd8832e5e05 &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7005&lt;/span&gt; slave cc46a4a1c0ec3f621b6b5405c6c10b7cffe73932 &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1507806790939&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;&lt;span&gt; connected
cc46a4a1c0ec3f621b6b5405c6c10b7cffe73932 &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt; master - &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1507806789937&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; connected &lt;span&gt;10923&lt;/span&gt;-&lt;span&gt;16383&lt;/span&gt;&lt;span&gt;
6346ae8c7af7949658619fcf4021cc7aca454819 &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt; myself,slave 92f62ec93a0550d962f81213ca7e9b3c9c996afd &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt; connected
92f62ec93a0550d962f81213ca7e9b3c9c996afd &lt;/span&gt;&lt;span&gt;10.93&lt;/span&gt;.&lt;span&gt;84.53&lt;/span&gt;:&lt;span&gt;7003&lt;/span&gt; master - &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1507806792941&lt;/span&gt; &lt;span&gt;8&lt;/span&gt; connected &lt;span&gt;0&lt;/span&gt;-&lt;span&gt;5460&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 一些原理&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;second&quot;&gt;redis cluster在设计的时候，就考虑到了去中心化，去中间件，也就是说，集群中的每个节点都是平等的关系，都是对等的，每个节点都保存各自的数据和整个集群的状态。每个节点都和其他所有节点连接，而且这些连接保持活跃，这样就保证了我们只需要连接集群中的任意一个节点，就可以获取到其他节点的数据。&lt;/p&gt;
&lt;p data-anchor-id=&quot;14v6&quot;&gt;Redis集群没有并使用传统的一致性哈希来分配数据，而是采用另外一种叫做&lt;code&gt;哈希槽（hash slot）&lt;/code&gt;的方式来分配的，一致性哈希对向集群中新增和删除实例的支持很好，但是哈希槽对向集群新增实例或者删除实例的话，需要额外的操作，需要手动的将slot重新平均的分配到新集群的实例中。&lt;/p&gt;
&lt;p data-anchor-id=&quot;14v6&quot;&gt;redis cluster 默认分配了 16384 个slot，当我们set一个key时，会用&lt;code&gt;CRC16&lt;/code&gt;算法来取模得到所属的&lt;code&gt;slot&lt;/code&gt;，然后将这个key分到哈希槽区间的节点上，具体算法就是：&lt;code&gt;CRC16(key)%16384。&lt;/code&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;n789&quot;&gt;Redis 集群会把数据存在一个master节点，然后在这个master和其对应的salve之间进行数据同步。当读取数据时，也根据一致性哈希算法到对应的master节点获取数据。只有当一个master 挂掉之后，才会启动一个对应的salve节点，充当master。&lt;/p&gt;
&lt;p data-anchor-id=&quot;n789&quot;&gt;需要注意的是：必须要&lt;code&gt;3个或以上&lt;/code&gt;的主节点，否则在创建集群时会失败，并且当存活的主节点数小于总节点数的一半时，整个集群就无法提供服务了。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;5、python集群客户端&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;以Python Redis Cluster集群的使用方式为例，简单说明一下如何使用，让大家更直观的了解一下Redis集群。&lt;/p&gt;
&lt;p&gt;Redis集群方式与单机方式在python客户端实现上是有很大不同的。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;包不同，单机依赖包redis-py，集群依赖包redis-py-cluster&lt;/li&gt;
&lt;li&gt;对同时操作多个keys的命令(mset, mget, sinter, ...)，redis-py-cluster重写StriceRedis(单机Redis操作类)了其方法，而这些方法丧失了命令的原子性。&lt;/li&gt;
&lt;li&gt;Pipelines在集群中的表现也不同了。在单机版中，pipeline是批量batch提交redis批量执行的，但是在集群版中，是one by one提交redis执行完成直接返回，在客户端重新组合成一个列表返回。所以集群中只是看起来像是批量执行。&lt;/li&gt;
&lt;li&gt;一些命令是会Fanout(扇形)发送到集群中各个shard中执行并汇总的，如ping，keys等。一些命令是不提倡使用(blocked)，如watch，unwatch等。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我只是简单翻译了官网的一些内容，相信信息大家可以参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://redis-py-cluster.readthedocs.io/en/master/commands.html&quot; target=&quot;_blank&quot;&gt;http://redis-py-cluster.readthedocs.io/en/master/commands.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://redis-py-cluster.readthedocs.io/en/master/limitations-and-differences.html&quot; target=&quot;_blank&quot;&gt;http://redis-py-cluster.readthedocs.io/en/master/limitations-and-differences.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）安装redis-py-cluster &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单的通过pip安装redis-py-cluster包。如果安装失败，可以自助下载安装。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
# pip &lt;span&gt;install&lt;/span&gt; redis-py-&lt;span&gt;cluster     
Collecting redis&lt;/span&gt;-py-&lt;span&gt;cluster
  Downloading redis_py_cluster&lt;/span&gt;-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-py2.py3-none-&lt;span&gt;any.whl
Requirement already satisfied: redis&lt;/span&gt;&amp;gt;=&lt;span&gt;2.10&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; /home/idata/pythonEnv/idataPlatEnv/lib/python2.&lt;span&gt;7&lt;/span&gt;/site-packages/redis-&lt;span&gt;2.10&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;-py2.&lt;span&gt;7&lt;/span&gt;.egg (from redis-py-&lt;span&gt;cluster)
Installing collected packages: redis&lt;/span&gt;-py-&lt;span&gt;cluster
Successfully installed redis&lt;/span&gt;-py-cluster-&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2）一个简单的demo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;封装了RedisCluster操作类，实现了一些方法，其实就是做了一层封装。&lt;/p&gt;
&lt;p&gt;封装的意义是：我喜欢对这些封装增加一些装饰器，控制异常和重试等逻辑。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; rediscluster &lt;span&gt;import&lt;/span&gt;&lt;span&gt; StrictRedisCluster

redis_nodes &lt;/span&gt;=&lt;span&gt; [
        {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;10.93.84.53&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 7000&lt;span&gt;},
        {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;10.93.84.53&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 7001&lt;span&gt;},
        {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;10.93.84.53&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 7002&lt;span&gt;},
        {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;10.93.84.53&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 7003&lt;span&gt;},
        {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;10.93.84.53&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 7004&lt;span&gt;},
        {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;10.93.84.53&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 7005&lt;span&gt;},
    ]


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; RedisCluster(object):

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, redis_nodes):
        self.cluster &lt;/span&gt;= StrictRedisCluster(startup_nodes=&lt;span&gt;redis_nodes)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 无差别的方法&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; set(self, name, value, ex=None, px=None, nx=False, xx=&lt;span&gt;False):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.cluster.set(name, value, ex, px, nx, xx)
    
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 无差别的方法&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get(self, name):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.cluster.get(name)
    
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 扇形发送的命令&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; cluster_info(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.cluster.cluster_info()

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 重写StrictRedis的方法&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; mset(self, *args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.cluster.mset(args, kwargs)
    
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 重写StrictRedis的方法&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; mget(self, keys, *&lt;span&gt;args):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.cluster.mget(keys, args)
    
    
cluster &lt;/span&gt;=&lt;span&gt; RedisCluster(redis_nodes)
cluster.cluster_info()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 16 Oct 2017 07:39:00 +0000</pubDate>
<dc:creator>扎心了老铁</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kangoroo/p/7657616.html</dc:identifier>
</item>
<item>
<title>部署LAMP+NFS实现双Web服务器负载均衡 - Aubin</title>
<link>http://www.cnblogs.com/aubin/p/7674816.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aubin/p/7674816.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1026632/201710/1026632-20171015230240074-1724035861.png&quot;/&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;1.前端需支持更大的访问量，单台Web服务器已无法满足需求了，则需扩容Web服务器；&lt;br/&gt;2.虽然动态内容可交由后端的PHP服务器执行，但静态页面还需要Web服务器自己解析，那是否意味着多台Web服务器都需要在各自的系统中都存有一份静态页面数据呢？那么如果能将静态页面集中存放，所有Web服务器都来集中地取文件，对于文件的一致性就有了保障，这个集中地就叫做“文件共享服务器”；&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;1.web1充当http服务器和DNS解析服务器，客户端到web1和web2的请求，如果是静态资源请求通过php主机的NFS服务挂载的存储返回结果&lt;br/&gt;2.web1和web2对于客户端动态资源请求都反向代理到后端php服务器进行执行后返回结果&lt;br/&gt;3.web1和web2实现DNS轮询，客户端访问博客网站是负载均衡的。&lt;br/&gt;4.建立wordpress博客&lt;br/&gt;5.数据库存储wordpress博客的各种数据&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1026632/201710/1026632-20171015230347355-593921948.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;1.部署LAMP环境、配置NFS服务器&lt;br/&gt;2.web1、web2、php服务器全部挂载NFS共享目录为网站根目录&lt;br/&gt;3.配置httpd实现动静分离&lt;br/&gt;4.配置DNS实现负载均衡&lt;/p&gt;

&lt;h2 id=&quot;web1web2服务器编译安装apache&quot;&gt;1.web1、web2服务器编译安装Apache&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;# 安装依赖包
yum groupinstall &quot;development tools&quot;
yum install openssl-devel expat-devel pcre-devel 
#
# 解压文件
tar xvf apr-1.6.2.tar.gz 
tar xvf apr-util-1.6.0.tar.gz 
tar xvf httpd-2.4.27.tar.bz2 
cp -r apr-1.6.2 httpd-2.4.27/srclib/apr
cp -r apr-util-1.6.0 httpd-2.4.27/srclib/apr-util
#
# 编译安装
cd httpd-2.4.27/
./configure \
--prefix=/app/httpd24 \
--sysconfdir=/etc/httpd24 \
--enable-so --enable-ssl \
--enable-rewrite --with-zlib \
--with-pcre --with-included-apr \
--enable-modules=most \
--enable-mpms-shared=all \
--with-mpm=prefork
#
make &amp;amp;&amp;amp; make install
#
#配置环境变量
vim /etc/profile.d/lamp.sh
    PATH=/app/httpd24/bin/:$PATH
. /etc/profile.d/lamp.sh
#
# 启动服务
apachectl start&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;数据库服务器二进制安装mariadb&quot;&gt;2.数据库服务器二进制安装mariadb&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;# 解压文件
tar xvf mariadb-10.2.8-linux-x86_64.tar.gz  -C /usr/local/
cd /usr/local
#
# 创建软连接，mariadb在/usr/local下必须名为mysql，可以创建软连接，可以改名
ln -s mariadb-10.2.8-linux-x86_64/ mysql
#
# 创建用户
useradd -r -m -d /app/mysqldb -s /sbin/nologin mysql 
cd mysql/
#
# 初始化数据库
scripts/mysql_install_db --datadir=/app/mysqldb --user=mysql
#
# 创建配置文件
mkdir /etc/mysql
cp support-files/my-large.cnf   /etc/mysql/my.cnf
#
# 修改配置文件，指定数据库存放路径
vim /etc/mysql/my.cnf
[mysqld]
datadir = /app/mysqldb             在mysqld下添加这三行
innodb_file_per_table = ON
skip_name_resolve = ON
#
# 复制启动脚本，添加开机自动启动
cp support-files/mysql.server /etc/init.d/mysqld
chkconfig --add mysqld
chkconfig --list 
service mysqld start
#
# 创建日志目录
mkdir /var/log/mariadb
chown mysql /var/log/mariadb/
#
#添加环境变量
vim /etc/profile.d/lamp.sh 
   PATH=/app/httpd24/bin/:/usr/local/mysql/bin/:$PATH
. /etc/profile.d/lamp.sh
#
#调用安全加固脚本，加固数据库。汉字为每一项的翻译
mysql_secure_installation
  是否设置root密码
  输入密码
  确认密码
  是否设置匿名用户
  是否允许root远程登录
  删除test数据库
  现在是否生效&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;php应用服务器编译安装php7&quot;&gt;3.PHP应用服务器编译安装PHP7&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;# 安装依赖包
yum install libxml2-devel bzip2-devel libmcrypt-devel gcc openssl-devel
tar xvf  php-7.1.7.tar.bz2
#
#编译安装
cd php-7.1.7.tar.bz2
./configure \
--prefix=/app/php \
--enable-mysqlnd \                          #mysqlnd 指明Mysql不再本地
--with-mysqli=mysqlnd \
--with-pdo-mysql=mysqlnd \
--with-openssl \
--enable-mbstring \
--with-freetype-dir  \
--with-jpeg-dir \
--with-png-dir \
--with-zlib \
--with-libxml-dir=/usr \
--enable-xml \
--enable-sockets \
--enable-fpm \                              #用FPM模式
--with-mcrypt \
--with-config-file-path=/etc/php \
--with-config-file-scan-dir=/etc/php.d \
--with-bz2
#
# 创建PHP配置文件
mkdir /etc/php/
cp php.ini-production /etc/php/php.ini
#
# 复制服务脚本，添加开机自动启动
cp   sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
chmod +x /etc/init.d/php-fpm
chkconfig --add php-fpm
chkconfig --list  php-fpm
#
# 创建fpm的配置文件
cd /app/php/etc
cp php-fpm.conf.default php-fpm.conf
cd /app/php/etc/php-fpm.d/
cp www.conf.default www.conf
vim www.conf
    listen = 172.18.68.23:9000              #设置监听的IP，注释监听所有， 只写端口监听鄋
    ;listen.allowed_clients = 127.0.0.1.    #把这项注释掉，分号为注释
systemctl start php-fpm&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;配置nfs服务器&quot;&gt;4.配置NFS服务器&lt;/h2&gt;
&lt;p&gt;NFS服务器的配置特别简单，最重要的时配置完后就赶紧将NFS共享目录挂载至web1、web2、PHP服务器的网站根目录。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mkdir -pv /app/nfs/web    #创建共享目录，此目录为网站的根目录，实现统一管理。
vim /etc/exports
  /app/nfs/web 172.18.0.0/16(ro,sync,root_squash,no_all_squash)
# 允许172.18.0.1网段挂载NFS共享，如果要提高安全性应该控制到主机&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Web1服务器&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mount 172.18.68.24:/app/nfs/web /app/httpd24/htdocs        #/app/httpd24/htdocs为httpd.conf中的根目录&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Web2服务器&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mount 172.18.68.24:/app/nfs/web /app/httpd24/htdocs        #/app/httpd24/htdocs为httpd.conf中的根目录&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;PHP应用服务器&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mkdir /app/httpd24/htdocs                                  #PHP没有根目录，/app/httpd24/htdocs为NFS的挂载点。
mount 172.18.68.24:/app/nfs/web /app/httpd24/htdocs        &lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;配置apache实现动静分离&quot;&gt;5.配置Apache实现动静分离&lt;/h2&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;加载模块&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim /etc/httpd24/httpd.conf
    LoadModule proxy_module modules/mod_proxy.so                       #取消两行的注释，加载两模块
    LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;动静分离&lt;br/&gt;在配置文件的末尾追加这四行，利用代理将所有以.php结尾的文件交给PHP服务器处理，实现动静分离&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim /etc/httpd24/httpd.conf
  AddType application/x-httpd-php .php
  AddType application/x-httpd-php-source .phps
  ProxyRequests Off 关闭正向代理
  ProxyPassMatch  ^/(.*\.php)$ fcgi://127.0.0.1:9000/app/httpd24/htdocs/$1  
#要确保PHP服务器中有这个目录，(在NFS中创建这个目录，且将NFS挂载至此目录。)
apachectl restart&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;部署wordpress博客&quot;&gt;6.部署wordpress博客&lt;/h2&gt;
&lt;p&gt;因为web1、web2、PHP服务器都使用NFS共享的目录作为根目录，所以只需要将wordpress博客系统部署在NFS服务器上即可让所有服务器得到同样的数据。&lt;/p&gt;
&lt;ul readability=&quot;7&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;安装博客程序&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 解压博客程序
tar xvf wordpress-4.8.1-zh_CN.tar.gz  -C /app/httpd24/htdocs
cd /app/httpd24/htdocs
mv wordpress/ blog/
# 创建配置文件
cd /app/httpd24/htdocs/blog/
cp wp-config-sample.php  wp-config.php&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;配置数据库&lt;br/&gt;wordpress需要数据库，所以在此先创建一个wordpress专用的数据库，且创建授权用户。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mysql -uroot -pcentos
create datebase wpdb;
grant all on wpdb.* to wpuser@'172.18.68.%' identified by 'centos';&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;配置wordpress连接数据库&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 编辑配置文件，写入创建的IP、数据库、与用户性
vim wp-config.php
define('DB_NAME', 'wpdb');
#
/** MySQL数据库用户名 */
define('DB_USER', 'wpuser');
#
/** MySQL数据库密码 */
define('DB_PASSWORD', 'centos');
#
/** MySQL主机 */
define('DB_HOST', 'localhost');&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;登录测试&quot;&gt;7.登录测试&lt;/h2&gt;
&lt;h2 id=&quot;配置dns负载均衡&quot;&gt;8.配置DNS负载均衡&lt;/h2&gt;
&lt;p&gt;购买了单独域名后，在后台控制面板中添加两条A记录，就可以达到负载均衡。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;到这里基于LAMP+NFS架构的双Web服务器、动静分离网站就搭建完成了。&lt;br/&gt;双WEB服务器架构的好处在于如果有一台服务器宕机不会是整个网站瘫痪。&lt;br/&gt;NFS共享存储的好处在于，DNS负载均衡后，不论用户被分配到哪台主机上，都能看到相同的页面得到相同的结果。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 16 Oct 2017 07:17:00 +0000</pubDate>
<dc:creator>Aubin</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aubin/p/7674816.html</dc:identifier>
</item>
<item>
<title>子慕谈设计模式系列（三） - 子慕大诗人</title>
<link>http://www.cnblogs.com/1wen/p/7652097.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/1wen/p/7652097.html</guid>
<description>&lt;h3&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;设计模式不容易用文字描述清楚，而过多的代码，看起来也让人摸不到头脑，加上词语或者文字描述的抽象感，很容易让人看了无数设计模式的文章，也仍然理解不了。  所以我一直打算写此系列博客，首先我会从大量文章里去理解这些设计模式，最后我用自己的语言组织转化为博客，希望用更少的代码，更容易理解的文字，来聊一聊这些设计模式。  我所理解、所描述的每一个设计模式也可能有些是错误的，甚至也不一定有非常深刻的理解，所以希望有人指出，我可以更改博客内容。  我作为前端开发者，所以设计模式的代码以前端代码和视角为主。  此博客内容对每一种模式并不会写得非常深入，也许能为读者打通一些认知，如果看了此系列博客，再去看其他更深入的博客，可能是一种比较好的方式。&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;代理模式&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;代理模式的定义：为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;生活中的例子：买火车票不一定在火车站买，也可以去代售点或者网上购买，vpn。&lt;/p&gt;
&lt;p&gt;常见的代理模式应用例子：前后端交互，往往后端有server层和应用层，前端只和后端应用层打交道，应用层调取server层，server层职责单一，应用层处理逻辑。  应用层既是代理层，也可以叫中间件。&lt;/p&gt;
&lt;p&gt;代理模式最开始我一直没有想到平时前端应用中的例子。但是经过多次推敲和联系，发现代理模式的使用无处不在，再读一遍描述（在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。）。那么我认为对API的封装可以算是代理模式的应用，一般对API进行封装，肯定是希望在调用API的时候做一些通用的事情或者处理，以便让对象的调用更方便或者更适应业务。比如我们要封装一下js的location.href的跳转。我们想在跳转之前进行一些统计，那么我们可以在location.href前处理跳转逻辑。但是因为要跳转的地方太多了，我不想每个地方都有跳转逻辑，所以我封装一个jump方法，专门处理跳转，并在跳转之前处理统计逻辑。而后我在跳转前还需要做其他事情，就可以直接在这个jump方法里实现，扩展性也非常高。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
function jump(url){
        //统计逻辑
        location.href = url;
}
jump('baidu.com')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;&lt;li class=&quot;para&quot;&gt;职责清晰&lt;/li&gt;
&lt;li class=&quot;para&quot;&gt;代理对象可以在客户端和目标对象之间起到中介的作用，这样起到了中介的作用和保护了目标对象的作用。&lt;/li&gt;
&lt;li class=&quot;para&quot;&gt;高扩展性&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;会使程序处理和响应速度变慢&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span&gt;中介者模式&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;中介者模式是用来降低多个对象和类之间的交互复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的交互，并支持松耦合，使代码易于维护。  中介者模式属于行为型模式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。  &lt;/span&gt;&lt;span&gt;对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂,形成网状结构。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;典型应用例子：MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。&lt;/p&gt;
&lt;p&gt;相信现在的框架模式至少都是mvc或者mvvm。我曾经看过一个运行的老项目.net代码，一个aspx文件中写了html，css，js，.net，并且数据库查询操作也写到页面中了，那页面维护起来就非常酸爽了。  如果使用mvc模式，控制器作为中介，隔离model和view让它们不直接交互，达到了解耦效果，虽然会增加代码量，但是交互的可重用性得到了提升，代码复杂度降低，逻辑更加清晰，更易于维护，也就是所谓高内聚低耦合。&lt;/p&gt;
&lt;p&gt;现实中的例子：在学校下发一个通知的时候，如果是通过口口相传的方式，那么学生之间的关系是多对多的关系，非常难以准确传达到每个人手里。如果学校贴一张公告单到校门口，那么公告单作为学校和学生的中介，就能让关系变得简单。我们平时生活中的聊天群也可以达到同样效果。网状结构的关系由此变成了星型结构。如下盗图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/623144/201710/623144-20171016110657224-1058201558.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/623144/201710/623144-20171016110702990-712678128.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;&lt;span&gt;&lt;strong&gt;观察者模式&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;观察者模式（有时又被称为发布-订阅模式）是设计模式的一种。  在此种模式中， 一个或者多个观察者去监听主题，当主题发生变化的时候，主题会通知所有的观察者。  这通常透过调用观察者所提供的方法来实现。此种模式通常被用来实现事件处理系统。  比如常用的事件监听，onclick，onload等。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;vue采用数据劫持结合观察者模式，通过&lt;code&gt;Object.defineProperty方法&lt;/code&gt;来劫持各个属性的&lt;code&gt;setter&lt;/code&gt;，&lt;code&gt;getter&lt;/code&gt;，在数据变动时发布消息给订阅者，触发相应的回调。  写一个删减版的类似例子（直接复制代码在控制台运行试试）：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; Observer(data){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;传入观察对象&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.data =&lt;span&gt; data;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.defineReactive(data);
}

Observer.prototype &lt;/span&gt;=&lt;span&gt; {
    defineReactive: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; self = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dep = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Dep();
        dep.addSub(data);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加订阅&lt;/span&gt;
&lt;span&gt;
        Object.keys(data).forEach(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(key){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; val =&lt;span&gt; data[key];
            Object.defineProperty(data, key, {
                get: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; val;
                },
                set: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(newVal){
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(val == newVal) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                    val &lt;/span&gt;=&lt;span&gt; newVal;

                    dep.notify();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发生改变下发通知&lt;/span&gt;
&lt;span&gt;                }
            })
        })
    }
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Dep(){}
Dep.prototype &lt;/span&gt;=&lt;span&gt; {
    addSub: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(sub){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sub =&lt;span&gt; sub;
    },
    notify: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sub);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前对象有值的改变,打印出当前对象&lt;/span&gt;
&lt;span&gt;    }
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; data =&lt;span&gt; {
    val: &lt;/span&gt;1&lt;span&gt;
}
&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Observer(data);
data.val &lt;/span&gt;= 2;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行后，在控制台会打印出当前对象，直接复制这段代码运行试试&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;策略模式&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;para&quot; readability=&quot;9&quot;&gt;
&lt;ul&gt;&lt;li&gt;定义了一系列算法；&lt;/li&gt;
&lt;li&gt;封装了每个算法；&lt;/li&gt;
&lt;li&gt;这一系列的算法可互换代替。&lt;/li&gt;
&lt;/ul&gt;
策略模式是指对一系列的算法定义，并将每一个算法封装起来，而且使它们还可以相互替换，让算法仅仅只做算法，让其它逻辑的事情交给策略类去处理。 下面直接用例子说明。&lt;/div&gt;
&lt;div class=&quot;para&quot; readability=&quot;10&quot;&gt;我们常会封装一个验证工具类，一般的写法是定义一个对象字面量，不同的属性定义不同的验证方法，大致如下代码：
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; validator =&lt;span&gt; {
    isNumber:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(val){
        if(false) alert('非法数字');
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;return true or false&lt;/span&gt;
&lt;span&gt;    },
    isPhone:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){}
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;.....  &lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;para&quot; readability=&quot;20&quot;&gt;
&lt;p&gt; 这样在使用和维护验证的时候，重复代码量会比较多，一个验证方法需要处理验证算法和验证后的逻辑（验证返回、提醒等），不管提醒是写在验证方法内还是在外部方法外，这些逻辑每次都要处理一次。  那么使用策略类，来统一处理验证逻辑，并把验证算法独立开，这样之后维护只修改和添加算法方法。  那么怎么做呢，如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; validator =&lt;span&gt; {
    validate: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(type, val){
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (prop &lt;span&gt;in&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.types) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(type == prop){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用对应验证方法&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.types[type].validate(val);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!result) alert(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.types[type].text);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
            }
        }
    },

    types: {&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义验证算法&lt;/span&gt;
&lt;span&gt;        isNumber:{
            validate: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(val){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt; or &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            },
            text: &lt;/span&gt;'非法数字'&lt;span&gt;
        },
        isPhone:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){}
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;.....  &lt;/span&gt;
&lt;span&gt;    }
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; input1 = $('input'&lt;span&gt;).val();
validator.validate(&lt;/span&gt;'isNumber', input1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上代码只是一个小demo，并不完善，想表达的意思就是策略模式，把算法和策略类独立开来，根据需求算法可以替换，策略类统一处理。  angular的验证类FormGroup就使用了这一模式。  上面的demo因为还比较简单，所以一下感觉不到有多大差别，但是如果你真正使用过类型angular的FormGroup这类的验证方式，你就会发现能节省很多代码量，逻辑也非常清晰。&lt;/p&gt;
&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;&lt;span&gt;状态模式&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;允许一个对象在其内部状态改变时改变它的行为。  对象看起来似乎修改了它的类。通俗的说，对象内部定义了不同状态的类，在状态改变的时候，替换对象相应的类。&lt;/p&gt;
&lt;p&gt;举一个生活中的例子：当我们的手机电量比较充足的时候，手机会使用正常模式用电，当电量小于20%的时候，手机会使用省电模式。电量就是状态，正常模式和省电模式就是相应的替换类。&lt;/p&gt;
&lt;p&gt;再举一个前端的例子： 博客园的后台首页右上角，有两种形态，一种是登录之后，会显示当前用户名和注销按钮，一种是没有登录会展示登录按钮和注册按钮。  假如博客园使用了双向绑定， 那么在模板里，会有登录和未登录的html代码，然后通过一个指令（比如ngShow）传入控制器变量操作谁隐藏谁显示。  那么控制器的变量就是状态，登录和未登录模板代码就是状态对应的类。  这个模式我想作为前端肯定是会常常使用的。所以此模式就不用代码描述了。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;此系列博客目录：&lt;/strong&gt;&lt;/h2&gt;




</description>
<pubDate>Mon, 16 Oct 2017 04:31:00 +0000</pubDate>
<dc:creator>子慕大诗人</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/1wen/p/7652097.html</dc:identifier>
</item>
<item>
<title>前端静态资源缓存控制策略浅析 - IoveC</title>
<link>http://www.cnblogs.com/iovec/p/7676210.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iovec/p/7676210.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;是什么&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前端静态资源缓存是什么呢？为了描述方便，在这里只讨论浏览器缓存。浏览器缓存就是浏览器在访问网页时将当前访问的网页中所涉及到的静态文件(css, js, png, jpg等等)下载到本地，后续再次访问该网页时浏览器直接用缓存下来的静态文件就行了，而不用再去网络上下载。就好比你在网上看电影，第一次看的时候缓存下来，第二次再看的时候播放的就是本地缓存好的，就不卡了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;为什么&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么要做好前端静态资源缓存控制呢，对公司来讲可以&lt;span&gt;节约带宽，减轻服务器压力&lt;/span&gt;；对用户来讲可以&lt;span&gt;提升用户体验，加快网页的访问速度&lt;/span&gt;。也就是说公司这边省钱，用户这边省流量又不卡。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;怎么做&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在已经知道什么是前端静态资源缓存了，也知道很有必要做好缓存控制，那如何做好缓存控制呢？也就是在渲染网页(html)的时候引用的静态文件(css, js, png, jpg等等)是用本地缓存下来的呢，还是用网上服务器那边的呢？有人说用本地缓存下来的，这样加载的最快，但如果服务器那边对这个文件的内容做修改了怎么办(比如说这张图片底色从白色的变成黄色)，可以发现，用本地缓存的虽然能保证加载最快，但可能并不是服务器最新版本的资源；有人说那就用服务器那边的，这样肯定是最新的，但万一服务器那边这个文件根本没做改动，那下载下来的文件就和本地缓存的文件一模一样，那这一次下载岂不是白白浪费了下载时间和流量，也就是说，每次都请求服务器那边的虽然能保证资源最新，但可能不是最快。这个时候就得想个法子，实现&lt;span&gt;文件没变动的时候就用本地缓存的，文件发生变动了就用服务器那边最新的&lt;/span&gt;，这样就完美了。&lt;/p&gt;
&lt;p&gt;关于缓存的问题早在http协议制定之初就被想到了，属于协议层面的东西，所以大家平时编写具体的页面肯定是接触不到了。浏览器其实提供了两种控制策略，分别是&lt;span&gt;强制缓存&lt;span&gt;和&lt;/span&gt;协商缓存&lt;/span&gt;。顾名思义，强制缓存就是强制使用浏览器缓存下来的资源，协商缓存就是浏览器和服务器需要协商一下才能确定是用浏览器缓存的还是用服务器的。&lt;/p&gt;
&lt;p&gt;强制缓存是这样实施的：浏览器在第一次请求资源的时候服务器会在返回结果上附带一句话，告诉浏览器说明天晚上24:00之前这个文件就用你缓存的就好了，不要TMD再来烦LZ。浏览器看到这句话心里一阵暗爽（我还TMD懒得去请求你呢）。其实就是服务器命令浏览器在指定的一段时间内用自己缓存的文件就行，不需要再次发出请求。具体的实现就是在该次请求的返回头部(Response Headers)加上一个字段标识这段不需要请求的时间有多长，这个字段在http1.0是Expires，在http1.1是Cache-Control，俩字段同时存在的话1.1优先级肯定大于1.0啦。&lt;/p&gt;
&lt;p&gt;协商缓存则是这样实施的：浏览器在第一次请求资源的时候服务器在返回结果上会附带一句话，告诉浏览器说下次使用这个资源文件之前得先问问我能不能用本地缓存的。几分钟后用户再次访问这个页面，又需要用到这个资源文件了，这次浏览器乖乖地先给服务器发了个请求问现在能不能用我自己的缓存啊，服务器会先查看这个资源文件有没有做过修改，如果没有修改过，就会告诉浏览器说，这个文件没有修改，用你自己缓存的吧。否则就会告诉浏览器说，这个文件修改了，我把最新的发给你，服务器就会返回最新的文件给浏览器，顺带再叮嘱浏览器一句说下次还得先问我哟。具体的实现就是在该次请求的返回头部(Response Headers)加上一个字段标识这个文件的版本，这个字段在http1.0是Last-Modified，在http1.1是Etag，俩字段同时存在的话1.1优先级肯定大于1.0啦。如果强制缓存和协商缓存的字段同时存在，强制缓存优先。&lt;/p&gt;
&lt;p&gt;强制缓存的缺点就是可能在强制的这段时间里服务器文件更新了，那浏览器就读不到最新的资源了；协商缓存也有缺点，就是每次都要发个请求去问服务器资源是否更新，可能造成不必要的时间和流量浪费；那怎么办呢？一个好法子就是添加文件指纹并且进行文件名关联（附两张百度首页的截图），&lt;/p&gt;
&lt;p&gt;&lt;span&gt;文件指纹关联到文件名之后的文件(百度首页)&lt;/span&gt;&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/882926/201710/882926-20171016114922193-425018919.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在html中引用添加了文件指纹的文件&lt;/span&gt;&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/882926/201710/882926-20171016114938631-1769074486.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;一般访问网页的入口文件都是html(后端模板文件也可视为html)，这个策略是对html永远不进行缓存，始终使用服务端的最新版，浏览器在渲染该html时会去加载里面引用到的资源文件，然后将每个资源文件的都设置为强制缓存，并且设置成超长过期时间，那文件发生修改浏览器如何获取最新版本的文件呢？很简单，比如说一张图片发生了修改，那么这张图片的文件指纹就会改变，随之涉及所有资源文件都会发生级联改变，引用了这张图片的样式表css文件也会改变(因为这张图片名字变了)，而引用了该样式表的入口文件html随之也会改变(因为样式表名字变了)，而用户再次访问该入口html文件时，自然就会去加载这些改变了名字的&quot;新文件&quot;。这样就完美了，实现文件没变动的时候就用本地缓存的，文件发生变动了就用服务器那边最新的，始终保持最新最快。&lt;/p&gt;
</description>
<pubDate>Mon, 16 Oct 2017 03:59:00 +0000</pubDate>
<dc:creator>IoveC</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iovec/p/7676210.html</dc:identifier>
</item>
<item>
<title>文件描述符 流 流缓冲的一些概念与问题 - 李秋豪</title>
<link>http://www.cnblogs.com/liqiuhao/p/7676125.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liqiuhao/p/7676125.html</guid>
<description>&lt;p&gt;一直以来对于Linux/C中的流和流缓冲的概念一直不太理解，在实际使用过程中也碰到几个问题，翻译了几篇文章后大致弄明白了，写一篇博文总结一下。&lt;/p&gt;
&lt;h2 id=&quot;之前碰到的两个问题&quot;&gt;之前碰到的两个问题&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;在学《C语言程序设计：现代方法》第二版22.2.7&lt;em&gt;文件缓冲&lt;/em&gt;的时候，里面讲到了&lt;code&gt;setvbuf&lt;/code&gt;这个函数，并说该函数的第三个参数指明了期望的缓冲策略，该参数是三个宏之一：_IOFBF（当缓冲区为空时，从流读入数据；&lt;strong&gt;当缓冲区满时，向流写入数据&lt;/strong&gt;）、 _IOLBF、 _IONBF.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我在ubuntu 16.04 + gcc 5.4 环境下测试满缓冲：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  #include &amp;lt;stdio.h&amp;gt;
  #include &amp;lt;stdlib.h&amp;gt;
  #define SIZE_OF_BUFFER 100

  int main(int argc, char const *argv[])
  {
        char buffer[SIZE_OF_BUFFER];
    if(setvbuf(stdout, buffer, _IOFBF, sizeof(buffer)))
        exit(-1);
    fflush(stdout);
    printf(&quot;hello&quot;);
    getchar();
    return 0;
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行输出如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell frank@under:~/tmp$ gcc test2.c &amp;amp;&amp;amp; ./a.out hello&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;和预想的不符合，因为这时缓冲区是我手动创建的，大小为100字节，模式为满缓冲，这时显然没有满，然而还是立即输出了。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;上学期和一航有一次做反弹shell的实验，攻击者获得受害者的shell后，执行类似于python这样有提示符输出的命令会没有提示符输出，必须加上&lt;code&gt;-i&lt;/code&gt;参数（交互模式）才能得到立即输出的提示符和结果。另外，即使在受害者主机上写一个有printf &quot;hello world&quot;的C程序，攻击者执行以后也得不到输出，但是如果在输出语句后加一个fflush，攻击者就能够立即看到输出了。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;c语言中流的概念&quot;&gt;C语言中流的概念&lt;/h2&gt;
&lt;p&gt;一句话，流(steam)表示&lt;strong&gt;任意输入源或任意输出的目的地&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;很多程序是通过&lt;strong&gt;一个或多个流&lt;/strong&gt;进行读入和输出的。这些流可能存储在不同的介质（如硬盘，CD，DVD，闪存等等），也可能是不存储文件的设备（打印机，网络套接字）。头文件&amp;lt;stdio.h&amp;gt;中定义了处理流的函数。（注意不仅仅只有表示文件的流）&lt;/p&gt;
&lt;p&gt;C程序中对流的操作是通过&lt;code&gt;FILE *&lt;/code&gt;实现的。所以&lt;strong&gt;说这种数据类型表示的就是一个流&lt;/strong&gt;。一个流对象保存了和文件（也可能不是文件，但是Unix下几乎“一切”都是文件）连接的情况以及缓冲的状态，还有文件位置定位符的状态。每一个流还有一个文件末位指示器和错误指示器，可以通过ferror和feof来监测。（参见&lt;a href=&quot;https://www.gnu.org/software/libc/manual/html_node/EOF-and-Errors.html#EOF-and-Errors&quot;&gt;EOF and Errors&lt;/a&gt;.）&lt;/p&gt;
&lt;p&gt;注意&lt;strong&gt;不要试图创建自己的&lt;code&gt;FILE *&lt;/code&gt;,&lt;/strong&gt; 让函数库去实现。&lt;/p&gt;
&lt;h2 id=&quot;流与文件描述符区别与联系&quot;&gt;流与文件描述符区别与联系&lt;/h2&gt;
&lt;p&gt;一句话，&lt;strong&gt;流是文件描述符的抽象&lt;/strong&gt;，一般使用&lt;strong&gt;文件描述符是系统层次的调用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当向一个文件读入或者输出时，既可以选择流，也可以选择使用文件描述符。文件描述符是&lt;code&gt;int&lt;/code&gt;类型的，而流是用&lt;code&gt;FILE *&lt;/code&gt;来表示的。&lt;/p&gt;
&lt;p&gt;文件描述符提供了一个原始、低层次的输入输出接口。文件描述符和流都可以表示一个连接，可以是和设备的（例如终端），或者管道，或者一个和另一个进程的套接字，或者就是一个正常的文件（normal file)。但是，如果你想要对特殊设备进行特定的操作，你必须使用文件描述符。另外，如果你的程序需要以特殊模式进行输入输出（例如nonblocking, polled input, 参见&lt;a href=&quot;https://www.gnu.org/software/libc/manual/html_node/File-Status-Flags.html#File-Status-Flags&quot;&gt;File Status Flags&lt;/a&gt;)，也必须使用文件描述符。&lt;/p&gt;
&lt;p&gt;而流提供了一个基于原始的文件描述符的高层次接口。流接口对于所有类型的文件的操作大多都是类似的，唯一的区别就是缓冲的策略（参见下面的&lt;strong&gt;流缓冲&lt;/strong&gt;)。&lt;/p&gt;
&lt;p&gt;使用流的主要优势是操作流的函数比文件描述符多得多，而且更加强大方便。文件描述符仅仅提供了一个单一的函数用来传输字符块，但是流接口提供了很多格式化的输入输出（例如printf和scanf）和一些字符函数以及列读入输出函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因为流是基于文件描述符的，所以实际上你可以“拆解”一个流得到对应的文件描述符然后进行低层次的操作。相反地，你也可以先用文件描述符和一个文件建立连接，然后建立一个链接这个文件描述符的流对象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常情况下，你都应该使用流来进行输入输出，这样不仅方便强大，而且可以&lt;strong&gt;保证程序的移植性&lt;/strong&gt;：你可以在任何一个遵守ISO C标准的机器上使用流，但是在一个非GNU机器上你可能无法使用文件描述符。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;&lt;em&gt;建议在看“流缓冲”概念之前看看我翻译的三篇文章：&lt;a href=&quot;http://www.cnblogs.com/liqiuhao/p/7667734.html&quot;&gt;C语言 流缓冲&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/liqiuhao/p/7669007.html&quot;&gt;标准输入输出 stdio 流缓冲&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/liqiuhao/p/7669074.html&quot;&gt;输出流缓冲的意义 何时缓冲&lt;/a&gt;。下面这个只是这三篇文章的一个总结。&lt;/em&gt;&lt;/u&gt;&lt;/p&gt;
&lt;h2 id=&quot;流缓冲&quot;&gt;流缓冲&lt;/h2&gt;
&lt;p&gt;在系统底层调用这个层次，数据是用&lt;strong&gt;write+文件描述符&lt;/strong&gt;写入的，这种方法将数据写入到文件描述符对应的一个字节缓冲中。大多数语言有着非常快的函数调用，在C/C++这种语言中调用一个函数可能只需要几个cpu周期，时间开销几乎可以忽略不计（只有在近端的情况下才会使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Inline_function&quot;&gt;inline&lt;/a&gt;.）。然而，一个系统调用时间开销是非常可观的。在Linux上的一个系统调用可能会花费几千个cpu周期并掺杂着&lt;a href=&quot;https://en.wikipedia.org/wiki/Context_switch&quot;&gt;上下文转化&lt;/a&gt;.所以系统调用比用户空间里的函数调用花的时间多得多。&lt;/p&gt;
&lt;p&gt;流缓冲存在的主要目的就是为用户空间函数抵消调用系统函数的开销。当函数做很多写入操作时这非常重要——否则系统调用的时间会占程序运行时间的主要部分。先输出到流缓冲中，然后以块为单位调用系统函数输入到对应目的地，这样花费的时间就会减少。&lt;/p&gt;
&lt;p&gt;另外还有一个原因，有的时候设备可能处于堵塞状态（想象打印机的打印速度），这个时候先把要打印的字符放在缓冲区，继续下面的任务，会节省很多时间。（突然想到了中午在食堂坐电梯。。人多的时候很类似。。先进食堂再说）&lt;/p&gt;
&lt;p&gt;流缓冲有三个策略：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;无缓冲 &lt;em&gt;unbuffered&lt;/em&gt; ：从一个无缓冲的流中读写会马上产生效果&lt;/li&gt;
&lt;li&gt;行缓冲 &lt;em&gt;line buffered&lt;/em&gt;：当遇到一个换行符的时候字符会以块的形式读写。&lt;/li&gt;
&lt;li&gt;满缓冲 &lt;em&gt;fully buffered&lt;/em&gt;：字符会以&lt;strong&gt;任意大小的块&lt;/strong&gt;写入读出。（真的是直译。。感觉和网上一些说满的时候才读写的说法不一样，说明可能是不堵塞的时候就读写缓冲区，&lt;strong&gt;最多等到缓冲区满&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;新开的流一般是满缓冲的，只有一个例外：当流是一个可交互设备（例如终端）的时候，流将变为行缓冲。如果想了解关于如何选择缓冲策略，参考 &lt;a href=&quot;https://www.gnu.org/software/libc/manual/html_node/Controlling-Buffering.html#Controlling-Buffering&quot;&gt;Controlling Buffering&lt;/a&gt; 。通常情况下，默认会选择出最方便的缓冲策略。GNU libc (glibc) 使用以下的缓冲规则:&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;stdin&lt;/td&gt;
&lt;td&gt;input&lt;/td&gt;
&lt;td&gt;line-buffered&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;stdout (&lt;strong&gt;TTY&lt;/strong&gt;)&lt;/td&gt;
&lt;td&gt;output&lt;/td&gt;
&lt;td&gt;line-buffered&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;stdout (&lt;strong&gt;not a TTY)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;output&lt;/td&gt;
&lt;td&gt;fully-buffered&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;stderr&lt;/td&gt;
&lt;td&gt;output&lt;/td&gt;
&lt;td&gt;unbuffered&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;注意：缓冲策略是&lt;strong&gt;写入流/文件的充分条件&lt;/strong&gt;，不是必要的。缓冲区存在的意义就是在使用“Stream-level I/O”时从缓冲区进行异步块写入/读出，这样可以在设备堵塞或者写操作很多的时候加快效率。如果一次只写入&lt;strong&gt;少量数据&lt;/strong&gt;，内核一看没有堵塞，“干脆”就把缓冲区的内容写入了，反正放着也是放着。&lt;/p&gt;
&lt;h2 id=&quot;回答之前两个问题&quot;&gt;回答之前两个问题&lt;/h2&gt;
&lt;ul readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;由于我们&lt;strong&gt;只有一个写操作&lt;/strong&gt;，而且写操作&lt;strong&gt;仅仅只有几个字符&lt;/strong&gt;，所以系统一看就缓冲区里仅有的几个字符作为一个块调用系统函数输出到了屏幕。如果我们大量频繁的输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; #include &amp;lt;stdio.h&amp;gt;
 #include &amp;lt;stdlib.h&amp;gt;
 #define SIZE_OF_BUFFER 100

 int main(int argc, char const *argv[])
 {
 char buffer[SIZE_OF_BUFFER];
 if(setvbuf(stdout, buffer, _IOFBF, sizeof(buffer)))
     exit(-1);
 fflush(stdout);
 for (char i = 0; i &amp;lt; 10; ++i)
 {
     printf(&quot;hello&quot;);
 }
 getchar();
 fflush(NULL);
 return 0;
 }&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;编译运行输出：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell frank@under:~/tmp$ ./a.out hello hellohellohellohellohellohellohellohellohellofrank@under:~/tmp$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到，仅仅立即输出了第一个hello，后面连续写入到stdout流的hello&lt;strong&gt;都到了缓冲区里没有立即输出&lt;/strong&gt;，直到后面使用&lt;code&gt;fflush&lt;/code&gt;清除所有流的缓冲区，剩下的9个hello才输出。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当我们通过一个反弹shell控制远程主机时，&lt;strong&gt;远程主机的程序的输出仅仅是一个套接字，也就是说远程运行的程序不知道它“应该”是输出到一个可以交互的设备&lt;/strong&gt;，所以为了提高效率，缓冲策略将会是满缓冲——不会立即输出。（估计python很多高层调用也用到了GNU libc库），给python命令加上&lt;code&gt;-i&lt;/code&gt;参数，就是告诉它我想以交互模式使用它，于是缓冲策略就会改变为行缓冲，很多提示符句就会立即输出了。同样的，我们写的C程序也不知道输出设备是一个可交互的，于是缓冲策略也是满缓冲（默认大小是4096 bytes），我们加上&lt;code&gt;fflush&lt;/code&gt;就强制输出了缓冲的数据，于是就能够在攻击主机上看到输出了。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;参考&quot;&gt;参考&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/libc/manual/html_node/Streams.html#Streams&quot;&gt;Streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/libc/manual/html_node/Streams-and-File-Descriptors.html&quot;&gt;Streams and File Descriptors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/libc/manual/html_node/Stream-Buffering.html&quot;&gt;Stream Buffering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pixelbeat.org/programming/stdio_buffering/&quot;&gt;buffering in standard streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://eklitzke.org/stdout-buffering&quot;&gt;Stdout Buffering&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Mon, 16 Oct 2017 03:19:00 +0000</pubDate>
<dc:creator>李秋豪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liqiuhao/p/7676125.html</dc:identifier>
</item>
<item>
<title>从源码看 angular/material2 中 dialog模块 的实现 - Yitim</title>
<link>http://www.cnblogs.com/yitim/p/7676050.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yitim/p/7676050.html</guid>
<description>&lt;p&gt;本文将探讨material2中popup弹窗即其Dialog模块的实现。&lt;/p&gt;
&lt;h2 id=&quot;使用方法&quot;&gt;使用方法&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;引入弹窗模块&lt;/li&gt;
&lt;li&gt;自己准备作为模板的弹窗内容组件&lt;/li&gt;
&lt;li&gt;在需要使用的组件内注入 &lt;code&gt;MatDialog&lt;/code&gt; 服务&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;open&lt;/code&gt; 方法创建弹窗，并支持传入配置、数据，以及对关闭事件的订阅&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;深入源码&quot;&gt;深入源码&lt;/h2&gt;
&lt;p&gt;进入material2的源码，先从 &lt;code&gt;MatDialog&lt;/code&gt; 的代码入手，找到这个 &lt;code&gt;open&lt;/code&gt; 方法:&lt;/p&gt;
&lt;pre class=&quot;typescript&quot;&gt;
&lt;code&gt;open&amp;lt;T&amp;gt;(
    componentOrTemplateRef: ComponentType&amp;lt;T&amp;gt; | TemplateRef&amp;lt;T&amp;gt;,
    config?: MatDialogConfig
): MatDialogRef&amp;lt;T&amp;gt; {
    // 防止重复打开
    const inProgressDialog = this.openDialogs.find(dialog =&amp;gt; dialog._isAnimating());
    if (inProgressDialog) {
      return inProgressDialog;
    }
    // 组合配置
    config = _applyConfigDefaults(config);
    // 防止id冲突
    if (config.id &amp;amp;&amp;amp; this.getDialogById(config.id)) {
      throw Error(`Dialog with id &quot;${config.id}&quot; exists already. The dialog id must be unique.`);
    }
    // 第一步：创建弹出层
    const overlayRef = this._createOverlay(config);
    // 第二步：在弹出层上添加弹窗容器
    const dialogContainer = this._attachDialogContainer(overlayRef, config);
    // 第三步：把传入的组件添加到创建的弹出层中创建的弹窗容器中
    const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);
    // 首次弹窗要添加键盘监听
    if (!this.openDialogs.length) {
      document.addEventListener('keydown', this._boundKeydown);
    }
    // 添加进队列
    this.openDialogs.push(dialogRef);
    // 默认添加一个关闭的订阅 关闭时要移除此弹窗
    // 当是最后一个弹窗时触发全部关闭的订阅并移除键盘监听
    dialogRef.afterClosed().subscribe(() =&amp;gt; this._removeOpenDialog(dialogRef));
    // 触发打开的订阅
    this.afterOpen.next(dialogRef);
    return dialogRef;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;总体看来弹窗的发起分为三部曲:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;创建一个弹出层(其实是一个原生DOM，起宿主和入口的作用)&lt;/li&gt;
&lt;li&gt;在弹出层上创建弹窗容器组件(负责提供遮罩和弹出动画)&lt;/li&gt;
&lt;li&gt;在弹窗容器中创建传入的弹窗内容组件(负责提供内容)&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;弹出层的创建&quot;&gt;弹出层的创建&lt;/h3&gt;
&lt;p&gt;对于其他组件，仅仅封装模板以及内部实现就足够了，最多还要增加与父组件的数据、事件交互，所有这些事情，单使用angular Component就足够实现了，在何处使用就将组件选择器放到哪里去完事。&lt;/p&gt;
&lt;p&gt;但对于弹窗组件，事先并不知道会在何处使用，因此不适合实现为一个组件后通过选择器安放到页面的某处，而应该将其作为弹窗插座放置到全局，并通过服务来调用。&lt;/p&gt;
&lt;p&gt;material2也要面临这个问题，这个弹窗插座是避免不了的，那就在内部实现它，在实际调用弹窗方法时动态创建这个插座就可以了。要实现效果是：对用户来说只是在单纯调用一个 &lt;code&gt;open&lt;/code&gt; 方法，由material2内部来创建一个弹出层，并在这个弹出层上创建弹窗。&lt;/p&gt;
&lt;p&gt;找到弹出层的创建代码如下:&lt;/p&gt;
&lt;pre class=&quot;typescript&quot;&gt;
&lt;code&gt;create(config: OverlayConfig = defaultConfig): OverlayRef {
    const pane = this._createPaneElement(); // 弹出层DOM 将被添加到宿主DOM中
    const portalHost = this._createPortalHost(pane); // 宿主DOM 将被添加到&amp;lt;body&amp;gt;末端
    return new OverlayRef(portalHost, pane, config, this._ngZone); // 弹出层的引用
}
private _createPaneElement(): HTMLElement {
    let pane = document.createElement('div');
    pane.id = `cdk-overlay-${nextUniqueId++}`;
    pane.classList.add('cdk-overlay-pane');
    this._overlayContainer.getContainerElement().appendChild(pane); // 将创建好的带id的弹出层添加到宿主
    return pane;
}
private _createPortalHost(pane: HTMLElement): DomPortalHost {
    // 创建宿主
    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中最关键的方法其实是 &lt;code&gt;getContainerElement()&lt;/code&gt; , material2把最&quot;丑&quot;最不angular的操作放在了这里面，看看其实现:&lt;/p&gt;
&lt;pre class=&quot;typescript&quot;&gt;
&lt;code&gt;getContainerElement(): HTMLElement {
    if (!this._containerElement) { this._createContainer(); }
    return this._containerElement;
}
protected _createContainer(): void {
    let container = document.createElement('div');
    container.classList.add('cdk-overlay-container');

    document.body.appendChild(container); // 在body下创建顶层的宿主 姑且称之为弹出层容器(OverlayContainer)
    this._containerElement = container;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;弹窗容器的创建&quot;&gt;弹窗容器的创建&lt;/h3&gt;
&lt;p&gt;跳过其他细节，现在得到了一个弹出层引用 &lt;code&gt;overlayRef&lt;/code&gt;。material2接下来给它添加了一个弹窗容器组件，这个组件是material2自己写的一个angular组件，打开弹窗时的遮罩部分以及弹窗的外轮廓其实就是这个组件，对于为何要再套这么一层容器，有其一些考虑。&lt;/p&gt;
&lt;ol readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;动画效果的保护&lt;br/&gt;这样动态创建的组件有一个缺点，那就是其销毁是无法触发angular动画的，因为一瞬间就销毁掉了，所以material2为了实现动画效果，多加了这么一个容器来实现动画，在关闭弹窗时，实际上是在播放弹窗的关闭动画，然后监听容器的动画状态事件，在完成关闭动画后才执行销毁弹窗的一系列代码，这个过程与其为难用户来实现，不如自己给封装了。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;注入服务的保护&lt;br/&gt;目前版本的angular关于在动态创建的组件中注入服务还存在一个注意点，就是直接创建出的组件无法使用隐式的依赖注入，也就是说，直接在组件的 &lt;code&gt;constructor&lt;/code&gt; 中声明服务对象的实例是不起作用的，而必须先注入 &lt;code&gt;Injector&lt;/code&gt; ，再使用这个 &lt;code&gt;Injector&lt;/code&gt; 把注入的服务都 &lt;code&gt;get&lt;/code&gt; 出来:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;typescript&quot;&gt;
&lt;code&gt;private 服务;
constructor(
    private injector: Injector
    // private 服务: 服务类 // 这样是无效的
) {
    this.服务 = injector.get('服务类名');
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;解决的办法是不直接创建出组件来注入服务，而是先创建一个指令，再在这个指令中创建组件并注入服务使用，这时隐式的依赖注入就又有效了，material2就是这么干的:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;ng-template&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; cdkPortalHost&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中的 &lt;code&gt;cdkPortalHost&lt;/code&gt; 指令就是用来后续创建组件的。&lt;br/&gt;所以创建这么一个弹窗容器组件，用户就感觉不到这一点，很顺利的像普通组件一样注入服务并使用。&lt;/p&gt;
&lt;p&gt;创建弹窗容器的核心方法在 &lt;code&gt;dom-portal-host.ts&lt;/code&gt; 中:&lt;/p&gt;
&lt;pre class=&quot;typescript&quot;&gt;
&lt;code&gt;attachComponentPortal&amp;lt;T&amp;gt;(portal: ComponentPortal&amp;lt;T&amp;gt;): ComponentRef&amp;lt;T&amp;gt; {
    // 创建工厂
    let componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);
    let componentRef: ComponentRef&amp;lt;T&amp;gt;;
    if (portal.viewContainerRef) {
        componentRef = portal.viewContainerRef.createComponent(
            componentFactory,
            portal.viewContainerRef.length,
            portal.injector || portal.viewContainerRef.parentInjector);

        this.setDisposeFn(() =&amp;gt; componentRef.destroy());
        // 暂不知道为何有指定宿主后面还要把它添加到宿主元素DOM中
    } else {
        componentRef = componentFactory.create(portal.injector || this._defaultInjector);
        this._appRef.attachView(componentRef.hostView);
        this.setDisposeFn(() =&amp;gt; {
        this._appRef.detachView(componentRef.hostView);
            componentRef.destroy();
        });
        // 到这一步创建出了经angular处理的DOM
    }
    // 将创建的弹窗容器组件直接append到弹出层DOM中
    this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));
    // 返回组件的引用
    return componentRef;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所做的事情无非就是动态创建组件的四步曲:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;创建工厂&lt;/li&gt;
&lt;li&gt;使用工厂创建组件&lt;/li&gt;
&lt;li&gt;将组件整合进AppRef(同时设置一个移除的方法)&lt;/li&gt;
&lt;li&gt;在DOM中插入这个组件的原始节点&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;弹窗内容&quot;&gt;弹窗内容&lt;/h3&gt;
&lt;p&gt;从上文可以知道，得到的弹窗容器组件中存在一个宿主指令，实际上是在这个宿主指令中创建弹窗内容组件。进入宿主指令的代码可以找到 &lt;code&gt;attachComponentPortal&lt;/code&gt; 方法:&lt;/p&gt;
&lt;pre class=&quot;typescript&quot;&gt;
&lt;code&gt;attachComponentPortal&amp;lt;T&amp;gt;(portal: ComponentPortal&amp;lt;T&amp;gt;): ComponentRef&amp;lt;T&amp;gt; {
    portal.setAttachedHost(this);

    // If the portal specifies an origin, use that as the logical location of the component
    // in the application tree. Otherwise use the location of this PortalHost.
    // 如果入口已经有宿主则使用那个宿主
    // 否则使用 PortalHost 作为宿主
    let viewContainerRef = portal.viewContainerRef != null ?
        portal.viewContainerRef :
        this._viewContainerRef;
    // 在宿主上动态创建组件的代码
    let componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);
    let ref = viewContainerRef.createComponent( // 使用 ViewContainerRef 动态创建组件到当前视图容器(也就是弹窗容器指令)
        componentFactory, viewContainerRef.length,
        portal.injector || viewContainerRef.parentInjector
    );

    super.setDisposeFn(() =&amp;gt; ref.destroy());
    this._portal = portal;

    return ref;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后这一步就非常明了了，正是官方文档中使用的动态创建组件的方式(&lt;code&gt;ViewContainerRef&lt;/code&gt;)，至此弹窗已经成功弹出到界面中了。&lt;/p&gt;
&lt;h3 id=&quot;弹窗的关闭&quot;&gt;弹窗的关闭&lt;/h3&gt;
&lt;p&gt;还有最后一个要注意的点就是弹窗如何关闭，从上文可以知道应该要先执行关闭动画，然后才能销毁弹窗，material2的弹窗容器组件添加了一堆节点:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;host: {
    'class': 'mat-dialog-container',
    'tabindex': '-1',
    '[attr.role]': '_config?.role',
    '[attr.aria-labelledby]': '_ariaLabelledBy',
    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',
    '[@slideDialog]': '_state',
    '(@slideDialog.start)': '_onAnimationStart($event)',
    '(@slideDialog.done)': '_onAnimationDone($event)',
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中需要关注的就是material2在容器组件中添加了一个动画叫 &lt;code&gt;slideDialog&lt;/code&gt; ，并为其设置了动画事件，现在关注动画完成事件的回调:&lt;/p&gt;
&lt;pre class=&quot;typescript&quot;&gt;
&lt;code&gt;_onAnimationDone(event: AnimationEvent) {
    if (event.toState === 'enter') {
        this._trapFocus();
    } else if (event.toState === 'exit') {
        this._restoreFocus();
    }
    this._animationStateChanged.emit(event);
    this._isAnimating = false;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里发射了这个事件，并在 &lt;code&gt;MatDialogRef&lt;/code&gt; 中订阅:&lt;/p&gt;
&lt;pre class=&quot;typescript&quot;&gt;
&lt;code&gt;constructor(
    private _overlayRef: OverlayRef,
    private _containerInstance: MatDialogContainer,
    public readonly id: string = 'mat-dialog-' + (uniqueId++)
) {
    // 添加弹窗开启的订阅 这里的 RxChain 是material2自己对rxjs的工具类封装
    RxChain.from(_containerInstance._animationStateChanged)
    .call(filter, event =&amp;gt; event.phaseName === 'done' &amp;amp;&amp;amp; event.toState === 'enter')
    .call(first)
    .subscribe(() =&amp;gt; {
        this._afterOpen.next();
        this._afterOpen.complete();
    });
    // 添加弹窗关闭的订阅，并且需要在收到回调后销毁弹窗
    RxChain.from(_containerInstance._animationStateChanged)
    .call(filter, event =&amp;gt; event.phaseName === 'done' &amp;amp;&amp;amp; event.toState === 'exit')
    .call(first)
    .subscribe(() =&amp;gt; {
        this._overlayRef.dispose();
        this._afterClosed.next(this._result);
        this._afterClosed.complete();
        this.componentInstance = null!;
    });
}

/**
* 这个也就是实际使用时的关闭方法
* 所做的事情是添加beforeClose的订阅并执行 _startExitAnimation 以开始关闭动画
* 底层做的事是 改变了弹窗容器中 slideDialog 的状态值
*/
close(dialogResult?: any): void {
    this._result = dialogResult; // 把传入的结果赋值给私有变量 _result 以便在上面的 this._afterClosed.next(this._result) 中使用

    // Transition the backdrop in parallel to the dialog.
    RxChain.from(this._containerInstance._animationStateChanged)
    .call(filter, event =&amp;gt; event.phaseName === 'start')
    .call(first)
    .subscribe(() =&amp;gt; {
        this._beforeClose.next(dialogResult);
        this._beforeClose.complete();
        this._overlayRef.detachBackdrop();
    });

    this._containerInstance._startExitAnimation();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;以上就是整个material2 dialog能力走通的过程，可见即使是 angular 这么完善又庞大的框架，想要完美解耦封装弹窗能力也不能完全避免原生DOM操作。&lt;/p&gt;
&lt;p&gt;除此之外给我的感觉还有——无论是angular还是material2，它们对TypeScript的使用都让我自叹不如，包括但不限于抽象类、泛型等装逼技巧，把它们的源码慢慢看下来，着实能学到不少东西。&lt;/p&gt;
</description>
<pubDate>Mon, 16 Oct 2017 03:07:00 +0000</pubDate>
<dc:creator>Yitim</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yitim/p/7676050.html</dc:identifier>
</item>
<item>
<title>使用邮件监控Mxnet训练 - fiercex</title>
<link>http://www.cnblogs.com/fiercex/p/7656706.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fiercex/p/7656706.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;1. 前言&lt;/h2&gt;
&lt;p&gt;受到小伙伴的启发，就自己动手写了一个使用邮件监控Mxnet训练的例子。整体不算复杂。&lt;/p&gt;
&lt;h2 id=&quot;打包训练代码&quot;&gt;2. 打包训练代码&lt;/h2&gt;
&lt;p&gt;需要进行监控训练，所以需要将训练的代码打包进一个函数内，通过传参的方式进行训练。还是使用FashionMNIST数据集&lt;br/&gt;这样训练的时候就调用函数传参就行了&lt;/p&gt;
&lt;h3 id=&quot;训练主函数&quot;&gt;训练主函数&lt;/h3&gt;
&lt;p&gt;训练需要的一些参数都采用传参的形式&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;48&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; NN_Train(net, train_data, test_data, epochs, batch_size, learning_rate, weight_decay):
    msg &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;
    train_loss &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
    train_acc &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
    dataset_train &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; gluon.data.DataLoader(train_data, batch_size, shuffle&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)
    test_loss &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
    test_acc &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
    dataset_test &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; gluon.data.DataLoader(test_data, batch_size, shuffle&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)

    trainer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; gluon.Trainer(net.collect_params(), &lt;span class=&quot;st&quot;&gt;'adam'&lt;/span&gt;,
                            {&lt;span class=&quot;st&quot;&gt;'learning_rate'&lt;/span&gt;: learning_rate,
                             &lt;span class=&quot;co&quot;&gt;'wd'&lt;/span&gt;: weight_decay})
    softmax_cross_entropy &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; gluon.loss.SoftmaxCrossEntropyLoss()

    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; epoch &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(epochs):
        _loss &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.
        _acc &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.
        t_acc &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; data, label &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; dataset_train:
            data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nd.transpose(data, (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))
            data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; data.as_in_context(ctx)
            label &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; label.as_in_context(ctx)
            &lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; autograd.record():
                output &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; net(data)
                loss &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; softmax_cross_entropy(output, label)
            loss.backward()
            trainer.step(batch_size)

            _loss &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; nd.mean(loss).asscalar()
            _acc &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; accuracy(output, label)
        __acc &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; _acc &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(dataset_train)
        __loss &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; _loss &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(dataset_train)
        train_loss.append(__loss)
        train_acc.append(__acc)

        t_acc, t_loss &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; evaluate_accuracy(dataset_test, net)
        test_loss.append(t_loss)
        test_acc.append(t_acc)

        msg &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;&quot;Epoch &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;. Train Loss: &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;, Test Loss: &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;, Train Acc &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;, Test Acc &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; (
            epoch, __loss, t_loss, __acc, t_acc))

    fig &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; plt.figure()
    ax1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; fig.add_subplot(&lt;span class=&quot;dv&quot;&gt;111&lt;/span&gt;)
    ax1.plot(train_loss, &lt;span class=&quot;st&quot;&gt;'r'&lt;/span&gt;)
    ax1.plot(test_loss, &lt;span class=&quot;st&quot;&gt;'g'&lt;/span&gt;)
    ax1.legend([&lt;span class=&quot;st&quot;&gt;'Train_Loss'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Test_Loss'&lt;/span&gt;], loc&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
    ax1.set_ylabel(&lt;span class=&quot;st&quot;&gt;'Loss'&lt;/span&gt;)

    ax2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ax1.twinx()
    ax2.plot(train_acc, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;)
    ax2.plot(test_acc, &lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;)
    ax2.legend([&lt;span class=&quot;st&quot;&gt;'Train_Acc'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Test_Acc'&lt;/span&gt;], loc&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
    ax2.set_ylabel(&lt;span class=&quot;st&quot;&gt;'Acc'&lt;/span&gt;)

    plt.savefig(&lt;span class=&quot;st&quot;&gt;'NN.png'&lt;/span&gt;, dpi&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;600&lt;/span&gt;)
    net.collect_params().save(&lt;span class=&quot;st&quot;&gt;'NN.params'&lt;/span&gt;)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; msg&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;打包网络模型&quot;&gt;打包网络模型&lt;/h3&gt;
&lt;p&gt;同样，需要把网络也打包进函数内&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; GetNN():
    net &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nn.HybridSequential()
    &lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; net.name_scope():
        net.add(gluon.nn.Conv2D(channels&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;, kernel_size&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
        net.add(gluon.nn.MaxPool2D(pool_size&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, strides&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))
        net.add(gluon.nn.Conv2D(channels&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;, kernel_size&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
        net.add(gluon.nn.MaxPool2D(pool_size&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, strides&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))
        net.add(gluon.nn.Flatten())
        net.add(gluon.nn.Dense(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;))
    net.initialize(init&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;mx.init.Xavier(), ctx&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ctx)
    net.hybridize()
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; net&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;打包数据读取&quot;&gt;打包数据读取&lt;/h3&gt;
&lt;p&gt;然后把数据读取也搞进函数内&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; GetDate():
    fashion_train &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; gluon.data.vision.FashionMNIST(
        root&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'./'&lt;/span&gt;, train&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;, transform&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;transform)
    fashion_test &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; gluon.data.vision.FashionMNIST(
        root&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'./'&lt;/span&gt;, train&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;, transform&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;transform)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; fashion_train, fashion_test&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;搞定邮件的接收发送&quot;&gt;3. 搞定邮件的接收发送&lt;/h2&gt;
&lt;p&gt;使用邮件监控，就要搞定在Python上使用邮件的问题，还好Python内置了邮件库&lt;br/&gt;这样接收发送邮件也只用调用函数就好了&lt;/p&gt;
&lt;h3 id=&quot;接受邮件&quot;&gt;接受邮件&lt;/h3&gt;
&lt;p&gt;我只接受纯文本的内容，因为HTML内容的太过复杂&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; ReEmail():
    &lt;span class=&quot;cf&quot;&gt;try&lt;/span&gt;:
        pp &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; poplib.POP3(pophost)
        pp.user(useremail)
        pp.pass_(password)
        resp, mails, octets &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pp.&lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;()
        index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(mails)
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; index &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:
            resp, lines, octets &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pp.retr(index)
            msg_content &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; b&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;.join(lines).decode(&lt;span class=&quot;st&quot;&gt;'utf-8'&lt;/span&gt;)
            pp.dele(index)
            pp.quit()
            msg &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Parser().parsestr(msg_content)
            message &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Get_info(msg)
            subject &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; msg.get(&lt;span class=&quot;st&quot;&gt;'Subject'&lt;/span&gt;)
            date &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; msg.get(&lt;span class=&quot;st&quot;&gt;'Date'&lt;/span&gt;)
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; message,subject,date
    &lt;span class=&quot;cf&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;pp&quot;&gt;ConnectionResetError&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; e:
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'ConnectionResetError'&lt;/span&gt;)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;,&lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;,&lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;发送邮件&quot;&gt;发送邮件&lt;/h3&gt;
&lt;p&gt;发送邮件我是用了一个第三方邮件库&lt;code&gt;envelopes&lt;/code&gt;，因为简单方便。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; SentEmail(message,subject,image&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;):
    envelope &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Envelope(
    from_addr&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(useremail, &lt;span class=&quot;st&quot;&gt;u'Train'&lt;/span&gt;),
    to_addr&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(toemail, &lt;span class=&quot;st&quot;&gt;u'FierceX'&lt;/span&gt;),
    subject&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;subject,
    text_body&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;message
    )
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; image:
        envelope.add_attachment(&lt;span class=&quot;st&quot;&gt;'NN.png'&lt;/span&gt;)
    
    envelope.send(smtphost, login&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;useremail,
              password&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;password, tls&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;解析邮件内容&quot;&gt;解析邮件内容&lt;/h3&gt;
&lt;p&gt;然后需要解析邮件内容，这段基本从网上抄来的，因为邮件格式很复杂，没深究&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; Get_info(msg):
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (msg.is_multipart()):
        parts &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; msg.get_payload()
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; n, part &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;enumerate&lt;/span&gt;(parts):
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; Get_info(part)
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; msg.is_multipart():
        content_type &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; msg.get_content_type()
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; content_type&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'text/plain'&lt;/span&gt;:
            content &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; msg.get_payload(decode&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)
            charset &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; guess_charset(msg)
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; charset:
                content &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; content.decode(charset)
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; content&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;使用多线程多进程监控训练&quot;&gt;4. 使用多线程多进程监控训练&lt;/h2&gt;
&lt;p&gt;接下来就是主体了，其实主体也没多少代码，就是循环监控邮箱。并且对相应内容做反馈&lt;/p&gt;
&lt;h3 id=&quot;使用子进程进行训练&quot;&gt;使用子进程进行训练&lt;/h3&gt;
&lt;p&gt;由于Python的多线程的性能局限性，我使用了子进程进行训练，这样不会受到主进程循环监控的影响&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; nn(params):
    train, test &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; NN_Train.GetDate()
    msg &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(params)
    msg &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; NN_Train.NN_Train(
        NN_Train.GetNN(),
        train_data&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;train,
        test_data&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;test,
        epochs&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(params[&lt;span class=&quot;st&quot;&gt;'ep'&lt;/span&gt;]),
        batch_size&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(params[&lt;span class=&quot;st&quot;&gt;'bs'&lt;/span&gt;]),
        learning_rate&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;params[&lt;span class=&quot;st&quot;&gt;'lr'&lt;/span&gt;],
        weight_decay&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;params[&lt;span class=&quot;st&quot;&gt;'wd'&lt;/span&gt;])
    EmailTool.SentEmail(msg, &lt;span class=&quot;st&quot;&gt;'TrainResult'&lt;/span&gt;)

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; run(msg):

    params &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;'ep'&lt;/span&gt;: &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'lr'&lt;/span&gt;: &lt;span class=&quot;fl&quot;&gt;0.002&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'bs'&lt;/span&gt;: &lt;span class=&quot;dv&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'wd'&lt;/span&gt;: &lt;span class=&quot;fl&quot;&gt;0.0&lt;/span&gt;}
    xx &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; msg.split(&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;)
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; xx:
        ks &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; k.split(&lt;span class=&quot;st&quot;&gt;' '&lt;/span&gt;)
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(ks) &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:
            params[ks[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;float&lt;/span&gt;(ks[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;])
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(params)

    p &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Process(target&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;nn, args&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(params,))
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'TrainStrart'&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;global&lt;/span&gt; running
    running &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;
    p.start()
    p.join()
    running &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;使用循环监控邮箱&quot;&gt;使用循环监控邮箱&lt;/h3&gt;
&lt;p&gt;在主进程中，使用循环监控邮箱内容，对相应内容做出反馈。为了防止子进程成为僵尸进程，我是用了一个线程来等待子进程结束&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'__main__'&lt;/span&gt;:
    &lt;span class=&quot;kw&quot;&gt;global&lt;/span&gt; running
    running &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Start'&lt;/span&gt;)
    a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;):
        time.sleep(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(a, running)
        &lt;span class=&quot;cf&quot;&gt;try&lt;/span&gt;:
            msg, sub, date &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; EmailTool.ReEmail()
        &lt;span class=&quot;cf&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;pp&quot;&gt;TimeoutError&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; e:
            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'TimeoutError'&lt;/span&gt;)

        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; sub &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'train'&lt;/span&gt;:
            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'train'&lt;/span&gt;)
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; running &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;:
                t &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; threading.Thread(target&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;run, args&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(msg,))
                t.start()
            &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
                EmailTool.SentEmail(&lt;span class=&quot;st&quot;&gt;'Training is underway'&lt;/span&gt;,
                                    &lt;span class=&quot;co&quot;&gt;'Training is underway'&lt;/span&gt;,
                                    image&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;)
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; sub &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'exit'&lt;/span&gt;:
            &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;
        a &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;效果&quot;&gt;5. 效果&lt;/h2&gt;
&lt;h3 id=&quot;发送训练邮件&quot;&gt;发送训练邮件&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/966237/201710/966237-20171012162526809-835419797.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;训练结束返回结果&quot;&gt;训练结束返回结果&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/966237/201710/966237-20171012162539684-273794611.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;结语&quot;&gt;6. 结语&lt;/h2&gt;
&lt;p&gt;使用邮件监控并不太复杂，主要在于邮件的解析。邮件格式太复杂，如果全都在主题里，参数多了会显得很乱。&lt;br/&gt;根据需要可以对循环监控的那段代码进行修改扩充以适应不同的需求。总之我认为在aws上训练还是可以一用的，总不能一直连着终端。&lt;br/&gt;完成代码地址：&lt;a href=&quot;https://github.com/fierceX/Email_Monitor_MxnetTrain&quot; class=&quot;uri&quot;&gt;https://github.com/fierceX/Email_Monitor_MxnetTrain&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 16 Oct 2017 02:27:00 +0000</pubDate>
<dc:creator>fiercex</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fiercex/p/7656706.html</dc:identifier>
</item>
<item>
<title>阿里巴巴 Java 开发规约插件初体验 - Mafly</title>
<link>http://www.cnblogs.com/mafly/p/aliPlugin.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mafly/p/aliPlugin.html</guid>
<description>&lt;h2 id=&quot;阿里巴巴-java-开发手册&quot;&gt;阿里巴巴 Java 开发手册&lt;/h2&gt;
&lt;p&gt;又一次来谈《阿里巴巴 Java 开发手册》，经过这大半年的版本迭代，这本阿里工程师们总结出来避免写出那么多 Bug 的规范，对于 Java 开发者简直就是必备开发利剑了。&lt;/p&gt;
&lt;p&gt;针对这个手册，我之前也简单写过两篇简单的解读，手册的确是清晰的说明了日常开发中很容易踩的坑，我不要脸的把链接放一下：&lt;/p&gt;
&lt;p&gt;这一次，阿里巴巴于 10 月 14 日在杭州云栖大会上，正式发布众所期待的《阿里巴巴 Java 开发规约》扫描插件！&lt;/p&gt;

&lt;p&gt;该插件由阿里巴巴 P3C 项目组研发。P3C 是世界知名的反潜机，专门对付水下潜水艇，寓意是扫描出所有潜在的代码隐患。&lt;/p&gt;
&lt;p&gt;代码已经开源，GitHub：&lt;a href=&quot;https://github.com/alibaba/p3c&quot; class=&quot;uri&quot;&gt;https://github.com/alibaba/p3c&lt;/a&gt;&lt;br/&gt;阿里介绍文章：&lt;a href=&quot;https://mp.weixin.qq.com/s/IbibsXlWHlM59kfXJqRvZA#rd&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s/IbibsXlWHlM59kfXJqRvZA#rd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;据说插件支持了IDEA、Eclipse，在扫描代码后，将不符合规约的代码显示出来，甚至在 IDEA 上，我们还基于 Inspection 机制提供了实时检测功能，编写代码的同时也能快速发现问题所在，还实现了批量一键修复的功能。&lt;/p&gt;
&lt;p&gt;那我就在 IDEA 下试一下吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.打开 IDEA ，选择 File - Settings - Plugins - Browse repositories&lt;/strong&gt;&lt;br/&gt;打开 IDEA，选择 File - Settings - Plugins - Browse repositories 后，输入 &lt;code&gt;alibaba&lt;/code&gt; 选中 &lt;code&gt;Alibaba Java Coding Guidelines&lt;/code&gt;，点击 &lt;code&gt;Install&lt;/code&gt;，截至目前已经快有了三千的安装量了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/539095/201710/539095-20171015133549996-841074683.png&quot; alt=&quot;alibaba guidelines&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.重启IDEA，开始使用&lt;/strong&gt;&lt;br/&gt;安装后，会提示你重启 IDEA 已启用插件，重启后就可以在你的项目上疯狂点击右键吧，当然菜单栏也会出现俩按钮，它有个快捷键是&lt;code&gt;Ctrl+Shift+Alt+J&lt;/code&gt;，你也可以试试看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/539095/201710/539095-20171015134537559-536005617.png&quot; alt=&quot;checkStart&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，选中某一个类，或者在这个类里边右键也可以&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/539095/201710/539095-20171015134834324-220279787.png&quot; alt=&quot;checkStartClass&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.扫描出坏代码&lt;/strong&gt;&lt;br/&gt;扫描代码后，将不符合规约的代码按 &lt;strong&gt;Blocker/Critical/Major&lt;/strong&gt; 三个等级显示在下方，双击可以定位至代码处，右侧窗口还有针对代码的批量修复功能，简直不能更 666 了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/539095/201710/539095-20171015135156840-922297573.png&quot; alt=&quot;bad code&quot;/&gt;&lt;/p&gt;
&lt;p&gt;稍微解释下&lt;strong&gt;Blocker/Critical/Major&lt;/strong&gt;三个等级，在 Snoar 中对代码规则有五个级别，这是前三个，翻译下就是：崩溃/严重/重要 ，也就是说前两级别是必须要处理掉的。&lt;/p&gt;

&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Eclipse 版插件支持4.2（Juno，JDK1.8+）及以上版本，我们提供自主的Update Site，通过 Help &amp;gt;&amp;gt; Install New Software 然后输入https://p3c.alibaba.com/plugin/eclipse/update&lt;br/&gt;即可看到安装列表。大家可以通过 Help &amp;gt;&amp;gt; Check for Udates 进行插件新版检测&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我没有在 Eclipse 上体验，你们有 Eclipse 的可以试试看。&lt;/p&gt;

&lt;p&gt;这个插件可以说对规范代码有重大意义，可以使我们少写一些 Bug，少抛一些异常，少踩一些坑，但真正要写出健壮代码最重要的还在于我们自己，这个插件还存在很多问题，一些容易产生 NPE 的级联调用、空对象什么的，好像它并不能检查出来，依赖工具永远是不可能解决所有问题的。&lt;/p&gt;
&lt;p&gt;当然，它的中文版对我们是无比友好的。&lt;/p&gt;
</description>
<pubDate>Mon, 16 Oct 2017 02:04:00 +0000</pubDate>
<dc:creator>Mafly</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mafly/p/aliPlugin.html</dc:identifier>
</item>
<item>
<title>几款效率神器助你走上人生巅峰 - Hafiz.Zhang</title>
<link>http://www.cnblogs.com/hafiz/p/7658429.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hafiz/p/7658429.html</guid>
<description>&lt;h3&gt;一、背景&lt;/h3&gt;
&lt;p&gt;　　在我的工作和生活中，我一直都很注重效率工具的使用，这么些年下来也积累好几款很不错，但是又不为大多数人所熟知的软件工具，我用起来得心应手，很不错。那我就像在此给大家做个分享，希望你们都能多多提升工作效率。且本篇以后会进行不断更新，及时将好用的工具推荐给大家。希望能对大家有所帮助~&lt;/p&gt;
&lt;h3&gt;二、实用效率清单&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.WGestures&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　WGestures是一款非常好用的Windows系统全局鼠标手势工具软件，支持Windows 7+，免费、开源，&lt;strong&gt;&lt;span&gt;可以方便的在全局或某些软件中自定义众多鼠标手势&lt;/span&gt;&lt;/strong&gt;，也可以设置在某些软件中禁用该鼠标手势软件。这个对我来说非常好用，我关闭窗口、切换浏览器Tab、最小化、最大化窗口、刷新、关机等等都是使用这个鼠标手势来，再也不用去找窗口的功能按钮了，就是这么爽。还支持自己针对不同的软件来在这个工具上定制自己的鼠标手势，不能再爽一点了。软件打开截图如下：&lt;img src=&quot;http://images2017.cnblogs.com/blog/894443/201710/894443-20171015091546418-2099925180.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在手势一栏里我们可以为自己需要的软件添加自定义的鼠标手势。还支持配置的导入导出等。我常用的鼠标手势有：&lt;/p&gt;
&lt;p&gt;复制、粘贴、粘贴并回车、剪切、关闭、退出、强制退出、撤销、退格、删除、最小化、最大化、切换到桌面等。&lt;/p&gt;
&lt;p&gt;一般来说一两天就可以适应了鼠标手势了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;官方网站：&lt;span&gt;&lt;a href=&quot;http://www.yingdev.com/projects/wgestures&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://www.yingdev.com/projects/wgestures&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;github：&lt;span&gt;&lt;a href=&quot;https://github.com/yingDev/WGestures&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://github.com/yingDev/WGestures&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.Clover&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　Clover 是 Windows Explorer 资源管理器的一个扩展，为其&lt;strong&gt;&lt;span&gt;增加类似谷歌 Chrome 浏览器的多标签页功能&lt;/span&gt;&lt;/strong&gt;。也就是说Clover是一款Windows Explorer 资源管理器窗口标签化工具，打开电脑资源管理器可以像浏览器一样，将C、D、E盘标签化在一个窗口里面非常方便，不用再打开E盘后再返回退到D盘啦。&lt;/p&gt;
&lt;p&gt;　　使用Clover以后，我们就不会再出现本地打开很多不同位置的资源管理器了，所有的资源管理器窗口都会被Clover像Chrome管理打开的各个标签一样来进行管理，你可以很方便的进行标签页的切换。&lt;span&gt;&lt;strong&gt;而且还支持你添加本地文件的标签的功能，让你可以打开Clover以后一键进入目的资源位置。还支持双击空白处返回上一级目录等高级功能。&lt;/strong&gt;&lt;/span&gt;我刚找到这款软件的时候，惊呆了，感觉牛逼的不要不要的。现在我看到同事谁的电脑上还打开一堆资源管理器，我就会不自觉的给他推荐这个，真的是好用~软件截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/894443/201710/894443-20171015093313902-385194362.png&quot; alt=&quot;&quot; width=&quot;756&quot; height=&quot;382&quot;/&gt;&lt;/p&gt;
&lt;p&gt;主观上来说，跟windows自带的资源管理器界面没有很大区别，但多了很多实用的功能，且更得心应手。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;官方网站：&lt;span&gt;&lt;a class=&quot;m_link&quot; href=&quot;http://cn.ejie.me/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://cn.ejie.me/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;https://www.clover.com/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;百度下载地址：&lt;span&gt;&lt;a href=&quot;http://rj.baidu.com/soft/detail/17870.html?ald&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://rj.baidu.com/soft/detail/17870.html?ald&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.Everything&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　Everything是&lt;span&gt;&lt;strong&gt;速度最快的文件搜索软件。其速度之快令人震惊，百G硬盘几十万个文件，可以在几秒钟之内完成索引&lt;/strong&gt;&lt;/span&gt;；文件名搜索瞬间呈现结果。它小巧免费，支持中文，支持正则表达式，可以通过HTTP或FTP分享搜索结果。如果不满意Windows自带的搜索工具、Total Commander的搜索、Google 桌面搜索或百度硬盘搜索，如果正在使用或放弃了Locate32，都值得推荐这款体积小巧、免安装、免费、速度极快（比Locate32更快）的文件搜索工具Everything！&lt;/p&gt;
&lt;p&gt;　　有了这款软件我们就可以不再忍受windows下资源管理器搜索慢如蜗牛的问题了。相信这款软件已经被很多牛人推荐过N多遍，今天我还是想再推荐一遍。^_^&lt;/p&gt;
&lt;p&gt;　　软件截图如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/894443/201710/894443-20171015094648434-237269431.png&quot; alt=&quot;&quot; width=&quot;619&quot; height=&quot;440&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;官方网站：&lt;span&gt;&lt;a href=&quot;http://www.voidtools.com/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://www.voidtools.com/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.Xmarks&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　用户在使用浏览器的时候，不管是IE、Firefox、Safari或者是Chrome都会为用户提供一个书签的功能，用于将用户在互联网中浏览到的感兴趣的内容保存到浏览器中，但是由于这4款主流浏览器的开发者都不是一家公司，并且没有做一些兼容性的设置，用户在其中一个浏览器中保存了书签以后，没办法同步更新在另外一个浏览器中，虽然Chrome、Safari等浏览器都有从IE导入书签的功能，但这对于书签快的用户来说是远远不够的。&lt;/p&gt;
&lt;p&gt;　　所以，能够同步更新多个浏览器中的书签的谷歌浏览器插件Xmarks 诞生了。&lt;strong&gt;&lt;span&gt;Xmarks Bookmark Sync是一款可以把同步更新Chrome中的书签到IE、Firefox、Safari浏览器中的谷歌浏览器插件，在Chrome中安装了Xmarks Bookmark Sync插件以后，对于习惯使用多个浏览器的用户来说，在任意一个浏览器中使用Xmarks Bookmark Sync插件保存了书签，都可以快速同步到其他的浏览器，除此之外，Xmarks Bookmark Sync插件还会保证用户的书签保存在互联网上，这意味着用户就算换了一台电脑，使用Xmarks Bookmark Sync插件仍然可以快速地同步书签&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　这简直就是一款神器！目前我所知道的是Xmarks已经有IE、Firefox、Safari、Chrome的插件了，你安装完插件后直接登陆你的Xmarks账号，就可以实现多个浏览器的同步，再也不会为不同浏览器书签不同步和害怕书签丢失的问题了。软件截图如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/894443/201710/894443-20171015095544293-1904944437.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装完chrome插件以后，我们通过如下操作就可以同步书签了&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/894443/201710/894443-20171015095710012-2019666839.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;官方网站：&lt;span&gt;&lt;a href=&quot;http://www.xmarks.com/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://www.xmarks.com/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.Intellij IDEA&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　IDEA 全称 IntelliJ IDEA，是java语言开发的集成环境，IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、各类版本工具(git、svn、github等)、JUnit、CVS整合、代码分析、 创新的GUI设计等方面的功能可以说是超常的。IDEA是&lt;a href=&quot;https://baike.baidu.com/item/JetBrains&quot; target=&quot;_blank&quot;&gt;JetBrains&lt;/a&gt;公司的产品，这家公司总部位于&lt;a href=&quot;https://baike.baidu.com/item/%E6%8D%B7%E5%85%8B%E5%85%B1%E5%92%8C%E5%9B%BD&quot; target=&quot;_blank&quot;&gt;捷克共和国&lt;/a&gt;的首都&lt;a href=&quot;https://baike.baidu.com/item/%E5%B8%83%E6%8B%89%E6%A0%BC&quot; target=&quot;_blank&quot;&gt;布拉格&lt;/a&gt;，开发人员以严谨著称的东欧程序员为主。它的旗舰版本还支持HTML，CSS，PHP，MySQL，Python等。免费版只支持Java等少数语言。&lt;/p&gt;
&lt;p&gt;　　程序猿的开发神器，我个人感觉比Eclipse智能太多了，再加上自己自定义的各种快捷键等操作，码代码简直爽翻。关于常用快捷键，请移步另一篇博客：&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_2&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/hafiz/p/5713615.html&quot;&gt;&lt;span&gt;IntelliJ IDEA 15.0.4常用快捷键整理&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;软件截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/894443/201710/894443-20171015100444184-1670667802.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果经济允许，建议购买正式版本，不允许的话，关于IDEA的破解，我后续单独放一篇博客专门说。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;官方网站：&lt;span&gt;&lt;a href=&quot;https://www.jetbrains.com/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://www.jetbrains.com/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;6.AdBlock Plus&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　Adblock Plus 是一款最为流行的广告拦截器，可以在 Firefox、Chrome、Opera、Safari、Android 和 Internet Explorer 上使用。&lt;strong&gt;&lt;span&gt;屏蔽互联网上所有烦人的广告：去除 YouTube 上的视频广告、屏蔽 Facebook 广告、摆脱弹出窗口等等&lt;/span&gt;&lt;/strong&gt;。在 Google Chrome 上，Adblock Plus 是增长最快的扩展之一。Adblock Plus在超过 1 亿台设备上运行。&lt;/p&gt;
&lt;p&gt;　　有了它，我们再也不会受浏览器上各种牛皮癣广告的困扰了，还你一个干净清爽的浏览器，给搜索本来的体验！软件截图如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/894443/201710/894443-20171015101137371-205059594.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;官方网站：&lt;span&gt;&lt;a href=&quot;https://adblockplus.org/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://adblockplus.org/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;7.Markdown Here&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　Markdown Here插件&lt;strong&gt;&lt;span&gt;支持你在任何富文本编辑器中将markdown预语法的文本转换成Markdown进行显示&lt;/span&gt;&lt;/strong&gt;。这对微信公众号的排版来说极其有用，当你以Markdown预发写好文章以后，直接按快捷键Ctrl+Alt+M就可以一键转换成Markdown进行显示。谁用谁知道~&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;官方网站：&lt;span&gt;&lt;a href=&quot;http://markdown-here.com/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://markdown-here.com/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;8.Team Viewer&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　TeamViewer是一个&lt;span&gt;&lt;strong&gt;能在任何防火墙和NAT代理的后台用于远程控制，&lt;a href=&quot;https://baike.baidu.com/item/%E6%A1%8C%E9%9D%A2%E5%85%B1%E4%BA%AB&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;桌面共享&lt;/span&gt;&lt;/a&gt;和文件传输的简单且快速的解决方案&lt;/strong&gt;&lt;/span&gt;。为了连接到另一台计算机，只需要在两台计算机上同时运行 TeamViewer 即可，而不需要进行安装（也可以选择安装，安装后可以设置开机运行）。该软件第一次启动在两台计算机上自动生成伙伴 ID。只需要输入你的伙伴的ID到TeamViewer，然后就会立即建立起连接。&lt;/p&gt;
&lt;p&gt;　　当你需要用一台电脑远程连接另一台电脑的时候，它就派上用场了，比如我公司一台电脑，家里一台电脑，在公司的时候我希望能连接家里的电脑，获取家里电脑上的文件等信息，那我只需要打开家里电脑的TeamViewer，并设置为无人值守模式，那我就可以在公司很方便的使用了。软件截图如下：　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/894443/201710/894443-20171015102616871-833003013.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;官方网站：&lt;span&gt;&lt;a href=&quot;https://www.teamviewer.com/zhCN/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://www.teamviewer.com/zhCN/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;9.Xmind&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　XMind 是一款&lt;strong&gt;&lt;span&gt;非常实用的商业&lt;a href=&quot;https://baike.baidu.com/item/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;思维导图&lt;/span&gt;&lt;/a&gt;软件&lt;/span&gt;&lt;/strong&gt;，应用全球最先进的Eclipse RCP &lt;a href=&quot;https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84&quot; target=&quot;_blank&quot;&gt;软件架构&lt;/a&gt;，全力打造易用、高效的可视化思维软件，强调软件的可扩展、跨平台、稳定性和性能，致力于使用先进的软件技术帮助用户真正意义上提高生产率。&lt;/p&gt;
&lt;p&gt;　　工作中，我们使用Xmaind来制作思维导图，很简单，很方便，每个同学用的都喜欢~软件截图如下：&lt;img src=&quot;http://images2017.cnblogs.com/blog/894443/201710/894443-20171015103117012-1422596278.png&quot; alt=&quot;&quot; width=&quot;692&quot; height=&quot;486&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;官方网站：&lt;span&gt;&lt;a href=&quot;http://www.xmindchina.net/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://www.xmindchina.net/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;10.PostMan&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　Postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件。&lt;strong&gt;Postman&lt;/strong&gt;在发送网络HTTP请求方面可以说是Chrome插件类产品中的代表产品之一。&lt;/p&gt;
&lt;p&gt;　　有了这款软件以后，我们就可以很方便的进行接口调试，而且这款软件还支持保存已经请求过的接口，这样我们做完一次服务端接口测试以后，下次就可以直接打开提示，参数什么的都可以帮你保存，简直调试接口神器。还有很多高深的用法等你来发掘~&lt;/p&gt;
&lt;p&gt;　　软件截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/894443/201710/894443-20171015103825543-1994498354.png&quot; alt=&quot;&quot; width=&quot;651&quot; height=&quot;337&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;官方网站：&lt;span&gt;&lt;a href=&quot;https://www.getpostman.com/apps&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://www.getpostman.com/apps&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;11.SwitchHosts　&lt;/span&gt;&lt;/strong&gt;　&lt;/p&gt;
&lt;p&gt;　　SwitchHosts是&lt;strong&gt;&lt;span&gt;一个管理、快速切换Hosts小工具，开源软件，一键切换Hosts配置，非常实用，高效&lt;/span&gt;&lt;/strong&gt;。开发Web过程中，部署有多套环境，网址域名都相同，部署在不同的服务器上，有开发环境、测试环境、预发布环境、生产环境。经常要切换Hosts来访问，测试以及验证bug，如果纯手工修改这会花掉不少时间，而且这个过程毫无乐趣可言。&lt;/p&gt;
&lt;p&gt;　　可以很方便的修改本地hosts,不再需要你修改本地的hosts文件，退出以后本地hosts文件依旧是干净的。还支持你设置多套hosts环境，随意切换就好了，&lt;strong&gt;&lt;span&gt;注意打开软件要使用管理员身份打开&lt;/span&gt;&lt;/strong&gt;，否则不能修改成功！软件截图如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/894443/201710/894443-20171015104523684-198844953.png&quot; alt=&quot;&quot; width=&quot;527&quot; height=&quot;399&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;官方网站：&lt;span&gt;&lt;a title=&quot;https://github.com/oldj/SwitchHosts&quot; href=&quot;https://github.com/oldj/SwitchHosts&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://github.com/oldj/SwitchHosts&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;12.JD-GUI&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　JD-GUI&lt;strong&gt;&lt;span&gt;是一个独立图形界面的Java源代码“.class”文件反编译工具&lt;/span&gt;&lt;/strong&gt;。您可以浏览重建的源代码，JD-GUI的即时访问方法和字段。实现了&lt;a href=&quot;http://www.cr173.com/k/myeclipse/&quot; target=&quot;_blank&quot;&gt;eclipse&lt;/a&gt;的高亮着色功能，多文件标签浏览.支持众多Java编译器的反编译,支持对整个Jar文件进行反编译，并本源代码可直接点击进行相关代码的跳转；&lt;/p&gt;
&lt;p&gt;　　软件截图如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/894443/201710/894443-20171015104922059-168792073.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;官方网站：&lt;span&gt;&lt;a href=&quot;http://jd.benow.ca/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://jd.benow.ca/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt; 三、总结&lt;/h3&gt;
&lt;p&gt;　　本次的软件推荐就先说到这里，以这些就是我平常经常使用到的效率提升工具，非常好用，我感觉每一款都是一个神器，都能帮我解决很头疼的问题，希望同样也可以帮助你，&lt;strong&gt;&lt;span&gt;如果你有感觉很不错的软件，请不吝推荐给我，我把它归档到这里&lt;/span&gt;&lt;/strong&gt;，如果你感觉本文不错，请点击推荐，博主码字不易，不喜勿喷~&lt;/p&gt;

</description>
<pubDate>Mon, 16 Oct 2017 02:02:00 +0000</pubDate>
<dc:creator>Hafiz.Zhang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hafiz/p/7658429.html</dc:identifier>
</item>
<item>
<title>Java IO编程全解（一）——Java的I/O演进之路 - Joanna.Yan</title>
<link>http://www.cnblogs.com/Joanna-Yan/p/7419117.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Joanna-Yan/p/7419117.html</guid>
<description>[unable to retrieve full-text content]转载请注明出处：http://www.cnblogs.com/Joanna-Yan/p/7419117.html JDK1.4之前的早期版本，Java对I/O的支持并不完善，开发人员在开发高性能I/O程序的时候，会面临一些巨大的挑战和困难，主要问题如下： 没有数据缓冲区，I/O性能存在问题； 没有C</description>
<pubDate>Mon, 16 Oct 2017 01:58:00 +0000</pubDate>
<dc:creator>Joanna.Yan</dc:creator>
<dc:identifier>http://www.cnblogs.com/Joanna-Yan/p/7419117.html</dc:identifier>
</item>
</channel>
</rss>