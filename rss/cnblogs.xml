<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>运行自己的 DaemonSet - 每天5分钟玩转 Docker 容器技术（131） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8452453.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8452453.html</guid>
<description>&lt;p&gt;&lt;span&gt;本节以 Prometheus Node Exporter 为例演示如何运行自己的 DaemonSet。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Prometheus 是流行的系统监控方案，Node Exporter 是 Prometheus 的 agent，以 Daemon 的形式运行在每个被监控节点上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果是直接在 Docker 中运行 Node Exporter 容器，命令为：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;docker run -d \&lt;br/&gt;-v &quot;/proc:/host/proc&quot; \&lt;br/&gt;-v &quot;/sys:/host/sys&quot; \&lt;br/&gt;-v &quot;/:/rootfs&quot; \&lt;br/&gt;--net=host \  prom/node-exporter \&lt;br/&gt;--path.procfs /host/proc \&lt;br/&gt;--path.sysfs /host/sys \&lt;br/&gt;--collector.filesystem.ignored-mount-points &quot;^/(sys|proc|dev|host|etc)($|/)&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;将其转换为 DaemonSet 的 YAML 配置文件 node_exporter.yml：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/775365/201802/775365-20180218071851140-1123794097.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;① 直接使用 Host 的网络。&lt;br/&gt;② 设置容器启动命令。&lt;br/&gt;③ 通过 Volume 将 Host 路径 &lt;/span&gt;&lt;code&gt;&lt;span&gt;/proc&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;/sys&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;/&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 映射到容器中。我们将在后面详细讨论 Volume。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl apply -f node_exporter.yml&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/775365/201802/775365-20180218071907515-2061186364.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;DaemonSet &lt;/span&gt;&lt;code&gt;&lt;span&gt;node-exporter-daemonset&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 部署成功，k8s-node1 和 k8s-node2 上分别运行了一个 node exporter Pod。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;DaemonSet 就讨论到这里，下一节我们学习另一个 Controller -- Job。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;http://www.cnblogs.com/Users/wanglei/百度云同步盘/容器/images/480.png?v=1510821977521&quot; alt=&quot;&quot;/&gt;&lt;span&gt;&lt;strong&gt;书籍：&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 18 Feb 2018 22:29:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8452453.html</dc:identifier>
</item>
<item>
<title>JAVAEE——BOS物流项目04：学习计划、datagrid、分页查询、批量删除、修改功能 - kent鹏</title>
<link>http://www.cnblogs.com/xieyupeng/p/8453401.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xieyupeng/p/8453401.html</guid>
<description>&lt;p&gt;&lt;strong&gt;1&lt;span&gt;、&lt;/span&gt;&lt;span&gt;datagrid&lt;/span&gt;&lt;span&gt;使用方法（重要）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n &lt;span&gt;将静态&lt;/span&gt;HTML&lt;span&gt;渲染为&lt;/span&gt;&lt;span&gt;datagrid&lt;/span&gt;&lt;span&gt;样式&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n &lt;span&gt;发送&lt;/span&gt;ajax&lt;span&gt;请求获取&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;数据创建&lt;/span&gt;&lt;span&gt;datagrid&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n &lt;span&gt;使用&lt;/span&gt;easyUI&lt;span&gt;提供的&lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&lt;span&gt;创建&lt;/span&gt;&lt;span&gt;datagrid&lt;/span&gt;&lt;strong&gt;&lt;span&gt;（掌握）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;span&gt;、实现取派员分页查询&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n &lt;span&gt;调整页面基于&lt;/span&gt;datagrid&lt;span&gt;发送&lt;/span&gt;&lt;span&gt;ajax&lt;/span&gt;&lt;span&gt;请求&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n &lt;span&gt;创建&lt;/span&gt;PageBean&lt;span&gt;封装分页参数&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 定义通用分页查询方法&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n &lt;span&gt;将分页查询结果转为&lt;/span&gt;json&lt;span&gt;返回&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3&lt;span&gt;、取派员批量删除&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 页面调整&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 服务端实现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4&lt;span&gt;、取派员修改&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 页面调整&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 服务端实现&lt;/p&gt;



&lt;h2&gt;2.1 &lt;strong&gt;&lt;span&gt;将静态&lt;/span&gt;HTML&lt;span&gt;渲染为&lt;/span&gt;&lt;span&gt;datagrid&lt;/span&gt;&lt;span&gt;样式&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 方式一：将静态HTML渲染为datagrid样式 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;easyui-datagrid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th &lt;/span&gt;&lt;span&gt;data-options&lt;/span&gt;&lt;span&gt;=&quot;field:'id'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;编号&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th &lt;/span&gt;&lt;span&gt;data-options&lt;/span&gt;&lt;span&gt;=&quot;field:'name'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th &lt;/span&gt;&lt;span&gt;data-options&lt;/span&gt;&lt;span&gt;=&quot;field:'age'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;年龄&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;001&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;小明&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;90&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;002&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;老王&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2.2 &lt;strong&gt;&lt;span&gt;发送&lt;/span&gt;ajax&lt;span&gt;请求获取&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;数据创建&lt;/span&gt;&lt;span&gt;datagrid&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;提供&lt;/span&gt;json&lt;span&gt;文件：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1135185/201802/1135185-20180219000636108-245516506.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 方式二：发送ajax请求获取json数据创建datagrid &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;data-options&lt;/span&gt;&lt;span&gt;=&quot;url:'${pageContext.request.contextPath }/json/datagrid_data.json'&quot;&lt;/span&gt;&lt;span&gt; 
            class&lt;/span&gt;&lt;span&gt;=&quot;easyui-datagrid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th &lt;/span&gt;&lt;span&gt;data-options&lt;/span&gt;&lt;span&gt;=&quot;field:'id'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;编号&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th &lt;/span&gt;&lt;span&gt;data-options&lt;/span&gt;&lt;span&gt;=&quot;field:'name'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th &lt;/span&gt;&lt;span&gt;data-options&lt;/span&gt;&lt;span&gt;=&quot;field:'age'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;年龄&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;2.3 &lt;strong&gt;&lt;span&gt;使用&lt;/span&gt;easyUI&lt;span&gt;提供的&lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&lt;span&gt;创建&lt;/span&gt;&lt;span&gt;datagrid&lt;/span&gt;&lt;span&gt;（掌握）&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 方式三：使用easyUI提供的API创建datagrid &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        $(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;页面加载完成后，创建数据表格datagrid&lt;/span&gt;
&lt;span&gt;            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#mytable&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).datagrid({
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义标题行所有的列&lt;/span&gt;
&lt;span&gt;                columns:[[
                          {title:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;编号&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,field:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,checkbox:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;},
                          {title:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,field:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
                          {title:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;年龄&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,field:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
                          {title:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;地址&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,field:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
                          ]],
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定数据表格发送ajax请求的地址&lt;/span&gt;
&lt;span&gt;                url:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;${pageContext.request.contextPath }/json/datagrid_data.json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                rownumbers:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                singleSelect:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义工具栏&lt;/span&gt;
&lt;span&gt;                toolbar:[
                         {text:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;添加&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,iconCls:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;icon-add&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为按钮绑定单击事件&lt;/span&gt;
&lt;span&gt;                             handler:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                                 alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;add...&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                              }
                         },
                         {text:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;删除&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,iconCls:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;icon-remove&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
                         {text:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;修改&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,iconCls:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;icon-edit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
                         {text:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;查询&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,iconCls:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;icon-search&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
                         ],
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示分页条&lt;/span&gt;
&lt;span&gt;                pagination:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            });
        });
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;如果数据表格中使用了分页条，要求服务端响应的&lt;/span&gt;json&lt;span&gt;变为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1135185/201802/1135185-20180219000712390-1809805375.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;请求：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1135185/201802/1135185-20180219000721280-592942260.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;响应：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1135185/201802/1135185-20180219000726155-1424588925.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;页面：&lt;/span&gt;WEB-INF/pages/base/staff.jsp&lt;/p&gt;

&lt;h2&gt;3.1 &lt;strong&gt;页面调整&lt;/strong&gt;&lt;/h2&gt;
&lt;p class=&quot;17&quot;&gt;l &lt;span&gt;修改页面中&lt;/span&gt;datagrid&lt;span&gt;的&lt;/span&gt;&lt;span&gt;URL&lt;/span&gt;&lt;span&gt;地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1135185/201802/1135185-20180219000736140-2109870833.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.2 &lt;strong&gt;服务端实现&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;3.2.1 &lt;strong&gt;&lt;span&gt;包装&lt;/span&gt;PageBean&lt;span&gt;工具类&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;封装分页相关的属性&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1135185/201802/1135185-20180219000744358-1396608854.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;3.2.2 &lt;strong&gt;&lt;span&gt;在&lt;/span&gt;BaseDao&lt;span&gt;中扩展通用分页查询方法&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 通用分页查询方法
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; pageQuery(PageBean pageBean) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; currentPage =&lt;span&gt; pageBean.getCurrentPage();
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; pageSize =&lt;span&gt; pageBean.getPageSize();
        DetachedCriteria detachedCriteria &lt;/span&gt;=&lt;span&gt; pageBean.getDetachedCriteria();
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询total---总数据量&lt;/span&gt;
        detachedCriteria.setProjection(Projections.rowCount());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定hibernate框架发出sql的形式----》select count(*) from bc_staff;&lt;/span&gt;
        List&amp;lt;Long&amp;gt; countList = (List&amp;lt;Long&amp;gt;) &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getHibernateTemplate().findByCriteria(detachedCriteria);
        Long count &lt;/span&gt;= countList.get(0&lt;span&gt;);
        pageBean.setTotal(count.intValue());
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询rows---当前页需要展示的数据集合&lt;/span&gt;
        detachedCriteria.setProjection(&lt;span&gt;null&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定hibernate框架发出sql的形式----》select * from bc_staff;&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; firstResult = (currentPage - 1) *&lt;span&gt; pageSize;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; maxResults =&lt;span&gt; pageSize;
        List rows &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getHibernateTemplate().findByCriteria(detachedCriteria, firstResult, maxResults);
        pageBean.setRows(rows);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3.2.3 &lt;strong&gt;&lt;span&gt;在&lt;/span&gt;StaffAction&lt;span&gt;中提供分页查询方法&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;属性驱动，接收页面提交的分页参数&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; page;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; rows;
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 分页查询方法
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IOException 
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; String pageQuery() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException{
        PageBean pageBean &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PageBean();
        pageBean.setCurrentPage(page);
        pageBean.setPageSize(rows);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建离线提交查询对象&lt;/span&gt;
        DetachedCriteria detachedCriteria = DetachedCriteria.forClass(Staff.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        pageBean.setDetachedCriteria(detachedCriteria);
        staffService.pageQuery(pageBean);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用json-lib将PageBean对象转为json，通过输出流写回页面中
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;JSONObject---将单一对象转为json
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;JSONArray----将数组或者集合对象转为json&lt;/span&gt;
        JsonConfig jsonConfig = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JsonConfig();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定哪些属性不需要转json&lt;/span&gt;
        jsonConfig.setExcludes(&lt;span&gt;new&lt;/span&gt; String[]{&quot;currentPage&quot;,&quot;detachedCriteria&quot;,&quot;pageSize&quot;&lt;span&gt;});
        String json &lt;/span&gt;=&lt;span&gt; JSONObject.fromObject(pageBean,jsonConfig).toString();
        ServletActionContext.getResponse().setContentType(&lt;/span&gt;&quot;text/json;charset=utf-8&quot;&lt;span&gt;);
        ServletActionContext.getResponse().getWriter().print(json);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;在取派员表中存在一个删除标识位&lt;/span&gt;deltag&lt;span&gt;，&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;表示已删除 ，&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;表示未删除&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;4.1 &lt;strong&gt;页面调整&lt;/strong&gt;&lt;/h2&gt;
&lt;p class=&quot;17&quot;&gt;l &lt;span&gt;数据表格&lt;/span&gt;datagrid&lt;span&gt;提供的方法，用于获取所有选中的行：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1135185/201802/1135185-20180219000841358-1046367608.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;修改删除按钮绑定的事件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; doDelete(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取数据表格中所有选中的行，返回数组对象&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; rows = $(&quot;#grid&quot;).datagrid(&quot;getSelections&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(rows.length == 0&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有选中记录，弹出提示&lt;/span&gt;
            $.messager.alert(&quot;提示信息&quot;,&quot;请选择需要删除的取派员！&quot;,&quot;warning&quot;&lt;span&gt;);
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;选中了取派员,弹出确认框&lt;/span&gt;
            $.messager.confirm(&quot;删除确认&quot;,&quot;你确定要删除选中的取派员吗？&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(r){
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(r){
                    
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; array = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Array();
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;确定,发送请求&lt;/span&gt;
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取所有选中的取派员的id&lt;/span&gt;
                    &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;rows.length;i++&lt;span&gt;){
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; staff = rows[i];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;json对象&lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt; id =&lt;span&gt; staff.id;
                        array.push(id);
                    }
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ids = array.join(&quot;,&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1,2,3,4,5&lt;/span&gt;
                    location.href = &quot;staffAction_deleteBatch.action?ids=&quot;+&lt;span&gt;ids;
                }
            });
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;16&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;4.2 &lt;strong&gt;服务端实现&lt;/strong&gt;&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;第一步：在StaffAction中创建deleteBatch批量删除方法



    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;属性驱动，接收页面提交的ids参数&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String ids;
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 取派员批量删除
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String deleteBatch(){
        staffService.deleteBatch(ids);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; LIST;
    }

第二步：在Ｓｅｒｖｉｃｅ中提供批量删除方法
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 取派员批量删除
     * 逻辑删除，将deltag改为1
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; deleteBatch(String ids) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1,2,3,4&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(StringUtils.isNotBlank(ids)){
            String[] staffIds &lt;/span&gt;= ids.split(&quot;,&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String id : staffIds) {
                staffDao.executeUpdate(&lt;/span&gt;&quot;staff.delete&quot;&lt;span&gt;, id);
            }
        }
    }
第三步：在Staff.hbm.xml中提供HQL语句，用于逻辑删除取派员
    &lt;/span&gt;&amp;lt;!-- 取派员逻辑删除 --&amp;gt;
    &amp;lt;query name=&quot;staff.delete&quot;&amp;gt;&lt;span&gt;
        UPDATE Staff SET deltag &lt;/span&gt;= '1' WHERE id = ?
    &amp;lt;/query&amp;gt;&lt;span&gt;
由于dtd约束，所以query和class是同级的，如果嵌套写入会报错。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;5.1 &lt;strong&gt;页面调整&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;第一步：为数据表格绑定双击事件&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1135185/201802/1135185-20180219000939733-457790542.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1135185/201802/1135185-20180219000945796-1902344161.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二步：复制页面中添加取派员窗口，获得修改取派员窗口&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1135185/201802/1135185-20180219001002405-197389377.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;第三步：定义&lt;/span&gt;function&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据表格绑定的双击行事件对应的函数&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; doDblClickRow(rowIndex, rowData){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开修改取派员窗口&lt;/span&gt;
        $('#editStaffWindow').window(&quot;open&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用form表单对象的load方法回显数据&lt;/span&gt;
        $(&quot;#editStaffForm&quot;).form(&quot;load&quot;&lt;span&gt;,rowData);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;5.2 &lt;strong&gt;服务端实现&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;StaffAction&lt;span&gt;中创建&lt;/span&gt;&lt;span&gt;edit&lt;/span&gt;&lt;span&gt;方法，修改取派员信息&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 修改取派员信息
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String edit(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显查询数据库，根据id查询原始数据&lt;/span&gt;
        Staff staff =&lt;span&gt; staffService.findById(model.getId());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用页面提交的数据进行覆盖&lt;/span&gt;
&lt;span&gt;        staff.setName(model.getName());
        staff.setTelephone(model.getTelephone());
        staff.setHaspda(model.getHaspda());
        staff.setStandard(model.getStandard());
        staff.setStation(model.getStation());
        staffService.update(staff);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; LIST;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 18 Feb 2018 16:15:00 +0000</pubDate>
<dc:creator>kent鹏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xieyupeng/p/8453401.html</dc:identifier>
</item>
<item>
<title>Docker小记 — Docker Engine - 捷义</title>
<link>http://www.cnblogs.com/youclk/p/8371108.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/youclk/p/8371108.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;用了Docker方才觉得生产环境终于有了他该有的样子，就像集装箱普及之后大型货轮的价值才逐渐体现出来，Docker详细说明可查阅&lt;a href=&quot;https://docs.docker.com&quot;&gt;“官方文档”&lt;/a&gt;。本篇为Docker Engine的笔记，也就是我们通常说的Docker，他包含了提供容器技术实现的Docker daemon及终端控制Docker CLI的应用程序。后续会继续发布Docker Compose和Docker Swarm的操作笔记，由于我的绝大部分应用案例都是云服务器，因此Docker Machine就略过了。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/801714/201801/801714-20180128143352428-704555727.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;docker安装-配置镜像加速器&quot;&gt;1. Docker安装 &amp;amp; 配置镜像加速器&lt;/h2&gt;
&lt;h3 id=&quot;a&quot;&gt;a：&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;# step 1：安装必要的一些系统工具&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;apt&lt;/span&gt; update
&lt;span class=&quot;kw&quot;&gt;apt&lt;/span&gt; -y install apt-transport-https ca-certificates curl software-properties-common

&lt;span class=&quot;co&quot;&gt;# step 2：安装GPG证书&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;curl&lt;/span&gt; -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;apt-key&lt;/span&gt; add -

&lt;span class=&quot;co&quot;&gt;# Step 3：写入软件源信息&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;add-apt-repository&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu &lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;lsb_release&lt;/span&gt; -cs&lt;span class=&quot;ot&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; stable&quot;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;# Step 4：更新并安装 Docker-CE&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;apt&lt;/span&gt; -y update
&lt;span class=&quot;kw&quot;&gt;apt&lt;/span&gt; -y install docker-ce&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;b&quot;&gt;b：&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;mkdir&lt;/span&gt; -p /etc/docker
&lt;span class=&quot;kw&quot;&gt;tee&lt;/span&gt; /etc/docker/daemon.json &amp;lt;&amp;lt;-'EOF'
{
  &quot;registry-mirrors&quot;: [&quot;https://jrzzvzok.mirror.aliyu&lt;span class=&quot;kw&quot;&gt;ncs.com&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;]&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;EOF&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;systemctl daemon-reload&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;systemctl restart docker&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;dockerfile详解&quot;&gt;2. Dockerfile详解&lt;/h2&gt;
&lt;p&gt;Docker的架构很有魅力，他拥有类似于虚拟机性质的隔离机制，但并不是严格意义上的虚拟机。我还是喜欢拿货轮举例，以前我们是一条小船运一个集装箱的货物，现在可以把N个集装箱扔到一条大货轮上。每个容器（集装箱）共用宿主机（货轮）的内核（运载力），Dockerfile就像是每个集装箱中的货物清单和说明书，一般由以下五部分构成：&lt;/p&gt;
&lt;h3 id=&quot;基础指令&quot;&gt;2.1 基础指令&lt;/h3&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;FROM：&lt;/strong&gt; 指定基础镜像，且必须位于第一行，使用格式如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode dockerfile&quot;&gt;
&lt;code class=&quot;sourceCode dockerfile&quot;&gt;&lt;span class=&quot;kw&quot;&gt;FROM&lt;/span&gt; &amp;lt;image&amp;gt;
&lt;span class=&quot;kw&quot;&gt;FROM&lt;/span&gt; &amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt;
&lt;span class=&quot;kw&quot;&gt;FROM&lt;/span&gt; &amp;lt;image&amp;gt;@&amp;lt;digest&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker的原理基于Linux内核的隔离技术，且Linux From Scratch，因此&lt;code&gt;FROM scratch&lt;/code&gt;是docker中最基础的镜像，debian、ubuntu和centos等都基于scratch之上。在实际的运用中，如果必须从零开始搭建镜像的一般都选择&lt;code&gt;FROM debian&lt;/code&gt;作为基础镜像，不过大多数情况下一般都会以如下：&lt;code&gt;FROM python&lt;/code&gt;、&lt;code&gt;FROM nginx&lt;/code&gt;、&lt;code&gt;FROM java&lt;/code&gt;等为基础镜像。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;MAINTAINER：指定维护者信息，例：&lt;code&gt;MAINTAINER user user@mail.com&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;控制指令&quot;&gt;2.2 控制指令&lt;/h3&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;RUN：&lt;/strong&gt; 在构建的过程中指定需要被执行的命令，使用格式如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;RUN&lt;/span&gt; command param1 param2 &lt;span class=&quot;co&quot;&gt;# 更推荐&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;RUN&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;executable&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;param1&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;param2&quot;&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;WORKDIR：&lt;/strong&gt; 用于切换构建过程中的工作目录，例：&lt;code&gt;WORKDIR project&lt;/code&gt;。可配合环境变量使用，例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ENV&lt;/span&gt; BASEDIR /project
&lt;span class=&quot;kw&quot;&gt;WORKDIR&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$BASEDIR&lt;/span&gt;/test&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;ONBUILD: 在当前镜像被当做基础镜像时，执行其携带指令，例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ONBUILD&lt;/span&gt; RUN echo &lt;span class=&quot;st&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;“hello world”会在子镜像被构建的过程中输出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;引入指令&quot;&gt;2.3 引入指令&lt;/h3&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;0.5&quot;&gt;
&lt;p&gt;&lt;strong&gt;COPY：&lt;/strong&gt; 拷贝文件或目录，格式：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;src&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;dest&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;COPY&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;&amp;lt;src&amp;gt;&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;&amp;lt;dest&amp;gt;&quot;&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;ADD：&lt;/strong&gt; 在COPY的基础之上，ADD可识别压缩文件，例：&lt;code&gt;ADD rootfs.tar.xz /&lt;/code&gt;。理论上也可添加网络地址，但还是建议在RUN指令中执行wget或curl命令，感觉这样更加可控。实际应用为了和COPY做功能区分，ADD一般只用作解压文件（仅我个人的使用习惯）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;执行指令&quot;&gt;2.4 执行指令&lt;/h3&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;3.5&quot;&gt;
&lt;p&gt;&lt;strong&gt;CMD：&lt;/strong&gt; 容器启动时需要执行的命令，格式：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;CMD&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;executable&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;param1&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;param2&quot;&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;# 更推荐&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;CMD&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;param1&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;param2&quot;&lt;/span&gt;]
&lt;span class=&quot;kw&quot;&gt;CMD&lt;/span&gt; command param1 param2 &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;若在docker run中指定启动命令，则CMD将被覆盖。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;ENTRYPOINT：主程序启动前的准备指令，用于启动主程序所依赖的服务，格式同CMD（基本上没用过就不介绍了，而且容易出错，不推荐使用）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;配置指令&quot;&gt;2.5 配置指令&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;EXPOSE： 暴露容器端口，格式：&lt;code&gt;EXPOSE &amp;lt;port&amp;gt; [&amp;lt;port&amp;gt;...]&lt;/code&gt;，注意此处的暴露端口和docker run 中-p指定的映射端口是两个概念。&lt;/li&gt;
&lt;li&gt;ENV： 声明环境变量，格式：&lt;code&gt;ENV &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; ...&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;LABEL： 标记，格式：&lt;code&gt;LABEL &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;...&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;USER： 设置启动容器的用户，格式：&lt;code&gt;USER daemo&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;ARG： 设置变量，格式同ENV。&lt;/li&gt;
&lt;li&gt;STOPSIGNAL： 容器停止时给应用程序发出的信号，例：&lt;code&gt;STOPSIGNAL SIGKELL&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;SHELL： 指定shell，例：&lt;code&gt;SHELL [&quot;bash&quot;,&quot;-c&quot;]&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;docker-命令详解&quot;&gt;3. Docker 命令详解&lt;/h2&gt;
&lt;p&gt;为了避免喧宾夺主，此处仅摘录我个人操作中较为常用的命令。&lt;/p&gt;
&lt;h3 id=&quot;生命周期管理&quot;&gt;3.1 生命周期管理&lt;/h3&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;10.5&quot;&gt;
&lt;p&gt;&lt;strong&gt;run：&lt;/strong&gt; 创建并运行容器，格式：&lt;code&gt;docker run [OPTIONS] IMAGE [COMMAND] [ARG...]&lt;/code&gt;，参数说明：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;-d&lt;/span&gt; , --detach            &lt;span class=&quot;co&quot;&gt;# 后台运行&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;-it&lt;/span&gt;, --interactive tty   &lt;span class=&quot;co&quot;&gt;# 交互终端形式运行&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;-p&lt;/span&gt; , --publish list      &lt;span class=&quot;co&quot;&gt;# 指定端口&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;-v&lt;/span&gt; , --volume list       &lt;span class=&quot;co&quot;&gt;# 挂载存储卷&lt;/span&gt;
     &lt;span class=&quot;kw&quot;&gt;--name&lt;/span&gt; string       &lt;span class=&quot;co&quot;&gt;# 定义名字&lt;/span&gt;
     &lt;span class=&quot;kw&quot;&gt;--rm&lt;/span&gt;                &lt;span class=&quot;co&quot;&gt;# 容器终止后自动删除（不支持在后台运行的容器）&lt;/span&gt;
     &lt;span class=&quot;kw&quot;&gt;--restart&lt;/span&gt; string    &lt;span class=&quot;co&quot;&gt;# no、on-failure（非正常退出时重启，on-failure:3最多重启三次）、always、unless-stopped&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;docker run的参数甚多，可通过&lt;code&gt;--help&lt;/code&gt;查询，后续这些复杂的配置都会移交给Docker Compose，以上几个足以应用70%~80%的场景，例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 类似ubuntu这类容器必须以-it交互终端形式运行，否则无法在后台保留&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; run -it -d --name my-ubuntu ubuntu&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 端口映射和挂载数据卷&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; run -d \
-p 8080:80 \
-v /data/www:/usr/share/nginx/html\
--name my-nginx nginx&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;start/stop/restart：&lt;code&gt;docker start/stop/restart my-container&lt;/code&gt;。&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;rm：移除容器，格式：&lt;code&gt;docker rm [OPTIONS] CONTAINER [CONTAINER...]&lt;/code&gt;，参数说明：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;-f&lt;/span&gt;, --force     Force the removal of a running container
&lt;span class=&quot;kw&quot;&gt;-l&lt;/span&gt;, --link      Remove the specified link
&lt;span class=&quot;kw&quot;&gt;-v&lt;/span&gt;, --volumes   Remove the volumes associated with the container&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;exec：在运行的容器中执行命令，不过更常用的还是先进入容器再执行命令，例子:&lt;code&gt;docker exec -it my-nginx bash&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;容器操作&quot;&gt;3.2 容器操作&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ps：&lt;/strong&gt; 列出容器，常用:&lt;code&gt;docker ps -anq&lt;/code&gt;，参数说明：all、n last（最新n个容器）、quiet（只显示容器编号）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;top：&lt;/strong&gt; 查看容器中的进程信息，例：&lt;code&gt;docker top my-container&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;logs：&lt;/strong&gt; 查看容器日志，常用:&lt;code&gt;docker logs -f --tail&lt;/code&gt;，参数说明：follow、--tail n（最新条日志）。&lt;/li&gt;
&lt;li&gt;port：查看端口映射情况，例：&lt;code&gt;docker port my-container&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;镜像仓库&quot;&gt;3.3 镜像仓库&lt;/h3&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;6.5&quot;&gt;
&lt;p&gt;&lt;strong&gt;login/logout：&lt;/strong&gt; 镜像仓库的登录和退出，格式：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; login [OPTIONS] [SERVER]
&lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; logout  [SERVER]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果是Docker Hub，则示例如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; login -u username -p passward
&lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; logout&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在生产环境中，我们一般会选择使用云厂商的镜像仓库，例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; login -u yo****@qq.com -p ****** registry-vpc.cn-hangzhou.aliyuncs.com
&lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; logout registry-vpc.cn-hangzhou.aliyuncs.com &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pull：&lt;/strong&gt; 拉取镜像，最常用的命令之一，格式：&lt;code&gt;docker pull [OPTIONS] NAME[:TAG|@DIGEST]&lt;/code&gt;。&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;push：&lt;/strong&gt; 上传镜像，格式：&lt;code&gt;docker push [OPTIONS] NAME[:TAG]&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;本地镜像管理&quot;&gt;3.4 本地镜像管理&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;images：&lt;/strong&gt; 列出本地镜像，常用&lt;code&gt;docker images -q&lt;/code&gt;，参数说明：quiet（只显示image Id）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rmi：&lt;/strong&gt; 删除本地镜像，常用&lt;code&gt;docker rmi -f&lt;/code&gt;，参数说明：force。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tag：&lt;/strong&gt; 标记镜像，归入仓库，格式：&lt;code&gt;docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]&lt;/code&gt;，例：&lt;code&gt;docker tag ubuntu youclk/my-ubuntu:v1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;build：&lt;/strong&gt; 使用Dockerfile创建镜像，格式：&lt;code&gt;docker build [OPTIONS] PATH | URL | -&lt;/code&gt;，参数说明：-t tag 例：&lt;code&gt;docker build -t youclk/my-ubuntu:v1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;
&lt;p&gt;静夜听钟却念念不安，举首相望，恐知者唯灯而~哀哉！整理至此，小弟拙笔盼君悦之。&lt;/p&gt;
</description>
<pubDate>Sun, 18 Feb 2018 16:11:00 +0000</pubDate>
<dc:creator>捷义</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/youclk/p/8371108.html</dc:identifier>
</item>
<item>
<title>WPF XAML 资源样式模板属性存放位置 - 梦机器</title>
<link>http://www.cnblogs.com/DMSkin/p/8453062.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/DMSkin/p/8453062.html</guid>
<description>&lt;p&gt;WPF的XAML 资源申明 类似HTML。&lt;/p&gt;
&lt;p&gt;整体来说分3种&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.行类资源样式属性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.1 行内属性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;lt;Button Content=&quot;按钮&quot; Foreground=&quot;White&quot; FontSize=&quot;30&quot;&amp;gt;&amp;lt;/Button&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.2 行内样式 模板（没多大意义）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;lt;Button Content=&quot;按钮&quot;&amp;gt;
  &amp;lt;Button.Style&amp;gt;
         &amp;lt;Style TargetType=&quot;Button&quot;&amp;gt;
                    &amp;lt;Setter Property=&quot;Foreground&quot; Value=&quot;White&quot;&amp;gt;&amp;lt;/Setter&amp;gt;
                    &amp;lt;Setter Property=&quot;FontSize&quot; Value=&quot;30&quot;&amp;gt;&amp;lt;/Setter&amp;gt;
                    &amp;lt;Setter Property=&quot;Template&quot;&amp;gt;
                        &amp;lt;Setter.Value&amp;gt;
                            &amp;lt;ControlTemplate TargetType=&quot;Button&quot;&amp;gt;
                                &amp;lt;Grid&amp;gt;&amp;lt;/Grid&amp;gt;
                            &amp;lt;/ControlTemplate&amp;gt;
                        &amp;lt;/Setter.Value&amp;gt;
                    &amp;lt;/Setter&amp;gt;
          &amp;lt;/Style&amp;gt;
  &amp;lt;/Button.Style&amp;gt;
  &amp;lt;Button.Template&amp;gt;
           &amp;lt;ControlTemplate TargetType=&quot;Button&quot;&amp;gt;
                    &amp;lt;Grid&amp;gt;&amp;lt;/Grid&amp;gt;
           &amp;lt;/ControlTemplate&amp;gt;
  &amp;lt;/Button.Template&amp;gt;
&amp;lt;/Button&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;2.头部资源样式属性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.1 头部样式模板 （申明）&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;lt;Window.Resources&amp;gt;
        &amp;lt;Style x:Key=&quot;xxx&quot; TargetType=&quot;Button&quot;&amp;gt;
            &amp;lt;Setter Property=&quot;Foreground&quot; Value=&quot;White&quot;&amp;gt;&amp;lt;/Setter&amp;gt;
            &amp;lt;Setter Property=&quot;FontSize&quot; Value=&quot;30&quot;&amp;gt;&amp;lt;/Setter&amp;gt;
            &amp;lt;Setter Property=&quot;Template&quot;&amp;gt;
                &amp;lt;Setter.Value&amp;gt;
                    &amp;lt;ControlTemplate TargetType=&quot;Button&quot;&amp;gt;
                        &amp;lt;Grid&amp;gt;&amp;lt;/Grid&amp;gt;
                    &amp;lt;/ControlTemplate&amp;gt;
                &amp;lt;/Setter.Value&amp;gt;
            &amp;lt;/Setter&amp;gt;
        &amp;lt;/Style&amp;gt;
        &amp;lt;ControlTemplate x:Key=&quot;xx&quot; TargetType=&quot;Button&quot;&amp;gt;
            &amp;lt;Grid&amp;gt;&amp;lt;/Grid&amp;gt;
        &amp;lt;/ControlTemplate&amp;gt;
&amp;lt;/Window.Resources&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.2 头部样式模板 （引用）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;lt;Window.Resources&amp;gt;
        &amp;lt;ResourceDictionary&amp;gt;
            &amp;lt;ResourceDictionary.MergedDictionaries&amp;gt;
                &amp;lt;ResourceDictionary Source=&quot;Dictionary.xaml&quot;/&amp;gt;
            &amp;lt;/ResourceDictionary.MergedDictionaries&amp;gt;
        &amp;lt;/ResourceDictionary&amp;gt;
&amp;lt;/Window.Resources&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;3.全局资源样式属性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;App.xaml&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
    &amp;lt;Application.Resources&amp;gt;
        &amp;lt;ResourceDictionary&amp;gt;&lt;br/&gt;&amp;lt;ResourceDictionary.MergedDictionaries&amp;gt;
                &amp;lt;ResourceDictionary Source=&quot;Dictionary.xaml&quot;/&amp;gt;
            &amp;lt;/ResourceDictionary.MergedDictionaries&amp;gt;&lt;br/&gt;&amp;lt;Style x:Key=&quot;xxx&quot; TargetType=&quot;Button&quot;&amp;gt;
                &amp;lt;Setter Property=&quot;Foreground&quot; Value=&quot;White&quot;&amp;gt;&amp;lt;/Setter&amp;gt;
                &amp;lt;Setter Property=&quot;FontSize&quot; Value=&quot;30&quot;&amp;gt;&amp;lt;/Setter&amp;gt;
                &amp;lt;Setter Property=&quot;Template&quot;&amp;gt;
                    &amp;lt;Setter.Value&amp;gt;
                        &amp;lt;ControlTemplate TargetType=&quot;Button&quot;&amp;gt;
                            &amp;lt;Grid&amp;gt;&amp;lt;/Grid&amp;gt;
                        &amp;lt;/ControlTemplate&amp;gt;
                    &amp;lt;/Setter.Value&amp;gt;
                &amp;lt;/Setter&amp;gt;
            &amp;lt;/Style&amp;gt;
            &amp;lt;ControlTemplate x:Key=&quot;xx&quot; TargetType=&quot;Button&quot;&amp;gt;
                &amp;lt;Grid&amp;gt;&amp;lt;/Grid&amp;gt;
            &amp;lt;/ControlTemplate&amp;gt;
        &amp;lt;/ResourceDictionary&amp;gt;
    &amp;lt;/Application.Resources&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;！！！！！！！！！！！！！！配合资源字典的使用！！！！！！！！！　&lt;/span&gt;　&lt;/p&gt;

&lt;p&gt;&lt;span&gt;说明：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.行类属性尽量少用，只有特殊控件 需要用到行内属性，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   正确的做法是封装统一风格的所有控件。&lt;br/&gt;  （例如按钮，统一高宽，字体，字体大小，然后申明到独立的资源字典中，&lt;br/&gt;    在App.xaml中引用）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.头部资源引用情况用于 不同 Window 适应不同主题或者风格的情况。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   比如为某一个窗口申明一个当前窗口单独使用的样式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  （例如播放器的旋转控件，只有一个页面用到，只需要在Window级引用对应资源字典）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   不放在App.xaml原因是为了降低内存消耗。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.App.xaml 里面的资源引用适用于全局资源。理论上每一个被申明的Window&lt;br/&gt;   都会创建一个对应资源字典的实例。除非是每个Window都会用到的模块，&lt;br/&gt;    不然建议放到对应Window级&lt;br/&gt;  &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 18 Feb 2018 11:33:00 +0000</pubDate>
<dc:creator>梦机器</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/DMSkin/p/8453062.html</dc:identifier>
</item>
<item>
<title>------ 新春第一炮：阶乘算法性能分析与 double fault 蓝屏故障排查 Part I ------ - f1yin9_0x5hark</title>
<link>http://www.cnblogs.com/flying-shark/p/8452931.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/flying-shark/p/8452931.html</guid>
<description>&lt;p&gt;——————————————————————————————————————————————————————————————————————————&lt;/p&gt;
&lt;p&gt;&lt;span&gt;春节期间闲来无事想研究下算法，上机测试代码却遇到了意外错误，在此记录整个过程，祝各位新的一年在算法设计和故障排查&lt;/span&gt;&lt;span&gt;方&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;面的思维敏锐度媲美 dog 的&lt;/span&gt;&lt;span&gt;嗅觉！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;——————————————————————————————————————————————————————————————————————————&lt;/p&gt;

&lt;p&gt;&lt;span&gt;整数 n 的阶乘（factorial）记作“&lt;span&gt;n!&lt;/span&gt;”，比如要计算 5!，那么就是计算 5 * 4 * 3 * 2 * 1 = 120。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在 32 位系统上，“&lt;span&gt;unsigned int（ULONG）&lt;/span&gt;”型变量能够持有的最大 10 进制值为 4,294,967,295（FFFF FFFF），意味着无符号数最多只能用来计算&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;12!（479,001,600 = 1C8C FC00）；若计算 13!（6,227,020,800 = 1 7328 CC00）就会发生溢出。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;类似地，“int”型变量能够持有的最大 10 进制值为 2,147,483,647（7FFF FFFF），意味着有符号数最多也只能用来计算&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;12!；若计算 13! 就会发生&lt;span&gt;下溢&lt;/span&gt;（8000 0000 = -2,147,483,648）。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;一般的编程范式通常以&lt;span&gt;函数递归调用自身&lt;/span&gt;来实现阶乘计算，并在函数内部添加递归的终止条件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下图是一种叫做“尾递归”的阶乘计算算法，从源码级别来看，它的巧妙之处在于第二个形参“computed_value”可以用来保存&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本次递归的计算结果，然后作为下一次的输入。每次第一个参数“number”的值都递减，终止条件就是当它降到 1 时，即返回&lt;/span&gt;&lt;span&gt;最新的 computed_value&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;值。&lt;/span&gt;&lt;span&gt;“&lt;span&gt;tail_recursivef_factorial()&lt;/span&gt;”开头的判断逻辑确保了我们不会因为计算 13! 或更大数的阶乘导致溢出：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218161453546-954502993.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;作为对比，下图则是另一种“基本递归”的阶乘计算算法，“&lt;span&gt;recursive_factorial()&lt;/span&gt;”只有一个形参，就是要计算阶乘的正整数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;前面的逻辑大致与 tail_recursivef_factorial() 相同，除了最后那条 return 语句，它把对自身的递归调用放进了一个&lt;/span&gt;&lt;span&gt;表达式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;中，这种做法对性能的影响是&lt;/span&gt;&lt;span&gt;致命的，因为不得不等待递归调用终止才能完成整个表达式的求值计算：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218161647874-388493315.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; ————————————————————————————————————————————————————————————————————————————————————&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假设我们忽略溢出的情况，或者在 64 位系统上执行这段代码，就可以传入更大的正整数。而从源码上看，recursive_factorial() &lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;性能严重依赖于输入&lt;/span&gt;&lt;span&gt;参数——试想要计算 100!，它可能需要反复地创建，销毁函数调用栈帧 100 次，才能完成表达式求值并&lt;/span&gt;&lt;span&gt;返&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;回。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;反观 tail_recursivef_factorial()，因为它引入了一个额外变量存储每次调用的结果，从形式上而言与 for 循环并无太大区别，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“貌似”编译器可以优化这段代码来生成与 for 循环类似的汇编指令，从而避免函数调用造成的额外 CPU 时钟周期开销（反复的&lt;/span&gt;&lt;span&gt;压&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;栈弹栈都需要访问内&lt;/span&gt;&lt;span&gt;存）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们的美好愿望是：同样计算 100!，tail_recursivef_factorial() 无需多余的 99 次函数调用栈帧开销，在汇编级别&lt;/span&gt;&lt;span&gt;直接用与类似 for&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;循环的迭代控制结构即可&lt;/span&gt;&lt;span&gt;实现相同效果，使得执行时间大幅缩短。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在后面的调试环节你会看到：这个“美好愿望”或许对其它编译器而言能够成立，对 Visual C/C++ 编译器而言则不行——它还&lt;/span&gt;&lt;span&gt;不&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;够智能来进行尾递归优化&lt;/span&gt;&lt;span&gt;（或称尾递归“消除”）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;做性能分析就需要计算两者的执行时间，我们使用内核例程“&lt;span&gt;KeQuerySystemTime()&lt;/span&gt;”，分别在两个函数各自的调用前后获取一次&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当前系统时间，然后相减&lt;/span&gt;&lt;span&gt;得出差值，它就是两种阶乘计算算法的运行时间，如下图，注意黄框部分的逻辑，变&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;量&lt;/span&gt;&lt;span&gt;“&lt;span&gt;execution_time_of_factorial_algorithm&lt;/span&gt;”存储它们各自的运行时&lt;/span&gt;&lt;span&gt;间：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218162203358-1434632024.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218162236062-753538781.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 图中以内联汇编添加的软件断点是为了方便观察 KeQuerySystemTime() 如何使用“&lt;span&gt;LARGE_INTEGER&lt;/span&gt;”这个结构体：&lt;/span&gt;&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218162335187-989114892.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;原始文档写得很清楚—— KeQuerySystemTime() 输出的系统时间（由一枚“LARGE_INTEGER”型指针引用）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;是&lt;span&gt;从 1601年1月1日开始至当前的“100 纳秒”数量&lt;/span&gt;，通常约每 10 毫秒会更新一次系统时间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;KeQuerySystemTime() 的输出值是根据 GMT 时区计算的，使用 ExSystemTimeToLocalTime() 可以把它调整为&lt;/span&gt;&lt;span&gt;本地时区的值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;既然 1 毫秒 = 1000 微秒 = 1000000 纳秒，只需把这个值除以 10000 即可得到“毫秒数”，再除以 1000 即可得出以秒为单位&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;的运行时间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是事情没那么简单，你想看看：从 1601年1月1日以来到当前 KeQuerySystemTime() 调用经历了多少个“100 纳秒”，无论这&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;个&lt;/span&gt;&lt;span&gt;数值为何，肯定不是 32 位系统上的 4 字节变量能够容纳得下的，所以要么在 64 位 Windows 上调试这段代码，要么必须使用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;LARGE_INTEGER 结构体的 &lt;span&gt;QuadPart&lt;/span&gt; 字段，该字段实质上是内存中一个连续的 8 字节区域：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218162542249-430292783.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;以 32 位系统而言，ULONG 型变量最多支持 4294967295 个“100 纳秒”，亦即 429 秒；换言之，阶乘算法运行超过 7 分钟，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;就无法用 ULONG 变量（&lt;span&gt;execution_time_of_factorial_algorithm&lt;/span&gt;）存储执行时间（该值已溢出所以不正确）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-0-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-17-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-18-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-19-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-20-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-21-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-22-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-23-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-24-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-25-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-26-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-27-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-28-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-29-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-30-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-31-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-32-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-33-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-34-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-17-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-18-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-19-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-20-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-21-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-22-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-23-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-24-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-25-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-26-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-27-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-28-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-29-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-30-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-31-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-32-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-33-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-34-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-17-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-18-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-19-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-20-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-21-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-22-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-23-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-24-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-25-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-26-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-27-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-28-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-29-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-30-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-31-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-32-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-33-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-34-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这不是问题，我们的测试代码载体是内核态驱动程序，没有内核-用户模式的切换开销，加上现代高性能微处理器每秒都能够执行&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;上千万条指令，所以上述两种算法再怎么低效，执行时间应该都在&lt;span&gt;数十毫秒级别&lt;/span&gt;，除非我们计算 1000！乃至 10000！——在后面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;你会看到，从理论上而言（忽略 64 位数能够表示的上限值，&lt;span&gt;即便连 64 位数也无法存放 21! 和更大的正整数阶乘值&lt;/span&gt;），&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;recursive_factorial() 求值 10000！所需的运行时间可能缓慢到秒级别，但事实上，每个线程的内核栈&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;空间是很狭小的，以至于当我们计算 255! 时就会因为向内核栈上压入过多的参数而越界，访问到了无效的内存地址，导致页错&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;误，&lt;/span&gt;&lt;span&gt;而此后向同一个无效地址压入&lt;span&gt;异常现场&lt;/span&gt;并转移控制到错误处理程序之前，会进一步升级成“&lt;span&gt;double fault&lt;/span&gt;”，因为连续两次访&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;存&lt;/span&gt;&lt;span&gt;操作都是无效的，最终致使系统崩溃蓝屏（或者断入调试器）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;总而言之，两个从 1601年1月1日以来的历时是 64 位数，相减后只有低 32 位——多数情况下，高 32 位都是零。这样我们就能够&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比较&lt;/span&gt;&lt;span&gt;两种算法的性能优劣了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-17-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-18-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-19-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-20-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-21-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-22-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-23-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-24-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-25-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-26-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-27-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-28-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-29-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-30-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-31-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-32-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-33-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-34-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-17-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-18-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-19-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-20-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-21-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-22-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-23-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-24-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-25-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-26-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-27-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-28-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-29-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-30-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-31-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-32-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-33-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-34-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-17-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-18-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-19-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-20-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-21-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-22-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-23-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-24-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-25-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-26-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-27-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-28-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-29-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-30-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-31-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-32-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-33-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-34-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;正如你可能意识到的那样：当要计算阶乘的数太小时，两者间的性能差距不明显，所以我把上面计算 12! 的逻辑改成了计算 229！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;，同时又不会导致内核栈溢出，调试过程如下，首先来看看 tail_recursivef_factorial() 的反汇编代码，它说明了微软 &lt;/span&gt;&lt;span&gt;Visual C/C++ 编译器是如何实现尾递归&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法对应的指令序列：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218163207890-1901021019.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;上图编号 1 黄框中的汇编代码把 ebp+8 处的内核内存与立即数 0xe6（230）比较（&lt;span&gt;cmp&lt;/span&gt;），如果低于等于 230 就跳转到 9f52e044&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;地址处执行（&lt;span&gt;jbe&lt;/span&gt;），反之则清零 eax 寄存器后跳转到 9f52e074 地址处，在那里的“pop ebp”和“ret 8”（图中没有绘出）指令序列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;导致 tail_recursivef_factorial() 返回——因此我们推断 ebp+8 就是第一个参数 &lt;span&gt;number&lt;/span&gt;，并对应于源码中检查它是否大于 &lt;/span&gt;&lt;span&gt;230 的逻辑；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;类似地，编号 2 黄框中的汇编代码对应源码中检查 number 是否等于 0 的逻辑——如果不等于 0 则跳转（&lt;span&gt;jne&lt;/span&gt;）到 9f52e053&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;地址处（编号 3 黄框），在该处继续检查 number 是否等于 1 ——如果 number 已经递减至 1，表明满足递归退出条件，把&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ebp + c 处的栈内存值（亦即 第二个参数 &lt;span&gt;computed_value&lt;/span&gt; ）拷贝到 eax 寄存器内作为返回值，跳转到 9f52e074 地址处返回；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;否则，把 number 移动到 eax 中并与 computed_value 执行&lt;span&gt;有符号乘法（imul）&lt;/span&gt;，然后把存储在 eax 中的计算结果压入栈上，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同时 number 递减 1 后的值移动到 ecx 中（通常被当成&lt;strong&gt;循环计数器&lt;/strong&gt;），为下一次的 tail_recursivef_factorial() 调用做好准备。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从上图你可以发现两件有趣的事情：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其一，尽管我在源码中显示指定了两个参数的类型，以及返回值均为“ULONG”（无符号），但 Visual C/C++ 编译器依旧无动于衷，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;坚持在汇编级别使用有符号数乘法指令“imul”，而非无符号的版本“mul”；而根据 intel 手册，“imul”指令的双操作数模式中，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果计算结果超过了目的操作数（本例中是 eax）的大小，则&lt;span&gt;从乘积的最高位开始截断——若被丢弃的不是符号位，该指令会设置&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;EFLAG 寄存器中的溢出和进位标志&lt;/span&gt;—— 32 位有符号数的上限值为 2,147,483,647（7FFF FFFF），若超出就会下溢，结合上面的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;反汇编代码推算：当第四次递归调用时（229 * 228 * 227 * 226，亦即当 ecx 值为 0xe2 时）就会发生下溢，&lt;/span&gt;&lt;span&gt;从而设置相关标志位，我们在后面调试会验证；&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;其二，尽管源码中的尾递归调用已经刻意书写成能够被编译器利用等价的迭代控制结构替换，从而节约反复的函数调用开销，但&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Visual C/C++ 却笨得没有意识到这一点，还是傻傻地照本宣科来翻译，&lt;span&gt;这导致我们的 tail_recursivef_factorial() 实际执行&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;性能不如理论上那样比基本递归的 recursive_factorial() 优越！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  &lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-17-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-18-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-19-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-20-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-21-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-22-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-23-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-24-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-25-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-26-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-27-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-28-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-29-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-30-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-31-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-32-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-33-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-34-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-17-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-18-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-19-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-20-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-21-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-22-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-23-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-24-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-25-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-26-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-27-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-28-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-29-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-30-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-31-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-32-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-33-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-34-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-17-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-18-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-19-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-20-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-21-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-22-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-23-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-24-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-25-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-26-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-27-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-28-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-29-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-30-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-31-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-32-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-33-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-34-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;了解 tail_recursivef_factorial() 的机器机实现后，接下来就是断点设置的艺术了——当前触发的断点是我在源码中指定的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;，位于 KeQuerySystemTime() 调用前，目的是检查 LARGE_INTEGER 结构体是怎样被使用的；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218163908655-304935912.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;上图中 ebp-18 处的内核栈内容是啥？让我们观察 DriverEntry() 的局部变量统计信息：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218164033593-851879865.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;原来 ebp-18 处就是一个 LARGE_INTEGER 实例—— &lt;span&gt;current_time_BEFORE_compute_factorial&lt;/span&gt;，而指令“lea eax,[ebp-18h]”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;把它的地址移动到 eax 中，然后压入栈上，这符合 KeQuerySystemTime() 的形参类型要求—— C 的取地址操作符“&lt;span&gt;&amp;amp;&lt;/span&gt;”在汇编级别&lt;/span&gt;&lt;span&gt;用“&lt;span&gt;lea&lt;/span&gt;”指令实&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现，形参“&lt;strong&gt;&lt;span&gt;P&lt;/span&gt;&lt;/strong&gt;LARGE_INTEGER”需要持有一个 LARGE_INTEGER 实例的地址，单步跟踪（F8）验证：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218164247046-815958998.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;此刻我们进入了系统例程 KeQuerySystemTime() 内部，我们想知道它当它返回后，变量 current_time_BEFORE_compute_factorial&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;的内部组织形式；同时还要在后续的 tail_recursivef_factorial() 调用内部设置几个断点，方便研究“imul”指令的行为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218164406437-1658329909.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;上图分别在 KeQuerySystemTime() 返回后（&lt;span&gt;返回地址 9f52e0a1&lt;/span&gt; 那里），以及 tail_recursivef_factorial() 内部的“imul”指令&lt;/span&gt;&lt;span&gt;地址处（&lt;span&gt;9f52e063&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;处），设置了两个断点，我们按下“g”键继续执行以触发第一个断点，然后观察存储了当前系统时间的 &lt;/span&gt;&lt;span&gt;current_time_BEFORE_compute_factorial 结&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;构内部：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218164542062-946644649.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;可以看到 current_time_BEFORE_compute_factorial 的 QuadPart 字段 10 进制值为 131633454897796336，它就是自从&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1601年1月1日以来经过的“100”纳秒数量——让我们转换成年：131633454897796336 / (10000 * 1000 * 60 * 60 * 24 * 365) = &lt;span&gt;417&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;最终结果等于 2018 - 1601 = 417 年&lt;/strong&gt;。至此我们成功通过 KeQuerySystemTime() 获取到当前系统时间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此外，ebp-10 处的内核栈存储另一个 LARGE_INTEGER 实例：current_time_AFTER_compute_factorial，两者占用的空间差值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（0x8 字节）就是 LARGE_INTEGER 结构体的大小。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;先&lt;/span&gt;&lt;span&gt;禁用掉 9f52e063 的断点，然后在 &lt;span&gt;9f52e0bb&lt;/span&gt; 处，也就是第二次 KeQuerySystemTime() 调用的返回地址设置第三个断点，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这样可以准确地计算出尾递归阶乘算法的执行时间，如下图所示，把这两个 LARGE_INTEGER 的 &lt;span&gt;QuadPart&lt;/span&gt; 字段值相减，换算成毫秒，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;执行时间为：(131633454897826432 - 131633454897796336) / 10000 = &lt;span&gt;3 毫秒&lt;/span&gt;；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;229! 值为零是因为发生了溢出（前面讲过，32 位系统上计算 13! 就会溢出）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218164901765-406357319.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218164954249-1941835198.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218165130015-1907718344.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;经过多次反复调试，证明 tail_recursivef_factorial() 计算 229! 时的运行时间在 2—4 毫秒之间，看来即便没有做编译器优化，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CPU 的高速运算能力也让两百多次的函数调用在毫秒级别就能够完成。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-17-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-18-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-19-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-20-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-21-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-22-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-23-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-24-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-25-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-26-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-27-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-28-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-29-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-30-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-31-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-32-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-33-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-34-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-17-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-18-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-19-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-20-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-21-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-22-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-23-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-24-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-25-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-26-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-27-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-28-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-29-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-30-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-31-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-32-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-33-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-34-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-17-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-18-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-19-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-20-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-21-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-22-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-23-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-24-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-25-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-26-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-27-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-28-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-29-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-30-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-31-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-32-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-33-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;span class=&quot;_3gl1 _5zz4&quot; data-offset-key=&quot;5sce0-34-0&quot;&gt;&lt;span class=&quot;_ncl&quot;&gt;👽&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这一次让我们在 tail_recursivef_factorial() 内部的“imul”指令地址处设置断点，&lt;span&gt;由于递归调用的关系，这个断点每次都会&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;被触发，直至满足终止条件&lt;/span&gt;；在经过四次调用后的概况如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218165227077-791767737.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如上图所示，在第四次执行“imul”指令前，内核栈上已经有 4 次 tail_recursivef_factorial() 的栈帧记录；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当前的 Computed_Value 值为 &lt;span&gt;11,852,124（0xb4d95c）&lt;/span&gt;，也就是 229 * 228 * 227 ——前三次“imul”指令的执行结果，假设&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本次再执行“imul”指令把 Computed_Value 与 eax 的当前值（0xe2，亦即 226）相乘，就会发生溢出。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“elf = 00000206”是执行前的 EFLAG 寄存器内容，解码后的标志位如下图，表明尚未溢出：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218165802655-1585867354.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另一个关键信息是红框处的 ebp 值，它暗示每次递归调用都会消耗 &lt;span&gt;16 字节&lt;/span&gt;的内核栈空间——这 16 字节是怎么来的呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再次回顾 tail_recursivef_factorial() 的反汇编代码，第一条使用栈上 4 字节空间的指令是“push ebp”、第二条是&lt;/span&gt;&lt;span&gt;“push eax”，第三条是“push&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ecx”。。。而在“call computefactorialtail!tail_recursivef_factorial”执行前&lt;/span&gt;&lt;span&gt;，会隐式地压入 4 字节的返回地址，这&lt;/span&gt;&lt;span&gt;是“call”指令内建的功能，不会作为&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;反汇编输出：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218165441874-21465168.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;查看当前执行线程的内核栈，可知其下限在 &lt;span&gt;8b715000&lt;/span&gt; 地址处；而首次的 tail_recursivef_factorial() 调用是从 &lt;/span&gt;&lt;span&gt;&lt;span&gt;8b717aa8&lt;/span&gt; 地址处开始消耗栈空间的，换言&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;之：(8b717aa8 - 8b715000) / 0x10 = 0n682，仅能够供 682 次递归调用，&lt;/span&gt;&lt;span&gt;&lt;span&gt;第 683 次调用就会越界&lt;/span&gt;，访问到尚未分配的物理内存区域，引发一次页错误，后&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;面我修改源码计算 683! 并在调试时就会出现&lt;/span&gt;&lt;span&gt;这种情况，它会升级为“double fault”：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218165632499-152842818.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 现在单步执行，然后检查“imul”指令的效果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1318637/201802/1318637-20180218165907405-2108204038.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;上图中的 EFLAG 寄存器内容（0xa83）经解码后显示&lt;span&gt;符号位&lt;/span&gt;和&lt;span&gt;溢出位&lt;/span&gt;都被设置了，表明乘法运算发生了下溢，观察 eax 中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;存储的计算结果“9fa7e338”，它的 10 进制值为“&lt;strong&gt;&lt;span&gt;-1,616,387,272&lt;/span&gt;&lt;/strong&gt;”，所以后续的计算结果都是错误的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; ——————————————————————————————————————————————————————————————————————————————————————&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;小结：本篇介绍通过获取当前系统时间来测量程序或一段代码&lt;span&gt;块&lt;/span&gt;执行性能的方法，揭示了神秘的“LARGE_INTEGER”工作机制，&lt;/span&gt;&lt;span&gt;并且比较源码级和机&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;器&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;指令级算法实现的区别——其差异性完全由编译器主导；接着演示 32 位有符号数的溢出。。。所有&lt;/span&gt;&lt;span&gt;这些都是在内核态下进行的，因此可谓比一般的用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;户&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;态调试更“底层”。&lt;/span&gt;&lt;span&gt;限于篇幅，下一篇将比较另一种阶乘算法“recursive_factorial()”的机器级实现、执行性能，&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;然后通过递归调用访问无效的内核&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;栈区域触发“double fault”并进行故障排查！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;————————————————————————————————————————————————————————————————————————————————————————&lt;/p&gt;
</description>
<pubDate>Sun, 18 Feb 2018 09:04:00 +0000</pubDate>
<dc:creator>f1yin9_0x5hark</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/flying-shark/p/8452931.html</dc:identifier>
</item>
<item>
<title>JDBC【事务、元数据、改造JDBC工具类】 - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8452924.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8452924.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;一个SESSION所进行的所有更新操作要么一起成功，要么一起失败&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举个例子:&lt;strong&gt;A向B转账，转账这个流程中如果出现问题，事务可以让数据恢复成原来一样【A账户的钱没变，B账户的钱也没变】。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事例说明：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        * 我们来模拟A向B账号转账的场景&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        *   A和B账户都有1000块，现在我让A账户向B账号转500块钱&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        * */&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//JDBC默认的情况下是关闭事务的，下面我们看看关闭事务去操作转账操作有什么问题&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//A账户减去500块&lt;/span&gt;
            String sql = &lt;span class=&quot;st&quot;&gt;&quot;UPDATE a SET money=money-500 &quot;&lt;/span&gt;;
            preparedStatement = connection.&lt;span class=&quot;fu&quot;&gt;prepareStatement&lt;/span&gt;(sql);
            preparedStatement.&lt;span class=&quot;fu&quot;&gt;executeUpdate&lt;/span&gt;();

            &lt;span class=&quot;co&quot;&gt;//B账户多了500块&lt;/span&gt;
            String sql2 = &lt;span class=&quot;st&quot;&gt;&quot;UPDATE b SET money=money+500&quot;&lt;/span&gt;;
            preparedStatement = connection.&lt;span class=&quot;fu&quot;&gt;prepareStatement&lt;/span&gt;(sql2);
            preparedStatement.&lt;span class=&quot;fu&quot;&gt;executeUpdate&lt;/span&gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面看，我们的确可以发现A向B转账，成功了。可是&lt;strong&gt;如果A向B转账的过程中出现了问题呢？&lt;/strong&gt;下面模拟一下&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
            &lt;span class=&quot;co&quot;&gt;//A账户减去500块&lt;/span&gt;
            String sql = &lt;span class=&quot;st&quot;&gt;&quot;UPDATE a SET money=money-500 &quot;&lt;/span&gt;;
            preparedStatement = connection.&lt;span class=&quot;fu&quot;&gt;prepareStatement&lt;/span&gt;(sql);
            preparedStatement.&lt;span class=&quot;fu&quot;&gt;executeUpdate&lt;/span&gt;();
            
            &lt;span class=&quot;co&quot;&gt;//这里模拟出现问题&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; / &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;


            String sql2 = &lt;span class=&quot;st&quot;&gt;&quot;UPDATE b SET money=money+500&quot;&lt;/span&gt;;
            preparedStatement = connection.&lt;span class=&quot;fu&quot;&gt;prepareStatement&lt;/span&gt;(sql2);
            preparedStatement.&lt;span class=&quot;fu&quot;&gt;executeUpdate&lt;/span&gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显然，上面&lt;strong&gt;代码是会抛出异常的&lt;/strong&gt;，我们再来查询一下数据。&lt;strong&gt;A账户少了500块钱，B账户的钱没有增加&lt;/strong&gt;。&lt;strong&gt;这明显是不合理的&lt;/strong&gt;。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;我们可以通过事务来解决上面出现的问题&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
            &lt;span class=&quot;co&quot;&gt;//开启事务,对数据的操作就不会立即生效。&lt;/span&gt;
            connection.&lt;span class=&quot;fu&quot;&gt;setAutoCommit&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
            
            &lt;span class=&quot;co&quot;&gt;//A账户减去500块&lt;/span&gt;
            String sql = &lt;span class=&quot;st&quot;&gt;&quot;UPDATE a SET money=money-500 &quot;&lt;/span&gt;;
            preparedStatement = connection.&lt;span class=&quot;fu&quot;&gt;prepareStatement&lt;/span&gt;(sql);
            preparedStatement.&lt;span class=&quot;fu&quot;&gt;executeUpdate&lt;/span&gt;();

            &lt;span class=&quot;co&quot;&gt;//在转账过程中出现问题&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; / &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;

            &lt;span class=&quot;co&quot;&gt;//B账户多500块&lt;/span&gt;
            String sql2 = &lt;span class=&quot;st&quot;&gt;&quot;UPDATE b SET money=money+500&quot;&lt;/span&gt;;
            preparedStatement = connection.&lt;span class=&quot;fu&quot;&gt;prepareStatement&lt;/span&gt;(sql2);
            preparedStatement.&lt;span class=&quot;fu&quot;&gt;executeUpdate&lt;/span&gt;();
            
            &lt;span class=&quot;co&quot;&gt;//如果程序能执行到这里，没有抛出异常，我们就提交数据&lt;/span&gt;
            connection.&lt;span class=&quot;fu&quot;&gt;commit&lt;/span&gt;();

            &lt;span class=&quot;co&quot;&gt;//关闭事务【自动提交】&lt;/span&gt;
            connection.&lt;span class=&quot;fu&quot;&gt;setAutoCommit&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
            

        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e) {
            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                &lt;span class=&quot;co&quot;&gt;//如果出现了异常，就会进到这里来，我们就把事务回滚【将数据变成原来那样】&lt;/span&gt;
                connection.&lt;span class=&quot;fu&quot;&gt;rollback&lt;/span&gt;();
                
                &lt;span class=&quot;co&quot;&gt;//关闭事务【自动提交】&lt;/span&gt;
                connection.&lt;span class=&quot;fu&quot;&gt;setAutoCommit&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SQLException e1) {
                e1.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
            }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的程序也一样抛出了异常，A账户钱没有减少，B账户的钱也没有增加。&lt;/p&gt;
&lt;p&gt;注意：当Connection遇到一个未处理的SQLException时，系统会非正常退出，事务也会自动回滚，但&lt;strong&gt;如果程序捕获到了异常，是需要在catch中显式回滚事务的。&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;savapoint&quot;&gt;savapoint&lt;/h3&gt;
&lt;p&gt;我们还可以使用savepoint设置中间点。如果在某地方出错了，我们设置中间点，回滚到出错之前即可。&lt;/p&gt;
&lt;p&gt;应用场景：现在我们要算一道数学题，算到后面发现算错数了。前面的运算都是正确的，我们不可能重头再算【直接rollback】，最好的做法就是在&lt;strong&gt;保证前面算对的情况下，设置一个保存点。从保存点开始重新算。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意：&lt;strong&gt;savepoint不会结束当前事务，普通提交和回滚都会结束当前事务的&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;事务的隔离级别&quot;&gt;事务的隔离级别&lt;/h3&gt;
&lt;p&gt;数据库定义了4个隔离级别：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Serializable【可避免脏读，不可重复读，虚读】&lt;/li&gt;
&lt;li&gt;Repeatable read【可避免脏读，不可重复读】&lt;/li&gt;
&lt;li&gt;Read committed【可避免脏读】&lt;/li&gt;
&lt;li&gt;Read uncommitted【级别最低，什么都避免不了】&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;分别对应Connection类中的4个常量&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;TRANSACTION_READ_UNCOMMITTED&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TRANSACTION_READ_COMMITTED&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TRANSACTION_REPEATABLE_READ&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TRANSACTION_SERIALIZABLE&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;&lt;p&gt;脏读：&lt;strong&gt;一个事务读取到另外一个事务未提交的数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例子：A向B转账，&lt;strong&gt;A执行了转账语句，但A还没有提交事务，B读取数据，发现自己账户钱变多了&lt;/strong&gt;！B跟A说，我已经收到钱了。A回滚事务【rollback】，等B再查看账户的钱时，发现钱并没有多。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;不可重复读：&lt;strong&gt;一个事务读取到另外一个事务已经提交的数据，也就是说一个事务可以看到其他事务所做的修改&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;strong&gt;A查询数据库得到数据，B去修改数据库的数据，导致A多次查询数据库的结果都不一样【危害：A每次查询的结果都是受B的影响的，那么A查询出来的信息就没有意思了】&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;虚读(幻读)：&lt;strong&gt;是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;strong&gt;和不可重复读类似，但虚读(幻读)会读到其他事务的插入的数据，导致前后读取不一致&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;简单总结：&lt;strong&gt;脏读是不可容忍的，不可重复读和虚读在一定的情况下是可以的【做统计的肯定就不行】&lt;/strong&gt;。&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id=&quot;什么是元数据&quot;&gt;什么是元数据&lt;/h3&gt;
&lt;p&gt;元数据其实就是数据库，表，列的定义信息&lt;/p&gt;
&lt;h3 id=&quot;为什么我们要用元数据&quot;&gt;为什么我们要用元数据&lt;/h3&gt;
&lt;p&gt;即使我们写了一个简单工具类，我们的代码还是非常冗余。&lt;strong&gt;对于增删改而言，只有SQL和参数是不同的&lt;/strong&gt;，我们为何不把这些相同的代码抽取成一个方法？对于&lt;strong&gt;查询而言&lt;/strong&gt;，&lt;strong&gt;不同的实体查询出来的结果集是不一样的&lt;/strong&gt;。我们要&lt;strong&gt;使用元数据获取结果集的信息，才能对结果集进行操作&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ParameterMetaData --参数的元数据&lt;/li&gt;
&lt;li&gt;ResultSetMetaData --结果集的元数据&lt;/li&gt;
&lt;li&gt;DataBaseMetaData --数据库的元数据&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;p&gt;问题：我们&lt;strong&gt;对数据库的增删改查都要连接数据库，关闭资源，获取PreparedSteatment对象，获取Connection对象此类的操作，这样的代码重复率是极高的&lt;/strong&gt;，所以我们要对工具类进行增强&lt;/p&gt;
&lt;h3 id=&quot;增删改&quot;&gt;增删改&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;co&quot;&gt;//我们发现，增删改只有SQL语句和传入的参数是不知道的而已，所以让调用该方法的人传递进来&lt;/span&gt;
    
    &lt;span class=&quot;co&quot;&gt;//由于传递进来的参数是各种类型的，而且数目是不确定的，所以使用Object[]&lt;/span&gt;
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;update&lt;/span&gt;(String sql, Object[] objects) {

        Connection connection = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        PreparedStatement preparedStatement = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        ResultSet resultSet = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            connection = &lt;span class=&quot;fu&quot;&gt;getConnection&lt;/span&gt;();
            preparedStatement = connection.&lt;span class=&quot;fu&quot;&gt;prepareStatement&lt;/span&gt;(sql);

            &lt;span class=&quot;co&quot;&gt;//根据传递进来的参数，设置SQL占位符的值&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt; objects.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;; i++) {
                preparedStatement.&lt;span class=&quot;fu&quot;&gt;setObject&lt;/span&gt;(i + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, objects[i]);
            }

            &lt;span class=&quot;co&quot;&gt;//执行SQL语句&lt;/span&gt;
            preparedStatement.&lt;span class=&quot;fu&quot;&gt;executeUpdate&lt;/span&gt;();


        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
            e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;查询&quot;&gt;查询&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        1:对于查询语句来说，我们不知道对结果集进行什么操作【常用的就是把数据封装成一个Bean对象，封装成一个List集合】&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        2:我们可以定义一个接口，让调用者把接口的实现类传递进来&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        3:这样接口调用的方法就是调用者传递进来实现类的方法。【策略模式】&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;    */&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//这个方法的返回值是任意类型的，所以定义为Object。&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(String sql, Object[] objects, ResultSetHandler rsh) {

        Connection connection = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        PreparedStatement preparedStatement = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        ResultSet resultSet = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            connection = &lt;span class=&quot;fu&quot;&gt;getConnection&lt;/span&gt;();
            preparedStatement = connection.&lt;span class=&quot;fu&quot;&gt;prepareStatement&lt;/span&gt;(sql);

            &lt;span class=&quot;co&quot;&gt;//根据传递进来的参数，设置SQL占位符的值&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (objects != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt; objects.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;; i++) {
                    preparedStatement.&lt;span class=&quot;fu&quot;&gt;setObject&lt;/span&gt;(i + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, objects[i]);
                }
            }


            resultSet = preparedStatement.&lt;span class=&quot;fu&quot;&gt;executeQuery&lt;/span&gt;();

            &lt;span class=&quot;co&quot;&gt;//调用调用者传递进来实现类的方法，对结果集进行操作&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; rsh.&lt;span class=&quot;fu&quot;&gt;hanlder&lt;/span&gt;(resultSet);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;接口：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

    &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    * 定义对结果集操作的接口，调用者想要对结果集进行什么操作，只要实现这个接口即可&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    * */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; ResultSetHandler {
         Object &lt;span class=&quot;fu&quot;&gt;hanlder&lt;/span&gt;(ResultSet resultSet);
    
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;实现类：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

&lt;span class=&quot;co&quot;&gt;//接口实现类，对结果集封装成一个Bean对象&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; BeanHandler &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; ResultSetHandler {


    &lt;span class=&quot;co&quot;&gt;//要封装成一个Bean对象，首先要知道Bean是什么，这个也是调用者传递进来的。&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Class clazz;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BeanHandler&lt;/span&gt;(Class clazz) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;clazz&lt;/span&gt; = clazz;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;hanlder&lt;/span&gt;(ResultSet resultSet) {

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {

            &lt;span class=&quot;co&quot;&gt;//创建传进对象的实例化&lt;/span&gt;
            Object bean = clazz.&lt;span class=&quot;fu&quot;&gt;newInstance&lt;/span&gt;();

            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (resultSet.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;()) {

                &lt;span class=&quot;co&quot;&gt;//拿到结果集元数据&lt;/span&gt;
                ResultSetMetaData resultSetMetaData = resultSet.&lt;span class=&quot;fu&quot;&gt;getMetaData&lt;/span&gt;();

                &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt; resultSetMetaData.&lt;span class=&quot;fu&quot;&gt;getColumnCount&lt;/span&gt;(); i++) {

                    &lt;span class=&quot;co&quot;&gt;//获取到每列的列名&lt;/span&gt;
                    String columnName = resultSetMetaData.&lt;span class=&quot;fu&quot;&gt;getColumnName&lt;/span&gt;(i&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;);

                    &lt;span class=&quot;co&quot;&gt;//获取到每列的数据&lt;/span&gt;
                    String columnData = resultSet.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(i&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;);

                    &lt;span class=&quot;co&quot;&gt;//设置Bean属性&lt;/span&gt;
                    Field field = clazz.&lt;span class=&quot;fu&quot;&gt;getDeclaredField&lt;/span&gt;(columnName);
                    field.&lt;span class=&quot;fu&quot;&gt;setAccessible&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
                    field.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(bean,columnData);
                }

                &lt;span class=&quot;co&quot;&gt;//返回Bean对象&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; bean;
            }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;p&gt;【策略模式】简单理解：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;我们并不知道调用者想对结果集进行怎么样的操作，于是&lt;strong&gt;让调用者把想要做的操作对象传递过来&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们只要&lt;strong&gt;用传递过来的对象对结果集进行封装&lt;/strong&gt;就好了。
&lt;ul&gt;&lt;li&gt;至于调用者会传递什么对象过来，该对象要实现什么方法。我们可以&lt;strong&gt;使用接口来对其规范&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
对我个人理解，&lt;strong&gt;策略模式就是我们在使用别人API时，可以使用匿名内部类的时候。别人用的就是策略模式。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章的同学，&lt;strong&gt;可以关注微信公众号:Java3y&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sun, 18 Feb 2018 08:56:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8452924.html</dc:identifier>
</item>
<item>
<title>Java实现单链表的快速排序和归并排序 - morethink</title>
<link>http://www.cnblogs.com/morethink/p/8452914.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/morethink/p/8452914.html</guid>
<description>&lt;p&gt;本文描述了LeetCode 148题 &lt;a href=&quot;https://leetcode.com/problems/sort-list/description/&quot;&gt;sort-list&lt;/a&gt; 的解法。&lt;/p&gt;
&lt;p&gt;题目描述如下:&lt;br/&gt;Sort a linked list in O(n log n) time using constant space complexity.&lt;/p&gt;
&lt;p&gt;题目要求我们在O(n log n)时间复杂度下完成对单链表的排序，我们知道平均时间复杂度为O(n log n)的排序方法有快速排序、归并排序和堆排序。而一般是用数组来实现二叉堆，当然可以用二叉树来实现，但是这么做太麻烦，还得花费额外的空间构建二叉树，于是不采用堆排序。&lt;/p&gt;&lt;p&gt;故本文采用快速排序和归并排序来对单链表进行排序。&lt;/p&gt;

&lt;p&gt;在一般实现的快速排序中，我们通过首尾指针来对元素进行切分，下面采用快排的另一种方法来对元素进行切分。&lt;/p&gt;
&lt;p&gt;我们只需要两个指针p1和p2，这两个指针均往next方向移动，移动的过程中保持p1之前的key都小于选定的key，p1和p2之间的key都大于选定的key，那么当p2走到末尾时交换p1与key值便完成了一次切分。&lt;/p&gt;
&lt;p&gt;图示如下：&lt;br/&gt;&lt;img src=&quot;http://img.blog.csdn.net/20140326225106296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG91ZmVpX2Njc3Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot;/&gt;&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ListNode &lt;span class=&quot;fu&quot;&gt;sortList&lt;/span&gt;(ListNode head) {
    &lt;span class=&quot;co&quot;&gt;//采用快速排序&lt;/span&gt;
   &lt;span class=&quot;fu&quot;&gt;quickSort&lt;/span&gt;(head, &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;);
   &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; head;
}
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;quickSort&lt;/span&gt;(ListNode head, ListNode end) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (head != end) {
        ListNode node = &lt;span class=&quot;fu&quot;&gt;partion&lt;/span&gt;(head, end);
        &lt;span class=&quot;fu&quot;&gt;quickSort&lt;/span&gt;(head, node);
        &lt;span class=&quot;fu&quot;&gt;quickSort&lt;/span&gt;(node.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;, end);
    }
}

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; ListNode &lt;span class=&quot;fu&quot;&gt;partion&lt;/span&gt;(ListNode head, ListNode end) {
    ListNode p1 = head, p2 = head.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;;

    &lt;span class=&quot;co&quot;&gt;//走到末尾才停&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (p2 != end) {

        &lt;span class=&quot;co&quot;&gt;//大于key值时，p1向前走一步，交换p1与p2的值&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (p2.&lt;span class=&quot;fu&quot;&gt;val&lt;/span&gt; &amp;lt; head.&lt;span class=&quot;fu&quot;&gt;val&lt;/span&gt;) {
            p1 = p1.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;;

            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; temp = p1.&lt;span class=&quot;fu&quot;&gt;val&lt;/span&gt;;
            p1.&lt;span class=&quot;fu&quot;&gt;val&lt;/span&gt; = p2.&lt;span class=&quot;fu&quot;&gt;val&lt;/span&gt;;
            p2.&lt;span class=&quot;fu&quot;&gt;val&lt;/span&gt; = temp;
        }
        p2 = p2.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;;
    }

    &lt;span class=&quot;co&quot;&gt;//当有序时，不交换p1和key值&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (p1 != head) {
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; temp = p1.&lt;span class=&quot;fu&quot;&gt;val&lt;/span&gt;;
        p1.&lt;span class=&quot;fu&quot;&gt;val&lt;/span&gt; = head.&lt;span class=&quot;fu&quot;&gt;val&lt;/span&gt;;
        head.&lt;span class=&quot;fu&quot;&gt;val&lt;/span&gt; = temp;
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; p1;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;归并排序应该算是链表排序最佳的选择了，保证了最好和最坏时间复杂度都是nlogn，而且它在数组排序中广受诟病的空间复杂度在链表排序中也从O(n)降到了O(1)。&lt;/p&gt;
&lt;p&gt;归并排序的一般步骤为：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;将待排序数组（链表）取中点并一分为二；&lt;/li&gt;
&lt;li&gt;递归地对左半部分进行归并排序；&lt;/li&gt;
&lt;li&gt;递归地对右半部分进行归并排序；&lt;/li&gt;
&lt;li&gt;将两个半部分进行合并（merge）,得到结果。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;首先用快慢指针(快慢指针思路，快指针一次走两步，慢指针一次走一步，快指针在链表末尾时，慢指针恰好在链表中点)的方法找到链表中间节点，然后递归的对两个子链表排序，把两个排好序的子链表合并成一条有序的链表。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ListNode &lt;span class=&quot;fu&quot;&gt;sortList&lt;/span&gt;(ListNode head) {
    &lt;span class=&quot;co&quot;&gt;//采用归并排序&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (head == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; || head.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt; == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; head;
    }
    &lt;span class=&quot;co&quot;&gt;//获取中间结点&lt;/span&gt;
    ListNode mid = &lt;span class=&quot;fu&quot;&gt;getMid&lt;/span&gt;(head);
    ListNode right = mid.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;;
    mid.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    &lt;span class=&quot;co&quot;&gt;//合并&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mergeSort&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;sortList&lt;/span&gt;(head), &lt;span class=&quot;fu&quot;&gt;sortList&lt;/span&gt;(right));
}

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 获取链表的中间结点,偶数时取中间第一个&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param head&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; ListNode &lt;span class=&quot;fu&quot;&gt;getMid&lt;/span&gt;(ListNode head) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (head == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; || head.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt; == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; head;
    }
    &lt;span class=&quot;co&quot;&gt;//快慢指针&lt;/span&gt;
    ListNode slow = head, quick = head;
    &lt;span class=&quot;co&quot;&gt;//快2步，慢一步&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (quick.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; quick.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
        slow = slow.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;;
        quick = quick.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;;
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; slow;
}

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 归并两个有序的链表&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param head1&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param head2&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; ListNode &lt;span class=&quot;fu&quot;&gt;mergeSort&lt;/span&gt;(ListNode head1, ListNode head2) {
    ListNode p1 = head1, p2 = head2, head;
   &lt;span class=&quot;co&quot;&gt;//得到头节点的指向&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (head1.&lt;span class=&quot;fu&quot;&gt;val&lt;/span&gt; &amp;lt; head2.&lt;span class=&quot;fu&quot;&gt;val&lt;/span&gt;) {
        head = head1;
        p1 = p1.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;;
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        head = head2;
        p2 = p2.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;;
    }

    ListNode p = head;
    &lt;span class=&quot;co&quot;&gt;//比较链表中的值&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (p1 != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; p2 != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {

        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (p1.&lt;span class=&quot;fu&quot;&gt;val&lt;/span&gt; &amp;lt;= p2.&lt;span class=&quot;fu&quot;&gt;val&lt;/span&gt;) {
            p.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt; = p1;
            p1 = p1.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;;
            p = p.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;;
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            p.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt; = p2;
            p2 = p2.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;;
            p = p.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;;
        }
    }
    &lt;span class=&quot;co&quot;&gt;//第二条链表空了&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (p1 != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
        p.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt; = p1;
    }
    &lt;span class=&quot;co&quot;&gt;//第一条链表空了&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (p2 != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
        p.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt; = p2;
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; head;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完整代码放在：&lt;br/&gt;&lt;a href=&quot;https://github.com/morethink/algorithm/blob/master/src/algorithm/leetcode/SortList.java&quot; class=&quot;uri&quot;&gt;https://github.com/morethink/algorithm/blob/master/src/algorithm/leetcode/SortList.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考文档&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/TenosDoIt/p/3666585.html&quot;&gt;链表排序（冒泡、选择、插入、快排、归并、希尔、堆排序）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sun, 18 Feb 2018 08:50:00 +0000</pubDate>
<dc:creator>morethink</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/morethink/p/8452914.html</dc:identifier>
</item>
<item>
<title>【开源项目】将图片转换为字符画 - xiaoxi666</title>
<link>http://www.cnblogs.com/xiaoxi666/p/8452717.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoxi666/p/8452717.html</guid>
<description>&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;选定填充图片的ASCII字符，不同的字符对应于不同的灰度&lt;/li&gt;
&lt;li&gt;读取图片并计算各像素灰度值（同时考虑透明背景），用相应的的ASCII字符替换该像素&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;程序功能&quot;&gt;程序功能&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;支持3种文件选择方式：选定文件（支持图片预览），添加文件夹，拖入文件&lt;/li&gt;
&lt;li&gt;支持5种图片格式：.jpg， .jpeg， .gif， .png，.bmp&lt;/li&gt;
&lt;li&gt;支持5挡不同的缩放比例：10%，20%，25%，50%，以及不缩放，默认为不缩放&lt;/li&gt;
&lt;li&gt;转换结果以文件名“原文件名+.txt”保存至新建文件夹，新建文件夹的命名方式为“字符画转换结果+当前时间”，其中当前时间的格式为“年_月_日_时_分_秒”&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;建议：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;转换后的txt文件最好用notepad++等类似软件打开，这类软件不会将内容换行，同时支持缩放&lt;/li&gt;
&lt;li&gt;图片宽和高最好控制在1000px以内，太大的话，出来的图太过精细，不方便查看。这时可利用缩放功能。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;可视化界面&quot;&gt;可视化界面&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;为方便操作，特意包装成可视化界面，并加入“保持窗口最前”选项，方便文件拖入&lt;/li&gt;
&lt;li&gt;注意：如果所选文件格式不正确，“开始转换”按钮不可用&lt;/li&gt;
&lt;li&gt;程序已打包为exe文件64位版本，可以直接使用&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;源码exe文件-以及-软件截图效果图&quot;&gt;源码、exe文件 以及 软件截图、效果图&lt;/h2&gt;
&lt;p&gt;请移步Github仓库：&lt;a href=&quot;https://github.com/xiaoxi666/Img2AsciiVision&quot; class=&quot;uri&quot;&gt;https://github.com/xiaoxi666/Img2AsciiVision&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;source文件夹：源码及其资源文件&lt;/li&gt;
&lt;li&gt;ExecuteFileAndPackageTools文件夹：可执行文件Img2Ascii.exe及其打包工具&lt;/li&gt;
&lt;li&gt;Demos文件夹： 软件截图和效果图&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;软件截图和效果图&quot;&gt;软件截图和效果图&lt;/h2&gt;
&lt;p&gt;软件截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/609124/201802/609124-20180218134834515-1146101988.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;原图：&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/609124/201802/609124-20180218134908577-542600774.jpg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;转换为Ascii后的字符画：&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/609124/201802/609124-20180218134921827-1667081202.jpg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;局部放大图（可以看到Ascii码字符）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/609124/201802/609124-20180218135002905-1345819393.jpg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 18 Feb 2018 05:35:00 +0000</pubDate>
<dc:creator>xiaoxi666</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaoxi666/p/8452717.html</dc:identifier>
</item>
<item>
<title>获取View组件宽度以及ViewTreeObserver - ganchuanpu</title>
<link>http://www.cnblogs.com/ganchuanpu/p/8452698.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ganchuanpu/p/8452698.html</guid>
<description>&lt;h2&gt;View宽高测量方法：&lt;/h2&gt;
&lt;p&gt;测量方法有三种，如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）&lt;/strong&gt;（直接在onCreate()执行）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; w = View.MeasureSpec.makeMeasureSpec(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,View.MeasureSpec.UNSPECIFIED);  
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; h = View.MeasureSpec.makeMeasureSpec(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,View.MeasureSpec.UNSPECIFIED);  
imageView.measure(w, h);  
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; height =&lt;span&gt;imageView.getMeasuredHeight();  
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; width =&lt;span&gt;imageView.getMeasuredWidth();  
textView.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+height+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+width);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）&lt;/span&gt;&lt;/strong&gt;2和3都是在onCreate()调用完后回调拿到组件的宽高&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
ViewTreeObserver vto =&lt;span&gt; imageView.getViewTreeObserver();  
vto.addOnPreDrawListener(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ViewTreeObserver.OnPreDrawListener() {  
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; boolean onPreDraw() {  
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; height =&lt;span&gt; imageView.getMeasuredHeight();  
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; width =&lt;span&gt; imageView.getMeasuredWidth();  
        textView.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+height+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;width);  
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;  
    }  
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
ViewTreeObserver vto2 =&lt;span&gt; imageView.getViewTreeObserver();    
vto2.addOnGlobalLayoutListener(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnGlobalLayoutListener() {  
    @Override    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onGlobalLayout() {  
        imageView.getViewTreeObserver().removeGlobalOnLayoutListener(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);    
        textView.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+imageView.getHeight()+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;imageView.getWidth());  
    }    
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：方法一比其他方法多一次onMeasure计算，方法二的回调函数会被多次调用。&lt;/p&gt;
&lt;p&gt;转自http://blog.csdn.net/johnny901114/article/details/7839512&lt;/p&gt;
&lt;h2&gt;ViewTreeObserver&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;一、结构&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; final &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ViewTreeObserver extends Object
    java.lang.Object
         android.view.ViewTreeObserver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;二、概述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    这是一个注册监听视图树的观察者(observer)，在视图树种全局事件改变时得到通知。这个全局事件不仅还包括整个树的布局，从绘画过程开始，触摸模式的改变等。ViewTreeObserver不能够被应用程序实例化，因为它是由视图提供，参照getViewTreeObserver()以查看更多信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、内部类&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;  ViewTreeObserver.OnGlobalFocusChangeListener         
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当在一个视图树中的焦点状态发生改变时，所要调用的回调函数的接口类&lt;/span&gt;
 
&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;  ViewTreeObserver.OnGlobalLayoutListener
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当在一个视图树中全局布局发生改变或者视图树中的某个视图的可视状态发生改变时，所要调用的回调函数的接口类&lt;/span&gt;
 
&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;  ViewTreeObserver.OnPreDrawListener
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当一个视图树将要绘制时，所要调用的回调函数的接口类&lt;/span&gt;
 
&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;  ViewTreeObserver.OnScrollChangedListener
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当一个视图树中的一些组件发生滚动时，所要调用的回调函数的接口类&lt;/span&gt;
 
&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;  ViewTreeObserver.OnTouchModeChangeListener
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当一个视图树的触摸模式发生改变时，所要调用的回调函数的接口类&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;四、公共方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*注册一个回调函数，当在一个视图树中的焦点状态发生改变时调用这个回调函数。
 * 参数 listener    将要被添加的回调函数
 *异常 IllegalStateException       如果isAlive() 返回false
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addOnGlobalFocusChangeListener (ViewTreeObserver.OnGlobalFocusChangeListener listener)
     
 
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*注册一个回调函数，当在一个视图树中全局布局发生改变或者视图树中的某个视图的可视状态发生改变时调用这个回调函数。
 *参数 listener    将要被添加的回调函数
 *异常 IllegalStateException       如果isAlive() 返回false
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addOnGlobalLayoutListener (ViewTreeObserver.OnGlobalLayoutListener listener)
　　
 
　　
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*注册一个回调函数，当一个视图树将要绘制时调用这个回调函数。
 *参数 listener    将要被添加的回调函数
 *异常 IllegalStateException       如果isAlive() 返回false
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
　&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addOnPreDrawListener (ViewTreeObserver.OnPreDrawListener listener)
 
　   
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*注册一个回调函数，当一个视图发生滚动时调用这个回调函数。
  *参数 listener    将要被添加的回调函数
　*异常 IllegalStateException       如果isAlive() 返回false
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addOnScrollChangedListener (ViewTreeObserver.OnScrollChangedListener listener)  
 
　
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*注册一个回调函数，当一个触摸模式发生改变时调用这个回调函数。
  *参数 listener    将要被添加的回调函数
  *异常 IllegalStateException       如果isAlive() 返回false
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addOnTouchModeChangeListener (ViewTreeObserver.OnTouchModeChangeListener listener)
 
　　
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当整个布局发生改变时通知相应的注册监听器。如果你强制对视图布局或者在一个没有附加到一个窗口的视图的层次结构或者在GONE状态下，它可以被手动的调用&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; final &lt;span&gt;void&lt;/span&gt;&lt;span&gt; dispatchOnGlobalLayout ()
    
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*当一个视图树将要绘制时通知相应的注册监听器。如果这个监听器返回true，则这个绘制将被取消并重新计划。如果你强制对视图布局或者在一个没有附加到一个窗口的视图的层次结构或者在一个GONE状态下，它可以被手动的调用
 *返回值  当前绘制能够取消并重新计划则返回true，否则返回false。
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; final boolean dispatchOnPreDraw ()
 
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*指示当前的ViewTreeObserver是否可用(alive)。当observer不可用时，任何方法的调用（除了这个方法）都将抛出一个异常。如果一个应用程序保持和ViewTreeObserver一个历时较长的引用，它应该总是需要在调用别的方法之前去检测这个方法的返回值。
　*返回值 但这个对象可用则返回true，否则返回false   
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; boolean isAlive ()
    
     
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*移除之前已经注册的全局布局回调函数。
  *参数 victim 将要被移除的回调函数
  *异常 IllegalStateException       如果isAlive() 返回false   
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; removeGlobalOnLayoutListener (ViewTreeObserver.OnGlobalLayoutListener victim)
　　
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*移除之前已经注册的焦点改变回调函数。
　*参数 victim 将要被移除的回调函数
　*异常 IllegalStateException       如果isAlive() 返回false 
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; removeOnGlobalFocusChangeListener (ViewTreeObserver.OnGlobalFocusChangeListener victim)
　　
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*移除之前已经注册的预绘制回调函数。
　*参数 victim 将要被移除的回调函数
　 *异常 IllegalStateException       如果isAlive() 返回false  
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; removeOnPreDrawListener (ViewTreeObserver.OnPreDrawListener victim)
　　
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*移除之前已经注册的滚动改变回调函数。
　*参数 victim 将要被移除的回调函数
　*异常 IllegalStateException       如果isAlive() 返回false 
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; removeOnScrollChangedListener (ViewTreeObserver.OnScrollChangedListener victim)
　
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*移除之前已经注册的触摸模式改变回调函数
　*参数 victim 将要被移除的回调函数
　*异常 　IllegalStateException       如果isAlive() 返回false
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; removeOnTouchModeChangeListener (ViewTreeObserver.OnTouchModeChangeListener victim)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;五、代码示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;1、创建监听器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; final ViewTreeObserver.OnGlobalLayoutListener mGlobalLayoutListener = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ViewTreeObserver.OnGlobalLayoutListener() {
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onGlobalLayout() {
      &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; width = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
      &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; height = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
      
      &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
        width &lt;/span&gt;=&lt;span&gt; getActivity().getWindow().getDecorView().getWidth();
        height &lt;/span&gt;=&lt;span&gt; getActivity().getWindow().getDecorView().getHeight();
      } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; called too early. so, just skip.&lt;/span&gt;
&lt;span&gt;      }
      
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (width != -&lt;span&gt;1&lt;/span&gt; &amp;amp;&amp;amp; mGlobalLayoutWidth != width) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;只有当尺寸真正有了数值，即已经确定了，更新UI才有意义&lt;/span&gt;
        mGlobalLayoutWidth =&lt;span&gt; width;
        updateUI();
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (height != -&lt;span&gt;1&lt;/span&gt; &amp;amp;&amp;amp; mGlobalLayoutHeight !=&lt;span&gt; height) {
        mGlobalLayoutHeight &lt;/span&gt;=&lt;span&gt; height;                
    updateUI();
 } } };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、一般在onCreate或onCreateView中注册监听器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mViewTreeObserver =&lt;span&gt; getActivity().getWindow().getDecorView().getViewTreeObserver();
mViewTreeObserver.addOnGlobalLayoutListener(mGlobalLayoutListener);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 18 Feb 2018 04:59:00 +0000</pubDate>
<dc:creator>ganchuanpu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ganchuanpu/p/8452698.html</dc:identifier>
</item>
<item>
<title>浅析Xilinx 三速以太网MAC IP核（仿真篇） - 没落骑士</title>
<link>http://www.cnblogs.com/moluoqishi/p/8448286.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/moluoqishi/p/8448286.html</guid>
<description>&lt;p&gt;　&lt;span&gt;　之前在使用Altera的三速以太网MAC IP的基础上，完成了UDP协议数据传输。此次为了将设计移植到xilinx FPGA上，需要用到xilinx的三速以太网MAC IP核，当然也可以自己用HDL编写，但必须对数据链路层协议有非常清晰的认识。以下是在使用xilinx 三速以太网MAC过程中的一些记录和总结。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在使用IP核传输数据之前要对MAC层功能有个了解。MAC层功能用一个词概括就是“成帧解帧”，具体来讲&lt;span&gt;TX方向对用户侧发送来的MAC帧添加前导码和帧尾校验和，对长度过短帧会在帧尾填充0直至最小帧长，此外流控模块可以根据需要发送pause帧。RX方向过滤掉不符合规范的数据帧并移除填充域，只有目的MAC地址与自身相符且帧尾校验和正确的数据帧才为有效数据帧，去除前导码和校验域后即发送给用户侧。接收端也会根据可能收到的pause帧做出暂停发送处理。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/em&gt;&lt;span&gt;认识以太网帧结构同样非常重要，目前常见的是Ethernet II和IEEE802.3两种格式，总体可以归纳为：目的MAC地址　　源MAC地址　　长度/类型　　有效负荷（可能有填充）　　帧校验，长度依次是6byte、6byte、2byte、46~1500byte、4byte。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;区别在于Ethernet II帧长度/类型域解释为上层协议类型，而IEEE802.3同样位置是长度字段。区分两者的标准是：当该字段值小于等于1500（十六进制的0x05DC）时，为IEEE802.3格式；当字段值大于等于1536（或者十六进制的0x0600）时，帧使用的是Ethernet II格式。&lt;/span&gt;其中Ethernet II最为常见。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　IP核的配置很简单，根据自己的需求设置即可。重点关注第二页，这里选择使用GMII作为物理层接口，并选择三速模式，可以通过接口改动传输速率。&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201289/201802/1201289-20180214144124281-1615650465.png&quot; alt=&quot;&quot; width=&quot;772&quot; height=&quot;526&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;IP核配置生成输出文件后，和其他较为复杂的IP核一样要熟读文档和分析example design的结构和功能。资料主要参考PG051.我们直接打开example design顶层文件对工程有个整体的认识：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    --------------------------------------------------
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | EXAMPLE DESIGN WRAPPER                         |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |                                                |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |                                                |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |   -------------------     -------------------  |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |   |                 |     |                 |  |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |   |    Clocking     |     |     Resets      |  |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |   |                 |     |                 |  |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |   -------------------     -------------------  |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |           -------------------------------------|
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |           |FIFO BLOCK WRAPPER                  |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |           |                                    |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |           |                                    |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |           |              ----------------------|
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |           |              | SUPPORT LEVEL       |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | --------  |              |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | |      |  |              |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | | AXI  |-&amp;gt;|-------------&amp;gt;|                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | | LITE |  |              |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | |  SM  |  |              |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | |      |&amp;lt;-|&amp;lt;-------------|                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | |      |  |              |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | --------  |              |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |           |              |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | --------  |  ----------  |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | |      |  |  |        |  |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | |      |-&amp;gt;|-&amp;gt;|        |-&amp;gt;|                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | | PAT  |  |  |        |  |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | | GEN  |  |  |        |  |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | |(ADDR |  |  |  AXI-S |  |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | | SWAP)|  |  |  FIFO  |  |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | |      |  |  |        |  |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | |      |  |  |        |  |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | |      |  |  |        |  |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | |      |&amp;lt;-|&amp;lt;-|        |&amp;lt;-|                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | |      |  |  |        |  |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    | --------  |  ----------  |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |           |              |                     |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |           |              ----------------------|
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |           -------------------------------------|
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    --------------------------------------------------

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;------------------------------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　上边是官方提供的注释，非常清晰地给出了工程结构：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;example_clocks:　　　　　时钟模块，提供工程中用到的所有时钟信号；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;example_resets:　　　　　复位模块，产生所有子模块的复位信号；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;axi_lite_controller:　　　　控制模块，内部通过状态机对MAC和PHY芯片进行初始化和相应配置工作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;basic_pat_gen_inst:         包测试模块，有两种模式：发送固定样式测试数据包和将收到数据包环回送出给PHY。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;trimac_fifo_block:　　       AXI-S接口异步FIFO和MAC IP核。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　MAC IP核包含的主要接口类型及作用是：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;GMII接口--PHY数据通道　　　　 &lt;/span&gt;&lt;span&gt;MDIO接口--PHY芯片配置管理　　　　 &lt;/span&gt;&lt;span&gt;AXI-Stream接口--用户数据通道　　　　 &lt;/span&gt;&lt;span&gt;AXI-Lite接口--用户控制管理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　初步需要掌握的是用户数据接口，实际上AXI-Stream也无需过多关注，只要理解FIFO用户侧接口即可。以发送方向为例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201289/201802/1201289-20180214153720827-1234578887.png&quot; alt=&quot;&quot; width=&quot;652&quot; height=&quot;165&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　tx_axis_fifo_tdata 8位数据，tx_axis_fifo_tvalid 数据有效指示，tx_axis_fifo_tready MAC发送准备信号，tx_axis_fifo_tlast 数据包尾指示。接下来使用示例工程的testbench查看仿真波形，对用户接口时序有一个直观的认识。官方testbench demo_tb文件中会持续分别以10M 100M 1000M速率向example design RX方向GMII端口发送5个不同数据帧。先来看&lt;span&gt;&lt;strong&gt;千兆网&lt;/strong&gt;&lt;/span&gt;波形，在千兆模式下TX时钟为由FPGA提供的125MHz信号gtx_clk_bufg，RX时钟由PHY通过时钟恢复得到125MHz时钟信号。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201289/201802/1201289-20180217153927718-347303136.png&quot; alt=&quot;&quot; width=&quot;1192&quot; height=&quot;373&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;数据的流向为：gmii_rx_xx --&amp;gt; rx_axis_mac_xx --&amp;gt; rx_axis_fifo_xx --&amp;gt; tx_axis_fifo_xx --&amp;gt; tx_axis_mac_xx --&amp;gt; gmii_tx_xx。此时example design中basic_pat_gen_inst模块设置为环回模式，会将MAC接收的数据环回到发送通道。由于第三个帧错误指示信号gmii_rx_er拉高，而第5个帧MAC地址不匹配，因此这两个数据帧被滤除掉。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201289/201802/1201289-20180218113547343-1300218406.png&quot; alt=&quot;&quot; width=&quot;1249&quot; height=&quot;210&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　上图看出第三个数据帧带有错误指示信号，FIFO模块才会将其丢弃。第五个数据包MAC地址不符，在MAC核内部被丢弃。以第四个数据包为例观察时序：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201289/201802/1201289-20180218114021515-2104445608.png&quot; alt=&quot;&quot; width=&quot;1259&quot; height=&quot;92&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;包尾指示和数据在MAC核收到FCS并检测完毕后才输出有效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201289/201802/1201289-20180217155603031-755993682.png&quot; alt=&quot;&quot; width=&quot;1257&quot; height=&quot;92&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;该帧目的MAC地址是48'hda_02_03_04_05_06 源MAC地址是48'h5a_02_03_04_05_06 长度/类型域是16'h00_03，因此是解释为帧长度为3字节，负荷是01 02 03。&lt;/span&gt;&lt;span&gt;环回后目的MAC地址和源MAC地址被basic_pat_gen_inst模块交换，TX方向用户数据包为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201289/201802/1201289-20180217155819374-599265245.png&quot; alt=&quot;&quot; width=&quot;1261&quot; height=&quot;101&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;我们看下MAC核TX方向实际的用户接口时序，FIFO模块屏蔽了用户侧与MAC核之间的握手应答机制，缓存至少一个数据帧即开始数据传输，从而简化了接口时序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201289/201802/1201289-20180218110125577-394202472.png&quot; alt=&quot;&quot; width=&quot;1260&quot; height=&quot;97&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;当数据发送到物理层接口，由于数据包小于最小长度，因此发送到gmii接口上再次被填充至最小帧长。此外添加上前导码和校验和。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201289/201802/1201289-20180217161722171-1266151171.png&quot; alt=&quot;&quot; width=&quot;1256&quot; height=&quot;80&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;再&lt;/span&gt;&lt;span&gt;来看看&lt;span&gt;&lt;strong&gt;百兆网&lt;/strong&gt;&lt;/span&gt;，速率为100M时TX和RX方向时钟信号均由PHY芯片提供。第四数据帧TX方向用户接口波形：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201289/201802/1201289-20180218110505358-2103899341.png&quot; alt=&quot;&quot; width=&quot;1247&quot; height=&quot;117&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;FIFO提供的用户侧接口时序上与千兆网没有差别，时钟频率是125MHz，位宽依然是8bit，那么又是如何实现百兆速率的呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201289/201802/1201289-20180218110911905-137846735.png&quot; alt=&quot;&quot; width=&quot;1250&quot; height=&quot;101&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;MAC核用户接口时钟为25MHz，位宽为8bit，MAC核提供的tready信号每两周期拉高一周期，速率为25M*8/2 = 100M，因此100M速率是通过tready信号限流实现的。综上，对100M和1000M速率下全双工以太网概念和帧结构、MAC IP核配置以及核心用户接口时序功能均进行了阐述，本人也在学习中，希望对大家有帮助。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 18 Feb 2018 03:51:00 +0000</pubDate>
<dc:creator>没落骑士</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/moluoqishi/p/8448286.html</dc:identifier>
</item>
</channel>
</rss>