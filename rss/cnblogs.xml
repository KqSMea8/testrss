<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>对友盟分享（Umeng-Share）的功能封装 - 啊·带鱼</title>
<link>http://www.cnblogs.com/ting-miao/p/9213821.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ting-miao/p/9213821.html</guid>
<description>&lt;h2 id=&quot;对友盟分享umeng-share的功能封装&quot;&gt;对友盟分享（Umeng-Share）的功能封装&lt;/h2&gt;
&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;本文档针对友盟分享（6.9.0）进行了功能封装，完成的对于 &lt;strong&gt;文字&lt;/strong&gt;、&lt;strong&gt;图片&lt;/strong&gt;、&lt;strong&gt;网页&lt;/strong&gt; 分享功能封装，如有其它封装要求请根据本文档的封装思路和&lt;a href=&quot;https://developer.umeng.com/docs/66632/detail/66825&quot;&gt;友盟分享 api&lt;/a&gt;再进行功能封装。&lt;br/&gt;☺️话不多言，看看代码吧。&lt;/p&gt;
&lt;h3 id=&quot;封装主要完成几部&quot;&gt;封装主要完成几部&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Cocoapods 集成友盟分享 SDK&lt;/li&gt;
&lt;li&gt;配置SSO白名单&lt;/li&gt;
&lt;li&gt;配置URL Scheme&lt;/li&gt;
&lt;li&gt;AppDelegate+UMeng&lt;/li&gt;
&lt;li&gt;UmengEnclosed&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2093550-8c0b531778aa0268.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;App + Umeng.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;cocoapods-集成白名单url-scheme&quot;&gt;Cocoapods 集成、白名单、URL Scheme&lt;/h3&gt;
&lt;p&gt;这部分太啰嗦，也没有必要，需要的直接去官方文档查阅 &lt;a href=&quot;https://developer.umeng.com/docs/66632/detail/66825&quot;&gt;&lt;strong&gt;U-Share集成文档&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;appdelegateumeng&quot;&gt;AppDelegate+UMeng&lt;/h3&gt;
&lt;p&gt;这里是对 &lt;code&gt;AppDelegate&lt;/code&gt; 做了一个 Category 分类处理，在 AppDelegate 中好区别去其他第三方平台 SDK 注册和配置来调用&lt;code&gt;U-Share SDK&lt;/code&gt; 的调用。&lt;br/&gt;这部分就不多说了，大家都懂，直接上代码。&lt;/p&gt;
&lt;ol readability=&quot;31.315032295948&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;AppDelegate+UMeng.h&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#import &quot;AppDelegate.h&quot;

@interface AppDelegate (UMeng)
// 友盟系统配置和注册
- (BOOL)umengapplication:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions;
// 设置系统回调
// 支持所有iOS系统
- (BOOL)umengapplication:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation;

// 仅支持iOS9以上系统，iOS8及以下系统不会回调
- (BOOL)umengapplication:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&amp;lt;UIApplicationOpenURLOptionsKey, id&amp;gt; *)options;

// 2.支持目前所有iOS系统
- (BOOL)umengapplication:(UIApplication *)application handleOpenURL:(NSURL *)url;
@end&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;19.809342230696&quot;&gt;
&lt;p&gt;AppDelegate+UMeng.m&lt;br/&gt;此部分代码过多只展示部分逻辑，有需要请到 &lt;a href=&quot;https://github.com/GDMiao/UmengEnclosed&quot;&gt;GDMiao/UmengEnclosed&lt;/a&gt; 下载查看。&lt;/p&gt;
&lt;p&gt;a. // 友盟系统配置和注册&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 友盟系统配置和注册
- (BOOL)umengapplication:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    // UMConfigure 通用设置，请参考SDKs集成做统一初始化。
    [UMConfigure initWithAppkey:@&quot;你的UMAPPKey&quot; channel:@&quot;App Store&quot;];
    [UMConfigure setLogEnabled:YES];
    // U-Share 平台设置
    [self configUSharePlatforms]; // 配置参考官方文档
    [self confitUShareSettings];  // 配置参考官方文档
    return YES; 
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;b. 系统回调&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 1.支持所有iOS系统
- (BOOL)umengapplication:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{
    //6.3的新的API调用，是为了兼容国外平台(例如:新版facebookSDK,VK等)的调用[如果用6.2的api调用会没有回调],对国内平台没有影响
    BOOL result = [[UMSocialManager defaultManager] handleOpenURL:url sourceApplication:sourceApplication annotation:annotation];
    if (!result) {
        // 其他如支付等SDK的回调
    }
    return result;
}

// 2.仅支持iOS9以上系统，iOS8及以下系统不会回调
- (BOOL)umengapplication:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&amp;lt;UIApplicationOpenURLOptionsKey, id&amp;gt; *)options
{
    //6.3的新的API调用，是为了兼容国外平台(例如:新版facebookSDK,VK等)的调用[如果用6.2的api调用会没有回调],对国内平台没有影响
    BOOL result = [[UMSocialManager defaultManager]  handleOpenURL:url options:options];
    if (!result) {
        // 其他如支付等SDK的回调
    }
    return result;
}

// 3.支持目前所有iOS系统
- (BOOL)umengapplication:(UIApplication *)application handleOpenURL:(NSURL *)url
{
     BOOL result = [[UMSocialManager defaultManager] handleOpenURL:url];
     if (!result) {
        // 其他如支付等SDK的回调
     }
     return result;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;umengenclosed&quot;&gt;UmengEnclosed&lt;/h3&gt;
&lt;p&gt;这部分是对友盟分享的关键封装，定制了 文本字、图片、网页 三种分享，分钟分享有固定的参数形式。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;UmengEnclosed.h&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#pragma mark -- 定制Text类型分享面板预定义平台
/**
文本分享
 @param vc         分享方法调用的 Controller
 @param socialType 分享平台选择
 @param sharetype  分享类型选择
 @param data       分享类型固定参数 data = @&quot;text&quot;
 */
- (void)customTextShareWithVC:(id)vc SocialType:(SocialType)socialType shareType:(ShareType)sharetype textData:(id)data;

#pragma mark -- 定制Image类型分享面板预定义平台
/**
 图片分享
 @param vc         分享方法调用的 Controller
 @param socialType 分享平台选择
 @param sharetype  分享类型选择
 @param data       分享类型固定参数 {&quot;thumb&quot;:&quot;thumbImgurl&quot;,&quot;original&quot;:@&quot;originalImgurl&quot;}
 */
- (void)customImageShareWithVC:(id)vc SocialType:(SocialType)socialType shareType:(ShareType)sharetype imgUrlData:(id)data;

#pragma mark -- 定制Web类型分享面板预定义平台
/**
 网页分享
 @param vc         分享方法调用的 Controller
 @param socialType 分享平台选择
 @param sharetype  分享类型选择
 @param data       分享类型固定参数 {&quot;title&quot;:&quot;&quot;,&quot;descr&quot;:&quot;&quot;,&quot;weburl&quot;:@&quot;&quot;}
 */
- (void)customWebShareWithVC:(id)vc SocialType:(SocialType)socialType shareType:(ShareType)sharetype webData:(id)data;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;28.792263610315&quot;&gt;
&lt;p&gt;UmengEnclosed.m&lt;/p&gt;
&lt;p&gt;a. 此部分根据 &lt;code&gt;SocialType&lt;/code&gt; 定制分享面板，根据&lt;code&gt;ShareType&lt;/code&gt;定制分享方法，&lt;code&gt;data&lt;/code&gt; 根骨分享方法配置参数。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#pragma mark -- 定制自己的分享面板预定义平台
/**
 配置分享面板 和 分享类型
 @param vc         分享方法调用的 Controller
 @param socialType 分享平台选择
 @param sharetype  分享类型选择
 @param data       分享类型参数
 */
- (void)shareMenuViewWithVC:(id)vc SocialType:(SocialType)socialType ShareType:(ShareType)sharetype date:(id)data
{
    _vc = vc;
    if (socialType == SType_sina_wx_qq) {
        [UMSocialUIManager setPreDefinePlatforms:@[@(UMSocialPlatformType_Sina),@(UMSocialPlatformType_WechatSession),@(UMSocialPlatformType_WechatTimeLine),@(UMSocialPlatformType_QQ),@(UMSocialPlatformType_Qzone)]];

    } else {
        //[UMSocialUIManager setPreDefinePlatforms:@[@(UMSocialPlatformType_Sina),@(UMSocialPlatformType_QQ),@(UMSocialPlatformType_WechatSession)]];
    }
    __weak typeof(self) weakself = self;

    [UMSocialUIManager showShareMenuViewInWindowWithPlatformSelectionBlock:^(UMSocialPlatformType platformType, NSDictionary *userInfo) {
        // 根据获取的platformType确定所选平台进行下一步操作
        __strong typeof(self) strongself = weakself;

        switch (sharetype) {
            case ShareText:
                [strongself shareTextToPlatformType:platformType date:data]; // 根据友盟文档定制方法
                break;
            case SharePictures:
                [strongself shareImageToPlatformType:platformType date:data];
                break;
            case SharePicturesAndText_sina:

                break;
            case ShareWebPages:
                [strongself shareWebPageToPlatformType:platformType date:data];
                break;
            case ShareMusic:

                break;
            case ShareVideo:

                break;
            case ShareWeChatExpression:

                break;
            case ShareWeChatPrograms:

                break;
            default:
                break;
        }
    }];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;b. 分享文本&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 分享文本
- (void)shareTextToPlatformType:(UMSocialPlatformType)platformType date:(id)data
{
    NSString *text = data;
    //创建分享消息对象
    UMSocialMessageObject *messageObject = [UMSocialMessageObject messageObject];
    //设置文本
    messageObject.text = text;
    //调用分享接口
    [[UMSocialManager defaultManager] shareToPlatform:platformType messageObject:messageObject currentViewController:self.vc completion:^(id data, NSError *error) {
        if (error) {
            NSLog(@&quot;************Share fail with error %@*********&quot;,error);
        }else{
            NSLog(@&quot;response data is %@&quot;,data);
        }
    }];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;c.调用文本分享定制方法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/**
 文本分享
 @param vc         分享方法调用的 Controller
 @param socialType 分享平台选择
 @param sharetype  分享类型选择
 @param data       分享类型固定参数 data = @&quot;text&quot;
 */
- (void)customTextShareWithVC:(id)vc SocialType:(SocialType)socialType shareType:(ShareType)sharetype textData:(id)data
{
    [self shareMenuViewWithVC:vc SocialType:socialType ShareType:sharetype date:data];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;d.不一一举例详情请参考 &lt;a href=&quot;https://github.com/GDMiao/UmengEnclosed&quot;&gt;GDMiao/UmengEnclosed&lt;/a&gt; 下载查看。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;具体调用&quot;&gt;具体调用&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;#import &quot;UmengEnclosed.h&quot;
- (IBAction)UmengSharedAciton:(id)sender {
    UmengEnclosed *umeng = [UmengEnclosed sharedUmengEnclosed];
    [umeng customTextShareWithVC:self SocialType:SType_sina_wx_qq shareType:ShareText textData:@&quot;OK&quot;];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;结语&quot;&gt;结语&lt;/h3&gt;
&lt;p&gt;本次封装只定制我我方 APP 的对应分享的部分功能，如有需要请更加文档自行定制。&lt;br/&gt;如果您能读到点这里我非常感谢，希望给一颗鼓励的星星✨&lt;a href=&quot;https://github.com/GDMiao/UmengEnclosed&quot;&gt;GDMiao/UmengEnclosed&lt;/a&gt; 。&lt;/p&gt;
</description>
<pubDate>Fri, 22 Jun 2018 07:46:00 +0000</pubDate>
<dc:creator>啊&amp;#183;带鱼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ting-miao/p/9213821.html</dc:identifier>
</item>
<item>
<title>你还在把Java当成Android官方开发语言吗？Kotlin了解一下！ - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/9207619.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/9207619.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;导语：2017年Google IO大会宣布使用Kotlin作为Android的官方开发语言，相比较与典型的面相对象的JAVA语言，Kotlin作为一种新式的函数式编程语言，也有人称之为Android平台的Swift语言。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文由&lt;a href=&quot;http://bugly.qq.com/&quot;&gt;腾讯Bugly&lt;/a&gt;发表在&lt;a href=&quot;https://cloud.tencent.com/developer?fromsource=waitui&quot;&gt;腾讯云+社区&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先让我们看下实现同样的功能，Java和Kotiln的对比：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// JAVA，20多行代码，充斥着findViewById，类型转换，匿名内部类这样的无意义代码

public class MainJavaActivity extends Activity {
    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {        
    super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        TextView label = (TextView) findViewById(R.id.label);
        Button btn = (Button) findViewById(R.id.btn);

        label.setText(&quot;hello&quot;);
        label.setOnClickListener(new View.OnClickListener() {           
            @Override
            public void onClick(View v) {
                Log.d(&quot;Glen&quot;,&quot;onClick TextView&quot;);
            }
        });
        btn.setOnClickListener(new View.OnClickListener(){            
            @Override
            public void onClick(View v) {
                Log.d(&quot;Glen&quot;,&quot;onClick Button&quot;);
            }
        });
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;再来看Kotlin&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Kotlin,没有了冗余的findViewById，我们可以直接对资源id进行操作，也不需要匿名内部类的声明，更关注函数的实现本身，抛弃了复杂的格式
class MainKotlinActivity:Activity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        R.id.label.setText(&quot;hello&quot;)
        R.id.label.onClick { Log.d(&quot;Glen&quot;,&quot;onClick TextView&quot;) }
        R.id.btn.onClick { Log.d(&quot;Glen&quot;,&quot;onClick Button&quot;) }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实现这些需要借助Kotlin的扩展函数与高阶函数，本文主要介绍一下扩展函数。&lt;/p&gt;
&lt;h2 id=&quot;kotlin-扩展函数与扩展属性kotlin-extensions&quot;&gt;&lt;strong&gt;1. Kotlin 扩展函数与扩展属性(Kotlin Extensions)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Kotlin 能够扩展一个类的新功能而无需继承该类，或者对任意的类使用像“装饰者(Decorator)”这样的设计模式。这些都是通过叫做“扩展(extensions)”的特殊声明实现的。Kotlin扩展声明既支持扩展函数也支持扩展属性，本文主要讨论扩展函数，至于扩展属性实现的机制类似。&lt;/p&gt;
&lt;p&gt;扩展函数的声明非常简单，他的关键字是.，此外我们需要一个“接受者类型(recievier type)”来作为他的前缀。以类&lt;code&gt;MutableList&amp;lt;Int&amp;gt;&lt;/code&gt;为例，现在为它扩展一个swap方法，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fun MutableList&amp;lt;Int&amp;gt;.swap(index1:Int,index2:Int) {
    val tmp = this[index1]
    this[index1] = this[index2]
    this[index2] = tmp
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;MutableList&amp;lt;T&amp;gt;&lt;/code&gt;是kotlin提供的基础库&lt;code&gt;collection&lt;/code&gt;中的List容器类，这里在声明里作为“接受者类型”，.作为声明关键字，&lt;code&gt;swap&lt;/code&gt;是扩展函数名，其余和Kotlin声明一个普通函数并无区别。&lt;/p&gt;
&lt;p&gt;额外提一句，Kotlin的&lt;code&gt;this语法&lt;/code&gt;要比JAVA更灵活，这里扩展函数体里的&lt;code&gt;this&lt;/code&gt;代表的是接受者类型对象。&lt;/p&gt;
&lt;p&gt;如果我们想要调用这个扩展函数，可以这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fun use(){
    val list = mutableListOf(1,2,3)
    list.swap(1,2)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;kotlin扩展函数是怎么实现的&quot;&gt;&lt;strong&gt;2. Kotlin扩展函数是怎么实现的&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;扩展函数的调用看起来就像是原生方法一样自然，使用起来也非常顺手，但是这样的方法会不会带来性能方面的掣肘呢？有必要探究一下Kotlin是如何实现扩展函数的，直接分析Kotlin源码难度还是挺大，还好Android Studio提供了一些工具，我们可以通过&lt;code&gt;Kotlin ByteCode&lt;/code&gt;指令，查看Kotlin语言转换的字节码文件，仍以&lt;code&gt;MutableList&amp;lt;Int&amp;gt;&lt;/code&gt;,&lt;code&gt;swap&lt;/code&gt;为例，转换为字节码之后的文件如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// ================com/example/glensun/demo/extension/MutableListDemoKt.class =================
// class version 50.0 (50)
// access flags 0x31

public final class com/example/glensun/demo/extension/MutableListDemoKt {  

   // access flags 0x19
  // signature (Ljava/util/List&amp;lt;Ljava/lang/Integer;&amp;gt;;II)V
  // declaration: void swap(java.util.List&amp;lt;java.lang.Integer&amp;gt;, int, int)
  public final static swap(Ljava/util/List;II)V
    @Lorg/jetbrains/annotations/NotNull;() // invisible, parameter 0
   L0
    ALOAD 0
    LDC &quot;$receiver&quot;
    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (Ljava/lang/Object;Ljava/lang/String;)V
   L1
    LINENUMBER 8 L1
    ALOAD 0
    ILOAD 1
    INVOKEINTERFACE java/util/List.get (I)Ljava/lang/Object;
    CHECKCAST java/lang/Number
    INVOKEVIRTUAL java/lang/Number.intValue ()I
    ISTORE 3
   L2
    LINENUMBER 9 L2
    ALOAD 0
    ILOAD 1
    ALOAD 0
    ILOAD 2
    INVOKEINTERFACE java/util/List.get (I)Ljava/lang/Object;
    INVOKEINTERFACE java/util/List.set (ILjava/lang/Object;)Ljava/lang/Object;
    POP
   L3
    LINENUMBER 10 L3
    ALOAD 0
    ILOAD 2
    ILOAD 3
    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;
    INVOKEINTERFACE java/util/List.set (ILjava/lang/Object;)Ljava/lang/Object;
    POP
   L4
    LINENUMBER 11 L4
    RETURN
   L5
    LOCALVARIABLE tmp I L2 L5 3
    LOCALVARIABLE $receiver Ljava/util/List; L0 L5 0
    LOCALVARIABLE index1 I L0 L5 1
    LOCALVARIABLE index2 I L0 L5 2
    MAXSTACK = 4
    MAXLOCALS = 4

  @Lkotlin/Metadata;(mv={1, 1, 7}, bv={1, 0, 2}, k=2, d1={&quot;\u0000\u0012\n\u0000\n\u0002\u0010\u0002\n\u0002\u0010!\n\u0002\u0010\u0008\n\u0002\u0008\u0003\u001a \u0010\u0000\u001a\u00020\u0001*\u0008\u0012\u0004\u0012\u00020\u00030\u00022\u0006\u0010\u0004\u001a\u00020\u00032\u0006\u0010\u0005\u001a\u00020\u0003\u00a8\u0006\u0006&quot;}, d2={&quot;swap&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;index1&quot;, &quot;index2&quot;, &quot;production sources for module app&quot;})  
// compiled from: MutableListDemo.kt

}
// ================META-INF/production sources for module app.kotlin_module =================&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的字节码已经相当直观，更令人惊喜的是Android Studio还具备将字节码转为JAVA文件的能力，点击上面的Decompile按钮，可以得到如下JAVA代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import java.util.List;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;
import org.jetbrains.annotations.NotNull;

@Metadata(
   mv = {1, 1, 7},
   bv = {1, 0, 2},
   k = 2,
   d1 = {&quot;\u0000\u0012\n\u0000\n\u0002\u0010\u0002\n\u0002\u0010!\n\u0002\u0010\b\n\u0002\b\u0003\u001a \u0010\u0000\u001a\u00020\u0001*\b\u0012\u0004\u0012\u00020\u00030\u00022\u0006\u0010\u0004\u001a\u00020\u00032\u0006\u0010\u0005\u001a\u00020\u0003¨\u0006\u0006&quot;},
   d2 = {&quot;swap&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;index1&quot;, &quot;index2&quot;, &quot;production sources for module app&quot;}
)

public final class MutableListDemoKt {   
    public static final void swap(@NotNull List $receiver, int index1, int index2) {
      Intrinsics.checkParameterIsNotNull($receiver, &quot;$receiver&quot;);      
    int tmp = ((Number)$receiver.get(index1)).intValue();
      $receiver.set(index1, $receiver.get(index2));
      $receiver.set(index2, Integer.valueOf(tmp));
   }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从得到的JAVA文件分析，扩展函数的实现非常简单，它没有修改接受者类型的成员，仅仅是通过静态方法来实现的。这样，我们虽然不必担心扩展函数会带来额外的性能消耗，但是它也不会带来性能上的优化。&lt;/p&gt;
&lt;h2 id=&quot;更复杂的情况&quot;&gt;&lt;strong&gt;3.更复杂的情况&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;下面来讨论一些更特殊的情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1 当发生继承时&lt;/strong&gt;，扩展函数由于本质上是静态方法，它会严格按照参数类型去执行调用，而不会去优先执行或者主动执行父类的方法，如下的例子所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;open class A

class B:A()

fun A.foo() = &quot;a&quot;

fun B.foo() = &quot;b&quot;

fun printFoo(a:A){
   println(a.foo())
}

println(B())&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述例子的输出结果是a，因为扩展函数的入参类型是A，他将会严格按照入参类型执行函数调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2 如果扩展函数和现有的类成员发生冲突&lt;/strong&gt;，kotlin将会默认使用类成员，这一步选择是在编译期处理的，生成的字节码是将会是调用类成员的方法，如下例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class C{    
    fun foo() {println(&quot;Member&quot;)}
}

fun C.foo() {println(&quot;Extension&quot;)}

println(C().foo())&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述的例子将会输出&lt;code&gt;Member&lt;/code&gt;。Kotlin不允许扩展一个已有的成员，原因也很好理解，我们不希望扩展函数成为调用三方sdk的漏洞，不过如果你试图使用重载的方式创建扩展函数，这样是可行的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.3 Kotlin严格区分了可能为空和不为空的入参类型&lt;/strong&gt;，同样也应用在扩展函数的中，为了声明一个可能为空的接受者类型，可以参考如下例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fun &amp;lt;T&amp;gt; MutableList&amp;lt;T&amp;gt;?.swap(index1:Int,index2:Int){
    if(this == null){
        println(null)
        return
    } 

    val tmp = this[index1]    
    this[index1] = this[index2]    
    this[index2] = tmp
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3.4 我们有时候还希望能够添加类似JAVA的“静态函数”的扩展函数&lt;/strong&gt;，这时需要借助“伴随对象(Companion Object)”来实现，如下这个例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class D{
    companion object{
        val m = 1
    }
}

fun D.Companion.foo(){
    println(&quot;$m in extension&quot;)
}

D.foo()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的例子会输出&lt;code&gt;1 in extension&lt;/code&gt;，注意这里调用foo这个扩展函数时，并不需要类D的实例，类似于JAVA的静态方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.5 如果留意前面的例子&lt;/strong&gt;，我们会发现kotlin的&lt;code&gt;this&lt;/code&gt;语法和JAVA不同，使用范围更灵活，仅以扩展函数为例，当在扩展函数里调用&lt;code&gt;this&lt;/code&gt;时，指代的是接受者类型的实例，那么如果这个扩展函数声明在一个类内部，我们如何通过&lt;code&gt;this&lt;/code&gt;获取到类的实例呢？可以参考下面的例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class E{    
    fun foo(){
        println(&quot;foo in Class E&quot;)
    }

}
class F{    
    fun foo(){
        println(&quot;foo in Class F&quot;)
    }

    fun E.foo2(){        
        this.foo()        
        this@F.foo()
    }
}

E().foo2()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里使用了kotlin的this指定语法，关键字是@,后接指定的类型，上述例子的输出结果是&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;foo in Class E
foo in Class F&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;扩展函数的作用域&quot;&gt;&lt;strong&gt;4. 扩展函数的作用域&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;一般来说，我们习惯将扩展函数直接定义在包内，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package com.example.extension

fun MutableList&amp;lt;Int&amp;gt;.swap(index1:Int,index2:Int) {
    val tmp = this[index1]
    this[index1] = this[index2]
    this[index2] = tmp
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样，在同一个包内可以直接调用改扩展函数，如果我们需要跨包调用扩展函数，我们需要通过import来指明，以上述的例子为例，可以通过&lt;code&gt;import com.example.extension.swap&lt;/code&gt;来指定这个扩展函数，也可以通过&lt;code&gt;import com.example.extension.*&lt;/code&gt;表示引入该包内的所有扩展函数。得益于Android Studio具备的自动联想能力，通常不需要我们主动输入&lt;code&gt;import&lt;/code&gt;指令。&lt;/p&gt;
&lt;p&gt;有时候，我们也会把扩展函数定义在类的内部，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class G {
    fun Int.foo(){
        println(&quot;foo in Class G&quot;)
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的&lt;code&gt;Int.foo()&lt;/code&gt;是一个定义在类G内部的扩展函数，在这个扩展函数里，我们直接使用&lt;code&gt;Int&lt;/code&gt;类型作为接受者类型，因为我们将扩展函数定义在了类的内部，即使我们设置访问权限为&lt;code&gt;public&lt;/code&gt;，它也只能在该类或者该类的子类中被访问，如果我们设置访问权限为private，那么在子类中也不能访问这个扩展函数。&lt;/p&gt;
&lt;h2 id=&quot;扩展函数的实际应用&quot;&gt;&lt;strong&gt;5. 扩展函数的实际应用&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;5.1 Utils工具类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在JAVA中，我们习惯将工具类命名成&lt;code&gt;*Utils&lt;/code&gt;，例如&lt;code&gt;FileUtils&lt;/code&gt;,&lt;code&gt;StringUtils&lt;/code&gt;等等，著名的&lt;code&gt;java.util.Collections&lt;/code&gt;也是这么实现的。调用这些方法的时候，总觉得这些类名碍手碍脚的，例如这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Java

Collections.swap(list, Collections.binarySearch(list, Collections.max(otherList)), Collections.max(list));
Collections.max(list));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过静态引用，能让情况看起来好一点，例如这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Java

swap(list, binarySearch(list, max(otherList)), max(list));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是这样既没有IDE的自动联想提示，方法调用的主体也显得不明确。如果能做成下面这样就好了：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Java

list.swap(list.binarySearch(otherList.max()), list.max());&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是list是JAVA默认的基础类，在JAVA语言里，如果不使用继承，肯定是没法做到这样的，而在Kotlin中就可以借助扩展函数来实现啦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.2 Android View 胶水代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;回到最开始的例子，对于Android开发来说，对&lt;code&gt;findViewById()&lt;/code&gt;这个方法一定不会陌生，为了获取一个View对象，我们总得先调用&lt;code&gt;findViewById()&lt;/code&gt;然后再执行类型转换，这样无意义的胶水代码让&lt;code&gt;Activity&lt;/code&gt;或者&lt;code&gt;Fragment&lt;/code&gt;显得臃肿无比，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// JAVA

public class MainJavaActivity extends Activity {    
    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {        
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        TextView label = (TextView) findViewById(R.id.label);
        Button btn = (Button) findViewById(R.id.btn);

        label.setText(&quot;hello&quot;);
        label.setOnClickListener(new View.OnClickListener() {            
            @Override
            public void onClick(View v) {
                Log.d(&quot;Glen&quot;,&quot;onClick TextView&quot;);
            }
        });
        btn.setOnClickListener(new View.OnClickListener(){           
             @Override
            public void onClick(View v) {
                Log.d(&quot;Glen&quot;,&quot;onClick Button&quot;);
            }
        });
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们考虑利用扩展函数结合泛型，避免频繁的类型转换，扩展函数定义如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//kotlin

fun &amp;lt;T : View&amp;gt; Activity.find(@IdRes id: Int): T {    
    return findViewById(id) as T
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;调用的时候，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Kotlin
...
    TextView label = find(R.id.label);
    Button btn = find(R.id.btn);
...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;只是我们还是需要获取到&lt;code&gt;label&lt;/code&gt;,&lt;code&gt;btn&lt;/code&gt;，这样无意义的中间变量，如果在Int类上扩展，可以直接对&lt;code&gt;R.id.*&lt;/code&gt;操作，这样更直接，再结合高阶函数，函数定义如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//Kotlin

fun Int.setText(str:String){
    val label = find&amp;lt;TextView&amp;gt;(this).apply {
        text = str
    }
}

fun Int.onClick(click: ()-&amp;gt;Unit){
    val tmp = find&amp;lt;View&amp;gt;(this).apply {
        setOnClickListener{
            click()
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们就可以这样调用：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//Kotlin

R.id.label.setText(&quot;hello&quot;)
R.id.label.onClick { Log.d(&quot;Glen&quot;,&quot;onClick TextView&quot;) }
R.id.btn.onClick { Log.d(&quot;Glen&quot;,&quot;onClick Button&quot;) }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通常这些扩展函数可以放到基类中，根据扩展函数的作用域知识，我们可以在所有子类中都调用到这些方法，所以kotlin的&lt;code&gt;Activity&lt;/code&gt;可以写成：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Kotlin
class MainKotlinActivity:KotlinBaseActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        R.id.label.setText(&quot;hello&quot;)
        R.id.label.onClick { Log.d(&quot;Glen&quot;,&quot;onClick TextView&quot;) }
        R.id.btn.onClick { Log.d(&quot;Glen&quot;,&quot;onClick Button&quot;) }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从原来JAVA冗余的20多行代码，精简到只需要3行代码，而且代码可读性更高，更加直观，这便是函数式编程语言Kotlin的强大威力。&lt;/p&gt;
&lt;blockquote readability=&quot;0.67415730337079&quot;&gt;
&lt;p&gt;&lt;strong&gt;问答&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/ask/46989?fromSource=waitui&quot;&gt;什么是Kotlin的“接收器”？&lt;/a&gt;&lt;br/&gt;&lt;strong&gt;相关阅读&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1071662?fromSource=waitui&quot;&gt;你为什么需要 Kotlin&lt;/a&gt; &lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1110463?fromSource=waitui&quot;&gt;手Q Android线程死锁监控与自动化分析实践&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1042358?fromSource=waitui&quot;&gt;为什么说Kotlin的可读性比Java好？&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;此文已由作者授权腾讯云+社区发布，原文链接：&lt;a href=&quot;https://cloud.tencent.com/developer/article/1146533?fromSource=waitui&quot; class=&quot;uri&quot;&gt;https://cloud.tencent.com/developer/article/1146533?fromSource=waitui&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎大家前往&lt;a href=&quot;https://cloud.tencent.com/developer/?fromSource=waitui&quot;&gt;腾讯云+社区&lt;/a&gt;或关注云加社区微信公众号（QcloudCommunity），第一时间获取更多海量技术实践干货哦~&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 22 Jun 2018 07:32:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/9207619.html</dc:identifier>
</item>
<item>
<title>从.Net到Java学习第六篇——SpringBoot+mongodb&amp;Thymeleaf&amp;模型验证 - 邹琼俊</title>
<link>http://www.cnblogs.com/jiekzou/p/9208706.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jiekzou/p/9208706.html</guid>
<description>&lt;h2&gt;SpringBoot整合mongodb&lt;/h2&gt;
&lt;p&gt;　　MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。&lt;br/&gt;如果你没用过MongoDB，可以先去看下我的文章：&lt;a href=&quot;https://www.cnblogs.com/jiekzou/category/851166.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/jiekzou/category/851166.html&lt;/a&gt;&lt;br/&gt;　　接上一篇，修改pom.xml，添加mongodb的依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &amp;lt;!--mongodb--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-data-mongodb&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　添加mongodb数据库连接，修改application.yml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;spring:
  profiles:
    active: dev
  #  mongodb
&lt;span&gt;  data:
    mongodb:
      database: test
      port: 27017
      host: 192.168.1.18&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 修改原来的&lt;span&gt;Person&lt;span&gt;实体类&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person {
   &lt;span&gt; @Id
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;private Long id;

&lt;/span&gt;    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(Long id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String sex;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Person() {
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Person(&lt;span&gt;Long id,&lt;/span&gt;String name, String sex) {
        &lt;/span&gt;&lt;span&gt;this.id=id;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sex =&lt;span&gt; sex;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getSex() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sex;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setSex(String sex) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sex =&lt;span&gt; sex;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新建包&lt;span&gt;repository&lt;/span&gt;，然后在包下创建一个数据操作层接口PersonRepository，继承MongoRepository，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; PersonRepository &lt;span&gt;extends&lt;/span&gt; MongoRepository&amp;lt;Person,Long&amp;gt;&lt;span&gt; {
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建一个controller类&lt;span&gt;PersonController&lt;/span&gt;进行增删改查测试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PersonController {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; PersonRepository userRepository;

    @GetMapping(&lt;/span&gt;&quot;save&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String save() {
        Person userInfo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Person(System.currentTimeMillis(),&quot;李寻欢&quot;,&quot;男&quot;&lt;span&gt;);
        userRepository.save(userInfo);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;success&quot;&lt;span&gt;;
    }

    @GetMapping(&lt;/span&gt;&quot;getUserList&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Person&amp;gt;&lt;span&gt; getUserList() {
        List&lt;/span&gt;&amp;lt;Person&amp;gt; userInfoList =&lt;span&gt; userRepository.findAll();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userInfoList;
    }

    @GetMapping(&lt;/span&gt;&quot;delete&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String delete(Long id) {
        userRepository.delete(id);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;success&quot;&lt;span&gt;;
    }

    @GetMapping(&lt;/span&gt;&quot;update&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String update(Long id, String username, String password) {
        Person userInfo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Person(id, username, password);
        userRepository.save(userInfo);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;success&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;访问http://localhost:8083/boot/save，刷几遍，添加几条数据&lt;/p&gt;
&lt;p&gt;然后再访问http://localhost:8083/boot/getUserList查看数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/413851/201806/413851-20180621143259598-2108156092.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，我们也可以使用可视化的mongodb管理工具去查看，这里我使用的是robo3t&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/413851/201806/413851-20180621143739063-1394305232.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在配置了mysql、mongodb等数据库连接之后我们发现，基本上我们都离不开如下几个步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;加入对应依赖&lt;/li&gt;
&lt;li&gt;配置文件配置对应数据库信息&lt;/li&gt;
&lt;li&gt;数据操作层继承想要的repository&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;SpringBoot引用Thymeleaf&lt;/h2&gt;
&lt;p&gt;Thymeleaf就是一个模板引擎和.net的razor一样。Spring boot 推荐用来代替jsp。&lt;br/&gt;&lt;strong&gt;Thymeleaf的优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;    Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。（当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。）&lt;/li&gt;
&lt;li&gt;    Thymeleaf 开箱即用的特性。（它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果。）&lt;/li&gt;
&lt;li&gt;    Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;另外，Thymeleaf是一个XML/XHTML/HTML5模板引擎，可用于Web与非Web环境中的应用开发。它是一个开源的Java库，基于Apache License 2.0许可，由Daniel Fernández创建，该作者还是Java加密库Jasypt的作者。&lt;/p&gt;
&lt;p&gt;由于Thymeleaf使用了XML DOM解析器，因此它并不适合于处理大规模的XML文件。也就是说它的性能是有一定问题的，如果文件较大的情况下。&lt;/p&gt;
&lt;p&gt;关于Thymeleaf的语法可以参考官网：&lt;a href=&quot;https://www.thymeleaf.org/documentation.html&quot; target=&quot;_blank&quot;&gt;https://www.thymeleaf.org/documentation.html&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;SpringBoot引用Thymeleaf依赖&lt;/h3&gt;
&lt;p&gt;修改pom.xml，添加如下依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;thymeleaf&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-thymeleaf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里有个坑，默认情况下hymeleaf中所有的标签都必须成对出现，否则IDEA运行时就会报错：&quot; 必须由匹配的结束标记终止..“。&lt;/p&gt;
&lt;p&gt;据说spring boot 2.0已结修复了这个标签的问题，但是我这里目前用的版本是低于2.0的，所以需要额外处理。&lt;/p&gt;
&lt;p&gt;继续添加依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;net.sourceforge.nekohtml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nekohtml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.9.22&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后修改application.yml中的配置，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;spring:
  profiles:
    active: dev
&lt;span&gt;  thymeleaf:
    mode: LEGACYHTML5&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新建一个控制器类来做测试，&lt;span&gt;AreaPageController,&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AreaPageController{
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; AreaService areaService;

    @GetMapping(&lt;/span&gt;&quot;/addArea&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String addArea(Model model) {
       &lt;span&gt; model.addAttribute(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;area&quot;, new Area());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;addArea&quot;&lt;span&gt;;
    }
    @RequestMapping(value &lt;/span&gt;= &quot;/addArea&quot;,method = RequestMethod.POST, produces = {&quot;application/json;charset=UTF-8&quot;&lt;span&gt;})
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String addArea(&lt;span&gt;@Valid @ModelAttribute&lt;/span&gt; Area area, &lt;span&gt;BindingResult bindingResult&lt;/span&gt;){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (bindingResult.hasErrors()) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;addArea&quot;&lt;span&gt;;
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            Map&lt;/span&gt;&amp;lt;String,Object&amp;gt; modelMap= &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String,Object&amp;gt;&lt;span&gt;() ;
            modelMap.put(&lt;/span&gt;&quot;success&quot;&lt;span&gt;,areaService.addArea(area));
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;result&quot;&lt;span&gt;;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改之前的&lt;span&gt;Area实体类，&lt;span&gt;这东西就跟.net mvc 里面的模型验证一样&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.yujie.model;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.validator.constraints.NotEmpty;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.validation.constraints.Max;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.validation.constraints.Min;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.validation.constraints.NotNull;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.validation.constraints.Size;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Area {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer areaId;
&lt;span&gt;    @NotEmpty
    @Size(min&lt;/span&gt;&lt;/span&gt;&lt;span&gt;=2, max=30)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String areaName;
&lt;span&gt;    @NotNull
    @Min(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;1)
    @Max(200)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer priority;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date createTime;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date lastEditTime;&lt;br/&gt;　　......&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;templates目录是存放html文件的，在templates目录下面新建一个html文件addArea.html，这个就相当于.net mvc中的razor视图。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;xmlns:th&lt;/span&gt;&lt;span&gt;=&quot;http://www.thymeleaf.org&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;引入thymeleaf&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;添加区域&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2 &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;color:green;text-align: center;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;添加区域&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-horizontal&quot;&lt;/span&gt;&lt;span&gt; role&lt;/span&gt;&lt;span&gt;=&quot;form&quot;&lt;/span&gt;&lt;span&gt; action&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt; th:action&lt;/span&gt;&lt;span&gt;=&quot;@{/addArea}&quot;&lt;/span&gt;&lt;span&gt; th:object&lt;/span&gt;&lt;span&gt;=&quot;${area}&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-2 control-label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;区域名称：&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; th:field&lt;/span&gt;&lt;span&gt;=&quot;*{areaName}&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;areaName&quot;&lt;/span&gt;&lt;span&gt;
                                          placeholder&lt;/span&gt;&lt;span&gt;=&quot;输入区域名称&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-2&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;color:red&quot;&lt;/span&gt;&lt;span&gt; th:if&lt;/span&gt;&lt;span&gt;=&quot;${#fields.hasErrors('areaName')}&quot;&lt;/span&gt;&lt;span&gt; th:errors&lt;/span&gt;&lt;span&gt;=&quot;*{areaName}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;区域名称错误&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;priority&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-2 control-label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;优先级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; th:field&lt;/span&gt;&lt;span&gt;=&quot;*{priority}&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;priority&quot;&lt;/span&gt;&lt;span&gt;
                                          placeholder&lt;/span&gt;&lt;span&gt;=&quot;输入优先级&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-2&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;color:red&quot;&lt;/span&gt;&lt;span&gt; th:if&lt;/span&gt;&lt;span&gt;=&quot;${#fields.hasErrors('priority')}&quot;&lt;/span&gt;&lt;span&gt; th:errors&lt;/span&gt;&lt;span&gt;=&quot;*{priority}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;优先级错误&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-12&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;text-align: center&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-primary&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;btn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Submit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;reset&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-warning&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;Reset&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/413851/201806/413851-20180621162949412-2007630284.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;title&quot;&gt;其它学习资料：&lt;a href=&quot;https://www.jianshu.com/p/3204a904f615?utm_campaign=maleskine&amp;amp;utm_content=note&amp;amp;utm_medium=seo_notes&amp;amp;utm_source=recommendation&quot; target=&quot;_blank&quot;&gt;Spring Web MVC框架（十二） 使用Thymeleaf&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 22 Jun 2018 07:31:00 +0000</pubDate>
<dc:creator>邹琼俊</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jiekzou/p/9208706.html</dc:identifier>
</item>
<item>
<title>Xamarin.Forms系列   1、认识Xamarin.Forms - xamarin</title>
<link>http://www.cnblogs.com/xamarin/p/9213628.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xamarin/p/9213628.html</guid>
<description>&lt;p&gt;一、开篇吹水&lt;/p&gt;
&lt;p&gt;　　我很早就接触Xamarin了，但也只是空闲时翻翻官方文档，FQ看看视频教程，当然也买了几本相关的书籍，但是一直没有在实际项目中使用过。这个博客也是很早就注册了，一直没写过文章（主要是我都还不会用xamarin，能写出啥来）。国内玩xamarin玩的6的人也不少，只是都很低调（这么好的技术当然要偷偷用(*^_^*)）。&lt;/p&gt;
&lt;p&gt;　　不知道能不能坚持写这个系列，试试吧！我写文章主要是对自己的总结，也是抛砖引玉。希望微软能硬起来！！！&lt;/p&gt;
&lt;p&gt;二、进入正题&lt;/p&gt;
&lt;p&gt;　　1、什么是Xamarin.Forms？&lt;/p&gt;
&lt;p&gt;　　　　要解决这个问题当然是要去看官方文档了（&lt;a href=&quot;https://docs.microsoft.com/zh-cn/xamarin/xamarin-forms/get-started/index&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/zh-cn/xamarin/xamarin-forms/get-started/index&lt;/a&gt;），官方介绍：“&lt;em&gt;Xamarin.Forms 是一个跨平台 UI 工具包，允许开发人员有效创建可跨 iOS、Android、通用 Windows 平台应用共享的本机用户界面布局。&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;　　2、Xamarin.Forms有啥优势？&lt;/p&gt;
&lt;p&gt;　　　　（1）、最大的优势当然是跨平台了。那到底能跨多少平台？&lt;/p&gt;
&lt;p&gt;　　　　直接上图片。图片引用自 北京视高盛景软件首席架构师 周岳老板 的ppt&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038566/201806/1038566-20180622142650682-1207554536.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　（2）、生成原生应用，对，是原生应用，性能如何？自己脑补！！！&lt;/p&gt;
&lt;p&gt;　　　　（3）、100%调用原生API，这个有啥用？下面会给个具体例子，让大家真正认识一下Xamarin.Forms的强大！&lt;/p&gt;
&lt;p&gt;　　　　（4）、可以使用美丽而熟悉的C#开发APP，美滋滋...&lt;/p&gt;

&lt;p&gt;三、举个栗子，认识下Xamarin.Forms的强大，以及应该如何学习Xamarin&lt;/p&gt;
&lt;p&gt;　　有时候我们可能会需要读取手机上短信内容，那么问题来了，这个读取短信内容就比较底层了，Xamarin.Forms只是一个跨平台UI框架，这么底层的操作怎么实现？？？&lt;/p&gt;
&lt;p&gt;　　这可怎么玩？百度试试...啥都没有搜到，渣渣Xamarin，垃圾，放弃了。。。相信很多刚接触到xamarin的萌新都会有这样的想法。&lt;/p&gt;
&lt;p&gt;　　那我们到底应该怎么学习xamarin？&lt;/p&gt;
&lt;p&gt;　　首先，要明确认识到，原生能做的事情Xamarin都能实现，那么遇到较底层的问题当然要去看看原生怎么实现的。&lt;/p&gt;
&lt;p&gt;　　我一般遇到问题都会先谷歌一下，看看大佬们是怎么解决的（你遇到的大部分xamarin.forms问题都可以搜索到解决办法）。知道大佬们怎么解决的了，再github找找有没有做好的第三方库，有就拿过来用，没有就只能自己写了！&lt;/p&gt;
&lt;p&gt;　　就像下面这个例子，通过谷歌找到的解决方案，但是没找到第三方库。只能自己动手丰衣足食了。&lt;/p&gt;
&lt;p&gt;　　具体操作如下：&lt;/p&gt;
&lt;p&gt;　　1、打开宇宙第一IDE VS2017，并创建一个Xamarin.Forms项目（我这里只创建安卓项目了）&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038566/201806/1038566-20180622144921888-1249427031.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038566/201806/1038566-20180622145007953-818522327.png&quot; alt=&quot;&quot;/&gt;　　　　&lt;/p&gt;
&lt;p&gt;　　2、要使用到的技能：DependencyService（https://docs.microsoft.com/zh-cn/xamarin/xamarin-forms/app-fundamentals/dependency-service/）具体介绍和使用方法看官方文档&lt;/p&gt;
&lt;p&gt;　　　　 &lt;img src=&quot;https://images2018.cnblogs.com/blog/1038566/201806/1038566-20180622145604904-730866896.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3、创建个实体类 SmsEntity.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
using System;
using System.Collections.Generic;
using System.Text;

namespace ReadSms.Entity
{
    public class SmsEntity
    {
        public string address { get; set; }
        public string body { get; set; }
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　4、在共享代码里面创建一个接口 IReadSms&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
using System;
using System.Collections.Generic;
using System.Text;
using ReadSms.Entity;

namespace ReadSms.DService
{
    public interface IReadSms
    {
        List&amp;lt;SmsEntity&amp;gt; ReadAllSms();
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　5、到安卓项目实现接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Android.App;
using Android.Content;
using Android.Database;
using Android.OS;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using ReadSms.DService;
using ReadSms.Entity;

[assembly: Xamarin.Forms.Dependency(typeof(ReadSms.Droid.DService.ReadSms))]
namespace ReadSms.Droid.DService
{
    public class ReadSms : IReadSms
    {
        private static Context _context;

        public static void Init(Context context)
        {
            if (context != null)
            {
                _context = context;
            }
        }

        public List&amp;lt;SmsEntity&amp;gt; ReadAllSms()
        {
            Android.Net.Uri inboxURI = Android.Net.Uri.Parse(&quot;content://sms/inbox&quot;);//收件箱
            //Android.Net.Uri sentURI = Android.Net.Uri.Parse(&quot;content://sms/sent&quot;);//发件箱
            //Android.Net.Uri draftURI = Android.Net.Uri.Parse(&quot;content://sms/draft&quot;);//草稿

            //获取内容解析器对象，该对象将处理内容提供者
            ContentResolver cr = _context.ContentResolver;

            //从内置内容提供商获取收件箱SMS消息
            ICursor cursor = cr.Query(inboxURI, null, null, null, null);

            List&amp;lt;SmsEntity&amp;gt; data = new List&amp;lt;SmsEntity&amp;gt;();

            if (cursor != null &amp;amp;&amp;amp; cursor.Count &amp;gt; 0)
            {
                for (cursor.MoveToFirst(); !cursor.IsAfterLast; cursor.MoveToNext())
                {
                    SmsEntity obj = new SmsEntity();
                    obj.body = cursor.GetString(cursor.GetColumnIndex(&quot;body&quot;));
                    obj.address = cursor.GetString(cursor.GetColumnIndex(&quot;address&quot;));

                    if (!string.IsNullOrEmpty(obj.body) &amp;amp;&amp;amp; !string.IsNullOrEmpty(obj.address))
                    {
                        data.Add(obj);
                    }
                }
            }

            return data;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　核心代码就这么多，具体什么意思可以看看这篇文章 https://www.cnblogs.com/ycclmy/p/3193075.html&lt;/p&gt;
&lt;p&gt;　　6、调用实现的功能&lt;/p&gt;
&lt;p&gt;　　来到MainPage.xaml文件创建xaml界面&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&quot;http://xamarin.com/schemas/2014/forms&quot;
             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;
             xmlns:local=&quot;clr-namespace:ReadSms&quot;
             x:Class=&quot;ReadSms.MainPage&quot;&amp;gt;

    &amp;lt;StackLayout&amp;gt;
        &amp;lt;ListView x:Name=&quot;listview&quot;&amp;gt;
            &amp;lt;ListView.ItemTemplate&amp;gt;
                &amp;lt;DataTemplate&amp;gt;
                    &amp;lt;TextCell Text=&quot;{Binding address}&quot; Detail=&quot;{Binding body}&quot;/&amp;gt;
                &amp;lt;/DataTemplate&amp;gt;
            &amp;lt;/ListView.ItemTemplate&amp;gt;
        &amp;lt;/ListView&amp;gt;
        &amp;lt;Button Text=&quot;读取收件箱短信&quot; Clicked=&quot;Button_OnClicked&quot;/&amp;gt;
    &amp;lt;/StackLayout&amp;gt;
&amp;lt;/ContentPage&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　主要就是创建了一个列表来显示读取到的所有短信内容，还有一个按钮，点击按钮后开始读取短信。&lt;/p&gt;
&lt;p&gt;　　再来cs文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ReadSms.DService;
using ReadSms.Entity;
using Xamarin.Forms;

namespace ReadSms
{
        public partial class MainPage : ContentPage
        {
                public MainPage()
                {
                        InitializeComponent();
                }

            private void Button_OnClicked(object sender, EventArgs e)
            {
                List&amp;lt;SmsEntity&amp;gt; SmsList = DependencyService.Get&amp;lt;IReadSms&amp;gt;().ReadAllSms();

                listview.ItemsSource = SmsList;
            }
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过 DependencyService.Get&amp;lt;IReadSms&amp;gt;().ReadAllSms(); 这样的方式 调用安卓平台实现的功能！&lt;/p&gt;
&lt;p&gt;　　7、抛异常了！！！&lt;/p&gt;
&lt;p&gt;　　此时运行项目肯定会抛异常，因为我们还没有给app赋予读取短信的权限。来到安卓项目-属性-清单-勾选所需权限&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038566/201806/1038566-20180622151121920-713887397.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　8、运行结果 见下图，大功告成&lt;/p&gt;
&lt;p&gt;　　　　 &lt;img src=&quot;https://images2018.cnblogs.com/blog/1038566/201806/1038566-20180622151316869-2084285968.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;四、总结一下&lt;/p&gt;
&lt;p&gt;　　还是那句话，原生能做的事情，Xamarin都可以做，而且是跨平台的，还是原生性能。国内由北京视高盛景软件公司开发的21世纪不动产APP（可以来这里看看视频介绍 https://v.qq.com/x/page/k0538f2u8vy.html），已经非常完善。&lt;/p&gt;
&lt;p&gt;这么好的技术，还在等什么？？？用着熟悉的宇宙第一IDE，还有美丽的C#，来开发跨平台APP吧！&lt;/p&gt;

</description>
<pubDate>Fri, 22 Jun 2018 07:18:00 +0000</pubDate>
<dc:creator>xamarin</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xamarin/p/9213628.html</dc:identifier>
</item>
<item>
<title>支付宝异步回调验证签名的那些走过的坑 - 隐于深巷丶</title>
<link>http://www.cnblogs.com/liuqiwang/p/9213502.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuqiwang/p/9213502.html</guid>
<description>&lt;p&gt;今天做支付宝接口回调这块，不得不说，弄的我焦头烂额，翻了很多陈年旧帖，试了无数种解决坑的方案，在我成功解决的一瞬间，觉得非常有必要记录一下这些坑。&lt;/p&gt;
&lt;p&gt;签名验证错误的检查顺序（这里是基于使用官方给的demo，自己封装的请绕道）：&lt;/p&gt;
&lt;p&gt;1：检查一下你使用的验证签名的方法是否正确？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;bool&lt;/span&gt; signVerified = AlipaySignature.RSACheckV1(dic, alipay_public_key, config.charset);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2：检查一下你传入的参数是否正确？&lt;/p&gt;
&lt;p&gt;参数1：dic，把回调的参数保存到key，value集合中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; dic = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; form =&lt;span&gt; HttpContext.Current.Request.Form;
&lt;/span&gt;&lt;span&gt;string&lt;/span&gt; str = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;异步通知：\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; form)
{
   dic[key.ToString()] &lt;/span&gt;=&lt;span&gt; HttpContext.Current.Request.Form[key.ToString()];
   &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; value =&lt;span&gt; HttpContext.Current.Request.Form[key.ToString()];
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录日志使用&lt;/span&gt;
   str += $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{key.ToString()}:{value}\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数2：alipay_public_key&lt;/p&gt;
&lt;p&gt;这个参数是 &lt;span&gt;支付宝公钥！！   &lt;span&gt;很多小伙伴都写成了应用公钥，瞎几把写。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;参数3：编码格式，UTF-8,这个一般没人会错。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;3：检查一下你的环境，沙盒环境还是线上环境，沙盒环境会出错，具体为什么我不知道，百度来的。要在支付宝中给你的回调域名授权，不授权人家懒得回调给你。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;4：检查一下你的加密解密类型，我从官网下载下来的demo里面的解密类型默认是RSA，但是官方文档已经明确说明现在都要用RSA2了，所以记得检查demo的源码&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; RSACheckV1(IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; parameters, &lt;span&gt;string&lt;/span&gt; publicKeyPem, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; charset)
{
   &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; sign = parameters[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sign&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
   &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; sign_type = parameters[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sign_type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
   parameters.Remove(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sign&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
   parameters.Remove(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sign_type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
   &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; signContent =&lt;span&gt; GetSignContent(parameters);
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; RSACheckContent(signContent, sign, publicKeyPem, charset, sign_type);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sign_type,这个就是解码类型，demo写的好像“RSA”，我这里改成动态获取了，我们在前期配置的地方也会配置加密类型，从哪获取都可以，别弄错了就行。&lt;/p&gt;

&lt;p&gt;5：这里不检查了，回忆一下你的支付宝公钥，是直接存在文本中的，还是写在代码里的（区别：公钥.txt，string 公钥 = “巴拉巴拉巴拉一大堆”），一个是文件，一个是直接代码（我就是代码，所以我一直到最后才解决）（下面的解决方案只针对代码保存支付宝公钥的骚年）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;string&lt;/span&gt; alipay_public_key = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-----BEGIN PUBLIC KEY-----\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + config.alipay_public_key + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-----END PUBLIC KEY-----\r\n\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; signVerified = AlipaySignature.RSACheckV1(dic, alipay_public_key, config.charset);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果是直接写在代码中的，要给支付宝公钥的头跟尾加上标识，具体标识看我贴出来的代码，如果是文件，请自动忽略&lt;/p&gt;
&lt;p&gt;还没结束，官方给的demo也是默认找的文件，可是我用的代码存的，哪有文件，所以找不到文件是会报错的，报错直接返回false了，在修改一下源码（自己到AlipaySignature这个类里面去找）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; RSACheckContent(&lt;span&gt;string&lt;/span&gt; signContent, &lt;span&gt;string&lt;/span&gt; sign, &lt;span&gt;string&lt;/span&gt; publicKeyPem, &lt;span&gt;string&lt;/span&gt; charset, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; signType)
{

    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(charset))
        {
            charset &lt;/span&gt;=&lt;span&gt; DEFAULT_CHARSET;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RSA2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.Equals(signType))
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里就是要改的地方
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从参数获取&lt;/span&gt;
            &lt;span&gt;string&lt;/span&gt; sPublicKeyPEM =&lt;span&gt; publicKeyPem;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从文件获取
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;string sPublicKeyPEM = File.ReadAllText(publicKeyPem);&lt;/span&gt;
            RSACryptoServiceProvider rsa = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RSACryptoServiceProvider();
            rsa.PersistKeyInCsp &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            RSACryptoServiceProviderExtension.LoadPublicKeyPEM(rsa, sPublicKeyPEM);

            &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; bVerifyResultOriginal = rsa.VerifyData(Encoding.GetEncoding(charset).GetBytes(signContent), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SHA256&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, Convert.FromBase64String(sign));
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bVerifyResultOriginal;

        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里就是要改的地方
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从参数获取&lt;/span&gt;
            &lt;span&gt;string&lt;/span&gt; sPublicKeyPEM =&lt;span&gt; publicKeyPem;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从文件获取
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;string sPublicKeyPEM = File.ReadAllText(publicKeyPem);&lt;/span&gt;
            RSACryptoServiceProvider rsa = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RSACryptoServiceProvider();
            rsa.PersistKeyInCsp &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            RSACryptoServiceProviderExtension.LoadPublicKeyPEM(rsa, sPublicKeyPEM);

            SHA1CryptoServiceProvider sha1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SHA1CryptoServiceProvider();
            &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; bVerifyResultOriginal =&lt;span&gt; rsa.VerifyData(Encoding.GetEncoding(charset).GetBytes(signContent), sha1, Convert.FromBase64String(sign));
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bVerifyResultOriginal;
        }

    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e)
    {
        NLogGetter.NLog.ErrorLog(e);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，差不多就总结了这么多，基本上可以让你签名验证成功了。&lt;/p&gt;
</description>
<pubDate>Fri, 22 Jun 2018 07:01:00 +0000</pubDate>
<dc:creator>隐于深巷丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuqiwang/p/9213502.html</dc:identifier>
</item>
<item>
<title>4.C#WebAPI多版本管理介绍及实现方案详解 - 殷慈航</title>
<link>http://www.cnblogs.com/jiyuwu/p/9213455.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jiyuwu/p/9213455.html</guid>
<description>&lt;p&gt;&lt;strong&gt;1.什么是 API 的多版本？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说白了就是多版本共存的问题。为方便大家理解我就举个例子吧，大家想必都用过Jquery吧，它的1.*版本做到了对低版本IE的支持；2.*版本还保留着ajax，但是不再支持老旧浏览器；3.*版本连ajax都不留了；但是用户不会升级、用户拒绝升级等原因，造成这些旧版本也需要运行，但是新版却已经修改了规范与旧版旧版冲突了。造成这些旧版本也需要运行使用。再例如我们手机有Android4.0、5.0、6.0、7.0、8.0或IOS8.0、9.0、10、11同时存在于市场也是类似的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.出现多版本问题我们通常的做法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;旧版接口做成一个分支，除了进行 bug 修改外，旧版本接口不再做改动；新接口代码继续演化升级。在客户端请求的时候带着要请求的接口版本号，在服务器端选择合适的版本代码进行处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.技术处理方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）（最推荐）不同版本用不同的域名：v1.api.jiyuwu.com、v2.api.jiyuwu.com、v3……。&lt;/p&gt;
&lt;p&gt;（2） 在url、报文头等中带不同的版本信息，用 Nginx 等做反向代理服务器，然后将 http://api.jiyuwu.com/api/V1/Login/1和http://api.jiyuwu.com/api/V2/Login/1转到不同的服务器处理。&lt;/p&gt;
&lt;p&gt;（3） 多 个 版 本 的 Controller 共 处 在 一 个 项 目 中 ， 然 后 使 用 [RoutePrefix] 或 者 IHttpControllerSelector 根据报文头、路径等选择不同的 Controller 执行。下面主要讲这两种方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.针对3.（3）的两种方案的案例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; （1）[RoutePrefix] 案例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;旧版保持原样不改变&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_09b7a2cc-7697-4dbe-a968-cffe803d8e51&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_09b7a2cc-7697-4dbe-a968-cffe803d8e51&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_09b7a2cc-7697-4dbe-a968-cffe803d8e51&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoginController : ApiController
    {
        [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ToLogin(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这是旧版&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; id;
        }

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;新版代码同时用路由处理&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_7b31b0b8-c69f-4ea5-b225-c76e8f9d21c1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7b31b0b8-c69f-4ea5-b225-c76e8f9d21c1&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7b31b0b8-c69f-4ea5-b225-c76e8f9d21c1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
[RoutePrefix(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/V2/Login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoginV2Controller : ApiController
    {
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ToLogin(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这是新版&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; id;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1294257/201806/1294257-20180622144123653-939052170.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2） IHttpControllerSelector 案例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1294257/201806/1294257-20180622144543638-463876685.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;项目结构如图&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）添加VersionnControllerSelector类&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_4e902e44-f086-4f5a-b175-7afc779b28bb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4e902e44-f086-4f5a-b175-7afc779b28bb&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4e902e44-f086-4f5a-b175-7afc779b28bb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; VersionnControllerSelector : DefaultHttpControllerSelector
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; HttpConfiguration _config;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; VersionnControllerSelector(HttpConfiguration config)
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(config)
        {
            _config &lt;/span&gt;=&lt;span&gt; config;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, System.Web.Http.Controllers.HttpControllerDescriptor&amp;gt;&lt;span&gt; GetControllerMapping()
        {
            Dictionary&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;, HttpControllerDescriptor&amp;gt; dic = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, HttpControllerDescriptor&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; ams &lt;span&gt;in&lt;/span&gt;&lt;span&gt; _config.Services.GetAssembliesResolver().GetAssemblies())
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取继承自ApiControl的非抽象类&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; controlTypes = ams.GetTypes().Where(p =&amp;gt; !p.IsAbstract &amp;amp;&amp;amp; &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(ApiController).IsAssignableFrom(p)).ToArray();
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; ctrlType &lt;span&gt;in&lt;/span&gt;&lt;span&gt; controlTypes)
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从namespace中提取出版本号&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; match =&lt;span&gt; Regex.Match(ctrlType.Namespace,
                    &lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;MoreVersionContorl.Controllers.V(\d+)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (match.Success)
                    {
                        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; verNum = match.Groups[&lt;span&gt;1&lt;/span&gt;].Value;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取版本号&lt;/span&gt;
                        &lt;span&gt;string&lt;/span&gt; ctrlName =&lt;span&gt;
                        Regex.Match(ctrlType.Name, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(.+)Controller&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Groups[&lt;span&gt;1&lt;/span&gt;].Value;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从LoginController中拿到Login&lt;/span&gt;
                        &lt;span&gt;string&lt;/span&gt; key = ctrlName + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;V&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + verNum;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Personv2为key&lt;/span&gt;
                        dic[key] = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpControllerDescriptor(_config, ctrlName, ctrlType);
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dic;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; System.Web.Http.Controllers.HttpControllerDescriptor SelectController(HttpRequestMessage request)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取所有Controller集合&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; controllers =&lt;span&gt; GetControllerMapping();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取路由数据&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; routeData =&lt;span&gt; request.GetRouteData();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从路由中获取当前controller的名称&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; controllerName = (&lt;span&gt;string&lt;/span&gt;)routeData.Values[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;controller&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从url中获取到版本号&lt;/span&gt;
            &lt;span&gt;string&lt;/span&gt; verNum =&lt;span&gt;
            Regex.Match(request.RequestUri.PathAndQuery, &lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;api/V(\d+)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Groups[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;].Value;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; key = controllerName + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;V&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + verNum;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取Loginv2&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (controllers.ContainsKey(key))&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取HttpControllerDescriptor&lt;/span&gt;
&lt;span&gt;            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; controllers[key];
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;（2）创建V1和V2下的两个控制器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1） V1下的LoginController&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_54fda479-f254-4be7-9500-1f1cc3d3d67e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_54fda479-f254-4be7-9500-1f1cc3d3d67e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_54fda479-f254-4be7-9500-1f1cc3d3d67e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoginController : ApiController
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Get(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This Version is V1,id=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; id;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;2） V2下的LoginController&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_176fae13-3a13-47d3-9fc6-48f97b0498d1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_176fae13-3a13-47d3-9fc6-48f97b0498d1&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_176fae13-3a13-47d3-9fc6-48f97b0498d1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoginController : ApiController
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Get(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This Version is V2,id=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;id;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;（3）修改WebApiConfig&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_b1047d78-7950-4198-9e74-416b2589249e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b1047d78-7950-4198-9e74-416b2589249e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b1047d78-7950-4198-9e74-416b2589249e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Register(HttpConfiguration config)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Web API 配置和服务

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Web API 路由&lt;/span&gt;
&lt;span&gt;            config.MapHttpAttributeRoutes();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;config.Routes.MapHttpRoute(
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    name: &quot;DefaultApi&quot;,
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    routeTemplate: &quot;api/{controller}/{id}&quot;,
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    defaults: new { id = RouteParameter.Optional }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;            config.Routes.MapHttpRoute(
            name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DefaultApiV1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            routeTemplate: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/V1/{controller}/{action}/{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            defaults: &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; { id =&lt;span&gt; RouteParameter.Optional }
            );
            config.Routes.MapHttpRoute(
            name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DefaultApiV2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            routeTemplate: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/V2/{controller}/{action}/{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            defaults: &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; { id =&lt;span&gt; RouteParameter.Optional }
            );
            config.Services.Replace(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(IHttpControllerSelector),
            &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; VersionnControllerSelector(config));
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;（4）配置完毕请求结果如图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1294257/201806/1294257-20180622145530115-1656762796.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 22 Jun 2018 06:56:00 +0000</pubDate>
<dc:creator>殷慈航</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jiyuwu/p/9213455.html</dc:identifier>
</item>
<item>
<title>summernote富文本编辑器的使用 - 人缘好</title>
<link>http://www.cnblogs.com/renyuanhao/p/9213321.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/renyuanhao/p/9213321.html</guid>
<description>&lt;p&gt;&lt;span&gt;最近在开发一个微信公众号的后台，微信公众号编辑的文章一直没有得到很好地适应，大多数人也是在其他的编辑软件中编辑好之后直接去复制到微信公众平台中，考虑到复制后会排版出现问题，所以给大家推荐一款很不错的Web富文本编辑器 （summernote）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;官网地址为： https://summernote.org/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先看一下编辑器的样子:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1097056/201806/1097056-20180622140149580-926420645.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;接下来就简单的实现这个编辑器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.首先需要从官网下载summernote的包（js和css两部分）然后新建一个页面，因为这个是建立在jquery和bootstarp两个基础上的，所以我们也需要引用他们，以下为我们引入的五个文件，代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
  &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../../js/jquery-3.1.1.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;link href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../../css/bootstrap.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
  &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../../js/bootstrap.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;link href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dist/summernote.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
  &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dist/summernote.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.创建一个summernote的容器。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;summernote&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Hello Summernote&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.创建summernote，并且将上传的图片保存到本地，然后再返回到编辑器中，如果直接复制图片不去保存，图片的地址会是原来的地址，并不是本地的地址。所以我们需要将图片保存到本地，然后就可以将文章获取存入数据库了。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
    &amp;lt;script&amp;gt;&lt;span&gt;
        $(document).ready(function () {
            $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#summernote&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).summernote({
                height: &lt;/span&gt;&lt;span&gt;500&lt;/span&gt;&lt;span&gt;,
                width:&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;,
                minHeight: &lt;/span&gt;&lt;span&gt;300&lt;/span&gt;&lt;span&gt;,           
                maxwidth: &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;,
                minwidth: &lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;,
                maxHeight: &lt;/span&gt;&lt;span&gt;500&lt;/span&gt;&lt;span&gt;,
                focus: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                callbacks: {
                    onImageUpload: function (files, editor) {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; $files =&lt;span&gt; $(files);
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过each方法遍历每一个file&lt;/span&gt;
&lt;span&gt;                        $files.each(function () {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; file = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; FormData，新的form表单封装，具体可百度，但其实用法很简单，如下&lt;/span&gt;
                            &lt;span&gt;var&lt;/span&gt; data = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FormData();
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将文件加入到file中，后端可获得到参数名为“file”&lt;/span&gt;
                            data.append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, file);
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ajax上传&lt;/span&gt;
&lt;span&gt;                            $.ajax({
                                data: data,
                                type: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                                url: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../../ashx_html/summernote.ashx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt; div上的action&lt;/span&gt;
                                cache: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                                contentType: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                                processData: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 成功时调用方法，后端返回json数据&lt;/span&gt;
&lt;span&gt;                                success: function (response) {
                                    console.log(response)
                                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; json =&lt;span&gt; $.parseJSON(response)
                                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (json.state == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) {
                                        alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;上传失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 插入到summernote&lt;/span&gt;
                                        $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#summernote&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).summernote(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;insertImage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, json.img_url);
                                    }
                                },
                            });
                        })
                    }
                }
            });
        });
    &lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4.现在我们就可以在页面上看到编辑器了，现在需要建立一个后台接收器，来接受上传的图片保存，然后将图片地址返回到页面。这里我使用ashx来接受，也可以用其他的方式，逻辑都是一样的。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ProcessRequest(HttpContext context)
        {
            context.Response.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/plain&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            HttpFileCollection file_ &lt;/span&gt;=&lt;span&gt; context.Request.Files;
            sumnmer_data summer_list &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; sumnmer_data();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (file_.Count!=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; size = file_[&lt;span&gt;0&lt;/span&gt;].ContentLength;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件大小                           &lt;/span&gt;
                &lt;span&gt;string&lt;/span&gt; type = file_[&lt;span&gt;0&lt;/span&gt;].ContentType;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件类型                            &lt;/span&gt;
                &lt;span&gt;string&lt;/span&gt; name = file_[&lt;span&gt;0&lt;/span&gt;].FileName;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件名                           &lt;/span&gt;
                &lt;span&gt;string&lt;/span&gt; _tp = System.IO.Path.GetExtension(name);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件后缀名                                          &lt;/span&gt;
                &lt;span&gt;string&lt;/span&gt; saveName = DateTime.Now.ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyyMMddHHmmssfff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存后的文件名称（这里使用时间戳）                                                    &lt;/span&gt;
                &lt;span&gt;string&lt;/span&gt; file = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\admin\\summer_img\\&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存的路径&lt;/span&gt;
                &lt;span&gt;string&lt;/span&gt; path = System.Web.HttpContext.Current.Request.PhysicalApplicationPath +&lt;span&gt; file;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                    DirectoryInfo dirInfo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DirectoryInfo(path);
                    dirInfo.Attributes &lt;/span&gt;= FileAttributes.Normal &amp;amp;&lt;span&gt; FileAttributes.Directory;
                }
                file_[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;].SaveAs(path + saveName +&lt;span&gt; _tp);
                summer_list.state &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;succes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                summer_list.img_url &lt;/span&gt;= file + saveName +&lt;span&gt; _tp;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                summer_list.state &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }
            context.Response.Write(JsonConvert.SerializeObject(summer_list));

        }&lt;br/&gt;　　　　　//返回的类
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; sumnmer_data {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; state { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; } //（成功为succes，失败为error）
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; img_url { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }//图片存到本地的路径
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　将文件获取 按路径保存，将保存图片的地址和状态 存入summer_data中 ，然后转为json字符串返回到页面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.获取编辑器的内容：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;var&lt;/span&gt; markupStr = $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#summernote&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).summernote(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
 console.log(markupStr) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印到控制器&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  以上就是summernote富文本编辑器的操作和用法，视频上传和这个类似，还有一些编辑器控件的添加和删除，还有一些编辑器的样式修改 官网上都有很详细的说明，不明白的可以留言，我努力解答。&lt;/p&gt;

</description>
<pubDate>Fri, 22 Jun 2018 06:37:00 +0000</pubDate>
<dc:creator>人缘好</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/renyuanhao/p/9213321.html</dc:identifier>
</item>
<item>
<title>（3）ASP.NET CORE微服务 Micro-Service ---- Consul服务治理 - 搬砖老农</title>
<link>http://www.cnblogs.com/uglyman/p/9213133.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/uglyman/p/9213133.html</guid>
<description>&lt;p&gt;Consul是注册中心，服务提供者、服务提供者、服务消费者等都要注册到Consul中，这样就可以实现服务提供者、服务消费者的隔离。&lt;/p&gt;
&lt;p&gt;除了Consul之外，还有Eureka、Zookeeper等类似软件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/953915/201806/953915-20180622124718380-835103470.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Consul就是来存储服务器名称与IP和端口对应关系的服务器&lt;/p&gt;

&lt;p&gt;一、 consul 服务器安装&lt;/p&gt;
&lt;p&gt;consul 下载地址     https://www.consul.io/   墙外的网站  需要科学上网&lt;/p&gt;
&lt;p&gt;cmd运行  consul.exe agent -dev&lt;/p&gt;
&lt;p&gt;这是开发环境测试，生产环境要建集群，要至少一台 Server，多台 Agent  （因为如果只有一台的话，如果服务死了  整个网站就出问题了）&lt;/p&gt;
&lt;p&gt;开发环境中 consul 重启后数据就会丢失。&lt;/p&gt;
&lt;p&gt;consul 的监控页面 http://127.0.0.1:850&lt;/p&gt;
&lt;p&gt;consult 主要做三件事：提供服务到 ip 地址的注册；提供服务到 ip 地址列表的查询；对提供服务方的健康检查（HealthCheck）；&lt;/p&gt;

&lt;p&gt;二、 .Net Core 连接 consul&lt;/p&gt;
&lt;p&gt;  1.  Nuget - &amp;gt; Install-Package Consul   安装Consul&lt;/p&gt;
&lt;p&gt;  2.  提供一个HealthCheck API接口 用于Consul做健康检查调用，只要返回个结果就可以  不论是什么结果。如&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[Route(&quot;api/[controller]&quot;&lt;span&gt;)] 
public class&lt;span&gt; HealthController : Controller 
{ 
     [HttpGet] 
     public&lt;span&gt; IActionResult Get() 
     { 
          return Ok(&quot;ok&quot;&lt;span&gt;); 
     } 
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;   3. 服务注册 &lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Consul&lt;/span&gt;&lt;/strong&gt; 及注销&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Configure(IApplicationBuilder app, IHostingEnvironment env, IApplicationLifetime applicationLifetime) 
{ 
     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (env.IsDevelopment()) 
     { 
          app.UseDeveloperExceptionPage(); 
     } 
 
     app.UseMvc(); 
 
     &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; ip = Configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]; 
     &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; port = Convert.ToInt32(Configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]); 
 
     &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; serviceName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MsgService&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;　　  string&lt;/span&gt; serviceId = serviceName + Guid.NewGuid(); &lt;br/&gt;&lt;span&gt;　　  using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConsulClient(ConsulConfig)) 
     { 
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注册服务到 Consul    ServiceRegister是一个异步方法&lt;/span&gt;
          client.Agent.ServiceRegister(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; AgentServiceRegistration() 
          { 
               ID &lt;/span&gt;= serviceId,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务编号，不能重复，用 Guid 最简单 &lt;/span&gt;
               Name = serviceName,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务的名字 &lt;/span&gt;
               Address = ip,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务提供者的能被消费者访问的 ip 地址(可以被其他应用访问的地址，本地测试可以用 127.0.0.1，机房环境中一定要写自己的内网 ip 地址) &lt;/span&gt;
               Port = port,&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 服务提供者的能被消费者访问的端口 &lt;/span&gt;
               Check = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AgentServiceCheck 
               { 
    DeregisterCriticalServiceAfter &lt;/span&gt;= TimeSpan.FromSeconds(&lt;span&gt;5&lt;/span&gt;),&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务停止多久后反注册(注销) &lt;/span&gt;
                    Interval = TimeSpan.FromSeconds(&lt;span&gt;10&lt;/span&gt;),&lt;span&gt;//&lt;/span&gt;&lt;span&gt;健康检查时间间隔，或者称为心跳间隔 &lt;/span&gt;
                    HTTP = $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://{ip}:{port}/api/health&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;健康检查地址 &lt;/span&gt;
                    Timeout = TimeSpan.FromSeconds(&lt;span&gt;5&lt;/span&gt;&lt;span&gt;) 
               } 
          }).Wait();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Consult 客户端的所有方法几乎都是异步方法，但是都没按照规范加上Async 后缀，所以容易误导。记得调用后要 Wait()或者 await &lt;/span&gt;
&lt;span&gt;     } 
 
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;程序正常退出的时候从 Consul 注销服务    
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;要通过方法参数注入 IApplicationLifetime 
　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;程序结束的时候会调用这个方法&lt;/span&gt;
     applicationLifetime.ApplicationStopped.Register(()=&amp;gt;&lt;span&gt; {
　　　　&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConsulClient(ConsulConfig)) 
          { 
               client.Agent.ServiceDeregister(serviceId).Wait(); 
          } 
     }); 
} 
 
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConsulConfig(ConsulClientConfiguration c) 
{ 
     c.Address &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Uri(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://127.0.0.1:8500&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); 
     c.Datacenter &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dc1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;; 
} &lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;小哥哥 小姐姐们 如果本篇文章对你们有帮助的话 就点点右下角的推荐吧 0.0&lt;/p&gt;
</description>
<pubDate>Fri, 22 Jun 2018 06:08:00 +0000</pubDate>
<dc:creator>搬砖老农</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/uglyman/p/9213133.html</dc:identifier>
</item>
<item>
<title>Canvas事件绑定 - Mr.苏</title>
<link>http://www.cnblogs.com/suyuanli/p/9212994.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/suyuanli/p/9212994.html</guid>
<description>&lt;p&gt;众所周知canvas是位图，在位图里我们可以在里面画各种东西，可以是图片，可以是线条等等。那我们想给canvas里的某一张图片添加一个点击事件该怎么做到。而js只能监听到canvas的事件，很明显这个图片是不存在与dom里面的图片只是画在了canvas里而已。下面我就来简单的实现一个canvas内部各个图片的事件绑定。&lt;/p&gt;
&lt;ul readability=&quot;0.47769953051643&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;我先来讲下实现原理：其实就是canvas绑定相关事件，在通过记录图片所在canvas的坐标，判断事件作用于哪个图片中。这样讲是不是感觉跟事件代理有点相似咧。不过实现起来还是有稍许复杂的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;ps：下面的代码我是用ts写的，大家当es6看就好了，稍有不同的可以查看&lt;br/&gt;&lt;a href=&quot;https://www.tslang.cn/docs/home.html&quot; target=&quot;_blank&quot;&gt;typescript的文档&lt;/a&gt;(typescript真的很好用，建议大家多多了解)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;建立图片和canvas之间的联系这里我用色块来代替图片&quot;&gt;1、建立图片和canvas之间的联系（这里我用色块来代替图片）&lt;/h4&gt;
&lt;p&gt;这里要色块和canvas建立一定的联系，而不是单纯的渲染。还要记录色块所在坐标、宽高。我们先一步一步来实现&lt;br/&gt;首先写基本的html页面创建一个canvas：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;canvas事件&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        html, body &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#eee&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
        canvas &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;canvas&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;500&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;500&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;canvas&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;下一步，我们要定一个Canvas的类，这个类应该要有些什么功能呢？&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;要有对应的canvas。&lt;/li&gt;
&lt;li&gt;装色块数据的容器。&lt;/li&gt;
&lt;li&gt;有添加色块的方法。&lt;/li&gt;
&lt;li&gt;渲染色块的方法。&lt;/li&gt;
&lt;li&gt;渲染所有色块的方法。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;ok开始写&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// Canvas类&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Canvas &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;blockList&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; Block[]
  &lt;span class=&quot;dt&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; any
  &lt;span class=&quot;dt&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; any
  &lt;span class=&quot;at&quot;&gt;createBlock&lt;/span&gt; (option) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;option&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Canvas&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Block&lt;/span&gt;(option))
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;painting&lt;/span&gt;()
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;rendering&lt;/span&gt; (block) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;               &lt;span class=&quot;co&quot;&gt;// 渲染色块函数&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillStyle&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;block&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillRect&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;block&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;block&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;block&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;block&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;painting&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;                           &lt;span class=&quot;co&quot;&gt;// 将容器里的色块全部渲染到canvas&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 清空画布（渲染之前应该将老的清空）&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillStyle&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#fff'&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillRect&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;height&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;(ele &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;rendering&lt;/span&gt;(ele)
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt; (ele) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;               &lt;span class=&quot;co&quot;&gt;// 初始化函数（输入的是canvas）&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 设置canvas&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ele
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getContext&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'2d'&lt;/span&gt;)
    &lt;span class=&quot;co&quot;&gt;// 色块容器&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;blockList&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Block &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; number
  &lt;span class=&quot;dt&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; number
  &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; number
  &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; number
  &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string
  &lt;span class=&quot;dt&quot;&gt;Canvas&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; Canvas
  &lt;span class=&quot;dt&quot;&gt;hierarchy&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; number
    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; w&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; h&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; color&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; Canvas &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;// 初始化设置色块相关属性&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; w
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; h
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; x
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; y
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; color
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Canvas&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Canvas
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面运行一波试试&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;  &lt;span class=&quot;co&quot;&gt;// 创建Canvas实例，并添加蓝色个宽高100px,位置(100,100)、(300,100)红色和蓝色的色块&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; canvas &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Canvas&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'canvas'&lt;/span&gt;))
    &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createBlock&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;                    &lt;span class=&quot;co&quot;&gt;// 红色&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#f00'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createBlock&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;                    &lt;span class=&quot;co&quot;&gt;// 蓝色&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#00f'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果如下：&lt;br/&gt;&lt;img src=&quot;http://p0639a4mt.bkt.clouddn.com/1529320740000-376.png&quot; title=&quot;canvas事件绑定1&quot; alt=&quot;canvas事件绑定1&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;给色块添加点击事件&quot;&gt;2、给色块添加点击事件&lt;/h4&gt;
&lt;p&gt;这里并不能直接给色块添加点击事件的，所以要通过坐标的方式判断目前点击的是哪个色块。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;先给canvas添加点击事件。&lt;/li&gt;
&lt;li&gt;判断色块区域。&lt;/li&gt;
&lt;li&gt;执行相应事件。&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Block &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// ...省略部分代码&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;checkBoundary&lt;/span&gt; (x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; y) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;              &lt;span class=&quot;co&quot;&gt;// 判断边界方法&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;mousedownEvent&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;                     &lt;span class=&quot;co&quot;&gt;// 点击事件&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`点击了颜色为&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;的色块`&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Canvas &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// ...省略部分代码&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt; (ele) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ele
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getContext&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'2d'&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;blockList&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
        &lt;span class=&quot;co&quot;&gt;// 事件绑定(这里有一个要注意的，我这里用了bind方法，是为了将“mousedownEvent”方法内的this指向切换到Canvas)&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;mousedownEvent&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;))   &lt;span class=&quot;co&quot;&gt;// 点击事件&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;mousedownEvent&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;                 &lt;span class=&quot;co&quot;&gt;// 点击事件&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetX&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetY&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 这里将点击的坐标传给所有色块，根据边界判断方法判断是否在点击在内部。是的话执行色块的事件方法。&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;(ele &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;checkBoundary&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; y)) &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;mousedownEvent&lt;/span&gt;(e)
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://p0639a4mt.bkt.clouddn.com/1529472318000-384.png&quot; title=&quot;canvas事件图3&quot; alt=&quot;canvas事件图3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这里为止已经实现了对不同canvas内不同色块绑定对应的点击事件。不过这个点击事件是不完美的，因为目前为止我们还没有引入层级的概念，就是说两个色块重叠部分点击的话，全部都会触发。所以我们还要给色块加入层级的属性。实现一个点击某一个色块改色块的层级就会提升到最高。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Block &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// ...省略部分代码&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; w&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; h&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; color&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; Canvas&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; hierarchy &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;// 初始化设置色块相关属性&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; w
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; h
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; x
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; y
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; color
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Canvas&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Canvas
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hierarchy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Canvas &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// ...省略部分代码&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt; (ele) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ele
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getContext&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'2d'&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;blockList&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
        &lt;span class=&quot;co&quot;&gt;// 事件绑定(这里有一个要注意的，我这里用了bind方法，是为了将“mousedownEvent”方法内的this指向切换到Canvas)&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;mousedownEvent&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;))   &lt;span class=&quot;co&quot;&gt;// 点击事件&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;nowBlock&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;                &lt;span class=&quot;co&quot;&gt;// 当前选中的色块&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;createBlock&lt;/span&gt; (option) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;          &lt;span class=&quot;co&quot;&gt;// 创建色块函数（这里的Block是色块的类）&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;option&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Canvas&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 创建最新的色块的层级应该是最高的&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;option&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hierarchy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Block&lt;/span&gt;(option))
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;rendering&lt;/span&gt;()
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;at&quot;&gt;mousedownEvent&lt;/span&gt; (e) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;                  &lt;span class=&quot;co&quot;&gt;// 点击事件&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetX&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetY&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 获取点中里层级最高的色块&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;nowBlock&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;(ele &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;checkBoundary&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; y))).&lt;span class=&quot;at&quot;&gt;pop&lt;/span&gt;()
        &lt;span class=&quot;co&quot;&gt;// 如果没有捕获的色块直接退出&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;nowBlock&lt;/span&gt;) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 将点击到的色块层级提高到最高&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;nowBlock&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hierarchy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 重新排序(从小到大)&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sort&lt;/span&gt;((a&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; b) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hierarchy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hierarchy&lt;/span&gt;)
    &lt;span class=&quot;co&quot;&gt;// 在重新从0开始分配层级&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;((ele&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; idx) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hierarchy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; idx)
    &lt;span class=&quot;co&quot;&gt;// 重新倒序排序后再重新渲染。&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;painting&lt;/span&gt;()
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;nowBlock&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;mousedownEvent&lt;/span&gt;(e)     &lt;span class=&quot;co&quot;&gt;// 只触发选中的色块的事件&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 这里我们还得加入第三块色块与红色色块重叠的色块&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createBlock&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#0f0'&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://p0639a4mt.bkt.clouddn.com/1529595921000-683.png&quot; title=&quot;canvas事件图4&quot; alt=&quot;canvas事件图4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Canvas中“mousedownEvent”方法内的代码是有点复杂的，主要是有点绕。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先是&lt;span&gt;this.nowBlock = (this.blockList.filter(ele =&amp;gt; ele.checkBoundary(x, y))).pop()&lt;/span&gt;这段代码是怎么获取到点击到的色块中层级最高的色块。这里因为我们每次添加色块都是设置了最高层级的，所以“blockList”内的色块都是按层级从小到大排序的。所以我们取最后一个就可以了。&lt;/li&gt;
&lt;li&gt;第二步就是将拿到的色块的层级提升到最高。&lt;/li&gt;
&lt;li&gt;第三步就是从小到大重新排列色块。&lt;/li&gt;
&lt;li&gt;因为第二步的时候我们修改了选中色块的层级，导致所有色块的层级不是连续的，为了避免层级不可控，我们还得重新定义层级。&lt;/li&gt;
&lt;li&gt;重新渲染色块到canvas中，因为“blockList”内的色块是排好序的，所以按顺序渲染即可。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;运行后的效果就是下面这样了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p0639a4mt.bkt.clouddn.com/1529596490000-760.gif&quot; title=&quot;canvas事件图5&quot; alt=&quot;canvas事件图5&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;实现对不同色块进行拖拽&quot;&gt;3、实现对不同色块进行拖拽&lt;/h4&gt;
&lt;p&gt;在上面我们已经实现了获取不同的色块，并修改它的层级。下面我们要实现色块的拖拽，主要就是获取鼠标移动过程中和一开始点击下去时位置坐标的变化。这个原理和普通的dom拖拽实现原理一样。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;获取点击色块的点，距离色块左边和上边的距离(disX, disY)。&lt;/li&gt;
&lt;li&gt;鼠标移动时，用鼠标当前距离canvas左边和上边的距离减去(disX, disY)这里就是色块的x，y坐标了。&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Block &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// ...省略部分代码&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;mousedownEvent&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; MouseEvent) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/* 这里 disX和disY的计算方式： e.offsetX获取到的是鼠标点击距离canvas左边的距离，this.x是色块距离canvas左边的距离。e.offsetX-this.x就是色块左边的距离。这应该很好理解了 */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; disX &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetX&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 点击时距离色块左边的距离&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; disY &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetY&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 点击时距离色块上边的距离&lt;/span&gt;
        
        &lt;span class=&quot;co&quot;&gt;// 绑定鼠标滑动事件；这里mouseEvent.offsetX同样是鼠标距离canvas左侧的距离，mouseEvent.offsetX - disX就是色块的x坐标了。同理y也是这样算的。最后在重新渲染就好了。&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onmousemove&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (mouseEvent) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouseEvent&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetX&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; disX
      &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouseEvent&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetY&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; disY
      &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;Canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;painting&lt;/span&gt;()
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 鼠标松开则清空所有事件&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onmouseup&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onmousemove&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onmousedown&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// console.log(`点击了颜色为${this.color}的色块22`)&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;br/&gt;&lt;img src=&quot;http://p0639a4mt.bkt.clouddn.com/1529644942000-503.gif&quot; title=&quot;canvas事件图6&quot; alt=&quot;canvas事件图6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面贴上完整的代码(html和调用的方法就不放了)这个例子只是简单实现给canvas内的内容绑定事件，大家可以实现复杂一点的，例如把色块换成图片，除了拖拽还以给图片缩放，旋转，删除等等。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;28&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Canvas &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;blockList&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; Block[]
  &lt;span class=&quot;dt&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; any
  &lt;span class=&quot;dt&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; any
  &lt;span class=&quot;dt&quot;&gt;nowBlock&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; Block
  &lt;span class=&quot;at&quot;&gt;createBlock&lt;/span&gt; (option) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;option&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hierarchy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;option&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Canvas&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Block&lt;/span&gt;(option))
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;painting&lt;/span&gt;()
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;rendering&lt;/span&gt; (block) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillStyle&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;block&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillRect&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;block&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;block&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;block&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;block&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;painting&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 清空画布&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillStyle&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#fff'&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillRect&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;height&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;(ele &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;rendering&lt;/span&gt;(ele)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;mousedownEvent&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; MouseEvent) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;                  &lt;span class=&quot;co&quot;&gt;// 点击事件&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetX&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetY&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 获取点中里层级最高的色块&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;nowBlock&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;(ele &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;checkBoundary&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; y))).&lt;span class=&quot;at&quot;&gt;pop&lt;/span&gt;()
    &lt;span class=&quot;co&quot;&gt;// 如果没有捕获的色块直接退出&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;nowBlock&lt;/span&gt;) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 将点击到的色块层级提高到最高&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;nowBlock&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hierarchy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 重新排序(从小到大)&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sort&lt;/span&gt;((a&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; b) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hierarchy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hierarchy&lt;/span&gt;)
    &lt;span class=&quot;co&quot;&gt;// 在重新从0开始分配层级&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;blockList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;((ele&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; idx) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hierarchy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; idx)
    &lt;span class=&quot;co&quot;&gt;// 重新倒序排序后再重新渲染。&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;painting&lt;/span&gt;()
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;nowBlock&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;mousedownEvent&lt;/span&gt;(e)
    &lt;span class=&quot;co&quot;&gt;// this.blockList.forEach(ele =&amp;gt; {&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//   if (ele.checkBoundary(x, y)) ele.clickEvent(e)&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// })&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt; (ele) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ele
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getContext&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'2d'&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;blockList&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
    &lt;span class=&quot;co&quot;&gt;// 事件绑定&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'mousedown'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;mousedownEvent&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;))
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Block &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; number
  &lt;span class=&quot;dt&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; number
  &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; number
  &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; number
  &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string
  &lt;span class=&quot;dt&quot;&gt;Canvas&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; Canvas
  &lt;span class=&quot;dt&quot;&gt;hierarchy&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; number
  &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; w&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; h&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; color&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; Canvas&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; hierarchy &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; w
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; h
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; x
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; y
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; color
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Canvas&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Canvas
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hierarchy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; hierarchy
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;checkBoundary&lt;/span&gt; (x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; y) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;mousedownEvent&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; MouseEvent) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; disX &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetX&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; disY &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetY&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onmousemove&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (mouseEvent) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouseEvent&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetX&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; disX
      &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouseEvent&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetY&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; disY
      &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;Canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;painting&lt;/span&gt;()
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onmouseup&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onmousemove&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onmousedown&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// console.log(`点击了颜色为${this.color}的色块22`)&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 22 Jun 2018 05:33:00 +0000</pubDate>
<dc:creator>Mr.苏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/suyuanli/p/9212994.html</dc:identifier>
</item>
<item>
<title>设计模式(二)_ 策略模式 - 阳光温暖</title>
<link>http://www.cnblogs.com/zhenghengbin/p/9212982.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenghengbin/p/9212982.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;上篇学习了单例模式，接着学习，坚持就是胜利，今天主要学习下策略模式，参考了gitchat周君的相关课程，但是内容全部手打，拒绝粘贴。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;什么是策略模式&quot;&gt;什么是策略模式&lt;/h4&gt;
&lt;p&gt;策略模式的用意是针对一组算法，将每一个 算法封装到具有相同接口的独立类中，从而使得它们之间可以相互替换，此模式让算法的变化可以不影响客户端的情况下发生。&lt;/p&gt;
&lt;p&gt;一般情况下，我们是将一种行为写成一个类方法，比如计算器的加、减、乘、除。而策略模式是将每一种算法写成一个类，然后动态的选择用哪种算法。&lt;/p&gt;
&lt;p&gt;这里所说的算法并不是 “冒泡排序算法” 之类的算法。它可以是 一段代码，一个请求、一个业务操作。&lt;/p&gt;
&lt;h5 id=&quot;实现计算器代码举例&quot;&gt;实现计算器代码举例&lt;/h5&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;第一次画uml 图。如有不对请指正&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180622123057.png&quot; alt=&quot;enter image description here&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个例子为加法和减法创建了一个类。具体代码如下&lt;/p&gt;
&lt;p&gt;Operation 接口：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package com.zhb.service;

public interface Operation {
    
    public int doOperation(int num1,int num2);

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2个实现类，加法和减法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class OperationAdd implements Operation{

    @Override
    public int doOperation(int num1, int num2) {
        
        return num1 + num2;
    }

}


public class OperationSub implements Operation{

    @Override
    public int doOperation(int num1, int num2) {
        
        return num1 - num2;
    }

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;计算器类:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package com.zhb.main;

import com.zhb.service.Operation;

public class Calculator {
    
    private Operation operation;



    public void setOperation(Operation operation) {
        this.operation = operation;
    }
    
    public int doOperation(int num1, int num2){
        return this.operation.doOperation(num1, num2);
    }
    

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static void main(String[] args) {
        Calculator calculator = new Calculator();
        OperationAdd add = new OperationAdd();
        OperationSub sub = new OperationSub();
        
        calculator.setOperation(add);
        int result = calculator.doOperation(1, 2);
        System.out.println(result);
        
        calculator.setOperation(sub);
        int result1 = calculator.doOperation(1, 1);
        System.out.println(result1);
        
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看到这里，大家一定和我一样疑惑，感觉这没必要建新的类，直接一个类2个add(),sub() 方法就可以搞定啊。你如果在写乘法，还要再写一个类。多麻烦。&lt;/p&gt;
&lt;p&gt;的确，使用策略模式使代码增多，如果下面这种场景下&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果将你写好的计算器代码打包发布出去，供大家使用。如果大家后来发现，我不仅要加减乘除、还要开方。此时怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你用普通写法的计算器，你可能需要在类中 再增加开方的方法就好了。 但是你 提供的jar包。就算你提供源码，你希望别人修改你的源码不？一般提供出去的框架或库，都是经过千锤百炼的。经过无数次测试的，如果别人修改源码很容易产生不可预知的错误。再其次。实际工作中，你写的代码好还行，不好的话，说实话，看都不想看，别说改了。&lt;/p&gt;
&lt;p&gt;如果你使用策略模式，你只需要定义一个开方的类实现Operation 接口。然后调用 calculator.setOperation(new 开方类()); 即可。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;这里很好的体现了一个设计模式的基本原则：开闭原则。&lt;br/&gt;开闭原则说的是 对修改关闭、对扩展开放。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;优点&quot;&gt;优点&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;遵守开闭原则，扩展性良好&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;缺点&quot;&gt;缺点&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;随着你的策略增加，你的类也会越来越多&lt;/li&gt;
&lt;li&gt;所有 的策略类都要暴露出去，所以如果在实际开发中你使用了策略模式，你一定要让你同事知道已有哪些策略。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;例子代码后期会放到github上，每种设计模式的代码都会上传上去，敬请期待。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 22 Jun 2018 05:27:00 +0000</pubDate>
<dc:creator>阳光温暖</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenghengbin/p/9212982.html</dc:identifier>
</item>
</channel>
</rss>