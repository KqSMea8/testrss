<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>mybatis-spring整合 - 江南小俊</title>
<link>http://www.cnblogs.com/jnxj/p/8605902.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jnxj/p/8605902.html</guid>
<description>&lt;p&gt;Spring,mybatis,mybatis-spring,mysql等。。。&lt;/p&gt;
&lt;p&gt;&amp;lt;properties&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;!-- spring版本号 --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;spring.version&amp;gt;4.2.5.RELEASE&amp;lt;/spring.version&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;!-- mybatis版本号 --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;mybatis.version&amp;gt;3.2.8&amp;lt;/mybatis.version&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;!-- mysql驱动版本号 --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;mysql-driver.version&amp;gt;5.1.29&amp;lt;/mysql-driver.version&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;!-- log4j日志包版本号 --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;slf4j.version&amp;gt;1.7.18&amp;lt;/slf4j.version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;log4j.version&amp;gt;1.2.17&amp;lt;/log4j.version&amp;gt;&lt;/p&gt;

&lt;p&gt;       &amp;lt;/properties&amp;gt;&lt;/p&gt;


&lt;p&gt;       &amp;lt;dependencies&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;!-- 数据库连接池包 --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;com.mchange&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;c3p0&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;0.9.5-pre8&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;!-- 添加jstl依赖 --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;jstl&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;jstl&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;1.2&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;javax&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;javaee-api&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;7.0&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;!-- 添加junit4依赖 --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;4.11&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;!-- 指定范围，在测试时才会加载 --&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;!-- 添加spring核心依赖 --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;spring-oxm&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;spring-tx&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;spring-context-support&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;spring-aop&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;!-- 添加mybatis依赖 --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;${mybatis.version}&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;!-- 添加mybatis/spring整合包依赖 --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;mybatis-spring&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;1.2.2&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;!-- 添加mysql驱动依赖 --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;${mysql-driver.version}&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;!-- 添加数据库连接池依赖 --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;commons-dbcp&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;commons-dbcp&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;1.2.2&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;!-- 添加fastjson --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;1.1.41&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;!-- 添加日志相关jar包 --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;${log4j.version}&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;${slf4j.version}&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;slf4j-log4j12&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;${slf4j.version}&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;!-- log end --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;!-- 映入JSON --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;jackson-mapper-asl&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;1.9.13&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;            &amp;lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;jackson-core&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;2.8.0&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;jackson-databind&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;2.8.0&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;commons-fileupload&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;commons-fileupload&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;1.3.1&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;commons-io&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;commons-io&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;2.4&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;commons-codec&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;commons-codec&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;1.9&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;!-- https://mvnrepository.com/artifact/com.github.abel533/ECharts --&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;com.github.abel533&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;ECharts&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;3.0.0&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;com.google.code.gson&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;gson&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;2.5&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;

&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;groupId&amp;gt;net.sf.jxls&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;artifactId&amp;gt;jxls-core&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;version&amp;gt;1.0.5&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;            &amp;lt;groupId&amp;gt;org.mybatis.generator&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;            &amp;lt;artifactId&amp;gt;mybatis-generator-core&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;            &amp;lt;version&amp;gt;1.3.2&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;        &amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;       &amp;lt;/dependencies&amp;gt;&lt;/p&gt;

&lt;p&gt;       &amp;lt;build&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;plugins&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;plugin&amp;gt;&lt;/p&gt;
&lt;p&gt;                            &amp;lt;groupId&amp;gt;org.mybatis.generator&amp;lt;/groupId&amp;gt;&lt;/p&gt;
&lt;p&gt;                            &amp;lt;artifactId&amp;gt;mybatis-generator-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;/p&gt;
&lt;p&gt;                            &amp;lt;version&amp;gt;1.3.2&amp;lt;/version&amp;gt;&lt;/p&gt;
&lt;p&gt;                            &amp;lt;configuration&amp;gt;&lt;/p&gt;
&lt;p&gt;                                   &amp;lt;verbose&amp;gt;true&amp;lt;/verbose&amp;gt;&lt;/p&gt;
&lt;p&gt;                                   &amp;lt;overwrite&amp;gt;true&amp;lt;/overwrite&amp;gt;&lt;/p&gt;
&lt;p&gt;                            &amp;lt;/configuration&amp;gt;&lt;/p&gt;
&lt;p&gt;                     &amp;lt;/plugin&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;/plugins&amp;gt;&lt;/p&gt;
&lt;p&gt;              &amp;lt;finalName&amp;gt;ssm4&amp;lt;/finalName&amp;gt;&lt;/p&gt;
&lt;p&gt;       &amp;lt;/build&amp;gt;&lt;/p&gt;

&lt;h2&gt;2.1applicationContext.xml&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233246342-45116443.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;2.1.1第一是要引入数据文件jdbc.properties:保存数据库连接参数的信息&lt;/h3&gt;
&lt;h3&gt;2.1.2第二配置数据源，这里配置了dbcp连接池&lt;/h3&gt;
&lt;h3&gt;2.1.3配置SqlSessionFactory,让spring自动生成管理，这里要引用数据源和mybatis的配置文件&lt;/h3&gt;
&lt;h3&gt;2.1.4配置Dao接口，class指向实现类全称&lt;/h3&gt;
&lt;h2&gt;2.2mybatis.xml配置&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233308148-1518556964.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;2.2.1加载配置文件&lt;/h3&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233418028-1048162407.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2.3jdbc.porperties&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233523474-726180698.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2.4log4j.porperties&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233531657-445700484.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;3.1项目结构&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233538558-159501797.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;3.1.1UserDao接口&lt;/h3&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233543634-1439223065.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;3.1.2UserDaoImpl实现类（实现类要继承SqlSessionDaoSupport类）&lt;/h3&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233548707-930688881.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;3.1.3测试类&lt;/h3&gt;



&lt;h2&gt;4.1修改applicationContext.xml&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233601299-1235508790.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;(1)    第一种配置mapper,每个mapper都要配置一次，工程重复繁琐&lt;/p&gt;
&lt;p&gt;(2)    第二种批量配置mapper,只要指定basepackage的包，就会到这个下面去扫描，多个包用半角逗号隔开&lt;/p&gt;
&lt;h2&gt;4.2修改mybatis.xml&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233607744-881833563.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;(1)注释掉mapper文件的扫描&lt;/p&gt;

&lt;h2&gt;5.1UserMapper.java&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233629573-245442940.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;5.2UserMapper.xml&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233642027-1167078861.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;5.3测试&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233649501-744859623.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;5.3.1加载applicationContext.xml文件&lt;/h3&gt;
&lt;h3&gt;5.3.2获取Mapper代理对象&lt;/h3&gt;
&lt;h3&gt;5.3.3使用Mapper的方法操作数据库&lt;/h3&gt;

&lt;h2&gt;6.1配置generator.xml配置文件&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233700953-1606617468.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;6.2運行java代碼生成代碼&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233710162-534283889.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;注意：file对应的位置是6.1配置文件的位置&lt;/p&gt;
&lt;h2&gt;6.3刷新工程&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233715334-695590575.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;6.3.1po包下的Example类是用于条件查询&lt;/h3&gt;
&lt;h3&gt;6.3.2测试&lt;/h3&gt;
&lt;h4&gt;6.3.2.1查询测试&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233722183-1930459273.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（1）      一般的查询是一样的&lt;/p&gt;
&lt;p&gt;（2）      条件查询的步骤是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;创建example对象，&lt;/li&gt;
&lt;li&gt;生成criteria对象&lt;/li&gt;
&lt;li&gt;通过criteria对象拼凑条件&lt;/li&gt;
&lt;li&gt;通过mapper去调用相关的查询方法传入example对象&lt;/li&gt;
&lt;/ol&gt;&lt;h4&gt;6.3.2.2更新测试&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1348264/201803/1348264-20180319233727821-1962018879.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（1）      updateByPrimaryKey需要先查询才能更新&lt;/p&gt;
&lt;p&gt;（2）      updateByPrimaryKeySelective不需要先查询才能更新，一般用于批量更新&lt;/p&gt;

</description>
<pubDate>Mon, 19 Mar 2018 15:38:00 +0000</pubDate>
<dc:creator>江南小俊</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jnxj/p/8605902.html</dc:identifier>
</item>
<item>
<title>asp.net-基础-20180319 - snake1118</title>
<link>http://www.cnblogs.com/snake1118/p/8605897.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/snake1118/p/8605897.html</guid>
<description>&lt;p&gt;建立动态web 。&lt;/p&gt;
&lt;p&gt;.net的一部分。&lt;/p&gt;
&lt;p&gt;HTML：超文本标记语言。WWW浏览器上文档的格式化语言。&lt;/p&gt;
&lt;p&gt;HTTP：超文本传输协议。WWW浏览器与服务器应用层通信协议。&lt;/p&gt;
&lt;p&gt;静态页面：不需要服务器额外代码处理的页面。纯html页面。&lt;/p&gt;
&lt;p&gt;动态页面：返回给浏览器之前服务器处理过的页面。&lt;/p&gt;
&lt;p&gt;asp.net发展史：2000年1.0，2003年1.1，2005年2.0&lt;/p&gt;
&lt;p&gt;asp.net特性：&lt;/p&gt;
&lt;p&gt;代码后置，页面脱离代码&lt;/p&gt;
&lt;p&gt;请求：request。&lt;/p&gt;
&lt;p&gt;--------------&lt;/p&gt;
&lt;p&gt;.net framework，包含CLR、BCL。&lt;/p&gt;
&lt;p&gt;CLR：公共语言运行库。&lt;/p&gt;
&lt;p&gt;----------------&lt;/p&gt;
&lt;p&gt;文件扩展名&lt;/p&gt;
&lt;p&gt;xml      xml文件&lt;/p&gt;
&lt;p&gt;html    html文件&lt;/p&gt;
&lt;p&gt;ascx   web用户控件&lt;/p&gt;
&lt;p&gt;master 母版页&lt;/p&gt;
&lt;p&gt;config  web配置文件&lt;/p&gt;
&lt;p&gt;asax    全局应用程序类&lt;/p&gt;
&lt;p&gt;asmx  web服务&lt;/p&gt;
&lt;p&gt;-------------&lt;/p&gt;
&lt;p&gt;页面指令&lt;/p&gt;
&lt;p&gt;&amp;lt;%@page%&amp;gt;　　　　&lt;/p&gt;
&lt;p&gt;&amp;lt;%@import  Namespace=&quot;Value&quot;%&amp;gt;&lt;/p&gt;
&lt;p&gt;---------------&lt;/p&gt;
&lt;p&gt;注释： &amp;lt;%%&amp;gt;&lt;/p&gt;
</description>
<pubDate>Mon, 19 Mar 2018 15:37:00 +0000</pubDate>
<dc:creator>snake1118</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/snake1118/p/8605897.html</dc:identifier>
</item>
<item>
<title>MySQL多数据源笔记5-ShardingJDBC实战 - 蜗居在小黑屋操控世界</title>
<link>http://www.cnblogs.com/huangjuncong/p/8605892.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangjuncong/p/8605892.html</guid>
<description>&lt;p&gt;Sharding-JDBC集分库分表、读写分离、分布式主键、柔性事务和数据治理与一身，提供一站式的解决分布式关系型数据库的解决方案。&lt;/p&gt;
&lt;p&gt;从2.x版本开始，Sharding-JDBC正式将包名、Maven坐标、码云仓库、Github仓库和官方网站统一为io.shardingjdbc。这意味着除了当当的无私奉献，我们也乐于采纳第三方公司的代码贡献。本次2.0.0的版本，由当当与数人云共同开发。&lt;/p&gt;
&lt;p&gt;Sharding-JDBC是一款基于JDBC的数据库中间件产品，对Java的应用程序无任何改造成本，只需配置分片规则即可无缝集成进遗留系统，使系统在数据访问层直接具有分片化和分布式治理的能力。&lt;/p&gt;
&lt;p&gt;Sharding-JDBC 1.x关注SQL兼容性、分库分表、读写分离、分布式主键、柔性事务等分片功能；Sharding-JDBC 2.x提供了全新的Orchestration模块，关注数据库和数据库访问层应用的治理。2.0.0在治理方面的主要更新是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;配置动态化。可以通过zookeeper或etcd作为注册中心动态修改数据源以及分片规则。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据治理。提供熔断数据库访问程序对数据库的访问和禁用从库的访问的能力。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跟踪系统支持。可以通过sky-walking等基于Opentracing协议的APM系统中查看Sharding-JDBC的调用链，并提供sky-walking的自动探针。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提供Sharding-JDBC的spring-boot-starter。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;通过2.x提供的数据治理能力，sharding-jdbc的架构图是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201803/1202638-20180319211142885-1841358355.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;左边部分是&lt;strong&gt;部署架构图&lt;/strong&gt;，右边部分则是核心&lt;strong&gt;逻辑架构图&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分片规则配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sharding-JDBC的分片策略配置是自定义的，因此可以通过编程的方式最大限度的灵活调整。它并不仅支持=运算符分片，可支持BETWEEN和IN的运算符分片，支持将一条逻辑SQL最终散落至多个数据节点。同时支持多分片键，&lt;/p&gt;
&lt;p&gt;例如：根据用户ID分库，订单ID分表这种分库分表结合的分片策略；或根据年分库，月份+用户区域ID分表这样的多片键分片。&lt;/p&gt;
&lt;p&gt;通过编程的方式定制分片规则虽然灵活，但配置起来略显繁琐。因此Sharding-JDBC又提供了&lt;strong&gt;In line表达式&lt;/strong&gt;编写分片策略的方式，用于配置集中化，以避免配置散落在配置文件和代码中的情况。此外，它还提供了定制化的Spring命名空间和YAML进一步简化配置。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Sharding-JDBC核心流程:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sharding-JDBC是一个具有分库分表功能的数据库中间件。它通过JDBC扩展 =&amp;gt; SQL解析 =&amp;gt; SQL路由 =&amp;gt; SQL改写 =&amp;gt; SQL执行 =&amp;gt; 结果归并的流程，&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;在SQL通过使用逻辑表，配合用户配置的分片规则，将对数据库访问的真实SQL完全屏蔽。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　1JDBC扩展：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　将JDBC接口中的Connection和Statement(PreparedStatement)的对应关系从一对一转换为一对多。因此一个逻辑SQL的执行，则有可能被拆分为多个执行结果集。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　2.SQL解析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　分为词法解析和语法解析。先通过词法解析将SQL拆分为一个个不可再分的单词。再使用语法解析器对SQL进行理解，并最终提炼出解析上下文。&lt;br/&gt;　　　　解析上下文包括表、选择项、排序项、分组项、聚合函数、分页信息、查询条件以及可能需要修改的占位符的标记。&lt;/p&gt;
&lt;p&gt;　　　　Sharding-JDBC支持各种连接、聚合、排序、分组以及分页的解析，并且可以有限度的支持子查询。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　3.SQL路由：&lt;/strong&gt;　　　&lt;/p&gt;
&lt;p&gt;　　　　根据解析上下文匹配用户配置的分片策略，并生成路由路径。目前支持分片路由、Hint路由、广播路由、单播路由以及阻断路由等方式。&lt;br/&gt;　　　　分片路由用于携带分片键的SQL路由，根据分片键的不同又可以划分为单片路由(分片操作符是等号)、多片路由(分片操作符是IN)和范围路由(分片操作符是BETWEEN)。&lt;br/&gt;　　　　Hint路由用于通过程序的方式注入路由最终目的地的方式路由，可用于分片信息不包含在SQL中的场景。&lt;br/&gt;　　　　广播路由用于SQL中不包含分片键的场景。根据SQL类型又可以划分为全库广播路由(SET AUTOCOMMIT=1)和全库表广播路由(DQL, DML, DDL)。&lt;br/&gt;　　　　单播路由用于获取某一真实表信息的场景，如DESCRIBE table_name。&lt;br/&gt;　　　　阻断路由用于屏蔽SQL对数据库的操作，如USE db_name，因为Sharding-JDBC仅有一个逻辑数据源，无需切换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　3.SQL改写：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　将SQL改写为在真实数据库中可以正确执行的语句。SQL改写分为正确性改写和优化改写。&lt;br/&gt;　　　　正确性改写包括将逻辑表名称替换为真实表名称，将分页信息的启示取值和结束取值改写，增加为排序、分组和自增主键使用的补列，将AVG改写为SUM / COUNT等。&lt;br/&gt;　　　　优化改写则是能将SQL改写的更加适于在分布式的数据库中执行，如将仅有分组的SQL增加排序字段，以便于将分组归并从内存归并转化为流式归并。&lt;/p&gt;
&lt;p&gt;　　　　正确性改写包括将分表的逻辑表名称替换为真实表名称，修正分页信息和增加补列。举两个例子：　　&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;分页。假设每10条数据为一页，取第2页数据。在分片环境下获取LIMIT 10, 10，归并之后再根据排序条件取出前10条数据是不正确的结果。正确的做法是将分条件改写为LIMIT 0, 20，取出所有前两页数据，再结合排序条件计算出正确的数据。因此越是获取靠后数据，分页的效率就会越低。有很多方法可避免使用LIMIT进行分页。比如构建记录行记录数和行偏移量的二级索引，或使用上次分页数据结尾ID作为下次查询条件的分页方式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　　优化改写是1.5.x重点提升的部分，实现的功能比较零散，这里同样举两个例子：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　4.SQL执行：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　通过多线程执行器异步执行，但同一个物理数据源的不同分表的SQL会采用同一连接的同一线程，以保证其事务的完整性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　路由至真实数据源后，Sharding -JDBC将采用多线程并发执行SQL。它用3种执行引擎分别对应处理Statement，PreparedStatement和AddBatchPreparedStatement。&lt;/p&gt;
&lt;p&gt;　　　　Sharding-JDBC线程池放在一个名为ShardingContext的对象中，它的生命周期同ShardingDataSource保持一致。&lt;/p&gt;
&lt;p&gt;　　　　如果一个应用中创建了多个Sharding-JDBC的数据源，它们将持有不同的线程池。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　5.结果归并：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;将多个执行结果集归并以便于通过统一的JDBC接口输出。结果归并包括流式归并、内存归并和使用装饰者模式的追加归并这几种方式。&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;　　　　流式归并用于简单查询、排序查询、分组查询以及排序和分组但排序项和分组项完全一致的场景，流式归并的结果集的遍历方式是通过每一次调用next方法取出，无需占用额外的内存。&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;　　　　内存归并仅用于排序项和分组项不一致的场景，需要将结果集中的所有数据加载至内存处理，如果结果集过多，会占用大量内存。&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;　　　　使用装饰者模式的追加归并用于分页，无论是简单查询、排序查询还是分组查询，包含分页的SQL都会经过分页的装饰器处理分页相关的结果归并。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　Sharding-JDBC支持的结果归并&lt;strong&gt;从功能上分为&lt;/strong&gt;遍历、排序、分组和分页4种类型，它们是组合而非互斥的关系。&lt;strong&gt;从结构划分&lt;/strong&gt;，可分为&lt;strong&gt;流式归并&lt;/strong&gt;、&lt;strong&gt;内存归并&lt;/strong&gt;和&lt;strong&gt;装饰者归并&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　　　流式归并和内存归并是互斥的，装饰者归并可以在流式归并和内存归并之上做进一步的处理。&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;流式归并&lt;/strong&gt;是将数据游标与结果集的游标保持一致，顺序的从结果集中一条条的获取正确的数据。遍历和排序都是&lt;strong&gt;流式归并&lt;/strong&gt;，分组比较复杂，分为流式分组和内存分组。&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;内存归并&lt;/strong&gt;则是需要将结果集的所有数据都遍历并存储在内存中，再通过内存归并后，将内存中的数据伪装成结果集返回。&lt;/p&gt;
&lt;p&gt;　　　&lt;strong&gt;　遍历类型最为简单&lt;/strong&gt;，只需将多结果集组成链表，遍历完成当前结果集后，将链表位置后移，继续遍历下一个结果集即可。&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;排序类型稍微复杂&lt;/strong&gt;，由于ORDER BY的原因，每个结果集自身数据是有序的，因此只需要将结果集当前游标指向的值排序即可。Sharding-JDBC在排序类型归并时，将每个结果集的当前排序数据实现了比较器，并将其放入优先级队列。&lt;/p&gt;
&lt;p&gt;　　　　每次JDBC调用next时，将队列顶端的结果集出队并next，然后获取新的队列顶端的结果集供JDBC获取数据。&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;分组类型最为复杂&lt;/strong&gt;，分组归并已经不属于OLTP范畴，而更面向OLAP，但由于遗留系统使用很多，因此Sharding-JDBC还是将其实现。分组归并分成流式分组归并和内存分组归并。流式分组归并节省内存，但必须要求排序和分组的数据保持一致。&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;如果GROUPBY和ORDER BY的内容不一致，则必须使用内存分组归并&lt;/strong&gt;。由于数据不是按照分组需要的顺序取出，因此需要将结果集中的所有数据全部加载至内存。在SQL改写时提到的仅有GROUP BY的SQL，会优化增加ORDER BY语句，即使将内存分组归并优化为流式分组归并的提升。&lt;/p&gt;
&lt;p&gt;　　　　无论是流式分组还是内存分组，对聚合的处理都是一致的。聚合分为比较、累加和平均值3种类型。比较聚合包括MAX和MIN，只返回最大（小）结果。累加聚合包括SUM和COUNT，需要将结果累加后返回。平均值聚合则是通过SQL改写的SUM和COUNT计算，相关内容已在SQL改写涵盖，不再赘述。&lt;/p&gt;
&lt;p&gt;　　　　最后再聊一下&lt;strong&gt;装饰者归并&lt;/strong&gt;，&lt;strong&gt;他是对所有的结果集归并进行统一的功能增强，目前装饰者归并只有分页一种类型&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;上述的所有归并类型，都可能分页或不分页，因此可以通过装饰者模式来增加分页的能力。分页归并会将改写的LIMIT中，不需要获取的数据过滤掉&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;Sharding-JDBC的分页很容易产生误解，很多人认为分页会占用大量内存，因为Sharding-JDBC会因为分布式正确性的考量，将LIMIT 100000, 10改写为LIMIT 0, 　100010，产生Sharding-JDBC会将100010数据都加载到内存的错觉。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　通过上面分析可知，&lt;strong&gt;会全部加载到内存的只有内存分组归并这一种情况。其他情况都是通过流式获取结果集数据的方式，因此Sharding-JDBC会通过结果集的next方法将无需取出的数据全部跳过，并不会将其存入内存&lt;/strong&gt;。&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;分布式主键&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;传统数据库软件开发中，主键自动生成技术是基本需求。而各大数据库对于该需求也提供了相应的支持，比如MySQL的自增键。&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;　　对于MySQL而言，分库分表之后，不同表生成全局唯一的Id是非常棘手的问题。因为同一个逻辑表内的不同实际表之间的自增键是无法互相感知的，&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;　　这样会造成重复Id的生成。我们当然可以通过约束表生成键的规则来达到数据的不重复，但是这需要引入额外的运维力量来解决重复性问题，并使框架缺乏扩展性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　目前有许多第三方解决方案可以完美解决这个问题，比如UUID等依靠特定算法自生成不重复键，或者通过引入Id生成服务等。&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;　　但也正因为这种多样性导致了Sharding-JDBC如果强依赖于任何一种方案就会限制其自身的发展。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　基于以上的原因，最终采用了以JDBC接口来实现对于生成Id的访问，而将底层具体的Id生成实现分离出来。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　使用方法分为设置自动生成键和获取生成键两部分：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　设置自动生成键：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　　　配置自增列,代码如下：&lt;/strong&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
TableRuleConfiguration tableRuleConfig = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TableRuleConfiguration();
tableRuleConfig.setLogicTable(&lt;/span&gt;&quot;t_order&quot;&lt;span&gt;);
tableRuleConfig.setKeyGeneratorColumnName(&lt;/span&gt;&quot;order_id&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;　　设置Id生成器的实现类，该类必须实现io.shardingjdbc.core.keygen.KeyGenerator接口。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　配置全局生成器(com.xx.xx.KeyGenerator)，代码如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
ShardingRuleConfiguration shardingRuleConfig = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ShardingRuleConfiguration();
shardingRuleConfig.setDefaultKeyGeneratorClass(&lt;/span&gt;&quot;com.xx.xx.KeyGenerator&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;有时候我们希望部分表的Id生成器与全局Id生成器不同，比如t_order_item表希望使用com.xx.xx.OtherKeyGenerator来生成Id:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
TableRuleConfiguration tableRuleConfig = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TableRuleConfiguration();
tableRuleConfig.setLogicTable(&lt;/span&gt;&quot;t_order&quot;&lt;span&gt;);
tableRuleConfig.setKeyGeneratorColumnName(&lt;/span&gt;&quot;order_id&quot;&lt;span&gt;);
tableRuleConfig.setKeyGeneratorClass(&lt;/span&gt;&quot;com.xx.xx.OtherKeyGenerator&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样t_order就使用com.xx.xx.KeyGenerator生成Id，而t_order_item使用com.xx.xx.OtherKeyGenerator生成Id。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;获取自动生成键：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;通过JDBC提供的API来获取。对于Statement来说调用```statement.execute(&quot;INSERT ...&quot;, Statement.RETURN_GENERATED_KEYS)```&lt;/p&gt;
&lt;p&gt;　　来通知需要返回的生成的键值。对于PreparedStatement则是```connection.prepareStatement(&quot;INSERT ...&quot;, Statement.RETURN_GENERATED_KEYS)```&lt;/p&gt;
&lt;p&gt;　　调用```statement.getGeneratedKeys()```来获取键值的ResultSet。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;默认的分布式主键生成器:&lt;/strong&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　类名称：io.shardingjdbc.core.keygen.DefaultKeyGenerator&lt;/p&gt;
&lt;p&gt;　　该生成器采用snowflake算法实现，生成的数据为64bit的long型数据。&lt;br/&gt;　　在数据库中应该用大于等于64bit的数字类型的字段来保存该值，比如在MySQL中应该使用BIGINT。&lt;/p&gt;
&lt;p&gt;　　其二进制表示形式包含四部分，从高位到低位分表为：1bit符号位(为0)，41bit时间位，10bit工作进程位，12bit序列位。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;具体可以去看官方文档&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　分布式主键在这里单独提炼出一个章节，因为它是贯穿于Sharding-JDBC整个生命周期的。&lt;/p&gt;
&lt;p&gt;　　分布式主键最独立的部分是生成策略，Sharding-JDBC提供灵活的配置分布式主键生成策略方式。在分片规则配置模块可配置每个表的主键生成策略，默认使用snowflake。&lt;/p&gt;
&lt;p&gt;　　通过策略生成的分布式主键可以无缝的融入JDBC协议，它实现了Statement的getGeneratedKeys方法，将其返回改写后的Result和ResultMetaData，将Sharding-JDBC生成的分布式主键伪装为数据库生成的自增主键返回。&lt;/p&gt;
&lt;p&gt;　　SQL解析时，需要根据分布式主键配置策略判断是否在逻辑SQL中已包含主键列，如果未包含则需要将INSERTItems和INSERT Values的最后位置写入解析上下文。&lt;/p&gt;
&lt;p&gt;　　SQL改写时，将根据解析上下文中的位置改写SQL，增加未包含的主键列名称和值。如果是Statement则在INSERT Values后追加生成后的分布式主键；如果是PreparedStatement则在INSERT Values后追加？，并在传入的参数后追加生成后的分布式主键。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;ShardingJDBC实战&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;首先去github上面下载官方提供的练习，github地址为：https://github.com/shardingjdbc  下载sharding-jdbc-example练习中的&lt;span class=&quot;final-path&quot;&gt;sharding-jdbc-spring-namespace-example/&lt;span class=&quot;final-path&quot;&gt;sharding-jdbc-spring-namespace-mybatis-example&lt;/span&gt;&lt;/span&gt;，sharding-jdbc-doc是官方文档。&lt;/p&gt;

&lt;p&gt;　　自己搭建一个SSM工程。以下只展示关键的配置和代码。&lt;/p&gt;
&lt;p&gt;　　jdbc.properties配置如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
jdbc_url_1=jdbc:mysql:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:3306/db_1?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;zeroDateTimeBehavior=convertToNull&lt;/span&gt;
jdbc_url_2=jdbc:mysql:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:3307/db_2?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;zeroDateTimeBehavior=convertToNull&lt;/span&gt;
jdbc_url_3=jdbc:mysql:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:3308/db_3?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;zeroDateTimeBehavior=convertToNull&lt;/span&gt;
jdbc_username=&lt;span&gt;root
jdbc_password&lt;/span&gt;=root
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　spring-cfg.xml的配置，配置说明已经在配置文件注释说明好了。如下代码：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;span&gt;
       xmlns:xsi&lt;/span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
       xmlns:context&lt;/span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;span&gt;
       xmlns:tx&lt;/span&gt;=&quot;http://www.springframework.org/schema/tx&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;&lt;span&gt;
       xmlns:sharding&lt;/span&gt;=&quot;http://shardingjdbc.io/schema/shardingjdbc/sharding&quot;&lt;span&gt;
       xsi:schemaLocation&lt;/span&gt;=&quot;http://www.springframework.org/schema/beans
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/beans/spring-beans-4.0.xsd&lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context&lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context/spring-context-4.0.xsd&lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/tx&lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/tx/spring-tx-4.0.xsd &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/aop&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/aop/spring-aop.xsd&lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;shardingjdbc.io/schema/shardingjdbc/sharding&lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;shardingjdbc.io/schema/shardingjdbc/sharding/sharding.xsd&quot;&amp;gt;&lt;/span&gt;


    &amp;lt;!--扫描注解生成bean--&amp;gt;
    &amp;lt;context:annotation-config/&amp;gt;
    &amp;lt;!--包扫描--&amp;gt;
    &amp;lt;context:component-scan base-&lt;span&gt;package&lt;/span&gt;=&quot;com.coder520&quot;/&amp;gt;

    &amp;lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&amp;gt;

    &amp;lt;bean id=&quot;sqlSessionFactory&quot; &lt;span&gt;class&lt;/span&gt;=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&amp;gt;
        &amp;lt;property name=&quot;dataSource&quot; ref=&quot;shardingDataSource&quot;/&amp;gt;
        &amp;lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/coder520/**/**.xml&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;bean &lt;span&gt;class&lt;/span&gt;=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&amp;gt;
        &amp;lt;property name=&quot;basePackage&quot; value=&quot;com.coder520.*.dao&quot;/&amp;gt;
        &amp;lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;!--声明事务管理 采用注解方式--&amp;gt;
    &amp;lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&amp;gt;
    &amp;lt;bean id=&quot;transactionManager&quot; &lt;span&gt;class&lt;/span&gt;=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&amp;gt;
        &amp;lt;property name=&quot;dataSource&quot; ref=&quot;shardingDataSource&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;!--开启切面代理--&amp;gt;
    &amp;lt;aop:aspectj-autoproxy/&amp;gt;
    

    &amp;lt;!--主数据库设置--&amp;gt;
    &amp;lt;bean id=&quot;ds_0&quot; &lt;span&gt;class&lt;/span&gt;=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&lt;span&gt;
          destroy&lt;/span&gt;-method=&quot;close&quot; init-method=&quot;init&quot;&amp;gt;
        &amp;lt;property name=&quot;url&quot; value=&quot;${jdbc_url_1}&quot;/&amp;gt;
        &amp;lt;property name=&quot;username&quot; value=&quot;${jdbc_username}&quot;/&amp;gt;
        &amp;lt;property name=&quot;password&quot; value=&quot;${jdbc_password}&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!--从数据库设置--&amp;gt;
    &amp;lt;bean id=&quot;ds_1&quot; &lt;span&gt;class&lt;/span&gt;=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&lt;span&gt;
          destroy&lt;/span&gt;-method=&quot;close&quot; init-method=&quot;init&quot;&amp;gt;
        &amp;lt;property name=&quot;url&quot; value=&quot;${jdbc_url_2}&quot;/&amp;gt;
        &amp;lt;property name=&quot;username&quot; value=&quot;${jdbc_username}&quot;/&amp;gt;
        &amp;lt;property name=&quot;password&quot; value=&quot;${jdbc_password}&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!--从数据库设置--&amp;gt;
    &amp;lt;bean id=&quot;ds_2&quot; &lt;span&gt;class&lt;/span&gt;=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&lt;span&gt;
          destroy&lt;/span&gt;-method=&quot;close&quot; init-method=&quot;init&quot;&amp;gt;
        &amp;lt;property name=&quot;url&quot; value=&quot;${jdbc_url_3}&quot;/&amp;gt;
        &amp;lt;property name=&quot;username&quot; value=&quot;${jdbc_username}&quot;/&amp;gt;
        &amp;lt;property name=&quot;password&quot; value=&quot;${jdbc_password}&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;!--分库策略,sharding-column这里根据user_id(这列属性不能是String,只能是整型)分库，precise-algorithm-class是分库算法，--&amp;gt;
    &amp;lt;sharding:standard-strategy id=&quot;databaseShardingStrategy&quot; sharding-column=&quot;user_id&quot;&lt;span&gt;
                                precise&lt;/span&gt;-algorithm-&lt;span&gt;class&lt;/span&gt;=&quot;com.coder520.sharding.PreciseModuloDatabaseShardingAlgorithm&quot;/&amp;gt;
    &amp;lt;!--分表策略，sharding-column这里根据order_id(这列属性不能是String,只能是整型)分表，precise-algorithm-class是分表算法--&amp;gt;
    &amp;lt;sharding:standard-strategy id=&quot;tableShardingStrategy&quot; sharding-column=&quot;order_id&quot;&lt;span&gt;
                                precise&lt;/span&gt;-algorithm-&lt;span&gt;class&lt;/span&gt;=&quot;com.coder520.sharding.PreciseModuloTableShardingAlgorithm&quot;/&amp;gt;

    &amp;lt;!--自己写shardingDataSource嵌入Spring里面--&amp;gt;
    &amp;lt;sharding:data-source id=&quot;shardingDataSource&quot;&amp;gt;
        &amp;lt;!--告诉shardingjdbc你所有库的名字,这里为什么要从0开始命名呢？因为shardingjdbc的分库分表策略是求余来分配的，比如user_id求余3有0，1，2，所以只能这样命名--&amp;gt;
        &amp;lt;sharding:sharding-rule data-source-names=&quot;ds_0,ds_1,ds_2&quot;&amp;gt;
            &amp;lt;sharding:table-rules&amp;gt;
                &amp;lt;!--ds_${0..2}.t_order_${0..2}，这里用到了In line表达式${0..2}，这里是用了笛卡尔乘积运算,比如ds_0.t_order_0 ds_0.t_order_1 ds_0.t_order_2--&amp;gt;
                &amp;lt;!--logic-table是逻辑表 actual-data-nodes是实际的数据源节点--&amp;gt;
                &amp;lt;!--generate-key-column生成主键列，这是一个全局序列号，是唯一的，这是shardingjdbc自动会帮我们生成的。避免我们自己自增造成id重复--&amp;gt;
                &amp;lt;sharding:table-rule logic-table=&quot;t_order&quot; actual-data-nodes=&quot;ds_${0..2}.t_order_${0..2}&quot;&lt;span&gt;
                                     database&lt;/span&gt;-strategy-ref=&quot;databaseShardingStrategy&quot; table-strategy-ref=&quot;tableShardingStrategy&quot;&lt;span&gt;
                                        generate&lt;/span&gt;-key-column=&quot;order_id&quot;/&amp;gt;
                &amp;lt;sharding:table-rule logic-table=&quot;t_order_item&quot; actual-data-nodes=&quot;ds_${0..2}.t_order_item_${0..2}&quot;&lt;span&gt;
                                     database&lt;/span&gt;-strategy-ref=&quot;databaseShardingStrategy&quot; table-strategy-ref=&quot;tableShardingStrategy&quot;&lt;span&gt;
                                        generate&lt;/span&gt;-key-column=&quot;order_item_id&quot;/&amp;gt;
            &amp;lt;/sharding:table-rules&amp;gt;
        &amp;lt;/sharding:sharding-rule&amp;gt;
    &amp;lt;/sharding:data-source&amp;gt;
    
&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接着在工程中自己建立一个包，把github上的两个分库分表的算法类复制进来，因为spring-cfg.xml中根据这两个类来分库分表的，我这里的包是com.coder520.sharding，&lt;/p&gt;
&lt;p&gt;分库算法类，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.coder520.sharding;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; io.shardingjdbc.core.api.algorithm.sharding.PreciseShardingValue;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; io.shardingjdbc.core.api.algorithm.sharding.standard.PreciseShardingAlgorithm;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collection;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PreciseModuloDatabaseShardingAlgorithm &lt;span&gt;implements&lt;/span&gt; PreciseShardingAlgorithm&amp;lt;Integer&amp;gt;&lt;span&gt; {&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;//Collection&amp;lt;String&amp;gt; availableTargetNames是我们在配置文件配置的数据源  PreciseShardingValue&amp;lt;Long&amp;gt; shardingValue是传进来配置文件逻辑表的逻辑表名和传进来user_id列名和值&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;@Override &lt;br/&gt;&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String doSharding(&lt;span&gt;final&lt;/span&gt; Collection&amp;lt;String&amp;gt; availableTargetNames, &lt;span&gt;final&lt;/span&gt; PreciseShardingValue&amp;lt;Integer&amp;gt;&lt;span&gt; shardingValue) { &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String each : availableTargetNames) {&lt;br/&gt;　　　　　　　　//这里求余3是因为我这里在spring-cfg.xml中配置的三个数据库,这里的意思是将数据分到哪一个库中，比如user_id为51,则分配到第一个数据库中，其他数据库中没用信息&lt;br/&gt;&lt;/span&gt;　　　　　　　　if&lt;span&gt; (each.endsWith(shardingValue.getValue() % 3 + &quot;&quot;&lt;/span&gt;&lt;span&gt;)) { &lt;br/&gt;&lt;/span&gt;&lt;span&gt;　　　　　　　　　　　　return&lt;/span&gt;&lt;span&gt; each;&lt;br/&gt;　　　　　　　　} &lt;br/&gt;　　　　　} &lt;br/&gt;&lt;/span&gt;&lt;span&gt;　　　　throw&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; UnsupportedOperationException(); &lt;br/&gt;　　}&lt;br/&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分表算法类代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.coder520.sharding;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; io.shardingjdbc.core.api.algorithm.sharding.PreciseShardingValue;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; io.shardingjdbc.core.api.algorithm.sharding.standard.PreciseShardingAlgorithm;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collection;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PreciseModuloTableShardingAlgorithm &lt;span&gt;implements&lt;/span&gt; PreciseShardingAlgorithm&amp;lt;Long&amp;gt;&lt;span&gt; {
    &lt;br/&gt;　　//&lt;/span&gt;Collection&amp;lt;String&amp;gt; availableTargetNames是我们在配置文件配置的数据源  PreciseShardingValue&amp;lt;Long&amp;gt; shardingValue是传进来配置文件逻辑表的逻辑表名和传进来user_id列名和值
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;@Override &lt;br/&gt;&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String doSharding(&lt;span&gt;final&lt;/span&gt; Collection&amp;lt;String&amp;gt; availableTargetNames, &lt;span&gt;final&lt;/span&gt; PreciseShardingValue&amp;lt;Long&amp;gt;&lt;span&gt; shardingValue) { &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String each : availableTargetNames) {&lt;br/&gt;　　　　　　　　//这里求余3是因为我这里有三个库，分别是我们在spring-cfg.xml配置的
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (each.endsWith(shardingValue.getValue() % 3 + &quot;&quot;&lt;span&gt;)) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; each;
            }
        }
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UnsupportedOperationException();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　springmvc.xml和web.xml省略。自己配置。&lt;/p&gt;

&lt;p&gt;　　接着使用github上面的下载下来的小demo来练习&lt;/p&gt;

&lt;p&gt;　　controller代码如下：　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.coder520.order.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.coder520.order.service.DemoService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.annotation.Resource;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Created by cong on 2018/3/19.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderController {

    @Resource
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; DemoService demoService;

    @RequestMapping(&lt;/span&gt;&quot;/test&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test(){
        demoService.demo();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;service代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.coder520.order.service;


&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.coder520.order.dao.OrderItemRepository;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.coder520.order.dao.OrderRepository;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.coder520.order.entity.Order;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.coder520.order.entity.OrderItem;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.annotation.Resource;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DemoService {
    
    @Resource
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; OrderRepository orderRepository;
    
    @Resource
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; OrderItemRepository orderItemRepository;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; demo() {
        orderRepository.createIfNotExistsTable();
        orderItemRepository.createIfNotExistsTable();&lt;/span&gt;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;entity和dao都是用github上的那个练习下载下来的的，如下：&lt;/p&gt;
&lt;p&gt;　　Order类：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Order {
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; orderId;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; userId;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String status;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; getOrderId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; orderId;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setOrderId(&lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; orderId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.orderId =&lt;span&gt; orderId;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getUserId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userId;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setUserId(&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; userId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.userId =&lt;span&gt; userId;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getStatus() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; status;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setStatus(&lt;span&gt;final&lt;/span&gt;&lt;span&gt; String status) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.status =&lt;span&gt; status;
    }
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; String.format(&quot;order_id: %s, user_id: %s, status: %s&quot;&lt;span&gt;, orderId, userId, status);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OderItem类如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.coder520.order.entity;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderItem {
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; orderItemId;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; orderId;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; userId;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String status;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; getOrderItemId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; orderItemId;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setOrderItemId(&lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; orderItemId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.orderItemId =&lt;span&gt; orderItemId;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; getOrderId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; orderId;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setOrderId(&lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; orderId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.orderId =&lt;span&gt; orderId;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getUserId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userId;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setUserId(&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; userId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.userId =&lt;span&gt; userId;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getStatus() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; status;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setStatus(&lt;span&gt;final&lt;/span&gt;&lt;span&gt; String status) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.status =&lt;span&gt; status;
    }
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; String.format(&quot;order_item_id:%s, order_id: %s, user_id: %s, status: %s&quot;&lt;span&gt;, orderItemId, orderId, userId, status);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dao和Mapper.xml文件自己去找到那个下载好的DEMO哪里复制进来&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201803/1202638-20180319224011031-1940806622.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;注意数据库表不用建立了，因为orderRepository.createIfNotExistsTable();orderItemRepository.createIfNotExistsTable();这里判断表存不存在，不存在自己会建立好的。但是db_1,db_2,db_3,这三个数据库必须建立好。&lt;/p&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201803/1202638-20180319224325912-184085569.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 接着运行，可以看到每一个数据库表已经建立好了，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201803/1202638-20180319224407190-1766024258.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　接着进行插入测试，修改service的代码，如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.coder520.order.service;


&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.coder520.order.dao.OrderItemRepository;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.coder520.order.dao.OrderRepository;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.coder520.order.entity.Order;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.coder520.order.entity.OrderItem;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.annotation.Resource;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DemoService {
    
    @Resource
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; OrderRepository orderRepository;
    
    @Resource
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; OrderItemRepository orderItemRepository;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; demo() {

        List&lt;/span&gt;&amp;lt;Long&amp;gt; orderIds = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;(10&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;1.Insert--------------&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10; i++&lt;span&gt;) {
            Order order &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Order();
            order.setUserId(&lt;/span&gt;51&lt;span&gt;);
            order.setStatus(&lt;/span&gt;&quot;INSERT_TEST&quot;&lt;span&gt;);
            orderRepository.insert(order);
            &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; orderId =&lt;span&gt; order.getOrderId();
            orderIds.add(orderId);
            
            OrderItem item &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OrderItem();
            item.setOrderId(orderId);
            item.setUserId(&lt;/span&gt;51&lt;span&gt;);
            item.setStatus(&lt;/span&gt;&quot;INSERT_TEST&quot;&lt;span&gt;);
            orderItemRepository.insert(item);
        }
        System.out.println(orderItemRepository.selectAll());
        System.out.println(&lt;/span&gt;&quot;2.Delete--------------&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Long each : orderIds) {
            orderRepository.delete(each);
            orderItemRepository.delete(each);
        }
        System.out.println(orderItemRepository.selectAll());
        orderItemRepository.dropTable();
        orderRepository.dropTable();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 接着在启动，可以看到数据全部被分配到第一个数据库中，因为分局分库算法user_id为51%3=0如下图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201803/1202638-20180319225910894-788852946.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么是怎么个分库的呢？我们先把在代码中将user_id再设置成52。&lt;/p&gt;
&lt;p&gt;那么下面进行打断点查看分库分表的过程。分别在那两个分库分表策略打断点，如下：&lt;/p&gt;
&lt;p&gt;可以看到断点进来了，可以看到首先是找数据库，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201803/1202638-20180319230420093-339000864.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201803/1202638-20180319230837938-2069889690.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 最终可以看到分配到最终的数据库，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201803/1202638-20180319230948843-1236488588.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;接着继续打断点，进到了分表策略这个类里面了&lt;/p&gt;
&lt;p&gt;这是传进来的是逻辑表名和分表的依据order_id，分表依据order_id跟3求余，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201803/1202638-20180319231321016-925535307.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 最后选中求余后的表如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201803/1202638-20180319231414335-2025749540.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201803/1202638-20180319231448818-611666463.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里要注重说一点，each.endsWith是根据你数据源的尾号是否跟匹配的订单号求余后是否相等，相等了就说明被分配到这里了。比如ds_o和求余后0相等，&lt;/p&gt;
&lt;p&gt;最后我们可以看到数据不再分配到第一个数据库了，而是本配到第二个数据库了，因为52%3=1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201803/1202638-20180319232435372-2116571749.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 19 Mar 2018 15:35:00 +0000</pubDate>
<dc:creator>蜗居在小黑屋操控世界</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangjuncong/p/8605892.html</dc:identifier>
</item>
<item>
<title>pdf文件中截取eps图片并压缩 - ijustwanttorun</title>
<link>http://www.cnblogs.com/followyourheart/p/pdf2eps.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/followyourheart/p/pdf2eps.html</guid>
<description>&lt;p&gt;最近遇到了一个问题，需要从pdf裁剪出其中部分的矢量图格式的图片，并保存为eps格式，方便使用。&lt;/p&gt;
&lt;p&gt;最简单的方法就是先用acrobat pro将pdf进行页面抽取，并裁剪，剩下所需要的图片部分，然后另存为eps格式。&lt;/p&gt;
&lt;p&gt;然而，原始的pdf文件4.06MB，抽取并裁剪后的子页面2.12MB，另存为的eps文件确有4.13MB。&lt;/p&gt;
&lt;p&gt;为了将得到的eps文件进行压缩试了很多方法都不奏效，要么图片模糊了，要么就失败了，要么文件变得更大了。最后采用以下骚操作解决了：&lt;/p&gt;
&lt;p&gt;把该eps文件用acrobat pdf重新打开，再另存为eps格式，这次得到的eps只有376kb，基本满足要求了。&lt;/p&gt;

</description>
<pubDate>Mon, 19 Mar 2018 15:34:00 +0000</pubDate>
<dc:creator>ijustwanttorun</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/followyourheart/p/pdf2eps.html</dc:identifier>
</item>
<item>
<title>性能优化之reflow和repaint - wolfSoul</title>
<link>http://www.cnblogs.com/yuqing6/p/8605870.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yuqing6/p/8605870.html</guid>
<description>&lt;p&gt;&lt;span&gt;本文主要介绍一下什么是reflow,repaint, 怎样避免它们造成的不良影响, 怎么通过工具查看分析它们.　　&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;一.首先对浏览器渲染引擎下网页呈现过程简要说一下:&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;浏览器的渲染引擎开始解析html构建成DOM树，DOM树是以document对象为根节点，包含所有的html标签， 包括display： none隐藏的，也包括js动态添加的元素。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;解析html的同时， 将css文件或者样式元素中的样式解析成CSS Rule Tree，解析时会去掉浏览器不能识别的样式。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;根据DOM树和CSSOM来构造Rendering Trre。Rendering Trre和DOM Tree相比较，Rendering Trre中每个节点都包含样式信息，而且Render Tree不会包含隐藏的节点，只有影响到呈现的节点才会包含在Render Tree中（例如： display：none的节点，head节点不会包含在Render Tree中，visibility：hidden会被包含，因为它会影响layout）。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;生成布局（layout），计算各节点元素在屏幕上所在位置和几何结构。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;绘制（paint），将布局绘制到屏幕上。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;以上5步中，主要耗时的是后2步，后两步合称为渲染（render）。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;二: 什么是reflow 和 repaint：&lt;/h3&gt;
&lt;p&gt;　　网页在生成的过程中，至少要渲染一次。之后在访问过程中，还会不断的进行渲染。重新渲染就行重新生成布局和绘制（也就是重复进行上面的第4，5步）重新生成布局的过程就是reflow（回流，重排），重新绘制就叫做reflow（重绘）。&lt;/p&gt;
&lt;h3&gt;三: 什么时候触发reflow和repaint&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;注： repaint不一定需要reflow，例如：改变某元素的颜色，只会触发repaint，不会触发reflow。但是reflow一定会导致repaint，因为布局改变了，就一定需要重新绘制。&lt;/span&gt;&lt;br/&gt;Reflow 的成本比 Repaint 的成本高很多。DOM Tree里的每个节点都会有reflow方法，一个结点的reflow可能导致其子结点，甚至父点以及同级结点的 reflow。在PC端或许还没什么，但是在手机上，还是比较耗性能和耗电的。&lt;br/&gt;以下情况会导致reflow：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;增加货移除css样式&lt;/li&gt;
&lt;li&gt;改变字体大小&lt;/li&gt;
&lt;li&gt;改变窗口大小&lt;/li&gt;
&lt;li&gt;操作class属性&lt;/li&gt;
&lt;li&gt;激活css伪类&lt;/li&gt;
&lt;li&gt;内容变化，如在input内输入文字&lt;/li&gt;
&lt;li&gt;js操作DOM&lt;/li&gt;
&lt;li&gt;获取offsetTop, offsetLeft等layout属性&lt;/li&gt;
&lt;li&gt;设置css属性等值&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　　... ...&lt;/p&gt;
&lt;h3&gt;四.如何减小reflow的影响:&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;减少不必要的DOM层级.&lt;/li&gt;
&lt;li&gt;避免使用table进行布局,因为可能很小的一个小改动会造成整个 table 的重新布局。&lt;/li&gt;
&lt;li&gt;尽量通过position属性为absolute或fixed实现动画效果&lt;/li&gt;
&lt;li&gt;不要一条一条地修改 DOM 的样式。而是预先定义好对应的 class，然后修改对应节点的 className&lt;/li&gt;
&lt;li&gt;不要逐条操作DOM节点：　　&lt;/li&gt;
&lt;li&gt;a&amp;gt; 使用 documentFragment 对象在内存里操作 DOM。　　b&amp;gt; 先把 DOM 给 display:none (有一次 repaint)，做完所有的修改后,再把他显示出来。　　c&amp;gt; clone 一个 DOM 节点到内存里，做完所有的修改后，再交换一下。&lt;/li&gt;
&lt;li&gt;请求如下值offsetTop, offsetLeft, offsetWidth, offsetHeight，scrollTop/Left/Width/Height，clientTop/Left/Width/Height，浏览器会发生reflow，建议将他们合并到一起操作，可以减少回流的次数。多次要用到值,可以先用变量缓存起来.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　... ...&lt;/p&gt;
&lt;h3&gt;五.开发者工具查看&lt;/h3&gt;
&lt;p&gt;　　Chrome浏览器开发者工具的Performance面板,可以查看页面回流和重绘所花费的时间.&lt;br/&gt;　　打开f12下的开发者工具, 切换到Performance面板.如下图:&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055753/201803/1055753-20180319232220903-621004368.jpg&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　点击开始录制按钮,会开始录制,这时在网页上进行一些操作, 然后点击停止按钮,如下:&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055753/201803/1055753-20180319232520651-1150746504.jpg&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从图中可以判断出性能问题到底出现在哪个环节,是js的执行,还是渲染&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055753/201803/1055753-20180319232601453-1122971522.jpg&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　图中不同颜色代表不同的事件, 哪个色块越大, 说明耗时越长,问题越大.可以根据此去进行优化.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;黄色: javaScript执行时间&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;紫色: 样式重新计算和布局, 即reflow时间&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;绿色: repaint时间&lt;/span&gt;　&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Mon, 19 Mar 2018 15:30:00 +0000</pubDate>
<dc:creator>wolfSoul</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yuqing6/p/8605870.html</dc:identifier>
</item>
<item>
<title>gradle build docker image - lzj123</title>
<link>http://www.cnblogs.com/lzj123/p/8605840.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lzj123/p/8605840.html</guid>
<description>&lt;p&gt;&lt;strong&gt;前言：其实gradle-docker插件干的事和我们手动制作镜像是一样的，只不过它封装了一些步骤而已、&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;eg：&lt;/strong&gt;如果我们要将项目打包成镜像，首先我们要写Dockerfile，这是制作镜像的不可或缺的第一步，一般我们的Dockerfile如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;FROM tomcat
MAINTAINER liuzj 775967211@qq.com
COPY **.war /usr/local/tomcat/webapps&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为我们的web项目是基于tomcat的所以基础镜像为tomcat，然后就是将我们的war包拷贝到tomcat下面去，然后执行docker build -t *** dir就可以制作成镜像。了解了这个之后再看&lt;/p&gt;
&lt;p&gt;下面的gradle是如何做的↓&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.引入gradle docker插件并写好gradle任务&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;buildscript {&lt;br/&gt;repositories {
    　　jcenter()
        mavenCentral()
    }&lt;br/&gt;dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.5.4.RELEASE')
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
&lt;br/&gt;// 镜像名字将会是 group + baseName; 镜像tag为 version
group = 'springio'

jar {
    baseName = 'gs-spring-boot-docker'
    version =  '0.1.0'
}
&lt;br/&gt;// 回顾我们手动制作镜像，我们首先要得到一个war包，所以我们得依赖build
task buildDocker(type: Docker, dependsOn: build) {
  push = false
  applicationName = jar.baseName
  dockerfile = file('Dockerfile')&lt;br/&gt;　// 以下步骤可以不要，因为我们项目默认打完的war包会在固定目录下，而无需再去拷贝到build/docker目录下去，其中build/docker目录是自动会创建的
  doFirst {
    copy {
      from war
      into &quot;build/docker/target&quot;
    }
  }
}

repositories {
    mavenCentral()
}&lt;br/&gt;sourceCompatibility = 1.8
targetCompatibility = 1.8&lt;br/&gt;dependencies {
    compile(&quot;org.springframework.boot:spring-boot-starter-web&quot;) 
    testCompile(&quot;org.springframework.boot:spring-boot-starter-test&quot;)
    providedRuntime(&quot;org.springframework.boot:spring-boot-starter-tomcat&quot;)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2.创建Dockerfile文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;FROM java&lt;br/&gt;# SpringBoot内嵌的tomcat默认使用/temp作为工作目录
VOLUME /tmp &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.执行gradle buildDocker即可生成镜像&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;补充如下几个问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;错误：如下错误是因为国内下载Docker镜像缓慢导致，需要配置一下Docker Hub加速器（DaoCloud是国内第一家Docker Hub加速器）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Error response from daemon: Get https://registry-1.docker.io/v2/openstf/stf/manifests/latest: Get https://auth.docker.io/token?scope=repository%3Aopenstf%2Fstf%3Apull&lt;span&gt;&amp;amp;service&lt;/span&gt;=registry.docker.io: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置如下：&lt;/p&gt;
&lt;p&gt;在Docker setting -&amp;gt; Docker Daemon -&amp;gt; Registry Mirrors 中添加http://bcb5bdc3.m.daocloud.io&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;https://www.cnblogs.com/YatHo/p/7100609.html&lt;/p&gt;
&lt;p&gt;https://yq.aliyun.com/articles/47348&lt;/p&gt;
&lt;p&gt;https://github.com/ma-de/spring-boot-war-docker/blob/master/Dockerfile&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以上仅个人总结，如有不对或补充希望能指点一二，3Q!&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 19 Mar 2018 15:23:00 +0000</pubDate>
<dc:creator>lzj123</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lzj123/p/8605840.html</dc:identifier>
</item>
<item>
<title>函数式编程(三元运算、文件操作) - SmllNine</title>
<link>http://www.cnblogs.com/mjiu/p/8605818.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mjiu/p/8605818.html</guid>
<description>&lt;p&gt;&lt;span&gt;简介：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三元运算又称三目运算，是对简单的条件语句简写，如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;简单条件语句&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; 1 &amp;lt; 2&lt;span&gt;:
    var &lt;/span&gt;=1
&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
    var &lt;/span&gt;= 2
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(var)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;改成三元运算&lt;/span&gt;
var_1 = 1 &lt;span&gt;if&lt;/span&gt; 1 &amp;lt; 2 &lt;span&gt;else&lt;/span&gt; 2
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(var_1)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出&lt;/span&gt;
1
1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;文件操作分为读、写、修改。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;读：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;注意这个路径如果不写绝对路径就是与python程序处于同一路径，建议使用绝对路径&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;这里一定要注意编码的问题，以什么编码写的要以什么编码打开，否则就是乱码了&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;mode ='r' r参数代表只读&lt;/span&gt;
f = open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E:\python学习\函数式编程\学生名称联系方式.bak.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,mode=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gbk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;f.read()代表读取所有内容，内容是已经转换完毕的字符串&lt;/span&gt;
data =&lt;span&gt; f.read()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(data)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;f.close()关闭文件&lt;/span&gt;
&lt;span&gt;f.close()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出&lt;/span&gt;
小明 13832408885&lt;span&gt;
小九 &lt;/span&gt;13903249995&lt;span&gt;
大琳 &lt;/span&gt;13703241110&lt;span&gt;
张三 &lt;/span&gt;17888026957&lt;span&gt;
李四 &lt;/span&gt;17600789963
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;rb模式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;为什么这里在打开文件的时候没有指定 encoding，是因为直接以rb模式打开了该文件。&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; rb模式是指二进制模式，数据读到内存中都是bytes格式，如果想查看内容需要手动decode，&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;因此在打开文件阶段不需要指定编码&lt;/span&gt;
f = open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E:\python学习\函数式编程\学生名称联系方式.bak.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,mode=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
data &lt;/span&gt;=&lt;span&gt; f.read()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(data)&lt;br/&gt;#print(data.decode('gbk'))#手动decode
f.close()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出(因二进制太多只列举一部分)&lt;/span&gt;
b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\xd0\xa1\xc3\xf7 13832408885\r\n\xd0\xa1\xbe\xc5 13903249995\r\n\xb4\xf3\xc1\xd5 13703241110&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 但是如果不知道该程序的编码怎么办？需要借用第三方的工具箱  chardet，这个模块作用就是用于检测文本的编码，因为这个工具python3 本身没有则需要安装.。以下为Windows的安装方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;p&gt;C:\Users\小九&amp;gt;pip install chardet&lt;br/&gt;Collecting chardet&lt;br/&gt;Downloading chardet-3.0.4-py2.py3-none-any.whl (133kB)&lt;br/&gt;100% |████████████████████████████████| 143kB 130kB/s&lt;br/&gt;Installing collected packages: chardet&lt;br/&gt;Successfully installed chardet-3.0.4&lt;br/&gt;You are using pip version 9.0.1, however version 9.0.2 is available.&lt;br/&gt;You should consider upgrading via the 'python -m pip install --upgrade pip' command.&lt;/p&gt;
&lt;pre&gt;
.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;chardet 自动检测文本编码模块&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; chardet
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;导入工具库&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;这里的读取模式也可以不用加前面的mode，因为默认第二个参数就是读取模式&lt;/span&gt;
f = open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;log.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
data &lt;/span&gt;=&lt;span&gt; f.read()
f.close()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用detect模块以rb的模式打开文件，并检测编码&lt;/span&gt;
result = chardet.detect(open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;log.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).read())
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(result)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;分别为 encoding 编码格式 ，confidence 对比读越高越可信，language 语言&lt;/span&gt;
{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;encoding&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;confidence&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 0.7525, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;language&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;''&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;循环文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
f = open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;学生名称联系方式.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; f:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(i)
f.close()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出&lt;/span&gt;
小明 13832408885&lt;span&gt;

小九 &lt;/span&gt;13903249995&lt;span&gt;

大琳 &lt;/span&gt;13703241110&lt;span&gt;

张三 &lt;/span&gt;17888026957
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;为什么每行之间都有空行，因为print默认输出就是每行之结尾有一个\n的参数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;写文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;模式为w 表示只写(w 就是创建新的文件，如果有文件同名会覆盖掉)，&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;f.write()要写的内容，写入的内容是unicode字符，内部会根据encoding进行转换为指定的编码。&lt;/span&gt;
f  = open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;中学生联系方式&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
f.write(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李四 17899662323&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
f.close()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;无输出，会创建名为 '中学生联系方式' 的文件内容为：&lt;/span&gt;
李四 17899662323
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;二进制模式写是wb&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#注意&lt;/span&gt;&lt;span&gt;无论是 rb 还是 wb ，二进制一般用于数据传输。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;追加&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;文件操作时，以'a'或'ab'模式打开，则只能追加，即在原来内容尾部追加内容&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;ab 写入时需要直接传入以某种编码的 0101011即：字节类型&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;a 和encoding ，写入时需要传入unicode字符串，内部会根据encoding制定的编码进行转换。&lt;/span&gt;
f = open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;中学生联系方式&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
f.write(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;张三 17508322673&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
f.close()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;无输出，文件内容为：&lt;/span&gt;
李四 17899662323张三 17508322673

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果不加别的参数默认就追加到目标文件最后面。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;读写混合模式(r+，w+)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;之前说过了，文件能以只读，只写的模式打开，如果想读又想写，就要以 读写的模式打开&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;r+读写模式，先读后写&lt;/span&gt;
f = open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;中学生联系方式&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
data &lt;/span&gt;=&lt;span&gt; f.read()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(data)
f.write(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我是后面写入的&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
f.close()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(data)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出&lt;/span&gt;
李四 17899662323张三 17508322673&lt;span&gt;
李四 17899662323张三 &lt;/span&gt;17508322673
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;文件内容&lt;/span&gt;
&lt;span&gt;李四 17899662323张三 17508322673我是后面写入的

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;这里肯定会疑惑，为什么第二次输出的时候没有输出写入字符呢，那是因为文件只能读一次，光标一次就读到了的文件的末尾，所以第一次读可以读到文件内容，第二次读光标还在文件末尾所以无法读到新写入的值。&lt;/span&gt;
大家也可以对读写模式理解为可追加的读模式
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;写读模式(慎用)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
f = open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;中学生联系方式&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
data &lt;/span&gt;=&lt;span&gt; f.read()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(data)
f.write(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n nwe 1 哇哇&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
f.write(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n nwe 2 哇哇&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
f.write(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n nwe 3 哇哇&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,f.read())
f.close()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出&lt;/span&gt;
&lt;span&gt;
content 

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;为什么只输出 content ，我文件里面的内容，文件内容如下：&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;文件内容&lt;/span&gt;
&lt;span&gt;
 nwe &lt;/span&gt;1&lt;span&gt; 哇哇
 nwe &lt;/span&gt;2&lt;span&gt; 哇哇
 nwe &lt;/span&gt;3&lt;span&gt; 哇哇
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;可以看到文件里之前的文件被覆盖，这就是之前说过的w是写，也就是先创建一个新文件把之前的文件覆盖掉了，再写入新的数据，所以之前的数据没了，这个一般不会用到！&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;！未完待续  文件操作的其他功能&lt;/p&gt;

</description>
<pubDate>Mon, 19 Mar 2018 15:15:00 +0000</pubDate>
<dc:creator>SmllNine</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mjiu/p/8605818.html</dc:identifier>
</item>
<item>
<title>springboot 整合 MongoDB 实现登录注册，html 页面获取后台参数的方法 - 筱月</title>
<link>http://www.cnblogs.com/ainyi/p/8605802.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ainyi/p/8605802.html</guid>
<description>&lt;h3&gt;springboot简介：&lt;/h3&gt;
&lt;p&gt;Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。&lt;/p&gt;
&lt;h3&gt;MongoDB的简介：&lt;/h3&gt;
&lt;p&gt;MongoDB 是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。&lt;/p&gt;
&lt;p&gt;它是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。&lt;/p&gt;

&lt;p&gt;做完这一个小练习，发现 springboot 对 html 要求十分严格，稍不注意就会出现某个标签 必须加上结束标签才不会报错，但是有些标签即使加上了结束标签，仍然报错。&lt;/p&gt;
&lt;p&gt;只能做一个springboot对html的不严格检查的处理：&lt;/p&gt;
&lt;h3&gt;在pom.xml配置上：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;启用不严格检查html&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;net.sourceforge.nekohtml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nekohtml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;还要在application.properties配置：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#对html检查不那么严格
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; spring.thymeleaf.mode = LEGACYHTML5
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;spring boot建议不要使用JSP，建议使用Thymeleaf来做动态页面传递参数到html页面，也就是html页面&lt;/p&gt;
&lt;p&gt;在pom.xml中启用themleaf模板依赖：&lt;/p&gt;
&lt;p&gt;注意的是：在controller层中配置 @Controller 才能在controller层中 return 到 html 页面，&lt;/p&gt;
&lt;p&gt;因为使用 @Controller 才可以返回html页面，使用@ResController 返回的是字符串&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; themleaf模板依赖&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-thymeleaf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;使用的是 MongoDB数据库，所以需要增加mongodb支持 ：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 增加mongodb支持 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;4&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-mongodb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;因为MongoDB默认是没有用户名密码，所以在 application.properties 对 MongoDB 的只需要配置上：选择要操作的数据库名称&lt;/p&gt;
&lt;p&gt;当要选择操作数据库的某个集合（表）的时候，就是定义的实体类的名称，所以实体类的名称一定要与你选择的数据库里面的集合（表）名相对应，如果不存在，就会自动创建该集合（表）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;# 选择数据库名称
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; spring.data.mongodb.database=krry_test 
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;springboot框架，html 页面要想从后台接收参数，需要这样子：&lt;/h3&gt;
&lt;p&gt;后台可使用 model 存放数据，注意的是 Model 是 request 级别的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     @RequestMapping(value=&quot;/index&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String index(Model model){  
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         
&lt;span&gt;4&lt;/span&gt;         User usero = &lt;span&gt;new&lt;/span&gt; User(&quot;##errors##&quot;,&quot;1234&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         model.addAttribute(&quot;user&quot;&lt;span&gt;, usero);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         
&lt;span&gt;7&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;index&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在 html 标签设置：&amp;lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;在标签内部用 th:text=&quot;${user.username}&quot; 获取&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE HTML&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;xmlns:th&lt;/span&gt;&lt;span&gt;=&quot;http://www.thymeleaf.org&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;首页&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;   
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; th:text&lt;/span&gt;&lt;span&gt;=&quot;${user.username}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;话不多少，先看看目录结构：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1344447/201803/1344447-20180319225407315-157025983.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt; pom.xml&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.krry&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springboot_mongodb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;  
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;       spring boot 父节点依赖,  
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;       引入这个之后相关的引入就不需要添加version配置，  
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;       spring boot会自动选择最合适的版本进行添加。  
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;      &lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;11&lt;/span&gt;    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;12&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;13&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;14&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.5.2.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;16&lt;/span&gt;     
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; spring boot web支持：mvc,aop... &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; themleaf模板依赖&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-thymeleaf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;启用不严格检查html&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;net.sourceforge.nekohtml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nekohtml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;          
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 增加mongodb支持 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;38&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;39&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-mongodb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;41&lt;/span&gt;     
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;     
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;application.properties&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;# MongoDB 默认是无密码，这里配置一下要操作的数据库名称就行
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#spring.data.mongodb.authentication-database= # Authentication database name.
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;# 选择数据库名称
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;spring.data.mongodb.database=krry_test
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#对html检查不那么严格
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;spring.thymeleaf.mode = LEGACYHTML5
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#spring.data.mongodb.field-naming-strategy= # Fully qualified name of the FieldNamingStrategy to use.
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#spring.data.mongodb.grid-fs-database= # GridFS database name.
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#spring.data.mongodb.host=localhost # Mongo server host.
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#spring.data.mongodb.password= # Login password of the mongo server.
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#spring.data.mongodb.port=27017 # Mongo server port.
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#spring.data.mongodb.repositories.enabled=true # Enable Mongo repositories.
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#spring.data.mongodb.uri=mongodb://localhost/test # Mongo database URI. When set, host and port are ignored.
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; #spring.data.mongodb.username= # Login user of the mongo server.
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;实体类：User.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.krry.entity;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.annotation.Id;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * 实体类，类名对应的是MongoDB的集合名（表名），若没有，则自动创建
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; asusaad
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;     *  cid：该字段用于mongodb的“_id&quot;索引
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;     *  1 需要    @Id的注解
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;     *  2定义为String类型  ，如果定义为Integer可能索引只会是0
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;     *  会出现key重复导致数据库插不进去的情况
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;     *  3该类型也是MongoRepository泛型类主键的ID
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;     * 
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    @Id
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String cid;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String username;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User(){
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User(String username, String password) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCid() {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cid;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCid(String cid) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.cid =&lt;span&gt; cid;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUsername() {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; username;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUsername(String username) {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPassword() {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPassword(String password) {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     
&lt;span&gt;53&lt;/span&gt;     
&lt;span&gt;54&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;数据库操作的接口：UserRepository.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.krry.repository;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.mongodb.repository.MongoRepository;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.krry.entity.User;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; UserRepository &lt;span&gt;extends&lt;/span&gt; MongoRepository&amp;lt;User, String&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * 
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * findByUsername 命名有研究，比如 findBy后面的名称是实体类属性名称
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * Username
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * 
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User findByUsername(String username);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;控制层：UserController.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.krry.controller;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.mongodb.core.MongoTemplate;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.ui.Model;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.ResponseBody;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; 
&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.krry.entity.User;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.krry.repository.UserRepository;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用@Controller 才可以返回html页面，使用@ResController 返回的是字符串&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; @RequestMapping(value=&quot;/index&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserController {
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;     
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserRepository userRepository;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;     
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;    @Autowired  
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; MongoTemplate mongoTemplate;  
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;spring boot建议不要使用JSP，默认使用Thymeleaf来做动态页面传递参数到html页面
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Model是request级别的&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;     * 首页
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; request
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;     @RequestMapping(value=&quot;/index&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String index(Model model,HttpServletRequest request){  
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;         
&lt;span&gt; 38&lt;/span&gt;         User user = (User) request.getAttribute(&quot;user&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         
&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            System.out.println(user);&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;             User usero = &lt;span&gt;new&lt;/span&gt; User(&quot;##errors##&quot;,&quot;1234&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;             model.addAttribute(&quot;user&quot;&lt;span&gt;, usero);
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         
&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;index&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;     
&lt;span&gt; 49&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;     * 打开登录界面
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;     @RequestMapping(value=&quot;/oplogin&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String oplogin(){
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         
&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;login&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;     
&lt;span&gt; 59&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;     * 登录
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; model
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;     @RequestMapping(value=&quot;/login&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String login(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取用户和密码&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;         String username = request.getParameter(&quot;username&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         String password = request.getParameter(&quot;password&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         
&lt;span&gt; 70&lt;/span&gt;         
&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据用户名查询，用户是否存在&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;         User user =&lt;span&gt; userRepository.findByUsername(username);
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; 
&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果存在&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(user!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;             
&lt;span&gt; 77&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(password.equals(user.getPassword())){
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果密码正确
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将用户信息放入到会话中...&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;                 request.setAttribute(&quot;user&quot;&lt;span&gt;, user);
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;                 
&lt;span&gt; 82&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &quot;index&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                 
&lt;span&gt; 84&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果密码错误&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;                 System.out.println(&quot;密码错误&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &quot;ferror&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果不存在，代码邮箱和密码输入有误&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;             System.out.println(&quot;用户不存在&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &quot;ferror&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;     
&lt;span&gt; 96&lt;/span&gt;     
&lt;span&gt; 97&lt;/span&gt;     
&lt;span&gt; 98&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;     * 打开注册界面
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;     @RequestMapping(&quot;/resgi&quot;&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String resgi(){  
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         
&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;resgi&quot;&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;     
&lt;span&gt;108&lt;/span&gt;     
&lt;span&gt;109&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt; &lt;span&gt;     * 注册控制层
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; request
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt;     @RequestMapping(value=&quot;/rege&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String resig(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取用户和密码&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt;         String username = request.getParameter(&quot;username&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;         String password = request.getParameter(&quot;password&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;         
&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据昵称查询，用户是否存在&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;         User user =&lt;span&gt; userRepository.findByUsername(username);
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;         
&lt;span&gt;123&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;若存在&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(user != &lt;span&gt;null&lt;/span&gt;){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;昵称重复&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &quot;ferror&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;         
&lt;span&gt;128&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;若不存在&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt;         User newUser = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User(username,password);
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注册&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt; &lt;span&gt;        userRepository.save(newUser);
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;         
&lt;span&gt;133&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将信息设置session作用域&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;         request.setAttribute(&quot;user&quot;&lt;span&gt;, newUser);
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; 
&lt;span&gt;136&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;index&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;     
&lt;span&gt;139&lt;/span&gt; &lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;     @RequestMapping(&quot;/findByName&quot;&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User findByName(){  
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;         
&lt;span&gt;143&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; userRepository.findByUsername(&quot;krryxq&quot;&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;    }  
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;      
&lt;span&gt;146&lt;/span&gt; &lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;     @RequestMapping(&quot;/find&quot;&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt; find(){  
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;         
&lt;span&gt;150&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; mongoTemplate.findAll(User.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;    }  
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;启动类：MongoDBApllication.java&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.krry;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.SpringApplication;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.SpringBootApplication;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;@SpringBootApplication
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MongoDBApllication {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         SpringApplication.run(MongoDBApllication.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    } 
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;首页 index.html：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE HTML&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;xmlns:th&lt;/span&gt;&lt;span&gt;=&quot;http://www.thymeleaf.org&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;首页&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;   
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;title&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户名：&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; th:text&lt;/span&gt;&lt;span&gt;=&quot;${user.username}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;已登录&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;/index/logout&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;login&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; th:src&lt;/span&gt;&lt;span&gt;=&quot;@{/js/jquery-1.11.2.min.js}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;            &lt;span&gt;if&lt;/span&gt;&lt;span&gt;($(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).text() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;##errors##&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).text(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;未登录&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).attr(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/index/oplogin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).text(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;点击登陆&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;         * 判断非空
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;         * 
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;         * @param val
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;         * @returns {Boolean}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;          &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; isEmpty(val) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            val &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $.trim(val);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (val &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (val &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; undefined &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; val &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;undefined&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (val &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (val.length &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;[^(^\s*)|(\s*$)]&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;.test(val))
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;登录界面 login.html：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE HTML&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;登录界面&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;/index/login&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;           用户名：&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;           密&lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;码：&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;/index/resgi&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;点我注册&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;注册界面 resgi.html：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE HTML&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;注册界面&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;/index/rege&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;           用户名：&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;           密&lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;码：&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;错误界面 ferror.html：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE HTML&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;错误&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         登录时：用户名或密码错误&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;或&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;注册时：用户名已存在
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;/index/oplogin&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;返回登录&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里说一下，如果错误界面命名为 error.html 的话，那么 springboot 报错时跳转的页面就是默认跳转到你定义的 error.html 页面。&lt;/p&gt;

</description>
<pubDate>Mon, 19 Mar 2018 15:11:00 +0000</pubDate>
<dc:creator>筱月</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ainyi/p/8605802.html</dc:identifier>
</item>
<item>
<title>webpack学习（六）打包压缩js和css - 柴小智</title>
<link>http://www.cnblogs.com/chaixiaozhi/p/8604719.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chaixiaozhi/p/8604719.html</guid>
<description>&lt;p&gt;&lt;strong&gt;打包压缩js与css&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于webpack本身集成了UglifyJS插件（webpack.optimize.UglifyJsPlugin）来完成对JS与CSS的压缩混淆，无需引用额外的插件,&lt;/p&gt;
&lt;p&gt;其命令&lt;code&gt;webpack -p&lt;/code&gt;即表示调用UglifyJS来压缩代码，还有不少webpack插件如&lt;code&gt;html-webpack-plugin&lt;/code&gt;也会默认使用UglifyJS。&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;uglify-js的发行版本只支持ES5，如果你要压缩ES6+代码请使用&lt;span&gt;&lt;a&gt;&lt;span&gt;兼容&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;开发分支。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;UglifyJS可用的选项有：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;parse       解释&lt;br/&gt;&lt;strong&gt;compress    压缩&lt;/strong&gt;&lt;br/&gt;mangle      混淆&lt;br/&gt;beautify    美化&lt;br/&gt;&lt;strong&gt;minify      最小化　　&lt;/strong&gt;//在插件&lt;/span&gt;HtmlWebpackPlugin中使用&lt;span data-mce-=&quot;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;CLI         命令行工具&lt;br/&gt;sourcemap   编译后代码对源码的映射，用于网页调试&lt;br/&gt;AST         抽象语法树&lt;br/&gt;name        名字，包括变量名、函数名、属性名&lt;br/&gt;toplevel    顶层作用域&lt;br/&gt;unreachable 不可达代码&lt;br/&gt;option      选项&lt;br/&gt;&lt;span class=&quot;hljs-literal&quot;&gt;STDIN       标准输入，指在命令行中直接输入&lt;br/&gt;&lt;span class=&quot;hljs-literal&quot;&gt;STDOUT      标准输出&lt;br/&gt;&lt;span class=&quot;hljs-literal&quot;&gt;STDERR      标准错误输出&lt;br/&gt;side effects函数副作用，即函数除了返回外还产生别的作用，比如改了全局变量&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;列一份配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用插件html-webpack-plugin打包合并html&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;使用插件extract-text-webpack-plugin打包独立的css&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;使用UglifyJsPlugin压缩代码&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; HtmlWebpackPlugin = require('html-webpack-plugin'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ExtractTextPlugin = require('extract-text-webpack-plugin'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; webpack = require(&quot;webpack&quot;&lt;span&gt;);
module.exports &lt;/span&gt;=&lt;span&gt; {
    entry: {
        bundle : &lt;/span&gt;'./src/js/main.js'&lt;span&gt;
    },
    output: {
        filename: &lt;/span&gt;&quot;[name]-[hash].js&quot;&lt;span&gt;,
        path: __dirname &lt;/span&gt;+ '/dist'&lt;span&gt;
    },
    module: {
        rules: [
            {
                test: &lt;/span&gt;/\.css$/&lt;span&gt;,
                use: ExtractTextPlugin.extract({
                    fallback: &lt;/span&gt;&quot;style-loader&quot;&lt;span&gt;,
                    use: &lt;/span&gt;&quot;css-loader&quot;&lt;span&gt;
                })

            },
            {
                test: &lt;/span&gt;/\.(png|jpg|jpeg|gif)$/&lt;span&gt;,
                use: &lt;/span&gt;'url-loader?limit=8192'&lt;span&gt;
            }
        ]
    },
    resolve:{
            extensions:[&lt;/span&gt;'.js','.css','.json']  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用于配置程序可以自行补全哪些文件后缀&lt;/span&gt;
&lt;span&gt;    },

    plugins:[
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; HtmlWebpackPlugin({
            title: &lt;/span&gt;'hello webpack'&lt;span&gt;,
            template:&lt;/span&gt;'src/component/index.html'&lt;span&gt;,
            inject:&lt;/span&gt;'body'&lt;span&gt;,
            minify:{ &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;压缩HTML文件&lt;/span&gt;
                 removeComments:&lt;span&gt;true&lt;/span&gt;,    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;移除HTML中的注释&lt;/span&gt;
                 collapseWhitespace:&lt;span&gt;true&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除空白符与换行符&lt;/span&gt;
&lt;span&gt;             }
        }),
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ExtractTextPlugin(&quot;[name].[hash].css&quot;&lt;span&gt;),
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.optimize.UglifyJsPlugin({
            compress: {     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;压缩代码&lt;/span&gt;
                dead_code: &lt;span&gt;true&lt;/span&gt;,    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;移除没被引用的代码&lt;/span&gt;
                warnings: &lt;span&gt;false&lt;/span&gt;,     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当删除没有用处的代码时，显示警告&lt;/span&gt;
                loops: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当do、while 、 for循环的判断条件可以确定是，对其进行优化&lt;/span&gt;
&lt;span&gt;            },
            except: [&lt;/span&gt;'$super', '$', 'exports', 'require']    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;混淆,并排除关键字&lt;/span&gt;
&lt;span&gt;        })
    ]
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;这里需要注意的是压缩的时候需要排除一些关键字，不能混淆，比如$或者require，如果混淆的话就会影响到代码的正常运行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;列几个压缩时常有的属性：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;dead_code&lt;/code&gt; -- 移除没被引用的代码&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;loops&lt;/code&gt; -- 当&lt;code&gt;do&lt;/code&gt;、&lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt;循环的判断条件可以确定是，对其进行优化。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;warnings&lt;/code&gt; -- 当删除没有用处的代码时，显示警告&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Mon, 19 Mar 2018 15:08:00 +0000</pubDate>
<dc:creator>柴小智</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chaixiaozhi/p/8604719.html</dc:identifier>
</item>
<item>
<title>炫丽的倒计时效果Canvas绘图与动画基础 - 雪落忆海</title>
<link>http://www.cnblogs.com/xuepangzi/p/8605584.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuepangzi/p/8605584.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;digit =
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;    [
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;        [
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;            [0,0,1,1,1,0,0],
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;            [0,1,1,0,1,1,0],
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;            [0,1,1,0,1,1,0],
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;            [0,0,1,1,1,0,0]
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;        ],//0
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;        [
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;            [0,0,0,1,1,0,0],
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;            [0,1,1,1,1,0,0],
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;            [0,0,0,1,1,0,0],
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;            [0,0,0,1,1,0,0],
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;            [0,0,0,1,1,0,0],
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;            [0,0,0,1,1,0,0],
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;            [0,0,0,1,1,0,0],
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;            [0,0,0,1,1,0,0],
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;            [0,0,0,1,1,0,0],
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;            [1,1,1,1,1,1,1]
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;        ],//1
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;        [
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;            [0,1,1,1,1,1,0],
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;            [0,0,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;            [0,0,0,0,1,1,0],
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;            [0,0,0,1,1,0,0],
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;            [0,0,1,1,0,0,0],
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;            [0,1,1,0,0,0,0],
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,0,0],
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;            [1,1,1,1,1,1,1]
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;        ],//2
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;        [
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;            [1,1,1,1,1,1,1],
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;            [0,0,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;            [0,0,0,0,1,1,0],
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;            [0,0,0,1,1,0,0],
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;            [0,0,1,1,1,0,0],
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;            [0,0,0,0,1,1,0],
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;            [0,0,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;            [0,0,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;            [0,1,1,1,1,1,0]
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;        ],//3
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;        [
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;            [0,0,0,0,1,1,0],
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;            [0,0,0,1,1,1,0],
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;            [0,0,1,1,1,1,0],
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;            [0,1,1,0,1,1,0],
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;            [1,1,0,0,1,1,0],
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;            [1,1,1,1,1,1,1],
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;            [0,0,0,0,1,1,0],
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;            [0,0,0,0,1,1,0],
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;            [0,0,0,0,1,1,0],
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;            [0,0,0,1,1,1,1]
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;        ],//4
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;        [
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;            [1,1,1,1,1,1,1],
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,0,0],
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,0,0],
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;            [1,1,1,1,1,1,0],
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;            [0,0,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;            [0,0,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;            [0,0,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;            [0,0,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;            [0,1,1,1,1,1,0]
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;        ],//5
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;        [
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;            [0,0,0,0,1,1,0],
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;            [0,0,1,1,0,0,0],
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;            [0,1,1,0,0,0,0],
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,0,0],
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;            [1,1,0,1,1,1,0],
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;            [0,1,1,1,1,1,0]
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;        ],//6
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;        [
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;            [1,1,1,1,1,1,1],
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;            [0,0,0,0,1,1,0],
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;            [0,0,0,0,1,1,0],
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;            [0,0,0,1,1,0,0],
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;            [0,0,0,1,1,0,0],
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;            [0,0,1,1,0,0,0],
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;            [0,0,1,1,0,0,0],
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;            [0,0,1,1,0,0,0],
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;            [0,0,1,1,0,0,0]
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;        ],//7
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;        [
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;            [0,1,1,1,1,1,0],
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;            [0,1,1,1,1,1,0],
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;            [0,1,1,1,1,1,0]
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;        ],//8
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;        [
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;            [0,1,1,1,1,1,0],
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;            [1,1,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;            [0,1,1,1,0,1,1],
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;            [0,0,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;            [0,0,0,0,0,1,1],
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;            [0,0,0,0,1,1,0],
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;            [0,0,0,1,1,0,0],
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;            [0,1,1,0,0,0,0]
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;        ],//9
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;        [
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;            [0,0,0,0],
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;            [0,0,0,0],
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;            [0,1,1,0],
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;            [0,1,1,0],
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;            [0,0,0,0],
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;            [0,0,0,0],
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;            [0,1,1,0],
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;            [0,1,1,0],
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;            [0,0,0,0],
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;            [0,0,0,0]
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; &lt;span&gt;        ]//:
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;     ];
&lt;/pre&gt;</description>
<pubDate>Mon, 19 Mar 2018 14:33:00 +0000</pubDate>
<dc:creator>雪落忆海</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuepangzi/p/8605584.html</dc:identifier>
</item>
</channel>
</rss>