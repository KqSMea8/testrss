<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Entity Framework Core 懒加载 - Sweet-Tang</title>
<link>http://www.cnblogs.com/tdfblog/p/entity-framework-lazy-loading.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tdfblog/p/entity-framework-lazy-loading.html</guid>
<description>&lt;p&gt;众所周知在EF 6 及以前的版本中，是支持懒加载（Lazy Loading）的，可惜在EF Core 并不支持，必须使用&lt;code&gt;Include&lt;/code&gt;方法来支持导航属性的数据加载。不过现在EF Core的开发团队打算恢复对这一功能的支持（目前还未发布，不过可以在Github上面下载进行测试）。&lt;/p&gt;
&lt;h2 id=&quot;懒加载&quot;&gt;懒加载&lt;/h2&gt;
&lt;p&gt;懒加载也可以叫做按需加载、延迟加载。可以分两方面来理解，一方面指暂时不需要该数据，不用在当前马上加载，而可以推迟到使用它时再加载；另一方面指不确定是否将会需要该数据，所以暂时请不要加载，待确定需要后再加载它。懒加载是一种很重要的数据访问特性，可以有效地减少与数据源的交互（注意，这里所提的交互不是指交互次数，而是指交互的数据量），从而提升程序性能。&lt;/p&gt;
&lt;h2 id=&quot;ef-6-懒加载&quot;&gt;EF 6 懒加载&lt;/h2&gt;
&lt;p&gt;我们先来看一看在EF 6中的懒加载的使用方式。&lt;/p&gt;
&lt;p&gt;实体定义：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Order
    {
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; OrderID { &lt;span class=&quot;kw&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;; }
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;string&lt;/span&gt; CustomerID { &lt;span class=&quot;kw&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; DateTime? OrderDate { &lt;span class=&quot;kw&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;virtual&lt;/span&gt; ICollection&amp;lt;OrderDetail&amp;gt; OrderDetails { &lt;span class=&quot;kw&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;; }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; OrderDetail
    {
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; OrderID { &lt;span class=&quot;kw&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;; }
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ProductID { &lt;span class=&quot;kw&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;; }
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;decimal&lt;/span&gt; UnitPrice { &lt;span class=&quot;kw&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;; }
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;short&lt;/span&gt; Quantity { &lt;span class=&quot;kw&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;; }
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;float&lt;/span&gt; Discount { &lt;span class=&quot;kw&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;; }
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;virtual&lt;/span&gt; Order Order { &lt;span class=&quot;kw&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt;; }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们在这里定义&lt;strong&gt;订单&lt;/strong&gt;、&lt;strong&gt;订单明细&lt;/strong&gt;实体，它们是一对多关系，通过&lt;code&gt;OrderId&lt;/code&gt;字段进行关联。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;        &lt;span class=&quot;kw&quot;&gt;using&lt;/span&gt; (NorthwindContext context = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;NorthwindContext&lt;/span&gt;()) {

            Order order = await context.&lt;span class=&quot;fu&quot;&gt;Orders&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;SingleAsync&lt;/span&gt;(item =&amp;gt; item.&lt;span class=&quot;fu&quot;&gt;OrderID&lt;/span&gt; == &lt;span class=&quot;dv&quot;&gt;10253&lt;/span&gt;);

            Assert.&lt;span class=&quot;fu&quot;&gt;NotNull&lt;/span&gt;(order);

            Assert.&lt;span class=&quot;fu&quot;&gt;NotNull&lt;/span&gt;(order.&lt;span class=&quot;fu&quot;&gt;OrderDetails&lt;/span&gt;);

            Assert.&lt;span class=&quot;fu&quot;&gt;Equal&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, order.&lt;span class=&quot;fu&quot;&gt;OrderDetails&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Count&lt;/span&gt;);
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在查询订单号为 10253 的订单后，如果我们需要访问订单的明细，不需要再编写一次数据查询的代码，直接访问导航属性即可，EF会自动帮我们填充属性的值。&lt;/p&gt;
&lt;p&gt;懒加载需要注意以下两点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在配置中启用了懒加载（默认开启）;&lt;/li&gt;
&lt;li&gt;实体类不能是封闭（&lt;code&gt;sealed&lt;/code&gt;）类，导航属性必须是虚（&lt;code&gt;virtual&lt;/code&gt;）属性。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;在-ef-core-中启用懒加载&quot;&gt;在 EF Core 中启用懒加载&lt;/h2&gt;
&lt;p&gt;目前EF Core发布的最新版本中并不支持懒加载，开发人员必须使用&lt;code&gt;Include&lt;/code&gt;方法，才能完成导航属性的加载。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;        &lt;span class=&quot;kw&quot;&gt;using&lt;/span&gt; (NorthwindContext context = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;NorthwindContext&lt;/span&gt;()) {

            Order order = await context.&lt;span class=&quot;fu&quot;&gt;Orders&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Include&lt;/span&gt;(e =&amp;gt; e.&lt;span class=&quot;fu&quot;&gt;OrderDetails&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;SingleAsync&lt;/span&gt;(item =&amp;gt; item.&lt;span class=&quot;fu&quot;&gt;OrderID&lt;/span&gt; == &lt;span class=&quot;dv&quot;&gt;10253&lt;/span&gt;);

            Assert.&lt;span class=&quot;fu&quot;&gt;NotNull&lt;/span&gt;(order);

            Assert.&lt;span class=&quot;fu&quot;&gt;NotNull&lt;/span&gt;(order.&lt;span class=&quot;fu&quot;&gt;OrderDetails&lt;/span&gt;);

            Assert.&lt;span class=&quot;fu&quot;&gt;Equal&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, order.&lt;span class=&quot;fu&quot;&gt;OrderDetails&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Count&lt;/span&gt;);
        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大家需要在Github上面下载最新的源代码来测试这一功能 &lt;a href=&quot;https://github.com/aspnet/EntityFrameworkCore&quot;&gt;aspnet/EntityFrameworkCore&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;启用懒加载：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; NorthwindContext : DbContext
    {
        &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;OnConfiguring&lt;/span&gt;(DbContextOptionsBuilder optionsBuilder)
        {
            &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; sqlConnectionStringBuilder = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; SqlConnectionStringBuilder {
                DataSource = &lt;span class=&quot;st&quot;&gt;&quot;****&quot;&lt;/span&gt;,
                InitialCatalog = &lt;span class=&quot;st&quot;&gt;&quot;Northwind&quot;&lt;/span&gt;,
                UserID = &lt;span class=&quot;st&quot;&gt;&quot;sa&quot;&lt;/span&gt;,
                Password = &lt;span class=&quot;st&quot;&gt;&quot;sa&quot;&lt;/span&gt;
            };
            
            optionsBuilder.&lt;span class=&quot;fu&quot;&gt;UseSqlServer&lt;/span&gt;(sqlConnectionStringBuilder.&lt;span class=&quot;fu&quot;&gt;ConnectionString&lt;/span&gt;);
            
            optionsBuilder.&lt;span class=&quot;fu&quot;&gt;UseLazyLoadingProxies&lt;/span&gt;();
            
            &lt;span class=&quot;kw&quot;&gt;base&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;OnConfiguring&lt;/span&gt;(optionsBuilder);
        }

    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要在通常的应用程序中使用，只需在&lt;code&gt;DbContext&lt;/code&gt;的&lt;code&gt;OnConfiguring&lt;/code&gt;方法中添加对&lt;code&gt;UseLazyLoadingProxies()&lt;/code&gt;扩展方法调用即可。&lt;/p&gt;
&lt;p&gt;框架目前是通过&lt;code&gt;Castle.Core&lt;/code&gt;框架来生成代理类来实现对导航属性的延迟加载，开发团队打算将该功能做为EF Core的可选安装包。&lt;/p&gt;
&lt;p&gt;如果您对该功能感兴趣，可以在Github上面下载源代码进行测试。&lt;/p&gt;
</description>
<pubDate>Mon, 22 Jan 2018 23:48:00 +0000</pubDate>
<dc:creator>Sweet-Tang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tdfblog/p/entity-framework-lazy-loading.html</dc:identifier>
</item>
<item>
<title>lombok使用基础教程 - Ryan.Miao</title>
<link>http://www.cnblogs.com/woshimrf/p/lombok-usage.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/woshimrf/p/lombok-usage.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;lombok是一个编译级别的插件，它可以在项目编译的时候生成一些代码。在很多工具类的项目中都有这个功能。比如dagger。&lt;/p&gt;
&lt;p&gt;通俗的说，lombok可以通过注解来标示生成&lt;code&gt;getter&lt;/code&gt; &lt;code&gt;settter&lt;/code&gt;等代码。我们自然可以通过编译器比如IDEA的&lt;code&gt;Generate&lt;/code&gt;生成，为啥要用这个？&lt;/p&gt;
&lt;p&gt;在项目开发阶段，一个class的属性是一直变化的，今天可能增加一个字段，明天可能删除一个字段。每次变化都需要修改对应的模板代码。另外，有的class的字段超级多，多到一眼看不完。如果加上模板代码，更难一眼看出来。更有甚者，由于字段太多，想要使用builder来创建。手动创建builder和字段和原来的类夹杂在一起，看起来真的难受。lombok的&lt;code&gt;@Builder&lt;/code&gt;即可解决这个问题。&lt;/p&gt;
&lt;h2 id=&quot;引入&quot;&gt;引入&lt;/h2&gt;
&lt;p&gt;引入就是加入&lt;code&gt;lombok&lt;/code&gt;的jar包。&lt;/p&gt;
&lt;h3 id=&quot;在maven中&quot;&gt;在maven中&lt;/h3&gt;
&lt;p&gt;直接加入依赖&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.16.20&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;在gradle中&quot;&gt;在gradle中&lt;/h3&gt;
&lt;p&gt;这里比较麻烦，需要添加一个编译时生成代码的插件。gradle里有几个这样的插件。但为了简化过程，lombok提供了新插件。&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://projectlombok.org/setup/gradle&quot;&gt;官网&lt;/a&gt;， &lt;a href=&quot;https://github.com/franzbecker/gradle-lombok&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，添加一个plugin&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;plugins {
    id 'io.franzbecker.gradle-lombok' version '1.11'
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后，就可以了。还可以配置lombok的版本：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;lombok { // optional: values below are the defaults
    version = &quot;1.16.20&quot;
    sha256 = &quot;&quot;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;intelij-idea-插件&quot;&gt;IntelIJ IDEA 插件&lt;/h3&gt;
&lt;p&gt;在IDEA里使用需要添加一个插件。在插件里搜索lombok，安装，重启。&lt;br/&gt;&lt;img src=&quot;http://kriszhang.com/lombok/plugin.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;IDEA里需要在设置中启用annotation processors。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kriszhang.com/lombok/config.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本用法&quot;&gt;基本用法&lt;/h2&gt;
&lt;p&gt;测试代码： &lt;a href=&quot;https://github.com/Ryan-Miao/someTest/tree/master/src/main/java/com/test/lombok&quot; class=&quot;uri&quot;&gt;https://github.com/Ryan-Miao/someTest/tree/master/src/main/java/com/test/lombok&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;geeter-setter&quot;&gt;Geeter Setter&lt;/h3&gt;
&lt;p&gt;最简单的，最常用的，最直观的使用就是getter setter方法。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package com.test.lombok;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import lombok.AccessLevel;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import lombok.Getter;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import lombok.Setter;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import java.util.Date;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by Ryan Miao on 1/18/18.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; GetterSetterExample {
    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Age of the person. Water is wet.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param age &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;New value for this person's age. Sky is blue.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;The current value of this person's age. Circles are round.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Getter&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Setter&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; age = &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;;

    &lt;span class=&quot;fu&quot;&gt;@Getter&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Setter&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; active;

    &lt;span class=&quot;fu&quot;&gt;@Getter&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Setter&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Boolean none;

    &lt;span class=&quot;fu&quot;&gt;@Getter&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Setter&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Date date;

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Name of the person.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * -- SETTER --&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Changes the name of this person.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param name &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;The new value.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Setter&lt;/span&gt;(AccessLevel.&lt;span class=&quot;fu&quot;&gt;PROTECTED&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; String&lt;span class=&quot;fu&quot;&gt;.format&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; (age: &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;)&quot;&lt;/span&gt;, name, age);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        GetterSetterExample example = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;GetterSetterExample&lt;/span&gt;();
        example.&lt;span class=&quot;fu&quot;&gt;setActive&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
        example.&lt;span class=&quot;fu&quot;&gt;setAge&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;123&lt;/span&gt;);
        example.&lt;span class=&quot;fu&quot;&gt;setDate&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Date());
        example.&lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;abc&quot;&lt;/span&gt;);
        example.&lt;span class=&quot;fu&quot;&gt;setNone&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);

        Date date = example.&lt;span class=&quot;fu&quot;&gt;getDate&lt;/span&gt;();
        Boolean none = example.&lt;span class=&quot;fu&quot;&gt;getNone&lt;/span&gt;();
        &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; active = example.&lt;span class=&quot;fu&quot;&gt;isActive&lt;/span&gt;();
        
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简单使用没有问题，深入一点可以看到有些特殊设定。比如javadoc.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;Getter&lt;/code&gt;声明创建getter方法；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Setter&lt;/code&gt;声明创建setter方法；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Setter(AccessLevel.PROTECTED)&lt;/code&gt;可以添加参数，指定权限为私有；&lt;/li&gt;
&lt;li&gt;Attention！关于&lt;code&gt;boolean&lt;/code&gt;的set前缀都是set，但getter不同，小写的&lt;code&gt;boolean&lt;/code&gt;，即基本类型，前缀是&lt;code&gt;is&lt;/code&gt;; &lt;code&gt;Boolean&lt;/code&gt;，即包装类型，前缀是&lt;code&gt;get&lt;/code&gt;；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;编译后的结果如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// Source code recreated from a .class file by IntelliJ IDEA&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// (powered by Fernflower decompiler)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;package com.test.lombok;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import java.util.Date;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; GetterSetterExample {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; age = &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; active;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Boolean none;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Date date;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;GetterSetterExample&lt;/span&gt;() {
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; String&lt;span class=&quot;fu&quot;&gt;.format&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; (age: &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;)&quot;&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;age&lt;/span&gt;);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        GetterSetterExample example = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;GetterSetterExample&lt;/span&gt;();
        example.&lt;span class=&quot;fu&quot;&gt;setActive&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
        example.&lt;span class=&quot;fu&quot;&gt;setAge&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;123&lt;/span&gt;);
        example.&lt;span class=&quot;fu&quot;&gt;setDate&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Date());
        example.&lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;abc&quot;&lt;/span&gt;);
        example.&lt;span class=&quot;fu&quot;&gt;setNone&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
        Date date = example.&lt;span class=&quot;fu&quot;&gt;getDate&lt;/span&gt;();
        Boolean none = example.&lt;span class=&quot;fu&quot;&gt;getNone&lt;/span&gt;();
        &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; active = example.&lt;span class=&quot;fu&quot;&gt;isActive&lt;/span&gt;();
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getAge&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;age&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setAge&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; age) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;age&lt;/span&gt; = age;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;isActive&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;active&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setActive&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; active) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;active&lt;/span&gt; = active;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Boolean &lt;span class=&quot;fu&quot;&gt;getNone&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;none&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setNone&lt;/span&gt;(Boolean none) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;none&lt;/span&gt; = none;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Date &lt;span class=&quot;fu&quot;&gt;getDate&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;date&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setDate&lt;/span&gt;(Date date) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;date&lt;/span&gt; = date;
    }

    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(String name) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;tostring&quot;&gt;ToString&lt;/h3&gt;
&lt;p&gt;虽然ToString在生产环境貌似没什么卵用。但是，很多情况下，我们还是需要这个的。因为记log。&lt;a href=&quot;mailto:不想每次看log的时候是一串@地址&quot;&gt;不想每次看log的时候是一串@地址&lt;/a&gt;，那就好好把toString()加上。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package com.test.lombok;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import lombok.Setter;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import lombok.ToString;&lt;/span&gt;


&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by Ryan Miao on 1/18/18.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Setter&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@ToString&lt;/span&gt;(exclude=&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ToStringExample {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; STATIC_VAR = &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Shape shape = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Square&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;);
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String[] tags;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id;


    &lt;span class=&quot;fu&quot;&gt;@ToString&lt;/span&gt;(callSuper=&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;, includeFieldNames=&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Square &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Shape {
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; width, height;

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Square&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; width, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; height) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;width&lt;/span&gt; = width;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;height&lt;/span&gt; = height;
        }
    }

    &lt;span class=&quot;fu&quot;&gt;@ToString&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Shape {
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; color;

    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; ToStringExample example = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ToStringExample&lt;/span&gt;();
        example.&lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
        example.&lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;abc&quot;&lt;/span&gt;);
        example.&lt;span class=&quot;fu&quot;&gt;setTags&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String[]{&lt;span class=&quot;st&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;c&quot;&lt;/span&gt;});

        &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Shape shape = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Square&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;);
        example.&lt;span class=&quot;fu&quot;&gt;setShape&lt;/span&gt;(shape);

        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(example.&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;());
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.&lt;code&gt;@ToString&lt;/code&gt;最简单使用即可&lt;/p&gt;
&lt;p&gt;打印结果如下：&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;ToStringExample(name=abc, shape=ToStringExample.Square(super=ToStringExample.Shape(color=0), width=1, height=2), tags=[a, b, c])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编译后的代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// Source code recreated from a .class file by IntelliJ IDEA&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// (powered by Fernflower decompiler)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;package com.test.lombok;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import java.util.Arrays;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ToStringExample {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; STATIC_VAR = &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; ToStringExample.&lt;span class=&quot;fu&quot;&gt;Shape&lt;/span&gt; shape = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ToStringExample.&lt;span class=&quot;fu&quot;&gt;Square&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;);
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String[] tags;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ToStringExample&lt;/span&gt;() {
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        ToStringExample example = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ToStringExample&lt;/span&gt;();
        example.&lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
        example.&lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;abc&quot;&lt;/span&gt;);
        example.&lt;span class=&quot;fu&quot;&gt;setTags&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String[]{&lt;span class=&quot;st&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;c&quot;&lt;/span&gt;});
        ToStringExample.&lt;span class=&quot;fu&quot;&gt;Shape&lt;/span&gt; shape = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ToStringExample.&lt;span class=&quot;fu&quot;&gt;Square&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;);
        example.&lt;span class=&quot;fu&quot;&gt;setShape&lt;/span&gt;(shape);
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(example.&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;());
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(String name) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setShape&lt;/span&gt;(ToStringExample.&lt;span class=&quot;fu&quot;&gt;Shape&lt;/span&gt; shape) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;shape&lt;/span&gt; = shape;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setTags&lt;/span&gt;(String[] tags) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;tags&lt;/span&gt; = tags;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; = id;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;ToStringExample(name=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; + &lt;span class=&quot;st&quot;&gt;&quot;, shape=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;shape&lt;/span&gt; + &lt;span class=&quot;st&quot;&gt;&quot;, tags=&quot;&lt;/span&gt; + Arrays.&lt;span class=&quot;fu&quot;&gt;deepToString&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;tags&lt;/span&gt;) + &lt;span class=&quot;st&quot;&gt;&quot;)&quot;&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Shape {
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; color;

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Shape() {
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;ToStringExample.Shape(color=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;color&lt;/span&gt; + &lt;span class=&quot;st&quot;&gt;&quot;)&quot;&lt;/span&gt;;
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Square &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; ToStringExample.&lt;span class=&quot;fu&quot;&gt;Shape&lt;/span&gt; {
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; width;
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; height;

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Square&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; width, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; height) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;width&lt;/span&gt; = width;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;height&lt;/span&gt; = height;
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;ToStringExample.Square(super=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;, width=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;width&lt;/span&gt; + &lt;span class=&quot;st&quot;&gt;&quot;, height=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;height&lt;/span&gt; + &lt;span class=&quot;st&quot;&gt;&quot;)&quot;&lt;/span&gt;;
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;equalsandhashcode&quot;&gt;@EqualsAndHashCode&lt;/h3&gt;
&lt;p&gt;equals()和hashCode()在Java中有着举足轻重的基地作用，虽然通常很少关注。但是，这个必须不可省。不知道有几个可以手写出来的。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package com.test.lombok;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import lombok.EqualsAndHashCode;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by Ryan Miao on 1/18/18.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@EqualsAndHashCode&lt;/span&gt;(exclude={&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;shape&quot;&lt;/span&gt;})
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; EqualsAndHashCodeExample {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;transient&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; transientVar = &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; score;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; ToStringExample.&lt;span class=&quot;fu&quot;&gt;Shape&lt;/span&gt; shape = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Square&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;);
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String[] tags;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt;;
    }

    &lt;span class=&quot;fu&quot;&gt;@EqualsAndHashCode&lt;/span&gt;(callSuper=&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Square &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; ToStringExample.&lt;span class=&quot;fu&quot;&gt;Shape&lt;/span&gt; {
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; width, height;

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Square&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; width, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; height) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;width&lt;/span&gt; = width;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;height&lt;/span&gt; = height;
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        EqualsAndHashCodeExample example = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;EqualsAndHashCodeExample&lt;/span&gt;();
        EqualsAndHashCodeExample example1 = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;EqualsAndHashCodeExample&lt;/span&gt;();
        &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; equals = example.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(example1);
        &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; b = example.&lt;span class=&quot;fu&quot;&gt;canEqual&lt;/span&gt;(example);
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = example.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后的结果为：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// Source code recreated from a .class file by IntelliJ IDEA&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// (powered by Fernflower decompiler)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;package com.test.lombok;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import com.test.lombok.ToStringExample.Shape;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Arrays;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; EqualsAndHashCodeExample {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;transient&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; transientVar = &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; score;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Shape shape = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; EqualsAndHashCodeExample.&lt;span class=&quot;fu&quot;&gt;Square&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;);
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String[] tags;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;EqualsAndHashCodeExample&lt;/span&gt;() {
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        EqualsAndHashCodeExample example = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;EqualsAndHashCodeExample&lt;/span&gt;();
        EqualsAndHashCodeExample example1 = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;EqualsAndHashCodeExample&lt;/span&gt;();
        example.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(example1);
        &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; b = example.&lt;span class=&quot;fu&quot;&gt;canEqual&lt;/span&gt;(example);
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = example.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;();
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(Object o) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (o == &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!(o &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; EqualsAndHashCodeExample)) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            EqualsAndHashCodeExample other = (EqualsAndHashCodeExample)o;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!other.&lt;span class=&quot;fu&quot;&gt;canEqual&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)) {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
            } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
                label31: {
                    Object this$name = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();
                    Object other$name = other.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (this$name == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (other$name == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                            &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt; label31;
                        }
                    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (this$name.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(other$name)) {
                        &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt; label31;
                    }

                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                }

                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (Double.&lt;span class=&quot;fu&quot;&gt;compare&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;score&lt;/span&gt;, other.&lt;span class=&quot;fu&quot;&gt;score&lt;/span&gt;) != &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; Arrays.&lt;span class=&quot;fu&quot;&gt;deepEquals&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;tags&lt;/span&gt;, other.&lt;span class=&quot;fu&quot;&gt;tags&lt;/span&gt;);
                }
            }
        }
    }

    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;canEqual&lt;/span&gt;(Object other) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; other &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; EqualsAndHashCodeExample;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;() {
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; PRIME = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; result = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
        Object $name = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; result = result * &lt;span class=&quot;dv&quot;&gt;59&lt;/span&gt; + ($name == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;dv&quot;&gt;43&lt;/span&gt; : $name.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;());
        &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; $score = Double.&lt;span class=&quot;fu&quot;&gt;doubleToLongBits&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;score&lt;/span&gt;);
        result = result * &lt;span class=&quot;dv&quot;&gt;59&lt;/span&gt; + (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;)($score &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;dv&quot;&gt;32&lt;/span&gt; ^ $score);
        result = result * &lt;span class=&quot;dv&quot;&gt;59&lt;/span&gt; + Arrays.&lt;span class=&quot;fu&quot;&gt;deepHashCode&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;tags&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; result;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Square &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Shape {
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; width;
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; height;

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Square&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; width, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; height) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;width&lt;/span&gt; = width;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;height&lt;/span&gt; = height;
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(Object o) {
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (o == &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;) {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
            } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!(o &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; EqualsAndHashCodeExample.&lt;span class=&quot;fu&quot;&gt;Square&lt;/span&gt;)) {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
            } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
                EqualsAndHashCodeExample.&lt;span class=&quot;fu&quot;&gt;Square&lt;/span&gt; other = (EqualsAndHashCodeExample.&lt;span class=&quot;fu&quot;&gt;Square&lt;/span&gt;)o;
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!other.&lt;span class=&quot;fu&quot;&gt;canEqual&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)) {
                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(o)) {
                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;width&lt;/span&gt; != other.&lt;span class=&quot;fu&quot;&gt;width&lt;/span&gt;) {
                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;height&lt;/span&gt; == other.&lt;span class=&quot;fu&quot;&gt;height&lt;/span&gt;;
                }
            }
        }

        &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;canEqual&lt;/span&gt;(Object other) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; other &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; EqualsAndHashCodeExample.&lt;span class=&quot;fu&quot;&gt;Square&lt;/span&gt;;
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;() {
            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; PRIME = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; result = &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;();
            result = result * &lt;span class=&quot;dv&quot;&gt;59&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;width&lt;/span&gt;;
            result = result * &lt;span class=&quot;dv&quot;&gt;59&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;height&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; result;
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;构造函数noargsconstructor-requiredargsconstructor-allargsconstructor&quot;&gt;&lt;a href=&quot;mailto:构造函数@NoArgsConstructor&quot;&gt;构造函数@NoArgsConstructor&lt;/a&gt;, @RequiredArgsConstructor, @AllArgsConstructor&lt;/h3&gt;
&lt;p&gt;Java中class的一切起源于构造器。大家最喜欢的还是构造函数创建对象。这里有一点比较坑的是无参构造函数。当你自己添加一个带有参数的构造函数后，无参构造函数则别隐藏。通常也没啥问题，但当你使用jackson反序列化对象的时候就被恶心到了。jackson通过无参构造函数创建对象。因此，当你考虑这个class会用来序列化为json的时候，即必须手动添加一个无参数构造函数。&lt;/p&gt;
&lt;h4 id=&quot;noargsconstructor&quot;&gt;@NoArgsConstructor&lt;/h4&gt;
&lt;p&gt;当你想要创建一个valueobject，DDD中的值对象，要求实现Immutable，那么无参数构造器就不合适了。&lt;code&gt;@NoArgsConstructor&lt;/code&gt;会生成一个空的构造器。如果你设置了final field，那么编译会报错。如果你强制执行创建无参数构造器。即，&lt;code&gt;@NoArgsConstructor(force = true)&lt;/code&gt;，那么final的field会初始化为&lt;code&gt;0&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;/&lt;code&gt;null&lt;/code&gt;。通常适合与&lt;code&gt;@Data&lt;/code&gt;集成。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; NoArgsExample {
    &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String field;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;NonNull&lt;/code&gt;被忽略了&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最终生成代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; NoArgsExample {
    &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String field;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;NoArgsExample&lt;/span&gt;() {
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于final的字段，我认为我不会用空构造器来做这件事。所以，感觉这个参数&lt;code&gt;force=true&lt;/code&gt;不要也罢，鸡肋。&lt;/p&gt;
&lt;h4 id=&quot;requiredargsconstructor&quot;&gt;@RequiredArgsConstructor&lt;/h4&gt;
&lt;p&gt;一个class可以有很多属性，但你可能只关心其中的几个字段，那么可以使用&lt;code&gt;@RequiredArgsConstructor&lt;/code&gt;。&lt;code&gt;@NonNull&lt;/code&gt;将标注这个字段不应为null，初始化的时候会检查是否为空，否则抛出&lt;code&gt;NullPointException&lt;/code&gt;。在上面的无参构造函数中被忽略了。那么，对于关注的字段标注&lt;code&gt;@NonNull&lt;/code&gt;, &lt;code&gt;@RequiredArgsConstructor&lt;/code&gt;则会生成带有这些字段的构造器。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RequiredArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; RequiredArgsExample {
    &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String field;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Date date;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer integer;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; b;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Boolean aBoolean;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终生成结果：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; RequiredArgsExample {
    &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String field;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Date date;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer integer;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; b;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Boolean aBoolean;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RequiredArgsExample&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt; String field) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (field == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; NullPointerException(&lt;span class=&quot;st&quot;&gt;&quot;field&quot;&lt;/span&gt;);
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;field&lt;/span&gt; = field;
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只有&lt;code&gt;@NonNull&lt;/code&gt;会生成构造器。其他默认，Java的class初始化默认为null.false,0.&lt;/p&gt;
&lt;p&gt;lombok提供了另一种初始化做法，静态初始化。即私有构造器，使用静态方法创建对象。这种做法看起来简单，但通常用的不多。因为静态初始化的东西很难mock，对测试不够友好。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RequiredArgsConstructor&lt;/span&gt;(staticName = &lt;span class=&quot;st&quot;&gt;&quot;of&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; RequiredArgsStaticExample {
    &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String field;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Date date;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer integer;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; b;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Boolean aBoolean;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终生成代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ConstructorExample&amp;lt;T&amp;gt; {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; x;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; y;
    &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; T description;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ConstructorExample&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt; T description) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (description == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; NullPointerException(&lt;span class=&quot;st&quot;&gt;&quot;description&quot;&lt;/span&gt;);
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;description&lt;/span&gt; = description;
        }
    }
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; ConstructorExample&amp;lt;T&amp;gt; &lt;span class=&quot;fu&quot;&gt;of&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt; T description) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ConstructorExample&lt;/span&gt;(description);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;allargsconstructor&quot;&gt;@AllArgsConstructor&lt;/h4&gt;
&lt;p&gt;想要初始化所有字段。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@AllArgsConstructor&lt;/span&gt;(access = AccessLevel.&lt;span class=&quot;fu&quot;&gt;PROTECTED&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ConstructorExample&amp;lt;T&amp;gt; {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; x, y;
    &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; T description;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终生成代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ConstructorExample&amp;lt;T&amp;gt; {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; x;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; y;
    &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; T description;
    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ConstructorExample&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; y, &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt; T description) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (description == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; NullPointerException(&lt;span class=&quot;st&quot;&gt;&quot;description&quot;&lt;/span&gt;);
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;x&lt;/span&gt; = x;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;y&lt;/span&gt; = y;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;description&lt;/span&gt; = description;
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;必用项data&quot;&gt;&lt;a href=&quot;mailto:必用项@Data&quot;&gt;必用项@Data&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@Data&lt;/code&gt;是一个集合体。包含&lt;code&gt;Getter&lt;/code&gt;,&lt;code&gt;Setter&lt;/code&gt;,&lt;code&gt;RequiredArgsConstructor&lt;/code&gt;,&lt;code&gt;ToString&lt;/code&gt;,&lt;code&gt;EqualsAndHashCode&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;不可变对象valueobject-value&quot;&gt;不可变对象valueobject @Value&lt;/h3&gt;
&lt;p&gt;这个看起来很美好，就是可以帮忙生成一个不可变对象。对于所有的字段都将生成final的。但我感觉有点失控。注解的优势应该是所见即所得，可以通过字面量来传递消息。而&lt;code&gt;@Value&lt;/code&gt;字段给字段加final会让人困惑，因为这更改了我们的定义。当我想声明一个Immutable对象的时候，我会显示的给字段加一个限定final。&lt;/p&gt;
&lt;p&gt;同&lt;code&gt;@Data&lt;/code&gt;， &lt;code&gt;@Value&lt;/code&gt;是一个集合体。包含&lt;code&gt;Getter&lt;/code&gt;,&lt;code&gt;AllArgsConstructor&lt;/code&gt;,&lt;code&gt;ToString&lt;/code&gt;,&lt;code&gt;EqualsAndHashCode&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by Ryan Miao on 1/18/18.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Value&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Room {
    &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String id;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; active;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Date createTime;

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Room {
    &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String id;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String name;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; active;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Date createTime;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Room&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt; String id, String name, &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; active, Date createTime) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (id == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; NullPointerException(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;);
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; = id;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;active&lt;/span&gt; = active;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;createTime&lt;/span&gt; = createTime;
        }
    }

    &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;isActive&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;active&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Date &lt;span class=&quot;fu&quot;&gt;getCreateTime&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;createTime&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(Object o) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (o == &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!(o &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; Room)) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            Room other = (Room)o;
            Object this$id = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;();
            Object other$id = other.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (this$id == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (other$id != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                }
            } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!this$id.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(other$id)) {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
            }

            label41: {
                Object this$name = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();
                Object other$name = other.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (this$name == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (other$name == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                        &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt; label41;
                    }
                } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (this$name.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(other$name)) {
                    &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt; label41;
                }

                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
            }

            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;isActive&lt;/span&gt;() != other.&lt;span class=&quot;fu&quot;&gt;isActive&lt;/span&gt;()) {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
            } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
                Object this$createTime = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getCreateTime&lt;/span&gt;();
                Object other$createTime = other.&lt;span class=&quot;fu&quot;&gt;getCreateTime&lt;/span&gt;();
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (this$createTime == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (other$createTime != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                    }
                } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!this$createTime.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(other$createTime)) {
                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                }

                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
            }
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;() {
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; PRIME = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; result = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
        Object $id = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;();
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; result = result * &lt;span class=&quot;dv&quot;&gt;59&lt;/span&gt; + ($id == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;dv&quot;&gt;43&lt;/span&gt; : $id.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;());
        Object $name = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();
        result = result * &lt;span class=&quot;dv&quot;&gt;59&lt;/span&gt; + ($name == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;dv&quot;&gt;43&lt;/span&gt; : $name.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;());
        result = result * &lt;span class=&quot;dv&quot;&gt;59&lt;/span&gt; + (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;isActive&lt;/span&gt;() ? &lt;span class=&quot;dv&quot;&gt;79&lt;/span&gt; : &lt;span class=&quot;dv&quot;&gt;97&lt;/span&gt;);
        Object $createTime = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getCreateTime&lt;/span&gt;();
        result = result * &lt;span class=&quot;dv&quot;&gt;59&lt;/span&gt; + ($createTime == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;dv&quot;&gt;43&lt;/span&gt; : $createTime.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;());
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; result;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Room(id=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;, name=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;, active=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;isActive&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;, createTime=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getCreateTime&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;)&quot;&lt;/span&gt;;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;最喜欢的项-builder&quot;&gt;最喜欢的项 @Builder&lt;/h3&gt;
&lt;p&gt;对于喜欢builder模式的人来说，声明式简化对象创建流程让一切看得美好。但是，手动复制字段，手动创建方法很让人不喜。&lt;code&gt;@Builder&lt;/code&gt;解决了刚需。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by Ryan Miao on 1/18/18.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Builder&lt;/span&gt;(toBuilder = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Room {
    &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String id;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; active;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Date createTime;
    &lt;span class=&quot;fu&quot;&gt;@Singular&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Set&amp;lt;String&amp;gt; occupations;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        Room room = Room.&lt;span class=&quot;fu&quot;&gt;builder&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;active&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)
                .&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;)
                .&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;)
                .&lt;span class=&quot;fu&quot;&gt;createTime&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Date())
                .&lt;span class=&quot;fu&quot;&gt;occupation&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;)
                .&lt;span class=&quot;fu&quot;&gt;occupation&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;2&quot;&lt;/span&gt;)
                .&lt;span class=&quot;fu&quot;&gt;build&lt;/span&gt;();

        Assert.&lt;span class=&quot;fu&quot;&gt;assertEquals&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, room.&lt;span class=&quot;fu&quot;&gt;getOccupations&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;());

    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这才是我们想要的建造者。对应生成的代码为：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;27&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// Source code recreated from a .class file by IntelliJ IDEA&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// (powered by Fernflower decompiler)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;package com.test.lombok;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import java.util.ArrayList;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Collection;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Collections;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Date;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.LinkedHashSet;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Set;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import lombok.NonNull;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.junit.Assert;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Room {
    &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String id;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; active;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Date createTime;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Set&amp;lt;String&amp;gt; occupations;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        Room room = &lt;span class=&quot;fu&quot;&gt;builder&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;active&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;createTime&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Date()).&lt;span class=&quot;fu&quot;&gt;occupation&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;occupation&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;2&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;build&lt;/span&gt;();
        Assert.&lt;span class=&quot;fu&quot;&gt;assertEquals&lt;/span&gt;(2L, (&lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt;)room.&lt;span class=&quot;fu&quot;&gt;getOccupations&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;());
    }

    &lt;span class=&quot;fu&quot;&gt;Room&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt; String id, String name, &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; active, Date createTime, Set&amp;lt;String&amp;gt; occupations) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (id == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; NullPointerException(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;);
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; = id;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;active&lt;/span&gt; = active;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;createTime&lt;/span&gt; = createTime;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt; = occupations;
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; Room.&lt;span class=&quot;fu&quot;&gt;RoomBuilder&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;builder&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Room.&lt;span class=&quot;fu&quot;&gt;RoomBuilder&lt;/span&gt;();
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Room.&lt;span class=&quot;fu&quot;&gt;RoomBuilder&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;toBuilder&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Room.&lt;span class=&quot;fu&quot;&gt;RoomBuilder&lt;/span&gt;()).&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;active&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;active&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;createTime&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;createTime&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt;);
    }

    &lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;isActive&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;active&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Date &lt;span class=&quot;fu&quot;&gt;getCreateTime&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;createTime&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Set&amp;lt;String&amp;gt; &lt;span class=&quot;fu&quot;&gt;getOccupations&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@NonNull&lt;/span&gt; String id) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (id == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; NullPointerException(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;);
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; = id;
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(String name) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setActive&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; active) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;active&lt;/span&gt; = active;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setCreateTime&lt;/span&gt;(Date createTime) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;createTime&lt;/span&gt; = createTime;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setOccupations&lt;/span&gt;(Set&amp;lt;String&amp;gt; occupations) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt; = occupations;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(Object o) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (o == &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!(o &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; Room)) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            Room other = (Room)o;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!other.&lt;span class=&quot;fu&quot;&gt;canEqual&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)) {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
            } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
                label63: {
                    Object this$id = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;();
                    Object other$id = other.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;();
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (this$id == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (other$id == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                            &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt; label63;
                        }
                    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (this$id.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(other$id)) {
                        &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt; label63;
                    }

                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                }

                Object this$name = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();
                Object other$name = other.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (this$name == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (other$name != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                    }
                } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!this$name.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(other$name)) {
                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                }

                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;isActive&lt;/span&gt;() != other.&lt;span class=&quot;fu&quot;&gt;isActive&lt;/span&gt;()) {
                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
                    Object this$createTime = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getCreateTime&lt;/span&gt;();
                    Object other$createTime = other.&lt;span class=&quot;fu&quot;&gt;getCreateTime&lt;/span&gt;();
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (this$createTime == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (other$createTime != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                        }
                    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!this$createTime.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(other$createTime)) {
                        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                    }

                    Object this$occupations = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getOccupations&lt;/span&gt;();
                    Object other$occupations = other.&lt;span class=&quot;fu&quot;&gt;getOccupations&lt;/span&gt;();
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (this$occupations == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (other$occupations != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                        }
                    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!this$occupations.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(other$occupations)) {
                        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                    }

                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
                }
            }
        }
    }

    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;canEqual&lt;/span&gt;(Object other) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; other &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; Room;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;() {
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; PRIME = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; result = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
        Object $id = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;();
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; result = result * &lt;span class=&quot;dv&quot;&gt;59&lt;/span&gt; + ($id == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;dv&quot;&gt;43&lt;/span&gt; : $id.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;());
        Object $name = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();
        result = result * &lt;span class=&quot;dv&quot;&gt;59&lt;/span&gt; + ($name == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;dv&quot;&gt;43&lt;/span&gt; : $name.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;());
        result = result * &lt;span class=&quot;dv&quot;&gt;59&lt;/span&gt; + (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;isActive&lt;/span&gt;() ? &lt;span class=&quot;dv&quot;&gt;79&lt;/span&gt; : &lt;span class=&quot;dv&quot;&gt;97&lt;/span&gt;);
        Object $createTime = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getCreateTime&lt;/span&gt;();
        result = result * &lt;span class=&quot;dv&quot;&gt;59&lt;/span&gt; + ($createTime == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;dv&quot;&gt;43&lt;/span&gt; : $createTime.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;());
        Object $occupations = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getOccupations&lt;/span&gt;();
        result = result * &lt;span class=&quot;dv&quot;&gt;59&lt;/span&gt; + ($occupations == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;dv&quot;&gt;43&lt;/span&gt; : $occupations.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;());
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; result;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Room(id=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;, name=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;, active=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;isActive&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;, createTime=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getCreateTime&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;, occupations=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getOccupations&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;)&quot;&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; RoomBuilder {
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String id;
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; active;
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Date createTime;
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; ArrayList&amp;lt;String&amp;gt; occupations;

        &lt;span class=&quot;fu&quot;&gt;RoomBuilder&lt;/span&gt;() {
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Room.&lt;span class=&quot;fu&quot;&gt;RoomBuilder&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;(String id) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; = id;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;;
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Room.&lt;span class=&quot;fu&quot;&gt;RoomBuilder&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt;(String name) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;;
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Room.&lt;span class=&quot;fu&quot;&gt;RoomBuilder&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;active&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; active) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;active&lt;/span&gt; = active;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;;
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Room.&lt;span class=&quot;fu&quot;&gt;RoomBuilder&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;createTime&lt;/span&gt;(Date createTime) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;createTime&lt;/span&gt; = createTime;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;;
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Room.&lt;span class=&quot;fu&quot;&gt;RoomBuilder&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;occupation&lt;/span&gt;(String occupation) {
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt; == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList();
            }

            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(occupation);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;;
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Room.&lt;span class=&quot;fu&quot;&gt;RoomBuilder&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt;(Collection&amp;lt;? &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; String&amp;gt; occupations) {
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt; == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList();
            }

            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;addAll&lt;/span&gt;(occupations);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;;
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Room.&lt;span class=&quot;fu&quot;&gt;RoomBuilder&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;clearOccupations&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;clear&lt;/span&gt;();
            }

            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;;
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Room &lt;span class=&quot;fu&quot;&gt;build&lt;/span&gt;() {
            Set occupations;
            &lt;span class=&quot;kw&quot;&gt;switch&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt; == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;()) {
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:
                occupations = Collections.&lt;span class=&quot;fu&quot;&gt;emptySet&lt;/span&gt;();
                &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:
                occupations = Collections.&lt;span class=&quot;fu&quot;&gt;singleton&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;));
                &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt;:
                Set&amp;lt;String&amp;gt; occupations = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; LinkedHashSet(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;() &amp;lt; &lt;span class=&quot;dv&quot;&gt;1073741824&lt;/span&gt; ? &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;() + (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;() - &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;) / &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; : &lt;span class=&quot;dv&quot;&gt;2147483647&lt;/span&gt;);
                occupations.&lt;span class=&quot;fu&quot;&gt;addAll&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt;);
                occupations = Collections.&lt;span class=&quot;fu&quot;&gt;unmodifiableSet&lt;/span&gt;(occupations);
            }

            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Room&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;active&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;createTime&lt;/span&gt;, occupations);
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Room.RoomBuilder(id=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; + &lt;span class=&quot;st&quot;&gt;&quot;, name=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; + &lt;span class=&quot;st&quot;&gt;&quot;, active=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;active&lt;/span&gt; + &lt;span class=&quot;st&quot;&gt;&quot;, createTime=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;createTime&lt;/span&gt; + &lt;span class=&quot;st&quot;&gt;&quot;, occupations=&quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;occupations&lt;/span&gt; + &lt;span class=&quot;st&quot;&gt;&quot;)&quot;&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;lombok还提供了其他几个注解，以及还有好多内置的参数没有讲解。但是，根据2-8原理，我们根本不需要。上面这几个足够了。更多的注解只会增加理解阅读难度。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://projectlombok.org/features/all&quot; class=&quot;uri&quot;&gt;https://projectlombok.org/features/all&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kriszhang.com/lombok/&quot; class=&quot;uri&quot;&gt;http://kriszhang.com/lombok/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 22 Jan 2018 23:04:00 +0000</pubDate>
<dc:creator>Ryan.Miao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/woshimrf/p/lombok-usage.html</dc:identifier>
</item>
<item>
<title>数据结构（三）——散列（上） - yhthu</title>
<link>http://www.cnblogs.com/younghao/p/8333795.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/younghao/p/8333795.html</guid>
<description>&lt;p&gt;为什么要设计散列这种数据结构呢？在现实世界中，实体之间可能存在着映射关系（key-value），比如一个订单可能对应多个商品，对应一个配送站点。散列正是对这种映射关系的逻辑结构的表达，但同时，作为一种数据结构，在计算机中该如何实现存储呢？&lt;/p&gt;
&lt;p&gt;本节将重点从散列的逻辑结构和存储结构出发，对上述涉及的散列原理及应用场景作出说明：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;散列函数与散列表&lt;/li&gt;
&lt;li&gt;Java中的散列实例&lt;/li&gt;
&lt;li&gt;保证最坏情况时间复杂度&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;一散列函数与散列表&quot;&gt;一、散列函数与散列表&lt;/h2&gt;
&lt;h3 id=&quot;散列函数&quot;&gt;1.1 散列函数&lt;/h3&gt;
&lt;p&gt;散列函数（Hash Function）是一种从任何一种数据中创建小的数字“指纹”的方法。一般来讲，散列函数的输入包含较多的信息（比如SHA-2最高接受(2&lt;sup&gt;64&lt;/sup&gt;-1)/8长度的字节字符串），经过散列算法后，映射为一个更小空间的散列值（通常为格式固定的字母和数字组成的字符串），其过程如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-80a369c75a8fd077.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;散列函数&quot;/&gt;&lt;/p&gt;
&lt;p&gt;散列函数在加密、校验等安全领域有广泛的应用，比如，SHA（Secure Hash Algorithm）家族在TLS和SSL、PGP、SSH、S/MIME和IPsec等安全协议中的广泛应用，MD5（Message-Digest Algorithm 5）在文件下载中校验的应用，此外，散列表是散列函数的一个主要应用。&lt;/p&gt;
&lt;h3 id=&quot;散列表&quot;&gt;1.2 散列表&lt;/h3&gt;
&lt;p&gt;散列表的核心优势是能够按照关键字&lt;strong&gt;快速存取&lt;/strong&gt;数据记录，其插入、查找和删除的平均时间复杂度为O(1)。在实现上，将关键字通过散列函数映射为一个数组的地址，而将数据记录存储在该数组单元中。对同一散列函数，要求两个散列值如果是不相同的，那么这两个散列值的原始输入也是不相同的；但两个散列值如果是相同的，却并不能确定两个输入值是相同的，如果不同的输入得到的相同的散列值，这种情况就是“散列冲突”。一种常用的散列表结构如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-95580bb0a045c3b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;散列表数据结构&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看出，散列表的核心结构为：数组+链表。直接存储散列数据的结构称为节点，节点包含散列值、关键字、数据域和指针域（指向下一个节点）。如图中的节点13，其关键字经过散列函数得出在数组中的下标为0，数据域为13，指针域指向下一个节点6。节点在数组中存储的地址称为槽位，比如散列冲突时，37、62、52和92经过散列函数计算得出的槽位均为14。&lt;/p&gt;
&lt;p&gt;那么，为了减少散列冲突，使数据元素在数组中均匀分布，在散列表的实现中，选择合适的散列函数至关重要，常见的散列函数包括直接寻址法、数字分析法、平方取中法、折叠法、随机数法及除留余数法等，其中，直接寻址法通过取key值或者key值的某个线性函数值作为散列地址，即hash(k)=k或者hash(k)=a*k+b；除留余数法通过取关键字被某个不大于散列表表长m的数p除后所得的余数为散列地址。即 hash(k)= k mod p, p &amp;lt; m。在JDK中常用除留余数法作为散列函数。&lt;/p&gt;
&lt;h3 id=&quot;解决散列冲突&quot;&gt;1.3 解决散列冲突&lt;/h3&gt;
&lt;p&gt;一个好的散列函数要求尽量减少散列冲突且计算简单，但冲突总是无法避免的，遇到冲突有哪些解决办法呢？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;链地址法。上图中解决散列冲突的方法就是链地址法，即将散列到同一槽位的元素通过链表进行保存。JDK中就是使用这种方法来解决散列冲突的。&lt;/li&gt;
&lt;li&gt;开放定址法。假定散列函数为H，经过散列函数运算H(key)后得到散列值为H&lt;sub&gt;i&lt;/sub&gt;，过程如下：&lt;br/&gt;H&lt;sub&gt;i&lt;/sub&gt; =(H(key) + d&lt;sub&gt;i&lt;/sub&gt;) % m，其中i = 1，2，…，n.&lt;br/&gt;常用的开放定址法包括线性探测法和平方探测法。其区别在于d&lt;sub&gt;i&lt;/sub&gt;：&lt;br/&gt;线程探测法：d&lt;sub&gt;i&lt;/sub&gt; = 1，2，3，…，m-1.&lt;br/&gt;平方探测法：d&lt;sub&gt;i&lt;/sub&gt; =1&lt;sup&gt;2&lt;/sup&gt;，-1&lt;sup&gt;2&lt;/sup&gt;，2&lt;sup&gt;2&lt;/sup&gt;，-2&lt;sup&gt;2&lt;/sup&gt;，…，k&lt;sup&gt;2&lt;/sup&gt;，-k&lt;sup&gt;2&lt;/sup&gt; ( k&amp;lt;=m/2 ).&lt;/li&gt;
&lt;li&gt;再散列。顾名思义，在散列冲突发生后，采用新的散列函数对key进行重新散列。假定散列函数分别为RH&lt;sub&gt;1&lt;/sub&gt;，RH&lt;sub&gt;2&lt;/sub&gt;……，散列过程如下：&lt;br/&gt;H&lt;sub&gt;i&lt;/sub&gt;=RH&lt;sub&gt;1&lt;/sub&gt;（key）， 其中 i=1，2，…，k&lt;br/&gt;当散列值H&lt;sub&gt;i&lt;/sub&gt;=RH&lt;sub&gt;1&lt;/sub&gt;（key）发生冲突时，再计算H&lt;sub&gt;i&lt;/sub&gt;=RH&lt;sub&gt;2&lt;/sub&gt;（key）……，直到不冲突为止。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;二java中的散列实例&quot;&gt;二、Java中的散列实例&lt;/h2&gt;
&lt;p&gt;Java中的散列实例包括HashSet、HashMap、LinkedHashSet、LinkedHashMap以及HashTable等，其中，HashSet和LinkedHashSet是基于HashMap和LinkedHashMap封装实现的，HashTable相比于HashMap仅增加了对同步操作的支持，并且在Java 5以后建议使用ConcurrentHashMap代替HashTable（第三章会讲到ConcurrentHashMap），因此本节将重点对HashMap和LinkedHashMap的实现原理进行说明。&lt;/p&gt;
&lt;h3 id=&quot;hashmap实现原理&quot;&gt;2.1 HashMap实现原理&lt;/h3&gt;
&lt;h4 id=&quot;hashmap的散列函数&quot;&gt;2.1.1 HashMap的散列函数&lt;/h4&gt;
&lt;p&gt;《Effective Java》中指出：覆盖equals时必须覆盖hashCode，hashCode在基于散列的集合中有重要的作用，因为HashMap的hash方法需要根据Key对象的hashCode来计算散列值的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;static final int hash(Object key) {
    int h;
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上文提到，Java中采用除留余数法作为散列函数，假定n为数组的长度，则槽位的计算方法为hash % n。但计算hash值属于高频操作，而取余运算较为耗时，因此在Java中采用另外一种实现：(n - 1) &amp;amp; hash。使得hash % n 等于 (n - 1) &amp;amp; hash的前提是n = 2 &lt;sup&gt;m&lt;/sup&gt;（m 为任意正整数），HashMap中数组长度要求必须为2的m次幂，扩容时也是按照2的倍数进行扩展，初始长度为1 &amp;lt;&amp;lt; 4 == 2 &lt;sup&gt;4&lt;/sup&gt; == 16，最大值为 1 &amp;lt;&amp;lt; 30 == 2 &lt;sup&gt;30&lt;/sup&gt; == 1073741824。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;static final int DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4; // 初始值
static final int MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30; // 最大值&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面以Key='A'为例说明HashMap中散列的计算过程：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-0b3f27782eb2cb50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Key='A'的HashMap存储地址计算过程&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先，'A'作为字符串，String的hashcode方法如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public int hashCode() {
    int h = hash;
    if (h == 0 &amp;amp;&amp;amp; value.length &amp;gt; 0) {
        char val[] = value;
        for (int i = 0; i &amp;lt; value.length; i++) {
            h = 31 * h + val[i];
        }
        hash = h;
    }
    return h;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;String计算hashcode的算法是遍历String串中的每个字符，应用公式 h = 31 * h + val[i] （val[i]表示第i个字符的ASCII码值）进行计算。计算hashcode是一个比较耗时的操作，因此，String采用了闪存散列代码的方法，hashcode计算完成后会保存在hash域中，由于String是final类型的，所以再次调用时判断如果hash值不为0则直接返回保存的hash值。&lt;/p&gt;
&lt;p&gt;HashMap的hash方法将hashcode与hashcode&amp;gt;&amp;gt;&amp;gt;16进行异或，即将hashcode的高16位与低16位进行异或，然后与(n-1)进行位与操作得到该Key值在数组中的下标。在HashMap中，数组长度n始终为2的次方，比如初始长度16，n-1=15(0000 1111)，那么在计算数组下标时，实际上只有低四位是有用的，这可能会使得散列冲突加剧，所以HashMap的设计者在综合权衡速度、作用和质量的基础上，选择了将hashcode的高16位与低16位进行异或得到一个综合的信息。&lt;/p&gt;
&lt;h4 id=&quot;链表和红黑树在解决散列冲突时的应用&quot;&gt;2.1.2 链表和红黑树在解决散列冲突时的应用&lt;/h4&gt;
&lt;p&gt;在JDK1.8之前，Java仅采用链表解决散列冲突，因此，在最坏情况下，假定所有节点关键字的hash值都相等，则所有节点插入同一槽位，导致HashMap退化为该槽位的链表，查找节点的时间复杂度为O(n)。JDK1.8在解决散列冲突时引入了红黑树，在某槽位的链表长度超过限额之后，则将链表转换为红黑树。通过上一节的描述，我们知道红黑树能够保证最坏情况的操作时间复杂度为O(Log(n))，因此，使得HashMap在散列冲突时的性能有较大程度的提升。（下文中无特殊说明时，HashMap均表示JDK1.8中的实现）&lt;/p&gt;
&lt;p&gt;下面以HashMap插入和删除元素为例，说明链表和红黑树在解决散列冲突时的应用。HashMap中采用Node和TreeNode来分别表示链表和红黑树中存储的节点，其定义如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 链表节点
static class Node&amp;lt;K,V&amp;gt; implements Map.Entry&amp;lt;K,V&amp;gt; {
    final int hash;
    final K key;
    V value;
    Node&amp;lt;K,V&amp;gt; next;
}
// 红黑树节点
static final class TreeNode&amp;lt;K,V&amp;gt; extends LinkedHashMap.Entry&amp;lt;K,V&amp;gt; {
    TreeNode&amp;lt;K,V&amp;gt; parent;
    TreeNode&amp;lt;K,V&amp;gt; left;
    TreeNode&amp;lt;K,V&amp;gt; right;
    TreeNode&amp;lt;K,V&amp;gt; prev;
    boolean red;
}
// 将链表节点转换为红黑树节点
TreeNode&amp;lt;K,V&amp;gt; replacementTreeNode(Node&amp;lt;K,V&amp;gt; p, Node&amp;lt;K,V&amp;gt; next) {
    return new TreeNode&amp;lt;&amp;gt;(p.hash, p.key, p.value, next);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在HashMap中插入节点的流程，主要包括以下几步：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;根据数组是否为空（长度为0）确定是否初始化数组；&lt;/li&gt;
&lt;li&gt;根据hash值计算Node在数组中的下标，根据下标判断是否散列冲突，如果不冲突，则新建节点插入数组；&lt;/li&gt;
&lt;li&gt;如果冲突并且不是同一节点，通过链表存储新的节点；&lt;/li&gt;
&lt;li&gt;如果冲突导致链表过长，就把链表转换为红黑树；&lt;/li&gt;
&lt;li&gt;判断节点是否已经存在，如果存在就替换该节点对应的旧值，自增HashMap的修改数modCount；&lt;/li&gt;
&lt;li&gt;判断是否需要扩容（超过加载因子loadFactor * 数组容量），如果需要就调用resize方法扩容。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;用流程图表示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-17b7111992f1be13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620&quot; alt=&quot;HashMap插入节点流程&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看出，链表和红黑树的转换发生在插入节点导致链表过长时，下面是HashMap中putVal方法的部分实现。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Node&amp;lt;K,V&amp;gt; e; K k;
// 待插入节点已存在
if (p.hash == hash &amp;amp;&amp;amp; ((k = p.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
    e = p;
// 需要插入红黑树节点
else if (p instanceof TreeNode)
    e = ((TreeNode&amp;lt;K,V&amp;gt;)p).putTreeVal(this, tab, hash, key, value);
// 遍历链表插入节点
else {
    for (int binCount = 0; ; ++binCount) {
        // 当前节点的下一个节点为空
        if ((e = p.next) == null) {
            p.next = newNode(hash, key, value, null);
            // 判断是否需要将链表转化为红黑树
            if (binCount &amp;gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st
                treeifyBin(tab, hash);
            break;
        }
        // 待插入节点已存在
        if (e.hash == hash &amp;amp;&amp;amp; ((k = e.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
            break;
        p = e;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述代码中，p初始为tab[i = (n - 1) &amp;amp; hash]，即待插入节点对应槽位处链表的首节点，e表示已存在的待插入节点。首先判断待插入节点是否已存在，其次判断是否已经需要插入红黑树节点，最后遍历该链表，找到合适的插入位置，完成后判断链表长度，如果超过TREEIFY_THRESHOLD（8），则调用treeifyBin方法。在treeifyBin方法中，会判断HashMap数组长度，如果小于MIN_TREEIFY_CAPACITY（64），则先进行扩容。否则将Node链转换为TreeNode链，最后调用TreeNode的treeify方法生产红黑树。&lt;/p&gt;
&lt;p&gt;TreeNode继承自LinkedHashMap.Entry，而LinkedHashMap.Entry又继承自HashMap.Node，所以TreeNode具有Node的所有属性。TreeNode是HashMap的静态内部类，其内部定义一系列方法用于保证红黑树的性质，包括转换树（treeify）、左旋（rotateLeft）、右旋（rotateRight），删除后平衡（balanceDeletion）、插入后平衡（balanceInsertion）等。&lt;/p&gt;
&lt;p&gt;同样，在HashMap中删除元素也涉及到链表和红黑树的转换，HashMap的remove方法主要分为两步：1）找到待删除的节点；2）删除节点。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if ((tab = table) != null &amp;amp;&amp;amp; (n = tab.length) &amp;gt; 0 &amp;amp;&amp;amp;
    (p = tab[index = (n - 1) &amp;amp; hash]) != null) {
    Node&amp;lt;K,V&amp;gt; node = null, e; K k; V v;
    // 待删除节点为该槽位首节点
    if (p.hash == hash &amp;amp;&amp;amp;
        ((k = p.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
        node = p;
    // 继续查找该槽位所连接的链表
    else if ((e = p.next) != null) {
        // 待删除节点为红黑树节点，调用红黑树的遍历方法
        if (p instanceof TreeNode)
            node = ((TreeNode&amp;lt;K,V&amp;gt;)p).getTreeNode(hash, key);
        // 遍历链表，找到待删除节点
        else {
            do {
                if (e.hash == hash &amp;amp;&amp;amp;
                    ((k = e.key) == key ||
                     (key != null &amp;amp;&amp;amp; key.equals(k)))) {
                    node = e;
                    break;
                }
                p = e;
            } while ((e = e.next) != null);
        }
    }
    // 删除节点
    if (node != null &amp;amp;&amp;amp; (!matchValue || (v = node.value) == value ||
                         (value != null &amp;amp;&amp;amp; value.equals(v)))) {
        // 如果待删除节点为红黑树节点，则调用TreeNode的删除节点方法
        if (node instanceof TreeNode)
            ((TreeNode&amp;lt;K,V&amp;gt;)node).removeTreeNode(this, tab, movable);
        // 删除该槽位的首节点
        else if (node == p)
            tab[index] = node.next;
        // 删除链表中的节点
        else
            p.next = node.next;
        ++modCount;
        --size;
        afterNodeRemoval(node);
        return node;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;值得关注的是删除红黑树节点的removeTreeNode方法中，当红黑树规模较小时，则会调用untreeify方法将红黑树退化为链表，该过程与插入时链表转换为红黑树的过程刚好相反。&lt;/p&gt;
&lt;h4 id=&quot;扩容&quot;&gt;2.1.3 扩容&lt;/h4&gt;
&lt;p&gt;HashMap中有三个关键参数控制着扩容的时机，分别是threshold、loadFactor和size，其中，threshold = loadFactor * size。threshold表示当前HashMap所能容纳的节点的最大数量，超过threshold就会触发扩容；loadFactor为加载因子，初始值为0.75f；size表示HashMap存储节点的数组的容量，初始值为16。&lt;/p&gt;
&lt;p&gt;扩容的实现主要分为两步：1）根据新的容量初始化节点数组；2）将原数组中的元素重新散列至新数组。新容量总是在现有容量的两倍，因此HashMap的容量总等于2的幂（比如初始容量16扩容后为32）。同时，新的扩容上限也增加为现有上限的两倍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;根据新的容量初始化节点数组&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 初始引用oldTab、oldCap和oldThr
Node&amp;lt;K,V&amp;gt;[] oldTab = table;
int oldCap = (oldTab == null) ? 0 : oldTab.length;
int oldThr = threshold;
// 初始newCap、newThr
int newCap, newThr = 0;
// 原容量大于0情况的扩容
if (oldCap &amp;gt; 0) {
    // 超过HashMap的容量上限就不再继续扩容
    if (oldCap &amp;gt;= MAXIMUM_CAPACITY) {
        threshold = Integer.MAX_VALUE;
        return oldTab;
    }
    // 新容量为原容量的2倍，新的上线为原上线的2倍
    else if ((newCap = oldCap &amp;lt;&amp;lt; 1) &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp;
             oldCap &amp;gt;= DEFAULT_INITIAL_CAPACITY)
        newThr = oldThr &amp;lt;&amp;lt; 1;
}
else if (oldThr &amp;gt; 0)
    newCap = oldThr;
else {
    // 设置初始容量为16、初始限度为12
    newCap = DEFAULT_INITIAL_CAPACITY;
    newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
}
// 计算resize的上限
if (newThr == 0) {
    float ft = (float)newCap * loadFactor;
    newThr = (newCap &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp; ft &amp;lt; (float)MAXIMUM_CAPACITY ?
              (int)ft : Integer.MAX_VALUE);
}
threshold = newThr;
// 初始化新容量数组
@SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;})
    Node&amp;lt;K,V&amp;gt;[] newTab = (Node&amp;lt;K,V&amp;gt;[])new Node[newCap];
table = newTab;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;将原数组中的元素重新散列至新数组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HashMap计算插入节点槽位的方法为：(n - 1) &amp;amp; hash，由于HashMap的容量总是以2的倍数递增，所以，扩容后的容量相比于原容量在二进制表达上，只是最高位前面增加了一位，并且为1。举个例子，容量为16，n - 1为15（0000 1111），扩容后的容量为32，n - 1为31（0001 1111），0001 1111 相比于 0000 1111 只是多了最高位的 1。因此在于hash值做位与运算时，如果hash值该位为1，则新槽位 = 原槽位 + 原容量，否则槽位不变。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 遍历原数组中的所有槽位
for (int j = 0; j &amp;lt; oldCap; ++j) {
    Node&amp;lt;K,V&amp;gt; e;
    if ((e = oldTab[j]) != null) {
        // 原数组不再对节点持有引用
        oldTab[j] = null;
        // 若该节点不存在散列冲突，计算在新数组中的槽位，直接插入
        if (e.next == null)
            newTab[e.hash &amp;amp; (newCap - 1)] = e;
        // 插入红黑树节点
        else if (e instanceof TreeNode)
            ((TreeNode&amp;lt;K,V&amp;gt;)e).split(this, newTab, j, oldCap);
        // 按照原顺序插入链表节点
        else { 
            Node&amp;lt;K,V&amp;gt; loHead = null, loTail = null;
            Node&amp;lt;K,V&amp;gt; hiHead = null, hiTail = null;
            Node&amp;lt;K,V&amp;gt; next;
            do {
                next = e.next;
                // 保持原槽位
                if ((e.hash &amp;amp; oldCap) == 0) {
                    if (loTail == null)
                        loHead = e;
                    else
                        loTail.next = e;
                    loTail = e;
                }
                // 原槽位+原容量
                else {
                    if (hiTail == null)
                        hiHead = e;
                    else
                        hiTail.next = e;
                    hiTail = e;
                }
            } while ((e = next) != null);
            // 原槽位插入新数组中
            if (loTail != null) {
                loTail.next = null;
                newTab[j] = loHead;
            }
            // 原槽位+原容量插入新数组中
            if (hiTail != null) {
                hiTail.next = null;
                newTab[j + oldCap] = hiHead;
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;linkedhashmap实现原理&quot;&gt;2.2 LinkedHashMap实现原理&lt;/h3&gt;
&lt;p&gt;在上节已经讲过，LinkedHashMap支持按照插入顺序对节点排序。实际上，LinkedHashMap还支持按照访问顺序排序。排序方式是由accessOrder字段决定的，如果accessOrder为true，则按照访问顺序排序，否则按照插入顺序排序。LinkedHashMap按照访问顺序排序的特征为很多算法实现提供了支持，比如Android中的LruCache（缓存策略为最近最少使用最先删除）就是基于LinkedHashMap的访问顺序实现的，其构造方法如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public LruCache(int maxSize) {
    if (maxSize &amp;lt;= 0) {
        throw new IllegalArgumentException(&quot;maxSize &amp;lt;= 0&quot;);
    }
    this.maxSize = maxSize;
    // accessOrder字段为true，表示按照访问顺序排序，实现最近最少访问最先删除
    this.map = new LinkedHashMap&amp;lt;K, V&amp;gt;(0, 0.75f, true);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因此，在探讨LinkedHashMap的实现原理时，将重点关注LinkedHashMap是如何实现插入顺序和访问顺序的？支持LinkedHashMap保持顺序的基础在于其节点Entry类自包含了before和after域，分别指向当前节点的前节点和后节点，这类似于LinkedList实现双向链表的方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;static class Entry&amp;lt;K,V&amp;gt; extends HashMap.Node&amp;lt;K,V&amp;gt; {
    Entry&amp;lt;K,V&amp;gt; before, after;
    Entry(int hash, K key, V value, Node&amp;lt;K,V&amp;gt; next) {
        super(hash, key, value, next);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Entry继承自HashMap.Node，因此具有HashMap节点类的所有特性。比如，LinkedHashMap插入节点是通过调用HashMap的put方法实现的。而put方法又调用了newNode和afterNodeInsertion等方法，而这些方法正好是HashMap预留给LinkedHashMap用来保持顺序的方法，主要包括节点的初始化等、插入节点后的调整等。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 新建节点
Node&amp;lt;K,V&amp;gt; newNode(int hash, K key, V value, Node&amp;lt;K,V&amp;gt; next) {
    return new Node&amp;lt;&amp;gt;(hash, key, value, next);
}
// 用链表节点替代红黑树节点
Node&amp;lt;K,V&amp;gt; replacementNode(Node&amp;lt;K,V&amp;gt; p, Node&amp;lt;K,V&amp;gt; next) {
    return new Node&amp;lt;&amp;gt;(p.hash, p.key, p.value, next);
}
// 创建红黑树节点
TreeNode&amp;lt;K,V&amp;gt; newTreeNode(int hash, K key, V value, Node&amp;lt;K,V&amp;gt; next) {
    return new TreeNode&amp;lt;&amp;gt;(hash, key, value, next);
}
// 用红黑树节点替代链表节点
TreeNode&amp;lt;K,V&amp;gt; replacementTreeNode(Node&amp;lt;K,V&amp;gt; p, Node&amp;lt;K,V&amp;gt; next) {
    return new TreeNode&amp;lt;&amp;gt;(p.hash, p.key, p.value, next);
}
// 重新初始化
void reinitialize() {
    // ……
}
// 节点操作后的调整
void afterNodeAccess(Node&amp;lt;K,V&amp;gt; p) { }
void afterNodeInsertion(boolean evict) { }
void afterNodeRemoval(Node&amp;lt;K,V&amp;gt; p) { }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;LinkedHashMap初始化节点是通过重写HashMap的newNode方法实现的，首先创建LinkedHashMap.Entry节点对象，其次将该节点对象链接到LinkedHashMap当前尾节点的后面（after域），成为新的尾节点。通过节点之间的链接来保证插入节点的有序性。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// LinkedHashMap的新建节点实现
Node&amp;lt;K,V&amp;gt; newNode(int hash, K key, V value, Node&amp;lt;K,V&amp;gt; e) {
    LinkedHashMap.Entry&amp;lt;K,V&amp;gt; p =
        new LinkedHashMap.Entry&amp;lt;K,V&amp;gt;(hash, key, value, e);
    // 将当前节点链接到尾节点的后面
    linkNodeLast(p);
    return p;
}
// 链接到尾节点的后面
private void linkNodeLast(LinkedHashMap.Entry&amp;lt;K,V&amp;gt; p) {
    LinkedHashMap.Entry&amp;lt;K,V&amp;gt; last = tail;
    tail = p;
    if (last == null)
        head = p;
    else {
        p.before = last;
        last.after = p;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要注意的是，&lt;strong&gt;LinkedHashMap并未改变节点存储的顺序&lt;/strong&gt;，换句话说，在HashMap存储节点的数组Node&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// LinkedHashMap的LinkedHashIterator实现
final LinkedHashMap.Entry&amp;lt;K,V&amp;gt; nextNode() {
    LinkedHashMap.Entry&amp;lt;K,V&amp;gt; e = next;
    if (modCount != expectedModCount)
        throw new ConcurrentModificationException();
    if (e == null)
        throw new NoSuchElementException();
    current = e;
    // next指向当前节点的after节点
    next = e.after;
    return e;
}
// HashMap的HashIterator实现
final Node&amp;lt;K,V&amp;gt; nextNode() {
    Node&amp;lt;K,V&amp;gt;[] t;
    Node&amp;lt;K,V&amp;gt; e = next;
    if (modCount != expectedModCount)
        throw new ConcurrentModificationException();
    if (e == null)
        throw new NoSuchElementException();
    // next指向当前槽位的下一个节点或者下一个槽位的首节点
    if ((next = (current = e).next) == null &amp;amp;&amp;amp; (t = table) != null) {
        do {} while (index &amp;lt; t.length &amp;amp;&amp;amp; (next = t[index++]) == null);
    }
    return e;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看出，LinkedHashMap的顺序是在迭代器层面实现的。那LinkedHashMap的访问顺序又是如何实现的呢？也是通过迭代器吗？LinkedHashMap在插入、查找以及替换元素之后都会调用afterNodeAccess方法进行重排序，下面来看下afterNodeAccess的实现。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 将指定节点移至尾部
void afterNodeAccess(Node&amp;lt;K,V&amp;gt; e) {
    LinkedHashMap.Entry&amp;lt;K,V&amp;gt; last;
    if (accessOrder &amp;amp;&amp;amp; (last = tail) != e) {
        LinkedHashMap.Entry&amp;lt;K,V&amp;gt; p =
            (LinkedHashMap.Entry&amp;lt;K,V&amp;gt;)e, b = p.before, a = p.after;
        // 尾节点的after节点为null
        p.after = null;
        // 指定节点为首节点，则将其after节点置为首节点
        if (b == null)
            head = a;
        // 否则将before节点的after节点置为指定节点的after节点
        else
            b.after = a;
        // 如果指定节点的after节点不为空，则将其before节点置为指定节点的before节点
        if (a != null)
            a.before = b;
        // 否则将其before节点置为last节点
        else
            last = b;
        // 如果last节点为null，则指定节点为头结点
        if (last == null)
            head = p;
        // 否则将指定节点绑定到尾节点
        else {
            p.before = last;
            last.after = p;
        }
        tail = p;
        ++modCount;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;afterNodeAccess方法实现的核心功能是将指定节点移动到LinkedHashMap当前节点链的尾部，整个过程如下示意图所示。&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-cd41313700cd096a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;在28节点上调用afterNodeAccess方法的过程&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由此可知，在访问元素后，总会将该元素移动到LinkedHashMap当前节点链的尾部，而tail尾节点也就是最年轻（youngest）的节点，head是最老（eldest）的节点，从而实现了访问顺序的排序。回到本节开始提到的Android中LruCache基于LinkedHashMap的实现最近最少访问最先删除算法的问题。LruCache指定了缓存的最大值maxSize，缓存元素超过maxSize后会触发删除eldest节点，Android中的LinkedHashMap实现新增了eldest方法，返回的正好就是节点链的头节点header（eldest），即最近最少访问的节点。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public Entry&amp;lt;K, V&amp;gt; eldest() {
    LinkedEntry&amp;lt;K, V&amp;gt; eldest = header.nxt;
    return eldest != header ? eldest : null;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，我们分析了HashMap和LinkedHashMap的实现原理，相比于之前版本的实现，JDK 1.8中最坏情况下查找的时间复杂度已经由O(n)变为O(lgn)，大大提高了性能。但在某些需要严格确保性能的场合，比如路由表实现，需要保证最坏情况下的时间复杂度仍为O(1)，那么就需要重新设计散列算法，而不能使用标准Java库中的链地址法来解决散列冲突了。&lt;/p&gt;
</description>
<pubDate>Mon, 22 Jan 2018 22:50:00 +0000</pubDate>
<dc:creator>yhthu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/younghao/p/8333795.html</dc:identifier>
</item>
<item>
<title>Effective Java 第三版——24. 优先考虑静态成员类 - 林本托</title>
<link>http://www.cnblogs.com/IcanFixIt/p/8333777.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/IcanFixIt/p/8333777.html</guid>
<description>&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Tips&lt;br/&gt;《Effective Java, Third Edition》一书英文版已经出版，这本书的第二版想必很多人都读过，号称Java四大名著之一，不过第二版2009年出版，到现在已经将近8年的时间，但随着Java 6，7，8，甚至9的发布，Java语言发生了深刻的变化。&lt;br/&gt;在这里第一时间翻译成中文版。供大家学习分享之用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4366140-ca5216df5c1029f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Effective Java, Third Edition&quot;/&gt;&lt;/p&gt;
&lt;p&gt;嵌套类（nested class）是在另一个类中定义的类。 嵌套类应该只存在于其宿主类（enclosing class）中。 如果一个嵌套类在其他一些情况下是有用的，那么它应该是一个顶级类。 有四种嵌套类：静态成员类，非静态成员类，匿名类和局部类。 除了第一种以外，剩下的三种都被称为内部类（inner class）。 这个条目告诉你什么时候使用哪种类型的嵌套类以及为什么使用。&lt;/p&gt;
&lt;p&gt;静态成员类是最简单的嵌套类。 最好把它看作是一个普通的类，恰好在另一个类中声明，并且可以访问所有宿主类的成员，甚至是那些被声明为私有类的成员。 静态成员类是其宿主类的静态成员，并遵循与其他静态成员相同的可访问性规则。 如果它被声明为private，则只能在宿主类中访问，等等。&lt;/p&gt;
&lt;p&gt;静态成员类的一个常见用途是作为公共帮助类，仅在与其外部类一起使用时才有用。 例如，考虑一个描述计算器支持的操作的枚举类型（条目 34）。 &lt;code&gt;Operation&lt;/code&gt;枚举应该是&lt;code&gt;Calculator&lt;/code&gt;类的公共静态成员类。 &lt;code&gt;Calculator&lt;/code&gt;客户端可以使用&lt;code&gt;Calculator.Operation.PLUS&lt;/code&gt;和&lt;code&gt;Calculator.Operation.MINUS&lt;/code&gt;等名称来引用操作。&lt;/p&gt;
&lt;p&gt;在语法上，静态成员类和非静态成员类之间的唯一区别是静态成员类在其声明中具有static修饰符。 尽管句法相似，但这两种嵌套类是非常不同的。 非静态成员类的每个实例都隐含地与其包含的类的宿主实例相关联。 在非静态成员类的实例方法中，可以调用宿主实例上的方法，或者使用限定的构造[JLS，15.8.4]获得对宿主实例的引用。 如果嵌套类的实例可以与其宿主类的实例隔离存在，那么嵌套类必须是静态成员类：不可能在没有宿主实例的情况下创建非静态成员类的实例。&lt;/p&gt;
&lt;p&gt;非静态成员类实例和其宿主实例之间的关联是在创建成员类实例时建立的，并且之后不能被修改。 通常情况下，通过在宿主类的实例方法中调用非静态成员类构造方法来自动建立关联。 尽管很少有可能使用表达式&lt;code&gt;enclosingInstance.new MemberClass(args)&lt;/code&gt;手动建立关联。 正如你所预料的那样，该关联在非静态成员类实例中占用了空间，并为其构建添加了时间开销。&lt;/p&gt;
&lt;p&gt;非静态成员类的一个常见用法是定义一个Adapter [Gamma95]，它允许将外部类的实例视为某个不相关类的实例。 例如，Map接口的实现通常使用非静态成员类来实现它们的集合视图，这些视图由Map的&lt;code&gt;keySet&lt;/code&gt;，&lt;code&gt;entrySet&lt;/code&gt;和&lt;code&gt;values&lt;/code&gt;方法返回。 同样，集合接口（如Set和List）的实现通常使用非静态成员类来实现它们的迭代器：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Typical use of a nonstatic member class
public class MySet&amp;lt;E&amp;gt; extends AbstractSet&amp;lt;E&amp;gt; {
    ... // Bulk of the class omitted

    @Override public Iterator&amp;lt;E&amp;gt; iterator() {
        return new MyIterator();
    }

    private class MyIterator implements Iterator&amp;lt;E&amp;gt; {
        ...
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;如果你声明了一个不需要访问宿主实例的成员类，总是把static修饰符放在它的声明中，使它成为一个静态成员类，而不是非静态的成员类&lt;/strong&gt;。 如果你忽略了这个修饰符，每个实例都会有一个隐藏的外部引用给它的宿主实例。 如前所述，存储这个引用需要占用时间和空间。 更严重的是，并且会导致即使宿主类在满足垃圾回收的条件时却仍然驻留在内存中（条目 7）。 由此产生的内存泄漏可能是灾难性的。 由于引用是不可见的，所以通常难以检测到。&lt;/p&gt;
&lt;p&gt;私有静态成员类的常见用法是表示由它们的宿主类表示的对象的组件。 例如，考虑将键与值相关联的Map实例。 许多Map实现对于映射中的每个键值对都有一个内部的&lt;code&gt;Entr&lt;/code&gt;y对象。 当每个&lt;code&gt;entry&lt;/code&gt;都与Map关联时，&lt;code&gt;entry&lt;/code&gt;上的方法(&lt;code&gt;getKey&lt;/code&gt;，&lt;code&gt;getValue&lt;/code&gt;和&lt;code&gt;setValue&lt;/code&gt;)不需要访问Map。 因此，使用非静态成员类来表示entry将是浪费的：私有静态成员类是最好的。 如果意外地忽略了&lt;code&gt;entry&lt;/code&gt;声明中的static修饰符，Map仍然可以工作，但是每个entry都会包含对Map的引用，浪费空间和时间。&lt;/p&gt;
&lt;p&gt;如果所讨论的类是导出类的公共或受保护成员，则在静态和非静态成员类之间正确选择是非常重要的。 在这种情况下，成员类是导出的API元素，如果不违反向后兼容性，就不能在后续版本中从非静态变为静态成员类。&lt;/p&gt;
&lt;p&gt;正如你所期望的，一个匿名类没有名字。 它不是其宿主类的成员。 它不是与其他成员一起声明，而是在使用时同时声明和实例化。 在表达式合法的代码中，匿名类是允许的。 当且仅当它们出现在非静态上下文中时，匿名类才会封装实例。 但是，即使它们出现在静态上下文中，它们也不能有除常量型变量之外的任何静态成员，这些常量型变量包括final的基本类型，或者初始化常量表达式的字符串属性[JLS，4.12.4]。&lt;/p&gt;
&lt;p&gt;匿名类的适用性有很多限制。 除了在声明的时候之外，不能实例化它们。 你不能执行&lt;code&gt;instanceof&lt;/code&gt;方法测试或者做任何其他需要你命名的类。 不能声明一个匿名类来实现多个接口，或者继承一个类并同时实现一个接口。 匿名类的客户端不能调用除父类型继承的成员以外的任何成员。 因为匿名类在表达式中出现，所以它们必须保持短——约十行或更少——否则可读性将受损。&lt;/p&gt;
&lt;p&gt;在将lambda表达式添加到Java（第6章）之前，匿名类是创建小方法对象和处理对象的首选方法，但lambda表达式现在是首选（条目 42）。 匿名类的另一个常见用途是实现静态工厂方法（请参阅条目 20中的intArrayAsList）。&lt;/p&gt;
&lt;p&gt;局部类是四种嵌套类中使用最少的。 一个局部类可以在任何可以声明局部变量的地方声明，并遵守相同的作用域规则。 局部类与其他类型的嵌套类具有共同的属性。 像成员类一样，他们有名字，可以重复使用。 就像匿名类一样，只有在非静态上下文中定义它们时，它们才会包含实例，并且它们不能包含静态成员。 像匿名类一样，应该保持简短，以免损害可读性。&lt;/p&gt;
&lt;p&gt;回顾一下，有四种不同的嵌套类，每个都有它的用途。 如果一个嵌套的类需要在一个方法之外可见，或者太长而不能很好地适应一个方法，使用一个成员类。 如果一个成员类的每个实例都需要一个对其宿主实例的引用，使其成为非静态的; 否则，使其静态。 假设这个类属于一个方法内部，如果你只需要从一个地方创建实例，并且存在一个预置类型来说明这个类的特征，那么把它作为一个匿名类; 否则，把它变成局部类。&lt;/p&gt;
</description>
<pubDate>Mon, 22 Jan 2018 20:51:00 +0000</pubDate>
<dc:creator>林本托</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/IcanFixIt/p/8333777.html</dc:identifier>
</item>
<item>
<title>简单工厂、工厂方法和抽象工厂的总结 - thinkam</title>
<link>http://www.cnblogs.com/thinkam/p/8331824.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/thinkam/p/8331824.html</guid>
<description>&lt;p&gt;首先，放上项目github地址: &lt;a href=&quot;https://github.com/codethereforam/java-design-patterns&quot; class=&quot;uri&quot;&gt;https://github.com/codethereforam/java-design-patterns&lt;/a&gt;, 我是用java实现的&lt;/p&gt;
&lt;h2 id=&quot;一前言&quot;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;题目中的这三个设计模式属于&lt;code&gt;创建型模式&lt;/code&gt;，作用是为了&lt;strong&gt;抽象实例化过程&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我之前学过这三个设计模式，但最近发现又无法厘清这三个的区别了，为了避免下次又忘了，于是想动手记录下来。&lt;/p&gt;
&lt;p&gt;可能有同学有疑问，提前说一下，下面所展示的&lt;code&gt;类图&lt;/code&gt;由&lt;code&gt;IDEA&lt;/code&gt;自带插件&lt;code&gt;UML Support&lt;/code&gt;自动生成，而&lt;code&gt;时序图&lt;/code&gt;由插件&lt;a href=&quot;https://github.com/Vanco/SequencePlugin&quot;&gt;&lt;code&gt;SequencePlugin&lt;/code&gt;&lt;/a&gt;自动生成。如果有同学对类图和时序图还不了解，请先google自学一下。&lt;/p&gt;
&lt;p&gt;下面我结合模拟场景总结一下这三个模式，具体代码请点击本文开头的github链接。&lt;/p&gt;
&lt;h2 id=&quot;二简单工厂&quot;&gt;二、简单工厂&lt;/h2&gt;
&lt;p&gt;模拟场景：一个用户管理系统，假设只有一张User表。本来用的mysql，但需求突然发生变化，现在要用Oralce，由于这两个数据库的SQL语句有些差别，需要重写数据库层面的代码，现在要求系统可以灵活切换数据库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1156638/201801/1156638-20180123003843694-1907327469.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1156638/201801/1156638-20180123003902365-1814442406.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关键代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; UserDAOFactory {
    &lt;span class=&quot;co&quot;&gt;//静态工厂方法&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; UserDAO &lt;span class=&quot;fu&quot;&gt;createUserDAO&lt;/span&gt;(String database) {
        UserDAO userDAO = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;switch&lt;/span&gt; (database) {
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;mysql&quot;&lt;/span&gt;:
                userDAO = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UserDAOMysqlImpl&lt;/span&gt;();
                &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;oracle&quot;&lt;/span&gt;:
                userDAO = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UserDAOOracleImpl&lt;/span&gt;();
                &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt;:
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; userDAO;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分析：如果现在要改用&lt;code&gt;SQL server&lt;/code&gt;数据库，需要添加一个&lt;code&gt;UserDAOSqlserverImpl&lt;/code&gt;，然后在&lt;br/&gt;&lt;code&gt;UserDAOFactory&lt;/code&gt;类的&lt;code&gt;createUserDAO&lt;/code&gt;方法中添加一个case，这显然违背了&lt;code&gt;开闭原则&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;特点
&lt;ul&gt;&lt;li&gt;工厂类包含必要的逻辑判断来选择生产具体产品&lt;/li&gt;
&lt;li&gt;用于生产单个产品&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;优点
&lt;ul&gt;&lt;li&gt;去除客户端与具体产品的依赖&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;&lt;li&gt;添加产品需要修改工厂类，违背开闭原则&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;角色
&lt;ul&gt;&lt;li&gt;抽象产品(UserDAO)&lt;/li&gt;
&lt;li&gt;具体产品(UserDAOMysqlImpl &amp;amp; UserDAOOracleImpl)&lt;/li&gt;
&lt;li&gt;工厂(UserDAOFactory)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;三工厂方法&quot;&gt;三、工厂方法&lt;/h2&gt;
&lt;p&gt;模拟场景：和上述简单工厂模拟场景一样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1156638/201801/1156638-20180123003933287-544978578.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1156638/201801/1156638-20180123003941365-376848030.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;分析：如果现在要改用&lt;code&gt;SQL server&lt;/code&gt;数据库，则需添加一个&lt;code&gt;UserDAOSqlserverImpl&lt;/code&gt;和相应的工厂&lt;code&gt;UserDAOFactorySqlserverImpl&lt;/code&gt;，再更改Main中的实例化代码，这满足了&lt;code&gt;开闭原则&lt;/code&gt;，扩展很方便。但如果支持的数据库一多，那工厂就会泛滥。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;特点
&lt;ul&gt;&lt;li&gt;一个产品对应一个工厂类&lt;/li&gt;
&lt;li&gt;用于生产某种类型产品&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;优点
&lt;ul&gt;&lt;li&gt;方便添加新产品&lt;/li&gt;
&lt;li&gt;添加新产品只需添加相应工厂类，符合开闭原则&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;&lt;li&gt;产品多时，工厂泛滥&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;角色
&lt;ul&gt;&lt;li&gt;抽象产品(UserDAO)&lt;/li&gt;
&lt;li&gt;具体产品(UserDAOMysqlImpl &amp;amp; UserDAOOracleImpl)&lt;/li&gt;
&lt;li&gt;抽象工厂(UserDAOFactory)&lt;/li&gt;
&lt;li&gt;具体工厂(UserDAOFactoryMysqlImpl &amp;amp; UserDAOFactoryOracleImpl)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;四抽象工厂&quot;&gt;四、抽象工厂&lt;/h2&gt;
&lt;p&gt;模拟场景：在之前的场景基础上，如果系统本来还有一个日志表，是用来记录日志的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1156638/201801/1156638-20180123003959053-1407962263.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1156638/201801/1156638-20180123004006725-184829273.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;分析：如果现在要改用&lt;code&gt;SQL server&lt;/code&gt;数据库，则需添加&lt;code&gt;UserDAOSqlserverImpl&lt;/code&gt;、&lt;code&gt;LogDAOSqlserverImpl&lt;/code&gt;和&lt;code&gt;DAOFactorySqlserverImpl&lt;/code&gt;，再更改Main中的实例化代码。但如果现在要添加一个其他的表，那么就要改&lt;code&gt;DAOFactory&lt;/code&gt;接口和接口中方法的实现，要改动的地方太多。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;特点
&lt;ul&gt;&lt;li&gt;用于生产一系列产品&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;优点
&lt;ul&gt;&lt;li&gt;易于改变工厂生产行为，产生新的产品系列&lt;/li&gt;
&lt;li&gt;具体创建过程与客户端分离，客户端通过接口操纵实例（factory1.createUserDAO().add()）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;&lt;li&gt;添加新产品，要修改抽象工厂接口、具体工厂，改动太多&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;角色
&lt;ul&gt;&lt;li&gt;抽象产品(UserDAO &amp;amp; LogDAO)&lt;/li&gt;
&lt;li&gt;具体产品(UserDAOMysqlImpl &amp;amp; UserDAOOracleImpl &amp;amp; LogDAOMysqlImpl &amp;amp; LogDAOOracleImpl)&lt;/li&gt;
&lt;li&gt;抽象工厂(DAOFactory)&lt;/li&gt;
&lt;li&gt;具体工厂(DAOFactoryMysqlImpl &amp;amp; DAOFactoryOracleImpl)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;五用简单工厂改进抽象工厂&quot;&gt;五、用简单工厂改进抽象工厂&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1156638/201801/1156638-20180123004019990-1814388670.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1156638/201801/1156638-20180123004026772-1819463285.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关键代码（选取&lt;code&gt;DataAccess&lt;/code&gt;）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; UserDAO &lt;span class=&quot;fu&quot;&gt;createUserDAO&lt;/span&gt;() {
        UserDAO userDAO = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;switch&lt;/span&gt; (database) {
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; MYSQL:
                userDAO = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UserDAOMysqlImpl&lt;/span&gt;();
                &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; ORACLE:
                userDAO = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UserDAOOracleImpl&lt;/span&gt;();
                &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt;:
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; userDAO;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;特点
&lt;ul&gt;&lt;li&gt;用DataAccess取代抽象工厂和具体工厂&lt;/li&gt;
&lt;li&gt;DataAccess通过判断控制生产行为&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;优点
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;&lt;li&gt;添加新产品系列，要改动DataAccess中的switch-case&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;六用反射改进抽象工厂&quot;&gt;六、用反射改进抽象工厂&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1156638/201801/1156638-20180123004039506-577851065.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1156638/201801/1156638-20180123004047787-492788761.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关键代码（选取&lt;code&gt;DataAccess&lt;/code&gt;）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String PACKAGE_NAME = DataAccess.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getPackage&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; UserDAO &lt;span class=&quot;fu&quot;&gt;createUserDAO&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; ClassNotFoundException, IllegalAccessException, InstantiationException {
        String className = PACKAGE_NAME + &lt;span class=&quot;st&quot;&gt;&quot;.UserDAO&quot;&lt;/span&gt; + database + &lt;span class=&quot;st&quot;&gt;&quot;Impl&quot;&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (UserDAO) Class.&lt;span class=&quot;fu&quot;&gt;forName&lt;/span&gt;(className).&lt;span class=&quot;fu&quot;&gt;newInstance&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;优点
&lt;ul&gt;&lt;li&gt;减少类&lt;/li&gt;
&lt;li&gt;解决抽象工厂添加产品改动较多的问题，方便扩展&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;可使用配置文件继续完善&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;七总结&quot;&gt;七、总结&lt;/h2&gt;
&lt;p&gt;如果你仔细看到这，你可能会觉得我例子举的不恰当，哪里有系统只有一个表的呢，前面的场景直接考虑抽象工厂就行了。我承认我举的例子有问题，之前写代码时没有发现，应该是当时理解的还不够深入。&lt;/p&gt;
&lt;p&gt;简单工厂和工厂方法的模拟场景应该改为：系统本来有一直表，但现在要添加表，而不是换数据库。而抽象工厂的模拟场景应该改为：在上述的基础上要换数据库。如果你理解了三个模式，我想这两个模拟场景你应该也知道怎么实现了。&lt;/p&gt;
&lt;p&gt;本文的例子我参考了&lt;code&gt;大话设计模式&lt;/code&gt;，但其他代码和文字是我自己的理解。如果有错误，望各位不吝赐教，在评论区指出。&lt;/p&gt;
&lt;h2 id=&quot;八参考资料&quot;&gt;八、参考资料&lt;/h2&gt;
</description>
<pubDate>Mon, 22 Jan 2018 17:14:00 +0000</pubDate>
<dc:creator>thinkam</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/thinkam/p/8331824.html</dc:identifier>
</item>
<item>
<title>Coins、Tokens、山寨币：区别在哪里 - JoiT</title>
<link>http://www.cnblogs.com/JoiT/p/8331923.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JoiT/p/8331923.html</guid>
<description>&lt;blockquote readability=&quot;7.7136038186158&quot;&gt;
&lt;p&gt;coin：指“正宗的“数字货币，比如比特币&lt;br/&gt;tokens：比如用 Ethereum 智能合约来发布的代币&lt;br/&gt;altcoin：山寨币&lt;br/&gt;currency：货币&lt;br/&gt;crypto：密码&lt;br/&gt;variant：变种&lt;br/&gt;fork：分叉&lt;br/&gt;software fork：软分叉&lt;br/&gt;hard fork：硬分叉&lt;br/&gt;smart contract：智能合约&lt;br/&gt;&lt;a href=&quot;https://masterthecrypto.com/&quot;&gt;masterthecrypto&lt;/a&gt; 这个网站值得推荐，它的宗旨是：A knowledge &amp;amp; resource center for all things blockchain &amp;amp; cryptocurrency related!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;单击此处查看原文&quot;&gt;&lt;a href=&quot;https://masterthecrypto.com/differences-between-cryptocurrency-coins-and-tokens/&quot;&gt;单击此处查看原文&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://masterthecrypto.com/&quot;&gt;Home&lt;/a&gt; » &lt;a href=&quot;https://masterthecrypto.com/category/bitcoin/&quot;&gt;Bitcoin&lt;/a&gt; » &lt;a href=&quot;https://masterthecrypto.com/differences-between-cryptocurrency-coins-and-tokens/&quot;&gt;Coins, Tokens &amp;amp; Altcoins: What’s the Difference?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文探讨了 cryptocurrency coins 、tokens 的细微差别，以及为什么说 cryptocurrency 是一个误称。&lt;/p&gt;
&lt;p&gt;cryptocurrencies 非常搞脑子，尤其是它的底层技术——Blockchain——充斥着非常技术性的计算语言和术语，这对于很多对密码空间有兴趣的人来说是一个巨大的阻碍。别灰心！我们将带领你去理解最关键的 cryptocurrency 概念，那真是棒极了！（扩展阅读：&lt;a href=&quot;https://masterthecrypto.com/common-crypto-terms/&quot;&gt;Guide to Common Crypto Terms&lt;/a&gt;，这个扩展阅读还没翻译，之后翻译了也会放出来）&lt;/p&gt;
&lt;h2 id=&quot;什么是-cryptocurrencies&quot;&gt;什么是 Cryptocurrencies&lt;/h2&gt;
&lt;p&gt;我们从理解 cryptocurrencies 的定义开始。Cryptocurrencies 是一种使用密码学加密的数字或者虚拟化的货币，密码学指的是利用加密技术来确保和验证交易转移。&lt;a href=&quot;https://masterthecrypto.com/bitcoins-civil-war-how-and-why/&quot;&gt;Bitcoin&lt;/a&gt; 代表了首个去中心化加密货币，通过一个公开的分类账本按照时间顺序记录和验证所有的交易，名叫：Blockchain 。（扩展阅读：&lt;a href=&quot;https://masterthecrypto.com/upcoming-bitcoin-hardforks-bitcoin-gold-segwit2x/&quot;&gt;Upcoming Bitcoin Hardforks You Should Know: Bitcoin Gold &amp;amp; Segwit2X)&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;虽然在比特币之前就有很多 cryptocurrencies 已经存在了，但由于其分布式和去中心化的特性，它的创造标志着数字货币领域的一个重要里程碑。比特币的创造促成了多种多样的 coins 和 tokens 生态发展得欣欣向荣，它们通常都被视为 cryptocurrencies ，尽管其中大多数并不属于 currency 。（扩展阅读：&lt;a href=&quot;https://masterthecrypto.com/invest-in-cryptocurrencies/&quot;&gt;4 Reasons Why Now is the Best Time for You to Invest in Cryptocurrencies)&lt;/a&gt;）&lt;/p&gt;
&lt;h2 id=&quot;coins-vs-tokens-cryptocurrencies-的种类&quot;&gt;Coins vs Tokens: Cryptocurrencies 的种类&lt;/h2&gt;
&lt;p&gt;值得注意的是 coins 和 tokens 都是作为 cryptocurrencies ，即使大部分的 coins 都起不了货币的作用或者作为交换的媒介。cryptocurrency 是一个误称因为一种货币代表了计量单位、价值存储和交换媒介，所有这一切都是 bitcoin 固有的，并且 cryptocurrency 空间由于比特币的创建而被带动，比特币之后被构想出来的 coins 通常都被称为 cryptocurrency ，虽然大多数都不符合上述的实际货币的特征。&lt;/p&gt;
&lt;p&gt;常见的 cryptocurrencies 分类：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Alternative Cryptocurrency Coins (Altcoins)&lt;/li&gt;
&lt;li&gt;Tokens&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/729622/201801/729622-20180123010737537-964532542.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;altcoins&quot;&gt;Altcoins&lt;/h2&gt;
&lt;p&gt;Alternative cryptocurrency coins 也被称为 altcoins 或者 coins ，经常交替使用。 Altcoins 仅仅是指山寨比特币的 coins ，大多数的 altcoins 是比特币的一个 variant（翻译为变种，此处也可以使用另一个我们更加熟悉的词：fork），修改了比特币开源代码和原协议的底层实现，因此设计出具有不同特性的全新货币。关于分叉，详见 &lt;a href=&quot;https://masterthecrypto.com/guide-to-forks-hard-fork-soft-fork/&quot;&gt;Guide to Forks: Everything You Need to Know About Forks, Hard Fork and Soft Fork.&lt;/a&gt; 。来自比特币源代码 variant 的 altcoins 有： Namecoin, Peercoin, Litecoin, Dogecoin and Auroracoin 。(扩展阅读：&lt;a href=&quot;https://masterthecrypto.com/bitcoins-civil-war-how-and-why/&quot;&gt;Bitcoin’s Civil War: How and Why?&lt;/a&gt; )&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;有趣的事实：当底层编程协议发生变化就会产生软分叉，导致原始区块链分叉或者分裂，通常就导致了新货币的诞生。分叉可以分为：hard fork， soft fork ， accidental fork 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也有一些 altcoins 并非源于 bitcoin 的开源协议，他们创造了自己的 blockchain 并且支持了他们的原生货币，比如： &lt;a href=&quot;https://masterthecrypto.com/difference-between-ethereum-and-ethereum-classic/&quot;&gt;Ethereum&lt;/a&gt;, Ripple, Omni, Nxt, Waves and Counterparty.&lt;/p&gt;
&lt;p&gt;Altcoins 的一个共性是：&lt;strong&gt;拥有自己的独立 blockchain&lt;/strong&gt; ，支撑着他们自己的原生货币交易。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;有趣的事实：第一个 altcoin 是 Namecoin ，2011年4月诞生。是一个开源的去中心化信息注册、转移（交易）的系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（扩展阅读：&lt;a href=&quot;https://masterthecrypto.com/identifying-scam-coins/&quot;&gt;Guide on Identifying Scam Coins&lt;/a&gt; ）&lt;/p&gt;
&lt;h2 id=&quot;tokens&quot;&gt;Tokens&lt;/h2&gt;
&lt;p&gt;Token 代表了特定的资产或者某种效力，通常以现有的一个区块链为基础。 Token 基本上可以表示任何一种可替换、可交易的资产，从商品到忠诚点（原文是：loyalty points，水平有限，完全不知道它在说些什么东西。）甚至是其他的 cryptocurrencies ！&lt;/p&gt;
&lt;p&gt;如果你不需要修改一个特定的协议或者从零创建一个 blockchain 的话，创建一个 token 那是相当简单。你需要做的就是照着一个已有的 blockchain 上给出的一个标准模板——比如 Ethereum 和 Waves 平台——都支持你发行自己的 token ，通过用 smart contract 使得你创建自己的 token 变得可行。可编程的计算机代码都是 self-executing （自执行）的，无需任何第三方介入。这很酷！（扩展阅读：&lt;a href=&quot;https://masterthecrypto.com/guide-to-cryptocurrency-wallets/&quot;&gt;Guide to Cryptocurrency Wallets: Why Do You Need Wallets?&lt;/a&gt; ）&lt;/p&gt;
&lt;p&gt;Token 需要通过 Initial Coin Offering (ICO) 来分发出去，也就是众筹的意思，通过发行新的 cryptocurrency 或者 token 来支持基金项目发展。类似于股票的 Initial Public Offering (IPO) ，二者详细区别：&lt;a href=&quot;https://masterthecrypto.com/crypto-ico-vs-stock-ipo/&quot;&gt;Crypto ICO vs. Stock IPO: What’s the Difference?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很多人都痴迷于 ICO ，因为它们代表了一种识别有趣项目的好方法。（扩展阅读：&lt;a href=&quot;https://masterthecrypto.com/guide-to-ico-investing/&quot;&gt;Beginner’s Guide to ICO Investing: How to Participate in ICOs&lt;/a&gt; ）&lt;/p&gt;
&lt;blockquote readability=&quot;6.8149779735683&quot;&gt;
&lt;p&gt;有趣的事实：使用模板创建 token 是非常好的，因为它为 token 之间的互通性提供了标准接口。这使得你可以更简单的在一个钱包里可以装下不同的 coins ，比如 Ethereum 的 &lt;a href=&quot;https://etherscan.io/tokens&quot;&gt;ERC 20&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结：&lt;/h2&gt;
&lt;p&gt;altcoins 和 token 最大的不同在于它们的结构：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;altcoins 有自己独立的 blockchain 和独立的货币&lt;/li&gt;
&lt;li&gt;token 则是在一个已有的 blockchain 上，则有利于 decentralized applications (DApp) 的创建。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;交流微信群二维码：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/small-group.jpg&quot; alt=&quot;wechat community 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;JoiT 的微信二维码：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/small-joit.jpg&quot; alt=&quot;wechat community 1&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 22 Jan 2018 17:08:00 +0000</pubDate>
<dc:creator>JoiT</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JoiT/p/8331923.html</dc:identifier>
</item>
<item>
<title>Django 用散列隐藏数据库中主键ID - 昊羲</title>
<link>http://www.cnblogs.com/haoxi/p/8331833.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/haoxi/p/8331833.html</guid>
<description>&lt;p&gt;最近看到了一篇讲&lt;a href=&quot;http://blog.csdn.net/dev_csdn/article/details/78782570&quot;&gt;Django性能测试和优化&lt;/a&gt;的文章, 文中除了提到了很多有用的优化方法, 演示程序的数据库模型写法我觉得也很值得参考, 在这单独记录下.&lt;/p&gt;
&lt;p&gt;原文的演示代码有些问题, 我改进了下, 这里可以查看: &lt;a href=&quot;https://github.com/wanghaoxi3000/development/tree/master/Python/Django/optimize_django&quot; class=&quot;uri&quot;&gt;https://github.com/wanghaoxi3000/development/tree/master/Python/Django/optimize_django&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在实际项目中, 有时需要隐藏数据库中表的主键, 我之前采用的大多是为需要隐藏主键ID的表添加一个字段, 再用散列或者&lt;code&gt;UUID&lt;/code&gt;等填充来唯一标识一行数据. 而上面提到的文章中则是使用了一个专门生成ID对应散列值的基类, 需要隐藏散列的表可以通过继承这个类来实现隐藏自己的主键ID.&lt;/p&gt;
&lt;p&gt;比较特别的是此文的散列值是通过主键ID和&lt;code&gt;ContentType&lt;/code&gt;的ID来一起生成的. &lt;a href=&quot;https://docs.djangoproject.com/en/2.0/ref/contrib/contenttypes/&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt;是Django自带的一套的框架, 在新模型安装时会自动创建新的&lt;code&gt;ContentType&lt;/code&gt;实例, &lt;code&gt;ContentType&lt;/code&gt; 实例具有返回它们表示的模型类的方法, 以及从这些模型查询对象的方法. 从而提供一个高层次的, 通用的接口来与模型进行交互.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ContentType使用说明:&lt;/em&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.0/ref/contrib/contenttypes/&quot; class=&quot;uri&quot;&gt;https://docs.djangoproject.com/en/2.0/ref/contrib/contenttypes/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过这样的机制, 解码一个散列值后就可以直接得到对应的Django ORM模型类和实例. 对于一些需要一个集中的地方对模型进行解码并对不同类的不同模型实例进行处理时会很有用.&lt;/p&gt;
&lt;h4 id=&quot;hasher-类代码&quot;&gt;Hasher 类代码&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.contrib.contenttypes.models &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ContentType
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; basehash


&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Hasher:
    base36 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; basehash.base36()

    &lt;span class=&quot;at&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; from_model(cls, obj, klass&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;):
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; obj.pk &lt;span class=&quot;op&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;:
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; cls.make_hash(obj.pk, klass &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; klass &lt;span class=&quot;op&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; obj)

    &lt;span class=&quot;at&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; make_hash(cls, object_pk, klass):
        &lt;span class=&quot;co&quot;&gt;# 使用代理模型时通过 for_concrete_model=False 获取代理模型的ContentType&lt;/span&gt;
        content_type &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ContentType.objects.get_for_model(klass, for_concrete_model&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;)
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; cls.base36.&lt;span class=&quot;bu&quot;&gt;hash&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%(contenttype_pk)03d%(object_pk)06d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; {
            &lt;span class=&quot;st&quot;&gt;'contenttype_pk'&lt;/span&gt;: content_type.pk,
            &lt;span class=&quot;co&quot;&gt;'object_pk'&lt;/span&gt;: object_pk
        })

    &lt;span class=&quot;at&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; parse_hash(cls, obj_hash):
        unhashed &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%09d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; cls.base36.unhash(obj_hash)
        contenttype_pk &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(unhashed[:&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;])
        object_pk &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(unhashed[&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;:])
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; contenttype_pk, object_pk

    &lt;span class=&quot;at&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; to_object_pk(cls, obj_hash):
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; cls.parse_hash(obj_hash)[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hasher 类主要用来完成散列值的计算和解码过程, 将&lt;code&gt;ContentType&lt;/code&gt;和主键组合后进行&lt;code&gt;base36&lt;/code&gt;计算, 生成一段12位的代码. 主要使用了&lt;code&gt;basehash&lt;/code&gt;模块, 通过安装&lt;code&gt;gmpy2&lt;/code&gt;模块可以进一步提升计算速度.&lt;/p&gt;
&lt;h4 id=&quot;hashablemodel-基类&quot;&gt;HashableModel 基类&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.db &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; models

&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; .utils &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Hasher


&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HashableModel(models.Model):
    &lt;span class=&quot;co&quot;&gt;&quot;&quot;&quot;提供每个模型提供 Hash ID 的基类&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Meta:
        abstract &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;@property&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;hash&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; Hasher.from_model(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;HashableModel&lt;/code&gt; 通过在Meta元选项中设定&lt;code&gt;abstract = True&lt;/code&gt;而成为Django ORM中的一个基类, 其它模型可以通过继承这个基类来具备产生对应散列的能力.&lt;/p&gt;
&lt;h4 id=&quot;基本使用&quot;&gt;基本使用&lt;/h4&gt;
&lt;p&gt;现在, 通过一个散列值便可以编写很多通用的接口了. 例如有两张表, 都有一个&lt;code&gt;path&lt;/code&gt;的字段:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; TestModelOne(HashableModel):
    path &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;)

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; TestModelTwo(HashableModel):
    path &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过这样一段代码, 便可以同时用来获取两张表的&lt;code&gt;path&lt;/code&gt;字段了:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from django.contrib.contenttypes.models import ContentType

def get_path(hash_id):
    content_id, pk = Hasher.parse_hash()
    obj = ContentType.objects.get_for_id(content_id).get_object_for_this_type(pk=pk)
    return obj.path
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;参考:&lt;/em&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/dev_csdn/article/details/78782570&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/dev_csdn/article/details/78782570&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 22 Jan 2018 16:57:00 +0000</pubDate>
<dc:creator>昊羲</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/haoxi/p/8331833.html</dc:identifier>
</item>
<item>
<title>Spark入门学习 - 牧梦者</title>
<link>http://www.cnblogs.com/swordfall/p/8306984.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/swordfall/p/8306984.html</guid>
<description>&lt;h2&gt;1. Spark Overview（spark概述）&lt;/h2&gt;
&lt;p&gt;Apache spark是一个快速和通用的集群计算系统。它提供了Java，Scala，Python和R的高级APIs，以及支持通用执行图的优化引擎。它也支持一系列高级工具，包括用于SQL的Spark SQL、结构化数据处理、用于机器学习的MLlib，用于图形处理的GraphX以及Spark Streaming。&lt;/p&gt;
&lt;h2&gt;2. Downloading（下载）&lt;/h2&gt;
&lt;p&gt;从项目网址的&lt;a href=&quot;http://spark.apache.org/downloads.html&quot; target=&quot;_blank&quot;&gt;下载页面&lt;/a&gt;下载Spark。这个文档是Spark 2.2.1版本的。Spark使用HDFS和YARN的Hadoop的客户端库。下载那些少数流行的Hadoop版本预先打包的。用户也可以下载“Hadoop free”二进制文件，并通过&lt;a href=&quot;http://spark.apache.org/docs/latest/hadoop-provided.html&quot; target=&quot;_blank&quot;&gt;增加Spark类路径&lt;/a&gt;来运行带有任何Hadoop版本的Spark。Scala和Java用户可以使用Maven配合将Spark包含在他们项目中，将来Python用户也可以从PyPI安装Spark。&lt;/p&gt;
&lt;p&gt;如果你喜欢通过源代码编译Spark，可以查看&lt;a title=&quot;Building Spark&quot; href=&quot;http://spark.apache.org/docs/latest/building-spark.html&quot; target=&quot;_blank&quot;&gt;Building Spark&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Spark可以在Windows和类UNIX系统（如Linux，Mac OS）上运行。在一台机器上本地运行是很容易——你需要做的是在你系统Path上安装Java，或者通过JAVA_HOME环境变量指向Java安装目录。&lt;/p&gt;
&lt;p&gt;Spark运行在Java8+，Python 2.7+/3.4+和R3.1+。对于Scala API，Spark2.2.1使用Scala2.11。你需要使用兼容性的Scala版本2.11.x。&lt;/p&gt;
&lt;p&gt;注意，从Spark2.2.0开始，对2.6.5之前版本的Java7，Python2.6和旧Hadoop版本的支持已被删除。&lt;/p&gt;
&lt;p&gt;注意，从Spark2.1.0开始，不支持Scala2.10，可能会在Spark2.3.0中删除。&lt;/p&gt;
&lt;h2&gt;3. Running the Examples and Shell（运行例子和shell）&lt;/h2&gt;
&lt;p&gt;Spark带有几个示例程序。Scala，Java，Python和R示例在&lt;span&gt;example/src/main&lt;/span&gt;目录。在Spark根目录使用&lt;span&gt;bin/run-example &amp;lt;class&amp;gt; [params]&lt;span&gt;去运行Java或者Scala示例程序。（在幕后，调用&lt;a href=&quot;http://spark.apache.org/docs/latest/submitting-applications.html&quot; target=&quot;_blank&quot;&gt;spark-submit&lt;/a&gt;脚本来启动应用程序）例如：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;./bin/run-example SparkPi 10&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;你也可以通过Scala shell的修改版本交互地运行Spark。这是学习框架的最好方式。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;./bin/spark-shell --master local[2]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;--master&lt;/span&gt;选项指向一个分布式集群的master URL，&lt;span&gt;local 指&lt;/span&gt;使用一个线程本地运行，&lt;span&gt;local[N] 指&lt;/span&gt;使用N个线程本地运行。你应该使用&lt;span&gt;local&lt;span&gt;进行测试。有关完整的选项列表，使用&lt;span&gt;--help&lt;/span&gt;选项运行Spark Shell查看。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Spark也提供Python API。使用&lt;span&gt;bin/pyspark&lt;span&gt;在Python解释器中以交互方式运行Spark：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;./bin/pyspark --master local[2]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;示例应用程序也在Python中提供，如：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;./bin/spark-submit examples/src/main/python/pi.py 10&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;自从1.4开始，Spark还提供了一个实验性的R API（仅包括DataFrame APIs）。使用&lt;span&gt;bin/sparkR&lt;/span&gt;在R解释器中以交互方式运行Spark：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;./bin/sparkR --master local[2]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;示例应用程序也在R中提供，如：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;./bin/spark-submit examples/src/main/r/dataframe.R&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;4. Launchiing on a Cluster（在集群中启动）&lt;/h2&gt;
&lt;p&gt;Spark&lt;a href=&quot;http://spark.apache.org/docs/latest/cluster-overview.html&quot; target=&quot;_blank&quot;&gt;集群模式概述&lt;/a&gt;解释了在集群上运行的相关概念。Spark可以单独运行，也可以运行在几个现有的集群管理器上。它目前提供了几个部署选择：&lt;/p&gt;
&lt;h2&gt;5. 接下来方向&lt;/h2&gt;
&lt;h4&gt;项目目录：&lt;/h4&gt;
&lt;h4&gt;API Docs:&lt;/h4&gt;
&lt;h4&gt;部署目录：&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Cluster Overview（集群概述）：当在一个集群上运行时一些概念和组件的概述&lt;/li&gt;
&lt;li&gt;Submitting Applications:打包和部署应用&lt;/li&gt;
&lt;li&gt;Deployment modes（部署模式）：&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;Amazon EC2:在EC2上大概5分钟内启动一个集群的脚本&lt;/li&gt;
&lt;li&gt;Standalone Deploy Mode：不通过第三方集群管理器快速启动一个独立集群&lt;/li&gt;
&lt;li&gt;Mesos:使用Apache Mesos部署一个私有集群&lt;/li&gt;
&lt;li&gt;YARN:在Hadoop NextGen(YARN)上部署Spark（目前我在使用的模式）&lt;/li&gt;
&lt;li&gt;Kubernetes(试验性):在Kubernetes上部署Spark&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://spark.apache.org/docs/latest/&quot; target=&quot;_blank&quot;&gt;http://spark.apache.org/docs/latest/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 22 Jan 2018 16:56:00 +0000</pubDate>
<dc:creator>牧梦者</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/swordfall/p/8306984.html</dc:identifier>
</item>
<item>
<title>聊聊AspectCore动态代理中的拦截器（一） - Lemon丶</title>
<link>http://www.cnblogs.com/liuhaoyang/p/interceptor-in-aspectcore-part-1.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuhaoyang/p/interceptor-in-aspectcore-part-1.html</guid>
<description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;在上一篇文章&lt;a href=&quot;http://www.cnblogs.com/liuhaoyang/p/aspectcore-getting-started.html&quot;&gt;使用AspectCore动态代理&lt;/a&gt;中，简单说明了AspectCore.DynamicProxy的使用方式，由于介绍的比较浅显，也有不少同学留言询问拦截器的配置，那么在这篇文章中，我们来详细看一下AspectCore中的拦截器使用。&lt;/p&gt;
&lt;h3 id=&quot;两种配置方式&quot;&gt;两种配置方式&lt;/h3&gt;
&lt;p&gt;在AspectCore中，提供拦截器的特性配置和全局配置两种使用方式，并且分别提供&lt;code&gt;AbstractInterceptor&lt;/code&gt;(可用于全局拦截器配置)和&lt;code&gt;AbstractInterceptorAttribute&lt;/code&gt;(可同时用于全局配置和特性配置)两个拦截器基类。下面来分别演示两个拦截器配置方式的使用：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;特性拦截器。我们继承AbstractInterceptorAttribute来实现一个自己的特性拦截器&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt; public class CustomInterceptorAttribute : AbstractInterceptorAttribute
 {
     public override Task Invoke(AspectContext context, AspectDelegate next)
     {
         return context.Invoke(next);
     }
 }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么此时&lt;code&gt;CustomInterceptorAttribute&lt;/code&gt;可以标记在需要拦截的接口，类或者方法上来开启拦截。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;全局拦截器配置。我们继承AbstractInterceptor来实现一个自己的特性拦截器（除不能作为&lt;code&gt;Attribute&lt;/code&gt;标记在口，类或者方法上之外，AbstractInterceptor和AbstractInterceptorAttribute并无任何区别）&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt; public class CustomInterceptor : AbstractInterceptor
 {
     public override Task Invoke(AspectContext context, AspectDelegate next)
     {
         return context.Invoke(next);
     }
 }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在我们已经定义了我们自己的拦截器，我使用Microsoft.Extensions.DependencyInjection的集成方式来演示全局拦截器的配置（需安装&lt;code&gt;AspectCore.Extensions.DependencyInjection&lt;/code&gt;包）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;IServiceCollection services = new ServiceCollection();
services.AddDynamicProxy(config =&amp;gt;
{
    config.Interceptors.AddTyped&amp;lt;CustomInterceptor&amp;gt;();
});
IServiceProvider serviceProvider = services.BuildAspectCoreServiceProvider();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;CustomInterceptor便可以拦截由serviceProvider创建的任何服务的方法。&lt;/p&gt;
&lt;h3 id=&quot;三种拦截器类型&quot;&gt;三种拦截器类型&lt;/h3&gt;
&lt;p&gt;在AspectCore中，提供了&lt;code&gt;TypedInterceptor&lt;/code&gt;,&lt;code&gt;ServiceInterceptor&lt;/code&gt;,&lt;code&gt;DelegateInterceptor&lt;/code&gt;三种拦截器的激活类型。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;TypedInterceptor&lt;br/&gt;标记在接口，类或者方法上的特性拦截器或者使用上面&lt;code&gt;config.Interceptors.AddTyped&amp;lt;CustomInterceptor&amp;gt;();&lt;/code&gt;配置的全局拦截器，这类拦截器对于每个方法具有唯一的实例。&lt;/li&gt;
&lt;li&gt;ServiceInterceptor&lt;br/&gt;注册到DI并从DI激活使用的拦截器。这类拦截器的生命周期同注册到DI时的生命周期一致。如下面我们注册一个瞬态的ServiceInterceptor：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;IServiceCollection services = new ServiceCollection();

services.AddTransient&amp;lt;CustomInterceptor&amp;gt;();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以使用&lt;code&gt;ServiceInterceptor&lt;/code&gt;特性激活注册到DI中的拦截器：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[ServiceInterceptor(typeof(CustomInterceptor))]
public interface IService
{
    void Foo();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;或者使用全局配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; IServiceCollection services = new ServiceCollection();

 services.AddTransient&amp;lt;CustomInterceptor&amp;gt;();

 services.AddDynamicProxy(config =&amp;gt;
 {
     config.Interceptors.AddServiced&amp;lt;CustomInterceptor&amp;gt;();
 });
 IServiceProvider serviceProvider = services.BuildAspectCoreServiceProvider();
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;DelegateInterceptor&lt;br/&gt;在使用全局的拦截器配置时，我们也可以不定义具体的拦截器类，而直接使用签名为&lt;code&gt;Func&amp;lt;AspectDelegate, AspectDelegate&amp;gt;&lt;/code&gt;或&lt;code&gt;Func&amp;lt;AspectContext, AspectDelegate, Task&amp;gt;&lt;/code&gt;的委托来执行拦截，如下面：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;IServiceCollection services = new ServiceCollection();

services.AddTransient&amp;lt;CustomInterceptor&amp;gt;();

services.AddDynamicProxy(config =&amp;gt;
{
    config.Interceptors.AddDelegate( async (content, next) =&amp;gt;
    {
        Console.WriteLine(&quot;delegate interceptor&quot;);
        await content.Invoke(next);
    });
});
IServiceProvider serviceProvider = services.BuildAspectCoreServiceProvider();
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;使用通配符或者委托配置拦截器&quot;&gt;使用通配符或者委托配置拦截器&lt;/h3&gt;
&lt;p&gt;在AspectCore中配置全局拦截器时，可以使用通配符或者委托来限定拦截器的作用范围。&lt;br/&gt;内置提供了&lt;code&gt;Predicates.ForMethod&lt;/code&gt;,&lt;code&gt;Predicates.ForService&lt;/code&gt;,&lt;code&gt;Predicates.ForNameSpace&lt;/code&gt;三个通配符函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; services.AddDynamicProxy(config =&amp;gt;
 {
     config.Interceptors.AddTyped&amp;lt;CustomInterceptor&amp;gt;(Predicates.ForMethod(&quot;*Query&quot;)); //拦截所有Query后缀的方法
     config.Interceptors.AddTyped&amp;lt;CustomInterceptor&amp;gt;(Predicates.ForService(&quot;*Repository&quot;)); //拦截所有Repository后缀的类或接口
     config.Interceptors.AddTyped&amp;lt;CustomInterceptor&amp;gt;(Predicates.ForMethod(&quot;AspectCoreDemo.*&quot;)); //拦截所有AspectCoreDemo及其子命名空间下面的接口或类
 });&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;有问题反馈&quot;&gt;有问题反馈&lt;/h3&gt;
&lt;p&gt;如果您有任何问题，请提交 &lt;a href=&quot;https://github.com/dotnetcore/AspectCore-Framework/issues/new&quot;&gt;Issue&lt;/a&gt; 给我们。&lt;br/&gt;Github : &lt;a href=&quot;https://github.com/dotnetcore/AspectCore-Framework&quot; class=&quot;uri&quot;&gt;https://github.com/dotnetcore/AspectCore-Framework&lt;/a&gt;&lt;br/&gt;AspectCore QQ群: 306531723&lt;/p&gt;
&lt;h3 id=&quot;相关文章&quot;&gt;相关文章&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/liuhaoyang/p/aspectcore-introduction-1.html&quot;&gt;Asp.Net Core轻量级Aop解决方案：AspectCore&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/liuhaoyang/p/aspectcore_extension_reflection.html&quot;&gt;AspectCore.Extension.Reflection : .NET Core反射扩展库&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/liuhaoyang/p/dependencyinjection-in-aspectcore.html&quot;&gt;AspectCore中的IoC容器和依赖注入&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/liuhaoyang/p/aspectcore-getting-started.html&quot;&gt;使用AspectCore动态代理&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 22 Jan 2018 16:29:00 +0000</pubDate>
<dc:creator>Lemon丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuhaoyang/p/interceptor-in-aspectcore-part-1.html</dc:identifier>
</item>
<item>
<title>从parcel.js打包出错，到选择nvm - rlwb</title>
<link>http://www.cnblogs.com/rlwb/p/8331787.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rlwb/p/8331787.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;去年年底发布的parcel.js在年底可谓是火了一把，短短一个多月的时间在GitHub热门排行榜上名列前茅。因其几乎零配置的易用性，相比Webpack的复杂配置收获了大量关注及好评，甚至有人预言未来大有超过Webpack之趋。我也赶紧尝试一下，发现确实非常简单易用，但是一开始，插件还是比较少，相信未来会越来越成熟好用。以后如果有机会我会专门写一篇关于parcel.js的文章，说了那么多废话，其实接下来我要说的是nvm（2333...）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;遇到问题&quot;&gt;遇到问题&lt;/h4&gt;
&lt;p&gt;我在使用&lt;code&gt;parcel.js&lt;/code&gt;打包项目的时候出现了下面的错误：&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1321741/201801/1321741-20180123001047897-366310555.jpg&quot;/&gt;&lt;br/&gt;我在仔细检查完代码并且核实项目配置没有问题后，没办法只能求助万能的Google，结果在GitHub上找到了错误的原因，&lt;strong&gt;parcel.js使用了Async 函数，默认Node.js 8以上才支持的，低于8的话需要使用babel配置。&lt;/strong&gt;我查看了一下自己的Node.js版本，如下：&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1321741/201801/1321741-20180123001139131-416187010.jpg&quot;/&gt;&lt;br/&gt;找到问题原因后，我想升级一下&lt;code&gt;node&lt;/code&gt;不就解决问题了。但又一想，公司最近在做的项目有用到&lt;code&gt;node&lt;/code&gt;，贸然升级项目报错就麻烦了。这时候，我想到了&lt;code&gt;nvm&lt;/code&gt;,其实很早之前就看过，当时觉得电脑已经安装了&lt;code&gt;node&lt;/code&gt;环境了，卸载重新安装费事就没有用它。但是现在需要用新版本的&lt;code&gt;node&lt;/code&gt;才可以用&lt;code&gt;parcel.js&lt;/code&gt;，我决定卸载&lt;code&gt;node&lt;/code&gt;，重新用&lt;code&gt;nvm&lt;/code&gt;安装，管理&lt;code&gt;node&lt;/code&gt;版本。&lt;br/&gt;首先我遇到的问题就是&lt;code&gt;mac&lt;/code&gt;下如何彻底卸载&lt;code&gt;node&lt;/code&gt;呢，因为当时使用&lt;code&gt;Homebrew&lt;/code&gt;安装的，感觉直接卸载，应该不彻底。于是我上网查了很多文档，亲身实践如下：&lt;/p&gt;
&lt;h4 id=&quot;mac-os下彻底卸载node&quot;&gt;Mac os下彻底卸载node&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;1.删除/usr/local/lib中的所有node和node_modules
2.删除/usr/local/lib中的所有node和node_modules的文件夹
3.如果是从brew安装的, 运行brew uninstall node
4.检查~/中所有的local, lib或者include文件夹, 删除里面所有node和node_modules
5.在/usr/local/bin中, 删除所有node的可执行文件
6.最后运行以下代码:
sudo rm /usr/local/bin/npm
sudo rm /usr/local/share/man/man1/node.1
sudo rm /usr/local/lib/dtrace/node.d
sudo rm -rf ~/.npm
sudo rm -rf ~/.node-gyp
sudo rm /opt/local/bin/node
sudo rm /opt/local/include/node
sudo rm -rf /opt/local/lib/node_modules
(感谢知乎@haochuan)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;彻底卸载完node后，然后按照&lt;code&gt;Github&lt;/code&gt;上&lt;code&gt;nvm&lt;/code&gt;安装文档一步一步安装就好了。有了&lt;code&gt;nvm&lt;/code&gt;你就可以随心所欲的安装，切换你想要任何版本的&lt;code&gt;node&lt;/code&gt;了。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1321741/201801/1321741-20180123001239178-1219015415.jpg&quot;/&gt;&lt;br/&gt;哈哈，随便切换&lt;code&gt;node&lt;/code&gt;版本，感觉真棒。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;经过这件事，我在思考，其实我很早就知道了会有遇到&lt;code&gt;node&lt;/code&gt;版本这个问题。但是怕麻烦就没有理会，总感觉不一定会遇到，但是真到遇到了，还是要解决的。平时写代码也是一样的，考虑全面再去实现代码，哪些模块需要封装，都要考虑好，并实现。不能因为麻烦就不去做，当你最终遇到自己留下的坑的时候，还是要自己去填的。往往填坑的同时会带来更大的痛苦。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 22 Jan 2018 16:15:00 +0000</pubDate>
<dc:creator>rlwb</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rlwb/p/8331787.html</dc:identifier>
</item>
</channel>
</rss>