<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>swoole_proces实现多进程 - 飞鸿影~</title>
<link>http://www.cnblogs.com/52fhy/p/8901815.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/52fhy/p/8901815.html</guid>
<description>&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;swoole_process 是swoole提供的进程管理模块，用来替代PHP的pcntl扩展。&lt;/p&gt;
&lt;p&gt;首先，确保安装的swoole版本大于1.7.2：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;php&lt;/span&gt; --ri swoole

&lt;span class=&quot;kw&quot;&gt;swoole&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;swoole&lt;/span&gt; support =&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; enabled
&lt;span class=&quot;kw&quot;&gt;Version&lt;/span&gt; =&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; 1.10.1&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;实例说明&quot;&gt;实例说明&lt;/h2&gt;
&lt;p&gt;本例里待消费的是三个shell命令，会分别创建一个子进程来消费。消费的时候故意sleep了1秒，以便直观看到效果。&lt;/p&gt;
&lt;p&gt;process_t1.php&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode php&quot;&gt;
&lt;code class=&quot;sourceCode php&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;$start_time&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;$cmds&lt;/span&gt; = &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;uname&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;whoami&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$cmds&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;)&lt;/span&gt; {
    &lt;span class=&quot;kw&quot;&gt;$process&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; swoole_process&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;my_process&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;$process&lt;/span&gt;-&amp;gt;start&lt;span class=&quot;ot&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$process&lt;/span&gt;-&amp;gt;write&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//通过管道发数据到子进程&lt;/span&gt;

    &lt;span class=&quot;fu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$rec&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;$process&lt;/span&gt;-&amp;gt;read&lt;span class=&quot;ot&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//同步阻塞读取管道数据&lt;/span&gt;
}

&lt;span class=&quot;co&quot;&gt;//子进程&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; my_process&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;swoole_process &lt;span class=&quot;kw&quot;&gt;$worker&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;)&lt;/span&gt;{
    &lt;span class=&quot;fu&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//故意暂停1s&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;$cmd&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;$worker&lt;/span&gt;-&amp;gt;read&lt;span class=&quot;ot&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// $return = exec($cmd);//exec只会输出命令执行结果的最后一行内容，且需要显式打印输出&lt;/span&gt;

    &lt;span class=&quot;fu&quot;&gt;ob_start&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;passthru&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//执行外部程序并且显示未经处理的、原始输出，会直接打印输出。&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$return&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;ob_get_clean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;!&lt;span class=&quot;kw&quot;&gt;$return&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$return&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;'null'&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kw&quot;&gt;$worker&lt;/span&gt;-&amp;gt;write&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$return&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//通过管道读取并返回数据，也可以使用echo代替write&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// echo exec($return); //通过管道读取并返回数据  &lt;/span&gt;
}

&lt;span class=&quot;co&quot;&gt;//子进程结束必须要执行wait进行回收，否则子进程会变成僵尸进程&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$ret&lt;/span&gt; = swoole_process::wait&lt;span class=&quot;ot&quot;&gt;())&lt;/span&gt;{&lt;span class=&quot;co&quot;&gt;// $ret 是个数组 code是进程退出状态码，&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$pid&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;$ret&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'pid'&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;PHP_EOL&lt;/span&gt;.&lt;span class=&quot;st&quot;&gt;&quot;Worker Exit, PID=&quot;&lt;/span&gt; . &lt;span class=&quot;kw&quot;&gt;$pid&lt;/span&gt; . &lt;span class=&quot;kw&quot;&gt;PHP_EOL&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;;&lt;/span&gt;
}

&lt;span class=&quot;kw&quot;&gt;$end_time&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;use time:%.3f s&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$end_time&lt;/span&gt; - &lt;span class=&quot;kw&quot;&gt;$start_time&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令行里运行：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;php&lt;/span&gt; process_t1.php  

&lt;span class=&quot;kw&quot;&gt;Linux&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;Sat&lt;/span&gt; Apr 21 15:29:55 CST 2018
&lt;span class=&quot;kw&quot;&gt;root&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;Worker&lt;/span&gt; Exit, PID=672

&lt;span class=&quot;kw&quot;&gt;Worker&lt;/span&gt; Exit, PID=674

&lt;span class=&quot;kw&quot;&gt;Worker&lt;/span&gt; Exit, PID=676
&lt;span class=&quot;kw&quot;&gt;use&lt;/span&gt; time:3.080 s&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大家会觉得很奇怪，为什么开了三个子进程，还是用了3秒，应该是1秒左右才对呀。&lt;/p&gt;
&lt;p&gt;原因是父进程读取子进程返回的数据的时候，是同步阻塞读取:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode php&quot;&gt;
&lt;code class=&quot;sourceCode php&quot;&gt; &lt;span class=&quot;fu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$rec&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;$process&lt;/span&gt;-&amp;gt;read&lt;span class=&quot;ot&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//同步阻塞读取管道数据&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导致的后果就是父进程依次等待每个进程处理完并返回了内容，才走下一次循环。&lt;/p&gt;
&lt;p&gt;解决方案1：&lt;br/&gt;使用&lt;code&gt;swoole_event_add&lt;/code&gt;将管道加入到事件循环中，变为异步模式：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode php&quot;&gt;
&lt;code class=&quot;sourceCode php&quot;&gt;&lt;span class=&quot;co&quot;&gt;// echo $rec = $process-&amp;gt;read();//同步阻塞读取管道数据&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;//使用swoole_event_add将管道加入到事件循环中，变为异步模式&lt;/span&gt;
swoole_event_add&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$process&lt;/span&gt;-&amp;gt;pipe&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$pipe&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$process&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;)&lt;/span&gt; {
    &lt;span class=&quot;fu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$rec&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;$process&lt;/span&gt;-&amp;gt;read&lt;span class=&quot;ot&quot;&gt;();&lt;/span&gt;
    
    swoole_event_del&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$process&lt;/span&gt;-&amp;gt;pipe&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//socket处理完成后，从epoll事件中移除管道&lt;/span&gt;
}&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Worker Exit, PID=686

Worker Exit, PID=687

Worker Exit, PID=688
use time:1.060 s
Linux
Sat Apr 21 15:37:14 CST 2018
root&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;大家会发现，use time数据并不是最后打印出来的。已经是异步的了。 实际执行时间1s左右。&lt;/p&gt;
&lt;p&gt;解决方案2：&lt;br/&gt;先不获取子进程返回值，循环结束后统一返回：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode php&quot;&gt;
&lt;code class=&quot;sourceCode php&quot;&gt;&lt;span class=&quot;kw&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$cmds&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;)&lt;/span&gt; {
    &lt;span class=&quot;kw&quot;&gt;$process&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; swoole_process&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;my_process&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;$process&lt;/span&gt;-&amp;gt;start&lt;span class=&quot;ot&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$process&lt;/span&gt;-&amp;gt;write&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//通过管道发数据到子进程&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;$process_arr&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;[]&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;$process&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;;&lt;/span&gt;
}

&lt;span class=&quot;kw&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$process_arr&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$process&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;)&lt;/span&gt;{
    &lt;span class=&quot;fu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$rec&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;$process&lt;/span&gt;-&amp;gt;read&lt;span class=&quot;ot&quot;&gt;();&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Linux
Sat Apr 21 15:52:24 CST 2018
root

Worker Exit, PID=694

Worker Exit, PID=693

Worker Exit, PID=695
use time:1.061 s
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;1、Process&lt;br/&gt;&lt;a href=&quot;https://wiki.swoole.com/wiki/page/p-process.html&quot; class=&quot;uri&quot;&gt;https://wiki.swoole.com/wiki/page/p-process.html&lt;/a&gt;&lt;br/&gt;2、swoole_process-&amp;gt;read&lt;br/&gt;&lt;a href=&quot;https://wiki.swoole.com/wiki/page/217.html&quot; class=&quot;uri&quot;&gt;https://wiki.swoole.com/wiki/page/217.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 21 Apr 2018 07:54:00 +0000</pubDate>
<dc:creator>飞鸿影~</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/52fhy/p/8901815.html</dc:identifier>
</item>
<item>
<title>js高阶函数应用—函数柯里化和反柯里化(二) - 逸丶风</title>
<link>http://www.cnblogs.com/yifeng555/p/8901751.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yifeng555/p/8901751.html</guid>
<description>&lt;p&gt;上一篇文章中我们介绍了函数柯里化，顺带提到了偏函数，接下来我们继续话题，进入今天的主题—函数的反柯里化。&lt;/p&gt;
&lt;p&gt;在上一篇文章中柯里化函数你可能需要去敲许多代码，理解很多代码逻辑，不过这一节我们讨论的反科里化你可能不需要看很多代码逻辑，主要是理解反柯里化的核心思想，其实这种思想可能在你刚入门js时候就接触到了，而且你几乎天天在写代码过程中使用它。&lt;/p&gt;
&lt;p&gt;首先需要理解反柯里化我们先来回顾上一节的内容，科里化简单概括一下就是我们做了这样一件事情：把接受多个参数的函数变换成接受一个单一参数的函数，并且返回新的函数来执行余下的数，公式表示基本模式为fn(a,b,c,d)=&amp;gt;fn(a)(b)(c)(d)。&lt;/p&gt;
&lt;p&gt;那么很容易类比过来，反柯里化就是fn(a)(b)(c)(d)=&amp;gt;fn(a,b,c,d)是这样吗？其实就是这样，不要怀疑就是这么简单，只不过实现过程没有这么直接明了而已，反柯里化大概是做了这么一件事情：把已经内置的特定使用场景的函数通过参数解放出来，提高函数的适用范围。&lt;/p&gt;
&lt;p&gt;转化为公式：&lt;/p&gt;
&lt;p&gt;curyyA=fn(a);&lt;/p&gt;
&lt;p&gt;curryA(b)(c)(d)=&amp;gt;fn(a,b,c,d);&lt;/p&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;p&gt;curyyAb=fn(a)(b);//或者curyyAb=fn(a，b)；&lt;/p&gt;
&lt;p&gt;curryAb(c)(d)=&amp;gt;fn(a,b,c,d);&lt;/p&gt;
&lt;p&gt;......以此类推&lt;/p&gt;
&lt;p&gt;为了方便理解我们把上一节中的curry函数add版本拿过来&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;const&lt;/span&gt; curry = (fn, ...arg) =&amp;gt;&lt;span&gt; {
    let all &lt;/span&gt;= arg ||&lt;span&gt; [],
        length &lt;/span&gt;=&lt;span&gt; fn.length;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (...rest) =&amp;gt;&lt;span&gt; {
        let _args &lt;/span&gt;= all.slice(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
        _args.push(...rest);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_args.length &amp;lt;&lt;span&gt; length) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; curry.call(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, fn, ..._args);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; fn.apply(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, _args);
        }
    }
}
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; add = curry((a, b) =&amp;gt; a +&lt;span&gt; b);
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; add6 = add(&lt;span&gt;6&lt;/span&gt;&lt;span&gt;);
console.log(add6(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;
console.log(add6(&lt;span&gt;2&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到我们柯里化后的函数，每次执行了后返回的函数对于应用场景针对性越强，例如这个add6就是任意一个数和6的和，比起原来的add可以实现任意两数的和，add6应用范围更窄了，不过add6这个应用场景更有针对性，例如我们就需要一个任意数与6的和的时候这个add6就适应我们的场景。&lt;/p&gt;
&lt;p&gt;这样应该很容易理解了吧，如果还有问题我们来看一个更简单的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
let getTag = (type) =&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; `小明是一个${type}`
}
getTag(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;好学生&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;小明是一个好学生&lt;/span&gt;
getTag(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;好老师&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;小明是一个好老师&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个getTag函数根据传入的参数返回小明的类型“小明是一个xxx”，不过这个函数是我们在专门得到小明的类型用的，如果我们现在有个需求需要的到“小华是一个xxx”，你总不会再写一个函数&lt;/p&gt;
&lt;pre&gt;
 getTagHua = (type) =&amp;gt;&lt;span&gt; &lt;span&gt;`小华是一个${type}`&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;来得到“小华是一个xxx”的结果吧，就算刚入门编程语言时候我们也不会这么写；要实现这个需求很简单，再传入一个参数就行了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
let getTag2 = (name, type) =&amp;gt;&lt;span&gt; `${name}是一个${type}`

getTag2(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小华&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;好学生&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)//小华是个好学生
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里我们可以对比一下getTag和getTag2这两个函数，我们发现：&lt;/p&gt;
&lt;p&gt;1.getTag是一个getTag2柯里化后带着一个“小明”的内置参数的版本&lt;/p&gt;
&lt;p&gt;2.getTag只针对得到小明类型的场景使用&lt;/p&gt;
&lt;p&gt;3.getTag2是一个getTag泛化后的版本，适用范围更广&lt;/p&gt;
&lt;p&gt;可以理解为getTag2是getTag的反柯里化函数，是不是很简单，反柯里化的函数编程思想我们天天在用，只是没注意到而已。现在再回去看之前的公式&lt;/p&gt;
&lt;p&gt;curyyA=fn(a);&lt;/p&gt;
&lt;p&gt;curryA(b)(c)(d)=&amp;gt;fn(a,b,c,d);&lt;/p&gt;
&lt;p&gt;这种类型的转化是不是就很容易理解了。&lt;/p&gt;
&lt;p&gt;接下来我们接续我们的话题，我们现在知道了，反柯里化是一种编程思想，通过解析出函数内部限定条件，然后把限定条件当做参数传给函数，从而提高函数使用范围的一种编程思想，既然这样我们就很容易理解我们下面这种情况了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class Book {
    constructor(name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    static declare() {
        console.log(&lt;/span&gt;'A Study Method'&lt;span&gt;);
    }
    sayName() {
        console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);
    }
}

class Blog {
    constructor(name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
}
let book &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Book('javacript语言精粹'&lt;span&gt;);
let blog &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Blog('博客园'&lt;span&gt;);

book.sayName();                     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;javacript语言精粹  &lt;/span&gt;
Book.prototype.sayName.call(blog); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;博客园&lt;/span&gt;
Book.declare.call(blog);           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;A Study Method&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上面我们在开发经常遇到的，blog想用book类的方法，用call和apply改变一下this指向就行了，我们常用的call,apply函数本身就是反科里化思想的体现，把函数的调用对象当做参数传给函数，从而提高函数的适用范围，类似于做了这么一件事情：&lt;/p&gt;
&lt;p&gt;obj.fn(a,b)=&amp;gt;fn(object,a,b) 的转化&lt;/p&gt;
&lt;p&gt;通过转化使得fn不再只适用于obj调用还可以让其他的object调用，提高其适用范围&lt;/p&gt;
&lt;p&gt;那么我们把这个转化过程用函数实现一下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
Function.prototype.uncurrying = &lt;span&gt;function&lt;/span&gt;() { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;外边这个不要写成箭头函数，因为我们具体反柯里化什么函数是我们调用时候才知道的&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; (obj, ...rest) =&amp;gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.apply(obj, rest);
}

let sayName &lt;/span&gt;=&lt;span&gt; Book.prototype.sayName.uncurrying();
let deClare &lt;/span&gt;=&lt;span&gt; Book.declare.uncurrying();
sayName(blog) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;博客园&lt;/span&gt;
deClare(blog) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;A Study Method&lt;/span&gt;
deClare(book) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;A Study Method&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到我们把Book类才能调用的静态方法declare，和book实例的sayName反柯里化后，这种只针对类名调用的方法和只针对Book类对象调用的方法可以让其他对象调用了。&lt;/p&gt;
&lt;p&gt;当然我们也可以把一些js内置对象的方法uncurrying一下，比如一个字符串‘sdjkfjksfsdkslkdjsdf’，我们想把它每一个字符都拆出来放到一个数组中，或者每一项都拼个固定的字符再返回一数组，我们可以吧Array里的map方法uncurrying一下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
let map =&lt;span&gt; Array.prototype.map.uncurrying();
console.log(map(&lt;/span&gt;'yuweryiweryuie', val =&amp;gt; val + 'test'))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1098802/201804/1098802-20180421150334444-519431989.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然很多js内置对象的方法可以uncurrying的，这里不做过多介绍，因为都是我们常用的call，apply的场景，即一些具有类似数据结构或者相同迭代器的对象我们通常会借用其他的对象方法&lt;/p&gt;
&lt;p&gt;我们这里还给出一种上述uncurrying的实现方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Function.prototype.uncurrying = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (...rest) =&amp;gt; Function.prototype.call.apply(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, rest);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你不是很理解代码也没关系，没太大影响，因为这个实现只是把之前的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Function.prototype.uncurrying = &lt;span&gt;function&lt;/span&gt;() { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;外边这个不要写成箭头函数，因为我们具体反柯里化什么函数是我们调用时候才知道的&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; (obj, ...rest) =&amp;gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.apply(obj, rest);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个函数的传obj的这个工作交给call来完成了，如果你还是不理解建议去mdn上看看call和apply用法，理一下逻辑就行，这里不做过多阐释，好了我们currying和uncurrying的内容就到这了。&lt;/p&gt;

</description>
<pubDate>Sat, 21 Apr 2018 07:40:00 +0000</pubDate>
<dc:creator>逸丶风</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yifeng555/p/8901751.html</dc:identifier>
</item>
<item>
<title>基于RabbitMQ.Client组件实现RabbitMQ可复用的 ConnectionPool（连接池） - 梦在旅途</title>
<link>http://www.cnblogs.com/zuowj/p/8901191.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zuowj/p/8901191.html</guid>
<description>&lt;p class=&quot;post_body_title&quot;&gt;一、本文产生原由： 　&lt;/p&gt;
&lt;p&gt;　之前文章《&lt;a href=&quot;http://www.cnblogs.com/zuowj/p/4971123.html&quot; target=&quot;_blank&quot;&gt;总结消息队列RabbitMQ的基本用法&lt;/a&gt;》已对RabbitMQ的安装、用法都做了详细说明，而&lt;strong&gt;本文主要是针对在高并发且单次从RabbitMQ中消费消息时，出现了连接数不足、连接响应较慢、RabbitMQ服务器崩溃等各种性能问题的解方案&lt;/strong&gt;，之所以会出现我列举的这些问题，究基根源，其实是TCP连接创建与断开太过频繁所致，这与我们使用ADO.NET来访问常规的关系型DB（如：SQL SERVER、MYSQL）有所不同，在访问DB时，我们一般都建议大家使用using包裹，目的是每次创建完DB连接，使用完成后自动释放连接，避免不必要的连接数及资源占用。可能有人会问，为何访问DB，可以每次创建再断开连接，都没有问题，而同样访问MQ（本文所指的MQ均是RabbitMQ），每次创建再断开连接，如果在高并发且创建与断开频率高的时候，会出现性能问题呢？其实如果了解了DB的连接创建与断开以及MQ的连接创建与断开原理就知道其中的区别了。这里我简要说明一下，DB连接与MQ连接 其实底层都是基于TCP连接，创建TCP连接肯定是有资源消耗的，是非常昂贵的，原则上尽可能少的去创建与断开TCP连接，DB创建连接、MQ创建连接可以说是一样的，但在断开销毁连接上就有很大的不同，DB创建连接再断开时，默认情况下是把该连接回收到连接池中，下次如果再有DB连接创建请求，则先判断DB连接池中是否有空闲的连接，若有则直接复用，若没有才创建连接，这样就达到了TCP连接的复用，而MQ创建连接都是新创建的TCP连接，断开时则直接断开TCP连接，简单粗暴，看似资源清理更彻底，但若在高并发高频率每次都重新创建与断开MQ连接，则性能只会越来越差（上面说过TCP连接是非常昂贵的），我在公司项目中就出现了该问题，后面在技术总监的指导下，对MQ的连接创建与断开作了优化，实现了类似DB连接池的概念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;连接池&lt;/strong&gt;，故名思义，连接的池子，所有的连接作为一种资源集中存放在池中，需要使用时就可以到池中获取空闲连接资源，用完后再放回池中，以此达到连接资源的有效重用，同时也控制了资源的过度消耗与浪费（资源多少取决于池子的容量）&lt;/p&gt;
&lt;p class=&quot;post_body_title&quot;&gt;二、源代码奉献（可直接复制应用到大家的项目中） &lt;/p&gt;
&lt;p&gt;下面就先贴出实现MQHelper（含连接池）的源代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;148&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using RabbitMQ.Util;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System.Web.Caching;
using System.Web;
using System.Configuration;
using System.IO;
using System.Collections.Concurrent;
using System.Threading;
using System.Runtime.CompilerServices;

namespace Zuowj.Core
{
    public class MQHelper
    {
        private const string CacheKey_MQConnectionSetting = &quot;MQConnectionSetting&quot;;
        private const string CacheKey_MQMaxConnectionCount = &quot;MQMaxConnectionCount&quot;;

        private readonly static ConcurrentQueue&amp;lt;IConnection&amp;gt; FreeConnectionQueue;//空闲连接对象队列
        private readonly static ConcurrentDictionary&amp;lt;IConnection, bool&amp;gt; BusyConnectionDic;//使用中（忙）连接对象集合
        private readonly static ConcurrentDictionary&amp;lt;IConnection, int&amp;gt; MQConnectionPoolUsingDicNew;//连接池使用率
        private readonly static Semaphore MQConnectionPoolSemaphore;
        private readonly static object freeConnLock = new object(), addConnLock = new object();
        private static int connCount = 0;

        public const int DefaultMaxConnectionCount = 30;//默认最大保持可用连接数
        public const int DefaultMaxConnectionUsingCount = 10000;//默认最大连接可访问次数


        private static int MaxConnectionCount
        {
            get
            {
                if (HttpRuntime.Cache[CacheKey_MQMaxConnectionCount] != null)
                {
                    return Convert.ToInt32(HttpRuntime.Cache[CacheKey_MQMaxConnectionCount]);
                }
                else
                {
                    int mqMaxConnectionCount = 0;
                    string mqMaxConnectionCountStr = ConfigurationManager.AppSettings[CacheKey_MQMaxConnectionCount];
                    if (!int.TryParse(mqMaxConnectionCountStr, out mqMaxConnectionCount) || mqMaxConnectionCount &amp;lt;= 0)
                    {
                        mqMaxConnectionCount = DefaultMaxConnectionCount;
                    }

                    string appConfigPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;App.config&quot;);
                    HttpRuntime.Cache.Insert(CacheKey_MQMaxConnectionCount, mqMaxConnectionCount, new CacheDependency(appConfigPath));

                    return mqMaxConnectionCount;
                }

            }
        }

        /// &amp;lt;summary&amp;gt;
        /// 建立连接
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&quot;hostName&quot;&amp;gt;服务器地址&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;userName&quot;&amp;gt;登录账号&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;passWord&quot;&amp;gt;登录密码&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
        private static ConnectionFactory CrateFactory()
        {
            var mqConnectionSetting = GetMQConnectionSetting();
            var connectionfactory = new ConnectionFactory();
            connectionfactory.HostName = mqConnectionSetting[0];
            connectionfactory.UserName = mqConnectionSetting[1];
            connectionfactory.Password = mqConnectionSetting[2];
            if (mqConnectionSetting.Length &amp;gt; 3) //增加端口号
            {
                connectionfactory.Port = Convert.ToInt32(mqConnectionSetting[3]);
            }
            return connectionfactory;
        }

        private static string[] GetMQConnectionSetting()
        {
            string[] mqConnectionSetting = null;
            if (HttpRuntime.Cache[CacheKey_MQConnectionSetting] == null)
            {
                //MQConnectionSetting=Host IP|;userid;|;password
                string mqConnSettingStr = ConfigurationManager.AppSettings[CacheKey_MQConnectionSetting];
                if (!string.IsNullOrWhiteSpace(mqConnSettingStr))
                {
                    mqConnSettingStr = EncryptUtility.Decrypt(mqConnSettingStr);//解密MQ连接字符串，若项目中无此需求可移除，EncryptUtility是一个AES的加解密工具类，大家网上可自行查找
                    if (mqConnSettingStr.Contains(&quot;;|;&quot;))
                    {
                        mqConnectionSetting = mqConnSettingStr.Split(new[] { &quot;;|;&quot; }, StringSplitOptions.RemoveEmptyEntries);
                    }
                }

                if (mqConnectionSetting == null || mqConnectionSetting.Length &amp;lt; 3)
                {
                    throw new Exception(&quot;MQConnectionSetting未配置或配置不正确&quot;);
                }

                string appConfigPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;App.config&quot;);
                HttpRuntime.Cache.Insert(CacheKey_MQConnectionSetting, mqConnectionSetting, new CacheDependency(appConfigPath));
            }
            else
            {
                mqConnectionSetting = HttpRuntime.Cache[CacheKey_MQConnectionSetting] as string[];
            }

            return mqConnectionSetting;
        }




        public static IConnection CreateMQConnection()
        {
            var factory = CrateFactory();
            factory.AutomaticRecoveryEnabled = true;//自动重连
            var connection = factory.CreateConnection();
            connection.AutoClose = false;
            return connection;
        }


        static MQHelper()
        {
            FreeConnectionQueue = new ConcurrentQueue&amp;lt;IConnection&amp;gt;();
            BusyConnectionDic = new ConcurrentDictionary&amp;lt;IConnection, bool&amp;gt;();
            MQConnectionPoolUsingDicNew = new ConcurrentDictionary&amp;lt;IConnection, int&amp;gt;();//连接池使用率
            MQConnectionPoolSemaphore = new Semaphore(MaxConnectionCount, MaxConnectionCount, &quot;MQConnectionPoolSemaphore&quot;);//信号量，控制同时并发可用线程数

        }

        public static IConnection CreateMQConnectionInPoolNew()
        {

        SelectMQConnectionLine:

            MQConnectionPoolSemaphore.WaitOne();//当&amp;lt;MaxConnectionCount时，会直接进入，否则会等待直到空闲连接出现

            IConnection mqConnection = null;
            if (FreeConnectionQueue.Count + BusyConnectionDic.Count &amp;lt; MaxConnectionCount)//如果已有连接数小于最大可用连接数，则直接创建新连接
            {
                lock (addConnLock)
                {
                    if (FreeConnectionQueue.Count + BusyConnectionDic.Count &amp;lt; MaxConnectionCount)
                    {
                        mqConnection = CreateMQConnection();
                        BusyConnectionDic[mqConnection] = true;//加入到忙连接集合中
                        MQConnectionPoolUsingDicNew[mqConnection] = 1;
                        //  BaseUtil.Logger.DebugFormat(&quot;Create a MQConnection:{0},FreeConnectionCount:{1}, BusyConnectionCount:{2}&quot;, mqConnection.GetHashCode().ToString(), FreeConnectionQueue.Count, BusyConnectionDic.Count);
                        return mqConnection;
                    }
                }
            }


            if (!FreeConnectionQueue.TryDequeue(out mqConnection)) //如果没有可用空闲连接，则重新进入等待排队
            {
                // BaseUtil.Logger.DebugFormat(&quot;no FreeConnection,FreeConnectionCount:{0}, BusyConnectionCount:{1}&quot;, FreeConnectionQueue.Count, BusyConnectionDic.Count);
                goto SelectMQConnectionLine;
            }
            else if (MQConnectionPoolUsingDicNew[mqConnection] + 1 &amp;gt; DefaultMaxConnectionUsingCount || !mqConnection.IsOpen) //如果取到空闲连接，判断是否使用次数是否超过最大限制,超过则释放连接并重新创建
            {
                mqConnection.Close();
                mqConnection.Dispose();
                // BaseUtil.Logger.DebugFormat(&quot;close &amp;gt; DefaultMaxConnectionUsingCount mqConnection,FreeConnectionCount:{0}, BusyConnectionCount:{1}&quot;, FreeConnectionQueue.Count, BusyConnectionDic.Count);

                mqConnection = CreateMQConnection();
                MQConnectionPoolUsingDicNew[mqConnection] = 0;
                // BaseUtil.Logger.DebugFormat(&quot;create new mqConnection,FreeConnectionCount:{0}, BusyConnectionCount:{1}&quot;, FreeConnectionQueue.Count, BusyConnectionDic.Count);
            }

            BusyConnectionDic[mqConnection] = true;//加入到忙连接集合中
            MQConnectionPoolUsingDicNew[mqConnection] = MQConnectionPoolUsingDicNew[mqConnection] + 1;//使用次数加1

            // BaseUtil.Logger.DebugFormat(&quot;set BusyConnectionDic:{0},FreeConnectionCount:{1}, BusyConnectionCount:{2}&quot;, mqConnection.GetHashCode().ToString(), FreeConnectionQueue.Count, BusyConnectionDic.Count);

            return mqConnection;
        }

        private static void ResetMQConnectionToFree(IConnection connection)
        {
            lock (freeConnLock)
            {
                bool result = false;
                if (BusyConnectionDic.TryRemove(connection, out result)) //从忙队列中取出
                {
                    //  BaseUtil.Logger.DebugFormat(&quot;set FreeConnectionQueue:{0},FreeConnectionCount:{1}, BusyConnectionCount:{2}&quot;, connection.GetHashCode().ToString(), FreeConnectionQueue.Count, BusyConnectionDic.Count);
                }
                else
                {
                    // BaseUtil.Logger.DebugFormat(&quot;failed TryRemove BusyConnectionDic:{0},FreeConnectionCount:{1}, BusyConnectionCount:{2}&quot;, connection.GetHashCode().ToString(), FreeConnectionQueue.Count, BusyConnectionDic.Count);
                }

                if (FreeConnectionQueue.Count + BusyConnectionDic.Count &amp;gt; MaxConnectionCount)//如果因为高并发出现极少概率的&amp;gt;MaxConnectionCount，则直接释放该连接
                {
                    connection.Close();
                    connection.Dispose();
                }
                else
                {
                    FreeConnectionQueue.Enqueue(connection);//加入到空闲队列，以便持续提供连接服务
                }

                MQConnectionPoolSemaphore.Release();//释放一个空闲连接信号

                //Interlocked.Decrement(ref connCount);
                //BaseUtil.Logger.DebugFormat(&quot;Enqueue FreeConnectionQueue:{0},FreeConnectionCount:{1}, BusyConnectionCount:{2},thread count:{3}&quot;, connection.GetHashCode().ToString(), FreeConnectionQueue.Count, BusyConnectionDic.Count,connCount);
            }
        }


        /// &amp;lt;summary&amp;gt;
        /// 发送消息
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&quot;connection&quot;&amp;gt;消息队列连接对象&amp;lt;/param&amp;gt;
        /// &amp;lt;typeparam name=&quot;T&quot;&amp;gt;消息类型&amp;lt;/typeparam&amp;gt;
        /// &amp;lt;param name=&quot;queueName&quot;&amp;gt;队列名称&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;durable&quot;&amp;gt;是否持久化&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;msg&quot;&amp;gt;消息&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
        public static string SendMsg(IConnection connection, string queueName, string msg, bool durable = true)
        {
            try
            {

                using (var channel = connection.CreateModel())//建立通讯信道
                {
                    // 参数从前面开始分别意思为：队列名称，是否持久化，独占的队列，不使用时是否自动删除，其他参数
                    channel.QueueDeclare(queueName, durable, false, false, null);

                    var properties = channel.CreateBasicProperties();
                    properties.DeliveryMode = 2;//1表示不持久,2.表示持久化

                    if (!durable)
                        properties = null;

                    var body = Encoding.UTF8.GetBytes(msg);
                    channel.BasicPublish(&quot;&quot;, queueName, properties, body);
                }


                return string.Empty;
            }
            catch (Exception ex)
            {
                return ex.ToString();
            }
            finally
            {
                ResetMQConnectionToFree(connection);
            }
        }

        /// &amp;lt;summary&amp;gt;
        /// 消费消息
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&quot;connection&quot;&amp;gt;消息队列连接对象&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;queueName&quot;&amp;gt;队列名称&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;durable&quot;&amp;gt;是否持久化&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;dealMessage&quot;&amp;gt;消息处理函数&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;saveLog&quot;&amp;gt;保存日志方法，可选&amp;lt;/param&amp;gt;
        public static void ConsumeMsg(IConnection connection, string queueName, bool durable, Func&amp;lt;string, ConsumeAction&amp;gt; dealMessage, Action&amp;lt;string, Exception&amp;gt; saveLog = null)
        {
            try
            {

                using (var channel = connection.CreateModel())
                {
                    channel.QueueDeclare(queueName, durable, false, false, null); //获取队列 
                    channel.BasicQos(0, 1, false); //分发机制为触发式

                    var consumer = new QueueingBasicConsumer(channel); //建立消费者
                    // 从左到右参数意思分别是：队列名称、是否读取消息后直接删除消息，消费者
                    channel.BasicConsume(queueName, false, consumer);

                    while (true)  //如果队列中有消息
                    {
                        ConsumeAction consumeResult = ConsumeAction.RETRY;
                        var ea = (BasicDeliverEventArgs)consumer.Queue.Dequeue(); //获取消息
                        string message = null;

                        try
                        {
                            var body = ea.Body;
                            message = Encoding.UTF8.GetString(body);
                            consumeResult = dealMessage(message);
                        }
                        catch (Exception ex)
                        {
                            if (saveLog != null)
                            {
                                saveLog(message, ex);
                            }
                        }
                        if (consumeResult == ConsumeAction.ACCEPT)
                        {
                            channel.BasicAck(ea.DeliveryTag, false);  //消息从队列中删除
                        }
                        else if (consumeResult == ConsumeAction.RETRY)
                        {
                            channel.BasicNack(ea.DeliveryTag, false, true); //消息重回队列
                        }
                        else
                        {
                            channel.BasicNack(ea.DeliveryTag, false, false); //消息直接丢弃
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                if (saveLog != null)
                {
                    saveLog(&quot;QueueName:&quot; + queueName, ex);
                }

                throw ex;
            }
            finally
            {
                ResetMQConnectionToFree(connection);
            }
        }


        /// &amp;lt;summary&amp;gt;
        /// 依次获取单个消息
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&quot;connection&quot;&amp;gt;消息队列连接对象&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;QueueName&quot;&amp;gt;队列名称&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;durable&quot;&amp;gt;持久化&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;dealMessage&quot;&amp;gt;处理消息委托&amp;lt;/param&amp;gt;
        public static void ConsumeMsgSingle(IConnection connection, string QueueName, bool durable, Func&amp;lt;string, ConsumeAction&amp;gt; dealMessage)
        {
            try
            {

                using (var channel = connection.CreateModel())
                {
                    channel.QueueDeclare(QueueName, durable, false, false, null); //获取队列 
                    channel.BasicQos(0, 1, false); //分发机制为触发式

                    uint msgCount = channel.MessageCount(QueueName);

                    if (msgCount &amp;gt; 0)
                    {
                        var consumer = new QueueingBasicConsumer(channel); //建立消费者
                        // 从左到右参数意思分别是：队列名称、是否读取消息后直接删除消息，消费者
                        channel.BasicConsume(QueueName, false, consumer);

                        ConsumeAction consumeResult = ConsumeAction.RETRY;
                        var ea = (BasicDeliverEventArgs)consumer.Queue.Dequeue(); //获取消息
                        try
                        {
                            var body = ea.Body;
                            var message = Encoding.UTF8.GetString(body);
                            consumeResult = dealMessage(message);
                        }
                        catch (Exception ex)
                        {
                            throw ex;
                        }
                        finally
                        {
                            if (consumeResult == ConsumeAction.ACCEPT)
                            {
                                channel.BasicAck(ea.DeliveryTag, false);  //消息从队列中删除
                            }
                            else if (consumeResult == ConsumeAction.RETRY)
                            {
                                channel.BasicNack(ea.DeliveryTag, false, true); //消息重回队列
                            }
                            else
                            {
                                channel.BasicNack(ea.DeliveryTag, false, false); //消息直接丢弃
                            }
                        }
                    }
                    else
                    {
                        dealMessage(string.Empty);
                    }
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ResetMQConnectionToFree(connection);
            }
        }


        /// &amp;lt;summary&amp;gt;
        /// 获取队列消息数
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&quot;connection&quot;&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;QueueName&quot;&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
        public static int GetMessageCount(IConnection connection, string QueueName)
        {
            int msgCount = 0;
            try
            {

                using (var channel = connection.CreateModel())
                {
                    channel.QueueDeclare(QueueName, true, false, false, null); //获取队列 
                    msgCount = (int)channel.MessageCount(QueueName);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ResetMQConnectionToFree(connection);
            }

            return msgCount;
        }


    }

    public enum ConsumeAction
    {
        ACCEPT,  // 消费成功
        RETRY,   // 消费失败，可以放回队列重新消费
        REJECT,  // 消费失败，直接丢弃
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在对上述代码的核心点作一个简要的说明：&lt;/p&gt;
&lt;p&gt;先说一下静态构造函数：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FreeConnectionQueue &lt;/strong&gt;用于存放空闲连接对象队列，为何使用Queue，因为当我从中取出1个空闲连接后，空闲连接数就应该少1个，这个Queue很好满足这个需求，而且这个Queue是并发安全的Queue哦（ConcurrentQueue）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BusyConnectionDic &lt;/strong&gt;忙（使用中）连接对象集合，为何这里使用字典对象呢，因为当我用完后，需要能够快速的找出使用中的连接对象，并能快速移出，同时重新放入到空闲队列&lt;strong&gt;FreeConnectionQueue ，达到连接复用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MQConnectionPoolUsingDicNew &lt;/strong&gt;连接使用次数记录集合，这个只是辅助记录连接使用次数，以便可以计算一个连接的已使用次数，当达到最大使用次数时，则应断开重新创建&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MQConnectionPoolSemaphore &lt;/strong&gt;这个是信号量，这是控制并发连接的重要手段，连接池的容量等同于这个信号量的最大可并行数，保证同时使用的连接数不超过连接池的容量，若超过则会等待；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;具体步骤说明：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.MaxConnectionCount：最大保持可用连接数（可以理解为连接池的容量），可以通过CONFIG配置，默认为30； &lt;/p&gt;
&lt;p&gt;2.DefaultMaxConnectionUsingCount：默认最大连接可访问次数，我这里没有使用配置，而是直接使用常量固定为1000，大家若有需要可以改成从CONFIG配置，参考MaxConnectionCount的属性设置（采取了依赖缓存）&lt;/p&gt;
&lt;p&gt;3.CreateMQConnectionInPoolNew：从连接池中创建MQ连接对象，这个是核心方法，是实现连接池的地方，代码中已注释了重要的步骤逻辑，这里说一下实现思路：&lt;/p&gt;
&lt;p&gt;　　3.1 通过MQConnectionPoolSemaphore.WaitOne() 利用信号量的并行等待方法，如果当前并发超过信号量的最大并行度（也就是作为连接池的最大容量），则需要等待空闲连接池，防止连接数超过池的容量，如果并发没有超过池的容量，则可以进入获取连接的逻辑；&lt;/p&gt;
&lt;p&gt;　　3.2FreeConnectionQueue.Count + BusyConnectionDic.Count &amp;lt; MaxConnectionCount，如果空闲连接队列+忙连接集合的总数小于连接池的容量，则可以直接创建新的MQ连接，否则FreeConnectionQueue.TryDequeue(out mqConnection) 尝试从空闲连接队列中获取一个可用的空闲连接使用，若空闲连接都没有，则需要返回到方法首行，重新等待空闲连接；&lt;/p&gt;
&lt;p&gt;　　3.3MQConnectionPoolUsingDicNew[mqConnection] + 1 &amp;gt; DefaultMaxConnectionUsingCount || !mqConnection.IsOpen 如果取到空闲连接，则先判断使用次数是否超过最大限制,超过则释放连接或空闲连接已断开连接也需要重新创建，否则该连接可用；&lt;/p&gt;
&lt;p&gt;　　3.4BusyConnectionDic[mqConnection] = true;加入到忙连接集合中，MQConnectionPoolUsingDicNew[mqConnection] = MQConnectionPoolUsingDicNew[mqConnection] + 1; 使用次数加1，确保每使用一次连接，连接次数能记录&lt;/p&gt;
&lt;p&gt;4.ResetMQConnectionToFree：重置释放连接对象，这个是保证MQ连接用完后能够回收到空闲连接队列中（即：回到连接池中），而不是直接断开连接，这个方法很简单就不作作过多说明。&lt;/p&gt;
&lt;p&gt; 好了，都说明了如何实现含连接池的MQHelper，现在再来举几个例子来说明如何用：&lt;/p&gt;
&lt;p class=&quot;post_body_title&quot;&gt;三、实际应用（简单易上手）&lt;/p&gt;
&lt;p&gt;获取并消费一个消息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
        public string GetMessage(string queueName)
        {
            string message = null;
            try
            {
                var connection = MQHelper.CreateMQConnectionInPoolNew();

                MQHelper.ConsumeMsgSingle(connection, queueName, true, (msg) =&amp;gt;
                {
                    message = msg;
                    return ConsumeAction.ACCEPT;
                });
            }
            catch (Exception ex)
            {
                BaseUtil.Logger.Error(string.Format(&quot;MQHelper.ConsumeMsgSingle Error:{0}&quot;, ex.Message), ex);
                message = &quot;ERROR:&quot; + ex.Message;
            }

            //BaseUtil.Logger.InfoFormat(&quot;第{0}次请求，从消息队列(队列名称:{1})中获取消息值为:{2}&quot;, Interlocked.Increment(ref requestCount), queueName, message);


            return message;


        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　发送一个消息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
        public string SendMessage(string queueName, string msg)
        {
            string result = null;
            try
            {
                var connection = MQHelper.CreateMQConnectionInPoolNew();

                result = MQHelper.SendMsg(connection, queueName, msg);
            }
            catch (Exception ex)
            {
                BaseUtil.Logger.Error(string.Format(&quot;MQHelper.SendMessage Error:{0}&quot;, ex.Message), ex);
                result = ex.Message;
            }

            return result;
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　获取消息队列消息数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
        public int GetMessageCount(string queueName)
        {
            int result = -1;
            try
            {
                var connection = MQHelper.CreateMQConnectionInPoolNew();

                result = MQHelper.GetMessageCount(connection, queueName);
            }
            catch (Exception ex)
            {
                BaseUtil.Logger.Error(string.Format(&quot;MQHelper.GetMessageCount Error:{0}&quot;, ex.Message), ex);
                result = -1;
            }

            return result;
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　这里说一下：BaseUtil.Logger 是Log4Net的实例对象，另外上面没有针对持续订阅消费消息（ConsumeMsg）作说明，因为这个其实可以不用连接池也不会有问题，因为它是一个持久订阅并持久消费的过程，不会出现频繁创建连接对象的情况。&lt;/p&gt;
&lt;p&gt; 最后要说的是，虽说代码贴出来，大家一看就觉得很简单，好像没有什么技术含量，但如果没有完整的思路也还是需要花费一些时间和精力的，代码中核心是如何简单高效的解决并发及连接复用的的问题，该MQHelper有经过压力测试并顺利在我司项目中使用，完美解决了之前的问题，由于这个方案是我在公司通宵实现的，可能有一些方面的不足，大家可以相互交流或完善后入到自己的项目中。&lt;/p&gt;

</description>
<pubDate>Sat, 21 Apr 2018 07:39:00 +0000</pubDate>
<dc:creator>梦在旅途</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zuowj/p/8901191.html</dc:identifier>
</item>
<item>
<title>Golang中Struct与DB中表字段通过反射自动映射 - sqlmapper - Muout</title>
<link>http://www.cnblogs.com/Muoutsblogs/p/8901707.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Muoutsblogs/p/8901707.html</guid>
<description>&lt;p&gt;&lt;span&gt;Golang中操作数据库已经有现成的库&lt;span class=&quot;pl-pds&quot;&gt;&quot;database/sql&lt;span class=&quot;pl-pds&quot;&gt;&quot;可以用，但是&lt;span class=&quot;pl-pds&quot;&gt;&quot;database/sql&lt;span class=&quot;pl-pds&quot;&gt;&quot;只提供了最基础的操作接口；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pl-pds&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;对数据库中一张表的增删改查等操作，必须手动编写sql string，这通常都是一个写死的字符&lt;span class=&quot;pl-pds&quot;&gt;串（Hard-Code），&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pl-pds&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;并且需要手动维护sql中字段与Golang中的变量的映射关系，这扩展性很差，且非常容易出错。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pl-pds&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;通常情况下，我们期望Golang中存在一个Struct与DB中的一个Table建立一个映射关系（Mapper），&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pl-pds&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;之后我们就通过操作这个Struct来操作DB中对应的Table，无须Hard-Coded sql string，无须手动维护字段映射关系。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/arthas29/sqlmapper&quot; target=&quot;_blank&quot;&gt;sqlmapper&lt;/a&gt;&lt;/strong&gt; 就是这样一个极简的工具库（简单到只有一个go文件）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://github.com/arthas29/sqlmapper&quot; target=&quot;_blank&quot;&gt;https://github.com/arthas29/sqlmapper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;例如，DB中有一张表，结构如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `test_table` (
  `field_key` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;64&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
  `field_one` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;64&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `field_two` &lt;/span&gt;&lt;span&gt;tinyint&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `field_thr` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;12&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `field_fou` &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`field_key`)
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;InnoDB &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;utf8;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Golang中，创建对应的Struct，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; struct in golang such as:&lt;/span&gt;
&lt;span&gt;type DemoRow struct {
    FieldKey string  `sql:&lt;/span&gt;&quot;field_key&quot;&lt;span&gt;`
    FieldOne string  `sql:&lt;/span&gt;&quot;field_one&quot;&lt;span&gt;`
    FieldTwo bool    `sql:&lt;/span&gt;&quot;field_two&quot;&lt;span&gt;`
    FieldThr int64   `sql:&lt;/span&gt;&quot;field_thr&quot;&lt;span&gt;`
    FieldFou float64 `sql:&lt;/span&gt;&quot;field_fou&quot;&lt;span&gt;`
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，我们就可以通过这个Struct执行 &lt;code&gt;SELECT&lt;/code&gt;/&lt;code&gt;INSERT&lt;/code&gt;/&lt;code&gt;UPDATE&lt;/code&gt;/&lt;code&gt;DELETE&lt;/code&gt; 操作，无须硬编码的冗长的sql string；&lt;/p&gt;
&lt;h4&gt;示例 (更多示例参见 &lt;a href=&quot;https://github.com/arthas29/sqlmapper/blob/master/fields_map_test.go&quot; target=&quot;_blank&quot;&gt;fields_map_test.go&lt;/a&gt;)：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; select single row&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; Query by primary key (field[0])&lt;/span&gt;
func QueryByKey(ctx context.Context, tx *sql.Tx, db *&lt;span&gt;sql.DB, fieldKey string) (
    &lt;/span&gt;*&lt;span&gt;DemoRow, error) {

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; row DemoRow
    row.FieldKey &lt;/span&gt;=&lt;span&gt; fieldKey
    fm, err :&lt;/span&gt;= NewFieldsMap(table, &amp;amp;&lt;span&gt;row)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil, err
    }

    objptr, err :&lt;/span&gt;=&lt;span&gt; fm.SQLSelectByPriKey(ctx, tx, db)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil, err
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; objptr.(*&lt;span&gt;DemoRow), nil
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 21 Apr 2018 07:34:00 +0000</pubDate>
<dc:creator>Muout</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Muoutsblogs/p/8901707.html</dc:identifier>
</item>
<item>
<title>6.QT-简易计算器实现(详解) - LifeYx</title>
<link>http://www.cnblogs.com/lifexy/p/8901369.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lifexy/p/8901369.html</guid>
<description>&lt;pre&gt;
&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;界面展示&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180421141604332-287908486.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180421141620841-1311482217.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180421141626233-16334149.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;strong&gt;用户界面类设计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;需要使用QWidget组件作为顶层窗口，QLineEdit组件作为输入框，QPsuhButton作为按钮&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.1 在代码里处理按键消息时,&lt;/strong&gt;&lt;strong&gt;需要处理下用户输入的格式(&lt;/strong&gt;&lt;strong&gt;方便逻辑模块计算)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;1)匹配括号成对出现,&lt;/strong&gt;&lt;strong&gt;左括号必然先于右括号出现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当有左括号出现时,则&lt;strong&gt;&lt;span&gt;status++&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;当有右括号出现时,并且status！=0时,则右括号有效,并&lt;span&gt;&lt;strong&gt;status--  &lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2)判断每个按键是否合法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;数字&lt;/strong&gt;&lt;/span&gt;前面不能为:右括号&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;10&lt;/span&gt;+&lt;span&gt;3&lt;/span&gt;)&lt;span&gt;5&lt;/span&gt;*&lt;span&gt;2&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;出错,数字5前面不能为右括号&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;小数点&lt;/strong&gt;&lt;/span&gt;前面不能为空,只能是数字,并且一串数字只能有一个小数点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1.23&lt;/span&gt;.&lt;span&gt;45&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;出错,一串数字只能有一个小数点&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;加减号&lt;/strong&gt;&lt;/span&gt;前面不能为:小数点,并且前面不能连续有两次加减乘除,或者是(和运算符&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如: &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;7&lt;/span&gt;*-+&lt;span&gt;10&lt;/span&gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;出错,+号前面出现两次加减乘除&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;. +        　　  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;出错,+号前面不能有小数点 &lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;-(--&lt;span&gt;5&lt;/span&gt;)          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;出错, -5数字前面有个减号&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;乘除号&lt;/strong&gt;&lt;/span&gt;前面不能为:左括号,空,小数点,加减乘除,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如: &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
*&lt;span&gt;1&lt;/span&gt;+(/&lt;span&gt;5&lt;/span&gt;+&lt;span&gt;10&lt;/span&gt;)                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;出错, *前面不能为空,且除法前面不能为左括号&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;左括号&lt;/strong&gt;&lt;/span&gt;前面不能为:右括号,数字,小数点,并且前面不能连续有两次加减乘除&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如: &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
( )+&lt;span&gt;10&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;+&lt;span&gt;10&lt;/span&gt;)               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;出错,( 前面不能为数字&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;右括号&lt;/strong&gt;&lt;/span&gt;前面不能为:空,加减乘除,小数点,左括号,并且与左括号成对出现&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如:  &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
) + (&lt;span&gt;10&lt;/span&gt;+ &lt;span&gt;5&lt;/span&gt;.)                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;出错,右括号不能出现在开头,并且右括号前面不能有小数点&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;strong&gt;逻辑模块类设计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如何计算四则运算表达式.比如:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180421142234535-1002196792.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.1 &lt;/strong&gt;&lt;strong&gt;将中缀表达式进行数字和运算符的分离,&lt;/strong&gt;&lt;strong&gt;并保存到队列里&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;1)需要考虑 + - 是正负号,还是加减运算符&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当&lt;span&gt;&lt;strong&gt;+-&lt;/strong&gt;&lt;/span&gt;出现在表达式开头时,表示为正负号,比如:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
+&lt;span&gt;7&lt;/span&gt;-&lt;span&gt;5&lt;/span&gt;;                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;+出现在开头,说明这个+,表示的是正号,而不是加号&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;当出现&lt;span&gt;&lt;strong&gt;+-&lt;/strong&gt;&lt;/span&gt;时,并且前面还有运算符时,表示为正负号,比如:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;7&lt;/span&gt;*-&lt;span&gt;5&lt;/span&gt;;                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;-前面还有*,说明这个-,表示的是负号,而不是减号&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;当出现&lt;span&gt;&lt;strong&gt;+-&lt;/strong&gt;&lt;/span&gt;时,并且前面还有左括号时,表示为正负号,比如:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;9&lt;/span&gt;+(-&lt;span&gt;3&lt;/span&gt;+&lt;span&gt;4&lt;/span&gt;)               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;-前面还有(,说明这个-,表示负号,而不是减号&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2)以下图的中缀表达式为例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180421143103956-94881765.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;分离后,队列的每个元素应该为:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
str[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
str[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
str[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
str[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
str[&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
str[&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
str[&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
str[&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
str[&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2 &lt;/strong&gt;&lt;strong&gt;将分解出来的中缀表达式队列 &lt;/strong&gt;&lt;strong&gt;转换为后缀表达式队列&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;比如&lt;span&gt;&lt;strong&gt;+9 + (-3 - -1)* -5&lt;/strong&gt;&lt;/span&gt;，&lt;/span&gt;&lt;span&gt;转换为后缀表达式为:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
 +&lt;span&gt;9,&lt;/span&gt;  -&lt;span&gt;3,&lt;/span&gt; -&lt;span&gt;1,&lt;/span&gt; -, -&lt;span&gt;5, &lt;/span&gt;*, +
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;后缀表达式队列的每个元素应该为:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
str[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
str[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
str[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
str[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
str[&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
str[&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
str[&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由于运算符处于后缀,所以需要使用&lt;strong&gt;&lt;span&gt;栈&lt;/span&gt;,&lt;/strong&gt;用来&lt;span&gt;&lt;strong&gt;存储运算符以及括号&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;转换过程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;strong&gt;当队列元素为数字时&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;直接保存到队列&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;-&lt;strong&gt;当队列元素为加减时&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;判断栈顶的运算优先级,由于&lt;span&gt;&lt;strong&gt;+-&lt;/strong&gt;&lt;/span&gt;的优先级&lt;strong&gt;&lt;span&gt;小于等于&lt;/span&gt;&lt;/strong&gt;所有运算符&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;所以循环取出栈顶的运算符并入队列&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;直到&lt;span&gt;&lt;strong&gt;遇到&lt;/strong&gt;&lt;strong&gt;栈为空&lt;/strong&gt;&lt;/span&gt;、&lt;span&gt;&lt;strong&gt;遇到左括号&lt;/strong&gt;&lt;/span&gt;时才停止,最后再将当前+-入栈&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;-&lt;strong&gt;当队列元素为乘除时&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;判断栈顶的运算优先级,由于*/的优先级只小于等于*/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;所以循环判断栈顶运算符,如果栈顶运算符是*/,则取出并入栈&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;直到&lt;span&gt;&lt;strong&gt;遇到栈为空&lt;/strong&gt;&lt;/span&gt;、&lt;span&gt;&lt;strong&gt;遇到左括号&lt;/strong&gt;&lt;/span&gt;、&lt;span&gt;&lt;strong&gt;遇到+-&lt;/strong&gt;&lt;/span&gt;时才停止,最后再将当前*/入栈&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;strong&gt;当前队列元素为左括号时&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;直接入栈&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;strong&gt;当前队列元素为右括号时&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;循环将栈顶运算符出栈并入队列&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;直到&lt;span&gt;&lt;strong&gt;遇到左括号停止&lt;/strong&gt;&lt;/span&gt;,并将左括号&lt;span&gt;&lt;strong&gt;出栈弃掉.&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;-当队列元素判断结束后&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;判断栈是否为空,如果不为空,则将栈存储的运算符&lt;span&gt;&lt;strong&gt;出栈并入队列&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;示意图如下所示&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180421143843431-1526902660.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.3 &lt;/strong&gt;&lt;strong&gt;将后缀表达式的值计算出来&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;通过逆波兰表达式计算,思路如下&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;遇到数字时&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;遇到运算符时&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;依次取出右、左操作数,然后进行计算&lt;span&gt;&lt;strong&gt;(有除法时,需要判断除数是否为0)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;计算完成后,再将结果入栈&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;当后缀表达式队列对空时&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;  表示遍历结束,此时栈中若只剩下&lt;span&gt;&lt;strong&gt;唯一数字&lt;/strong&gt;&lt;/span&gt;,则算出了结果答案.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;示意图如下所示&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1182576/201804/1182576-20180421143946835-912161421.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.代码实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1 与界面相关的模块,用QCalculatorUI类实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;QCalculatorUI.h代码如下:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#ifndef QCALCULATORUI_H
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; QCALCULATORUI_H&lt;span&gt;

#include &lt;/span&gt;&amp;lt;QWidget&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QLineEdit&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QPushButton&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QDebug&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QString&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QCalculatorDec.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; QCalculatorUI : &lt;span&gt;public&lt;/span&gt;&lt;span&gt; QWidget
{
    Q_OBJECT

&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
    QCalculatorDec  mDec;
    QLineEdit  &lt;/span&gt;*mline;              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示行&lt;/span&gt;&lt;span&gt;
    QPushButton &lt;/span&gt;*mbuton[&lt;span&gt;20&lt;/span&gt;];        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;按钮成员&lt;/span&gt;&lt;span&gt;
    QCalculatorUI();
    &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; construct();

&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; slots:
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; handler_clicked();         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理按键消息&lt;/span&gt;

&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;  MatchingBoth(QString &amp;amp;str1,&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *str2);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;匹配str1和str2,判断str1是否有str2的字符&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt;  LastMatchingBoth(QString &amp;amp;str1,&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *str2);      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;反向匹配str1和str2&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; QCalculatorUI* NewIntance();    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;成员需要资源申请,所以使用二阶构造&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt;&lt;span&gt; show();
};
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; QCALCULATORUI_H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;QCalculatorUI.cpp代码如下:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;167&quot;&gt;
&lt;pre&gt;
#include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QCalculatorUI.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

QCalculatorUI::QCalculatorUI() : QWidget(NULL,Qt::WindowCloseButtonHint)
{
}

&lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt;  QCalculatorUI::construct()
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; ret;
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;* butnText[&lt;span&gt;20&lt;/span&gt;]=&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    };

    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; butnPos[&lt;span&gt;20&lt;/span&gt;][&lt;span&gt;4&lt;/span&gt;]=       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;存放 x y w h&lt;/span&gt;&lt;span&gt;
    {
      {&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;90&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},{&lt;span&gt;110&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;140&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},                                                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;&amp;lt;- CE&lt;/span&gt;&lt;span&gt;
      {&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;100&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},{&lt;span&gt;60&lt;/span&gt;,&lt;span&gt;100&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},{&lt;span&gt;110&lt;/span&gt;,&lt;span&gt;100&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},{&lt;span&gt;160&lt;/span&gt;,&lt;span&gt;100&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},{&lt;span&gt;210&lt;/span&gt;,&lt;span&gt;100&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;7 8 9 + （&lt;/span&gt;&lt;span&gt;
      {&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;150&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},{&lt;span&gt;60&lt;/span&gt;,&lt;span&gt;150&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},{&lt;span&gt;110&lt;/span&gt;,&lt;span&gt;150&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},{&lt;span&gt;160&lt;/span&gt;,&lt;span&gt;150&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},{&lt;span&gt;210&lt;/span&gt;,&lt;span&gt;150&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4 5 6 - ）&lt;/span&gt;&lt;span&gt;
      {&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;200&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},{&lt;span&gt;60&lt;/span&gt;,&lt;span&gt;200&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},{&lt;span&gt;110&lt;/span&gt;,&lt;span&gt;200&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},{&lt;span&gt;160&lt;/span&gt;,&lt;span&gt;200&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},{&lt;span&gt;210&lt;/span&gt;,&lt;span&gt;200&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;90&lt;/span&gt;},    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1 2 3 * =&lt;/span&gt;&lt;span&gt;
      {&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;250&lt;/span&gt;,&lt;span&gt;90&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},               {&lt;span&gt;110&lt;/span&gt;,&lt;span&gt;250&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},{&lt;span&gt;160&lt;/span&gt;,&lt;span&gt;250&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;},                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;0   . /&lt;/span&gt;&lt;span&gt;
    };

    mline  &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; QLineEdit(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(mline==&lt;span&gt;NULL)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    mline&lt;/span&gt;-&amp;gt;resize(&lt;span&gt;240&lt;/span&gt;,&lt;span&gt;30&lt;/span&gt;&lt;span&gt;);
    mline&lt;/span&gt;-&amp;gt;move(&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
    mline&lt;/span&gt;-&amp;gt;&lt;span&gt;setAlignment(Qt::AlignRight);
    mline&lt;/span&gt;-&amp;gt;setReadOnly(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; mline-&amp;gt;setFont(QFont(0,10));        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置字体&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;-&amp;gt;setWindowTitle(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;计算器&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;20&lt;/span&gt;;i++&lt;span&gt;)
   {
         mbuton[i]&lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;  QPushButton(butnText[i],&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(mbuton[i]==&lt;span&gt;NULL)
             &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

         mbuton[i]&lt;/span&gt;-&amp;gt;resize(butnPos[i][&lt;span&gt;2&lt;/span&gt;],butnPos[i][&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]);
         mbuton[i]&lt;/span&gt;-&amp;gt;move(butnPos[i][&lt;span&gt;0&lt;/span&gt;],butnPos[i][&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);

         ret &lt;/span&gt;= QObject::connect(mbuton[i],SIGNAL(clicked()),&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,SLOT(handler_clicked()));
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ret==&lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
             &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
   }
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
}

QCalculatorUI&lt;/span&gt;* QCalculatorUI::NewIntance()      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;二阶构造&lt;/span&gt;&lt;span&gt;
{
    QCalculatorUI&lt;/span&gt;* ret = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QCalculatorUI();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ret==NULL || !ret-&amp;gt;&lt;span&gt;construct())
    {
        delete ret;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
}

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;  QCalculatorUI::LastMatchingBoth(QString&amp;amp; str1,&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;* str2)      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;反向匹配str1和str2&lt;/span&gt;&lt;span&gt;
{
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=str1.length();i&amp;gt;=&lt;span&gt;0&lt;/span&gt;;i--&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(unsigned &lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;strlen(str2);j++&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(str1[i]==&lt;span&gt;str2[j])
                 &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;
    }
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;  QCalculatorUI::MatchingBoth(QString&amp;amp; str1,&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;* str2)          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;匹配str1和str2,判断str1是否有str2的字符&lt;/span&gt;&lt;span&gt;
{
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;str1.length();i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(unsigned &lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;strlen(str2);j++&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(str1[i]==&lt;span&gt;str2[j])
                 &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;
    }
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; QCalculatorUI::handler_clicked()      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理按键消息&lt;/span&gt;&lt;span&gt;
{
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ClearLine=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; bracket_cnt=&lt;span&gt;0&lt;/span&gt;;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;圆括号计数&lt;/span&gt;&lt;span&gt;
    QPushButton &lt;/span&gt;*btn =dynamic_cast&amp;lt;QPushButton* &amp;gt;(sender()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取对象&lt;/span&gt;&lt;span&gt;
    QString line &lt;/span&gt;= mline-&amp;gt;&lt;span&gt;text();
    QString text &lt;/span&gt;= btn-&amp;gt;text();     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取消息&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(ClearLine)
    {
        mline&lt;/span&gt;-&amp;gt;setText(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
        line.clear();
        ClearLine&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(text&amp;gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;amp;&amp;amp;text&amp;lt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数字&lt;/span&gt;&lt;span&gt;
    {
        QString tmp&lt;/span&gt;= line.right(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tmp.length() &amp;amp;&amp;amp; tmp[&lt;span&gt;0&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数字前面不能为右括号&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }
        line&lt;/span&gt;+=&lt;span&gt;text;
    }

    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(text==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; )    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;小数点&lt;/span&gt;&lt;span&gt;
    {
        QString tmp&lt;/span&gt;= line.right(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tmp.length()) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;小数点前面只能是数字&lt;/span&gt;&lt;span&gt;
       {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(MatchingBoth(tmp,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0123456789&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)== -&lt;span&gt;1&lt;/span&gt;)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;没找到数字&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
       }
       &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;小数点前面为空&lt;/span&gt;&lt;span&gt;
       {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
       }

       &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; pos= LastMatchingBoth(line,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+-*/.()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;反向查找&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(pos!= -&lt;span&gt;1&lt;/span&gt; &amp;amp;&amp;amp;line[pos]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; )        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;一串数字只能有一个小数点&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
        }
         line&lt;/span&gt;+=&lt;span&gt;text;
    }

    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(text==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;||text==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加减号&lt;/span&gt;&lt;span&gt;
    {
        QString tmp&lt;/span&gt;= line.right(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tmp.length()&amp;amp;&amp;amp; tmp[&lt;span&gt;0&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面不能为:小数点&lt;/span&gt;&lt;span&gt;
       {
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
       }
       tmp&lt;/span&gt;= line.right(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tmp.length()==&lt;span&gt;2&lt;/span&gt;)          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面不能连续有两次加减乘除&lt;/span&gt;&lt;span&gt;
       {
           &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tmp[&lt;span&gt;0&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;||tmp[&lt;span&gt;0&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;||tmp[&lt;span&gt;0&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;||tmp[&lt;span&gt;0&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;||tmp[&lt;span&gt;0&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tmp[&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;||tmp[&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;||tmp[&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;||tmp[&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
       }
        line&lt;/span&gt;+=&lt;span&gt;text;
    }

    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(text==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;||text==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;乘除号&lt;/span&gt;&lt;span&gt;
    {
         QString tmp&lt;/span&gt;= line.right(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tmp.length())       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面不能为:左括号,小数点,加减乘除,&lt;/span&gt;&lt;span&gt;
         {
             &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(MatchingBoth(tmp,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(.+-*/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)!= -&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;查找左括号,小数点,加减乘除&lt;/span&gt;&lt;span&gt;
             {
                 &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
             }
         }
         &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;乘除号前面不能为空&lt;/span&gt;
              &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;

        line&lt;/span&gt;+=&lt;span&gt;text;
    }

    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(text==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;左括号&lt;/span&gt;&lt;span&gt;
    {
        QString tmp&lt;/span&gt;= line.right(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tmp.length())             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面不能为:右括号,数字,小数点&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(MatchingBoth(tmp,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)0123456789.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)!= -&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;查找右括号,数字,小数点&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
        }

        tmp&lt;/span&gt;= line.right(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tmp.length()==&lt;span&gt;2&lt;/span&gt;)          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面不能连续有两次加减乘除&lt;/span&gt;&lt;span&gt;
        {
             &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tmp[&lt;span&gt;0&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;||tmp[&lt;span&gt;0&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;||tmp[&lt;span&gt;0&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;||tmp[&lt;span&gt;0&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tmp[&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;||tmp[&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;||tmp[&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;||tmp[&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                             &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
        }
         line&lt;/span&gt;+=&lt;span&gt;text;
         bracket_cnt&lt;/span&gt;++&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(text==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;右括号&lt;/span&gt;&lt;span&gt;
    {
        QString tmp&lt;/span&gt;= line.right(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(bracket_cnt==&lt;span&gt;0&lt;/span&gt;)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面没有左括号&lt;/span&gt;
           &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(tmp.length())             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面不能为:加减乘除,小数点,左括号&lt;/span&gt;&lt;span&gt;
        {
           &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(MatchingBoth(tmp,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+-*/.(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)!= -&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;查找加减乘除,小数点,左括号&lt;/span&gt;&lt;span&gt;
           {
               &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
           }
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;右括号前面不能为空&lt;/span&gt;
           &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;

        line&lt;/span&gt;+=&lt;span&gt;text;
        bracket_cnt&lt;/span&gt;--&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(text==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;&amp;lt;-&lt;/span&gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(line.length())
        line.chop(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(text==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;清空&lt;/span&gt;&lt;span&gt;
    {
        line.clear();
        bracket_cnt&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(text==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;amp;&amp;amp;&lt;span&gt; line.length())
    {
        QString ret&lt;/span&gt;=&lt;span&gt;mDec.Result(line);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ret==NULL)   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;除数为0&lt;/span&gt;&lt;span&gt;
        {
            line &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            line &lt;/span&gt;+=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;除数不能为0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(ret==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
         {
            line &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            line &lt;/span&gt;+=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;格式出错&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
         }
         &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
         {
             line &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
             line &lt;/span&gt;+=&lt;span&gt; ret;
         }
        ClearLine &lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    }
    mline&lt;/span&gt;-&amp;gt;&lt;span&gt;setText(line);
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; QCalculatorUI::show()              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示窗口&lt;/span&gt;&lt;span&gt;
{
    QWidget::show();
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;-&amp;gt;setFixedSize(&lt;span&gt;this&lt;/span&gt;-&amp;gt;width(),&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;height());
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2 与逻辑相关的用QCalculatorDec类实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;QCalculatorDec.h代码如下:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#ifndef QCALCULATORDEC_H
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; QCALCULATORDEC_H&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QString&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QStack&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QQueue&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QDebug&amp;gt;&lt;br/&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; QCalculatorDec
{
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
    QQueue&lt;/span&gt;&amp;lt;QString&amp;gt; Split(&lt;span&gt;const&lt;/span&gt; QString&amp;amp; exp);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;分离前缀&lt;/span&gt;&lt;span&gt;
    QQueue&lt;/span&gt;&amp;lt;QString&amp;gt; Transfer(QQueue&amp;lt;QString&amp;gt;&amp;amp; exp);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将中缀队列转换为后缀队列&lt;/span&gt;&lt;span&gt;
    QString Calculate(QQueue&lt;/span&gt;&amp;lt;QString&amp;gt;&amp;amp; exp);            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将后缀队列计算出结果&lt;/span&gt;
&lt;span&gt;
    QString Calculate(QString&lt;/span&gt;&amp;amp; l,QString&amp;amp; op,QString&amp;amp;&lt;span&gt; r );
    QString ValidNum(QString str);

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
    QCalculatorDec();
    QString Result(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; QString&amp;amp;&lt;span&gt; exp);
};

&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; QCALCULATORDEC_H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;QCalculatorDec.cpp代码如下:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
#include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QCalculatorDec.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

QCalculatorDec::QCalculatorDec()
{
}

QQueue&lt;/span&gt;&amp;lt;QString&amp;gt; QCalculatorDec::Split(&lt;span&gt;const&lt;/span&gt; QString&amp;amp; exp)          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;分离前缀&lt;/span&gt;&lt;span&gt;
{
    QQueue&lt;/span&gt;&amp;lt;QString&amp;gt;&lt;span&gt; ret;
    QString num&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;exp.length();i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( (exp[i]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) || ( (exp[i]&amp;gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &amp;amp;&amp;amp; (exp[i]&amp;lt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) ))    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断小数点和数字&lt;/span&gt;&lt;span&gt;
        {
            num &lt;/span&gt;+=&lt;span&gt; exp[i];
        }

        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(exp[i]== &lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || exp[i]== &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || exp[i]== &lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || exp[i]== &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;  )
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;num.isEmpty())
            {
                ret.enqueue(num);        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将数字入队列&lt;/span&gt;&lt;span&gt;
                num.clear();
            }
            ret.enqueue(exp[i]);
        }

        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(exp[i]== &lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || exp[i]== &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; + - 需要特殊处理&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i==&lt;span&gt;0&lt;/span&gt;)       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;表达式开头,说明是正负号&lt;/span&gt;&lt;span&gt;
            {
             num&lt;/span&gt;+=&lt;span&gt; exp[i];
            }

            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(exp[i-&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || exp[i-&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || exp[i-&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || exp[i-&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || exp[i-&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            {
             num&lt;/span&gt;+=&lt;span&gt; exp[i];
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;否则是加减运算符&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;num.isEmpty())
                {
                    ret.enqueue(num);        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将数字入队列&lt;/span&gt;&lt;span&gt;
                    num.clear();
                }
             ret.enqueue(exp[i]);
            }
        }
    }

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!num.isEmpty())         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历完成,判断是否还有数字&lt;/span&gt;&lt;span&gt;
    {
        ret.enqueue(num);
        num.clear();
    }
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
}

QQueue&lt;/span&gt;&amp;lt;QString&amp;gt; QCalculatorDec::Transfer(QQueue&amp;lt;QString&amp;gt;&amp;amp; exp)     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将中缀队列转换为后缀队列&lt;/span&gt;&lt;span&gt;
{
    QStack&lt;/span&gt;&amp;lt;QString&amp;gt;&lt;span&gt; stack;
    QQueue&lt;/span&gt;&amp;lt;QString&amp;gt;&lt;span&gt; ret;
    &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; num_ok;
    QString symbol;

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;exp.isEmpty())
    {
      symbol &lt;/span&gt;= exp.dequeue();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;出队列&lt;/span&gt;&lt;span&gt;
      symbol.toDouble(&lt;/span&gt;&amp;amp;&lt;span&gt;num_ok);

      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(num_ok==&lt;span&gt;true&lt;/span&gt;)          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数字&lt;/span&gt;&lt;span&gt;
      {
           stack.push(symbol);
      }

      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(symbol==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;||symbol==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      {
          &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(!stack.isEmpty() &amp;amp;&amp;amp;(stack.top()!=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
          {
              ret.enqueue(stack.pop());     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取出栈顶运算符并入队列&lt;/span&gt;&lt;span&gt;
          }
          stack.push(symbol);
      }

      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(symbol==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;||symbol==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      {
          &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(!stack.isEmpty() &amp;amp;&amp;amp; (stack.top()!=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &amp;amp;&amp;amp; (stack.top()!=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &amp;amp;&amp;amp; (stack.top()!=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
          {
              ret.enqueue(stack.pop());     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取出栈顶运算符并入队列&lt;/span&gt;&lt;span&gt;
          }
          stack.push(symbol);
      }

      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(symbol == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      {
         stack.push(symbol);
      }

      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(symbol ==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      {
          &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(!stack.isEmpty() &amp;amp;&amp;amp; (stack.top()!=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
          {
              ret.enqueue(stack.pop());     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取出栈顶运算符并入队列&lt;/span&gt;&lt;span&gt;
          }
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(stack.top()==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            stack.pop();
      }
    }

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(!stack.isEmpty()&amp;amp;&amp;amp; (stack.top()!=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;))         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历完成,判断栈里是否为空&lt;/span&gt;&lt;span&gt;
    {
       ret.enqueue(stack.pop());     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取出栈顶运算符并入队列&lt;/span&gt;&lt;span&gt;
    }&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
}

QString QCalculatorDec::ValidNum(QString str)
 {
    QString num;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(str.indexOf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)== -&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是否小数&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; str;

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(str.length()&amp;gt;&lt;span&gt;1&lt;/span&gt;)   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;避免0被去掉&lt;/span&gt;&lt;span&gt;
    {
         num&lt;/span&gt;=str.right(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(num==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;||num==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
         {
             str.chop(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
             &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(num==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                 &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;  str;
         }
         &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; str;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; str;
}

QString QCalculatorDec::Calculate(QString&lt;/span&gt;&amp;amp; l,QString&amp;amp; op,QString&amp;amp;&lt;span&gt; r )
{
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; left,right,res;
    QString ret&lt;/span&gt;=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
    left &lt;/span&gt;=&lt;span&gt; l.toDouble();
    right &lt;/span&gt;=&lt;span&gt; r.toDouble();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(op == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    {
        res &lt;/span&gt;= left +&lt;span&gt; right;
    }

    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(op == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    {
        res &lt;/span&gt;= left -&lt;span&gt; right;
    }

    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(op == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    {
        res &lt;/span&gt;= left *&lt;span&gt; right;
    }

    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(op == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( (right&amp;gt;(-&lt;span&gt;0.000000000000001&lt;/span&gt;)) &amp;amp;&amp;amp; (right&amp;lt;(&lt;span&gt;0.000000000000001&lt;/span&gt;)) )   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断除数为0&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            res &lt;/span&gt;= left/&lt;span&gt;right;
    }

    ret.sprintf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,res);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
}

QString QCalculatorDec::Calculate(QQueue&lt;/span&gt;&amp;lt;QString&amp;gt;&amp;amp; exp)            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将后缀队列计算出结果&lt;/span&gt;&lt;span&gt;
{
    QStack&lt;/span&gt;&amp;lt;QString&amp;gt;&lt;span&gt; stack;
    QString symbol,L,R,op,ret;
    &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; num_ok;

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;exp.isEmpty())
    {
      symbol &lt;/span&gt;= exp.dequeue();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;出队列&lt;/span&gt;&lt;span&gt;
      symbol.toDouble(&lt;/span&gt;&amp;amp;&lt;span&gt;num_ok);

      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(num_ok==&lt;span&gt;true&lt;/span&gt;)      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数字&lt;/span&gt;&lt;span&gt;
      {
        stack.push(symbol);
      }
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;运算符&lt;/span&gt;&lt;span&gt;
      {
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(stack.size()&amp;lt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
              &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

          R&lt;/span&gt;=&lt;span&gt; stack.pop();
          L&lt;/span&gt;=&lt;span&gt; stack.pop();
          ret &lt;/span&gt;=&lt;span&gt; Calculate(L,symbol,R );
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ret==&lt;span&gt;NULL)
              &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;

          stack.push(ret);
      }
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(stack.size()==&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历完成,结果只有一个&lt;/span&gt;&lt;span&gt;
    {
         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ValidNum(stack.pop());
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    {&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    }
}

QString QCalculatorDec::Result(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; QString&amp;amp;&lt;span&gt; exp)
{
      QQueue&lt;/span&gt;&amp;lt;QString&amp;gt; q=Split(exp); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;分离中缀&lt;/span&gt;&lt;span&gt;
      q&lt;/span&gt;=Transfer(q);                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;转换为后缀&lt;/span&gt;
      &lt;span&gt;return&lt;/span&gt; Calculate(q);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回结果&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.3 main.cpp代码如下&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
#include &amp;lt;QtGui&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QCalculatorUI.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QCalculatorDec.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;char&lt;/span&gt;*&lt;span&gt; argv[])
{
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;设置字体为GBK&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    QTextCodec &lt;/span&gt;*codec = QTextCodec::codecForName(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GBK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    QTextCodec::setCodecForTr(codec);
    QTextCodec::setCodecForLocale(codec);
    QTextCodec::setCodecForCStrings(codec);

    QApplication app(argc,argv);
    QCalculatorUI&lt;/span&gt;* ui =&lt;span&gt; QCalculatorUI::NewIntance();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ui==&lt;span&gt;NULL)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

    ui&lt;/span&gt;-&amp;gt;&lt;span&gt;show();
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; app.exec();&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 21 Apr 2018 07:01:00 +0000</pubDate>
<dc:creator>LifeYx</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lifexy/p/8901369.html</dc:identifier>
</item>
<item>
<title>[原创]手把手教你写网络爬虫（5）：PhantomJS实战 - tuohai666</title>
<link>http://www.cnblogs.com/tuohai666/p/8901370.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tuohai666/p/8901370.html</guid>
<description>
&lt;p&gt;手把手教你写网络爬虫（5）&lt;/p&gt;
&lt;p&gt;作者：拓海&lt;/p&gt;
&lt;p&gt;摘要：从零开始写爬虫，初学者的速成指南！&lt;/p&gt;
&lt;p&gt;封面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368640/201804/1368640-20180421145013804-1460484474.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;大家好！从今天开始，我要与大家一起打造一个属于我们自己的分布式爬虫平台，同时也会对涉及到的技术进行详细介绍。大家如果有什么好的想法请多留言，多提意见，一起来完善我们的爬虫平台。在正式介绍平台之前，先用一些篇幅对基础篇做一点补充。&lt;/p&gt;

&lt;h3&gt;模拟滚动&lt;/h3&gt;
&lt;p&gt;这次的目标是爬一个众筹网站的所有项目，项目列表页如下：&lt;a href=&quot;https://www.kaistart.com/project/more.html&quot;&gt;https://www.kaistart.com/project/more.html&lt;/a&gt;。打开后进行分析，页面显示出10个项目：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368640/201804/1368640-20180421145044061-1135593974.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如果想看到更多项目，并不能像网易云音乐那样点“下一页”翻页，而是需要向下拉滚动条或者向下滚动鼠标滚轮来触发异步请求。爬虫该如何应对这种情况呢？我们可以使用selenium的api执行js代码将屏幕内容滚动到指定位置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368640/201804/1368640-20180421145105558-1997373305.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下面这段代码会一直向下滚动项目页，一直到滚不动为止：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 一直滚动到最底部&lt;/span&gt;
js1 = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;return document.body.scrollHeight&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
js2 &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;window.scrollTo(0, document.body.scrollHeight)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
old_scroll_height &lt;/span&gt;=&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;while&lt;/span&gt; browser.execute_script(js1) &amp;gt;=&lt;span&gt; old_scroll_height:
    old_scroll_height &lt;/span&gt;=&lt;span&gt; browser.execute_script(js1)
    browser.execute_script(js2) 
    time.sleep(&lt;/span&gt;1)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;scrollTo() 方法可把内容滚动到指定的坐标:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;132&quot;&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;421&quot;&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;132&quot;&gt;
&lt;p&gt;xpos&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;421&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;必需。要在窗口文档显示区左上角显示的文档的 x 坐标。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;132&quot;&gt;
&lt;p&gt;ypos&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;421&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;必需。要在窗口文档显示区左上角显示的文档的 y 坐标。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;这里用到了scrollHeight，它和ClientHeight还有OffsetHeight有什么区别呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368640/201804/1368640-20180421145349986-2125803760.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;offsetHeight&lt;/strong&gt;： 包括内容可见部分的高度，border，可见的padding，水平方向的scrollbar（如果存在）；不包括margin。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;clientHeight&lt;/strong&gt;： 包括内容可见部分的高度，可见的padding；不包括border，水平方向的scrollbar，margin。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;scrollHeight&lt;/strong&gt;： 包括内容的高度（可见与不可见），padding（可见与不可见）；不包括border，margin。&lt;/p&gt;

&lt;h3&gt;Chrome&lt;/h3&gt;
&lt;p&gt;代码写好了，接下来就用selenium+phantomJs大法实验一下！滚到底后把项目列表提取出来看一下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
browser =&lt;span&gt; webdriver.PhantomJs()
url &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.kaistart.com/project/more.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
    browser.get(url)
    wait &lt;/span&gt;= ui.WebDriverWait(browser, 20&lt;span&gt;)
    wait.until(&lt;/span&gt;&lt;span&gt;lambda&lt;/span&gt; dr: dr.find_element_by_class_name(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;project-detail&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).is_displayed())

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 一直滚动到最底部&lt;/span&gt;
    js1 = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;return document.body.scrollHeight&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    js2 &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;window.scrollTo(0, document.body.scrollHeight)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    old_scroll_height &lt;/span&gt;=&lt;span&gt; 0
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; browser.execute_script(js1) &amp;gt;=&lt;span&gt; old_scroll_height:
        old_scroll_height &lt;/span&gt;=&lt;span&gt; browser.execute_script(js1)
        browser.execute_script(js2) 
        time.sleep(&lt;/span&gt;1&lt;span&gt;)
    sel &lt;/span&gt;= Selector(text=&lt;span&gt;browser.page_source)
    proj_list &lt;/span&gt;= sel.xpath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//li[@class=&quot;project-li&quot;]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;程序运行结束后，显示proje_list里面只有25个元素，而我们自己手动滚的话却有100多个，明显有bug。想定位这个问题很简单，截图即可，看看为什么停在第25个项目。对，phantomJs虽然没有图形界面，但是可以截图。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
browser.save_screenshot(debug.png&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样就会把图片保存在项目目录，打开看看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368640/201804/1368640-20180421145627606-111561938.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;发现项目页只能显示一行，这说明网页不兼容phantomJs，这倒不是什么新鲜事，换一个浏览器试试呗。第一期介绍过，selenium是支持所有主流浏览器的。比如换成Chrome，只需改一行代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
browser = webdriver.Chrome()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;再次运行程序，不出所料，Chrome浏览器弹出来，不仅能够正确显示页面，还一直在滚动：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368640/201804/1368640-20180421145731725-1461213160.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;项目全都刷出来了，想爬什么就爬吧！什么？你问我在Linux服务器上怎么爬？纯命令行的那种吗？&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1368640/201804/1368640-20180421145756813-366332939.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;虚拟X Server&lt;/h3&gt;
&lt;p&gt;PhantomJs是无界面浏览器，可以在Linux服务器上正常运行，但Chrome会在调用GUI接口时报错。既然Linux服务器没有图形接口服务，也就是X Server，我们就要虚拟出来一个，才能让Chrome正常运行。于是找到了Xvfb（X virtual frame buffer）,它可以用来作为完整X服务程序的替代。Xvfb有一个Python的封装叫PyVirtualDisplay，我们就用它来解决这个问题。&lt;/p&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;pip install pyvirtualdisplay&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; selenium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; pyvirtualdisplay &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Display

display &lt;/span&gt;= Display(visible=0, size=(800, 600&lt;span&gt;))
display.start()
driver &lt;/span&gt;=&lt;span&gt; webdriver.Chrome()
driver.get(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (driver.page_source.encode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
driver.quit()
display.stop()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行程序后打印出了baidu的页面内容，现在可以完美运行Chrome了。需要补充的是，在Linux上运行Chrome需要额外安装一个ChromeDriver，比较简单，就不详细介绍了。&lt;/p&gt;

&lt;h3&gt;分布式系统&lt;/h3&gt;
&lt;p&gt;既然我们要打造自己的分布式爬虫平台，就要先知道什么是分布式系统，百度百科是这样定义的：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;分布式系统（distributed system）是建立在网络之上的软件系统。正是因为软件的特性，所以分布式系统具有高度的内聚性和透明性。因此，网络和分布式系统之间的区别更多的在于高层软件（特别是操作系统），而不是硬件。内聚性是指每一个数据库分布节点高度自治，有本地的数据库管理系统。透明性是指每一个数据库分布节点对用户的应用来说都是透明的，看不出是本地还是远程。在分布式数据库系统中，用户感觉不到数据是分布的，即用户不须知道关系是否分割、有无副本、数据存于哪个站点以及事务在哪个站点上执行等。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这个定义不太好理解，看看书上怎么说。《分布式系统概念与设计》一书中对分布式系统做了如下定义：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;《分布式系统原理和范型》一书中是这样定义分布式系统的：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像是单个相关系统。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;简单来说就是一群独立计算机集合共同对外提供服务，但是对于系统的用户来说，就像是一台计算机在提供服务一样。分布式意味着可以采用更多的普通计算机（相对于昂贵的大型机）组成分布式集群对外提供服务。计算机越多，CPU、内存、存储资源等也就越多，能够处理的并发访问量也就越大。&lt;/p&gt;
&lt;p&gt;从分布式系统的概念中我们知道，各个主机之间通信和协调主要通过网络进行，所以，分布式系统中的计算机在空间上几乎没有任何限制，这些计算机可能被放在不同的机柜上，也可能被部署在不同的机房中，还可能在不同的城市中，对于大型的网站甚至可能分布在不同的国家。但是，无论空间上如何分布，一个标准的分布式系统应该具有以下几个主要特征：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;透明性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;系统资源被所有计算机共享。每台计算机的用户不仅可以使用本机的资源，还可以使用本分布式系统中其他计算机的资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同一性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;系统中的若干台计算机可以互相协作来完成一个共同的任务，或者说一个程序可以分布在几台计算机上并行地运行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通信性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;系统中的计算机都可以通过通信来交换信息。&lt;/p&gt;

&lt;h3&gt;下一步&lt;/h3&gt;
&lt;p&gt;今天先了解下基本概念，热热身。整个系统的架构及流程留到下次一起奉上。下期再见！&lt;/p&gt;

</description>
<pubDate>Sat, 21 Apr 2018 07:01:00 +0000</pubDate>
<dc:creator>tuohai666</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tuohai666/p/8901370.html</dc:identifier>
</item>
<item>
<title>springboot+shiro+redis项目整合 - 猪点点</title>
<link>http://www.cnblogs.com/caichaoqi/p/8900677.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/caichaoqi/p/8900677.html</guid>
<description>&lt;p&gt;&lt;strong&gt;介绍：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码学和会话管理。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。（&lt;a href=&quot;https://baike.baidu.com/item/shiro/17753571?fr=aladdin&quot; target=&quot;_blank&quot;&gt;摘自百度百科&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;本文使用springboot+mybatisplus＋shiro实现数据库动态的管理用户、角色、权限管理，在本文的最后我会提供源码的下载地址，想看到效果的小伙伴可以直接下载运行就ok了&lt;/p&gt;
&lt;p&gt;因为shiro的功能比较多，本章只介绍如下几个功能&lt;/p&gt;
&lt;p&gt;　　1.当用户没有登陆时只能访问登陆界面&lt;/p&gt;
&lt;p&gt;　　2.当用户登陆成功后，只能访问该用户下仅有的权限&lt;/p&gt;
&lt;p&gt;　　3.一个用户不能两个人同时在线&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、数据库设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　本文的数据库表为5个分别是： 用户表、角色表、权限表、用户角色中间表、角色权限中间表，表的结构和数据项目中会提供（sql和redis工具下方的下载地址中都会有）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1103325/201804/1103325-20180421130226247-878566700.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、引入依赖&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.chaoqi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springboot_mybatisplus&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springboot_mybatisplus&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.0.0.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-jdbc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis.spring.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;runtime&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; reids &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-redis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;添加jsp依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-tomcat&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.tomcat.embed&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;tomcat-embed-jasper&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; SpringBoot - MyBatis 逆向工程 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis.generator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-generator-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; MyBatis 通用 Mapper &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;tk.mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mapper-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.1.4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; shiro &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.shiro&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;shiro-spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.4.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.shiro&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;shiro-ehcache&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.4.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; shiro+redis缓存插件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.crazycake&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;shiro-redis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.4.2.1-RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; fastjson阿里巴巴jSON处理器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;fastjson&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.13&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;工具类&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.commons&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-lang3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis.generator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-generator-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configurationFile&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;src/main/resources/generatorConfig.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configurationFile&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;verbose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;verbose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;overwrite&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;overwrite&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;executions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;execution&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Generate MyBatis Artifacts&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;goals&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;goal&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;generate&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;goal&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;goals&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;execution&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;executions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis.generator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-generator-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;tk.mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mapper&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.5.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 三、编辑application.yml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server:
  port: 8080

spring:
  mvc:
    view:
      prefix: /WEB-INF/jsp/
      suffix: .jsp
  datasource:
    url: jdbc:mysql://localhost:3306/shiro?characterEncoding=UTF-8&lt;/span&gt;&lt;span&gt;&amp;amp;useUnicode&lt;/span&gt;=true&lt;span&gt;&amp;amp;useSSL&lt;/span&gt;&lt;span&gt;=false
    username: root
    password: 123456
    driver-class-name: com.mysql.jdbc.Driver

  redis:
    host: localhost
    port: 6379
    jedis:
      pool:
        max-idle: 8
        min-idle: 0
        max-active: 8
        max-wait: -1
    timeout: 0

mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.chaoqi.springboot_mybatisplus.domain&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 四、创建ShiroConfig配置&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.chaoqi.springboot_shiro_redis.config;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.chaoqi.springboot_shiro_redis.secutity.KickoutSessionControlFilter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.chaoqi.springboot_shiro_redis.secutity.MyShiroRealm;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.mgt.SecurityManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.spring.LifecycleBeanPostProcessor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.spring.web.ShiroFilterFactoryBean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.web.mgt.DefaultWebSecurityManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.web.session.mgt.DefaultWebSessionManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.crazycake.shiro.RedisCacheManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.crazycake.shiro.RedisManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.crazycake.shiro.RedisSessionDAO;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.Filter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.LinkedHashMap;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;


@Configuration
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ShiroConfig {

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ShiroFilterFactoryBean shiroFilter(SecurityManager securityManager) {
        ShiroFilterFactoryBean shiroFilterFactoryBean &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 没有登陆的用户只能访问登陆页面&lt;/span&gt;
        shiroFilterFactoryBean.setLoginUrl(&quot;/auth/login&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 登录成功后要跳转的链接&lt;/span&gt;
        shiroFilterFactoryBean.setSuccessUrl(&quot;/auth/index&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 未授权界面; ----这个配置了没卵用，具体原因想深入了解的可以自行百度
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/auth/403&quot;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自定义拦截器&lt;/span&gt;
        Map&amp;lt;String, Filter&amp;gt; filtersMap = &lt;span&gt;new&lt;/span&gt; LinkedHashMap&amp;lt;String, Filter&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;限制同一帐号同时在线的个数。&lt;/span&gt;
        filtersMap.put(&quot;kickout&quot;&lt;span&gt;, kickoutSessionControlFilter());
        shiroFilterFactoryBean.setFilters(filtersMap);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 权限控制map.&lt;/span&gt;
        Map&amp;lt;String, String&amp;gt; filterChainDefinitionMap = &lt;span&gt;new&lt;/span&gt; LinkedHashMap&amp;lt;String, String&amp;gt;&lt;span&gt;();
        filterChainDefinitionMap.put(&lt;/span&gt;&quot;/css/**&quot;, &quot;anon&quot;&lt;span&gt;);
        filterChainDefinitionMap.put(&lt;/span&gt;&quot;/js/**&quot;, &quot;anon&quot;&lt;span&gt;);
        filterChainDefinitionMap.put(&lt;/span&gt;&quot;/img/**&quot;, &quot;anon&quot;&lt;span&gt;);
        filterChainDefinitionMap.put(&lt;/span&gt;&quot;/auth/login&quot;, &quot;anon&quot;&lt;span&gt;);
        filterChainDefinitionMap.put(&lt;/span&gt;&quot;/auth/logout&quot;, &quot;logout&quot;&lt;span&gt;);
        filterChainDefinitionMap.put(&lt;/span&gt;&quot;/auth/kickout&quot;, &quot;anon&quot;&lt;span&gt;);
        filterChainDefinitionMap.put(&lt;/span&gt;&quot;/**&quot;, &quot;authc,kickout&quot;&lt;span&gt;);
        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; shiroFilterFactoryBean;
    }

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; SecurityManager securityManager() {
        DefaultWebSecurityManager securityManager &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultWebSecurityManager();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置realm.&lt;/span&gt;
&lt;span&gt;        securityManager.setRealm(myShiroRealm());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自定义缓存实现 使用redis&lt;/span&gt;
&lt;span&gt;        securityManager.setCacheManager(cacheManager());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自定义session管理 使用redis&lt;/span&gt;
&lt;span&gt;        securityManager.setSessionManager(sessionManager());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; securityManager;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 身份认证realm; (这个需要自己写，账号密码校验；权限等)
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MyShiroRealm myShiroRealm() {
        MyShiroRealm myShiroRealm &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyShiroRealm();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; myShiroRealm;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * cacheManager 缓存 redis实现
     * 使用的是shiro-redis开源插件
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; RedisCacheManager cacheManager() {
        RedisCacheManager redisCacheManager &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RedisCacheManager();
        redisCacheManager.setRedisManager(redisManager());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; redisCacheManager;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 配置shiro redisManager
     * 使用的是shiro-redis开源插件
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; RedisManager redisManager() {
        RedisManager redisManager &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RedisManager();
        redisManager.setHost(&lt;/span&gt;&quot;localhost&quot;&lt;span&gt;);
        redisManager.setPort(&lt;/span&gt;6379&lt;span&gt;);
        redisManager.setExpire(&lt;/span&gt;1800);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 配置缓存过期时间&lt;/span&gt;
        redisManager.setTimeout(0&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; redisManager.setPassword(password);&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; redisManager;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Session Manager
     * 使用的是shiro-redis开源插件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DefaultWebSessionManager sessionManager() {
        DefaultWebSessionManager sessionManager &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultWebSessionManager();
        sessionManager.setSessionDAO(redisSessionDAO());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sessionManager;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * RedisSessionDAO shiro sessionDao层的实现 通过redis
     * 使用的是shiro-redis开源插件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RedisSessionDAO redisSessionDAO() {
        RedisSessionDAO redisSessionDAO &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RedisSessionDAO();
        redisSessionDAO.setRedisManager(redisManager());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; redisSessionDAO;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 限制同一账号登录同时登录人数控制
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; KickoutSessionControlFilter kickoutSessionControlFilter() {
        KickoutSessionControlFilter kickoutSessionControlFilter &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; KickoutSessionControlFilter();
        kickoutSessionControlFilter.setCacheManager(cacheManager());
        kickoutSessionControlFilter.setSessionManager(sessionManager());
        kickoutSessionControlFilter.setKickoutAfter(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
        kickoutSessionControlFilter.setMaxSession(&lt;/span&gt;1&lt;span&gt;);
        kickoutSessionControlFilter.setKickoutUrl(&lt;/span&gt;&quot;/auth/kickout&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; kickoutSessionControlFilter;
    }


    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;*
     * 授权所用配置
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DefaultAdvisorAutoProxyCreator getDefaultAdvisorAutoProxyCreator() {
        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultAdvisorAutoProxyCreator();
        defaultAdvisorAutoProxyCreator.setProxyTargetClass(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; defaultAdvisorAutoProxyCreator;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;*
     * 使授权注解起作用不如不想配置可以在pom文件中加入
     * &amp;lt;dependency&amp;gt;
     *&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
     *&amp;lt;artifactId&amp;gt;spring-boot-starter-aop&amp;lt;/artifactId&amp;gt;
     *&amp;lt;/dependency&amp;gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; securityManager
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager){
        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthorizationAttributeSourceAdvisor();
        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; authorizationAttributeSourceAdvisor;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Shiro生命周期处理器
     *
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LifecycleBeanPostProcessor getLifecycleBeanPostProcessor() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LifecycleBeanPostProcessor();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;s1&quot;&gt;五、自定义Realm&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.chaoqi.springboot_shiro_redis.secutity;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.chaoqi.springboot_shiro_redis.service.SysRoleService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.chaoqi.springboot_shiro_redis.service.UserService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.chaoqi.springboot_shiro_redis.dao.domain.SysUser;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; org.apache.shiro.authc.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.authz.AuthorizationInfo;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.authz.SimpleAuthorizationInfo;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.realm.AuthorizingRealm;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.subject.PrincipalCollection;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyShiroRealm &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AuthorizingRealm {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; org.slf4j.Logger logger = LoggerFactory.getLogger(MyShiroRealm.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果项目中用到了事物，@Autowired注解会使事物失效，可以自己用get方法获取值&lt;/span&gt;
&lt;span&gt;    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; SysRoleService roleService;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserService userService;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 认证信息.(身份验证) : Authentication 是用来验证用户身份
     *
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authcToken) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AuthenticationException {
        logger.info(&lt;/span&gt;&quot;---------------- 执行 Shiro 凭证认证 ----------------------&quot;&lt;span&gt;);
        UsernamePasswordToken token &lt;/span&gt;=&lt;span&gt; (UsernamePasswordToken) authcToken;
        String name &lt;/span&gt;=&lt;span&gt; token.getUsername();
        String password &lt;/span&gt;=&lt;span&gt; String.valueOf(token.getPassword());
        SysUser user &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SysUser();
        user.setUserName(name);
        user.setPassWord(password);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从数据库获取对应用户名密码的用户&lt;/span&gt;
        SysUser userList =&lt;span&gt; userService.getUser(user);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (userList != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用户为禁用状态&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (userList.getUserEnable() != 1&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DisabledAccountException();
            }
            logger.info(&lt;/span&gt;&quot;---------------- Shiro 凭证认证成功 ----------------------&quot;&lt;span&gt;);
            SimpleAuthenticationInfo authenticationInfo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleAuthenticationInfo(
                    userList, &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户&lt;/span&gt;
                    userList.getPassWord(), &lt;span&gt;//&lt;/span&gt;&lt;span&gt;密码&lt;/span&gt;
                    getName()  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;realm name&lt;/span&gt;
&lt;span&gt;            );
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; authenticationInfo;
        }
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UnknownAccountException();
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 授权
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
        logger.info(&lt;/span&gt;&quot;---------------- 执行 Shiro 权限获取 ---------------------&quot;&lt;span&gt;);
        Object principal &lt;/span&gt;=&lt;span&gt; principals.getPrimaryPrincipal();
        SimpleAuthorizationInfo authorizationInfo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleAuthorizationInfo();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (principal &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; SysUser) {
            SysUser userLogin &lt;/span&gt;=&lt;span&gt; (SysUser) principal;
            Set&lt;/span&gt;&amp;lt;String&amp;gt; roles =&lt;span&gt; roleService.findRoleNameByUserId(userLogin.getId());
            authorizationInfo.addRoles(roles);

            Set&lt;/span&gt;&amp;lt;String&amp;gt; permissions =&lt;span&gt; userService.findPermissionsByUserId(userLogin.getId());
            authorizationInfo.addStringPermissions(permissions);
        }
        logger.info(&lt;/span&gt;&quot;---- 获取到以下权限 ----&quot;&lt;span&gt;);
        logger.info(authorizationInfo.getStringPermissions().toString());
        logger.info(&lt;/span&gt;&quot;---------------- Shiro 权限获取成功 ----------------------&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; authorizationInfo;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;六、限制并发人数登陆&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.chaoqi.springboot_shiro_redis.secutity;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.alibaba.fastjson.JSON;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.chaoqi.springboot_shiro_redis.dao.domain.SysUser;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.cache.Cache;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.cache.CacheManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.session.Session;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.session.mgt.DefaultSessionKey;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.session.mgt.SessionManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.subject.Subject;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.web.filter.AccessControlFilter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.web.util.WebUtils;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.ServletRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.ServletResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.PrintWriter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Deque;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashMap;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.LinkedList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; KickoutSessionControlFilter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AccessControlFilter {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String kickoutUrl; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;踢出后到的地址&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; kickoutAfter = &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;踢出之前登录的/之后登录的用户 默认踢出之前登录的用户&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxSession = 1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;同一个帐号最大会话数 默认1&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SessionManager sessionManager;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Cache&amp;lt;String, Deque&amp;lt;Serializable&amp;gt;&amp;gt;&lt;span&gt; cache;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setKickoutUrl(String kickoutUrl) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.kickoutUrl =&lt;span&gt; kickoutUrl;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setKickoutAfter(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; kickoutAfter) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.kickoutAfter =&lt;span&gt; kickoutAfter;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setMaxSession(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; maxSession) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.maxSession =&lt;span&gt; maxSession;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setSessionManager(SessionManager sessionManager) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sessionManager =&lt;span&gt; sessionManager;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置Cache的key的前缀&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCacheManager(CacheManager cacheManager) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cache = cacheManager.getCache(&quot;shiro_redis_cache&quot;&lt;span&gt;);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; onAccessDenied(ServletRequest request, ServletResponse response) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        Subject subject &lt;/span&gt;=&lt;span&gt; getSubject(request, response);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!subject.isAuthenticated() &amp;amp;&amp;amp; !&lt;span&gt;subject.isRemembered()) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有登录，直接进行之后的流程&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }


        Session session &lt;/span&gt;=&lt;span&gt; subject.getSession();
        SysUser user &lt;/span&gt;=&lt;span&gt; (SysUser) subject.getPrincipal();
        String username &lt;/span&gt;=&lt;span&gt; user.getUserName();
        Serializable sessionId &lt;/span&gt;=&lt;span&gt; session.getId();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取缓存   没有就存入&lt;/span&gt;
        Deque&amp;lt;Serializable&amp;gt; deque =&lt;span&gt; cache.get(username);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果此用户没有session队列，也就是还没有登录过，缓存中没有
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;就new一个空队列，不然deque对象为空，会报空指针&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(deque==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            deque &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; LinkedList&amp;lt;Serializable&amp;gt;&lt;span&gt;();
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果队列里没有此sessionId，且用户没有被踢出；放入队列&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(!deque.contains(sessionId) &amp;amp;&amp;amp; session.getAttribute(&quot;kickout&quot;) == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将sessionId存入队列&lt;/span&gt;
&lt;span&gt;            deque.push(sessionId);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将用户的sessionId队列缓存&lt;/span&gt;
&lt;span&gt;            cache.put(username, deque);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果队列里的sessionId数超出最大会话数，开始踢人&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt;(deque.size() &amp;gt;&lt;span&gt; maxSession) {
            Serializable kickoutSessionId &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(kickoutAfter) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果踢出后者&lt;/span&gt;
                kickoutSessionId =&lt;span&gt; deque.removeFirst();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;踢出后再更新下缓存队列&lt;/span&gt;
&lt;span&gt;                cache.put(username, deque);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;否则踢出前者&lt;/span&gt;
                kickoutSessionId =&lt;span&gt; deque.removeLast();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;踢出后再更新下缓存队列&lt;/span&gt;
&lt;span&gt;                cache.put(username, deque);
            }



            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取被踢出的sessionId的session对象&lt;/span&gt;
                Session kickoutSession = sessionManager.getSession(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultSessionKey(kickoutSessionId));
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(kickoutSession != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置会话的kickout属性表示踢出了&lt;/span&gt;
                    kickoutSession.setAttribute(&quot;kickout&quot;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
                }
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ignore exception&lt;/span&gt;
&lt;span&gt;            }
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果被踢出了，直接退出，重定向到踢出后的地址&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (session.getAttribute(&quot;kickout&quot;) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;会话被踢出了&lt;/span&gt;
            &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;退出登录&lt;/span&gt;
&lt;span&gt;                subject.logout();
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (Exception e) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ignore&lt;/span&gt;
&lt;span&gt;            }
            saveRequest(request);

            Map&lt;/span&gt;&amp;lt;String, String&amp;gt; resultMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是不是Ajax请求&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&quot;XMLHttpRequest&quot;.equalsIgnoreCase(((HttpServletRequest) request).getHeader(&quot;X-Requested-With&quot;&lt;span&gt;))) {
                resultMap.put(&lt;/span&gt;&quot;user_status&quot;, &quot;300&quot;&lt;span&gt;);
                resultMap.put(&lt;/span&gt;&quot;message&quot;, &quot;您已经在其他地方登录，请重新登录！&quot;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出json串&lt;/span&gt;
&lt;span&gt;                out(response, resultMap);
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重定向&lt;/span&gt;
&lt;span&gt;                WebUtils.issueRedirect(request, response, kickoutUrl);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; out(ServletResponse hresponse, Map&amp;lt;String, String&amp;gt;&lt;span&gt; resultMap)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            hresponse.setCharacterEncoding(&lt;/span&gt;&quot;UTF-8&quot;&lt;span&gt;);
            PrintWriter out &lt;/span&gt;=&lt;span&gt; hresponse.getWriter();
            out.println(JSON.toJSONString(resultMap));
            out.flush();
            out.close();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            System.err.println(&lt;/span&gt;&quot;KickoutSessionFilter.class 输出JSON异常，可以忽略。&quot;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;七、异常处理类，拦截未授权页面&lt;/strong&gt;（未授权页面有三种实现方式，我这里使用异常处理）&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.chaoqi.springboot_shiro_redis.exception;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.authz.AuthorizationException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.authz.UnauthorizedException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.http.HttpStatus;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.ControllerAdvice;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.ExceptionHandler;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.ResponseStatus;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 全局异常处理类
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@ControllerAdvice
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CtrlExceptionHandler {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Logger logger = LoggerFactory.getLogger(CtrlExceptionHandler.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;拦截未授权页面&lt;/span&gt;
    @ResponseStatus(value =&lt;span&gt; HttpStatus.FORBIDDEN)
    @ExceptionHandler(UnauthorizedException.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String handleException(UnauthorizedException e) {
        logger.debug(e.getMessage());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;403&quot;&lt;span&gt;;
    }

    @ResponseStatus(value &lt;/span&gt;=&lt;span&gt; HttpStatus.FORBIDDEN)
    @ExceptionHandler(AuthorizationException.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String handleException2(AuthorizationException e) {
        logger.debug(e.getMessage());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;403&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 八、最后附上logincontroller的代码，调用&lt;a href=&quot;http://localhost:8080/auth/login&quot; target=&quot;_blank&quot;&gt;login&lt;/a&gt;就可以调到登陆页面&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.chaoqi.springboot_shiro_redis.web;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.chaoqi.springboot_shiro_redis.dao.domain.SysUser;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.chaoqi.springboot_shiro_redis.utils.RequestUtils;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.lang3.StringUtils;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.SecurityUtils;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.authc.AuthenticationException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.authc.DisabledAccountException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.authc.UsernamePasswordToken;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.subject.Subject;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMethod;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;


@Controller
@RequestMapping(value &lt;/span&gt;= &quot;/auth&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoginController {

    @RequestMapping(value &lt;/span&gt;= &quot;/login&quot;, method =&lt;span&gt; RequestMethod.POST)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String submitLogin(String username, String password, HttpServletRequest request) {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            UsernamePasswordToken token &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UsernamePasswordToken(username, password);
            Subject subject &lt;/span&gt;=&lt;span&gt; SecurityUtils.getSubject();
            subject.login(token);
            SysUser user &lt;/span&gt;=&lt;span&gt; (SysUser) subject.getPrincipal();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (DisabledAccountException e) {
            request.setAttribute(&lt;/span&gt;&quot;msg&quot;, &quot;账户已被禁用&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;login&quot;&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (AuthenticationException e) {
            request.setAttribute(&lt;/span&gt;&quot;msg&quot;, &quot;用户名或密码错误&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;login&quot;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行到这里说明用户已登录成功&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &quot;redirect:/auth/index&quot;&lt;span&gt;;
    }


    @RequestMapping(value &lt;/span&gt;= &quot;/login&quot;, method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String loginPage() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;login&quot;&lt;span&gt;;
    }

    @RequestMapping(value &lt;/span&gt;= &quot;/index&quot;, method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String loginSuccessMessage(HttpServletRequest request) {
        String username &lt;/span&gt;= &quot;未登录&quot;&lt;span&gt;;
        SysUser currentLoginUser &lt;/span&gt;=&lt;span&gt; RequestUtils.currentLoginUser();

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (currentLoginUser != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; StringUtils.isNotEmpty(currentLoginUser.getUserName())) {
            username &lt;/span&gt;=&lt;span&gt; currentLoginUser.getUserName();
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;redirect:/auth/login&quot;&lt;span&gt;;
        }
        request.setAttribute(&lt;/span&gt;&quot;username&quot;&lt;span&gt;, username);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;index&quot;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;被踢出后跳转的页面&lt;/span&gt;
    @RequestMapping(value = &quot;/kickout&quot;, method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String kickOut() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;kickout&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此shiro整合完成，源码下载地址为：&lt;a href=&quot;https://github.com/caicahoqi/ChaoqiIsPrivateLibrary&quot; target=&quot;_blank&quot;&gt;https://github.com/caicahoqi/ChaoqiIsPrivateLibrary&lt;/a&gt; 如果在项目搭建中遇到问题可以在评论区留言，博主看到第一时间会给予回复，谢谢&lt;/p&gt;
</description>
<pubDate>Sat, 21 Apr 2018 07:00:00 +0000</pubDate>
<dc:creator>猪点点</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/caichaoqi/p/8900677.html</dc:identifier>
</item>
<item>
<title>CLR-2-2-引用类型和值类型 - franhome</title>
<link>http://www.cnblogs.com/franhome/p/8901008.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/franhome/p/8901008.html</guid>
<description>&lt;p&gt;&lt;span&gt;引用类型和值类型，是一个老生常谈的问题了。装箱拆箱相信也是猿猿都知，但是还是跟着CLR via C#加深下印象，看有没有什么更加根本和以前被忽略的知识点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;引用类型：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;引用类型有哪些这里不过多赘述，来关心一下它在计算机内部的实际操作，引用类型总是从托管堆分配，线程栈上存储的是指向堆上数据的引用地址，首先确立一下四个事实：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 内存必须从托管堆分配&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 堆上分配成员时，CLR要求你必须有一些额外成员（比如同步块索引，类型对象指针）。这些成员必须初始化。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 对象中的其他字节总是设为零&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 从托管堆上分配对象时，可能强制执行一次垃圾回收&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以引用类型对性能是有显著影响的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;值类型：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;值类型是CLR提供的轻量级类型，它把实际的字段存储在线程栈上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;值类型不受垃圾回收器的限制，所以它的存在缓解了托管堆的压力，也减少了垃圾回收的次数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;值类型都是派生自System.ValueType&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所有值类型都是隐式密封的，目的是防止将值类型作为其他引用类型的基类&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;值类型初始化为空时，默认为0，它不像引用类型是指针，它不会抛出&lt;strong&gt;NullReferenceException&lt;/strong&gt;异常，CLR还为值类型提供了可控类型。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;误区防范：根据我自己的经验，要避免对引用类型值类型赋值的错误认识，我们先需要清楚，定义值类型，引用类型的底层实际操作，下面先根据流程图了解一下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653549/201804/653549-20180421121350329-1624066419.png&quot; alt=&quot;&quot;/&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/653549/201804/653549-20180421121400253-79169434.png&quot; alt=&quot;&quot;/&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/653549/201804/653549-20180421121406102-171787270.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;例子：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SomeRef{&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; x;}
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; SomeVal{&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; x;}
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; staic &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Test
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; SomeRef  r1=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SomeRef();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; SomeVal v1 =&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SomeVal();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; r1.x=&lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; v1.x=&lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; SomeRef  r2=&lt;span&gt;r1;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; SomeVal v2 =&lt;span&gt;v1;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; r1.x=&lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; v1.x=&lt;span&gt;9&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; a=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QWER&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; b=&lt;span&gt;a;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; a=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TYUI&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这样类似的例子，相信只要讲到引用类型，值类型，就一定会见到，继续复习一下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先揭晓几轮复制后的结构：r1.x=8,r2.x=8 v1.x=9 v2.x=5 a=&quot;TYUI&quot; b=&quot;QWER&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;简单分析一下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;r1 ,r2在线程栈上存储的是同一个指向内存堆的地址，当r1值改变时，其实是直接改变内存堆里的内容，自然r1,r2全部变成了8。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而v1,v2是独立存储在线程栈上的，v1值改变时，只是单单改变v1线程栈里的值，自然v2=5,v1=9。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而a，b的值为什么不像上面r1.x一样变化呢，它们不是引用类型吗，这就需要去看看上面的流程图，因为你在给a改变赋值时，其实是在托管堆上开辟了一个新的空间，你传给a的是一个新的地址，而b还指向原来的老地址。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;结合上面的三个图和示例，对于引用类型和值类型构建相信应该有一个清楚的理解了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;使用值类型的一些建议：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;值类型相对于引用类型，性能上更有优势，但是考虑在业务上的问题，值类型一般需要满足下面的全部条件，才是适合定义为值类型：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 类型具有基元类型的行为。也就是说，是十分简单的类型，没有成员会修改类型的任何实例。如果类型没有提供会更改其他字段的成员，就称为&lt;strong&gt;不可变类型&lt;/strong&gt;（immutable）。事实上，对于许多值类型，我们都建议将全部字段标记为&lt;strong&gt;readonly&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 类型不需要从其他类型继承&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 类型不派生出其他类（隐式密封）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;类型大小也应考虑：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为实参默认以传值方式传递，造成对值类型实例中的字段进行复制，如果值类型过于大会对性能造成损害。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同样，当顶一个值类型的方法返回时，实例中的字段会复制到调用者分配的内存，也可能造成性能的损害。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以，必须满足以下任意条件：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 类型实例较小（16字节或更小）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 类型实例较大（大于16字节），但不作为方法实参传递，也不从方法传递&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;值类型的局限：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 值类型有两种形式：未装箱和已装箱，而引用类型一直是已装箱。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 值类型从System.ValueType派生，System.ValueType重写了Equals和GetHashCode方法。生成哈希码时，会将对象的实例字段的值考虑在内。所以定义自己的值类型时，因重写Equals和GetHashCode方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 值类型不能被继承，它自己的方法不能是抽象的，所有都是隐式密封的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 值类型不在内存堆中分配，所以一个实例的方法不再活动时，分配给值类型的内存空间会被释放，而没有垃圾回收机制来处理它。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;值类型的装箱拆箱：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如，ArrayList不断的添加值类型进入数组时，就会发生不断的装箱操作，因为它的Add方法参数是object类型，自然装箱就不可避免，自然也会造成性能的损失(FCL现在提供了泛型集合类，System.Collection.Generic.List&amp;lt;T&amp;gt;,它不需要装箱拆箱操作。使得性能提升不少)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;装箱相关的含义相信不用过多解释，我们来关心一下，内存中的变化，看看它是如何对性能造成影响的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;装箱：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 在托管堆中分配内存。内存大小时值类型各字段所需的内存加上两个额外成员（托管堆所有对象都有）类型对象指针和同步块索引所需的内存量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 值类型的字段值复制到堆内存的空间中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 返回堆上对应的地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后，一个值类型就变成了引用类型。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;拆箱：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 根据引用类型的地址找到堆内存上的值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 将值复制给值类型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;拆箱的代价比装箱小得多&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;装箱拆箱注意点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面通过几个示例，来熟悉一下装箱拆箱的过程，并学会如何避免错误的判定装箱拆箱，CLR via C#这两个实例对装箱拆箱的理解非常有帮助：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Point : IComparable
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Int32 m_x,m_y;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Point(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; y)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             m_x =&lt;span&gt; x;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             m_y =&lt;span&gt; y;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ToString()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; String.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;({0},{1})&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, m_x.ToString(), m_y.ToString());
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; CompareTo(Point p)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Math.Sign(Math.Sqrt(m_x * m_x + m_y * m_y) - Math.Sqrt(p.m_x * p.m_x + p.m_y *&lt;span&gt; p.m_y));          
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; CompareTo(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; obj)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (GetType() !=&lt;span&gt; obj.GetType())
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;o is not a point&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; CompareTo((Point)obj);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        } 
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在栈上创建两个实例&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             Point p1 = &lt;span&gt;new&lt;/span&gt; Point(&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             Point p2 = &lt;span&gt;new&lt;/span&gt; Point(&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用Tostring不装箱&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            Console.WriteLine(p1.ToString());
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用非虚方法GetType装箱&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            Console.WriteLine(p1.GetType());
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用CompareTo,不装箱&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            Console.WriteLine(p1.CompareTo(p2));
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;p1装箱 &lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             IComparable C =&lt;span&gt; p1;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            Console.WriteLine(C.GetType());
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;不装箱，调用的CompareTo（object）&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            Console.WriteLine(p1.CompareTo(C));
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;不装箱，调用的CompareTo（object）&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            Console.WriteLine(p1.CompareTo(p2));&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            Console.ReadKey();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1.调用ToString&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不装箱，因为ToString是从ValueType继承的虚方法，中间没有类型转换的发生，不需要进行装箱，另外注意的是：&lt;span&gt;Equals，GetHashCode,ToString都是从ValueTye继承的虚方法，由于值类型都是密封类，无法派生，所以只要你的值类型重写了这些方法，并没有去调用基类的实现，那么是不会发生装箱的，如果你去调用基类的实现，或者你没有实现这些方法，那么还是可能发生装箱。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.调用GetType&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;GetT&lt;/span&gt;&lt;span&gt;ype是继承自Object，并且不能被重写，所以无论如何&lt;span&gt;值类型对其调用都会发生装箱&lt;span&gt;，另外&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;MemberwiseClone&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;方法也是如此。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3.第一次调用CompareTo方法&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 因为Point里面有了类型为Point的参数CompareTo方法，不会发生装箱操作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.p1转换为ICompable&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;确认过眼神，这一定是一个装箱。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.第二次调用CompareTo方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;虽然这次调用的是参数为object的方法，但是注意的是：首先我们Point实现了这个重载，另外传进去的是个ICompable，自然不会发生装箱&lt;strong&gt;（另外，如果Point本身没有这个方法呢？当然会装箱，因为它不得不去调用父类的方法，而父类是一个引用类型，自然需要进行一次装箱操作）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;6.第三次调用CompareTo方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;c是ICompable，而ICompable在托管堆上也有对应的方法，也不会有装箱发生。&lt;/span&gt;&lt;/p&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 5&lt;/span&gt;  &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; point
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  &lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; m_x,m_y;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     
&lt;span&gt; 9&lt;/span&gt;         pulic point(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; y)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;  &lt;span&gt;     {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;           m_x=&lt;span&gt;x;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;           m_y=&lt;span&gt;y;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;  
&lt;span&gt;15&lt;/span&gt;      &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; change(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; y)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;          m_x=&lt;span&gt;x;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;          m_y=&lt;span&gt;y;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    } 
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;  
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ovveride String ToString()
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;     {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;          &lt;span&gt;return&lt;/span&gt; String.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0},{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,m_x.ToString.m_y.ToString());
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;     } 
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;  
&lt;span&gt;26&lt;/span&gt;  }  
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Main()
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   Point p = &lt;span&gt;new&lt;/span&gt; Point(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;  Console.WriteLine(p);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;   p.Change(&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;  Console.WriteLine(p);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;   Object o=&lt;span&gt;p;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;  Console.WriteLine(o);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;   ((Point) o).Change(&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;  Console.WriteLine(o);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;结果&lt;/strong&gt;：当然是 （1,1）（2,2） （2,2） （2,2） 前面三次的结果很好理解，第四次为什么是（2,2），因为object没有change方法，它等拆箱拆到线程栈新的地址上，于是后面的操作则是在线程栈上进行，对o堆上的内容没有任何影响&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;      internale &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IChangeBoxedPoint
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;  &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;           &lt;span&gt;void&lt;/span&gt; Change(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; y);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;  &lt;span&gt;    } 
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;    &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; point
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  &lt;span&gt;   {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;           &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; m_x,m_y;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;       
&lt;span&gt; 9&lt;/span&gt;           pulic point(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; y)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;      {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;            m_x=&lt;span&gt;x;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;            m_y=&lt;span&gt;y;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;       }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;   
&lt;span&gt;15&lt;/span&gt;       &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; change(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; y)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;     {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;           m_x=&lt;span&gt;x;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;           m_y=&lt;span&gt;y;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;     } 
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;   
&lt;span&gt;21&lt;/span&gt;      &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ovveride String ToString()
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;      {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;           &lt;span&gt;return&lt;/span&gt; String.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0},{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,m_x.ToString.m_y.ToString());
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;      } 
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;   }  
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Main()
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;    Point p =&lt;span&gt;new&lt;/span&gt; p(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;   Console.WriteLine(p);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;    
&lt;span&gt; 6&lt;/span&gt;    p.Change(&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;   Console.WriteLine(p);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;    
&lt;span&gt; 9&lt;/span&gt;    Objec o =&lt;span&gt;p;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;   Console.WriteLine(o);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;    
&lt;span&gt;12&lt;/span&gt;   ((Point) o).Change(&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;  Console.WriteLine(o);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;   
&lt;span&gt;15&lt;/span&gt;   ((IChangeBoxedPoint) p).Change(&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;  Console.WriteLine(p);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;   
&lt;span&gt;18&lt;/span&gt;   ((IChangeBoxedPoint) o).Change(&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;  Console.WriteLine(o);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;结果&lt;/strong&gt;：前面四次的结果应该是显而易见了，（1,1）（2,2） （2,2） （2,2），那么第五次呢，来简单分析一下p装箱为IChangeBoxedPoint,然后把堆上对应的p的m_x,m_y改为4,4，但是对p输出时堆上的内容不仅回收了，而且输出的是原来p线程栈上的内筒，仍然还是刚刚的（2,2）,第六步，o没有任何装箱拆箱操作，当然是预期的（5,5）&lt;/p&gt;
</description>
<pubDate>Sat, 21 Apr 2018 06:19:00 +0000</pubDate>
<dc:creator>franhome</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/franhome/p/8901008.html</dc:identifier>
</item>
<item>
<title>工作一年漫谈 - java工会</title>
<link>http://www.cnblogs.com/jagh/p/aa.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jagh/p/aa.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1371226/201804/1371226-20180421141026417-889823636.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.关于公司&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;br/&gt;公司是做什么的？智慧城市还是软件外包？&lt;br/&gt;我觉得公司分为两种，一种做产品，一种做项目。做产品的公司，老板一般都会讲梦想，情怀。梦想是什么，创造一种新的life style，或者是引导行业的变革，或者是像马斯克一样拯救全人类。做产品的公司，每一件事都应该是围绕money这个主题而来的，比如做这个项目我能赚多少钱，做另一个项目我能拓展一条什么渠道。&lt;br/&gt;这么一对比的话，逼格的差异就出来了！所以特斯拉能够值500多亿美元，而中软国际却只有100多亿港币！逼格带来的就是money，但是人家不谈钱。人家谈的是探索太空，人家谈的是拯救世界。当然了，赚钱并不是一件可耻的事情，不可能人人都是马斯克。&lt;br/&gt;so，我到底在说什么？&lt;br/&gt;我记得王总和我说过，我们公司是两条腿走路，一条腿就是做项目为公司带来可观的money然后支撑另外一条腿，另一条腿就是做自己的产品。but， 什么产品？所以我觉得公司缺少一种让大家都知道我们到底在忙活啥的机制。这就是企业文化，企业情怀，以及每一个员工作为一名互联网人的梦想。这是我要说的第一个重点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.关于个人&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;br/&gt;我在公司的职位，姑且称之为后台开发工程师。这个名字没有任何问题，但是总感觉有点让人不爽。因为一个项目的开发，到我这里来就是埋头苦干，CRUD嘛，然后部署运维（话说为什么我也要部署运维啊）。当然，这些工作都没有问题，干什么不都是干，该自己学习的地方自己找时间学习就是了。&lt;br/&gt;我在公司的人缘，开发人员名字基本都叫的出来，也有几个叫不出来的。非开发人员，名字基本叫不出来。这是我自己的责任，我觉得我没有做好，公司才这么几十个人我一年的时间竟然还有不认识的，更不谈熟不熟的话了。对此我检讨自己50%的责任。另一半责任来自哪里呢？我想了一下，公司的氛围不适合人与人的沟通，公司没有给大家提供沟通的机会。人与人的沟通并不是通过工作，工作的关系始终都是官方了一点。&lt;br/&gt;我有几个小建议：&lt;br/&gt;1.团队活动，羽毛球运动，或者员工生日会，或者其他激励活动&lt;br/&gt;2.技术分享，每周举办一次技术分享或者头脑风暴之类的活动让大家多参与&lt;br/&gt;3.下午茶，下午茶的吃法有很多中，每个人待在位子上默默的吃完这下午茶就只有一个垫肚子的功能了，稍微变动一下形式可能会有意想不到的效果&lt;br/&gt;我在公司的成就，一年来主要参与了几个党建项目和创客的项目，基本上都很顺利，只是有一个上海华数党建的项目确实让人头大，也耗费了太多的时间在上面了。对公司的贡献平平无奇，我会做数据仓库，我能做报表，我还可以做很多其他的东西，但是没什么契机将这些东西带给公司。因为目前的工作确实用不到。&lt;br/&gt;我在公司的收入，年初涨了500块钱，我尴尬症都犯了，原计划满一年的时候和领导谈一下的，这个500有点让人无所适从啊。这是我要说的另一个重点，希望王总再考虑考虑，好歹给我凑个整数，毕竟现在的那个数字不上不下看着好尴尬。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.关于项目&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;br/&gt;这是我要说的第三个重点。我大致向同事们了解了一下，基本上每个项目都要延期，我一开始手上的项目延期我还蛮担心的，有过几个延期的经验之后，羞耻之心就没有了，延期就延期吧！细思极恐啊！为什么每个项目都要延期呢？我无法从全局去观察考究，但是从我这边来看，也能看出一些端倪出来。&lt;br/&gt;1.关于项目个方面的事情都没人交代清楚，比如时间，比如需求，等等都没人来好好交代清楚，我是没搞清楚就开始码代码的。&lt;br/&gt;2.关于考核，大部分公司叫kpi，这玩意儿说实话，大部分人都是深恶痛绝的。我也恨之切切，就不多言。&lt;br/&gt;3.关于协作沟通，以我目前来看，公司的沟通是非常模糊的，杨文瑾要告诉某产品什么东西，他们说清楚了没，产品经理来告诉开发的，这之间的信息又衰减了多少？宋巍和开发团队之间传递，又产生了什么误会。没人知道，反正大家默默写代码就好了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.总结一下&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;br/&gt;以上三点都不重要，重要的是我想涨工资了。哈哈，王总，你先看看我那个数字，今年不知道谁给我调高了500，那个数字谁看着都有点尴尬吧。有人说强迫症患者见不得那个零头，但是如果砍掉那谁都不愿意的，那就只有向上增加这样的需求了。钱这个东西，真是罪恶，害我苦思冥想怎么才好狮子大开口。我有一个小小的建议，让我突破五位数好出去装逼啊。某牛曾经说过，不想当将军的士兵不是好士兵。我只想说，不想涨工资的员工赶紧开了。为了不被开了，我还是滚回去写代码吧！&lt;/p&gt;
&lt;p&gt;BTW，希望公司越来越好，希望自己收入越来越高。&lt;/p&gt;
&lt;p&gt;end&lt;/p&gt;

&lt;p&gt;关注我们“&lt;strong&gt;java工会&lt;/strong&gt;”，与君共勉：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1371226/201804/1371226-20180410110427692-64353989.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 21 Apr 2018 06:11:00 +0000</pubDate>
<dc:creator>java工会</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jagh/p/aa.html</dc:identifier>
</item>
<item>
<title>Android Studio安装、配置、第一个程序的那些坑 - 香哥</title>
<link>http://www.cnblogs.com/BrotherXiang/p/8900609.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/BrotherXiang/p/8900609.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　最近在上Android课&lt;/span&gt;&lt;span&gt;&lt;span&gt;，老师布置了量大题难的作业，然而出师未捷身先死，还没看题目，就被Android Studio的安装和环境配置搞得要死要死的，网上的教程也多也杂，良莠不齐，在经历了5小时通过的搜集试验后，在此总结自己安装配置过程，为以后搞安卓的人能少走一点弯路，也是对自己这么辛苦的一个反思提升。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我下面所总结的，也许随着时间推移，会变得陈旧，没用，但我尽量的从安装配置原理上解释，在技术不变的前提下，希望能对之后配置界面发生改变时无从着手的开发者，有一点启发。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Part 1 —— Android Studio、Android SDK及其对应的安装&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　Android是Google公司领导的，基于Linux开源代码的，用于移动设备的&lt;span&gt;操作系统&lt;/span&gt;，而Android SDK（&lt;a title=&quot;Software development kit&quot; href=&quot;https://en.wikipedia.org/wiki/Software_development_kit&quot;&gt;software development kit&lt;/a&gt;）是调用这个操作系统的一个接口，就像Windows里，点击我的电脑（调用接口）浏览文件一样，SDK不仅提供一些与底层硬件交互的函数，还提供了顶层的组件，像进度条、文本框之类的调用接口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　推荐进入&lt;a href=&quot;http://www.android-studio.org/&quot; target=&quot;_blank&quot;&gt;AndroidS&lt;/a&gt;tudio进行安装，进入网址后，面对这么多的工具可能无从着手，下面会进行一点一点讲解安装。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　推荐上面链接的目的是，Android是Google提供的下载源，然后我大天朝墙了Google，厚如铁石，如果想尝试怀疑人生的下载，非要头铁挂VPN去官网下，那我只能说：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180420221718682-1441349194.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　打开上面工具下载的网址，并且点击Android Studio、和Android SDK的下载链接，因为Android Studio是基于Gradle管理项目的，这个东西在你建立第一个项目的时候会下载，但是速度时快时慢，所以还是从上述网址下载下来好，在查看网页时，会看到SDK Tool，SDK Platform等干扰项，其实只用下载SDK Installer，则Tool，Platform都能通过Installer安装，在后面会讲解Tool ，SDK，Platform到底是个啥（一开始，我也被搞懵了，也没看到有类似的教程），下面是下载截图。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421152722234-1506616276.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421152857920-903288003.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　下载好后，先安装Android SDK，安装Android Studio（不要着急打开Studio，因为笨蛋Studio不会检测系统环境变量，直接叫下下载SDK，反正当时我尝试这样下载SDK没有下载成功，还不是网速问题而是目录有问题，Google都找不到方法解决，最后坚定分开下载的决心）；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下载好SDK后，进入SDK安装目录，里面有两个东西值得注意：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180420225800683-1387878769.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　SDK之前已经说了，AVD（Android Vitrual Device）是在电脑上模拟安卓的虚拟机一般的存在，加上Manager就是管理工具，Android Studio就是通过调用这两个东东搭建的开发集成环境（进行接口调用SDK，使用AVD显示效果），打开SDK Manager，为了提高下载速度，修改镜像源——网址：mirrors.neusoft.edu.cn 端口：80，然后下载&lt;span&gt;默认勾选&lt;/span&gt;的文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180420231832008-2050305124.jpg&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180420232814888-1970826285.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　直接点击close就算保存设置了，然后点击Packages-&amp;gt;reload享受不算慢的速度吧（因为本学校宿舍网能连Google，活动中心上不了（迷之奇怪，难道宿舍和活动中心用的不是一个路由出口商）所以在宿舍我没设镜像也很快，hhhhhhhh），下面参照SDK Manager中的列表，来说主要部件&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;Build-tools——这个东西就是用来链接组织代码用的（像C语言的link，没它build工程很麻烦的）和最好下面的SDK版本相对应&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;SDK Platform组件包，Android程序的调用接口，其本质像C下的dll和Lib文件，Image就是电脑上的虚拟安卓系统安装包。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180420233606937-1024040344.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　然后安装Studio，记住，安装完后不要直接打开，进入Studio的bin目录，找到如下文件，在文件最末尾&lt;span&gt;添加一行&lt;/span&gt;：disable.android.first.run=true，就能跳过引导程序了，进入如下界面。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180420234217236-383462048.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180420234248193-997974990.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180420234532512-1538786844.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　点击最右图右下角的Configure-&amp;gt;Project Default-&amp;gt;Project Structure打开设置界面。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421000747195-904324105.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　上面SDK就填刚才SDK的路径，而JDK的话（已经在安装Android了，不可能没装JAVA╮(╯▽╰)╭）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　配置好基础组件后，就可以开始创建项目了，点击新建项目，一路next（这个特简单，就不展示了），确认建立项目后，就弹出Building。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421001143932-1964950286.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421001700528-952296205.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果你嫌下载速度会很慢，上面已经下载好得Gradle.zip文件就能帮助解决这个问题，仔细看上面右图弹出得Building窗口，其实就是下载前面下载好的zip文件，所以只需将zip文件放在对应位置，就行了【Android Studio 中的Gradle是放在用户路径下管理的】。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421002409578-278488258.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我没下Zip(因为校园网速度快hhhh)，不过它的原理是：将zip文件下载到上面目录（不用解压），然后再建立项目时，就会解压，IDE就接着用（有没有感觉很low ╮(╯▽╰)╭）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在实际安装过程中大家可能会发现，点击新建项目后，在文件夹下生成gradle文件夹名版本和下载版本不匹配，在&lt;a href=&quot;https://blog.csdn.net/fuchaosz/article/details/51567808&quot; target=&quot;_blank&quot;&gt;这篇博文&lt;/a&gt;中有很好的解决办法，就是修改配置文件的事&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421112407182-1371630796.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Part 2 —— Android AVD运行项目&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　上面步骤创建并搭载好了一个Android工程，因为这个工程我是从模板（Empty Activity）创建的，需要将工程加载进安卓环境中展示效果，下面一步一步说我在加载过程遇到的坑 QAQ&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当第一次建立或者重新打开工程时，Android Studio会自动为我们Gradle build（我也不太清楚Gradle是什么，目前暂时认知为：安装管理程序，我们可以从Gradle仓库（当然仓库是个网址）中，通过工程下的配置文件（&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421113338025-123158738.png&quot; alt=&quot;&quot;/&gt;）导入任何第三方库及其依赖，方便我们进行第三方库管理，除此之外，它还会检查项目Build时必须工具的。在build过程中可能出现错误，仔细观察错误信息，我遇到的错误信息是：build-tools需要24版本的，这可以通过Android SDK Manager下载来解决（其实这一步骤应该只用通过Android SDK Manager下载相应工具就能解决）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Build完后，点击执行&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421113518704-816924904.png&quot; alt=&quot;&quot;/&gt;，弹出窗口（有个已经创建好的虚拟机，但目前请忽视它）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421113925464-1511298463.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt; Connected Devices —— 已经在运行的安卓虚拟机，保持虚拟机的运行，以后就不需要每次执行项目都开一个虚拟机&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Available Vitual Devices——能用的安卓虚拟机（没有运行，选中点击ok运行后会出现在connected devices中），通过这个列表，我们可以在不同机型，不同版本的Android虚拟机上执行程序。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;第一次运行程序是没有虚拟机的，这里建议使用Create New Virtual Device建立虚拟机而不是通过与SDK Manager同目录的AVD Manager建立（布吉岛为什么，AVD Manager建立的会出问题，在Android Studio下同样调用这些接口&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421114748773-823907802.png&quot; alt=&quot;&quot;/&gt; 更稳妥些）&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;　　点击新建虚拟机，弹出窗口，新手建议选中带有Play Store的，因为选其他的要可能调各种bug。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421115350598-259521351.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　点击Next后，弹出重要窗口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421115624192-1084524564.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421120302701-1461447994.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　这里的Image就是我们前面通过SDK Manager安装的镜像文件，独立安装过系统的朋友都知道，可以通过将Image刻录在U盘上进行系统安装，在选择Image时&lt;span&gt;注意，选择一个导致右图的AVD黑屏的配置后，可以通过降低API版本来达到正常显示&lt;/span&gt;，再三提醒，在没有Image时，通过SDK Manager来安装，安装完后，点击上面窗口下的刷新按钮就能看到刚才下载的镜像，除此之外，还要进行一些配置，因为我们版本降低的原因，比如：我做的时候将image版本从27降到25，需要修改build.gradle文件，下面几个值，大家随意修改，直到有能正常编译并展示在AVD中的配置为止（我是只修改了targetSdkVersion：27-&amp;gt;25，对于这样的更改，&lt;span&gt;加载进虚拟机时会出现签名错误，需要依次点击&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421123239531-12570625.png&quot; alt=&quot;&quot;/&gt;才行&lt;/span&gt;&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421120557896-1912966837.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　一路Next后，我们创建好了虚拟机，但点击执行时，却要求我们装HAMX，这个东西，是Intel CPU才能使用的技术，其他CPU不知道怎么办，安装这个东西的办法是：通过SDK Manager安装(然而Manager提示与Windows不兼容不能下载，其实并非不兼容╮(╯▽╰)╭，我用后面的方法也能解决问题)，还可以通过&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-hardware-accelerated-execution-manager-intel-haxm&quot; target=&quot;_blank&quot;&gt;官网下载&lt;/a&gt;安装包进行安装。哦，对了，HAMX需要电脑开启虚拟化技术——在电脑开机时按F2进入Bios打开（这个简单，自行百度，不过一般玩过Vitrual Box的都知道怎么开启，如果你能正常运行程序【像下面那样】的话，那就不用管了）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　至此，我遇到的问题及解决方法已经说完了，创建虚拟机后，搭配好环境后，点击执行，出现如下页面，代表你虚拟机能成功运行，你的项目能在虚拟机上运行（二者是独立的，虚拟机能运行，不代表项目能运行）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　注意虚拟机不是你一点执行就能加载你的项目，需要先虚拟化出虚拟机，再安装你的项目，第一次打开虚拟机需要等待1~3min，等待下面这玩意加载完&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421122027621-966992105.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345048/201804/1345048-20180421122228260-80838489.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　大家在安装过程中有遇到什么问题，欢迎留言评论区，如果我能看到，尽量解答，让大家少走一些弯路。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 21 Apr 2018 04:40:00 +0000</pubDate>
<dc:creator>香哥</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/BrotherXiang/p/8900609.html</dc:identifier>
</item>
</channel>
</rss>