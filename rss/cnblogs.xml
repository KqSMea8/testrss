<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>aaaa - 这一盘是姜</title>
<link>http://www.cnblogs.com/ppansj/p/7954452.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ppansj/p/7954452.html</guid>
<description>[unable to retrieve full-text content]# -*- encoding:utf-8 -*-from selenium import webdriverdriver = webdriver.Chrome()driver.get('http://www.baidu.com')driver.save_screenshot('bai.png')de...</description>
<pubDate>Sat, 02 Dec 2017 07:40:00 +0000</pubDate>
<dc:creator>这一盘是姜</dc:creator>
<dc:identifier>http://www.cnblogs.com/ppansj/p/7954452.html</dc:identifier>
</item>
<item>
<title>算法帖——用舞蹈链算法（Dancing Links）求解俄罗斯方块覆盖问题 - 万仓一黍</title>
<link>http://www.cnblogs.com/grenet/p/7903680.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/grenet/p/7903680.html</guid>
<description>&lt;p&gt;问题的提出：如下图，用13块俄罗斯方块覆盖8*8的正方形。如何用计算机求解？&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/93227/201711/93227-20171127132509034-1325126401.png&quot;&gt;&lt;img title=&quot;254t&quot; src=&quot;https://images2018.cnblogs.com/blog/93227/201711/93227-20171127132509284-1175781905.png&quot; alt=&quot;254t&quot; width=&quot;320&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解决这类问题的方法不一而足，然而核心思想都是穷举法，不同的方法仅仅是对穷举法进行了优化&lt;/p&gt;

&lt;p&gt;用13块不同形状的俄罗斯方块（每个方块只能使用一次）覆盖住棋盘，很容易就想到这是“精确覆盖问题”（13个俄罗斯方块完全覆盖住8*8的正方形）。而舞蹈链算法（Dancing Links）是比较好求解“精确覆盖问题”的算法，因为该算法在穷举的过程中，不再额外增加空间负担，状态的回溯也比较方便，能快捷的排除无效的穷举过程。有关舞蹈链算法（Dancing Links），在这里不再赘述，详情参看“&lt;a href=&quot;http://www.cnblogs.com/grenet/p/3145800.html&quot;&gt;跳跃的舞者，舞蹈链（Dancing Links）算法——求解精确覆盖问题&lt;/a&gt;”&lt;/p&gt;

&lt;p&gt;用舞蹈链算法（Dancing Links）解决问题的核心是把问题转换为问题矩阵&lt;/p&gt;

&lt;p&gt;很直观的，这样的矩阵一共有77列，其中第1-64列表示8*8正方形的每一个单元格，第65-77列代表方块的编号&lt;/p&gt;
&lt;p&gt;这样求解出来的解就是正方形的每一个单元格都有方块填充，每个方块都被使用了一次&lt;/p&gt;

&lt;p&gt;以上图为例，我把左下角的深绿色的方块定义为方块1，而这个深绿色方块又占用了第49、57、58、59、60单元格&lt;/p&gt;
&lt;p&gt;那么这个深绿色的方块所构造的数据行就是如下表示&lt;/p&gt;
&lt;p&gt;{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0}&lt;/p&gt;

&lt;p&gt;为了方便描述，我们把上面的行矩阵记作｛49，57、58、59、60、65｝&lt;/p&gt;

&lt;p&gt;而我们要做的就是，构造出所有的数据行&lt;/p&gt;

&lt;p&gt;先把如下图方块1的所有能在的位置做成数据行&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144924386-1490296328.png&quot;&gt;&lt;img title=&quot;S1-1&quot; src=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144924573-1376629697.png&quot; alt=&quot;S1-1&quot; width=&quot;320&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;则一共能有7行*5列=35种可能&lt;/p&gt;

&lt;p&gt;同时，巧妙利用中心旋转的算法，分别得出旋转90度、180度、270度的位置可能&lt;/p&gt;
&lt;p&gt;如下所示&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144924714-1798886709.png&quot;&gt;&lt;img title=&quot;S1-2&quot; src=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144924870-930762539.png&quot; alt=&quot;S1-2&quot; width=&quot;320&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;旋转90度的图&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144925011-1681289139.png&quot;&gt;&lt;img title=&quot;S1-3&quot; src=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144925136-261114481.png&quot; alt=&quot;S1-3&quot; width=&quot;320&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;旋转180度的图&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144925323-1557113447.png&quot;&gt;&lt;img title=&quot;S1-4&quot; src=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144925526-767692953.png&quot; alt=&quot;S1-4&quot; width=&quot;320&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;旋转270度的图&lt;/p&gt;

&lt;p&gt;这样一来，只需要遍历最先图的形状位置即可，其余旋转的形状的可以依次推导。&lt;/p&gt;
&lt;p&gt;上面的形状还有一个如下图的，需要遍历&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144925698-935167995.png&quot;&gt;&lt;img title=&quot;S2-1&quot; src=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144925886-501154839.png&quot; alt=&quot;S2-1&quot; width=&quot;320&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这样一来，这个形状1的所有位置就遍历完成了。&lt;/p&gt;

&lt;p&gt;依次遍历13个形状，这样就生成了问题矩阵的所有行&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;

&lt;div readability=&quot;337&quot;&gt;&lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetris&lt;/span&gt;&lt;br/&gt;         &lt;span class=&quot;cf1&quot;&gt;Implements&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;I_Question&lt;/span&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Private&lt;/span&gt; _Shapes &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;cf1&quot;&gt;Of&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;)&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;Private&lt;/span&gt; _Index() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;ReadOnly&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Property&lt;/span&gt; Cols &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Implements&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;I_Question&lt;/span&gt;.Cols&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Get&lt;/span&gt;&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Return&lt;/span&gt; 77&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Get&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Property&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Function&lt;/span&gt; ConvertFromDance(Answer() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;) &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Implements&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;I_Question&lt;/span&gt;.ConvertFromDance&lt;br/&gt;        &lt;span class=&quot;cf2&quot;&gt;Debug&lt;/span&gt;.Print(Answer.Length)&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; tBmp &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;Bitmap&lt;/span&gt;(320, 320)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; tG &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;Graphics&lt;/span&gt; = &lt;span class=&quot;cf2&quot;&gt;Graphics&lt;/span&gt;.FromImage(tBmp)&lt;/p&gt;&lt;p&gt;        tG.Clear(&lt;span class=&quot;cf2&quot;&gt;Color&lt;/span&gt;.White)&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; I &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; Answer.Length - 1&lt;/p&gt;&lt;p&gt;            _Shapes(_Index(Answer(I) - 1)).DrawShape(tG)&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Return&lt;/span&gt; tBmp&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Function&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;ReadOnly&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Property&lt;/span&gt; ExtraCols &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Implements&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;I_Question&lt;/span&gt;.ExtraCols&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Get&lt;/span&gt;&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Return&lt;/span&gt; 77&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Get&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Property&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt; ConvertToDance(Dance &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsDancingLinksImproveNoRecursive&lt;/span&gt;) &lt;span class=&quot;cf1&quot;&gt;Implements&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;I_Question&lt;/span&gt;.ConvertToDance&lt;br/&gt;        _Shapes = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;cf1&quot;&gt;Of&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; I &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, J &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; tShape &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;, tRotateShape &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; S &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf3&quot;&gt;'Shape 1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 6&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 4&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(1, S, S + 1, S + 2, S + 3, S + 8)&lt;/p&gt;&lt;p&gt;                AppendAllShapes(Dance, tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 6&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 4&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(1, S, S + 8, S + 9, S + 10, S + 11)&lt;/p&gt;&lt;p&gt;                AppendAllShapes(Dance, tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf3&quot;&gt;'Shape 2&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(2, S, S + 1, S + 9, S + 10, S + 18)&lt;/p&gt;&lt;p&gt;                AppendAllShapes(Dance, tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf3&quot;&gt;'Shape3&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(3, S, S + 1, S + 9, S + 10, S + 17)&lt;/p&gt;&lt;p&gt;                AppendAllShapes(Dance, tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 1 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 6&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(3, S, S + 1, S + 7, S + 8, S + 16)&lt;/p&gt;&lt;p&gt;                AppendAllShapes(Dance, tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf3&quot;&gt;'Shape 4&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(4, S, S + 1, S + 2, S + 8, S + 16)&lt;/p&gt;&lt;p&gt;                AppendAllShapes(Dance, tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf3&quot;&gt;'Shape5&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 6&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 4&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(5, S, S + 1, S + 2, S + 10, S + 11)&lt;/p&gt;&lt;p&gt;                AppendAllShapes(Dance, tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 6&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 1 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(5, S, S + 1, S + 2, S + 7, S + 8)&lt;/p&gt;&lt;p&gt;                AppendAllShapes(Dance, tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf3&quot;&gt;'Shape6&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(6, S, S + 8, S + 9, S + 10, S + 18)&lt;/p&gt;&lt;p&gt;                _Shapes.Add(tShape)&lt;/p&gt;&lt;p&gt;                tRotateShape = tShape.Rotate90&lt;br/&gt;                _Shapes.Add(tRotateShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 2 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 7&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(6, S, S + 6, S + 7, S + 8, S + 14)&lt;/p&gt;&lt;p&gt;             &lt;br/&gt;                _Shapes.Add(tShape)&lt;/p&gt;&lt;p&gt;                tRotateShape = tShape.Rotate90&lt;br/&gt;                _Shapes.Add(tRotateShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf3&quot;&gt;'Shape 7&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(7, S, S + 1, S + 2, S + 9, S + 17)&lt;/p&gt;&lt;p&gt;                AppendAllShapes(Dance, tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf3&quot;&gt;'Shape 8&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 6&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(8, S, S + 1, S + 2, S + 8, S + 9)&lt;/p&gt;&lt;p&gt;                AppendAllShapes(Dance, tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 6&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(8, S, S + 1, S + 2, S + 9, S + 10)&lt;/p&gt;&lt;p&gt;                AppendAllShapes(Dance, tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf3&quot;&gt;'Shape 9&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 6&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 4&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(9, S, S + 1, S + 2, S + 3, S + 9)&lt;/p&gt;&lt;p&gt;                AppendAllShapes(Dance, tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 6&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 4&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(9, S, S + 1, S + 2, S + 3, S + 10)&lt;/p&gt;&lt;p&gt;                AppendAllShapes(Dance, tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf3&quot;&gt;'Shape 10&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 6&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 6&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(10, S, S + 1, S + 8, S + 9)&lt;/p&gt;&lt;p&gt;                _Shapes.Add(tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf3&quot;&gt;'Shape 11&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 1 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 6&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(11, S, S + 7, S + 8, S + 9, S + 16)&lt;/p&gt;&lt;p&gt;                _Shapes.Add(tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf3&quot;&gt;'Shape12&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 7&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 3&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(12, S, S + 1, S + 2, S + 3, S + 4)&lt;/p&gt;&lt;p&gt;                _Shapes.Add(tShape)&lt;/p&gt;&lt;p&gt;                tRotateShape = tShape.Rotate90&lt;br/&gt;                _Shapes.Add(tRotateShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf3&quot;&gt;'Shape 13&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 6&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 5&lt;br/&gt;                S = I * 8 + J&lt;br/&gt;                tShape = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(13, S, S + 1, S + 2, S + 8, S + 10)&lt;/p&gt;&lt;p&gt;                AppendAllShapes(Dance, tShape)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;ReDim&lt;/span&gt; _Index(_Shapes.Count - 1)&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; _Shapes.Count - 1&lt;br/&gt;            _Index(I) = I&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; R &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;Random&lt;/span&gt;, tSwap &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = _Shapes.Count - 1 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; Int(_Shapes.Count / 3) &lt;span class=&quot;cf1&quot;&gt;Step&lt;/span&gt; -1&lt;br/&gt;            J = R.Next(I)&lt;br/&gt;            tSwap = _Index(J)&lt;br/&gt;            _Index(J) = _Index(I)&lt;br/&gt;            _Index(I) = tSwap&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; _Shapes.Count - 1&lt;br/&gt;            Dance.AppendLine(_Shapes(_Index(I)).GetLineValue)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt; AppendAllShapes(Dance &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsDancingLinksImproveNoRecursive&lt;/span&gt;, tShape &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; tRotateShape &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        _Shapes.Add(tShape)&lt;/p&gt;&lt;p&gt;        tRotateShape = tShape.Rotate90&lt;br/&gt;        _Shapes.Add(tRotateShape)&lt;/p&gt;&lt;p&gt;        tRotateShape = tShape.Rotate180&lt;br/&gt;        _Shapes.Add(tRotateShape)&lt;/p&gt;&lt;p&gt;        tRotateShape = tShape.Rotate270&lt;br/&gt;        _Shapes.Add(tRotateShape)&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;ReadOnly&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Property&lt;/span&gt; IsRandomSolution &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Implements&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;I_Question&lt;/span&gt;.IsRandomSolution&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Get&lt;/span&gt;&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Return&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;False&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Get&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Property&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Class&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;


&lt;p&gt;上面这个类实现了I_Question接口，代码如下：&lt;/p&gt;

&lt;div readability=&quot;9&quot;&gt; &lt;br/&gt;&lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Interface&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;I_Question&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;ReadOnly&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Property&lt;/span&gt; Cols &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;ReadOnly&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Property&lt;/span&gt; ExtraCols &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;ReadOnly&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Property&lt;/span&gt; IsRandomSolution &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Boolean&lt;/span&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt; ConvertToDance(Dance &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsDancingLinksImproveNoRecursive&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Function&lt;/span&gt; ConvertFromDance(Answer() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;) &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Object&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Interface&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;几个参数解释一下&lt;/p&gt;
&lt;p&gt;Cols：问题矩阵的数据列数&lt;/p&gt;
&lt;p&gt;ExtraCols：问题矩阵必须覆盖的列数。大多数的情况下，和Cols相等，也就是所有列完全覆盖&lt;/p&gt;
&lt;p&gt;IsRandomSolution：一个开关，指示求解过程中，是按照最少列优先求解（为False的时候）还是随机选择列求解（为True的时候），在列数比较少的情况下，可以为True，否则不建议使用True，为True的时候，如果存在多个解，每次求解有可能得出不同的解。&lt;/p&gt;
&lt;p&gt;ConvertToDance：将数据转换为问题矩阵，并输入到指定的Dance类&lt;/p&gt;
&lt;p&gt;ConvertFromDance：Dance类计算得出结果后，将结果返回给实现接口的类，让该类对结果进行相应的处理。&lt;/p&gt;


&lt;p&gt;类clsTetris还内置了clsTetrisShape类，定义每个形状的编号、位置、并最终将每个形状绘制到指定的图上，如下：&lt;/p&gt;

&lt;div readability=&quot;99&quot;&gt; &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;Private&lt;/span&gt; Poi() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;Private&lt;/span&gt; ShapeType &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt;(ShapeType &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;cf1&quot;&gt;ParamArray&lt;/span&gt; Poi() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Me&lt;/span&gt;.ShapeType = ShapeType&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; I &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;ReDim&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Me&lt;/span&gt;.Poi(Poi.Length - 1)&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; Poi.Length - 1&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Me&lt;/span&gt;.Poi(I) = Poi(I)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Function&lt;/span&gt; GetLineValue() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;()&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; Value(76) &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; I &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; 76&lt;br/&gt;            Value(I) = 0&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; Poi.Length - 1&lt;br/&gt;            Value(Poi(I)) = 1&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        Value(63 + ShapeType) = 1&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Return&lt;/span&gt; Value&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Function&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Function&lt;/span&gt; Rotate90() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; NewPoi(Poi.Length - 1) &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; I &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, X &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, Y &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; Poi.Length - 1&lt;br/&gt;            X = Int(Poi(I) / 8)&lt;br/&gt;            Y = Poi(I) &lt;span class=&quot;cf1&quot;&gt;Mod&lt;/span&gt; 8&lt;br/&gt;            NewPoi(I) = Y * 8 + 7 - X&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Return&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(ShapeType, NewPoi)&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Function&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Function&lt;/span&gt; Rotate180() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; NewPoi(Poi.Length - 1) &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; I &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; Poi.Length - 1&lt;br/&gt;            NewPoi(I) = 63 - Poi(I)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Return&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(ShapeType, NewPoi)&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Function&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Function&lt;/span&gt; Rotate270() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; NewPoi(Poi.Length - 1) &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; I &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, X &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, Y &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; Poi.Length - 1&lt;br/&gt;            X = Int(Poi(I) / 8)&lt;br/&gt;            Y = Poi(I) &lt;span class=&quot;cf1&quot;&gt;Mod&lt;/span&gt; 8&lt;br/&gt;            NewPoi(I) = (7 - Y) * 8 + X&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Return&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsTetrisShape&lt;/span&gt;(ShapeType, NewPoi)&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Function&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt; DrawShape(G &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;Graphics&lt;/span&gt;)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; tBrush &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;SolidBrush&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Case&lt;/span&gt; ShapeType&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Case&lt;/span&gt; 1&lt;br/&gt;                tBrush = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;SolidBrush&lt;/span&gt;(&lt;span class=&quot;cf2&quot;&gt;Color&lt;/span&gt;.FromArgb(84, 130, 53))&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Case&lt;/span&gt; 2&lt;br/&gt;                tBrush = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;SolidBrush&lt;/span&gt;(&lt;span class=&quot;cf2&quot;&gt;Color&lt;/span&gt;.FromArgb(112, 48, 160))&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Case&lt;/span&gt; 3&lt;br/&gt;                tBrush = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;SolidBrush&lt;/span&gt;(&lt;span class=&quot;cf2&quot;&gt;Color&lt;/span&gt;.FromArgb(166, 166, 166))&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Case&lt;/span&gt; 4&lt;br/&gt;                tBrush = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;SolidBrush&lt;/span&gt;(&lt;span class=&quot;cf2&quot;&gt;Color&lt;/span&gt;.FromArgb(0, 176, 240))&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Case&lt;/span&gt; 5&lt;br/&gt;                tBrush = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;SolidBrush&lt;/span&gt;(&lt;span class=&quot;cf2&quot;&gt;Color&lt;/span&gt;.FromArgb(0, 32, 96))&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Case&lt;/span&gt; 6&lt;br/&gt;                tBrush = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;SolidBrush&lt;/span&gt;(&lt;span class=&quot;cf2&quot;&gt;Color&lt;/span&gt;.FromArgb(0, 0, 0))&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Case&lt;/span&gt; 7&lt;br/&gt;                tBrush = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;SolidBrush&lt;/span&gt;(&lt;span class=&quot;cf2&quot;&gt;Color&lt;/span&gt;.FromArgb(192, 0, 0))&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Case&lt;/span&gt; 8&lt;br/&gt;                tBrush = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;SolidBrush&lt;/span&gt;(&lt;span class=&quot;cf2&quot;&gt;Color&lt;/span&gt;.FromArgb(255, 217, 102))&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Case&lt;/span&gt; 9&lt;br/&gt;                tBrush = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;SolidBrush&lt;/span&gt;(&lt;span class=&quot;cf2&quot;&gt;Color&lt;/span&gt;.FromArgb(0, 112, 192))&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Case&lt;/span&gt; 10&lt;br/&gt;                tBrush = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;SolidBrush&lt;/span&gt;(&lt;span class=&quot;cf2&quot;&gt;Color&lt;/span&gt;.FromArgb(0, 176, 80))&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Case&lt;/span&gt; 11&lt;br/&gt;                tBrush = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;SolidBrush&lt;/span&gt;(&lt;span class=&quot;cf2&quot;&gt;Color&lt;/span&gt;.FromArgb(255, 255, 0))&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Case&lt;/span&gt; 12&lt;br/&gt;                tBrush = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;SolidBrush&lt;/span&gt;(&lt;span class=&quot;cf2&quot;&gt;Color&lt;/span&gt;.FromArgb(198, 89, 17))&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Case&lt;/span&gt; 13&lt;br/&gt;                tBrush = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;SolidBrush&lt;/span&gt;(&lt;span class=&quot;cf2&quot;&gt;Color&lt;/span&gt;.FromArgb(146, 208, 80))&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Case Else&lt;/span&gt;&lt;br/&gt;                tBrush = &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;SolidBrush&lt;/span&gt;(&lt;span class=&quot;cf2&quot;&gt;Color&lt;/span&gt;.FromArgb(146, 208, 80))&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Select&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; I &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, X &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, Y &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; Poi.Length - 1&lt;br/&gt;            X = Int(Poi(I) / 8)&lt;br/&gt;            Y = Poi(I) &lt;span class=&quot;cf1&quot;&gt;Mod&lt;/span&gt; 8&lt;/p&gt;&lt;p&gt;            G.FillRectangle(tBrush, &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;Rectangle&lt;/span&gt;(Y * 40, X * 40, 40, 40))&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Class&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;



&lt;p&gt;然后是贴出求解类&lt;/p&gt;

&lt;div readability=&quot;13&quot;&gt; &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsDancingCentre&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Shared&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Function&lt;/span&gt; Dancing(Question &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;I_Question&lt;/span&gt;) &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Object&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; _Dance &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsDancingLinksImproveNoRecursive&lt;/span&gt;(Question.Cols, Question.ExtraCols)&lt;p&gt;        Question.ConvertToDance(_Dance)&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Return&lt;/span&gt; Question.ConvertFromDance(_Dance.Dance(Question.IsRandomSolution))&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Function&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Class&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;该类只有一个核心方法，定义一个舞蹈链算法（Dancing Links）类，并对该类和I_Question接口搭桥求解问题&lt;/p&gt;

&lt;p&gt;在clsTetris类中，原本如果设置IsRandomSolution为True的话，那么求解过程非常缓慢（曾经1小时没有求出一个解出来），但如果设置为False的时候，每次求解是秒破，但是每次求解都是同一个结果。后来想到，交换问题矩阵的行，会影响求解的顺序，但不影响求解的结果。如果求解的结果是唯一的，那么矩阵的行交不交换都一样，但是如果求解的问题不是唯一的，那么改变问题矩阵的行，那么每次求解出来的解就有可能不同。故在clsTetris中，在最后把数据添加到Dance类的时候，是改变了添加顺序的，这样每次求解都是秒破，并且得出的结果也不一样。求解100个解，不到30秒。&lt;/p&gt;

&lt;p&gt;最后贴出Dancing类，这才是舞蹈链算法（Dancing Links）的核心&lt;/p&gt;

&lt;div readability=&quot;173&quot;&gt; &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;clsDancingLinksImproveNoRecursive&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;Private&lt;/span&gt; Left() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, Right() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, Up() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, Down() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;Private&lt;/span&gt; Row() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, Col() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Private&lt;/span&gt; _Head &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Private&lt;/span&gt; _Rows &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, _Cols &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, _NodeCount &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;Private&lt;/span&gt; Count() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Private&lt;/span&gt; Ans() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt;(&lt;span class=&quot;cf1&quot;&gt;ByVal&lt;/span&gt; Cols &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Me&lt;/span&gt;.New(Cols, Cols)&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt;(&lt;span class=&quot;cf1&quot;&gt;ByVal&lt;/span&gt; Cols &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, ExactCols &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;ReDim&lt;/span&gt; Left(Cols), Right(Cols), Up(Cols), Down(Cols), Row(Cols), Col(Cols), Ans(Cols)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;ReDim&lt;/span&gt; Count(Cols)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; I &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        Up(0) = 0&lt;br/&gt;        Down(0) = 0&lt;br/&gt;        Right(0) = 1&lt;br/&gt;        Left(0) = Cols&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 1 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; Cols&lt;br/&gt;            Up(I) = I&lt;br/&gt;            Down(I) = I&lt;br/&gt;            Left(I) = I - 1&lt;br/&gt;            Right(I) = I + 1&lt;br/&gt;            Col(I) = I&lt;br/&gt;            Row(I) = 0&lt;/p&gt;&lt;p&gt;            Count(I) = 0&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        Right(Cols) = 0&lt;/p&gt;&lt;p&gt;        _Rows = 0&lt;br/&gt;        _Cols = Cols&lt;br/&gt;        _NodeCount = Cols&lt;br/&gt;        _Head = 0&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; N &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt; = Right(ExactCols)&lt;/p&gt;&lt;p&gt;        Right(ExactCols) = _Head&lt;br/&gt;        Left(_Head) = ExactCols&lt;/p&gt;&lt;p&gt;        Left(N) = _Cols&lt;br/&gt;        Right(_Cols) = N&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt; AppendLine(&lt;span class=&quot;cf1&quot;&gt;ByVal&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;ParamArray&lt;/span&gt; Value() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; V &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;cf1&quot;&gt;Of&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; I &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; Value.Length - 1&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;If&lt;/span&gt; Value(I) &amp;lt;&amp;gt; 0 &lt;span class=&quot;cf1&quot;&gt;Then&lt;/span&gt; V.Add(I + 1)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        AppendLineByIndex(V.ToArray)&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt; AppendLine(Line &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;String&lt;/span&gt;)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; V &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;cf1&quot;&gt;Of&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; I &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; Line.Length - 1&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;If&lt;/span&gt; Line.Substring(I, 1) &amp;lt;&amp;gt; &lt;span class=&quot;cf4&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Then&lt;/span&gt; V.Add(I + 1)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        AppendLineByIndex(V.ToArray)&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt; AppendLineByIndex(&lt;span class=&quot;cf1&quot;&gt;ByVal&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;ParamArray&lt;/span&gt; Index() &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;If&lt;/span&gt; Index.Length = 0 &lt;span class=&quot;cf1&quot;&gt;Then&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Exit Sub&lt;/span&gt;&lt;br/&gt;        _Rows += 1&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; I &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, K &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt; = 0&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;ReDim&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Preserve&lt;/span&gt; Left(_NodeCount + Index.Length)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;ReDim&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Preserve&lt;/span&gt; Right(_NodeCount + Index.Length)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;ReDim&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Preserve&lt;/span&gt; Up(_NodeCount + Index.Length)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;ReDim&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Preserve&lt;/span&gt; Down(_NodeCount + Index.Length)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;ReDim&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Preserve&lt;/span&gt; Row(_NodeCount + Index.Length)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;ReDim&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Preserve&lt;/span&gt; Col(_NodeCount + Index.Length)&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;ReDim&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Preserve&lt;/span&gt; Ans(_Rows)&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; Index.Length - 1&lt;/p&gt;&lt;p&gt;            _NodeCount += 1&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;If&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;Then&lt;/span&gt;&lt;br/&gt;                Left(_NodeCount) = _NodeCount&lt;br/&gt;                Right(_NodeCount) = _NodeCount&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Else&lt;/span&gt;&lt;br/&gt;                Left(_NodeCount) = _NodeCount - 1&lt;br/&gt;                Right(_NodeCount) = Right(_NodeCount - 1)&lt;br/&gt;                Left(Right(_NodeCount - 1)) = _NodeCount&lt;br/&gt;                Right(_NodeCount - 1) = _NodeCount&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;If&lt;/span&gt;&lt;/p&gt;&lt;p&gt;            Down(_NodeCount) = Index(I)&lt;br/&gt;            Up(_NodeCount) = Up(Index(I))&lt;br/&gt;            Down(Up(Index(I))) = _NodeCount&lt;br/&gt;            Up(Index(I)) = _NodeCount&lt;/p&gt;&lt;p&gt;            Row(_NodeCount) = _Rows&lt;br/&gt;            Col(_NodeCount) = Index(I)&lt;/p&gt;&lt;p&gt;            Count(Index(I)) += 1&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Function&lt;/span&gt; Dance(&lt;span class=&quot;cf1&quot;&gt;Optional&lt;/span&gt; Random &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Boolean&lt;/span&gt; = &lt;span class=&quot;cf1&quot;&gt;False&lt;/span&gt;) &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;()&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; P &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, C1 &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; I &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, J &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; K &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt; = 0&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; R &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;cf2&quot;&gt;Random&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Do&lt;/span&gt;&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;If&lt;/span&gt; (Right(_Head) = _Head) &lt;span class=&quot;cf1&quot;&gt;Then&lt;/span&gt;&lt;br/&gt;                &lt;span class=&quot;cf1&quot;&gt;ReDim&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Preserve&lt;/span&gt; Ans(K - 1)&lt;br/&gt;                &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; I = 0 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; Ans.Length - 1&lt;br/&gt;                    Ans(I) = Row(Ans(I))&lt;br/&gt;                &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;                &lt;span class=&quot;cf1&quot;&gt;Return&lt;/span&gt; Ans&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;If&lt;/span&gt;&lt;/p&gt;&lt;p&gt;            P = Right(_Head)&lt;br/&gt;            C1 = P&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;If&lt;/span&gt; Random = &lt;span class=&quot;cf1&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Then&lt;/span&gt;&lt;br/&gt;                &lt;span class=&quot;cf1&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;While&lt;/span&gt; P &amp;lt;&amp;gt; _Head&lt;br/&gt;                    &lt;span class=&quot;cf1&quot;&gt;If&lt;/span&gt; Count(P) &amp;lt; Count(C1) &lt;span class=&quot;cf1&quot;&gt;Then&lt;/span&gt; C1 = P&lt;br/&gt;                    P = Right(P)&lt;br/&gt;                &lt;span class=&quot;cf1&quot;&gt;Loop&lt;/span&gt;&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Else&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                I = R.Next(_Cols)&lt;br/&gt;                &lt;span class=&quot;cf1&quot;&gt;For&lt;/span&gt; J = 1 &lt;span class=&quot;cf1&quot;&gt;To&lt;/span&gt; I&lt;br/&gt;                    P = Right(P)&lt;br/&gt;                &lt;span class=&quot;cf1&quot;&gt;Next&lt;/span&gt;&lt;br/&gt;                &lt;span class=&quot;cf1&quot;&gt;If&lt;/span&gt; P = _Head &lt;span class=&quot;cf1&quot;&gt;Then&lt;/span&gt; P = Right(_Head)&lt;br/&gt;                C1 = P&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;If&lt;/span&gt;&lt;/p&gt;&lt;p&gt;            RemoveCol(C1)&lt;/p&gt;&lt;p&gt;            I = Down(C1)&lt;/p&gt;&lt;p&gt;            &lt;span class=&quot;cf1&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;While&lt;/span&gt; I = C1&lt;br/&gt;                ResumeCol(C1)&lt;/p&gt;&lt;p&gt;                K -= 1&lt;br/&gt;                &lt;span class=&quot;cf1&quot;&gt;If&lt;/span&gt; K &amp;lt; 0 &lt;span class=&quot;cf1&quot;&gt;Then&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Return&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Nothing&lt;/span&gt;&lt;br/&gt;                C1 = Col(Ans(K))&lt;br/&gt;                I = Ans(K)&lt;br/&gt;                J = Left(I)&lt;br/&gt;                &lt;span class=&quot;cf1&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;While&lt;/span&gt; J &amp;lt;&amp;gt; I&lt;br/&gt;                    ResumeCol(Col(J))&lt;br/&gt;                    J = Left(J)&lt;br/&gt;                &lt;span class=&quot;cf1&quot;&gt;Loop&lt;/span&gt;&lt;br/&gt;                I = Down(I)&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Loop&lt;/span&gt;&lt;/p&gt;&lt;p&gt;            Ans(K) = I&lt;br/&gt;            J = Right(I)&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;While&lt;/span&gt; J &amp;lt;&amp;gt; I&lt;br/&gt;                RemoveCol(Col(J))&lt;br/&gt;                J = Right(J)&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Loop&lt;/span&gt;&lt;/p&gt;&lt;p&gt;            K += 1&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Loop&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Function&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt; RemoveCol(&lt;span class=&quot;cf1&quot;&gt;ByVal&lt;/span&gt; ColIndex &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;        Left(Right(ColIndex)) = Left(ColIndex)&lt;br/&gt;        Right(Left(ColIndex)) = Right(ColIndex)&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; I &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, J &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        I = Down(ColIndex)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;While&lt;/span&gt; I &amp;lt;&amp;gt; ColIndex&lt;br/&gt;            J = Right(I)&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;While&lt;/span&gt; J &amp;lt;&amp;gt; I&lt;br/&gt;                Up(Down(J)) = Up(J)&lt;br/&gt;                Down(Up(J)) = Down(J)&lt;/p&gt;&lt;p&gt;                Count(Col(J)) -= 1&lt;/p&gt;&lt;p&gt;                J = Right(J)&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Loop&lt;/span&gt;&lt;/p&gt;&lt;p&gt;            I = Down(I)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Loop&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt; ResumeCol(&lt;span class=&quot;cf1&quot;&gt;ByVal&lt;/span&gt; ColIndex &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;)&lt;/p&gt;&lt;p&gt;        Left(Right(ColIndex)) = ColIndex&lt;br/&gt;        Right(Left(ColIndex)) = ColIndex&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Dim&lt;/span&gt; I &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;, J &lt;span class=&quot;cf1&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Integer&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        I = Up(ColIndex)&lt;/p&gt;&lt;p&gt;        &lt;span class=&quot;cf1&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;While&lt;/span&gt; (I &amp;lt;&amp;gt; ColIndex)&lt;br/&gt;            J = Right(I)&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;While&lt;/span&gt; J &amp;lt;&amp;gt; I&lt;br/&gt;                Up(Down(J)) = J&lt;br/&gt;                Down(Up(J)) = J&lt;/p&gt;&lt;p&gt;                Count(Col(J)) += 1&lt;/p&gt;&lt;p&gt;                J = Right(J)&lt;br/&gt;            &lt;span class=&quot;cf1&quot;&gt;Loop&lt;/span&gt;&lt;br/&gt;            I = Up(I)&lt;br/&gt;        &lt;span class=&quot;cf1&quot;&gt;Loop&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Sub&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;cf1&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;cf1&quot;&gt;Class&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt;求解了1000个解，发现很有趣的一个现象，就是长条（1*5的那个），几乎都在边上，在当中的解少之又少&lt;/p&gt;
&lt;p&gt;下面贴几个解&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144926136-1612342942.png&quot;&gt;&lt;img title=&quot;000t&quot; src=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144926308-1534736291.png&quot; alt=&quot;000t&quot; width=&quot;320&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144926542-890936105.png&quot;&gt;&lt;img title=&quot;001t&quot; src=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144926745-152555396.png&quot; alt=&quot;001t&quot; width=&quot;320&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144926964-378610384.png&quot;&gt;&lt;img title=&quot;002t&quot; src=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144927183-1446240942.png&quot; alt=&quot;002t&quot; width=&quot;320&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144927386-2111607937.png&quot;&gt;&lt;img title=&quot;003t&quot; src=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144927558-732421563.png&quot; alt=&quot;003t&quot; width=&quot;320&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144927729-1916683661.png&quot;&gt;&lt;img title=&quot;004t&quot; src=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144927901-1150841840.png&quot; alt=&quot;004t&quot; width=&quot;320&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144928136-956821533.png&quot;&gt;&lt;img title=&quot;005t&quot; src=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144928354-2053810170.png&quot; alt=&quot;005t&quot; width=&quot;320&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144928589-1356393959.png&quot;&gt;&lt;img title=&quot;006t&quot; src=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144928776-1432347206.png&quot; alt=&quot;006t&quot; width=&quot;320&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144928948-1941744598.png&quot;&gt;&lt;img title=&quot;007t&quot; src=&quot;http://images2017.cnblogs.com/blog/93227/201712/93227-20171202144929136-382100156.png&quot; alt=&quot;007t&quot; width=&quot;320&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 02 Dec 2017 06:50:00 +0000</pubDate>
<dc:creator>万仓一黍</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/grenet/p/7903680.html</dc:identifier>
</item>
<item>
<title>手起刀落-一起来写经典的贪吃蛇游戏 - OkayChen</title>
<link>http://www.cnblogs.com/okaychen/p/7954207.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/okaychen/p/7954207.html</guid>
<description>&lt;p&gt;小时候玩的经典贪吃蛇游戏我们印象仍然深刻，谋划了几天，小时候喜欢玩的游戏，长大了终于有能力把他做出来(从来都没有通关过，不知道自己写的程序，是不是能通关了...)，好了，闲话不多谈，先来看一下效果吧！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/12/2/160154cb5e8b2b16?w=878&amp;amp;h=728&amp;amp;f=gif&amp;amp;s=979344&quot; alt=&quot;效果图&quot;/&gt;&lt;/p&gt;
&lt;p&gt;功能和小时候玩的贪吃蛇一样，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1、选择速度 
    slow
    normal
    fast
2、选择是否有墙作为障碍物
    on
    off&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看完效果就先附上地址喽：&lt;a href=&quot;https://github.com/okaychen/practice&quot;&gt;大山深处修炼的小龙虾&lt;/a&gt;，欢迎fork.&lt;/p&gt;

&lt;p&gt;如果构建一个简单的经典贪吃蛇游戏呢？我们根据面板可以分解出如下结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/12/2/160156e18d938a86?w=567&amp;amp;h=505&amp;amp;f=png&amp;amp;s=18306&quot; alt=&quot;面板结构分解&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为其他面板比较简单，我们重点来看一下游戏面板&lt;/p&gt;
&lt;h2 id=&quot;游戏面板&quot;&gt;游戏面板&lt;/h2&gt;
&lt;p&gt;游戏面板是核心，在游戏面板中，我们来分解一下游戏面板我们需要的因素：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/12/2/160157e8c7a3db9f?w=567&amp;amp;h=505&amp;amp;f=png&amp;amp;s=13538&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;场景snake食物&quot;&gt;场景、snake、食物&lt;/h3&gt;
&lt;p&gt;首先我们需要一个游戏场景、snake、食物这些基础设施&lt;br/&gt;这里使用canvas作为我们的整个游戏的场景：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;canvas class=&quot;wrap&quot; id=&quot;snake&quot; width=&quot;400&quot; height=&quot;400&quot; tabindex=&quot;1&quot;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要一只snake,后面初始化他的位置&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var activeDot = function (x, y) {
    ctx.fillStyle = &quot;#eee&quot;;
    ctx.fillRect(x * 10, y * 10, 10, 10);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要食物作为对象(关于食物我们需要定义一些规则，如食物的产生)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var food = {
    x: 0,
    y: 0
};&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;规则&quot;&gt;规则&lt;/h3&gt;
&lt;p&gt;规则是游戏的核心&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1、关于游戏的规则&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;snake的方向控制：(使用键盘的上下左右键控制蛇的方向)&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt; &lt;span class=&quot;co&quot;&gt;// changer dir&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; changeDir &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (key) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (key &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;38&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; snake_dir &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            snake_next_dir &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (key &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;39&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; snake_dir &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                snake_next_dir &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (key &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; snake_dir &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    snake_next_dir &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (key &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;37&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; snake_dir &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        snake_next_dir &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于食物，如果食物被吃掉，我们就需要产生新的食物&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;  &lt;span class=&quot;co&quot;&gt;// add food&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; addFood &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;food&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; ((&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt; / &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;food&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; ((&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;height&lt;/span&gt; / &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;snake&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 如果食物被吃就增加食物&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;at&quot;&gt;checkBlock&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;food&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;food&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; snake[i].&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; snake[i].&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;addFood&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; checkBlock &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; _x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; _y) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (x &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; _x &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; _y) &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来是核心的函数，根据选择的速度和是否有墙体作为障碍物的设置，让蛇运动起来，并且实现&lt;/p&gt;
&lt;p&gt;1、根据选择slow、norma、fast决定蛇运动速度速度&lt;br/&gt;2、如果蛇碰到自己==自杀，游戏结束&lt;br/&gt;3、有墙模式碰到墙体，游戏结束&lt;br/&gt;4、无墙模式蛇穿过墙体，从另一侧出现&lt;br/&gt;5、使蛇碰到食物就加入自身身体的一部分，执行增加食物函数&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt; &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; mainLoop &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; _x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; snake[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; _y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; snake[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        snake_dir &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; snake_next_dir&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//  0 — up  1 — right   2 — down  3 — left&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;switch&lt;/span&gt; (snake_dir) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
                _y&lt;span class=&quot;op&quot;&gt;--;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
                _x&lt;span class=&quot;op&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
                _y&lt;span class=&quot;op&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
                _x&lt;span class=&quot;op&quot;&gt;--;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;snake&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;pop&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;snake&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;unshift&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; _x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; _y
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

        &lt;span class=&quot;co&quot;&gt;// --wall&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (wall &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (snake[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; snake[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt; / &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; snake[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; snake[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;height&lt;/span&gt; / &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;showScreen&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//  off 无墙&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;snake&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (snake[i].&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    snake[i].&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; snake[i].&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt; / &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (snake[i].&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt; / &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    snake[i].&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; snake[i].&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt; / &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (snake[i].&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    snake[i].&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; snake[i].&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;height&lt;/span&gt; / &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (snake[i].&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;height&lt;/span&gt; / &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    snake[i].&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; snake[i].&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;height&lt;/span&gt; / &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//  Autophagy death&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;snake&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (snake[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; snake[i].&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; snake[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; snake[i].&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;showScreen&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;// Eat food&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;at&quot;&gt;checkBlock&lt;/span&gt;(snake[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; snake[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;food&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;food&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            snake[&lt;span class=&quot;va&quot;&gt;snake&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; snake[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; snake[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
            score &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;altScore&lt;/span&gt;(score)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;addFood&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;activeDot&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;food&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;food&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;// --------------------&lt;/span&gt;

        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;beginPath&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillStyle&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;#111&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillRect&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;height&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;// --------------------&lt;/span&gt;

        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;snake&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;activeDot&lt;/span&gt;(snake[i].&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; snake[i].&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;// --------------------&lt;/span&gt;

        &lt;span class=&quot;at&quot;&gt;activeDot&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;food&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;food&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(mainLoop&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; snake_speed)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ok以上展示出一些核心部分，构建出一个舞台中一只小蛇的故事.&lt;/p&gt;
&lt;p&gt;小时候爸妈手机里有一款小游戏叫贪吃蛇。就是一条小蛇，不停地在屏幕上游走，吃各个方向出现的蛋，越吃越长。只要蛇头碰到屏幕四周，或者碰到自己的身子，小蛇就立即毙命。方寸的舞台间，亦有无限精彩；PS:到现在也没有通关过..现在不知道能不能通关了...&lt;/p&gt;
&lt;p&gt;最后在附上次源码，欢迎fork交流：&lt;a href=&quot;https://github.com/okaychen/practice&quot;&gt;大山深处修炼的小龙虾&lt;/a&gt;...因为自己测试用的服务器被占用，目前只有做的效果图供大家参考喽.&lt;br/&gt;掘金地址：&lt;a href=&quot;https://juejin.im/post/5a221ce1f265da431523b7f5&quot;&gt;手起刀落-一起来写经典的贪吃蛇游戏&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 02 Dec 2017 06:46:00 +0000</pubDate>
<dc:creator>OkayChen</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/okaychen/p/7954207.html</dc:identifier>
</item>
<item>
<title>浅谈IM(InstantMessaging) 即时通讯/实时传讯【理论篇】 - Avenstar</title>
<link>http://www.cnblogs.com/zjf-1992/p/7954219.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zjf-1992/p/7954219.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;    一、IM简要概述&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.baike.com/wiki/IM&quot;&gt;IM InstantMessaging&lt;/a&gt;（即时通讯,实时传讯）的缩写是IM，互动百科大致解释是一种可以让使用者在网络上建立某种私人聊天（chatroom）的实时通讯服务。&lt;/p&gt;
&lt;p&gt;大部分的即时通讯服务提供了状态信息的特性──显示联络人名单，联络人是否在线及能否与联络人交谈。&lt;/p&gt;
&lt;p&gt;IM可简单理解为传送者与接收者之间建立链接通讯信息的实时反馈或应答的过程。&lt;/p&gt;
&lt;p&gt;如下图所示 用户A、用户B建立通讯的过程中各自担任的角色既是信息的传送者同时也是信息的接收者&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819169/201711/819169-20171126210607890-972327407.png&quot; alt=&quot;&quot; width=&quot;400px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;像大众所熟知微信WeChat&lt;img src=&quot;http://images2017.cnblogs.com/blog/819169/201709/819169-20170917161448157-1553903919.jpg&quot; alt=&quot;&quot; height=&quot;60&quot;/&gt;、QQ&lt;img class=&quot;c-img c-img3&quot; src=&quot;https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=348288578,687591543&amp;amp;fm=58&quot; alt=&quot;&quot;/&gt;，常用的两个功能单聊（或私聊）即一对一的聊天模式、群组聊天（多人的聊天模式）可实时传递与接收信息。如传递图片、文本(文字或表情)、语音、文件、地理位置、视频聊天等的传递与接收。&lt;/p&gt;
&lt;p&gt;会话列表是用户在某一时间段内与某一个人或群组聊天对象的信息展示；如会话列表展示私聊、群组对象的头像、姓名、时间、最新聊天内容、消息发送的时间；&lt;/p&gt;
&lt;p&gt;如下图所示(ps效果图)&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/819169/201711/819169-20171127232659753-1890029811.png&quot; alt=&quot;&quot; width=&quot;450px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;    二、IM大致分类&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IM大致分类有大众IM、商务IM(微软MSN)、企业IM.  不同的分类服务着各自的领域；&lt;/p&gt;
&lt;p&gt;大众IM（或叫个人IM） 主要是以个人用户为主，非盈利目的，方便聊天、交友、娱乐。 如&lt;a href=&quot;http://im.qq.com/pcqq/&quot;&gt;腾讯QQ&lt;/a&gt;、&lt;a href=&quot;http://pc.weixin.qq.com/&quot;&gt;微信weChart&lt;/a&gt;、&lt;a href=&quot;http://rj.baidu.com/soft/detail/23623.html?ald&quot;&gt;FeiQ飞秋&lt;/a&gt;、&lt;a href=&quot;https://www.immomo.com/&quot;&gt;momo陌陌&lt;/a&gt;； &lt;/p&gt;
&lt;p&gt;商务IM(微软MSN) 的作用是为了实现寻找客户资源或便于商务联系，从而以低成本商务交流或工作交流.。 如 Messanger、Skype、ppmeet  常见&lt;a href=&quot;https://alimarket.taobao.com/markets/qnww/portal-group/ww/index?spm=a21e4.8043303.0.0.51f6f605nLKNhe&quot;&gt;阿里旺旺淘宝版&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;企业IM 一种是以企业用途为主、专注办公使用如腾讯 &lt;a href=&quot;https://im.qq.com/&quot;&gt;TM(Tencent Messenger)&lt;/a&gt;；另一种是以&lt;a class=&quot;baidu-highlight&quot; href=&quot;https://www.baidu.com/s?wd=%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1&amp;amp;tn=44039180_cpr&amp;amp;fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1dhPWFWnHw9myRkPH7hujIb0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EnHn3PHm1nHDLPHfLnW6kn1b3n0&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;即时通信&lt;/a&gt;为基础，系统整合各种实用功能，如&lt;a href=&quot;http://www.qyt.com/&quot;&gt;企业通&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;    三、IM及时通讯常见的体现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;QQ通讯IM虽然功能已经如此强大，但功能太多目标过于分散；相比个人更喜欢微信的设计简洁、功能明了主要用于沟通；&lt;/p&gt;
&lt;p&gt;像常见的淘宝、京东商品订单的联系卖家（商品订单聊天）的IM通讯的解决的是客户对购买商品信息需求；如下图所示（单聊 卖家与买家一对一的聊天；）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819169/201711/819169-20171126145054187-248127591.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;针对购买商品买家对卖家商品的评价（如下图  IM体现）&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/819169/201711/819169-20171126151842500-308308289.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;微信朋友圈(QQ空间)、文章收藏列表、今日头条动态评论列表（下图）等都可以看做是IM的另一种体现方式又同时又区别于及时通讯IM。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819169/201711/819169-20171126150519250-1752088019.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/819169/201711/819169-20171126152523812-259826650.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 02 Dec 2017 06:43:00 +0000</pubDate>
<dc:creator>Avenstar</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zjf-1992/p/7954219.html</dc:identifier>
</item>
<item>
<title>AutoMapper在asp.netcore中的使用 - wenqing-vikcy</title>
<link>http://www.cnblogs.com/fighting2014/p/7954191.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fighting2014/p/7954191.html</guid>
<description>&lt;h2&gt;# AutoMapper在asp.netcore中的使用&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt; &lt;em&gt;automapper 是.net 项目中针对模型之间转换&lt;strong&gt;&lt;em&gt;映射&lt;/em&gt;&lt;/strong&gt;的一个很好用的工具，不仅提高了开发的效率还使代码更加简洁，&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;当然也是开源的，&lt;a title=&quot;https://github.com/AutoMapper&quot; href=&quot;https://github.com/AutoMapper&quot; target=&quot;_blank&quot;&gt;https://github.com/AutoMapper&lt;/a&gt;，这不多做介绍，详细看，&lt;a title=&quot;https://github.com/AutoMapper&quot; href=&quot;https://github.com/AutoMapper&quot; target=&quot;_blank&quot;&gt;官网&lt;/a&gt;下面是介绍它在 .net core 项目中的使用&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt; 1. 首先当然先引用 AutoMapper&lt;/p&gt;
&lt;p&gt;   - 你可以在NuGet中直接输入AutoMapper直接引用，也可以在控制台输入 Install-Package AutoMapper&lt;/p&gt;

&lt;p&gt; 2. 其次我们要引用 AutoMapper 对依赖注入的一个扩展  Extensions.Microsoft.DependencyInjection&lt;/p&gt;
&lt;p&gt;   - 由于.net core 中自带依赖注入，我们要用DI来注册我们的Mapper类&lt;/p&gt;

&lt;p&gt; 3. 在Startup 类中找到 ConfigureServices 方法 引用我们扩展中的方法&lt;/p&gt;
&lt;p&gt;     &lt;img src=&quot;http://img.siyouku.cn/img69.jpg&quot; alt=&quot;&quot; width=&quot;598&quot; height=&quot;262&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 4. 在项目中创建一个映射配置类，可以项目中的任何文件夹下，扩展代码中是通过反射找出程序集中的所有映射配置&lt;/p&gt;
&lt;pre class=&quot;brush:c#;toolbar:false&quot;&gt;
  public class UserProfile : Profile
    {
        public UserProfile()
        {
            // Add as many of these lines as you need to map your objects
            CreateMap&amp;lt;UserInfo, UserInfoModel&amp;gt;();
            CreateMap&amp;lt;UserInfoModel, UserInfo&amp;gt;();
        }
    }
&lt;/pre&gt;
&lt;p&gt; 5. 在 Controller中用构造函数注入 IMapper &lt;/p&gt;
&lt;pre class=&quot;brush:c#;toolbar:false&quot;&gt;
 private readonly IMapper _mapper;

        public UserInfoController(IUserInfoService userInfoService,
            IUnitOfWork unitOfWork, ILogger&amp;lt;UserInfoController&amp;gt; logger, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _userInfoService = userInfoService;
            _logger = logger;
            _mapper = mapper;
        }
&lt;/pre&gt;
&lt;p&gt;6. 最后就可以使用mapper&lt;/p&gt;
&lt;pre class=&quot;brush:c#;toolbar:false&quot;&gt;
   public IActionResult AddUser(UserInfoModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }
            var user = _mapper.Map&amp;lt;UserInfo&amp;gt;(model); //映射
            var repoUser = _unitOfWork.GetRepository&amp;lt;UserInfo&amp;gt;();
            repoUser.Insert(user);
            var r = _unitOfWork.SaveChanges();
            //_userInfoService.AddUserInfo();
            return Json(new MgResult()
            {
                Code = r &amp;gt; 0 ? 0 : 1,
                Msg = r &amp;gt; 0 ? &quot;ok&quot; : &quot;SaveChanges失败！&quot;
            });
        }
&lt;/pre&gt;

&lt;p&gt;本文永久更新地址：&lt;a title=&quot;http://siyouku.cn/article/6859.html&quot; href=&quot;http://siyouku.cn/article/6859.html&quot; target=&quot;_blank&quot;&gt;http://siyouku.cn/article/6859.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;asp.net core 开发框架：&lt;a title=&quot;https://github.com/2014fighting/CodeFrame.Web.git&quot; href=&quot;https://github.com/2014fighting/CodeFrame.Web.git&quot; target=&quot;_blank&quot;&gt;https://github.com/2014fighting/CodeFrame.Web.git&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 02 Dec 2017 06:35:00 +0000</pubDate>
<dc:creator>wenqing-vikcy</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fighting2014/p/7954191.html</dc:identifier>
</item>
<item>
<title>iOS 多线程之线程锁Swift-Demo示例总结 - Zxiao..旭</title>
<link>http://www.cnblogs.com/taoxu/p/7801017.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/taoxu/p/7801017.html</guid>
<description>
&lt;p&gt;&lt;span&gt;&lt;strong&gt;线程锁是什么&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      在前面的文章中总结过多线程，总结了多线程之后，线程锁也是必须要好好总结的东西，这篇文章构思的时候可能写的东西得许多，只能挤时间一点点的慢慢的总结了，知道了线程之后要了解线程锁就得先了解一下什么是“线程锁”。&lt;/p&gt;
&lt;p&gt;      “线程锁”一段代码在同一个时间内是只能被一个线程访问的，为了避免在同一时间内有多个线程访问同一段代码就有了“锁”的概念，比如说，线程A在访问着一段代码，进入这段代码之后我们加了一个“锁”。这个时候线程B又来访问了，由于有了锁线程B就会等待线程A访问结束之后解开了“锁”线程B就可以接着访问这段代码了，这样就避免了在同一时间内多个线程访问同一段代码！&lt;/p&gt;
&lt;p&gt;      相信上面的解释应该理解了“锁”的概念，也知道它是为了什么产生的，我们再举一个例子，一个房子一个人（线程）进去之后就把门锁上了，另一个人（线程）来了之后就在等待前面的人（线程）出来，等前面的人出来之后把门打开，它才可以进入房间。这样的解释相信应该明白了“锁”的概念，但是我们还是得强调一点，就是在这个“锁”和“解锁”之间不要有太多的“事”（执行代码，也就是任务）做，不然会造成过长时间的等待！就是去了多线程真正的含义和所用！&lt;/p&gt;
&lt;p&gt;      下面我们一个个的来解释我们常用的线程锁。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;NSLock&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      NSLock是最简单的互斥锁，下面的NSCondition、NSConditionLock以及NSRecursiveLock都是遵守了NSLocking协议的，我们就放在一起说，包括我们现在说的NSLock也是，我们看看这个NSLock里面具体都有什么，先看看它代码里面的方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
public protocol NSLocking {
    
    public func lock()

    public func unlock()
}

open class NSLock : NSObject, NSLocking {
    
    open func `try`() -&amp;gt; Bool

    open func lock(before limit: Date) -&amp;gt; Bool

    @available(iOS 2.0, *)
    open var name: String?
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们一个一个说说上面的方法：&lt;/p&gt;
&lt;p&gt;      1、lock和unlock 就是这个类最常用的两个方法，“加锁”和“解锁”的方法。&lt;/p&gt;
&lt;p&gt;      2、try()方法是尝试加锁，失败是不会阻塞线程的，如果获取锁失败就不会执行加锁代码。&lt;/p&gt;
&lt;p&gt;      3、lock(before limit: Date) 这个方法是在后面参数传入的时间内没有获取到线程锁就阻塞线程，要是到期还没有获取到线程锁就唤醒线程，这时候返回值是NO。&lt;/p&gt;
&lt;p&gt;下面是我们Demo中具体的使用的例子代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:swift;gutter:true;&quot;&gt;
    var imageMutableArray:Array&amp;lt;Any&amp;gt; = Array.init()
    let lock = NSLock.init()

    override func viewDidLoad() {
        super.viewDidLoad()

        // Do any additional setup after loading the view.
        for  i in 0...1000 {
                
            imageMutableArray.append(&quot;imageArray===&quot;+String(i))
        }
        print(&quot;你初始化的数组个数是&quot;,imageMutableArray.count )
    }
        
    // MARK: - startTestBtnAction
    override func removeFromDataImageArray() -&amp;gt; Void {
                
        // 我们使用多个线程去删除一个数组里面的东西，这样就有一个资源竞争的问题，我们看看
        // 你可以先把这里的lock加锁个解锁的方法注释掉，代码会崩溃在imageMutableArray.removeFirst()
        // 关于这样写（不加锁）时候的线程安全的问题  http://www.jianshu.com/p/2fce6a0bb17b
       
        while (true) {
                
                lock.lock()
                if (imageMutableArray.count &amp;gt; 0) {
                    
                    imageMutableArray.removeFirst()
                }else{
                 
                    now = CFAbsoluteTimeGetCurrent()
                    let resultString = &quot;操作开始时间:&quot; + String(describing: then) + &quot;\n结束时间:&quot;+String(describing: now) + &quot;\n整个操作用时:&quot;+String(now! - then!) + &quot;ms&quot;
                        /*
                           NOTE： 修改UI要在主线程，不能在子线程,刚开始疏忽报了下面的错误
                         */
                        DispatchQueue.main.async {
                           self.resulttextView.text = resultString
                        }
                    return
                }
                
                lock.unlock()
        }
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;NSCondition&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;     &lt;/strong&gt; NSCondition条件锁，首先它也是遵循NSLocking协议的，这点和我们上面说的NSLock是一致的，所以它的加锁和解锁方式和我们前面说的NSLock是一样的，就是lock和unlock方法，你要是简单的使用它来解决线程同步的问题，那他简单的用法和前面写的NSLock也是一样的。但我们要是把NSCondition当NSLock用那就真的是浪费了！NSCondition还有自己的wait和signal用法，这个和后面信号量有点点类似，信号量的我们下面再说，看看NSCondition部分的代码：&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:swift;gutter:true;&quot;&gt;
    // MARK: - startTestBtnAction
     override func removeFromDataImageArray() -&amp;gt; Void {
        
        while (true) {
                
                lock.lock()
                if (imageMutableArray.count &amp;gt; 0) {
                        
                        imageMutableArray.removeFirst()
                }else{
                        
                        now = CFAbsoluteTimeGetCurrent()
                        let resultString = &quot;操作开始时间:&quot; + String(describing: then) + &quot;\n结束时间:&quot;+String(describing: now) + &quot;\n整个操作用时:&quot;+String(now! - then!) + &quot;ms&quot;

                        DispatchQueue.main.async {
                                
                                self.resulttextView.text = resultString
                        }
                        return
                }
                lock.unlock()
         }
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;NSConditionLock&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      NSConditionLock同样实现了NSLocking协议，不过测试一下之后你会发现这个新能比较低。NSConditionLock也能像NSCondition一样能进行线程之间的等待调用，并且还是线程安全的。下面使我们Demo中的代码，写给这里的只是最基本的加锁解锁的代码，先看看：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:swift;gutter:true;&quot;&gt;
 var imageMutableArray:Array&amp;lt;Any&amp;gt; = Array.init()
    let lock = NSConditionLock.init()

    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Do any additional setup after loading the view.
        for  i in 0...1000 {
                
                imageMutableArray.append(&quot;imageArray===&quot;+String(i))
        }
        print(&quot;NSCondition初始化的数组个数是&quot;,imageMutableArray.count )
                
    }
        
    // MARK: - startTestBtnAction
    override func removeFromDataImageArray() -&amp;gt; Void {
                
        while (true) {
                
                lock.lock()
                if (imageMutableArray.count &amp;gt; 0) {
                        
                        imageMutableArray.removeFirst()
                }else{
                        
                        now = CFAbsoluteTimeGetCurrent()
                        let resultString = &quot;操作开始时间:&quot; + String(describing: then) + &quot;\n结束时间:&quot;+String(describing: now) + &quot;\n整个操作用时:&quot;+String(now! - then!) + &quot;ms&quot;
                        
                        DispatchQueue.main.async {
                                
                                self.resulttextView.text = resultString
                        }
                        return
                }
                lock.unlock()
        }
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;NSRecursiveLock&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      有时候“加锁代码”中存在递归调用，递归开始前加锁，递归调用开始后会重复执行此方法以至于反复执行加锁代码最终造成死锁，这个时候可以使用递归锁来解决，也就是我们的NSRecursiveLock&lt;strong&gt;，&lt;/strong&gt;它就是递归锁！使用递归锁可以在一个线程中反复获取锁而不造成死锁，在这个过程中也会记录获取锁和释放锁的次数，只有等两者平衡的时候才会释放，下面是我们Demo中的示例：       &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:swift;gutter:true;&quot;&gt;
 // 递归调用
    func removeFromImageArray() -&amp;gt; Void {
        
        recursiveLock.lock()
        if (imageMutableArray.count&amp;gt;0) {
                
            imageMutableArray.removeFirst()
            self.removeFromImageArray()
        }
        recursiveLock.unlock()
    }
    
        
    // MARK: - removeFromDataImageArray
    // 模仿递归调用
    override func removeFromDataImageArray() -&amp;gt; Void {
        
        let dispatchGroup  = DispatchGroup.init()
        let dispatchQueue  = DispatchQueue.init(label:queueLabel, qos: .default, attributes: .concurrent)
        dispatchQueue.async(group: dispatchGroup, qos: .default, flags: DispatchWorkItemFlags.noQoS) {
                
            self.removeFromImageArray()
        }
        
        dispatchGroup.notify(queue: DispatchQueue.main) {
                
            self.now = CFAbsoluteTimeGetCurrent()
            let resultString = &quot;操作开始时间:&quot; + String(describing: self.then) + &quot;\n结束时间:&quot;+String(describing: self.now) + &quot;\n整个操作用时:&quot;+String(self.now! - self.then!) + &quot;ms&quot;
            self.resulttextView.text = resultString
        }
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;@synchronized&lt;/strong&gt;&lt;/span&gt;    &lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      @synchronized你要说它简单，它的用法的确都是比较简单的，要想深了探究一下它的话，它里面的东西还的确是挺多的！但我们是在Swift中来讨论线程锁的，这里也就不能再使用 @synchronized，因为在Swift中它是不在使用了的，相应代替它的是下面下面这两句：&lt;span&gt;objc_sync_enter()  中间是你需要加锁的代码  &lt;/span&gt;&lt;span&gt;objc_sync_exit() ，那上面相同的操作我们用这个互斥锁写的话代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:swift;gutter:true;&quot;&gt;
 // MARK: - removeFromDataImageArray
    override func removeFromDataImageArray() -&amp;gt; Void {
        
        while (true) {
                //互斥锁
                objc_sync_enter(self)
                if (imageMutableArray.count &amp;gt; 0) {
                        
                        imageMutableArray.removeFirst()
                }else{
                        
                        now = CFAbsoluteTimeGetCurrent()
                        let resultString = &quot;操作开始时间:&quot; + String(describing: then) + &quot;\n结束时间:&quot;+String(describing: now) + &quot;\n整个操作用时:&quot;+String(now! - then!) + &quot;ms&quot;
                        DispatchQueue.main.async {
                                
                                self.resulttextView.text = resultString
                        }
                        return
                }
                objc_sync_exit(self)
        }
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;dispatch_semaphore_t 信号量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      dispatch_semaphore_t是属于GCD里面的东西，在前面终结多线程的时候我们说把它放在我们总结线程锁的时候说，在这里我们就说一些这个信号量，dispatch_semaphore_t 和前面@synchronized一样都是我们OC的写法，在我们的Swift中也不是这样写的，全部的内容都是在DispatchSemaphore中，关于GCD方面API的对比我们在下面做了一张表，大致的说一下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/739006/201712/739006-20171201143616008-9270677.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;      你看完了这张图的对比以及总结之后，我们说回我们的主题：DispatchSemaphore 可以看到它的主要的方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:swift;gutter:true;&quot;&gt;
open class DispatchSemaphore : DispatchObject {
}

/// dispatch_semaphore
extension DispatchSemaphore {
    // 发送信号，让信号量+1方法
    public func signal() -&amp;gt; Int
    // 等待，让信号量-1方法
    public func wait()
    // 下面两个方法可以设置等待的时间，过了这个时间要是没有让信号量大于或者等于初始化的信号量值的时候
    // 就会自己接着往执行代码，相等于我们的锁是失效了的
    public func wait(timeout: DispatchTime) -&amp;gt; DispatchTimeoutResult

    public func wait(wallTimeout: DispatchWallTime) -&amp;gt; DispatchTimeoutResult
}
extension DispatchSemaphore {

    
    /*!
     * @function dispatch_semaphore_create
     *
     * @abstract
     * Creates new counting semaphore with an initial value.
     *
     * @discussion
     * Passing zero for the value is useful for when two threads need to reconcile
     * the completion of a particular event. Passing a value greater than zero is
     * useful for managing a finite pool of resources, where the pool size is equal
     * to the value.
     *
     * @param value
     * The starting value for the semaphore. Passing a value less than zero will
     * cause NULL to be returned.
     *
     * @result
     * The newly created semaphore, or NULL on failure.
     */
    @available(iOS 4.0, *)
    public /*not inherited*/ init(value: Int)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       OC和Swift的用法是一样的，只是在写法上有一些的区别，这里就不再说OC的了，我们直接看看Swift的代码怎么写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:swift;gutter:true;&quot;&gt;
// MARK: - startTestBtnAction
     override func removeFromDataImageArray() -&amp;gt; Void {
                
        while (true) {
                
                /* 也可以直接写： semaPhore.wait()
                   这里发生一个等待信号，信号量就-1，变成0 ，后面的任务就会处于等待状态，
                   等到信号量大于等于1的时候在执行,要是信号量不大于或者等于你初始化时候的值，它就一直处于等待状态
                   当然，你也可以在这里这是等待的时间  semaPhore.wait(timeout: DispatchTime.init(uptimeNanoseconds: UInt64(10)))
                   但过了这个时间之后在进入就等于是我们的锁失效了。面临的问题也就是相应的崩溃，在删除方法哪里，可以自己试一下
                 */
                _ = semaPhore.wait(timeout: DispatchTime.distantFuture)
                
                if (imageMutableArray.count &amp;gt; 0) {
                        
                        imageMutableArray.removeFirst()
                }else{
                        
                        now = CFAbsoluteTimeGetCurrent()
                        let resultString = &quot;操作开始时间:&quot; + String(describing: then) + &quot;\n结束时间:&quot;+String(describing: now) + &quot;\n整个操作用时:&quot;+String(now! - then!) + &quot;ms&quot;
                        
                        DispatchQueue.main.async {
                                
                                self.resulttextView.text = resultString
                        }
                        
                        // 不要忘记在这里加处理，不然return之后是执行不到下面的semaPhore.signal()代码
                        semaPhore.signal()
                        return
                }
                
                // signal() 方法，这里会使信号量+1
                   semaPhore.signal()
        }
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;POSIX &lt;/h4&gt;
&lt;hr/&gt;
&lt;p&gt;      POSIX和我们前面写的dispatch_semaphore_t用法是挺像的，但探究本质的haul它们根本就不是一个东西，POSIX是Unix/Linux平台上提供的一套条件互斥锁的API。你要是在OC的文件中只用的话你需要导入头文件：pthread.h&lt;/p&gt;
&lt;p&gt;在Swift中就不用了，但是在使用的时候不管是OC的还是Swift的，代码是一致的，它的几个主要的方法就是下面三个，剩下的具体的代码可以看demo或者是下面基本的方法：&lt;/p&gt;
&lt;p&gt;1、pthread_mutex_init        初始化方法&lt;/p&gt;
&lt;p&gt;2、pthread_mutex_lock      加锁方法&lt;/p&gt;
&lt;p&gt;3、pthread_mutex_unlock   解锁方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:swift;gutter:true;&quot;&gt;
class POSIXController: ThreadLockController {

    var imageMutableArray:Array&amp;lt;Any&amp;gt; = Array.init()

    var mutex:pthread_mutex_t = pthread_mutex_t()     //初始化pthread_mutex_t类型变量

    override func viewDidLoad() {
        super.viewDidLoad()
        
        // 初始化
        pthread_mutex_init(&amp;amp;mutex,nil)
        // Do any additional setup after loading the view.
        for  i in 0...1000 {
                
                imageMutableArray.append(&quot;imageArray===&quot;+String(i))
        }
        print(&quot;NSLock初始化的数组个数是&quot;,imageMutableArray.count)
    }
    // MARK: - startTestBtnAction
    override func removeFromDataImageArray() -&amp;gt; Void {
        
        while (true) {
                
                // 加锁
                pthread_mutex_lock(&amp;amp;mutex)
                if (imageMutableArray.count &amp;gt; 0) {
                        
                        imageMutableArray.removeFirst()
                }else{
                        
                        now = CFAbsoluteTimeGetCurrent()
                        let resultString = &quot;操作开始时间:&quot; + String(describing: then) + &quot;\n结束时间:&quot;+String(describing: now) + &quot;\n整个操作用时:&quot;+String(now! - then!) + &quot;ms&quot;
                      
                        DispatchQueue.main.async {
                                
                                self.resulttextView.text = resultString
                        }
                        pthread_mutex_unlock(&amp;amp;mutex);
                        return
                }
                // 解锁
                pthread_mutex_unlock(&amp;amp;mutex)
        }
    }
    /*
         Swift 的deinit函数实际的作用和OC中的dealloc函数是一样的
         对象的释放  通知  代理等等的处理都是在这里处理的
    */
    deinit {
        pthread_mutex_destroy(&amp;amp;mutex);  //释放该锁的数据结构
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;剩下的还有什么&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;      1、&lt;strong&gt;OSSpinLock   &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;      首先要提的是OSSpinLock已经出现了BUG，导致并不能完全保证是线程安全，所以这个我们知道，大概的了解一下，具体的问题可以去这里仔细看看：&lt;span&gt;&lt;a href=&quot;https://blog.ibireme.com/author/ibireme/&quot; target=&quot;_blank&quot;&gt;不再安全的 OSSpinLock&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;      2、&lt;strong&gt;dispatch_barrier_async/dispatch_barrier_sync&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;      这个我在前面总结GCD的时候说过了这个“栅栏”函数，就不在这里重复说了&lt;/p&gt;
&lt;p&gt;      3、最后就是Demo的地址了，这个Demo原本是想用Swift试着模仿一下微信的UI的，包括聊天框架那部分，以前写过OC的，这次春被用Swift写一下，主要也是为了用一下Swift，以及看一下4.0它的一些新的特性，不然很久不写，一些东西比较容易遗忘！  &lt;/p&gt;
&lt;p&gt;      &lt;a href=&quot;https://github.com/TaoaXu/SwiftTest&quot; target=&quot;_blank&quot;&gt;DemoGit地址&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 02 Dec 2017 05:38:00 +0000</pubDate>
<dc:creator>Zxiao..旭</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/taoxu/p/7801017.html</dc:identifier>
</item>
<item>
<title>常见函数错误引发的思考. - 大转转FE</title>
<link>http://www.cnblogs.com/zhuanzhuanfe/p/7953985.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhuanzhuanfe/p/7953985.html</guid>
<description>&lt;p&gt;今天在写代码的时候，我犯了一个很low的错误，废话不多说，直接上代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   console.log('hello world'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; }()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;大家看到之后，第一反应肯定会认为是个语法错误，可是自己仔细想想，这是什么原因？似乎还不能解释清楚，好奇宝宝模式立即启动，经过查阅相关资料得到了答案，接下来我们一起来探讨下其中的原理。&lt;/p&gt;
&lt;h3&gt;疑惑解答&lt;/h3&gt;
&lt;p&gt;大家有没有考虑过为什么上面这种写法会报错？&lt;/p&gt;
&lt;p&gt;原来，浏览器遇到function关键字的时候会认为这是一个函数声明，函数声明必须包括：关键字function、函数名、形参、函数体。在解析上面代码的时候，解析器发现没有出现函数名而直接出现了()，浏览器便会认为这种定义不符合规范，所以就报错了。&lt;/p&gt;
&lt;p&gt;既然是缺少函数名，如果我们给它添加函数名，是不是会正确调用？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; hello () {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     console.log('hello world'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; }()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;让我们静静等待奇迹出现！&lt;/p&gt;
&lt;p&gt;哎，浏览器在解析的时候怎么又报错了？&lt;/p&gt;
&lt;p&gt;其实是函数声明的缘故，也就是说通过声明的函数会被提升到其他代码的前面。提升之后应该是这样了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; hello () {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     console.log('hello world'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; ...&lt;span&gt;//&lt;/span&gt;&lt;span&gt; do something &lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; (); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 咦？这是什么东东？&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;解析器对此也很茫然，不知道该按照什么标准去解析，只能告诉你写的不够规范了。 大家看一下下面的这种用法，会不会感觉很熟悉？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; hello = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     console.log('hello world'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; hello();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;试想一下，如果用()把上面的函数名hello包裹起来，会发生什么&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; hello = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     console.log('hello world'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; (hello)();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bingo，浏览器输出了“hello world”，这种写法是不是特别像数学中的结合律。&lt;/p&gt;
&lt;p&gt;继续对上面的函数调用做一些改变，如果把函数名hello替换成匿名函数,猜想应该也可以调用成功。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   console.log('hello world'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; })();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;果然达到了预期的结果，调用成功了！这是为什么？&lt;/p&gt;
&lt;p&gt;因为用()把匿名函数包裹起来，解析器便会认为这是一个函数表达式，函数表达式的后面添加()显然是可以正确执行的。此外，除了()之外,也可以使用!等常见的一元运算符来执行匿名函数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; !&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   console.log('hello world'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; }();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面这段代码会输出“hello world”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tips：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说到函数定义，需要注意函数声明和函数表达式两者的区别（大神可以跳过喔~）：前者有个函数声明提升的过程，在代码预解析的时候，会把函数声明提升到代码的顶部，所以在声明函数位置之前调用函数并不会出错；而后者只是进行变量提升，因此，解析器只有执行函数表达式的代码之后才可以调用该函数。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;说到这里，想起了一个老生常谈的问题，函数总是在特定的作用域中执行，函数中this的指向是不是也把好多同学弄的一知半解呢？让我们来继续研究一下~~~&lt;/p&gt;
&lt;h3&gt;走进函数的this&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;一般情况下，哪个对象调用函数（方法），则this便指向哪个对象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过一个例子来说明该如何确定this的指向。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; obj=&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     number: 1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     getOwnNumber: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; number = 2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.number;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     getNumber: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; number = 3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; number = 4&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.number;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;console.log(obj.getOwnNumber());
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; console.log(obj.getNumber()());
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;大家猜一下，第一个输出结果是多少？大家不要犹豫，答案是1，就这么简单！&lt;/p&gt;
&lt;p&gt;很明显，是obj调用的getOwnNumber方法，而obj对象内部定义的number值为1，所以第一个输出结果理所应当是1。&lt;/p&gt;
&lt;p&gt;问题来了，第二个输出结果是多少？1？2？3？4？&lt;/p&gt;
&lt;p&gt;还是同样的方法，我们找一找this到底指向哪个对象。obj.getNumber()运行结果是一个匿名函数，然后再执行匿名函数。我们可以把这个过程拆分一下，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; fun = obj.getNumber() &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回一个匿名函数&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; fun(); 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;经过分解之后，很明显，函数是在全局作用域中调用的，所以此处的this理应指向window对象，window对象中没有定义number，所以结果是undefined。&lt;/p&gt;
&lt;p&gt;假想一下，当代码复杂之后，确定this的指向是不是更加麻烦？别急，ES6规范提供了箭头函数的语法，可以帮助我们解决这个问题。箭头函数是何方神圣，该怎么定义呢？箭头函数的基本写法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;    const hello = () =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         console.log('hello'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我们尝试使用箭头函数来改造obj对象的getNumber方法:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; const obj=&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     number: 1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    getOwnNumber() {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         const number = 2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.number;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    getNumber() {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         const number = 3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; () =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             const number = 4&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.number;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;console.log(obj.getOwnNumber());
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; console.log(obj.getNumber()());
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行之后会发现两个输出结果都是1。这是为什么？&lt;/p&gt;
&lt;p&gt;因为箭头函数内部的this是指向定义函数时所在的对象，在上面的代码中，this指向了obj对象，所以输出1。有了箭头函数之后，我们不再需要通过变量保存对象的this指针或者通过bind方法改变this的指针，轻松实现我们预期的效果。&lt;/p&gt;
&lt;p&gt;箭头函数和普通函数的主要区别：（摘抄自阮一峰大神的《ES6标准入门》）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;箭头函数体内的this就是&lt;strong&gt;定义时所在的对象&lt;/strong&gt;，而不是使用时所在的对象。&lt;/li&gt;
&lt;li&gt;箭头函数不可以当做构造函数。也就是说，不可以使用new命令，否则会抛出一个错误。&lt;/li&gt;
&lt;li&gt;不可以使用arguments对象，该对象在函数体内不存在。可以使用rest参数代替。&lt;/li&gt;
&lt;li&gt;不可以使用yield命令，因此箭头函数不能用作Generator函数&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;但是箭头函数也不是可以在任何场景下都能使用，如果我们要改变this的指向该怎么办？在ES6出现之前，我们可以使用call、apply和bind方法来改变函数中this的指向，ES7提出了使用双冒号（::）的运算符，使得我们可以通过这个运算符来改变箭头函数中this的指向。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;除了箭头函数之外，ES6又对之前的函数做了哪些优化？&lt;/p&gt;
&lt;h3&gt;构造函数&lt;/h3&gt;
&lt;p&gt;在其他语言中可以通过类实现面向对象的功能，但是在ES6规范公布之前，JavaScript中并没有类的概念，面向对象的语法只能通过构造函数的方式来实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Zhuanzhuan (name) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; Zhuanzhuan.prototype.say = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;    console.log('hi~I am zhuanzhuan'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;要想实例化这个“类”，必须使用new关键字&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; zhuanzhuan = &lt;span&gt;new&lt;/span&gt; Zhuanzhuan('zhuanzhuan');
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在ES6之前，使用构造函数来创建对象，阅读起来并不是很清晰。ES6提供的class语法跟其他面向对象的语言语法较为接近。 使用ES6的语法来改写一下上面用构造函数定义的“类”。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;class Zhuanzhuan {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    constructor (name) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;    say () {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         console.log('hi~I am zhuanzhuan'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; let zhuanzhuan = &lt;span&gt;new&lt;/span&gt; Zhuanzhuan('zhuanzhuan');
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;看起来是不是特别像C++语言中的面向对象风格呢,出现class之后，妈妈再也不用担心我写的类不够清晰了~~~&lt;/p&gt;
&lt;p&gt;JavaScript语言中的函数内容相当丰富，需要我们不断去通过实践去加深理解。骐骥一跃，不能十步，驽马十驾，功在不舍。多总结，多思考。大家如果有好的想法，可以相互交流和分享，每天进步一点点，不断提高自己的专业技能。&lt;/p&gt;
&lt;p&gt;这就是我因为一个小错误，引发的思考。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt;如果你喜欢我们的文章，关注我们的公众号和我们互动吧。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1203274/201709/1203274-20170929105350169-1798795184.jpg&quot; alt=&quot;&quot; width=&quot;344&quot; height=&quot;344&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 02 Dec 2017 05:07:00 +0000</pubDate>
<dc:creator>大转转FE</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhuanzhuanfe/p/7953985.html</dc:identifier>
</item>
<item>
<title>企业级监控zabbix基础 - 大天使彦</title>
<link>http://www.cnblogs.com/1477717815fuming/p/7953981.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/1477717815fuming/p/7953981.html</guid>
<description>[unable to retrieve full-text content]一个标准的监控系统所具备的基本功能： 1.数据的采集 2.为了展示其长期走势，将数据存储下来 3.万一某次采样的结果不在被认为是合理的范围内，然后就会做出告警操作，尽早的让相关人员得知到此消息 4.展示 监控的对象除了主机之外，还包括主机之间的流量 对主机而言所需监控指标： 系统指标：CPU，mem</description>
<pubDate>Sat, 02 Dec 2017 05:04:00 +0000</pubDate>
<dc:creator>大天使彦</dc:creator>
<dc:identifier>http://www.cnblogs.com/1477717815fuming/p/7953981.html</dc:identifier>
</item>
<item>
<title>Akka（39）： Http：File streaming-文件交换 - 雪川大虫</title>
<link>http://www.cnblogs.com/tiger-xc/p/7953893.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tiger-xc/p/7953893.html</guid>
<description>&lt;p&gt; &lt;span&gt; 所谓文件交换指的是Http协议中服务端和客户端之间文件的上传和下载。Akka-http作为一种系统集成工具应该具备高效率的数据交换方式包括文件交换和数据库表行的上传下载。Akka-http的数据交换模式支持流式操作：代表交换数据可以是一种无限长度流的元素。这种模式首先解决了纯Http大数据通过Multipart传输所必须进行的数据分段操作和复杂的消息属性设定等需要的技术门槛，再者用户还可以很方便的使用Akka-stream对数据进行深度处理，免去了数据转换的麻烦。更重要的是：Akka-http还支持reactive-stream，可以避免由传输速率所产生的种种问题。在本篇我们讨论利用Akka-http进行文件的双向传递。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 任何文件的内容储存格式无论在硬盘、内存或者数据线上都是一堆bytes。文件交换流程包括读取文件里的bytes，传送这些bytes，最终把这些bytes写入文件。我们看到这里每个环节操作目标都是bytes，所以可能在程序里是不需要任何数据转换过程的。Akka提供了一组文件读写函数，如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  def fromPath(f: Path, chunkSize: Int = &lt;span&gt;8192&lt;/span&gt;): Source[ByteString, Future[IOResult]] =&lt;span&gt;
    fromPath(f, chunkSize, startPosition &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)

  def fromPath(f: Path, chunkSize: Int, startPosition: Long): Source[ByteString, Future[IOResult]] &lt;/span&gt;=&lt;span&gt;
    Source.fromGraph(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FileSource(f, chunkSize, startPosition, DefaultAttributes.fileSource, sourceShape(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FileSource&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)))

  def toPath(f: Path, options: Set[OpenOption] &lt;/span&gt;= Set(WRITE, TRUNCATE_EXISTING, CREATE)): Sink[ByteString, Future[IOResult]] =&lt;span&gt;
    toPath(f, options, startPosition &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)

  def toPath(f: Path, options: Set[OpenOption], startPosition: Long): Sink[ByteString, Future[IOResult]] &lt;/span&gt;=&lt;span&gt;
    Sink.fromGraph(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FileSink(f, startPosition, options, DefaultAttributes.fileSink, sinkShape(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FileSink&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;我们看到：fromPath类型是Source[ByteSgtring,_]，toPath类型是Sink[ByteString,_]，直接就是流型式，应该可以直接放入Http消息的Entity中，如下： &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  def fileStream(filePath: String, chunkSize: Int): Source[ByteString,Any] =&lt;span&gt; {
    def loadFile &lt;/span&gt;=&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   implicit val ec = httpSys.dispatchers.lookup(&quot;akka.http.blocking-ops-dispatcher&quot;)&lt;/span&gt;
      val file = Paths.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(filePath)
      FileIO.fromPath(file, chunkSize)
        .withAttributes(ActorAttributes.dispatcher(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka.http.blocking-ops-dispatcher&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
    }
    limitableByteSource(loadFile)
  }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;fileStream是Source[ByteString,_]可以直接放进Entity：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  val uploadText = HttpRequest(HttpMethods.POST,uri = s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:8011/file/text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  val textData &lt;/span&gt;=&lt;span&gt; HttpEntity(
    ContentTypes.`application&lt;/span&gt;/octet-&lt;span&gt;stream`,
    fileStream(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/Users/tiger-macpro/downloads/A4.TIF&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;256&lt;/span&gt;&lt;span&gt;)
  )&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;我们把fileStream放入了HttpRequest中。对于HttpResponse可以用下面的方式：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; val route = pathPrefix(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) {
    (&lt;/span&gt;&lt;span&gt;get&lt;/span&gt; &amp;amp; path(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; / Remaining)) { fp =&amp;gt;&lt;span&gt;
      withoutSizeLimit {
        complete(
          HttpEntity(
            ContentTypes.`application&lt;/span&gt;/octet-&lt;span&gt;stream`,
            fileStream(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/users/tiger-macpro/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + fp, &lt;span&gt;256&lt;/span&gt;&lt;span&gt;))
        )
      }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注意：complete进行了HttpResponse的构建。因为Entity.dataByes就是Source[ByteString,_]，所以我们可以直接把它导入Sink：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;          entity.dataBytes.runWith(FileIO.toPath(Paths.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(destPath)))
            .onComplete { &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt; println(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Download file saved to: $destPath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;上面我们提过FileIO.toPath就是一个Sink。由于我们的目的是大型的文件交换，所以无论上传下载都使用了withoutSizeLimit：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; val route = pathPrefix(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) {
    (&lt;/span&gt;&lt;span&gt;get&lt;/span&gt; &amp;amp; path(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;exchange&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; / Remaining)) { fp =&amp;gt;&lt;span&gt;
      withoutSizeLimit {
        complete(
          HttpEntity(
            ContentTypes.`application&lt;/span&gt;/octet-&lt;span&gt;stream`,
            fileStream(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/users/tiger-macpro/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + fp, &lt;span&gt;256&lt;/span&gt;&lt;span&gt;))
        )
      }
    } &lt;/span&gt;~&lt;span&gt;
      (post &lt;/span&gt;&amp;amp; path(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;exchange&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)) {
        withoutSizeLimit {
          extractDataBytes { bytes &lt;/span&gt;=&amp;gt;&lt;span&gt;
            val fut &lt;/span&gt;= bytes.runWith(FileIO.toPath(Paths.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(destPath)))
            onComplete(fut) { _ &lt;/span&gt;=&amp;gt;&lt;span&gt;
              complete(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Save upload file to: $destPath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)
            }
          }
        }

      }
&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;好了下面的示范代码里对字符型或二进制文件都进行了交换的示范操作：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;服务端：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import akka.actor._
import akka.stream._
import akka.stream.scaladsl._
import akka.http.scaladsl.Http
import akka.http.scaladsl.server.Directives._
import akka.http.scaladsl.model._
import akka.http.scaladsl.model.HttpEntity._
import java.nio.file._

&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; FileServer extends App {

  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val httpSys = ActorSystem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;httpSystem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val httpMat =&lt;span&gt; ActorMaterializer()
  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val httpEC =&lt;span&gt; httpSys.dispatcher
  
  def fileStream(filePath: String, chunkSize: Int) &lt;/span&gt;=&lt;span&gt; {
     def loadFile &lt;/span&gt;=&lt;span&gt; {
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   implicit val ec = httpSys.dispatchers.lookup(&quot;akka.http.blocking-ops-dispatcher&quot;)&lt;/span&gt;
       val file = Paths.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(filePath)
       FileIO.fromPath(file, chunkSize)
         .withAttributes(ActorAttributes.dispatcher(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka.http.blocking-ops-dispatcher&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
     }
    limitableByteSource(loadFile)
  }
  val destPath &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/users/tiger-macpro/downloads/A4-1.TIF&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  val route &lt;/span&gt;= pathPrefix(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) {
    (&lt;/span&gt;&lt;span&gt;get&lt;/span&gt; &amp;amp; path(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;exchange&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; / Remaining)) { fp =&amp;gt;&lt;span&gt;
      withoutSizeLimit {
        complete(
          HttpEntity(
            ContentTypes.`application&lt;/span&gt;/octet-&lt;span&gt;stream`,
            fileStream(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/users/tiger-macpro/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + fp, &lt;span&gt;256&lt;/span&gt;&lt;span&gt;))
        )
      }
    } &lt;/span&gt;~&lt;span&gt;
      (post &lt;/span&gt;&amp;amp; path(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;exchange&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)) {
        withoutSizeLimit {
          extractDataBytes { bytes &lt;/span&gt;=&amp;gt;&lt;span&gt;
            val fut &lt;/span&gt;= bytes.runWith(FileIO.toPath(Paths.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(destPath)))
            onComplete(fut) { _ &lt;/span&gt;=&amp;gt;&lt;span&gt;
              complete(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Save upload file to: $destPath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            }
          }
        }

      }
  }
  
  val (port, host) &lt;/span&gt;= (&lt;span&gt;8011&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

  val bindingFuture &lt;/span&gt;=&lt;span&gt; Http().bindAndHandle(route,host,port)

  println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Server running at $host $port. Press any key to exit ...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

  scala.io.StdIn.readLine()

  bindingFuture.flatMap(_.unbind())
    .onComplete(_ &lt;/span&gt;=&amp;gt;&lt;span&gt; httpSys.terminate())

}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;客户端：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import akka.actor._
import akka.stream._
import akka.stream.scaladsl._
import akka.http.scaladsl.Http
import akka.http.scaladsl.model.HttpEntity.limitableByteSource
import akka.http.scaladsl.model._
import java.nio.file._
import akka.util.ByteString
import scala.util._

&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; FileClient extends App {

  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val sys = ActorSystem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ClientSys&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val mat =&lt;span&gt; ActorMaterializer()
  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val ec =&lt;span&gt; sys.dispatcher

  def downloadFileTo(request: HttpRequest, destPath: String) &lt;/span&gt;=&lt;span&gt; {
    val futResp &lt;/span&gt;=&lt;span&gt; Http(sys).singleRequest(request)
    futResp
      .andThen {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(r@HttpResponse(StatusCodes.OK, _, entity, _)) =&amp;gt;&lt;span&gt;
          entity.dataBytes.runWith(FileIO.toPath(Paths.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(destPath)))
            .onComplete { &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt; println(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Download file saved to: $destPath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) }
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(r@HttpResponse(code, _, _, _)) =&amp;gt;&lt;span&gt;
          println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Download request failed, response code: $code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          r.discardEntityBytes()
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(_) =&amp;gt; println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unable to download file!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(err) =&amp;gt; println(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Download failed: ${err.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      }

  }

  val dlFile &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Downloads/readme.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  val downloadText &lt;/span&gt;= HttpRequest(uri = s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:8011/file/exchange/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; dlFile)

  downloadFileTo(downloadText, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/users/tiger-macpro/downloads/sample.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  scala.io.StdIn.readLine()

  val dlFile2 &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Downloads/image.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  val downloadText2 &lt;/span&gt;= HttpRequest(uri = s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:8011/file/exchange/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; dlFile2)
  downloadFileTo(downloadText2, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/users/tiger-macpro/downloads/sample.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  scala.io.StdIn.readLine()

  def uploadFile(request: HttpRequest, dataEntity: RequestEntity) &lt;/span&gt;=&lt;span&gt; {
    val futResp &lt;/span&gt;=&lt;span&gt; Http(sys).singleRequest(
        request.copy(entity &lt;/span&gt;=&lt;span&gt; dataEntity)
      )
    futResp
      .andThen {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(r@HttpResponse(StatusCodes.OK, _, entity, _)) =&amp;gt;&lt;span&gt;
        entity.dataBytes.map(_.utf8String).runForeach(println)
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(r@HttpResponse(code, _, _, _)) =&amp;gt;&lt;span&gt;
          println(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Upload request failed, response code: $code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          r.discardEntityBytes()
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(_) =&amp;gt; println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unable to Upload file!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(err) =&amp;gt; println(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Upload failed: ${err.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

      }
  }

  def fileStream(filePath: String, chunkSize: Int): Source[ByteString,Any] &lt;/span&gt;=&lt;span&gt; {
    def loadFile &lt;/span&gt;=&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   implicit val ec = httpSys.dispatchers.lookup(&quot;akka.http.blocking-ops-dispatcher&quot;)&lt;/span&gt;
      val file = Paths.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(filePath)
      FileIO.fromPath(file, chunkSize)
        .withAttributes(ActorAttributes.dispatcher(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka.http.blocking-ops-dispatcher&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
    }
    limitableByteSource(loadFile)
  }

  val uploadText &lt;/span&gt;= HttpRequest(HttpMethods.POST,uri = s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:8011/file/exchange&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  val textData &lt;/span&gt;=&lt;span&gt; HttpEntity(
    ContentTypes.`application&lt;/span&gt;/octet-&lt;span&gt;stream`,
    fileStream(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/Users/tiger-macpro/downloads/readme.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;256&lt;/span&gt;&lt;span&gt;)
  )

  uploadFile(uploadText,textData)

  scala.io.StdIn.readLine()

  sys.terminate()


}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 02 Dec 2017 04:28:00 +0000</pubDate>
<dc:creator>雪川大虫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tiger-xc/p/7953893.html</dc:identifier>
</item>
<item>
<title>京东分布式缓存redis应用实战 - 杉枫</title>
<link>http://www.cnblogs.com/freedommovie/p/7953877.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/freedommovie/p/7953877.html</guid>
<description>[unable to retrieve full-text content]互联网应用特点三高：高并发、高可用、高性能，要达到这几个目标，好的方法方式是建立相应指标， 来进行准确描述，有了准确指标进行监控，方能易于实现我们设定目标。 先将指标介绍下，方便下面相关术语使用，qps即每秒处理请求数，是一个机器性能重要描述指标，通 过它我们知道单个容器能处理最大请求数。目前JD所</description>
<pubDate>Sat, 02 Dec 2017 04:15:00 +0000</pubDate>
<dc:creator>杉枫</dc:creator>
<dc:identifier>http://www.cnblogs.com/freedommovie/p/7953877.html</dc:identifier>
</item>
</channel>
</rss>