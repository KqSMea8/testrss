<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Scala编程快速入门系列（二） - Huidoo_Yang</title>
<link>http://www.cnblogs.com/yangp/p/8584066.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangp/p/8584066.html</guid>
<description>&lt;p&gt;&lt;strong&gt;目    录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、Scala概述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、Scala数据类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、Scala函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四、Scala集合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五、Scala伴生对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;六、Scala trait&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;七、Actor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;八、隐式转换与隐式参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;九、Scala JDBC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于整理的篇幅较长，所以文章计划分三次发布。第一部分的内容请转至&lt;a href=&quot;http://www.cnblogs.com/yangp/p/8575705.html&quot; target=&quot;_blank&quot;&gt;系列（一）&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;四、Scala集合&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1. Scala集合概述&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　Scala对集合的操作就是Spark程序的实现方式。Spark中有一个RDD（Resilience弹性的、Distributed分布式、DataSet数据集），spark的程序都是将源数据加载过来变成一个RDD，然后每一步操作都是集合的元素进行操作。对于Spark来说是分布式的操作，但是对于写程序来说无需考虑分布式，只需考虑对集合元素的操作。Scala的集合操作是针对单机的，Spark是针对分布式的，但是代码都类似。&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2. List集合&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　这里举例创建集合和获取集合元素的同时也有一些常用的集合操作函数。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;创建List集合&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　 在Scala中创建一个集合不需要new关键字。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  val list &lt;/span&gt;=List(1,4,6,4,1&lt;span&gt;)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;获取集合的元素&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  val list &lt;/span&gt;=List(1,4,6,4,1&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; main(args: Array[String]): Unit =&lt;span&gt; {
    println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;获取集合的第2个元素：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+list(1))//&lt;span&gt;集合的下标从0开始
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　使用list()，括号中传入集合元素的位置来获取集合元素。 &lt;/p&gt;
&lt;p&gt;　　map函数的本质就是使用匿名函数对集合中每一个元素做同样的操作。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  val list &lt;/span&gt;=List(1,4,6,4,1&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; main(args: Array[String]): Unit =&lt;span&gt; {
    val b&lt;/span&gt;= list.map(a=&amp;gt;{println(a+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-----&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);a+1&lt;span&gt;})
    val c&lt;/span&gt;= list.map(_+1&lt;span&gt;)
    println(b)
    println(c)
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　list.map是集合list调用map方法，map方法对集合的每个元素进行操作，具体的操作由匿名函数定义。第一个map函数中的a代表集合List的每一个元素，作为匿名函数的参数，执行方法体打印，然后返回最后一行a+2赋给新的集合相应位置的元素。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;　　list.map(_+1))//这样写是上式的简写形式，下划线代表集合的每一个元素。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&quot;+:&quot;和&quot;:+&quot;函数向集合添加元素&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  val list &lt;/span&gt;=List(1,4,6,4,1&lt;span&gt;)
  val list2&lt;/span&gt;=list.+:(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;杨辉三角&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  val list3&lt;/span&gt;=list.:+(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;杨辉三角&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; main(args: Array[String]): Unit =&lt;span&gt; {
    println(list2)
    println(list3)
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　+: 在集合第一个位置添加元素；:+ 在集合最后一个位置添加元素。运行结果如下：&lt;/p&gt;
&lt;p&gt;　　List(杨辉三角, 1, 4, 6, 4, 1)&lt;br/&gt;　　List(1, 4, 6, 4, 1, 杨辉三角) &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;foreach函数遍历输出&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　foreach和map很相似，都是对集合的每一个元素做相应的操作，只是map会返回值给集合。如果要打印结果一般用foreach。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  val list &lt;/span&gt;=List(1,4,6,4,1&lt;span&gt;)
  val list2&lt;/span&gt;=list.+:(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;杨辉三角&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; main(args: Array[String]): Unit =&lt;span&gt; {
    list2.foreach(i &lt;/span&gt;=&amp;gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;i))//是对集合list2中的每一个元素遍历，i表示集合中的每一个元素。
    list2.foreach(i &lt;/span&gt;=&amp;gt; {val j = i + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt; j)})//可以对集合中的元素先进行有关操作
    list2.foreach(&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt; _)//对集合遍历输出可以简化为此式
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;distinct函数去重&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  val list &lt;/span&gt;=List(1,4,6,4,1&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; main(args: Array[String]): Unit =&lt;span&gt; {
    list.distinct.foreach(&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt; _)
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　输出结果为：146&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;slice函数截取集合&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; 　　slice函数需要两个参数，第一个参数表示从该下标开始截取，第二个参数表示截取到该下标（不包含）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  val list =List(1,4,6,4,1&lt;span&gt;)
  def main(args: Array[String]): Unit =&lt;span&gt; {
    print(list.slice(0,3&lt;span&gt;))
  }
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　结果为：List(1, 4, 6)&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;for循环遍历集合&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  val list &lt;/span&gt;=List(1,4,6,4,1&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; main(args: Array[String]): Unit =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i &amp;lt;-&lt;span&gt; list){
      &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(i)
    }
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;length函数获取集合长度&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  val list &lt;/span&gt;=List(1,4,6,4,1&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; main(args: Array[String]): Unit =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i &amp;lt;- 0.to(list.length-1&lt;span&gt;)){
      &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(list(i))
    }
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&quot;/:&quot;函数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  val list &lt;/span&gt;=List(1,4,6,4,1&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main(args: Array[String]) {
    &lt;/span&gt;//list./:是调用./方法，它是一个柯里化函数，其中(100)是第一个参数，({(sum,num)=&amp;gt;&lt;span&gt;print&lt;/span&gt;(sum+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+num+&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;);sum-&lt;span&gt;num})是第二个参数。
    println(list.&lt;/span&gt;/:(100&lt;span&gt;)({
      (sum,num)&lt;/span&gt;=&amp;gt;&lt;span&gt;print&lt;/span&gt;(sum+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+num+&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;);//函数/:的第二个参数——匿名函数需要两个参数，匿名函数第一个参数为/:函数的第一个参数，匿名函数的返回值类型和/&lt;span&gt;:函数的第一个参数类型一致
        sum+&lt;/span&gt;num//这里的匿名函数实际上是(sum,num)=&amp;gt;sum-num，就是传入两个参数sum和num，返回sum+num，返回值的类型显然和sum的类型一样。/&lt;span&gt;:方法详见源码解读。
    }));&lt;/span&gt;//返回结果为100--1 101--4 105--6 111--4 115--1 116&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;//&lt;span&gt;源码片段：
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;def&lt;/span&gt; /:[B](z: B)(op: (B, A) =&amp;gt; B): B =&lt;span&gt; foldLeft(z)(op)

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; foldLeft[B](z: B)(op: (B, A) =&amp;gt; B): B =&lt;span&gt; {
  var result &lt;/span&gt;=&lt;span&gt; z
  this foreach (x &lt;/span&gt;=&amp;gt; result =&lt;span&gt; op(result, x))
  result
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　源码解读：如下代码是/:函数的源码，可见/:是个柯里化函数。其中，[B]是函数/:的泛型；(z: B)是第一个参数，其类型为泛型[B]；(op: (B, A) =&amp;gt; B)是第二个参数，它是一个匿名函数op，它需要两个参数(B, A)，能返回B类型的值。最后的:B是函数/:的返回值类型。/:(z)(op)=foldLeft(z)(op)。&lt;/p&gt;
&lt;p&gt;　　再看foldLeft函数，也是一个柯里化函数，需要两个参数，参数类型和/:的参数类型一致。其方法体可见，首先将传入的第一个B类型的参数z赋值给变量result，然后调用该方法的当前对象（如集合List对象）使用foreach（这里的this foreach和this.foreach是一样的道理）方法遍历当前对象中的所有元素，其元素x的类型就是匿名函数的第二个参数的类型A，这里调用匿名函数op，以result和x为参数，其返回结果赋值给result，通过多次调用匿名函数循环集合的所有元素，最后返回result，作为函数foldLeft的返回值，也就是函数/:的返回值。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;reduce函数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; 　　reduce函数和/:函数很类似，使用的频率很高。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  val list &lt;/span&gt;=List(1,4,6,4,1&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; main(args: Array[String]): Unit =&lt;span&gt; {
    &lt;/span&gt;//reduce函数，需要一个匿名函数做参数，此匿名函数的类型是(A1,A1)=&amp;gt;&lt;span&gt;A1，匿名函数第一次的参数是前两个元素；之后，第一个参数上一次的匿名函数返回值，第二个参数是依次位置的集合元素值。
    println(list.reduce((a: Int, b: Int) &lt;/span&gt;=&amp;gt;{println(a + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + b) ; a+b}))//&lt;span&gt;最终结果是所有元素的和16
    &lt;/span&gt;//&lt;span&gt;上式求所有元素的和和以简化为下面的形式
    println(list.reduce(_&lt;/span&gt;+&lt;span&gt;_))
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;//&lt;span&gt;源码片段：
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;def&lt;/span&gt; reduce[A1 &amp;gt;: A](op: (A1, A1) =&amp;gt; A1): A1 =&lt;span&gt; reduceLeft(op)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; reduceLeft[B &amp;gt;: A](op: (B, A) =&amp;gt; B): B =&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isEmpty)
    throw new UnsupportedOperationException(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;empty.reduceLeft&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

  var first &lt;/span&gt;=&lt;span&gt; true
  var acc: B &lt;/span&gt;=&lt;span&gt; 0.asInstanceOf[B]

  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (x &amp;lt;-&lt;span&gt; self) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (first) {
      acc &lt;/span&gt;=&lt;span&gt; x
      first &lt;/span&gt;=&lt;span&gt; false
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; acc =&lt;span&gt; op(acc, x)
  }
  acc
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　源码解读：reduce函数最终是要调用reduceLeft函数，顾名思义是需要从左侧开始。reduceLeft函数需要一个匿名函数(op: (B, A) =&amp;gt; B)，返回类型是B，和传入的第一个参数一样。if (isEmpty)如果集合为空，抛出异常。0.asInstanceOf[B]，B是一个泛型，0是int类型，0.asInstanceOf[B]意为将0转为B这个泛型类型。在else acc = op(acc, x)中才开始调用传入的匿名函数op。 &lt;/p&gt;
&lt;h3&gt;&lt;span&gt;3. Tuple元组&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;创建元组&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　在Scala中创建元组不需要关键字，只需要括号就行。它的特点是，定义了元组之后，元组的值不可以修改（和Python一致）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  val tuple &lt;/span&gt;=(1,4,6,4,1&lt;span&gt;)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;获取元组元素&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  val tuple &lt;/span&gt;=(1,4,6,4,1&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; main(args: Array[String]): Unit =&lt;span&gt; {
    println(tuple._1)&lt;/span&gt;//元组取值是用&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;._&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;，不能像list集合一样用括号
    println(tuple._5)&lt;/span&gt;//&lt;span&gt;Tuple元组下标从1开始。
  }
}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;4. Map集合&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　Scala中的Map有两种类型，一个是Mutable可以更改的，另一个是Immutable不可更改的。如果没有导包直接写Map的话是默认为Immutable的，如果要创建可以更改key的value值的Map集合需要导包，指定是Mutable的Map。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;创建Map集合&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  &lt;/span&gt;//&lt;span&gt;定义一个map集合，[String,Int]分别是键和值的泛型。
  var map &lt;/span&gt;= Map[String, Int](&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; 1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; 2);//使用“-&amp;gt;”来定义一对key value，每对key/&lt;span&gt;value使用逗号隔开。
  var map2 &lt;/span&gt;= Map[String, Int]((&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, 3), (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, 4));//也可以使用(key,value)的形式定义一对key/&lt;span&gt;value，因为Map中的每一个元素都是一个元组。
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;获取集合元素&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  var map &lt;/span&gt;= Map[String, Int](&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; 1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; 2&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main(args: Array[String]) {
    println(map(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));//&lt;span&gt;使用(键)来获取对应的值
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&quot;+=&quot;函数添加集合元素&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  var map &lt;/span&gt;= Map[String, Int](&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; 1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; 2&lt;span&gt;);
  map &lt;/span&gt;+= (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; 3&lt;span&gt;)
  map &lt;/span&gt;+= Tuple2.apply(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,4&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main(args: Array[String]) {
    println(map);&lt;/span&gt;//输出结果为Map(a -&amp;gt; 1, b -&amp;gt; 2, c -&amp;gt; 3, d -&amp;gt; 4&lt;span&gt;)
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;foreach函数遍历集合&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  var map &lt;/span&gt;= Map[String, Int](&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; 1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; 2&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main(args: Array[String]) {
    map.foreach(kv&lt;/span&gt;=&amp;gt;&lt;span&gt;{
      println(kv&lt;/span&gt;+&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;+kv._1+&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;+kv._2)//&lt;span&gt;这里的kv是集合m1的每一个元素，它是一组键值对，在Scala中是一个元组，所以要取得每一个元素的键和值可以使用元组的取值方法，kv._1获得kv的键，kv._2获得kv的值。
    })&lt;/span&gt;//其结果为(a,1) a 1\n(b,2) b 2&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;keys迭代器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;object TestCollection {
  var map &lt;/span&gt;= Map[String, Int](&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; 1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; 2&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; main(args: Array[String]): Unit =&lt;span&gt; {
    map.keys.foreach(k &lt;/span&gt;=&amp;gt; println(map(k)))//&lt;span&gt;map.keys获得map的所有keys，返回一个迭代器；然后可以使用foreach遍历，也可以在通过键获取值。
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;五、Scala伴生对象&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1. 伴生对象的概念&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　所谓伴生，就是在语言层面上，把static成员和非static成员用不同的表达方式，class（非静态成员）和object（静态成员），但双方具有相同的包名和命名（class_name和object_name可以完全一样），编译器会把他们编译到一起。编译会生成.class文件，编译时会把名称相同的class非静态的和object静态的编译到一起。&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2. Object&amp;amp;Class&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test{
  var field &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;field&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; //&lt;span&gt;类的属性
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; doSomeThing = println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;do something&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)//&lt;span&gt;类的方法，调用需要new 对象后才可以调用
}

object Test{
  val a &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a string&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; //&lt;span&gt;伴生对象的属性
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; printAString = println(a)//&lt;span&gt;这个方法是静态的，可以使用Test.printString来调用。
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　编译这个文件，同样生成两个class，一个TEST.class和一个Test$.class，这个Test$.class叫做虚构类。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;案例二（静态方法和属性）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestObject {
  val str &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Good!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
  &lt;span&gt;def&lt;/span&gt; func() =&lt;span&gt; {
    println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  }
}

object TestObject {
  val str&lt;/span&gt;= 100&lt;span&gt;;
  val single &lt;/span&gt;=&lt;span&gt; new TestObject();
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; func() = {//&lt;span&gt;定义在object里是静态方法
    println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello Scala!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  }
  &lt;/span&gt;/**
    *&lt;span&gt; main函数是static的，main函数如果定义在class中会当做普通函数，函数名为main而已。
    &lt;/span&gt;*/
  &lt;span&gt;def&lt;/span&gt;&lt;span&gt; main(args: Array[String]) {
    &lt;/span&gt;//&lt;span&gt;创建class的实例需要用new关键字
    val t1 &lt;/span&gt;=&lt;span&gt; new TestObject();
    println(t1.str);&lt;/span&gt;//&lt;span&gt;调用实例的str属性
    t1.func();&lt;/span&gt;//&lt;span&gt;调用实例的func01函数

    TestObject.func();&lt;/span&gt;//&lt;span&gt;Object名.静态方法名。
    println(TestObject.str);&lt;/span&gt;//&lt;span&gt;Object名.静态属性名。
  }
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　执行结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Good!
Hello World!
Hello Scala!
&lt;/span&gt;100
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;案例三（构造器）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt; TestConstructor(val a: Int, val b: Int) {//&lt;span&gt;class类后面的小括号，是默认的构造器
  var x &lt;/span&gt;= a;//&lt;span&gt;把参数a和b赋给变量
  var y &lt;/span&gt;=&lt;span&gt; b;

  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; this(xArg: Int) { //&lt;span&gt;this也是构造器，在方法体里面要调用默认的构造器。
    this(xArg, &lt;/span&gt;123&lt;span&gt;);
    println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I'm this constructor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
  }
}

object TestConstructor {&lt;/span&gt;//&lt;span&gt;这个对象是伴生着这个类出来的，所以叫伴生对象
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main(args: Array[String]) {
    val p1 &lt;/span&gt;= new TestConstructor(321);//&lt;span&gt;使用 this(xArg: Int)构造器
    println(p1.x)&lt;/span&gt;//321&lt;span&gt;
    println(p1.y)&lt;/span&gt;//123&lt;span&gt;
    val p2 &lt;/span&gt;= new TestConstructor(222, 333);//&lt;span&gt;使用Point(val x: Int, val y: Int)构造器
    println(p2.x)&lt;/span&gt;//222&lt;span&gt;
    println(p2.y)&lt;/span&gt;//333&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;六、Scala trait&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　trait可以认为是一种特性，但是不等同于Java中的接口，因为Java接口中没有实现的方法，train可以有实现了的方法（方法体），trait的作用在于提取封装共性，供各种类型的类共同使用。用法详见下面例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
trait Listen {//&lt;span&gt;和java的接口很像，但是不能new trait名。
  val name: String &lt;/span&gt;//&lt;span&gt;定义变量name
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; listen() =&lt;span&gt; {
    println( name &lt;/span&gt;+ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; is listening&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }
}
trait Read {
  val name: String
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; read() =&lt;span&gt; {
    println(name &lt;/span&gt;+ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; is reading&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }
}
trait Speak {
  val name: String
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; speak() =&lt;span&gt; {
    println(name &lt;/span&gt;+ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; is speaking.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }
}
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Human(val name: String) {//&lt;span&gt;默认构造器需要一个属性：名字
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; speak() = {//&lt;span&gt;方法
    println(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Look, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; is speaking.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }
}
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Animal(val name: String) {}//&lt;span&gt;创建一个动物类，构造器也是一个参数名字。
&lt;/span&gt;//&lt;span&gt;extends继承Animal类。Dog(override val name: String)，重写name；with关键字可以加上trait特性。和Java中的继承类，实现接口类似。
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Dog(override val name: String) extends Animal(name: String) with Speak with Listen with Read {
  &lt;/span&gt;//&lt;span&gt;重写一个方法只需在方法def前面加关键字override。
  override &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; toString(): String = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello, My name is &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}
object TestTrait {
  &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main(args: Array[String]) {
    &lt;/span&gt;//&lt;span&gt;创建Human类的对象，命名为张三。hi调用Human类的speak方法。
    val h1 &lt;/span&gt;= new Human(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    h1.speak()
    &lt;/span&gt;//&lt;span&gt;创建Dog对象，调用了trait中listen方法和speak方法。
    val dog &lt;/span&gt;= new Dog(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;八公&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    dog.listen()
    dog.speak()
    &lt;/span&gt;//&lt;span&gt;调用Dog类重写了的toString方法。
    println(dog)
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 16 Mar 2018 23:10:00 +0000</pubDate>
<dc:creator>Huidoo_Yang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangp/p/8584066.html</dc:identifier>
</item>
<item>
<title>毫秒级检测！你见过带GPU的树莓派吗？ - 梦里风林</title>
<link>http://www.cnblogs.com/hellocwh/p/8587013.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hellocwh/p/8587013.html</guid>
<description>&lt;p&gt;树莓派3B+英特尔神经计算棒进行高速目标检测&lt;/p&gt;
&lt;blockquote readability=&quot;3.5&quot;&gt;
&lt;p&gt;转载请注明作者&lt;a href=&quot;https://github.com/ahangchen&quot;&gt;梦里茶&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1828517-1cda688b0ed4638e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;NCS Pi&quot;/&gt;&lt;/p&gt;
&lt;p&gt;代码:&lt;br/&gt;训练数据预处理：&lt;br/&gt;&lt;a href=&quot;https://gist.github.com/ahangchen/ae1b7562c1f93fdad1de58020e94fbdf&quot; class=&quot;uri&quot;&gt;https://gist.github.com/ahangchen/ae1b7562c1f93fdad1de58020e94fbdf&lt;/a&gt;&lt;br/&gt;测试：&lt;a href=&quot;https://github.com/ahangchen/ncs_detection&quot; class=&quot;uri&quot;&gt;https://github.com/ahangchen/ncs_detection&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Star是一种美德。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;最近在做一个项目，要在树莓派上分析视频中的图片，检测目标，统计目标个数，这是一张样例图片：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1828517-7405ed85dce8bfde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Cattle Counting&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;当下效果最好的目标检测都是基于神经网络来做的，包括faster rcnn， ssd, yolo2等等，要在树莓派这种资源紧张的设备上运行检测模型，首先想到的就是用最轻量的MobileNet SSD，使用Tensorflow object detection api实现的MobileNet SSD虽然已经非常轻，但在树莓派上推导一张1280x720的图仍然需要2秒，有兴趣的同学可以参考这两个项目：&lt;/p&gt;
&lt;p&gt;具体的操作在Tensorflow文档里都说的很清楚了，在树莓派上的操作也是一样的，有问题可以评论区讨论&lt;/p&gt;
&lt;h2 id=&quot;hardware&quot;&gt;Hardware&lt;/h2&gt;
&lt;p&gt;极限的模型仍然不能满足性能需求，就需要请出我们今天的主角了，&lt;a href=&quot;https://developer.movidius.com/&quot;&gt;Intel Movidius Neural Computing Stick&lt;/a&gt;&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1828517-91b7cdc17798b7ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Intel Movidius Neural Computing Stick&quot;/&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;支持框架&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;TensorFlow, Caffe&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;&gt;连接方式&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;USB 3.0 Type-A&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td align=&quot;center&quot;&gt;尺寸&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;USB stick (72.5mm X 27mm X 14mm)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;&gt;工作温度&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0° - 40° C&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;/&gt;
&lt;td align=&quot;center&quot;/&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td align=&quot;center&quot;/&gt;
&lt;td align=&quot;center&quot;&gt;x86_64 Ubuntu 16.04主机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td align=&quot;center&quot;/&gt;
&lt;td align=&quot;center&quot;&gt;Raspberry Pi 3B Stretch desktop&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;/&gt;
&lt;td align=&quot;center&quot;&gt;Ubuntu 16.04 虚拟机&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td align=&quot;center&quot;&gt;系统要求&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;USB 2.0 以上 (推荐 USB 3.0)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;/&gt;
&lt;td align=&quot;center&quot;&gt;1GB 内存&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;/&gt;
&lt;td align=&quot;center&quot;&gt;4GB 存储&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;/&gt;
&lt;td align=&quot;center&quot;/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;实际上这不是一个GPU，而是一个专用计算芯片，但能起到类似GPU对神经网络运算的加速作用。&lt;/p&gt;
&lt;p&gt;京东上搜名字可以买到，只要500元左右，想想一块GPU都要几千块钱，就会觉得很值了。&lt;/p&gt;
&lt;p&gt;SDK是开源的：&lt;a href=&quot;https://github.com/movidius/ncsdk&quot; class=&quot;uri&quot;&gt;https://github.com/movidius/ncsdk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提问不在GitHub issue里，而是在一个专门的论坛：&lt;a href=&quot;https://ncsforum.movidius.com/&quot; class=&quot;uri&quot;&gt;https://ncsforum.movidius.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然目前NCSDK支持的框架包含Tensorflow和Caffe，但并不是支持所有的模型，目前已支持的模型列表可以在这里查到：&lt;a href=&quot;https://github.com/movidius/ncsdk/releases&quot; class=&quot;uri&quot;&gt;https://github.com/movidius/ncsdk/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;截止到2018年3月15日，NCSDK还没有支持Tensorflow版的MobileNet SSD（比如&lt;code&gt;tf.cast&lt;/code&gt;这个操作还未被支持），所以我们需要用Caffe来训练模型，部署到树莓派上。&lt;/p&gt;
&lt;h2 id=&quot;environment&quot;&gt;Environment&lt;/h2&gt;
&lt;p&gt;ncsdk的环境分为两部分，训练端和测试端。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;训练端通常是一个Ubuntu 带GPU主机，训练Caffe或TensorFlow模型，编译成NCS可以执行的graph；&lt;/li&gt;
&lt;li&gt;测试端则面向ncs python mvnc api编程，可以运行在树莓派上raspbian stretch版本，也可以运行在训练端这种机器上。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;训练端&quot;&gt;训练端&lt;/h3&gt;
&lt;h4 id=&quot;安装&quot;&gt;安装&lt;/h4&gt;
&lt;p&gt;安装这个过程，说难不难，也就几行命令的事情，但也有很多坑&lt;/p&gt;
&lt;p&gt;在训练端主机上，插入神经计算棒，然后：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git clone https://github.com/movidius/ncsdk
cd ncsdk
make install &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中，make install干的是这些事情：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;检查安装Tensorflow&lt;/li&gt;
&lt;li&gt;检查安装Caffe(&lt;a href=&quot;https://github.com/weiliu89/caffe&quot;&gt;SSD-caffe&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;编译安装ncsdk（不包含inference模块，只包含mvNCCompile相关模块，用来将Caffe或Tensorflow模型转成NCS graph的）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注意，&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li&gt;这些库都是安装到&lt;code&gt;/opt/movidius/&lt;/code&gt;这个目录下，并关联到系统python3里边的（&lt;code&gt;/usr/bin/python3&lt;/code&gt;），如果你电脑里原来有tf或caffe，也不会被关联上去&lt;/li&gt;
&lt;li&gt;NCSDK mvNCCompile模块目前只兼容python3，我尝试过将安装完的SDK改成兼容python2的版本，可以将模型编译出来，但是在运行时会报错，所以暂时放弃兼容python2了，也建议大家用默认的python3版本&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;这个步骤主要的坑来自万恶的Caffe，如果你装过python3版的caffe，大概会有经验一些，这里有几个小坑提示一下：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;最好在ncsdk目录中的ncsdk.conf中，开启caffe的cuda支持，即设置&lt;code&gt;CAFFE_USE_CUDA=yes&lt;/code&gt;，这样你之后也能用这个caffe来训练模型&lt;/li&gt;
&lt;li&gt;caffe的依赖会在脚本中安装，但有些Debian兼容问题要解决&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;开启CUDA支持后，编译caffe会找不到libboost-python3，因为在Ubuntu16.04里，它叫libboost-python3.5，所以要软链接一下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; /usr/lib/x86_64-linux-gnu/
&lt;span class=&quot;kw&quot;&gt;sudo&lt;/span&gt; ln -s libboost_python-py35.so libboost_python3.so&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;其他可能出现的caffe的坑，可以在我&lt;a href=&quot;https://github.com/ahangchen/windy-afternoon/blob/master/linux/note.md#caffe%E5%AE%98%E7%BD%91%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%E6%B2%A1%E5%91%8A%E8%AF%89%E4%BD%A0%E7%9A%84%E4%B8%9C%E8%A5%BF&quot;&gt;博客&lt;/a&gt;找找答案，如果没有的话，就去caffe的GitHub issue搜吧&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;测试&quot;&gt;测试&lt;/h4&gt;
&lt;p&gt;一波操作之后，我们装好了ncsdk编译模块，可以下载我训练的caffe模型，尝试编译成ncs graph&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;git&lt;/span&gt; clone https://github.com/ahangchen/MobileNetSSD
&lt;span class=&quot;kw&quot;&gt;mvNCCompile&lt;/span&gt; example/MobileNetSSD_deploy.prototxt -w MobileNetSSD_deploy.caffemodel -s 12 -is 300 300 -o ncs_mobilenet_ssd_graph&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里其实是调用python3去执行/usr/local/bin/ncsdk/mvNCCompile.py这个文件， 不出意外在当前版本（1.12.00）你会遇到这个错误：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;[&lt;span class=&quot;kw&quot;&gt;Error&lt;/span&gt; 17] Toolkit Error: Internal Error: Could not build graph. Missing link: conv11_mbox_conf&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是因为NCSDK在处理caffe模型的时候，会把conv11_mbox_conf_new节点叫做conv11_mbox_conf，所以build graph的时候就会找不着。因此需要为这种节点起一个别名，即，将conv11_mbox_conf_new起别名为conv11_mbox_conf，修改SDK代码中的/usr/local/bin/ncsdk/Models/NetworkStage.py，在第85行后面添加：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;_new&lt;span class=&quot;st&quot;&gt;' in name:&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    self.alias.append(name[:-4])&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;于是就能编译生成graph了，你会看到一个名为ncs_mobilenet_ssd_graph的文件。&lt;/p&gt;
&lt;p&gt;上边这个bug我已经跟NCSDK的工程师讲了，他们在跟进修这个bug：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1828517-0339d113ef259dbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;NCS bug&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;测试端&quot;&gt;测试端&lt;/h3&gt;
&lt;h4 id=&quot;ncsdk&quot;&gt;NCSDK&lt;/h4&gt;
&lt;p&gt;测试端要安装ncsdk python api，用于inference，实际上测试端能做的操作，训练端也都能做&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git clone https://github.com/movidius/ncsdk
cd api/src
make install&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从输出日志可以发现，将ncsdk的lib和include文件分别和系统的python2（/usr/bin/python2）和python3(/usr/bin/python3)做了关联。&lt;/p&gt;
&lt;p&gt;然后你可以下一个GitHub工程来跑一些测试：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;git&lt;/span&gt; clone https://github.com/movidius/ncappzoo
&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; ncappzoo/apps/hello_ncs_py
&lt;span class=&quot;kw&quot;&gt;python3&lt;/span&gt; hello_ncs.py
&lt;span class=&quot;kw&quot;&gt;python2&lt;/span&gt; hello_ncs.py&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;没报错就是装好了，测试端很简单。&lt;/p&gt;
&lt;h4 id=&quot;opencv&quot;&gt;OpenCV&lt;/h4&gt;
&lt;p&gt;看pyimagesearch这个&lt;a href=&quot;https://www.pyimagesearch.com/2017/09/04/raspbian-stretch-install-opencv-3-python-on-your-raspberry-pi/&quot;&gt;教程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;caffe模型训练&quot;&gt;Caffe模型训练&lt;/h2&gt;
&lt;p&gt;就是正常的用caffe训练MobileNet-SSD，主要参考这个仓库：&lt;/p&gt;
&lt;p&gt;README里将步骤讲得很清楚了&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;下载SSD-caffe（这个我们已经在NCSDK里装了）&lt;/li&gt;
&lt;li&gt;下载chuanqi在VOC0712上预训练的&lt;a href=&quot;https://drive.google.com/open?id=0B3gersZ2cHIxVFI1Rjd5aDgwOG8&quot;&gt;模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;把MobileNet-SSD这个项目放到SSD-Caffe的examples目录下，这一步可以不做，但是要对应修改train.sh里的caffe目录位置&lt;/li&gt;
&lt;li&gt;创建你自己的&lt;code&gt;labelmap.prototxt&lt;/code&gt;，放到MobileNet-SSD目录下，比如说，你是在coco预训练模型上训练的话，可以把&lt;a href=&quot;https://github.com/weiliu89/caffe/blob/ssd/data/coco/labelmap_coco.prototxt&quot;&gt;coco的标签文件&lt;/a&gt;复制过来，将其中与你的目标类（比如我的目标类是Cattle）相近的类（比如Coco中是Cow）改成对应的名字，并用它的label作为你的目标类的label。（比如我用21这个类代表Cattle）&lt;/li&gt;
&lt;li&gt;用你自己的数据训练MobileNet-SSD，参考SSD-caffe的&lt;a href=&quot;https://github.com/weiliu89/caffe/wiki/Train-SSD-on-custom-dataset&quot;&gt;wiki&lt;/a&gt;，主要思路还是把你的数据转换成类似VOC或者COCO的格式，然后生成lmdb，坑也挺多的：&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;假设你的打的标签是这样一个文件&lt;code&gt;raw_label.txt&lt;/code&gt;，假装我们数据集只有两张图片：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;data/strange_animal/1017.jpg 0.487500   0.320675    0.670000    0.433193
data/strange_animal/1018.jpg 0.215000   0.293952    0.617500    0.481013&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;我们的目标是将标签中涉及的&lt;code&gt;图片和位置信息&lt;/code&gt;转成这样一个目录（在ssd-caffe/data/coco目录基础上生成的）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;coco_cattle
├── all # 存放全部图片和xml标签文件
│   ├── 1017.jpg
│   ├── 1017.xml
│   ├── 1018.jpg
│   └── 1018.xml
├── Annotations # 存放全部标签xml
│   ├── 1017.xml
│   └── 1018.xml
├── create_data.sh # 将图片转为lmdb的脚本
├── create_list.py # 根据ImageSets里的数据集划分文件，生成jpg和xml的对应关系文件到coco_cattle目录下，但我发现这个对应关系文件用不上
├── images  # 存放全部图片
│   ├── 1017.jpg
│   └── 1018.jpg
├── ImageSets # 划分训练集，验证集和测试集等，如果只想分训练和验证的话，可以把minival.txt,testdev.txt,test.txt内容改成一样的
│   ├── minival.txt 
│   ├── testdev.txt
│   ├── test.txt
│   └── train.txt
├── labelmap_coco.prototxt # 如前所述的标签文件，改一下可以放到MobileNet-SSD目录下
├── labels.txt
├── lmdb # 手动创建这个目录
│   ├── coco_cattle_minival_lmdb # 自动创建的，由图片和标签转换来的LMDB文件
│   ├── coco_cattle_testdev_lmdb
│   ├── coco_cattle_test_lmdb
│   └── coco_cattle_train_lmdb
├── minival.log
├── README.md
├── testdev.log
├── test.log
└── train.log&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;其中，标签xml的格式如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;annotation&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;folder&amp;gt;&lt;/span&gt;train&lt;span class=&quot;kw&quot;&gt;&amp;lt;/folder&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;filename&amp;gt;&lt;/span&gt;86&lt;span class=&quot;kw&quot;&gt;&amp;lt;/filename&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;source&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;database&amp;gt;&lt;/span&gt;coco_cattle&lt;span class=&quot;kw&quot;&gt;&amp;lt;/database&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;size&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;width&amp;gt;&lt;/span&gt;720&lt;span class=&quot;kw&quot;&gt;&amp;lt;/width&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;height&amp;gt;&lt;/span&gt;1280&lt;span class=&quot;kw&quot;&gt;&amp;lt;/height&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;depth&amp;gt;&lt;/span&gt;3&lt;span class=&quot;kw&quot;&gt;&amp;lt;/depth&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/size&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;segmented&amp;gt;&lt;/span&gt;0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/segmented&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;object&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;21&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;pose&amp;gt;&lt;/span&gt;Unspecified&lt;span class=&quot;kw&quot;&gt;&amp;lt;/pose&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;truncated&amp;gt;&lt;/span&gt;0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/truncated&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;difficult&amp;gt;&lt;/span&gt;0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/difficult&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;bndbox&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;xmin&amp;gt;&lt;/span&gt;169&lt;span class=&quot;kw&quot;&gt;&amp;lt;/xmin&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;ymin&amp;gt;&lt;/span&gt;388&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ymin&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;xmax&amp;gt;&lt;/span&gt;372&lt;span class=&quot;kw&quot;&gt;&amp;lt;/xmax&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;ymax&amp;gt;&lt;/span&gt;559&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ymax&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/bndbox&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/object&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;object&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;21&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;pose&amp;gt;&lt;/span&gt;Unspecified&lt;span class=&quot;kw&quot;&gt;&amp;lt;/pose&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;truncated&amp;gt;&lt;/span&gt;0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/truncated&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;difficult&amp;gt;&lt;/span&gt;0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/difficult&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;bndbox&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;xmin&amp;gt;&lt;/span&gt;169&lt;span class=&quot;kw&quot;&gt;&amp;lt;/xmin&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;ymin&amp;gt;&lt;/span&gt;388&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ymin&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;xmax&amp;gt;&lt;/span&gt;372&lt;span class=&quot;kw&quot;&gt;&amp;lt;/xmax&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;ymax&amp;gt;&lt;/span&gt;559&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ymax&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/bndbox&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/object&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/annotation&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代表一张图中多个对象所在位置（bndbox节点表示），以及类别（name）。&lt;/p&gt;
&lt;ul readability=&quot;0.98170731707317&quot;&gt;&lt;li&gt;一开始，&lt;code&gt;all&lt;/code&gt;, &lt;code&gt;Annotations&lt;/code&gt;, &lt;code&gt;images&lt;/code&gt;, &lt;code&gt;ImageSets&lt;/code&gt;,&lt;code&gt;lmdb&lt;/code&gt;四个目录都是空的，你可以把自己的图片放到随便哪个地方，只要在raw_label.txt里写好图片路径就行&lt;/li&gt;
&lt;li readability=&quot;1.9270516717325&quot;&gt;
&lt;p&gt;读取&lt;code&gt;raw_label.txt&lt;/code&gt;，利用&lt;code&gt;lxml&lt;/code&gt;构造一棵dom tree，然后写到&lt;code&gt;Annotations&lt;/code&gt;对应的xml里，并将对应的图片移动到&lt;code&gt;image&lt;/code&gt;目录里，可以参考&lt;a href=&quot;https://gist.github.com/ahangchen/ae1b7562c1f93fdad1de58020e94fbdf&quot;&gt;这份代码&lt;/a&gt;。并根据我们设置的train or not标志符将当前这张图片分配到训练集或测试集中（也就是往ImageSet/train.txt中写对应的图片名）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;这样一波操作之后，我们的&lt;code&gt;images&lt;/code&gt;和&lt;code&gt;Annotations&lt;/code&gt;目录里都会有数据了，接下来我们需要把它们一块复制到&lt;code&gt;all&lt;/code&gt;目录下&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;cp images/* all/
cp Annotations/* all/&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;然后用create_data.sh将&lt;code&gt;all&lt;/code&gt;中的数据，根据&lt;code&gt;ImageSet&lt;/code&gt;中的数据集划分，创建训练集和测试集的lmdb，这里对coco的create_data.sh做了一点修改：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;ot&quot;&gt;cur_dir=$(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$(&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;${BASH_SOURCE[0]}&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;root_dir=$cur_dir&lt;/span&gt;/../..

&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$root_dir&lt;/span&gt;

&lt;span class=&quot;ot&quot;&gt;redo=&lt;/span&gt;true
&lt;span class=&quot;co&quot;&gt;# 这里改成all目录&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;data_root_dir=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;$cur_dir&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/all&quot;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# 这里改成自己的数据集名，也是我们这个目录的名字&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;dataset_name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;coco_cattle&quot;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# 指定标签文件&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;mapfile=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;$root_dir&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/data/&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;$dataset_name&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/labelmap_coco.prototxt&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;anno_type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;detection&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;label_type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;xml&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;db=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;lmdb&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;min_dim=&lt;/span&gt;0
&lt;span class=&quot;ot&quot;&gt;max_dim=&lt;/span&gt;0
&lt;span class=&quot;ot&quot;&gt;width=&lt;/span&gt;0
&lt;span class=&quot;ot&quot;&gt;height=&lt;/span&gt;0

&lt;span class=&quot;ot&quot;&gt;extra_cmd=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;--encode-type=jpg --encoded&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$redo&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;ot&quot;&gt;extra_cmd=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;$extra_cmd&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; --redo&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;subset&lt;/span&gt; in minival testdev train test
&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;python3&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$root_dir&lt;/span&gt;/scripts/create_annoset.py --anno-type=&lt;span class=&quot;ot&quot;&gt;$anno_type&lt;/span&gt; --label-type=&lt;span class=&quot;ot&quot;&gt;$label_type&lt;/span&gt; --label-map-file=&lt;span class=&quot;ot&quot;&gt;$mapfile&lt;/span&gt; --min-dim=&lt;span class=&quot;ot&quot;&gt;$min_dim&lt;/span&gt; --max-dim=&lt;span class=&quot;ot&quot;&gt;$max_dim&lt;/span&gt; --resize-width=&lt;span class=&quot;ot&quot;&gt;$width&lt;/span&gt; --resize-height=&lt;span class=&quot;ot&quot;&gt;$height&lt;/span&gt; --check-label &lt;span class=&quot;ot&quot;&gt;$extra_cmd&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$data_root_dir&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$root_dir&lt;/span&gt;/data/&lt;span class=&quot;ot&quot;&gt;$dataset_name&lt;/span&gt;/ImageSets/&lt;span class=&quot;ot&quot;&gt;$subset&lt;/span&gt;.txt &lt;span class=&quot;ot&quot;&gt;$data_root_dir&lt;/span&gt;/../&lt;span class=&quot;ot&quot;&gt;$db&lt;/span&gt;/&lt;span class=&quot;ot&quot;&gt;$dataset_name&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;$subset&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;$db&lt;/span&gt; examples/&lt;span class=&quot;ot&quot;&gt;$dataset_name&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;2&amp;gt;&amp;amp;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;tee&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$root_dir&lt;/span&gt;/data/&lt;span class=&quot;ot&quot;&gt;$dataset_name&lt;/span&gt;/&lt;span class=&quot;ot&quot;&gt;$subset&lt;/span&gt;.log
&lt;span class=&quot;kw&quot;&gt;done&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;于是会lmdb目录下会为每个划分集合创建一个目录，存放数据&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;├── lmdb
│   ├── coco_cattle_minival_lmdb
│   │   ├── data.mdb
│   │   └── lock.mdb
│   ├── coco_cattle_testdev_lmdb
│   │   ├── data.mdb
│   │   └── lock.mdb
│   ├── coco_cattle_test_lmdb
│   │   ├── data.mdb
│   │   └── lock.mdb
│   └── coco_cattle_train_lmdb
│       ├── data.mdb
│       └── lock.mdb
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;将5生成的lmdb链接到MobileNet-SSD的目录下：&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; MobileNet-SSD
&lt;span class=&quot;kw&quot;&gt;ln&lt;/span&gt; -s PATH_TO_YOUR_TRAIN_LMDB trainval_lmdb
&lt;span class=&quot;kw&quot;&gt;ln&lt;/span&gt; -s PATH_TO_YOUR_TEST_LMDB test_lmdb&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;运行&lt;code&gt;gen_model.sh&lt;/code&gt;生成三个prototxt（train, test, deploy）&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;# 默认clone下来的目录是没有example这个目录的，而gen_model.sh又会把文件生成到example目录
mkdir example
./gen_model.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;训练&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;./train.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里如果爆显存了，可以到&lt;code&gt;example/MobileNetSSD_train.prototxt&lt;/code&gt;修改batch size，假如你batch size改到20，刚好可以吃满GTX1060的6G显存，但是跑到一定步数（设置在&lt;code&gt;solver_test.prototxt&lt;/code&gt;里的test_interval变量），会执行另一个小batch的test（这个batch size定义在&lt;code&gt;example/MobileNetSSD_test.prototxt&lt;/code&gt;里），这样就会再爆显存，所以如果你的&lt;code&gt;train_batch_size + test_batch_size &amp;lt;= 20&lt;/code&gt;的话才可以保证你在6G显存上能顺利完成训练，我的设置是&lt;code&gt;train_batch_size=16, test_batch_size=4&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;一开始的training loss可能比较大，30左右，等到loss下降到2.x一段时间就可以ctrl+c退出训练了，模型权重会自动保存在snapshot目录下&lt;/p&gt;
&lt;ol readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;运行merge_bn.py将训练得到的模型去除bn层，得到可部署的Caffe模型，这样你就能得到一个名为&lt;code&gt;MobileNetSSD_deploy.caffemodel&lt;/code&gt;的权重文件，对应的prototxt为&lt;code&gt;example/MobileNetSSD_deploy.prototxt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;离题那么久，终于来到主题，我们要把这个caffemodel编译成NCS可运行的graph，这个操作之前在搭环境的部分也提过：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;mvNCCompile example/MobileNetSSD_deploy.prototxt -w MobileNetSSD_deploy.caffemodel -s 12 -is 300 300 -o ncs_mobilenet_ssd_graph&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数格式：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;mvNCCompile prototxt路径 -w 权重文件路径 -s 最大支持的NCS数目 -is 输入图片宽度 输入图片高度 -o 输出graph路径&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实训练端相对于chuanqi的MobileNet-SSD没啥改动，甚至训练参数也不用怎么改动，主要工作还是在数据预处理上，可以参考我的&lt;a href=&quot;https://gist.github.com/ahangchen/ae1b7562c1f93fdad1de58020e94fbdf&quot;&gt;预处理代码&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;树莓派ncs模型测试&quot;&gt;树莓派NCS模型测试&lt;/h2&gt;
&lt;p&gt;现在我们要用ncs版的ssd模型在树莓派上进行对图片做检测，这个目标一旦达成我们自然也能对视频或摄像头数据进行检测了。&lt;/p&gt;
&lt;h3 id=&quot;仓库结构&quot;&gt;&lt;a href=&quot;http://github.com/ahangchen/ncs_detection&quot;&gt;仓库&lt;/a&gt;结构&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;ncs_detection
├── data # 标签文件
│   └── mscoco_label_map.pbtxt
├── file_helper.py # 文件操作辅助函数
├── model # 训练好的模型放在这里
│   ├── ncs_mobilenet_ssd_graph
│   └── README.md
├── ncs_detection.py # 主入口
├── object_detection # 改了一下TF的Object detection包中的工具类来用
│   ├── __init__.py
│   ├── protos
│   │   ├── __init__.py
│   │   ├── string_int_label_map_pb2.py
│   │   └── string_int_label_map.proto
│   └── utils
│       ├── __init__.py
│       ├── label_map_util.py
│       └── visualization_utils.py
├── r10 # 图片数据
│   ├── 00000120.jpg
│   ├── 00000133.jpg
│   ├── 00000160.jpg
│   ├── 00000172.jpg
│   ├── 00000192.jpg
│   ├── 00000204.jpg
│   ├── 00000220.jpg
│   └── 00000236.jpg
├── README.md
└── total_cnt.txt&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;由于这个工程一开始是用Tensorflow Object Detection API做的，所以改了其中的几个文件来读标签和画检测框，将其中跟tf相关的代码去掉。&lt;/li&gt;
&lt;li&gt;TF的图片IO是用pillow做的，在树莓派上速度奇慢，对一张1280x720的图使用Image的get_data这个函数获取数据需要7秒，所以我改成了OpenCV来做IO。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;任务目标&quot;&gt;任务目标&lt;/h3&gt;
&lt;p&gt;检测&lt;code&gt;r10&lt;/code&gt;目录中的图片中的对象，标记出来，存到&lt;code&gt;r10_tmp&lt;/code&gt;目录里&lt;/p&gt;
&lt;h3 id=&quot;流程&quot;&gt;流程&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;准备目标目录&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; config_init(dataset_pref):
    os.system(&lt;span class=&quot;st&quot;&gt;'mkdir &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;_tmp'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; dataset_pref)
    os.system(&lt;span class=&quot;st&quot;&gt;'rm &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;_tmp/*'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; dataset_pref)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;指定模型路径，标签位置，类别总数，测试图片路径&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;PATH_TO_CKPT &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'model/ncs_mobilenet_ssd_graph'&lt;/span&gt;
PATH_TO_LABELS &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; os.path.join(&lt;span class=&quot;st&quot;&gt;'data'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'mscoco_label_map.pbtxt'&lt;/span&gt;)
NUM_CLASSES &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;81&lt;/span&gt;
TEST_IMAGE_PATHS &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [os.path.join(img_dir, &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%08d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;.jpg'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; i) &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(start_index, end_index)]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;发现并尝试打开神经计算棒&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; ncs_prepare():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;[INFO] finding NCS devices...&quot;&lt;/span&gt;)
    devices &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mvnc.EnumerateDevices()

    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(devices) &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;[INFO] No devices found. Please plug in a NCS&quot;&lt;/span&gt;)
        quit()

    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;[INFO] found {} devices. device0 will be used. &quot;&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;&quot;opening device0...&quot;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(devices)))
    device &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mvnc.Device(devices[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;])
    device.OpenDevice()
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; device&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;将NCS模型加载到NCS中&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; graph_prepare(PATH_TO_CKPT, device):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;[INFO] loading the graph file into RPi memory...&quot;&lt;/span&gt;)
    &lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(PATH_TO_CKPT, mode&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;rb&quot;&lt;/span&gt;) &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; f:
        graph_in_memory &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; f.read()

    &lt;span class=&quot;co&quot;&gt;# load the graph into the NCS&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;[INFO] allocating the graph on the NCS...&quot;&lt;/span&gt;)
    detection_graph &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; device.AllocateGraph(graph_in_memory)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; detection_graph&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;准备好标签与类名对应关系&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;category_index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; label_prepare(PATH_TO_LABELS, NUM_CLASSES)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;读取图片，由于Caffe训练图片采用的通道顺序是RGB，而OpenCV模型通道顺序是BGR，需要转换一下&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;image_np &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; cv2.imread(image_path)
image_np &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; cv2.cvtColor(image_np, cv2.COLOR_BGR2RGB)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;使用NCS模型为输入图片推断目标位置&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; predict(image, graph):
    image &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; preprocess_image(image)
    graph.LoadTensor(image, &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;)
    (output, _) &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; graph.GetResult()
    num_valid_boxes &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; output[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]
    predictions &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; box_index &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(num_valid_boxes):
        base_index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; box_index &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;

        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; np.isfinite(output[base_index]) &lt;span class=&quot;op&quot;&gt;or&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; np.isfinite(output[base_index &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;or&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; np.isfinite(output[base_index &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;or&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; np.isfinite(output[base_index &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;or&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; np.isfinite(output[base_index &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;or&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; np.isfinite(output[base_index &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;or&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; np.isfinite(output[base_index &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;])):
            &lt;span class=&quot;cf&quot;&gt;continue&lt;/span&gt;

        (h, w) &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; image.shape[:&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]
        x1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, output[base_index &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;])
        y1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, output[base_index &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;])
        x2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;min&lt;/span&gt;(w, output[base_index &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;])
        y2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;min&lt;/span&gt;(h, output[base_index &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;])
        pred_class &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(output[base_index &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
        pred_conf &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; output[base_index &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]
        pred_boxpts &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (y1, x1, y2, x2)

        prediction &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (pred_class, pred_conf, pred_boxpts)
        predictions.append(prediction)

    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; predictions&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，首先将图片处理为Caffe输入格式，缩放到300x300，减均值，缩放到0-1范围，转浮点数&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; preprocess_image(input_image):
    PREPROCESS_DIMS &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;)
    preprocessed &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; cv2.resize(input_image, PREPROCESS_DIMS)
    preprocessed &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; preprocessed &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;127.5&lt;/span&gt;
    preprocessed &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; preprocessed &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.007843&lt;/span&gt;
    preprocessed &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; preprocessed.astype(np.float16)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; preprocessed&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;graph推断得到目标位置，类别，分数&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;graph.LoadTensor(image, &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;)
(output, _) &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; graph.GetResult()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中的output格式为，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[
    目标数量，
    class，score，xmin, ymin, xmax, ymax,
    class，score，xmin, ymin, xmax, ymax,
    ...
]&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;根据我们感兴趣的类别和分数进行过滤&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; predict_filter(predictions, score_thresh):
    num &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
    boxes &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;()
    scores &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;()
    classes &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;()
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (i, pred) &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;enumerate&lt;/span&gt;(predictions):
        (cl, score, box) &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pred
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; cl &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;or&lt;/span&gt; cl &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;45&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;or&lt;/span&gt; cl &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;or&lt;/span&gt; cl &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;76&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;or&lt;/span&gt; cl &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;546&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;or&lt;/span&gt; cl &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;32&lt;/span&gt;:
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; score &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; score_thresh:
                boxes.append(box)
                scores.append(score)
                classes.append(cl)
                num &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; num, boxes, classes, scores&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;用OpenCV将当前图片的对象数量写到图片右上角，用pillow（tf库中的实现）将当前图片的对象位置和类别在图中标出&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; add_str_on_img(image, total_cnt):
    cv2.putText(image, &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; total_cnt, (image.shape[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;), cv2.FONT_HERSHEY_SIMPLEX, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;), &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; vis_util.visualize_boxes_and_labels_on_image_array(
                image_np,
                np.squeeze(valid_boxes).reshape(num, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;),
                np.squeeze(valid_classes).astype(np.int32).reshape(num, ),
                np.squeeze(valid_scores).reshape(num, ),
                category_index,
                use_normalized_coordinates&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;,
                min_score_thresh&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;score_thresh,
                line_thickness&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;保存图片&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt; cv2.imwrite(&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;_tmp/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; (dataset_pref, image_path.split(&lt;span class=&quot;st&quot;&gt;'/'&lt;/span&gt;)[&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]),
                        cv2.cvtColor(result, cv2.COLOR_RGB2BGR))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;释放神经计算棒&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; ncs_clean(detection_graph, device):
    detection_graph.DeallocateGraph()
    device.CloseDevice()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;运行&quot;&gt;运行&lt;/h3&gt;
&lt;p&gt;python2 ncs_detection.py&lt;/p&gt;
&lt;h3 id=&quot;结果&quot;&gt;结果&lt;/h3&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;TensorFlow&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1800&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;60min&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;&gt;NCS&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1800&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10min&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;TensorFlow&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2sec&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;&gt;NCS&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.3sec&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;性能提升6倍！单张图300毫秒，可以说是毫秒级检测了。在论坛上有霓虹国的同行尝试后，甚至评价其为“超爆速”。&lt;/p&gt;
&lt;h2 id=&quot;扩展&quot;&gt;扩展&lt;/h2&gt;
&lt;p&gt;单根NCS一次只能运行一个模型，但是我们可以用多根NCS，多线程做检测，达到更高的速度，具体可以看Reference第二条。&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;p&gt;看了这么久，还不快去给&lt;a href=&quot;https://github.com/ahangchen/ncs_detection&quot;&gt;我的GitHub&lt;/a&gt;点star!&lt;/p&gt;
</description>
<pubDate>Fri, 16 Mar 2018 17:51:00 +0000</pubDate>
<dc:creator>梦里风林</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hellocwh/p/8587013.html</dc:identifier>
</item>
<item>
<title>API网关系列之Kong的介绍以及安装 - OMango</title>
<link>http://www.cnblogs.com/OMango/p/8576594.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/OMango/p/8576594.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、API网关产生背景&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在微服务的架构中，一个大的应用会被拆分成多个小的单一的服务提供出来，这些小的服务有自己的处理，有自己的数据库（也可以共用），也许语言也是不一样的，他们可以部署在一个或多个服务器上，其实也就是对复杂的应用进行了解耦，&lt;strong&gt;那为什么微服务需要API网关呢？&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先我们看看微服务后产生的问题：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;客户端需要知道多个服务地址&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;通用的功能怎么处理？例如鉴权、流量控制、日志等&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;以前一个功能可能是一次请求就可以完成，现在可能要多个服务一起进行才可以，那如何减少客户端请求的时间呢？&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;　　由于以上几点的问题，所以在所有的服务前面还需要定义一个代理，即API网关，所有的客户端请求都必须经过API网关代理到真实的服务地址，这也可以有效的避免真实地址的暴露，同时API网关也可以集成鉴权、流量控制、日志、API聚合、黑白名单等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、kong的介绍&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;a href=&quot;https://getkong.org/&quot; target=&quot;_blank&quot;&gt;Kong&lt;/a&gt;是由Mashape开发的并且于2015年开源的一款API网关框架，基于nginx以及 OpenResty 研发，主要特点是高性能以及其强大的扩展性，由于本身是基于nginx进行开发，因此网上很多关于nginx的调优等资料都可以用到kong的上面，包括负载均衡、或者充当web服务器等&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　kong的扩展是通过插件机制进行的，并且也提供了插件的定制示例方法，插件定义了一个请求从进入到最后反馈到客户端的整个生命周期，所以可以满足大部分的定制需求，本身kong也已经集成了相当多的插件，包括CORS跨域、logging、限流、转发、健康检查、熔断等，API聚合功能从github上看也已经进入开发阶段。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　kong插件介绍地址：&lt;a href=&quot;https://konghq.com/plugins/&quot; target=&quot;_blank&quot;&gt;https://konghq.com/plugins/&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　kong相关文档地址：&lt;a href=&quot;https://getkong.org/docs/&quot; target=&quot;_blank&quot;&gt;https://getkong.org/docs/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、kong的安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　本次安装是在CentOS7.3下进行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤一、pg数据库安装，一步步执行如下的脚本&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取下载的rpm&lt;/span&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-7-x86_64/pgdg-centos95-9.5-3.noarch.rpm
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行安装&lt;/span&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; postgresql95-&lt;span&gt;server
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化数据库&lt;/span&gt;
/usr/pgsql-&lt;span&gt;9.5&lt;/span&gt;/bin/postgresql95-&lt;span&gt;setup initdb
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置开机启动&lt;/span&gt;
systemctl enable postgresql-&lt;span&gt;9.5&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动服务&lt;/span&gt;
systemctl start postgresql-&lt;span&gt;9.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;步骤二、pg数据库远程访问设置（如果不需要的话，那也可以不用管）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　修改/var/lib/pgsql/9.5/data/pg_hba.conf，增加如下配置&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/465472/201803/465472-20180316233400616-1479638914.png&quot; alt=&quot;&quot; width=&quot;602&quot; height=&quot;276&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　修改/var/lib/pgsql/9.4/data/postgresql.conf，修改以下配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/465472/201803/465472-20180316223952238-941105145.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤三：kong服务安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　由于官网repo仓库的版本才更新到0.10.4版本（估计官方忘记或者太懒了），所以目前只能用rpm包的方式进行安装，rpm包下载地址：&lt;a href=&quot;https://bintray.com/kong/kong-community-edition-rpm/download_file?file_path=centos/7/kong-community-edition-0.12.3.el7.noarch.rpm%20%E5%B0%86%E4%BB%A5%E4%B8%8A%E4%BF%9D%E5%AD%98%E5%88%B0&quot; target=&quot;_blank&quot;&gt;https://bintray.com/kong/kong-community-edition-rpm/download_file?file_path=centos/7/kong-community-edition-0.12.3.el7.noarch.rpm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载好后，到文件目录下执行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
rpm -ivh kong-community-edition-&lt;span&gt;0.12&lt;/span&gt;.&lt;span&gt;3&lt;/span&gt;.el7.noarch.rpm&lt;br/&gt;kong version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;步骤四、数据库配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　kong连数据库，需要我们在pg上建立密码为kong的kong用户，数据库名也为kong&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;su&lt;/span&gt; - postgres&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进入数据库&lt;/span&gt;
-bash-&lt;span&gt;4.2&lt;/span&gt;&lt;span&gt;$ psql
postgres&lt;/span&gt;=# CREATE USER kong WITH PASSWORD 'kong'; CREATE DATABASE kong OWNER kong;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;建立数据库以及用户&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;步骤五、修改kong配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　进入/usr/local/share/lua/5.1/kong/templates目录，修改kong_defaults.lua里的pg_password=kong，保存&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤六、启动&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
kong migrations up&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化数据库&lt;/span&gt;
kong start&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动命令&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　Kong 在启动后，一个是 8000，一个是 8001，8000端口是请求进入端口，用户发送请求先到 Kong 项目的 8000 端口，kong根据配置的规则转发到真实的后台服务地址。而8001 端口则是管理端口，插件设置、API的增删改查、以及负载均衡等一系列的配置都是通过8001端口进行管理　　&lt;/p&gt;
&lt;p&gt;　　最后、浏览器访问IP:8000，如果出现&lt;strong&gt;{&quot;message&quot;:&quot;no API found with those values&quot;}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　注意点：如果有防火墙的话，最好先关掉防火墙&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;四、总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　kong在我看来是可以很好的完成了API网关的职责，基于nginx开发，插件开发方便，支持负载均衡，支持日志等，对于K8S也可以轻松部署使用&lt;/p&gt;
&lt;p&gt;　　这次介绍比较简单，大家如果有不同的建议、意见或者问题的话，可以留言一起讨论，kong有打算是写成一个系列的，目前自己也在摸索当中，可能会不定期更新，谢谢大家&lt;/p&gt;

&lt;p&gt;作者： Mango&lt;/p&gt;
&lt;p&gt;出处： &lt;a href=&quot;http://www.cnblogs.com/OMango/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/OMango/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于自己：专注.Net桌面开发以及Web后台开发，开始接触微服务、docker以及k8s等互联网相关（越来越觉得自己像运维了）&lt;/p&gt;
&lt;p&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接，如有问题， 可站内留言联系.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 16 Mar 2018 16:05:00 +0000</pubDate>
<dc:creator>OMango</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/OMango/p/8576594.html</dc:identifier>
</item>
<item>
<title>C++实现控制台版2048 - 隐秀</title>
<link>http://www.cnblogs.com/henuzyx/p/8586526.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/henuzyx/p/8586526.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　之前做过一个JavaScript版本的2048游戏，最近在学习C++，昨天晚上突然心血来潮，想用C++来实现，因为核心算法已十分理解，所以两个小时撸出来一个C++的简易版本。&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;span&gt;　　二维数组遍历，C++基本数据类型，string类，控制结构，函数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　本方法不涉及指针以及面向对象思想，所以可作为刚入门C++的新人的第一个小project。&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1287324/201803/1287324-20180316231012767-1512760519.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;h2&gt;&lt;span&gt;1.背景&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　游戏的背景即一个4*4的二维数组，通过每次运动中二维数组中值的变化以及数字的位置的变化，完成该游戏。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;2.随机数字及位置&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　游戏的开始阶段需要随机出两个数字，之后每次移动都需要在空白处随机出一个新的数字（2 / 4）。&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:cpp;collapse:true;;gutter:true;&quot;&gt;
    //随机一个位置
    int randX = rand()%4;
    int randY = rand()%4;
    int times = 0;
    while (times &amp;lt; 50)
    {
        if (0 == board[randX][randY])
            break;
        randX = rand()%4;
        randY = rand()%4;
        times++;
    }
    if (50 == times)
    {
        for (int i=0; i&amp;lt;4; i++)
            for (int j=0; j&amp;lt;4; j++)
                if (0 == board[i][j])
                {
                    randX = i;
                    randY = j;
                }
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　首先随机得到一个空白处（即二维数组等于0），在算法方面做了优化，先由系统随意选择50次，若没能找到空白处，则手动找到一个位置，可一定程度地加快位置随机的速度。&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:cpp;collapse:true;;gutter:true;&quot;&gt;
    //随机一个数字
    int randomNumber = rand()%100*0.01 &amp;lt; 0.5 ? 2 : 4;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　在0~1之间任意取值，如果小于0.5即随机得到2，反之随机得到4，保证出现2和4的可能性相同。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;3.运动算法&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　四个方向上的运动大致相同，只不过在临界处有细微区别，下面以向左移动进行解释。&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:cpp;collapse:true;;gutter:true;&quot;&gt;
//判断水平路径上是否有障碍物
bool noBlock1(int row, int col1, int col2, int board[][4])
{
    for (int i=col1+1; i&amp;lt;col2; i++)
        if (0 != board[row][i])
            return false;

    return true;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　对每个物体进行判断，在第row排，从col1到col2的范围内是否有障碍物。&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
//判断能否向左移动
bool canMoveLeft(int board[][4])
{
    for (int i=0; i&amp;lt;4; i++)
        for (int j=1; j&amp;lt;4; j++)
            if (0 != board[i][j])
                if (0 == board[i][j-1] || board[i][j-1] == board[i][j])
                   return true;

    return false;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　按下←时，判断整个画布是否可以向左移动。&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
//左移函数
bool moveLeft()
{
    if (!canMoveLeft(board))
        return false;
    //moveLeft
    //落脚位置是否为空
    //落脚位置数字是否相等
    //移动路径中是否有障碍物
    for (int i=0; i&amp;lt;4; i++)
        for (int j=0; j&amp;lt;4; j++)
            if (0 != board[i][j])
                for (int k=0; k&amp;lt;j; k++)
                    if (0 == board[i][k] &amp;amp;&amp;amp; noBlock1(i, k, j, board))
                    {
                        //move
                        board[i][k] = board[i][j];
                        board[i][j] = 0;
                        continue;
                    }
                    else if (board[i][k] == board[i][j] &amp;amp;&amp;amp; noBlock1(i, k, j, board))
                    {
                        //move and add
                        board[i][k] *= 2;
                        board[i][j] = 0;
                        continue;
                    }

    initial();
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　由以上两种判断为基础，构建左移核心算法。&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;



&lt;p&gt;&lt;span&gt;　　https://files.cnblogs.com/files/henuzyx/2048.zip&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;span&gt;　　C++版本意在复习基本游戏算法，熟悉C++语法，并没有在细节方面考虑，比如没有添加游戏结束的判定等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　不过，我的JavaScript版本功能完善，包括游戏结束显示，动画效果，记录当前步数，记录当前分数，保存最高分，撤销回上一步。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　希望可以交流讨论。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　JavaScript版本github链接：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　https://github.com/henuzyx/2048-by-JavaScript&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 16 Mar 2018 15:51:00 +0000</pubDate>
<dc:creator>隐秀</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/henuzyx/p/8586526.html</dc:identifier>
</item>
<item>
<title>提问很简单，但会优雅而高效地提问却很难 - 闻波</title>
<link>http://www.cnblogs.com/webary/p/8586517.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/webary/p/8586517.html</guid>
<description>&lt;p&gt;&lt;span&gt;——别怪对方不理你，只怪你自己不会提问！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在生活和工作中，每个人都难免会向他人请教或交流问题，也会被他人提问。作为提问方，如果只是提出（抛出）一个问题，那很简单，而如果希望优雅地提出问题并得到对方高效地答复却很难。其实大多数情况下，问题出在提问方。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　我也经常会向其他人提问，也会频繁收到他人的提问，由于通讯工具的变化，这些场景基本都发生在线上（微信、qq、其他即时通讯工具），这些场景中接触过形形色色的人以及各种提问方式，曾经很困惑为啥很多人提问方式让人很难接受，就特意查了下网上其他人有没有相应的困惑，发现的确很多人都有，因此就打算写一篇文章来记录一下自己的一些思考，也算是方便自己能换位思考从而学会更好地提问，也希望屏幕前的你能从中获得一些有用的信息。（本文来源『闻波 博客园』——&lt;a href=&quot;http://www.cnblogs.com/webary/p/8586517.html&quot;&gt;提问很简单，但会优雅而高效地提问却很难&lt;/a&gt;，转载请注明出处，谢谢）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;em&gt;下面就从提问的各个方面阐述下自己的看法，如有异议，可以留言，各抒己见，不能及时回复，也请谅解！&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;万事开头难——如何打招呼&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　“在吗？”“你好，请问你在吗？我有问题想问你？”“在吗，有时间吗？”相信很多喜欢提问的人应该经常会用这种“开场白”，但是每次看到这样一句，其实好想说“不在！我没时间！”&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　不知道从什么时候开始，找人第一句变成了“在吗？”。很多次比较尴尬的是有时候真的很忙，等我看到消息时，是好几个小时之前的一句“在吗”，然后看到了嘛，只好回复一句“在，刚看到，有什么事吗？”，然后对方现在又不在了，然后就没有然后了咯（/摊手）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　第一，对方没有这么闲也没有这个义务一直守在屏幕对面盯着聊天窗口。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　第二，活着好好的呢！没必要做一个活体检测吧？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　第三，每个人都有自己的时间安排，不管对方现在忙不忙有没有时间回复，直接问对方有没有时间都不妥。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　当然，上面说得有点过了，意思很明了，就是别把“在吗”作为打招呼的第一句，你是要提问，不需要先三次握手建立一个TCP连接并独占信道，有问题直接提出来就好，只来一句在吗之类的会让被提问者对你形成很差的第一印象，后面的问题回答效率可想而知了。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;那说到底该怎么开场呢？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&lt;strong&gt;应对策略&lt;/strong&gt;：如果是熟人或者不久之前已联系过，直接来个爽朗的称呼后直接抛出问题即可；如果是陌生人第一次联系或者不确定对方是否熟悉自己，请先做个对分析后面问题强相关的简短自我介绍，紧接着抛出问题。如果就是想要礼貌并且问题不是短期就能解决，那就在最后加上一句“麻烦有空的时候帮忙看看”之类的就可以。&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;提问重头戏——如何抛出问题&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　就拿我收到过的问题为例吧：“请问下C++我该怎么学好？”“我安装XXX一直报错怎么办啊？”“机器学习难不难？怎么入门啊？”“是考研好还是直接去找工作好？”“有人会***技术的吗？”（在群里提问）……&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　就举这些吧，还有类似的让人没法回答的问题数不胜数。换位思考并仔细分析下这些问题就能发现，为什么这些问题不好回答？&lt;span&gt;无背景、问题宽泛、适应性差、因人而异、缺乏预先思考&lt;/span&gt;等等。如果你还在这样问问题，请收手吧，你不仅会让对方抓狂，还会让你自己更懒散而效率低下！任何问题都有问题的背景，任何不阐述背景的问题都是说废话！在问问题之前想好一件事：对方未必知道你现在所处的背景，你基础如何，在什么环境下安装的什么版本的软件，你什么专业，对这个行业熟悉程度如何，你自己的人生规划是什么，考研动机是什么。这些基本的细节对方都不知道，怎么可能回答你这个问题？另外，也碰到过有部分人提问的时候直接摔了一个截图给我就没下文了，让我默默看图不说话？的确专业性的问题&lt;strong&gt;配上图&lt;/strong&gt;比自己啰嗦好几句要好得多，但是一定不能只有图没有&lt;strong&gt;上下文解释&lt;/strong&gt;说明自己的疑问是什么，需要&lt;strong&gt;关注&lt;/strong&gt;图中哪些信息（最好能截图的时候圈出需要关注的信息，并且记住尽量保留与问题相关的&lt;strong&gt;大图&lt;/strong&gt;！截大图！）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&lt;strong&gt;应对策略&lt;/strong&gt;：抛出问题必须注意抛出方式，说出重点的背景细节再提问。&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;　&lt;/span&gt;&lt;/em&gt;　&lt;span&gt;&lt;strong&gt;提问忌讳点——哪些不该问&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　知道了该怎么开头，怎么抛出问题了并不够，还需要知道哪些问题不该问，或者说不能直接问的问题该怎么问。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　“编译报错显示XXXXX是什么意思啊？要怎么解决”“XXX算法是怎么实现的啊？”“我要怎么调试我的代码啊？”&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　遇到这类问题，我也是蛮心衰的，问这种问题的人给我的第一印象是：不会主动去搜集信息、甘愿做一只伸手死党、不尊重和珍惜对方的时间（可归结为一句就是不会提问却就爱提问，你可以保持好奇心，但请不要放弃独立思考）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&lt;strong&gt;应对策略&lt;/strong&gt;：合理并充分利用搜索引擎&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;提问结束语——如何结束提问更优雅&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　有时候会遇到这样的人：耐心回答完他的提问和连续的疑问后，他就不见了，也不知道是没看到，还是看到了也领会了就是不想回复，还是仍没理解不好意思继续追问，反正就是突然不理我了，我也很绝望啊，能尊重下对方吗？给个适当的反应还是很有必要的。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;也曾有这样的提问者：在他的提问中与他探讨出这类问题的各个角度的解读，完事了会表达真诚的感谢或者直接来个红包表示下谢意，金额并不重要，重要的是他们懂得去感谢别人的付出，尊重他人的劳动。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　很重要的一点是，一个良好的提问结束方式能让下次提问的反馈来得更顺畅，这一次问题的愉快结束也是下一次问题愉快的开始。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&lt;strong&gt;应对策略&lt;/strong&gt;：表示感谢是对回答者最大的尊重&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;转载请注明出处：『闻波 博客园』——&lt;a href=&quot;http://www.cnblogs.com/webary/p/8586517.html&quot;&gt;提问很简单，但会优雅而高效地提问却很难&lt;/a&gt;，谢谢！&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 16 Mar 2018 15:51:00 +0000</pubDate>
<dc:creator>闻波</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/webary/p/8586517.html</dc:identifier>
</item>
<item>
<title>elfinder源码浏览-Volume文件系统操作类（1） - Visitors</title>
<link>http://www.cnblogs.com/dmeck/p/8586482.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dmeck/p/8586482.html</guid>
<description>&lt;p&gt;今天看了一个文件管理的java后台源码，elfinder&lt;/p&gt;
&lt;p&gt;发现这个东东比我写的代码效率告到不知道哪去了，苦思冥想后还是抽点时间看看吧。。&lt;/p&gt;
&lt;p&gt;它实现了我们电脑上的所以关于文件操作的动作，并生成了api开放给前台，具体详细还是看官方文档吧，本人英文贼菜&lt;/p&gt;
&lt;p&gt;之间用了Java1.7中的NIO里的path类，此工具类可以使我们不在使用恶心的FIle对象啦，而且速度超快，看着代码整个人都舒服这里有它的介绍&lt;a title=&quot;JAVA NIO:Path ,File&quot; href=&quot;http://blog.csdn.net/kiss_the_sun/article/details/49931207&quot; target=&quot;_blank&quot;&gt;JAVA NIO:Path ,File&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;项目地址&lt;a title=&quot;elfinder-java-connector&quot; href=&quot;https://github.com/trustsystems/elfinder-java-connector&quot; target=&quot;_blank&quot;&gt;elfinder-java-connector&lt;/a&gt;此版本没有前台页面实现&lt;/p&gt;
&lt;p&gt;此版本有前台实现&lt;a title=&quot;elfinder-2.x-servlet&quot; href=&quot;https://github.com/bluejoe2008/elfinder-2.x-servlet&quot; target=&quot;_blank&quot;&gt;elfinder-2.x-servlet&lt;/a&gt;不过此版本没有Java源码，是通过maven导入的方式让我们调用它的核心类&lt;/p&gt;
&lt;p&gt;两种相差spring集成、加载配置文件到context的实现&lt;/p&gt;
&lt;p&gt;我今天看的是前者的代码&lt;/p&gt;
&lt;p&gt;首先我们先从底层看齐&lt;/p&gt;
&lt;p&gt;　　今天稍微看了一个大概&lt;/p&gt;
&lt;p&gt;　　首先定义了一个公共的接口向外部开放，所以的规则依据此接口开发&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Volume{&lt;br/&gt;　　各种需要操作文件的定义&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
String getMimeType(Target target) throws IOException;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;br/&gt;}
　合成这个接口的包装接口（设计模式中合成）
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Target {

    Volume getVolume();

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 好了之后实现了这个包装接口Target&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NIO2FileSystemTarget &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Target {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Path path;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Volume volume;
。。。。。。。。。。。。。。。。。。。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再然后聚合了这个几个接口和实现类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NIO2FileSystemVolume &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Volume {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String alias;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Path rootDir;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Detector detector;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; NIO2FileSystemVolume(Builder builder) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.alias =&lt;span&gt; builder.alias;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.rootDir =&lt;span&gt; builder.rootDir;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.detector = &lt;span&gt;new&lt;/span&gt; NIO2FileTypeDetector();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;我今天大致弄明白了这个的实现&lt;/span&gt;
&lt;span&gt;        createRootDir();
    }&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
@Override&lt;br/&gt;public String getMimeType(Target target) throws IOException {&lt;br/&gt;Path path = fromTarget(target);&lt;br/&gt;return detector.detect(path);&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;。。。。。。。。。。。。。。。。。。。。。。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们从这个聚合类开始看&lt;/p&gt;
&lt;p&gt;下面这个获取文件类型的实现是通过tika的工具获取的 &lt;span&gt;&lt;a title=&quot;文件内容读取--Tika&quot; href=&quot;http://blog.csdn.net/supermancoke/article/details/69942946&quot; target=&quot;_blank&quot;&gt;文件内容读取--Tika&lt;/a&gt;这个介绍比较详细&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Tika是Apache下开源的文档内容解析工具，支持上千种文档格式（如PPT、XLS、PDF）。Tika使用统一的方法对各种类型文件进行内容解析,封装了各种格式解析的内部实现，可用于搜索引擎索引、内容分析、转换等场景。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们来看他的具体实现&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先是&lt;/span&gt;Detector 他的一个接口&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Detector {
    String detect(InputStream inputStream)&lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException;
    String detect(Path path)&lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt;  IOException;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NIO2DileTypeDetector &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Detector {

   &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;  &lt;span&gt;final&lt;/span&gt; Tika tika = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Tika();
。。。。。。。。。。。。。。。。。。。。。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;看了这些大概弄明白这个代码的大致写法心里有点小激动，我们写个测试类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    @org.junit.Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Test1()&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        Path path &lt;/span&gt;= Paths.get(&quot;F:\\[加密与解密(第三版)].段钢.扫描版.pdf&quot;&lt;span&gt;);
        NIO2DileTypeDetector detector &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NIO2DileTypeDetector();
        System.out.println(detector.detect(path));
    }
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;C:\server\jdk1.8.0_77\bin\java 。。。。。。。。。。&lt;br/&gt;application/pdf&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



</description>
<pubDate>Fri, 16 Mar 2018 15:33:00 +0000</pubDate>
<dc:creator>Visitors</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dmeck/p/8586482.html</dc:identifier>
</item>
<item>
<title>数据分析之Pandas和Numpy学习笔记(持续更新) - xnchall</title>
<link>http://www.cnblogs.com/xnchll/p/8586241.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xnchll/p/8586241.html</guid>
<description>&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.max([axis, out, keepdims])&lt;span class=&quot;cm-tab&quot;&gt;  返回根据指定的axis计算最大值&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.argmax([axis, out])&lt;span class=&quot;cm-tab&quot;&gt; 返回根据指定axis计算最大值的索引&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.min([axis, out, keepdims])&lt;span class=&quot;cm-tab&quot;&gt;  返回根据指定的axis计算最小值&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.argmin([axis, out])&lt;span class=&quot;cm-tab&quot;&gt; 返回根据指定axis计算最小值的索引&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.ptp([axis, out])&lt;span class=&quot;cm-tab&quot;&gt;    返回根据指定axis计算最大值与最小值的差&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.clip([min, max, out])&lt;span class=&quot;cm-tab&quot;&gt;   返回数组元素限制在[min, max]之间的新数组（小于min的转为min，大于max的转为max）&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.round([decimals, out])&lt;span class=&quot;cm-tab&quot;&gt;  返回指定精度的数组（四舍五入）&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.trace([offset, axis1, axis2, dtype, out])&lt;span class=&quot;cm-tab&quot;&gt;   返回数组的迹（对角线元素的和）&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.sum([axis, dtype, out, keepdims])&lt;span class=&quot;cm-tab&quot;&gt;   根据指定axis计算数组的和，默认求所有元素的和&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.cumsum([axis, dtype, out])&lt;span class=&quot;cm-tab&quot;&gt;  根据指定axis计算数组的累积和&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.mean([axis, dtype, out, keepdims])&lt;span class=&quot;cm-tab&quot;&gt;  根据指定axis计算数组的平均值&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.var([axis, dtype, out, ddof, keepdims])&lt;span class=&quot;cm-tab&quot;&gt; 根据指定的axis计算数组的方差&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.std([axis, dtype, out, ddof, keepdims])&lt;span class=&quot;cm-tab&quot;&gt; 根据指定axis计算数组的标准差&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.prod([axis, dtype, out, keepdims])&lt;span class=&quot;cm-tab&quot;&gt;  根据指定axis计算数组的积&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.cumprod([axis, dtype, out])&lt;span class=&quot;cm-tab&quot;&gt; 根据指定axis计算数据的累计积&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.all([axis, dtype, out])&lt;span class=&quot;cm-tab&quot;&gt; 根据指定axis判断所有元素是否全部为真&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.any([axis, out, keepdims])&lt;span class=&quot;cm-tab&quot;&gt;  根据指定axis判断是否有元素为真&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 16 Mar 2018 15:31:00 +0000</pubDate>
<dc:creator>xnchall</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xnchll/p/8586241.html</dc:identifier>
</item>
<item>
<title>逻辑回归(logistic regression) - 康行天下</title>
<link>http://www.cnblogs.com/makefile/p/logistic-regression.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/makefile/p/logistic-regression.html</guid>
<description>&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;逻辑回归从线性回归引申而来,对回归的结果进行logistic函数运算,将范围限制在[0,1]区间,并更改了损失函数.逻辑回归要求输入的标签数据是01分布(伯努利),其损失函数的定义方式,使得其可用于2分类问题(通过得到的概率值与阈值比较进行分类).而线性回归则是单纯的连续值回归.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;logistic分布&quot;&gt;logistic分布&lt;/h2&gt;
&lt;p&gt;X具有logistic分布是指X具有以下分布和密度函数:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \begin{align} F(x)&amp;amp;=P(X\le x)={1\over 1+e^{-(x-\mu)/\gamma}} \\ f(x)&amp;amp;=F'(x) \end{align} \]&lt;/span&gt;&lt;br/&gt;式子中,&lt;span class=&quot;math inline&quot;&gt;\(\mu\)&lt;/span&gt;是位置参数,&lt;span class=&quot;math inline&quot;&gt;\(\gamma&amp;gt;0\)&lt;/span&gt;是形状参数.logistic分布函数是一条S型曲线,密度类似正态分布的钟型曲线.&lt;/p&gt;
&lt;h2 id=&quot;二项逻辑回归模型&quot;&gt;二项逻辑回归模型&lt;/h2&gt;
&lt;p&gt;一个事件的几率是该事件发生的概率与不发生的概率的比值,对数几率(log odds)或logit函数是:&lt;span class=&quot;math inline&quot;&gt;\(logit(p)=\log {p\over 1-p}\)&lt;/span&gt;.&lt;br/&gt;逻辑回归模型为:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ P(Y=1|x)={e^{w\cdot x}\over 1+e^{w\cdot x}} \\ P(Y=0|x)={1\over 1+e^{w\cdot x}} \]&lt;/span&gt;&lt;br/&gt;因此逻辑回归的对数几率是:&lt;span class=&quot;math inline&quot;&gt;\(\log{P(Y=1|x)\over P(Y=0|x)}=w\cdot x\)&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&quot;模型参数估计&quot;&gt;模型参数估计&lt;/h2&gt;
&lt;p&gt;可以应用极大似然估计法估计模型参数:&lt;br/&gt;设&lt;span class=&quot;math inline&quot;&gt;\(P(Y=1|x)=\pi(x),P(Y=0|x)=1-\pi(x)\)&lt;/span&gt;&lt;br/&gt;似然函数为:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \Pi_{i=1}^N[\pi(x_i)]^{y_i} [1-\pi(x_i)]^{1-y_i} \]&lt;/span&gt;&lt;br/&gt;对数似然函数为:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \begin{align} L(w)&amp;amp;=\log \Pi_{i=1}^N[\pi(x_i)]^{y_i} [1-\pi(x_i)]^{1-y_i} \\ &amp;amp;=\sum_{i=1}^N[y_i\log\pi(x_i)+(1-y_i)\log(1-\pi(x_i))] \end{align} \]&lt;/span&gt;&lt;br/&gt;对L(w)求极大值,得到w的估计值.而我们实际中求-L(w)的极小值,即二值交叉熵损失(binary cross entropy).&lt;br/&gt;二项逻辑回归的参数估计法可以推广到多项逻辑回归,即softmax.&lt;/p&gt;
&lt;h2 id=&quot;交叉熵&quot;&gt;交叉熵&lt;/h2&gt;
&lt;p&gt;假设类别&lt;span class=&quot;math inline&quot;&gt;\(y\in \{0,1,...,k\}\)&lt;/span&gt;,每个类别统计的样本个数分别为&lt;span class=&quot;math inline&quot;&gt;\(n_1,n_2,\cdots,n_k\)&lt;/span&gt;,且&lt;span class=&quot;math inline&quot;&gt;\(\sum_{i=1}^k n_i=n\)&lt;/span&gt;.假设样本服从多项式分布且相互独立,那么有&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ P(D|\theta)={n!\over n_1!\cdot n_2!\cdots n_k!}\Pi_{i=1}^Nf(x_i,\theta)^{y_i} \]&lt;/span&gt;&lt;br/&gt;取对数得:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \log P(D|\theta)=\log n!-\log n_1!\cdot n_2!\cdots n_k!+\sum_{i=1}^n y_i\log f(x_i,\theta) \]&lt;/span&gt;&lt;br/&gt;前边的log项与参数&lt;span class=&quot;math inline&quot;&gt;\(\theta\)&lt;/span&gt;无关,因此只需要最小化:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ -\sum_{i=1}^ny_i\log f(x_i,\theta) \]&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;逻辑回归-损失函数&quot;&gt;逻辑回归-损失函数&lt;/h3&gt;
&lt;p&gt;如果用平方误差（MSE）作为逻辑回归的损失函数,那么函数曲线将是跳跃式的,非凸的(non-convex),原因是logistic函数将数据范围限制在[0,1]区间,而真实标签值非0即1.最小化 MSE 损失容易陷入局部极小点.逻辑回归损失是如下的分情况的凸函数(单个x与y的损失):&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \text{Cost}(h_\theta(x),y)=\begin{cases} -\log(h_\theta(x)) &amp;amp;&amp;amp; \text{, $y=1$} \\ -\log(1-h_\theta(x)) &amp;amp;&amp;amp; \text{, $y=0$} \end{cases} \]&lt;/span&gt;&lt;br/&gt;符合直觉和逻辑.累计损失函数可以转化为如下(同时加上了正则项):&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ J(\theta)=[-{1\over m}\sum_{i=1}^m\big(y^{(i)}\log h_\theta(x^{(i)})+(1-y^{(i)})\log (1-h_\theta(x^{(i)}))\big)]+{\lambda \over 2m}\sum_{j=1}^n\theta_j^2 \]&lt;/span&gt;&lt;br/&gt;其中参数 &lt;span class=&quot;math inline&quot;&gt;\(\theta\)&lt;/span&gt; 同线性回归一样，但经过sigmoid函数得到输出：&lt;span class=&quot;math inline&quot;&gt;\(h_{\theta}(x)=g(\theta^{T}x)\)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ g(z)={1\over 1+e^{-z}} \tag{sigmoid} \]&lt;/span&gt;&lt;br/&gt;损失对&lt;span class=&quot;math inline&quot;&gt;\(\theta\)&lt;/span&gt;的偏导数为&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \frac{\partial}{\partial\theta_{j}}J(\theta) ={1\over m}\sum_{i=1}^{m}(h_\theta(x^{i})-y^i)x_j^i \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;与线性回归的偏导数相同，参考&lt;a href=&quot;https://math.stackexchange.com/questions/477207/derivative-of-cost-function-for-logistic-regression&quot;&gt;公式推导&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;模型的优势&quot;&gt;模型的优势&lt;/h2&gt;
&lt;p&gt;逻辑回归相比其它更复杂的模型的优势：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;LR能以概率的形式输出结果,而非只是0,1判定,如SVM难以用概率表示；&lt;/li&gt;
&lt;li&gt;LR的可解释性强,可控度高；&lt;/li&gt;
&lt;li&gt;训练快,feature engineering之后效果好；&lt;/li&gt;
&lt;li&gt;因为结果是概率,可以做ranking model；&lt;/li&gt;
&lt;li&gt;添加feature很简单。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在现实中很多推荐系统都是拿LR做基础版本的,其作用不容小觑.&lt;/p&gt;
</description>
<pubDate>Fri, 16 Mar 2018 15:29:00 +0000</pubDate>
<dc:creator>康行天下</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/makefile/p/logistic-regression.html</dc:identifier>
</item>
<item>
<title>Java高并发秒杀系统【观后总结】 - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8586090.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8586090.html</guid>
<description>&lt;p&gt;在慕课网上发现了一个JavaWeb项目，内容讲的是高并发秒杀，觉得挺有意思的，就进去学习了一番。&lt;/p&gt;
&lt;p&gt;记录在该项目中学到了什么玩意..&lt;/p&gt;
&lt;p&gt;该项目源码对应的gitHub地址（由观看其视频的人编写，并非视频源代码）：&lt;a href=&quot;https://github.com/codingXiaxw/seckill&quot; class=&quot;uri&quot;&gt;https://github.com/codingXiaxw/seckill&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我结合其资料和观看视频的时候整理出从该项目学到了什么...&lt;/p&gt;

&lt;h2 id=&quot;日志记录工具&quot;&gt;日志记录工具：&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;

    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--1.日志 java日志有:slf4j,log4j,logback,common-logging&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        slf4j:是规范/接口&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        日志实现:log4j,logback,common-logging&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        使用:slf4j+logback&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    --&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;mybatis之前没注意到的配置属性&quot;&gt;Mybatis之前没注意到的配置属性：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;使用jdbc的getGeneratekeys获取自增主键值&lt;/strong&gt;，这个属性还是挺有用的。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--配置全局属性--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;settings&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--使用jdbc的getGeneratekeys获取自增主键值--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;setting&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;useGeneratedKeys&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--使用列别名替换列名　　默认值为true&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        select name as title(实体中的属性名是title) form table;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        开启后mybatis会自动帮我们把表中name的值赋到对应实体的title属性中&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;setting&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;useColumnLabel&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--开启驼峰命名转换Table:create_time到 Entity(createTime)--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;setting&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;mapUnderscoreToCamelCase&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mybatis返回的对象如果有关联字段，除了使用resultMap还有下面这种方式（虽然我还是觉得resultMap会方便一点）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;select&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;queryByIdWithSeckill&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; resultType=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;SuccessKilled&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--根据seckillId查询SuccessKilled对象，并携带Seckill对象--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--如何告诉mybatis把结果映射到SuccessKill属性同时映射到Seckill属性--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--可以自由控制SQL语句--&amp;gt;&lt;/span&gt;
        SELECT
            sk.seckill_id,
            sk.user_phone,
            sk.create_time,
            sk.state,
            s.seckill_id &quot;seckill.seckill_id&quot;,
            s.name &quot;seckill.name&quot;,
            s.number &quot;seckill&quot;,
            s.start_time &quot;seckill.start_time&quot;,
            s.end_time &quot;seckill.end_time&quot;,
            s.create_time &quot;seckill.create_time&quot;
        FROM success_killed sk
        INNER JOIN seckill s ON sk.seckill_id=s.seckill_id
        WHERE sk.seckill_id=#{seckillId}
        AND sk.user_phone=#{userPhone}
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;数据库连接池可能用到的属性&quot;&gt;数据库连接池可能用到的属性：&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--c3p0私有属性--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;maxPoolSize&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;30&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;minPoolSize&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--关闭连接后不自动commit--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;autoCommitOnClose&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--获取连接超时时间--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;checkoutTimeout&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1000&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--当获取连接失败重试次数--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;acquireRetryAttempts&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;spring与junit整合&quot;&gt;spring与Junit整合：&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by codingBoy on 16/11/27.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 配置spring和junit整合，这样junit在启动时就会加载spring容器&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@RunWith&lt;/span&gt;(SpringJUnit4ClassRunner.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;//告诉junit spring的配置文件&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@ContextConfiguration&lt;/span&gt;({&lt;span class=&quot;st&quot;&gt;&quot;classpath:spring/spring-dao.xml&quot;&lt;/span&gt;})
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; SeckillDaoTest {

    &lt;span class=&quot;co&quot;&gt;//注入Dao实现类依赖&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Resource&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; SeckillDao seckillDao;


    &lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;queryById&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {
        &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; seckillId=&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;;
        Seckill seckill=seckillDao.&lt;span class=&quot;fu&quot;&gt;queryById&lt;/span&gt;(seckillId);
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(seckill.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;());
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(seckill);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;mybatis参数为一个以上时&quot;&gt;Mybatis参数为一个以上时&lt;/h2&gt;
&lt;p&gt;之前在学习MyBatis的时候，&lt;strong&gt;如果参数超过了一个，那么是使用Map集合来进行装载的！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这次教程中发现，可以不用Map集合（如果都是基本数据类型）！&lt;/p&gt;
&lt;p&gt;例子：&lt;a href=&quot;mailto:**使用@param就行了&quot;&gt;**使用@Param就行了&lt;/a&gt;！**&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;reduceNumber&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@Param&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;seckillId&quot;&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; seckillId, &lt;span class=&quot;fu&quot;&gt;@Param&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;killTime&quot;&lt;/span&gt;) Date killTime);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;在XML文件中可以直接忽略parameterType了！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;避免重复插入数据时抛出异常&quot;&gt;避免重复插入数据时抛出异常&lt;/h2&gt;
&lt;p&gt;如果主键重复插入数据的时候，Mybatis正常是会抛出异常的，我们又不希望它抛出异常，那么我们可以这样做：&lt;/p&gt;
&lt;p&gt;写ignore..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171208204853452-1658777702.png&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;tdo&quot;&gt;tdo&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;一个dto包作为传输层,dto和entity的区别在于:entity用于业务数据的封装，&lt;strong&gt;而dto用于完成web和service层的数据传递。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于dto这个概念，在之前我是接触过一次的，但是没有好好地实践起来。这次看到了它的用法了。&lt;/p&gt;
&lt;p&gt;我的理解是：&lt;strong&gt;Service与Web层数据传递数据的再包装了一个对象而已&lt;/strong&gt;。因为很多时候Service层返回的数据如果使用的是POJO，POJO很多的属性是多余的，还有一些想要的数据又包含不了。此时，&lt;strong&gt;dto又可以再一次对要传输的数据进行抽象，封装想获取的数据&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;定义多个异常对象&quot;&gt;定义多个异常对象&lt;/h2&gt;
&lt;p&gt;之前的异常对象都是针对整个业务的，&lt;strong&gt;其实还是可以细分多个异常类的出来的&lt;/strong&gt;。比如“重复秒杀”，”秒杀关闭“这些都是属于秒杀的业务。&lt;/p&gt;
&lt;p&gt;这样做的好处就是看到抛出的异常就能够知道是具体哪部分错了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于视频中在Service层就catch住了很多异常，我觉得可以在Service层直接抛出，在Controller也能抛出，直接使用统一异常处理器类来管理会更加方便！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171208210231437-328868932.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;提倡使用注解方式使用事务&quot;&gt;提倡使用注解方式使用事务&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171208210507468-1751220537.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171208210509187-1362910295.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我觉得就是代码更加清晰吧，使用注解的话。&lt;/p&gt;
&lt;p&gt;在视频下面还有同学说如果在Service中调用事务方法会有些坑，我暂时还没遇到过。先存起来吧：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;并发性上不去是因为当多个线程同时访问一行数据时，产生了事务，因此产生写锁，每当一个获取了事务的线程把锁释放，另一个排队线程才能拿到写锁，QPS和事务执行的时间有密切关系，事务执行时间越短，并发性越高，这也是要将费时的I/O操作移出事务的原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;关于同类中调用事务方法的时候有个坑，同学们需要注意下AOP切不到调用事务方法。事务不会生效，解决办法有几种，可以搜一下，找一下适合自己的方案。本质问题时类内部调用时AOP不会用代理调用内部方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;“关于同类中调用事务方法的时候有个坑” 解决方案&lt;br/&gt;1、如果是基于接口动态代理 是没有问题的，直接使用接口调用&lt;br/&gt;2、如果是基于class的动态代理 可以用 AopContext.currentProxy() 解决，注意剥离方法一定是public 修饰 ！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;md5暴露接口&quot;&gt;MD5暴露接口&lt;/h2&gt;
&lt;p&gt;其实我也在想MD5暴露出去的url是不是真的有用，也见到有人提问了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.imooc.com/qadetail/164058&quot; class=&quot;uri&quot;&gt;https://www.imooc.com/qadetail/164058&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;回答者：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;不能说没作用，如果不加密，用户截取了你的访问地址，他看到了当前秒杀ID为1000，他完全可以推测出其他的秒杀地址，或者说他可以造出一批地址；视频中秒杀在数据库中判断了秒杀时间，其他时间他自然是秒杀不到，但是对数据库也有一定的冲击，如果他用定时器或者循环秒杀软件，你的系统承受力是个问题；另一方面对于一些还没开始的秒杀，他模拟地址以后，完全可以用定时器一直访问。加密以后由于他拿不到混淆码，就只能通过点击链接进行秒杀……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;简单理解：通过MD5加密以后，用户在秒杀之前模拟不出真实的地址，还是有一定作用的。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;枚举类&quot;&gt;枚举类&lt;/h2&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;在return new SeckillExecution(seckillId,1,&quot;秒杀成功&quot;,successKilled);代码中&lt;strong&gt;，我们返回的state和stateInfo参数信息应该是输出给前端的，但是我们不想在我们的return代码中硬编码这两个参数，所以我们应该考虑用枚举的方式将这些常量封装起来&lt;/strong&gt;，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;enum&lt;/span&gt; SeckillStatEnum {

    &lt;span class=&quot;fu&quot;&gt;SUCCESS&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;秒杀成功&quot;&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;END&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;秒杀结束&quot;&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;REPEAT_KILL&lt;/span&gt;(-&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;重复秒杀&quot;&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;INNER_ERROR&lt;/span&gt;(-&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;系统异常&quot;&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;DATE_REWRITE&lt;/span&gt;(-&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;数据篡改&quot;&lt;/span&gt;);

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; state;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String info;

    &lt;span class=&quot;fu&quot;&gt;SeckillStatEnum&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; state, String info) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;state&lt;/span&gt; = state;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;info&lt;/span&gt; = info;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getState&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; state;
    }


    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getInfo&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; info;
    }


    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; SeckillStatEnum &lt;span class=&quot;fu&quot;&gt;stateOf&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index)
    {
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (SeckillStatEnum state : &lt;span class=&quot;fu&quot;&gt;values&lt;/span&gt;())
        {
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (state.&lt;span class=&quot;fu&quot;&gt;getState&lt;/span&gt;()==index)
            {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; state;
            }
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;restful接口设计学习&quot;&gt;Restful接口设计学习&lt;/h2&gt;
&lt;p&gt;之前就已经接触过RESTful这样的思想理念的，可是在第一个项目中是没有用起来的。因为还是不大习惯，怕写成不伦不类的RESTful接口，打算在第二个项目中将RESTful全部应用起来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210125727521-742272325.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210125730224-1596653774.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210125736021-816944531.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210125741865-893504055.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考博文：&lt;a href=&quot;http://kb.cnblogs.com/page/512047/&quot; class=&quot;uri&quot;&gt;http://kb.cnblogs.com/page/512047/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;springmvc之前不知道的细节&quot;&gt;SpringMVC之前不知道的细节&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;mailto:**@datetimeformat注解对时间进行格式化&quot;&gt;**@DateTimeFormat注解对时间进行格式化&lt;/a&gt;！（这个我暂时没有试验）**&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--配置spring mvc--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--1,开启springmvc注解模式&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    a.自动注册DefaultAnnotationHandlerMapping,AnnotationMethodHandlerAdapter&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    b.默认提供一系列的功能:数据绑定，数字和日期的format@NumberFormat,@DateTimeFormat&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    c:xml,json的默认读写支持--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;mvc:annotation-driven/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--2.静态资源默认servlet配置--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        1).加入对静态资源处理：js,gif,png&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        2).允许使用 &quot;/&quot; 做整体映射&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;mvc:default-servlet-handler/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210130308521-790385614.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210125936068-195346094.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;返回统一格式的json&quot;&gt;返回统一格式的JSON&lt;/h2&gt;
&lt;p&gt;之前在Web层与Service中封装了dto来进行这两层的数据进行传输，而我们一般都是在Controller返回JSON给前端进行解析。&lt;/p&gt;
&lt;p&gt;最好的做法就是将JSON的格式也统一化。这样做就能够很好地形成规范了！&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;co&quot;&gt;//将所有的ajax请求返回类型，全部封装成json数据&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; SeckillResult&amp;lt;T&amp;gt; {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; success;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; T data;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String error;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SeckillResult&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; success, T data) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;success&lt;/span&gt; = success;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;data&lt;/span&gt; = data;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SeckillResult&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; success, String error) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;success&lt;/span&gt; = success;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt; = error;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;isSuccess&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; success;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setSuccess&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; success) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;success&lt;/span&gt; = success;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;fu&quot;&gt;getData&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; data;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setData&lt;/span&gt;(T data) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;data&lt;/span&gt; = data;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getError&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; error;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setError&lt;/span&gt;(String error) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt; = error;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;获取json数据方式&quot;&gt;获取JSON数据方式&lt;/h2&gt;
&lt;p&gt;之前获取JSON都是使用&lt;code&gt;object.properties&lt;/code&gt;的方式来获取的，这次还看到了另一种方式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210130632552-859186745.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;javascript模块化&quot;&gt;JavaScript模块化&lt;/h2&gt;
&lt;p&gt;之前在项目中写JS代码都是要什么功能，写到哪里的。&lt;strong&gt;看了这次视频，发现JS都可以模块化！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JS模块化起来可读性还是比之前要好的，这是我之前没有接触过的，以后写JS代码就要注意了！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面贴上一段代码来感受一下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;56&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *  模块化javaScript&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by jianrongsun on 17-5-25.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; seckill &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 封装秒杀相关的ajax的url&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/seckill/time/now&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;exposer&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (seckillId) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/seckill/&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; seckillId &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/exposer&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;execution&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; md5) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/seckill/&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; seckillId &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; md5 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/execution&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 验证手机号码&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;validatePhone&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (phone) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!!&lt;/span&gt;(phone &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;phone&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;isNaN&lt;/span&gt;(phone))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 详情页秒杀业务逻辑&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 详情页开始初始化&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (params) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;获取手机号码&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 手机号验证登录，计时交互&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; userPhone &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cookie&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'userPhone'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 验证手机号&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;validatePhone&lt;/span&gt;(userPhone)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;未填写手机号码&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;// 验证手机控制输出&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; killPhoneModal &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#killPhoneModal&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;killPhoneModal&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;modal&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// 显示弹出层&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;backdrop&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'static'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// 静止位置关闭&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;keyboard&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;// 关闭键盘事件&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#killPhoneBtn&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;提交手机号码按钮被点击&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; inputPhone &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#killPhoneKey&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;val&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;inputPhone&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; inputPhone)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;validatePhone&lt;/span&gt;(inputPhone)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;co&quot;&gt;// 把电话写入cookie&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cookie&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'userPhone'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; inputPhone&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'/seckill'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;co&quot;&gt;// 验证通过 刷新页面&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;location&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;reload&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;co&quot;&gt;// todo 错误文案信息写到前端&lt;/span&gt;
                        &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#killPhoneMessage&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;&amp;lt;label class='label label-danger'&amp;gt;手机号码错误&amp;lt;/label&amp;gt;&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;在cookie中找到了电话号码，开启计时&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;// 已经登录了就开始计时交互&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; startTime &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; params[&lt;span class=&quot;st&quot;&gt;'startTime'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; endTime &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; params[&lt;span class=&quot;st&quot;&gt;'endTime'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; seckillId &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; params[&lt;span class=&quot;st&quot;&gt;'seckillId'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开始秒杀时间=======&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; startTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;结束秒杀时间========&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; endTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;now&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (result) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (result &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; result[&lt;span class=&quot;st&quot;&gt;'success'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; nowTime &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;convertTime&lt;/span&gt;(result[&lt;span class=&quot;st&quot;&gt;'data'&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;服务器当前的时间==========&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; nowTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;co&quot;&gt;// 进行秒杀商品的时间判断，然后计时交互&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;countDown&lt;/span&gt;(seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; nowTime&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; startTime&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; endTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'结果:'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; result)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'result'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; result)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;handlerSeckill&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; mode) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 获取秒杀地址&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;mode&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'&amp;lt;button class=&quot;btn btn-primary btn-lg&quot; id=&quot;killBtn&quot;&amp;gt;开始秒杀&amp;lt;/button&amp;gt;'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;debug&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开始进行秒杀地址获取&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exposer&lt;/span&gt;(seckillId)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (result) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (result &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; result[&lt;span class=&quot;st&quot;&gt;'success'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; exposer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; result[&lt;span class=&quot;st&quot;&gt;'data'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (exposer[&lt;span class=&quot;st&quot;&gt;'exposed'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;有秒杀地址接口&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;// 开启秒杀，获取秒杀地址&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; md5 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; exposer[&lt;span class=&quot;st&quot;&gt;'md5'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; killUrl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;execution&lt;/span&gt;(seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; md5)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀的地址为:&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; killUrl)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;// 绑定一次点击事件&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#killBtn&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;one&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开始进行秒杀,按钮被禁用&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;co&quot;&gt;// 执行秒杀请求，先禁用按钮&lt;/span&gt;
                        &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;addClass&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;disabled&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;co&quot;&gt;// 发送秒杀请求&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;post&lt;/span&gt;(killUrl&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (result) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; killResult &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; result[&lt;span class=&quot;st&quot;&gt;'data'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; state &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; killResult[&lt;span class=&quot;st&quot;&gt;'state'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; stateInfo &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; killResult[&lt;span class=&quot;st&quot;&gt;'stateInfo'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀状态&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; stateInfo)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;co&quot;&gt;// 显示秒杀结果&lt;/span&gt;
                            &lt;span class=&quot;va&quot;&gt;mode&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'&amp;lt;span class=&quot;label label-success&quot;&amp;gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; stateInfo &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;lt;/span&amp;gt;'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;mode&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;show&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;还没有暴露秒杀地址接口,无法进行秒杀&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;// 未开启秒杀&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; now &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;convertTime&lt;/span&gt;(exposer[&lt;span class=&quot;st&quot;&gt;'now'&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; start &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;convertTime&lt;/span&gt;(exposer[&lt;span class=&quot;st&quot;&gt;'start'&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; end &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;convertTime&lt;/span&gt;(exposer[&lt;span class=&quot;st&quot;&gt;'end'&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;当前时间&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; now)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开始时间&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; start)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;结束时间&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; end)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开始倒计时&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;debug&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开始进行倒计时&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;countDown&lt;/span&gt;(seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; now&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; start&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; end)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;服务器端查询秒杀商品详情失败&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'result'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;result&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;valueOf&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;countDown&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; nowTime&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; startTime&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; endTime) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀的商品ID:&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; seckillId &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;,服务器当前时间：&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; nowTime &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;,开始秒杀的时间:&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; startTime &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;,结束秒杀的时间&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; endTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//  获取显示倒计时的文本域&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; seckillBox &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#seckill-box&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//  获取时间戳进行时间的比较&lt;/span&gt;
        nowTime &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Date&lt;/span&gt;(nowTime).&lt;span class=&quot;at&quot;&gt;valueOf&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        startTime &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Date&lt;/span&gt;(startTime).&lt;span class=&quot;at&quot;&gt;valueOf&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        endTime &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Date&lt;/span&gt;(endTime).&lt;span class=&quot;at&quot;&gt;valueOf&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;转换后的Date类型当前时间戳&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; nowTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;转换后的Date类型开始时间戳&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; startTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;转换后的Date类型结束时间戳&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; endTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (nowTime &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; endTime &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nowTime &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; startTime) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 秒杀开始&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀可以开始,两个条件符合&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;handlerSeckill&lt;/span&gt;(seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; seckillBox)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (nowTime &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; endTime) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(nowTime &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; endTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// console.log(nowTime + &quot;&amp;gt;&quot; + startTime);&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(nowTime &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; endTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;// 秒杀结束&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀已经结束了,当前时间为:&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; nowTime &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;,秒杀结束时间为&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; endTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;seckillBox&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀结束&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀还没开始&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(nowTime &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; startTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 秒杀未开启&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; killTime &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Date&lt;/span&gt;(startTime &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(killTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开始计时效果&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;seckillBox&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;countdown&lt;/span&gt;(killTime&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (event) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;// 事件格式&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; format &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;strftime&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀倒计时: %D天 %H时 %M分 %S秒&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(format)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;seckillBox&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;html&lt;/span&gt;(format)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'finish.countdown'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;// 事件完成后回调事件，获取秒杀地址，控制业务逻辑&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;准备执行回调,获取秒杀地址,执行秒杀&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;倒计时结束&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;handlerSeckill&lt;/span&gt;(seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; seckillBox)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;cloneZero&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (time) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; cloneZero &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;:00&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;time&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;需要拼接时间&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            time &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; time &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; cloneZero&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; time&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;时间是完整的&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; time&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;convertTime&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (localDateTime) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; year &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;localDateTime&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; monthValue &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;localDateTime&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;monthValue&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dayOfMonth &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;localDateTime&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dayOfMonth&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; hour &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;localDateTime&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; minute &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;localDateTime&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; second &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;localDateTime&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; year &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; monthValue &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; dayOfMonth &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; hour &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; minute &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; second&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;前三篇已经做好了这个系统了，但是作为一个秒杀系统而言，它能支持的并发量是很低的。那我们现在要考虑怎么调优。&lt;/p&gt;
&lt;h2 id=&quot;分析&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;秒杀的地址接口可以借助redis来进行优化，不用多次访问数据库。&lt;/p&gt;
&lt;p&gt;秒杀操作是与数据库的事务相关的，不能使用缓存来替代了。下面给出的方案是需要修改源码的，难度是比较难的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131226365-333272915.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131232646-882735977.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131242286-612726285.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131303068-1662643561.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131314365-1036633925.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面分析瓶颈究竟在哪：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Mysql执行单条的SQL语句其实是非常快的。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主要是行级锁事务的等待，网络的延迟和GC回收！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131654365-1134416537.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131643427-2098892887.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131855833-1052024836.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131646365-1806803562.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131659536-927111669.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131651052-2102662776.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决思路&quot;&gt;解决思路：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131709177-1435493719.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131932615-1660955449.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决秒杀接口&quot;&gt;解决秒杀接口&lt;/h2&gt;
&lt;p&gt;对于秒杀接口而言，需要使用到Redis将数据进行缓存起来。那么用户就访问就不用去访问数据库了，我们给Redis缓存的数据就好了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210204233224-1462662274.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这次使用Jedis来操作Redis.&lt;/p&gt;
&lt;p&gt;还有值得 注意的地方：&lt;strong&gt;我们可以使用ProtostuffIOUtil来代替JDK的序列化，因为这个的序列化功能比JDK的要做得好很多！&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package com.suny.dao.cache;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import com.dyuproject.protostuff.LinkedBuffer;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.dyuproject.protostuff.ProtostuffIOUtil;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.dyuproject.protostuff.runtime.RuntimeSchema;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.suny.entity.Seckill;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.slf4j.Logger;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.slf4j.LoggerFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import redis.clients.jedis.Jedis;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import redis.clients.jedis.JedisPool;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 操作Redis的dao类&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by 孙建荣 on 17-5-27.下午4:44&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; RedisDao {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Logger logger = LoggerFactory.&lt;span class=&quot;fu&quot;&gt;getLogger&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;());

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; JedisPool jedisPool;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; RuntimeSchema&amp;lt;Seckill&amp;gt; schema = RuntimeSchema.&lt;span class=&quot;fu&quot;&gt;createFrom&lt;/span&gt;(Seckill.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RedisDao&lt;/span&gt;(String ip, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; port) {
        jedisPool = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;JedisPool&lt;/span&gt;(ip, port);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Seckill &lt;span class=&quot;fu&quot;&gt;getSeckill&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; seckillId) {
        &lt;span class=&quot;co&quot;&gt;// redis操作业务逻辑&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; (Jedis jedis = jedisPool.&lt;span class=&quot;fu&quot;&gt;getResource&lt;/span&gt;()) {
            String key = &lt;span class=&quot;st&quot;&gt;&quot;seckill:&quot;&lt;/span&gt; + seckillId;
            &lt;span class=&quot;co&quot;&gt;// 并没有实现内部序列化操作&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//get-&amp;gt;byte[]字节数组-&amp;gt;反序列化&amp;gt;Object(Seckill)&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 采用自定义的方式序列化&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 缓存获取到&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[] bytes = jedis.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(key.&lt;span class=&quot;fu&quot;&gt;getBytes&lt;/span&gt;());
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (bytes != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                &lt;span class=&quot;co&quot;&gt;// 空对象&lt;/span&gt;
                Seckill seckill = schema.&lt;span class=&quot;fu&quot;&gt;newMessage&lt;/span&gt;();
                ProtostuffIOUtil.&lt;span class=&quot;fu&quot;&gt;mergeFrom&lt;/span&gt;(bytes, seckill, schema);
                &lt;span class=&quot;co&quot;&gt;// seckill被反序列化&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; seckill;
            }
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
            logger.&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt;(e.&lt;span class=&quot;fu&quot;&gt;getMessage&lt;/span&gt;(), e);
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;putSeckill&lt;/span&gt;(Seckill seckill) {
        &lt;span class=&quot;co&quot;&gt;//  set Object(Seckill) -&amp;gt; 序列化 -&amp;gt; byte[]&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; (Jedis jedis = jedisPool.&lt;span class=&quot;fu&quot;&gt;getResource&lt;/span&gt;()) {
            String key = &lt;span class=&quot;st&quot;&gt;&quot;seckill:&quot;&lt;/span&gt; + seckill.&lt;span class=&quot;fu&quot;&gt;getSeckillId&lt;/span&gt;();
            &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[] bytes = ProtostuffIOUtil.&lt;span class=&quot;fu&quot;&gt;toByteArray&lt;/span&gt;(seckill, schema,
                    LinkedBuffer.&lt;span class=&quot;fu&quot;&gt;allocate&lt;/span&gt;(LinkedBuffer.&lt;span class=&quot;fu&quot;&gt;DEFAULT_BUFFER_SIZE&lt;/span&gt;));
            &lt;span class=&quot;co&quot;&gt;// 超时缓存&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; timeout=&lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; jedis.&lt;span class=&quot;fu&quot;&gt;setex&lt;/span&gt;(key.&lt;span class=&quot;fu&quot;&gt;getBytes&lt;/span&gt;(), timeout, bytes);
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
            logger.&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt;(e.&lt;span class=&quot;fu&quot;&gt;getMessage&lt;/span&gt;(), e);
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    }


}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--导入连接redis的JAR包--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;redis.clients&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jedis&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.9.0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--添加序列化依赖--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.dyuproject.protostuff&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;protostuff-core&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.dyuproject.protostuff&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;protostuff-runtime&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RedisDao并不受Mybatis的代理影响，于是是需要我们自己手动创建的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210204636896-51246873.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最终，我们的service逻辑就会变成这样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210204726427-221186869.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;秒杀操作优化&quot;&gt;秒杀操作优化&lt;/h2&gt;
&lt;p&gt;再次回到我们的秒杀操作，其实需要优化的地方就是我们的GC和行级锁等待的时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210204846333-613906122.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们之前的逻辑是这样的：&lt;strong&gt;先执行减库存操作，再插入购买成功的记录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其实，我们可以先插入成功购买的记录，再执行减库存的操作！&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;那这两者有啥区别呢？？？&lt;strong&gt;减库存的操作会导致行级锁的等待，而我们先进行insert的话，那么就不会被行级锁所干扰了。并且，我们这中两个操作是在同一个事物中的，并不会出现“超卖”的情况！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;关于先执行insert与先执行update的区别,&lt;strong&gt;两个事务同时insert的情况下,没有锁竞争,执行速度会快,当两个事务先update同一行数据,会有一个事务获得行锁,锁在事务提交之前都不会释放,所以让锁被持有的时间最短能提升效率&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以我们service层的逻辑可以改成这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210205146802-413188378.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这不是最终的方案，如果为了性能的优化我们还可以将SQL在Mysql中运行，不受Spring的事务来管理。&lt;strong&gt;在Mysql使用存储过程来进行提交性能&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;

&lt;span class=&quot;co&quot;&gt;-- 秒杀执行储存过程&lt;/span&gt;
DELIMITER $$ &lt;span class=&quot;co&quot;&gt;-- console ; 转换为&lt;/span&gt;
$$
&lt;span class=&quot;co&quot;&gt;-- 定义储存过程&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;-- 参数： in 参数   out输出参数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;-- row_count() 返回上一条修改类型sql(delete,insert,update)的影响行数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;-- row_count:0:未修改数据 ; &amp;gt;0:表示修改的行数； &amp;lt;0:sql错误&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;PROCEDURE&lt;/span&gt; `seckill`.`execute_seckill`
  (&lt;span class=&quot;kw&quot;&gt;IN&lt;/span&gt; v_seckill_id BIGINT, &lt;span class=&quot;kw&quot;&gt;IN&lt;/span&gt; v_phone BIGINT,
   &lt;span class=&quot;kw&quot;&gt;IN&lt;/span&gt; v_kill_time  &lt;span class=&quot;dt&quot;&gt;TIMESTAMP&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;OUT&lt;/span&gt; r_result &lt;span class=&quot;dt&quot;&gt;INT&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;DECLARE&lt;/span&gt; insert_count &lt;span class=&quot;dt&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;START&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TRANSACTION&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;INSERT&lt;/span&gt; IGNORE &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; success_killed
    (seckill_id, user_phone, create_time)
    &lt;span class=&quot;kw&quot;&gt;VALUES&lt;/span&gt; (v_seckill_id, v_phone, v_kill_time);
    &lt;span class=&quot;kw&quot;&gt;SELECT&lt;/span&gt; row_count()
    &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; insert_count;
    &lt;span class=&quot;kw&quot;&gt;IF&lt;/span&gt; (insert_count = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;THEN&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;ROLLBACK&lt;/span&gt;;
      &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; r_result = -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    ELSEIF (insert_count &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
      &lt;span class=&quot;kw&quot;&gt;THEN&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;ROLLBACK&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; r_result = -&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;ELSE&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;UPDATE&lt;/span&gt; seckill
      &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt; = &lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt; - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;WHERE&lt;/span&gt; seckill_id = v_seckill_id
            &lt;span class=&quot;kw&quot;&gt;AND&lt;/span&gt; end_time &amp;gt; v_kill_time
            &lt;span class=&quot;kw&quot;&gt;AND&lt;/span&gt; start_time &amp;lt; v_kill_time
            &lt;span class=&quot;kw&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt; &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
      &lt;span class=&quot;kw&quot;&gt;SELECT&lt;/span&gt; row_count()
      &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; insert_count;
      &lt;span class=&quot;kw&quot;&gt;IF&lt;/span&gt; (insert_count = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
      &lt;span class=&quot;kw&quot;&gt;THEN&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;ROLLBACK&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; r_result = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
      ELSEIF (insert_count &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;THEN&lt;/span&gt;
          &lt;span class=&quot;kw&quot;&gt;ROLLBACK&lt;/span&gt;;
          &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; r_result = -&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;;
      &lt;span class=&quot;kw&quot;&gt;ELSE&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;COMMIT&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; r_result = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;

      &lt;span class=&quot;kw&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;IF&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;IF&lt;/span&gt;;
  &lt;span class=&quot;kw&quot;&gt;END&lt;/span&gt;;
$$
&lt;span class=&quot;co&quot;&gt;--  储存过程定义结束&lt;/span&gt;
DELIMITER ;
&lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; @r_result = -&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;;
&lt;span class=&quot;co&quot;&gt;--  执行储存过程&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;CALL&lt;/span&gt; execute_seckill(&lt;span class=&quot;dv&quot;&gt;1003&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;13502178891&lt;/span&gt;, now(), @r_result);
&lt;span class=&quot;co&quot;&gt;-- 获取结果&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;SELECT&lt;/span&gt; @r_result;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210205313177-1070986245.png&quot;/&gt;。&lt;/p&gt;
&lt;p&gt;Mybatis调用存储过程其实和JDBC是一样的:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/16/1622f2c67b44484e?w=789&amp;amp;h=200&amp;amp;f=png&amp;amp;s=143578&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在使用存储过程的时候，我们需要4个参数，其实result是在存储过程中被赋值的。&lt;strong&gt;我们可以通过MapUtils来获取相对应的值。这是我之前没有接触过的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210205421458-844107091.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210205426552-1364409364.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后，对于部署的系统架构应该是这样子的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210205441271-1111149294.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;花了点时间看了该视频教程，觉得还是学到了不少的东西的。之前没有接触过优化的相关问题，现在给我打开了思路，以及学到了不少的开发规范的问题，也是很赞的。如果是初学者的话是可以去学学的。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章，想要获取更多的Java资源的同学，可以&lt;strong&gt;关注微信公众号:Java3y&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 16 Mar 2018 14:26:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8586090.html</dc:identifier>
</item>
<item>
<title>写着写着停不下来的普通女程序员的总结 - 明眸善睐</title>
<link>http://www.cnblogs.com/joyce4/p/8577141.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/joyce4/p/8577141.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;认识自己的无知是认识世界的最可靠的方法。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;时间过得又快又慢回顾你过去将近3年的学习经历&quot;&gt;&lt;strong&gt;&lt;span&gt;时间过得又快又慢——回顾你过去将近3年的学习经历&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;当初你报考的时候是真正喜欢计算机这个专业吗&quot;&gt;&lt;strong&gt;&lt;span&gt;1. 当初你报考的时候，是真正喜欢计算机这个专业吗？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;高考志愿对于一个没什么爱好的理科女无疑是过去这十几年来做的最痛快但又艰难的一个决定，现在我就读的是我高考志愿的第一个学校的第一个专业。可能是偏偏想要违背家里人的建议，在排除掉那些文科生可能会选的专业以外，我所感兴趣的理科生能够选择的范围也并不是很大，众多专业之中偏偏想要挑战一下计算机专业，即使亲朋好友都劝说一个女孩子别学这个，可能会太累，但偏偏就是这么倔强，别人说的我偏要去试一试哦。小时候也能接触到计算机，所以对这个专业是抱着很多的期待和未知，就这么跌跌撞撞磕磕绊绊迷迷茫茫地踏进了这个专业的门槛，从此开启我新世界的大门，但那个时候对于计算机专业具体是学什么的还真的是没有深入地去了解，只有模模糊糊的一个毕业会成为一名程序员的概念，但这也算改变了我的人生轨迹，所以就是这样的矛盾想法，那时候不能说是真正的喜欢计算机，但也一点都不讨厌这个专业。&lt;/p&gt;
&lt;h3 id=&quot;你现在后悔选择了这个专业吗&quot;&gt;&lt;strong&gt;&lt;span&gt;2. 你现在后悔选择了这个专业吗？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;不后悔，虽然接触计算机这个专业快三年了，学习这些基础课和专业课什么的也快三年了，但还是会对这个专业抱着很大的兴趣和期待，即便我只是一个普普通通的学生，并不是一个计算机大神。或许这个专业莫名的对我有着吸引力，越学习越觉得自己懂的东西还太少了，对于专业知识的了解还是太浅显了，就越想去了解它，我想至少到现在为止我还没有后悔过选择这个专业，在这近三年的学习过程中，兴趣带给我的快乐和满足远超过它所带来的困难和痛苦。&lt;/p&gt;
&lt;h3 id=&quot;你认为你现在最喜欢的领域是什么可以是计算机的也可以是其它领域&quot;&gt;&lt;strong&gt;&lt;span&gt;3. 你认为你现在最喜欢的领域是什么（可以是计算机的也可以是其它领域）？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;以一个未来的程序员的角度来说：我对于前端开发和网页方面还是挺感兴趣，可能这也和我没有怎么接触过后端的东西有关系吧，前端的一些东西入门还是挺简单的，做出来的东西也特别有意思，可视化比较强。以一个对新鲜事物感兴趣的普通大学生的角度来说：在大学期间我在学院的新闻中心工作了三年，这期间也学会了很多关于计算机的基础技能，比如简单的PS、视频剪辑、图形设计，所以这也造成了我虽然不是一个艺术生，但是对于剪辑和设计之类的东西特别的感兴趣。如果以后能把这两个角度结合起来那我觉得这会是我最喜欢的领域了。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;一位普普通通的的女程序员总结你现在已经掌握的知识&quot;&gt;&lt;strong&gt;&lt;span&gt;一位普普通通的的女“程序员”——总结你现在已经掌握的知识&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;你都具备了哪些专业知识和能力&quot;&gt;&lt;strong&gt;&lt;span&gt;1. 你都具备了哪些专业知识和能力？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;作为计算机科学与技术专业的一名本科生，至今为止学习了一些关于专业方面的课程，例如程序设计、数据结构、编译原理、网络原理、组成原理等等，还有这学期接触的单片机、软件工程、操作系统及数据库等等，其实在课堂上学习的东西只是给我们一个开端，学校的课程学习时间短暂，不可能每一科都让我们有一个非常深入的理解，但是作为这个专业的学生，对于各个方面都有了一定的了解，在了解之后才会对这方面有更浓厚的兴趣。在大学期间学习了C和C++语言，自学了一点点html、css和Js，但只是特别特别浅显的一些东西，距离专业知识这个词还有很长的道路。并且自己编程的能力很一般，这和自己动手实践操作的时间太少有很大的一部分原因，毕竟只有勤奋多练习才能有所提高。&lt;/p&gt;
&lt;h3 id=&quot;你认为你已经为成为一个合格的计算机软件工程是做好准备了吗在专业技术个人能力以及其它方面你还有那些欠缺&quot;&gt;&lt;strong&gt;&lt;span&gt;2. 你认为你已经为成为一个合格的计算机软件工程是做好准备了吗？在专业技术、个人能力以及其它方面你还有那些欠缺？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;我认为现在我并不具备成为一个合格的计算机软件工程师的资格。首先，在专业技术方面，我的编程能力只是能够在完成作业的基础上再多那么一点，距离能够做一名程序员或者说一名工程师还有特别远的距离，并且我对于很多实际项目也没有什么太多的了解，所以并没有做好准备成为一名软件工程师。据我了解做软件工程师需要具备很多能力，不光是动手实践的编程能力，还需要有和团队和谐愉悦的合作能力、良好的沟通和交流能力、对待需求和疑惑能够沉稳不慌张的能力等等。现在的短短几节软件工程课程让我了解到软件工程是将很多学科都紧密的联系在一起，软件需求分析、软件设计、软件构件、测试和维护等等，每一个方面都需要很多专业知识，而我在任何方面都没有太多的经验，欠缺太多了。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;先定一个小目标畅想未来&quot;&gt;&lt;strong&gt;&lt;span&gt;先定一个小目标？——畅想未来&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;对照材料中前人的经历你还准备从事计算机这个行业吗&quot;&gt;&lt;strong&gt;&lt;span&gt;1. 对照材料中前人的经历，你还准备从事计算机这个行业吗？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;看了北航陈彦吉同学的&lt;a href=&quot;http://www.cnblogs.com/ChildishChange/p/7363123.html&quot;&gt;&lt;span&gt;那篇文章&lt;/span&gt;&lt;/a&gt;，以及他文中提到的那些计算机行业的大神们，我深深的感觉到了自己的弱小和卑微，无知和肤浅，有一种大学这几年都白白度过的感觉，自己这三年到底学了什么，为什么人与人之间的差距会这么大，虽说材料中的那些人都是人群中的佼佼者，但是没有对比就没有伤害，就不会有一种自我反省的冲动，也不会清醒地意识到自己只学了这么少的知识，以及我现在这样是否能够满足公司对于毕业生的要求。但是即使这样被打击，我还是会继续努力的，还会从事这个行业，只是会多了更多的反省。&lt;/p&gt;
&lt;h3 id=&quot;你认为与其它专业的同学相比你的优势都有哪些&quot;&gt;&lt;strong&gt;&lt;span&gt;2. 你认为与其它专业的同学相比，你的优势都有哪些？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在阅读的过程中，&lt;a href=&quot;https://coolshell.cn/articles/4561.html&quot;&gt;&lt;span&gt;这篇文章&lt;/span&gt;&lt;/a&gt;也带给了我很大的感触，建议大家去看一下。是否能在这条路上走下去，兴趣是第一大要素，只有喜爱才能投入热情，只有投入了热情才可能会做出成绩。我对于这个专业有着一定的兴趣，但是从另一个角度来说，兴趣和热情又不一定能让你走好这条路，只有自己的能力和强项才可以。从技术和专业层次上来讲，我和其他本专业能力强的同学相比有着很大的差距，所以我并没有太多的优势，这让我惭愧又忐忑，紧张又无助。但是计算机专业是一个发展过于迅速的专业，和其他专业的同学相比，我们所接触到的东西必须是紧跟着社会发展脚步的东西，社会发展越来越迅速，对于计算机行业人才的需求只会越来越大，在就业和薪资方面我们还是很有优势的。&lt;/p&gt;
&lt;h3 id=&quot;对已经不远的将来你的职涯规划是什么&quot;&gt;&lt;strong&gt;&lt;span&gt;3. 对已经不远的将来，你的职涯规划是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;转眼间已经到了大三的下半学期，距离毕业也只有一年的距离了，三年转瞬即逝，对于毕业大部分人都会从两条路中选择其一，考研和就业，而我衡量了多方面的因素决定选择前者。这其中的原因有很多，其中一个原因是我认为自身并没有太多的实力去和那些在专业方面实践能力强，造诣很深的同学相比，所以只能通过最普通的努力方法去改变我的未来。还有一个原因是我想通过再多两年的学习来确定我未来想继续研究的方面是什么，想进一步的去深入学习，为未来打下基础。目前这是最重要的事情，如果能够成功，那么希望能够找到并研究我喜欢的方向，在以后的日子里都对这方面抱有兴趣，一直坚持努力地做下去，成为计算机行业中的一员。&lt;/p&gt;
&lt;p&gt;最后送给自己也送给大家一句话：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;永远要相信旁边的人比你聪明。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;</description>
<pubDate>Fri, 16 Mar 2018 14:20:00 +0000</pubDate>
<dc:creator>明眸善睐</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/joyce4/p/8577141.html</dc:identifier>
</item>
</channel>
</rss>